uint64_t karo::AsyncRequestManagerTemplate<altitude::C3bTileRequestId,altitude::C3bRequestData>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 56);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 120);
      v12 = *(_DWORD *)(v8 + 124);
      v13 = *(_BYTE *)(v8 + 128);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 136;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F82FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::C3bTileRequestId,altitude::C3bRequestData>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19F82FF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::C3bTileRequestId,altitude::C3bRequestData>::waitOnRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  pthread_mutex_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  karo::Job *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  pthread_mutex_t **v21;
  pthread_mutex_t *v22;

  v6 = (pthread_mutex_t **)(a1 + 40);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v9 = *(_QWORD **)(a1 + 72);
  v7 = (_QWORD *)(a1 + 72);
  v8 = v9;
  if (!v9)
    goto LABEL_8;
  v10 = v7;
  do
  {
    v11 = std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100]((uint64_t)(v8 + 4), a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v10 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    v13 = 0;
    v14 = 0;
    goto LABEL_9;
  }
  v18 = (karo::Job *)v10[11];
  v13 = (std::__shared_weak_count *)v10[12];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  pthread_mutex_unlock(*v6);
  if (v18)
  {
    karo::Job::waitToFinish(v18, a3);
    v22 = (pthread_mutex_t *)*((_QWORD *)v18 + 19);
    v21 = (pthread_mutex_t **)((char *)v18 + 152);
    pthread_mutex_lock(v22);
    v14 = (_BYTE)v21[1] & 1;
    v6 = v21;
LABEL_9:
    pthread_mutex_unlock(*v6);
    if (!v13)
      return v14;
    goto LABEL_10;
  }
  v14 = 0;
  if (!v13)
    return v14;
LABEL_10:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v14;
}

void sub_19F830080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::C3bTileRequestId,altitude::C3bRequestData>::getRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  std::string *v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD *)(a1 + 72);
  v9 = *(_QWORD **)(a1 + 72);
  if (!v9)
    goto LABEL_8;
  v10 = (_QWORD *)(a1 + 72);
  do
  {
    v11 = std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100]((uint64_t)(v9 + 4), a2);
    v12 = v9 + 1;
    if (!v11)
    {
      v12 = v9;
      v10 = v9;
    }
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v8 || std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v38, a1, a2, a3);
    v37 = v38;
    *(_OWORD *)a4 = v38;
    v13 = (_QWORD *)*v8;
    v14 = v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v14 = v13;
          v15 = (uint64_t)(v13 + 4);
          if (!std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100](a2, (uint64_t)(v13 + 4)))
            break;
          v13 = (_QWORD *)*v14;
          v8 = v14;
          if (!*v14)
            goto LABEL_14;
        }
        if (!std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100](v15, a2))
          break;
        v8 = v14 + 1;
        v13 = (_QWORD *)v14[1];
        if (!v13)
          goto LABEL_14;
      }
      v16 = (char *)v14;
      v20 = v37;
      v21 = *((_QWORD *)&v37 + 1);
      if (!*((_QWORD *)&v37 + 1))
        goto LABEL_28;
    }
    else
    {
LABEL_14:
      v16 = (char *)operator new(0x68uLL);
      *((_OWORD *)v16 + 2) = *(_OWORD *)a2;
      *((_DWORD *)v16 + 12) = *(_DWORD *)(a2 + 16);
      v17 = (std::string *)(v16 + 56);
      if (*(char *)(a2 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
      }
      else
      {
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
        *((_QWORD *)v16 + 9) = *(_QWORD *)(a2 + 40);
      }
      v16[80] = *(_BYTE *)(a2 + 48);
      *((_QWORD *)v16 + 11) = 0;
      *((_QWORD *)v16 + 12) = 0;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v14;
      *v8 = v16;
      v18 = **(_QWORD **)(a1 + 64);
      v19 = (uint64_t *)v16;
      if (v18)
      {
        *(_QWORD *)(a1 + 64) = v18;
        v19 = (uint64_t *)*v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v19);
      ++*(_QWORD *)(a1 + 80);
      v20 = *(_OWORD *)a4;
      v21 = a4[1];
      if (!v21)
        goto LABEL_28;
    }
    v26 = (unint64_t *)(v21 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
LABEL_28:
    v28 = (std::__shared_weak_count *)*((_QWORD *)v16 + 12);
    *(_OWORD *)(v16 + 88) = v20;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(_QWORD *)(a1 + 48);
    if (v31)
    {
      v32 = *a4;
      v33 = (std::__shared_weak_count *)a4[1];
      *(_QWORD *)&v38 = v32;
      *((_QWORD *)&v38 + 1) = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        karo::JobManager::queueJob(v31, &v38);
        do
          v36 = __ldaxr(v34);
        while (__stlxr(v36 - 1, v34));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      else
      {
        karo::JobManager::queueJob(v31, &v38);
      }
    }
    return;
  }
  v23 = v10[11];
  v22 = v10[12];
  if (v22)
  {
    v24 = (unint64_t *)(v22 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *a4 = v23;
  a4[1] = v22;
}

void sub_19F83032C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL std::less<altitude::C3bTileRequestId>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  int v4;
  const void *v5;
  size_t v6;
  int v7;
  const void *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *(char *)(a1 + 47);
  if (v4 >= 0)
    v5 = (const void *)(a1 + 24);
  else
    v5 = *(const void **)(a1 + 24);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 47);
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(char *)(a2 + 47);
  if (v7 >= 0)
    v8 = (const void *)(a2 + 24);
  else
    v8 = *(const void **)(a2 + 24);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 47);
  else
    v9 = *(_QWORD *)(a2 + 32);
  if (v9 >= v6)
    v10 = v6;
  else
    v10 = v9;
  v11 = memcmp(v5, v8, v10);
  if (v11)
  {
    if (v11 < 0)
      return 1;
  }
  else if (v6 < v9)
  {
    return 1;
  }
  v12 = memcmp(v8, v5, v10);
  if (v12)
  {
    if (v12 < 0)
      return 0;
  }
  else if (v9 < v6)
  {
    return 0;
  }
  v13 = *(_DWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a2 + 16);
  if (v13 < v14)
    return 1;
  if (v14 < v13)
    return 0;
  v16 = *(unsigned __int8 *)(a1 + 48);
  v17 = *(unsigned __int8 *)(a2 + 48);
  if (v16 < v17)
    return 1;
  if (v17 < v16)
    return 0;
  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 0;
  v18 = *(_DWORD *)(a1 + 4);
  v19 = *(_DWORD *)(a2 + 4);
  if (v18 < v19)
    return 1;
  if (v18 > v19)
    return 0;
  v20 = *(_DWORD *)(a1 + 8);
  v21 = *(_DWORD *)(a2 + 8);
  if (v20 < v21)
    return 1;
  if (v20 > v21)
    return 0;
  return *(_DWORD *)(a1 + 12) < *(_DWORD *)(a2 + 12);
}

void std::__shared_ptr_pointer<altitude::C3bLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::C3bLoadJob>,std::allocator<altitude::C3bLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::C3bLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::C3bLoadJob>,std::allocator<altitude::C3bLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 96);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*(char *)(a2 + 79) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  if (*(char *)(a2 + 79) < 0)
LABEL_14:
    operator delete(*(void **)(a2 + 56));
LABEL_15:
  operator delete((void *)a2);
}

void sub_19F830658(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(v1[9]);
  karo::AsyncRequestManager::~AsyncRequestManager((karo::AsyncRequestManager *)v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::C3bTileRequestId,std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::C3bTileRequestId>,true>,std::allocator<std::__value_type<altitude::C3bTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 96);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      {
LABEL_8:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 56));
    goto LABEL_8;
  }
}

void altitude::C3bRequestManager::requestC3b(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, char a5, unsigned __int8 a6, unsigned int a7, unsigned int a8)
{
  _OWORD *v13;
  int v14;
  char v15;
  char v16;
  char v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v28;
  int v29;
  std::string __p;
  char v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  BOOL v35;
  char v36;
  char v37;
  char v38;
  char v39;
  __int16 v40;
  char v41;

  v13 = (_OWORD *)(a4 + 40);
  v14 = *(_DWORD *)(a4 + 28);
  v15 = *(_BYTE *)(a4 + 160);
  v16 = *(_BYTE *)(a4 + 161);
  v17 = *(_BYTE *)(a4 + 162);
  v32 = *(_QWORD *)(a4 + 168);
  if (*(char *)(a4 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a4 + 40), *(_QWORD *)(a4 + 48));
  }
  else
  {
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *v13;
    v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 56);
  }
  if (*(char *)(a4 + 159) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(a4 + 136), *(_QWORD *)(a4 + 144));
  else
    v34 = *(std::string *)(a4 + 136);
  v35 = v14 == 1;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = a5;
  v40 = 1;
  v41 = 0;
  v18 = *(_DWORD *)(a4 + 168);
  v28 = *a3;
  v29 = v18;
  if (*(char *)(a4 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 40), *(_QWORD *)(a4 + 48));
  else
    __p = *(std::string *)v13;
  v31 = 0;
  (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v28, 0, a7, a8, 0, &v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(std::__shared_weak_count **)(a1 + 16);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  if (v19)
    atomic_store(a6, (unsigned __int8 *)(v19 + 504));
  if (!v20)
    goto LABEL_21;
  v23 = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_26:
      operator delete(v33.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
LABEL_21:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
}

void sub_19F830910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  gdc::Error::~Error(&a22);
  _Unwind_Resume(a1);
}

uint64_t altitude::C3bRequestManager::getResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _WORD *a7)
{
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  double v35;
  unint64_t v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  _BYTE *v44;
  int *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  double v76;
  double v77;
  double v78;
  double v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(&v84, a1, a2, 0);
  v14 = v84;
  v82 = v84;
  v83 = v85;
  if (v85)
  {
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  if ((v17 & 1) != 0)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v14 + 48))(&v80, v14);
    v18 = v80;
    v80 = 0uLL;
    v19 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v18;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    if (*((_QWORD *)&v80 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v82;
    if (v82 + 296 != a4)
      std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(a4, *(uint64_t **)(v82 + 296), *(uint64_t **)(v82 + 304), (uint64_t)(*(_QWORD *)(v82 + 304) - *(_QWORD *)(v82 + 296)) >> 4);
    *((_QWORD *)&v80 + 1) = 0;
    v81 = 0;
    *(_QWORD *)&v80 = (char *)&v80 + 8;
    std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)&v80, *(_QWORD **)(v25 + 368), (_QWORD *)(v25 + 376));
    v26 = a5 + 8;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a5 + 8));
    v27 = (_QWORD *)*((_QWORD *)&v80 + 1);
    *(_QWORD *)a5 = v80;
    *(_QWORD *)(a5 + 8) = v27;
    v28 = v81;
    *(_QWORD *)(a5 + 16) = v81;
    if (v28)
    {
      v27[2] = v26;
      *(_QWORD *)&v80 = (char *)&v80 + 8;
      *((_QWORD *)&v80 + 1) = 0;
      v81 = 0;
      v27 = 0;
    }
    else
    {
      *(_QWORD *)a5 = v26;
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v27);
    *a6 = *(_WORD *)(v25 + 506);
    *a7 = *(_WORD *)(v25 + 508);
    v29 = (*(double *)(v25 + 528) - *(double *)(v25 + 512)) * 1000.0;
    v30 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 688);
    if (!v30)
      goto LABEL_49;
    v31 = (int)v29 + 1;
    v32 = *(_QWORD *)(v30 + 216);
    v33 = *(char **)(v30 + 224);
    if ((unint64_t)&v33[-v32] >= 0x51)
    {
      v34 = &v33[-v32 - 4];
      if (v33 != (char *)(v32 + 4))
      {
        v35 = (*(double *)(v25 + 528) - *(double *)(v25 + 512)) * 1000.0;
        memmove(*(void **)(v30 + 216), (const void *)(v32 + 4), (size_t)&v33[-v32 - 4]);
        v29 = v35;
      }
      v33 -= 4;
      *(_QWORD *)(v30 + 224) = &v34[v32];
    }
    v36 = *(_QWORD *)(v30 + 232);
    if ((unint64_t)v33 < v36)
    {
      *(_DWORD *)v33 = v31;
      v37 = v33 + 4;
LABEL_48:
      *(_QWORD *)(v30 + 224) = v37;
LABEL_49:
      v56 = *(_QWORD *)(a1 + 136);
      if (v56)
      {
        v57 = *(double *)(v25 + 528);
        v58 = *(double *)(v25 + 520);
        v59 = *(double *)(v25 + 560);
        v60 = *(double *)(v25 + 536);
        v61 = (v59 - v60) * 1000.0;
        v62 = *(double *)(v25 + 568);
        v63 = *(double *)(v25 + 544);
        v64 = (v62 - v63) * 1000.0;
        v65 = *(double *)(v25 + 552);
        v66 = (v60 - *(double *)(v25 + 512)) * 1000.0;
        v67 = (v63 - v59) * 1000.0;
        v68 = (v65 - v62) * 1000.0;
        v76 = (*(double *)(v25 + 576) - v65) * 1000.0;
        v77 = *(double *)(v25 + 584);
        v78 = *(double *)(v25 + 592);
        v79 = *(double *)(v25 + 600);
        gdc::Statistics::addSampleValue(v56, "C3bLoadJobTotalTime (ms)", 0xACB6353900000018, v29);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobMainTime (ms)", 0xA458119900000017, (v57 - v58) * 1000.0);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobWait0Time (ms)", 0xC40FFE0F00000018, v66);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobStep0Time (ms)", 0xC1585ADE00000018, v61);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobWait1Time (ms)", 0x2BCD953100000018uLL, v67);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobStep1Time (ms)", 0x2E9A31E000000018uLL, v64);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobWait2Time (ms)", 0xC0FA2E3200000018, v68);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobStep2Time (ms)", 0xC5AD8AE300000018, v76);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobDecodeTime (ms)", 0xB9E3537A00000019, v77);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobDecodeMeshTime (ms)", 0x40FA9F620000001DuLL, v78);
        gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 136), "C3bLoadJobDownloadC3bTime (ms)", 0x15ACBEBC0000001EuLL, v79);
      }
      goto LABEL_51;
    }
    v38 = *(char **)(v30 + 216);
    v39 = (v33 - v38) >> 2;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 62)
      abort();
    v41 = v36 - (_QWORD)v38;
    if (v41 >> 1 > v40)
      v40 = v41 >> 1;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
      v42 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      if (v42 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v43 = v29;
      v44 = operator new(4 * v42);
      v29 = v43;
    }
    else
    {
      v44 = 0;
    }
    v45 = (int *)&v44[4 * v39];
    v46 = &v44[4 * v42];
    *v45 = v31;
    v37 = v45 + 1;
    if (v33 != v38)
    {
      v47 = v33 - v38 - 4;
      if (v47 < 0x2C)
      {
        v48 = v33;
        goto LABEL_45;
      }
      if ((unint64_t)(v38 - v44) < 0x20)
      {
        v48 = v33;
        do
        {
LABEL_45:
          v54 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *--v45 = v54;
        }
        while (v48 != v38);
        goto LABEL_46;
      }
      v49 = (v47 >> 2) + 1;
      v48 = &v33[-4 * (v49 & 0x7FFFFFFFFFFFFFF8)];
      v50 = &v44[4 * v39 - 16];
      v51 = v33 - 16;
      v52 = v49 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v53 = *(_OWORD *)v51;
        *(v50 - 1) = *((_OWORD *)v51 - 1);
        *v50 = v53;
        v50 -= 2;
        v51 -= 32;
        v52 -= 8;
      }
      while (v52);
      v45 -= v49 & 0x7FFFFFFFFFFFFFF8;
      if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_45;
    }
LABEL_46:
    *(_QWORD *)(v30 + 216) = v45;
    *(_QWORD *)(v30 + 224) = v37;
    *(_QWORD *)(v30 + 232) = v46;
    if (v38)
    {
      v55 = v29;
      operator delete(v38);
      v29 = v55;
    }
    goto LABEL_48;
  }
LABEL_51:
  v69 = v83;
  if (v83)
  {
    v70 = (unint64_t *)&v83->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v85;
  if (v85)
  {
    v73 = (unint64_t *)&v85->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  return v17;
}

void sub_19F830F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 40));
  _Unwind_Resume(a1);
}

unsigned __int8 *md::RouteLineData::mapDataKeyFromTile@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 *a2@<X1>, int a3@<W2>, unsigned __int8 *a4@<X8>)
{
  int v4;
  int32x2_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = vrev64_s32(*(int32x2_t *)(a2 + 4));
  v4 = *a2;
  v7 = a2[1];
  v8 = v4;
  v9 = a3;
  return gdc::LayerDataRequestKey::LayerDataRequestKey(a4, a1, 15, (int *)&v6, 5);
}

void md::RouteLineData::~RouteLineData(md::RouteLineData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void (**v10)(char *);
  BOOL v11;

  *(_QWORD *)this = &off_1E428E618;
  *((_QWORD *)this + 79) = &unk_1E428E658;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)*((_QWORD *)this + 93);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = (char *)*((_QWORD *)this + 93);
    if (!v5)
      goto LABEL_12;
  }
  v6 = (char *)*((_QWORD *)this + 94);
  v7 = v5;
  if (v6 != v5)
  {
    v8 = v6 - 24;
    v9 = v6 - 24;
    do
    {
      v10 = *(void (***)(char *))v9;
      v9 -= 24;
      (*v10)(v8);
      v11 = v8 == v5;
      v8 = v9;
    }
    while (!v11);
    v7 = (char *)*((_QWORD *)this + 93);
  }
  *((_QWORD *)this + 94) = v5;
  operator delete(v7);
LABEL_12:
  std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(*((_QWORD **)this + 91));
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void (**v10)(char *);
  BOOL v11;

  *(_QWORD *)this = &off_1E428E618;
  *((_QWORD *)this + 79) = &unk_1E428E658;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)*((_QWORD *)this + 93);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    v5 = (char *)*((_QWORD *)this + 93);
    if (!v5)
      goto LABEL_12;
  }
  v6 = (char *)*((_QWORD *)this + 94);
  v7 = v5;
  if (v6 != v5)
  {
    v8 = v6 - 24;
    v9 = v6 - 24;
    do
    {
      v10 = *(void (***)(char *))v9;
      v9 -= 24;
      (*v10)(v8);
      v11 = v8 == v5;
      v8 = v9;
    }
    while (!v11);
    v7 = (char *)*((_QWORD *)this + 93);
  }
  *((_QWORD *)this + 94) = v5;
  operator delete(v7);
LABEL_12:
  std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(*((_QWORD **)this + 91));
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::TransitTransferAnnotationLabelPart::~TransitTransferAnnotationLabelPart(md::TransitTransferAnnotationLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::TransitTransferAnnotationLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                     + 40))(mdm::Allocator::instance(void)::alloc, this, 704);
}

uint64_t md::TransitTransferAnnotationLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, __n128 a5, __n128 a6, double a7)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;

  if (*(_BYTE *)(a1 + 696))
    return 17;
  result = md::StackLabelPart::layoutForStaging(a1, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)result == 37)
  {
    if (*(_BYTE *)(a1 + 695))
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (*(_BYTE *)(v9 + 1223) != 3)
      {
        v10 = *(unsigned __int8 *)(a1 + 694);
        if (~v10 + ((uint64_t)(*(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576)) >> 3) == v10)
        {
          if (*(_BYTE *)(a1 + 694))
          {
            v11 = 0;
            v12 = 8 * v10 + 8;
            while (1)
            {
              v13 = (uint64_t *)(*(_QWORD *)(a1 + 576) + 8 * v11);
              v14 = *v13;
              v15 = *(uint64_t *)((char *)v13 + v12);
              v16 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v14 + 640) + 143));
              if ((v16 & 1) != 0)
              {
                v17 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v15 + 640) + 143));
                if ((v17 & 1) != 0)
                {
                  v18 = *(_QWORD *)(v14 + 640);
                  v19 = *(_QWORD *)(v15 + 640);
                  if ((md::LabelIcon::operator==(v18, v19) & 1) == 0)
                  {
                    v20 = *(_QWORD *)(v19 + 16);
                    v21 = *(id *)(v18 + 16);
                    LODWORD(v20) = objc_msgSend(v21, "compareTo:", v20);

                    if (!(_DWORD)v20)
                    {
                      v22 = *(_QWORD *)(a1 + 16);
                      if (*(_BYTE *)(v22 + 1223) != 3)
                        *(_BYTE *)(v22 + 1223) = 2;
                      *(_BYTE *)(a1 + 696) = 1;
                      return 17;
                    }
                  }
                  *(_BYTE *)(a1 + 695) = 0;
                }
              }
              ++v11;
              result = 37;
              if (v11 >= *(unsigned __int8 *)(a1 + 694))
                return result;
            }
          }
        }
        else
        {
          *(_BYTE *)(v9 + 1223) = 3;
          *(_BYTE *)(a1 + 695) = 0;
        }
      }
    }
    return 37;
  }
  return result;
}

void sub_19F831450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::TransitTransferAnnotationLabelPart::needsCrossfade(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  BOOL v11;

  if (*(_BYTE *)(a1[2] + 1223) == 2)
    return 1;
  v5 = a1[72];
  v6 = a1[73];
  if (v5 == v6)
    return 0;
  v10 = v5 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v10 - 8) + 760))(*(_QWORD *)(v10 - 8), a2, a3, a4);
    if ((result & 1) != 0)
      break;
    v11 = v10 == v6;
    v10 += 8;
  }
  while (!v11);
  return result;
}

char *md::TransitTransferAnnotationLabelPart::debugCompositeClassName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3D80;
  strcpy(result, "TransitTransferAnnotationLabelPart");
  return result;
}

void sub_19F831600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F831784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::StandardRouteOverlayCache::onPolylineAddedToGroup(md::StandardRouteOverlayCache *this, VKPolylineGroupOverlay *a2, VKPolylineOverlay *a3)
{
  VKPolylineGroupOverlay *v5;
  VKPolylineOverlay *v6;
  NSObject *v7;
  void *v8;
  VKPolylineGroupOverlay *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  _BYTE buf[22];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (GEOGetVectorKitRouteLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
  v7 = (id)GEOGetVectorKitRouteLog_log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    -[VKPolylineGroupOverlay polylines](v5, "polylines");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v5;
    v20 = 2048;
    v21 = objc_msgSend(v8, "count");
    _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_INFO, "Added polyline %@ to polylineGroupOverlay %@. PolylineOverlay count %zu", buf, 0x20u);

  }
  v9 = v5;
  v10 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)this + 17, (unint64_t)v9);
  if (v10)
  {
    v12 = (uint64_t **)v10[3];
    v11 = (std::__shared_weak_count *)v10[4];
    *(_QWORD *)buf = v12;
    *(_QWORD *)&buf[8] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    if (v12)
    {
      md::RouteLineOverlayGroup::addPolyline(v12, v6);
      v15 = **(_QWORD **)(*((_QWORD *)this + 5) + 88);
      if (v15)
      {
        v18 = 7;
        md::MapEngine::setNeedsTick(v15, &v18);
      }
    }
    if (v11)
    {
      v16 = (unint64_t *)&v11->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {

  }
}

void sub_19F831BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void md::StandardRouteOverlayCache::onPolylineRemovedFromGroup(md::StandardRouteOverlayCache *this, VKPolylineGroupOverlay *a2, VKPolylineOverlay *a3)
{
  VKPolylineGroupOverlay *v5;
  VKPolylineOverlay *v6;
  NSObject *v7;
  void *v8;
  VKPolylineGroupOverlay *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  VKPolylineOverlay *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  BOOL v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t *v39;
  uint64_t **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *i;
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  void (**v55)(uint64_t *);
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  VKPolylineOverlay *v62;
  _BYTE buf[22];
  __int16 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (GEOGetVectorKitRouteLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
  v7 = (id)GEOGetVectorKitRouteLog_log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    -[VKPolylineGroupOverlay polylines](v5, "polylines");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v5;
    v64 = 2048;
    v65 = objc_msgSend(v8, "count");
    _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_INFO, "Removed polyline %@ from polylineGroupOverlay %@. PolylineOverlay count %zu", buf, 0x20u);

  }
  v9 = v5;
  v10 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)this + 17, (unint64_t)v9);
  if (v10)
  {
    v12 = (uint64_t **)v10[3];
    v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    if (v12)
    {
      v15 = v6;
      v62 = v15;
      v16 = v12 + 6;
      v17 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v12 + 6, (unint64_t)v15);
      if (v17)
      {
        v18 = v17;
        v19 = v17[3];
        v20 = v17[4];
        *(_QWORD *)buf = v19;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = v12[1];
        if (v23)
        {
          v24 = (uint64_t *)(v12 + 1);
          v25 = v12[1];
          do
          {
            v26 = v25[4];
            v27 = v26 >= v19;
            if (v26 >= v19)
              v28 = (uint64_t **)v25;
            else
              v28 = (uint64_t **)(v25 + 1);
            if (v27)
              v24 = v25;
            v25 = *v28;
          }
          while (*v28);
          if (v24 != (uint64_t *)(v12 + 1) && v19 >= v24[4])
          {
            v29 = (uint64_t *)v24[1];
            if (v29)
            {
              do
              {
                v30 = v29;
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            else
            {
              v31 = v24;
              do
              {
                v30 = (uint64_t *)v31[2];
                v32 = *v30 == (_QWORD)v31;
                v31 = v30;
              }
              while (!v32);
            }
            if (*v12 == v24)
              *v12 = v30;
            v12[2] = (uint64_t *)((char *)v12[2] - 1);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v23, v24);
            v33 = (std::__shared_weak_count *)v24[5];
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            operator delete(v24);
          }
        }
        v36 = (int8x8_t)v12[7];
        v37 = v18[1];
        v38 = (uint8x8_t)vcnt_s8(v36);
        v38.i16[0] = vaddlv_u8(v38);
        if (v38.u32[0] > 1uLL)
        {
          if (v37 >= *(_QWORD *)&v36)
            v37 %= *(_QWORD *)&v36;
        }
        else
        {
          v37 &= *(_QWORD *)&v36 - 1;
        }
        v39 = *(uint64_t **)(*v16 + 8 * v37);
        do
        {
          v40 = (uint64_t **)v39;
          v39 = (uint64_t *)*v39;
        }
        while (v39 != v18);
        if (v40 == v12 + 8)
          goto LABEL_57;
        v41 = (unint64_t)v40[1];
        if (v38.u32[0] > 1uLL)
        {
          if (v41 >= *(_QWORD *)&v36)
            v41 %= *(_QWORD *)&v36;
        }
        else
        {
          v41 &= *(_QWORD *)&v36 - 1;
        }
        if (v41 != v37)
        {
LABEL_57:
          if (!*v18)
            goto LABEL_58;
          v42 = *(_QWORD *)(*v18 + 8);
          if (v38.u32[0] > 1uLL)
          {
            if (v42 >= *(_QWORD *)&v36)
              v42 %= *(_QWORD *)&v36;
          }
          else
          {
            v42 &= *(_QWORD *)&v36 - 1;
          }
          if (v42 != v37)
LABEL_58:
            *(_QWORD *)(*v16 + 8 * v37) = 0;
        }
        v43 = *v18;
        if (*v18)
        {
          v44 = *(_QWORD *)(v43 + 8);
          if (v38.u32[0] > 1uLL)
          {
            if (v44 >= *(_QWORD *)&v36)
              v44 %= *(_QWORD *)&v36;
          }
          else
          {
            v44 &= *(_QWORD *)&v36 - 1;
          }
          if (v44 != v37)
          {
            *(_QWORD *)(*v16 + 8 * v44) = v40;
            v43 = *v18;
          }
        }
        *v40 = (uint64_t *)v43;
        *v18 = 0;
        v12[9] = (uint64_t *)((char *)v12[9] - 1);
        v45 = (std::__shared_weak_count *)v18[4];
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        operator delete(v18);
        v48 = v12[3];
        v49 = v12[4];
        if (v48 != v49)
        {
          while ((geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==((void *)v48[1], (void **)&v62) & 1) == 0)
          {
            v48 += 3;
            if (v48 == v49)
            {
              v48 = v49;
              break;
            }
          }
        }
        if (v48 != v49)
        {
          for (i = v48 + 3; i != v49; i += 3)
          {
            if ((geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==((void *)i[1], (void **)&v62) & 1) == 0)
            {
              objc_storeStrong((id *)v48 + 1, (id)i[1]);
              v51 = (void *)i[1];
              i[1] = 0;

              v48 += 3;
            }
          }
        }
        v52 = v12[4];
        if (v52 != v48)
        {
          v53 = v52 - 3;
          v54 = v53;
          do
          {
            v55 = (void (**)(uint64_t *))*v54;
            v54 -= 3;
            (*v55)(v53);
            v32 = v53 == v48;
            v53 = v54;
          }
          while (!v32);
          v12[4] = v48;
        }
        v56 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v57 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v15 = v62;
      }

      v59 = **(_QWORD **)(*((_QWORD *)this + 5) + 88);
      if (v59)
      {
        buf[0] = 7;
        md::MapEngine::setNeedsTick(v59, buf);
      }
    }
    if (v11)
    {
      v60 = (unint64_t *)&v11->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {

  }
}

void sub_19F83218C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void md::StandardRouteOverlayCache::onPolylineSelectedInGroup(md::StandardRouteOverlayCache *this, VKPolylineGroupOverlay *a2, VKPolylineOverlay *a3)
{
  VKPolylineGroupOverlay *v5;
  VKPolylineOverlay *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  VKPolylineOverlay *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  VKPolylineGroupOverlay *v34;
  char v35;

  v5 = a2;
  v6 = a3;
  v34 = v5;
  v7 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)this + 17, (unint64_t)v34);
  if (!v7)
  {

    goto LABEL_48;
  }
  v9 = (_QWORD *)v7[3];
  v8 = (std::__shared_weak_count *)v7[4];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  if (v9)
  {
    v12 = (std::__shared_weak_count *)v9[14];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = v6;
    if (v15)
    {
      v16 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v9 + 6, (unint64_t)v15);
      if (!v16)
      {
LABEL_36:

        v29 = **(_QWORD **)(*((_QWORD *)this + 5) + 88);
        if (v29)
        {
          v35 = 7;
          md::MapEngine::setNeedsTick(v29, &v35);
        }
        if (v12)
        {
          v30 = (unint64_t *)&v12->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        goto LABEL_43;
      }
      v17 = v16[3];
      v18 = (std::__shared_weak_count *)v16[4];
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    v21 = v9[13];
    if (v21 != v17)
    {
      if (v21)
        *(_BYTE *)(v21 + 620) = 0;
      if (v18)
      {
        v22 = (unint64_t *)&v18->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (std::__shared_weak_count *)v9[14];
      v9[13] = v17;
      v9[14] = v18;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        v17 = v9[13];
      }
      if (v17)
        *(_BYTE *)(v17 + 620) = 1;
    }
    if (v18)
    {
      v27 = (unint64_t *)&v18->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    goto LABEL_36;
  }
LABEL_43:
  if (v8)
  {
    v32 = (unint64_t *)&v8->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_48:

}

void md::StandardRouteOverlayCache::onPolylineFocusedInGroup(md::StandardRouteOverlayCache *this, VKPolylineGroupOverlay *a2, VKPolylineOverlay *a3)
{
  uint64_t v3;
  char v4;

  v3 = **(_QWORD **)(*((_QWORD *)this + 5) + 88);
  if (v3)
  {
    v4 = 7;
    md::MapEngine::setNeedsTick(v3, &v4);
  }
}

void md::StandardRouteOverlayCache::onPolylineSkippedInGroup(md::StandardRouteOverlayCache *this, VKPolylineGroupOverlay *a2, VKPolylineOverlay *a3)
{
  VKPolylineGroupOverlay *v5;
  VKPolylineOverlay *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  VKPolylineOverlay *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  VKPolylineGroupOverlay *v27;
  char v28;

  v5 = a2;
  v6 = a3;
  v27 = v5;
  v7 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)this + 17, (unint64_t)v27);
  if (!v7)
  {

    goto LABEL_36;
  }
  v9 = (_QWORD *)v7[3];
  v8 = (std::__shared_weak_count *)v7[4];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  if (v9)
  {
    v12 = v6;
    if (v12)
    {
      v13 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v9 + 6, (unint64_t)v12);
      if (v13)
      {
        v14 = v13[3];
        v15 = (std::__shared_weak_count *)v13[4];
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          if (v9[15] == v14)
          {
LABEL_25:
            v22 = (unint64_t *)&v15->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
            goto LABEL_29;
          }
          do
            v18 = __ldxr(v16);
          while (__stxr(v18 + 1, v16));
LABEL_19:
          v19 = (std::__shared_weak_count *)v9[16];
          v9[15] = v14;
          v9[16] = v15;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (!v15)
            goto LABEL_29;
          goto LABEL_25;
        }
        if (v9[15] != v14)
        {
          v15 = 0;
          goto LABEL_19;
        }
      }
    }
    else if (v9[15])
    {
      v15 = 0;
      v14 = 0;
      goto LABEL_19;
    }
LABEL_29:

    v24 = **(_QWORD **)(*((_QWORD *)this + 5) + 88);
    if (v24)
    {
      v28 = 7;
      md::MapEngine::setNeedsTick(v24, &v28);
    }
  }
  if (v8)
  {
    v25 = (unint64_t *)&v8->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_36:

}

uint64_t md::StandardRouteOverlayCache::hasPolylineOverlay(md::StandardRouteOverlayCache *this, VKPolylineOverlay *a2)
{
  VKPolylineOverlay *v3;
  char *v4;
  char *v5;
  VKPolylineOverlay *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  VKPolylineOverlay **v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (char *)*((_QWORD *)this + 6);
  v5 = (char *)this + 56;
  if (v4 == (char *)this + 56)
  {
LABEL_24:
    v15 = 0;
    goto LABEL_27;
  }
  while (1)
  {
    v6 = (VKPolylineOverlay *)*((id *)v4 + 4);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      break;
    if (v6 == v3)
    {
      v6 = v3;
      goto LABEL_26;
    }
LABEL_18:

    v12 = (char *)*((_QWORD *)v4 + 1);
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = *(char **)v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (char *)*((_QWORD *)v4 + 2);
        v14 = *(_QWORD *)v13 == (_QWORD)v4;
        v4 = v13;
      }
      while (!v14);
    }
    v4 = v13;
    if (v13 == v5)
      goto LABEL_24;
  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[VKPolylineOverlay polylines](v6, "polylines", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (!v8)
  {
LABEL_16:

    goto LABEL_18;
  }
  v9 = *(_QWORD *)v18;
LABEL_5:
  if (*(_QWORD *)v18 == v9)
  {
    v10 = (VKPolylineOverlay **)*((_QWORD *)&v17 + 1);
    while (*v10 != v3)
    {
      ++v10;
      if (!--v8)
        goto LABEL_15;
    }
  }
  else
  {
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v18 != v9)
        objc_enumerationMutation(v7);
      if (*(VKPolylineOverlay **)(*((_QWORD *)&v17 + 1) + 8 * v11) == v3)
        break;
      if (v8 == ++v11)
      {
LABEL_15:
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v8)
          goto LABEL_5;
        goto LABEL_16;
      }
    }
  }

LABEL_26:
  v15 = 1;
LABEL_27:

  return v15;
}

void sub_19F832820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

float md::StandardRouteOverlayCache::routeLineHalfWidthAtZ(VKPolylineOverlay *this, VKPolylineOverlay *a2, float a3)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  float v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  char v30;

  md::StandardRouteOverlayCache::getInternalOverlay((md::StandardRouteOverlayCache *)&v21, this, a2);
  v4 = 0.0;
  if (v21)
  {
    v5 = *(_QWORD *)(v21 + 504);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 280);
      v7 = *(std::__shared_weak_count **)(v5 + 288);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v26 = v7;
        v23 = 0;
        v24 = 0;
        v28 = v7;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      else
      {
        v26 = 0;
        v23 = 0;
        v24 = 0;
        v28 = 0;
      }
      v25 = v6;
      v29[0] = 0;
      v29[1] = 0;
      v27 = v6;
      v30 = 0;
      if (v6)
        LOBYTE(v6) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v29);
      v30 = v6;
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v13 = v24;
      if (!v24)
        goto LABEL_21;
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (v30)
          goto LABEL_22;
      }
      else
      {
LABEL_21:
        if (v30)
        {
LABEL_22:
          md::RouteLineSection::halfWidthAtZoom(&v27, a3);
          v4 = v16;
LABEL_25:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v27);
          goto LABEL_26;
        }
      }
      v4 = 0.0;
      goto LABEL_25;
    }
  }
LABEL_26:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v4;
}

void sub_19F8329F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::StandardRouteOverlayCache::isStandard(md::StandardRouteOverlayCache *this)
{
  return 1;
}

uint64_t md::StandardRouteOverlayCache::addOverlay(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  VKPolylineOverlay *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  double v27;
  id v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  float v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  size_t prime;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  float v53;
  float v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  size_t v63;
  size_t v64;
  size_t v65;
  _QWORD *i;
  size_t v67;
  uint64_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  size_t v76;
  size_t v77;
  size_t v78;
  _QWORD *k;
  size_t v80;
  uint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  size_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  size_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t **v103;
  uint64_t **v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t **v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  id v115;
  char *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  BOOL v130[4];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  _BYTE buf[22];
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  _BYTE v144[128];
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (!v5)
    return 0;
  v6 = v5;
  objc_opt_class();
  *(_DWORD *)v130 = a3;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v10 = (_QWORD *)(a1 + 96);
    if (std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(a1 + 96), (unint64_t)v6))
    {
      if (GEOGetVectorKitRouteLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
      v7 = (unint64_t)(id)GEOGetVectorKitRouteLog_log;
      if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_19F029000, (os_log_t)v7, OS_LOG_TYPE_INFO, "Failed to add overlay  %@. It is already being tracked", buf, 0xCu);
        v9 = 0;
        goto LABEL_231;
      }
      goto LABEL_15;
    }
    v24 = v6;
    v25 = (std::__shared_weak_count *)operator new(0x378uLL);
    v25->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    v25->__shared_weak_owners_ = 0;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB7F0;
    md::RouteLineOverlay::RouteLineOverlay((md::RouteLineOverlay *)&v25[1], v24, a3, v27);
    v137 = v25 + 1;
    v138 = v25;

    v28 = v24;
    v29 = v28;
    *(_QWORD *)&v132 = v28;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v31 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v28) + 8) ^ ((unint64_t)v28 >> 32));
    v32 = 0x9DDFEA08EB382D69 * (((unint64_t)v28 >> 32) ^ (v31 >> 47) ^ v31);
    v33 = v32 ^ (v32 >> 47);
    v34 = 0x9DDFEA08EB382D69 * v33;
    v35 = *(_QWORD *)(a1 + 104);
    if (v35)
    {
      v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
      v36.i16[0] = vaddlv_u8(v36);
      if (v36.u32[0] > 1uLL)
      {
        p_shared_owners = (unint64_t *)(0x9DDFEA08EB382D69 * v33);
        if (v34 >= v35)
          p_shared_owners = (unint64_t *)(v34 % v35);
      }
      else
      {
        p_shared_owners = (unint64_t *)(v34 & (v35 - 1));
      }
      v37 = *(_QWORD **)(*v10 + 8 * (_QWORD)p_shared_owners);
      if (v37)
      {
        v38 = (_QWORD *)*v37;
        if (v38)
        {
          if (v36.u32[0] < 2uLL)
          {
            while (1)
            {
              v40 = v38[1];
              if (v40 == v34)
              {
                if ((id)v38[2] == v28)
                  goto LABEL_233;
              }
              else if ((unint64_t *)(v40 & (v35 - 1)) != p_shared_owners)
              {
                goto LABEL_52;
              }
              v38 = (_QWORD *)*v38;
              if (!v38)
                goto LABEL_52;
            }
          }
          do
          {
            v39 = v38[1];
            if (v39 == v34)
            {
              if ((id)v38[2] == v28)
              {
LABEL_233:
                v121 = (unint64_t *)&v25->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                  std::__shared_weak_count::__release_weak(v25);
                }
LABEL_162:

                if (v138)
                {
                  v91 = &v138->__shared_owners_;
                  do
                    v92 = __ldaxr((unint64_t *)v91);
                  while (__stlxr(v92 - 1, (unint64_t *)v91));
                  if (!v92)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                if (a3)
                  goto LABEL_202;
                goto LABEL_212;
              }
            }
            else
            {
              if (v39 >= v35)
                v39 %= v35;
              if ((unint64_t *)v39 != p_shared_owners)
                break;
            }
            v38 = (_QWORD *)*v38;
          }
          while (v38);
        }
      }
    }
LABEL_52:
    v41 = operator new(0x28uLL);
    *(_QWORD *)buf = v41;
    *(_QWORD *)&buf[8] = a1 + 112;
    v129 = (_QWORD *)(a1 + 112);
    *v41 = 0;
    v41[1] = v34;
    *((_QWORD *)&v132 + 1) = v25 + 1;
    *((_OWORD *)v41 + 1) = v132;
    v41[4] = v25;
    buf[16] = 1;
    v42 = (float)(unint64_t)(*(_QWORD *)(a1 + 120) + 1);
    v43 = *(float *)(a1 + 128);
    if (v35 && (float)(v43 * (float)v35) >= v42)
    {
LABEL_152:
      v88 = (_QWORD *)*v10;
      v89 = *(_QWORD **)(*v10 + 8 * (_QWORD)p_shared_owners);
      if (v89)
      {
        *v41 = *v89;
      }
      else
      {
        *v41 = *v129;
        *v129 = v41;
        v88[(_QWORD)p_shared_owners] = v129;
        if (!*v41)
        {
LABEL_161:
          ++*(_QWORD *)(a1 + 120);
          goto LABEL_162;
        }
        v90 = *(_QWORD *)(*v41 + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v90 >= v35)
            v90 %= v35;
        }
        else
        {
          v90 &= v35 - 1;
        }
        v89 = (_QWORD *)(*v10 + 8 * v90);
      }
      *v89 = v41;
      goto LABEL_161;
    }
    v44 = 1;
    if (v35 >= 3)
      v44 = (v35 & (v35 - 1)) != 0;
    v45 = v44 | (2 * v35);
    v46 = vcvtps_u32_f32(v42 / v43);
    if (v45 <= v46)
      prime = v46;
    else
      prime = v45;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v35 = *(_QWORD *)(a1 + 104);
    }
    if (prime <= v35)
    {
      if (prime >= v35)
        goto LABEL_139;
      v69 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 120) / *(float *)(a1 + 128));
      if (v35 < 3 || (v70 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
      {
        v69 = std::__next_prime(v69);
      }
      else
      {
        v71 = 1 << -(char)__clz(v69 - 1);
        if (v69 >= 2)
          v69 = v71;
      }
      if (prime <= v69)
        prime = v69;
      if (prime >= v35)
      {
        v35 = *(_QWORD *)(a1 + 104);
LABEL_139:
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v34 >= v35)
            p_shared_owners = (unint64_t *)(v34 % v35);
          else
            p_shared_owners = (unint64_t *)v34;
        }
        else
        {
          p_shared_owners = (unint64_t *)((v35 - 1) & v34);
        }
        goto LABEL_152;
      }
      if (!prime)
      {
        v125 = (_QWORD *)*v10;
        *v10 = 0;
        if (v125)
          operator delete(v125);
        v35 = 0;
        *(_QWORD *)(a1 + 104) = 0;
        goto LABEL_139;
      }
    }
    if (prime >> 61)
      goto LABEL_259;
    v59 = operator new(8 * prime);
    v60 = (_QWORD *)*v10;
    *v10 = v59;
    if (v60)
      operator delete(v60);
    v61 = 0;
    *(_QWORD *)(a1 + 104) = prime;
    do
      *(_QWORD *)(*v10 + 8 * v61++) = 0;
    while (prime != v61);
    v62 = (_QWORD *)*v129;
    if (!*v129)
    {
LABEL_138:
      v35 = prime;
      goto LABEL_139;
    }
    v63 = v62[1];
    v64 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v65 = v63 & v64;
      *(_QWORD *)(*v10 + 8 * v65) = v129;
      for (i = (_QWORD *)*v62; *v62; i = (_QWORD *)*v62)
      {
        v67 = i[1] & v64;
        if (v67 == v65)
        {
          v62 = i;
        }
        else if (*(_QWORD *)(*v10 + 8 * v67))
        {
          *v62 = *i;
          v68 = 8 * v67;
          *i = **(_QWORD **)(*v10 + v68);
          **(_QWORD **)(*v10 + v68) = i;
        }
        else
        {
          *(_QWORD *)(*v10 + 8 * v67) = v62;
          v62 = i;
          v65 = v67;
        }
      }
      goto LABEL_138;
    }
    if (v63 >= prime)
      v63 %= prime;
    *(_QWORD *)(*v10 + 8 * v63) = v129;
    v85 = (_QWORD *)*v62;
    if (!*v62)
      goto LABEL_138;
    while (1)
    {
      v87 = v85[1];
      if (v87 >= prime)
        v87 %= prime;
      if (v87 != v63)
      {
        if (!*(_QWORD *)(*v10 + 8 * v87))
        {
          *(_QWORD *)(*v10 + 8 * v87) = v62;
          goto LABEL_143;
        }
        *v62 = *v85;
        v86 = 8 * v87;
        *v85 = **(_QWORD **)(*v10 + v86);
        **(_QWORD **)(*v10 + v86) = v85;
        v85 = v62;
      }
      v87 = v63;
LABEL_143:
      v62 = v85;
      v85 = (_QWORD *)*v85;
      v63 = v87;
      if (!v85)
        goto LABEL_138;
    }
  }
  v7 = v6;
  if (std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(a1 + 136), v7))
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v8 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_INFO, "Failed to add overlay %@. It is already being tracked", buf, 0xCu);
    }

LABEL_15:
    v9 = 0;
    goto LABEL_231;
  }
  v11 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC820;
  v11[1].__shared_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&v11[1].__shared_owners_;
  v11[1].__shared_weak_owners_ = 0;
  v11[2].std::__shared_count = 0u;
  *(_OWORD *)&v11[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[3].__shared_owners_ = 0u;
  v11[4].__vftable = 0;
  LODWORD(v11[4].__shared_owners_) = 1065353216;
  v11[4].__shared_weak_owners_ = 0;
  objc_initWeak((id *)&v11[5].__vftable, (id)v7);
  *(_OWORD *)&v11[5].__shared_owners_ = 0u;
  v11[6].std::__shared_count = 0u;
  LOBYTE(v11[6].__shared_weak_owners_) = a3;
  v137 = v11 + 1;
  v138 = v11;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  v136 = 0u;
  objc_msgSend((id)v7, "polylines");
  v13 = objc_claimAutoreleasedReturnValue();
  v128 = (_QWORD *)(a1 + 136);
  v14 = objc_msgSend((id)v13, "countByEnumeratingWithState:objects:count:", &v133, v144, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v134;
    do
    {
      for (j = 0; j != v14; ++j)
      {
        if (*(_QWORD *)v134 != v15)
          objc_enumerationMutation((id)v13);
        md::RouteLineOverlayGroup::addPolyline((uint64_t **)&v11[1], *(VKPolylineOverlay **)(*((_QWORD *)&v133 + 1) + 8 * j));
      }
      v14 = objc_msgSend((id)v13, "countByEnumeratingWithState:objects:count:", &v133, v144, 16);
    }
    while (v14);
  }

  *(_QWORD *)&v131 = v7;
  do
    v17 = __ldxr(v12);
  while (__stxr(v17 + 1, v12));
  v18 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  v19 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v18 >> 47) ^ v18);
  v20 = v19 ^ (v19 >> 47);
  v21 = 0x9DDFEA08EB382D69 * v20;
  v22 = *(_QWORD *)(a1 + 144);
  if (!v22)
    goto LABEL_78;
  v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
  v23.i16[0] = vaddlv_u8(v23);
  if (v23.u32[0] > 1uLL)
  {
    v13 = 0x9DDFEA08EB382D69 * v20;
    if (v21 >= v22)
      v13 = v21 % v22;
  }
  else
  {
    v13 = v21 & (v22 - 1);
  }
  v48 = *(_QWORD **)(*v128 + 8 * v13);
  if (!v48 || (v49 = (_QWORD *)*v48) == 0)
  {
LABEL_78:
    v52 = operator new(0x28uLL);
    *(_QWORD *)buf = v52;
    *(_QWORD *)&buf[8] = a1 + 152;
    v127 = (_QWORD *)(a1 + 152);
    *v52 = 0;
    v52[1] = v21;
    *((_QWORD *)&v131 + 1) = v11 + 1;
    *((_OWORD *)v52 + 1) = v131;
    v52[4] = v11;
    buf[16] = 1;
    v53 = (float)(unint64_t)(*(_QWORD *)(a1 + 160) + 1);
    v54 = *(float *)(a1 + 168);
    if (v22 && (float)(v54 * (float)v22) >= v53)
    {
LABEL_186:
      v96 = (_QWORD *)*v128;
      v97 = *(_QWORD **)(*v128 + 8 * v13);
      if (v97)
      {
        *v52 = *v97;
      }
      else
      {
        *v52 = *v127;
        *v127 = v52;
        v96[v13] = v127;
        if (!*v52)
        {
LABEL_195:
          ++*(_QWORD *)(a1 + 160);
          goto LABEL_196;
        }
        v98 = *(_QWORD *)(*v52 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v98 >= v22)
            v98 %= v22;
        }
        else
        {
          v98 &= v22 - 1;
        }
        v97 = (_QWORD *)(*v128 + 8 * v98);
      }
      *v97 = v52;
      goto LABEL_195;
    }
    v55 = 1;
    if (v22 >= 3)
      v55 = (v22 & (v22 - 1)) != 0;
    v56 = v55 | (2 * v22);
    v57 = vcvtps_u32_f32(v53 / v54);
    if (v56 <= v57)
      v58 = v57;
    else
      v58 = v56;
    if (v58 == 1)
    {
      v58 = 2;
    }
    else if ((v58 & (v58 - 1)) != 0)
    {
      v58 = std::__next_prime(v58);
      v22 = *(_QWORD *)(a1 + 144);
    }
    if (v58 <= v22)
    {
      if (v58 >= v22)
        goto LABEL_173;
      v82 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
      if (v22 < 3 || (v83 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
      {
        v82 = std::__next_prime(v82);
      }
      else
      {
        v84 = 1 << -(char)__clz(v82 - 1);
        if (v82 >= 2)
          v82 = v84;
      }
      if (v58 <= v82)
        v58 = v82;
      if (v58 >= v22)
      {
        v22 = *(_QWORD *)(a1 + 144);
LABEL_173:
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v21 >= v22)
            v13 = v21 % v22;
          else
            v13 = v21;
        }
        else
        {
          v13 = (v22 - 1) & v21;
        }
        goto LABEL_186;
      }
      if (!v58)
      {
        v126 = (_QWORD *)*v128;
        *v128 = 0;
        if (v126)
          operator delete(v126);
        v22 = 0;
        *(_QWORD *)(a1 + 144) = 0;
        goto LABEL_173;
      }
    }
    if (!(v58 >> 61))
    {
      v72 = operator new(8 * v58);
      v73 = (_QWORD *)*v128;
      *v128 = v72;
      if (v73)
        operator delete(v73);
      v74 = 0;
      *(_QWORD *)(a1 + 144) = v58;
      do
        *(_QWORD *)(*v128 + 8 * v74++) = 0;
      while (v58 != v74);
      v75 = (_QWORD *)*v127;
      if (!*v127)
        goto LABEL_172;
      v76 = v75[1];
      v77 = v58 - 1;
      if ((v58 & (v58 - 1)) == 0)
      {
        v78 = v76 & v77;
        *(_QWORD *)(*v128 + 8 * v78) = v127;
        for (k = (_QWORD *)*v75; *v75; k = (_QWORD *)*v75)
        {
          v80 = k[1] & v77;
          if (v80 == v78)
          {
            v75 = k;
          }
          else if (*(_QWORD *)(*v128 + 8 * v80))
          {
            *v75 = *k;
            v81 = 8 * v80;
            *k = **(_QWORD **)(*v128 + v81);
            **(_QWORD **)(*v128 + v81) = k;
          }
          else
          {
            *(_QWORD *)(*v128 + 8 * v80) = v75;
            v75 = k;
            v78 = v80;
          }
        }
LABEL_172:
        v22 = v58;
        goto LABEL_173;
      }
      if (v76 >= v58)
        v76 %= v58;
      *(_QWORD *)(*v128 + 8 * v76) = v127;
      v93 = (_QWORD *)*v75;
      if (!*v75)
        goto LABEL_172;
      while (1)
      {
        v95 = v93[1];
        if (v95 >= v58)
          v95 %= v58;
        if (v95 != v76)
        {
          if (!*(_QWORD *)(*v128 + 8 * v95))
          {
            *(_QWORD *)(*v128 + 8 * v95) = v75;
            goto LABEL_177;
          }
          *v75 = *v93;
          v94 = 8 * v95;
          *v93 = **(_QWORD **)(*v128 + v94);
          **(_QWORD **)(*v128 + v94) = v93;
          v93 = v75;
        }
        v95 = v76;
LABEL_177:
        v75 = v93;
        v93 = (_QWORD *)*v93;
        v76 = v95;
        if (!v93)
          goto LABEL_172;
      }
    }
LABEL_259:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v23.u32[0] < 2uLL)
  {
    while (1)
    {
      v51 = v49[1];
      if (v51 == v21)
      {
        if (v49[2] == v7)
          goto LABEL_237;
      }
      else if ((v51 & (v22 - 1)) != v13)
      {
        goto LABEL_78;
      }
      v49 = (_QWORD *)*v49;
      if (!v49)
        goto LABEL_78;
    }
  }
  while (1)
  {
    v50 = v49[1];
    if (v50 == v21)
      break;
    if (v50 >= v22)
      v50 %= v22;
    if (v50 != v13)
      goto LABEL_78;
LABEL_68:
    v49 = (_QWORD *)*v49;
    if (!v49)
      goto LABEL_78;
  }
  if (v49[2] != v7)
    goto LABEL_68;
LABEL_237:
  v123 = (unint64_t *)&v11->__shared_owners_;
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 - 1, v123));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_196:
  objc_msgSend(*(id *)(a1 + 8), "startObserving:", v7);
  v99 = v138;
  if (v138)
  {
    v100 = &v138->__shared_owners_;
    do
      v101 = __ldaxr((unint64_t *)v100);
    while (__stlxr(v101 - 1, (unint64_t *)v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }

  if (*(_DWORD *)v130)
  {
LABEL_202:
    v103 = (uint64_t **)(a1 + 80);
    v102 = *(uint64_t **)(a1 + 80);
    if (v102)
    {
      while (1)
      {
        while (1)
        {
          v104 = (uint64_t **)v102;
          v105 = v102[4];
          if (v105 <= (unint64_t)v6)
            break;
          v102 = *v104;
          v103 = v104;
          if (!*v104)
            goto LABEL_209;
        }
        if (v105 >= (unint64_t)v6)
          break;
        v102 = v104[1];
        if (!v102)
        {
          v103 = v104 + 1;
          goto LABEL_209;
        }
      }
    }
    else
    {
      v104 = (uint64_t **)(a1 + 80);
LABEL_209:
      v106 = (uint64_t *)operator new(0x28uLL);
      v106[4] = (uint64_t)v6;
      *v106 = 0;
      v106[1] = 0;
      v106[2] = (uint64_t)v104;
      *v103 = v106;
      v107 = **(_QWORD **)(a1 + 72);
      if (v107)
      {
        *(_QWORD *)(a1 + 72) = v107;
        v106 = *v103;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v106);
      ++*(_QWORD *)(a1 + 88);
    }
  }
LABEL_212:
  v109 = (uint64_t **)(a1 + 56);
  v108 = *(uint64_t **)(a1 + 56);
  if (v108)
  {
    while (1)
    {
      while (1)
      {
        v110 = (uint64_t **)v108;
        v111 = v108[4];
        if (v111 <= (unint64_t)v6)
          break;
        v108 = *v110;
        v109 = v110;
        if (!*v110)
          goto LABEL_219;
      }
      if (v111 >= (unint64_t)v6)
        break;
      v108 = v110[1];
      if (!v108)
      {
        v109 = v110 + 1;
        goto LABEL_219;
      }
    }
  }
  else
  {
    v110 = (uint64_t **)(a1 + 56);
LABEL_219:
    v112 = (uint64_t *)operator new(0x28uLL);
    v112[4] = (uint64_t)v6;
    *v112 = 0;
    v112[1] = 0;
    v112[2] = (uint64_t)v110;
    *v109 = v112;
    v113 = **(_QWORD **)(a1 + 48);
    if (v113)
    {
      *(_QWORD *)(a1 + 48) = v113;
      v112 = *v109;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v112);
    ++*(_QWORD *)(a1 + 64);
  }
  v114 = *(_QWORD **)(a1 + 24);
  if ((unint64_t)v114 >= *(_QWORD *)(a1 + 32))
  {
    v116 = std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<objc_object  {objcproto14VKRouteOverlay}*&,geo::memory_management_mode const&>((void **)(a1 + 16), v6);
  }
  else
  {
    v115 = v6;
    *v114 = &off_1E42B5510;
    v114[1] = v115;
    v116 = (char *)(v114 + 3);
  }
  *(_QWORD *)(a1 + 24) = v116;
  if (GEOGetVectorKitRouteLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
  v7 = (unint64_t)(id)GEOGetVectorKitRouteLog_log;
  v9 = 1;
  if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_INFO))
  {
    v117 = "false";
    v118 = *(_QWORD *)(a1 + 64);
    v119 = *(_QWORD *)(a1 + 88);
    if (*(_DWORD *)v130)
      v117 = "true";
    *(_DWORD *)buf = 138413058;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v117;
    v140 = 1024;
    v141 = v118;
    v142 = 1024;
    v143 = v119;
    _os_log_impl(&dword_19F029000, (os_log_t)v7, OS_LOG_TYPE_INFO, "Added overlay %@ isPersistent:%s overlaysInViewCount:%d persistentOverlaysCount:%d", buf, 0x22u);
  }
LABEL_231:

  return v9;
}

void sub_19F833A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a27);
  md::components::Material::~Material((md::components::Material *)&a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);

  _Unwind_Resume(a1);
}

uint64_t md::StandardRouteOverlayCache::removeOverlay(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  char isKindOfClass;
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  BOOL v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  BOOL v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  unint64_t v54;
  BOOL v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v66;
  uint8_t buf[4];
  void *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v66 = v5;
  if (!v5)
    goto LABEL_19;
  v6 = v5;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v8 = v6;
  if ((isKindOfClass & 1) == 0)
  {
    v15 = (_QWORD *)(a1 + 96);
    v16 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(a1 + 96), (unint64_t)v8);
    if (v16)
    {
      v17 = v16;
      v18 = *(int8x8_t *)(a1 + 104);
      v19 = v16[1];
      v20 = (uint8x8_t)vcnt_s8(v18);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        if (v19 >= *(_QWORD *)&v18)
          v19 %= *(_QWORD *)&v18;
      }
      else
      {
        v19 &= *(_QWORD *)&v18 - 1;
      }
      v26 = *(_QWORD **)(*v15 + 8 * v19);
      do
      {
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26 != v16);
      if (v27 == (_QWORD *)(a1 + 112))
        goto LABEL_65;
      v28 = v27[1];
      if (v20.u32[0] > 1uLL)
      {
        if (v28 >= *(_QWORD *)&v18)
          v28 %= *(_QWORD *)&v18;
      }
      else
      {
        v28 &= *(_QWORD *)&v18 - 1;
      }
      if (v28 != v19)
      {
LABEL_65:
        if (!*v16)
          goto LABEL_66;
        v30 = *(_QWORD *)(*v16 + 8);
        if (v20.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&v18)
            v30 %= *(_QWORD *)&v18;
        }
        else
        {
          v30 &= *(_QWORD *)&v18 - 1;
        }
        if (v30 != v19)
LABEL_66:
          *(_QWORD *)(*v15 + 8 * v19) = 0;
      }
      v36 = *v16;
      if (*v16)
      {
        v37 = *(_QWORD *)(v36 + 8);
        if (v20.u32[0] > 1uLL)
        {
          if (v37 >= *(_QWORD *)&v18)
            v37 %= *(_QWORD *)&v18;
        }
        else
        {
          v37 &= *(_QWORD *)&v18 - 1;
        }
        if (v37 != v19)
        {
          *(_QWORD *)(*v15 + 8 * v37) = v27;
          v36 = *v16;
        }
      }
      *v27 = v36;
      *v16 = 0;
      --*(_QWORD *)(a1 + 120);
      v38 = (std::__shared_weak_count *)v16[4];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      operator delete(v17);
      goto LABEL_80;
    }
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v21 = (id)GEOGetVectorKitRouteLog_log;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      goto LABEL_18;
    *(_DWORD *)buf = 138412290;
    v68 = v8;
    goto LABEL_17;
  }
  v9 = (_QWORD *)(a1 + 136);
  v10 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(a1 + 136), (unint64_t)v8);
  if (!v10)
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v21 = (id)GEOGetVectorKitRouteLog_log;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      goto LABEL_18;
    *(_DWORD *)buf = 138412290;
    v68 = v8;
LABEL_17:
    _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_INFO, "Failed to removed overlay %@. It is isnt being tracked", buf, 0xCu);
LABEL_18:

LABEL_19:
    v22 = 0;
    goto LABEL_130;
  }
  v11 = v10;
  v12 = *(int8x8_t *)(a1 + 144);
  v13 = v10[1];
  v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    if (v13 >= *(_QWORD *)&v12)
      v13 %= *(_QWORD *)&v12;
  }
  else
  {
    v13 &= *(_QWORD *)&v12 - 1;
  }
  v23 = *(_QWORD **)(*v9 + 8 * v13);
  do
  {
    v24 = v23;
    v23 = (_QWORD *)*v23;
  }
  while (v23 != v10);
  if (v24 == (_QWORD *)(a1 + 152))
    goto LABEL_48;
  v25 = v24[1];
  if (v14.u32[0] > 1uLL)
  {
    if (v25 >= *(_QWORD *)&v12)
      v25 %= *(_QWORD *)&v12;
  }
  else
  {
    v25 &= *(_QWORD *)&v12 - 1;
  }
  if (v25 != v13)
  {
LABEL_48:
    if (!*v10)
      goto LABEL_49;
    v29 = *(_QWORD *)(*v10 + 8);
    if (v14.u32[0] > 1uLL)
    {
      if (v29 >= *(_QWORD *)&v12)
        v29 %= *(_QWORD *)&v12;
    }
    else
    {
      v29 &= *(_QWORD *)&v12 - 1;
    }
    if (v29 != v13)
LABEL_49:
      *(_QWORD *)(*v9 + 8 * v13) = 0;
  }
  v31 = *v10;
  if (*v10)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (v14.u32[0] > 1uLL)
    {
      if (v32 >= *(_QWORD *)&v12)
        v32 %= *(_QWORD *)&v12;
    }
    else
    {
      v32 &= *(_QWORD *)&v12 - 1;
    }
    if (v32 != v13)
    {
      *(_QWORD *)(*v9 + 8 * v32) = v24;
      v31 = *v10;
    }
  }
  *v24 = v31;
  *v10 = 0;
  --*(_QWORD *)(a1 + 160);
  v33 = (std::__shared_weak_count *)v10[4];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(v11);
  objc_msgSend(*(id *)(a1 + 8), "stopObserving:", v8);
LABEL_80:

  v41 = *(uint64_t **)(a1 + 56);
  if (v41)
  {
    v42 = (uint64_t *)(a1 + 56);
    v43 = *(_QWORD **)(a1 + 56);
    do
    {
      v44 = v43[4];
      v45 = v44 >= (unint64_t)v66;
      if (v44 >= (unint64_t)v66)
        v46 = v43;
      else
        v46 = v43 + 1;
      if (v45)
        v42 = v43;
      v43 = (_QWORD *)*v46;
    }
    while (*v46);
    if (v42 != (uint64_t *)(a1 + 56) && (unint64_t)v66 >= v42[4])
    {
      v47 = (uint64_t *)v42[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (uint64_t *)*v47;
        }
        while (v47);
      }
      else
      {
        v49 = v42;
        do
        {
          v48 = (uint64_t *)v49[2];
          v50 = *v48 == (_QWORD)v49;
          v49 = v48;
        }
        while (!v50);
      }
      if (*(uint64_t **)(a1 + 48) == v42)
        *(_QWORD *)(a1 + 48) = v48;
      --*(_QWORD *)(a1 + 64);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v41, v42);
      operator delete(v42);
    }
  }
  if (a3)
  {
    v51 = *(uint64_t **)(a1 + 80);
    if (v51)
    {
      v52 = (uint64_t *)(a1 + 80);
      v53 = *(_QWORD **)(a1 + 80);
      do
      {
        v54 = v53[4];
        v55 = v54 >= (unint64_t)v66;
        if (v54 >= (unint64_t)v66)
          v56 = v53;
        else
          v56 = v53 + 1;
        if (v55)
          v52 = v53;
        v53 = (_QWORD *)*v56;
      }
      while (*v56);
      if (v52 != (uint64_t *)(a1 + 80) && (unint64_t)v66 >= v52[4])
      {
        v57 = (uint64_t *)v52[1];
        if (v57)
        {
          do
          {
            v58 = v57;
            v57 = (uint64_t *)*v57;
          }
          while (v57);
        }
        else
        {
          v59 = v52;
          do
          {
            v58 = (uint64_t *)v59[2];
            v50 = *v58 == (_QWORD)v59;
            v59 = v58;
          }
          while (!v50);
        }
        if (*(uint64_t **)(a1 + 72) == v52)
          *(_QWORD *)(a1 + 72) = v58;
        --*(_QWORD *)(a1 + 88);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v51, v52);
        operator delete(v52);
      }
    }
  }
  v60 = std::remove[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>,objc_object  {objcproto14VKRouteOverlay}*>(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v66);
  if (*(_QWORD *)(a1 + 24) != v60)
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v61 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
    {
      v62 = "false";
      if (a3)
        v62 = "true";
      v63 = *(_QWORD *)(a1 + 64);
      v64 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 138413058;
      v68 = v66;
      v69 = 2080;
      v70 = v62;
      v71 = 1024;
      v72 = v63;
      v73 = 1024;
      v74 = v64;
      _os_log_impl(&dword_19F029000, v61, OS_LOG_TYPE_INFO, "Removed overlay %@ isPersistent:%s overlaysInViewCount:%d persistentOverlaysCount:%d", buf, 0x22u);
    }

    std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::erase(a1 + 16, v60, *(_QWORD *)(a1 + 24));
  }
  v22 = 1;
LABEL_130:

  return v22;
}

void sub_19F8341A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t md::StandardRouteOverlayCache::persistentOverlays(md::StandardRouteOverlayCache *this)
{
  return (uint64_t)this + 72;
}

float md::StandardRouteOverlayCache::animationCompletionPercentage(VKPolylineOverlay *this, VKPolylineOverlay *a2)
{
  float v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  md::StandardRouteOverlayCache::getInternalOverlay((md::StandardRouteOverlayCache *)&v7, this, a2);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 857))
    {
      v2 = *(float *)(v7 + 832);
      v3 = v8;
      if (!v8)
        return v2;
    }
    else
    {
      v2 = 1.0;
      v3 = v8;
      if (!v8)
        return v2;
    }
  }
  else
  {
    v2 = 0.0;
    v3 = v8;
    if (!v8)
      return v2;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void md::StandardRouteOverlayCache::getInternalOverlay(md::StandardRouteOverlayCache *this, VKPolylineOverlay *a2, void *a3)
{
  int8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  GEOComposedRouteTraffic *traffic;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  id v22;
  void *v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;

  v34 = a3;
  v5 = *(int8x8_t *)&a2[1]._isReadyForSnapping;
  if (v5)
  {
    v6 = 0x9DDFEA08EB382D69 * (((8 * v34) + 8) ^ HIDWORD(v34));
    v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v34) ^ (v6 >> 47) ^ v6);
    v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
    v9 = (uint8x8_t)vcnt_s8(v5);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v8;
      if (v8 >= *(_QWORD *)&v5)
        v10 = v8 % *(_QWORD *)&v5;
    }
    else
    {
      v10 = v8 & (*(_QWORD *)&v5 - 1);
    }
    v11 = (_QWORD *)*((_QWORD *)a2[1]._composedRoute + v10);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v14 = v12[1];
            if (v8 == v14)
            {
              if (v12[2] == v34)
                goto LABEL_41;
            }
            else if ((v14 & v13) != v10)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v15 = v12[1];
          if (v8 == v15)
          {
            if (v12[2] == v34)
            {
LABEL_41:
              v31 = v12[4];
              *(_QWORD *)this = v12[3];
              *((_QWORD *)this + 1) = v31;
              if (v31)
              {
                v32 = (unint64_t *)(v31 + 8);
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
              }
              goto LABEL_40;
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v5)
              v15 %= *(_QWORD *)&v5;
            if (v15 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  traffic = a2[1]._traffic;
  if (traffic)
  {
    while (1)
    {
      v17 = (_QWORD *)*((_QWORD *)traffic + 3);
      v20 = (_QWORD *)*v17;
      v19 = v17 + 1;
      v18 = v20;
      if (v20 != v19)
        break;
LABEL_24:
      traffic = *(GEOComposedRouteTraffic **)traffic;
      if (!traffic)
        goto LABEL_35;
    }
    while (1)
    {
      v21 = *(id *)(v18[4] + 144);
      v22 = (id)v34;
      v23 = v22;
      if (v21 == v22)
        break;
      v24 = objc_msgSend(v21, "isEqual:", v22);

      if (v24)
        goto LABEL_37;
      v25 = (_QWORD *)v18[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v18[2];
          v27 = *v26 == (_QWORD)v18;
          v18 = v26;
        }
        while (!v27);
      }
      v18 = v26;
      if (v26 == v19)
        goto LABEL_24;
    }

LABEL_37:
    v28 = v18[5];
    *(_QWORD *)this = v18[4];
    *((_QWORD *)this + 1) = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
  }
  else
  {
LABEL_35:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
LABEL_40:

}

void sub_19F8344E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::remove[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>,objc_object  {objcproto14VKRouteOverlay}*>(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5;
  uint64_t i;
  void *v7;

  if (a1 == a2)
  {
LABEL_5:
    v5 = a2;
  }
  else
  {
    v5 = a1;
    while ((geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(v5 + 8), a3) & 1) == 0)
    {
      v5 += 24;
      if (v5 == a2)
        goto LABEL_5;
    }
  }
  if (v5 != a2)
  {
    for (i = v5 + 24; i != a2; i += 24)
    {
      if ((geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(i + 8), a3) & 1) == 0)
      {
        objc_storeStrong((id *)(v5 + 8), *(id *)(i + 8));
        v7 = *(void **)(i + 8);
        *(_QWORD *)(i + 8) = 0;

        v5 += 24;
      }
    }
  }
  return v5;
}

void std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 != v6)
    {
      v7 = 8 * ((a3 - a2) >> 3);
      do
      {
        objc_storeStrong((id *)(v3 + 8), *(id *)(v3 + v7 + 8));
        v8 = *(void **)(v3 + v7 + 8);
        *(_QWORD *)(v3 + v7 + 8) = 0;

        v3 += 24;
      }
      while (v3 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (v5 != v3)
    {
      v9 = (void (***)(_QWORD))(v5 - 24);
      v10 = (void (***)(_QWORD))(v5 - 24);
      do
      {
        v11 = *v10;
        v10 -= 3;
        (*v11)(v9);
        v12 = v9 == (void (***)(_QWORD))v3;
        v9 = v10;
      }
      while (!v12);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
}

uint64_t geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *a2;
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19F8346D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::RouteLineOverlay>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteLineOverlay>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::RouteLineOverlay>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v18;
  id *v19;
  id *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  md::RouteLineSharedResources *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  geo::read_write_lock *v61;
  const char *v62;
  malloc_zone_t *zone;

  v2 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;

  v3 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;

  v4 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;

  *(_WORD *)(a1 + 872) = 256;
  v5 = *(void **)(a1 + 720);
  if (v5)
  {
    objc_msgSend(v5, "stop");
    v6 = *(void **)(a1 + 720);
    *(_QWORD *)(a1 + 720) = 0;

  }
  v7 = *(id *)(a1 + 168);
  objc_msgSend(v7, "setRouteRibbon:", 0);

  v8 = *(void **)(a1 + 696);
  if (v8)
  {
    *(_QWORD *)(a1 + 704) = v8;
    operator delete(v8);
  }
  v9 = *(std::__shared_weak_count **)(a1 + 688);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 672) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 592);
  if (v14)
  {
    *(_QWORD *)(a1 + 600) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 616) + 40))(*(_QWORD *)(a1 + 616), v14, *(_QWORD *)(a1 + 608) - v14);
  }
  v15 = *(_QWORD *)(a1 + 560);
  if (v15)
  {
    *(_QWORD *)(a1 + 568) = v15;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 584) + 40))(*(_QWORD *)(a1 + 584), v15, *(_QWORD *)(a1 + 576) - v15);
  }
  v16 = *(_QWORD **)(a1 + 528);
  if (v16)
  {
    if ((*v16)-- == 1)
    {
      md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v16 + 1));
      {
        v60 = operator new();
        *(_QWORD *)(v60 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v60 + 24) = "VectorKitLabels";
        *(_OWORD *)(v60 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v60 = &off_1E42B5668;
        *(_QWORD *)(v60 + 8) = "VectorKitLabels";
        *(_OWORD *)(v60 + 72) = 0u;
        *(_OWORD *)(v60 + 88) = 0u;
        *(_OWORD *)(v60 + 104) = 0u;
        *(_OWORD *)(v60 + 120) = 0u;
        *(_OWORD *)(v60 + 136) = 0u;
        *(_OWORD *)(v60 + 152) = 0u;
        *(_OWORD *)(v60 + 168) = 0u;
        *(_OWORD *)(v60 + 184) = 0u;
        *(_OWORD *)(v60 + 200) = 0u;
        *(_OWORD *)(v60 + 216) = 0u;
        *(_OWORD *)(v60 + 232) = 0u;
        *(_QWORD *)(v60 + 248) = 0;
        *(_OWORD *)(v60 + 56) = 0u;
        v61 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v60 + 56), 0);
        if ((_DWORD)v61)
          geo::read_write_lock::logFailure(v61, (uint64_t)"initialization", v62);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v60 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v60 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v60;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(a1 + 528), 424);
      *(_QWORD *)(a1 + 528) = 0;
    }
  }
  v19 = *(id **)(a1 + 504);
  if (v19)
  {
    do
    {
      v20 = (id *)*v19;

      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
  v21 = *(void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v21)
    operator delete(v21);
  std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::less<GEOComposedRouteSection * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,mdm::Allocator>>::destroy(a1 + 456, *(_QWORD *)(a1 + 464));
  v22 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v23)
  {
    v24 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v23);
    MEMORY[0x1A1AF4E00](v24, 0x10A0C40D234DDC7);
  }
  v25 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v25)
  {
    v26 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v25);
    MEMORY[0x1A1AF4E00](v26, 0x10A0C40D234DDC7);
  }
  v27 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  if (v27)
  {
    v28 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v27);
    MEMORY[0x1A1AF4E00](v28, 0x10A0C40D234DDC7);
  }
  v29 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = 0;
  if (v30)
  {
    v31 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v30);
    MEMORY[0x1A1AF4E00](v31, 0x10A0C40D234DDC7);
  }
  v32 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;
  if (v32)
  {
    v33 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v32);
    MEMORY[0x1A1AF4E00](v33, 0x10A0C40D234DDC7);
  }
  v34 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v34)
  {
    v35 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v34);
    MEMORY[0x1A1AF4E00](v35, 0x10A0C40D234DDC7);
  }
  v36 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v38)
    std::default_delete<md::ManeuverPointSet>::operator()[abi:nn180100](v38);
  v39 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(md::RouteLineSharedResources **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  if (v42)
  {
    md::RouteLineSharedResources::~RouteLineSharedResources(v42);
    MEMORY[0x1A1AF4E00]();
  }
  v43 = *(_QWORD **)(a1 + 312);
  if (v43)
  {
    v44 = *(_QWORD **)(a1 + 320);
    v45 = *(void **)(a1 + 312);
    if (v44 != v43)
    {
      do
      {
        v47 = *--v44;
        v46 = v47;
        *v44 = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      }
      while (v44 != v43);
      v45 = *(void **)(a1 + 312);
    }
    *(_QWORD *)(a1 + 320) = v43;
    operator delete(v45);
  }
  v48 = *(_QWORD **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v48)
    std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](v48);
  v49 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *(std::__shared_weak_count **)(a1 + 280);
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(std::__shared_weak_count **)(a1 + 264);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(std::__shared_weak_count **)(a1 + 248);
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }

  *(_QWORD *)(a1 + 160) = &off_1E42B4CF0;
}

void sub_19F834D14(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  id *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  md::RouteLineSharedResources *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  v3 = *(void **)(v1 + 696);
  if (v3)
  {
    *(_QWORD *)(v1 + 704) = v3;
    operator delete(v3);
  }
  v4 = *(std::__shared_weak_count **)(v1 + 688);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(v1 + 672);
  *(_QWORD *)(v1 + 672) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v1 + 664);
  *(_QWORD *)(v1 + 664) = 0;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(_QWORD *)(v1 + 592);
    if (!v9)
    {
LABEL_12:
      v10 = *(_QWORD *)(v1 + 560);
      if (!v10)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v1 + 592);
    if (!v9)
      goto LABEL_12;
  }
  *(_QWORD *)(v1 + 600) = v9;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 616) + 40))(*(_QWORD *)(v1 + 616), v9, *(_QWORD *)(v1 + 608) - v9);
  v10 = *(_QWORD *)(v1 + 560);
  if (!v10)
  {
LABEL_14:
    geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>::~fast_shared_ptr((_QWORD *)(v1 + 528));
    v11 = *(id **)(v1 + 504);
    if (v11)
    {
      do
      {
        v12 = (id *)*v11;

        operator delete(v11);
        v11 = v12;
      }
      while (v12);
    }
    v13 = *(void **)(v1 + 488);
    *(_QWORD *)(v1 + 488) = 0;
    if (v13)
      operator delete(v13);
    std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::less<GEOComposedRouteSection * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,mdm::Allocator>>::destroy(v1 + 456, *(_QWORD *)(v1 + 464));
    v14 = *(_QWORD *)(v1 + 448);
    *(_QWORD *)(v1 + 448) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *(_QWORD *)(v1 + 440);
    *(_QWORD *)(v1 + 440) = 0;
    if (v15)
    {
      v16 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v15);
      MEMORY[0x1A1AF4E00](v16, 0x10A0C40D234DDC7);
    }
    v17 = *(_QWORD *)(v1 + 432);
    *(_QWORD *)(v1 + 432) = 0;
    if (v17)
    {
      v18 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v17);
      MEMORY[0x1A1AF4E00](v18, 0x10A0C40D234DDC7);
    }
    v19 = *(_QWORD *)(v1 + 424);
    *(_QWORD *)(v1 + 424) = 0;
    if (v19)
    {
      v20 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v19);
      MEMORY[0x1A1AF4E00](v20, 0x10A0C40D234DDC7);
    }
    v21 = *(_QWORD *)(v1 + 416);
    *(_QWORD *)(v1 + 416) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = *(_QWORD *)(v1 + 408);
    *(_QWORD *)(v1 + 408) = 0;
    if (v22)
    {
      v23 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v22);
      MEMORY[0x1A1AF4E00](v23, 0x10A0C40D234DDC7);
    }
    v24 = *(_QWORD *)(v1 + 400);
    *(_QWORD *)(v1 + 400) = 0;
    if (v24)
    {
      v25 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v24);
      MEMORY[0x1A1AF4E00](v25, 0x10A0C40D234DDC7);
    }
    v26 = *(_QWORD *)(v1 + 392);
    *(_QWORD *)(v1 + 392) = 0;
    if (v26)
    {
      v27 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v26);
      MEMORY[0x1A1AF4E00](v27, 0x10A0C40D234DDC7);
    }
    v28 = *(_QWORD *)(v1 + 384);
    *(_QWORD *)(v1 + 384) = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = *(_QWORD *)(v1 + 376);
    *(_QWORD *)(v1 + 376) = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = *(_QWORD **)(v1 + 368);
    *(_QWORD *)(v1 + 368) = 0;
    if (v30)
      std::default_delete<md::ManeuverPointSet>::operator()[abi:nn180100](v30);
    v31 = *(_QWORD *)(v1 + 360);
    *(_QWORD *)(v1 + 360) = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = *(_QWORD *)(v1 + 352);
    *(_QWORD *)(v1 + 352) = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *(_QWORD *)(v1 + 344);
    *(_QWORD *)(v1 + 344) = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(md::RouteLineSharedResources **)(v1 + 336);
    *(_QWORD *)(v1 + 336) = 0;
    if (v34)
    {
      md::RouteLineSharedResources::~RouteLineSharedResources(v34);
      MEMORY[0x1A1AF4E00]();
    }
    v35 = *(_QWORD **)(v1 + 312);
    if (v35)
    {
      v36 = *(_QWORD **)(v1 + 320);
      v37 = *(void **)(v1 + 312);
      if (v36 != v35)
      {
        do
        {
          v39 = *--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        }
        while (v36 != v35);
        v37 = *(void **)(v1 + 312);
      }
      *(_QWORD *)(v1 + 320) = v35;
      operator delete(v37);
    }
    v40 = *(_QWORD **)(v1 + 304);
    *(_QWORD *)(v1 + 304) = 0;
    if (v40)
      std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](v40);
    v41 = *(_QWORD *)(v1 + 296);
    *(_QWORD *)(v1 + 296) = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v42 = *(_QWORD *)(v1 + 288);
    *(_QWORD *)(v1 + 288) = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v43 = *(std::__shared_weak_count **)(v1 + 280);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = *(std::__shared_weak_count **)(v1 + 264);
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = *(std::__shared_weak_count **)(v1 + 248);
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }

    *(_QWORD *)(v1 + 160) = &off_1E42B4CF0;
    _Unwind_Resume(a1);
  }
LABEL_13:
  *(_QWORD *)(v1 + 568) = v10;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 584) + 40))(*(_QWORD *)(v1 + 584), v10, *(_QWORD *)(v1 + 576) - v10);
  goto LABEL_14;
}

void std::__shared_ptr_emplace<md::RouteLineOverlayGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RouteLineOverlayGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::RouteLineOverlayGroup>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  void (***v24)(_QWORD);
  void (***v25)(_QWORD);
  void *v26;
  void (***v27)(_QWORD);
  void (***v28)(_QWORD);
  void (**v29)(_QWORD);
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  v2 = a1 + 32;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(v2 - 8) = v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if (*(_QWORD *)(v2 + 64))
  {
    v3 = *(_QWORD **)(a1 + 88);
    while (v3)
    {
      v18 = v3;
      v3 = (_QWORD *)*v3;
      v19 = (std::__shared_weak_count *)v18[4];
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      operator delete(v18);
    }
    *(_QWORD *)(a1 + 88) = 0;
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 96) = 0;
  }
  v7 = *(void (****)(_QWORD))(a1 + 48);
  v6 = *(void (****)(_QWORD))(a1 + 56);
  if (v6 != v7)
  {
    v8 = v6 - 3;
    v9 = v6 - 3;
    do
    {
      v10 = *v9;
      v9 -= 3;
      (*v10)(v8);
      v11 = v8 == v7;
      v8 = v9;
    }
    while (!v11);
  }
  *(_QWORD *)(a1 + 56) = v7;
  objc_storeWeak((id *)(a1 + 120), 0);
  v12 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v12)
    goto LABEL_15;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v15)
      goto LABEL_27;
  }
  else
  {
LABEL_15:
    v15 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v15)
      goto LABEL_27;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_27:
  objc_destroyWeak((id *)(a1 + 120));

  v22 = *(_QWORD **)(a1 + 88);
  while (v22)
  {
    v30 = v22;
    v22 = (_QWORD *)*v22;
    v31 = (std::__shared_weak_count *)v30[4];
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    operator delete(v30);
  }
  v23 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v23)
    operator delete(v23);
  v24 = *(void (****)(_QWORD))(a1 + 48);
  if (v24)
  {
    v25 = *(void (****)(_QWORD))(a1 + 56);
    v26 = *(void **)(a1 + 48);
    if (v25 != v24)
    {
      v27 = v25 - 3;
      v28 = v25 - 3;
      do
      {
        v29 = *v28;
        v28 -= 3;
        (*v29)(v27);
        v11 = v27 == v24;
        v27 = v28;
      }
      while (!v11);
      v26 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v24;
    operator delete(v26);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v2);
}

void ggl::FoggedDiffuseLandmark::LandmarkPipelineState::~LandmarkPipelineState(ggl::FoggedDiffuseLandmark::LandmarkPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FoggedDiffuseLandmark::LandmarkPipelineState::LandmarkPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::FoggedDiffuseLandmarkShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DD8 = 1;
          }
          ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE587F68 = &ggl::FoggedDiffuseLandmark::pipelineDataLandmarkPipelineDeviceStructs(void)::ref;
          qword_1EE587F70 = 0;
          if ((v95 & 1) == 0
          {
            ggl::FoggedDiffuseLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            unk_1EE588140 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE588148 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE588150 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE588158 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE588160 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE588168 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE587F78 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineDataLandmarkPipelineConstantStructs(void)::ref;
          unk_1EE587F80 = xmmword_19FFB3710;
        }
      }
      ggl::FoggedDiffuseLandmark::LandmarkPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup::typedReflection(void)::ref;
      ggl::FoggedDiffuseLandmarkShader::typedReflection(v90);
      qword_1EE587F10 = (uint64_t)&ggl::FoggedDiffuseLandmarkShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE587FA0 = 0;
        qword_1EE587FA8 = (uint64_t)"";
        dword_1EE587FB0 = 0;
        qword_1EE587FB8 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineAttributeBinding_0(void)::attr;
        unk_1EE587FC0 = 3;
      }
      qword_1EE587F18 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineAttributeStructBinding(void)::attr;
      unk_1EE587F20 = 1;
      qword_1EE587F28 = 0;
      unk_1EE587F30 = 1;
      qword_1EE587F38 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineDeviceStructBinding(void)::ref;
      unk_1EE587F40 = 0;
      if ((v93 & 1) == 0
      {
        ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE587FE0 = 0;
        qword_1EE587FE8 = (uint64_t)"skyfog";
        dword_1EE587FF0 = 3;
        qword_1EE587FF8 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE588000 = xmmword_19FFB3720;
        qword_1EE588010 = 1;
        unk_1EE588018 = "view";
        dword_1EE588020 = 3;
        qword_1EE588028 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantViewBinding(void)::reflection;
        *(int64x2_t *)algn_1EE588030 = vdupq_n_s64(2uLL);
        qword_1EE588040 = 2;
        unk_1EE588048 = "scale";
        dword_1EE588050 = 3;
        qword_1EE588058 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantScaleBinding(void)::reflection;
        unk_1EE588060 = xmmword_19FFB3730;
        qword_1EE588070 = 3;
        unk_1EE588078 = "style";
        dword_1EE588080 = 3;
        qword_1EE588088 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE588090 = xmmword_19FFB3740;
        qword_1EE5880A0 = 4;
        unk_1EE5880A8 = "gradient";
        dword_1EE5880B0 = 3;
        qword_1EE5880B8 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantGradientBinding(void)::reflection;
        unk_1EE5880C0 = xmmword_19FFB3670;
        qword_1EE5880D0 = 5;
        unk_1EE5880D8 = "lightConfig";
        dword_1EE5880E0 = 3;
        qword_1EE5880E8 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE5880F0 = xmmword_19FFB3750;
        qword_1EE588100 = 6;
        unk_1EE588108 = "fade";
        dword_1EE588110 = 3;
        qword_1EE588118 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantFadeBinding(void)::reflection;
        unk_1EE588120 = 2;
      }
      qword_1EE587F48 = (uint64_t)&ggl::FoggedDiffuseLandmark::pipelineStateLandmarkPipelineConstantStructBinding(void)::ref;
      unk_1EE587F50 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FoggedDiffuseLandmark::LandmarkPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BAC88;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup::~LandmarkPipelineSetup(ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup::constantDataIsEnabled(ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

BOOL ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup::textureIsEnabled(ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void altitude::RoadDataCache::~RoadDataCache(altitude::RoadDataCache *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C4178;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  altitude::GenericCacheNode<altitude::TileKey,altitude::RoadTileDataPrivate>::~GenericCacheNode(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C4178;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  altitude::GenericCacheNode<altitude::TileKey,altitude::RoadTileDataPrivate>::~GenericCacheNode(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *altitude::RoadDataCache::createRequest@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *result;
  void *v16;
  void *__p;
  char v18;
  uint64_t v19[4];
  __int128 v20;
  uint64_t v21;
  pthread_mutexattr_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = a1[4];
  v8 = a1[19];
  HIBYTE(v19[2]) = 16;
  strcpy((char *)v19, "/road/cache/job/");
  v18 = 0;
  LOBYTE(__p) = 0;
  altitude::Tile::createTileName(&v20, (unsigned int *)(a2 + 16), v19, (uint64_t *)&__p);
  karo::Job::Job(v6, v7);
  *(_BYTE *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v6 = off_1E42C5768;
  *(_QWORD *)(v6 + 192) = 0;
  pthread_mutexattr_init(&v22);
  pthread_mutexattr_settype(&v22, 2);
  v9 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v9, &v22);
  pthread_mutexattr_destroy(&v22);
  *(_QWORD *)(v6 + 192) = v9;
  v10 = (std::string *)(v6 + 200);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v20;
    *(_QWORD *)(v6 + 216) = v21;
    *(_BYTE *)(v6 + 224) = 0;
    if ((v18 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v16 = (void *)v20;
  std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  *(_BYTE *)(v6 + 224) = 0;
  operator delete(v16);
  if (v18 < 0)
LABEL_3:
    operator delete(__p);
LABEL_4:
  if (SHIBYTE(v19[2]) < 0)
    operator delete((void *)v19[0]);
  *(_QWORD *)v6 = &off_1E42C4B70;
  *(_BYTE *)(v6 + 225) = 0;
  *(_QWORD *)(v6 + 232) = v8;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 240) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 256) = v11;
  *(_QWORD *)(v6 + 272) = 0;
  *(_QWORD *)(v6 + 280) = 0;
  v12 = a1[22];
  *(_QWORD *)(v6 + 288) = a1[21];
  *(_QWORD *)(v6 + 296) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *a3 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8910;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

void altitude::GenericCacheNode<altitude::TileKey,altitude::RoadTileDataPrivate>::requestCached(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  __int128 v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  std::__shared_weak_count **v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t shared_owners;
  std::__shared_weak_count *v20;
  std::__shared_weak_count_vtbl *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  int *i;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count_vtbl *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *j;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  void *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  void *v79;
  int *v80;
  uint64_t v81;
  void (**v82)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v83;
  std::__shared_weak_count *v84;
  void *__p[2];
  __int128 v86;
  _OWORD v87[2];
  __int128 v88;
  __int128 v89;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (std::__shared_weak_count_vtbl *)&off_1E42C2D08;
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)a1 + 144))(__p, a1, a2);
  v10 = a2[1];
  v87[0] = *a2;
  v87[1] = v10;
  v88 = *(_OWORD *)__p;
  v89 = v86;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v11 = *(int8x8_t *)(a1 + 104);
  if (!*(_QWORD *)&v11)
    goto LABEL_45;
  v12 = ((unint64_t)v89 << 58) | ((unint64_t)(DWORD1(v89) & 0x1FFFFFFF) << 29) | DWORD2(v89) & 0x1FFFFFFF;
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = ((unint64_t)v89 << 58) | ((unint64_t)(DWORD1(v89) & 0x1FFFFFFF) << 29) | DWORD2(v89) & 0x1FFFFFFF;
    if (v12 >= *(_QWORD *)&v11)
      v14 = v12 % *(_QWORD *)&v11;
  }
  else
  {
    v14 = v12 & (*(_QWORD *)&v11 - 1);
  }
  v15 = *(std::__shared_weak_count ***)(*(_QWORD *)(a1 + 96) + 8 * v14);
  if (!v15)
    goto LABEL_45;
  v16 = *v15;
  if (!*v15)
  {
LABEL_46:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
    goto LABEL_47;
  }
  if (v13.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v11 - 1;
    while (1)
    {
      shared_owners = v16->__shared_owners_;
      if (shared_owners == v12)
      {
        if (LODWORD(v16[1].__shared_owners_) == (_DWORD)v89
          && *(uint64_t *)((char *)&v16[1].__shared_owners_ + 4) == *(_QWORD *)((char *)&v89 + 4)
          && HIDWORD(v89) == HIDWORD(v16[1].__shared_weak_owners_)
          && LODWORD(v16->__shared_weak_owners_) == (_DWORD)v88
          && *(uint64_t *)((char *)&v16->__shared_weak_owners_ + 4) == *(_QWORD *)((char *)&v88 + 4))
        {
          goto LABEL_31;
        }
      }
      else if ((shared_owners & v17) != v14)
      {
        goto LABEL_45;
      }
      v16 = (std::__shared_weak_count *)v16->__vftable;
      if (!v16)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v18 = v16->__shared_owners_;
    if (v18 == v12)
      break;
    if (v18 >= *(_QWORD *)&v11)
      v18 %= *(_QWORD *)&v11;
    if (v18 != v14)
      goto LABEL_45;
LABEL_13:
    v16 = (std::__shared_weak_count *)v16->__vftable;
    if (!v16)
      goto LABEL_46;
  }
  if (LODWORD(v16[1].__shared_owners_) != (_DWORD)v89
    || *(uint64_t *)((char *)&v16[1].__shared_owners_ + 4) != *(_QWORD *)((char *)&v89 + 4)
    || HIDWORD(v89) != HIDWORD(v16[1].__shared_weak_owners_)
    || LODWORD(v16->__shared_weak_owners_) != (_DWORD)v88
    || *(uint64_t *)((char *)&v16->__shared_weak_owners_ + 4) != *(_QWORD *)((char *)&v88 + 4))
  {
    goto LABEL_13;
  }
LABEL_31:
  if (((*(uint64_t (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v88, &v16->__shared_weak_owners_) & 1) == 0)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), v16);
    v26 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v86)
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 7);
        if (v27)
          std::__shared_weak_count::__release_weak(v27);
      }
      operator delete(v26);
    }
    goto LABEL_45;
  }
  v20 = (std::__shared_weak_count *)v16[2].__shared_owners_;
  if (!v20)
  {
LABEL_45:
    v16 = 0;
    goto LABEL_46;
  }
  v21 = v16[2].__vftable;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v16 = std::__shared_weak_count::lock(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v16)
    goto LABEL_46;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  if (v21)
  {
    *a5 = v21;
    a5[1] = (std::__shared_weak_count_vtbl *)v16;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (std::__shared_weak_count_vtbl *)&off_1E42C2D08;
    goto LABEL_95;
  }
LABEL_47:
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(&v82, a1, v87, a3, a4, 300, 1, 0);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v82) != 4)
  {
    *a5 = 0;
    a5[1] = 0;
    v41 = v83;
    v42 = v84;
    a5[2] = (std::__shared_weak_count_vtbl *)&off_1E42C2D08;
    a5[3] = (std::__shared_weak_count_vtbl *)v41;
    a5[4] = (std::__shared_weak_count_vtbl *)v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    if (v41)
    {
      v45 = (unsigned int *)(v41 + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
    }
    goto LABEL_86;
  }
  v79 = 0;
  v80 = 0;
  v81 = 0;
  (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t, uint64_t *, _OWORD *, void **))(*(_QWORD *)a1 + 136))(&v77, a1, &v83, v87, &v79);
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  v28 = std::__hash_table<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::__unordered_map_hasher<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::hash<altitude::TileKey>,std::equal_to<altitude::TileKey>,true>,std::__unordered_map_equal<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::equal_to<altitude::TileKey>,std::hash<altitude::TileKey>,true>,std::allocator<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>>>::__emplace_unique_key_args<altitude::TileKey,std::piecewise_construct_t const&,std::tuple<altitude::TileKey const&>,std::tuple<>>((float *)(a1 + 96), (int *)&v88, &v88);
  v30 = v77;
  v29 = v78;
  if (v78)
  {
    v31 = (unint64_t *)&v78->__shared_weak_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = (std::__shared_weak_count *)v28[7];
  v28[6] = v30;
  v28[7] = v29;
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  for (i = (int *)v79; i != v80; i += 8)
  {
    v35 = std::__hash_table<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::__unordered_map_hasher<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::hash<altitude::TileKey>,std::equal_to<altitude::TileKey>,true>,std::__unordered_map_equal<altitude::TileKey,std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>,std::equal_to<altitude::TileKey>,std::hash<altitude::TileKey>,true>,std::allocator<std::__hash_value_type<altitude::TileKey,std::weak_ptr<karo::media::DigitalTerrainModel>>>>::__emplace_unique_key_args<altitude::TileKey,std::piecewise_construct_t const&,std::tuple<altitude::TileKey const&>,std::tuple<>>((float *)(a1 + 96), i, i);
    v37 = v77;
    v36 = v78;
    if (v78)
    {
      v38 = (unint64_t *)&v78->__shared_weak_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = (std::__shared_weak_count *)v35[7];
    v35[6] = v37;
    v35[7] = v36;
    if (v40)
      std::__shared_weak_count::__release_weak(v40);
  }
  v47 = *(_DWORD *)(a1 + 144) + 1;
  *(_DWORD *)(a1 + 144) = v47;
  if (v47 > 0x14)
  {
    *(_DWORD *)(a1 + 144) = 0;
    for (j = *(_QWORD **)(a1 + 112); j; j = (_QWORD *)*j)
    {
      while (1)
      {
        v68 = (std::__shared_weak_count *)j[7];
        if (!v68)
          goto LABEL_111;
        v69 = std::__shared_weak_count::lock(v68);
        if (!v69)
          goto LABEL_111;
        v70 = v69;
        v71 = j[6];
        v72 = (unint64_t *)&v69->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (v73)
          break;
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v70);
        if (v71)
          goto LABEL_108;
LABEL_111:
        v74 = (_QWORD *)*j;
        std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (_QWORD *)(a1 + 96), j);
        v75 = __p[0];
        if (__p[0])
        {
          if ((_BYTE)v86)
          {
            v76 = (std::__shared_weak_count *)*((_QWORD *)__p[0] + 7);
            if (v76)
              std::__shared_weak_count::__release_weak(v76);
          }
          operator delete(v75);
        }
        j = v74;
        if (!v74)
          goto LABEL_70;
      }
      if (!v71)
        goto LABEL_111;
LABEL_108:
      ;
    }
  }
LABEL_70:
  v49 = v78;
  *a5 = v77;
  a5[1] = (std::__shared_weak_count_vtbl *)v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = v83;
  v53 = v84;
  a5[2] = (std::__shared_weak_count_vtbl *)&off_1E42C2D08;
  a5[3] = (std::__shared_weak_count_vtbl *)v52;
  a5[4] = (std::__shared_weak_count_vtbl *)v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  if (v52)
  {
    v56 = (unsigned int *)(v52 + 128);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  v58 = v78;
  if (v78)
  {
    v59 = (unint64_t *)&v78->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v79)
  {
    v80 = (int *)v79;
    operator delete(v79);
  }
LABEL_86:
  v82 = &off_1E42C2D08;
  if (v83)
  {
    v61 = (unsigned int *)(v83 + 128);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
  }
  v63 = v84;
  if (v84)
  {
    v64 = (unint64_t *)&v84->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v16)
  {
LABEL_95:
    v66 = (unint64_t *)&v16->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

BOOL altitude::RoadDataCache::hasDataAvailable(uint64_t a1, __int128 *a2)
{
  return altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32), a2 + 1, *(unsigned int *)a2) != 0;
}

uint64_t altitude::GenericCacheNode<altitude::TileKey,altitude::RoadTileDataPrivate>::clear(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v6;
  std::__shared_weak_count *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  if (*(_QWORD *)(a1 + 120))
  {
    v2 = *(_QWORD **)(a1 + 112);
    if (v2)
    {
      do
      {
        v6 = (_QWORD *)*v2;
        v7 = (std::__shared_weak_count *)v2[7];
        if (v7)
          std::__shared_weak_count::__release_weak(v7);
        operator delete(v2);
        v2 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(a1 + 112) = 0;
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
}

uint64_t altitude::GenericCacheNode<altitude::TileKey,altitude::RoadTileDataPrivate>::hasValidKey()
{
  return 1;
}

void altitude::RoadDataCache::fetchData(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD **)a1;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4) & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v3)
      return;
    goto LABEL_11;
  }
  v7 = v4[35];
  *a2 = v4[34];
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v3)
  {
LABEL_11:
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t altitude::RoadDataCache::getCacheKeyForKey@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a2;
  *(_OWORD *)a3 = *a2;
  result = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32), a2 + 1, v4);
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = v6;
  return result;
}

void std::__shared_ptr_pointer<altitude::RoadDataCacheJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::RoadDataCacheJob>,std::allocator<altitude::RoadDataCacheJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::RoadDataCacheJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::RoadDataCacheJob>,std::allocator<altitude::RoadDataCacheJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::RoadDataCacheJob::~RoadDataCacheJob(altitude::RoadDataCacheJob *this)
{
  altitude::RoadDataCacheJob::~RoadDataCacheJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E42C4B70;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)this = off_1E42C5768;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  v8 = *((_QWORD *)this + 24);
  if (v8)
    MEMORY[0x1A1AF4E00](v8, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 24) = 0;
  karo::Job::~Job(this);
}

void altitude::RoadDataCacheJob::jobStep(altitude::RoadDataCacheJob *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  pthread_mutex_t *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  uint64_t (***v25)(_QWORD);
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  BOOL v50;
  unsigned int *v51;
  unsigned int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  std::__shared_weak_count *v61;
  void (**v62)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v63;
  std::__shared_weak_count *v64;
  pthread_mutexattr_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 29);
  v3 = *(unsigned int *)(*((_QWORD *)this + 1) + 88);
  v4 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(&v60, v2, (char *)this + 240, v3, v4);
  if (v60)
  {
    v5 = operator new();
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
    v8 = v7;
    *(_QWORD *)v5 = 0;
    pthread_mutexattr_init(&v65);
    pthread_mutexattr_settype(&v65, 2);
    v9 = (pthread_mutex_t *)operator new();
    pthread_mutex_init(v9, &v65);
    pthread_mutexattr_destroy(&v65);
    *(_QWORD *)v5 = v9;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = v6;
    *(_DWORD *)(v5 + 40) = v8;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_QWORD *)(v5 + 112) = 0;
    v10 = (_QWORD *)operator new();
    *v10 = &off_1E42E8B40;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v5;
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    *((_QWORD *)this + 34) = v5;
    *((_QWORD *)this + 35) = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *((_QWORD *)this + 34);
    v15 = v60;
    v16 = v61;
    if (v61)
    {
      v17 = (unint64_t *)&v61->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *(std::__shared_weak_count **)(v14 + 96);
    *(_QWORD *)(v14 + 88) = v15;
    *(_QWORD *)(v14 + 96) = v16;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (void *)(***(uint64_t (****)(_QWORD))(v14 + 88))(*(_QWORD *)(v14 + 88));
    if (v24)
    {
      objc_msgSend(v24, "vectorTilePtr");
      v25 = *(uint64_t (****)(_QWORD))(v14 + 88);
      if (!v25)
        goto LABEL_34;
    }
    else
    {
      v65.__sig = 0;
      *(_QWORD *)v65.__opaque = 0;
      v25 = *(uint64_t (****)(_QWORD))(v14 + 88);
      if (!v25)
        goto LABEL_34;
    }
    if ((**v25)(v25))
    {
      v30 = geo::codec::VectorTile::linesCount((geo::codec::VectorTile *)v65.__sig);
      *(_DWORD *)(v14 + 84) = v30;
      if (!v30)
      {
        *(_QWORD *)(v14 + 48) = 0;
        *(_QWORD *)(v14 + 64) = 0;
        *(_DWORD *)(v14 + 80) = 0;
        v37 = *(std::__shared_weak_count **)v65.__opaque;
        if (*(_QWORD *)v65.__opaque)
          goto LABEL_35;
        goto LABEL_39;
      }
      *(_QWORD *)(v14 + 48) = geo::codec::VectorTile::lines((geo::codec::VectorTile *)v65.__sig);
      *(_DWORD *)(v14 + 56) = 0;
      v31 = geo::codec::VectorTile::lines((geo::codec::VectorTile *)v65.__sig);
      v32 = *(_DWORD *)(v14 + 84);
      *(_QWORD *)(v14 + 64) = v31 + 168 * v32;
      *(_DWORD *)(v14 + 72) = 0;
      *(_DWORD *)(v14 + 80) = 0;
      if (v32)
      {
        v33 = 0;
        v34 = 100;
        do
        {
          v35 = geo::codec::VectorTile::lines((geo::codec::VectorTile *)v65.__sig);
          v36 = *(unsigned int *)(v14 + 84);
          *(_DWORD *)(v14 + 80) += *(_DWORD *)(v35 + v34);
          ++v33;
          v34 += 168;
        }
        while (v33 < v36);
      }
    }
LABEL_34:
    v37 = *(std::__shared_weak_count **)v65.__opaque;
    if (*(_QWORD *)v65.__opaque)
    {
LABEL_35:
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
LABEL_39:
    if (v16)
    {
      v40 = (unint64_t *)&v16->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v42 = *((_QWORD *)this + 34);
    v44 = *((_QWORD *)this + 36);
    v43 = *((_QWORD *)this + 37);
    if (v43)
    {
      v45 = (unint64_t *)(v43 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = *(std::__shared_weak_count **)(v42 + 112);
    *(_QWORD *)(v42 + 104) = v44;
    *(_QWORD *)(v42 + 112) = v43;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    v50 = (*((_DWORD *)this + 40) & 2) == 0;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    *((_BYTE *)this + 225) = v50;
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    goto LABEL_53;
  }
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v62))
  {
    v26 = v64;
    v59[0] = v63;
    v59[1] = v64;
    if (v64)
    {
      v27 = (unint64_t *)&v64->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      karo::Job::addBlockingSubJob((uint64_t *)this, v59, 1, 0);
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v59, 1, 0);
    }
  }
  else
  {
    (*(void (**)(altitude::RoadDataCacheJob *))(*(_QWORD *)this + 16))(this);
  }
LABEL_53:
  v62 = &off_1E42C2D08;
  if (v63)
  {
    v51 = (unsigned int *)(v63 + 128);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
  }
  v53 = v64;
  if (v64)
  {
    v54 = (unint64_t *)&v64->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v61;
  if (v61)
  {
    v57 = (unint64_t *)&v61->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_19F836EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t altitude::RoadDataCacheJob::succeeded(altitude::RoadDataCacheJob *this)
{
  return *((unsigned __int8 *)this + 225);
}

void std::__shared_ptr_pointer<altitude::RoadTileDataPrivate *,std::shared_ptr<altitude::RoadTileDataPrivate>::__shared_ptr_default_delete<altitude::RoadTileDataPrivate,altitude::RoadTileDataPrivate>,std::allocator<altitude::RoadTileDataPrivate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::RoadTileDataPrivate *,std::shared_ptr<altitude::RoadTileDataPrivate>::__shared_ptr_default_delete<altitude::RoadTileDataPrivate,altitude::RoadTileDataPrivate>,std::allocator<altitude::RoadTileDataPrivate>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[14];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)v1[12];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v1[1];
    if (v8)
    {
      v9 = v1[2];
      v10 = (void *)v1[1];
      if (v9 != v8)
      {
        do
        {
          v11 = *(std::__shared_weak_count **)(v9 - 8);
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          v9 -= 24;
        }
        while (v9 != v8);
        v10 = (void *)v1[1];
      }
      v1[2] = v8;
      operator delete(v10);
    }
    pthread_mutex_destroy((pthread_mutex_t *)*v1);
    if (*v1)
      MEMORY[0x1A1AF4E00](*v1, 0x1000C40FA0F61DDLL);
    *v1 = 0;
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void altitude::GenericCacheNode<altitude::TileKey,altitude::RoadTileDataPrivate>::~GenericCacheNode(karo::AsyncRequestManager *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)a1 = off_1E42C4968;
  pthread_mutex_destroy(*((pthread_mutex_t **)a1 + 17));
  v2 = *((_QWORD *)a1 + 17);
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40FA0F61DDLL);
  *((_QWORD *)a1 + 17) = 0;
  v3 = (_QWORD *)*((_QWORD *)a1 + 14);
  if (v3)
  {
    do
    {
      v5 = (_QWORD *)*v3;
      v6 = (std::__shared_weak_count *)v3[7];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      operator delete(v3);
      v3 = v5;
    }
    while (v5);
  }
  v4 = (void *)*((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_1E42C30D8;
  while (*((_QWORD *)a1 + 10))
    (*(void (**)(karo::AsyncRequestManager *, uint64_t))(*(_QWORD *)a1 + 48))(a1, *((_QWORD *)a1 + 8) + 32);
  std::__tree<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::TileKey>,std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::TileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::TileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)a1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(a1);
}

__n128 altitude::GenericCacheNode<altitude::TileKey,altitude::RoadTileDataPrivate>::getCacheKeyForKey@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void md::VenueBuildingFeatureMarker::~VenueBuildingFeatureMarker(md::VenueBuildingFeatureMarker *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = &off_1E42A39D0;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *((_QWORD *)this + 5);
    v5 = (void *)*((_QWORD *)this + 4);
    if (v4 != v3)
    {
      do
        md::VenueLevel::~VenueLevel((md::VenueLevel *)(v4 - 184));
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v3;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = &off_1E42A39D0;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *((_QWORD *)this + 5);
    v5 = (void *)*((_QWORD *)this + 4);
    if (v4 != v3)
    {
      do
        md::VenueLevel::~VenueLevel((md::VenueLevel *)(v4 - 184));
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v3;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  JUMPOUT(0x1A1AF4E00);
}

void md::VenueBuildingFeatureMarker::name(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  uint64_t v8;

  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)a1 = 0;
}

void md::FeatureMarker::shortName(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  uint64_t v8;

  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)a1 = 0;
}

uint64_t md::VenueBuildingFeatureMarker::featureId(md::VenueBuildingFeatureMarker *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t md::VenueBuildingFeatureMarker::venueId(md::VenueBuildingFeatureMarker *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t md::VenueBuildingFeatureMarker::venueBuildingId(md::VenueBuildingFeatureMarker *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t md::FeatureMarker::venueLevelId(md::FeatureMarker *this)
{
  return 0;
}

uint64_t md::FeatureMarker::venueComponentId(md::FeatureMarker *this)
{
  return 0;
}

uint64_t md::FeatureMarker::venueFloorOrdinal(md::FeatureMarker *this)
{
  return 0;
}

void md::FeatureMarker::venueLookInsideFloorOrdinal(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::FeatureMarker::venueComponentType(md::FeatureMarker *this)
{
  return 0;
}

void md::FeatureMarker::styleAttributes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

float md::VenueBuildingFeatureMarker::minZoomRank(md::VenueBuildingFeatureMarker *this)
{
  return 0.0;
}

float md::VenueBuildingFeatureMarker::maxZoomRank(md::VenueBuildingFeatureMarker *this)
{
  return 21.0;
}

void md::VenueBuildingFeatureMarker::debugString(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  uint64_t v8;

  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)a1 = 0;
}

void md::VenueLevel::~VenueLevel(md::VenueLevel *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    v3 = *((_QWORD *)this + 19);
    v4 = (void *)*((_QWORD *)this + 18);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v2;
    operator delete(v4);
  }
  if (*((_BYTE *)this + 112))
  {
    if (*((char *)this + 143) < 0)
      operator delete(*((void **)this + 15));
    *((_BYTE *)this + 112) = 0;
  }
  if (*((_BYTE *)this + 80))
  {
    if (*((char *)this + 111) < 0)
      operator delete(*((void **)this + 11));
    *((_BYTE *)this + 80) = 0;
  }
  if (*((_BYTE *)this + 48))
  {
    if (*((char *)this + 79) < 0)
      operator delete(*((void **)this + 7));
    *((_BYTE *)this + 48) = 0;
  }
  if (*((_BYTE *)this + 16))
  {
    if (*((char *)this + 47) < 0)
      operator delete(*((void **)this + 3));
    *((_BYTE *)this + 16) = 0;
  }
}

uint64_t *md::VenueBuilding::VenueBuilding(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  int64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v31;
  uint64_t *v33;

  v2 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = (uint64_t *)*a2;
  v33 = (uint64_t *)a2[1];
  v4 = (int64_t)v33 - *a2;
  if (v33 != (uint64_t *)*a2)
  {
    v5 = 0xD37A6F4DE9BD37A7 * (v4 >> 3);
    if (v5 >= 0x1642C8590B21643)
      abort();
    v6 = (char *)operator new(v4);
    *v2 = v6;
    v2[1] = v6;
    v31 = v2;
    v2[2] = &v6[184 * v5];
    v7 = v6;
    do
    {
      v8 = *v3;
      *((_WORD *)v7 + 4) = *((_WORD *)v3 + 4);
      *(_QWORD *)v7 = v8;
      v7[16] = 0;
      if (*((_BYTE *)v3 + 16))
      {
        if (*((char *)v3 + 47) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v7 + 1, (const std::string::value_type *)v3[3], v3[4]);
        }
        else
        {
          v9 = *(_OWORD *)(v3 + 3);
          *((_QWORD *)v7 + 5) = v3[5];
          *(_OWORD *)(v7 + 24) = v9;
        }
        v7[16] = 1;
      }
      v7[48] = 0;
      if (*((_BYTE *)v3 + 48))
      {
        if (*((char *)v3 + 79) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v7 + 56), (const std::string::value_type *)v3[7], v3[8]);
        }
        else
        {
          v10 = *(_OWORD *)(v3 + 7);
          *((_QWORD *)v7 + 9) = v3[9];
          *(_OWORD *)(v7 + 56) = v10;
        }
        v7[48] = 1;
      }
      v7[80] = 0;
      if (*((_BYTE *)v3 + 80))
      {
        if (*((char *)v3 + 111) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v7 + 88), (const std::string::value_type *)v3[11], v3[12]);
        }
        else
        {
          v11 = *(_OWORD *)(v3 + 11);
          *((_QWORD *)v7 + 13) = v3[13];
          *(_OWORD *)(v7 + 88) = v11;
        }
        v7[80] = 1;
      }
      v7[112] = 0;
      if (*((_BYTE *)v3 + 112))
      {
        if (*((char *)v3 + 143) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v7 + 5, (const std::string::value_type *)v3[15], v3[16]);
        }
        else
        {
          v12 = *(_OWORD *)(v3 + 15);
          *((_QWORD *)v7 + 17) = v3[17];
          *(_OWORD *)(v7 + 120) = v12;
        }
        v7[112] = 1;
      }
      *((_QWORD *)v7 + 18) = 0;
      *((_QWORD *)v7 + 19) = 0;
      *((_QWORD *)v7 + 20) = 0;
      v13 = v3[18];
      v14 = v3[19];
      v15 = v14 - v13;
      if (v14 != v13)
      {
        v16 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
        if (v16 >= 0x666666666666667)
          abort();
        v17 = (char *)operator new(v15);
        *((_QWORD *)v7 + 18) = v17;
        *((_QWORD *)v7 + 19) = v17;
        *((_QWORD *)v7 + 20) = &v17[40 * v16];
        v18 = v17;
        do
        {
          *(_OWORD *)v18 = *(_OWORD *)v13;
          *((_QWORD *)v18 + 3) = 0;
          *((_QWORD *)v18 + 4) = 0;
          *((_QWORD *)v18 + 2) = 0;
          v21 = *(_BYTE **)(v13 + 16);
          v20 = *(_BYTE **)(v13 + 24);
          v22 = v20 - v21;
          if (v20 != v21)
          {
            if (v22 < 0)
              abort();
            v23 = (char *)operator new(v20 - v21);
            *((_QWORD *)v18 + 2) = v23;
            *((_QWORD *)v18 + 3) = v23;
            v19 = &v23[8 * (v22 >> 3)];
            *((_QWORD *)v18 + 4) = v19;
            memcpy(v23, v21, v22);
            *((_QWORD *)v18 + 3) = v19;
          }
          v18 += 40;
          v13 += 40;
        }
        while (v13 != v14);
        *((_QWORD *)v7 + 19) = v18;
      }
      *(_OWORD *)(v7 + 168) = *(_OWORD *)(v3 + 21);
      v3 += 23;
      v7 += 184;
    }
    while (v3 != v33);
    v31[1] = v7;
    v2 = v31;
  }
  v24 = *(_OWORD *)(a2 + 3);
  v25 = *(_OWORD *)(a2 + 5);
  v26 = *(_OWORD *)(a2 + 7);
  v2[9] = a2[9];
  *(_OWORD *)(v2 + 7) = v26;
  *(_OWORD *)(v2 + 5) = v25;
  *(_OWORD *)(v2 + 3) = v24;
  v27 = v2;
  v2[10] = 0;
  v28 = (uint64_t)(v2 + 10);
  v27[11] = 0;
  v27[12] = 0;
  v29 = v27;
  if (v27 != a2)
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(v28, a2[10], (char *)a2[11], (a2[11] - a2[10]) >> 4);
  *(_OWORD *)(v29 + 13) = *(_OWORD *)(a2 + 13);
  return v29;
}

void sub_19F837B50(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  std::vector<md::VenueLevel>::~vector[abi:nn180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19F837B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15)
{
  _BYTE *v15;

  if (v15[80])
  {
    if ((char)v15[111] < 0)
      operator delete(*a13);
    v15[80] = 0;
    if (!v15[48])
    {
LABEL_3:
      if (!v15[16])
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else if (!v15[48])
  {
    goto LABEL_3;
  }
  if ((char)v15[79] < 0)
    operator delete(*a14);
  v15[48] = 0;
  if (!v15[16])
  {
LABEL_14:
    *(_QWORD *)(a11 + 8) = a10;
    _Unwind_Resume(exception_object);
  }
LABEL_11:
  if ((char)v15[47] < 0)
    operator delete(*a15);
  v15[16] = 0;
  goto LABEL_14;
}

void **std::vector<md::VenueLevel>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        md::VenueLevel::~VenueLevel((md::VenueLevel *)(v3 - 184));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void karo::util::Path::purify(std::string *this, uint64_t a2)
{
  int v3;
  unint64_t v4;
  BOOL v5;
  std::string::size_type size;
  int64_t v7;
  std::string *v8;
  std::string *v9;
  _BYTE *v10;
  size_t v11;
  std::string *v12;
  _BYTE *v13;
  uint64_t v14;
  std::string *v15;
  int v16;
  size_t v17;
  std::string *v18;
  _BYTE *v19;
  int v20;
  char *v21;
  std::string *v22;
  char *v23;
  std::string::value_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string::size_type *v27;
  unint64_t v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *p_dst;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  size_t v35;
  void *p_p;
  uint64_t v37;
  uint64_t v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  char v43;
  std::string *v44;
  unint64_t v45;
  std::string::value_type *v46;
  char *v47;
  char *v48;
  std::string::size_type *p_size;
  void *__p;
  size_t v51;
  int64_t v52;
  std::string __dst;
  _QWORD v54[3];

  v54[2] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  v3 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v5 = v3 < 0;
  size = this->__r_.__value_.__l.__size_;
  if (v3 >= 0)
    v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    v7 = this->__r_.__value_.__l.__size_;
  v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v3 >= 0)
    v9 = this;
  else
    v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v7 < 1)
  {
LABEL_41:
    v20 = BYTE1(v8);
    goto LABEL_42;
  }
  v10 = (char *)v9 + v7;
  v11 = v7;
  v12 = v9;
  while (1)
  {
    v13 = memchr(v12, 92, v11);
    if (!v13)
      goto LABEL_35;
    if (*v13 == 92)
      break;
    v12 = (std::string *)(v13 + 1);
    v11 = v10 - (_BYTE *)v12;
    if (v10 - (_BYTE *)v12 < 1)
      goto LABEL_35;
  }
  if (v13 != v10)
  {
    v14 = v13 - (_BYTE *)v9;
    if (v13 - (_BYTE *)v9 != -1)
    {
      while (1)
      {
        v15 = v5 ? v8 : this;
        v15->__r_.__value_.__s.__data_[v14] = 47;
        v16 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
        v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        v5 = v16 < 0;
        v8 = (std::string *)this->__r_.__value_.__r.__words[0];
        size = this->__r_.__value_.__l.__size_;
        v7 = v16 >= 0 ? HIBYTE(this->__r_.__value_.__r.__words[2]) : this->__r_.__value_.__l.__size_;
        v9 = v16 >= 0 ? this : (std::string *)this->__r_.__value_.__r.__words[0];
        if (v7 < 1)
          goto LABEL_41;
        v10 = (char *)v9 + v7;
        v17 = v7;
        v18 = v9;
        while (1)
        {
          v19 = memchr(v18, 92, v17);
          if (!v19)
            goto LABEL_35;
          if (*v19 == 92)
            break;
          v18 = (std::string *)(v19 + 1);
          v17 = v10 - (_BYTE *)v18;
          if (v10 - (_BYTE *)v18 < 1)
            goto LABEL_35;
        }
        if (v19 != v10)
        {
          v14 = v19 - (_BYTE *)v9;
          if (v19 - (_BYTE *)v9 != -1)
            continue;
        }
        break;
      }
    }
  }
LABEL_35:
  v20 = BYTE1(v8);
  if (v7 > 1)
  {
    p_size = &this->__r_.__value_.__l.__size_;
    v21 = (char *)v9 + v7;
    v22 = v9;
    while (1)
    {
      v23 = (char *)memchr(v22, 47, v7 - 1);
      if (!v23)
        goto LABEL_42;
      if (*(_WORD *)v23 == 12079)
        break;
      v22 = (std::string *)(v23 + 1);
      v7 = v10 - (_BYTE *)v22;
      if (v10 - (_BYTE *)v22 < 2)
        goto LABEL_42;
    }
    if (v23 != v21)
    {
      v26 = v23 - (char *)v9;
      if (v23 - (char *)v9 != -1)
      {
        v27 = p_size;
        while (1)
        {
          if ((v4 & 0x80u) == 0)
            v28 = v4;
          else
            v28 = size;
          if (!v28)
            goto LABEL_42;
          if (!v26)
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if ((v4 & 0x80) == 0)
              goto LABEL_66;
            goto LABEL_80;
          }
          v29 = v26 - 1;
          if ((char)v4 < 0)
          {
            if (v8->__r_.__value_.__s.__data_[v29] == 58)
              goto LABEL_103;
          }
          else
          {
            if (this->__r_.__value_.__s.__data_[v29] == 58)
              goto LABEL_103;
            size = v4;
            v8 = this;
          }
          if (size >= v26)
            size = v26;
          if (size > 0x7FFFFFFFFFFFFFF7)
LABEL_118:
            abort();
          if (size >= 0x17)
            break;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size;
          p_dst = &__dst;
          if (size)
            goto LABEL_78;
LABEL_79:
          p_dst->__r_.__value_.__s.__data_[size] = 0;
          v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          if ((v4 & 0x80) == 0)
          {
LABEL_66:
            v30 = this;
            if (v26 >= v4)
              goto LABEL_118;
            goto LABEL_82;
          }
LABEL_80:
          v4 = *v27;
          if (*v27 <= v26)
            goto LABEL_118;
          v30 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_82:
          v34 = v26 + 1;
          v35 = v4 - (v26 + 1);
          if (v35 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_118;
          if (v35 >= 0x17)
          {
            v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17)
              v37 = v35 | 7;
            v38 = v37 + 1;
            p_p = operator new(v37 + 1);
            v51 = v35;
            v52 = v38 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v52) = v4 - (v26 + 1);
            p_p = &__p;
            if (v4 == v34)
              goto LABEL_90;
          }
          memmove(p_p, (char *)v30 + v34, v35);
LABEL_90:
          *((_BYTE *)p_p + v35) = 0;
          if (v52 >= 0)
            v39 = (const std::string::value_type *)&__p;
          else
            v39 = (const std::string::value_type *)__p;
          if (v52 >= 0)
            v40 = HIBYTE(v52);
          else
            v40 = v51;
          v41 = std::string::append(&__dst, v39, v40);
          v42 = v41->__r_.__value_.__r.__words[0];
          v54[0] = v41->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
          v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            operator delete(this->__r_.__value_.__l.__data_);
          this->__r_.__value_.__r.__words[0] = v42;
          *v27 = v54[0];
          *(std::string::size_type *)((char *)v27 + 7) = *(_QWORD *)((char *)v54 + 7);
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v43;
          if (SHIBYTE(v52) < 0)
            operator delete(__p);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          v8 = (std::string *)this->__r_.__value_.__r.__words[0];
          size = this->__r_.__value_.__l.__size_;
          v20 = BYTE1(this->__r_.__value_.__r.__words[0]);
LABEL_103:
          if ((v4 & 0x80u) == 0)
            v44 = this;
          else
            v44 = v8;
          if ((v4 & 0x80u) == 0)
            v45 = v4;
          else
            v45 = size;
          if (v45 > v26)
          {
            v46 = &v44->__r_.__value_.__s.__data_[v26 + 1];
            v47 = (char *)v44 + v45;
            while (1)
            {
              if (v47 - v46 < 2)
                goto LABEL_42;
              v48 = (char *)memchr(v46, 47, v47 - v46 - 1);
              if (!v48)
                goto LABEL_42;
              if (*(_WORD *)v48 == 12079)
                break;
              v46 = v48 + 1;
            }
            if (v48 != v47)
            {
              v26 = v48 - (char *)v44;
              if (v48 - (char *)v44 != -1)
                continue;
            }
          }
          goto LABEL_42;
        }
        v32 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((size | 7) != 0x17)
          v32 = size | 7;
        v33 = v32 + 1;
        p_dst = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = size;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_78:
        memmove(p_dst, v8, size);
        goto LABEL_79;
      }
    }
  }
LABEL_42:
  if ((v4 & 0x80) != 0)
  {
    if (size <= 2 || v8->__r_.__value_.__s.__data_[1] != 58)
      return;
    LOBYTE(v8) = v8->__r_.__value_.__s.__data_[0];
  }
  else if (v4 < 3 || v20 != 58)
  {
    return;
  }
  v24 = __tolower((char)v8);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = this;
  else
    v25 = (std::string *)this->__r_.__value_.__r.__words[0];
  v25->__r_.__value_.__s.__data_[0] = v24;
}

void karo::util::Path::removePrefix(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string *v6;
  std::string *v7;
  char v8;
  std::string *p_p;
  size_t size;
  int64_t v11;
  std::string *v12;
  int v13;
  std::string *v14;
  size_t v15;
  std::string *v16;
  std::string *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::string __p;
  std::string v23;

  karo::util::Path::purify(&v23, a2);
  karo::util::Path::purify(&__p, a3);
  v5 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v23;
  else
    v7 = (std::string *)v23.__r_.__value_.__r.__words[0];
  v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v11 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v23.__r_.__value_.__r.__words[2])
        : v23.__r_.__value_.__l.__size_;
    if (v11 < (uint64_t)size)
      goto LABEL_15;
    v12 = (std::string *)((char *)v7 + v11);
    v13 = p_p->__r_.__value_.__s.__data_[0];
    v14 = v7;
    while (1)
    {
      v15 = v11 - size;
      if (v15 == -1)
        goto LABEL_15;
      v16 = (std::string *)memchr(v14, v13, v15 + 1);
      if (!v16)
        goto LABEL_15;
      v17 = v16;
      if (!memcmp(v16, p_p, size))
        break;
      v14 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
      v11 = (char *)v12 - ((char *)&v17->__r_.__value_.__l.__data_ + 1);
      if (v11 < (uint64_t)size)
        goto LABEL_15;
    }
    if (v17 == v12 || v17 != v7)
    {
LABEL_15:
      *(std::string *)a1 = v23;
      memset(&v23, 0, sizeof(v23));
      if ((v8 & 0x80) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  if ((v5 & 0x80) != 0)
  {
    v5 = v23.__r_.__value_.__l.__size_;
    if (v23.__r_.__value_.__l.__size_ < size)
      goto LABEL_42;
  }
  else
  {
    if (size > v5)
      goto LABEL_42;
    v6 = &v23;
  }
  v18 = v5 - size;
  if (v5 - size >= 0x7FFFFFFFFFFFFFF8)
LABEL_42:
    abort();
  if (v18 >= 0x17)
  {
    v19 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v19 = v18 | 7;
    v20 = v19 + 1;
    v21 = operator new(v19 + 1);
    a1[1] = v18;
    a1[2] = v20 | 0x8000000000000000;
    *a1 = v21;
    a1 = v21;
    goto LABEL_39;
  }
  *((_BYTE *)a1 + 23) = v18;
  if (v5 != size)
LABEL_39:
    memmove(a1, (char *)v6 + size, v5 - size);
  *((_BYTE *)a1 + v18) = 0;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_16:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_17:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void karo::util::Path::getNonDirectory(void **__dst, void **a2)
{
  size_t v3;
  size_t v4;
  char *v5;
  void **v6;
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  __int128 *p_dsta;
  uint64_t v19;
  uint64_t v20;
  __int128 __dsta;
  unint64_t v22;

  *__dst = 0;
  __dst[1] = 0;
  __dst[2] = 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  v5 = (char *)*a2;
  v4 = (size_t)a2[1];
  if ((v3 & 0x80u) == 0)
    v6 = a2;
  else
    v6 = (void **)*a2;
  if ((v3 & 0x80u) == 0)
    v7 = (char *)*((unsigned __int8 *)a2 + 23);
  else
    v7 = (char *)a2[1];
  if (v7)
  {
    v8 = (unsigned __int8 *)&v7[(_QWORD)v6];
    v9 = (unsigned __int8 *)v6;
    v10 = v8;
    do
    {
      v11 = v9;
      v12 = v9;
      while (1)
      {
        v13 = *v12++;
        if (v13 == 47)
          break;
        v11 = v12;
        if (v12 == v8)
        {
          v11 = v10;
          goto LABEL_14;
        }
      }
      v9 = v11 + 1;
      v10 = v11;
    }
    while (v12 != v8);
LABEL_14:
    if (v11 != v8)
    {
      v14 = v11 - (unsigned __int8 *)v6;
      if (v14 != -1)
      {
        if ((v3 & 0x80) != 0)
        {
          if (v4 <= v14)
            goto LABEL_37;
        }
        else
        {
          v4 = *((unsigned __int8 *)a2 + 23);
          v5 = (char *)a2;
          if (v14 >= v3)
LABEL_37:
            abort();
        }
        v16 = v14 + 1;
        v17 = v4 - (v14 + 1);
        if (v17 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_37;
        if (v17 >= 0x17)
        {
          v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v19 = v17 | 7;
          v20 = v19 + 1;
          p_dsta = (__int128 *)operator new(v19 + 1);
          *((_QWORD *)&__dsta + 1) = v17;
          v22 = v20 | 0x8000000000000000;
          *(_QWORD *)&__dsta = p_dsta;
        }
        else
        {
          HIBYTE(v22) = v4 - (v14 + 1);
          p_dsta = &__dsta;
          if (v4 == v16)
            goto LABEL_32;
        }
        memmove(p_dsta, &v5[v16], v17);
LABEL_32:
        *((_BYTE *)p_dsta + v17) = 0;
        if (*((char *)__dst + 23) < 0)
          operator delete(*__dst);
        *(_OWORD *)__dst = __dsta;
        v15 = v22;
        goto LABEL_35;
      }
    }
  }
  if (__dst == a2)
    return;
  if ((v3 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(__dst, *a2, v4);
    return;
  }
  *(_OWORD *)__dst = *(_OWORD *)a2;
  v15 = (unint64_t)a2[2];
LABEL_35:
  __dst[2] = (void *)v15;
}

void karo::util::Path::getFileSuffix(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4;
  int v5;
  const std::string::value_type *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  std::string::size_type v14;
  void *p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t size;
  std::string *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  char *p_p;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  void *__p;
  size_t v30;
  unint64_t v31;
  std::string __dst;

  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = (char)v4;
  v6 = *(const std::string::value_type **)a2;
  if ((v4 & 0x80u) == 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = (unsigned __int8 *)v6;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    goto LABEL_22;
  v8 = &v7[v4];
  v9 = v7;
  v10 = (char *)&v7[v4];
  do
  {
    v11 = v9;
    v12 = v9;
    while (1)
    {
      v13 = *v12++;
      if (v13 == 46)
        break;
      v11 = v12;
      if (v12 == v8)
      {
        v11 = (unsigned __int8 *)v10;
        goto LABEL_13;
      }
    }
    v9 = v11 + 1;
    v10 = (char *)v11;
  }
  while (v12 != v8);
LABEL_13:
  if (v11 == v8 || v11 - v7 == -1)
  {
LABEL_22:
    if (v5 < 0)
      std::string::__init_copy_ctor_external(&__dst, v6, *(_QWORD *)(a2 + 8));
    else
      __dst = *(std::string *)a2;
    goto LABEL_30;
  }
  if (v4 >= v11 - v7)
    v14 = v11 - v7;
  else
    v14 = v4;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_65;
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
    p_dst = &__dst;
    if (!v14)
      goto LABEL_29;
  }
  memmove(p_dst, v7, v14);
LABEL_29:
  *((_BYTE *)p_dst + v14) = 0;
LABEL_30:
  v18 = *(unsigned __int8 *)(a2 + 23);
  if ((v18 & 0x80u) == 0)
    v19 = *(unsigned __int8 *)(a2 + 23);
  else
    v19 = *(_QWORD *)(a2 + 8);
  v20 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  if (v19 != size)
    goto LABEL_47;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__dst;
  else
    v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((v18 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v22, *(_QWORD *)(a2 + 8)))
      goto LABEL_47;
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v23 = (unsigned __int8 *)a2;
    while (*v23 == v22->__r_.__value_.__s.__data_[0])
    {
      ++v23;
      v22 = (std::string *)((char *)v22 + 1);
      if (!--v18)
        goto LABEL_63;
    }
LABEL_47:
    v24 = size + 1;
    if (size + 1 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v24 >= 0x17)
      {
        v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v26 = v24 | 7;
        v27 = v26 + 1;
        p_p = (char *)operator new(v26 + 1);
        v30 = size + 1;
        v31 = v27 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        __p = 0;
        p_p = (char *)&__p;
        HIBYTE(v31) = size + 1;
        if (!size)
          goto LABEL_58;
      }
      if (v20 >= 0)
        v28 = &__dst;
      else
        v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      memmove(p_p, v28, size);
LABEL_58:
      *(_WORD *)&p_p[size] = 46;
      karo::util::Path::removePrefix((_QWORD *)a1, a2, (uint64_t)&__p);
      if (SHIBYTE(v31) < 0)
        operator delete(__p);
      if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_61;
      return;
    }
LABEL_65:
    abort();
  }
LABEL_63:
  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)a1 = 0;
  if ((v20 & 0x80) != 0)
LABEL_61:
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void std::__function::__func<md::ita::PrepareSlices::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>,ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>)::$_1,std::allocator<md::ita::PrepareSlices::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>,ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareSlices::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>,ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>)::$_1,std::allocator<md::ita::PrepareSlices::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>,ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E427B220;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareSlices::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>,ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>)::$_1,std::allocator<md::ita::PrepareSlices::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>,ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427B220;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::PrepareSlices::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>,ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>)::$_1,std::allocator<md::ita::PrepareSlices::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>,ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*)>::operator()(uint64_t (***result)(), uint64_t a2, unsigned __int8 *a3, unint64_t **a4, _BYTE **a5, _BYTE **a6))()
{
  unsigned __int8 **v6;
  int v7;
  unint64_t *v8;
  _BYTE *v9;
  int v10;
  _BOOL4 v11;
  _BYTE *v12;
  int v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t (**v33)();
  uint64_t v34;
  int v35;
  uint64_t (***v36)();
  _QWORD v37[2];
  int v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;

  v6 = (unsigned __int8 **)result;
  v41 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  if ((v7 - 4) >= 0xFFFFFFFD)
  {
    v11 = (v7 - 1) < 2;
    if (*(_BYTE *)*result[1])
      v10 = 0;
    else
      v10 = v11;
  }
  else
  {
    v10 = 1;
  }
  v12 = *a6;
  v13 = *(unsigned __int8 *)result[2];
  v14 = v13 ^ 1;
  if (!v8)
  {
    v25 = v14 == 0;
    if (!v9)
    {
      v26 = 0;
      v27 = 0;
      v24 = 1;
      goto LABEL_31;
    }
    goto LABEL_26;
  }
  v15 = *result[3];
  v16 = *v8;
  v17 = *v8;
  v18 = v15[52];
  if (v17 < (v15[53] - v18) >> 3
    && ((v19 = *(_QWORD *)(v18 + 8 * v17)) != 0 ? (v20 = HIDWORD(v16) == HIDWORD(v19)) : (v20 = 0), v20))
  {
    v31 = 3 * v19;
    v21 = (_BYTE *)v15[56];
    v22 = (_BYTE *)(v15[55] + v31);
  }
  else
  {
    v21 = (_BYTE *)v15[56];
    v22 = v21;
  }
  if (v22 == v21)
    v23 = 0;
  else
    v23 = v22;
  if (v23)
  {
    result = (uint64_t (***)())std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v15 + 44), v16, v8);
    result[3] = (uint64_t (**)())((char *)result[3] + 1);
    v13 = *v6[2];
  }
  v24 = *v23 != 0;
  if (!v9 || !v13)
  {
    v26 = v23[1] != 0;
    v25 = v14 == 0;
    if (!v9)
    {
      v27 = 0;
      goto LABEL_31;
    }
    if (!*v23)
      goto LABEL_27;
LABEL_26:
    v24 = *v9 != 0;
    goto LABEL_28;
  }
  v25 = v9[2] == 0;
  if (*v23)
    goto LABEL_26;
LABEL_27:
  v24 = 0;
LABEL_28:
  v26 = v9[1] != 0;
  v27 = *v6[4];
  if (*v6[4])
    v27 = v9[3] != 0;
LABEL_31:
  if ((v26 & v25 & v27 & 1) == 0 && ((v10 | !v24) & 1) == 0 && (!v12 || (*v12 & *v6[5]) != 0))
  {
    v28 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v33 = &off_1E427E670;
    v34 = (v28 << 32) | 1;
    v35 = HIDWORD(v28);
    v36 = &v33;
    v37[0] = &off_1E427E670;
    v39 = v37;
    v37[1] = v34;
    v38 = HIDWORD(v28);
    v40 = 0;
    ecs2::Runtime::queueCommand(v29, (uint64_t)v37);
    if (v40 != -1)
      ((void (*)(char *, _QWORD *))off_1E42FB340[v40])(&v32, v37);
    v40 = -1;
    result = v36;
    if (v36 == &v33)
    {
      v30 = 4;
      result = &v33;
    }
    else
    {
      if (!v36)
        return result;
      v30 = 5;
    }
    return (uint64_t (***)())(*result)[v30]();
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E670;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E670;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void md::ImageResourceDecoder::~ImageResourceDecoder(md::ImageResourceDecoder *this)
{
  *(_QWORD *)this = &off_1E4299000;
  *((_QWORD *)this + 1) = &off_1E42B4D50;

}

{
  *(_QWORD *)this = &off_1E4299000;
  *((_QWORD *)this + 1) = &off_1E42B4D50;

  JUMPOUT(0x1A1AF4E00);
}

void md::ImageResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  id v6;
  id v7;
  CGDataProvider *v8;
  CGImageSource *v9;
  CGImage *ImageAtIndex;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  int BytesPerRow;
  int BitsPerComponent;
  std::__shared_weak_count_vtbl *v15;
  uint64_t shared_owners;
  size_t v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count_vtbl *v20;
  size_t v21;
  uint64_t shared_weak_owners;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  unint64_t v30;
  char *p_get_deleter;
  char *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char on_zero_shared_weak_high;
  unint64_t v41;
  int v42;
  CGImageAlphaInfo AlphaInfo;
  std::__shared_weak_count_vtbl *v44;
  size_t v45;
  size_t v46;
  CGColorSpace *ColorSpace;
  CGBitmapInfo BitmapInfo;
  CGContext *v49;
  CGContext *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count_vtbl *v55;
  char *v56;
  size_t v57;
  char *v58;
  unint64_t v59;
  size_t v60;
  unsigned int v61;
  const gdc::ResourceKey *v62;
  id v63;
  CGRect v64;

  if (*(_QWORD *)a2)
    v6 = *(id *)(*(_QWORD *)a2 + 16);
  else
    v6 = 0;
  v63 = v6;
  if (!objc_msgSend(v6, "length"))
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_58;
  }
  v7 = objc_retainAutorelease(v63);
  v8 = CGDataProviderCreateWithData(0, (const void *)objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"), 0);
  v9 = CGImageSourceCreateWithDataProvider(v8, 0);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v9, 0, 0);
  CFRelease(v9);
  CGDataProviderRelease(v8);
  v62 = a1;
  v11 = (std::__shared_weak_count *)operator new(0x48uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDE38;
  v11[1].std::__shared_count = 0u;
  *(_OWORD *)&v11[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[2].__shared_owners_ = 0u;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)(int)CGImageGetWidth(ImageAtIndex);
  v11[1].__shared_owners_ = (int)CGImageGetHeight(ImageAtIndex);
  BytesPerRow = CGImageGetBytesPerRow(ImageAtIndex);
  BitsPerComponent = CGImageGetBitsPerComponent(ImageAtIndex);
  v15 = v11[1].__vftable;
  if (!v15)
    goto LABEL_52;
  shared_owners = v11[1].__shared_owners_;
  if (!shared_owners || BitsPerComponent <= 0)
    goto LABEL_52;
  v17 = BytesPerRow;
  v18 = shared_owners * BytesPerRow;
  v19 = v11[2].__vftable;
  v20 = (std::__shared_weak_count_vtbl *)v11[2].__shared_owners_;
  v21 = v18 - ((char *)v20 - (char *)v19);
  v60 = v17;
  v61 = BitsPerComponent;
  if (v18 > (char *)v20 - (char *)v19)
  {
    shared_weak_owners = v11[2].__shared_weak_owners_;
    if (shared_weak_owners - (uint64_t)v20 >= v21)
    {
      bzero(v20, v18 - ((char *)v20 - (char *)v19));
      v17 = v60;
      BitsPerComponent = v61;
      v11[2].__shared_owners_ = (uint64_t)v19 + v18;
      goto LABEL_41;
    }
    v59 = (char *)v20 - (char *)v19;
    if ((v18 & 0x8000000000000000) != 0)
      abort();
    v23 = shared_weak_owners - (_QWORD)v19;
    v24 = 2 * v23;
    if (2 * v23 <= v18)
      v24 = v18;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v25 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    v57 = v25;
    v26 = (std::__shared_weak_count_vtbl *)operator new(v25);
    v58 = (char *)v26 + v57;
    v55 = v26;
    v56 = (char *)v26 + v18;
    v27 = (std::__shared_weak_count_vtbl *)((char *)v26 + v59);
    bzero((char *)v26 + v59, v21);
    if (v20 == v19)
    {
      v17 = v60;
      BitsPerComponent = v61;
      v29 = (uint64_t)v58;
      v28 = v27;
      goto LABEL_39;
    }
    v17 = v60;
    BitsPerComponent = v61;
    if (v59 < 8)
    {
      v28 = v55;
      goto LABEL_36;
    }
    v28 = v55;
    if ((unint64_t)((char *)v19 - (char *)v55) >= 0x20)
    {
      if (v59 >= 0x20)
      {
        v30 = v59 & 0xFFFFFFFFFFFFFFE0;
        p_get_deleter = (char *)&v20[-1].__get_deleter;
        v32 = (char *)v55 + (char *)&v20[-1].__get_deleter - (char *)v19;
        v33 = v59 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v34 = *(_OWORD *)p_get_deleter;
          *((_OWORD *)v32 - 1) = *((_OWORD *)p_get_deleter - 1);
          *(_OWORD *)v32 = v34;
          v32 -= 32;
          p_get_deleter -= 32;
          v33 -= 32;
        }
        while (v33);
        if (v59 == v30)
          goto LABEL_38;
        if ((v59 & 0x18) == 0)
        {
          v27 = (std::__shared_weak_count_vtbl *)((char *)v27 - v30);
          v20 = (std::__shared_weak_count_vtbl *)((char *)v20 - v30);
          goto LABEL_36;
        }
      }
      else
      {
        v30 = 0;
      }
      v35 = v30 - (v59 & 0xFFFFFFFFFFFFFFF8);
      v36 = (char *)v20 - v30 - 8;
      v37 = (char *)(v36 - (char *)v19);
      do
      {
        v38 = *(_QWORD *)v36;
        v36 -= 8;
        *(_QWORD *)&v37[(_QWORD)v55] = v38;
        v37 -= 8;
        v35 += 8;
      }
      while (v35);
      if (v59 == (v59 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_38;
      v27 = (std::__shared_weak_count_vtbl *)((char *)v27 - (v59 & 0xFFFFFFFFFFFFFFF8));
      v20 = (std::__shared_weak_count_vtbl *)((char *)v20 - (v59 & 0xFFFFFFFFFFFFFFF8));
    }
LABEL_36:
    v39 = (char *)&v27[-1].__on_zero_shared_weak + 7;
    do
    {
      on_zero_shared_weak_high = HIBYTE(v20[-1].__on_zero_shared_weak);
      v20 = (std::__shared_weak_count_vtbl *)((char *)v20 - 1);
      *v39-- = on_zero_shared_weak_high;
    }
    while (v20 != v19);
LABEL_38:
    v20 = v19;
    v29 = (uint64_t)v58;
LABEL_39:
    v11[2].__vftable = v28;
    v11[2].__shared_owners_ = (uint64_t)v56;
    v11[2].__shared_weak_owners_ = v29;
    if (v20)
    {
      operator delete(v20);
      v17 = v60;
      BitsPerComponent = v61;
    }
    goto LABEL_41;
  }
  if (v18 < (char *)v20 - (char *)v19)
    v11[2].__shared_owners_ = (uint64_t)v19 + v18;
LABEL_41:
  v41 = v17 / (unint64_t)v15 / (BitsPerComponent >> 3);
  if ((_DWORD)v41 == 1)
  {
    v42 = 2;
  }
  else
  {
    if ((_DWORD)v41 != 4)
    {
LABEL_52:
      *a3 = 0;
      a3[1] = 0;
      goto LABEL_53;
    }
    v42 = 12;
  }
  LODWORD(v11[1].__shared_weak_owners_) = v42;
  AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
  if ((_DWORD)v41 == 4 && AlphaInfo == kCGImageAlphaPremultipliedLast)
    bzero(v11[2].__vftable, v11[2].__shared_owners_ - (unint64_t)v11[2].__vftable);
  v44 = v11[2].__vftable;
  v45 = (size_t)v11[1].__vftable;
  v46 = v11[1].__shared_owners_;
  ColorSpace = CGImageGetColorSpace(ImageAtIndex);
  BitmapInfo = CGImageGetBitmapInfo(ImageAtIndex);
  v49 = CGBitmapContextCreate(v44, v45, v46, v61, v60, ColorSpace, BitmapInfo);
  v50 = v49;
  if (!v49)
    goto LABEL_52;
  v64.size.width = (double)(unint64_t)v11[1].__vftable;
  v64.size.height = (double)(unint64_t)v11[1].__shared_owners_;
  v64.origin.x = 0.0;
  v64.origin.y = 0.0;
  CGContextDrawImage(v49, v64, ImageAtIndex);
  CGContextRelease(v50);
  v51 = operator new(0xB8uLL);
  v51[1] = 0;
  v51[2] = 0;
  *v51 = &off_1E42DAFA0;
  v52 = gdc::Resource::Resource((uint64_t)(v51 + 3), (uint64_t)v62);
  v51[21] = v11 + 1;
  v51[22] = v11;
  do
    v53 = __ldxr(p_shared_owners);
  while (__stxr(v53 + 1, p_shared_owners));
  *a3 = v52;
  a3[1] = (uint64_t)v51;
  do
LABEL_53:
    v54 = __ldaxr(p_shared_owners);
  while (__stlxr(v54 - 1, p_shared_owners));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (ImageAtIndex)
    CFRelease(ImageAtIndex);
LABEL_58:

}

void sub_19F83925C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, char a17)
{
  const void *v17;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (v17)
    CFRelease(v17);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::ImageResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAFA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ImageResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAFA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ImageResource>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[22];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)a1[4];
  if (v5 != (void *)a1[6])
    free(v5);
}

void std::__shared_ptr_emplace<md::Image>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::Image>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDE38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::Image>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

md::LabelTrafficTile *md::LabelTrafficTile::LabelTrafficTile(md::LabelTrafficTile *this, const QuadTile *a2, geo::codec::VectorTile *a3, zilch::TrafficSkeletonTile *a4, const md::DynamicTrafficTileList *a5)
{
  geo::codec::VectorTile *v5;
  md::LabelTrafficTile *v7;
  unsigned __int8 level;
  int v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  geo::codec::VectorTile *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int8x8_t **v25;
  uint64_t updated;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int8x8_t v50;
  double v51;
  double v52;
  int v53;
  double v54;
  double v55;
  double v56;
  BOOL v57;
  unsigned __int8 *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v62;
  std::__shared_weak_count **v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count **v71;
  uint64_t v72;
  md::LabelTrafficTile *v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  __int128 v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  int8x16_t v100;
  float v101;
  NSObject *v102;
  float v103;
  unsigned int v104;
  int v105;
  BOOL v106;
  float v107;
  float v108;
  float v109;
  float32x2_t *v110;
  float32x2_t v111;
  float32x2_t v112;
  unsigned int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unsigned __int8 *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  geo::codec::VectorTile *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  md::LabelTrafficTile *v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  void *v152[2];
  void *v153[2];
  __int128 v154;
  void *v155[2];
  void *__p[2];
  __int128 v157;
  unsigned __int8 v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  float v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  unint64_t v168;
  __int16 v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE buf[24];
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  __int16 v176;
  double v177;
  __int16 v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;

  v5 = a3;
  v7 = this;
  v190 = *MEMORY[0x1E0C80C00];
  level = a2->_level;
  v9 = 1 << level;
  v10 = (a2->_yIdx % v9 + v9) % v9;
  v11 = (a2->_xIdx % v9 + v9) % v9;
  *((_BYTE *)this + 8) = a2->_type;
  *((_BYTE *)this + 9) = level;
  *((_DWORD *)this + 3) = v10;
  *((_DWORD *)this + 4) = v11;
  *((_DWORD *)this + 8) = vcvtmd_s64_f64((double)a2->_xIdx / (double)(1 << a2->_level));
  v12 = 1.0 / (double)(1 << level);
  v13 = v12 * (double)v11;
  v14 = v12 * (double)((1 << level) + ~v10);
  *((double *)this + 5) = v13;
  *((double *)this + 6) = v14;
  *((double *)this + 7) = v13 + v12;
  *((double *)this + 8) = v14 + v12;
  *(_QWORD *)this = &off_1E4291C18;
  *((_BYTE *)this + 72) = a3 == 0;
  *((_QWORD *)this + 10) = 0;
  v131 = (_QWORD *)((char *)this + 80);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v17 = (geo::codec::VectorTile *)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v16 & 1) == 0)
    goto LABEL_187;
  while (1)
  {
    v18 = *((_QWORD *)v17 + 299);
    *((_OWORD *)v7 + 7) = 0u;
    *((_QWORD *)v7 + 13) = v18;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 9) = 0u;
    LOBYTE(v18) = atomic_load(v15);
    {
      v128 = operator new();
      *((_QWORD *)v17 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v128, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *((_QWORD *)v7 + 20) = *((_QWORD *)v17 + 299);
    *((_QWORD *)v7 + 21) = 0;
    v19 = atomic_load(v15);
    {
      v129 = operator new();
      *((_QWORD *)v17 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v129, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v141 = v5;
    v20 = *((_QWORD *)v17 + 299);
    *((_QWORD *)v7 + 25) = 0;
    *((_QWORD *)v7 + 22) = v20;
    *((_QWORD *)v7 + 23) = 0;
    *((_DWORD *)v7 + 48) = 1065353216;
    *((_QWORD *)v7 + 26) = 0;
    *((_QWORD *)v7 + 27) = 0;
    v138 = (_QWORD *)((char *)v7 + 200);
    LOBYTE(v20) = atomic_load(v15);
    {
      v130 = operator new();
      *((_QWORD *)v17 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v130, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *((_QWORD *)v7 + 28) = *((_QWORD *)v17 + 299);
    v21 = *(_QWORD *)a5;
    if (*((_QWORD *)a5 + 1) == *(_QWORD *)a5)
      return v7;
    v22 = 0;
    v147 = v7;
    while (2)
    {
      v137 = v22;
      v25 = (int8x8_t **)(v21 + 16 * v22);
      updated = zilch::TrafficDynamicTile::feedUpdateTimeSeconds(*(zilch::TrafficDynamicTile **)&(*v25)[18]);
      v27 = updated;
      v28 = (uint64_t *)*((_QWORD *)v7 + 11);
      v29 = *((_QWORD *)v7 + 12);
      if ((unint64_t)v28 >= v29)
      {
        v30 = ((uint64_t)v28 - *v131) >> 3;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          abort();
        v32 = v29 - *v131;
        if (v32 >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 13) + 16))(*((_QWORD *)v7 + 13), 8 * v33, 8);
          v35 = (uint64_t *)(v34 + 8 * v30);
          v36 = v34 + 8 * v33;
          if (v34)
            *v35 = v27;
        }
        else
        {
          v36 = 0;
          v35 = (uint64_t *)(8 * v30);
        }
        v37 = *((_QWORD *)v7 + 10);
        v38 = *((_QWORD *)v7 + 11);
        v39 = v35;
        if (v38 == v37)
          goto LABEL_33;
        v40 = v38 - v37 - 8;
        if (v40 < 0x38)
        {
          v39 = v35;
        }
        else
        {
          v39 = v35;
          if ((unint64_t)(v38 - (_QWORD)v35) >= 0x20)
          {
            v41 = (v40 >> 3) + 1;
            v42 = v38 - 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
            v43 = v35 - 2;
            v44 = (__int128 *)(v38 - 16);
            v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v46 = *v44;
              *((_OWORD *)v43 - 1) = *(v44 - 1);
              *(_OWORD *)v43 = v46;
              v43 -= 4;
              v44 -= 2;
              v45 -= 4;
            }
            while (v45);
            v39 = &v35[-(v41 & 0x3FFFFFFFFFFFFFFCLL)];
            v38 = v42;
            if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_33:
              v15 = (unsigned __int8 *)(v35 + 1);
              *((_QWORD *)v7 + 10) = v39;
              *((_QWORD *)v7 + 11) = v35 + 1;
              v48 = *((_QWORD *)v7 + 12);
              *((_QWORD *)v7 + 12) = v36;
              if (v37)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 13) + 40))(*((_QWORD *)v7 + 13), v37, v48 - v37);
              goto LABEL_35;
            }
          }
        }
        do
        {
          v47 = *(_QWORD *)(v38 - 8);
          v38 -= 8;
          *--v39 = v47;
        }
        while (v38 != v37);
        goto LABEL_33;
      }
      if (v28)
        *v28 = updated;
      v15 = (unsigned __int8 *)(v28 + 1);
LABEL_35:
      v49 = 0;
      *((_QWORD *)v7 + 11) = v15;
      while (1)
      {
        v50 = (*v25)[25];
        if (v49 >= (uint64_t)(*(_QWORD *)&(*v25)[26] - *(_QWORD *)&v50) >> 3)
          break;
        v15 = (unsigned __int8 *)*(id *)(*(_QWORD *)&v50 + 8 * v49);
        objc_msgSend(v15, "mercatorPoint");
        v53 = 1 << a2->_level;
        v54 = 1.0 / (double)v53;
        v55 = v54 * (double)a2->_xIdx;
        if (v51 >= v55)
        {
          v56 = v54 * (double)(v53 + ~a2->_yIdx);
          v57 = v51 >= v55 + v54 || v52 < v56;
          if (!v57 && v52 < v56 + v54)
          {
            v59 = v15;
            v60 = (std::__shared_weak_count *)operator new(0x1A0uLL);
            v60->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v60->__shared_owners_;
            v60->__shared_weak_owners_ = 0;
            v60->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD700;
            v62 = v60 + 1;
            v152[0] = 0;
            v152[1] = 0;
            md::TrafficIncidentLabelFeature::TrafficIncidentLabelFeature((uint64_t)&v60[1], v59, v152);
            v63 = (std::__shared_weak_count **)*((_QWORD *)v7 + 26);
            v64 = *((_QWORD *)v7 + 27);
            *(_QWORD *)&v182 = v60 + 1;
            *((_QWORD *)&v182 + 1) = v60;
            if ((unint64_t)v63 < v64)
            {
              if (v63)
              {
                *v63 = v62;
                v63[1] = v60;
                do
                  v65 = __ldxr(p_shared_owners);
                while (__stxr(v65 + 1, p_shared_owners));
              }
              *((_QWORD *)v7 + 26) = v63 + 2;
              goto LABEL_78;
            }
            v66 = ((uint64_t)v63 - *v138) >> 4;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 60)
              abort();
            v68 = v64 - *v138;
            if (v68 >> 3 > v67)
              v67 = v68 >> 3;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
              v69 = 0xFFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
            {
              v70 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v147 + 28) + 16))(*((_QWORD *)v147 + 28), 16 * v69, 8);
              v71 = (std::__shared_weak_count **)(v70 + 16 * v66);
              v72 = v70 + 16 * v69;
              if (v70)
              {
                *v71 = v62;
                v71[1] = v60;
                v73 = v147;
                do
                  v74 = __ldxr(p_shared_owners);
                while (__stxr(v74 + 1, p_shared_owners));
LABEL_64:
                v75 = v71 + 2;
                v76 = (_QWORD *)*((_QWORD *)v73 + 25);
                v77 = (_QWORD *)*((_QWORD *)v73 + 26);
                if (v77 == v76)
                {
                  *((_QWORD *)v73 + 25) = v71;
                  *((_QWORD *)v73 + 26) = v75;
                  v80 = *((_QWORD *)v73 + 27);
                  *((_QWORD *)v73 + 27) = v72;
                }
                else
                {
                  do
                  {
                    v78 = *((_OWORD *)v77 - 1);
                    v77 -= 2;
                    *((_OWORD *)v71 - 1) = v78;
                    v71 -= 2;
                    *v77 = 0;
                    v77[1] = 0;
                  }
                  while (v77 != v76);
                  v77 = (_QWORD *)*((_QWORD *)v73 + 25);
                  v79 = (_QWORD *)*((_QWORD *)v73 + 26);
                  *((_QWORD *)v73 + 25) = v71;
                  *((_QWORD *)v73 + 26) = v75;
                  v80 = *((_QWORD *)v73 + 27);
                  *((_QWORD *)v73 + 27) = v72;
                  while (v79 != v77)
                  {
                    v81 = (std::__shared_weak_count *)*(v79 - 1);
                    if (v81)
                    {
                      v82 = (unint64_t *)&v81->__shared_owners_;
                      do
                        v83 = __ldaxr(v82);
                      while (__stlxr(v83 - 1, v82));
                      if (!v83)
                      {
                        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                        std::__shared_weak_count::__release_weak(v81);
                      }
                    }
                    v79 -= 2;
                  }
                }
                if (v77)
                  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v147 + 28) + 40))(*((_QWORD *)v147 + 28), v77, v80 - (_QWORD)v77);
                v60 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
                *((_QWORD *)v147 + 26) = v75;
                v7 = v147;
                if (v60)
                {
LABEL_78:
                  v84 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v85 = __ldaxr(v84);
                  while (__stlxr(v85 - 1, v84));
                  if (!v85)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }

                goto LABEL_83;
              }
            }
            else
            {
              v72 = 0;
              v71 = (std::__shared_weak_count **)(16 * v66);
            }
            v73 = v147;
            goto LABEL_64;
          }
        }
LABEL_83:

        ++v49;
      }
      if (!v141)
        goto LABEL_9;
      v170[0] = &off_1E42CD580;
      v170[1] = v7;
      v171 = v170;
      v17 = v141;
      v139 = geo::codec::VectorTile::lines(v141);
      v140 = geo::codec::VectorTile::linesCount(v141);
      v86 = geo::codec::VectorTile::lineVertices(v141);
      if (!v86)
        goto LABEL_179;
      v5 = 0;
      v143 = 0;
      v136 = 0;
      v134 = *(_QWORD *)(v86 + 32);
      v135 = v86;
      *(_OWORD *)__p = 0u;
      v157 = 0u;
      v154 = 0u;
      *(_OWORD *)v155 = 0u;
      *(_OWORD *)v152 = 0u;
      *(_OWORD *)v153 = 0u;
      v158 = 3;
      v160 = 0;
      v159 = 0;
      v161 = -1054867456;
      v162 = 0;
      v163 = 0xFFFFFFF6FFFFFFFFLL;
      v164 = -10.0;
      v165 = 0u;
      v166 = 0u;
      v167 = 0;
      v168 = 0xFFFFFFFF00000000;
      v87 = 0.0;
      v169 = 0;
      while (2)
      {
        if ((unint64_t)v5 < zilch::TrafficSkeletonTile::size(a4))
        {
          v88 = zilch::TrafficSkeletonTile::operator[]();
          v89 = *(_OWORD *)(v88 + 16);
          v149 = *(_OWORD *)v88;
          v150 = v89;
          v151 = *(_QWORD *)(v88 + 32);
          v188 = 0u;
          v189 = 0u;
          v186 = 0u;
          v187 = 0u;
          v184 = 0u;
          v185 = 0u;
          v182 = 0u;
          v183 = 0u;
          v90 = md::TrafficDynamicTileResource::flowForRoadId(*v25, v89, &v182);
          if (!v90)
            goto LABEL_87;
          v15 = (unsigned __int8 *)v149;
          if (v140 <= v149)
            goto LABEL_87;
          v91 = v139 + 168 * v149;
          v92 = v143;
          if (!v143)
            v92 = v139 + 168 * v149;
          v143 = v92;
          if (fabsf(*((float *)&v149 + 3)) < 0.000001
            || (v93 = v90,
                std::__introsort<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>((uint64_t)&v182, (uint64_t *)&v182 + v90, 126 - 2 * __clz(v90), 1), v17 = (geo::codec::VectorTile *)DWORD1(v149), DWORD1(v149) > *(_DWORD *)(v91 + 100)))
          {
LABEL_87:
            v5 = (geo::codec::VectorTile *)((char *)v5 + 1);
            continue;
          }
          v94 = 0;
          v95 = (uint64_t *)(v134 + 16 * (DWORD1(v149) + *(_DWORD *)(v91 + 96)));
          v144 = *v95;
          v145 = v95[1];
          v142 = (char *)(*(_QWORD *)(v135 + 8) + 8 * *v95);
          v96 = (float)(unint64_t)(v145 - 1);
          v133 = (unsigned __int8 *)(v139 + 168 * v15 + 153);
          while (2)
          {
            if (v17 <= *(_DWORD *)(v91 + 100))
            {
              v97 = *((_QWORD *)&v182 + v94);
              v7 = (md::LabelTrafficTile *)*(unsigned int *)(v97 + 16);
              if (v7 <= 2
                && (v148 = 0,
                    v181 = 0,
                    v180 = 0,
                    geo::codec::VectorTile::key(v141),
                    v180 = GEOTileKeyMake(),
                    v181 = v98,
                    (md::TrafficUtilities::buildStartOffset((float *)&v148 + 1, (float *)&v148, (std::__shared_weak_count **)v91, (uint64_t)&v149, v144, v145, v97, (uint64_t)v142, (uint64_t)&v180) & 1) != 0))
              {
                v101 = *((float *)&v148 + 1);
                if (*((float *)&v148 + 1) < 0.0
                  || *((float *)&v148 + 1) > v96
                  || (v103 = *(float *)&v148, *(float *)&v148 < 0.0)
                  || *(float *)&v148 > v96)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
                  v7 = v147;
                  v102 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 134219264;
                    *(double *)&buf[4] = v101;
                    *(_WORD *)&buf[12] = 2048;
                    *(double *)&buf[14] = *(float *)&v148;
                    *(_WORD *)&buf[22] = 2048;
                    v173 = v144;
                    v174 = 2048;
                    v175 = v145;
                    v176 = 2048;
                    v177 = *((float *)&v149 + 2);
                    v178 = 2048;
                    v179 = *((float *)&v149 + 3);
                    _os_log_impl(&dword_19F029000, v102, OS_LOG_TYPE_INFO, "Skeleton traffic tile implicates bad section (start: %f, end: %f, valid: %lu,%lu, skeleton record: %f,%f)", buf, 0x3Eu);
                  }

                }
                else
                {
                  if (*((float *)&v149 + 3) > 0.0)
                    v104 = 1;
                  else
                    v104 = -1;
                  v105 = DWORD2(v150);
                  if (v158 == v7
                    && v159 == DWORD2(v150)
                    && !(_BYTE)v169
                    && (_DWORD)v160 == v104
                    && (!v162 || *v133 == *(unsigned __int8 *)(v162 + 153)))
                  {
                    v106 = !(_QWORD)v165 || HIBYTE(v169) == 0;
                    if (v106 && !(_QWORD)v166 && !HIDWORD(v168))
                    {
                      if (v152[0] == v152[1])
                        goto LABEL_142;
                      if (v162 == v91 && SHIDWORD(v163) == (unint64_t)v17)
                      {
                        *(float *)&v99 = v164;
                        if (*((float *)&v149 + 3) > 0.0)
                        {
                          if (v164 <= *((float *)&v148 + 1))
                          {
                            *(float *)&v99 = *((float *)&v148 + 1) - v164;
                            goto LABEL_134;
                          }
                        }
                        else if (v164 >= *((float *)&v148 + 1))
                        {
                          *(float *)&v99 = v164 - *((float *)&v148 + 1);
LABEL_134:
                          v100.i32[0] = 1.0;
                          if (*(float *)&v99 <= 1.0)
                          {
                            v107 = ceilf(*((float *)&v148 + 1));
                            v108 = floorf(*((float *)&v148 + 1));
                            v109 = *((float *)&v149 + 3) > 0.0 ? v107 : v108;
                            *(double *)v100.i64 = vabds_f32(v109, *((float *)&v148 + 1));
                            if (*(double *)v100.i64 <= 0.01)
                            {
                              v111 = *(float32x2_t *)(v167 + 8 * (int)v109);
                            }
                            else
                            {
                              v110 = (float32x2_t *)(v167 + 8 * (int)v108);
                              *(float32x2_t *)v100.i8 = vsub_f32(v110[1], *v110);
                              v111 = vmla_n_f32(*v110, *(float32x2_t *)v100.i8, *((float *)&v148 + 1) - v108);
                            }
                            v99 = *((double *)v152[1] - 1);
                            v112 = vsub_f32(*(float32x2_t *)&v99, v111);
                            LODWORD(v99) = 953267991;
                            if (vaddv_f32(vmul_f32(v112, v112)) < 0.0001)
                            {
LABEL_142:
                              v7 = v147;
                              goto LABEL_157;
                            }
                          }
                        }
                      }
                    }
                  }
                  if (SHIDWORD(v160) >= 1)
                  {
                    *(_QWORD *)buf = v143;
                    *(_QWORD *)&buf[8] = v17;
                    *(_DWORD *)&buf[16] = vcvtms_s32_f32(v87);
                    *(_DWORD *)&buf[20] = vcvtms_s32_f32(v164);
                    *(float *)&v173 = v87 - floorf(v87);
                    *((float *)&v173 + 1) = v164 - floorf(v164);
                    if (!v171)
                      goto LABEL_186;
                    v113 = v104;
                    (*(void (**)(_QWORD *, _BYTE *))(*v171 + 48))(v171, buf);
                    v104 = v113;
                  }
                  v152[1] = v152[0];
                  *(void **)&v154 = v153[1];
                  v155[1] = v155[0];
                  *(void **)&v157 = __p[1];
                  v162 = v91;
                  LODWORD(v163) = (_DWORD)v15;
                  v158 = v7;
                  v159 = v105;
                  v160 = v104;
                  v114 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
                  v165 = 0uLL;
                  v7 = v147;
                  if (v114)
                  {
                    v115 = (unint64_t *)&v114->__shared_owners_;
                    do
                      v116 = __ldaxr(v115);
                    while (__stlxr(v116 - 1, v115));
                    if (!v116)
                    {
                      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                      std::__shared_weak_count::__release_weak(v114);
                    }
                  }
                  v117 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
                  v166 = 0uLL;
                  if (v117)
                  {
                    v118 = (unint64_t *)&v117->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  HIDWORD(v168) = 0;
                  LOBYTE(v169) = 0;
                  v101 = *((float *)&v148 + 1);
                  v103 = *(float *)&v148;
                  v15 = (unsigned __int8 *)v149;
                  v17 = (geo::codec::VectorTile *)DWORD1(v149);
                  v143 = v91;
                  v136 = DWORD1(v149);
                  v87 = *((float *)&v148 + 1);
LABEL_157:
                  v162 = v91;
                  v163 = __PAIR64__(v17, v15);
                  v164 = v103;
                  md::TrafficAccum::addPoints((float32x2_t **)v152, v142, 0, 0, v145, 0, v101, v103, v99, v100);
                }
              }
              else
              {
                v7 = v147;
              }
            }
            if (++v94 == v93)
              goto LABEL_87;
            continue;
          }
        }
        break;
      }
      if (v160 <= 0)
        goto LABEL_161;
      *(_QWORD *)&v182 = v143;
      *((_QWORD *)&v182 + 1) = v136;
      *(_QWORD *)&v183 = __PAIR64__(vcvtms_s32_f32(v164), vcvtms_s32_f32(v87));
      *((float *)&v183 + 2) = v87 - floorf(v87);
      *((float *)&v183 + 3) = v164 - floorf(v164);
      if (v171)
      {
        (*(void (**)(_QWORD *, __int128 *))(*v171 + 48))(v171, &v182);
LABEL_161:
        v120 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (!*((_QWORD *)&v166 + 1))
          goto LABEL_165;
        v121 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
          v123 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (*((_QWORD *)&v165 + 1))
          {
LABEL_166:
            v124 = (unint64_t *)&v123->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
        }
        else
        {
LABEL_165:
          v123 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
          if (*((_QWORD *)&v165 + 1))
            goto LABEL_166;
        }
        if (__p[1])
          operator delete(__p[1]);
        if (v155[0])
          operator delete(v155[0]);
        if (v153[1])
          operator delete(v153[1]);
        if (v152[0])
          operator delete(v152[0]);
LABEL_179:
        v23 = v171;
        if (v171 != v170)
        {
          if (v171)
          {
            v24 = 5;
LABEL_8:
            (*(void (**)(void))(*v23 + 8 * v24))();
          }
LABEL_9:
          v22 = v137 + 1;
          v21 = *(_QWORD *)a5;
          if (v137 + 1 >= (unint64_t)((uint64_t)(*((_QWORD *)a5 + 1) - *(_QWORD *)a5) >> 4))
            return v7;
          continue;
        }
        v23 = v170;
        v24 = 4;
        goto LABEL_8;
      }
      break;
    }
LABEL_186:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
LABEL_187:
    {
      v127 = operator new();
      *((_QWORD *)v17 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v127, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
  }
}

void sub_19F83A2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  char *v72;
  uint64_t v73;
  uint64_t v74;

  md::TrafficAccum::~TrafficAccum((md::TrafficAccum *)&a41);
  v72 = (char *)STACK[0x208];
  if ((char *)STACK[0x208] == &a71)
  {
    v73 = 4;
    v72 = &a71;
  }
  else
  {
    if (!v72)
      goto LABEL_6;
    v73 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
LABEL_6:
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](a24);
  std::__hash_table<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::__unordered_map_hasher<GeoCodecsFeature const*,std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::hash<GeoCodecsFeature const*>,std::equal_to<GeoCodecsFeature const*>,true>,std::__unordered_map_equal<GeoCodecsFeature const*,std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::equal_to<GeoCodecsFeature const*>,std::hash<GeoCodecsFeature const*>,true>,geo::StdAllocator<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  v74 = *a14;
  if (*a14)
  {
    *(_QWORD *)(a33 + 88) = v74;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a33 + 104) + 40))(*(_QWORD *)(a33 + 104), v74, *(_QWORD *)(a33 + 96) - v74);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::__unordered_map_hasher<GeoCodecsFeature const*,std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::hash<GeoCodecsFeature const*>,std::equal_to<GeoCodecsFeature const*>,true>,std::__unordered_map_equal<GeoCodecsFeature const*,std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::equal_to<GeoCodecsFeature const*>,std::hash<GeoCodecsFeature const*>,true>,geo::StdAllocator<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      v6 = (uint64_t *)*v2;
      v7 = v2[3];
      if (v7)
      {
        v8 = v2[4];
        v5 = v2[3];
        if (v8 != v7)
        {
          v9 = v2[4];
          do
          {
            v11 = *(_QWORD *)(v9 - 32);
            v9 -= 32;
            v10 = v11;
            if (v11)
            {
              *(_QWORD *)(v8 - 24) = v10;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 - 8) + 40))(*(_QWORD *)(v8 - 8), v10, *(_QWORD *)(v8 - 16) - v10);
            }
            v8 = v9;
          }
          while (v9 != v7);
          v5 = v2[3];
        }
        v2[4] = v7;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v5, v2[5] - v5);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 56);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v3, 8 * a1[1]);
  return a1;
}

void std::__function::__func<md::LabelTrafficTile::LabelTrafficTile(geo::QuadTile const&,geo::codec::VectorTile *,zilch::TrafficSkeletonTile *,md::DynamicTrafficTileList const&)::$_0,std::allocator<md::LabelTrafficTile::LabelTrafficTile(geo::QuadTile const&,geo::codec::VectorTile *,zilch::TrafficSkeletonTile *,md::DynamicTrafficTileList const&)::$_0>,void ()(md::RoadPiece const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTrafficTile::LabelTrafficTile(geo::QuadTile const&,geo::codec::VectorTile *,zilch::TrafficSkeletonTile *,md::DynamicTrafficTileList const&)::$_0,std::allocator<md::LabelTrafficTile::LabelTrafficTile(geo::QuadTile const&,geo::codec::VectorTile *,zilch::TrafficSkeletonTile *,md::DynamicTrafficTileList const&)::$_0>,void ()(md::RoadPiece const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD580;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelTrafficTile::LabelTrafficTile(geo::QuadTile const&,geo::codec::VectorTile *,zilch::TrafficSkeletonTile *,md::DynamicTrafficTileList const&)::$_0,std::allocator<md::LabelTrafficTile::LabelTrafficTile(geo::QuadTile const&,geo::codec::VectorTile *,zilch::TrafficSkeletonTile *,md::DynamicTrafficTileList const&)::$_0>,void ()(md::RoadPiece const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD580;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelTrafficTile::LabelTrafficTile(geo::QuadTile const&,geo::codec::VectorTile *,zilch::TrafficSkeletonTile *,md::DynamicTrafficTileList const&)::$_0,std::allocator<md::LabelTrafficTile::LabelTrafficTile(geo::QuadTile const&,geo::codec::VectorTile *,zilch::TrafficSkeletonTile *,md::DynamicTrafficTileList const&)::$_0>,void ()(md::RoadPiece const&)>::operator()(uint64_t a1, unint64_t *a2)
{
  md::TrafficRoads::addRoadPiece((float *)(*(_QWORD *)(a1 + 8) + 144), a2);
}

void md::LabelTrafficTile::~LabelTrafficTile(md::LabelTrafficTile *this)
{
  md::LabelTrafficTile::~LabelTrafficTile(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E4291C18;
  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    v3 = *((_QWORD *)this + 26);
    v4 = *((_QWORD *)this + 25);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 25);
    }
    *((_QWORD *)this + 26) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 28) + 40))(*((_QWORD *)this + 28), v4, *((_QWORD *)this + 27) - v4);
  }
  std::__hash_table<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::__unordered_map_hasher<GeoCodecsFeature const*,std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::hash<GeoCodecsFeature const*>,std::equal_to<GeoCodecsFeature const*>,true>,std::__unordered_map_equal<GeoCodecsFeature const*,std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,std::equal_to<GeoCodecsFeature const*>,std::hash<GeoCodecsFeature const*>,true>,geo::StdAllocator<std::__hash_value_type<GeoCodecsFeature const*,std::vector<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,geo::StdAllocator<std::vector<md::RoadPiece,geo::StdAllocator<md::RoadPiece,mdm::Allocator>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 18);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v8)
    goto LABEL_16;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v11)
      goto LABEL_22;
  }
  else
  {
LABEL_16:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v11)
      goto LABEL_22;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_22:
  v14 = *((_QWORD *)this + 10);
  if (v14)
  {
    *((_QWORD *)this + 11) = v14;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v14, *((_QWORD *)this + 12) - v14);
  }
}

_OWORD *std::vector<std::weak_ptr<md::LabelTrafficTile>,geo::StdAllocator<std::weak_ptr<md::LabelTrafficTile>,mdm::Allocator>>::__push_back_slow_path<std::weak_ptr<md::LabelTrafficTile>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7)
  {
    v9 = 16 * v7;
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v7, 8);
    v11 = (_OWORD *)(v10 + 16 * v2);
    v7 = v10 + v9;
    if (v10)
    {
      *v11 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  else
  {
    v11 = (_OWORD *)(16 * v2);
  }
  v12 = v11 + 1;
  v13 = *(_QWORD **)a1;
  v14 = *(_QWORD **)(a1 + 8);
  if (v14 == *(_QWORD **)a1)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v14 - 1);
      v14 -= 2;
      *--v11 = v15;
      *v14 = 0;
      v14[1] = 0;
    }
    while (v14 != v13);
    v14 = *(_QWORD **)a1;
    v16 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    while (v16 != v14)
    {
      v18 = (std::__shared_weak_count *)*(v16 - 1);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      v16 -= 2;
    }
  }
  if (v14)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v17 - (_QWORD)v14);
  return v12;
}

void std::__shared_ptr_emplace<md::LabelTrafficTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelTrafficTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelTrafficTile>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::ElevatedTerrainHeightProvider::~ElevatedTerrainHeightProvider(md::ElevatedTerrainHeightProvider *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::AnchorLogic::~AnchorLogic(md::AnchorLogic *this)
{
  md::AnchorLogic::~AnchorLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  uint64_t v5;
  uint64_t i;
  void (***v7)(_QWORD);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;

  *(_QWORD *)this = &off_1E428BDA8;
  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  md::AnchorLogic::_resetExternalAnchors(*((md::AnchorLogic **)this + 24));
  v3 = (void (***)(_QWORD))*((_QWORD *)this + 24);
  if (*((_QWORD *)this + 25))
  {
    if (v3)
    {
      do
      {
        v4 = (void (***)(_QWORD))*v3;
        (*v3[2])(v3 + 2);
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    *((_QWORD *)this + 24) = 0;
    v5 = *((_QWORD *)this + 23);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*((_QWORD *)this + 22) + 8 * i) = 0;
      v3 = (void (***)(_QWORD))*((_QWORD *)this + 24);
    }
    else
    {
      v3 = 0;
    }
    *((_QWORD *)this + 25) = 0;
  }
  if (v3)
  {
    do
    {
      v7 = (void (***)(_QWORD))*v3;
      (*v3[2])(v3 + 2);
      operator delete(v3);
      v3 = v7;
    }
    while (v7);
  }
  v8 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v8)
    operator delete(v8);
  v9 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v10)
  {
    v11 = *(_QWORD **)(v10 + 16);
    if (v11)
    {
      do
      {
        v12 = (_QWORD *)*v11;
        operator delete(v11);
        v11 = v12;
      }
      while (v12);
    }
    v13 = *(void **)v10;
    *(_QWORD *)v10 = 0;
    if (v13)
      operator delete(v13);
    MEMORY[0x1A1AF4E00](v10, 0x10A0C4073C32F45);
  }
  v14 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v14)
  {
    v15 = *(_QWORD **)(v14 + 16);
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    v17 = *(void **)v14;
    *(_QWORD *)v14 = 0;
    if (v17)
      operator delete(v17);
    MEMORY[0x1A1AF4E00](v14, 0x10A0C4073C32F45);
  }
  v18 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x63B6FE00C0848868 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t md::AnchorLogic::createMercatorElevationCache(md::AnchorLogic *this)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  result = operator new();
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 32) = 1065353216;
  *(_QWORD *)(result + 40) = 0;
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = result;
  if (v3)
  {
    v4 = *(_QWORD **)(v3 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v6 = *(void **)v3;
    *(_QWORD *)v3 = 0;
    if (v6)
      operator delete(v6);
    MEMORY[0x1A1AF4E00](v3, 0x10A0C4073C32F45);
    result = *((_QWORD *)this + 20);
    v7 = *(_QWORD *)(result + 40);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_QWORD *)this + 21);
  if (v7 != v8)
    *(_QWORD *)(result + 40) = v8;
  return result;
}

void std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8BD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8B88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8B88;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x1AF456233693CD46)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0x1AF456233693CD46)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v12 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x8BD499FBD96FBB9ELL)
      {
        if (v14[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x8BD499FBD96FBB9ELL)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL)
      v18 = 0x1B8B241A8D896A1DLL % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x1B8B241A8D896A1DLL)
      {
        if (v20[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x1B8B241A8D896A1DLL)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0x1B8B241A8D896A1DLL)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::AnchorContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0B40;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x20C4093837F09);
  return a1;
}

void gdc::ManagedObjectHolder<md::AnchorContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0B40;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x20C4093837F09);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::AnchorContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19F83B0F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  std::unordered_set<geo::_retain_ptr<VKAnchorWrapper * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,md::_equal_objc_ptr>>::~unordered_set[abi:nn180100]((uint64_t)(v1 + 22));
  v3 = v1[21];
  v1[21] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  std::unique_ptr<md::MercatorTerrainHeightCache>::~unique_ptr[abi:nn180100](v1 + 20);
  std::unique_ptr<md::MercatorTerrainHeightCache>::~unique_ptr[abi:nn180100](v1 + 19);
  v4 = v1[16];
  v1[16] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<geo::_retain_ptr<VKAnchorWrapper * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,md::_equal_objc_ptr>>::~unordered_set[abi:nn180100](uint64_t a1)
{
  void (***v2)(uint64_t);
  void (**v3)(uint64_t);
  void *v4;

  v2 = *(void (****)(uint64_t))(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      (*v2[2])((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = (void (***)(uint64_t))v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::unique_ptr<md::MercatorTerrainHeightCache>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C4073C32F45);
  }
  return a1;
}

void md::AnchorManager::removeAnchor(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  int8x8_t v8;
  md::Anchor ***v9;
  md::Anchor **v10;
  uint64_t v11;
  md::Anchor *v12;
  md::Anchor *v13;
  md::Anchor **v14;
  md::Anchor **v15;
  unint64_t v16;
  unint64_t v17;
  md::Anchor *v18;
  unint64_t v19;

  v2 = this[5];
  if (v2)
  {
    v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
    v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
    v6 = (uint8x8_t)vcnt_s8(v2);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
      if (v5 >= *(_QWORD *)&v2)
        v7 = v5 % *(_QWORD *)&v2;
    }
    else
    {
      v7 = v5 & (*(_QWORD *)&v2 - 1);
    }
    v8 = this[4];
    v9 = *(md::Anchor ****)(*(_QWORD *)&v8 + 8 * v7);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        v11 = *(_QWORD *)&v2 - 1;
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (md::Anchor *)v5)
            {
              if (v10[2] == (md::Anchor *)a2)
                goto LABEL_22;
            }
            else if (((unint64_t)v12 & v11) != v7)
            {
              return;
            }
            v10 = (md::Anchor **)*v10;
            if (!v10)
              return;
          }
        }
        do
        {
          v13 = v10[1];
          if (v13 == (md::Anchor *)v5)
          {
            if (v10[2] == (md::Anchor *)a2)
            {
LABEL_22:
              if (v6.u32[0] > 1uLL)
              {
                if (v5 >= *(_QWORD *)&v2)
                  v5 %= *(_QWORD *)&v2;
              }
              else
              {
                v5 &= v11;
              }
              v14 = *(md::Anchor ***)(*(_QWORD *)&v8 + 8 * v5);
              do
              {
                v15 = v14;
                v14 = (md::Anchor **)*v14;
              }
              while (v14 != v10);
              if (v15 == (md::Anchor **)&this[6])
                goto LABEL_39;
              v16 = (unint64_t)v15[1];
              if (v6.u32[0] > 1uLL)
              {
                if (v16 >= *(_QWORD *)&v2)
                  v16 %= *(_QWORD *)&v2;
              }
              else
              {
                v16 &= v11;
              }
              if (v16 != v5)
              {
LABEL_39:
                if (!*v10)
                  goto LABEL_40;
                v17 = *((_QWORD *)*v10 + 1);
                if (v6.u32[0] > 1uLL)
                {
                  if (v17 >= *(_QWORD *)&v2)
                    v17 %= *(_QWORD *)&v2;
                }
                else
                {
                  v17 &= v11;
                }
                if (v17 != v5)
LABEL_40:
                  *(_QWORD *)(*(_QWORD *)&v8 + 8 * v5) = 0;
              }
              v18 = *v10;
              if (*v10)
              {
                v19 = *((_QWORD *)v18 + 1);
                if (v6.u32[0] > 1uLL)
                {
                  if (v19 >= *(_QWORD *)&v2)
                    v19 %= *(_QWORD *)&v2;
                }
                else
                {
                  v19 &= v11;
                }
                if (v19 != v5)
                {
                  *(_QWORD *)(*(_QWORD *)&this[4] + 8 * v19) = v15;
                  v18 = *v10;
                }
              }
              *v15 = v18;
              *v10 = 0;
              --*(_QWORD *)&this[7];
              operator delete(v10);
              return;
            }
          }
          else
          {
            if ((unint64_t)v13 >= *(_QWORD *)&v2)
              v13 = (md::Anchor *)((unint64_t)v13 % *(_QWORD *)&v2);
            if (v13 != (md::Anchor *)v7)
              return;
          }
          v10 = (md::Anchor **)*v10;
        }
        while (v10);
      }
    }
  }
}

void std::__shared_ptr_pointer<md::MercatorAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::MercatorAnchor>,std::allocator<md::MercatorAnchor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MercatorAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::MercatorAnchor>,std::allocator<md::MercatorAnchor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<md::MercatorTerrainAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::MercatorTerrainAnchor>,std::allocator<md::MercatorTerrainAnchor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<md::GlobeMercatorAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::GlobeMercatorAnchor>,std::allocator<md::GlobeMercatorAnchor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::GlobeMercatorAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::GlobeMercatorAnchor>,std::allocator<md::GlobeMercatorAnchor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<md::GlobeMercatorTerrainAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::GlobeMercatorTerrainAnchor>,std::allocator<md::GlobeMercatorTerrainAnchor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::GlobeMercatorTerrainAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::GlobeMercatorTerrainAnchor>,std::allocator<md::GlobeMercatorTerrainAnchor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<md::GeocentricAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::GeocentricAnchor>,std::allocator<md::GeocentricAnchor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::GeocentricAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::GeocentricAnchor>,std::allocator<md::GeocentricAnchor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::AnchorManager::geocentricPointForAnchor(md::AnchorManager *this, md::GeocentricAnchor *a2)
{
  altitude::Anchor *v4;
  float64x2_t v5;
  double v6;
  uint64_t v7;
  altitude::Anchor *Anchor;
  __double2 v9;
  double v10;
  __double2 v11;
  __double2 v12;
  double v13;
  __double2 v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17[2];
  float64x2_t v18;

  v4 = (altitude::Anchor *)*((_QWORD *)a2 + 9);
  (*(void (**)(float64x2_t *__return_ptr, md::GeocentricAnchor *))(*(_QWORD *)a2 + 64))(v17, a2);
  v5 = vmulq_f64(v17[0], (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  v18 = v5;
  v6 = v5.f64[1];
  if (!v4)
  {
    v7 = *((_QWORD *)this + 2);
    if (!v7)
      return;
    v15 = v5;
    Anchor = (altitude::Anchor *)altitude::GlobeView::createAnchor(v7, v18.f64);
    v4 = Anchor;
    if (*(_DWORD *)Anchor != 2)
    {
      *(_DWORD *)Anchor = 2;
      altitude::Anchor::update(Anchor);
    }
    v5 = v15;
    if (v15.f64[0] != *((double *)v4 + 1) || v6 != *((double *)v4 + 2) || *((double *)v4 + 3) != 0.0)
    {
      *(float64x2_t *)((char *)v4 + 8) = v15;
      *((_QWORD *)v4 + 3) = 0;
      *((_WORD *)v4 + 32) = 255;
      *((_DWORD *)v4 + 17) = 0;
      *((_DWORD *)v4 + 18) = 0;
      *((_BYTE *)v4 + 96) = 1;
      if (*(_DWORD *)v4 == 2)
      {
        altitude::Anchor::update(v4);
        v5 = v15;
      }
      else
      {
        v9 = __sincos_stret(v15.f64[0]);
        v10 = 6378137.0 / sqrt(v9.__sinval * v9.__sinval * -0.00669437999 + 1.0);
        v11 = __sincos_stret(v6);
        *((double *)v4 + 4) = v10 * v9.__cosval * v11.__cosval;
        *((double *)v4 + 5) = v10 * v9.__cosval * v11.__sinval;
        v5 = v15;
        *((double *)v4 + 6) = v10 * (0.99330562 * v9.__sinval);
      }
    }
    *((_QWORD *)a2 + 9) = v4;
  }
  if (*(_DWORD *)v4 != 2)
  {
    *(_DWORD *)v4 = 2;
    v16 = v5;
    altitude::Anchor::update(v4);
    v5 = v16;
  }
  if (v5.f64[0] != *((double *)v4 + 1) || v6 != *((double *)v4 + 2) || *((double *)v4 + 3) != 0.0)
  {
    *(float64x2_t *)((char *)v4 + 8) = v5;
    *((_QWORD *)v4 + 3) = 0;
    *((_WORD *)v4 + 32) = 255;
    *((_DWORD *)v4 + 17) = 0;
    *((_DWORD *)v4 + 18) = 0;
    *((_BYTE *)v4 + 96) = 1;
    if (*(_DWORD *)v4 == 2)
    {
      altitude::Anchor::update(v4);
    }
    else
    {
      v12 = __sincos_stret(v5.f64[0]);
      v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
      v14 = __sincos_stret(v6);
      *((double *)v4 + 4) = v13 * v12.__cosval * v14.__cosval;
      *((double *)v4 + 5) = v13 * v12.__cosval * v14.__sinval;
      *((double *)v4 + 6) = v13 * (0.99330562 * v12.__sinval);
    }
  }
}

uint64_t geo::_retain_ptr<VKAnchorWrapper * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,md::_equal_objc_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4BB0;

  return a1;
}

void geo::_retain_ptr<VKAnchorWrapper * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,md::_equal_objc_ptr>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4BB0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::AnchorLogic::setGlobe(uint64_t this, altitude::GlobeView *a2)
{
  uint64_t v2;
  uint64_t **i;

  *(_QWORD *)(this + 144) = a2;
  v2 = *(_QWORD *)(this + 128);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      *(_QWORD *)(v2 + 16) = 0;
      for (i = *(uint64_t ***)(v2 + 48); i; i = (uint64_t **)*i)
        this = (*(uint64_t (**)(uint64_t *))(*i[2] + 104))(i[2]);
    }
  }
  return this;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = a2;
  v10[2] = *a3;
  *((_WORD *)v10 + 12) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_44;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_44:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void md::mun::MuninMetadata::~MuninMetadata(md::mun::MuninMetadata *this)
{
  md::mun::MuninMetadata::~MuninMetadata(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;

  *(_QWORD *)this = &off_1E42ABAB8;
  v2 = (void *)*((_QWORD *)this + 40);
  if (v2)
  {
    *((_QWORD *)this + 41) = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)*((_QWORD *)this + 34);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
    operator delete(v5);
  v6 = *((_QWORD *)this + 29);
  if (v6)
  {
    v7 = *((_QWORD *)this + 30);
    v8 = (void *)*((_QWORD *)this + 29);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 80);
        if (v9 != *(void **)(v7 - 64))
          free(v9);
        if (*(_BYTE *)(v7 - 120))
          *(_BYTE *)(v7 - 120) = 0;
        if (*(_BYTE *)(v7 - 160))
          *(_BYTE *)(v7 - 160) = 0;
        v7 -= 168;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v6;
    operator delete(v8);
  }
  v10 = (_QWORD *)*((_QWORD *)this + 26);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v12)
    operator delete(v12);
  v13 = *((_QWORD *)this + 21);
  if (v13)
  {
    v14 = *((_QWORD *)this + 22);
    v15 = (void *)*((_QWORD *)this + 21);
    if (v14 != v13)
    {
      do
      {
        v16 = v14 - 1864;
        v17 = *(_QWORD **)(v14 - 1776);
        v18 = *(_QWORD **)(v14 - 1768);
        if (v17 != v18)
        {
          do
          {
            v19 = (void *)v17[31];
            if (v19 != (void *)v17[33])
              free(v19);
            v17 += 36;
          }
          while (v17 != v18);
          v17 = *(_QWORD **)(v14 - 1776);
        }
        if (v17 != *(_QWORD **)(v14 - 1760))
          free(v17);
        v14 -= 1864;
      }
      while (v16 != v13);
      v15 = (void *)*((_QWORD *)this + 21);
    }
    *((_QWORD *)this + 22) = v13;
    operator delete(v15);
  }
  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v20 = (void *)*((_QWORD *)this + 4);
  if (v20 != *((void **)this + 6))
    free(v20);
}

uint64_t md::mun::MuninMetadata::MuninMetadata(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  float v38;
  unint64_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int32x2_t *v55;
  __int32 v56;
  int32x2_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  double v62;
  float v63;
  float v64;
  int v65;
  int v66;
  int v67;
  _BYTE *v68;
  _QWORD *v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  void *v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE v138[2408];

  v7 = a1;
  *(_QWORD *)a1 = &off_1E42B4768;
  do
  {
    v8 = __ldaxr(gdc::LayerData::nextId(void)::idGenerator);
    v9 = v8 + 1;
  }
  while (__stlxr(v9, gdc::LayerData::nextId(void)::idGenerator));
  *(_DWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)a2;
  gdc::LayerDataKey::LayerDataKey(a1 + 24, a2 + 8);
  *(_BYTE *)(v7 + 112) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    *(_DWORD *)(v7 + 116) = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(v7 + 112) = 1;
  }
  *(_QWORD *)(v7 + 120) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v7 + 128) = 0;
  *(_BYTE *)(v7 + 160) = 1;
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)v7 = &off_1E42ABAB8;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 168) = 0;
  v11 = *a3;
  v10 = a3[1];
  v12 = v10 - v11;
  if (v10 == v11)
  {
    v14 = 0;
  }
  else
  {
    v13 = 0x63FB9AEB1FDCD759 * (v12 >> 3);
    if (v13 >= 0x2328A701194539)
      goto LABEL_144;
    v14 = (char *)operator new(v12);
    *(_QWORD *)(v7 + 168) = v14;
    *(_QWORD *)(v7 + 176) = v14;
    *(_QWORD *)(v7 + 184) = &v14[1864 * v13];
    do
    {
      *(_QWORD *)v14 = *(_QWORD *)v11;
      v15 = *(_OWORD *)(v11 + 8);
      *((_QWORD *)v14 + 3) = *(_QWORD *)(v11 + 24);
      *(_OWORD *)(v14 + 8) = v15;
      v16 = *(_QWORD *)(v11 + 32);
      *((_DWORD *)v14 + 10) = *(_DWORD *)(v11 + 40);
      *((_QWORD *)v14 + 4) = v16;
      *(_QWORD *)(v14 + 44) = *(_QWORD *)(v11 + 44);
      v17 = *(_OWORD *)(v11 + 56);
      v18 = *(_OWORD *)(v11 + 72);
      v19 = v14 + 120;
      *((_QWORD *)v14 + 11) = v14 + 120;
      v20 = v14 + 88;
      *((_OWORD *)v20 - 2) = v17;
      *((_OWORD *)v20 - 1) = v18;
      v20[1] = v19;
      v20[2] = v19;
      v20[3] = 6;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)v20, *(__int128 **)(v11 + 88), *(__int128 **)(v11 + 96));
      v21 = *(_QWORD *)(v11 + 1848);
      *(_QWORD *)((char *)v20 + 1765) = *(_QWORD *)(v11 + 1853);
      v20[220] = v21;
      v14 = (char *)(v20 + 222);
      v11 += 1864;
    }
    while (v11 != v10);
    *(_QWORD *)(v7 + 176) = v14;
  }
  v22 = 0uLL;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  v23 = v7 + 192;
  *(_DWORD *)(v7 + 224) = 1065353216;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 248) = 0;
  *(_QWORD *)(v7 + 232) = 0;
  v24 = *a4;
  v25 = a4[1];
  v26 = v25 - *a4;
  v137 = v7;
  if (v25 == *a4)
  {
    v38 = 1.0;
  }
  else
  {
    v27 = 0xCF3CF3CF3CF3CF3DLL * (v26 >> 3);
    if (v27 >= 0x186186186186187)
      goto LABEL_144;
    v28 = (char *)operator new(v26);
    v29 = 0;
    *(_QWORD *)(v7 + 232) = v28;
    *(_QWORD *)(v7 + 240) = v28;
    *(_QWORD *)(v7 + 248) = &v28[168 * v27];
    do
    {
      v33 = &v28[v29];
      v34 = v24 + v29;
      *(_QWORD *)v33 = *(_QWORD *)(v24 + v29);
      v33[8] = 0;
      if (*(_BYTE *)(v24 + v29 + 8))
      {
        v35 = *(_OWORD *)(v34 + 32);
        *((_OWORD *)v33 + 1) = *(_OWORD *)(v34 + 16);
        *((_OWORD *)v33 + 2) = v35;
        v33[8] = 1;
      }
      v33[48] = 0;
      if (*(_BYTE *)(v34 + 48))
      {
        v36 = &v28[v29];
        v37 = *(_OWORD *)(v24 + v29 + 56);
        *(_OWORD *)(v36 + 72) = *(_OWORD *)(v24 + v29 + 72);
        *(_OWORD *)(v36 + 56) = v37;
        v33[48] = 1;
      }
      v30 = &v28[v29];
      v31 = (uint64_t)&v28[v29 + 120];
      *((_QWORD *)v30 + 11) = v31;
      *((_QWORD *)v30 + 12) = v31;
      v32 = (uint64_t)&v28[v29 + 88];
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 1;
      geo::small_vector_base<md::mun::OrientedPlane>::append<md::mun::OrientedPlane const*>(v32, *(__int128 **)(v34 + 88), *(__int128 **)(v34 + 96));
      v29 += 168;
    }
    while (v34 + 168 != v25);
    *(_QWORD *)(v7 + 240) = &v28[v29];
    v14 = *(char **)(v7 + 176);
    v38 = *(float *)(v7 + 224);
    v22 = 0uLL;
  }
  *(_OWORD *)(v7 + 256) = v22;
  *(_OWORD *)(v7 + 272) = v22;
  *(_DWORD *)(v7 + 288) = 1065353216;
  *(_WORD *)(v7 + 296) = 255;
  *(_DWORD *)(v7 + 304) = 0;
  *(_DWORD *)(v7 + 300) = 0;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 320) = 0;
  prime = vcvtps_u32_f32((float)(unint64_t)(0x63FB9AEB1FDCD759 * ((uint64_t)&v14[-*(_QWORD *)(v7 + 168)] >> 3)) / v38);
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v40 = *(int8x8_t *)(v7 + 200);
  if (prime > *(_QWORD *)&v40)
    goto LABEL_26;
  if (prime < *(_QWORD *)&v40)
  {
    v41 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 216) / *(float *)(v7 + 224));
    if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
    {
      v41 = std::__next_prime(v41);
    }
    else
    {
      v43 = 1 << -(char)__clz(v41 - 1);
      if (v41 >= 2)
        v41 = v43;
    }
    if (prime <= v41)
      prime = v41;
    if (prime < *(_QWORD *)&v40)
LABEL_26:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v23, prime);
  }
  v44 = *(_QWORD *)(v7 + 168);
  if (*(_QWORD *)(v7 + 176) != v44)
  {
    v45 = 0;
    v46 = 0;
    do
    {
      *((_WORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v23, *(_QWORD *)(v44 + v45), (_QWORD *)(v44 + v45))+ 12) = v46++;
      v44 = *(_QWORD *)(v7 + 168);
      v45 += 1864;
    }
    while (v46 < 0x63FB9AEB1FDCD759 * ((*(_QWORD *)(v7 + 176) - v44) >> 3));
  }
  v47 = vcvtps_u32_f32((float)(0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(v7 + 240) - *(_QWORD *)(v7 + 232)) >> 3))/ *(float *)(v7 + 288));
  if (v47 == 1)
  {
    v47 = 2;
  }
  else if ((v47 & (v47 - 1)) != 0)
  {
    v47 = std::__next_prime(v47);
  }
  v48 = *(int8x8_t *)(v7 + 264);
  if (v47 > *(_QWORD *)&v48)
    goto LABEL_45;
  if (v47 < *(_QWORD *)&v48)
  {
    v49 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 280) / *(float *)(v7 + 288));
    if (*(_QWORD *)&v48 < 3uLL || (v50 = (uint8x8_t)vcnt_s8(v48), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
    {
      v49 = std::__next_prime(v49);
    }
    else
    {
      v51 = 1 << -(char)__clz(v49 - 1);
      if (v49 >= 2)
        v49 = v51;
    }
    if (v47 <= v49)
      v47 = v49;
    if (v47 < *(_QWORD *)&v48)
LABEL_45:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v7 + 256, v47);
  }
  v52 = *(_QWORD *)(v7 + 232);
  if (*(_QWORD *)(v7 + 240) != v52)
  {
    v53 = 0;
    v54 = 0;
    do
    {
      *((_WORD *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v7 + 256, *(_QWORD *)(v52 + v53), (_QWORD *)(v52 + v53))+ 12) = v54++;
      v52 = *(_QWORD *)(v7 + 232);
      v53 += 168;
    }
    while (v54 < 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v7 + 240) - v52) >> 3));
  }
  v55 = *(int32x2_t **)(a2 + 16);
  v56 = v55[1].i32[0];
  v57 = *v55;
  *(_BYTE *)(v7 + 296) = -1;
  *(_BYTE *)(v7 + 297) = v56;
  *(int32x2_t *)(v7 + 300) = vrev64_s32(v57);
  bzero(v138, 0x960uLL);
  v59 = *(_QWORD *)(v7 + 168);
  v58 = *(_QWORD *)(v7 + 176);
  if (v59 == v58)
  {
    v86 = *(_QWORD *)(v7 + 168);
  }
  else
  {
    v135 = *(_QWORD *)(v7 + 176);
    do
    {
      v61 = 1 << *(_BYTE *)(v7 + 297);
      v62 = -1.0 / (double)v61;
      v63 = (*(double *)(v59 + 56) + v62 * (double)*(int *)(v7 + 304)) * (double)v61;
      v64 = (*(double *)(v59 + 64) + v62 * (double)(v61 + ~*(_DWORD *)(v7 + 300))) * (double)v61;
      v65 = (int)(float)(v63 * 10.0);
      if (v65 >= 9)
        v65 = 9;
      v66 = v65 & ~(v65 >> 31);
      v67 = (int)(float)(v64 * 10.0);
      if (v67 >= 9)
        v67 = 9;
      v68 = &v138[240 * (v67 & ~(v67 >> 31)) + 24 * v66];
      v69 = (_QWORD *)*((_QWORD *)v68 + 1);
      v70 = *((_QWORD *)v68 + 2);
      if ((unint64_t)v69 < v70)
      {
        *v69 = v59;
        v60 = v69 + 1;
        v7 = v137;
      }
      else
      {
        v71 = *(_BYTE **)v68;
        v72 = (uint64_t)v69 - *(_QWORD *)v68;
        v73 = v72 >> 3;
        v74 = (v72 >> 3) + 1;
        if (v74 >> 61)
          goto LABEL_144;
        v75 = v70 - (_QWORD)v71;
        if (v75 >> 2 > v74)
          v74 = v75 >> 2;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
          v76 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          if (v76 >> 61)
LABEL_145:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v77 = operator new(8 * v76);
        }
        else
        {
          v77 = 0;
        }
        v78 = &v77[8 * v73];
        *v78 = v59;
        v60 = v78 + 1;
        if (v69 == (_QWORD *)v71)
        {
          v71 = v69;
        }
        else
        {
          v79 = (char *)(v69 - 1) - v71;
          if (v79 < 0x58)
            goto LABEL_148;
          if ((unint64_t)((char *)v69 - &v77[v72]) < 0x20)
            goto LABEL_148;
          v80 = (v79 >> 3) + 1;
          v81 = &v77[8 * v73 - 16];
          v82 = (__int128 *)(v69 - 2);
          v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v84 = *v82;
            *(v81 - 1) = *(v82 - 1);
            *v81 = v84;
            v81 -= 2;
            v82 -= 2;
            v83 -= 4;
          }
          while (v83);
          v78 -= v80 & 0x3FFFFFFFFFFFFFFCLL;
          v69 -= v80 & 0x3FFFFFFFFFFFFFFCLL;
          if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_148:
            do
            {
              v85 = *--v69;
              *--v78 = v85;
            }
            while (v69 != (_QWORD *)v71);
            v71 = *(_BYTE **)v68;
          }
        }
        *(_QWORD *)v68 = v78;
        *((_QWORD *)v68 + 2) = &v77[8 * v76];
        if (v71)
          operator delete(v71);
        v58 = v135;
        v7 = v137;
      }
      *((_QWORD *)v68 + 1) = v60;
      v59 += 1864;
    }
    while (v59 != v58);
    v59 = *(_QWORD *)(v7 + 168);
    v86 = *(_QWORD *)(v7 + 176);
  }
  v87 = 0x63FB9AEB1FDCD759 * ((v86 - v59) >> 3);
  v88 = *(_BYTE **)(v7 + 320);
  if (v87 <= (uint64_t)(*(_QWORD *)(v7 + 336) - (_QWORD)v88) >> 3)
    goto LABEL_105;
  if (v87 >> 61)
LABEL_144:
    abort();
  v89 = *(_BYTE **)(v7 + 328);
  v90 = 8 * v87;
  v91 = (char *)operator new(8 * v87);
  v92 = v89 - v88;
  v93 = &v91[(v89 - v88) & 0xFFFFFFFFFFFFFFF8];
  v94 = v93;
  if (v89 == v88)
    goto LABEL_103;
  if ((unint64_t)(v92 - 8) < 0x58)
  {
    v94 = &v91[(v89 - v88) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_102:
      v101 = *((_QWORD *)v89 - 1);
      v89 -= 8;
      *((_QWORD *)v94 - 1) = v101;
      v94 -= 8;
    }
    while (v89 != v88);
    goto LABEL_103;
  }
  v94 = &v91[(v89 - v88) & 0xFFFFFFFFFFFFFFF8];
  if ((unint64_t)(v89 - &v91[v92 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
    goto LABEL_102;
  v95 = v92 >> 3;
  v96 = ((unint64_t)(v92 - 8) >> 3) + 1;
  v97 = &v91[8 * v95 - 16];
  v98 = (__int128 *)(v89 - 16);
  v99 = v96 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v100 = *v98;
    *((_OWORD *)v97 - 1) = *(v98 - 1);
    *(_OWORD *)v97 = v100;
    v97 -= 32;
    v98 -= 2;
    v99 -= 4;
  }
  while (v99);
  v94 = &v93[-8 * (v96 & 0x3FFFFFFFFFFFFFFCLL)];
  v89 -= 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
  if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_102;
LABEL_103:
  *(_QWORD *)(v7 + 320) = v94;
  *(_QWORD *)(v7 + 328) = v93;
  *(_QWORD *)(v7 + 336) = &v91[v90];
  if (v88)
    operator delete(v88);
LABEL_105:
  v102 = 0;
  v103 = (_DWORD *)(v7 + 320);
  v133 = v7 + 344;
  v104 = *(_QWORD **)(v7 + 328);
  do
  {
    v105 = 0;
    v132 = v102;
    v134 = 10 * v102;
    v106 = v104;
    do
    {
      v136 = v105;
      v107 = v105 + v134;
      *(_WORD *)(v133 + 2 * v107) = ((_DWORD)v106 - *v103) >> 3;
      v108 = &v138[24 * v107];
      v110 = *(uint64_t **)v108;
      v109 = (uint64_t *)*((_QWORD *)v108 + 1);
      while (v110 != v109)
      {
        v111 = *v110;
        v112 = *(_QWORD *)(v7 + 336);
        if ((unint64_t)v106 < v112)
        {
          *v106 = v111;
          v104 = v106 + 1;
          goto LABEL_111;
        }
        v113 = *(_BYTE **)v103;
        v114 = (uint64_t)v106 - *(_QWORD *)v103;
        v115 = v114 >> 3;
        v116 = (v114 >> 3) + 1;
        if (v116 >> 61)
          goto LABEL_144;
        v117 = v112 - (_QWORD)v113;
        if (v117 >> 2 > v116)
          v116 = v117 >> 2;
        if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
          v118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v118 = v116;
        if (v118)
        {
          if (v118 >> 61)
            goto LABEL_145;
          v119 = operator new(8 * v118);
        }
        else
        {
          v119 = 0;
        }
        v120 = &v119[8 * v115];
        *v120 = v111;
        v104 = v120 + 1;
        if (v106 == (_QWORD *)v113)
        {
          v113 = v106;
          v7 = v137;
        }
        else
        {
          v121 = (char *)(v106 - 1) - v113;
          if (v121 < 0x168
            || &v119[v114 - 8 - (v121 & 0xFFFFFFFFFFFFFFF8)] > &v119[v114 - 8]
            || (_QWORD *)((char *)v106 - (v121 & 0xFFFFFFFFFFFFFFF8) - 8) > v106 - 1
            || (unint64_t)((char *)v106 - v119 - v114) < 0x20)
          {
            v122 = v106;
            v7 = v137;
            do
            {
LABEL_127:
              v123 = *--v122;
              *--v120 = v123;
            }
            while (v122 != (_QWORD *)v113);
            v113 = *(_BYTE **)v103;
            goto LABEL_130;
          }
          v124 = (v121 >> 3) + 1;
          v122 = &v106[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
          v125 = &v119[8 * v115 - 16];
          v126 = (__int128 *)(v106 - 2);
          v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v128 = *v126;
            *(v125 - 1) = *(v126 - 1);
            *v125 = v128;
            v125 -= 2;
            v126 -= 2;
            v127 -= 4;
          }
          while (v127);
          v120 -= v124 & 0x3FFFFFFFFFFFFFFCLL;
          v7 = v137;
          if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_127;
        }
LABEL_130:
        *(_QWORD *)(v7 + 320) = v120;
        *(_QWORD *)(v7 + 328) = v104;
        *(_QWORD *)(v7 + 336) = &v119[8 * v118];
        if (v113)
          operator delete(v113);
LABEL_111:
        *(_QWORD *)(v7 + 328) = v104;
        ++v110;
        v106 = v104;
      }
      v105 = v136 + 1;
    }
    while (v136 != 9);
    v102 = v132 + 1;
  }
  while (v132 != 9);
  v129 = 2400;
  do
  {
    v130 = *(void **)&v138[v129 - 24];
    if (v130)
    {
      *(_QWORD *)&v138[v129 - 16] = v130;
      operator delete(v130);
    }
    v129 -= 24;
  }
  while (v129);
  return v7;
}

unint64_t md::mun::MuninMetadata::_searchBounds(uint64_t a1, double a2, double a3, double a4)
{
  long double v8;
  long double v9;
  long double v10;
  long double v11;
  long double v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  long double v17;
  int v18;
  double v19;
  float v20;
  float v21;

  v8 = exp(a3 * 6.28318531 + -3.14159265);
  v9 = atan(v8) * 114.591559 + -90.0;
  v10 = cos(v9 * 0.034906585) * -559.82 + 111132.92;
  v11 = v10 + cos(v9 * 0.0698131701) * 1.175;
  v12 = v11 + cos(v9 * 0.104719755) * -0.0023;
  v13 = v9 * 0.00872664626;
  v14 = tan(v9 * 0.00872664626 + 0.78103484);
  v15 = log(v14);
  v16 = tan(v13 + 0.789761487);
  v17 = fabs((log(v16) - v15) * 0.159154943) * a4 / v12;
  v18 = 1 << *(_BYTE *)(a1 + 297);
  v19 = -1.0 / (double)v18;
  v21 = (a3 + v19 * (double)(v18 + ~*(_DWORD *)(a1 + 300)) - v17) * (double)v18;
  v20 = (a2 + v19 * (double)*(int *)(a1 + 304) - v17) * (double)v18;
  return (int)(float)(v20 * 10.0) & ~((int)(float)(v20 * 10.0) >> 31) | ((unint64_t)((int)(float)(v21 * 10.0) & ~((int)(float)(v21 * 10.0) >> 31)) << 32);
}

uint64_t geo::optional<md::mun::CollectionPoint>::optional(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  _OWORD *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;

  *(_BYTE *)result = 1;
  *(_QWORD *)(result + 8) = *(_QWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 16) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(result + 52) = *(_QWORD *)(a2 + 44);
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(result + 80) = v4;
  v5 = result + 128;
  *(_QWORD *)(result + 96) = result + 128;
  v6 = *(__int128 **)(a2 + 88);
  *(_QWORD *)(result + 112) = result + 128;
  v7 = *(__int128 **)(a2 + 104);
  *(_QWORD *)(result + 120) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 104) = result + 128;
  if (v6 == v7)
  {
    *(_QWORD *)(result + 104) = v5 + *(_QWORD *)(a2 + 96) - (_QWORD)v6;
    v10 = *(__int128 **)(a2 + 96);
    if (v6 == v10)
      goto LABEL_3;
    v11 = 0;
    v12 = (_OWORD *)(result + 424);
    v13 = result + 408;
    while (1)
    {
      v15 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v15;
      v16 = *((_QWORD *)v6 + 3);
      *(_DWORD *)(v5 + 32) = *((_DWORD *)v6 + 8);
      *(_QWORD *)(v5 + 24) = v16;
      *(_QWORD *)(v5 + 36) = *(_QWORD *)((char *)v6 + 36);
      v17 = *(__int128 *)((char *)v6 + 44);
      v18 = *(__int128 *)((char *)v6 + 60);
      v19 = *(__int128 *)((char *)v6 + 76);
      *(_OWORD *)(v5 + 92) = *(__int128 *)((char *)v6 + 92);
      *(_OWORD *)(v5 + 76) = v19;
      *(_OWORD *)(v5 + 60) = v18;
      *(_OWORD *)(v5 + 44) = v17;
      v20 = *(__int128 *)((char *)v6 + 108);
      v21 = *(__int128 *)((char *)v6 + 124);
      v22 = *(__int128 *)((char *)v6 + 140);
      *(_OWORD *)(v5 + 156) = *(__int128 *)((char *)v6 + 156);
      *(_OWORD *)(v5 + 140) = v22;
      *(_OWORD *)(v5 + 124) = v21;
      *(_OWORD *)(v5 + 108) = v20;
      v23 = *(__int128 *)((char *)v6 + 172);
      v24 = *(__int128 *)((char *)v6 + 188);
      v25 = *(__int128 *)((char *)v6 + 204);
      *(_OWORD *)(v5 + 220) = *(__int128 *)((char *)v6 + 220);
      *(_OWORD *)(v5 + 204) = v25;
      *(_OWORD *)(v5 + 188) = v24;
      *(_OWORD *)(v5 + 172) = v23;
      v26 = (_BYTE *)(v5 + 280);
      *(_QWORD *)(v5 + 248) = v5 + 280;
      v27 = (char *)*((_QWORD *)v6 + 31);
      *(_BYTE *)(v5 + 240) = *((_BYTE *)v6 + 240);
      *(_QWORD *)(v5 + 264) = v5 + 280;
      v28 = (char *)*((_QWORD *)v6 + 33);
      *(_QWORD *)(v5 + 272) = *((_QWORD *)v6 + 34);
      *(_DWORD *)(v5 + 236) = *((_DWORD *)v6 + 59);
      *(_QWORD *)(v5 + 256) = v5 + 280;
      if (v27 == v28)
      {
        *(_QWORD *)(v5 + 256) = &v26[*((_QWORD *)v6 + 32) - (_QWORD)v27];
        v29 = (char *)*((_QWORD *)v6 + 32);
        if (v27 != v29)
        {
          v30 = v29 - v27;
          if ((unint64_t)(v29 - v27) >= 8 && (unint64_t)(result + 408 + 288 * v11 - (_QWORD)v27) >= 0x20)
          {
            if (v30 < 0x20)
            {
              v31 = 0;
              goto LABEL_18;
            }
            v31 = v30 & 0xFFFFFFFFFFFFFFE0;
            v32 = (__int128 *)(v27 + 16);
            v33 = v12;
            v34 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v35 = *v32;
              *(v33 - 1) = *(v32 - 1);
              *v33 = v35;
              v32 += 2;
              v33 += 2;
              v34 -= 32;
            }
            while (v34);
            if (v30 == v31)
              goto LABEL_7;
            if ((v30 & 0x18) != 0)
            {
LABEL_18:
              v36 = v30 & 0xFFFFFFFFFFFFFFF8;
              v26 += v30 & 0xFFFFFFFFFFFFFFF8;
              v37 = v31 - (v30 & 0xFFFFFFFFFFFFFFF8);
              v38 = (uint64_t *)&v27[v31];
              v39 = (_QWORD *)(v13 + v31);
              do
              {
                v40 = *v38++;
                *v39++ = v40;
                v37 += 8;
              }
              while (v37);
              if (v30 == v36)
                goto LABEL_7;
              v27 += v36;
            }
            else
            {
              v27 += v31;
              v26 += v31;
            }
          }
          do
          {
            v41 = *v27++;
            *v26++ = v41;
          }
          while (v27 != v29);
        }
      }
      else
      {
        v14 = *((_QWORD *)v6 + 32);
        *(_QWORD *)(v5 + 248) = v27;
        *(_QWORD *)(v5 + 256) = v14;
        *(__int128 *)((char *)v6 + 248) = 0uLL;
        *(__int128 *)((char *)v6 + 264) = 0uLL;
      }
LABEL_7:
      v5 += 288;
      v6 += 18;
      ++v11;
      v12 += 18;
      v13 += 288;
      if (v6 == v10)
        goto LABEL_3;
    }
  }
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 96) = v6;
  *(_QWORD *)(result + 104) = v8;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
LABEL_3:
  v9 = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(result + 1861) = *(_QWORD *)(a2 + 1853);
  *(_QWORD *)(result + 1856) = v9;
  return result;
}

void md::mun::MuninMetadata::neighborsWithinRadius(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, double a5)
{
  float64x2_t *v8;
  double v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  long double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BOOL4 v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  float64x2_t v37;
  double v38;
  unint64_t v39;
  _QWORD *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  double v58;
  unint64_t v59;
  double *v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  double *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  double *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float64x2_t *v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;

  v8 = (float64x2_t *)a2;
  v10 = a2[1];
  v11 = md::mun::MuninMetadata::_searchBounds(a1, *a2, v10, a5);
  v13 = v12;
  v14 = exp(v10 * 6.28318531 + -3.14159265);
  v15 = atan(v14) * 114.591559 + -90.0;
  v16 = cos(v15 * 0.034906585);
  v17 = cos(v15 * 0.0698131701);
  v18 = cos(v15 * 0.104719755);
  v19 = v15 * 0.00872664626;
  v20 = tan(v15 * 0.00872664626 + 0.78103484);
  v21 = log(v20);
  v22 = tan(v19 + 0.789761487);
  v23 = log(v22);
  if (SHIDWORD(v11) <= SHIDWORD(v13) && (int)v11 <= (int)v13)
  {
    v24 = fabs((v23 - v21) * 0.159154943) / (v16 * -559.82 + 111132.92 + v17 * 1.175 + v18 * -0.0023);
    v25 = v24 * v24;
    v26 = a5 * a5 * v25;
    v87 = a1 + 344;
    v78 = (int)v11;
    v79 = v13 + 1;
    v27 = v11 >> 32;
    v77 = HIDWORD(v13) + 1;
    v28 = 1.0 / v25;
    v83 = a4;
    v84 = v8;
    do
    {
      v80 = v27;
      v81 = 10 * v27;
      v29 = v78;
      do
      {
        v30 = v81 + v29;
        v31 = *(unsigned __int16 *)(v87 + 2 * (v81 + v29));
        v82 = v29;
        v33 = v27 == 9 && v29 == 9;
        v86 = v30 + 1;
        v85 = v33;
        while (1)
        {
          if (v33)
          {
            if (v31 >= (uint64_t)(*(_QWORD *)(a1 + 328) - *(_QWORD *)(a1 + 320)) >> 3)
              break;
          }
          else if (v31 >= *(unsigned __int16 *)(v87 + 2 * v86))
          {
            break;
          }
          v35 = *(_QWORD *)(a1 + 320);
          if (v31 >= (*(_QWORD *)(a1 + 328) - v35) >> 3)
            break;
          v36 = *(_QWORD *)(v35 + 8 * v31);
          v37 = vsubq_f64(*(float64x2_t *)(v36 + 56), *v8);
          v38 = vaddvq_f64(vmulq_f64(v37, v37));
          if (v38 > v26)
            goto LABEL_17;
          v40 = *(_QWORD **)(a3 + 8);
          v39 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v40 < v39)
          {
            *v40 = v36;
            *(_QWORD *)(a3 + 8) = v40 + 1;
            if (a4)
              goto LABEL_50;
            goto LABEL_17;
          }
          v41 = *(_BYTE **)a3;
          v42 = (uint64_t)v40 - *(_QWORD *)a3;
          v43 = v42 >> 3;
          v44 = (v42 >> 3) + 1;
          if (v44 >> 61)
            goto LABEL_73;
          v45 = v39 - (_QWORD)v41;
          if (v45 >> 2 > v44)
            v44 = v45 >> 2;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
          {
            if (v46 >> 61)
              goto LABEL_74;
            v47 = operator new(8 * v46);
          }
          else
          {
            v47 = 0;
          }
          v48 = &v47[8 * v43];
          *v48 = v36;
          v49 = v48 + 1;
          if (v40 == (_QWORD *)v41)
          {
            v41 = v40;
            a4 = v83;
            goto LABEL_47;
          }
          v50 = (char *)(v40 - 1) - v41;
          if (v50 >= 0x58)
          {
            v51 = (char *)v40 - &v47[v42];
            a4 = v83;
            if (v51 >= 0x20)
            {
              v52 = (v50 >> 3) + 1;
              v53 = &v47[8 * v43 - 16];
              v54 = (__int128 *)(v40 - 2);
              v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v56 = *v54;
                *(v53 - 1) = *(v54 - 1);
                *v53 = v56;
                v53 -= 2;
                v54 -= 2;
                v55 -= 4;
              }
              while (v55);
              v48 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
              v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
              if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_47;
            }
          }
          else
          {
            a4 = v83;
          }
          do
          {
            v57 = *--v40;
            *--v48 = v57;
          }
          while (v40 != (_QWORD *)v41);
          v41 = *(_BYTE **)a3;
LABEL_47:
          *(_QWORD *)a3 = v48;
          *(_QWORD *)(a3 + 8) = v49;
          *(_QWORD *)(a3 + 16) = &v47[8 * v46];
          if (v41)
            operator delete(v41);
          v8 = v84;
          v33 = v85;
          *(_QWORD *)(a3 + 8) = v49;
          if (a4)
          {
LABEL_50:
            v58 = v38 * v28;
            v60 = *(double **)(a4 + 8);
            v59 = *(_QWORD *)(a4 + 16);
            if ((unint64_t)v60 < v59)
            {
              *v60 = v58;
              v34 = v60 + 1;
            }
            else
            {
              v61 = *(double **)a4;
              v62 = (uint64_t)v60 - *(_QWORD *)a4;
              v63 = v62 >> 3;
              v64 = (v62 >> 3) + 1;
              if (v64 >> 61)
LABEL_73:
                abort();
              v65 = v59 - (_QWORD)v61;
              if (v65 >> 2 > v64)
                v64 = v65 >> 2;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
                v66 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                if (v66 >> 61)
LABEL_74:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v67 = operator new(8 * v66);
              }
              else
              {
                v67 = 0;
              }
              v68 = (double *)&v67[8 * v63];
              *v68 = v58;
              v34 = v68 + 1;
              if (v60 == v61)
              {
                a4 = v83;
              }
              else
              {
                v69 = (char *)(v60 - 1) - (char *)v61;
                if (v69 < 0x58)
                {
                  a4 = v83;
                  goto LABEL_69;
                }
                v70 = (char *)v60 - &v67[v62];
                a4 = v83;
                if (v70 < 0x20)
                  goto LABEL_77;
                v71 = (v69 >> 3) + 1;
                v72 = &v67[8 * v63 - 16];
                v73 = v60 - 2;
                v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v75 = *(_OWORD *)v73;
                  *(v72 - 1) = *((_OWORD *)v73 - 1);
                  *v72 = v75;
                  v72 -= 2;
                  v73 -= 4;
                  v74 -= 4;
                }
                while (v74);
                v68 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
                v60 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
                if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_77:
                  do
                  {
LABEL_69:
                    v76 = *((_QWORD *)v60-- - 1);
                    *((_QWORD *)v68-- - 1) = v76;
                  }
                  while (v60 != v61);
                }
              }
              *(_QWORD *)a4 = v68;
              *(_QWORD *)(a4 + 8) = v34;
              *(_QWORD *)(a4 + 16) = &v67[8 * v66];
              if (v61)
                operator delete(v61);
              v8 = v84;
              v33 = v85;
            }
            *(_QWORD *)(a4 + 8) = v34;
          }
LABEL_17:
          ++v31;
        }
        v29 = v82 + 1;
        v27 = v80;
      }
      while (v79 != (_DWORD)v82 + 1);
      v27 = v80 + 1;
    }
    while (v77 != (_DWORD)v80 + 1);
  }
}

void md::mun::MuninMetadata::neighborsWithinRadius(uint64_t a1, double *a2, uint64_t a3, double **a4, double a5)
{
  double *v8;
  long double v10;
  long double v11;
  long double v12;
  double v13;
  double v14;
  __double2 v15;
  long double v16;
  long double v17;
  long double v18;
  float64x2_t v19;
  float64x2_t v24;
  int64_t v25;
  int v26;
  int v27;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v35;
  double *v36;
  uint64_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  unint64_t v42;
  float64x2_t **v43;
  float64x2_t **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  float64x2_t **v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  float64x2_t **v56;
  uint64_t v57;
  __int128 v58;
  float64x2_t *v59;
  unint64_t v60;
  double *v61;
  double *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  double *v69;
  unint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  double *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  double **v84;
  _BOOL4 v85;
  uint64_t v86;
  long double v87;
  uint64_t v88;

  v8 = a2;
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v13 = sqrt(v10 * v10 + v11 * v11);
  v14 = atan2(v12, v13 * 0.996647189);
  v87 = atan2(v11, v10);
  v15 = __sincos_stret(v14);
  v16 = atan2(v12 + v15.__sinval * v15.__sinval * 42841.3115 * v15.__sinval, v13 + v15.__cosval * v15.__cosval * -42697.6727 * v15.__cosval);
  v17 = tan(v16 * 0.5 + 0.785398163);
  v18 = log(v17);
  v19.f64[0] = v87;
  v19.f64[1] = v18;
  __asm { FMOV            V0.2D, #0.5 }
  v24 = vmlaq_f64(_Q0, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v19);
  v25 = md::mun::MuninMetadata::_searchBounds(a1, v24.f64[0], v24.f64[1], a5);
  if (SHIDWORD(v25) <= v27 && (int)v25 <= v26)
  {
    v88 = a1 + 344;
    v78 = (int)v25;
    v29 = a5 * a5;
    v79 = v26 + 1;
    v30 = v25 >> 32;
    v77 = v27 + 1;
    v83 = v8;
    v84 = a4;
    do
    {
      v80 = v30;
      v81 = 10 * v30;
      v31 = v78;
      do
      {
        v32 = v81 + v31;
        v33 = *(unsigned __int16 *)(v88 + 2 * (v81 + v31));
        v82 = v31;
        v35 = v30 == 9 && v31 == 9;
        v86 = v32 + 1;
        v85 = v35;
        while (1)
        {
          if (v35)
          {
            if (v33 >= (uint64_t)(*(_QWORD *)(a1 + 328) - *(_QWORD *)(a1 + 320)) >> 3)
              break;
          }
          else if (v33 >= *(unsigned __int16 *)(v88 + 2 * v86))
          {
            break;
          }
          v37 = *(_QWORD *)(a1 + 320);
          if (v33 >= (*(_QWORD *)(a1 + 328) - v37) >> 3)
            break;
          v38 = *(float64x2_t **)(v37 + 8 * v33);
          v39 = vsubq_f64(v38[1], *(float64x2_t *)(v8 + 1));
          v40 = vmulq_f64(v39, v39);
          v41 = v40.f64[0] + (v38->f64[1] - *v8) * (v38->f64[1] - *v8) + v40.f64[1];
          if (v41 > v29)
            goto LABEL_19;
          v43 = *(float64x2_t ***)(a3 + 8);
          v42 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v43 >= v42)
          {
            v44 = *(float64x2_t ***)a3;
            v45 = (uint64_t)v43 - *(_QWORD *)a3;
            v46 = v45 >> 3;
            v47 = (v45 >> 3) + 1;
            if (v47 >> 61)
              goto LABEL_72;
            v48 = v42 - (_QWORD)v44;
            if (v48 >> 2 > v47)
              v47 = v48 >> 2;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              if (v49 >> 61)
                goto LABEL_73;
              v50 = operator new(8 * v49);
            }
            else
            {
              v50 = 0;
            }
            v51 = (float64x2_t **)&v50[8 * v46];
            *v51 = v38;
            v52 = v51 + 1;
            if (v43 == v44)
            {
              v44 = v43;
            }
            else
            {
              v53 = (char *)(v43 - 1) - (char *)v44;
              if (v53 < 0x58)
                goto LABEL_76;
              if ((unint64_t)((char *)v43 - &v50[v45]) < 0x20)
                goto LABEL_76;
              v54 = (v53 >> 3) + 1;
              v55 = &v50[8 * v46 - 16];
              v56 = v43 - 2;
              v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v58 = *(_OWORD *)v56;
                *(v55 - 1) = *((_OWORD *)v56 - 1);
                *v55 = v58;
                v55 -= 2;
                v56 -= 4;
                v57 -= 4;
              }
              while (v57);
              v51 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
              v43 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
              if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_76:
                do
                {
                  v59 = *--v43;
                  *--v51 = v59;
                }
                while (v43 != v44);
                v44 = *(float64x2_t ***)a3;
              }
            }
            *(_QWORD *)a3 = v51;
            *(_QWORD *)(a3 + 8) = v52;
            *(_QWORD *)(a3 + 16) = &v50[8 * v49];
            if (v44)
              operator delete(v44);
            v8 = v83;
            a4 = v84;
            v35 = v85;
            *(_QWORD *)(a3 + 8) = v52;
            if (!v84)
              goto LABEL_19;
          }
          else
          {
            *v43 = v38;
            *(_QWORD *)(a3 + 8) = v43 + 1;
            if (!a4)
              goto LABEL_19;
          }
          v61 = a4[1];
          v60 = (unint64_t)a4[2];
          if ((unint64_t)v61 < v60)
          {
            *v61 = v41;
            v36 = v61 + 1;
          }
          else
          {
            v62 = *a4;
            v63 = (char *)v61 - (char *)*a4;
            v64 = v63 >> 3;
            v65 = (v63 >> 3) + 1;
            if (v65 >> 61)
LABEL_72:
              abort();
            v66 = v60 - (_QWORD)v62;
            if (v66 >> 2 > v65)
              v65 = v66 >> 2;
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v65;
            if (v67)
            {
              if (v67 >> 61)
LABEL_73:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v68 = operator new(8 * v67);
            }
            else
            {
              v68 = 0;
            }
            v69 = (double *)&v68[8 * v64];
            *v69 = v41;
            v36 = v69 + 1;
            if (v61 != v62)
            {
              v70 = (char *)(v61 - 1) - (char *)v62;
              if (v70 < 0x58)
                goto LABEL_77;
              if ((unint64_t)((char *)v61 - &v68[v63]) < 0x20)
                goto LABEL_77;
              v71 = (v70 >> 3) + 1;
              v72 = &v68[8 * v64 - 16];
              v73 = v61 - 2;
              v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v75 = *(_OWORD *)v73;
                *(v72 - 1) = *((_OWORD *)v73 - 1);
                *v72 = v75;
                v72 -= 2;
                v73 -= 4;
                v74 -= 4;
              }
              while (v74);
              v69 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
              v61 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
              if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_77:
                do
                {
                  v76 = *((_QWORD *)v61-- - 1);
                  *((_QWORD *)v69-- - 1) = v76;
                }
                while (v61 != v62);
              }
            }
            a4 = v84;
            *v84 = v69;
            v84[1] = v36;
            v84[2] = (double *)&v68[8 * v67];
            if (v62)
              operator delete(v62);
            v8 = v83;
            v35 = v85;
          }
          a4[1] = v36;
LABEL_19:
          ++v33;
        }
        v31 = v82 + 1;
        v30 = v80;
      }
      while (v79 != (_DWORD)v82 + 1);
      v30 = v80 + 1;
    }
    while (v77 != (_DWORD)v80 + 1);
  }
}

void md::ARArrivalExternalMeshLabelPart::~ARArrivalExternalMeshLabelPart(md::ARArrivalExternalMeshLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::ExternalMeshLabelPart::~ExternalMeshLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ARArrivalExternalMeshLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, this, 968);
}

uint64_t md::ARArrivalExternalMeshLabelPart::layoutForStaging(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _OWORD *v8;
  double v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;

  v4 = md::ExternalMeshLabelPart::layoutForStaging((_QWORD *)a1);
  if ((_DWORD)v4 == 37)
  {
    if (*(float *)(a1 + 656) < *(float *)(a1 + 648) || *(float *)(a1 + 660) < *(float *)(a1 + 652))
      md::ARArrivalExternalMeshLabelPart::collisionInfoFromTransform(*(float32x2_t **)(a1 + 576), *(_QWORD *)(a2 + 432), (__int128 *)(*(_QWORD *)(a1 + 592) + 16), (float *)(a1 + 648), (float *)(a1 + 624));
    md::CollisionObject::resetWithRects((void **)(a1 + 72), 1u);
    v5 = *(_QWORD *)(a1 + 232);
    v6 = *(unsigned int *)(a1 + 248);
    *(_DWORD *)(a1 + 248) = v6 + 1;
    v7 = (_DWORD *)(v5 + 16 * v6);
    *v7 = *(_DWORD *)(a1 + 648);
    v7[1] = *(_DWORD *)(a1 + 652);
    v7[2] = *(_DWORD *)(a1 + 656);
    v7[3] = *(_DWORD *)(a1 + 660);
    v8 = (_OWORD *)(a1 + 664);
    HIDWORD(v9) = HIDWORD(*(_QWORD *)(a1 + 648));
    v10.i64[0] = *(_QWORD *)(a1 + 648);
    v10.i64[1] = *(_QWORD *)(a1 + 80);
    v11.i64[0] = *(_QWORD *)(a1 + 72);
    v11.i64[1] = *(_QWORD *)(a1 + 656);
    v12 = (int8x16_t)vcgtq_f32(v11, v10);
    v13 = vbslq_s8(v12, *(int8x16_t *)(a1 + 648), *(int8x16_t *)(a1 + 72));
    *(int8x16_t *)(a1 + 72) = v13;
    v13.i32[0] = *(_DWORD *)(a1 + 624);
    *(_DWORD *)(a1 + 280) = v13.i32[0];
    LODWORD(v9) = *(_DWORD *)(a1 + 628);
    *(_DWORD *)(a1 + 284) = LODWORD(v9);
    *(_DWORD *)(a1 + 104) = v13.i32[0];
    *(_DWORD *)(a1 + 108) = LODWORD(v9);
    md::CollisionObject::setupShapeData(a1 + 72, *(double *)v13.i64, v9, *(double *)v12.i64);
    if (*(_BYTE *)(a1 + 224))
    {
      *(_OWORD *)(a1 + 200) = *v8;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 680);
    }
    else
    {
      *(_OWORD *)(a1 + 200) = *v8;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 680);
      *(_BYTE *)(a1 + 224) = 1;
    }
    *(_QWORD *)(a1 + 184) = a1 + 840;
  }
  return v4;
}

double md::ARArrivalExternalMeshLabelPart::updateForDisplay(md::ARArrivalExternalMeshLabelPart *this)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double result;

  *((_QWORD *)this + 78) = *((_QWORD *)this + 77);
  v1 = *((_OWORD *)this + 43);
  *(_OWORD *)((char *)this + 648) = *(_OWORD *)((char *)this + 632);
  *(_OWORD *)((char *)this + 664) = v1;
  *((_QWORD *)this + 85) = *((_QWORD *)this + 88);
  *((_QWORD *)this + 105) = *((_QWORD *)this + 89);
  v2 = *((_OWORD *)this + 46);
  *((_OWORD *)this + 53) = *((_OWORD *)this + 45);
  *((_OWORD *)this + 54) = v2;
  v3 = *((_OWORD *)this + 48);
  *((_OWORD *)this + 55) = *((_OWORD *)this + 47);
  *((_OWORD *)this + 56) = v3;
  v4 = *((_OWORD *)this + 50);
  *((_OWORD *)this + 57) = *((_OWORD *)this + 49);
  *((_OWORD *)this + 58) = v4;
  *((_OWORD *)this + 59) = *((_OWORD *)this + 51);
  *((_QWORD *)this + 120) = *((_QWORD *)this + 104);
  result = *(float *)(*((_QWORD *)this + 2) + 768);
  *((double *)this + 76) = result;
  return result;
}

uint64_t md::ARArrivalExternalMeshLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  _OWORD *v33;
  _OWORD v35[8];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  double v45[12];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v3 = *(_QWORD *)(a1 + 576);
  if (!v3)
    return 26;
  *(_QWORD *)(v3 + 120) = *(_QWORD *)(a1 + 608);
  *(_DWORD *)(v3 + 168) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 1064);
  md::ARArrivalExternalMeshLabelPart::collisionInfoFromTransform((float32x2_t *)v3, a2 + 440, (__int128 *)(v3 + 32), (float *)(a1 + 632), (float *)(a1 + 616));
  v4 = *(_QWORD *)(a1 + 576);
  *(_DWORD *)(a1 + 688) = *(_DWORD *)(v4 + 8);
  *(_DWORD *)(a1 + 692) = *(_DWORD *)(v4 + 12);
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(v4 + 16);
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(v4 + 20);
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(a1 + 708) = *(_DWORD *)(v4 + 28);
  v5 = *(double *)(v4 + 64);
  v6 = *(double *)(v4 + 72);
  v7 = v5 + v5;
  v8 = (v5 + v5) * v5;
  v9 = (v6 + v6) * v6;
  v11 = *(_QWORD *)(v4 + 48);
  v10 = *(double *)(v4 + 56);
  v12 = (v10 + v10) * v5;
  v13 = *(double *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 88);
  v15 = (v6 + v6) * v13;
  v16 = v6 * (v10 + v10);
  v17 = 1.0 - (v10 + v10) * v10;
  v18 = v7 * v6;
  v45[0] = 1.0 - (v8 + v9);
  v45[1] = v15 + v12;
  v45[4] = v12 - v15;
  v45[5] = v17 - v9;
  v45[8] = v13 * v7 + v16;
  v45[9] = v18 - v13 * (v10 + v10);
  v45[2] = v16 - v13 * v7;
  v45[6] = v13 * (v10 + v10) + v18;
  v45[10] = v17 - v8;
  v45[3] = 0.0;
  v45[7] = 0.0;
  v45[11] = 0.0;
  v46 = *(_OWORD *)(v4 + 32);
  v47 = v11;
  v48 = 0x3FF0000000000000;
  v39 = 0u;
  v41 = 0u;
  v43 = 0u;
  v42 = 0u;
  v40 = 0u;
  v38 = 0u;
  v37 = 0u;
  v44 = 0x3FF0000000000000;
  v19 = *(_QWORD *)(v4 + 96);
  v20 = *(_QWORD *)(v4 + 104);
  v36 = v14;
  *(_QWORD *)&v39 = v19;
  *((_QWORD *)&v41 + 1) = v20;
  gm::operator*<double,4,4,4>((double *)v35, v45, (double *)&v36);
  v21 = v35[1];
  *(_OWORD *)(a1 + 712) = v35[0];
  *(_OWORD *)(a1 + 728) = v21;
  v22 = v35[3];
  *(_OWORD *)(a1 + 744) = v35[2];
  *(_OWORD *)(a1 + 760) = v22;
  v23 = v35[5];
  *(_OWORD *)(a1 + 776) = v35[4];
  *(_OWORD *)(a1 + 792) = v23;
  v24 = v35[7];
  *(_OWORD *)(a1 + 808) = v35[6];
  *(_OWORD *)(a1 + 824) = v24;
  md::CollisionObject::resetWithRects((void **)(a1 + 312), 1u);
  v25 = *(_QWORD *)(a1 + 472);
  v26 = *(unsigned int *)(a1 + 488);
  *(_DWORD *)(a1 + 488) = v26 + 1;
  v27 = (_DWORD *)(v25 + 16 * v26);
  *v27 = *(_DWORD *)(a1 + 632);
  v27[1] = *(_DWORD *)(a1 + 636);
  v27[2] = *(_DWORD *)(a1 + 640);
  v27[3] = *(_DWORD *)(a1 + 644);
  v28 = *(int8x16_t *)(a1 + 632);
  v29.i64[0] = *(_QWORD *)(a1 + 632);
  v29.i64[1] = *(_QWORD *)(a1 + 320);
  v30.i64[0] = *(_QWORD *)(a1 + 312);
  v30.i64[1] = *(_QWORD *)(a1 + 640);
  v31 = (int8x16_t)vcgtq_f32(v30, v29);
  v32 = vbslq_s8(v31, v28, *(int8x16_t *)(a1 + 312));
  *(int8x16_t *)(a1 + 312) = v32;
  v32.i32[0] = *(_DWORD *)(a1 + 616);
  *(_DWORD *)(a1 + 520) = v32.i32[0];
  v28.i32[0] = *(_DWORD *)(a1 + 620);
  *(_DWORD *)(a1 + 524) = v28.i32[0];
  *(_DWORD *)(a1 + 344) = v32.i32[0];
  *(_DWORD *)(a1 + 348) = v28.i32[0];
  md::CollisionObject::setupShapeData(a1 + 312, *(double *)v32.i64, *(double *)v28.i64, *(double *)v31.i64);
  v33 = (_OWORD *)(a1 + 440);
  if (*(_BYTE *)(a1 + 464))
  {
    *v33 = *(_OWORD *)(a1 + 688);
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 704);
  }
  else
  {
    *v33 = *(_OWORD *)(a1 + 688);
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 704);
    *(_BYTE *)(a1 + 464) = 1;
  }
  *(_QWORD *)(a1 + 424) = a1 + 712;
  return 37;
}

double md::ARArrivalExternalMeshLabelPart::debugString@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3890;
  strcpy(v3, "ARArrivalExternalMeshLabelPart");
  return *(double *)"nalMeshLabelPart";
}

uint64_t (***md::ARArrivalExternalMeshLabelPart::collisionInfoFromTransform(float32x2_t *a1, uint64_t a2, __int128 *a3, float *a4, float *a5))()
{
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  float64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t (**v17)();
  float64_t v18;
  float64_t v19;
  double v20;
  uint64_t v21;
  __n128 v22;
  uint64_t (***v23)();
  uint64_t v24;
  __n128 v25;
  uint64_t (***result)();
  uint64_t v27;
  __int128 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  _OWORD v37[8];
  _OWORD v38[3];
  int64x2_t v39;
  __int128 v40;
  int64x2_t v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (**v51)();
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v8 = vcvtq_f64_f32(a1[2]);
  v38[0] = vcvtq_f64_f32(a1[1]);
  v38[1] = v8;
  v38[2] = vcvtq_f64_f32(a1[3]);
  v9 = *((double *)a3 + 4);
  v8.f64[0] = *((float64_t *)a3 + 5);
  v10 = v9 + v9;
  v11 = (v9 + v9) * v9;
  v12 = (v8.f64[0] + v8.f64[0]) * v8.f64[0];
  v14 = *((_QWORD *)a3 + 2);
  v13 = *((double *)a3 + 3);
  v15 = (v13 + v13) * v9;
  v16 = *((double *)a3 + 6);
  v17 = (uint64_t (**)())*((_QWORD *)a3 + 7);
  v18 = (v8.f64[0] + v8.f64[0]) * v16;
  v19 = v8.f64[0] * (v13 + v13);
  v20 = 1.0 - (v13 + v13) * v13;
  v8.f64[0] = v10 * v8.f64[0];
  *(double *)v39.i64 = 1.0 - (v11 + v12);
  *(double *)&v39.i64[1] = v18 + v15;
  *(double *)v41.i64 = v15 - v18;
  *(double *)&v41.i64[1] = v20 - v12;
  v44 = v16 * v10 + v19;
  v45 = v8.f64[0] - v16 * (v13 + v13);
  v40 = COERCE_UNSIGNED_INT64(v19 - v16 * v10);
  v42 = v16 * (v13 + v13) + v8.f64[0];
  v46 = v20 - v11;
  v43 = 0;
  v47 = 0;
  v48 = *a3;
  v49 = v14;
  v50 = 0x3FF0000000000000;
  v54 = 0u;
  v56 = 0u;
  v58 = 0u;
  v57 = 0u;
  v55 = 0u;
  v53 = 0u;
  v52 = 0u;
  v59 = 0x3FF0000000000000;
  v21 = *((_QWORD *)a3 + 8);
  v8.f64[0] = *((float64_t *)a3 + 9);
  v51 = v17;
  *(_QWORD *)&v54 = v21;
  *((_QWORD *)&v56 + 1) = *(_QWORD *)&v8.f64[0];
  gm::operator*<double,4,4,4>((double *)v37, (double *)v39.i64, (double *)&v51);
  v39 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v40 = xmmword_19FFB2E00;
  v41 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v51 = &off_1E42D8A68;
  *(_QWORD *)&v52 = &v39;
  *((_QWORD *)&v52 + 1) = v37;
  *(_QWORD *)&v53 = &v51;
  v22.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)v38, (uint64_t)&v51);
  v23 = (uint64_t (***)())v53;
  if ((uint64_t (***)())v53 == &v51)
  {
    v24 = 4;
    v23 = &v51;
  }
  else
  {
    if (!(_QWORD)v53)
      goto LABEL_6;
    v24 = 5;
  }
  ((void (*)(__n128))(*v23)[v24])(v22);
LABEL_6:
  v37[0] = xmmword_19FFB2E30;
  v51 = &off_1E42D9200;
  *(_QWORD *)&v52 = a2;
  *((_QWORD *)&v52 + 1) = v37;
  *(_QWORD *)&v53 = &v51;
  v25.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)&v39, (uint64_t)&v51);
  result = (uint64_t (***)())v53;
  if ((uint64_t (***)())v53 == &v51)
  {
    v27 = 4;
    result = &v51;
  }
  else
  {
    if (!(_QWORD)v53)
      goto LABEL_11;
    v27 = 5;
  }
  result = (uint64_t (***)())((uint64_t (*)(__n128))(*result)[v27])(v25);
LABEL_11:
  v28 = v37[0];
  v29 = (float)(*((float *)v37 + 2) - *(float *)v37) * 0.5;
  v30 = (float)(*((float *)v37 + 3) - *((float *)v37 + 1)) * 0.5;
  v31 = v29 + *(float *)v37;
  v32 = v30 + *((float *)v37 + 1);
  *a5 = v29 + *(float *)v37;
  a5[1] = v32;
  v33 = 3.4028e38;
  v34 = -3.4028e38;
  if (*((float *)&v28 + 2) < *(float *)&v28)
  {
    v35 = -3.4028e38;
    v36 = 3.4028e38;
  }
  else
  {
    v35 = -3.4028e38;
    v36 = 3.4028e38;
    if (*((float *)&v28 + 3) >= *((float *)&v28 + 1))
    {
      v36 = -v29;
      v33 = -v30;
      v35 = *((float *)&v28 + 2) - v31;
      v34 = *((float *)&v28 + 3) - v32;
    }
  }
  *a4 = v36;
  a4[1] = v33;
  a4[2] = v35;
  a4[3] = v34;
  return result;
}

void sub_19F83E19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>,geo::StdAllocator<ggl::VertexDataTyped<ggl::FlyoverCommon::PolarVertex>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::FlyoverCommon::PolarMesh::~PolarMesh(ggl::FlyoverCommon::PolarMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::FlyoverCommon::PolarMesh::~PolarMesh(ggl::FlyoverCommon::PolarMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverCommon::PolarMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverCommon::PolarMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverCommon::PolarVertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::NavContext::worldPoint(md::NavContext *this, const md::LabelPoint *a2)
{
  long double v3;
  long double v4;
  double v5;
  long double v6;
  double v7;
  __double2 v8;
  double v9;
  __double2 v10;

  if ((_BYTE)this)
  {
    md::LabelPoint::mercatorPoint(a2);
  }
  else
  {
    if (!*((_BYTE *)a2 + 44))
    {
      v3 = *((double *)a2 + 3) * 6.28318531;
      v4 = exp(*((double *)a2 + 4) * 6.28318531 + -3.14159265);
      v5 = atan(v4) * 2.0 + -1.57079633;
      v6 = fmod(v3, 6.28318531);
      v7 = fmod(v6 + 6.28318531, 6.28318531) + -3.14159265;
      v8 = __sincos_stret(v5);
      v9 = 6378137.0 / sqrt(v8.__sinval * v8.__sinval * -0.00669437999 + 1.0);
      v10 = __sincos_stret(v7);
      *(double *)a2 = v9 * v8.__cosval * v10.__cosval;
      *((double *)a2 + 1) = v9 * v8.__cosval * v10.__sinval;
      *((double *)a2 + 2) = v8.__sinval * 0.99330562 * v9;
      *((_BYTE *)a2 + 44) = 1;
    }
    md::LabelPoint::geocentricNormal(a2);
  }
}

double md::LabelPoint::geocentricNormal(md::LabelPoint *this)
{
  double v2;
  double v3;
  double v4;
  long double v5;
  long double v6;
  double v7;
  long double v8;
  double v9;
  __double2 v10;
  double v11;
  __double2 v12;

  if (*((_BYTE *)this + 44))
  {
    v3 = *(double *)this;
    v2 = *((double *)this + 1);
    v4 = *((double *)this + 2);
  }
  else
  {
    v5 = *((double *)this + 3) * 6.28318531;
    v6 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
    v7 = atan(v6) * 2.0 + -1.57079633;
    v8 = fmod(v5, 6.28318531);
    v9 = fmod(v8 + 6.28318531, 6.28318531) + -3.14159265;
    v10 = __sincos_stret(v7);
    v11 = 6378137.0 / sqrt(v10.__sinval * v10.__sinval * -0.00669437999 + 1.0);
    v12 = __sincos_stret(v9);
    v3 = v11 * v10.__cosval * v12.__cosval;
    v2 = v11 * v10.__cosval * v12.__sinval;
    v4 = v10.__sinval * 0.99330562 * v11;
    *(double *)this = v3;
    *((double *)this + 1) = v2;
    *((double *)this + 2) = v4;
    *((_BYTE *)this + 44) = 1;
  }
  return 1.0
       / sqrt(v3 * 2.45817226e-14 * (v3 * 2.45817226e-14)+ v2 * 2.45817226e-14 * (v2 * 2.45817226e-14)+ v4 * 2.4747391e-14 * (v4 * 2.4747391e-14))* (v3* 2.45817226e-14);
}

uint64_t md::LineLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  char v20[16];
  uint64_t v21;
  uint64_t v22;

  if ((v10 & 1) == 0)
  {
    v19 = a5;
    v18 = a4;
    v16 = a2;
    v17 = a3;
    v15 = a1;
    a1 = v15;
    a2 = v16;
    a3 = v17;
    a4 = v18;
    v13 = v12;
    a5 = v19;
    if (v13)
    {
      v14 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v14, "VectorKitLabels", 0x5ED09DD50000000FLL);
      a5 = v19;
      a1 = v15;
      a2 = v16;
      a3 = v17;
      a4 = v18;
    }
  }
  v22 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v21) = 4;
  strcpy(v20, "Road");
  result = md::LineLabelFeature::debugRoadString(a5, a1, a2, a3, a4, (uint64_t)v20);
  if (SHIBYTE(v21) < 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 40))(v22, *(_QWORD *)v20, v21 & 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

void sub_19F83E8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (SHIBYTE(a17) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a18 + 40))(a18, a15, a17 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

uint64_t md::LineLabelFeature::debugRoadString(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  std::ios_base *v11;
  float v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  float v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  float v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  float v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  __n128 v56;
  _DWORD *v57;
  _DWORD *v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int16 v61;
  unint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int v90;
  std::ios_base *v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t *v100;
  unsigned int v101;
  uint64_t v102;
  std::string *v103;
  std::string::size_type size;
  std::string *v105;
  __int128 v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  BOOL v114;
  uint64_t *v115;
  size_t v116;
  void **p_dst;
  _BYTE *v118;
  const void **v119;
  const void *v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  void *v127;
  void **v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  __int128 *v136;
  __int128 *i;
  __int128 v138;
  void **v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  float v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _BYTE *v176;
  signed int v177;
  uint64_t v178;
  uint64_t **v179;
  uint64_t **v180;
  uint64_t *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  uint64_t v185;
  unint64_t *p_shared_owners;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned __int8 *v196;
  BOOL v197;
  uint64_t v198;
  __int128 v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  _BYTE *v206;
  signed int v207;
  uint64_t v208;
  __int128 v209;
  int v210;
  double v211;
  double v212;
  double v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  md::LabelLineSegment **v220;
  double v221;
  long double v222;
  long double v223;
  double v224;
  long double v225;
  double v226;
  __double2 v227;
  double v228;
  __double2 v229;
  long double v230;
  long double v231;
  double v232;
  long double v233;
  double v234;
  __double2 v235;
  double v236;
  __double2 v237;
  void *v238;
  void *v239;
  void *v240;
  md::LabelLineSegment **v241;
  double v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _BYTE *v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int *v253;
  uint64_t v254;
  size_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  float *v259;
  float *v260;
  id v261;
  const char *v262;
  size_t v263;
  size_t v264;
  __int128 *v265;
  uint64_t v266;
  uint64_t v267;
  __int128 *v268;
  uint64_t v269;
  size_t v270;
  void *v271;
  unint64_t v272;
  const void **v273;
  const void *v274;
  uint64_t v275;
  uint64_t v276;
  const void *v277;
  void *v278;
  std::string *v280;
  std::string::size_type v281;
  std::string *v282;
  std::string::size_type v283;
  uint64_t v284;
  _QWORD *v285;
  void *v286;
  uint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v294;
  int __e;
  int __ea[2];
  md::LineLabelFeature *v298;
  void **__dst;
  size_t v300;
  int64_t v301;
  _QWORD *v302;
  _QWORD v303[2];
  _QWORD v304[3];
  uint64_t v305;
  unint64_t v306;
  __int128 v307;
  __int128 v308;
  int v309;
  uint64_t v310[19];
  std::string v311;
  __int128 v312;
  int64_t v313;
  void *__p[6];
  uint64_t v315;
  _BYTE *v316;
  __int128 v317;
  __int128 v318;
  int v319;
  uint64_t v320[20];
  std::string v321[2];

  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
  v310[0] = MEMORY[0x1E0DE4FE0] + 64;
  v302 = v9;
  *(_QWORD *)((char *)&v303[-1] + *(v9 - 3)) = v10;
  v11 = (std::ios_base *)((char *)&v303[-1] + *(v302 - 3));
  std::ios_base::init(v11, v303);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v302 = (_QWORD *)(v7 + 24);
  v310[0] = v8;
  std::streambuf::basic_streambuf();
  v303[0] = MEMORY[0x1E0DE4FB8] + 16;
  v307 = 0u;
  v308 = 0u;
  v309 = 16;
  v12 = *(float *)(a3 + 472);
  LODWORD(v321[0].__r_.__value_.__l.__data_) = *a4;
  HIDWORD(v321[0].__r_.__value_.__r.__words[1]) = -1;
  *(std::string::size_type *)((char *)v321[0].__r_.__value_.__r.__words + 4) = -1;
  v321[0].__r_.__value_.__r.__words[2] = 0;
  md::LabelFeature::debugString((_BYTE *)a2, a3, (unsigned int *)v321, a5, __p);
  if (SHIBYTE(__p[2]) >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v14 = HIBYTE(__p[2]);
  else
    v14 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)v13, v14);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"  Style MinVisibleZoom=", 23);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"  ", 2);
  v16 = *(char *)(a6 + 23);
  if (v16 >= 0)
    v17 = a6;
  else
    v17 = *(_QWORD *)a6;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a6 + 23);
  else
    v18 = *(_QWORD *)(a6 + 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, v17, v18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)":\n", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"    layoutZ=", 12);
  __e = (int)v12;
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" pathZ=", 7);
  v20 = *(_QWORD *)(a2 + 192);
  if ((int)v12 >= 0x17)
    v21 = 23;
  else
    v21 = (int)v12;
  v22 = atomic_load((unsigned __int8 *)(v20 + 224 + v21));
  if (v22 == 254)
  {
    if (*(_BYTE *)(v20 + 289))
      v23 = 24;
    else
      v23 = 5;
    v24 = *(unsigned __int8 **)(v20 + 128);
    v25 = *(_QWORD *)(v20 + 136) - (_QWORD)v24;
    if (v25)
    {
      v26 = 0;
      v27 = v25 / 112;
      if (v27 <= 1)
        v28 = 1;
      else
        v28 = v27;
      v29 = -1;
      v30 = 1000.0;
      while (1)
      {
        v32 = *v24;
        v24 += 112;
        v31 = v32;
        if ((_DWORD)v21 == v32)
          break;
        v33 = v21 - v31;
        if (v33 >= 0)
          v34 = v33;
        else
          v34 = -v33;
        if (v34 <= v23)
        {
          v35 = (float)v33;
          if (v33 < 0)
            v35 = (float)v33 * -0.8;
          if (v35 < v30)
            v29 = v26;
          v30 = fminf(v35, v30);
        }
        if (v28 == ++v26)
          goto LABEL_41;
      }
      v29 = v26;
    }
    else
    {
      v29 = -1;
    }
LABEL_41:
    atomic_store(v29, (unsigned __int8 *)(v20 + 224 + v21));
  }
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)" travelDir=", 11);
  v37 = *(_QWORD *)(a2 + 192);
  v38 = atomic_load((unsigned __int8 *)(v37 + 224 + v21));
  if (v38 == 254)
  {
    if (*(_BYTE *)(v37 + 289))
      v39 = 24;
    else
      v39 = 5;
    v40 = *(unsigned __int8 **)(v37 + 128);
    v41 = *(_QWORD *)(v37 + 136) - (_QWORD)v40;
    if (v41)
    {
      v42 = 0;
      v43 = v41 / 112;
      if (v43 <= 1)
        v44 = 1;
      else
        v44 = v43;
      v38 = -1;
      v45 = 1000.0;
      while (1)
      {
        v47 = *v40;
        v40 += 112;
        v46 = v47;
        if ((_DWORD)v21 == v47)
          break;
        v48 = v21 - v46;
        if (v48 >= 0)
          v49 = v48;
        else
          v49 = -v48;
        if (v49 <= v39)
        {
          v50 = (float)v48;
          if (v48 < 0)
            v50 = (float)v48 * -0.8;
          if (v50 < v45)
            v38 = v42;
          v45 = fminf(v50, v45);
        }
        if (v44 == ++v42)
          goto LABEL_66;
      }
      v38 = v42;
    }
    else
    {
      v38 = -1;
    }
LABEL_66:
    atomic_store(v38, (unsigned __int8 *)(v37 + 224 + v21));
    if ((v38 & 0x80000000) != 0)
      goto LABEL_149;
  }
  else
  {
    v38 = (char)v38;
    if ((char)v38 < 0)
      goto LABEL_149;
  }
  v51 = *(_QWORD *)(v37 + 128);
  if (v51)
  {
    v52 = *(_QWORD *)(v51 + 112 * v38 + 88) - *(_QWORD *)(v51 + 112 * v38 + 80);
    if (v52)
    {
      v53 = 0;
      v54 = v52 >> 3;
      v55 = 4;
      while (1)
      {
        v56.n128_f64[0] = md::LabelLineStore::lineStartForZoom((md::LabelLineStore *)__p, (unsigned __int8 *)v37, __e, v53);
        v57 = __p[0];
        v58 = __p[0];
        while (1)
        {
LABEL_73:
          if (!v58)
            goto LABEL_143;
          v59 = (int)__p[5];
          if (LODWORD(__p[5]) != v58[63])
            goto LABEL_143;
          v60 = (unsigned __int8 *)__p[3];
          if (!__p[3])
            goto LABEL_143;
          v61 = WORD1(__p[4]);
          if (SWORD1(__p[4]) < 0)
            goto LABEL_143;
          v62 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)__p[3] + 16))(*(_QWORD *)__p[3], v56);
          v63 = v61;
          if (v62 <= v61)
            goto LABEL_143;
          v64 = *((unsigned __int8 *)v58 + 120);
          if (v55 != 4)
            break;
          if (v64 != 7)
          {
            if (*((_BYTE *)v58 + 120))
            {
              v55 = 4;
              goto LABEL_120;
            }
            if (v59 == v58[63])
            {
              v65 = *(_QWORD *)v60;
              if (*(_QWORD *)v60)
              {
                if (!*(_BYTE *)(v65 + 32))
                {
                  v66 = *(_QWORD *)(v65 + 16);
                  if (v66)
                  {
                    v67 = *(unsigned __int8 *)(v66 + 153);
                    if (v67 >= 3)
                      v55 = 4;
                    else
                      v55 = v67;
                    if (!v57)
                    {
LABEL_108:
                      v58 = 0;
                      __p[3] = 0;
                      continue;
                    }
                    goto LABEL_118;
                  }
                }
              }
            }
LABEL_107:
            v55 = 4;
            if (!v57)
              goto LABEL_108;
            goto LABEL_118;
          }
          if (v59 != v58[63])
            goto LABEL_107;
          v71 = *(_QWORD *)v60;
          if (!*(_QWORD *)v60)
            goto LABEL_107;
          if (*(_BYTE *)(v71 + 32) != 1)
            goto LABEL_107;
          v72 = *(uint64_t **)(v71 + 24);
          if (!v72)
            goto LABEL_107;
          v73 = *v72;
          if (!v73)
            goto LABEL_107;
          v55 = *(unsigned __int8 *)(v73 + 304);
          if (!v57)
            goto LABEL_108;
LABEL_118:
          v58 = v57;
LABEL_120:
          if (v59 != v58[63])
          {
            __p[3] = 0;
            continue;
          }
          LODWORD(v77) = SLOWORD(__p[4]);
          v78 = 1;
          while (1)
          {
            v79 = v60[8];
            v80 = v60[8] ? v78 : -v78;
            v81 = v80 + v63;
            if (v80 + v63 >= 0)
              break;
            v82 = v81 + 1;
LABEL_129:
            if (v79)
              v78 = v82;
            else
              v78 = -v82;
            v77 = (v77 + 1);
            v83 = *((_QWORD *)__p[2] + 1);
            if (v83)
              v84 = (*((_QWORD *)__p[2] + 2) - v83) >> 4 > v77;
            else
              v84 = 0;
            if (!v84)
            {
              __p[3] = 0;
              goto LABEL_73;
            }
            v63 = 0;
            v60 = (unsigned __int8 *)(v83 + 16 * v77);
            if (!*(_BYTE *)(v83 + 16 * v77 + 8))
              v63 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v60 + 16))(*(_QWORD *)v60) - 1;
          }
          if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v60 + 16))(*(_QWORD *)v60) <= (unint64_t)v81)
          {
            v82 = v81 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v60 + 16))(*(_QWORD *)v60);
            v79 = v60[8];
            goto LABEL_129;
          }
          LOWORD(__p[4]) = v77;
          WORD1(__p[4]) = v81;
          HIDWORD(__p[4]) = 0;
          v85 = *((_QWORD *)__p[2] + 1);
          v86 = (void *)(v85 + 16 * (__int16)v77);
          if ((__int16)v77 >= (unint64_t)((*((_QWORD *)__p[2] + 2) - v85) >> 4))
            v86 = 0;
          __p[3] = v86;
        }
        if (v64 == 7)
        {
          if (v59 != v58[63])
            goto LABEL_142;
          v74 = *(_QWORD *)v60;
          if (!*(_QWORD *)v60)
            goto LABEL_142;
          if (*(_BYTE *)(v74 + 32) != 1)
            goto LABEL_142;
          v75 = *(uint64_t **)(v74 + 24);
          if (!v75)
            goto LABEL_142;
          v76 = *v75;
          if (!v76 || *(unsigned __int8 *)(v76 + 304) != v55)
            goto LABEL_142;
LABEL_117:
          if (!v57)
            goto LABEL_108;
          goto LABEL_118;
        }
        if (!*((_BYTE *)v58 + 120) && v59 == v58[63])
        {
          v68 = *(_QWORD *)v60;
          if (*(_QWORD *)v60)
          {
            if (!*(_BYTE *)(v68 + 32))
            {
              v69 = *(_QWORD *)(v68 + 16);
              if (v69)
              {
                v70 = *(unsigned __int8 *)(v69 + 153);
                if (v70 >= 3)
                  v70 = 4;
                if (v70 == v55)
                  goto LABEL_117;
              }
            }
          }
        }
LABEL_142:
        v55 = 3;
LABEL_143:
        v87 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v88 = (unint64_t *)((char *)__p[1] + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v87->__on_zero_shared)(v87, v56);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        if (++v53 == v54)
          __asm { BR              X10 }
      }
    }
  }
LABEL_149:
  *((_BYTE *)&v321[0].__r_.__value_.__s + 23) = 7;
  strcpy((char *)v321, "Invalid");
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)v321, 7);
  if (SHIBYTE(v321[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v321[0].__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"\n", 1);
  v90 = *a4;
  v320[0] = v7 + 64;
  __p[0] = v9;
  *(void **)((char *)__p + *(v9 - 3)) = v10;
  v91 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
  std::ios_base::init(v91, &__p[1]);
  v91[1].__vftable = 0;
  v91[1].__fmtflags_ = -1;
  __p[0] = (void *)(v7 + 24);
  v320[0] = v7 + 64;
  std::streambuf::basic_streambuf();
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  v317 = 0u;
  v318 = 0u;
  v319 = 16;
  v92 = (int)*(float *)(a3 + 472);
  v93 = *(uint64_t **)(a2 + 224);
  v94 = (uint64_t *)(a2 + 232);
  if (v93 != (uint64_t *)(a2 + 232))
  {
    v95 = 0;
    do
    {
      v96 = (uint64_t *)v93[1];
      v97 = v93;
      if (v96)
      {
        do
        {
          v98 = v96;
          v96 = (uint64_t *)*v96;
        }
        while (v96);
      }
      else
      {
        do
        {
          v98 = (uint64_t *)v97[2];
          v197 = *v98 == (_QWORD)v97;
          v97 = v98;
        }
        while (!v197);
      }
      v95 += ((unint64_t)*(unsigned int *)(v93[5] + 16) >> v92) & 1;
      v93 = v98;
    }
    while (v98 != v94);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"    Placements:count=", 21);
  v99 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)" zCount=", 8);
  std::ostream::operator<<();
  if ((((unint64_t)*(unsigned int *)(a2 + 212) >> v92) & 1) != 0)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)" [PositionsLimited]", 19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"\n", 1);
  if (a5)
  {
    if (!*(_QWORD *)(a2 + 248))
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"No Line Placements\n", 19);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placements:\n", 12);
    v100 = *(uint64_t **)(a2 + 224);
    if (v100 != v94)
    {
      do
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"    [", 5);
        v101 = *((_DWORD *)v100 + 8);
        if (v101)
        {
          std::to_string(v321, v101);
          v102 = HIBYTE(v321[0].__r_.__value_.__r.__words[2]);
        }
        else
        {
          *((_BYTE *)&v321[0].__r_.__value_.__s + 23) = 7;
          strcpy((char *)v321, "UNKNOWN");
          v102 = 7;
        }
        if ((v102 & 0x80u) == 0)
          v103 = v321;
        else
          v103 = (std::string *)v321[0].__r_.__value_.__r.__words[0];
        if ((v102 & 0x80u) == 0)
          size = v102;
        else
          size = v321[0].__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)v103, size);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v100[5] + 216))(&v311, v100[5], 1);
        v105 = std::string::insert(&v311, 0, "]: ", 3uLL);
        v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        v313 = v105->__r_.__value_.__r.__words[2];
        v312 = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        if (v313 >= 0)
          v107 = &v312;
        else
          v107 = (__int128 *)v312;
        if (v313 >= 0)
          v108 = HIBYTE(v313);
        else
          v108 = *((_QWORD *)&v312 + 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)v107, v108);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"\n", 1);
        if (SHIBYTE(v313) < 0)
        {
          operator delete((void *)v312);
          if ((SHIBYTE(v311.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_185:
            if ((SHIBYTE(v321[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_186;
            goto LABEL_190;
          }
        }
        else if ((SHIBYTE(v311.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_185;
        }
        operator delete(v311.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v321[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_186:
          v109 = (uint64_t *)v100[1];
          if (v109)
            goto LABEL_191;
          goto LABEL_193;
        }
LABEL_190:
        operator delete(v321[0].__r_.__value_.__l.__data_);
        v109 = (uint64_t *)v100[1];
        if (v109)
        {
          do
          {
LABEL_191:
            v110 = v109;
            v109 = (uint64_t *)*v109;
          }
          while (v109);
          goto LABEL_167;
        }
        do
        {
LABEL_193:
          v110 = (uint64_t *)v100[2];
          v197 = *v110 == (_QWORD)v100;
          v100 = v110;
        }
        while (!v197);
LABEL_167:
        v100 = v110;
      }
      while (v110 != v94);
    }
  }
  v111 = *v94;
  if (!*v94)
    goto LABEL_207;
  v112 = a2 + 232;
  do
  {
    v113 = *(_DWORD *)(v111 + 32);
    v114 = v113 >= v90;
    if (v113 >= v90)
      v115 = (uint64_t *)v111;
    else
      v115 = (uint64_t *)(v111 + 8);
    if (v114)
      v112 = v111;
    v111 = *v115;
  }
  while (*v115);
  if ((uint64_t *)v112 != v94 && v90 >= *(_DWORD *)(v112 + 32))
  {
    v160 = *(_QWORD *)(v112 + 40);
    v159 = *(_QWORD *)(v112 + 48);
    *(_QWORD *)&v312 = v160;
    *((_QWORD *)&v312 + 1) = v159;
    if (v159)
    {
      v161 = (unint64_t *)(v159 + 8);
      do
        v162 = __ldxr(v161);
      while (__stxr(v162 + 1, v161));
    }
    if (v160)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placement:", 10);
      if (v90)
      {
        std::to_string(v321, v90);
        v163 = HIBYTE(v321[0].__r_.__value_.__r.__words[2]);
      }
      else
      {
        v163 = 7;
        *((_BYTE *)&v321[0].__r_.__value_.__s + 23) = 7;
        strcpy((char *)v321, "UNKNOWN");
      }
      if ((v163 & 0x80u) == 0)
        v280 = v321;
      else
        v280 = (std::string *)v321[0].__r_.__value_.__r.__words[0];
      if ((v163 & 0x80u) == 0)
        v281 = v163;
      else
        v281 = v321[0].__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)v280, v281);
      if (SHIBYTE(v321[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v321[0].__r_.__value_.__l.__data_);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)":\n    ", 6);
      (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v160 + 216))(v321, v160, a5);
      if ((v321[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v282 = v321;
      else
        v282 = (std::string *)v321[0].__r_.__value_.__r.__words[0];
      if ((v321[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v283 = HIBYTE(v321[0].__r_.__value_.__r.__words[2]);
      else
        v283 = v321[0].__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)v282, v283);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)"\n", 1);
      if (SHIBYTE(v321[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v321[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
LABEL_207:
    v312 = 0uLL;
  }
  if ((v319 & 0x10) != 0)
  {
    v118 = (_BYTE *)*((_QWORD *)&v318 + 1);
    if (*((_QWORD *)&v318 + 1) < (unint64_t)v316)
    {
      *((_QWORD *)&v318 + 1) = v316;
      v118 = v316;
    }
    v119 = (const void **)&v315;
  }
  else
  {
    if ((v319 & 8) == 0)
    {
      v116 = 0;
      HIBYTE(v301) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_223;
    }
    v119 = (const void **)&__p[3];
    v118 = __p[5];
  }
  v120 = *v119;
  v116 = v118 - (_BYTE *)*v119;
  if (v116 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v116 >= 0x17)
  {
    v121 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v116 | 7) != 0x17)
      v121 = v116 | 7;
    v122 = v121 + 1;
    p_dst = (void **)operator new(v121 + 1);
    v300 = v116;
    v301 = v122 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v301) = (_BYTE)v118 - *(_BYTE *)v119;
    p_dst = (void **)&__dst;
    if (!v116)
      goto LABEL_223;
  }
  memmove(p_dst, v120, v116);
LABEL_223:
  *((_BYTE *)p_dst + v116) = 0;
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
  if (*((_QWORD *)&v312 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (void *)*MEMORY[0x1E0DE4F60];
  __p[0] = v126;
  v127 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  *(void **)((char *)__p + *((_QWORD *)v126 - 3)) = v127;
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SBYTE7(v318) < 0)
    operator delete((void *)v317);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v320);
  if (v301 >= 0)
    v128 = (void **)&__dst;
  else
    v128 = __dst;
  if (v301 >= 0)
    v129 = HIBYTE(v301);
  else
    v129 = v300;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)v128, v129);
  v286 = v127;
  if (SHIBYTE(v301) < 0)
    operator delete(__dst);
  if (md::LineLabelFeature::roadMetricsForZ((md::LineLabelFeature *)a2, __e, *(const md::LabelLayoutContext **)(a3 + 432)))
  {
    ldexp(1.0, __e);
    v130 = v302;
    *(_DWORD *)((char *)v303 + *(v302 - 3)) = *(_DWORD *)((_BYTE *)v303 + *(v302 - 3)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v303[1] + *(v130 - 3)) = 0;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"   ", 3);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 336))(a2) & 1) == 0)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)" vis=", 5);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)" spacing(vis,rnk)=pts:", 22);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"text(", 5);
    v131 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v131, (uint64_t)",", 1);
    v132 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v132, (uint64_t)")=", 2);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)" shield(", 8);
    v133 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v133, (uint64_t)",", 1);
    v134 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v134, (uint64_t)")=", 2);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)" arrow(", 7);
    v135 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v135, (uint64_t)")=", 2);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"\n", 1);
  }
  if (*(_QWORD *)(a2 + 360) != *(_QWORD *)(a2 + 352))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"    Shields:", 12);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"cnt=", 4);
    std::ostream::operator<<();
    v136 = *(__int128 **)(a2 + 352);
    for (i = *(__int128 **)(a2 + 360); v136 != i; v136 += 3)
    {
      __p[3] = *((void **)v136 + 3);
      if (*((char *)v136 + 23) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)__p, *(void **)v136, *((_QWORD *)v136 + 1));
      }
      else
      {
        v138 = *v136;
        __p[2] = *((void **)v136 + 2);
        *(_OWORD *)__p = v138;
      }
      __p[4] = *((void **)v136 + 4);
      LODWORD(__p[5]) = *((_DWORD *)v136 + 10);
      BYTE4(__p[5]) = *((_BYTE *)v136 + 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)" ", 1);
      if (SHIBYTE(__p[2]) >= 0)
        v139 = __p;
      else
        v139 = (void **)__p[0];
      if (SHIBYTE(__p[2]) >= 0)
        v140 = HIBYTE(__p[2]);
      else
        v140 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)v139, v140);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"(", 1);
      v141 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v141, (uint64_t)")", 1);
      if (SHIBYTE(__p[2]) < 0)
        (*(void (**)(void *, void *, unint64_t))(*(_QWORD *)__p[3] + 40))(__p[3], __p[0], (unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)"\n", 1);
  }
  v142 = *(_QWORD *)(a2 + 192);
  v143 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("SSLPM:\n"));
  v144 = v143;
  LODWORD(v145) = (int)*(float *)(a3 + 472);
  if (v145 >= 0x17)
    v145 = 23;
  else
    v145 = v145;
  v146 = atomic_load((unsigned __int8 *)(v142 + 224 + v145));
  v285 = v126;
  v288 = v142;
  if (v146 == 254)
  {
    if (*(_BYTE *)(v142 + 289))
      v147 = 24;
    else
      v147 = 5;
    v148 = *(unsigned __int8 **)(v142 + 128);
    v149 = *(_QWORD *)(v142 + 136) - (_QWORD)v148;
    if (v149)
    {
      v150 = 0;
      v151 = v149 / 112;
      if (v151 <= 1)
        v152 = 1;
      else
        v152 = v151;
      v146 = -1;
      v153 = 1000.0;
      while (1)
      {
        v155 = *v148;
        v148 += 112;
        v154 = v155;
        if ((_DWORD)v145 == v155)
          break;
        v156 = v145 - v154;
        if (v156 >= 0)
          v157 = v156;
        else
          v157 = -v156;
        if (v157 <= v147)
        {
          v158 = (float)v156;
          if (v156 < 0)
            v158 = (float)v156 * -0.8;
          if (v158 < v153)
            v146 = v150;
          v153 = fminf(v158, v153);
        }
        if (v152 == ++v150)
          goto LABEL_291;
      }
      v146 = v150;
    }
    else
    {
      v146 = -1;
    }
LABEL_291:
    atomic_store(v146, (unsigned __int8 *)(v142 + 224 + v145));
    if ((v146 & 0x80000000) != 0)
      goto LABEL_383;
  }
  else
  {
    v146 = (char)v146;
    if ((char)v146 < 0)
      goto LABEL_383;
  }
  v164 = *(_QWORD *)(v142 + 128) + 112 * v146;
  v166 = *(_QWORD *)(v164 + 80);
  v165 = (_QWORD *)(v164 + 80);
  v167 = v165 + 1;
  objc_msgSend(v143, "appendFormat:", CFSTR(" LabelLineCount=%i\n"), (unint64_t)(v165[1] - v166) >> 3);
  if (a5)
    v168 = 100;
  else
    v168 = 4;
  v169 = *v165;
  if (*v167 != *v165)
  {
    v170 = 0;
    v171 = 0;
    v284 = v168 | 1;
    v289 = v168;
    v290 = v165 + 1;
    do
    {
      v172 = (int)a4[1];
      v294 = v171;
      if ((a5 & 1) == 0 && v171 != v172)
        goto LABEL_298;
      objc_msgSend(v144, "appendFormat:", CFSTR(" LabelLine[%i] segments=%i"), v171, (*(_QWORD *)(*(_QWORD *)(v169 + 8 * v171) + 16) - *(_QWORD *)(*(_QWORD *)(v169 + 8 * v171) + 8)) >> 4);
      if (v171 != v172)
      {
        objc_msgSend(v144, "appendString:", CFSTR("\n"));
        goto LABEL_308;
      }
      objc_msgSend(v144, "appendFormat:", CFSTR(" (SELECTED) segment[%i]\n"), a4[2]);
      v173 = *(_QWORD *)(v169 + 8 * v171);
      v174 = *(_QWORD **)(v173 + 8);
      v175 = *(_QWORD **)(v173 + 16);
      if (v175 == v174)
        v176 = 0;
      else
        v176 = *(_BYTE **)(v173 + 8);
      if (v176[8])
      {
        v177 = 0;
      }
      else
      {
        v177 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v176 + 16))(*(_QWORD *)v176) << 16) - 0x10000;
        v174 = *(_QWORD **)(v173 + 8);
        v175 = *(_QWORD **)(v173 + 16);
      }
      if (v174)
        v197 = v175 == v174;
      else
        v197 = 1;
      if (v197)
      {
        memset(__p, 0, sizeof(__p));
        LODWORD(__p[5]) = 2139095039;
      }
      else
      {
        v198 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v174 + 24))(*v174, (uint64_t)v177 >> 16);
        v199 = *(_OWORD *)v198;
        __p[2] = *(void **)(v198 + 16);
        *(_OWORD *)__p = v199;
        *(_OWORD *)&__p[3] = *(_OWORD *)(v198 + 24);
        v200 = *(_DWORD *)(v198 + 43);
        LODWORD(__p[5]) = *(_DWORD *)(v198 + 40);
        *(_DWORD *)((char *)&__p[5] + 3) = v200;
      }
      v201 = *(_QWORD *)(v169 + 8 * v171);
      v202 = *(_QWORD *)(v201 + 8);
      v203 = *(_QWORD *)(v201 + 16) - v202;
      v204 = ((v203 << 44) - 0x1000000000000) >> 48;
      v205 = v203 >> 4;
      v206 = (_BYTE *)(v202 + 16 * v204);
      if (v205 <= v204)
        v206 = 0;
      if (v206[8])
      {
        v207 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v206 + 16))(*(_QWORD *)v206) << 16) - 0x10000;
        v202 = *(_QWORD *)(v201 + 8);
        v205 = (*(_QWORD *)(v201 + 16) - v202) >> 4;
        if (!v202)
          goto LABEL_351;
      }
      else
      {
        v207 = 0;
        if (!v202)
          goto LABEL_351;
      }
      if (v205 > v204)
      {
        v208 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v202 + 16 * v204) + 24))(*(_QWORD *)(v202 + 16 * v204), (uint64_t)v207 >> 16);
        v209 = *(_OWORD *)v208;
        v321[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v208 + 16);
        *(_OWORD *)&v321[0].__r_.__value_.__l.__data_ = v209;
        *(_OWORD *)&v321[1].__r_.__value_.__l.__data_ = *(_OWORD *)(v208 + 24);
        v210 = *(_DWORD *)(v208 + 43);
        LODWORD(v321[1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v208 + 40);
        *(_DWORD *)((char *)&v321[1].__r_.__value_.__r.__words[2] + 3) = v210;
        goto LABEL_352;
      }
LABEL_351:
      memset(v321, 0, sizeof(v321));
      LODWORD(v321[1].__r_.__value_.__r.__words[2]) = 2139095039;
LABEL_352:
      if (!*(_BYTE *)(v288 + 290))
      {
        v214 = (uint64_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)__p);
        v215 = (uint64_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v321);
        v216 = *v214;
        v217 = v214[1];
        v218 = *v215;
        v219 = v215[1];
        v220 = *(md::LabelLineSegment ***)(*(_QWORD *)(v169 + 8 * v171) + 8);
        v221 = 0.0;
        if (*(md::LabelLineSegment ***)(*(_QWORD *)(v169 + 8 * v171) + 16) != v220 && v220)
          v221 = md::LabelLineSegment::coincidentPointTolerance(*v220);
        objc_msgSend(v144, "appendFormat:", CFSTR("Start=(%.10f,%.10f) End=(%.10f,%.10f) Eps=%.10f\n"), v216, v217, v218, v219, *(_QWORD *)&v221);
        goto LABEL_366;
      }
      if (BYTE4(__p[5]))
      {
        if (v321[1].__r_.__value_.__s.__data_[20])
          goto LABEL_355;
      }
      else
      {
        v222 = *(double *)&__p[3] * 6.28318531;
        v223 = exp(*(double *)&__p[4] * 6.28318531 + -3.14159265);
        v224 = atan(v223) * 2.0 + -1.57079633;
        v225 = fmod(v222, 6.28318531);
        v226 = fmod(v225 + 6.28318531, 6.28318531) + -3.14159265;
        v227 = __sincos_stret(v224);
        v228 = 6378137.0 / sqrt(v227.__sinval * v227.__sinval * -0.00669437999 + 1.0);
        v229 = __sincos_stret(v226);
        *(double *)__p = v228 * v227.__cosval * v229.__cosval;
        *(double *)&__p[1] = v228 * v227.__cosval * v229.__sinval;
        *(double *)&__p[2] = v227.__sinval * 0.99330562 * v228;
        BYTE4(__p[5]) = 1;
        if (v321[1].__r_.__value_.__s.__data_[20])
        {
LABEL_355:
          v212 = *(double *)&v321[0].__r_.__value_.__l.__size_;
          v211 = *(double *)&v321[0].__r_.__value_.__l.__data_;
          v213 = *(double *)&v321[0].__r_.__value_.__r.__words[2];
          goto LABEL_362;
        }
      }
      v230 = *(double *)&v321[1].__r_.__value_.__l.__data_ * 6.28318531;
      v231 = exp(*(double *)&v321[1].__r_.__value_.__l.__size_ * 6.28318531 + -3.14159265);
      v232 = atan(v231) * 2.0 + -1.57079633;
      v233 = fmod(v230, 6.28318531);
      v234 = fmod(v233 + 6.28318531, 6.28318531) + -3.14159265;
      v235 = __sincos_stret(v232);
      v236 = 6378137.0 / sqrt(v235.__sinval * v235.__sinval * -0.00669437999 + 1.0);
      v237 = __sincos_stret(v234);
      v211 = v236 * v235.__cosval * v237.__cosval;
      v212 = v236 * v235.__cosval * v237.__sinval;
      *(double *)&v321[0].__r_.__value_.__l.__data_ = v211;
      *(double *)&v321[0].__r_.__value_.__l.__size_ = v212;
      v213 = v235.__sinval * 0.99330562 * v236;
      *(double *)&v321[0].__r_.__value_.__r.__words[2] = v213;
      v321[1].__r_.__value_.__s.__data_[20] = 1;
LABEL_362:
      v238 = __p[0];
      v239 = __p[1];
      v240 = __p[2];
      v241 = *(md::LabelLineSegment ***)(*(_QWORD *)(v169 + 8 * v171) + 8);
      v242 = 0.0;
      if (*(md::LabelLineSegment ***)(*(_QWORD *)(v169 + 8 * v171) + 16) != v241 && v241)
        v242 = md::LabelLineSegment::coincidentPointTolerance(*v241);
      objc_msgSend(v144, "appendFormat:", CFSTR("Start=(%.10f,%.10f,%.10f) End=(%.10f,%.10f,%.10f) Eps=%.10f\n"), v238, v239, v240, *(_QWORD *)&v211, *(_QWORD *)&v212, *(_QWORD *)&v213, *(_QWORD *)&v242);
LABEL_366:
      v243 = *(_QWORD *)(v169 + 8 * v171);
      v244 = *(_QWORD *)(v243 + 8);
      if (!v244)
        goto LABEL_308;
      v245 = (int)a4[2];
      if ((*(_QWORD *)(v243 + 16) - v244) >> 4 <= v245)
        goto LABEL_308;
      v246 = (_BYTE *)(v244 + 16 * v245);
      v247 = "fwd";
      if (!v246[8])
        v247 = "rev";
      objc_msgSend(v144, "appendFormat:", CFSTR("Segment: dir=%s section=%i\n"), v247, *(unsigned __int16 *)(*(_QWORD *)v246 + 44));
      v248 = *(_QWORD *)(v169 + 8 * v171);
      if (*(_BYTE *)(v248 + 1) != 4)
        goto LABEL_308;
      v249 = *(_QWORD *)(v248 + 8);
      if (!v249)
        goto LABEL_308;
      v250 = (int)a4[2];
      if ((*(_QWORD *)(v248 + 16) - v249) >> 4 <= v250)
        goto LABEL_308;
      v251 = *(_QWORD *)(v249 + 16 * v250);
      v252 = *(_QWORD *)(*(_QWORD *)(v251 + 16) + 48);
      v253 = (unsigned int *)(*(_QWORD *)(v252 + 48) + 8 * *(unsigned __int16 *)(v251 + 44));
      v254 = v253[1];
      v255 = 8 * v254;
      if ((_DWORD)v254)
      {
        v256 = *(_QWORD *)(v252 + 80);
        v257 = *v253;
        v258 = (char *)operator new(8 * v254);
        memcpy(v258, (const void *)(v256 + 8 * v257), v255);
      }
      else
      {
        v258 = 0;
      }
      v259 = (float *)&v258[v255];
      v260 = (float *)v258;
      if (v255)
      {
        do
        {
          objc_msgSend(v144, "appendFormat:", CFSTR(" ExclRange=(%.2f,%.2f)\n"), *v260, v260[1]);
          v260 += 2;
        }
        while (v260 != v259);
        v167 = v290;
        if (!v258)
          goto LABEL_308;
LABEL_381:
        operator delete(v258);
        goto LABEL_308;
      }
      v167 = v290;
      if (v259)
        goto LABEL_381;
LABEL_308:
      if (v170 >= v168)
      {
        objc_msgSend(v144, "appendString:", CFSTR("...\n"));
        break;
      }
      v178 = *(_QWORD *)(v169 + 8 * v171);
      v180 = *(uint64_t ***)(v178 + 40);
      v179 = *(uint64_t ***)(v178 + 48);
      if (v180 != v179)
      {
        *(_QWORD *)__ea = *(_QWORD *)(v178 + 48);
        v298 = 0;
        while (1)
        {
          if (v170 == v168)
          {
            objc_msgSend(v144, "appendString:", CFSTR("...\n"));
            v170 = v284;
            goto LABEL_298;
          }
          v181 = *v180;
          v182 = (std::__shared_weak_count *)(*v180)[1];
          if (v182)
          {
            v183 = std::__shared_weak_count::lock(v182);
            if (v183)
              break;
          }
LABEL_313:
          ++v170;
          if (++v180 == v179)
            goto LABEL_298;
        }
        v184 = v183;
        v185 = *v181;
        p_shared_owners = (unint64_t *)&v183->__shared_owners_;
        do
          v187 = __ldaxr(p_shared_owners);
        while (__stlxr(v187 - 1, p_shared_owners));
        if (v187)
        {
          if (!v185)
            goto LABEL_312;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v184);
          if (!v185)
          {
LABEL_312:
            v179 = *(uint64_t ***)__ea;
            goto LABEL_313;
          }
        }
        if ((md::LineLabelFeature *)v185 != v298)
        {
          objc_msgSend(v144, "appendFormat:", CFSTR(" Tile=(%i.%i.%i)\n"), (*(_QWORD *)(v185 + 4) >> 14) & 0x3FFFFFFLL, ((*(_QWORD *)(v185 + 4) >> 40) | (*(unsigned __int16 *)(v185 + 12) << 24)) & 0x3FFFFFF, (*(_QWORD *)(v185 + 4) >> 8) & 0x3F);
          v298 = (md::LineLabelFeature *)v185;
        }
        v188 = geo::codec::VectorTile::labelLineFeatureSections((geo::codec::VectorTile *)v185);
        v189 = geo::codec::VectorTile::labelLineAttributes((geo::codec::VectorTile *)v185);
        v190 = v181[2];
        if (v190)
        {
          v191 = v189;
          v192 = v165;
          objc_msgSend(v144, "appendFormat:", CFSTR("  Line ID=%llu rng=(%.2f:%.2f)\n"), *(_QWORD *)(v190 + 24), *(_QWORD *)(v190 + 8), *(_QWORD *)(v190 + 16));
          if (*(_WORD *)(v190 + 42))
          {
            v193 = 0;
            do
            {
              v194 = v193 + *(unsigned int *)(v190 + 32);
              objc_msgSend(v144, "appendFormat:", CFSTR("   Section fidx=%i rng=(%.2f:%.2f) rev=%i"), *(unsigned int *)(v188 + 40 * v194), *(_QWORD *)(v188 + 40 * v194 + 8), *(_QWORD *)(v188 + 40 * v194 + 16), *(unsigned __int8 *)(v188 + 40 * v194 + 30));
              if (*(_BYTE *)(v188 + 40 * v194 + 32))
                objc_msgSend(v144, "appendFormat:", CFSTR(" sub=(%u:%u)\n"), *(unsigned __int16 *)(v188 + 40 * v194 + 26), *(unsigned __int16 *)(v188 + 40 * v194 + 26)+ *(unsigned __int16 *)(v188 + 40 * v194 + 28)- 1);
              else
                objc_msgSend(v144, "appendString:", CFSTR("\n"));
              ++v193;
            }
            while (v193 < *(unsigned __int16 *)(v190 + 42));
          }
          if (*(_WORD *)(v190 + 40))
          {
            v195 = 0;
            v165 = v192;
            v168 = v289;
            do
            {
              v196 = (unsigned __int8 *)(v191 + 24 * (v195 + *(unsigned int *)(v190 + 36)));
              objc_msgSend(v144, "appendFormat:", CFSTR("   Attr type=%i rsn=%i rng=(%.2f:%.2f)\n"), *v196, v196[1], *((_QWORD *)v196 + 1), *((_QWORD *)v196 + 2));
              ++v195;
            }
            while (v195 < *(unsigned __int16 *)(v190 + 40));
            v167 = v290;
          }
          else
          {
            v165 = v192;
            v168 = v289;
            v167 = v290;
          }
        }
        goto LABEL_312;
      }
LABEL_298:
      v171 = v294 + 1;
      v169 = *v165;
    }
    while (v294 + 1 < (unint64_t)((uint64_t)(*v167 - *v165) >> 3));
  }
LABEL_383:
  v261 = objc_retainAutorelease(v144);
  v262 = (const char *)objc_msgSend(v261, "UTF8String");
  v263 = strlen(v262);
  if (v263 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v264 = v263;
  if (v263 >= 0x17)
  {
    v266 = (v263 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v263 | 7) != 0x17)
      v266 = v263 | 7;
    v267 = v266 + 1;
    v265 = (__int128 *)operator new(v266 + 1);
    v313 = v267 | 0x8000000000000000;
    *(_QWORD *)&v312 = v265;
    *((_QWORD *)&v312 + 1) = v264;
    goto LABEL_390;
  }
  HIBYTE(v313) = v263;
  v265 = &v312;
  if (v263)
LABEL_390:
    memmove(v265, v262, v264);
  *((_BYTE *)v265 + v264) = 0;
  if (v313 >= 0)
    v268 = &v312;
  else
    v268 = (__int128 *)v312;
  if (v313 >= 0)
    v269 = HIBYTE(v313);
  else
    v269 = *((_QWORD *)&v312 + 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v302, (uint64_t)v268, v269);
  if (SHIBYTE(v313) < 0)
    operator delete((void *)v312);

  if ((v309 & 0x10) != 0)
  {
    v272 = *((_QWORD *)&v308 + 1);
    if (*((_QWORD *)&v308 + 1) < v306)
    {
      *((_QWORD *)&v308 + 1) = v306;
      v272 = v306;
    }
    v273 = (const void **)&v305;
  }
  else
  {
    if ((v309 & 8) == 0)
    {
      v270 = 0;
      v271 = a1;
      *((_BYTE *)a1 + 23) = 0;
      goto LABEL_414;
    }
    v273 = (const void **)v304;
    v272 = v304[2];
  }
  v274 = *v273;
  v270 = v272 - (_QWORD)*v273;
  if (v270 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v270 >= 0x17)
  {
    v275 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v270 | 7) != 0x17)
      v275 = v270 | 7;
    v276 = v275 + 1;
    v271 = operator new(v275 + 1);
    a1[1] = v270;
    a1[2] = v276 | 0x8000000000000000;
    *a1 = v271;
    goto LABEL_413;
  }
  v271 = a1;
  *((_BYTE *)a1 + 23) = v270;
  if (v270)
  {
LABEL_413:
    v277 = v274;
    v278 = v271;
    memmove(v271, v277, v270);
    v271 = v278;
  }
LABEL_414:
  *((_BYTE *)v271 + v270) = 0;
  v302 = v285;
  *(_QWORD *)((char *)&v303[-1] + *(v285 - 3)) = v286;
  v303[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v308) < 0)
    operator delete((void *)v307);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v310);
}

void sub_19F8406B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x240]);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void md::LineLabelFeature::debugPopulateAttributeStrings(uint64_t a1, void *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unsigned __int8 *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unsigned __int8 *v39;
  double v40;
  unsigned __int8 *v41;
  uint64_t *v42;
  uint64_t v43;
  id v45;
  __int128 v46;
  __int128 v47;
  unsigned __int8 *v48;
  std::__shared_weak_count *v49;

  v45 = a2;
  v6 = *(_QWORD *)(a1 + 232);
  if (!v6)
    goto LABEL_12;
  v7 = *a4;
  v8 = a1 + 232;
  do
  {
    v9 = *(_DWORD *)(v6 + 32);
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 == a1 + 232 || v7 < *(_DWORD *)(v8 + 32))
  {
LABEL_12:
    v48 = 0;
    v49 = 0;
LABEL_13:
    v12 = -1;
    v13 = 1;
    goto LABEL_14;
  }
  v36 = *(unsigned __int8 **)(v8 + 40);
  v35 = *(std::__shared_weak_count **)(v8 + 48);
  v48 = v36;
  v49 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
  }
  if (!v36)
    goto LABEL_13;
  v39 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v36 + 200))(v36);
  v41 = v39;
  if ((*(_QWORD *)v39
     && *((_DWORD *)v39 + 10) == *(_DWORD *)(*(_QWORD *)v39 + 252)
     && (v42 = (uint64_t *)*((_QWORD *)v39 + 3)) != 0
     && (*((__int16 *)v39 + 17) & 0x80000000) == 0
     || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v39, v39[164], v40),
         *(_QWORD *)v41)
     && *((_DWORD *)v41 + 10) == *(_DWORD *)(*(_QWORD *)v41 + 252)
     && (v42 = (uint64_t *)*((_QWORD *)v41 + 3)) != 0)
    && (*((__int16 *)v41 + 17) & 0x80000000) == 0
    && (v43 = *v42) != 0)
  {
    v12 = *(_DWORD *)(v43 + 40);
  }
  else
  {
    v12 = -1;
  }
  v13 = v36[9];
LABEL_14:
  v14 = *(_QWORD *)(a1 + 272);
  if (v14 == *(_QWORD *)(a1 + 280))
  {
    if (*(_QWORD *)(a1 + 416))
    {
      v27 = (void *)MEMORY[0x1E0CB3940];
      md::HighlightHelper::debugAttributesToString((gss::Allocator *)(a1 + 416));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "stringWithFormat:", CFSTR("{%@}[SINGLE]"), v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "addObject:", v29);

    }
  }
  else
  {
    v15 = 0;
    v16 = v12;
    v17 = 0x6060C01000000uLL >> (8 * v13);
    if (v13 >= 7)
      LOBYTE(v17) = 0;
    v18 = v17;
    do
    {
      md::LineLabelFeature::resolvedStyleAttributes(&v46, *(const FeatureStyleAttributes **)(v14 + 80 * v15), v15 == *(_DWORD *)(a1 + 304), v18);
      v47 = v46;
      v19 = (void *)MEMORY[0x1E0CB3940];
      md::HighlightHelper::debugAttributesToString((gss::Allocator *)&v47);
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = (void *)v20;
      if (v15 == v16)
        v22 = "[ACTIVE]";
      else
        v22 = "";
      objc_msgSend(v19, "stringWithFormat:", CFSTR("{%@}%s"), v20, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "addObject:", v23);

      v24 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      ++v15;
      v14 = *(_QWORD *)(a1 + 272);
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 280) - v14) >> 4));
  }
  md::LabelFeature::debugClientAttributesToString((uint64_t *)(a1 + 416), *(_QWORD *)(a3 + 336));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (v30)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{%@}[CLIENT]"), v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "addObject:", v31);

  }
  v32 = v49;
  if (v49)
  {
    v33 = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_19F840C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::LineLabelFeature::debugDraw(uint64_t *a1, uint64_t a2, float32x2_t *a3, __n128 *a4)
{
  uint64_t v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  float32x2_t v7;
  uint64_t *v10;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  int v28;
  int v29;
  unsigned int v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float v40;
  int v41;
  int v42;
  unsigned int v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  double v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unint64_t *v55;
  unint64_t v56;
  int shared_owners_high;
  unsigned __int8 *v58;
  unint64_t v59;
  const md::LabelPoint *v60;
  double v61;
  double v62;
  double v63;
  BOOL isDistanceClipped;
  float32x2_t v65;
  BOOL v66;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unsigned __int8 *v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  long double v81;
  double v82;
  long double v83;
  double v84;
  double v85;
  long double v86;
  __double2 v87;
  long double v88;
  long double v89;
  long double v90;
  long double v91;
  float64x2_t v92;
  double v96;
  double v97;
  float v98;
  double v99;
  double v100;
  double v101;
  double v102;
  long double v103;
  long double v104;
  double v105;
  long double v106;
  double v107;
  __double2 v108;
  double v109;
  __double2 v110;
  double v111;
  double v112;
  double v113;
  double v114;
  float v115;
  double v116;
  BOOL v117;
  float32x2_t v118;
  char v119;
  unsigned __int32 v120;
  char v121;
  char v122;
  int v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  int v136;
  unsigned __int32 v137;
  BOOL v138;
  char v139;
  char v140;
  const md::LabelPoint *v141;
  double v142;
  double v143;
  double v144;
  float32x2_t v145;
  float v146;
  char v147;
  uint64_t *v148;
  uint64_t *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  unsigned int v152;
  unsigned __int8 *v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unsigned __int8 *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  float v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned __int8 *v171;
  double v172;
  __n128 *v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int LabelPoint;
  float32x2_t v187;
  __int128 v188;
  double v189;
  double v190;
  double v191;
  double v192;
  __double2 v193;
  long double v194;
  long double v195;
  long double v196;
  long double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  float v203;
  double v204;
  long double v205;
  long double v206;
  double v207;
  long double v208;
  double v209;
  __double2 v210;
  double v211;
  __double2 v212;
  double v213;
  double v214;
  double v215;
  double v216;
  float v217;
  double v218;
  double v219;
  double v220;
  uint64_t v221;
  __n128 *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  int v230;
  float32x2_t v231;
  __int128 v232;
  double v233;
  double v234;
  double v235;
  double v236;
  __double2 v237;
  long double v238;
  long double v239;
  long double v240;
  long double v241;
  long double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  float v248;
  double v249;
  long double v250;
  long double v251;
  double v252;
  long double v253;
  double v254;
  __double2 v255;
  double v256;
  __double2 v257;
  double v258;
  double v259;
  double v260;
  double v261;
  float v262;
  double v263;
  int v264;
  int v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count *v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  unsigned __int8 *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  float v284;
  int v285;
  int v286;
  int v287;
  unsigned int v288;
  float v289;
  uint64_t v290;
  uint64_t v291;
  unsigned __int8 v292;
  unsigned __int8 v293;
  double v294;
  uint64_t i;
  uint64_t v296;
  double v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  unsigned __int32 v319;
  uint64_t *v320;
  unsigned __int32 v321;
  uint64_t *v323;
  const md::LabelPoint *v324;
  double v325;
  double v326;
  double v327;
  uint64_t v328;
  double v329;
  unint64_t v330;
  double v331;
  double v332;
  int v333;
  double v334;
  double v335;
  double v336;
  float v337;
  float32x2_t v338;
  unsigned int v339;
  float v340;
  float v341;
  float v342;
  unsigned int v343;
  float32_t v344;
  uint64_t v345;
  geo::read_write_lock *v346;
  const char *v347;
  malloc_zone_t *zone;
  uint64_t v349;
  geo::read_write_lock *v350;
  const char *v351;
  malloc_zone_t *v352;
  char *v353;
  uint64_t *v354;
  __n128 *v355;
  double v356;
  unsigned int v357;
  double v358;
  _QWORD *v359;
  _QWORD *v360;
  uint64_t *v361;
  uint64_t *v362;
  unint64_t *v363;
  uint64_t v364;
  double v365;
  long double v366;
  double v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  double v370;
  uint64_t v371;
  double v372;
  uint64_t v373;
  double v374;
  BOOL v375;
  __n128 *v376;
  float32x2_t *v377;
  float32x2_t v378;
  float64x2_t *v379;
  uint64_t *v380;
  float32x2_t v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  __int128 v387;
  __int128 v388;
  unint64_t v389;
  int v390;
  __int16 v391;
  char v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __n128 *v396;
  __n128 *v397;
  uint64_t v398;
  uint64_t v399;
  double v400;
  std::__shared_weak_count *v401;
  __int128 v402;
  unint64_t v403;
  int v404;
  __int16 v405;
  char v406;

  v10 = (uint64_t *)a2;
  v353 = md::LineLabelFeature::roadMetricsForZ((md::LineLabelFeature *)a1, (int)*(float *)(a2 + 472), *(const md::LabelLayoutContext **)(a2 + 432));
  if (!v353)
    return;
  v354 = a1;
  v12 = (unsigned __int8 *)a1[24];
  v362 = a1 + 24;
  v13 = atomic_load(v12 + 80);
  if ((v13 & 1) != 0)
    md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v12);
  v379 = (float64x2_t *)(v10 + 163);
  v14 = *(double *)(v10[29] + 56) * *((float *)v10 + 122);
  v15 = (int)*((float *)v10 + 118);
  v377 = a3;
  v380 = v10;
  v370 = v14;
  v355 = a4;
  if ((*(unsigned int (**)(uint64_t *))(*v354 + 264))(v354) == 3)
  {
    if (v15 >= 0x17)
      v16 = 23;
    else
      v16 = v15;
    v17 = v354;
  }
  else
  {
    v32 = *v362;
    if (v15 >= 0x17)
      v16 = 23;
    else
      v16 = v15;
    v33 = atomic_load((unsigned __int8 *)(v32 + 224 + v16));
    if (v33 == 254)
    {
      if (*(_BYTE *)(v32 + 289))
        v34 = 24;
      else
        v34 = 5;
      v35 = *(unsigned __int8 **)(v32 + 128);
      v36 = *(_QWORD *)(v32 + 136) - (_QWORD)v35;
      if (v36)
      {
        v37 = 0;
        v38 = v36 / 112;
        if (v38 <= 1)
          v39 = 1;
        else
          v39 = v38;
        v33 = -1;
        v40 = 1000.0;
        v17 = v354;
        while (1)
        {
          v41 = *v35;
          v35 += 112;
          v42 = v16 - v41;
          if ((_DWORD)v16 == v41)
            break;
          if (v42 >= 0)
            v43 = v42;
          else
            v43 = -v42;
          if (v43 <= v34)
          {
            v44 = (float)v42;
            if (v42 < 0)
              v44 = (float)v42 * -0.8;
            if (v44 < v40)
              v33 = v37;
            v40 = fminf(v44, v40);
          }
          if (v39 == ++v37)
            goto LABEL_163;
        }
        v33 = v37;
      }
      else
      {
        v33 = -1;
        v17 = v354;
      }
LABEL_163:
      atomic_store(v33, (unsigned __int8 *)(v32 + 224 + v16));
      if ((v33 & 0x80000000) != 0)
        goto LABEL_166;
    }
    else
    {
      v33 = (char)v33;
      v17 = v354;
      if ((char)v33 < 0)
        goto LABEL_166;
    }
    v133 = *(_QWORD *)(v32 + 128);
    if (!v133 || *(unsigned __int8 *)(v133 + 112 * v33) < 8u)
      goto LABEL_166;
  }
  v18 = *v362;
  v19 = *v362 + 224;
  v20 = atomic_load((unsigned __int8 *)(v19 + v16));
  if (v20 == 254)
  {
    if (*(_BYTE *)(v18 + 289))
      v21 = 24;
    else
      v21 = 5;
    v22 = *(unsigned __int8 **)(v18 + 128);
    v23 = *(_QWORD *)(v18 + 136) - (_QWORD)v22;
    if (v23)
    {
      v24 = 0;
      v25 = v23 / 112;
      if (v25 <= 1)
        v26 = 1;
      else
        v26 = v25;
      v20 = -1;
      v27 = 1000.0;
      while (1)
      {
        v28 = *v22;
        v22 += 112;
        v29 = v16 - v28;
        if ((_DWORD)v16 == v28)
          break;
        if (v29 >= 0)
          v30 = v29;
        else
          v30 = -v29;
        if (v30 <= v21)
        {
          v31 = (float)v29;
          if (v29 < 0)
            v31 = (float)v29 * -0.8;
          if (v31 < v27)
            v20 = v24;
          v27 = fminf(v31, v27);
        }
        if (v26 == ++v24)
          goto LABEL_58;
      }
      v20 = v24;
    }
    else
    {
      v20 = -1;
    }
LABEL_58:
    atomic_store(v20, (unsigned __int8 *)(v19 + v16));
    if ((v20 & 0x80000000) == 0)
    {
LABEL_59:
      v45 = *(_QWORD *)(v18 + 128);
      if (v45)
      {
        v46 = v45 + 112 * v20;
        v15 = *(_QWORD *)(v46 + 80);
        v47 = *((float *)v10 + 44);
        v48 = 0.5;
        a3[13].f32[0] = fabsf(v47 + v47) * 0.5;
        v363 = (unint64_t *)(v46 + 80);
        v360 = (_QWORD *)(v46 + 88);
        if (*(_QWORD *)(v46 + 88) != v15)
        {
          v4 = 0;
          v368 = (uint64_t)(v10 + 55);
          v49 = 1.0;
          do
          {
            v50 = *(std::__shared_weak_count **)(*v362 + 8);
            if (!v50)
              goto LABEL_389;
            v364 = a4->n128_i32[1];
            v6 = *(std::__shared_weak_count **)*v362;
            v51 = std::__shared_weak_count::lock(v50);
            if (!v51)
              goto LABEL_389;
            v5 = (unint64_t)v51;
            v52 = 0;
            v53 = *(_QWORD *)(v15 + 8 * v4);
            if (*(_QWORD *)(v53 + 16) == *(_QWORD *)(v53 + 8))
              v54 = 0;
            else
              v54 = *(_BYTE **)(v53 + 8);
            v369 = v51;
            if (!v54[8])
              v52 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v54 + 16))(*(_QWORD *)v54) << 16) - 0x10000;
            v371 = v4;
            v55 = (unint64_t *)(v5 + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
            shared_owners_high = HIDWORD(v6[10].__shared_owners_);
            if (*(_QWORD *)(v53 + 16) == *(_QWORD *)(v53 + 8))
              v58 = 0;
            else
              v58 = *(unsigned __int8 **)(v53 + 8);
            do
              v59 = __ldaxr(v55);
            while (__stlxr(v59 - 1, v55));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
              std::__shared_weak_count::__release_weak(v369);
            }
            v60 = (const md::LabelPoint *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v58 + 24))(*(_QWORD *)v58, (uint64_t)(int)v52 >> 16);
            labelPointToWorldPoint(v60, (const md::LabelLayoutContext *)*((unsigned __int8 *)v10 + 448), v14);
            v365 = v61;
            v400 = v61;
            v401 = *(std::__shared_weak_count **)&v62;
            v372 = v62;
            v374 = v63;
            *(double *)&v402 = v63;
            isDistanceClipped = md::LabelLayoutContext::isDistanceClipped(v368, (uint64_t)&v400);
            if (!isDistanceClipped)
            {
              v7 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v365), v379[2], v372), v379[4], v374), v49/ (*((double *)v10 + 178)+ *((double *)v10 + 166) * v365+ *((double *)v10 + 170) * v372+ *((double *)v10 + 174) * v374)));
              v377[1] = v7;
              ggl::DebugConsole::drawSymbol(v377, 3);
            }
            v65 = v7;
            v66 = isDistanceClipped;
            if (v6)
            {
              while (1)
              {
                _ZF = shared_owners_high != HIDWORD(v6[10].__shared_owners_) || v58 == 0;
                if (_ZF || (v52 & 0x80000000) != 0)
                {
                  v7 = v65;
                  isDistanceClipped = v66;
                  goto LABEL_153;
                }
                v375 = v66;
                v68 = WORD1(v52);
                v373 = v52;
                LODWORD(v69) = (__int16)v52;
                LODWORD(v5) = 1;
                v70 = WORD1(v52);
                LODWORD(v71) = (__int16)v52;
                v72 = v58;
                while (1)
                {
                  v73 = v72[8];
                  v74 = v72[8] ? v5 : -(int)v5;
                  v5 = v74 + v70;
                  if ((int)(v74 + v70) >= 0)
                    break;
                  v75 = v5 + 1;
LABEL_94:
                  if (v73)
                    v5 = v75;
                  else
                    v5 = -v75;
                  v76 = *(_QWORD *)(v53 + 8);
                  if (!v76 || (v71 = (v71 + 1), (*(_QWORD *)(v53 + 16) - v76) >> 4 <= v71))
                  {
                    v7 = v65;
                    isDistanceClipped = v375;
                    v10 = v380;
                    goto LABEL_153;
                  }
                  v70 = 0;
                  v72 = (unsigned __int8 *)(v76 + 16 * v71);
                  if (!*(_BYTE *)(v76 + 16 * v71 + 8))
                    v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v72 + 16))(*(_QWORD *)v72) - 1;
                }
                if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v72 + 16))(*(_QWORD *)v72) <= v5)
                  break;
                v77 = *(_QWORD *)(*(_QWORD *)(v53 + 8) + 16 * (__int16)v71);
                v78 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 24))(v77, (__int16)v5);
                v79 = v78;
                v10 = v380;
                if (*((_BYTE *)v380 + 448))
                {
                  if (*(_BYTE *)(v78 + 45))
                    v80 = 1;
                  else
                    v80 = *(_BYTE *)(v78 + 46) == 0;
                  if (!v80)
                  {
                    v81 = *(double *)v78;
                    v82 = *(double *)(v78 + 8);
                    v83 = *(double *)(v78 + 16);
                    v84 = sqrt(v81 * v81 + v82 * v82);
                    v85 = atan2(v83, v84 * 0.996647189);
                    v86 = v82;
                    v49 = 1.0;
                    v366 = atan2(v86, v81);
                    v87 = __sincos_stret(v85);
                    v88 = v84 + v87.__cosval * v87.__cosval * -42697.6727 * v87.__cosval;
                    v14 = v370;
                    v89 = atan2(v83 + v87.__sinval * v87.__sinval * 42841.3115 * v87.__sinval, v88);
                    v90 = tan(v89 * 0.5 + 0.785398163);
                    v91 = log(v90);
                    v92.f64[0] = v366;
                    v92.f64[1] = v91;
                    __asm { FMOV            V1.2D, #0.5 }
                    *(float64x2_t *)(v79 + 24) = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v92);
                    *(_BYTE *)(v79 + 45) = 1;
                  }
                  v97 = *(double *)(v79 + 24);
                  v96 = *(double *)(v79 + 32);
                  v98 = *(float *)(v79 + 40);
                  if (v98 == 3.4028e38)
                    v98 = 0.0;
                  v99 = v14 * v98;
                }
                else
                {
                  if (*(_BYTE *)(v78 + 44))
                  {
                    v101 = *(double *)v78;
                    v100 = *(double *)(v78 + 8);
                    v102 = *(double *)(v78 + 16);
                  }
                  else
                  {
                    v103 = *(double *)(v78 + 24) * 6.28318531;
                    v104 = exp(*(double *)(v78 + 32) * 6.28318531 + -3.14159265);
                    v105 = atan(v104) * 2.0 + -1.57079633;
                    v106 = fmod(v103, 6.28318531);
                    v107 = fmod(v106 + 6.28318531, 6.28318531) + -3.14159265;
                    v108 = __sincos_stret(v105);
                    v109 = 6378137.0 / sqrt(v108.__sinval * v108.__sinval * -0.00669437999 + 1.0);
                    v110 = __sincos_stret(v107);
                    v101 = v109 * v108.__cosval * v110.__cosval;
                    v100 = v109 * v108.__cosval * v110.__sinval;
                    v49 = 1.0;
                    *(double *)v79 = v101;
                    *(double *)(v79 + 8) = v100;
                    v102 = v108.__sinval * 0.99330562 * v109;
                    *(double *)(v79 + 16) = v102;
                    *(_BYTE *)(v79 + 44) = 1;
                  }
                  v111 = v101 * 2.45817226e-14;
                  v112 = v100 * 2.45817226e-14;
                  v113 = v102 * 2.4747391e-14;
                  v114 = sqrt(v111 * v111 + v112 * v112 + v113 * v113);
                  v115 = *(float *)(v79 + 40);
                  if (v115 == 3.4028e38)
                    v115 = 0.0;
                  v116 = v14 * v115 / v114;
                  v97 = v101 + v116 * v111;
                  v96 = v100 + v116 * v112;
                  v99 = v102 + v116 * v113;
                }
                v356 = v99;
                v358 = v97;
                *(double *)&v393 = v97;
                *((double *)&v393 + 1) = v96;
                v367 = v96;
                *(double *)&v394 = v99;
                v117 = md::LabelLayoutContext::isDistanceClipped(v368, (uint64_t)&v393);
                if (!v117)
                {
                  v118 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v358), v379[2], v367), v379[4], v356), v49/ (*((double *)v380 + 178)+ *((double *)v380 + 166) * v358+ *((double *)v380 + 170) * v367+ *((double *)v380 + 174) * v356)));
                  *(float32x2_t *)&v387 = v118;
                  if (!v375)
                  {
                    if (v371 == v364)
                    {
                      v119 = 0;
                      v120 = v355->n128_u32[2];
                      if (v120 == (_DWORD)v69)
                        v121 = -1;
                      else
                        v121 = 0;
                      if (v120 == (_DWORD)v69)
                        v122 = 0;
                      else
                        v122 = -1;
                    }
                    else
                    {
                      v122 = 0;
                      v121 = 0;
                      v119 = -1;
                    }
                    v377[12].i8[0] = v121;
                    v377[12].i8[1] = v119;
                    v377[12].i8[2] = v122;
                    v377[12].i8[3] = -1;
                    v377[1] = v65;
                    ggl::DebugConsole::drawLine((uint64_t)v377, (float *)&v387);
                  }
                  v65 = v118;
                }
                if (shared_owners_high != HIDWORD(v6[10].__shared_owners_))
                {
                  v58 = 0;
                  goto LABEL_151;
                }
                v123 = 1;
                while (2)
                {
                  v124 = v58[8];
                  if (v58[8])
                    v125 = v123;
                  else
                    v125 = -v123;
                  v126 = v125 + v68;
                  if ((int)(v125 + v68) < 0)
                  {
                    v127 = v126 + 1;
                    goto LABEL_137;
                  }
                  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v58 + 16))(*(_QWORD *)v58) <= (unint64_t)v126)
                  {
                    v127 = v126 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v58 + 16))(*(_QWORD *)v58);
                    v124 = v58[8];
LABEL_137:
                    if (v124)
                      v123 = v127;
                    else
                      v123 = -v127;
                    v128 = *(_QWORD *)(v53 + 8);
                    if (!v128 || (v69 = (v69 + 1), (*(_QWORD *)(v53 + 16) - v128) >> 4 <= v69))
                    {
                      v58 = 0;
                      goto LABEL_150;
                    }
                    v68 = 0;
                    v58 = (unsigned __int8 *)(v128 + 16 * v69);
                    if (!*(_BYTE *)(v128 + 16 * v69 + 8))
                      v68 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v58 + 16))(*(_QWORD *)v58) - 1;
                    continue;
                  }
                  break;
                }
                v129 = v69;
                v130 = (unsigned __int16)v69 | ((unsigned __int16)v126 << 16);
                v131 = *(_QWORD *)(v53 + 8);
                if ((*(_QWORD *)(v53 + 16) - v131) >> 4 <= (unint64_t)v129)
                  v58 = 0;
                else
                  v58 = (unsigned __int8 *)(v131 + 16 * v129);
                v373 = v130;
LABEL_150:
                v10 = v380;
LABEL_151:
                v66 = v117;
                v52 = v373;
              }
              v75 = v5 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v72 + 16))(*(_QWORD *)v72);
              v73 = v72[8];
              goto LABEL_94;
            }
LABEL_153:
            a3 = v377;
            a4 = v355;
            if (!isDistanceClipped)
            {
              v377[1] = v7;
              ggl::DebugConsole::drawSymbol(v377, 4);
            }
            do
              v132 = __ldaxr(v55);
            while (__stlxr(v132 - 1, v55));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
              std::__shared_weak_count::__release_weak(v369);
            }
            v4 = v371 + 1;
            v15 = *v363;
          }
          while (v371 + 1 < (unint64_t)((uint64_t)(*v360 - *v363) >> 3));
          v47 = *((float *)v10 + 44);
          v48 = 0.5;
        }
        a3[13].f32[0] = fabsf(v47) * v48;
        v17 = v354;
      }
    }
  }
  else
  {
    v20 = (char)v20;
    if (((char)v20 & 0x80000000) == 0)
      goto LABEL_59;
  }
LABEL_166:
  v10 = (uint64_t *)v17[28];
  v134 = v17 + 29;
  if (v10 != v17 + 29)
  {
    v15 = 1 << (int)*((float *)v380 + 118);
    v4 = 255;
    v5 = 3;
    v6 = (std::__shared_weak_count *)v380;
    do
    {
      v135 = v134;
      (*(void (**)(uint64_t, uint64_t *, float32x2_t *))(*(_QWORD *)v10[5] + 184))(v10[5], v380, a3);
      v136 = *((_DWORD *)v10 + 8);
      v137 = a4->n128_u32[0];
      a3[12].i8[0] = 0;
      v138 = v136 == v137;
      if (v136 == v137)
        v139 = 0;
      else
        v139 = -1;
      a3[12].i8[1] = v139;
      if (v138)
        v140 = -1;
      else
        v140 = 0;
      a3[12].i8[2] = v140;
      a3[12].i8[3] = -1;
      v141 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10[5] + 56))(v10[5]);
      labelPointToWorldPoint(v141, (const md::LabelLayoutContext *)*((unsigned __int8 *)v380 + 448), v14);
      v145 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v142), v379[2], v143), v379[4], v144), 1.0/ (*((double *)v380 + 178)+ *((double *)v380 + 166) * v142+ *((double *)v380 + 170) * v143+ *((double *)v380 + 174) * v144)));
      if (v136 == a4->n128_u32[0])
        v146 = 4.0;
      else
        v146 = 2.0;
      a3[13].f32[0] = fabsf(v146 * *((float *)v380 + 44)) * 0.5;
      a3[1] = v145;
      if (*(_BYTE *)(v10[5] + 9) == 4)
        v147 = 1;
      else
        v147 = 3;
      ggl::DebugConsole::drawSymbol(a3, v147);
      if ((v15 & *(_DWORD *)(v10[5] + 12)) != 0)
        ggl::DebugConsole::drawSymbol(a3, 0);
      v148 = (uint64_t *)v10[1];
      v134 = v135;
      if (v148)
      {
        do
        {
          v149 = v148;
          v148 = (uint64_t *)*v148;
        }
        while (v148);
      }
      else
      {
        do
        {
          v149 = (uint64_t *)v10[2];
          _ZF = *v149 == (_QWORD)v10;
          v10 = v149;
        }
        while (!_ZF);
      }
      v10 = v149;
    }
    while (v149 != v135);
  }
  v150 = *(std::__shared_weak_count **)(*v362 + 8);
  if (!v150)
    goto LABEL_389;
  v15 = *(_QWORD *)*v362;
  v151 = std::__shared_weak_count::lock(v150);
  if (!v151)
    goto LABEL_389;
  v385 = v15;
  v386 = v151;
  v10 = v380;
  v152 = (int)*((float *)v380 + 118);
  v153 = (unsigned __int8 *)*v362;
  if (v152 >= 0x17)
    v154 = 23;
  else
    v154 = v152;
  v155 = atomic_load(&v153[v154 + 224]);
  v354 = v134;
  if (v155 == 254)
  {
    if (v153[289])
      v156 = 24;
    else
      v156 = 5;
    v157 = (unsigned __int8 *)*((_QWORD *)v153 + 16);
    v158 = *((_QWORD *)v153 + 17) - (_QWORD)v157;
    if (v158)
    {
      v159 = 0;
      v160 = v158 / 112;
      if (v160 <= 1)
        v161 = 1;
      else
        v161 = v160;
      v155 = -1;
      v162 = 1000.0;
      while (1)
      {
        v164 = *v157;
        v157 += 112;
        v163 = v164;
        if ((_DWORD)v154 == v164)
          break;
        v165 = v154 - v163;
        if (v165 >= 0)
          v166 = v165;
        else
          v166 = -v165;
        if (v166 <= v156)
        {
          v167 = (float)v165;
          if (v165 < 0)
            v167 = (float)v165 * -0.8;
          if (v167 < v162)
            v155 = v159;
          v162 = fminf(v167, v162);
        }
        if (v161 == ++v159)
          goto LABEL_218;
      }
      v155 = v159;
    }
    else
    {
      v155 = -1;
    }
LABEL_218:
    atomic_store(v155, &v153[v154 + 224]);
    if ((v155 & 0x80000000) != 0)
      goto LABEL_298;
  }
  else
  {
    v155 = (char)v155;
    if ((char)v155 < 0)
      goto LABEL_298;
  }
  v168 = *((_QWORD *)v153 + 16);
  if (!v168)
    goto LABEL_298;
  v169 = v168 + 112 * v155;
  v4 = *(_QWORD *)(v169 + 80);
  v361 = (uint64_t *)(v169 + 80);
  v359 = (_QWORD *)(v169 + 88);
  if (*(_QWORD *)(v169 + 88) == v4)
    goto LABEL_298;
  v170 = 0;
  v357 = v152;
  v171 = (unsigned __int8 *)&kAttributeDrawOptions;
  v172 = 1.0;
  md::LabelLine::attributes((uint64_t *)&v396, *(_QWORD **)v4, &v385, v152);
  while (2)
  {
    a4 = v396;
    v173 = v397;
    v376 = v397;
    if (v396 == v397)
    {
      if (v396)
        goto LABEL_297;
      goto LABEL_222;
    }
    do
    {
      v5 = a4->n128_u8[0];
      v15 = v171[12 * v5];
      if ((v15 - 1) <= 1)
      {
        v174 = v171;
        v175 = &v171[12 * v5];
        a3[12].i16[0] = *(_WORD *)(v175 + 1);
        a3[12].i8[2] = v175[3];
        a3[12].i8[3] = -1;
        v176 = *(_QWORD *)(v4 + 8 * v170);
        v178 = v385;
        v177 = v386;
        v400 = *(double *)&v385;
        v401 = v386;
        if (v386)
        {
          p_shared_owners = (unint64_t *)&v386->__shared_owners_;
          do
            v180 = __ldxr(p_shared_owners);
          while (__stxr(v180 + 1, p_shared_owners));
        }
        v181 = a4[1].n128_u64[1];
        *(_QWORD *)&v402 = v176;
        v403 = v181;
        v404 = *(_DWORD *)(v178 + 252);
        v183 = v176 + 8;
        v182 = *(_QWORD *)(v176 + 8);
        v184 = (*(_QWORD *)(v183 + 8) - v182) >> 4;
        v185 = v182 + 16 * (__int16)v181;
        if (v184 <= (__int16)v181)
          v185 = 0;
        *((_QWORD *)&v402 + 1) = v185;
        v394 = 0u;
        v395 = 0u;
        v393 = 0u;
        DWORD2(v395) = 2139095039;
        LabelPoint = md::LabelLinePosition::getLabelPoint((md::LabelLinePosition *)&v400, (md::LabelPoint *)&v393);
        v187 = 0;
        if (LabelPoint)
        {
          if (*((_BYTE *)v380 + 448))
          {
            if (BYTE13(v395) || !BYTE14(v395))
            {
              v198 = *((double *)&v394 + 1);
              v199 = *(double *)&v395;
            }
            else
            {
              v188 = v393;
              v189 = *(double *)&v394;
              v190 = sqrt(*(double *)&v393 * *(double *)&v393 + *((double *)&v393 + 1) * *((double *)&v393 + 1));
              v191 = atan2(*(long double *)&v394, v190 * 0.996647189);
              v192 = atan2(*((long double *)&v188 + 1), *(long double *)&v188);
              v193 = __sincos_stret(v191);
              v194 = v189 + v193.__sinval * v193.__sinval * 42841.3115 * v193.__sinval;
              v172 = 1.0;
              v195 = atan2(v194, v190 + v193.__cosval * v193.__cosval * -42697.6727 * v193.__cosval);
              v196 = tan(v195 * 0.5 + 0.785398163);
              v197 = log(v196);
              v198 = v192 * 0.159154943 + 0.5;
              v199 = v197 * 0.159154943 + 0.5;
              *((double *)&v394 + 1) = v198;
              *(double *)&v395 = v199;
              BYTE13(v395) = 1;
            }
            v203 = *((float *)&v395 + 2);
            if (*((float *)&v395 + 2) == 3.4028e38)
              v203 = 0.0;
            v204 = v14 * v203;
          }
          else
          {
            if (BYTE12(v395))
            {
              v200 = *((double *)&v393 + 1);
              v201 = *(double *)&v393;
              v202 = *(double *)&v394;
            }
            else
            {
              v205 = *((double *)&v394 + 1) * 6.28318531;
              v206 = exp(*(double *)&v395 * 6.28318531 + -3.14159265);
              v207 = atan(v206) * 2.0 + -1.57079633;
              v208 = fmod(v205, 6.28318531);
              v209 = fmod(v208 + 6.28318531, 6.28318531) + -3.14159265;
              v210 = __sincos_stret(v207);
              v211 = 6378137.0 / sqrt(v172 + v210.__sinval * v210.__sinval * -0.00669437999);
              v212 = __sincos_stret(v209);
              v201 = v211 * v210.__cosval * v212.__cosval;
              v200 = v211 * v210.__cosval * v212.__sinval;
              *(double *)&v393 = v201;
              *((double *)&v393 + 1) = v200;
              v202 = v210.__sinval * 0.99330562 * v211;
              *(double *)&v394 = v202;
              BYTE12(v395) = 1;
            }
            v213 = v201 * 2.45817226e-14;
            v214 = v200 * 2.45817226e-14;
            v215 = v202 * 2.4747391e-14;
            v216 = sqrt(v213 * v213 + v214 * v214 + v215 * v215);
            v217 = *((float *)&v395 + 2);
            if (*((float *)&v395 + 2) == 3.4028e38)
              v217 = 0.0;
            v218 = v14 * v217 / v216;
            v198 = v201 + v218 * v213;
            v199 = v200 + v218 * v214;
            v204 = v202 + v218 * v215;
          }
          v187 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v198), v379[2], v199), v379[4], v204), v172/ (*((double *)v380 + 178)+ *((double *)v380 + 166) * v198+ *((double *)v380 + 170) * v199+ *((double *)v380 + 174) * v204)));
        }
        v219 = a4->n128_f64[1];
        v220 = a4[1].n128_f64[0];
        v221 = *(_QWORD *)(v4 + 8 * v170);
        if (a4->n128_u8[2])
          v222 = a4 + 2;
        else
          v222 = (__n128 *)((char *)a4 + 24);
        *(_QWORD *)&v387 = v178;
        *((_QWORD *)&v387 + 1) = v177;
        if (v177)
        {
          v223 = (unint64_t *)&v177->__shared_owners_;
          do
            v224 = __ldxr(v223);
          while (__stxr(v224 + 1, v223));
        }
        v225 = v222->n128_u64[0];
        *(_QWORD *)&v388 = v221;
        v389 = v225;
        v390 = *(_DWORD *)(v178 + 252);
        v227 = v221 + 8;
        v226 = *(_QWORD *)(v221 + 8);
        v228 = (*(_QWORD *)(v227 + 8) - v226) >> 4;
        v229 = v226 + 16 * (__int16)v225;
        if (v228 <= (__int16)v225)
          v229 = 0;
        *((_QWORD *)&v388 + 1) = v229;
        v383 = 0u;
        v384 = 0u;
        v382 = 0u;
        DWORD2(v384) = 2139095039;
        v381 = 0;
        v10 = v380;
        v230 = md::LabelLinePosition::getLabelPoint((md::LabelLinePosition *)&v387, (md::LabelPoint *)&v382);
        v231 = 0;
        if (v230)
        {
          if (*((_BYTE *)v380 + 448))
          {
            if (BYTE13(v384) || !BYTE14(v384))
            {
              v243 = *((double *)&v383 + 1);
              v244 = *(double *)&v384;
            }
            else
            {
              v232 = v382;
              v233 = *(double *)&v383;
              v234 = sqrt(*(double *)&v382 * *(double *)&v382 + *((double *)&v382 + 1) * *((double *)&v382 + 1));
              v235 = atan2(*(long double *)&v383, v234 * 0.996647189);
              v236 = atan2(*((long double *)&v232 + 1), *(long double *)&v232);
              v237 = __sincos_stret(v235);
              v238 = v233 + v237.__sinval * v237.__sinval * 42841.3115 * v237.__sinval;
              v172 = 1.0;
              v239 = v234 + v237.__cosval * v237.__cosval * -42697.6727 * v237.__cosval;
              v14 = v370;
              v240 = atan2(v238, v239);
              v241 = tan(v240 * 0.5 + 0.785398163);
              v242 = log(v241);
              v243 = v236 * 0.159154943 + 0.5;
              v244 = v242 * 0.159154943 + 0.5;
              *((double *)&v383 + 1) = v243;
              *(double *)&v384 = v244;
              BYTE13(v384) = 1;
            }
            v248 = *((float *)&v384 + 2);
            if (*((float *)&v384 + 2) == 3.4028e38)
              v248 = 0.0;
            v249 = v14 * v248;
          }
          else
          {
            if (BYTE12(v384))
            {
              v245 = *((double *)&v382 + 1);
              v246 = *(double *)&v382;
              v247 = *(double *)&v383;
            }
            else
            {
              v250 = *((double *)&v383 + 1) * 6.28318531;
              v251 = exp(*(double *)&v384 * 6.28318531 + -3.14159265);
              v252 = atan(v251) * 2.0 + -1.57079633;
              v253 = fmod(v250, 6.28318531);
              v254 = fmod(v253 + 6.28318531, 6.28318531) + -3.14159265;
              v255 = __sincos_stret(v252);
              v256 = 6378137.0 / sqrt(v255.__sinval * v255.__sinval * -0.00669437999 + 1.0);
              v257 = __sincos_stret(v254);
              v246 = v256 * v255.__cosval * v257.__cosval;
              v245 = v256 * v255.__cosval * v257.__sinval;
              *(double *)&v382 = v246;
              *((double *)&v382 + 1) = v245;
              v247 = v255.__sinval * 0.99330562 * v256;
              v172 = 1.0;
              *(double *)&v383 = v247;
              BYTE12(v384) = 1;
            }
            v258 = v246 * 2.45817226e-14;
            v259 = v245 * 2.45817226e-14;
            v260 = v247 * 2.4747391e-14;
            v261 = sqrt(v258 * v258 + v259 * v259 + v260 * v260);
            v262 = *((float *)&v384 + 2);
            if (*((float *)&v384 + 2) == 3.4028e38)
              v262 = 0.0;
            v263 = v14 * v262 / v261;
            v243 = v246 + v263 * v258;
            v244 = v245 + v263 * v259;
            v249 = v247 + v263 * v260;
          }
          v231 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v243), v379[2], v244), v379[4], v249), v172/ (*((double *)v380 + 178)+ *((double *)v380 + 166) * v243+ *((double *)v380 + 170) * v244+ *((double *)v380 + 174) * v249)));
          v381 = v231;
        }
        if ((_DWORD)v15 == 2)
        {
          if (LabelPoint)
          {
            v377[1] = v187;
            ggl::DebugConsole::drawSymbol(v377, *(_DWORD *)&v174[12 * v5 + 8]);
          }
          if (v220 - v219 == 0.0)
            v264 = 0;
          else
            v264 = v230;
          a3 = v377;
          if (v264 == 1)
          {
            v377[1] = v231;
            ggl::DebugConsole::drawSymbol(v377, *(_DWORD *)&v174[12 * v5 + 8]);
          }
        }
        else
        {
          v265 = LabelPoint & v230;
          a3 = v377;
          if (v265 == 1)
          {
            v377[13].f32[0] = fabsf(*((float *)v380 + 44) * 5.0) * 0.5;
            v377[1] = v187;
            ggl::DebugConsole::drawLine((uint64_t)v377, (float *)&v381);
            v377[13].f32[0] = fabsf(*((float *)v380 + 44)) * 0.5;
          }
        }
        if (!v177)
          goto LABEL_289;
        v266 = (unint64_t *)&v177->__shared_owners_;
        do
          v267 = __ldaxr(v266);
        while (__stlxr(v267 - 1, v266));
        if (!v267)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
          v268 = v401;
          if (v401)
            goto LABEL_290;
        }
        else
        {
LABEL_289:
          v268 = v401;
          if (v401)
          {
LABEL_290:
            v269 = (unint64_t *)&v268->__shared_owners_;
            do
              v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v268);
            }
          }
        }
        v171 = v174;
        v173 = v376;
      }
      a4 += 3;
    }
    while (a4 != v173);
    a4 = v396;
    if (v396)
LABEL_297:
      (*(void (**)(uint64_t, __n128 *, uint64_t))(*(_QWORD *)v399 + 40))(v399, a4, v398 - (_QWORD)a4);
LABEL_222:
    ++v170;
    v4 = *v361;
    if (v170 < (*v359 - *v361) >> 3)
    {
      md::LabelLine::attributes((uint64_t *)&v396, *(_QWORD **)(v4 + 8 * v170), &v385, v357);
      continue;
    }
    break;
  }
LABEL_298:
  v6 = v386;
  if (v386)
  {
    v271 = (unint64_t *)&v386->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v273 = *(std::__shared_weak_count **)(*v362 + 8);
  if (!v273 || (v274 = std::__shared_weak_count::lock(v273)) == 0)
  {
LABEL_389:
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_390:
    {
      v345 = operator new();
      *(_QWORD *)(v345 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v345 + 24) = "VectorKitLabels";
      *(_OWORD *)(v345 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v345 = &off_1E42B5668;
      *(_QWORD *)(v345 + 8) = "VectorKitLabels";
      *(_OWORD *)(v345 + 72) = 0u;
      *(_OWORD *)(v345 + 88) = 0u;
      *(_OWORD *)(v345 + 104) = 0u;
      *(_OWORD *)(v345 + 120) = 0u;
      *(_OWORD *)(v345 + 136) = 0u;
      *(_OWORD *)(v345 + 152) = 0u;
      *(_OWORD *)(v345 + 168) = 0u;
      *(_OWORD *)(v345 + 184) = 0u;
      *(_OWORD *)(v345 + 200) = 0u;
      *(_OWORD *)(v345 + 216) = 0u;
      *(_OWORD *)(v345 + 232) = 0u;
      *(_QWORD *)(v345 + 248) = 0;
      *(_OWORD *)(v345 + 56) = 0u;
      v346 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v345 + 56), 0);
      if ((_DWORD)v346)
        geo::read_write_lock::logFailure(v346, (uint64_t)"initialization", v347);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v345 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v345 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      *(_QWORD *)(v4 + 2392) = v345;
      a3 = v377;
      v14 = v370;
    }
LABEL_336:
    *((_QWORD *)&v383 + 1) = *(_QWORD *)(v4 + 2392);
    v396 = 0;
    v397 = 0;
    v398 = 0;
    v293 = atomic_load((unsigned __int8 *)v5);
    {
      v349 = operator new();
      *(_QWORD *)(v349 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v349 + 24) = "VectorKitLabels";
      *(_OWORD *)(v349 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v349 = &off_1E42B5668;
      *(_QWORD *)(v349 + 8) = "VectorKitLabels";
      *(_OWORD *)(v349 + 72) = 0u;
      *(_OWORD *)(v349 + 88) = 0u;
      *(_OWORD *)(v349 + 104) = 0u;
      *(_OWORD *)(v349 + 120) = 0u;
      *(_OWORD *)(v349 + 136) = 0u;
      *(_OWORD *)(v349 + 152) = 0u;
      *(_OWORD *)(v349 + 168) = 0u;
      *(_OWORD *)(v349 + 184) = 0u;
      *(_OWORD *)(v349 + 200) = 0u;
      *(_OWORD *)(v349 + 216) = 0u;
      *(_OWORD *)(v349 + 232) = 0u;
      *(_QWORD *)(v349 + 248) = 0;
      *(_OWORD *)(v349 + 56) = 0u;
      v350 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v349 + 56), 0);
      if ((_DWORD)v350)
        geo::read_write_lock::logFailure(v350, (uint64_t)"initialization", v351);
      v352 = malloc_create_zone(0, 0);
      *(_QWORD *)(v349 + 48) = v352;
      malloc_set_zone_name(v352, "VectorKitLabels");
      *(_QWORD *)(v349 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      *(_QWORD *)(v4 + 2392) = v349;
      a3 = v377;
      v14 = v370;
    }
    v399 = *(_QWORD *)(v4 + 2392);
    md::LineLabelPlacer::populateBlocks(v362, (int)a4, (_QWORD *)v10[v15], (uint64_t *)&v382, &v396);
    a3[12].i32[0] = -16777216;
    v294 = COERCE_DOUBLE(vmul_n_f32((float32x2_t)0x41A0000041800000, *((float *)v380 + 44)));
    *(double *)&a3[4] = v294;
    v296 = *((_QWORD *)&v382 + 1);
    for (i = v382; i != v296; i += 216)
    {
      v297 = *(double *)(i + 8);
      if (v297 == 0.0
        || *(_DWORD *)(i + 48) != *(_DWORD *)(*(_QWORD *)&v297 + 252)
        || !*(_QWORD *)(i + 32)
        || *(__int16 *)(i + 42) < 0)
      {
        md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(i + 8), *(unsigned __int8 *)(i + 172), v294);
        v297 = *(double *)(i + 8);
      }
      v298 = *(std::__shared_weak_count **)(i + 16);
      v400 = v297;
      v401 = v298;
      if (v298)
      {
        v299 = (unint64_t *)&v298->__shared_owners_;
        do
          v300 = __ldxr(v299);
        while (__stxr(v300 + 1, v299));
      }
      v402 = *(_OWORD *)(i + 24);
      v403 = *(_QWORD *)(i + 40);
      v404 = *(_DWORD *)(i + 48);
      *(_QWORD *)&v395 = 0;
      v394 = 0u;
      v393 = 0u;
      DWORD2(v395) = 2139095039;
      WORD6(v395) = 0;
      BYTE14(v395) = 0;
      if (md::LabelLinePosition::getLabelPoint((md::LabelLinePosition *)&v400, (md::LabelPoint *)&v393))
      {
        labelPointToWorldPoint((const md::LabelPoint *)&v393, (const md::LabelLayoutContext *)*((unsigned __int8 *)v380 + 448), v14);
        a3[1] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v301), v379[2], v302), v379[4], v303), 1.0/ (*((double *)v380 + 178)+ *((double *)v380 + 166) * v301+ *((double *)v380 + 170) * v302+ *((double *)v380 + 174) * v303)));
        ggl::DebugConsole::drawSymbol(a3, 1);
      }
      md::LabelLinePosition::offsetDistance((md::LabelLinePosition *)&v400, 0, *(double *)(i + 184) - *(double *)(i + 176));
      v389 = 0;
      v387 = 0u;
      v388 = 0u;
      v390 = 2139095039;
      v391 = 0;
      v392 = 0;
      if (md::LabelLinePosition::getLabelPoint((md::LabelLinePosition *)&v400, (md::LabelPoint *)&v387))
      {
        labelPointToWorldPoint((const md::LabelPoint *)&v387, (const md::LabelLayoutContext *)*((unsigned __int8 *)v380 + 448), v14);
        a3[1] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v304), v379[2], v305), v379[4], v306), 1.0/ (*((double *)v380 + 178)+ *((double *)v380 + 166) * v304+ *((double *)v380 + 170) * v305+ *((double *)v380 + 174) * v306)));
        ggl::DebugConsole::drawSymbol(a3, 1);
      }
      v307 = v401;
      if (v401)
      {
        v308 = (unint64_t *)&v401->__shared_owners_;
        do
          v309 = __ldaxr(v308);
        while (__stlxr(v309 - 1, v308));
        if (!v309)
        {
          ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
          std::__shared_weak_count::__release_weak(v307);
        }
      }
    }
    a3[4] = vmul_n_f32((float32x2_t)0x4120000041000000, *((float *)v380 + 44));
    if (v396)
    {
      v397 = v396;
      (*(void (**)(uint64_t, __n128 *, uint64_t))(*(_QWORD *)v399 + 40))(v399, v396, v398 - (_QWORD)v396);
    }
    v310 = v382;
    if ((_QWORD)v382)
    {
      v311 = *((_QWORD *)&v382 + 1);
      v312 = v382;
      if (*((_QWORD *)&v382 + 1) != (_QWORD)v382)
      {
        do
        {
          v313 = *(std::__shared_weak_count **)(v311 - 200);
          if (v313)
          {
            v314 = (unint64_t *)&v313->__shared_owners_;
            do
              v315 = __ldaxr(v314);
            while (__stlxr(v315 - 1, v314));
            if (!v315)
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v313->__on_zero_shared)(v313, v312);
              std::__shared_weak_count::__release_weak(v313);
            }
          }
          v311 -= 216;
        }
        while (v311 != v310);
        v312 = v382;
      }
      *((_QWORD *)&v382 + 1) = v310;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v383 + 1) + 40))(*((_QWORD *)&v383 + 1), v312, v383 - v312);
    }
    goto LABEL_370;
  }
  v6 = v274;
  LODWORD(a4) = (int)*((float *)v10 + 118);
  v275 = *v362;
  if (a4 >= 0x17)
    v276 = 23;
  else
    v276 = a4;
  v277 = atomic_load((unsigned __int8 *)(v275 + 224 + v276));
  if (v277 == 254)
  {
    if (*(_BYTE *)(v275 + 289))
      v278 = 24;
    else
      v278 = 5;
    v279 = *(unsigned __int8 **)(v275 + 128);
    v280 = *(_QWORD *)(v275 + 136) - (_QWORD)v279;
    if (v280)
    {
      v281 = 0;
      v282 = v280 / 112;
      if (v282 <= 1)
        v283 = 1;
      else
        v283 = v282;
      v277 = -1;
      v284 = 1000.0;
      while (1)
      {
        v286 = *v279;
        v279 += 112;
        v285 = v286;
        if ((_DWORD)v276 == v286)
          break;
        v287 = v276 - v285;
        if (v287 >= 0)
          v288 = v287;
        else
          v288 = -v287;
        if (v288 <= v278)
        {
          v289 = (float)v287;
          if (v287 < 0)
            v289 = (float)v287 * -0.8;
          if (v289 < v284)
            v277 = v281;
          v284 = fminf(v289, v284);
        }
        if (v283 == ++v281)
          goto LABEL_332;
      }
      v277 = v281;
    }
    else
    {
      v277 = -1;
    }
LABEL_332:
    atomic_store(v277, (unsigned __int8 *)(v275 + 224 + v276));
    if ((v277 & 0x80000000) == 0)
    {
LABEL_333:
      v290 = *(_QWORD *)(v275 + 128);
      if (v290)
      {
        v291 = v290 + 112 * v277;
        v15 = v355->n128_i32[1];
        v10 = *(uint64_t **)(v291 + 80);
        if (v15 < (uint64_t)(*(_QWORD *)(v291 + 88) - (_QWORD)v10) >> 3)
        {
          v382 = 0uLL;
          *(_QWORD *)&v383 = 0;
          v4 = (uint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
          if ((v292 & 1) != 0)
            goto LABEL_336;
          goto LABEL_390;
        }
      }
    }
  }
  else
  {
    v277 = (char)v277;
    if (((char)v277 & 0x80000000) == 0)
      goto LABEL_333;
  }
LABEL_370:
  v316 = (unint64_t *)&v6->__shared_owners_;
  do
    v317 = __ldaxr(v316);
  while (__stlxr(v317 - 1, v316));
  if (!v317)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v318 = *v354;
  if (*v354)
  {
    v319 = v355->n128_u32[0];
    v320 = v354;
    do
    {
      v321 = *(_DWORD *)(v318 + 32);
      _CF = v321 >= v319;
      if (v321 >= v319)
        v323 = (uint64_t *)v318;
      else
        v323 = (uint64_t *)(v318 + 8);
      if (_CF)
        v320 = (uint64_t *)v318;
      v318 = *v323;
    }
    while (*v323);
    if (v320 != v354 && v319 >= *((_DWORD *)v320 + 8))
    {
      a3[12].i32[0] = -65536;
      a3[13].f32[0] = fabsf(*((float *)v380 + 44) * 4.0) * 0.5;
      v324 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v320[5] + 56))(v320[5]);
      labelPointToWorldPoint(v324, (const md::LabelLayoutContext *)*((unsigned __int8 *)v380 + 448), v14);
      v378 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v325), v379[2], v326), v379[4], v327), 1.0/ (*((double *)v380 + 178)+ *((double *)v380 + 166) * v325+ *((double *)v380 + 170) * v326+ *((double *)v380 + 174) * v327)));
      v328 = md::LabelPoint::mercatorPoint(v324);
      v329 = *(double *)v328;
      v330 = *(_QWORD *)(v328 + 8);
      v331 = 40075017.0;
      if (!*(_BYTE *)(*v362 + 290))
        v331 = 1.0;
      v332 = *(double *)v353 / v331;
      v333 = *((_DWORD *)v324 + 10);
      v401 = 0;
      *(_QWORD *)&v402 = 0;
      v400 = 0.0;
      *((double *)&v402 + 1) = v332 + v329;
      v403 = v330;
      v404 = v333;
      v405 = 256;
      v406 = 1;
      labelPointToWorldPoint((const md::LabelPoint *)&v400, (const md::LabelLayoutContext *)*((unsigned __int8 *)v380 + 448), v14);
      v337 = *((float *)v380 + 44);
      v338 = vsub_f32(vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v379[6], *v379, v334), v379[2], v335), v379[4], v336), 1.0/ (*((double *)v380 + 178)+ *((double *)v380 + 166) * v334+ *((double *)v380 + 170) * v335+ *((double *)v380 + 174) * v336))), v378);
      *(float *)&v339 = v378.f32[0] + (float)(v337 * 50.0);
      v340 = v378.f32[1] + (float)(v337 * 50.0);
      v341 = sqrtf(vaddv_f32(vmul_f32(v338, v338))) + *(float *)&v339;
      *(float *)&v393 = v341;
      *((float *)&v393 + 1) = v340;
      a3[1].i32[0] = v339;
      a3[1].f32[1] = v340;
      ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v393);
      v342 = v337 * 10.0;
      *(float *)&v343 = v340 - (float)(v337 * 10.0);
      *(_QWORD *)&v387 = __PAIR64__(v343, v339);
      v344 = v340 + v342;
      a3[1].i32[0] = v339;
      a3[1].f32[1] = v344;
      ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v387);
      *(_QWORD *)&v382 = __PAIR64__(v343, LODWORD(v341));
      a3[1].f32[0] = v341;
      a3[1].f32[1] = v344;
      ggl::DebugConsole::drawLine((uint64_t)a3, (float *)&v382);
    }
  }
}

void sub_19F842B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;

  v55 = *(_QWORD *)(v53 - 240);
  if (v55)
  {
    *(_QWORD *)(v53 - 232) = v55;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 - 216) + 40))(*(_QWORD *)(v53 - 216), v55, *(_QWORD *)(v53 - 224) - v55);
  }
  if (a45)
  {
    v56 = a46;
    v57 = a45;
    if (a46 != a45)
    {
      do
      {
        v58 = *(std::__shared_weak_count **)(v56 - 200);
        if (v58)
        {
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(p_shared_owners);
          while (__stlxr(v60 - 1, p_shared_owners));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v58->__on_zero_shared)(v58, v57);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v56 -= 216;
      }
      while (v56 != a45);
      v57 = a45;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a48 + 40))(a48, v57, a47 - v57);
  }
  v61 = (unint64_t *)&v52->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  _Unwind_Resume(exception_object);
}

void labelPointToWorldPoint(const md::LabelPoint *this, const md::LabelLayoutContext *a2, double a3)
{
  long double v4;
  long double v5;
  double v6;
  long double v7;
  double v8;
  __double2 v9;
  double v10;
  __double2 v11;

  if ((_BYTE)a2)
  {
    md::LabelPoint::mercatorPoint(this);
  }
  else
  {
    if (!*((_BYTE *)this + 44))
    {
      v4 = *((double *)this + 3) * 6.28318531;
      v5 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
      v6 = atan(v5) * 2.0 + -1.57079633;
      v7 = fmod(v4, 6.28318531);
      v8 = fmod(v7 + 6.28318531, 6.28318531) + -3.14159265;
      v9 = __sincos_stret(v6);
      v10 = 6378137.0 / sqrt(v9.__sinval * v9.__sinval * -0.00669437999 + 1.0);
      v11 = __sincos_stret(v8);
      *(double *)this = v10 * v9.__cosval * v11.__cosval;
      *((double *)this + 1) = v10 * v9.__cosval * v11.__sinval;
      *((double *)this + 2) = v9.__sinval * 0.99330562 * v10;
      *((_BYTE *)this + 44) = 1;
    }
    md::LabelPoint::geocentricNormal(this);
  }
}

uint64_t md::LineLabelFeature::containsPixel(uint64_t a1, uint64_t a2, float32x2_t *a3, float *a4, uint64_t a5)
{
  float32x2_t v5;
  double v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double *v35;
  std::__shared_weak_count *v36;
  double v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  double v41;
  _BYTE *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned __int16 v51;
  const md::LabelPoint *v52;
  double v53;
  double v54;
  double v55;
  BOOL isDistanceClipped;
  unsigned int v57;
  double v58;
  int v59;
  unint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  __int16 v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  long double v78;
  long double v79;
  long double v80;
  double v81;
  double v82;
  __double2 v83;
  long double v84;
  long double v85;
  long double v86;
  long double v87;
  float64x2_t v88;
  double v93;
  double v94;
  float v95;
  double v96;
  double v97;
  double v98;
  double v99;
  long double v100;
  long double v101;
  double v102;
  long double v103;
  double v104;
  __double2 v105;
  double v106;
  __double2 v107;
  double v108;
  double v109;
  double v110;
  double v111;
  float v112;
  double v113;
  BOOL v114;
  float32x2_t v115;
  __int32 v116;
  unsigned __int32 v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float v136;
  _QWORD *v137;
  float v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  const md::LabelPoint *v142;
  double v143;
  double v144;
  double v145;
  float32x2_t v146;
  float v147;
  _QWORD *v148;
  _QWORD *v149;
  _Unwind_Exception *v150;
  _Unwind_Exception *v151;
  uint64_t v152;
  float *v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  float32x2_t *v157;
  double v158;
  float64x2_t *v159;
  _QWORD *v160;
  uint64_t *v161;
  float v162;
  double v164;
  double v165;
  double v166;
  double v167;
  long double v168;
  double v169;
  double v170;
  double v171;
  unsigned __int16 v172;
  double v173;
  uint64_t v174;
  double v176;
  double v177;
  double v178;
  double v179;
  std::__shared_weak_count *v180;
  double v181;
  double v182;
  std::__shared_weak_count *v183;
  double v184;
  unsigned __int8 *v185;
  uint64_t v186;
  int v187;

  v9 = *(double *)(*(_QWORD *)(a2 + 232) + 56);
  v5.i32[0] = *(_DWORD *)(a2 + 488);
  v10 = (int)*(float *)(a2 + 472);
  v11 = *(unsigned __int8 **)(a1 + 192);
  v12 = atomic_load(v11 + 80);
  if ((v12 & 1) != 0)
    md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v11);
  v13 = *(_QWORD *)(a1 + 192);
  if (v10 >= 0x17)
    v14 = 23;
  else
    v14 = v10;
  v15 = atomic_load((unsigned __int8 *)(v13 + 224 + v14));
  if (v15 == 254)
  {
    if (*(_BYTE *)(v13 + 289))
      v16 = 24;
    else
      v16 = 5;
    v17 = *(unsigned __int8 **)(v13 + 128);
    v18 = *(_QWORD *)(v13 + 136) - (_QWORD)v17;
    if (v18)
    {
      v19 = 0;
      v20 = v18 / 112;
      if (v20 <= 1)
        v21 = 1;
      else
        v21 = v20;
      v15 = -1;
      v22 = 1000.0;
      while (1)
      {
        v24 = *v17;
        v17 += 112;
        v23 = v24;
        if ((_DWORD)v14 == v24)
          break;
        v25 = v14 - v23;
        if (v25 >= 0)
          v26 = v25;
        else
          v26 = -v25;
        if (v26 <= v16)
        {
          v27 = (float)v25;
          if (v25 < 0)
            v27 = (float)v25 * -0.8;
          if (v27 < v22)
            v15 = v19;
          v22 = fminf(v27, v22);
        }
        if (v21 == ++v19)
          goto LABEL_30;
      }
      v15 = v19;
    }
    else
    {
      v15 = -1;
    }
LABEL_30:
    atomic_store(v15, (unsigned __int8 *)(v13 + 224 + v14));
    if ((v15 & 0x80000000) != 0)
      return 0;
  }
  else
  {
    v15 = (char)v15;
    if ((char)v15 < 0)
      return 0;
  }
  v28 = *(_QWORD *)(v13 + 128);
  if (!v28)
    return 0;
  v29 = v28 + 112 * v15;
  v30 = *(_QWORD *)(v29 + 80);
  v161 = (uint64_t *)(v29 + 80);
  v160 = (_QWORD *)(v29 + 88);
  if (*(_QWORD *)(v29 + 88) == v30)
    return 0;
  v157 = a3;
  v152 = a5;
  v153 = a4;
  v156 = 0;
  v154 = 0;
  v155 = 0;
  v31 = 0;
  v32 = a2;
  v174 = a2 + 440;
  v33 = v9 * v5.f32[0];
  v162 = *a4 * *a4;
  v34 = 1.0;
  do
  {
    v35 = *(double **)(a1 + 192);
    v36 = (std::__shared_weak_count *)*((_QWORD *)v35 + 1);
    if (!v36 || (v37 = *v35, (v38 = std::__shared_weak_count::lock(v36)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:nn180100]();
      v151 = v150;
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v179);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v176);
      _Unwind_Resume(v151);
    }
    v39 = v38;
    v40 = 0;
    v179 = v37;
    v180 = v38;
    v176 = 0.0;
    v177 = 0.0;
    v41 = *(double *)(v30 + 8 * v31);
    if (*(_QWORD *)(*(_QWORD *)&v41 + 16) == *(_QWORD *)(*(_QWORD *)&v41 + 8))
      v42 = 0;
    else
      v42 = *(_BYTE **)(*(_QWORD *)&v41 + 8);
    if (!v42[8])
      v40 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v42 + 16))(*(_QWORD *)v42) << 16) - 0x10000;
    v182 = v37;
    v183 = v39;
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldxr(p_shared_owners);
    while (__stxr(v44 + 1, p_shared_owners));
    v184 = v41;
    v186 = v40;
    v187 = *(_DWORD *)(*(_QWORD *)&v37 + 252);
    if (*(_QWORD *)(*(_QWORD *)&v41 + 16) == *(_QWORD *)(*(_QWORD *)&v41 + 8))
      v45 = 0;
    else
      v45 = *(unsigned __int8 **)(*(_QWORD *)&v41 + 8);
    v185 = v45;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (v46)
    {
      v47 = *(std::__shared_weak_count **)&v177;
      if (v177 == 0.0)
        goto LABEL_57;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      v47 = *(std::__shared_weak_count **)&v177;
      if (v177 == 0.0)
        goto LABEL_57;
    }
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
LABEL_57:
    v50 = v185;
    v51 = WORD1(v186);
    v52 = (const md::LabelPoint *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v185 + 24))(*(_QWORD *)v185, SWORD1(v186));
    labelPointToWorldPoint(v52, (const md::LabelLayoutContext *)*(unsigned __int8 *)(v32 + 448), v33);
    v164 = v53;
    v167 = v54;
    v179 = v53;
    v180 = *(std::__shared_weak_count **)&v54;
    v171 = v55;
    v181 = v55;
    isDistanceClipped = md::LabelLayoutContext::isDistanceClipped(v174, (uint64_t)&v179);
    if (!isDistanceClipped)
      v5 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(a2 + 1400), *(float64x2_t *)(a2 + 1304), v164), *(float64x2_t *)(a2 + 1336), v167), *(float64x2_t *)(a2 + 1368), v171), v34/ (*(double *)(v32 + 1424)+ *(double *)(v32 + 1328) * v164+ *(double *)(v32 + 1360) * v167+ *(double *)(v32 + 1392) * v171)));
    LOWORD(v57) = v51;
    v58 = v182;
    v172 = v51;
    if (v182 == 0.0)
      goto LABEL_129;
    do
    {
      v59 = v187;
      _ZF = v187 != *(_DWORD *)(*(_QWORD *)&v58 + 252) || v50 == 0;
      if (_ZF || (v57 & 0x8000) != 0)
        break;
      LODWORD(v61) = (__int16)v186;
      v62 = (unsigned __int16)v57;
      v63 = 1;
      LODWORD(v64) = (__int16)v186;
      v65 = v50;
      while (1)
      {
        v66 = v65[8];
        v67 = v65[8] ? v63 : -v63;
        v68 = (v67 + v62);
        if (v67 + v62 >= 0)
          break;
        v69 = v68 + 1;
LABEL_73:
        if (v66)
          v63 = v69;
        else
          v63 = -v69;
        v64 = (v64 + 1);
        v70 = *(_QWORD *)(*(_QWORD *)&v184 + 8);
        if (v70)
          v71 = (*(_QWORD *)(*(_QWORD *)&v184 + 16) - v70) >> 4 > v64;
        else
          v71 = 0;
        if (!v71)
          goto LABEL_129;
        v62 = 0;
        v65 = (unsigned __int8 *)(v70 + 16 * v64);
        if (!*(_BYTE *)(v70 + 16 * v64 + 8))
          v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v65 + 16))(*(_QWORD *)v65) - 1;
      }
      if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v65 + 16))(*(_QWORD *)v65) <= v68)
      {
        v69 = v68 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v65 + 16))(*(_QWORD *)v65);
        v66 = v65[8];
        goto LABEL_73;
      }
      v72 = v64;
      v73 = v184;
      v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v184 + 8) + 16 * v72);
      v75 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 24))(v74, (__int16)v68);
      v76 = v75;
      if (*(_BYTE *)(a2 + 448))
      {
        if (*(_BYTE *)(v75 + 45))
          v77 = 1;
        else
          v77 = *(_BYTE *)(v75 + 46) == 0;
        if (!v77)
        {
          v78 = *(double *)v75;
          v79 = *(double *)(v75 + 8);
          v80 = *(double *)(v75 + 16);
          v81 = sqrt(v78 * v78 + v79 * v79);
          v82 = atan2(v80, v81 * 0.996647189);
          v168 = atan2(v79, v78);
          v83 = __sincos_stret(v82);
          v84 = v81 + v83.__cosval * v83.__cosval * -42697.6727 * v83.__cosval;
          v34 = 1.0;
          v85 = atan2(v80 + v83.__sinval * v83.__sinval * 42841.3115 * v83.__sinval, v84);
          v86 = tan(v85 * 0.5 + 0.785398163);
          v87 = log(v86);
          v88.f64[0] = v168;
          v88.f64[1] = v87;
          __asm { FMOV            V1.2D, #0.5 }
          *(float64x2_t *)(v76 + 24) = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v88);
          *(_BYTE *)(v76 + 45) = 1;
        }
        v94 = *(double *)(v76 + 24);
        v93 = *(double *)(v76 + 32);
        v95 = *(float *)(v76 + 40);
        if (v95 == 3.4028e38)
          v95 = 0.0;
        v96 = v33 * v95;
      }
      else
      {
        if (*(_BYTE *)(v75 + 44))
        {
          v98 = *(double *)v75;
          v97 = *(double *)(v75 + 8);
          v99 = *(double *)(v75 + 16);
        }
        else
        {
          v100 = *(double *)(v75 + 24) * 6.28318531;
          v101 = exp(*(double *)(v75 + 32) * 6.28318531 + -3.14159265);
          v102 = atan(v101) * 2.0 + -1.57079633;
          v103 = fmod(v100, 6.28318531);
          v104 = fmod(v103 + 6.28318531, 6.28318531) + -3.14159265;
          v105 = __sincos_stret(v102);
          v106 = 6378137.0 / sqrt(v34 + v105.__sinval * v105.__sinval * -0.00669437999);
          v107 = __sincos_stret(v104);
          v98 = v106 * v105.__cosval * v107.__cosval;
          v97 = v106 * v105.__cosval * v107.__sinval;
          *(double *)v76 = v98;
          *(double *)(v76 + 8) = v97;
          v99 = v105.__sinval * 0.99330562 * v106;
          *(double *)(v76 + 16) = v99;
          *(_BYTE *)(v76 + 44) = 1;
        }
        v108 = v98 * 2.45817226e-14;
        v109 = v97 * 2.45817226e-14;
        v110 = v99 * 2.4747391e-14;
        v111 = sqrt(v108 * v108 + v109 * v109 + v110 * v110);
        v112 = *(float *)(v76 + 40);
        if (v112 == 3.4028e38)
          v112 = 0.0;
        v113 = v33 * v112 / v111;
        v94 = v98 + v113 * v108;
        v93 = v97 + v113 * v109;
        v96 = v99 + v113 * v110;
      }
      v165 = v94;
      v169 = v93;
      v176 = v94;
      v177 = v93;
      v158 = v96;
      v178 = v96;
      v114 = md::LabelLayoutContext::isDistanceClipped(v174, (uint64_t)&v176);
      if (!v114)
      {
        v115 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(a2 + 1400), *(float64x2_t *)(a2 + 1304), v165), *(float64x2_t *)(a2 + 1336), v169), *(float64x2_t *)(a2 + 1368), v158), v34/ (*(double *)(a2 + 1424)+ *(double *)(a2 + 1328) * v165+ *(double *)(a2 + 1360) * v169+ *(double *)(a2 + 1392) * v158)));
        if (isDistanceClipped)
        {
          v116 = v115.i32[1];
          *(float *)&v117 = v162;
        }
        else
        {
          v118 = vsub_f32(v115, v5);
          v119 = vmul_f32(v118, v118);
          v116 = v115.i32[1];
          *(float *)&v117 = v162;
          if (vaddv_f32(v119) > 0.00000011921)
          {
            v120 = vmul_f32(vsub_f32(*v157, v5), v118);
            v121 = vsub_f32(*v157, vmla_n_f32(v5, v118, fminf(fmaxf(vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v120, 1), v120), vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v119, 1), v119)).f32[0], 0.0), 1.0)));
            v122 = vmul_f32(v121, v121);
            if (vaddv_f32(v122) < v162)
            {
              v117 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v122, 1), v122).u32[0];
              v154 = (int)v61;
              v155 = v31;
              v116 = v115.i32[1];
              v156 = 1;
            }
          }
        }
        v115.i32[1] = v116;
        v5 = v115;
        v162 = *(float *)&v117;
      }
      if (v59 != *(_DWORD *)(*(_QWORD *)&v58 + 252) || (LOWORD(v57) = v172, (v172 & 0x8000) != 0))
      {
        v50 = 0;
        goto LABEL_128;
      }
      v123 = v172;
      v124 = 1;
      while (2)
      {
        v125 = v50[8];
        if (v50[8])
          v126 = v124;
        else
          v126 = -v124;
        v57 = v126 + v123;
        if (v126 + v123 < 0)
        {
          v127 = v57 + 1;
          goto LABEL_115;
        }
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v50 + 16))(*(_QWORD *)v50) <= (unint64_t)v57)
        {
          v127 = v57 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v50 + 16))(*(_QWORD *)v50);
          v125 = v50[8];
LABEL_115:
          if (v125)
            v124 = v127;
          else
            v124 = -v127;
          v128 = *(_QWORD *)(*(_QWORD *)&v73 + 8);
          if (!v128 || (v61 = (v61 + 1), (*(_QWORD *)(*(_QWORD *)&v73 + 16) - v128) >> 4 <= v61))
          {
            v50 = 0;
            LOWORD(v57) = v172;
            goto LABEL_128;
          }
          v123 = 0;
          v50 = (unsigned __int8 *)(v128 + 16 * v61);
          if (!*(_BYTE *)(v128 + 16 * v61 + 8))
            v123 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v50 + 16))(*(_QWORD *)v50) - 1;
          continue;
        }
        break;
      }
      LOWORD(v186) = v61;
      WORD1(v186) = v57;
      HIDWORD(v186) = 0;
      v129 = *(_QWORD *)(*(_QWORD *)&v73 + 8);
      if ((__int16)v61 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)&v73 + 16) - v129) >> 4))
        v50 = 0;
      else
        v50 = (unsigned __int8 *)(v129 + 16 * (__int16)v61);
      v172 = v57;
LABEL_128:
      v185 = v50;
      isDistanceClipped = v114;
    }
    while (v58 != 0.0);
LABEL_129:
    v130 = v183;
    v32 = a2;
    if (v183)
    {
      v131 = (unint64_t *)&v183->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    ++v31;
    v30 = *v161;
  }
  while (v31 < (*v160 - *v161) >> 3);
  if ((v156 & 1) == 0)
    return 0;
  *(_DWORD *)(v152 + 8) = v154;
  v133 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8 * v155) + 8) + 16 * v154);
  if (*(_BYTE *)(v133 + 32))
    v134 = 0;
  else
    v134 = *(_QWORD *)(v133 + 16);
  v136 = v162;
  *(_QWORD *)(v152 + 16) = v134;
  *(_DWORD *)v152 = 0;
  *(_DWORD *)(v152 + 4) = v155;
  v137 = *(_QWORD **)(a1 + 224);
  if (v137 != (_QWORD *)(a1 + 232))
  {
    v138 = *v153 * *v153;
    do
    {
      v139 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v137[5] + 200))(v137[5]);
      v141 = v139;
      if (!*(_QWORD *)v139
        || *(_DWORD *)(v139 + 40) != *(_DWORD *)(*(_QWORD *)v139 + 252)
        || !*(_QWORD *)(v139 + 24)
        || *(__int16 *)(v139 + 34) < 0)
      {
        md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v139, *(unsigned __int8 *)(v139 + 164), v140);
      }
      v136 = v162;
      if (*(_QWORD *)(v141 + 16) == *(_QWORD *)(v30 + 8 * v155))
      {
        v142 = (const md::LabelPoint *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v137[5] + 56))(v137[5]);
        labelPointToWorldPoint(v142, (const md::LabelLayoutContext *)*(unsigned __int8 *)(a2 + 448), v33);
        v166 = v143;
        v170 = v144;
        v182 = v143;
        v183 = *(std::__shared_weak_count **)&v144;
        v173 = v145;
        v184 = v145;
        if (md::LabelLayoutContext::isDistanceClipped(v174, (uint64_t)&v182))
        {
          v136 = v162;
        }
        else
        {
          v159 = (float64x2_t *)(a2 + 1304);
          v146 = vsub_f32(*v157, vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v159[6], *v159, v166), v159[2], v170), v159[4], v173), 1.0/ (*(double *)(a2 + 1424)+ *(double *)(a2 + 1328) * v166+ *(double *)(a2 + 1360) * v170+ *(double *)(a2 + 1392) * v173))));
          v147 = vaddv_f32(vmul_f32(v146, v146));
          v136 = v162;
          if (v147 < v138)
          {
            *(_DWORD *)v152 = *((_DWORD *)v137 + 8);
            v138 = v147;
          }
        }
      }
      v148 = (_QWORD *)v137[1];
      if (v148)
      {
        do
        {
          v149 = v148;
          v148 = (_QWORD *)*v148;
        }
        while (v148);
      }
      else
      {
        do
        {
          v149 = (_QWORD *)v137[2];
          _ZF = *v149 == (_QWORD)v137;
          v137 = v149;
        }
        while (!_ZF);
      }
      v137 = v149;
    }
    while (v149 != (_QWORD *)(a1 + 232));
  }
  *v153 = sqrtf(v136);
  return 1;
}

void sub_19F843AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 200);
  _Unwind_Resume(a1);
}

void sub_19F843C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D1CF0;
  return result;
}

int64x2_t std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "3D Object";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6E00;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6E00;
}

void std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1CA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1CA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseLandmark::LandmarkPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 224);
  v6 = *(std::__shared_weak_count **)(v2 + 232);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BAC58;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F844328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseLandmark21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseLandmark21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D64B8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseLandmark21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D64B8;
}

void std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseLandmark::BuildingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseLandmark::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1C60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseLandmark::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1C60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseLandmark::BuildingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 208);
  v6 = *(std::__shared_weak_count **)(v2 + 216);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42B6FB8;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F844978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22FoggedSpecularLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22FoggedSpecularLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6FB0;
  return result;
}

void std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::FoggedSpecularLandmark::LandmarkPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::FoggedSpecularLandmark::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1C18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::FoggedSpecularLandmark::LandmarkPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 160);
  v6 = *(std::__shared_weak_count **)(v2 + 168);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42BAFB0;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F844F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16SpecularLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16SpecularLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6668;
  return result;
}

void std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::SpecularLandmark::LandmarkPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::SpecularLandmark::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D1BD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::SpecularLandmark::LandmarkPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count **v40;
  std::__shared_weak_count **v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)operator new();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 144);
  v6 = *(std::__shared_weak_count **)(v2 + 152);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v3, v5, (uint64_t)v6);
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v3, v5, 0);
  }
  *v4 = &off_1E42B8AA0;
  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE5565D8, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v65 = v11;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v14 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v14->__shared_owners_ = 0;
  v15 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v16 = v14;
  v17 = &v14[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v14[1], qword_1EE5566F8, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v64 = v16;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v18 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BE0;
  v62 = v18 + 1;
  v63 = a1;
  ggl::BufferData::BufferData((uint64_t)&v18[1], qword_1EE556798, 2, 1, 6, 1);
  v18[9].__shared_owners_ = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E70;
  v20 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v61 = v20 + 1;
  ggl::BufferData::BufferData((uint64_t)&v20[1], qword_1EE55EB88, 2, 1, 6, 1);
  v20[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v22 = v4[8];
  *(_QWORD *)(v22 + 32) = v11 + 1;
  *(_QWORD *)(v22 + 40) = 0;
  v23 = v4[20];
  do
    v24 = __ldxr(v12);
  while (__stxr(v24 + 1, v12));
  v25 = *(std::__shared_weak_count **)(v23 + 40);
  *(_QWORD *)(v23 + 32) = v13;
  *(_QWORD *)(v23 + 40) = v65;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v4[8];
  *(_QWORD *)(v28 + 48) = v17;
  *(_QWORD *)(v28 + 56) = 0;
  v29 = v4[20];
  do
    v30 = __ldxr(v15);
  while (__stxr(v30 + 1, v15));
  v31 = *(std::__shared_weak_count **)(v29 + 56);
  *(_QWORD *)(v29 + 48) = v17;
  *(_QWORD *)(v29 + 56) = v64;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v4[8];
  *(_QWORD *)(v34 + 64) = v62;
  *(_QWORD *)(v34 + 72) = 0;
  v35 = v4[20];
  do
    v36 = __ldxr(v19);
  while (__stxr(v36 + 1, v19));
  v37 = *(std::__shared_weak_count **)(v35 + 72);
  *(_QWORD *)(v35 + 64) = v62;
  *(_QWORD *)(v35 + 72) = v18;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count **)v4[8];
  *v40 = v61;
  v40[1] = 0;
  v41 = (std::__shared_weak_count **)v4[20];
  do
    v42 = __ldxr(v21);
  while (__stxr(v42 + 1, v21));
  v43 = v41[1];
  *v41 = v61;
  v41[1] = v20;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(uint64_t **)(v63 + 16);
  v47 = v4[8];
  v48 = *v46;
  v49 = v46[1];
  *(_QWORD *)(v47 + 96) = v48;
  *(_QWORD *)(v47 + 104) = 0;
  v50 = v4[20];
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(std::__shared_weak_count **)(v50 + 104);
  *(_QWORD *)(v50 + 96) = v48;
  *(_QWORD *)(v50 + 104) = v49;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  do
    v57 = __ldaxr(v19);
  while (__stlxr(v57 - 1, v19));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  do
    v58 = __ldaxr(v15);
  while (__stlxr(v58 - 1, v15));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  do
    v59 = __ldaxr(v12);
  while (__stlxr(v59 - 1, v12));
  if (!v59)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
  return v4;
}

void sub_19F8455B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 - 1, v16));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  do
    v21 = __ldaxr(v14);
  while (__stlxr(v21 - 1, v14));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12LandmarkFlat21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12LandmarkFlat21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D61E8;
  return result;
}

void std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::LandmarkFlat::LandmarkPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::LandmarkFlat::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1B88;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::LandmarkFlat::LandmarkPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count **v31;
  std::__shared_weak_count **v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v41;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(std::__shared_weak_count **)(v1 + 104);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6250;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v12 = &v10[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE5565D8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v41 = v10;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v13 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2BA8;
  v15 = v13 + 1;
  ggl::BufferData::BufferData((uint64_t)&v13[1], qword_1EE5566F8, 2, 1, 6, 1);
  v13[9].__shared_owners_ = (uint64_t)ggl::Building::Style::reflection(void)::reflection;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E50;
  v16 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20F0;
  v18 = v16 + 1;
  ggl::BufferData::BufferData((uint64_t)&v16[1], qword_1EE55EB88, 2, 1, 6, 1);
  v16[9].__shared_owners_ = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B96B0;
  v19 = v3[8];
  *(_QWORD *)(v19 + 32) = v12;
  *(_QWORD *)(v19 + 40) = 0;
  v20 = v3[20];
  do
    v21 = __ldxr(v11);
  while (__stxr(v21 + 1, v11));
  v22 = *(std::__shared_weak_count **)(v20 + 40);
  *(_QWORD *)(v20 + 32) = v12;
  *(_QWORD *)(v20 + 40) = v41;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v3[8];
  *(_QWORD *)(v25 + 48) = v15;
  *(_QWORD *)(v25 + 56) = 0;
  v26 = v3[20];
  do
    v27 = __ldxr(v14);
  while (__stxr(v27 + 1, v14));
  v28 = *(std::__shared_weak_count **)(v26 + 56);
  *(_QWORD *)(v26 + 48) = v15;
  *(_QWORD *)(v26 + 56) = v13;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count **)v3[8];
  *v31 = v18;
  v31[1] = 0;
  v32 = (std::__shared_weak_count **)v3[20];
  do
    v33 = __ldxr(v17);
  while (__stxr(v33 + 1, v17));
  v34 = v32[1];
  *v32 = v18;
  v32[1] = v16;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  do
    v37 = __ldaxr(v17);
  while (__stlxr(v37 - 1, v17));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  do
    v38 = __ldaxr(v14);
  while (__stlxr(v38 - 1, v14));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  do
    v39 = __ldaxr(v11);
  while (__stlxr(v39 - 1, v11));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  return v3;
}

void sub_19F845A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v14;
  unint64_t v15;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  do
    v15 = __ldaxr(v11);
  while (__stlxr(v15 - 1, v11));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13LandmarkDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13LandmarkDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6230;
  return result;
}

void std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::LandmarkDepth::BuildingPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::LandmarkDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1B40;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::LandmarkDepth::BuildingPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 128);
  v5 = *(std::__shared_weak_count **)(v1 + 136);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, v4, (uint64_t)v5);
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, v4, 0);
  }
  *v3 = &off_1E42B6590;
  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B70;
  v12 = ggl::BufferData::BufferData((uint64_t)&v10[1], qword_1EE5565D8, 2, 1, 6, 1);
  v10[9].__shared_owners_ = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9E30;
  v13 = v3[8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = v3[20];
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v10;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v19 = __ldaxr(v11);
  while (__stlxr(v19 - 1, v11));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v3;
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseLandmark::LandmarkPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E39A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FoggedDiffuseLandmark::LandmarkPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E39A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedDiffuseLandmark::LandmarkPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::DiffuseLandmark::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DiffuseLandmark::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DiffuseLandmark::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularLandmark::LandmarkPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3B68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FoggedSpecularLandmark::LandmarkPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3B68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::SpecularLandmark::LandmarkPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SpecularLandmark::LandmarkPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::LandmarkFlat::LandmarkPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DECA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::LandmarkFlat::LandmarkPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DECA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::LandmarkDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEE68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::LandmarkDepth::BuildingPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEE68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::LandmarkRenderResources::~LandmarkRenderResources(md::LandmarkRenderResources *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    v4 = *((_QWORD *)this + 39);
    v5 = *((_QWORD *)this + 38);
    if (v4 != v3)
    {
      v6 = *((_QWORD *)this + 39);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *((_QWORD *)this + 38);
    }
    *((_QWORD *)this + 39) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 41) + 40))(*((_QWORD *)this + 41), v5, *((_QWORD *)this + 40) - v5);
  }
  v9 = (void *)*((_QWORD *)this + 35);
  if (v9)
  {
    *((_QWORD *)this + 36) = v9;
    operator delete(v9);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (!v10)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    if (!v13)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    if (!v13)
      goto LABEL_23;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_23:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (!v16)
    goto LABEL_27;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v19)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v19)
      goto LABEL_33;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_33:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v22)
    goto LABEL_37;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v25)
      goto LABEL_43;
  }
  else
  {
LABEL_37:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (!v25)
      goto LABEL_43;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_43:
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v28)
    goto LABEL_47;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v31)
      goto LABEL_53;
  }
  else
  {
LABEL_47:
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (!v31)
      goto LABEL_53;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_53:
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v34)
    goto LABEL_57;
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v37)
      goto LABEL_63;
  }
  else
  {
LABEL_57:
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v37)
      goto LABEL_63;
  }
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
LABEL_63:
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v43)
  {
    v44 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v43);
    MEMORY[0x1A1AF4E00](v44, 0x10A0C40D234DDC7);
  }
  v45 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v50)
  {
    v51 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v50);
    MEMORY[0x1A1AF4E00](v51, 0x10A0C40D234DDC7);
  }
  v52 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    v53 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v52);
    MEMORY[0x1A1AF4E00](v53, 0x10A0C40D234DDC7);
  }
  v54 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v54)
  {
    v55 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v54);
    MEMORY[0x1A1AF4E00](v55, 0x10A0C40D234DDC7);
  }
  v56 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v56)
  {
    v57 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v56);
    MEMORY[0x1A1AF4E00](v57, 0x10A0C40D234DDC7);
  }
  v58 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v58)
  {
    v59 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v58);
    MEMORY[0x1A1AF4E00](v59, 0x10A0C40D234DDC7);
  }
  v60 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v60)
  {
    v61 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v60);
    MEMORY[0x1A1AF4E00](v61, 0x10A0C40D234DDC7);
  }
}

uint64_t *md::LandmarkRenderResources::resetPools(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _OWORD *v100;
  __int128 *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _OWORD *v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v2 = *this;
  v3 = (uint64_t *)(*this)[4];
  v4 = (uint64_t *)(*this)[5];
  if (v3 == v4)
    goto LABEL_33;
  v5 = (_QWORD *)v2[1];
  do
  {
    v6 = *v3;
    v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5)
        *v5 = v6;
      ++v5;
      goto LABEL_4;
    }
    v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
LABEL_193:
      abort();
    v9 = v7 - *v2;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = 8 * v11;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 16))(v2[3], 8 * v11, 8);
      v14 = (_QWORD *)(v13 + 8 * v8);
      v11 = v13 + v12;
      if (v13)
        *v14 = v6;
    }
    else
    {
      v14 = (_QWORD *)(8 * v8);
    }
    v16 = *v2;
    v15 = v2[1];
    v17 = v15 - *v2;
    if (v15 == *v2)
    {
      v19 = v14;
      goto LABEL_29;
    }
    v18 = v17 - 8;
    if ((unint64_t)(v17 - 8) < 0x38)
    {
      v19 = v14;
    }
    else
    {
      v19 = v14;
      if ((unint64_t)(v15 - (_QWORD)v14) >= 0x20)
      {
        v20 = (v18 >> 3) + 1;
        v21 = v14 - 2;
        v22 = (__int128 *)(v15 - 16);
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *v22;
          *(v21 - 1) = *(v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        v19 = &v14[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v25 = *(_QWORD *)(v15 - 8);
      v15 -= 8;
      *--v19 = v25;
    }
    while (v15 != v16);
LABEL_28:
    v15 = *v2;
LABEL_29:
    v5 = v14 + 1;
    *v2 = (uint64_t)v19;
    v2[1] = (uint64_t)(v14 + 1);
    v26 = v2[2];
    v2[2] = v11;
    if (v15)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v15, v26 - v15);
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  v27 = v2[4];
  if (v27 != v2[5])
    v2[5] = v27;
LABEL_33:
  v28 = this[3];
  v29 = (uint64_t *)v28[4];
  v30 = (uint64_t *)v28[5];
  if (v29 == v30)
    goto LABEL_65;
  v31 = (_QWORD *)v28[1];
  while (2)
  {
    v32 = *v29;
    v33 = v28[2];
    if ((unint64_t)v31 < v33)
    {
      if (v31)
        *v31 = v32;
      ++v31;
      goto LABEL_36;
    }
    v34 = ((uint64_t)v31 - *v28) >> 3;
    if ((unint64_t)(v34 + 1) >> 61)
      goto LABEL_193;
    v35 = v33 - *v28;
    v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1))
      v36 = v34 + 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      v38 = 8 * v37;
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 16))(v28[3], 8 * v37, 8);
      v40 = (_QWORD *)(v39 + 8 * v34);
      v37 = v39 + v38;
      if (v39)
        *v40 = v32;
    }
    else
    {
      v40 = (_QWORD *)(8 * v34);
    }
    v42 = *v28;
    v41 = v28[1];
    v43 = v41 - *v28;
    if (v41 == *v28)
    {
      v45 = v40;
      goto LABEL_61;
    }
    v44 = v43 - 8;
    if ((unint64_t)(v43 - 8) < 0x38)
    {
      v45 = v40;
      do
      {
LABEL_59:
        v51 = *(_QWORD *)(v41 - 8);
        v41 -= 8;
        *--v45 = v51;
      }
      while (v41 != v42);
      goto LABEL_60;
    }
    v45 = v40;
    if ((unint64_t)(v41 - (_QWORD)v40) < 0x20)
      goto LABEL_59;
    v46 = (v44 >> 3) + 1;
    v47 = v40 - 2;
    v48 = (__int128 *)(v41 - 16);
    v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *v48;
      *(v47 - 1) = *(v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 2;
      v49 -= 4;
    }
    while (v49);
    v45 = &v40[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
    v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
LABEL_60:
    v41 = *v28;
LABEL_61:
    v31 = v40 + 1;
    *v28 = (uint64_t)v45;
    v28[1] = (uint64_t)(v40 + 1);
    v52 = v28[2];
    v28[2] = v37;
    if (v41)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[3] + 40))(v28[3], v41, v52 - v41);
LABEL_36:
    v28[1] = (uint64_t)v31;
    if (++v29 != v30)
      continue;
    break;
  }
  v53 = v28[4];
  if (v53 != v28[5])
    v28[5] = v53;
LABEL_65:
  if (!*((_BYTE *)this + 272))
  {
    v106 = this[1];
    v107 = (uint64_t *)v106[4];
    v108 = (uint64_t *)v106[5];
    if (v107 == v108)
      goto LABEL_160;
    v109 = (_QWORD *)v106[1];
    while (1)
    {
      v110 = *v107;
      v111 = v106[2];
      if ((unint64_t)v109 >= v111)
        break;
      if (v109)
        *v109 = v110;
      ++v109;
LABEL_131:
      v106[1] = (uint64_t)v109;
      if (++v107 == v108)
      {
        v131 = v106[4];
        if (v131 != v106[5])
          v106[5] = v131;
LABEL_160:
        v80 = this[4];
        v132 = (uint64_t *)v80[4];
        v82 = v80 + 5;
        v133 = (uint64_t *)v80[5];
        if (v132 == v133)
          return ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[11]);
        v134 = (_QWORD *)v80[1];
        while (2)
        {
          v135 = *v132;
          v136 = v80[2];
          if ((unint64_t)v134 < v136)
          {
            if (v134)
              *v134 = v135;
            ++v134;
            goto LABEL_163;
          }
          v137 = ((uint64_t)v134 - *v80) >> 3;
          if ((unint64_t)(v137 + 1) >> 61)
            goto LABEL_193;
          v138 = v136 - *v80;
          v139 = v138 >> 2;
          if (v138 >> 2 <= (unint64_t)(v137 + 1))
            v139 = v137 + 1;
          if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
            v140 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v140 = v139;
          if (v140)
          {
            v141 = 8 * v140;
            v142 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 16))(v80[3], 8 * v140, 8);
            v143 = (_QWORD *)(v142 + 8 * v137);
            v140 = v142 + v141;
            if (v142)
              *v143 = v135;
          }
          else
          {
            v143 = (_QWORD *)(8 * v137);
          }
          v145 = *v80;
          v144 = v80[1];
          v146 = v144 - *v80;
          if (v144 != *v80)
          {
            v147 = v146 - 8;
            if ((unint64_t)(v146 - 8) < 0x38)
            {
              v148 = v143;
            }
            else
            {
              v148 = v143;
              if ((unint64_t)(v144 - (_QWORD)v143) >= 0x20)
              {
                v149 = (v147 >> 3) + 1;
                v150 = v143 - 2;
                v151 = (__int128 *)(v144 - 16);
                v152 = v149 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v153 = *v151;
                  *(v150 - 1) = *(v151 - 1);
                  *v150 = v153;
                  v150 -= 2;
                  v151 -= 2;
                  v152 -= 4;
                }
                while (v152);
                v148 = &v143[-(v149 & 0x3FFFFFFFFFFFFFFCLL)];
                v144 -= 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
                if (v149 == (v149 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_187:
                  v144 = *v80;
LABEL_188:
                  v134 = v143 + 1;
                  *v80 = (uint64_t)v148;
                  v80[1] = (uint64_t)(v143 + 1);
                  v155 = v80[2];
                  v80[2] = v140;
                  if (v144)
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 40))(v80[3], v144, v155 - v144);
LABEL_163:
                  v80[1] = (uint64_t)v134;
                  if (++v132 == v133)
                  {
LABEL_190:
                    v156 = v80[4];
                    if (v156 != v80[5])
                      *v82 = v156;
                    return ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[11]);
                  }
                  continue;
                }
              }
            }
            do
            {
              v154 = *(_QWORD *)(v144 - 8);
              v144 -= 8;
              *--v148 = v154;
            }
            while (v144 != v145);
            goto LABEL_187;
          }
          break;
        }
        v148 = v143;
        goto LABEL_188;
      }
    }
    v112 = ((uint64_t)v109 - *v106) >> 3;
    if ((unint64_t)(v112 + 1) >> 61)
      goto LABEL_193;
    v113 = v111 - *v106;
    v114 = v113 >> 2;
    if (v113 >> 2 <= (unint64_t)(v112 + 1))
      v114 = v112 + 1;
    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
      v115 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v115 = v114;
    if (v115)
    {
      v116 = 8 * v115;
      v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 16))(v106[3], 8 * v115, 8);
      v118 = (_QWORD *)(v117 + 8 * v112);
      v115 = v117 + v116;
      if (v117)
        *v118 = v110;
    }
    else
    {
      v118 = (_QWORD *)(8 * v112);
    }
    v120 = *v106;
    v119 = v106[1];
    v121 = v119 - *v106;
    if (v119 == *v106)
    {
      v123 = v118;
      goto LABEL_156;
    }
    v122 = v121 - 8;
    if ((unint64_t)(v121 - 8) < 0x38)
    {
      v123 = v118;
    }
    else
    {
      v123 = v118;
      if ((unint64_t)(v119 - (_QWORD)v118) >= 0x20)
      {
        v124 = (v122 >> 3) + 1;
        v125 = v118 - 2;
        v126 = (__int128 *)(v119 - 16);
        v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v128 = *v126;
          *(v125 - 1) = *(v126 - 1);
          *v125 = v128;
          v125 -= 2;
          v126 -= 2;
          v127 -= 4;
        }
        while (v127);
        v123 = &v118[-(v124 & 0x3FFFFFFFFFFFFFFCLL)];
        v119 -= 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
        if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_155;
      }
    }
    do
    {
      v129 = *(_QWORD *)(v119 - 8);
      v119 -= 8;
      *--v123 = v129;
    }
    while (v119 != v120);
LABEL_155:
    v119 = *v106;
LABEL_156:
    v109 = v118 + 1;
    *v106 = (uint64_t)v123;
    v106[1] = (uint64_t)(v118 + 1);
    v130 = v106[2];
    v106[2] = v115;
    if (v119)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[3] + 40))(v106[3], v119, v130 - v119);
    goto LABEL_131;
  }
  v54 = this[2];
  v55 = (uint64_t *)v54[4];
  v56 = (uint64_t *)v54[5];
  if (v55 == v56)
    goto LABEL_98;
  v57 = (_QWORD *)v54[1];
  while (2)
  {
    v58 = *v55;
    v59 = v54[2];
    if ((unint64_t)v57 < v59)
    {
      if (v57)
        *v57 = v58;
      ++v57;
      goto LABEL_69;
    }
    v60 = ((uint64_t)v57 - *v54) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_193;
    v61 = v59 - *v54;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
    {
      v64 = 8 * v63;
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 16))(v54[3], 8 * v63, 8);
      v66 = (_QWORD *)(v65 + 8 * v60);
      v63 = v65 + v64;
      if (v65)
        *v66 = v58;
    }
    else
    {
      v66 = (_QWORD *)(8 * v60);
    }
    v68 = *v54;
    v67 = v54[1];
    v69 = v67 - *v54;
    if (v67 == *v54)
    {
      v71 = v66;
      goto LABEL_94;
    }
    v70 = v69 - 8;
    if ((unint64_t)(v69 - 8) < 0x38)
    {
      v71 = v66;
      do
      {
LABEL_92:
        v77 = *(_QWORD *)(v67 - 8);
        v67 -= 8;
        *--v71 = v77;
      }
      while (v67 != v68);
      goto LABEL_93;
    }
    v71 = v66;
    if ((unint64_t)(v67 - (_QWORD)v66) < 0x20)
      goto LABEL_92;
    v72 = (v70 >> 3) + 1;
    v73 = v66 - 2;
    v74 = (__int128 *)(v67 - 16);
    v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *v74;
      *(v73 - 1) = *(v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    v71 = &v66[-(v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v67 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_92;
LABEL_93:
    v67 = *v54;
LABEL_94:
    v57 = v66 + 1;
    *v54 = (uint64_t)v71;
    v54[1] = (uint64_t)(v66 + 1);
    v78 = v54[2];
    v54[2] = v63;
    if (v67)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54[3] + 40))(v54[3], v67, v78 - v67);
LABEL_69:
    v54[1] = (uint64_t)v57;
    if (++v55 != v56)
      continue;
    break;
  }
  v79 = v54[4];
  if (v79 != v54[5])
    v54[5] = v79;
LABEL_98:
  v80 = this[5];
  v81 = (uint64_t *)v80[4];
  v82 = v80 + 5;
  v83 = (uint64_t *)v80[5];
  if (v81 != v83)
  {
    v84 = (_QWORD *)v80[1];
    while (1)
    {
      v85 = *v81;
      v86 = v80[2];
      if ((unint64_t)v84 >= v86)
        break;
      if (v84)
        *v84 = v85;
      ++v84;
LABEL_101:
      v80[1] = (uint64_t)v84;
      if (++v81 == v83)
        goto LABEL_190;
    }
    v87 = ((uint64_t)v84 - *v80) >> 3;
    if ((unint64_t)(v87 + 1) >> 61)
      goto LABEL_193;
    v88 = v86 - *v80;
    v89 = v88 >> 2;
    if (v88 >> 2 <= (unint64_t)(v87 + 1))
      v89 = v87 + 1;
    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
      v90 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v90 = v89;
    if (v90)
    {
      v91 = 8 * v90;
      v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 16))(v80[3], 8 * v90, 8);
      v93 = (_QWORD *)(v92 + 8 * v87);
      v90 = v92 + v91;
      if (v92)
        *v93 = v85;
    }
    else
    {
      v93 = (_QWORD *)(8 * v87);
    }
    v95 = *v80;
    v94 = v80[1];
    v96 = v94 - *v80;
    if (v94 != *v80)
    {
      v97 = v96 - 8;
      if ((unint64_t)(v96 - 8) < 0x38)
      {
        v98 = v93;
      }
      else
      {
        v98 = v93;
        if ((unint64_t)(v94 - (_QWORD)v93) >= 0x20)
        {
          v99 = (v97 >> 3) + 1;
          v100 = v93 - 2;
          v101 = (__int128 *)(v94 - 16);
          v102 = v99 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v103 = *v101;
            *(v100 - 1) = *(v101 - 1);
            *v100 = v103;
            v100 -= 2;
            v101 -= 2;
            v102 -= 4;
          }
          while (v102);
          v98 = &v93[-(v99 & 0x3FFFFFFFFFFFFFFCLL)];
          v94 -= 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
          if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_125:
            v94 = *v80;
LABEL_126:
            v84 = v93 + 1;
            *v80 = (uint64_t)v98;
            v80[1] = (uint64_t)(v93 + 1);
            v105 = v80[2];
            v80[2] = v90;
            if (v94)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[3] + 40))(v80[3], v94, v105 - v94);
            goto LABEL_101;
          }
        }
      }
      do
      {
        v104 = *(_QWORD *)(v94 - 8);
        v94 -= 8;
        *--v98 = v104;
      }
      while (v94 != v95);
      goto LABEL_125;
    }
    v98 = v93;
    goto LABEL_126;
  }
  return ggl::FragmentedPool<ggl::RenderItem>::pushAll(this[11]);
}

void md::RealisticSatelliteMapEngineMode::~RealisticSatelliteMapEngineMode(md::RealisticSatelliteMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

md::RealisticSatelliteMapEngineMode *md::RealisticSatelliteMapEngineMode::RealisticSatelliteMapEngineMode(md::RealisticSatelliteMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[2];

  v2 = md::MapEngineMode::MapEngineMode((uint64_t)this, 8);
  *(_QWORD *)v2 = &off_1E429DA38;
  *(_WORD *)(v2 + 224) = 257;
  if (!*(_BYTE *)(v2 + 64))
    *((_BYTE *)this + 64) = 1;
  *((_QWORD *)this + 9) = 0x3FE0C152382D7365;
  *(_QWORD *)this = &off_1E42A8B98;
  *((_BYTE *)this + 49) = 0;
  *((_DWORD *)this + 13) = 21;
  LOBYTE(v6) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v6)+ 17) = 0;
  LOBYTE(v6) = 1;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 1u, &v6)+ 17) = 0;
  LOBYTE(v6) = 4;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 4u, &v6)+ 17) = 0;
  LOBYTE(v6) = 6;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 6u, &v6)+ 17) = 0;
  LOBYTE(v6) = 7;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 7u, &v6)+ 17) = 0;
  LOBYTE(v6) = 5;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 5u, &v6)+ 17) = 1;
  LOBYTE(v6) = 3;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 3u, &v6)+ 17) = 2;
  LODWORD(v6) = 65576;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x28u, &v6)+ 18) = 65538;
  v21 = 0x79FE0BD9535D5C4DLL;
  v22 = "md::AnchorLogic]";
  v23[0] = 15;
  *(_QWORD *)&v18 = 0x63B6FE00C0848868;
  *((_QWORD *)&v18 + 1) = "md::AnchorContext]";
  v19 = 17;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F87F0;
  v8 = unk_1E42F8800;
  v9 = xmmword_1E42F8810;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8E88;
  v17 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v18 = 0x8E629317B3523E63;
  *((_QWORD *)&v18 + 1) = "md::CameraLogic]";
  v19 = 15;
  *(_QWORD *)&v15 = 0x1AF456233693CD46;
  *((_QWORD *)&v15 + 1) = "md::CameraContext]";
  *(_QWORD *)&v16 = 17;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8820;
  *(_QWORD *)&v8 = 20;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v21 = 0x17767EADC5B287BLL;
  v22 = "md::ElevationLogic]";
  v23[0] = 18;
  *(_QWORD *)&v18 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v18 + 1) = "md::ElevationContext]";
  v19 = 20;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F88C8;
  v8 = unk_1E42F88D8;
  v9 = xmmword_1E42F88E8;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F88F8;
  v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  v21 = 0x4AC7AB7561675F6;
  v22 = "md::GridLogic]";
  v23[0] = 13;
  *(_QWORD *)&v18 = 0x336A901A15BB7353;
  *((_QWORD *)&v18 + 1) = "md::GridContext]";
  v19 = 15;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8C28;
  *(_QWORD *)&v8 = 21;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8B38;
  v17 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v15 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v15 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v16 = 21;
  *(_QWORD *)&v6 = 0x13043386C0978CC2;
  *((_QWORD *)&v6 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v7 = 23;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v18 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v18 + 1) = "md::TileSelectionLogic]";
  v19 = 22;
  *(_QWORD *)&v15 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v15 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v16 = 24;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 3;
  v9 = xmmword_1E42F8B10;
  v10 = unk_1E42F8B20;
  *(_QWORD *)&v11 = 21;
  v7 = xmmword_1E42F8AF0;
  v8 = unk_1E42F8B00;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v3 = 0xCBF29CE484222325;
  v4 = 0x26u;
  do
    v3 = 0x100000001B3 * (v3 ^ aStdStringViewG_927[v4++]);
  while (v4 != 368);
  v21 = v3;
  v22 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v23[0] = 330;
  *(_QWORD *)&v18 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v18 + 1) = "md::ResolvedTileSelectionContext]";
  v19 = 32;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8B38;
  *(_QWORD *)&v8 = 24;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8B50;
  v17 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v18 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v18 + 1) = "md::PendingSceneLogic]";
  v19 = 21;
  *(_QWORD *)&v15 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v15 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v16 = 23;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 5;
  v11 = xmmword_1E42F8BA8;
  v12 = *(_OWORD *)&off_1E42F8BB8;
  v13 = xmmword_1E42F8BC8;
  v14 = 25;
  v7 = xmmword_1E42F8B68;
  v8 = unk_1E42F8B78;
  v9 = xmmword_1E42F8B88;
  v10 = unk_1E42F8B98;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v21 = 0x2B7C4502BD3C99C6;
  v22 = "md::ResolvedSceneLogic]";
  v23[0] = 22;
  *(_QWORD *)&v18 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v18 + 1) = "md::SceneContext]";
  v19 = 16;
  v20 = 1;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8C10;
  v17 = 23;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F8BE0;
  v8 = unk_1E42F8BF0;
  v9 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v15, (uint64_t)&v6);
  *(_QWORD *)&v15 = 0xD2443A61CED86C69;
  *((_QWORD *)&v15 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v16 = 17;
  *(_QWORD *)&v6 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v6 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v7 = 19;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v15 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v15 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v16 = 14;
  *(_QWORD *)&v6 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v6 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v7 = 21;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  v21 = 0x20A1ED17D78F322BLL;
  v22 = "md::LabelsLogic]";
  v23[0] = 15;
  *(_QWORD *)&v18 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v18 + 1) = "md::LabelsContext]";
  v19 = 17;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8C28;
  *(_QWORD *)&v8 = 21;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8C40;
  v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v15 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v15 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v16 = 18;
  *(_QWORD *)&v6 = 0x7851AF310F49C988;
  *((_QWORD *)&v6 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v7 = 25;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v18 = 0x8B45D3D7944796A2;
  *((_QWORD *)&v18 + 1) = "md::PendingRegistryLogic]";
  v19 = 24;
  *(_QWORD *)&v15 = 0xA8300AA8F44B09FFLL;
  *((_QWORD *)&v15 + 1) = "md::PendingRegistryContext]";
  *(_QWORD *)&v16 = 26;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8C10;
  *(_QWORD *)&v8 = 23;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  *(_QWORD *)&v18 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v18 + 1) = "md::MapZoomLevelStyleLogic]";
  v19 = 26;
  *(_QWORD *)&v15 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v15 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v16 = 33;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F8898;
  v8 = unk_1E42F88A8;
  v9 = xmmword_1E42F88B8;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  *(_QWORD *)&v18 = 0xEA624BC935BAF297;
  *((_QWORD *)&v18 + 1) = "md::mun::MuninLogic]";
  v19 = 19;
  *(_QWORD *)&v15 = 0x8EA84A1BD3791AFALL;
  *((_QWORD *)&v15 + 1) = "md::mun::MuninContext]";
  *(_QWORD *)&v16 = 21;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 3;
  v9 = xmmword_1E42F8D08;
  v10 = unk_1E42F8D18;
  *(_QWORD *)&v11 = 20;
  v7 = xmmword_1E42F8CE8;
  v8 = unk_1E42F8CF8;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 1, (uint64_t)&v6, (uint64_t)&v21);
  return this;
}

void sub_19F847854(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::VenueLayerLayoutCharacteristics::~VenueLayerLayoutCharacteristics(md::VenueLayerLayoutCharacteristics *this)
{
  void *v2;

  *(_QWORD *)this = off_1E42A5CF8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E42A5CF8;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::VenueLayerLayoutCharacteristics::commandBuffer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::VenueLayerLayoutCharacteristics::shouldStencil(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (!*(_BYTE *)(a1 + 9) || !*(_BYTE *)(a1 + 55))
    return 0;
  *a3 = -1;
  return 1;
}

unint64_t md::VenueLayerLayoutCharacteristics::renderOrderForAttributes(uint64_t a1, int a2, uint64_t a3, int a4, unint64_t a5, unsigned int a6, int a7, _QWORD *a8, void *a9)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = *(unsigned __int8 *)(a1 + 9);
  v17 = (20 * (__int16)objc_msgSend(a9, "layer")) | 2;
  if (!v16)
    v17 = 2;
  v18 = 0x800000000;
  if (!a4)
    v18 = 0;
  v19 = 0x2000000;
  if (a2)
    v19 = 0;
  v20 = 0x20000;
  if (!a7)
    v20 = 0;
  return (v19 & 0xFFFFFFFFFFFE01FFLL | (a3 << 26) | v18 & 0xFFFFFFFFFFFE01FFLL | ((unint64_t)a6 << 18) | v20 & 0xFFFFFFFFFFFE01FFLL | ((unint64_t)(a5 >> 4) << 9) | ((unint64_t)*(unsigned __int8 *)(a5 + 1) << 20) | (*a8 >> 3) & 0x1FELL)
       + v17;
}

uint64_t md::VenueLayerLayoutCharacteristics::modifiesMVCForPolygonGroup(md::VenueLayerLayoutCharacteristics *this, const VKPolygonGroup *a2)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 7) + 288);
}

void md::VenueLayerLayoutCharacteristics::modifyMVCForPolygonGroup(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, _OWORD *a6@<X8>)
{
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  unsigned __int16 v21;
  unint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  float64x2_t v27[8];
  char v28;
  float64x2_t *v29;

  v11 = a5;
  v12 = v11;
  if (*(_BYTE *)(a1 + 9) && *(_BYTE *)(*(_QWORD *)(a1 + 56) + 288))
  {
    v13 = v11;
    v14 = objc_msgSend(v13, "buildingId");
    v15 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
    do
    {
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_16;
      v16 = v15[3];
      v18 = *(_QWORD **)(v16 + 16);
      v17 = *(_QWORD **)(v16 + 24);
      if (v18 != v17)
      {
        while (v18[3] != v14)
        {
          v18 += 15;
          if (v18 == v17)
          {
            v18 = v17;
            break;
          }
        }
      }
    }
    while (v18 == v17);
    if (!v18)
    {
LABEL_16:
      v25 = a3[1];
      *a6 = *a3;
      a6[1] = v25;
      v26 = a3[3];
      a6[2] = a3[2];
      a6[3] = v26;
      goto LABEL_17;
    }
    v21 = objc_msgSend(v13, "layer");
    if ((*(_BYTE *)(*(_QWORD *)a2 + 16) & 2) == 0)
    {
      v22 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v22 != -1)
      {
        *(_QWORD *)&v27[0].f64[0] = &v28;
        v29 = v27;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    md::VenueLayerLayoutCharacteristics::offsetLevel(v27[0].f64, a1, (double *)(*(_QWORD *)(a1 + 56) + 144), a4, v18, v21);
    v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27[2]), v27[3]);
    *a6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27[0]), v27[1]);
    a6[1] = v23;
    v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27[6]), v27[7]);
    a6[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27[4]), v27[5]);
    a6[3] = v24;
LABEL_17:

  }
  else
  {
    v19 = a3[1];
    *a6 = *a3;
    a6[1] = v19;
    v20 = a3[3];
    a6[2] = a3[2];
    a6[3] = v20;
  }

}

void sub_19F847BAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL md::VenueLayerLayoutCharacteristics::shouldCullPolygonGroup(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v7;
  void *v8;
  _BOOL8 shouldCullPolygonGroup;

  v7 = a3;
  v8 = v7;
  if (v7)
    shouldCullPolygonGroup = md::VenueLayerLayoutCharacteristics::shouldCullPolygonGroup(a1, a2, objc_msgSend(v7, "buildingId"), objc_msgSend(v7, "layer"), objc_msgSend(v7, "cullingMask"), a4);
  else
    shouldCullPolygonGroup = 0;

  return shouldCullPolygonGroup;
}

void sub_19F847C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::VenueLayerLayoutCharacteristics::shouldLayoutPolygonGroup(int8x8_t **this, VKPolygonGroup *a2, unsigned int a3)
{
  VKPolygonGroup *v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a2;
  v6 = md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(this[7], -[VKPolygonGroup buildingId](v5, "buildingId"));
  v7 = -[VKPolygonGroup layer](v5, "layer");
  if (v7 == v6)
    v8 = 1;
  else
    v8 = a3;
  if (a3 && v7 != v6)
    v8 = -[VKPolygonGroup layer](v5, "layer") != v6;
  if (*((_BYTE *)this + 9))
  {
    v9 = -[VKPolygonGroup layer](v5, "layer");
    if (v5)
    {
      -[VKPolygonGroup styleAttributes](v5, "styleAttributes");
      if (v14)
      {
        v15 = v14;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v14, v16 - v14);
      }
    }
    v10 = v14;
    if (v14 != v15)
    {
      while (1)
      {
        v11 = *(unsigned __int16 *)(v10 + 4);
        if (*(_DWORD *)v10 == 3 && v11 == 113)
        {
          v8 = v6 >= v9;
          goto LABEL_22;
        }
        if (*(_DWORD *)v10 == 3 && v11 == 31)
          break;
        v10 += 8;
        if (v10 == v15)
          goto LABEL_22;
      }
      v8 = 0;
    }
  }
LABEL_22:

  return v8;
}

void sub_19F847D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::VenueLayerLayoutCharacteristics::focusState(md::VenueLayerLayoutCharacteristics *this, VKPolygonGroup *a2)
{
  VKPolygonGroup *v3;
  VKPolygonGroup *v4;
  _QWORD *v5;
  VKPolygonGroup *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD **)(*((_QWORD *)this + 7) + 272);
  if (v5)
  {
    v6 = v3;
    v7 = *((_QWORD *)this + 7);
    v8 = -[VKPolygonGroup buildingId](v6, "buildingId");
    v9 = (_QWORD *)(v7 + 16);
    do
    {
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_13;
      v10 = v9[3];
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      if (v11 != v12)
      {
        while (*(_QWORD *)(v11 + 24) != v8)
        {
          v11 += 120;
          if (v11 == v12)
          {
            v11 = v12;
            break;
          }
        }
      }
    }
    while (v11 == v12);
    if (!v11)
    {
LABEL_13:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v14 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v16 = 134217984;
        v17 = -[VKPolygonGroup buildingId](v6, "buildingId");
        _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "building is null, venueGroups is null or there is no corresponding building for this venue group, and the venueGourp.building ID is : %llu .", (uint8_t *)&v16, 0xCu);
      }

      goto LABEL_18;
    }
    if (*(_QWORD *)(v11 + 40) == *v5)
    {
      v13 = 1;
      goto LABEL_19;
    }
LABEL_18:
    v13 = 0;
LABEL_19:

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_19F847F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float md::VenueLayerLayoutCharacteristics::tileScale(md::VenueLayerLayoutCharacteristics *this)
{
  return *(float *)(*((_QWORD *)this + 7) + 284);
}

void md::VenueLayerLayoutCharacteristics::getOverridePolygonDepthType(md::VenueLayerLayoutCharacteristics *this@<X0>, VKPolygonGroup *a2@<X1>, _BYTE *a3@<X8>)
{
  VKPolygonGroup *v5;
  VKPolygonGroup *v6;
  uint64_t v7;
  char v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a2;
  v6 = v5;
  if (*((_BYTE *)this + 9) && *(_BYTE *)(*((_QWORD *)this + 7) + 288))
  {
    if (!v5)
      goto LABEL_17;
    -[VKPolygonGroup styleAttributes](v5, "styleAttributes");
    if (v11)
    {
      v12 = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v11, v13 - v11);
    }
    v7 = v11;
    if (v11 == v12)
    {
LABEL_17:
      v10 = 3;
    }
    else
    {
      v8 = 0;
      do
      {
        if (*(_WORD *)(v7 + 4) == 113 && *(_DWORD *)v7 == 3)
          v8 = 1;
        v7 += 8;
      }
      while (v7 != v12);
      v10 = v8 & 1 ^ 3;
    }
    *a3 = 1;
    a3[1] = v10;
  }
  else
  {
    *a3 = 0;
  }

}

void sub_19F848038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float md::PolygonLayoutCharacteristics::maxMiterOffset(md::PolygonLayoutCharacteristics *this)
{
  return 2.0;
}

BOOL md::VenueLayerLayoutCharacteristics::shouldCullPolygonGroup(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, int a5, int a6)
{
  unint64_t v11;
  uint64_t v12;
  double *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  char v27;
  float64x2_t *v28;

  if (*(_BYTE *)(a1 + 9))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 232) + 16) & 2) == 0)
    {
      v11 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v11 != -1)
      {
        *(_QWORD *)&v19.f64[0] = &v27;
        v28 = &v19;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v12 = *(_QWORD *)(a1 + 56);
    v13 = (double *)(v12 + 144);
    v14 = (_QWORD *)(v12 + 16);
    while (1)
    {
      v14 = (_QWORD *)*v14;
      if (!v14)
        break;
      v15 = v14[3];
      v16 = *(_QWORD **)(v15 + 16);
      v17 = *(_QWORD **)(v15 + 24);
      if (v16 != v17)
      {
        while (v16[3] != a3)
        {
          v16 += 15;
          if (v16 == v17)
          {
            v16 = v17;
            break;
          }
        }
      }
      if (v16 != v17)
        goto LABEL_13;
    }
    v16 = 0;
LABEL_13:
    md::VenueLayerLayoutCharacteristics::offsetLevel(v19.f64, a1, v13, a2 + 88, v16, a4);
    v19 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v19), v20);
    v20 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21), v22);
    v21 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v23), v24);
    v22 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v25), v26);
    a6 = ggl::CullingGrid::intersectedCellsForView((float *)&v19, 0.0);
  }
  return (a6 & a5) == 0;
}

void md::VenueLayerLayoutCharacteristics::offsetLevel(double *a1, uint64_t a2, double *a3, uint64_t a4, _QWORD *a5, unsigned __int16 a6)
{
  double v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  int8x8_t v29;
  uint8x8_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  BOOL v50;
  double v51;
  long double v52;
  long double v53;
  long double v54;
  double v55;
  double v56;
  double v57;
  __double2 v58;
  double v59;
  __double2 v60;
  double v61;
  double v62;
  __double2 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[6];
  __int128 v69;
  __int128 v70;

  if (!a5)
    return;
  v12 = COERCE_DOUBLE(md::VenueLogicContext::buildingElevation(*(md::VenueLogicContext **)(a2 + 56), a5[3], 1));
  v14 = *(_QWORD *)(a2 + 56);
  v15 = a5[3];
  v16 = *(int8x8_t *)(v14 + 48);
  if (!*(_QWORD *)&v16)
    goto LABEL_22;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = a5[3];
    if (v15 >= *(_QWORD *)&v16)
      v18 = v15 % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & v15;
  }
  v19 = *(_QWORD **)(*(_QWORD *)(v14 + 40) + 8 * v18);
  if (!v19 || (v20 = (_QWORD *)*v19) == 0)
  {
LABEL_22:
    v24 = (unsigned __int16 *)(a5 + 7);
    goto LABEL_23;
  }
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v15 == v23)
      {
        if (v20[2] == v15)
          goto LABEL_51;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_22;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v22 = v20[1];
    if (v15 == v22)
      break;
    if (v22 >= *(_QWORD *)&v16)
      v22 %= *(_QWORD *)&v16;
    if (v22 != v18)
      goto LABEL_22;
LABEL_12:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_22;
  }
  if (v20[2] != v15)
    goto LABEL_12;
LABEL_51:
  v24 = (unsigned __int16 *)(v20 + 3);
LABEL_23:
  v25 = a5[1];
  if (*a5 != v25)
  {
    v26 = *v24;
    v27 = *a5 + 184;
    do
    {
      v28 = *(unsigned __int16 *)(v27 - 176) == v26 || v27 == v25;
      v27 += 184;
    }
    while (!v28);
  }
  v29 = *(int8x8_t *)(v14 + 312);
  if (!*(_QWORD *)&v29)
    goto LABEL_56;
  v30 = (uint8x8_t)vcnt_s8(v29);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    v31 = a5[3];
    if (*(_QWORD *)&v29 <= v15)
      v31 = v15 % *(_QWORD *)&v29;
  }
  else
  {
    v31 = (*(_QWORD *)&v29 - 1) & v15;
  }
  v32 = *(_QWORD **)(*(_QWORD *)(v14 + 304) + 8 * v31);
  if (!v32)
    goto LABEL_56;
  v33 = (_QWORD *)*v32;
  if (!v33)
    goto LABEL_56;
  if (v30.u32[0] < 2uLL)
  {
    v34 = *(_QWORD *)&v29 - 1;
    while (1)
    {
      v36 = v33[1];
      if (v36 == v15)
      {
        if (v33[2] == v15)
          goto LABEL_52;
      }
      else if ((v36 & v34) != v31)
      {
        goto LABEL_56;
      }
      v33 = (_QWORD *)*v33;
      if (!v33)
        goto LABEL_56;
    }
  }
  while (1)
  {
    v35 = v33[1];
    if (v35 == v15)
      break;
    if (v35 >= *(_QWORD *)&v29)
      v35 %= *(_QWORD *)&v29;
    if (v35 != v31)
      goto LABEL_56;
LABEL_40:
    v33 = (_QWORD *)*v33;
    if (!v33)
      goto LABEL_56;
  }
  if (v33[2] != v15)
    goto LABEL_40;
LABEL_52:
  v37 = v33[3];
  v38 = v33[4];
  if (v37 == v38)
  {
LABEL_56:
    v39 = 0;
    goto LABEL_57;
  }
  while (*(unsigned __int16 *)(v37 + 32) != a6)
  {
    v39 = 0;
    v37 += 56;
    if (v37 == v38)
      goto LABEL_57;
  }
  v39 = v37;
LABEL_57:
  if (v13)
    v40 = v12;
  else
    v40 = 0.0;
  v41 = COERCE_DOUBLE(md::VenueLogicContext::buildingElevation(*(md::VenueLogicContext **)(a2 + 56), v15, 1));
  if (v42)
  {
    v43 = (_QWORD *)(v14 + 16);
    while (1)
    {
      v43 = (_QWORD *)*v43;
      if (!v43)
        break;
      v44 = v43[3];
      v45 = *(uint64_t **)(v44 + 16);
      v46 = *(uint64_t **)(v44 + 24);
      if (v45 != v46)
      {
        while (v45[3] != v15)
        {
          v45 += 15;
          if (v45 == v46)
          {
            v45 = v46;
            break;
          }
        }
      }
      if (v45 != v46)
      {
        if (v45)
        {
          v47 = *v45;
          v48 = v45[1];
          if (v47 != v48)
          {
            while (*(unsigned __int16 *)(v47 + 8) != a6)
            {
              v47 += 184;
              if (v47 == v48)
                goto LABEL_76;
            }
            if (*(_BYTE *)(v47 + 168))
            {
              v41 = *(double *)(v47 + 176) * *(float *)(v14 + 292);
              v42 = 1;
            }
          }
        }
        break;
      }
    }
  }
  else
  {
    v42 = 0;
  }
LABEL_76:
  v49 = v41;
  if (!v42)
    v49 = v40;
  if (*(_BYTE *)(a2 + 54))
    v50 = v39 == 0;
  else
    v50 = 1;
  if (v50)
    v51 = v49 + 0.100000001;
  else
    v51 = *(double *)(v39 + 16) + v40;
  v52 = *(double *)(a4 + 96);
  v53 = *(double *)(a4 + 104);
  v54 = *(double *)(a4 + 112);
  v55 = sqrt(v52 * v52 + v53 * v53);
  v56 = atan2(v54, v55 * 0.996647189);
  v57 = atan2(v53, v52);
  v58 = __sincos_stret(v56);
  v59 = atan2(v54 + v58.__sinval * v58.__sinval * 42841.3115 * v58.__sinval, v55 + v58.__cosval * v58.__cosval * -42697.6727 * v58.__cosval);
  v60 = __sincos_stret(v59);
  v61 = 6378137.0 / sqrt(v60.__sinval * v60.__sinval * -0.00669437999 + 1.0);
  v62 = (v61 + v51) * v60.__cosval;
  v63 = __sincos_stret(v57);
  v64 = *(_OWORD *)(a4 + 112);
  v69 = *(_OWORD *)(a4 + 96);
  v70 = v64;
  v65 = *(_OWORD *)(a4 + 80);
  v68[4] = *(_OWORD *)(a4 + 64);
  v68[5] = v65;
  v66 = *(_OWORD *)(a4 + 16);
  v68[0] = *(_OWORD *)a4;
  v68[1] = v66;
  v67 = *(_OWORD *)(a4 + 48);
  v68[2] = *(_OWORD *)(a4 + 32);
  v68[3] = v67;
  *(double *)&v69 = v62 * v63.__cosval;
  *((double *)&v69 + 1) = v62 * v63.__sinval;
  *(double *)&v70 = (v51 + v61 * 0.99330562) * v60.__sinval;
  gm::operator*<double,4,4,4>(a1, a3, (double *)v68);
}

uint64_t md::VenueRenderLayer::_venuesCommandBuffer(md::VenueRenderLayer *this, int8x8_t *a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = a2[1];
  if (!*(_QWORD *)&v2)
    goto LABEL_24;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v2 <= 0x8BD499FBD96FBB9ELL)
      v4 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v5 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v4);
  if (!v5)
    goto LABEL_24;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_24;
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == 0x8BD499FBD96FBB9ELL)
      {
        if (v6[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_22;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_24;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      goto LABEL_24;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_24;
  }
  if (v6[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_11;
LABEL_22:
  v10 = v6[5];
  if (*(_QWORD *)(v10 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_24:
    v11 = 0;
    goto LABEL_25;
  }
  v11 = *(_QWORD *)(v10 + 32);
LABEL_25:
  if (*(float *)(v11 + 16) <= 0.01)
  {
    if (*(_BYTE *)(v11 + 3))
      v12 = (unsigned __int8 *)this + 484;
    else
      v12 = (unsigned __int8 *)this + 482;
  }
  else
  {
    v12 = (unsigned __int8 *)this + 482;
  }
  if (!*((_BYTE *)this + 393))
    v12 = (unsigned __int8 *)this + 480;
  v13 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v14 = v13[3];
  v15 = v13[4];
  v16 = v15 - v14;
  if (v15 == v14)
    return 0;
  v17 = 0;
  v18 = v16 >> 3;
  while (1)
  {
    v19 = *(unsigned __int8 **)(v14 + 8 * v17);
    if (*v19 == *v12)
    {
      v20 = *((_QWORD *)v19 + 1);
      v21 = v13[15];
      if (v20 < (v13[16] - v21) >> 3)
        break;
    }
    if (++v17 >= v18)
      return 0;
  }
  v22 = *(_QWORD *)(v21 + 8 * v20);
  if (!v22)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v22 + 24) + 8 * v12[1]);
}

md::VenueRenderLayer *md::VenueRenderLayer::_layoutDimmingOverlay(md::VenueRenderLayer *this, int8x8_t *a2)
{
  int8x8_t v2;
  md::VenueRenderLayer *v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  float64x2_t *v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;

  v2 = a2[1];
  if (!*(_QWORD *)&v2)
    return this;
  v3 = this;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = v4.u32[0];
  if (v4.u32[0] > 1uLL)
  {
    v6 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v2 <= 0x4927EB92E562CC46uLL)
      v6 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v2;
  }
  else
  {
    v6 = (*(_QWORD *)&v2 - 1) & 0x4927EB92E562CC46;
  }
  v7 = *a2;
  v8 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v6);
  if (!v8)
    return this;
  v9 = (_QWORD *)*v8;
  if (!v9)
    return this;
  v10 = *(_QWORD *)&v2 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x4927EB92E562CC46)
      {
        if (v9[2] == 0x4927EB92E562CC46)
          goto LABEL_22;
      }
      else if ((v11 & v10) != v6)
      {
        return this;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return this;
    }
  }
  while (1)
  {
    v12 = v9[1];
    if (v12 == 0x4927EB92E562CC46)
      break;
    if (v12 >= *(_QWORD *)&v2)
      v12 %= *(_QWORD *)&v2;
    if (v12 != v6)
      return this;
LABEL_16:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return this;
  }
  if (v9[2] != 0x4927EB92E562CC46)
    goto LABEL_16;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x4927EB92E562CC46)
  {
    v14 = *(_QWORD *)(v13 + 32);
    if (v14)
    {
      if (*(float *)(v14 + 280) >= 0.00000011921)
      {
        if (v4.u32[0] > 1uLL)
        {
          v15 = 0x3070CB6B3C7F21D3;
          if (*(_QWORD *)&v2 <= 0x3070CB6B3C7F21D3uLL)
            v15 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v2;
        }
        else
        {
          v15 = v10 & 0x3070CB6B3C7F21D3;
        }
        v16 = *(_QWORD **)(*(_QWORD *)&v7 + 8 * v15);
        if (v16)
        {
          v17 = (_QWORD *)*v16;
          if (v17)
          {
            if (v4.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v17[1];
                if (v18 == 0x3070CB6B3C7F21D3)
                {
                  if (v17[2] == 0x3070CB6B3C7F21D3)
                    goto LABEL_45;
                }
                else if ((v18 & v10) != v15)
                {
                  return this;
                }
                v17 = (_QWORD *)*v17;
                if (!v17)
                  return this;
              }
            }
            do
            {
              v19 = v17[1];
              if (v19 == 0x3070CB6B3C7F21D3)
              {
                if (v17[2] == 0x3070CB6B3C7F21D3)
                {
LABEL_45:
                  v20 = v17[5];
                  if (*(_QWORD *)(v20 + 8) == 0x3070CB6B3C7F21D3)
                  {
                    v21 = *(_QWORD *)(v20 + 32);
                    if (v21)
                    {
                      v22 = md::VenueRenderLayer::_venuesCommandBuffer(this, a2);
                      if (v5 >= 2)
                      {
                        v24 = 0x1AF456233693CD46;
                        if (*(_QWORD *)&v2 <= 0x1AF456233693CD46uLL)
                          v24 = 0x1AF456233693CD46uLL % *(_QWORD *)&v2;
                        v23 = *(_QWORD **)(*(_QWORD *)&v7 + 8 * v24);
                        do
                        {
                          do
                            v23 = (_QWORD *)*v23;
                          while (v23[1] != 0x1AF456233693CD46);
                        }
                        while (v23[2] != 0x1AF456233693CD46);
                      }
                      else
                      {
                        v23 = *(_QWORD **)(*(_QWORD *)&v7 + 8 * (v10 & 0x1AF456233693CD46));
                        do
                        {
                          do
                            v23 = (_QWORD *)*v23;
                          while (v23[1] != 0x1AF456233693CD46);
                        }
                        while (v23[2] != 0x1AF456233693CD46);
                      }
                      v25 = *(float64x2_t **)(v23[5] + 32);
                      v26 = vcvt_f32_f64(v25[175]);
                      v27 = vcvt_f32_f64(v25[176]);
                      v28 = vcvt_f32_f64(v25[177]);
                      v29 = vcvt_f32_f64(v25[178]);
                      v30 = vcvt_f32_f64(v25[179]);
                      v31 = vcvt_f32_f64(v25[180]);
                      v32 = vcvt_f32_f64(v25[181]);
                      v33 = vcvt_f32_f64(v25[182]);
                      v34 = **((_QWORD **)v3 + 47);
                      v61 = 0;
                      v62 = 0;
                      v59 = 0;
                      v60 = 0;
                      v35 = *(_QWORD *)(v34 + 8);
                      v63 = (std::__shared_weak_count *)v34;
                      v64 = 0;
                      v65 = v35;
                      v66 = 1;
                      if (v35)
                        v36 = *(_QWORD *)(v34 + 72);
                      else
                        v36 = 0;
                      v67 = v36;
                      ggl::BufferMemory::operator=(&v59, (uint64_t)&v62);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v62);
                      v37 = (_QWORD *)v61;
                      *(float32x2_t *)v61 = v26;
                      v37[1] = v27;
                      v37[2] = v28;
                      v37[3] = v29;
                      v37[4] = v30;
                      v37[5] = v31;
                      v37[6] = v32;
                      v37[7] = v33;
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v59);
                      v38 = *(_DWORD *)(v14 + 280);
                      v39 = *(_QWORD *)(*((_QWORD *)v3 + 47) + 16);
                      v61 = 0;
                      v62 = 0;
                      v59 = 0;
                      v60 = 0;
                      v40 = *(_QWORD *)(v39 + 8);
                      v63 = (std::__shared_weak_count *)v39;
                      v64 = 0;
                      v65 = v40;
                      v66 = 1;
                      if (v40)
                        v41 = *(_QWORD *)(v39 + 72);
                      else
                        v41 = 0;
                      v67 = v41;
                      ggl::BufferMemory::operator=(&v59, (uint64_t)&v62);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v62);
                      v42 = v61;
                      *(_DWORD *)(v61 + 72) = 0;
                      *(_QWORD *)(v42 + 64) = 0;
                      *(_DWORD *)(v42 + 76) = v38;
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v59);
                      ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)v3 + 47) + 64) + 64), *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v3 + 47) + 64) + 160), **((_QWORD **)v3 + 47), *(_QWORD *)(*((_QWORD *)v3 + 47) + 8));
                      v43 = *(_QWORD *)(*((_QWORD *)v3 + 47) + 64);
                      md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v62);
                      v44 = *(_QWORD *)(v43 + 64);
                      v45 = *(_QWORD *)(v43 + 160);
                      v46 = v63;
                      ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(v44, v45, v62, (uint64_t)v63);
                      if (v46)
                      {
                        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
                        do
                          v48 = __ldaxr(p_shared_owners);
                        while (__stlxr(v48 - 1, p_shared_owners));
                        if (!v48)
                        {
                          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                          std::__shared_weak_count::__release_weak(v46);
                        }
                      }
                      v49 = v21 + 144;
                      v50 = 144;
                      if (*(unsigned __int8 *)(v21 + 320) - 1 >= 3)
                      {
                        v50 = 128;
                        v49 = v21 + 128;
                      }
                      v51 = *((_QWORD *)v3 + 47);
                      v52 = *(_QWORD *)(v21 + v50);
                      v53 = *(_QWORD *)(v49 + 8);
                      if (v53)
                      {
                        v54 = (unint64_t *)(v53 + 8);
                        do
                          v55 = __ldxr(v54);
                        while (__stxr(v55 + 1, v54));
                      }
                      v56 = *(std::__shared_weak_count **)(v51 + 56);
                      *(_QWORD *)(v51 + 48) = v52;
                      *(_QWORD *)(v51 + 56) = v53;
                      if (v56)
                      {
                        v57 = (unint64_t *)&v56->__shared_owners_;
                        do
                          v58 = __ldaxr(v57);
                        while (__stlxr(v58 - 1, v57));
                        if (!v58)
                        {
                          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                          std::__shared_weak_count::__release_weak(v56);
                        }
                      }
                      *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 47) + 504) + 64) = *(_QWORD *)(*((_QWORD *)v3 + 47)
                                                                                                + 48);
                      *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 47) + 504) + 64) = *(_QWORD *)(*((_QWORD *)v3 + 47)
                                                                                                + 48);
                      return (md::VenueRenderLayer *)ggl::CommandBuffer::pushRenderItem(v22, *(ggl::RenderItem **)(*((_QWORD *)v3 + 47) + 504));
                    }
                  }
                  return this;
                }
              }
              else
              {
                if (v19 >= *(_QWORD *)&v2)
                  v19 %= *(_QWORD *)&v2;
                if (v19 != v15)
                  return this;
              }
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
      }
    }
  }
  return this;
}

void md::VenueRenderLayer::_forEachVisibleVenueGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  int8x8_t *v8;
  int8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t *v29;
  float v30;
  float v31;
  uint64_t v32;
  char v33;
  double v34;
  double v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  float32x4_t *v41;
  float32x4_t v42;
  float32x4_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t i;
  id v52;
  float64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int8x8_t *v57;
  id v58;
  uint64_t v59;
  int8x8_t *v60;
  int8x8_t v61;
  uint64_t *v62;
  uint64_t *v63;
  int8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  id v68;
  void *v69;
  BOOL shouldCullPolygonGroup;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _BOOL4 v80;
  id v81;
  signed __int16 v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  id v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unsigned __int16 v99;
  id v100;
  uint64_t *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  uint64_t v113;
  unint64_t v114;
  float32x4_t *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  int8x8_t *v121;
  id v122;
  void *v123;
  BOOL v124;
  id v125;
  int v126;
  int v127;
  __int16 v128;
  float64_t v129;
  int v130;
  BOOL v132;
  id v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t *v138;
  id *v139;
  uint64_t v140;
  id v141;
  uint64_t *v142;
  double *v144;
  uint64_t v145;
  int8x8_t *v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  _QWORD v161[3];
  char v162;
  float v163;
  int v164;
  __int32 v165;
  double v166;
  int v167;
  float v168;
  uint64_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  char v176;
  _QWORD v177[2];

  v141 = *(id *)(*(_QWORD *)(a1 + 40) + 104);
  v4 = *(int8x8_t **)(a2 + 8);
  v5 = v4[1];
  if (!*(_QWORD *)&v5)
  {
    v8 = 0;
    v139 = 0;
    v140 = 0;
    goto LABEL_72;
  }
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v5 <= 0x1AF456233693CD46uLL)
      v7 = 0x1AF456233693CD46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1AF456233693CD46;
  }
  v9 = *v4;
  v10 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v7);
  if (!v10)
    goto LABEL_25;
  v11 = (_QWORD *)*v10;
  if (!v11)
    goto LABEL_25;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v13 = v11[1];
      if (v13 == 0x1AF456233693CD46)
      {
        if (v11[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v13 & (*(_QWORD *)&v5 - 1)) != v7)
      {
        goto LABEL_25;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v12 = v11[1];
    if (v12 == 0x1AF456233693CD46)
      break;
    if (v12 >= *(_QWORD *)&v5)
      v12 %= *(_QWORD *)&v5;
    if (v12 != v7)
      goto LABEL_25;
LABEL_12:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_25;
  }
  if (v11[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v14 = v11[5];
  if (*(_QWORD *)(v14 + 8) == 0x1AF456233693CD46)
  {
    v140 = *(_QWORD *)(v14 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v140 = 0;
LABEL_26:
  if (v6.u32[0] > 1uLL)
  {
    v15 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v5 <= 0x4927EB92E562CC46uLL)
      v15 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v15 = (*(_QWORD *)&v5 - 1) & 0x4927EB92E562CC46;
  }
  v16 = *(_QWORD **)(*(_QWORD *)&v9 + 8 * v15);
  if (!v16)
    goto LABEL_48;
  v17 = (_QWORD *)*v16;
  if (!v17)
    goto LABEL_48;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v19 = v17[1];
      if (v19 == 0x4927EB92E562CC46)
      {
        if (v17[2] == 0x4927EB92E562CC46)
          goto LABEL_46;
      }
      else if ((v19 & (*(_QWORD *)&v5 - 1)) != v15)
      {
        goto LABEL_48;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v18 = v17[1];
    if (v18 != 0x4927EB92E562CC46)
    {
      if (v18 >= *(_QWORD *)&v5)
        v18 %= *(_QWORD *)&v5;
      if (v18 != v15)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v17[2] != 0x4927EB92E562CC46)
    {
LABEL_35:
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v20 = v17[5];
  if (*(_QWORD *)(v20 + 8) == 0x4927EB92E562CC46)
  {
    v8 = *(int8x8_t **)(v20 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v8 = 0;
LABEL_49:
  if (v6.u32[0] > 1uLL)
  {
    v21 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v5 <= 0xA60DDA5A69582425)
      v21 = 0xA60DDA5A69582425 % *(_QWORD *)&v5;
  }
  else
  {
    v21 = (*(_QWORD *)&v5 - 1) & 0xA60DDA5A69582425;
  }
  v22 = *(_QWORD **)(*(_QWORD *)&v9 + 8 * v21);
  if (!v22)
    goto LABEL_71;
  v23 = (_QWORD *)*v22;
  if (!v23)
    goto LABEL_71;
  if (v6.u32[0] < 2uLL)
  {
    v24 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v26 = v23[1];
      if (v26 == 0xA60DDA5A69582425)
      {
        if (v23[2] == 0xA60DDA5A69582425)
          goto LABEL_69;
      }
      else if ((v26 & v24) != v21)
      {
        goto LABEL_71;
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v25 = v23[1];
    if (v25 != 0xA60DDA5A69582425)
    {
      if (v25 >= *(_QWORD *)&v5)
        v25 %= *(_QWORD *)&v5;
      if (v25 != v21)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v23[2] != 0xA60DDA5A69582425)
    {
LABEL_58:
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v27 = v23[5];
  if (*(_QWORD *)(v27 + 8) == 0xA60DDA5A69582425)
  {
    v139 = *(id **)(v27 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v139 = 0;
LABEL_72:
  md::LayoutContext::zoomAtCentrePoint(v4);
  v29 = *(uint64_t **)(a1 + 272);
  v138 = *(uint64_t **)(a1 + 280);
  if (v29 == v138)
    goto LABEL_216;
  v30 = v28;
  v149 = a1 + 384;
  v31 = ceilf(v28);
  v144 = (double *)&v8[18];
  v146 = v8 + 2;
LABEL_75:
  v32 = *(_QWORD *)(*v29 + 384);
  v33 = *(_BYTE *)(v32 + 169);
  v34 = *(double *)(v140 + 3768);
  v35 = *(double *)(v140 + 1368);
  v37 = *(_QWORD *)(*v29 + 216);
  v36 = *(std::__shared_weak_count **)(*v29 + 224);
  v150 = *v29;
  v174 = v37;
  v175 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  if ((*(_BYTE *)(v37 + 16) & 2) == 0)
  {
    v40 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v40 != -1)
    {
      *(_QWORD *)&v153.f64[0] = v177;
      v161[0] = &v153;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v161, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v41 = *(float32x4_t **)(v37 + 72);
  v42 = v41[1];
  v170 = *v41;
  v171 = v42;
  v43 = v41[3];
  v172 = v41[2];
  v173 = v43;
  v44 = ggl::CullingGrid::intersectedCellsForView(v170.f32, 0.0);
  v45 = *(_DWORD *)(v32 + 744);
  v161[0] = &v174;
  objc_msgSend(v141, "size");
  v161[1] = v46;
  v161[2] = v47;
  v48 = *(unsigned __int8 *)(v32 + 169);
  v162 = *(_BYTE *)(v32 + 169);
  v163 = v30;
  v164 = 1065353216;
  v165 = v8[35].i32[1];
  v166 = v34 * (double)(1 << v33) / v35;
  v167 = v44;
  v49 = (uint64_t)(float)v45;
  if (v49)
  {
    if (v49 < 513)
    {
      v50 = 0;
      i = 512;
    }
    else
    {
      v50 = 0;
      for (i = 512; i < v49; i *= 2)
        ++v50;
    }
    while (i > v49)
    {
      --v50;
      v49 *= 2;
    }
  }
  else
  {
    v50 = 0;
  }
  v168 = exp2f(v31 - (float)(v50 + v48)) * (float)v45;
  v52 = *v139;
  objc_msgSend(v52, "textureManager");
  v147 = v44;
  v53 = v153.f64[1];
  v169 = **(_QWORD **)&v153.f64[0];
  if (*(_QWORD *)&v153.f64[1])
  {
    v54 = (unint64_t *)(*(_QWORD *)&v153.f64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      (*(void (**)(float64_t))(**(_QWORD **)&v53 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v53));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v53);
    }
  }
  v142 = v29;

  v56 = *(_QWORD *)(v32 + 752);
  v151 = *(_QWORD *)(v32 + 760);
  v57 = v146;
  if (v56 == v151)
    goto LABEL_211;
  v145 = v150 + 88;
  while (2)
  {
    if (!*(_BYTE *)(a1 + 393))
    {
      v68 = *(id *)(v56 + 8);
      if (v68)
      {
        v69 = v68;
        shouldCullPolygonGroup = md::VenueLayerLayoutCharacteristics::shouldCullPolygonGroup(v149, v150, objc_msgSend(v68, "buildingId"), objc_msgSend(v69, "layer"), objc_msgSend(v69, "cullingMask"), v147);

        if (shouldCullPolygonGroup)
          goto LABEL_97;
      }
    }
    v58 = *(id *)(v56 + 8);
    v59 = objc_msgSend(v58, "buildingId");

    v60 = v57;
    do
    {
      v60 = (int8x8_t *)*v60;
      if (!v60)
        goto LABEL_97;
      v61 = v60[3];
      v63 = *(uint64_t **)(*(_QWORD *)&v61 + 16);
      v62 = *(uint64_t **)(*(_QWORD *)&v61 + 24);
      if (v63 != v62)
      {
        while (v63[3] != v59)
        {
          v63 += 15;
          if (v63 == v62)
          {
            v63 = v62;
            break;
          }
        }
      }
    }
    while (v63 == v62);
    if (!v63)
      goto LABEL_97;
    v64 = v8[6];
    if (!*(_QWORD *)&v64)
      goto LABEL_130;
    v65 = v63[3];
    v66 = (uint8x8_t)vcnt_s8(v64);
    v66.i16[0] = vaddlv_u8(v66);
    if (v66.u32[0] > 1uLL)
    {
      v67 = v63[3];
      if (v65 >= *(_QWORD *)&v64)
        v67 = v65 % *(_QWORD *)&v64;
    }
    else
    {
      v67 = (*(_QWORD *)&v64 - 1) & v65;
    }
    v71 = *(_QWORD **)(*(_QWORD *)&v8[5] + 8 * v67);
    if (!v71 || (v72 = (_QWORD *)*v71) == 0)
    {
LABEL_130:
      v76 = (unsigned __int16 *)(v63 + 7);
      goto LABEL_131;
    }
    if (v66.u32[0] < 2uLL)
    {
      v73 = *(_QWORD *)&v64 - 1;
      while (1)
      {
        v75 = v72[1];
        if (v65 == v75)
        {
          if (v72[2] == v65)
            goto LABEL_210;
        }
        else if ((v75 & v73) != v67)
        {
          goto LABEL_130;
        }
        v72 = (_QWORD *)*v72;
        if (!v72)
          goto LABEL_130;
      }
    }
    while (2)
    {
      v74 = v72[1];
      if (v65 != v74)
      {
        if (v74 >= *(_QWORD *)&v64)
          v74 %= *(_QWORD *)&v64;
        if (v74 != v67)
          goto LABEL_130;
        goto LABEL_120;
      }
      if (v72[2] != v65)
      {
LABEL_120:
        v72 = (_QWORD *)*v72;
        if (!v72)
          goto LABEL_130;
        continue;
      }
      break;
    }
LABEL_210:
    v76 = (unsigned __int16 *)(v72 + 3);
LABEL_131:
    v78 = *v63;
    v77 = v63[1];
    if (*v63 == v77)
    {
      v80 = 0;
    }
    else
    {
      v79 = *v76;
      while (*(unsigned __int16 *)(v78 + 8) != v79)
      {
        v78 += 184;
        if (v78 == v77)
        {
          v78 = v63[1];
          break;
        }
      }
      v80 = v78 != v77;
    }
    v81 = *(id *)(v56 + 8);
    v82 = objc_msgSend(v81, "layer");

    v148 = *((__int16 *)v63 + 28);
    v83 = md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(v8, v59);
    v84 = v83;
    v85 = v82;
    if (*(_BYTE *)(a1 + 438))
    {
      if ((*(_BYTE *)(*(_QWORD *)(v150 + 232) + 16) & 2) == 0)
      {
        v86 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v86 != -1)
        {
          *(_QWORD *)&v153.f64[0] = &v176;
          v177[0] = &v153;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      v87 = *(id *)(v56 + 8);
      md::VenueLayerLayoutCharacteristics::offsetLevel(v153.f64, v149, v144, v145, v63, v85);
      v170 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v153), v154);
      v171 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v155), v156);
      v172 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v157), v158);
      v173 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v159), v160);

      v88 = md::PolygonViewConstantsFrameCache::pop((md::PolygonViewConstantsFrameCache *)(*(_QWORD *)(a1 + 368) + 240));
      v89 = (_QWORD *)v161[0];
      v91 = *v88;
      v90 = v88[1];
      if (v90)
      {
        v92 = (unint64_t *)(v90 + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v94 = (std::__shared_weak_count *)v89[1];
      *v89 = v91;
      v89[1] = v90;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      goto LABEL_169;
    }
    v97 = !v80;
    if (v82 != v83)
      v97 = 1;
    if ((v97 & 1) == 0 && *(_BYTE *)(a1 + 393))
    {
      if ((*(_BYTE *)(*(_QWORD *)(v150 + 232) + 16) & 2) == 0)
      {
        v98 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v98 != -1)
        {
          *(_QWORD *)&v153.f64[0] = &v176;
          v177[0] = &v153;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      if (*(_BYTE *)(a1 + 438))
        v99 = v82;
      else
        v99 = v148;
      v100 = *(id *)(v56 + 8);
      md::VenueLayerLayoutCharacteristics::offsetLevel(v153.f64, v149, v144, v145, v63, v99);
      v170 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v153), v154);
      v171 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v155), v156);
      v172 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v157), v158);
      v173 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v159), v160);

      v101 = md::PolygonViewConstantsFrameCache::pop((md::PolygonViewConstantsFrameCache *)(*(_QWORD *)(a1 + 368) + 240));
      v102 = (_QWORD *)v161[0];
      v104 = *v101;
      v103 = v101[1];
      if (v103)
      {
        v105 = (unint64_t *)(v103 + 8);
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      v107 = (std::__shared_weak_count *)v102[1];
      *v102 = v104;
      v102[1] = v103;
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v167 = ggl::CullingGrid::intersectedCellsForView(v170.f32, 0.0);
LABEL_169:
      v110 = v171;
      v111 = v172;
      v112 = v173;
      v113 = *(_QWORD *)v161[0];
      v114 = *(_QWORD *)(*(_QWORD *)v161[0] + 8);
      v115 = *(float32x4_t **)(*(_QWORD *)v161[0] + 72);
      *v115 = v170;
      v115[1] = v110;
      v115[2] = v111;
      v115[3] = v112;
      if (*(_QWORD *)(v113 + 64) > v114)
        v114 = *(_QWORD *)(v113 + 64);
      *(_QWORD *)(v113 + 56) = 0;
      *(_QWORD *)(v113 + 64) = v114;
      v116 = v174;
      if ((*(_BYTE *)(v174 + 16) & 2) == 0)
      {
        v117 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v117 != -1)
        {
          *(_QWORD *)&v153.f64[0] = &v176;
          v177[0] = &v153;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      v118 = *(_QWORD *)v161[0];
      v119 = *(_QWORD *)(*(_QWORD *)v161[0] + 8);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v161[0] + 72) + 64) = *(_DWORD *)(*(_QWORD *)(v116 + 72) + 64);
      if (*(_QWORD *)(v118 + 64) > v119)
        v119 = *(_QWORD *)(v118 + 64);
      *(_QWORD *)(v118 + 56) = 0;
      *(_QWORD *)(v118 + 64) = v119;
    }
    v120 = v84;
    v121 = v8;
    v122 = *(id *)(v56 + 8);
    v123 = v122;
    if (v122)
    {
      v124 = md::VenueLayerLayoutCharacteristics::shouldCullPolygonGroup(v149, v150, objc_msgSend(v122, "buildingId"), objc_msgSend(v122, "layer"), objc_msgSend(v122, "cullingMask"), v147);

      if (v124)
      {

        v8 = v121;
        v57 = v146;
        if (*(_BYTE *)(a1 + 438))
        {
          LOBYTE(v80) = 0;
          goto LABEL_201;
        }
        goto LABEL_97;
      }
    }
    v125 = *(id *)(v56 + 8);
    v126 = md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(*(int8x8_t **)(a1 + 440), objc_msgSend(v125, "buildingId"));
    v127 = objc_msgSend(v125, "layer");
    if (!*(_BYTE *)(a1 + 393))
      goto LABEL_193;
    v128 = objc_msgSend(v125, "layer");
    if (v125)
    {
      objc_msgSend(v125, "styleAttributes");
      if (*(_QWORD *)&v153.f64[0])
      {
        v153.f64[1] = v153.f64[0];
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&v154.f64[1] + 40))(*(_QWORD *)&v154.f64[1], *(_QWORD *)&v153.f64[0], *(_QWORD *)&v154.f64[0] - *(_QWORD *)&v153.f64[0]);
      }
    }
    v129 = v153.f64[0];
    if (*(_QWORD *)&v153.f64[0] == *(_QWORD *)&v153.f64[1])
    {
LABEL_193:

      if (v127 != v126)
LABEL_198:
        v80 = 0;
    }
    else
    {
      while (1)
      {
        v130 = *(unsigned __int16 *)(*(_QWORD *)&v129 + 4);
        if (**(_DWORD **)&v129 == 3 && v130 == 113)
          break;
        if (**(_DWORD **)&v129 == 3 && v130 == 31)
        {

          goto LABEL_198;
        }
        *(_QWORD *)&v129 += 8;
        if (*(_QWORD *)&v129 == *(_QWORD *)&v153.f64[1])
          goto LABEL_193;
      }

      if (v126 < v128)
        goto LABEL_198;
    }

    if (*(_BYTE *)(a1 + 438))
    {
      v8 = v121;
      v57 = v146;
LABEL_201:
      v132 = v85 >= v148 && v85 < v120;
      if (v132 || v80)
        goto LABEL_208;
LABEL_97:
      v56 += 24;
      if (v56 != v151)
        continue;
LABEL_211:
      v135 = v175;
      if (v175)
      {
        v136 = (unint64_t *)&v175->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      v29 = v142 + 1;
      if (v142 + 1 != v138)
        goto LABEL_75;
LABEL_216:

    }
    else
    {
      v8 = v121;
      v57 = v146;
      if (!v80)
        goto LABEL_97;
LABEL_208:
      v133 = *(id *)(v56 + 8);
      *(_QWORD *)&v153.f64[0] = v133;
      v134 = *(_QWORD *)(a3 + 24);
      if (v134)
      {
        (*(void (**)(uint64_t, float64x2_t *, _QWORD *))(*(_QWORD *)v134 + 48))(v134, &v153, v161);

        goto LABEL_97;
      }
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    break;
  }
}

void sub_19F849AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v12;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 - 168);

  _Unwind_Resume(a1);
}

void md::VenueRenderLayer::_layoutVenueFootprints(md::VenueRenderLayer *this, int8x8_t *a2)
{
  uint64_t v4;
  int8x8_t v5;
  uint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  int8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t *v30;
  float v31;
  char *v32;
  int8x8_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  __int128 v39;
  float32x4_t v40;
  int v41;
  uint64_t *v42;
  int v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  int8x8_t *v47;
  int8x8_t v48;
  uint64_t *v49;
  uint64_t *v50;
  int v51;
  unsigned __int16 v52;
  int8x8_t v53;
  int v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint64_t ***v58;
  uint64_t **v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  _QWORD *v69;
  __int128 v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  unint64_t v101;
  float32x4_t *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  float32x4_t v115;
  unint64_t v116;
  float32x4_t *v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  __n128 v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  _QWORD *v146;
  uint64_t v147;
  char **v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t v151;
  char **v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  int v158;
  __int128 v159;
  char *v160;
  _QWORD *v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  __n128 *v178;
  __n128 *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  int v188;
  __int128 v189;
  char *v190;
  _QWORD *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  __n128 *v207;
  __n128 *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  int8x8_t *v220;
  int8x8_t *v221;
  int v222;
  float32x4_t v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  _QWORD *v235;
  std::__shared_weak_count *v236;
  _BYTE v237[32];
  float32x4_t v238;
  float32x4_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  __int128 v242;
  __int128 v243;
  int v244;
  _BYTE v245[36];
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  int v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v4 = md::VenueRenderLayer::_venuesCommandBuffer(this, a2);
  v5 = a2[1];
  if (!*(_QWORD *)&v5)
    return;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v5 <= 0x4927EB92E562CC46uLL)
      v8 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & 0x4927EB92E562CC46;
  }
  v9 = *a2;
  v10 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v8);
  if (!v10)
    return;
  v11 = (_QWORD *)*v10;
  if (!*v10)
    return;
  v12 = *(_QWORD *)&v5 - 1;
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      v13 = v11[1];
      if (v13 == 0x4927EB92E562CC46)
      {
        if (v11[2] == 0x4927EB92E562CC46)
          goto LABEL_22;
      }
      else if ((v13 & v12) != v8)
      {
        return;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        return;
    }
  }
  while (1)
  {
    v14 = v11[1];
    if (v14 == 0x4927EB92E562CC46)
      break;
    if (v14 >= *(_QWORD *)&v5)
      v14 %= *(_QWORD *)&v5;
    if (v14 != v8)
      return;
LABEL_16:
    v11 = (_QWORD *)*v11;
    if (!v11)
      return;
  }
  if (v11[2] != 0x4927EB92E562CC46)
    goto LABEL_16;
LABEL_22:
  v15 = v11[5];
  if (*(_QWORD *)(v15 + 8) != 0x4927EB92E562CC46)
    return;
  v16 = *(int8x8_t **)(v15 + 32);
  if (!v16)
    return;
  if (v7.u32[0] > 1uLL)
  {
    v17 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v5 <= 0x3070CB6B3C7F21D3uLL)
      v17 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v5;
  }
  else
  {
    v17 = v12 & 0x3070CB6B3C7F21D3;
  }
  v18 = *(_QWORD **)(*(_QWORD *)&v9 + 8 * v17);
  if (!v18)
    return;
  v19 = (_QWORD *)*v18;
  if (!v19)
    return;
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      v20 = v19[1];
      if (v20 == 0x3070CB6B3C7F21D3)
      {
        if (v19[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_44;
      }
      else if ((v20 & v12) != v17)
      {
        return;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        return;
    }
  }
  while (2)
  {
    v21 = v19[1];
    if (v21 != 0x3070CB6B3C7F21D3)
    {
      if (v21 >= *(_QWORD *)&v5)
        v21 %= *(_QWORD *)&v5;
      if (v21 != v17)
        return;
      goto LABEL_38;
    }
    if (v19[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_38:
      v19 = (_QWORD *)*v19;
      if (!v19)
        return;
      continue;
    }
    break;
  }
LABEL_44:
  v22 = v19[5];
  if (*(_QWORD *)(v22 + 8) != 0x3070CB6B3C7F21D3 || !*(_QWORD *)(v22 + 32))
    return;
  if (v7.u32[0] > 1uLL)
  {
    v23 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v5 <= 0x1AF456233693CD46uLL)
      v23 = 0x1AF456233693CD46uLL % *(_QWORD *)&v5;
  }
  else
  {
    v23 = v12 & 0x1AF456233693CD46;
  }
  v24 = *(_QWORD **)(*(_QWORD *)&v9 + 8 * v23);
  if (!v24)
    goto LABEL_68;
  v25 = (_QWORD *)*v24;
  if (!v25)
    goto LABEL_68;
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      v26 = v25[1];
      if (v26 == 0x1AF456233693CD46)
      {
        if (v25[2] == 0x1AF456233693CD46)
          goto LABEL_66;
      }
      else if ((v26 & v12) != v23)
      {
        goto LABEL_68;
      }
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_68;
    }
  }
  while (1)
  {
    v27 = v25[1];
    if (v27 == 0x1AF456233693CD46)
      break;
    if (v27 >= *(_QWORD *)&v5)
      v27 %= *(_QWORD *)&v5;
    if (v27 != v23)
      goto LABEL_68;
LABEL_60:
    v25 = (_QWORD *)*v25;
    if (!v25)
      goto LABEL_68;
  }
  if (v25[2] != 0x1AF456233693CD46)
    goto LABEL_60;
LABEL_66:
  v28 = v25[5];
  if (*(_QWORD *)(v28 + 8) != 0x1AF456233693CD46)
  {
LABEL_68:
    v218 = 0;
    goto LABEL_69;
  }
  v218 = *(_QWORD *)(v28 + 32);
LABEL_69:
  md::LayoutContext::zoomAtCentrePoint(a2);
  v30 = (uint64_t *)*((_QWORD *)this + 34);
  v219 = (uint64_t *)*((_QWORD *)this + 35);
  if (v30 == v219)
    return;
  v31 = fminf(fmaxf((float)(v29 * 2.0) + -31.0, 0.0), 1.0);
  v32 = (char *)this + 384;
  v33 = v16 + 2;
  v221 = v16;
  v220 = v16 + 2;
  while (2)
  {
    v224 = v30;
    v34 = *(_QWORD *)(*v30 + 384);
    v35 = *(_QWORD *)(*v30 + 216);
    v36 = *(std::__shared_weak_count **)(*v30 + 224);
    v226 = *v30;
    v240 = v35;
    v241 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
    v246 = 0;
    *(_OWORD *)v245 = 0uLL;
    ggl::ResourceAccessor::accessConstantData((uint64_t)&v247, 0, v35, 0);
    ggl::BufferMemory::operator=((uint64_t *)v245, (uint64_t)&v247);
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v247);
    v39 = *(_OWORD *)(v246 + 16);
    *(_OWORD *)v237 = *(_OWORD *)v246;
    *(_OWORD *)&v237[16] = v39;
    v40 = *(float32x4_t *)(v246 + 48);
    v238 = *(float32x4_t *)(v246 + 32);
    v239 = v40;
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v245);
    v41 = ggl::CullingGrid::intersectedCellsForView((float *)v237, 0.0);
    v42 = *(uint64_t **)(v34 + 776);
    v225 = *(uint64_t **)(v34 + 784);
    if (v42 == v225)
      goto LABEL_270;
    v43 = v41;
    v44 = *(double *)(v218 + 3768) * 10.0 * (double)(1 << *(_BYTE *)(v34 + 169)) / *(double *)(v218 + 1368);
    *(float *)&v44 = v44;
    v223 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v44, 0);
    v46 = *(uint64_t **)(v34 + 784);
    v45 = v226;
    v222 = v41;
    while (2)
    {
      if (!*((_BYTE *)this + 393)
        && md::VenueLayerLayoutCharacteristics::shouldCullPolygonGroup((uint64_t)v32, v45, v42[8], *((_DWORD *)v42 + 15), *((_DWORD *)v42 + 14), v43))
      {
        goto LABEL_78;
      }
      v47 = v33;
      do
      {
        v47 = (int8x8_t *)*v47;
        if (!v47)
          goto LABEL_78;
        v48 = v47[3];
        v49 = *(uint64_t **)(*(_QWORD *)&v48 + 16);
        v50 = *(uint64_t **)(*(_QWORD *)&v48 + 24);
        if (v49 != v50)
        {
          while (v49[3] != v42[8])
          {
            v49 += 15;
            if (v49 == v50)
            {
              v49 = v50;
              break;
            }
          }
        }
      }
      while (v49 == v50);
      if (!v49)
        goto LABEL_78;
      v51 = *((__int16 *)v49 + 28);
      v52 = *((_WORD *)v49 + 28);
      v53 = v16[6];
      v54 = v52;
      if (!*(_QWORD *)&v53)
        goto LABEL_111;
      v55 = v49[3];
      v56 = (uint8x8_t)vcnt_s8(v53);
      v56.i16[0] = vaddlv_u8(v56);
      if (v56.u32[0] > 1uLL)
      {
        v57 = v49[3];
        if (v55 >= *(_QWORD *)&v53)
          v57 = v55 % *(_QWORD *)&v53;
      }
      else
      {
        v57 = (*(_QWORD *)&v53 - 1) & v55;
      }
      v58 = *(uint64_t ****)(*(_QWORD *)&v16[5] + 8 * v57);
      v54 = *((unsigned __int16 *)v49 + 28);
      if (!v58)
        goto LABEL_111;
      v59 = *v58;
      v54 = *((unsigned __int16 *)v49 + 28);
      if (!v59)
        goto LABEL_111;
      if (v56.u32[0] < 2uLL)
      {
        v60 = *(_QWORD *)&v53 - 1;
        while (1)
        {
          v62 = v59[1];
          if ((uint64_t *)v55 == v62)
          {
            if (v59[2] == (uint64_t *)v55)
              goto LABEL_110;
          }
          else if (((unint64_t)v62 & v60) != v57)
          {
            goto LABEL_109;
          }
          v59 = (uint64_t **)*v59;
          if (!v59)
            goto LABEL_109;
        }
      }
      while (2)
      {
        v61 = (unint64_t)v59[1];
        if (v55 != v61)
        {
          if (v61 >= *(_QWORD *)&v53)
            v61 %= *(_QWORD *)&v53;
          if (v61 != v57)
          {
LABEL_109:
            v54 = *((unsigned __int16 *)v49 + 28);
            goto LABEL_111;
          }
          goto LABEL_99;
        }
        if (v59[2] != (uint64_t *)v55)
        {
LABEL_99:
          v59 = (uint64_t **)*v59;
          if (!v59)
            goto LABEL_109;
          continue;
        }
        break;
      }
LABEL_110:
      v54 = *((unsigned __int16 *)v59 + 12);
LABEL_111:
      v64 = *v49;
      v63 = v49[1];
      if (v64 == v63)
        goto LABEL_114;
      while (*(unsigned __int16 *)(v64 + 8) != v54)
      {
        v64 += 184;
        if (v64 == v63)
          goto LABEL_114;
      }
      if (v64 == v63)
LABEL_114:
        LOWORD(v54) = v52;
      v65 = *((_DWORD *)v42 + 15);
      if (*((_BYTE *)this + 438))
        v66 = 1;
      else
        v66 = v65 == (__int16)v54;
      if (v66 && v65 >= v51 && v65 <= (__int16)v54)
      {
        v69 = md::PolygonViewConstantsFrameCache::pop((md::PolygonViewConstantsFrameCache *)(*((_QWORD *)this + 46)
                                                                                           + 240));
        v70 = *(_OWORD *)&v237[16];
        v71 = v238;
        v72 = v239;
        v73 = *v69;
        v74 = *(_QWORD *)(*v69 + 8);
        v75 = *(_QWORD *)(*v69 + 72);
        *(_OWORD *)v75 = *(_OWORD *)v237;
        *(_OWORD *)(v75 + 16) = v70;
        *(float32x4_t *)(v75 + 32) = v71;
        *(float32x4_t *)(v75 + 48) = v72;
        v76 = *(_QWORD *)(v73 + 64);
        if (v76 <= v74)
          v76 = v74;
        *(_QWORD *)(v73 + 56) = 0;
        *(_DWORD *)(v75 + 64) = *(_DWORD *)(v45 + 368);
        if (v76 > v74)
          v74 = v76;
        *(_QWORD *)(v73 + 64) = v74;
        v77 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 47) + 2728));
        v78 = *(_QWORD *)(v77 + 64);
        *(_QWORD *)(v78 + 24) = 0;
        v79 = *(_QWORD *)(v45 + 232);
        *(_QWORD *)(v78 + 16) = v79;
        v80 = *(_QWORD *)(v77 + 160);
        v81 = *(_QWORD *)(v45 + 240);
        if (v81)
        {
          v82 = (unint64_t *)(v81 + 8);
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        v84 = *(std::__shared_weak_count **)(v80 + 24);
        *(_QWORD *)(v80 + 16) = v79;
        *(_QWORD *)(v80 + 24) = v81;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v87 = md::PolygonViewConstantsFrameCache::pop((md::PolygonViewConstantsFrameCache *)(*((_QWORD *)this + 46)
                                                                                           + 240));
        v88 = (std::__shared_weak_count *)v87[1];
        v235 = (_QWORD *)*v87;
        v236 = v88;
        if (v88)
        {
          v89 = (unint64_t *)&v88->__shared_owners_;
          do
            v90 = __ldxr(v89);
          while (__stxr(v90 + 1, v89));
        }
        v229 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 47) + 3448));
        v91 = md::PolygonViewConstantsFrameCache::pop((md::PolygonViewConstantsFrameCache *)(*((_QWORD *)this + 46)
                                                                                           + 240));
        v92 = (_QWORD *)*v91;
        v93 = (std::__shared_weak_count *)v91[1];
        v234 = v93;
        if (v93)
        {
          v94 = (unint64_t *)&v93->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        v96.i64[0] = *(_QWORD *)v237;
        v97 = v238;
        v98 = v239;
        v99 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v237[8], (float32x4_t)xmmword_19FFB3850);
        v96.i64[1] = *(_QWORD *)&v237[24];
        v100 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v237[8], (float32x4_t)xmmword_19FFB3480);
        v101 = v92[1];
        v102 = (float32x4_t *)v92[9];
        *v102 = vmlaq_f32((float32x4_t)vextq_s8(v99, v99, 8uLL), (float32x4_t)xmmword_19FFB3850, v96);
        v102[1] = vmlaq_f32((float32x4_t)vextq_s8(v100, v100, 8uLL), (float32x4_t)xmmword_19FFB3480, v96);
        v102[2] = v97;
        v102[3] = v98;
        v103 = v92[8];
        if (v103 <= v101)
          v103 = v101;
        v92[7] = 0;
        v102[4].i32[0] = *(_DWORD *)(v45 + 368);
        if (v103 > v101)
          v101 = v103;
        v92[8] = v101;
        v104 = *(_QWORD **)(v77 + 64);
        *v104 = v92;
        v104[1] = 0;
        v105 = *(_QWORD **)(v77 + 160);
        if (v93)
        {
          v106 = (unint64_t *)&v93->__shared_owners_;
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
        v108 = (std::__shared_weak_count *)v105[1];
        *v105 = v92;
        v105[1] = v93;
        if (v108)
        {
          v109 = (unint64_t *)&v108->__shared_owners_;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        v111.i64[0] = *(_QWORD *)v237;
        v112 = v238;
        v113 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v237[8], (float32x4_t)xmmword_19FFB3850);
        v111.i64[1] = *(_QWORD *)&v237[24];
        v114 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v237[8], (float32x4_t)xmmword_19FFB3480);
        v115 = vmlaq_f32(v239, v238, v223);
        v116 = v235[1];
        v117 = (float32x4_t *)v235[9];
        *v117 = vmlaq_f32((float32x4_t)vextq_s8(v113, v113, 8uLL), (float32x4_t)xmmword_19FFB3850, v111);
        v117[1] = vmlaq_f32((float32x4_t)vextq_s8(v114, v114, 8uLL), (float32x4_t)xmmword_19FFB3480, v111);
        v117[2] = v112;
        v117[3] = v115;
        if (v235[8] > v116)
          v116 = v235[8];
        v235[7] = 0;
        v235[8] = v116;
        v118 = *(_QWORD **)(v229 + 64);
        *v118 = v235;
        v118[1] = 0;
        v119 = *(_QWORD **)(v229 + 160);
        if (v236)
        {
          v120 = (unint64_t *)&v236->__shared_owners_;
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v122 = (std::__shared_weak_count *)v119[1];
        *v119 = v235;
        v119[1] = v236;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v247);
        v125 = *(_QWORD *)(v229 + 64);
        v126 = v247;
        *(_QWORD *)(v125 + 16) = v247;
        *(_QWORD *)(v125 + 24) = 0;
        v127 = *(_QWORD *)(v229 + 160);
        if (*((_QWORD *)&v126 + 1))
        {
          v128 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        v130 = *(std::__shared_weak_count **)(v127 + 24);
        *(_OWORD *)(v127 + 16) = v126;
        if (v130)
        {
          v131 = (unint64_t *)&v130->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        v133 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
        if (*((_QWORD *)&v247 + 1))
        {
          v134 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        memset(&v245[4], 0, 32);
        v136 = *((_QWORD *)this + 47);
        v137 = *(unsigned __int8 *)(v136 + 3672);
        v138 = 20 * *((int *)v42 + 15);
        v139 = *((_BYTE *)this + 393) == 0;
        if (*((_BYTE *)this + 393))
          v140 = 20 * *((int *)v42 + 15);
        else
          v140 = 0;
        v232 = v140;
        v233 = v77;
        v141 = v136 + 2976;
        if (!*((_BYTE *)this + 393))
          v141 = v136 + 2736;
        v231 = v141;
        v142 = *(__n128 *)v245;
        v242 = *(_OWORD *)v245;
        v243 = *(_OWORD *)&v245[16];
        v244 = *(_DWORD *)&v245[32];
        v143 = v138 + 0x80000000BLL;
        if (v139)
          v143 = 0x80000000BLL;
        v228 = v143;
        v144 = *v42;
        v230 = v42[1];
        if (*v42 == v230)
        {
LABEL_259:
          v32 = (char *)this + 384;
          v16 = v221;
          v33 = v220;
          v45 = v226;
          v43 = v222;
          if (v234)
          {
            v212 = (unint64_t *)&v234->__shared_owners_;
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
              std::__shared_weak_count::__release_weak(v234);
            }
          }
          if (v236)
          {
            v214 = (unint64_t *)&v236->__shared_owners_;
            do
              v215 = __ldaxr(v214);
            while (__stlxr(v215 - 1, v214));
            if (!v215)
            {
              ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
              std::__shared_weak_count::__release_weak(v236);
            }
          }
          v46 = v225;
          goto LABEL_78;
        }
        v145 = 0;
        v227 = v136 + 3456;
        while (1)
        {
          v147 = *((_QWORD *)this + 47);
          v148 = (char **)(v147 + 3712);
          *(_QWORD *)(v147 + 3720) = *(_QWORD *)(v147 + 3712);
          v149 = *(_QWORD **)(*v42 + 144 * v145 + 96);
          v150 = v149[6] - v149[5];
          v151 = v149[1];
          *(_QWORD *)&v247 = 0;
          *((_QWORD *)&v247 + 1) = v150 / v151;
          if (v151 <= v150)
            gm::MultiRange<unsigned long>::push_back(v148, &v247);
          v152 = ggl::Batcher::commit((__int128 **)v148, 0xC8u, v142);
          v153 = *((_QWORD *)this + 47);
          v247 = *(_OWORD *)v245;
          v248 = *(_OWORD *)&v245[16];
          v249 = *(_DWORD *)&v245[32];
          v154 = *(_QWORD **)(v153 + 3800);
          v155 = v154[1];
          if (v155 == *(_QWORD *)(v153 + 3808))
          {
            v154 = (_QWORD *)*v154;
            if (!v154)
            {
              v154 = malloc_type_malloc(120 * v155 + 16, 0xB644C221uLL);
              *v154 = 0;
              v154[1] = 0;
              **(_QWORD **)(v153 + 3800) = v154;
            }
            *(_QWORD *)(v153 + 3800) = v154;
            v155 = v154[1];
          }
          v156 = &v154[15 * v155];
          v156[2] = &off_1E42B59B0;
          v157 = v156 + 2;
          v154[1] = v155 + 1;
          v157[2] = "";
          v157[3] = v231;
          v157[4] = v233;
          v157[5] = v137;
          v157[6] = v232;
          *((_DWORD *)v157 + 14) = 1065353216;
          v158 = v249;
          v159 = v248;
          *(_OWORD *)((char *)v157 + 60) = v247;
          *((_DWORD *)v157 + 23) = v158;
          *(_OWORD *)((char *)v157 + 76) = v159;
          v142 = (__n128)vdupq_n_s64(1uLL);
          *((__n128 *)v157 + 6) = v142;
          v157[14] = 0;
          v157[8] = v144;
          v160 = *v152;
          v157[11] = *v152;
          v157[12] = (v152[1] - v160) >> 4;
          v161 = *(_QWORD **)(v6 + 80);
          v162 = *(_QWORD *)(v6 + 88);
          if ((unint64_t)v161 < v162)
          {
            if (v161)
              *v161 = v157;
            v163 = v161 + 1;
            goto LABEL_224;
          }
          v164 = *(_QWORD *)(v6 + 72);
          v165 = ((uint64_t)v161 - v164) >> 3;
          v166 = v165 + 1;
          if ((unint64_t)(v165 + 1) >> 61)
            goto LABEL_276;
          v167 = v162 - v164;
          if (v167 >> 2 > v166)
            v166 = v167 >> 2;
          if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
            v168 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v168 = v166;
          if (v168)
          {
            v169 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 96) + 16))(*(_QWORD *)(v6 + 96), 8 * v168, 8);
            v170 = (_QWORD *)(v169 + 8 * v165);
            v171 = v169 + 8 * v168;
            if (v169)
              *v170 = v157;
          }
          else
          {
            v171 = 0;
            v170 = (_QWORD *)(8 * v165);
          }
          v173 = *(_QWORD *)(v6 + 72);
          v172 = *(_QWORD *)(v6 + 80);
          v174 = v172 - v173;
          if (v172 == v173)
          {
            v176 = v170;
            goto LABEL_222;
          }
          v175 = v174 - 8;
          if ((unint64_t)(v174 - 8) < 0x38)
          {
            v176 = v170;
          }
          else
          {
            v176 = v170;
            if ((unint64_t)(v172 - (_QWORD)v170) >= 0x20)
            {
              v177 = (v175 >> 3) + 1;
              v178 = (__n128 *)(v170 - 2);
              v179 = (__n128 *)(v172 - 16);
              v180 = v177 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v142 = *v179;
                v178[-1] = v179[-1];
                *v178 = v142;
                v178 -= 2;
                v179 -= 2;
                v180 -= 4;
              }
              while (v180);
              v176 = &v170[-(v177 & 0x3FFFFFFFFFFFFFFCLL)];
              v172 -= 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
              if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_221;
            }
          }
          do
          {
            v181 = *(_QWORD *)(v172 - 8);
            v172 -= 8;
            *--v176 = v181;
          }
          while (v172 != v173);
LABEL_221:
          v172 = *(_QWORD *)(v6 + 72);
LABEL_222:
          v163 = v170 + 1;
          *(_QWORD *)(v6 + 72) = v176;
          *(_QWORD *)(v6 + 80) = v170 + 1;
          v182 = *(_QWORD *)(v6 + 88);
          *(_QWORD *)(v6 + 88) = v171;
          if (v172)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 96) + 40))(*(_QWORD *)(v6 + 96), v172, v182 - v172);
LABEL_224:
          *(_QWORD *)(v6 + 80) = v163;
          if (v31 < 1.0 || *((_BYTE *)this + 393))
            goto LABEL_190;
          v183 = *((_QWORD *)this + 47);
          v247 = v242;
          v248 = v243;
          v249 = v244;
          v184 = *(_QWORD **)(v183 + 3800);
          v185 = v184[1];
          if (v185 == *(_QWORD *)(v183 + 3808))
          {
            v184 = (_QWORD *)*v184;
            if (!v184)
            {
              v184 = malloc_type_malloc(120 * v185 + 16, 0xB644C221uLL);
              *v184 = 0;
              v184[1] = 0;
              **(_QWORD **)(v183 + 3800) = v184;
            }
            *(_QWORD *)(v183 + 3800) = v184;
            v185 = v184[1];
          }
          v186 = &v184[15 * v185];
          v186[2] = &off_1E42B59B0;
          v187 = v186 + 2;
          v184[1] = v185 + 1;
          v187[2] = "";
          v187[3] = v227;
          v187[4] = v229;
          v187[5] = v137;
          v187[6] = v228;
          *((_DWORD *)v187 + 14) = 1065353216;
          v188 = v249;
          v189 = v248;
          *(_OWORD *)((char *)v187 + 60) = v247;
          *((_DWORD *)v187 + 23) = v188;
          *(_OWORD *)((char *)v187 + 76) = v189;
          v142 = (__n128)vdupq_n_s64(1uLL);
          *((__n128 *)v187 + 6) = v142;
          v187[14] = 0;
          v187[8] = v144;
          v190 = *v152;
          v187[11] = *v152;
          v187[12] = (v152[1] - v190) >> 4;
          v191 = *(_QWORD **)(v6 + 80);
          v192 = *(_QWORD *)(v6 + 88);
          if ((unint64_t)v191 >= v192)
          {
            v193 = *(_QWORD *)(v6 + 72);
            v194 = ((uint64_t)v191 - v193) >> 3;
            v195 = v194 + 1;
            if ((unint64_t)(v194 + 1) >> 61)
LABEL_276:
              abort();
            v196 = v192 - v193;
            if (v196 >> 2 > v195)
              v195 = v196 >> 2;
            if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
              v197 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v197 = v195;
            if (v197)
            {
              v198 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 96) + 16))(*(_QWORD *)(v6 + 96), 8 * v197, 8);
              v199 = (_QWORD *)(v198 + 8 * v194);
              v200 = v198 + 8 * v197;
              if (v198)
                *v199 = v187;
            }
            else
            {
              v200 = 0;
              v199 = (_QWORD *)(8 * v194);
            }
            v202 = *(_QWORD *)(v6 + 72);
            v201 = *(_QWORD *)(v6 + 80);
            v203 = v201 - v202;
            if (v201 != v202)
            {
              v204 = v203 - 8;
              if ((unint64_t)(v203 - 8) < 0x38)
              {
                v205 = v199;
              }
              else
              {
                v205 = v199;
                if ((unint64_t)(v201 - (_QWORD)v199) >= 0x20)
                {
                  v206 = (v204 >> 3) + 1;
                  v207 = (__n128 *)(v199 - 2);
                  v208 = (__n128 *)(v201 - 16);
                  v209 = v206 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v142 = *v208;
                    v207[-1] = v208[-1];
                    *v207 = v142;
                    v207 -= 2;
                    v208 -= 2;
                    v209 -= 4;
                  }
                  while (v209);
                  v205 = &v199[-(v206 & 0x3FFFFFFFFFFFFFFCLL)];
                  v201 -= 8 * (v206 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v206 == (v206 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_254:
                    v201 = *(_QWORD *)(v6 + 72);
LABEL_255:
                    v146 = v199 + 1;
                    *(_QWORD *)(v6 + 72) = v205;
                    *(_QWORD *)(v6 + 80) = v199 + 1;
                    v211 = *(_QWORD *)(v6 + 88);
                    *(_QWORD *)(v6 + 88) = v200;
                    if (v201)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 96) + 40))(*(_QWORD *)(v6 + 96), v201, v211 - v201);
                    goto LABEL_189;
                  }
                }
              }
              do
              {
                v210 = *(_QWORD *)(v201 - 8);
                v201 -= 8;
                *--v205 = v210;
              }
              while (v201 != v202);
              goto LABEL_254;
            }
            v205 = v199;
            goto LABEL_255;
          }
          if (v191)
            *v191 = v187;
          v146 = v191 + 1;
LABEL_189:
          *(_QWORD *)(v6 + 80) = v146;
LABEL_190:
          ++v145;
          v144 += 144;
          if (v144 == v230)
            goto LABEL_259;
        }
      }
LABEL_78:
      v42 += 9;
      if (v42 != v46)
        continue;
      break;
    }
    v36 = v241;
LABEL_270:
    if (v36)
    {
      v216 = (unint64_t *)&v36->__shared_owners_;
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 - 1, v216));
      if (!v217)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v30 = v224 + 1;
    if (v224 + 1 != v219)
      continue;
    break;
  }
}

void sub_19F84AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::VenueRenderLayer::_layoutOpenToBelowAreas(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::_layoutOpenToBelowAreas(md::LayoutContext const&)::$_0>,void ()(VKVenueGroup const*,md::VenueRenderLayer::VenueGroupLayoutData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::VenueRenderLayer::_layoutOpenToBelowAreas(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::_layoutOpenToBelowAreas(md::LayoutContext const&)::$_0>,void ()(VKVenueGroup const*,md::VenueRenderLayer::VenueGroupLayoutData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CE270;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::VenueRenderLayer::_layoutOpenToBelowAreas(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::_layoutOpenToBelowAreas(md::LayoutContext const&)::$_0>,void ()(VKVenueGroup const*,md::VenueRenderLayer::VenueGroupLayoutData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CE270;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::VenueRenderLayer::_layoutOpenToBelowAreas(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::_layoutOpenToBelowAreas(md::LayoutContext const&)::$_0>,void ()(VKVenueGroup const*,md::VenueRenderLayer::VenueGroupLayoutData const&)>::operator()(uint64_t a1, id *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  VKPolygonGroup *v9;
  md::VenueLayerLayoutCharacteristics *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  float *v22;
  float v23;
  _BOOL4 v24;
  BOOL v25;
  unsigned int v26;
  float v27;
  _BOOL4 v28;
  BOOL v29;
  unsigned int v30;
  _QWORD *v31;
  int8x8_t v32;
  uint8x8_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  float v45;
  uint64_t v46;
  unsigned int v47;
  float *v48;
  float v49;
  _BOOL4 v50;
  BOOL v51;
  unsigned int v52;
  float v53;
  _BOOL4 v54;
  BOOL v55;
  unsigned int v56;
  float v57;
  _BOOL4 v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  float v62;
  _BOOL4 v63;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  uint16x4_t v73;
  uint64_t v74;
  unsigned int v75;
  float *v76;
  float v77;
  BOOL v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  __int128 *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  __int128 *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  __int128 *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  __int128 *v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint32x4_t v184;
  float64x2_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float64x2_t v195;
  std::__shared_weak_count *v196;
  VKPolygonGroup *v197;
  unint64_t *v198;
  unint64_t v199;
  float32x4_t v200;
  float32x2_t v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  int v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  int v239;
  __int128 v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t *v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD *v263;
  int v264;
  __int128 v265;
  uint64_t v266;
  VKPolygonGroup *v267;
  uint64_t v268;
  int64x2_t v269;
  uint64_t v270;
  int v271;
  float64x2_t v272;
  uint64_t v273;
  float32x4_t v274;
  int v275;
  float64x2_t v276;
  float32x4_t v277;
  float32x4_t v278;
  uint64_t v279;
  uint64_t v280;
  int64x2_t v281;
  float v282;
  uint64_t v283;
  uint64_t v284;
  ggl::CommandBuffer *v285;
  ggl::CommandBuffer *v286;
  uint64_t v287;
  VKPolygonGroup *v288;
  int v289;
  _BYTE v290[36];
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  int v294;
  uint64_t v295;
  _QWORD v296[3];
  _QWORD *v297;
  _BYTE v298[36];
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = **(_QWORD **)(a1 + 24);
  v9 = (VKPolygonGroup *)v5;
  v287 = v6;
  v10 = (md::VenueLayerLayoutCharacteristics *)(v6 + 384);
  LOBYTE(v292) = 0;
  BYTE1(v292) = md::VenueLayerLayoutCharacteristics::focusState((md::VenueLayerLayoutCharacteristics *)(v6 + 384), v9);
  v11 = -[VKPolygonalItemGroup styleQueries:](v9, "styleQueries:", &v292);
  v12 = *(uint64_t **)v11;
  if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11)
    goto LABEL_51;
  v13 = *v12;
  v14 = (std::__shared_weak_count *)v12[1];
  *(_QWORD *)v290 = *v12;
  *(_QWORD *)&v290[8] = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    *((_QWORD *)&v292 + 1) = v14;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  else
  {
    *((_QWORD *)&v292 + 1) = 0;
  }
  v293 = 0uLL;
  *(_QWORD *)&v292 = v13;
  LOBYTE(v294) = 0;
  if (v13)
    LODWORD(v13) = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 48))(v13, &v293);
  LOBYTE(v294) = v13;
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    LODWORD(v13) = v294;
  }
  if (!(_DWORD)v13)
  {
LABEL_50:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v292);
    goto LABEL_51;
  }
  v20 = *(_QWORD *)(v292 + 24);
  if ((int)*(float *)(a3 + 28) >= 0x17)
    v21 = 23;
  else
    v21 = (int)*(float *)(a3 + 28);
  v22 = *(float **)v20;
  if (!*(_QWORD *)v20)
  {
    v24 = 0;
    goto LABEL_30;
  }
  v23 = *v22;
  v24 = *v22 == 1.0;
  if (!*(_BYTE *)(v20 + 10) || (v23 != 0.0 ? (v25 = v23 == 1.0) : (v25 = 1), v25))
  {
LABEL_30:
    v26 = *(unsigned __int8 *)(v20 + v24 + 11);
    if (v26 != 2)
      goto LABEL_33;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v292 + 24), 0x93u, v21, 0) & 1) != 0)
    goto LABEL_34;
  v26 = 1;
LABEL_33:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v20, 0x93u, v21, v26))
    goto LABEL_50;
LABEL_34:
  if (!v22)
  {
    v28 = 0;
    goto LABEL_43;
  }
  v27 = *v22;
  v28 = *v22 == 1.0;
  if (!*(_BYTE *)(v20 + 10) || (v27 != 0.0 ? (v29 = v27 == 1.0) : (v29 = 1), v29))
  {
LABEL_43:
    v30 = *(unsigned __int8 *)(v20 + v28 + 11);
    if (v30 != 2)
      goto LABEL_46;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v20, 0x92u, v21, 0) & 1) != 0)
    goto LABEL_47;
  v30 = 1;
LABEL_46:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v20, 0x92u, v21, v30) & 1) == 0)
    goto LABEL_50;
LABEL_47:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v292);
  v31 = *(_QWORD **)(v7 + 8);
  v32 = (int8x8_t)v31[1];
  if (v32)
  {
    v33 = (uint8x8_t)vcnt_s8(v32);
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.u32[0] > 1uLL)
    {
      v34 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v32 <= 0x3070CB6B3C7F21D3uLL)
        v34 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v32;
    }
    else
    {
      v34 = (*(_QWORD *)&v32 - 1) & 0x3070CB6B3C7F21D3;
    }
    v65 = *(_QWORD **)(*v31 + 8 * v34);
    if (v65)
    {
      v66 = (_QWORD *)*v65;
      if (v66)
      {
        if (v33.u32[0] < 2uLL)
        {
          v67 = *(_QWORD *)&v32 - 1;
          while (1)
          {
            v69 = v66[1];
            if (v69 == 0x3070CB6B3C7F21D3)
            {
              if (v66[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_193;
            }
            else if ((v69 & v67) != v34)
            {
              goto LABEL_51;
            }
            v66 = (_QWORD *)*v66;
            if (!v66)
              goto LABEL_51;
          }
        }
        while (1)
        {
          v68 = v66[1];
          if (v68 == 0x3070CB6B3C7F21D3)
            break;
          if (v68 >= *(_QWORD *)&v32)
            v68 %= *(_QWORD *)&v32;
          if (v68 != v34)
            goto LABEL_51;
LABEL_125:
          v66 = (_QWORD *)*v66;
          if (!v66)
            goto LABEL_51;
        }
        if (v66[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_125;
LABEL_193:
        v112 = v66[5];
        if (*(_QWORD *)(v112 + 8) == 0x3070CB6B3C7F21D3)
        {
          if (*(_QWORD *)(v112 + 32))
          {
            v267 = v9;
            v113 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(v287 + 376) + 2008));
            ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(*(_QWORD **)(v113 + 64), *(_QWORD **)(v113 + 160), **(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)a3 + 8));
            md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v292);
            v114 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
            ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(*(_QWORD *)(v113 + 64), *(_QWORD *)(v113 + 160), v292, *((uint64_t *)&v292 + 1));
            if (v114)
            {
              v115 = (unint64_t *)&v114->__shared_owners_;
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
            v117 = *(_QWORD *)(*(_QWORD *)(v113 + 64) + 32);
            v291 = 0;
            *(_QWORD *)&v292 = 0;
            *(_OWORD *)v290 = 0uLL;
            v118 = *(_QWORD *)(v117 + 8);
            *((_QWORD *)&v292 + 1) = v117;
            *(_QWORD *)&v293 = 0;
            *((_QWORD *)&v293 + 1) = v118;
            LOWORD(v294) = 1;
            if (v118)
              v119 = *(_QWORD *)(v117 + 72);
            else
              v119 = 0;
            v295 = v119;
            ggl::BufferMemory::operator=((uint64_t *)v290, (uint64_t)&v292);
            ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v292);
            v242 = -[VKPolygonalItemGroup origin](v9, "origin");
            *(_QWORD *)(v291 + 16) = *v242;
            -[VKPolygonalItemGroup size](v9, "size");
            v243 = v291;
            *(_DWORD *)(v291 + 24) = v244;
            *(_DWORD *)(v243 + 28) = v245;
            ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v290);
            memset(&v290[4], 0, 32);
            v289 = *(unsigned __int8 *)(*(_QWORD *)(v287 + 376) + 3673);
            v246 = *(unsigned __int8 *)(v287 + 393);
            v286 = (ggl::CommandBuffer *)v113;
            v279 = a3;
            v247 = 20 * (__int16)-[VKPolygonGroup layer](v9, "layer") + 0x800000003;
            if (!v246)
              v247 = 0x800000003;
            v284 = v247;
            v248 = *(_QWORD *)(v287 + 376);
            v249 = -[VKPolygonalItemGroup fillMeshes](v9, "fillMeshes");
            v250 = *(uint64_t **)v249;
            v251 = *(uint64_t **)(v249 + 8);
            if (*(uint64_t **)v249 != v251)
            {
              v252 = 0;
              v253 = v248 + 2016;
              v281 = vdupq_n_s64(1uLL);
              while (1)
              {
                v254 = *(_QWORD *)(v287 + 376);
                v255 = *(unsigned int *)(v279 + 48);
                *(_QWORD *)v298 = &off_1E42D2830;
                *(_QWORD *)&v298[24] = v298;
                v256 = -[VKPolygonalItemGroup commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:](v267, "commitRangesToFillRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v254 + 3712, v252, v255, v298);
                v257 = *(_QWORD **)&v298[24];
                if (*(_BYTE **)&v298[24] == v298)
                  break;
                if (*(_QWORD *)&v298[24])
                {
                  v258 = 5;
LABEL_326:
                  (*(void (**)(void))(*v257 + 8 * v258))();
                }
                v259 = *(_QWORD *)(v287 + 376);
                v260 = *v250;
                v292 = *(_OWORD *)v290;
                v293 = *(_OWORD *)&v290[16];
                v294 = *(_DWORD *)&v290[32];
                v261 = *(_QWORD **)(v259 + 3800);
                v262 = v261[1];
                if (v262 == *(_QWORD *)(v259 + 3808))
                {
                  v261 = (_QWORD *)*v261;
                  if (!v261)
                  {
                    v261 = malloc_type_malloc(120 * v262 + 16, 0xB644C221uLL);
                    *v261 = 0;
                    v261[1] = 0;
                    **(_QWORD **)(v259 + 3800) = v261;
                  }
                  *(_QWORD *)(v259 + 3800) = v261;
                  v262 = v261[1];
                }
                v263 = &v261[15 * v262];
                v261[1] = v262 + 1;
                v263[2] = &off_1E42B59B0;
                v263 += 2;
                v263[2] = "";
                v263[3] = v253;
                v263[4] = v286;
                *((_DWORD *)v263 + 10) = v289;
                v263[6] = v284;
                *((_DWORD *)v263 + 14) = 1065353216;
                v264 = v294;
                v265 = v293;
                *(_OWORD *)((char *)v263 + 60) = v292;
                *((_DWORD *)v263 + 23) = v264;
                *(_OWORD *)((char *)v263 + 76) = v265;
                *((int64x2_t *)v263 + 6) = v281;
                v263[14] = 0;
                v263[8] = v260;
                v266 = *v256;
                v263[11] = *v256;
                v263[12] = (v256[1] - v266) >> 4;
                ggl::CommandBuffer::pushRenderItem(v8, (ggl::RenderItem *)v263);
                ++v252;
                v250 += 2;
                if (v250 == v251)
                  goto LABEL_332;
              }
              v257 = v298;
              v258 = 4;
              goto LABEL_326;
            }
LABEL_332:
            v9 = v267;
            a3 = v279;
          }
        }
      }
    }
  }
LABEL_51:

  v285 = **(ggl::CommandBuffer ***)(a1 + 24);
  v288 = v9;
  v35 = md::VenueLayerLayoutCharacteristics::focusState(v10, v288);
  LOBYTE(v292) = 0;
  BYTE1(v292) = v35;
  v36 = -[VKPolygonalItemGroup styleQueries:](v288, "styleQueries:", &v292);
  v37 = *(uint64_t **)v36;
  if (*(_QWORD *)(v36 + 8) == *(_QWORD *)v36)
  {
LABEL_142:

    return;
  }
  v38 = *v37;
  v39 = (std::__shared_weak_count *)v37[1];
  *(_QWORD *)v290 = *v37;
  *(_QWORD *)&v290[8] = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    *((_QWORD *)&v292 + 1) = v39;
    do
      v42 = __ldxr(v40);
    while (__stxr(v42 + 1, v40));
  }
  else
  {
    *((_QWORD *)&v292 + 1) = 0;
  }
  v293 = 0uLL;
  *(_QWORD *)&v292 = v38;
  LOBYTE(v294) = 0;
  if (v38)
    LODWORD(v38) = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 48))(v38, &v293);
  LOBYTE(v294) = v38;
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    LODWORD(v38) = v294;
  }
  if (!(_DWORD)v38)
    goto LABEL_141;
  v45 = *(float *)(a3 + 28);
  v46 = *(_QWORD *)(v292 + 24);
  if ((int)v45 >= 0x17)
    v47 = 23;
  else
    v47 = (int)v45;
  v48 = *(float **)v46;
  if (!*(_QWORD *)v46)
  {
    v50 = 0;
    goto LABEL_80;
  }
  v49 = *v48;
  v50 = *v48 == 1.0;
  if (!*(_BYTE *)(v46 + 10) || (v49 != 0.0 ? (v51 = v49 == 1.0) : (v51 = 1), v51))
  {
LABEL_80:
    v52 = *(unsigned __int8 *)(v46 + v50 + 11);
    if (v52 != 2)
      goto LABEL_83;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v292 + 24), 0x93u, v47, 0) & 1) != 0)
    goto LABEL_84;
  v52 = 1;
LABEL_83:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v46, 0x93u, v47, v52))
    goto LABEL_141;
LABEL_84:
  if (!v48)
  {
    v54 = 0;
    goto LABEL_93;
  }
  v53 = *v48;
  v54 = *v48 == 1.0;
  if (!*(_BYTE *)(v46 + 10) || (v53 != 0.0 ? (v55 = v53 == 1.0) : (v55 = 1), v55))
  {
LABEL_93:
    v56 = *(unsigned __int8 *)(v46 + v54 + 11);
    if (v56 != 2)
      goto LABEL_96;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v46, 0x92u, v47, 0) & 1) != 0)
    goto LABEL_97;
  v56 = 1;
LABEL_96:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v46, 0x92u, v47, v56) & 1) == 0)
    goto LABEL_141;
LABEL_97:
  if (!v48)
  {
    v58 = 0;
    goto LABEL_106;
  }
  v57 = *v48;
  v58 = *v48 == 1.0;
  if (!*(_BYTE *)(v46 + 10) || (v57 != 0.0 ? (v59 = v57 == 1.0) : (v59 = 1), v59))
  {
LABEL_106:
    v60 = *(unsigned __int8 *)(v46 + v58 + 11);
    if (v60 != 2)
      goto LABEL_109;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v46, 0x5Bu, v47, 0) & 1) != 0)
    goto LABEL_110;
  v60 = 1;
LABEL_109:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v46, 0x5Bu, v47, v60))
    goto LABEL_147;
LABEL_110:
  v61 = v45 == 0.0;
  if (v48)
  {
    v62 = *v48;
    v63 = *v48 == 1.0;
    if (*(_BYTE *)(v46 + 10))
    {
      if (v62 != 0.0 && v62 != 1.0)
      {
LABEL_138:
        v290[0] = 1;
        v298[0] = 1;
        v71 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v46, 0x5Bu, v61, 0, v290);
        v72 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v46, 0x5Bu, v61, 1, v298);
        if (v62 < 1.0)
          v72 = v71;
        if (v72)
          goto LABEL_141;
        goto LABEL_144;
      }
    }
  }
  else
  {
    v63 = 0;
  }
  v70 = *(unsigned __int8 *)(v46 + v63 + 11);
  v62 = 0.0;
  if (v70 == 2)
    goto LABEL_138;
  if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v46, 0x5Bu, v61, v70, 0))
  {
LABEL_141:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v292);
    goto LABEL_142;
  }
LABEL_144:
  v46 = *(_QWORD *)(v292 + 24);
  if ((int)*(float *)(a3 + 28) >= 0x17)
    v47 = 23;
  else
    v47 = (int)*(float *)(a3 + 28);
LABEL_147:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v290, v46, 0x93u, v47, 2u, 0);
  v73 = *(uint16x4_t *)v290;
  v74 = *(_QWORD *)(v292 + 24);
  if ((int)*(float *)(a3 + 28) >= 0x17)
    v75 = 23;
  else
    v75 = (int)*(float *)(a3 + 28);
  v76 = *(float **)v74;
  if (*(_QWORD *)v74
    && (v77 = *v76, LODWORD(v76) = *v76 == 1.0, *(_BYTE *)(v74 + 10))
    && (v77 != 0.0 ? (v78 = v77 == 1.0) : (v78 = 1), !v78)
    || (v79 = *(unsigned __int8 *)(v74 + v76 + 11), v77 = 0.0, v79 == 2))
  {
    v282 = v77;
    v290[0] = 1;
    v298[0] = 1;
    v80 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v74, v75, 0, v290);
    v81 = (uint64_t)vmla_n_f32((float32x2_t)v80, vsub_f32(*(float32x2_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v74, v75, 1u, v298), (float32x2_t)v80), v282);
  }
  else
  {
    v81 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(*(_QWORD *)(v292 + 24), v75, v79, 0);
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v292);
  v276 = *(float64x2_t *)(a3 + 8);
  v82 = *(_QWORD *)(*(_QWORD *)(v287 + 376) + 2248);
  v83 = *(_QWORD *)(v82 + 8);
  if (v83 == *(_QWORD *)v82)
  {
    v94 = *(_QWORD *)(v82 + 88);
    if (!v94)
      goto LABEL_333;
    v283 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 48))(v94);
    v84 = *(uint64_t **)(v82 + 40);
    v95 = *(_QWORD *)(v82 + 48);
    if ((unint64_t)v84 >= v95)
    {
      v97 = *(_QWORD *)(v82 + 32);
      v98 = ((uint64_t)v84 - v97) >> 3;
      v99 = v98 + 1;
      if (!((unint64_t)(v98 + 1) >> 61))
      {
        v100 = v95 - v97;
        if (v100 >> 2 > v99)
          v99 = v100 >> 2;
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
          v101 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v101 = v99;
        if (v101)
        {
          v102 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v82 + 56) + 16))(*(_QWORD *)(v82 + 56), 8 * v101, 8);
          v92 = (uint64_t *)(v102 + 8 * v98);
          v93 = v102 + 8 * v101;
          if (v102)
            *v92 = v283;
        }
        else
        {
          v93 = 0;
          v92 = (uint64_t *)(8 * v98);
        }
        v96 = v92 + 1;
        v120 = *(_QWORD *)(v82 + 32);
        v103 = *(_QWORD *)(v82 + 40);
        if (v103 == v120)
          goto LABEL_218;
        v121 = v103 - v120 - 8;
        if (v121 < 0x38)
        {
          v123 = *(_QWORD *)(v82 + 40);
        }
        else if ((unint64_t)(v103 - (_QWORD)v92) < 0x20)
        {
          v123 = *(_QWORD *)(v82 + 40);
        }
        else
        {
          v122 = (v121 >> 3) + 1;
          v123 = v103 - 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
          v124 = v92 - 2;
          v125 = (__int128 *)(v103 - 16);
          v126 = v122 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v127 = *v125;
            *((_OWORD *)v124 - 1) = *(v125 - 1);
            *(_OWORD *)v124 = v127;
            v124 -= 4;
            v125 -= 2;
            v126 -= 4;
          }
          while (v126);
          v92 -= v122 & 0x3FFFFFFFFFFFFFFCLL;
          if (v122 == (v122 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_217;
        }
        do
        {
          v129 = *(_QWORD *)(v123 - 8);
          v123 -= 8;
          *--v92 = v129;
        }
        while (v123 != v120);
        goto LABEL_217;
      }
LABEL_335:
      abort();
    }
  }
  else
  {
    v283 = *(_QWORD *)(v83 - 8);
    *(_QWORD *)(v82 + 8) = v83 - 8;
    v84 = *(uint64_t **)(v82 + 40);
    v85 = *(_QWORD *)(v82 + 48);
    if ((unint64_t)v84 >= v85)
    {
      v86 = *(_QWORD *)(v82 + 32);
      v87 = ((uint64_t)v84 - v86) >> 3;
      v88 = v87 + 1;
      if (!((unint64_t)(v87 + 1) >> 61))
      {
        v89 = v85 - v86;
        if (v89 >> 2 > v88)
          v88 = v89 >> 2;
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v88;
        if (v90)
        {
          v91 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v82 + 56) + 16))(*(_QWORD *)(v82 + 56), 8 * v90, 8);
          v92 = (uint64_t *)(v91 + 8 * v87);
          v93 = v91 + 8 * v90;
          if (v91)
            *v92 = v283;
        }
        else
        {
          v93 = 0;
          v92 = (uint64_t *)(8 * v87);
        }
        v96 = v92 + 1;
        v104 = *(_QWORD *)(v82 + 32);
        v103 = *(_QWORD *)(v82 + 40);
        if (v103 == v104)
          goto LABEL_218;
        v105 = v103 - v104 - 8;
        if (v105 < 0x38)
        {
          v107 = *(_QWORD *)(v82 + 40);
        }
        else if ((unint64_t)(v103 - (_QWORD)v92) < 0x20)
        {
          v107 = *(_QWORD *)(v82 + 40);
        }
        else
        {
          v106 = (v105 >> 3) + 1;
          v107 = v103 - 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = v92 - 2;
          v109 = (__int128 *)(v103 - 16);
          v110 = v106 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v111 = *v109;
            *((_OWORD *)v108 - 1) = *(v109 - 1);
            *(_OWORD *)v108 = v111;
            v108 -= 4;
            v109 -= 2;
            v110 -= 4;
          }
          while (v110);
          v92 -= v106 & 0x3FFFFFFFFFFFFFFCLL;
          if (v106 == (v106 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_217;
        }
        do
        {
          v128 = *(_QWORD *)(v107 - 8);
          v107 -= 8;
          *--v92 = v128;
        }
        while (v107 != v104);
LABEL_217:
        v103 = *(_QWORD *)(v82 + 32);
LABEL_218:
        *(_QWORD *)(v82 + 32) = v92;
        *(_QWORD *)(v82 + 40) = v96;
        v130 = *(_QWORD *)(v82 + 48);
        *(_QWORD *)(v82 + 48) = v93;
        if (v103)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v82 + 56) + 40))(*(_QWORD *)(v82 + 56), v103, v130 - v103);
        goto LABEL_220;
      }
      goto LABEL_335;
    }
  }
  if (v84)
    *v84 = v283;
  v96 = v84 + 1;
LABEL_220:
  *(_QWORD *)(v82 + 40) = v96;
  *(_QWORD *)&v292 = v283;
  v131 = *(_QWORD *)(v82 + 120);
  if (!v131)
    goto LABEL_333;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v131 + 48))(v131, &v292);
  v132 = *(uint64_t **)a3;
  v133 = *(uint64_t **)(v283 + 64);
  v133[1] = 0;
  v134 = *v132;
  *v133 = *v132;
  v135 = *(uint64_t **)(v283 + 160);
  v136 = v132[1];
  if (v136)
  {
    v137 = (unint64_t *)(v136 + 8);
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
  }
  v139 = (std::__shared_weak_count *)v135[1];
  *v135 = v134;
  v135[1] = v136;
  if (v139)
  {
    v140 = (unint64_t *)&v139->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = *(_QWORD *)(*(_QWORD *)(v287 + 376) + 2488);
  v143 = *(_QWORD *)(v142 + 8);
  if (v143 == *(_QWORD *)v142)
  {
    v154 = *(_QWORD *)(v142 + 88);
    if (!v154)
      goto LABEL_333;
    v280 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 48))(v154);
    v144 = *(uint64_t **)(v142 + 40);
    v155 = *(_QWORD *)(v142 + 48);
    if ((unint64_t)v144 >= v155)
    {
      v157 = *(_QWORD *)(v142 + 32);
      v158 = ((uint64_t)v144 - v157) >> 3;
      v159 = v158 + 1;
      if (!((unint64_t)(v158 + 1) >> 61))
      {
        v160 = v155 - v157;
        if (v160 >> 2 > v159)
          v159 = v160 >> 2;
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
          v161 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v161 = v159;
        if (v161)
        {
          v162 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v142 + 56) + 16))(*(_QWORD *)(v142 + 56), 8 * v161, 8);
          v152 = (uint64_t *)(v162 + 8 * v158);
          v153 = v162 + 8 * v161;
          if (v162)
            *v152 = v280;
        }
        else
        {
          v153 = 0;
          v152 = (uint64_t *)(8 * v158);
        }
        v156 = v152 + 1;
        v172 = *(_QWORD *)(v142 + 32);
        v163 = *(_QWORD *)(v142 + 40);
        if (v163 == v172)
          goto LABEL_278;
        v173 = v163 - v172 - 8;
        if (v173 < 0x38)
        {
          v175 = *(_QWORD *)(v142 + 40);
        }
        else if ((unint64_t)(v163 - (_QWORD)v152) < 0x20)
        {
          v175 = *(_QWORD *)(v142 + 40);
        }
        else
        {
          v174 = (v173 >> 3) + 1;
          v175 = v163 - 8 * (v174 & 0x3FFFFFFFFFFFFFFCLL);
          v176 = v152 - 2;
          v177 = (__int128 *)(v163 - 16);
          v178 = v174 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v179 = *v177;
            *((_OWORD *)v176 - 1) = *(v177 - 1);
            *(_OWORD *)v176 = v179;
            v176 -= 4;
            v177 -= 2;
            v178 -= 4;
          }
          while (v178);
          v152 -= v174 & 0x3FFFFFFFFFFFFFFCLL;
          if (v174 == (v174 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_277;
        }
        do
        {
          v181 = *(_QWORD *)(v175 - 8);
          v175 -= 8;
          *--v152 = v181;
        }
        while (v175 != v172);
        goto LABEL_277;
      }
LABEL_336:
      abort();
    }
  }
  else
  {
    v280 = *(_QWORD *)(v143 - 8);
    *(_QWORD *)(v142 + 8) = v143 - 8;
    v144 = *(uint64_t **)(v142 + 40);
    v145 = *(_QWORD *)(v142 + 48);
    if ((unint64_t)v144 >= v145)
    {
      v146 = *(_QWORD *)(v142 + 32);
      v147 = ((uint64_t)v144 - v146) >> 3;
      v148 = v147 + 1;
      if (!((unint64_t)(v147 + 1) >> 61))
      {
        v149 = v145 - v146;
        if (v149 >> 2 > v148)
          v148 = v149 >> 2;
        if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8)
          v150 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v150 = v148;
        if (v150)
        {
          v151 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v142 + 56) + 16))(*(_QWORD *)(v142 + 56), 8 * v150, 8);
          v152 = (uint64_t *)(v151 + 8 * v147);
          v153 = v151 + 8 * v150;
          if (v151)
            *v152 = v280;
        }
        else
        {
          v153 = 0;
          v152 = (uint64_t *)(8 * v147);
        }
        v156 = v152 + 1;
        v164 = *(_QWORD *)(v142 + 32);
        v163 = *(_QWORD *)(v142 + 40);
        if (v163 == v164)
          goto LABEL_278;
        v165 = v163 - v164 - 8;
        if (v165 < 0x38)
        {
          v167 = *(_QWORD *)(v142 + 40);
        }
        else if ((unint64_t)(v163 - (_QWORD)v152) < 0x20)
        {
          v167 = *(_QWORD *)(v142 + 40);
        }
        else
        {
          v166 = (v165 >> 3) + 1;
          v167 = v163 - 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
          v168 = v152 - 2;
          v169 = (__int128 *)(v163 - 16);
          v170 = v166 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v171 = *v169;
            *((_OWORD *)v168 - 1) = *(v169 - 1);
            *(_OWORD *)v168 = v171;
            v168 -= 4;
            v169 -= 2;
            v170 -= 4;
          }
          while (v170);
          v152 -= v166 & 0x3FFFFFFFFFFFFFFCLL;
          if (v166 == (v166 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_277;
        }
        do
        {
          v180 = *(_QWORD *)(v167 - 8);
          v167 -= 8;
          *--v152 = v180;
        }
        while (v167 != v164);
LABEL_277:
        v163 = *(_QWORD *)(v142 + 32);
LABEL_278:
        *(_QWORD *)(v142 + 32) = v152;
        *(_QWORD *)(v142 + 40) = v156;
        v182 = *(_QWORD *)(v142 + 48);
        *(_QWORD *)(v142 + 48) = v153;
        if (v163)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v142 + 56) + 40))(*(_QWORD *)(v142 + 56), v163, v182 - v163);
        goto LABEL_280;
      }
      goto LABEL_336;
    }
  }
  if (v144)
    *v144 = v280;
  v156 = v144 + 1;
LABEL_280:
  *(_QWORD *)(v142 + 40) = v156;
  *(_QWORD *)&v292 = v280;
  v183 = *(_QWORD *)(v142 + 120);
  if (v183)
  {
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v183 + 48))(v183, &v292);
    v184 = vmovl_u16(v73);
    v185 = vcvtq_f64_f32((float32x2_t)v81);
    v186 = *(uint64_t **)a3;
    v187 = *(uint64_t **)(v280 + 64);
    v187[1] = 0;
    v188 = *v186;
    *v187 = *v186;
    v189 = *(uint64_t **)(v280 + 160);
    v190 = v186[1];
    if (v190)
    {
      v191 = (unint64_t *)(v190 + 8);
      do
        v192 = __ldxr(v191);
      while (__stxr(v192 + 1, v191));
    }
    v193 = vcvtq_f32_u32(v184);
    v194 = (float32x4_t)vdupq_n_s32(0x37800080u);
    v195 = vdivq_f64(v185, v276);
    v196 = (std::__shared_weak_count *)v189[1];
    *v189 = v188;
    v189[1] = v190;
    v197 = v288;
    if (v196)
    {
      v198 = (unint64_t *)&v196->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        v274 = v194;
        v277 = v193;
        v272 = v195;
        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
        std::__shared_weak_count::__release_weak(v196);
        v195 = v272;
        v194 = v274;
        v193 = v277;
        v197 = v288;
      }
    }
    v200 = vmulq_f32(v193, v194);
    v201 = vcvt_f32_f64(v195);
    v202 = *(_QWORD *)(v280 + 64);
    *(_QWORD *)(v202 + 16) = *(_QWORD *)(*(_QWORD *)(v283 + 64) + 16);
    *(_QWORD *)(v202 + 24) = 0;
    v203 = *(_QWORD *)(v280 + 160);
    v204 = *(std::__shared_weak_count **)(v203 + 24);
    *(_QWORD *)(v203 + 16) = 0;
    *(_QWORD *)(v203 + 24) = 0;
    if (v204)
    {
      v205 = (unint64_t *)&v204->__shared_owners_;
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
      if (!v206)
      {
        v278 = v200;
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
        v200 = v278;
        v197 = v288;
      }
    }
    v207 = *(_QWORD **)(*(_QWORD *)(v283 + 64) + 16);
    v208 = v207[1];
    v209 = v207[9];
    *(float32x4_t *)v209 = v200;
    *(float32x2_t *)(v209 + 16) = v201;
    if (v207[8] > v208)
      v208 = v207[8];
    v207[7] = 0;
    v207[8] = v208;
    memset(&v290[4], 0, 32);
    v210 = *(_QWORD *)(v287 + 376);
    v275 = *(unsigned __int8 *)(v210 + 3673);
    v211 = *(unsigned __int8 *)(v287 + 393);
    v212 = 20 * (__int16)-[VKPolygonGroup layer](v197, "layer") + 0x800000004;
    if (!v211)
      v212 = 0x800000004;
    v273 = v212;
    memset(&v298[4], 0, 32);
    v213 = *(_QWORD *)(v287 + 376);
    v271 = *(unsigned __int8 *)(v213 + 3673);
    v214 = *(unsigned __int8 *)(v287 + 393);
    v215 = 20 * (__int16)-[VKPolygonGroup layer](v288, "layer") + 0x800000005;
    if (!v214)
      v215 = 0x800000005;
    v270 = v215;
    v216 = -[VKPolygonGroup strokeMeshes](v288, "strokeMeshes");
    v217 = *(uint64_t **)v216;
    v218 = *(uint64_t **)(v216 + 8);
    v219 = v287;
    if (*(uint64_t **)v216 == v218)
      goto LABEL_142;
    v220 = 0;
    v268 = v213 + 2496;
    v269 = vdupq_n_s64(1uLL);
    while (1)
    {
      v221 = *(_QWORD *)(v219 + 376);
      v222 = *(unsigned int *)(a3 + 48);
      v296[0] = &off_1E42D2830;
      v297 = v296;
      v223 = -[VKPolygonalItemGroup commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:](v288, "commitRangesToStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:featureIdPredicate:", v221 + 3712, v220, v222, v296);
      v224 = v297;
      if (v297 == v296)
        break;
      if (v297)
      {
        v225 = 5;
LABEL_306:
        (*(void (**)(void))(*v224 + 8 * v225))();
      }
      v226 = *(_QWORD *)(v219 + 376);
      v227 = *v217;
      v292 = *(_OWORD *)v290;
      v293 = *(_OWORD *)&v290[16];
      v294 = *(_DWORD *)&v290[32];
      v228 = *(_QWORD **)(v226 + 3800);
      v229 = v228[1];
      if (v229 == *(_QWORD *)(v226 + 3808))
      {
        v228 = (_QWORD *)*v228;
        if (!v228)
        {
          v228 = malloc_type_malloc(120 * v229 + 16, 0xB644C221uLL);
          *v228 = 0;
          v228[1] = 0;
          **(_QWORD **)(v226 + 3800) = v228;
        }
        *(_QWORD *)(v226 + 3800) = v228;
        v229 = v228[1];
      }
      v230 = &v228[15 * v229];
      v228[1] = v229 + 1;
      v230[2] = &off_1E42B59B0;
      v230 += 2;
      v230[2] = "";
      v230[3] = v210 + 2256;
      v230[4] = v283;
      *((_DWORD *)v230 + 10) = v275;
      v230[6] = v273;
      *((_DWORD *)v230 + 14) = 1065353216;
      v231 = v294;
      v232 = v293;
      *(_OWORD *)((char *)v230 + 60) = v292;
      *((_DWORD *)v230 + 23) = v231;
      *(_OWORD *)((char *)v230 + 76) = v232;
      *((int64x2_t *)v230 + 6) = v269;
      v230[14] = 0;
      v230[8] = v227;
      v233 = *v223;
      v230[11] = *v223;
      v230[12] = (v223[1] - v233) >> 4;
      ggl::CommandBuffer::pushRenderItem((uint64_t)v285, (ggl::RenderItem *)v230);
      v234 = *(_QWORD *)(v287 + 376);
      v235 = *v217;
      v292 = *(_OWORD *)v298;
      v293 = *(_OWORD *)&v298[16];
      v294 = *(_DWORD *)&v298[32];
      v236 = *(_QWORD **)(v234 + 3800);
      v237 = v236[1];
      if (v237 == *(_QWORD *)(v234 + 3808))
      {
        v236 = (_QWORD *)*v236;
        if (!v236)
        {
          v236 = malloc_type_malloc(120 * v237 + 16, 0xB644C221uLL);
          *v236 = 0;
          v236[1] = 0;
          **(_QWORD **)(v234 + 3800) = v236;
        }
        *(_QWORD *)(v234 + 3800) = v236;
        v237 = v236[1];
      }
      v238 = &v236[15 * v237];
      v236[1] = v237 + 1;
      v238[2] = &off_1E42B59B0;
      v238 += 2;
      v238[2] = "";
      v238[3] = v268;
      v238[4] = v280;
      *((_DWORD *)v238 + 10) = v271;
      v238[6] = v270;
      *((_DWORD *)v238 + 14) = 1065353216;
      v239 = v294;
      v240 = v293;
      *(_OWORD *)((char *)v238 + 60) = v292;
      *((_DWORD *)v238 + 23) = v239;
      *(_OWORD *)((char *)v238 + 76) = v240;
      *((int64x2_t *)v238 + 6) = vdupq_n_s64(1uLL);
      v238[14] = 0;
      v238[8] = v235;
      v241 = *v223;
      v238[11] = *v223;
      v238[12] = (v223[1] - v241) >> 4;
      ggl::CommandBuffer::pushRenderItem((uint64_t)v285, (ggl::RenderItem *)v238);
      v219 = v287;
      ++v220;
      v217 += 2;
      if (v217 == v218)
        goto LABEL_142;
    }
    v224 = v296;
    v225 = 4;
    goto LABEL_306;
  }
LABEL_333:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F84C15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::featureIdPredicateAlways(void)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateAlways(void)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::featureIdPredicateAlways(void)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateAlways(void)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D2830;
  return result;
}

void std::__function::__func<md::featureIdPredicateAlways(void)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateAlways(void)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D2830;
}

uint64_t std::__function::__func<md::featureIdPredicateAlways(void)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateAlways(void)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::operator()()
{
  return 1;
}

void std::__function::__func<md::VenueRenderLayer::_layoutVenueWalls(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::_layoutVenueWalls(md::LayoutContext const&)::$_0>,void ()(VKVenueGroup const*,md::VenueRenderLayer::VenueGroupLayoutData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::VenueRenderLayer::_layoutVenueWalls(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::_layoutVenueWalls(md::LayoutContext const&)::$_0>,void ()(VKVenueGroup const*,md::VenueRenderLayer::VenueGroupLayoutData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CE228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::VenueRenderLayer::_layoutVenueWalls(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::_layoutVenueWalls(md::LayoutContext const&)::$_0>,void ()(VKVenueGroup const*,md::VenueRenderLayer::VenueGroupLayoutData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CE228;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::VenueRenderLayer::_layoutVenueWalls(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::_layoutVenueWalls(md::LayoutContext const&)::$_0>,void ()(VKVenueGroup const*,md::VenueRenderLayer::VenueGroupLayoutData const&)>::operator()(uint64_t a1, id *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  __int128 *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int8x8_t v96;
  uint8x8_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  id v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  id v127;
  char v128;
  _DWORD *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float v141;
  uint64_t v142;
  _QWORD *v143;
  _DWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  float v148;
  float v149;
  float v150;
  float *v151;
  __int128 v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  float v161;
  uint64_t v162;
  unsigned int v163;
  float *v164;
  float v165;
  BOOL v166;
  int v167;
  char v168;
  char v169;
  float v170;
  uint64_t v171;
  unsigned int v172;
  float *v173;
  float v174;
  BOOL v175;
  int v176;
  char v177;
  char v178;
  double v179;
  unint64_t v180;
  float v181;
  float *v182;
  float v183;
  BOOL v184;
  unsigned int v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  double v191;
  unint64_t v192;
  float v193;
  float *v194;
  float v195;
  BOOL v196;
  unsigned int v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  double v204;
  double v205;
  float v206;
  float v207;
  unint64_t v208;
  float v209;
  float *v210;
  float v211;
  unsigned int v212;
  float v213;
  float v214;
  float v215;
  float v216;
  unint64_t v217;
  float v218;
  float *v219;
  float v220;
  unsigned int v221;
  float v222;
  float v223;
  float v224;
  float v225;
  uint64_t v226;
  unsigned int v227;
  float *v228;
  float v229;
  _BOOL4 v230;
  unsigned int v231;
  int hasValueForKeyAtZAtEnd;
  float v233;
  float v234;
  _BOOL4 v235;
  unsigned int v236;
  int v237;
  int v238;
  float v239;
  uint64_t v240;
  float *v241;
  float v242;
  float v243;
  __int128 v244;
  _QWORD *v245;
  int v246;
  int v247;
  unint64_t v248;
  unint64_t v249;
  __int128 v250;
  _QWORD *v251;
  int v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  int v258;
  __int16 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  unsigned int v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  int v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  int v285;
  __int128 v286;
  uint64_t v287;
  __int128 v288;
  _QWORD *v289;
  int v290;
  int v291;
  unint64_t v292;
  unint64_t v293;
  __int128 v294;
  _QWORD *v295;
  int v296;
  int v297;
  unint64_t v298;
  unint64_t v299;
  id v300;
  id v301;
  double v302;
  double v303;
  uint64_t v304;
  uint64_t v305;
  ggl::CommandBuffer *v306;
  _QWORD *v307;
  float32x4_t v308;
  int64x2_t v309;
  int64x2_t v310;
  VKPolygonGroup *v311;
  __int128 v312;
  __int128 v313;
  _QWORD v314[2];
  unsigned __int8 v315;
  char v316;
  _BYTE v317[36];
  uint64_t v318;
  __int128 v319;
  __int128 v320;
  int v321;
  uint64_t v322;
  uint64_t v323;

  v323 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *(_QWORD **)(a1 + 8);
  md::VenueRenderLayer::_layoutVenueWallGroupFills((uint64_t)v6, *(_QWORD *)(a1 + 16), v5, **(_QWORD **)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 16);
  v306 = **(ggl::CommandBuffer ***)(a1 + 24);
  v311 = (VKPolygonGroup *)v5;
  v8 = *(id *)(v6[5] + 104);
  objc_msgSend(v8, "sizeInPixels");
  v302 = v10;
  v303 = v9;
  v11 = *(_QWORD *)(v6[47] + 1256);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 == *(_QWORD *)v11)
  {
    v23 = *(_QWORD *)(v11 + 88);
    if (!v23)
    {
LABEL_355:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_359:
      __break(1u);
      return;
    }
    v305 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
    v13 = *(uint64_t **)(v11 + 40);
    v24 = *(_QWORD *)(v11 + 48);
    if ((unint64_t)v13 >= v24)
    {
      v26 = *(_QWORD *)(v11 + 32);
      v27 = ((uint64_t)v13 - v26) >> 3;
      v28 = v27 + 1;
      if (!((unint64_t)(v27 + 1) >> 61))
      {
        v29 = v24 - v26;
        if (v29 >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 56) + 16))(*(_QWORD *)(v11 + 56), 8 * v30, 8);
          v21 = (uint64_t *)(v31 + 8 * v27);
          v22 = v31 + 8 * v30;
          if (v31)
            *v21 = v305;
        }
        else
        {
          v22 = 0;
          v21 = (uint64_t *)(8 * v27);
        }
        v25 = v21 + 1;
        v41 = *(_QWORD *)(v11 + 32);
        v32 = *(_QWORD *)(v11 + 40);
        if (v32 == v41)
          goto LABEL_50;
        v42 = v32 - v41 - 8;
        if (v42 < 0x38)
        {
          v44 = *(_QWORD *)(v11 + 40);
        }
        else if ((unint64_t)(v32 - (_QWORD)v21) < 0x20)
        {
          v44 = *(_QWORD *)(v11 + 40);
        }
        else
        {
          v43 = (v42 >> 3) + 1;
          v44 = v32 - 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
          v45 = v21 - 2;
          v46 = (__int128 *)(v32 - 16);
          v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *v46;
            *((_OWORD *)v45 - 1) = *(v46 - 1);
            *(_OWORD *)v45 = v48;
            v45 -= 4;
            v46 -= 2;
            v47 -= 4;
          }
          while (v47);
          v21 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
          if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
        do
        {
          v50 = *(_QWORD *)(v44 - 8);
          v44 -= 8;
          *--v21 = v50;
        }
        while (v44 != v41);
        goto LABEL_49;
      }
LABEL_357:
      abort();
    }
  }
  else
  {
    v305 = *(_QWORD *)(v12 - 8);
    *(_QWORD *)(v11 + 8) = v12 - 8;
    v13 = *(uint64_t **)(v11 + 40);
    v14 = *(_QWORD *)(v11 + 48);
    if ((unint64_t)v13 >= v14)
    {
      v15 = *(_QWORD *)(v11 + 32);
      v16 = ((uint64_t)v13 - v15) >> 3;
      v17 = v16 + 1;
      if (!((unint64_t)(v16 + 1) >> 61))
      {
        v18 = v14 - v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 56) + 16))(*(_QWORD *)(v11 + 56), 8 * v19, 8);
          v21 = (uint64_t *)(v20 + 8 * v16);
          v22 = v20 + 8 * v19;
          if (v20)
            *v21 = v305;
        }
        else
        {
          v22 = 0;
          v21 = (uint64_t *)(8 * v16);
        }
        v25 = v21 + 1;
        v33 = *(_QWORD *)(v11 + 32);
        v32 = *(_QWORD *)(v11 + 40);
        if (v32 == v33)
          goto LABEL_50;
        v34 = v32 - v33 - 8;
        if (v34 < 0x38)
        {
          v36 = *(_QWORD *)(v11 + 40);
        }
        else if ((unint64_t)(v32 - (_QWORD)v21) < 0x20)
        {
          v36 = *(_QWORD *)(v11 + 40);
        }
        else
        {
          v35 = (v34 >> 3) + 1;
          v36 = v32 - 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          v37 = v21 - 2;
          v38 = (__int128 *)(v32 - 16);
          v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v40 = *v38;
            *((_OWORD *)v37 - 1) = *(v38 - 1);
            *(_OWORD *)v37 = v40;
            v37 -= 4;
            v38 -= 2;
            v39 -= 4;
          }
          while (v39);
          v21 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
          if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
        do
        {
          v49 = *(_QWORD *)(v36 - 8);
          v36 -= 8;
          *--v21 = v49;
        }
        while (v36 != v33);
LABEL_49:
        v32 = *(_QWORD *)(v11 + 32);
LABEL_50:
        *(_QWORD *)(v11 + 32) = v21;
        *(_QWORD *)(v11 + 40) = v25;
        v51 = *(_QWORD *)(v11 + 48);
        *(_QWORD *)(v11 + 48) = v22;
        if (v32)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 56) + 40))(*(_QWORD *)(v11 + 56), v32, v51 - v32);
        goto LABEL_52;
      }
      goto LABEL_357;
    }
  }
  if (v13)
    *v13 = v305;
  v25 = v13 + 1;
LABEL_52:
  *(_QWORD *)(v11 + 40) = v25;
  *(_QWORD *)&v319 = v305;
  v52 = *(_QWORD *)(v11 + 120);
  if (!v52)
    goto LABEL_355;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v52 + 48))(v52, &v319);
  v53 = *(_QWORD *)(v6[47] + 1280);
  v54 = *(_QWORD *)(v53 + 8);
  if (v54 == *(_QWORD *)v53)
  {
    v65 = *(_QWORD *)(v53 + 88);
    if (!v65)
    {
LABEL_356:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_359;
    }
    v304 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 48))(v65);
    v55 = *(uint64_t **)(v53 + 40);
    v66 = *(_QWORD *)(v53 + 48);
    if ((unint64_t)v55 >= v66)
    {
      v68 = *(_QWORD *)(v53 + 32);
      v69 = ((uint64_t)v55 - v68) >> 3;
      v70 = v69 + 1;
      if (!((unint64_t)(v69 + 1) >> 61))
      {
        v71 = v66 - v68;
        if (v71 >> 2 > v70)
          v70 = v71 >> 2;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          v73 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 16))(*(_QWORD *)(v53 + 56), 8 * v72, 8);
          v63 = (uint64_t *)(v73 + 8 * v69);
          v64 = v73 + 8 * v72;
          if (v73)
            *v63 = v304;
        }
        else
        {
          v64 = 0;
          v63 = (uint64_t *)(8 * v69);
        }
        v67 = v63 + 1;
        v83 = *(_QWORD *)(v53 + 32);
        v74 = *(_QWORD *)(v53 + 40);
        if (v74 == v83)
          goto LABEL_102;
        v84 = v74 - v83 - 8;
        if (v84 < 0x38)
        {
          v86 = *(_QWORD *)(v53 + 40);
        }
        else if ((unint64_t)(v74 - (_QWORD)v63) < 0x20)
        {
          v86 = *(_QWORD *)(v53 + 40);
        }
        else
        {
          v85 = (v84 >> 3) + 1;
          v86 = v74 - 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          v87 = v63 - 2;
          v88 = (__int128 *)(v74 - 16);
          v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v90 = *v88;
            *((_OWORD *)v87 - 1) = *(v88 - 1);
            *(_OWORD *)v87 = v90;
            v87 -= 4;
            v88 -= 2;
            v89 -= 4;
          }
          while (v89);
          v63 -= v85 & 0x3FFFFFFFFFFFFFFCLL;
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_101;
        }
        do
        {
          v92 = *(_QWORD *)(v86 - 8);
          v86 -= 8;
          *--v63 = v92;
        }
        while (v86 != v83);
        goto LABEL_101;
      }
LABEL_358:
      abort();
    }
  }
  else
  {
    v304 = *(_QWORD *)(v54 - 8);
    *(_QWORD *)(v53 + 8) = v54 - 8;
    v55 = *(uint64_t **)(v53 + 40);
    v56 = *(_QWORD *)(v53 + 48);
    if ((unint64_t)v55 >= v56)
    {
      v57 = *(_QWORD *)(v53 + 32);
      v58 = ((uint64_t)v55 - v57) >> 3;
      v59 = v58 + 1;
      if (!((unint64_t)(v58 + 1) >> 61))
      {
        v60 = v56 - v57;
        if (v60 >> 2 > v59)
          v59 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          v62 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 16))(*(_QWORD *)(v53 + 56), 8 * v61, 8);
          v63 = (uint64_t *)(v62 + 8 * v58);
          v64 = v62 + 8 * v61;
          if (v62)
            *v63 = v304;
        }
        else
        {
          v64 = 0;
          v63 = (uint64_t *)(8 * v58);
        }
        v67 = v63 + 1;
        v75 = *(_QWORD *)(v53 + 32);
        v74 = *(_QWORD *)(v53 + 40);
        if (v74 == v75)
          goto LABEL_102;
        v76 = v74 - v75 - 8;
        if (v76 < 0x38)
        {
          v78 = *(_QWORD *)(v53 + 40);
        }
        else if ((unint64_t)(v74 - (_QWORD)v63) < 0x20)
        {
          v78 = *(_QWORD *)(v53 + 40);
        }
        else
        {
          v77 = (v76 >> 3) + 1;
          v78 = v74 - 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v79 = v63 - 2;
          v80 = (__int128 *)(v74 - 16);
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v80;
            *((_OWORD *)v79 - 1) = *(v80 - 1);
            *(_OWORD *)v79 = v82;
            v79 -= 4;
            v80 -= 2;
            v81 -= 4;
          }
          while (v81);
          v63 -= v77 & 0x3FFFFFFFFFFFFFFCLL;
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_101;
        }
        do
        {
          v91 = *(_QWORD *)(v78 - 8);
          v78 -= 8;
          *--v63 = v91;
        }
        while (v78 != v75);
LABEL_101:
        v74 = *(_QWORD *)(v53 + 32);
LABEL_102:
        *(_QWORD *)(v53 + 32) = v63;
        *(_QWORD *)(v53 + 40) = v67;
        v93 = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 48) = v64;
        if (v74)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 40))(*(_QWORD *)(v53 + 56), v74, v93 - v74);
        goto LABEL_104;
      }
      goto LABEL_358;
    }
  }
  if (v55)
    *v55 = v304;
  v67 = v55 + 1;
LABEL_104:
  *(_QWORD *)(v53 + 40) = v67;
  *(_QWORD *)&v319 = v304;
  v94 = *(_QWORD *)(v53 + 120);
  if (!v94)
    goto LABEL_356;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v94 + 48))(v94, &v319);
  v95 = *(_QWORD **)(v7 + 8);
  v96 = (int8x8_t)v95[1];
  if (!*(_QWORD *)&v96)
    goto LABEL_128;
  v97 = (uint8x8_t)vcnt_s8(v96);
  v97.i16[0] = vaddlv_u8(v97);
  if (v97.u32[0] > 1uLL)
  {
    v98 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v96 <= 0xA60DDA5A69582425)
      v98 = 0xA60DDA5A69582425 % *(_QWORD *)&v96;
  }
  else
  {
    v98 = (*(_QWORD *)&v96 - 1) & 0xA60DDA5A69582425;
  }
  v99 = *(_QWORD **)(*v95 + 8 * v98);
  if (!v99)
    goto LABEL_128;
  v100 = (_QWORD *)*v99;
  if (!v100)
    goto LABEL_128;
  if (v97.u32[0] < 2uLL)
  {
    v101 = *(_QWORD *)&v96 - 1;
    while (1)
    {
      v103 = v100[1];
      if (v103 == 0xA60DDA5A69582425)
      {
        if (v100[2] == 0xA60DDA5A69582425)
          goto LABEL_126;
      }
      else if ((v103 & v101) != v98)
      {
        goto LABEL_128;
      }
      v100 = (_QWORD *)*v100;
      if (!v100)
        goto LABEL_128;
    }
  }
  while (1)
  {
    v102 = v100[1];
    if (v102 == 0xA60DDA5A69582425)
      break;
    if (v102 >= *(_QWORD *)&v96)
      v102 %= *(_QWORD *)&v96;
    if (v102 != v98)
      goto LABEL_128;
LABEL_115:
    v100 = (_QWORD *)*v100;
    if (!v100)
      goto LABEL_128;
  }
  if (v100[2] != 0xA60DDA5A69582425)
    goto LABEL_115;
LABEL_126:
  v104 = v100[5];
  if (*(_QWORD *)(v104 + 8) == 0xA60DDA5A69582425)
  {
    v105 = *(id **)(v104 + 32);
    goto LABEL_129;
  }
LABEL_128:
  v105 = 0;
LABEL_129:
  v106 = *(uint64_t **)a3;
  v107 = *(uint64_t **)(v305 + 64);
  v107[1] = 0;
  v108 = *v106;
  *v107 = *v106;
  v109 = *(_QWORD **)(v305 + 160);
  v110 = v106[1];
  if (v110)
  {
    v111 = (unint64_t *)(v110 + 8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v113 = (std::__shared_weak_count *)v109[1];
  *v109 = v108;
  v109[1] = v110;
  if (v113)
  {
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(p_shared_owners);
    while (__stlxr(v115 - 1, p_shared_owners));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = *v105;
  **(_QWORD **)(v305 + 96) = *(_QWORD *)(objc_msgSend(v116, "alphaAtlas") + 24);

  v117 = *(uint64_t **)a3;
  v118 = *(uint64_t **)(v304 + 64);
  v118[1] = 0;
  v119 = *v117;
  *v118 = *v117;
  v120 = *(_QWORD **)(v304 + 160);
  v121 = v117[1];
  if (v121)
  {
    v122 = (unint64_t *)(v121 + 8);
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  v124 = (std::__shared_weak_count *)v120[1];
  *v120 = v119;
  v120[1] = v121;
  if (v124)
  {
    v125 = (unint64_t *)&v124->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = *v105;
  **(_QWORD **)(v304 + 96) = *(_QWORD *)(objc_msgSend(v127, "alphaAtlas") + 24);

  v307 = v6;
  v128 = md::VenueLayerLayoutCharacteristics::focusState((md::VenueLayerLayoutCharacteristics *)(v6 + 48), v311);
  LOBYTE(v319) = 0;
  BYTE1(v319) = v128;
  v129 = -[VKPolygonalItemGroup styleQueries:](v311, "styleQueries:", &v319);
  v130 = v129[2] - *v129;
  v131 = (v130 >> 4);
  if ((v130 >> 4))
  {
    v132 = *(_QWORD *)(*(_QWORD *)(v305 + 64) + 16);
    v319 = 0uLL;
    v133 = *(_QWORD *)(v132 + 8);
    *(_QWORD *)&v134 = 0;
    *(_QWORD *)&v135 = 0;
    *((_QWORD *)&v135 + 1) = v132;
    v301 = v8;
    if (v133)
      v136 = *(_QWORD *)(v132 + 72);
    else
      v136 = 0;
    v319 = v135;
    *(_QWORD *)&v320 = 0;
    *((_QWORD *)&v320 + 1) = v133;
    v322 = v136;
    LOWORD(v321) = 1;
    v137 = *(_QWORD *)(*(_QWORD *)(v304 + 64) + 16);
    *(_OWORD *)v317 = 0uLL;
    v138 = *(_QWORD *)(v137 + 8);
    *((_QWORD *)&v134 + 1) = v137;
    v300 = v5;
    if (v138)
      v139 = *(_QWORD *)(v137 + 72);
    else
      v139 = 0;
    v140 = 0;
    *(_OWORD *)v317 = v134;
    *(_QWORD *)&v317[16] = 0;
    *(_QWORD *)&v317[24] = v138;
    v318 = v139;
    v141 = 1.0;
    *(_WORD *)&v317[32] = 1;
    while (1)
    {
      v152 = *(_OWORD *)(*(_QWORD *)v129 + 16 * v140);
      v312 = v152;
      v153 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
      if (*((_QWORD *)&v152 + 1))
      {
        v154 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
        v313 = v152;
        do
          v156 = __ldxr(v154);
        while (__stxr(v156 + 1, v154));
        v157 = v152;
      }
      else
      {
        v157 = v152;
        v313 = (unint64_t)v152;
      }
      v314[0] = 0;
      v314[1] = 0;
      v315 = 0;
      if (v157)
        LODWORD(v157) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v157 + 48))(v157, v314);
      v315 = v157;
      if (v153)
      {
        v158 = (unint64_t *)&v153->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
        LODWORD(v157) = v315;
      }
      if ((_DWORD)v157)
        break;
      v142 = v322;
      v143 = (_QWORD *)(v322 + 16 * v140);
      *v143 = 0;
      v143[1] = 0;
      v144 = (_DWORD *)(v142 + 4 * v140);
      v144[32] = 0;
      v144[40] = 0;
      v144[48] = 0;
      v144[56] = 0;
      v145 = v318;
      v146 = (_QWORD *)(v318 + 16 * v140);
      v147 = v318 + 4 * v140;
      *v146 = 0;
      v146[1] = 0;
      *(_DWORD *)(v147 + 128) = 0;
      v148 = 0.0;
      v149 = 0.0;
      v150 = 0.0;
LABEL_154:
      v151 = (float *)(v145 + 4 * v140);
      v151[40] = v148;
      v151[48] = v149;
      v151[56] = v150;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v313);
      if (++v140 == v131)
      {
        v242 = v303;
        v243 = v302;
        *(float *)(v142 + 256) = v242;
        *(float *)(v142 + 260) = v243;
        *(float *)(v145 + 256) = v242;
        *(float *)(v145 + 260) = v243;
        v244 = *(_OWORD *)&v317[16];
        if (*(_QWORD *)&v317[24] != *(_QWORD *)&v317[16])
        {
          v245 = *(_QWORD **)&v317[8];
          v246 = v317[32];
          v247 = v317[33];
          if (*(_QWORD *)v317 && *(_BYTE *)(*(_QWORD *)&v317[8] + 17) != 2)
            (*(void (**)(_QWORD))(**(_QWORD **)v317 + 64))(*(_QWORD *)v317);
          if (v246 && !v247)
          {
            v249 = v245[7];
            v248 = v245[8];
            if (v248 == v249)
              v249 = v245[10] - v245[9];
            if ((unint64_t)v244 < v249)
              v249 = v244;
            if (v248 <= *((_QWORD *)&v244 + 1))
              v248 = *((_QWORD *)&v244 + 1);
            if (v248 == v249)
              v248 = v249 + v245[10] - v245[9];
            v245[7] = v249;
            v245[8] = v248;
          }
        }
        v250 = v320;
        if (*((_QWORD *)&v320 + 1) != (_QWORD)v320)
        {
          v251 = (_QWORD *)*((_QWORD *)&v319 + 1);
          v252 = v321;
          v253 = BYTE1(v321);
          if ((_QWORD)v319 && *(_BYTE *)(*((_QWORD *)&v319 + 1) + 17) != 2)
            (*(void (**)(_QWORD))(*(_QWORD *)v319 + 64))(v319);
          if (v252 && !v253)
          {
            v255 = v251[7];
            v254 = v251[8];
            if (v254 == v255)
              v255 = v251[10] - v251[9];
            if ((unint64_t)v250 < v255)
              v255 = v250;
            if (v254 <= *((_QWORD *)&v250 + 1))
              v254 = *((_QWORD *)&v250 + 1);
            if (v254 == v255)
              v254 = v255 + v251[10] - v251[9];
            v251[7] = v255;
            v251[8] = v254;
          }
        }
        memset(&v317[4], 0, 32);
        v256 = v307;
        v257 = v307[47];
        v258 = *((unsigned __int8 *)v307 + 393);
        v259 = -[VKPolygonGroup layer](v311, "layer", v300);
        if (v258)
          v260 = 20 * v259 + 0x80000000ALL;
        else
          v260 = 0x80000000ALL;
        v261 = -[VKPolygonGroup venueWallHorizontalStrokeMeshes](v311, "venueWallHorizontalStrokeMeshes");
        v262 = v257 + 1288;
        v263 = *(uint64_t **)v261;
        v264 = *(uint64_t **)(v261 + 8);
        if (*(uint64_t **)v261 != v264)
        {
          v265 = 0;
          v309 = vdupq_n_s64(1uLL);
          do
          {
            v266 = -[VKPolygonalItemGroup commitRangesToHorizontalVenueWallStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:](v311, "commitRangesToHorizontalVenueWallStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:", v256[47] + 3712, v265, *(unsigned int *)(a3 + 48));
            v267 = v256[47];
            v268 = *v263;
            v319 = *(_OWORD *)v317;
            v320 = *(_OWORD *)&v317[16];
            v321 = *(_DWORD *)&v317[32];
            v269 = *(_QWORD **)(v267 + 3800);
            v270 = v269[1];
            if (v270 == *(_QWORD *)(v267 + 3808))
            {
              v269 = (_QWORD *)*v269;
              if (!v269)
              {
                v269 = malloc_type_malloc(120 * v270 + 16, 0xB644C221uLL);
                *v269 = 0;
                v269[1] = 0;
                **(_QWORD **)(v267 + 3800) = v269;
              }
              *(_QWORD *)(v267 + 3800) = v269;
              v270 = v269[1];
            }
            v271 = &v269[15 * v270];
            v269[1] = v270 + 1;
            v271[2] = &off_1E42B59B0;
            v271 += 2;
            v271[2] = "";
            v271[3] = v262;
            v271[4] = v305;
            v271[5] = 0;
            v271[6] = v260;
            *((_DWORD *)v271 + 14) = 1065353216;
            v272 = v321;
            v273 = v320;
            *(_OWORD *)((char *)v271 + 60) = v319;
            *((_DWORD *)v271 + 23) = v272;
            *(_OWORD *)((char *)v271 + 76) = v273;
            *((int64x2_t *)v271 + 6) = v309;
            v271[14] = 0;
            v271[8] = v268;
            v274 = *v266;
            v271[11] = *v266;
            v271[12] = (v266[1] - v274) >> 4;
            ggl::CommandBuffer::pushRenderItem((uint64_t)v306, (ggl::RenderItem *)v271);
            v256 = v307;
            ++v265;
            v263 += 2;
          }
          while (v263 != v264);
        }
        v275 = -[VKPolygonGroup venueWallVerticalStrokeMeshes](v311, "venueWallVerticalStrokeMeshes");
        v276 = *(uint64_t **)v275;
        v277 = *(uint64_t **)(v275 + 8);
        if (*(uint64_t **)v275 != v277)
        {
          v278 = 0;
          v310 = vdupq_n_s64(1uLL);
          do
          {
            v279 = -[VKPolygonalItemGroup commitRangesToVerticalVenueWallStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:](v311, "commitRangesToVerticalVenueWallStrokeRenderItemBatcher:forMeshAtIndex:cullingMask:", v256[47] + 3712, v278, *(unsigned int *)(a3 + 48));
            v280 = v256[47];
            v281 = *v276;
            v319 = *(_OWORD *)v317;
            v320 = *(_OWORD *)&v317[16];
            v321 = *(_DWORD *)&v317[32];
            v282 = *(_QWORD **)(v280 + 3800);
            v283 = v282[1];
            if (v283 == *(_QWORD *)(v280 + 3808))
            {
              v282 = (_QWORD *)*v282;
              if (!v282)
              {
                v282 = malloc_type_malloc(120 * v283 + 16, 0xB644C221uLL);
                *v282 = 0;
                v282[1] = 0;
                **(_QWORD **)(v280 + 3800) = v282;
              }
              *(_QWORD *)(v280 + 3800) = v282;
              v283 = v282[1];
            }
            v284 = &v282[15 * v283];
            v282[1] = v283 + 1;
            v284[2] = &off_1E42B59B0;
            v284 += 2;
            v284[2] = "";
            v284[3] = v262;
            v284[4] = v304;
            v284[5] = 0;
            v284[6] = v260;
            *((_DWORD *)v284 + 14) = 1065353216;
            v285 = v321;
            v286 = v320;
            *(_OWORD *)((char *)v284 + 60) = v319;
            *((_DWORD *)v284 + 23) = v285;
            *(_OWORD *)((char *)v284 + 76) = v286;
            *((int64x2_t *)v284 + 6) = v310;
            v284[14] = 0;
            v284[8] = v281;
            v287 = *v279;
            v284[11] = *v279;
            v284[12] = (v279[1] - v287) >> 4;
            ggl::CommandBuffer::pushRenderItem((uint64_t)v306, (ggl::RenderItem *)v284);
            v256 = v307;
            ++v278;
            v276 += 2;
          }
          while (v276 != v277);
        }
        v8 = v301;
        goto LABEL_322;
      }
    }
    v160 = v313;
    v161 = *(float *)(a3 + 28);
    if (!v140)
    {
      v162 = *(_QWORD *)(v313 + 24);
      if ((int)v161 >= 0x17)
        v163 = 23;
      else
        v163 = (int)v161;
      v164 = *(float **)v162;
      if (*(_QWORD *)v162
        && (v165 = *v164, LODWORD(v164) = *v164 == v141, *(_BYTE *)(v162 + 10))
        && (v165 != 0.0 ? (v166 = v165 == v141) : (v166 = 1), !v166)
        || (v167 = *(unsigned __int8 *)(v162 + v164 + 11), v165 = 0.0, v167 == 2))
      {
        LOBYTE(v312) = 1;
        v316 = 1;
        v168 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v162, 0x5Bu, v163, 0, &v312);
        v169 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v162, 0x5Bu, v163, 1, &v316);
        if (v165 < v141)
          v169 = v168;
        if (!v169)
        {
LABEL_323:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v313);
          if (v318)
          {
            v288 = *(_OWORD *)&v317[16];
            if (*(_QWORD *)&v317[24] != *(_QWORD *)&v317[16])
            {
              v289 = *(_QWORD **)&v317[8];
              v290 = v317[32];
              v291 = v317[33];
              if (*(_QWORD *)v317 && *(_BYTE *)(*(_QWORD *)&v317[8] + 17) != 2)
                (*(void (**)(_QWORD))(**(_QWORD **)v317 + 64))(*(_QWORD *)v317);
              if (v290 && !v291)
              {
                v293 = v289[7];
                v292 = v289[8];
                if (v292 == v293)
                  v293 = v289[10] - v289[9];
                if ((unint64_t)v288 < v293)
                  v293 = v288;
                if (v292 <= *((_QWORD *)&v288 + 1))
                  v292 = *((_QWORD *)&v288 + 1);
                if (v292 == v293)
                  v292 = v293 + v289[10] - v289[9];
                v289[7] = v293;
                v289[8] = v292;
              }
            }
          }
          if (v322)
          {
            v294 = v320;
            if (*((_QWORD *)&v320 + 1) != (_QWORD)v320)
            {
              v295 = (_QWORD *)*((_QWORD *)&v319 + 1);
              v296 = v321;
              v297 = BYTE1(v321);
              if ((_QWORD)v319 && *(_BYTE *)(*((_QWORD *)&v319 + 1) + 17) != 2)
                (*(void (**)(_QWORD))(*(_QWORD *)v319 + 64))(v319);
              if (v296 && !v297)
              {
                v299 = v295[7];
                v298 = v295[8];
                if (v298 == v299)
                  v299 = v295[10] - v295[9];
                if ((unint64_t)v294 < v299)
                  v299 = v294;
                if (v298 <= *((_QWORD *)&v294 + 1))
                  v298 = *((_QWORD *)&v294 + 1);
                if (v298 == v299)
                  v298 = v299 + v295[10] - v295[9];
                v295[7] = v299;
                v295[8] = v298;
              }
            }
          }
          goto LABEL_322;
        }
      }
      else if (!*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v313 + 24), 0x5Bu, v163, v167, 0))
      {
        goto LABEL_323;
      }
      v160 = v313;
      v161 = *(float *)(a3 + 28);
    }
    v170 = *(float *)(a3 + 32);
    v171 = *(_QWORD *)(v160 + 24);
    if ((int)v161 >= 0x17)
      v172 = 23;
    else
      v172 = (int)v161;
    v173 = *(float **)v171;
    if (*(_QWORD *)v171
      && (v174 = *v173, LODWORD(v173) = *v173 == v141, *(_BYTE *)(v171 + 10))
      && (v174 != 0.0 ? (v175 = v174 == v141) : (v175 = 1), !v175)
      || (v176 = *(unsigned __int8 *)(v171 + v173 + 11), v174 = 0.0, v176 == 2))
    {
      LOBYTE(v312) = 1;
      v316 = 1;
      v177 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v171, 0x145u, v172, 0, &v312);
      v178 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v171, 0x145u, v172, 1, &v316);
      if (v174 < v141)
        v178 = v177;
    }
    else
    {
      v178 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v171, 0x145u, v172, v176, 0);
    }
    if (v178)
      v179 = 1.0;
    else
      v179 = *(float *)(a3 + 36);
    v180 = *(_QWORD *)(v313 + 24);
    v181 = fminf(fmaxf(*(float *)(a3 + 28), 0.0), 23.0);
    v182 = *(float **)v180;
    if (*(_QWORD *)v180
      && (v183 = *v182, LODWORD(v182) = *v182 == v141, *(_BYTE *)(v180 + 10))
      && (v183 != 0.0 ? (v184 = v183 == v141) : (v184 = 1), !v184)
      || (v185 = *(unsigned __int8 *)(v180 + v182 + 11), v183 = 0.0, v185 == 2))
    {
      LOBYTE(v312) = 1;
      v316 = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v180, 0x141u, 0, (BOOL *)&v312, v181);
      v187 = v186;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v180, 0x141u, 1u, (BOOL *)&v316, v181);
      v189 = v187 + (float)((float)(v188 - v187) * v183);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v313 + 24), 0x141u, v185, 0, v181);
      v189 = v190;
    }
    v191 = *(double *)(a3 + 40);
    v192 = *(_QWORD *)(v313 + 24);
    v193 = fminf(fmaxf(*(float *)(a3 + 28), 0.0), 23.0);
    v194 = *(float **)v192;
    if (*(_QWORD *)v192
      && (v195 = *v194, LODWORD(v194) = *v194 == 1.0, *(_BYTE *)(v192 + 10))
      && (v195 != 0.0 ? (v196 = v195 == 1.0) : (v196 = 1), !v196)
      || (v197 = *(unsigned __int8 *)(v192 + v194 + 11), v195 = 0.0, v197 == 2))
    {
      LOBYTE(v312) = 1;
      v316 = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v192, 0x14Fu, 0, (BOOL *)&v312, v193);
      v199 = v198;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v192, 0x14Fu, 1u, (BOOL *)&v316, v193);
      v201 = v199 + (float)((float)(v200 - v199) * v195);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v313 + 24), 0x14Fu, v197, 0, v193);
      v201 = v202;
    }
    v141 = 1.0;
    v203 = v179 * v170;
    v204 = v203;
    v148 = v189 * v191 * v203;
    v205 = *(double *)(a3 + 40);
    v308 = 0u;
    v206 = 0.0;
    if (v148 >= 0.00000011921)
    {
      v208 = *(_QWORD *)(v313 + 24);
      v209 = fminf(fmaxf(*(float *)(a3 + 28), 0.0), 23.0);
      v210 = *(float **)v208;
      if (*(_QWORD *)v208
        && (v211 = *v210, LODWORD(v210) = *v210 == 1.0, *(_BYTE *)(v208 + 10))
        && v211 != 0.0
        && v211 != 1.0
        || (v212 = *(unsigned __int8 *)(v208 + v210 + 11), v211 = 0.0, v212 == 2))
      {
        LOBYTE(v312) = 1;
        v316 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v208, 2u, 0, (BOOL *)&v312, v209);
        v214 = v213;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v208, 2u, 1u, (BOOL *)&v316, v209);
        v207 = v214 + (float)((float)(v215 - v214) * v211);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v313 + 24), 2u, v212, 0, v209);
        v207 = v216;
      }
      v217 = *(_QWORD *)(v313 + 24);
      v218 = fminf(fmaxf(*(float *)(a3 + 28), 0.0), 23.0);
      v219 = *(float **)v217;
      if (*(_QWORD *)v217
        && (v220 = *v219, LODWORD(v219) = *v219 == 1.0, *(_BYTE *)(v217 + 10))
        && v220 != 0.0
        && v220 != 1.0
        || (v221 = *(unsigned __int8 *)(v217 + v219 + 11), v220 = 0.0, v221 == 2))
      {
        LOBYTE(v312) = 1;
        v316 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v217, 0x140u, 0, (BOOL *)&v312, v218);
        v223 = v222;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v217, 0x140u, 1u, (BOOL *)&v316, v218);
        v225 = v223 + (float)((float)(v224 - v223) * v220);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v313 + 24), 0x140u, v221, 0, v218);
      }
      v141 = 1.0;
      v206 = *(double *)(a3 + 40) * v225;
      if (v207 > 0.0)
      {
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v312, *(_QWORD *)(v313 + 24), 3u, 2u, fminf(fmaxf(*(float *)(a3 + 28), 0.0), 23.0));
        v308 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v312)), (float32x4_t)vdupq_n_s32(0x37800080u));
      }
    }
    else
    {
      v207 = 0.0;
    }
    v226 = *(_QWORD *)(v313 + 24);
    if ((int)*(float *)(a3 + 28) >= 0x17)
      v227 = 23;
    else
      v227 = (int)*(float *)(a3 + 28);
    v228 = *(float **)v226;
    if (*(_QWORD *)v226)
    {
      v229 = *v228;
      v230 = *v228 == v141;
      if (*(_BYTE *)(v226 + 10) && v229 != 0.0 && v229 != v141)
      {
LABEL_255:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v313 + 24), 0x13Fu, v227, 0) & 1) != 0)
          goto LABEL_258;
        v231 = 1;
LABEL_257:
        hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v226, 0x13Fu, v227, v231);
        v233 = 1.0;
        if (!hasValueForKeyAtZAtEnd)
        {
LABEL_273:
          v149 = v201 * v205 * v204;
          v142 = v322;
          v240 = 16 * v140;
          *(float32x4_t *)(v322 + v240) = v308;
          v241 = (float *)(v142 + 4 * v140);
          v241[32] = v207;
          v241[40] = v148;
          v241[48] = v149;
          v150 = v233 * v206;
          v241[56] = v150;
          v145 = v318;
          *(float32x4_t *)(v318 + v240) = v308;
          *(float *)(v145 + 4 * v140 + 128) = v207;
          goto LABEL_154;
        }
LABEL_258:
        if (v228)
        {
          v234 = *v228;
          v235 = *v228 == v141;
          if (*(_BYTE *)(v226 + 10) && v234 != 0.0 && v234 != v141)
            goto LABEL_265;
        }
        else
        {
          v235 = 0;
        }
        v236 = *(unsigned __int8 *)(v226 + v235 + 11);
        v234 = 0.0;
        if (v236 != 2)
        {
          v238 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v226, 0x13Fu, v227, v236, 0);
LABEL_269:
          v239 = 0.0;
          if ((_BYTE)v238)
            v239 = v141;
          v233 = 0.5;
          if (v238 != 2)
            v233 = v239;
          goto LABEL_273;
        }
LABEL_265:
        LOBYTE(v312) = 1;
        v316 = 1;
        v237 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v226, 0x13Fu, v227, 0, &v312);
        v238 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v226, 0x13Fu, v227, 1u, &v316);
        if (v234 < v141)
          LOBYTE(v238) = v237;
        goto LABEL_269;
      }
    }
    else
    {
      v230 = 0;
    }
    v231 = *(unsigned __int8 *)(v226 + v230 + 11);
    if (v231 != 2)
      goto LABEL_257;
    goto LABEL_255;
  }
LABEL_322:

}

void sub_19F84DAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{

  _Unwind_Resume(a1);
}

void md::VenueRenderLayer::_layoutVenueWallGroupFills(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  float v5;
  float v6;
  VKPolygonGroup *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  __int128 *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  __int128 *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  int8x8_t v139;
  uint8x8_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float64x2_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *p_shared_owners;
  unint64_t v158;
  uint64_t v159;
  float64_t v160;
  uint64_t v161;
  float64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  float64_t v184;
  uint64_t v185;
  float64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  float64_t v208;
  uint64_t v209;
  float64_t v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  float64_t v227;
  uint64_t v228;
  float64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  char v260;
  _DWORD *v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  float v289;
  unsigned int v290;
  uint64_t v291;
  int v292;
  float v293;
  int v294;
  float v295;
  float v296;
  BOOL v297;
  _QWORD *v298;
  float v299;
  float v300;
  float32x4_t v301;
  float v302;
  float v303;
  float v304;
  float32x2_t v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  float *v315;
  uint64_t v316;
  float v317;
  float *v318;
  float *v319;
  uint64_t v320;
  float v321;
  float *v322;
  uint64_t v323;
  float *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  _DWORD *v340;
  uint64_t v341;
  _QWORD *v342;
  _DWORD *v343;
  uint64_t v344;
  _QWORD *v345;
  _DWORD *v346;
  uint64_t v347;
  _QWORD *v348;
  _DWORD *v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  float *v354;
  float v355;
  BOOL v356;
  int v357;
  char v358;
  char v359;
  uint16x4_t v360;
  uint16x4_t v361;
  _BOOL4 v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  float v366;
  uint64_t v367;
  unsigned int v368;
  float *v369;
  float v370;
  BOOL v371;
  unsigned int v372;
  float v373;
  float v374;
  uint64_t v375;
  unsigned int v376;
  float *v377;
  float v378;
  int v379;
  char v380;
  char v381;
  double v382;
  unint64_t v383;
  float v384;
  float *v385;
  float v386;
  unsigned int v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  double v394;
  unint64_t v395;
  float v396;
  float *v397;
  float v398;
  unsigned int v399;
  float v400;
  float v401;
  float v402;
  float v403;
  double v404;
  unint64_t v405;
  float v406;
  float *v407;
  float v408;
  unsigned int v409;
  float v410;
  float v411;
  float v412;
  float v413;
  int v414;
  uint64_t v415;
  unsigned int v416;
  float *v417;
  float v418;
  _BOOL4 v419;
  unsigned int v420;
  float v421;
  _BOOL4 v422;
  int v423;
  _BOOL4 v424;
  int v425;
  unsigned int v426;
  int v427;
  float v428;
  unsigned int v429;
  float v430;
  float v431;
  uint64_t v432;
  unsigned int v433;
  float *v434;
  float v435;
  unsigned int v436;
  float v437;
  float v438;
  char v439;
  __int128 v440;
  __int128 v441;
  _QWORD *v442;
  int v443;
  int v444;
  unint64_t v445;
  unint64_t v446;
  _QWORD *v447;
  int v448;
  int v449;
  unint64_t v450;
  unint64_t v451;
  __int128 v452;
  _QWORD *v453;
  int v454;
  int v455;
  unint64_t v456;
  unint64_t v457;
  __int128 v458;
  _QWORD *v459;
  int v460;
  int v461;
  unint64_t v462;
  unint64_t v463;
  __int128 v464;
  _QWORD *v465;
  int v466;
  int v467;
  unint64_t v468;
  unint64_t v469;
  __int128 v470;
  _QWORD *v471;
  int v472;
  int v473;
  unint64_t v474;
  unint64_t v475;
  __int128 v476;
  _QWORD *v477;
  int v478;
  int v479;
  unint64_t v480;
  unint64_t v481;
  int v482;
  uint64_t v483;
  __int16 v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  VKPolygonGroup *v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t v497;
  unsigned int v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t v503;
  _QWORD *v504;
  int v505;
  __int128 v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  _QWORD *v510;
  uint64_t v511;
  _QWORD *v512;
  int v513;
  __int128 v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _QWORD *v518;
  uint64_t v519;
  _QWORD *v520;
  int v521;
  __int128 v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  _QWORD *v526;
  uint64_t v527;
  _QWORD *v528;
  int v529;
  __int128 v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  _QWORD *v534;
  uint64_t v535;
  _QWORD *v536;
  int v537;
  __int128 v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t *v541;
  uint64_t *v542;
  unsigned int v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t v546;
  _QWORD *v547;
  uint64_t v548;
  _QWORD *v549;
  int v550;
  __int128 v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  float v555;
  float32x2_t v556;
  _QWORD *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  VKPolygonGroup *v562;
  unint64_t v563;
  float v564;
  double v565;
  unsigned int v566;
  uint16x4_t v567;
  float v568;
  unsigned int v569;
  int64x2_t v570;
  unsigned int v571;
  uint64_t *v572;
  unsigned int v573;
  uint64_t v574;
  int64x2_t v575;
  uint64_t v576;
  int64x2_t v577;
  float v578;
  double v579;
  float64x2_t v580;
  float32x4_t v581;
  uint64_t v582;
  uint64_t v584;
  __int128 v585;
  __int128 v586;
  _QWORD v587[2];
  unsigned __int8 v588;
  char v589;
  __int128 v590;
  __int128 v591;
  int v592;
  uint64_t v593;
  _BYTE v594[36];
  uint64_t v595;
  _BYTE v596[36];
  uint64_t v597;
  __int128 v598;
  __int128 v599;
  int v600;
  uint64_t v601;
  __int128 v602;
  __int128 v603;
  int v604;
  uint64_t v605;
  _BYTE v606[36];
  uint64_t v607;
  __int128 v608;
  __int128 v609;
  int v610;
  uint64_t v611;
  uint64_t v612;

  v612 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v559 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 536));
  v558 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 536));
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 992);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 == *(_QWORD *)v11)
  {
    v23 = *(_QWORD *)(v11 + 88);
    if (!v23)
    {
LABEL_617:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_623:
      __break(1u);
      return;
    }
    v560 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
    v13 = *(uint64_t **)(v11 + 40);
    v24 = *(_QWORD *)(v11 + 48);
    if ((unint64_t)v13 >= v24)
    {
      v26 = *(_QWORD *)(v11 + 32);
      v27 = ((uint64_t)v13 - v26) >> 3;
      v28 = v27 + 1;
      if (!((unint64_t)(v27 + 1) >> 61))
      {
        v29 = v24 - v26;
        if (v29 >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 56) + 16))(*(_QWORD *)(v11 + 56), 8 * v30, 8);
          v21 = (uint64_t *)(v31 + 8 * v27);
          v22 = v31 + 8 * v30;
          if (v31)
            *v21 = v560;
        }
        else
        {
          v22 = 0;
          v21 = (uint64_t *)(8 * v27);
        }
        v25 = v21 + 1;
        v41 = *(_QWORD *)(v11 + 32);
        v32 = *(_QWORD *)(v11 + 40);
        if (v32 == v41)
          goto LABEL_50;
        v42 = v32 - v41 - 8;
        if (v42 < 0x38)
        {
          v44 = *(_QWORD *)(v11 + 40);
        }
        else if ((unint64_t)(v32 - (_QWORD)v21) < 0x20)
        {
          v44 = *(_QWORD *)(v11 + 40);
        }
        else
        {
          v43 = (v42 >> 3) + 1;
          v44 = v32 - 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
          v45 = v21 - 2;
          v46 = (__int128 *)(v32 - 16);
          v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *v46;
            *((_OWORD *)v45 - 1) = *(v46 - 1);
            *(_OWORD *)v45 = v48;
            v45 -= 4;
            v46 -= 2;
            v47 -= 4;
          }
          while (v47);
          v21 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
          if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
        do
        {
          v50 = *(_QWORD *)(v44 - 8);
          v44 -= 8;
          *--v21 = v50;
        }
        while (v44 != v41);
        goto LABEL_49;
      }
LABEL_620:
      abort();
    }
  }
  else
  {
    v560 = *(_QWORD *)(v12 - 8);
    *(_QWORD *)(v11 + 8) = v12 - 8;
    v13 = *(uint64_t **)(v11 + 40);
    v14 = *(_QWORD *)(v11 + 48);
    if ((unint64_t)v13 >= v14)
    {
      v15 = *(_QWORD *)(v11 + 32);
      v16 = ((uint64_t)v13 - v15) >> 3;
      v17 = v16 + 1;
      if (!((unint64_t)(v16 + 1) >> 61))
      {
        v18 = v14 - v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 56) + 16))(*(_QWORD *)(v11 + 56), 8 * v19, 8);
          v21 = (uint64_t *)(v20 + 8 * v16);
          v22 = v20 + 8 * v19;
          if (v20)
            *v21 = v560;
        }
        else
        {
          v22 = 0;
          v21 = (uint64_t *)(8 * v16);
        }
        v25 = v21 + 1;
        v33 = *(_QWORD *)(v11 + 32);
        v32 = *(_QWORD *)(v11 + 40);
        if (v32 == v33)
          goto LABEL_50;
        v34 = v32 - v33 - 8;
        if (v34 < 0x38)
        {
          v36 = *(_QWORD *)(v11 + 40);
        }
        else if ((unint64_t)(v32 - (_QWORD)v21) < 0x20)
        {
          v36 = *(_QWORD *)(v11 + 40);
        }
        else
        {
          v35 = (v34 >> 3) + 1;
          v36 = v32 - 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          v37 = v21 - 2;
          v38 = (__int128 *)(v32 - 16);
          v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v40 = *v38;
            *((_OWORD *)v37 - 1) = *(v38 - 1);
            *(_OWORD *)v37 = v40;
            v37 -= 4;
            v38 -= 2;
            v39 -= 4;
          }
          while (v39);
          v21 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
          if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
        do
        {
          v49 = *(_QWORD *)(v36 - 8);
          v36 -= 8;
          *--v21 = v49;
        }
        while (v36 != v33);
LABEL_49:
        v32 = *(_QWORD *)(v11 + 32);
LABEL_50:
        *(_QWORD *)(v11 + 32) = v21;
        *(_QWORD *)(v11 + 40) = v25;
        v51 = *(_QWORD *)(v11 + 48);
        *(_QWORD *)(v11 + 48) = v22;
        if (v32)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 56) + 40))(*(_QWORD *)(v11 + 56), v32, v51 - v32);
        goto LABEL_52;
      }
      goto LABEL_620;
    }
  }
  if (v13)
    *v13 = v560;
  v25 = v13 + 1;
LABEL_52:
  *(_QWORD *)(v11 + 40) = v25;
  *(_QWORD *)&v608 = v560;
  v52 = *(_QWORD *)(v11 + 120);
  if (!v52)
    goto LABEL_617;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v52 + 48))(v52, &v608);
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 1232);
  v54 = *(_QWORD *)(v53 + 8);
  if (v54 == *(_QWORD *)v53)
  {
    v65 = *(_QWORD *)(v53 + 88);
    if (!v65)
      goto LABEL_618;
    v561 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 48))(v65);
    v55 = *(uint64_t **)(v53 + 40);
    v66 = *(_QWORD *)(v53 + 48);
    if ((unint64_t)v55 >= v66)
    {
      v68 = *(_QWORD *)(v53 + 32);
      v69 = ((uint64_t)v55 - v68) >> 3;
      v70 = v69 + 1;
      if (!((unint64_t)(v69 + 1) >> 61))
      {
        v71 = v66 - v68;
        if (v71 >> 2 > v70)
          v70 = v71 >> 2;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          v73 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 16))(*(_QWORD *)(v53 + 56), 8 * v72, 8);
          v63 = (uint64_t *)(v73 + 8 * v69);
          v64 = v73 + 8 * v72;
          if (v73)
            *v63 = v561;
        }
        else
        {
          v64 = 0;
          v63 = (uint64_t *)(8 * v69);
        }
        v67 = v63 + 1;
        v83 = *(_QWORD *)(v53 + 32);
        v74 = *(_QWORD *)(v53 + 40);
        if (v74 == v83)
          goto LABEL_102;
        v84 = v74 - v83 - 8;
        if (v84 < 0x38)
        {
          v86 = *(_QWORD *)(v53 + 40);
        }
        else if ((unint64_t)(v74 - (_QWORD)v63) < 0x20)
        {
          v86 = *(_QWORD *)(v53 + 40);
        }
        else
        {
          v85 = (v84 >> 3) + 1;
          v86 = v74 - 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          v87 = v63 - 2;
          v88 = (__int128 *)(v74 - 16);
          v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v90 = *v88;
            *((_OWORD *)v87 - 1) = *(v88 - 1);
            *(_OWORD *)v87 = v90;
            v87 -= 4;
            v88 -= 2;
            v89 -= 4;
          }
          while (v89);
          v63 -= v85 & 0x3FFFFFFFFFFFFFFCLL;
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_101;
        }
        do
        {
          v92 = *(_QWORD *)(v86 - 8);
          v86 -= 8;
          *--v63 = v92;
        }
        while (v86 != v83);
        goto LABEL_101;
      }
LABEL_621:
      abort();
    }
LABEL_66:
    if (v55)
      *v55 = v561;
    v67 = v55 + 1;
    goto LABEL_104;
  }
  v561 = *(_QWORD *)(v54 - 8);
  *(_QWORD *)(v53 + 8) = v54 - 8;
  v55 = *(uint64_t **)(v53 + 40);
  v56 = *(_QWORD *)(v53 + 48);
  if ((unint64_t)v55 < v56)
    goto LABEL_66;
  v57 = *(_QWORD *)(v53 + 32);
  v58 = ((uint64_t)v55 - v57) >> 3;
  v59 = v58 + 1;
  if ((unint64_t)(v58 + 1) >> 61)
    goto LABEL_621;
  v60 = v56 - v57;
  if (v60 >> 2 > v59)
    v59 = v60 >> 2;
  if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
    v61 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v61 = v59;
  if (v61)
  {
    v62 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 16))(*(_QWORD *)(v53 + 56), 8 * v61, 8);
    v63 = (uint64_t *)(v62 + 8 * v58);
    v64 = v62 + 8 * v61;
    if (v62)
      *v63 = v561;
  }
  else
  {
    v64 = 0;
    v63 = (uint64_t *)(8 * v58);
  }
  v67 = v63 + 1;
  v75 = *(_QWORD *)(v53 + 32);
  v74 = *(_QWORD *)(v53 + 40);
  if (v74 == v75)
    goto LABEL_102;
  v76 = v74 - v75 - 8;
  if (v76 < 0x38)
  {
    v78 = *(_QWORD *)(v53 + 40);
  }
  else if ((unint64_t)(v74 - (_QWORD)v63) < 0x20)
  {
    v78 = *(_QWORD *)(v53 + 40);
  }
  else
  {
    v77 = (v76 >> 3) + 1;
    v78 = v74 - 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
    v79 = v63 - 2;
    v80 = (__int128 *)(v74 - 16);
    v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v82 = *v80;
      *((_OWORD *)v79 - 1) = *(v80 - 1);
      *(_OWORD *)v79 = v82;
      v79 -= 4;
      v80 -= 2;
      v81 -= 4;
    }
    while (v81);
    v63 -= v77 & 0x3FFFFFFFFFFFFFFCLL;
    if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_101;
  }
  do
  {
    v91 = *(_QWORD *)(v78 - 8);
    v78 -= 8;
    *--v63 = v91;
  }
  while (v78 != v75);
LABEL_101:
  v74 = *(_QWORD *)(v53 + 32);
LABEL_102:
  *(_QWORD *)(v53 + 32) = v63;
  *(_QWORD *)(v53 + 40) = v67;
  v93 = *(_QWORD *)(v53 + 48);
  *(_QWORD *)(v53 + 48) = v64;
  if (v74)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 40))(*(_QWORD *)(v53 + 56), v74, v93 - v74);
LABEL_104:
  *(_QWORD *)(v53 + 40) = v67;
  *(_QWORD *)&v608 = v561;
  v94 = *(_QWORD *)(v53 + 120);
  if (!v94)
    goto LABEL_618;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v94 + 48))(v94, &v608);
  v554 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 1520));
  v553 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 1760));
  v95 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 1984);
  v96 = *(_QWORD *)(v95 + 8);
  if (v96 != *(_QWORD *)v95)
  {
    v97 = *(_QWORD *)(v96 - 8);
    *(_QWORD *)(v95 + 8) = v96 - 8;
    v98 = *(uint64_t **)(v95 + 40);
    v99 = *(_QWORD *)(v95 + 48);
    if ((unint64_t)v98 >= v99)
    {
      v100 = *(_QWORD *)(v95 + 32);
      v101 = ((uint64_t)v98 - v100) >> 3;
      v102 = v101 + 1;
      if (!((unint64_t)(v101 + 1) >> 61))
      {
        v103 = v99 - v100;
        if (v103 >> 2 > v102)
          v102 = v103 >> 2;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
          v104 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v104 = v102;
        if (v104)
        {
          v105 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v95 + 56) + 16))(*(_QWORD *)(v95 + 56), 8 * v104, 8);
          v106 = (uint64_t *)(v105 + 8 * v101);
          v107 = v105 + 8 * v104;
          if (v105)
            *v106 = v97;
        }
        else
        {
          v107 = 0;
          v106 = (uint64_t *)(8 * v101);
        }
        v110 = v106 + 1;
        v118 = *(_QWORD *)(v95 + 32);
        v117 = *(_QWORD *)(v95 + 40);
        if (v117 == v118)
          goto LABEL_154;
        v119 = v117 - v118 - 8;
        if (v119 < 0x38)
        {
          v121 = *(_QWORD *)(v95 + 40);
        }
        else if ((unint64_t)(v117 - (_QWORD)v106) < 0x20)
        {
          v121 = *(_QWORD *)(v95 + 40);
        }
        else
        {
          v120 = (v119 >> 3) + 1;
          v121 = v117 - 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
          v122 = v106 - 2;
          v123 = (__int128 *)(v117 - 16);
          v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v125 = *v123;
            *((_OWORD *)v122 - 1) = *(v123 - 1);
            *(_OWORD *)v122 = v125;
            v122 -= 4;
            v123 -= 2;
            v124 -= 4;
          }
          while (v124);
          v106 -= v120 & 0x3FFFFFFFFFFFFFFCLL;
          if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_153;
        }
        do
        {
          v134 = *(_QWORD *)(v121 - 8);
          v121 -= 8;
          *--v106 = v134;
        }
        while (v121 != v118);
LABEL_153:
        v117 = *(_QWORD *)(v95 + 32);
LABEL_154:
        *(_QWORD *)(v95 + 32) = v106;
        *(_QWORD *)(v95 + 40) = v110;
        v136 = *(_QWORD *)(v95 + 48);
        *(_QWORD *)(v95 + 48) = v107;
        if (v117)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v95 + 56) + 40))(*(_QWORD *)(v95 + 56), v117, v136 - v117);
        goto LABEL_156;
      }
      goto LABEL_622;
    }
    goto LABEL_118;
  }
  v108 = *(_QWORD *)(v95 + 88);
  if (!v108)
  {
LABEL_618:
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_623;
  }
  v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 48))(v108);
  v98 = *(uint64_t **)(v95 + 40);
  v109 = *(_QWORD *)(v95 + 48);
  if ((unint64_t)v98 >= v109)
  {
    v111 = *(_QWORD *)(v95 + 32);
    v112 = ((uint64_t)v98 - v111) >> 3;
    v113 = v112 + 1;
    if (!((unint64_t)(v112 + 1) >> 61))
    {
      v114 = v109 - v111;
      if (v114 >> 2 > v113)
        v113 = v114 >> 2;
      if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
        v115 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v115 = v113;
      if (v115)
      {
        v116 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v95 + 56) + 16))(*(_QWORD *)(v95 + 56), 8 * v115, 8);
        v106 = (uint64_t *)(v116 + 8 * v112);
        v107 = v116 + 8 * v115;
        if (v116)
          *v106 = v97;
      }
      else
      {
        v107 = 0;
        v106 = (uint64_t *)(8 * v112);
      }
      v110 = v106 + 1;
      v126 = *(_QWORD *)(v95 + 32);
      v117 = *(_QWORD *)(v95 + 40);
      if (v117 == v126)
        goto LABEL_154;
      v127 = v117 - v126 - 8;
      if (v127 < 0x38)
      {
        v129 = *(_QWORD *)(v95 + 40);
      }
      else if ((unint64_t)(v117 - (_QWORD)v106) < 0x20)
      {
        v129 = *(_QWORD *)(v95 + 40);
      }
      else
      {
        v128 = (v127 >> 3) + 1;
        v129 = v117 - 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
        v130 = v106 - 2;
        v131 = (__int128 *)(v117 - 16);
        v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v133 = *v131;
          *((_OWORD *)v130 - 1) = *(v131 - 1);
          *(_OWORD *)v130 = v133;
          v130 -= 4;
          v131 -= 2;
          v132 -= 4;
        }
        while (v132);
        v106 -= v128 & 0x3FFFFFFFFFFFFFFCLL;
        if (v128 == (v128 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_153;
      }
      do
      {
        v135 = *(_QWORD *)(v129 - 8);
        v129 -= 8;
        *--v106 = v135;
      }
      while (v129 != v126);
      goto LABEL_153;
    }
LABEL_622:
    abort();
  }
LABEL_118:
  if (v98)
    *v98 = v97;
  v110 = v98 + 1;
LABEL_156:
  *(_QWORD *)(v95 + 40) = v110;
  *(_QWORD *)&v608 = v97;
  v137 = *(_QWORD *)(v95 + 120);
  if (!v137)
    goto LABEL_618;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v137 + 48))(v137, &v608);
  v138 = *(_QWORD **)(a2 + 8);
  v139 = (int8x8_t)v138[1];
  if (!*(_QWORD *)&v139)
    goto LABEL_180;
  v140 = (uint8x8_t)vcnt_s8(v139);
  v140.i16[0] = vaddlv_u8(v140);
  if (v140.u32[0] > 1uLL)
  {
    v141 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v139 <= 0x41E8D6E445F4145uLL)
      v141 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v139;
  }
  else
  {
    v141 = (*(_QWORD *)&v139 - 1) & 0x41E8D6E445F4145;
  }
  v142 = *(_QWORD **)(*v138 + 8 * v141);
  if (!v142)
    goto LABEL_180;
  v143 = (_QWORD *)*v142;
  if (!v143)
    goto LABEL_180;
  if (v140.u32[0] < 2uLL)
  {
    v144 = *(_QWORD *)&v139 - 1;
    while (1)
    {
      v146 = v143[1];
      if (v146 == 0x41E8D6E445F4145)
      {
        if (v143[2] == 0x41E8D6E445F4145)
          goto LABEL_178;
      }
      else if ((v146 & v144) != v141)
      {
        goto LABEL_180;
      }
      v143 = (_QWORD *)*v143;
      if (!v143)
        goto LABEL_180;
    }
  }
  while (1)
  {
    v145 = v143[1];
    if (v145 == 0x41E8D6E445F4145)
      break;
    if (v145 >= *(_QWORD *)&v139)
      v145 %= *(_QWORD *)&v139;
    if (v145 != v141)
      goto LABEL_180;
LABEL_167:
    v143 = (_QWORD *)*v143;
    if (!v143)
      goto LABEL_180;
  }
  if (v143[2] != 0x41E8D6E445F4145)
    goto LABEL_167;
LABEL_178:
  v147 = v143[5];
  if (*(_QWORD *)(v147 + 8) == 0x41E8D6E445F4145)
  {
    v148 = *(float64x2_t **)(v147 + 32);
    goto LABEL_181;
  }
LABEL_180:
  v148 = 0;
LABEL_181:
  v149 = *(uint64_t **)a5;
  v150 = *(uint64_t **)(v559 + 64);
  v150[1] = 0;
  v151 = *v149;
  *v150 = *v149;
  v152 = *(_QWORD **)(v559 + 160);
  v153 = v149[1];
  if (v153)
  {
    v154 = (unint64_t *)(v153 + 8);
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  v156 = (std::__shared_weak_count *)v152[1];
  *v152 = v151;
  v152[1] = v153;
  if (v156)
  {
    p_shared_owners = (unint64_t *)&v156->__shared_owners_;
    do
      v158 = __ldaxr(p_shared_owners);
    while (__stlxr(v158 - 1, p_shared_owners));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = *(_QWORD *)(v559 + 64);
  *(_QWORD *)(v159 + 24) = 0;
  v160 = v148->f64[0];
  *(float64_t *)(v159 + 16) = v148->f64[0];
  v161 = *(_QWORD *)(v559 + 160);
  v162 = v148->f64[1];
  if (v162 != 0.0)
  {
    v163 = (unint64_t *)(*(_QWORD *)&v162 + 8);
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
  v165 = *(std::__shared_weak_count **)(v161 + 24);
  *(float64_t *)(v161 + 16) = v160;
  *(float64_t *)(v161 + 24) = v162;
  if (v165)
  {
    v166 = (unint64_t *)&v165->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = *(_QWORD *)(v559 + 64);
  *(_QWORD *)(v168 + 32) = v97;
  *(_QWORD *)(v168 + 40) = 0;
  v169 = *(_QWORD *)(v559 + 160);
  v170 = *(std::__shared_weak_count **)(v169 + 40);
  *(_QWORD *)(v169 + 32) = 0;
  *(_QWORD *)(v169 + 40) = 0;
  if (v170)
  {
    v171 = (unint64_t *)&v170->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = *(uint64_t **)a5;
  v174 = *(uint64_t **)(v558 + 64);
  v174[1] = 0;
  v175 = *v173;
  *v174 = *v173;
  v176 = *(_QWORD **)(v558 + 160);
  v177 = v173[1];
  if (v177)
  {
    v178 = (unint64_t *)(v177 + 8);
    do
      v179 = __ldxr(v178);
    while (__stxr(v179 + 1, v178));
  }
  v180 = (std::__shared_weak_count *)v176[1];
  *v176 = v175;
  v176[1] = v177;
  if (v180)
  {
    v181 = (unint64_t *)&v180->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = *(_QWORD *)(v558 + 64);
  *(_QWORD *)(v183 + 24) = 0;
  v184 = v148->f64[0];
  *(float64_t *)(v183 + 16) = v148->f64[0];
  v185 = *(_QWORD *)(v558 + 160);
  v186 = v148->f64[1];
  if (v186 != 0.0)
  {
    v187 = (unint64_t *)(*(_QWORD *)&v186 + 8);
    do
      v188 = __ldxr(v187);
    while (__stxr(v188 + 1, v187));
  }
  v189 = *(std::__shared_weak_count **)(v185 + 24);
  *(float64_t *)(v185 + 16) = v184;
  *(float64_t *)(v185 + 24) = v186;
  if (v189)
  {
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = *(_QWORD *)(v558 + 64);
  *(_QWORD *)(v192 + 32) = v97;
  *(_QWORD *)(v192 + 40) = 0;
  v193 = *(_QWORD *)(v558 + 160);
  v194 = *(std::__shared_weak_count **)(v193 + 40);
  *(_QWORD *)(v193 + 32) = 0;
  *(_QWORD *)(v193 + 40) = 0;
  if (v194)
  {
    v195 = (unint64_t *)&v194->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = *(uint64_t **)a5;
  v198 = *(uint64_t **)(v560 + 64);
  v198[1] = 0;
  v199 = *v197;
  *v198 = *v197;
  v200 = *(_QWORD **)(v560 + 160);
  v201 = v197[1];
  if (v201)
  {
    v202 = (unint64_t *)(v201 + 8);
    do
      v203 = __ldxr(v202);
    while (__stxr(v203 + 1, v202));
  }
  v204 = (std::__shared_weak_count *)v200[1];
  *v200 = v199;
  v200[1] = v201;
  if (v204)
  {
    v205 = (unint64_t *)&v204->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = *(_QWORD *)(v560 + 64);
  *(_QWORD *)(v207 + 24) = 0;
  v208 = v148->f64[0];
  *(float64_t *)(v207 + 16) = v148->f64[0];
  v209 = *(_QWORD *)(v560 + 160);
  v210 = v148->f64[1];
  if (v210 != 0.0)
  {
    v211 = (unint64_t *)(*(_QWORD *)&v210 + 8);
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
  }
  v213 = *(std::__shared_weak_count **)(v209 + 24);
  *(float64_t *)(v209 + 16) = v208;
  *(float64_t *)(v209 + 24) = v210;
  if (v213)
  {
    v214 = (unint64_t *)&v213->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = *(uint64_t **)a5;
  v217 = *(uint64_t **)(v561 + 64);
  v217[1] = 0;
  v218 = *v216;
  *v217 = *v216;
  v219 = *(_QWORD **)(v561 + 160);
  v220 = v216[1];
  if (v220)
  {
    v221 = (unint64_t *)(v220 + 8);
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
  }
  v223 = (std::__shared_weak_count *)v219[1];
  *v219 = v218;
  v219[1] = v220;
  if (v223)
  {
    v224 = (unint64_t *)&v223->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = *(_QWORD *)(v561 + 64);
  *(_QWORD *)(v226 + 24) = 0;
  v227 = v148->f64[0];
  *(float64_t *)(v226 + 16) = v148->f64[0];
  v228 = *(_QWORD *)(v561 + 160);
  v229 = v148->f64[1];
  if (v229 != 0.0)
  {
    v230 = (unint64_t *)(*(_QWORD *)&v229 + 8);
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
  }
  v232 = *(std::__shared_weak_count **)(v228 + 24);
  *(float64_t *)(v228 + 16) = v227;
  *(float64_t *)(v228 + 24) = v229;
  if (v232)
  {
    v233 = (unint64_t *)&v232->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = *(_QWORD *)(v561 + 64);
  *(_QWORD *)(v235 + 32) = v97;
  *(_QWORD *)(v235 + 40) = 0;
  v236 = *(_QWORD *)(v561 + 160);
  v237 = *(std::__shared_weak_count **)(v236 + 40);
  *(_QWORD *)(v236 + 32) = 0;
  *(_QWORD *)(v236 + 40) = 0;
  if (v237)
  {
    v238 = (unint64_t *)&v237->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v240 = *(uint64_t **)a5;
  v241 = *(uint64_t **)(v554 + 64);
  v241[1] = 0;
  v242 = *v240;
  *v241 = *v240;
  v243 = *(_QWORD **)(v554 + 160);
  v244 = v240[1];
  if (v244)
  {
    v245 = (unint64_t *)(v244 + 8);
    do
      v246 = __ldxr(v245);
    while (__stxr(v246 + 1, v245));
  }
  v247 = (std::__shared_weak_count *)v243[1];
  *v243 = v242;
  v243[1] = v244;
  if (v247)
  {
    v248 = (unint64_t *)&v247->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = *(uint64_t **)a5;
  v251 = *(uint64_t **)(v553 + 64);
  v251[1] = 0;
  v252 = *v250;
  *v251 = *v250;
  v253 = *(_QWORD **)(v553 + 160);
  v254 = v250[1];
  if (v254)
  {
    v255 = (unint64_t *)(v254 + 8);
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 1, v255));
  }
  v257 = (std::__shared_weak_count *)v253[1];
  *v253 = v252;
  v253[1] = v254;
  if (v257)
  {
    v258 = (unint64_t *)&v257->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v580 = v148[3];
  v260 = md::VenueLayerLayoutCharacteristics::focusState((md::VenueLayerLayoutCharacteristics *)(a1 + 384), v10);
  LOBYTE(v608) = 0;
  BYTE1(v608) = v260;
  v261 = -[VKPolygonalItemGroup styleQueries:](v10, "styleQueries:", &v608);
  v563 = ((v261[2] - *v261) >> 4);
  if (!((v261[2] - *v261) >> 4))
    goto LABEL_616;
  v557 = v261;
  v262 = *(_QWORD *)(*(_QWORD *)(v559 + 64) + 48);
  v608 = 0uLL;
  v263 = *(_QWORD *)(v262 + 8);
  *(_QWORD *)&v264 = 0;
  *(_QWORD *)&v265 = 0;
  *((_QWORD *)&v265 + 1) = v262;
  if (v263)
    v266 = *(_QWORD *)(v262 + 72);
  else
    v266 = 0;
  v608 = v265;
  *(_QWORD *)&v609 = 0;
  *((_QWORD *)&v609 + 1) = v263;
  v611 = v266;
  LOWORD(v610) = 1;
  v267 = *(_QWORD *)(*(_QWORD *)(v561 + 64) + 48);
  *(_OWORD *)v606 = 0uLL;
  v268 = *(_QWORD *)(v267 + 8);
  *((_QWORD *)&v264 + 1) = v267;
  if (v268)
    v269 = *(_QWORD *)(v267 + 72);
  else
    v269 = 0;
  *(_OWORD *)v606 = v264;
  *(_QWORD *)&v606[16] = 0;
  *(_QWORD *)&v606[24] = v268;
  v607 = v269;
  *(_WORD *)&v606[32] = 1;
  v602 = 0uLL;
  *(_QWORD *)&v264 = 0;
  v270 = *(_QWORD *)(v97 + 8);
  *(_QWORD *)&v271 = 0;
  *((_QWORD *)&v271 + 1) = v97;
  if (v270)
    v272 = *(_QWORD *)(v97 + 72);
  else
    v272 = 0;
  v602 = v271;
  *(_QWORD *)&v603 = 0;
  *((_QWORD *)&v603 + 1) = v270;
  v605 = v272;
  LOWORD(v604) = 1;
  v273 = *(_QWORD *)(*(_QWORD *)(v558 + 64) + 48);
  v598 = 0uLL;
  v274 = *(_QWORD *)(v273 + 8);
  *((_QWORD *)&v264 + 1) = v273;
  if (v274)
    v275 = *(_QWORD *)(v273 + 72);
  else
    v275 = 0;
  v598 = v264;
  *(_QWORD *)&v599 = 0;
  *((_QWORD *)&v599 + 1) = v274;
  v601 = v275;
  LOWORD(v600) = 1;
  v276 = *(_QWORD *)(*(_QWORD *)(v560 + 64) + 32);
  *(_OWORD *)v596 = 0uLL;
  v277 = *(_QWORD *)(v276 + 8);
  *(_QWORD *)&v264 = 0;
  *(_QWORD *)&v278 = 0;
  *((_QWORD *)&v278 + 1) = v276;
  if (v277)
    v279 = *(_QWORD *)(v276 + 72);
  else
    v279 = 0;
  *(_OWORD *)v596 = v278;
  *(_QWORD *)&v596[16] = 0;
  *(_QWORD *)&v596[24] = v277;
  v597 = v279;
  *(_WORD *)&v596[32] = 1;
  v280 = *(_QWORD *)(*(_QWORD *)(v554 + 64) + 16);
  *(_OWORD *)v594 = 0uLL;
  v281 = *(_QWORD *)(v280 + 8);
  *((_QWORD *)&v264 + 1) = v280;
  if (v281)
    v282 = *(_QWORD *)(v280 + 72);
  else
    v282 = 0;
  *(_OWORD *)v594 = v264;
  *(_QWORD *)&v594[16] = 0;
  *(_QWORD *)&v594[24] = v281;
  v595 = v282;
  *(_WORD *)&v594[32] = 1;
  v283 = *(_QWORD *)(*(_QWORD *)(v553 + 64) + 16);
  v590 = 0uLL;
  v284 = *(_QWORD *)(v283 + 8);
  *(_QWORD *)&v285 = 0;
  *((_QWORD *)&v285 + 1) = v283;
  if (v284)
    v286 = *(_QWORD *)(v283 + 72);
  else
    v286 = 0;
  v584 = a1;
  v590 = v285;
  *(_QWORD *)&v591 = 0;
  *((_QWORD *)&v591 + 1) = v284;
  v593 = v286;
  LOWORD(v592) = 1;
  v287 = -[VKPolygonGroup wallTexture](v10, "wallTexture");
  if (v287)
    v288 = v287;
  else
    v288 = *(_QWORD *)(a5 + 56);
  v289 = *(float *)(a5 + 52);
  v290 = *(_DWORD *)(v288 + 80);
  v562 = v10;
  -[VKPolygonGroup maximumSectionLength](v10, "maximumSectionLength");
  v291 = 0;
  v292 = 0;
  v556 = vcvt_f32_f64(v580);
  v293 = v289 / (float)v290;
  **(_QWORD **)(v559 + 96) = v288;
  **(_QWORD **)(v558 + 96) = v288;
  **(_QWORD **)(v560 + 96) = v288;
  **(_QWORD **)(v561 + 96) = *(_QWORD *)(a5 + 56);
  *(_DWORD *)(v266 + 448) = -1082130432;
  *(_DWORD *)(v266 + 456) = v294;
  *(float *)(v266 + 452) = v293;
  *(_DWORD *)(v275 + 448) = 1065353216;
  *(_DWORD *)(v275 + 456) = v294;
  *(float *)(v275 + 452) = v293;
  *(_DWORD *)(v279 + 456) = v294;
  *(float *)(v279 + 452) = v293;
  v295 = 1.0;
  v555 = 1.0 / sqrtf(vaddv_f32(vmul_f32(v556, v556)));
  v296 = 23.0;
  v581 = (float32x4_t)vdupq_n_s32(0x37800080u);
  v297 = 1;
  v298 = v557;
  while (2)
  {
    v329 = *(_OWORD *)(*v298 + 16 * v291);
    v585 = v329;
    v330 = (std::__shared_weak_count *)*((_QWORD *)&v329 + 1);
    if (*((_QWORD *)&v329 + 1))
    {
      v331 = (unint64_t *)(*((_QWORD *)&v329 + 1) + 8);
      do
        v332 = __ldxr(v331);
      while (__stxr(v332 + 1, v331));
      v586 = v329;
      do
        v333 = __ldxr(v331);
      while (__stxr(v333 + 1, v331));
      v334 = v329;
    }
    else
    {
      v334 = v329;
      v586 = (unint64_t)v329;
    }
    v587[0] = 0;
    v587[1] = 0;
    v588 = 0;
    if (v334)
      LODWORD(v334) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v334 + 48))(v334, v587);
    v588 = v334;
    if (v330)
    {
      v335 = (unint64_t *)&v330->__shared_owners_;
      do
        v336 = __ldaxr(v335);
      while (__stlxr(v336 - 1, v335));
      if (!v336)
      {
        ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
        std::__shared_weak_count::__release_weak(v330);
      }
      LODWORD(v334) = v588;
    }
    if (!(_DWORD)v334)
    {
      v338 = v611;
      v339 = (_QWORD *)(v611 + 16 * v291);
      *v339 = 0;
      v339[1] = 0;
      v340 = (_DWORD *)(v338 + 4 * v291);
      v340[64] = 0;
      v340[96] = 0;
      v340[80] = 0;
      v341 = v607;
      v342 = (_QWORD *)(v607 + 16 * v291);
      *v342 = 0;
      v342[1] = 0;
      v343 = (_DWORD *)(v341 + 4 * v291);
      v343[64] = 0;
      v343[80] = 0;
      v343[112] = 0;
      v343[96] = 0;
      *(_QWORD *)(v605 + 8 * v291) = 0x3F8000007FC00000;
      v344 = v601;
      v345 = (_QWORD *)(v601 + 16 * v291);
      *v345 = 0;
      v345[1] = 0;
      v346 = (_DWORD *)(v344 + 4 * v291);
      v346[64] = 0;
      v346[96] = 0;
      v346[80] = 0;
      v347 = v597;
      v348 = (_QWORD *)(v597 + 16 * v291);
      *v348 = 0;
      v348[1] = 0;
      v349 = (_DWORD *)(v347 + 4 * v291);
      v349[64] = 0;
      v349[80] = 0;
      v349[96] = 0;
      v350 = (_QWORD *)(v595 + 16 * v291);
      v351 = v595 + 8 * v291;
      *v350 = 0;
      v350[1] = 0;
      v305 = 0;
      *(_QWORD *)(v351 + 256) = 0;
      v327 = v593;
      v328 = v593 + 16 * v291;
      *(_DWORD *)v328 = 0;
      v302 = 0.0;
      v303 = 0.0;
      goto LABEL_312;
    }
    v337 = v586;
    if (v291)
      goto LABEL_349;
    v352 = *(_QWORD *)(v586 + 24);
    if ((int)*(float *)(a5 + 28) >= 0x17)
      v353 = 23;
    else
      v353 = (int)*(float *)(a5 + 28);
    v354 = *(float **)v352;
    if (!*(_QWORD *)v352
      || (v355 = *v354, LODWORD(v354) = *v354 == v295, !*(_BYTE *)(v352 + 10))
      || (v355 != 0.0 ? (v356 = v355 == v295) : (v356 = 1), v356))
    {
      v357 = *(unsigned __int8 *)(v352 + v354 + 11);
      v355 = 0.0;
      if (v357 != 2)
      {
        if (!*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v586 + 24), 0x5Bu, v353, v357, 0))break;
        goto LABEL_348;
      }
    }
    LOBYTE(v585) = 1;
    v589 = 1;
    v358 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v352, 0x5Bu, v353, 0, &v585);
    v359 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v352, 0x5Bu, v353, 1, &v589);
    if (v355 < v295)
      v359 = v358;
    if (v359)
    {
LABEL_348:
      v337 = v586;
LABEL_349:
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v585, *(_QWORD *)(v337 + 24), 0xA1u, 2u, fminf(fmaxf(*(float *)(a5 + 28), 0.0), v296));
      v360 = (uint16x4_t)v585;
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v585, *(_QWORD *)(v586 + 24), 0xA0u, 2u, fminf(fmaxf(*(float *)(a5 + 28), 0.0), v296));
      v361 = (uint16x4_t)v585;
      v575 = (int64x2_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(v360)), v581);
      v362 = fabsf(*(float *)&v575.i32[3] + -1.0) > 0.00000011921;
      if ((int)*(float *)(a5 + 28) >= 0x17)
        v363 = 23;
      else
        v363 = (int)*(float *)(a5 + 28);
      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v585, *(_QWORD *)(v586 + 24), 0x8Du, v363, 2u, 0);
      LOWORD(v5) = WORD1(v585);
      LOWORD(v364) = v585;
      LOWORD(v6) = WORD2(v585);
      v366 = *(float *)(a5 + 28);
      v365 = (int)v366;
      LOWORD(v366) = WORD3(v585);
      v367 = *(_QWORD *)(v586 + 24);
      if (v365 >= 0x17)
        v368 = 23;
      else
        v368 = v365;
      v369 = *(float **)v367;
      v573 = LODWORD(v366);
      v571 = v364;
      if (*(_QWORD *)v367
        && (v370 = *v369, LODWORD(v369) = *v369 == v295, *(_BYTE *)(v367 + 10))
        && (v370 != 0.0 ? (v371 = v370 == v295) : (v371 = 1), !v371)
        || (v372 = *(unsigned __int8 *)(v367 + v369 + 11), v370 = 0.0, v372 == 2))
      {
        LOBYTE(v585) = 1;
        v589 = 1;
        v373 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v367, 0x8Bu, v368, 0, &v585);
        v374 = v373
             + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v367, 0x8Bu, v368, 1u, &v589)- v373)* v370);
      }
      else
      {
        v374 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v367, 0x8Bu, v368, v372, 0);
      }
      v568 = v374;
      v578 = *(float *)(a5 + 32);
      v375 = *(_QWORD *)(v586 + 24);
      if ((int)*(float *)(a5 + 28) >= 0x17)
        v376 = 23;
      else
        v376 = (int)*(float *)(a5 + 28);
      v377 = *(float **)v375;
      v569 = LODWORD(v5);
      if (*(_QWORD *)v375
        && (v378 = *v377, LODWORD(v377) = *v377 == v295, *(_BYTE *)(v375 + 10))
        && v378 != 0.0
        && v378 != v295
        || (v379 = *(unsigned __int8 *)(v375 + v377 + 11), v378 = 0.0, v379 == 2))
      {
        LOBYTE(v585) = 1;
        v589 = 1;
        v380 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v375, 0x145u, v376, 0, &v585);
        v381 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v375, 0x145u, v376, 1, &v589);
        if (v378 < v295)
          v381 = v380;
      }
      else
      {
        v381 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v375, 0x145u, v376, v379, 0);
      }
      if (v381)
        v382 = 1.0;
      else
        v382 = *(float *)(a5 + 36);
      v565 = *(double *)(a5 + 40);
      v383 = *(_QWORD *)(v586 + 24);
      v384 = fminf(fmaxf(*(float *)(a5 + 28), 0.0), v296);
      v385 = *(float **)v383;
      v567 = v361;
      v566 = LODWORD(v6);
      if (*(_QWORD *)v383
        && (v386 = *v385, LODWORD(v385) = *v385 == v295, *(_BYTE *)(v383 + 10))
        && v386 != 0.0
        && v386 != v295
        || (v387 = *(unsigned __int8 *)(v383 + v385 + 11), v386 = 0.0, v387 == 2))
      {
        LOBYTE(v585) = 1;
        v589 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v383, 0x141u, 0, (BOOL *)&v585, v384);
        v389 = v388;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v383, 0x141u, 1u, (BOOL *)&v589, v384);
        v390 = 23.0;
        v392 = v389 + (float)((float)(v391 - v389) * v386);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v383, 0x141u, v387, 0, v384);
        v392 = v393;
        v390 = 23.0;
      }
      v394 = *(double *)(a5 + 40);
      v395 = *(_QWORD *)(v586 + 24);
      v396 = fminf(fmaxf(*(float *)(a5 + 28), 0.0), v390);
      v397 = *(float **)v395;
      if (*(_QWORD *)v395
        && (v398 = *v397, LODWORD(v397) = *v397 == v295, *(_BYTE *)(v395 + 10))
        && v398 != 0.0
        && v398 != v295
        || (v399 = *(unsigned __int8 *)(v395 + v397 + 11), v398 = 0.0, v399 == 2))
      {
        LOBYTE(v585) = 1;
        v589 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v395, 0x14Fu, 0, (BOOL *)&v585, v396);
        v401 = v400;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v395, 0x14Fu, 1u, (BOOL *)&v589, v396);
        v403 = v401 + (float)((float)(v402 - v401) * v398);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v586 + 24), 0x14Fu, v399, 0, v396);
      }
      v564 = v403;
      v5 = v382 * v578;
      v6 = v392 * v394 * v5;
      v579 = *(double *)(a5 + 40);
      v404 = 0.0;
      if (v6 >= 0.00000011921)
      {
        v405 = *(_QWORD *)(v586 + 24);
        v406 = fminf(fmaxf(*(float *)(a5 + 28), 0.0), v390);
        v407 = *(float **)v405;
        if (*(_QWORD *)v405
          && (v408 = *v407, LODWORD(v407) = *v407 == v295, *(_BYTE *)(v405 + 10))
          && v408 != 0.0
          && v408 != v295
          || (v409 = *(unsigned __int8 *)(v405 + v407 + 11), v408 = 0.0, v409 == 2))
        {
          LOBYTE(v585) = 1;
          v589 = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v405, 0x140u, 0, (BOOL *)&v585, v406);
          v411 = v410;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v405, 0x140u, 1u, (BOOL *)&v589, v406);
          v413 = v411 + (float)((float)(v412 - v411) * v408);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v586 + 24), 0x140u, v409, 0, v406);
        }
        v404 = *(double *)(a5 + 40) * v413;
      }
      v414 = v292;
      v415 = *(_QWORD *)(v586 + 24);
      if ((int)*(float *)(a5 + 28) >= 0x17)
        v416 = 23;
      else
        v416 = (int)*(float *)(a5 + 28);
      v417 = *(float **)v415;
      if (*(_QWORD *)v415)
      {
        v418 = *v417;
        v419 = *v417 == v295;
        if (*(_BYTE *)(v415 + 10) && v418 != 0.0 && v418 != v295)
        {
LABEL_413:
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v586 + 24), 0x13Fu, v416, 0) & 1) != 0)
            goto LABEL_416;
          v420 = 1;
LABEL_415:
          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v415, 0x13Fu, v416, v420))
          {
            LOBYTE(v423) = 1;
            if (v417)
              goto LABEL_434;
            goto LABEL_422;
          }
LABEL_416:
          if (v417)
          {
            v421 = *v417;
            v422 = *v417 == v295;
            if (*(_BYTE *)(v415 + 10) && v421 != 0.0 && v421 != v295)
              goto LABEL_427;
          }
          else
          {
            v422 = 0;
          }
          v426 = *(unsigned __int8 *)(v415 + v422 + 11);
          v421 = 0.0;
          if (v426 != 2)
          {
            v423 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v415, 0x13Fu, v416, v426, 0);
            goto LABEL_430;
          }
LABEL_427:
          LOBYTE(v585) = 1;
          v589 = 1;
          v423 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v415, 0x13Fu, v416, 0, &v585);
          v427 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v415, 0x13Fu, v416, 1u, &v589);
          if (v421 >= v295)
            LOBYTE(v423) = v427;
LABEL_430:
          v415 = *(_QWORD *)(v586 + 24);
          v417 = *(float **)v415;
          if ((int)*(float *)(a5 + 28) >= 0x17)
            v416 = 23;
          else
            v416 = (int)*(float *)(a5 + 28);
          if (v417)
          {
LABEL_434:
            v428 = *v417;
            v424 = *v417 == v295;
            if (*(_BYTE *)(v415 + 10))
            {
              v425 = v414;
              if (v428 != 0.0)
              {
                v298 = v557;
                if (v428 != v295)
                  goto LABEL_438;
                goto LABEL_437;
              }
LABEL_424:
              v298 = v557;
LABEL_437:
              v429 = *(unsigned __int8 *)(v415 + v424 + 11);
              v428 = 0.0;
              if (v429 != 2)
              {
                v431 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v415, 0x14Au, v416, v429, 0);
                goto LABEL_440;
              }
LABEL_438:
              LOBYTE(v585) = 1;
              v589 = 1;
              v430 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v415, 0x14Au, v416, 0, &v585);
              v431 = v430
                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v415, 0x14Au, v416, 1u, &v589)- v430)* v428);
LABEL_440:
              v432 = *(_QWORD *)(v586 + 24);
              if ((int)*(float *)(a5 + 28) >= 0x17)
                v433 = 23;
              else
                v433 = (int)*(float *)(a5 + 28);
              v434 = *(float **)v432;
              if (*(_QWORD *)v432
                && (v435 = *v434, LODWORD(v434) = *v434 == v295, *(_BYTE *)(v432 + 10))
                && v435 != 0.0
                && v435 != v295
                || (v436 = *(unsigned __int8 *)(v432 + v434 + 11), v435 = 0.0, v436 == 2))
              {
                LOBYTE(v585) = 1;
                v589 = 1;
                v437 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v432, 0x14Bu, v433, 0, &v585);
                v438 = v437
                     + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v432, 0x14Bu, v433, 1u, &v589)- v437)* v435);
              }
              else
              {
                v438 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v586 + 24), 0x14Bu, v433, v436, 0);
              }
              v295 = 1.0;
              if ((_BYTE)v423)
              {
                v300 = 0.0;
                v299 = 1.0;
                if (v423 == 2)
                {
                  v299 = 0.5;
                  v300 = -0.5;
                }
              }
              else
              {
                v299 = 0.0;
                v300 = -1.0;
              }
              v301 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v567)), v581);
              v292 = v425 | v362;
              v302 = (float)v569 * 0.000015259;
              v303 = (float)v566 * 0.000015259;
              v304 = v565;
              v305 = vmul_n_f32(v556, (float)((float)(v568 * v304) * v555) * v5);
              v307 = v404;
              v308 = v431 * 40075017.0 / ((double)(unint64_t)(1 << *(_BYTE *)(a5 + 24)) * v438);
              v309 = v299 * v307;
              if (v307 >= 0.00000011921)
                v310 = v6;
              else
                v310 = 0.0;
              if (v307 >= 0.00000011921)
                v311 = v564 * v579 * v5;
              else
                v311 = 0.0;
              v312 = v611;
              v313 = 16 * v291;
              *(int64x2_t *)(v611 + v313) = v575;
              v314 = 4 * v291;
              v315 = (float *)(v312 + 4 * v291);
              v315[64] = v309;
              v315[96] = v310;
              v315[80] = v311;
              v316 = v607;
              *(int64x2_t *)(v607 + v313) = v575;
              v317 = v300 * v307;
              v318 = (float *)(v316 + 4 * v291);
              v318[64] = v317;
              v318[80] = v309;
              v318[112] = v310;
              v318[96] = v311;
              v319 = (float *)(v605 + 8 * v291);
              *v319 = v308;
              v319[1] = 1.0 - v431;
              v320 = v601;
              *(int64x2_t *)(v601 + v313) = v575;
              v321 = *(double *)(a5 + 40) * 0.200000003;
              if (v307 >= 0.00000011921)
                v321 = v317;
              v322 = (float *)(v320 + v314);
              v322[64] = v321;
              v322[96] = v6;
              v306 = v564 * v579 * v5;
              v322[80] = v306;
              v323 = v597;
              *(float32x4_t *)(v597 + 16 * v291) = v301;
              v324 = (float *)(v323 + v314);
              v324[64] = v317;
              v324[80] = v309;
              v324[96] = v310;
              v325 = v595;
              v326 = v595 + v313;
              *(_DWORD *)(v326 + 8) = 0;
              *(_QWORD *)v326 = 0;
              *(float *)(v326 + 12) = 1.0 - (float)((float)v573 * 0.000015259);
              *(float32x2_t *)(v325 + 8 * v291 + 256) = v305;
              v327 = v593;
              v328 = v593 + v313;
              *(float *)(v593 + 16 * v291) = (float)v571 * 0.000015259;
              v296 = 23.0;
LABEL_312:
              *(float *)(v328 + 4) = v302;
              *(float *)(v328 + 8) = v303;
              *(_DWORD *)(v328 + 12) = 1065353216;
              *(float32x2_t *)(v327 + 8 * v291 + 256) = v305;
              gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v586);
              v297 = ++v291 < v563;
              if (v291 == v563)
              {
                v439 = v292;
                v297 = 0;
                v10 = v562;
                goto LABEL_454;
              }
              continue;
            }
LABEL_423:
            v425 = v414;
            goto LABEL_424;
          }
LABEL_422:
          v424 = 0;
          goto LABEL_423;
        }
      }
      else
      {
        v419 = 0;
      }
      v420 = *(unsigned __int8 *)(v415 + v419 + 11);
      if (v420 != 2)
        goto LABEL_415;
      goto LABEL_413;
    }
    break;
  }
  v439 = v292;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v586);
  v10 = v562;
  if (!v593)
    goto LABEL_455;
LABEL_454:
  v440 = v591;
  if (*((_QWORD *)&v591 + 1) == (_QWORD)v591)
  {
LABEL_455:
    if (!v595)
      goto LABEL_490;
    goto LABEL_456;
  }
  v447 = (_QWORD *)*((_QWORD *)&v590 + 1);
  v448 = v592;
  v449 = BYTE1(v592);
  if ((_QWORD)v590 && *(_BYTE *)(*((_QWORD *)&v590 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v590 + 64))();
  if (!v448)
  {
    v10 = v562;
    if (!v595)
      goto LABEL_490;
    goto LABEL_456;
  }
  if (v449)
  {
    v10 = v562;
    goto LABEL_455;
  }
  v451 = v447[7];
  v450 = v447[8];
  v10 = v562;
  if (v450 == v451)
    v451 = v447[10] - v447[9];
  if ((unint64_t)v440 < v451)
    v451 = v440;
  if (v450 <= *((_QWORD *)&v440 + 1))
    v450 = *((_QWORD *)&v440 + 1);
  if (v450 == v451)
    v450 = v451 + v447[10] - v447[9];
  v447[7] = v451;
  v447[8] = v450;
  if (v595)
  {
LABEL_456:
    v441 = *(_OWORD *)&v594[16];
    if (*(_QWORD *)&v594[24] != *(_QWORD *)&v594[16])
    {
      v442 = *(_QWORD **)&v594[8];
      v443 = v594[32];
      v444 = v594[33];
      if (*(_QWORD *)v594 && *(_BYTE *)(*(_QWORD *)&v594[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v594 + 64))();
      if (v443 && !v444)
      {
        v446 = v442[7];
        v445 = v442[8];
        if (v445 == v446)
          v446 = v442[10] - v442[9];
        if ((unint64_t)v441 < v446)
          v446 = v441;
        if (v445 <= *((_QWORD *)&v441 + 1))
          v445 = *((_QWORD *)&v441 + 1);
        if (v445 == v446)
          v445 = v446 + v442[10] - v442[9];
        v442[7] = v446;
        v442[8] = v445;
      }
    }
  }
LABEL_490:
  if (v597)
  {
    v452 = *(_OWORD *)&v596[16];
    if (*(_QWORD *)&v596[24] != *(_QWORD *)&v596[16])
    {
      v453 = *(_QWORD **)&v596[8];
      v454 = v596[32];
      v455 = v596[33];
      if (*(_QWORD *)v596 && *(_BYTE *)(*(_QWORD *)&v596[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v596 + 64))();
      if (v454 && !v455)
      {
        v457 = v453[7];
        v456 = v453[8];
        if (v456 == v457)
          v457 = v453[10] - v453[9];
        if ((unint64_t)v452 < v457)
          v457 = v452;
        if (v456 <= *((_QWORD *)&v452 + 1))
          v456 = *((_QWORD *)&v452 + 1);
        if (v456 == v457)
          v456 = v457 + v453[10] - v453[9];
        v453[7] = v457;
        v453[8] = v456;
      }
    }
  }
  if (v601)
  {
    v458 = v599;
    if (*((_QWORD *)&v599 + 1) != (_QWORD)v599)
    {
      v459 = (_QWORD *)*((_QWORD *)&v598 + 1);
      v460 = v600;
      v461 = BYTE1(v600);
      if ((_QWORD)v598 && *(_BYTE *)(*((_QWORD *)&v598 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v598 + 64))();
      if (v460 && !v461)
      {
        v463 = v459[7];
        v462 = v459[8];
        if (v462 == v463)
          v463 = v459[10] - v459[9];
        if ((unint64_t)v458 < v463)
          v463 = v458;
        if (v462 <= *((_QWORD *)&v458 + 1))
          v462 = *((_QWORD *)&v458 + 1);
        if (v462 == v463)
          v462 = v463 + v459[10] - v459[9];
        v459[7] = v463;
        v459[8] = v462;
      }
    }
  }
  if (v605)
  {
    v464 = v603;
    if (*((_QWORD *)&v603 + 1) != (_QWORD)v603)
    {
      v465 = (_QWORD *)*((_QWORD *)&v602 + 1);
      v466 = v604;
      v467 = BYTE1(v604);
      if ((_QWORD)v602 && *(_BYTE *)(*((_QWORD *)&v602 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v602 + 64))();
      if (v466 && !v467)
      {
        v469 = v465[7];
        v468 = v465[8];
        if (v468 == v469)
          v469 = v465[10] - v465[9];
        if ((unint64_t)v464 < v469)
          v469 = v464;
        if (v468 <= *((_QWORD *)&v464 + 1))
          v468 = *((_QWORD *)&v464 + 1);
        if (v468 == v469)
          v468 = v469 + v465[10] - v465[9];
        v465[7] = v469;
        v465[8] = v468;
      }
    }
  }
  if (v607)
  {
    v470 = *(_OWORD *)&v606[16];
    if (*(_QWORD *)&v606[24] != *(_QWORD *)&v606[16])
    {
      v471 = *(_QWORD **)&v606[8];
      v472 = v606[32];
      v473 = v606[33];
      if (*(_QWORD *)v606 && *(_BYTE *)(*(_QWORD *)&v606[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v606 + 64))();
      if (v472 && !v473)
      {
        v475 = v471[7];
        v474 = v471[8];
        if (v474 == v475)
          v475 = v471[10] - v471[9];
        if ((unint64_t)v470 < v475)
          v475 = v470;
        if (v474 <= *((_QWORD *)&v470 + 1))
          v474 = *((_QWORD *)&v470 + 1);
        if (v474 == v475)
          v474 = v475 + v471[10] - v471[9];
        v471[7] = v475;
        v471[8] = v474;
      }
    }
  }
  if (v611)
  {
    v476 = v609;
    if (*((_QWORD *)&v609 + 1) != (_QWORD)v609)
    {
      v477 = (_QWORD *)*((_QWORD *)&v608 + 1);
      v478 = v610;
      v479 = BYTE1(v610);
      if ((_QWORD)v608 && *(_BYTE *)(*((_QWORD *)&v608 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v608 + 64))();
      if (v478 && !v479)
      {
        v481 = v477[7];
        v480 = v477[8];
        if (v480 == v481)
          v481 = v477[10] - v477[9];
        if ((unint64_t)v476 < v481)
          v481 = v476;
        if (v480 <= *((_QWORD *)&v476 + 1))
          v480 = *((_QWORD *)&v476 + 1);
        if (v480 == v481)
          v480 = v481 + v477[10] - v477[9];
        v477[7] = v481;
        v477[8] = v480;
      }
    }
  }
  if (!v297)
  {
    memset(&v606[4], 0, 32);
    v482 = *(unsigned __int8 *)(v584 + 393);
    if (*(_BYTE *)(v584 + 393) && *(_BYTE *)(v584 + 439))
      v483 = *(_QWORD *)(v584 + 376) + 760;
    else
      v483 = *(_QWORD *)(v584 + 376) + 544;
    v582 = v483;
    v484 = -[VKPolygonGroup layer](v10, "layer");
    if ((v439 & 1) != 0)
      v485 = 2;
    else
      v485 = -1;
    v602 = *(_OWORD *)v606;
    v603 = *(_OWORD *)&v606[16];
    if (v482)
      v486 = 20 * v484;
    else
      v486 = 0;
    v604 = *(_DWORD *)&v606[32];
    v598 = *(_OWORD *)v606;
    v599 = *(_OWORD *)&v606[16];
    v600 = *(_DWORD *)&v606[32];
    v487 = *(_QWORD *)(v584 + 376);
    memset(&v596[4], 0, 32);
    v488 = *(unsigned __int8 *)(v584 + 393);
    v489 = v10;
    v490 = 20 * (__int16)-[VKPolygonGroup layer](v10, "layer") + 0x800000007;
    if (!v488)
      v490 = 0x800000007;
    v576 = v490;
    memset(&v594[4], 0, 32);
    v491 = *(_QWORD *)(v584 + 376);
    v492 = *(unsigned __int8 *)(v584 + 393);
    v493 = 20 * (__int16)-[VKPolygonGroup layer](v489, "layer") + 0x800000008;
    if (!v492)
      v493 = 0x800000008;
    v574 = v493;
    v494 = -[VKPolygonGroup venueWallMeshes](v489, "venueWallMeshes");
    v495 = v485 + 0x800000007 + v486;
    v496 = *(uint64_t **)v494;
    v572 = *(uint64_t **)(v494 + 8);
    v497 = v584;
    if (*(uint64_t **)v494 != v572)
    {
      v498 = 0;
      v570 = vdupq_n_s64(1uLL);
      do
      {
        v499 = -[VKPolygonalItemGroup commitRangesToVenueWallRenderItemBatcher:forMeshAtIndex:cullingMask:](v562, "commitRangesToVenueWallRenderItemBatcher:forMeshAtIndex:cullingMask:", *(_QWORD *)(v497 + 376) + 3712, v498, *(unsigned int *)(a5 + 48));
        v500 = *(_QWORD *)(v497 + 376);
        v501 = *v496;
        v608 = *(_OWORD *)v606;
        v609 = *(_OWORD *)&v606[16];
        v610 = *(_DWORD *)&v606[32];
        v502 = *(_QWORD **)(v500 + 3800);
        v503 = v502[1];
        if (v503 == *(_QWORD *)(v500 + 3808))
        {
          v502 = (_QWORD *)*v502;
          if (!v502)
          {
            v502 = malloc_type_malloc(120 * v503 + 16, 0xB644C221uLL);
            *v502 = 0;
            v502[1] = 0;
            **(_QWORD **)(v500 + 3800) = v502;
          }
          *(_QWORD *)(v500 + 3800) = v502;
          v503 = v502[1];
        }
        v504 = &v502[15 * v503];
        v502[1] = v503 + 1;
        v504[2] = &off_1E42B59B0;
        v504 += 2;
        v504[2] = "";
        v504[3] = v582;
        v504[4] = v559;
        *((_DWORD *)v504 + 10) = 100;
        v504[6] = v495;
        *((_DWORD *)v504 + 14) = 1065353216;
        v505 = v610;
        v506 = v609;
        *(_OWORD *)((char *)v504 + 60) = v608;
        *((_DWORD *)v504 + 23) = v505;
        *(_OWORD *)((char *)v504 + 76) = v506;
        *((int64x2_t *)v504 + 6) = v570;
        v504[14] = 0;
        v504[8] = v501;
        v507 = *v499;
        v504[11] = *v499;
        v504[12] = (v499[1] - v507) >> 4;
        ggl::CommandBuffer::pushRenderItem(a4, (ggl::RenderItem *)v504);
        v508 = *(_QWORD *)(v584 + 376);
        v509 = *v496;
        v608 = v602;
        v609 = v603;
        v610 = v604;
        v510 = *(_QWORD **)(v508 + 3800);
        v511 = v510[1];
        if (v511 == *(_QWORD *)(v508 + 3808))
        {
          v510 = (_QWORD *)*v510;
          if (!v510)
          {
            v510 = malloc_type_malloc(120 * v511 + 16, 0xB644C221uLL);
            *v510 = 0;
            v510[1] = 0;
            **(_QWORD **)(v508 + 3800) = v510;
          }
          *(_QWORD *)(v508 + 3800) = v510;
          v511 = v510[1];
        }
        v512 = &v510[15 * v511];
        v510[1] = v511 + 1;
        v512[2] = &off_1E42B59B0;
        v512 += 2;
        v512[2] = "";
        v512[3] = v582;
        v512[4] = v558;
        *((_DWORD *)v512 + 10) = 100;
        v512[6] = v495;
        *((_DWORD *)v512 + 14) = 1065353216;
        v513 = v610;
        v514 = v609;
        *(_OWORD *)((char *)v512 + 60) = v608;
        *((_DWORD *)v512 + 23) = v513;
        *(_OWORD *)((char *)v512 + 76) = v514;
        *((int64x2_t *)v512 + 6) = vdupq_n_s64(1uLL);
        v512[14] = 0;
        v512[8] = v509;
        v515 = *v499;
        v512[11] = *v499;
        v512[12] = (v499[1] - v515) >> 4;
        ggl::CommandBuffer::pushRenderItem(a4, (ggl::RenderItem *)v512);
        v516 = *(_QWORD *)(v584 + 376);
        v517 = *v496;
        v608 = v598;
        v609 = v599;
        v610 = v600;
        v518 = *(_QWORD **)(v516 + 3800);
        v519 = v518[1];
        if (v519 == *(_QWORD *)(v516 + 3808))
        {
          v518 = (_QWORD *)*v518;
          if (!v518)
          {
            v518 = malloc_type_malloc(120 * v519 + 16, 0xB644C221uLL);
            *v518 = 0;
            v518[1] = 0;
            **(_QWORD **)(v516 + 3800) = v518;
          }
          *(_QWORD *)(v516 + 3800) = v518;
          v519 = v518[1];
        }
        v520 = &v518[15 * v519];
        v518[1] = v519 + 1;
        v520[2] = &off_1E42B59B0;
        v520 += 2;
        v520[2] = "";
        v520[3] = v487 + 1000;
        v520[4] = v560;
        *((_DWORD *)v520 + 10) = 100;
        v520[6] = v495;
        *((_DWORD *)v520 + 14) = 1065353216;
        v521 = v610;
        v522 = v609;
        *(_OWORD *)((char *)v520 + 60) = v608;
        *((_DWORD *)v520 + 23) = v521;
        *(_OWORD *)((char *)v520 + 76) = v522;
        *((int64x2_t *)v520 + 6) = vdupq_n_s64(1uLL);
        v520[14] = 0;
        v520[8] = v517;
        v523 = *v499;
        v520[11] = *v499;
        v520[12] = (v499[1] - v523) >> 4;
        ggl::CommandBuffer::pushRenderItem(a4, (ggl::RenderItem *)v520);
        v524 = *(_QWORD *)(v584 + 376);
        v525 = *v496;
        v608 = *(_OWORD *)v596;
        v609 = *(_OWORD *)&v596[16];
        v610 = *(_DWORD *)&v596[32];
        v526 = *(_QWORD **)(v524 + 3800);
        v527 = v526[1];
        if (v527 == *(_QWORD *)(v524 + 3808))
        {
          v526 = (_QWORD *)*v526;
          if (!v526)
          {
            v526 = malloc_type_malloc(120 * v527 + 16, 0xB644C221uLL);
            *v526 = 0;
            v526[1] = 0;
            **(_QWORD **)(v524 + 3800) = v526;
          }
          *(_QWORD *)(v524 + 3800) = v526;
          v527 = v526[1];
        }
        v528 = &v526[15 * v527];
        v526[1] = v527 + 1;
        v528[2] = &off_1E42B59B0;
        v528 += 2;
        v528[2] = "";
        v528[3] = v487 + 1528;
        v528[4] = v554;
        v528[5] = 0;
        v528[6] = v576;
        *((_DWORD *)v528 + 14) = 1065353216;
        v529 = v610;
        v530 = v609;
        *(_OWORD *)((char *)v528 + 60) = v608;
        *((_DWORD *)v528 + 23) = v529;
        *(_OWORD *)((char *)v528 + 76) = v530;
        *((int64x2_t *)v528 + 6) = vdupq_n_s64(1uLL);
        v528[14] = 0;
        v528[8] = v525;
        v531 = *v499;
        v528[11] = *v499;
        v528[12] = (v499[1] - v531) >> 4;
        ggl::CommandBuffer::pushRenderItem(a4, (ggl::RenderItem *)v528);
        v532 = *(_QWORD *)(v584 + 376);
        v533 = *v496;
        v608 = *(_OWORD *)v594;
        v609 = *(_OWORD *)&v594[16];
        v610 = *(_DWORD *)&v594[32];
        v534 = *(_QWORD **)(v532 + 3800);
        v535 = v534[1];
        if (v535 == *(_QWORD *)(v532 + 3808))
        {
          v534 = (_QWORD *)*v534;
          if (!v534)
          {
            v534 = malloc_type_malloc(120 * v535 + 16, 0xB644C221uLL);
            *v534 = 0;
            v534[1] = 0;
            **(_QWORD **)(v532 + 3800) = v534;
          }
          *(_QWORD *)(v532 + 3800) = v534;
          v535 = v534[1];
        }
        v536 = &v534[15 * v535];
        v534[1] = v535 + 1;
        v536[2] = &off_1E42B59B0;
        v536 += 2;
        v536[2] = "";
        v536[3] = v491 + 1768;
        v536[4] = v553;
        v536[5] = 0;
        v536[6] = v574;
        *((_DWORD *)v536 + 14) = 1065353216;
        v537 = v610;
        v538 = v609;
        *(_OWORD *)((char *)v536 + 60) = v608;
        *((_DWORD *)v536 + 23) = v537;
        *(_OWORD *)((char *)v536 + 76) = v538;
        *((int64x2_t *)v536 + 6) = vdupq_n_s64(1uLL);
        v536[14] = 0;
        v536[8] = v533;
        v539 = *v499;
        v536[11] = *v499;
        v536[12] = (v499[1] - v539) >> 4;
        ggl::CommandBuffer::pushRenderItem(a4, (ggl::RenderItem *)v536);
        v497 = v584;
        ++v498;
        v496 += 2;
      }
      while (v496 != v572);
    }
    v590 = *(_OWORD *)v606;
    v591 = *(_OWORD *)&v606[16];
    v592 = *(_DWORD *)&v606[32];
    v540 = -[VKPolygonGroup venueWallEndMeshes](v562, "venueWallEndMeshes");
    v541 = *(uint64_t **)v540;
    v542 = *(uint64_t **)(v540 + 8);
    if (*(uint64_t **)v540 != v542)
    {
      v543 = 0;
      v577 = vdupq_n_s64(1uLL);
      do
      {
        v544 = -[VKPolygonalItemGroup commitRangesToVenueWallEndCapRenderItemBatcher:forMeshAtIndex:cullingMask:](v562, "commitRangesToVenueWallEndCapRenderItemBatcher:forMeshAtIndex:cullingMask:", *(_QWORD *)(v497 + 376) + 3712, v543, *(unsigned int *)(a5 + 48));
        v545 = *(_QWORD *)(v497 + 376);
        v546 = *v541;
        v608 = v590;
        v609 = v591;
        v610 = v592;
        v547 = *(_QWORD **)(v545 + 3800);
        v548 = v547[1];
        if (v548 == *(_QWORD *)(v545 + 3808))
        {
          v547 = (_QWORD *)*v547;
          if (!v547)
          {
            v547 = malloc_type_malloc(120 * v548 + 16, 0xB644C221uLL);
            *v547 = 0;
            v547[1] = 0;
            **(_QWORD **)(v545 + 3800) = v547;
          }
          *(_QWORD *)(v545 + 3800) = v547;
          v548 = v547[1];
        }
        v549 = &v547[15 * v548];
        v547[1] = v548 + 1;
        v549[2] = &off_1E42B59B0;
        v549 += 2;
        v549[2] = "";
        v549[3] = v582;
        v549[4] = v561;
        *((_DWORD *)v549 + 10) = 100;
        v549[6] = v495;
        *((_DWORD *)v549 + 14) = 1065353216;
        v550 = v610;
        v551 = v609;
        *(_OWORD *)((char *)v549 + 60) = v608;
        *((_DWORD *)v549 + 23) = v550;
        *(_OWORD *)((char *)v549 + 76) = v551;
        *((int64x2_t *)v549 + 6) = v577;
        v549[14] = 0;
        v549[8] = v546;
        v552 = *v544;
        v549[11] = *v544;
        v549[12] = (v544[1] - v552) >> 4;
        ggl::CommandBuffer::pushRenderItem(a4, (ggl::RenderItem *)v549);
        v497 = v584;
        ++v543;
        v541 += 2;
      }
      while (v541 != v542);
    }
    v10 = v562;
  }
LABEL_616:

}

void sub_19F850628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CE348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CE348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;

  v2 = *a2;
  if (v2 <= 4 && v2 != 2)
    md::VenueRenderLayer::_updateStyles(**(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE300;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE2B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE2B8;
  a2[1] = v2;
  return result;
}

void md::CVenueRenderResources::~CVenueRenderResources(md::CVenueRenderResources *this)
{
  _QWORD *v2;
  unint64_t v3;
  void (***v4)(void);
  void (**v5)(void);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  v2 = (_QWORD *)*((_QWORD *)this + 474);
  do
  {
    if (v2[1])
    {
      v3 = 0;
      v4 = (void (***)(void))(v2 + 2);
      do
      {
        v5 = *v4;
        v4 += 15;
        (*v5)();
        ++v3;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  v6 = (_QWORD **)*((_QWORD *)this + 474);
  *((_QWORD *)this + 475) = v6;
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      free(v7);
      v7 = v8;
    }
    while (v8);
    v6 = (_QWORD **)*((_QWORD *)this + 474);
  }
  free(v6);
  v9 = (void *)*((_QWORD *)this + 471);
  if (v9)
  {
    *((_QWORD *)this + 472) = v9;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 467);
  if (v10)
  {
    v11 = *((_QWORD *)this + 468);
    v12 = *((_QWORD *)this + 467);
    if (v11 != v10)
    {
      v13 = *((_QWORD *)this + 468);
      do
      {
        v15 = *(void **)(v13 - 24);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(_QWORD *)(v11 - 16) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = *((_QWORD *)this + 467);
    }
    *((_QWORD *)this + 468) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 470) + 40))(*((_QWORD *)this + 470), v12, *((_QWORD *)this + 469) - v12);
  }
  v16 = (void *)*((_QWORD *)this + 464);
  if (v16)
  {
    *((_QWORD *)this + 465) = v16;
    operator delete(v16);
  }
  md::VenueFootprintRenderResources::~VenueFootprintRenderResources((md::CVenueRenderResources *)((char *)this + 2712));
  md::VenueOpenToBelowRenderResources::~VenueOpenToBelowRenderResources((md::CVenueRenderResources *)((char *)this + 1992));
  md::VenueWallRenderResources::~VenueWallRenderResources((md::CVenueRenderResources *)((char *)this + 520));
  md::VenueDimmingOverlayRenderResources::~VenueDimmingOverlayRenderResources(this);
}

uint64_t gss::QueryableLocker<gss::PropertyID>::hasTargetValueForKeyAtZ(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (a2 >= 0x17)
    v3 = 23;
  else
    v3 = a2;
  v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 == 2)
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(a1, 0x5Du, v3, 0) & 1) != 0)
      return 1;
    v4 = 1;
  }
  return gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(a1, 0x5Du, v3, v4);
}

void sub_19F850AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKPolylineGroupOverlay;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F850B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F850D30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F850F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F85124C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F8514A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F8516F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F85193C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F851BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F851D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *md::ModelTileDebugData::ModelTileDebugData(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _DWORD *v10;
  double v11;
  geo::codec::VectorTile *v12;
  ggl::CommonMesh::Pos2Mesh *v13;
  double v14;
  ggl::CommonMesh::Pos2Mesh *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  ggl::CommonMesh::Pos4Mesh *v20;
  int v21;
  ggl::CommonMesh::Pos4Mesh **v22;
  ggl::CommonMesh::Pos4Mesh *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  float *v71;
  unint64_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  unint64_t i;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  ggl::CommonMesh::Pos2Mesh *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  ggl::CommonMesh::Pos4Mesh *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t j;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  ggl::CommonMesh::Pos4Mesh *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  ggl::CommonMesh::Pos4Mesh *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  geo **v192;
  void *v193;
  geo *v194;
  geo *v195;
  const unsigned __int8 *v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  void *v231;
  unint64_t v232;
  unint64_t v233;
  ggl::CommonMesh::Pos4Mesh *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  ggl::CommonMesh::Pos4Mesh *v259;
  uint64_t v260;
  unint64_t k;
  uint64_t v262;
  unint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  ggl::CommonMesh::Pos2Mesh *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unsigned int *v289;
  unint64_t v290;
  uint64_t v291;
  unsigned int *v292;
  unint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  ggl::CommonMesh::Pos2Mesh *v311;
  uint64_t v312;
  uint64_t m;
  unsigned int *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  ggl::CommonMesh::Pos2Mesh *v331;
  ggl::CommonMesh::Pos2Mesh *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unsigned __int16 *v337;
  int v338;
  unsigned int v339;
  float *v340;
  unint64_t v341;
  uint64_t v342;
  float32x2_t *v343;
  float v344;
  float32x2_t v345;
  float32x2_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  _QWORD *v360;
  ggl::CommonMesh::Pos4Mesh *v361;
  uint64_t v362;
  uint64_t n;
  uint64_t v364;
  unsigned int *v365;
  int v366;
  unint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  _QWORD *v384;
  uint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  ggl::CommonMesh::Pos2Mesh *v391;
  uint64_t v392;
  uint64_t ii;
  uint64_t v394;
  uint64_t v395;
  int *v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  _QWORD *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unsigned int v435;
  int v436;
  unint64_t v437;
  uint64_t v438;
  unsigned int v439;
  int v440;
  char v441;
  _QWORD *v442;
  unint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  int shared_owners_high;
  int shared_owners;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  ggl::CommonMesh::Pos4Mesh **v460;
  ggl::CommonMesh::Pos4Mesh **v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  geo::codec::VectorTile **v479;
  ggl::CommonMesh::Pos4Mesh *v480;
  __int128 v481;
  uint64_t v482;
  ggl::CommonMesh::Pos4Mesh *v483;
  uint64_t v484;
  uint64_t v485;
  float v486;
  float v487;
  uint64_t v488;
  _QWORD *v489;
  __int128 v490;
  uint64_t v491;
  uint64_t v492;
  __int16 v493;
  unint64_t v494;
  geo::codec::VectorTile *v495;
  std::__shared_weak_count *v496;

  v2 = (_QWORD *)a1;
  *(_OWORD *)(a1 + 112) = 0u;
  v479 = (geo::codec::VectorTile **)(a1 + 112);
  *(_OWORD *)(a1 + 128) = 0u;
  v461 = (ggl::CommonMesh::Pos4Mesh **)(a1 + 128);
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *(std::__shared_weak_count **)(a1 + 120);
    *(_QWORD *)(a1 + 112) = v3;
    *(_QWORD *)(a1 + 120) = v4;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 112) = v3;
    *(_QWORD *)(a1 + 120) = 0;
  }
  v460 = (ggl::CommonMesh::Pos4Mesh **)(v2 + 17);
  v10 = (_DWORD *)geo::codec::VectorTile::key(*v479);
  v11 = exp2((double)((*v10 >> 8) & 0x3F));
  v463 = geo::codec::VectorTile::linesCount(*v479);
  v12 = *v479;
  v489 = v2;
  if (v463)
  {
    v462 = geo::codec::VectorTile::lines(v12);
    v13 = (ggl::CommonMesh::Pos2Mesh *)operator new();
    v14 = v11 * 0.0000000249532021;
    v15 = ggl::CommonMesh::Pos2Mesh::Pos2Mesh(v13, "/DebugVerticesPoints");
    v16 = v2[23];
    v2[23] = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = 0;
    v18 = v14;
    while (1)
    {
      v19 = v462 + 168 * v17;
      v464 = v17;
      if (!*(_BYTE *)(v19 + 73) && !*(_BYTE *)(v19 + 72))
        break;
      ++*v2;
      v20 = (ggl::CommonMesh::Pos4Mesh *)v2[16];
      if (v20)
      {
        v21 = 1;
      }
      else
      {
        v20 = (ggl::CommonMesh::Pos4Mesh *)operator new();
        ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v20, "/DebugNamedLines");
        v22 = v461;
        v23 = *v461;
        *v461 = v20;
        v21 = 1;
        if (v23)
          goto LABEL_20;
      }
LABEL_23:
      if (*(_DWORD *)(v19 + 100))
      {
        v24 = 0;
        v25 = 24;
        if (v21)
          v25 = 8;
        v470 = v19;
        v474 = v25;
        v480 = v20;
        do
        {
          *(_QWORD *)&v490 = 0;
          v26 = geo::codec::multiSectionFeaturePoints((_QWORD *)v19, v24, &v490);
          v27 = geo::codec::VectorTile::lineVertices(*v479);
          v28 = *(_QWORD *)(v27 + 24);
          if (v28)
            v29 = v28 + 4 * *(_QWORD *)(*(_QWORD *)(v27 + 32) + 16 * (*(_DWORD *)(v19 + 96) + v24));
          else
            v29 = 0;
          v30 = **(_QWORD **)(v489[23] + 64);
          v31 = *(_QWORD *)(v30 + 8);
          v32 = (*(_QWORD *)(v30 + 48) - *(_QWORD *)(v30 + 40)) / v31;
          v33 = v490;
          v34 = v31 * (v490 + v32);
          v35 = *(_QWORD *)(v30 + 72);
          v36 = *(_QWORD *)(v30 + 80) - v35;
          v37 = v34 - v36;
          if (v34 != v36)
          {
            if (v34 <= v36)
            {
              if (v34 < v36)
                *(_QWORD *)(v30 + 80) = v35 + v34;
            }
            else
            {
              v38 = v29;
              std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v30 + 72, v37);
              v29 = v38;
            }
            v39 = *(std::__shared_weak_count **)(v30 + 32);
            *(_QWORD *)(v30 + 24) = 0;
            *(_QWORD *)(v30 + 32) = 0;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                v42 = v29;
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
                v29 = v42;
              }
            }
            *(_QWORD *)(v30 + 120) = 0;
            *(_DWORD *)(v30 + 112) = 0;
            v43 = *(_QWORD *)(v30 + 80) - *(_QWORD *)(v30 + 72);
            *(_QWORD *)(v30 + 40) = 0;
            *(_QWORD *)(v30 + 48) = v43;
            *(_QWORD *)(v30 + 56) = 0;
            *(_QWORD *)(v30 + 64) = v43;
            v30 = **(_QWORD **)(v489[23] + 64);
            v33 = v490;
            v31 = *(_QWORD *)(v30 + 8);
            v34 = v31 * (v490 + v32);
          }
          v44 = v31 * v32;
          if (v34 == v31 * v32)
          {
            v45 = 0;
            if (!v33)
              goto LABEL_53;
          }
          else
          {
            v45 = *(_QWORD *)(v30 + 72) + v44;
            if (!v33)
              goto LABEL_53;
          }
          if (v33 > 7 && (v45 >= (unint64_t)&v26[v33] || (unint64_t)v26 >= v45 + 8 * v33))
          {
            v46 = v33 & 0xFFFFFFFFFFFFFFF8;
            v87 = (_OWORD *)(v45 + 32);
            v88 = (__int128 *)(v26 + 4);
            v89 = v33 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v91 = *(v88 - 2);
              v90 = *(v88 - 1);
              v93 = *v88;
              v92 = v88[1];
              v88 += 4;
              *(v87 - 2) = v91;
              *(v87 - 1) = v90;
              *v87 = v93;
              v87[1] = v92;
              v87 += 4;
              v89 -= 8;
            }
            while (v89);
            if (v33 == v46)
              goto LABEL_53;
            v47 = &v26[v33 & 0xFFFFFFFFFFFFFFF8];
          }
          else
          {
            v46 = 0;
            v47 = v26;
          }
          v48 = v33 - v46;
          v49 = (_QWORD *)(v45 + 8 * v46);
          do
          {
            v50 = *v47++;
            *v49++ = v50;
            --v48;
          }
          while (v48);
LABEL_53:
          *(_QWORD *)((char *)v489 + v474) += v33;
          v489[8] += v33;
          v51 = 2 * v33 - 2;
          *(_QWORD *)&v490 = v51;
          v52 = **((_QWORD **)v20 + 8);
          v53 = *(_QWORD *)(v52 + 8);
          v54 = (*(_QWORD *)(v52 + 48) - *(_QWORD *)(v52 + 40)) / v53;
          v55 = v53 * (v54 + v51);
          v56 = *(_QWORD *)(v52 + 72);
          v57 = *(_QWORD *)(v52 + 80) - v56;
          if (v55 != v57)
          {
            if (v55 <= v57)
            {
              if (v55 < v57)
                *(_QWORD *)(v52 + 80) = v56 + v55;
            }
            else
            {
              v58 = v45;
              v59 = v34;
              v60 = v26;
              v61 = v44;
              v62 = v29;
              std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v52 + 72, v55 - v57);
              v29 = v62;
              v44 = v61;
              v26 = v60;
              v34 = v59;
              v45 = v58;
            }
            v63 = *(std::__shared_weak_count **)(v52 + 32);
            *(_QWORD *)(v52 + 24) = 0;
            *(_QWORD *)(v52 + 32) = 0;
            if (v63)
            {
              v64 = (unint64_t *)&v63->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                v465 = v29;
                v466 = v45;
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
                v29 = v465;
                v45 = v466;
              }
            }
            *(_QWORD *)(v52 + 120) = 0;
            *(_DWORD *)(v52 + 112) = 0;
            v66 = *(_QWORD *)(v52 + 80) - *(_QWORD *)(v52 + 72);
            *(_QWORD *)(v52 + 40) = 0;
            *(_QWORD *)(v52 + 48) = v66;
            *(_QWORD *)(v52 + 56) = 0;
            *(_QWORD *)(v52 + 64) = v66;
            v52 = **((_QWORD **)v480 + 8);
            v51 = v490;
            v53 = *(_QWORD *)(v52 + 8);
            v55 = v53 * (v490 + v54);
          }
          v67 = v53 * v54;
          if (v55 == v67)
            v68 = 0;
          else
            v68 = *(_QWORD *)(v52 + 72) + v67;
          v19 = v470;
          if (v29)
          {
            if (v51 >= 2)
            {
              v69 = v68 + 16;
              v70 = v26 + 1;
              v71 = (float *)(v29 + 4);
              v72 = 1;
              do
              {
                v73 = *(v71 - 1);
                if (v73 == 3.4028e38)
                  v74 = 0.0;
                else
                  v74 = v73 * v18;
                *(_QWORD *)(v69 - 16) = *(v70 - 1);
                *(float *)(v69 - 8) = v74;
                *(_DWORD *)(v69 - 4) = 1065353216;
                v75 = *v71++;
                v76 = v75 * v18;
                if (v75 == 3.4028e38)
                  v77 = 0.0;
                else
                  v77 = v76;
                v78 = *v70++;
                *(_QWORD *)v69 = v78;
                v72 += 2;
                *(float *)(v69 + 8) = v77;
                *(_DWORD *)(v69 + 12) = 1065353216;
                v69 += 32;
              }
              while (v51 > v72);
            }
          }
          else if (v51 >= 2)
          {
            v79 = (_QWORD *)(v68 + 16);
            v80 = v26 + 1;
            for (i = 1; i < v51; i += 2)
            {
              *(v79 - 2) = *(v80 - 1);
              *(v79 - 1) = 0x3F80000000000000;
              v82 = *v80++;
              *v79 = v82;
              v79[1] = 0x3F80000000000000;
              v79 += 4;
            }
          }
          if (v68 && v55 != v67)
          {
            v83 = *(_QWORD *)(v52 + 56);
            v84 = *(_QWORD *)(v52 + 64);
            if (v84 == v83)
              v83 = *(_QWORD *)(v52 + 80) - *(_QWORD *)(v52 + 72);
            if (v67 < v83)
              v83 = v67;
            if (v84 > v55)
              v55 = *(_QWORD *)(v52 + 64);
            if (v55 == v83)
              v55 = v83 + *(_QWORD *)(v52 + 80) - *(_QWORD *)(v52 + 72);
            *(_QWORD *)(v52 + 56) = v83;
            *(_QWORD *)(v52 + 64) = v55;
          }
          v20 = v480;
          if (v45 && v34 != v44)
          {
            v85 = *(_QWORD *)(v30 + 56);
            v86 = *(_QWORD *)(v30 + 64);
            if (v86 == v85)
              v85 = *(_QWORD *)(v30 + 80) - *(_QWORD *)(v30 + 72);
            if (v44 < v85)
              v85 = v44;
            if (v86 <= v34)
              v86 = v34;
            if (v86 == v85)
              v86 = v85 + *(_QWORD *)(v30 + 80) - *(_QWORD *)(v30 + 72);
            *(_QWORD *)(v30 + 56) = v85;
            *(_QWORD *)(v30 + 64) = v86;
          }
          ++v24;
        }
        while (v24 < *(unsigned int *)(v470 + 100));
      }
      v17 = v464 + 1;
      v2 = v489;
      if (v464 + 1 == v463)
      {
        v12 = *v479;
        goto LABEL_109;
      }
    }
    ++v2[2];
    v20 = (ggl::CommonMesh::Pos4Mesh *)v2[17];
    if (v20)
    {
      v21 = 0;
      goto LABEL_23;
    }
    v20 = (ggl::CommonMesh::Pos4Mesh *)operator new();
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v20, "/DebugUnnamedLines");
    v21 = 0;
    v22 = v460;
    v23 = *v460;
    *v460 = v20;
    if (!v23)
      goto LABEL_23;
LABEL_20:
    (*(void (**)(ggl::CommonMesh::Pos4Mesh *))(*(_QWORD *)v23 + 8))(v23);
    v20 = *v22;
    goto LABEL_23;
  }
LABEL_109:
  v94 = (std::__shared_weak_count *)v2[15];
  v495 = v12;
  v496 = v94;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v97 = geo::codec::VectorTile::poisCount(v12);
  v98 = v97;
  if (v97)
  {
    v2[7] += v97;
    v99 = (ggl::CommonMesh::Pos2Mesh *)operator new();
    ggl::CommonMesh::Pos2Mesh::Pos2Mesh(v99, "/DebugPOIPoints");
    v100 = v2[22];
    v2[22] = v99;
    if (v100)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
      v99 = (ggl::CommonMesh::Pos2Mesh *)v2[22];
    }
    v101 = **((_QWORD **)v99 + 8);
    v102 = v2;
    v104 = *(_QWORD *)(v101 + 40);
    v103 = *(_QWORD *)(v101 + 48);
    v105 = *(_QWORD *)(v101 + 8);
    v106 = v105 * v102[7];
    v107 = *(_QWORD *)(v101 + 72);
    v108 = *(_QWORD *)(v101 + 80) - v107;
    if (v106 == v108)
    {
      v109 = *(_QWORD *)(v101 + 8);
    }
    else
    {
      if (v106 <= v108)
      {
        if (v106 < v108)
          *(_QWORD *)(v101 + 80) = v107 + v106;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v101 + 72, v106 - v108);
      }
      v110 = *(std::__shared_weak_count **)(v101 + 32);
      *(_QWORD *)(v101 + 24) = 0;
      *(_QWORD *)(v101 + 32) = 0;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      *(_QWORD *)(v101 + 120) = 0;
      *(_DWORD *)(v101 + 112) = 0;
      v113 = *(_QWORD *)(v101 + 80) - *(_QWORD *)(v101 + 72);
      *(_QWORD *)(v101 + 40) = 0;
      *(_QWORD *)(v101 + 48) = v113;
      *(_QWORD *)(v101 + 56) = 0;
      *(_QWORD *)(v101 + 64) = v113;
      v101 = **((_QWORD **)v99 + 8);
      v109 = *(_QWORD *)(v101 + 8);
    }
    v114 = 0;
    v490 = 0uLL;
    v115 = (v103 - v104) / v105;
    v116 = v109 * v115;
    v117 = v109 * (v115 + v98);
    *(_QWORD *)&v118 = 0;
    *((_QWORD *)&v118 + 1) = v101;
    if (v117 != v109 * v115)
      v114 = *(_QWORD *)(v101 + 72) + v116;
    v490 = v118;
    v491 = v109 * v115;
    v492 = v109 * (v115 + v98);
    v494 = v114;
    v493 = 1;
    v2 = v489;
    v481 = v118;
    v119 = geo::codec::VectorTile::pois(v12);
    v120 = 0;
    v121 = (uint64_t *)(v119 + 88);
    do
    {
      v122 = *v121;
      v121 += 28;
      *(_QWORD *)(v114 + 8 * v120++) = v122;
    }
    while (v98 != v120);
    if (v117 != v116)
    {
      if ((_QWORD)v481 && *(_BYTE *)(*((_QWORD *)&v481 + 1) + 17) != 2)
        (*(void (**)(_QWORD, unint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v481 + 64))(v481, v114, *((_QWORD *)&v481 + 1), v116, v117, 1, 0);
      v124 = *(_QWORD *)(*((_QWORD *)&v481 + 1) + 56);
      v123 = *(_QWORD *)(*((_QWORD *)&v481 + 1) + 64);
      if (v123 == v124)
        v124 = *(_QWORD *)(*((_QWORD *)&v481 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v481 + 1) + 72);
      if (v116 < v124)
        v124 = v116;
      if (v123 <= v117)
        v123 = v117;
      if (v123 == v124)
        v123 = v124 + *(_QWORD *)(*((_QWORD *)&v481 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v481 + 1) + 72);
      *(_QWORD *)(*((_QWORD *)&v481 + 1) + 56) = v124;
      *(_QWORD *)(*((_QWORD *)&v481 + 1) + 64) = v123;
    }
  }
  if (v94)
  {
    v125 = (unint64_t *)&v94->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v482 = geo::codec::VectorTile::polygonsCount(*v479);
  if (v482)
  {
    v2[4] += v482;
    v127 = (ggl::CommonMesh::Pos4Mesh *)v2[18];
    if (!v127)
    {
      v127 = (ggl::CommonMesh::Pos4Mesh *)operator new();
      ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v127, "/DebugPolygonLines");
      v128 = v2[18];
      v2[18] = v127;
      if (v128)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
        v127 = (ggl::CommonMesh::Pos4Mesh *)v2[18];
      }
    }
    v129 = geo::codec::VectorTile::polygons(*v479);
    for (j = 0; j != v482; ++j)
    {
      v131 = v129 + (j << 7);
      if (*(_DWORD *)(v131 + 100))
      {
        v132 = 0;
        do
        {
          *(_QWORD *)&v490 = 0;
          v133 = geo::codec::multiSectionFeaturePoints((_QWORD *)(v129 + (j << 7)), v132, &v490);
          v134 = v490;
          v2[5] += v490;
          v134 *= 2;
          *(_QWORD *)&v490 = v134 - 2;
          v135 = **((_QWORD **)v127 + 8);
          v136 = *(_QWORD *)(v135 + 8);
          v137 = (*(_QWORD *)(v135 + 48) - *(_QWORD *)(v135 + 40)) / v136;
          v138 = v137 + v134;
          v139 = v136 * (v137 + v134);
          v140 = *(_QWORD *)(v135 + 72);
          v141 = *(_QWORD *)(v135 + 80) - v140;
          if (v139 != v141)
          {
            if (v139 <= v141)
            {
              if (v139 < v141)
                *(_QWORD *)(v135 + 80) = v140 + v139;
            }
            else
            {
              std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v135 + 72, v139 - v141);
            }
            v142 = *(std::__shared_weak_count **)(v135 + 32);
            *(_QWORD *)(v135 + 24) = 0;
            *(_QWORD *)(v135 + 32) = 0;
            if (v142)
            {
              v143 = (unint64_t *)&v142->__shared_owners_;
              do
                v144 = __ldaxr(v143);
              while (__stlxr(v144 - 1, v143));
              if (!v144)
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v142);
              }
            }
            *(_QWORD *)(v135 + 120) = 0;
            *(_DWORD *)(v135 + 112) = 0;
            v145 = *(_QWORD *)(v135 + 80) - *(_QWORD *)(v135 + 72);
            *(_QWORD *)(v135 + 40) = 0;
            *(_QWORD *)(v135 + 48) = v145;
            *(_QWORD *)(v135 + 56) = 0;
            *(_QWORD *)(v135 + 64) = v145;
            v135 = **((_QWORD **)v127 + 8);
            v136 = *(_QWORD *)(v135 + 8);
            v139 = v136 * v138;
          }
          v146 = v136 * v137;
          if (v139 == v146)
            v147 = 0;
          else
            v147 = *(_QWORD *)(v135 + 72) + v146;
          v148 = v490;
          v149 = v133;
          if ((unint64_t)v490 >= 2)
          {
            v150 = (_QWORD *)(v147 + 16);
            v151 = 1;
            v149 = v133;
            do
            {
              *(v150 - 2) = *v149;
              *(v150 - 1) = 0x3F80000000000000;
              v152 = v149[1];
              ++v149;
              *v150 = v152;
              v150[1] = 0x3F80000000000000;
              v150 += 4;
              v151 += 2;
            }
            while (v148 > v151);
          }
          v153 = (_QWORD *)(v147 + 16 * v148);
          *v153 = *v149;
          v153[1] = 0x3F80000000000000;
          v153[2] = *v133;
          v153[3] = 0x3F80000000000000;
          if (v147 && v139 != v146)
          {
            v155 = *(_QWORD *)(v135 + 56);
            v154 = *(_QWORD *)(v135 + 64);
            if (v154 == v155)
              v155 = *(_QWORD *)(v135 + 80) - *(_QWORD *)(v135 + 72);
            if (v146 >= v155)
              v146 = v155;
            if (v154 > v139)
              v139 = *(_QWORD *)(v135 + 64);
            if (v139 == v146)
              v139 = v146 + *(_QWORD *)(v135 + 80) - *(_QWORD *)(v135 + 72);
            *(_QWORD *)(v135 + 56) = v146;
            *(_QWORD *)(v135 + 64) = v139;
          }
          ++v132;
          v2 = v489;
        }
        while (v132 < *(unsigned int *)(v131 + 100));
      }
    }
  }
  v156 = geo::codec::VectorTile::totalBuildingFootprintsCount(*v479);
  v157 = v156;
  if (v156)
  {
    v2[4] += v156;
    v158 = (ggl::CommonMesh::Pos4Mesh *)v2[18];
    if (!v158)
    {
      v158 = (ggl::CommonMesh::Pos4Mesh *)operator new();
      ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v158, "/DebugPolygonLines");
      v159 = v2[18];
      v2[18] = v158;
      if (v159)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
        v158 = (ggl::CommonMesh::Pos4Mesh *)v2[18];
      }
    }
    v160 = 0;
    do
    {
      v161 = geo::codec::buildingFootprintFeatureAtIndex((uint64_t)v479, v160);
      if (*(_DWORD *)(v161 + 100))
      {
        v162 = 0;
        do
        {
          *(_QWORD *)&v490 = 0;
          v163 = geo::codec::multiSectionFeaturePoints((_QWORD *)v161, v162, &v490);
          v164 = v490;
          v2[5] += v490;
          v164 *= 2;
          *(_QWORD *)&v490 = v164 - 2;
          v165 = **((_QWORD **)v158 + 8);
          v166 = *(_QWORD *)(v165 + 8);
          v167 = (*(_QWORD *)(v165 + 48) - *(_QWORD *)(v165 + 40)) / v166;
          v168 = v167 + v164;
          v169 = v166 * (v167 + v164);
          v170 = *(_QWORD *)(v165 + 72);
          v171 = *(_QWORD *)(v165 + 80) - v170;
          if (v169 != v171)
          {
            if (v169 <= v171)
            {
              if (v169 < v171)
                *(_QWORD *)(v165 + 80) = v170 + v169;
            }
            else
            {
              std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v165 + 72, v169 - v171);
            }
            v172 = *(std::__shared_weak_count **)(v165 + 32);
            *(_QWORD *)(v165 + 24) = 0;
            *(_QWORD *)(v165 + 32) = 0;
            if (v172)
            {
              v173 = (unint64_t *)&v172->__shared_owners_;
              do
                v174 = __ldaxr(v173);
              while (__stlxr(v174 - 1, v173));
              if (!v174)
              {
                ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                std::__shared_weak_count::__release_weak(v172);
              }
            }
            *(_QWORD *)(v165 + 120) = 0;
            *(_DWORD *)(v165 + 112) = 0;
            v175 = *(_QWORD *)(v165 + 80) - *(_QWORD *)(v165 + 72);
            *(_QWORD *)(v165 + 40) = 0;
            *(_QWORD *)(v165 + 48) = v175;
            *(_QWORD *)(v165 + 56) = 0;
            *(_QWORD *)(v165 + 64) = v175;
            v165 = **((_QWORD **)v158 + 8);
            v166 = *(_QWORD *)(v165 + 8);
            v169 = v166 * v168;
          }
          v176 = v166 * v167;
          if (v169 == v176)
            v177 = 0;
          else
            v177 = *(_QWORD *)(v165 + 72) + v176;
          v2 = v489;
          v178 = v490;
          v179 = v163;
          if ((unint64_t)v490 >= 2)
          {
            v180 = (_QWORD *)(v177 + 16);
            v181 = 1;
            v179 = v163;
            do
            {
              *(v180 - 2) = *v179;
              *(v180 - 1) = 0x3F80000000000000;
              v182 = v179[1];
              ++v179;
              *v180 = v182;
              v180[1] = 0x3F80000000000000;
              v180 += 4;
              v181 += 2;
            }
            while (v178 > v181);
          }
          v183 = (_QWORD *)(v177 + 16 * v178);
          *v183 = *v179;
          v183[1] = 0x3F80000000000000;
          v183[2] = *v163;
          v183[3] = 0x3F80000000000000;
          if (v177 && v169 != v176)
          {
            v185 = *(_QWORD *)(v165 + 56);
            v184 = *(_QWORD *)(v165 + 64);
            if (v184 == v185)
              v185 = *(_QWORD *)(v165 + 80) - *(_QWORD *)(v165 + 72);
            if (v176 >= v185)
              v176 = v185;
            if (v184 > v169)
              v169 = *(_QWORD *)(v165 + 64);
            if (v169 == v176)
              v169 = v176 + *(_QWORD *)(v165 + 80) - *(_QWORD *)(v165 + 72);
            *(_QWORD *)(v165 + 56) = v176;
            *(_QWORD *)(v165 + 64) = v169;
          }
          ++v162;
        }
        while (v162 < *(unsigned int *)(v161 + 100));
      }
      ++v160;
    }
    while (v160 != v157);
  }
  v186 = geo::codec::VectorTile::totalThreeDBuildingsCount(*v479);
  v187 = v186;
  if (v186)
  {
    v2[4] += v186;
    v188 = (ggl::CommonMesh::Pos4Mesh *)v2[18];
    if (!v188)
    {
      v188 = (ggl::CommonMesh::Pos4Mesh *)operator new();
      ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v188, "/DebugPolygonLines");
      v189 = v2[18];
      v2[18] = v188;
      if (v189)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
        v188 = (ggl::CommonMesh::Pos4Mesh *)v2[18];
      }
    }
    v190 = 0;
    v467 = v187;
    v483 = v188;
    do
    {
      v191 = geo::codec::threeDBuildingFeatureAtIndex((uint64_t)v479, v190);
      v192 = (geo **)geo::A3DFileCreate(*(geo **)(v191 + 80), (const unsigned __int8 *)(*(_QWORD *)(v191 + 88) - *(_QWORD *)(v191 + 80)));
      v194 = (geo *)v192;
      if (v192)
      {
        v195 = *v192;
        v196 = (const unsigned __int8 *)v192[1];
        v197 = geo::A3DGetMetadataHeaderCount(*v192, v196);
        if (v197)
        {
          v198 = geo::A3DGetMetadataHeaders(v195, v196);
          if (v198)
          {
            v199 = 0;
            v200 = 0;
            v201 = v197;
            do
            {
              if (!*(_BYTE *)v198)
              {
                v199 += *(unsigned int *)(v198 + 5);
                ++v200;
              }
              v198 += 17;
              --v201;
            }
            while (v201);
            if (v200)
            {
              v475 = operator new[]();
              v471 = (char *)malloc_type_malloc(16 * v200, 0x1000040451B5BE8uLL);
              geo::A3DGetShadows(*(unsigned int **)v194, *((_QWORD *)v194 + 1), v475, (uint64_t)v471);
              v202 = v471;
              v203 = v475;
              if (v471)
              {
                v204 = 0;
                v205 = **((_QWORD **)v188 + 8);
                do
                {
                  v206 = &v202[16 * v204];
                  v208 = *(_QWORD *)v206;
                  v207 = *((_QWORD *)v206 + 1);
                  v489[5] += v207;
                  v209 = 2 * v207;
                  v210 = *(_QWORD *)(v205 + 72);
                  v211 = *(_QWORD *)(v205 + 8);
                  v212 = (*(_QWORD *)(v205 + 48) - *(_QWORD *)(v205 + 40)) / v211;
                  v213 = v212 + 2 * v207;
                  v214 = v211 * v213;
                  v215 = *(_QWORD *)(v205 + 80) - v210;
                  if (v211 * v213 != v215)
                  {
                    if (v211 * v213 <= v215)
                    {
                      if (v214 < v215)
                        *(_QWORD *)(v205 + 80) = v210 + v214;
                    }
                    else
                    {
                      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v205 + 72, v211 * v213 - v215);
                      v202 = v471;
                      v203 = v475;
                    }
                    v216 = *(std::__shared_weak_count **)(v205 + 32);
                    *(_QWORD *)(v205 + 24) = 0;
                    *(_QWORD *)(v205 + 32) = 0;
                    if (v216)
                    {
                      v217 = (unint64_t *)&v216->__shared_owners_;
                      do
                        v218 = __ldaxr(v217);
                      while (__stlxr(v218 - 1, v217));
                      if (!v218)
                      {
                        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                        std::__shared_weak_count::__release_weak(v216);
                        v202 = v471;
                        v203 = v475;
                      }
                    }
                    *(_QWORD *)(v205 + 120) = 0;
                    *(_DWORD *)(v205 + 112) = 0;
                    v219 = *(_QWORD *)(v205 + 80) - *(_QWORD *)(v205 + 72);
                    *(_QWORD *)(v205 + 40) = 0;
                    *(_QWORD *)(v205 + 48) = v219;
                    *(_QWORD *)(v205 + 56) = 0;
                    *(_QWORD *)(v205 + 64) = v219;
                    v205 = **((_QWORD **)v483 + 8);
                    v211 = *(_QWORD *)(v205 + 8);
                    v214 = v211 * v213;
                  }
                  v220 = v211 * v212;
                  if (v214 == v220)
                    v221 = 0;
                  else
                    v221 = *(_QWORD *)(v205 + 72) + v220;
                  v222 = (_QWORD *)(v203 + 8 * v208);
                  v223 = v209 - 2;
                  if (v209 != 2)
                  {
                    v224 = (_QWORD *)(v221 + 16);
                    v225 = 1;
                    v222 = (_QWORD *)(v203 + 8 * v208);
                    do
                    {
                      *(v224 - 2) = *v222;
                      *(v224 - 1) = 0x3F80000000000000;
                      v226 = v222[1];
                      ++v222;
                      *v224 = v226;
                      v224[1] = 0x3F80000000000000;
                      v224 += 4;
                      v225 += 2;
                    }
                    while (v223 > v225);
                  }
                  v227 = (_QWORD *)(v221 + 16 * v223);
                  *v227 = *v222;
                  v227[1] = 0x3F80000000000000;
                  v228 = v221 + 16 * v209;
                  *(_QWORD *)(v228 - 16) = *(_QWORD *)(v203 + 8 * v208);
                  *(_QWORD *)(v228 - 8) = 0x3F80000000000000;
                  if (v221 && v214 != v220)
                  {
                    v230 = *(_QWORD *)(v205 + 56);
                    v229 = *(_QWORD *)(v205 + 64);
                    if (v229 == v230)
                      v230 = *(_QWORD *)(v205 + 80) - *(_QWORD *)(v205 + 72);
                    if (v220 >= v230)
                      v220 = v230;
                    if (v229 > v214)
                      v214 = *(_QWORD *)(v205 + 64);
                    if (v214 == v220)
                      v214 = v220 + *(_QWORD *)(v205 + 80) - *(_QWORD *)(v205 + 72);
                    *(_QWORD *)(v205 + 56) = v220;
                    *(_QWORD *)(v205 + 64) = v214;
                  }
                  ++v204;
                }
                while (v204 != v200);
                v231 = v202;
                MEMORY[0x1A1AF4DE8](v203, 0x1000C8000313F17);
                free(v231);
                v187 = v467;
                v188 = v483;
              }
            }
          }
        }
      }
      geo::A3DFileDelete(v194, v193);
      ++v190;
    }
    while (v190 != v187);
  }
  v232 = geo::codec::VectorTile::venuesCount(*v479);
  v233 = v232;
  if (v232)
  {
    v489[6] += v232;
    v234 = (ggl::CommonMesh::Pos4Mesh *)operator new();
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v234, "/DebugVenueOutlines");
    v235 = v489[19];
    v489[19] = v234;
    if (v235)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
      v234 = (ggl::CommonMesh::Pos4Mesh *)v489[19];
    }
    v484 = geo::codec::VectorTile::venues(*v479);
    v236 = 0;
    while (1)
    {
      v237 = v484 + 144 * v236;
      if (*(_DWORD *)(v237 + 100))
        break;
LABEL_273:
      if (++v236 == v233)
      {
        v259 = (ggl::CommonMesh::Pos4Mesh *)operator new();
        ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v259, "/DebugVenueBuildingOutlines");
        v260 = v489[20];
        v489[20] = v259;
        if (v260)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
          v259 = (ggl::CommonMesh::Pos4Mesh *)v489[20];
        }
        for (k = 0; ; ++k)
        {
          if (k >= geo::codec::VectorTile::venueBuildingsCount(*v479))
            goto LABEL_347;
          v262 = geo::codec::VectorTile::venueBuildings(*v479) + 152 * k;
          if (*(_DWORD *)(v262 + 100))
            break;
LABEL_311:
          ;
        }
        v263 = 0;
        while (2)
        {
          *(_QWORD *)&v490 = 0;
          v264 = geo::codec::multiSectionFeaturePoints((_QWORD *)v262, v263, &v490);
          v265 = **((_QWORD **)v259 + 8);
          v266 = *(_QWORD *)(v265 + 8);
          v267 = (*(_QWORD *)(v265 + 48) - *(_QWORD *)(v265 + 40)) / v266;
          v268 = v267 + 2 * v490;
          v269 = v266 * v268;
          v270 = *(_QWORD *)(v265 + 72);
          v271 = *(_QWORD *)(v265 + 80) - v270;
          if (v266 * v268 != v271)
          {
            if (v266 * v268 <= v271)
            {
              if (v269 < v271)
                *(_QWORD *)(v265 + 80) = v270 + v269;
            }
            else
            {
              std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v265 + 72, v266 * v268 - v271);
            }
            v272 = *(std::__shared_weak_count **)(v265 + 32);
            *(_QWORD *)(v265 + 24) = 0;
            *(_QWORD *)(v265 + 32) = 0;
            if (v272)
            {
              v273 = (unint64_t *)&v272->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                std::__shared_weak_count::__release_weak(v272);
              }
            }
            *(_QWORD *)(v265 + 120) = 0;
            *(_DWORD *)(v265 + 112) = 0;
            v275 = *(_QWORD *)(v265 + 80) - *(_QWORD *)(v265 + 72);
            *(_QWORD *)(v265 + 40) = 0;
            *(_QWORD *)(v265 + 48) = v275;
            *(_QWORD *)(v265 + 56) = 0;
            *(_QWORD *)(v265 + 64) = v275;
            v265 = **((_QWORD **)v259 + 8);
            v266 = *(_QWORD *)(v265 + 8);
            v269 = v266 * v268;
          }
          v276 = v266 * v267;
          if (v269 == v276)
          {
            v277 = 0;
            v278 = v490;
            if (!(_QWORD)v490)
              goto LABEL_337;
LABEL_332:
            v279 = 0;
            v280 = (_QWORD *)(v277 + 16);
            do
            {
              if (v278 - 1 == v279)
                v281 = 0;
              else
                v281 = v279 + 1;
              *(v280 - 2) = v264[v279];
              *(v280 - 1) = 0x3F80000000000000;
              *v280 = v264[v281];
              v280[1] = 0x3F80000000000000;
              v280 += 4;
              ++v279;
            }
            while (v278 != v279);
          }
          else
          {
            v277 = *(_QWORD *)(v265 + 72) + v276;
            v278 = v490;
            if ((_QWORD)v490)
              goto LABEL_332;
          }
LABEL_337:
          if (v277 && v269 != v276)
          {
            v283 = *(_QWORD *)(v265 + 56);
            v282 = *(_QWORD *)(v265 + 64);
            if (v282 == v283)
              v283 = *(_QWORD *)(v265 + 80) - *(_QWORD *)(v265 + 72);
            if (v276 >= v283)
              v276 = v283;
            if (v282 > v269)
              v269 = *(_QWORD *)(v265 + 64);
            if (v269 == v276)
              v269 = v276 + *(_QWORD *)(v265 + 80) - *(_QWORD *)(v265 + 72);
            *(_QWORD *)(v265 + 56) = v276;
            *(_QWORD *)(v265 + 64) = v269;
          }
          if (++v263 >= *(unsigned int *)(v262 + 100))
            goto LABEL_311;
          continue;
        }
      }
    }
    v238 = 0;
    while (1)
    {
      *(_QWORD *)&v490 = 0;
      v239 = geo::codec::multiSectionFeaturePoints((_QWORD *)v237, v238, &v490);
      v240 = **((_QWORD **)v234 + 8);
      v241 = *(_QWORD *)(v240 + 8);
      v242 = (*(_QWORD *)(v240 + 48) - *(_QWORD *)(v240 + 40)) / v241;
      v243 = v242 + 2 * v490;
      v244 = v241 * v243;
      v245 = *(_QWORD *)(v240 + 72);
      v246 = *(_QWORD *)(v240 + 80) - v245;
      if (v241 * v243 != v246)
      {
        if (v241 * v243 <= v246)
        {
          if (v244 < v246)
            *(_QWORD *)(v240 + 80) = v245 + v244;
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v240 + 72, v241 * v243 - v246);
        }
        v247 = *(std::__shared_weak_count **)(v240 + 32);
        *(_QWORD *)(v240 + 24) = 0;
        *(_QWORD *)(v240 + 32) = 0;
        if (v247)
        {
          v248 = (unint64_t *)&v247->__shared_owners_;
          do
            v249 = __ldaxr(v248);
          while (__stlxr(v249 - 1, v248));
          if (!v249)
          {
            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
            std::__shared_weak_count::__release_weak(v247);
          }
        }
        *(_QWORD *)(v240 + 120) = 0;
        *(_DWORD *)(v240 + 112) = 0;
        v250 = *(_QWORD *)(v240 + 80) - *(_QWORD *)(v240 + 72);
        *(_QWORD *)(v240 + 40) = 0;
        *(_QWORD *)(v240 + 48) = v250;
        *(_QWORD *)(v240 + 56) = 0;
        *(_QWORD *)(v240 + 64) = v250;
        v240 = **((_QWORD **)v234 + 8);
        v241 = *(_QWORD *)(v240 + 8);
        v244 = v241 * v243;
      }
      v251 = v241 * v242;
      if (v244 == v251)
      {
        v252 = 0;
        v253 = v490;
        if ((_QWORD)v490)
          goto LABEL_293;
      }
      else
      {
        v252 = *(_QWORD *)(v240 + 72) + v251;
        v253 = v490;
        if ((_QWORD)v490)
        {
LABEL_293:
          v254 = 0;
          v255 = (_QWORD *)(v252 + 16);
          do
          {
            if (v253 - 1 == v254)
              v256 = 0;
            else
              v256 = v254 + 1;
            *(v255 - 2) = v239[v254];
            *(v255 - 1) = 0x3F80000000000000;
            *v255 = v239[v256];
            v255[1] = 0x3F80000000000000;
            v255 += 4;
            ++v254;
          }
          while (v253 != v254);
        }
      }
      if (v252 && v244 != v251)
      {
        v258 = *(_QWORD *)(v240 + 56);
        v257 = *(_QWORD *)(v240 + 64);
        if (v257 == v258)
          v258 = *(_QWORD *)(v240 + 80) - *(_QWORD *)(v240 + 72);
        if (v251 >= v258)
          v251 = v258;
        if (v257 > v244)
          v244 = *(_QWORD *)(v240 + 64);
        if (v244 == v251)
          v244 = v251 + *(_QWORD *)(v240 + 80) - *(_QWORD *)(v240 + 72);
        *(_QWORD *)(v240 + 56) = v251;
        *(_QWORD *)(v240 + 64) = v244;
      }
      if (++v238 >= *(unsigned int *)(v237 + 100))
        goto LABEL_273;
    }
  }
LABEL_347:
  if ((geo::codec::VectorTile::hasComputedJunctions(*v479) & 1) == 0)
  {
    v476 = geo::codec::VectorTile::junctionsCount(*v479);
    if (v476)
    {
      v284 = geo::codec::VectorTile::lines(*v479);
      v468 = geo::codec::VectorTile::pointsOnRoad(*v479);
      v472 = geo::codec::VectorTile::junctions(*v479);
      v285 = (ggl::CommonMesh::Pos2Mesh *)operator new();
      ggl::CommonMesh::Pos2Mesh::Pos2Mesh(v285, "/DebugJunctionPoints");
      v286 = v489[24];
      v489[24] = v285;
      if (v286)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v286 + 8))(v286);
        v285 = (ggl::CommonMesh::Pos2Mesh *)v489[24];
      }
      v287 = 0;
      do
      {
        v289 = (unsigned int *)(v472 + 32 * v287);
        v485 = v287;
        if (*v289)
        {
          v290 = 0;
          v291 = v468 + 16 * v289[1];
          do
          {
            v292 = (unsigned int *)(v291 + 16 * v290);
            v293 = v292[2];
            v294 = v292[3];
            v295 = (_QWORD *)(v284 + 168 * v292[1]);
            *(_QWORD *)&v490 = 0;
            v296 = geo::codec::multiSectionFeaturePoints(v295, v293, &v490)[v294];
            v297 = **((_QWORD **)v285 + 8);
            v298 = *(_QWORD *)(v297 + 8);
            v299 = (*(_QWORD *)(v297 + 48) - *(_QWORD *)(v297 + 40)) / v298;
            v300 = v298 * (v299 + 1);
            v301 = *(_QWORD *)(v297 + 72);
            v302 = *(_QWORD *)(v297 + 80) - v301;
            if (v300 != v302)
            {
              if (v300 <= v302)
              {
                if (v300 < v302)
                  *(_QWORD *)(v297 + 80) = v301 + v300;
              }
              else
              {
                std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v297 + 72, v300 - v302);
              }
              v303 = *(std::__shared_weak_count **)(v297 + 32);
              *(_QWORD *)(v297 + 24) = 0;
              *(_QWORD *)(v297 + 32) = 0;
              if (v303)
              {
                v304 = (unint64_t *)&v303->__shared_owners_;
                do
                  v305 = __ldaxr(v304);
                while (__stlxr(v305 - 1, v304));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                  std::__shared_weak_count::__release_weak(v303);
                }
              }
              *(_QWORD *)(v297 + 120) = 0;
              *(_DWORD *)(v297 + 112) = 0;
              v306 = *(_QWORD *)(v297 + 80) - *(_QWORD *)(v297 + 72);
              *(_QWORD *)(v297 + 40) = 0;
              *(_QWORD *)(v297 + 48) = v306;
              *(_QWORD *)(v297 + 56) = 0;
              *(_QWORD *)(v297 + 64) = v306;
              v297 = **((_QWORD **)v285 + 8);
              v298 = *(_QWORD *)(v297 + 8);
              v300 = v298 * (v299 + 1);
            }
            v307 = v298 * v299;
            *(_QWORD *)(*(_QWORD *)(v297 + 72) + v307) = v296;
            if (v300 != v307)
            {
              v309 = *(_QWORD *)(v297 + 56);
              v308 = *(_QWORD *)(v297 + 64);
              if (v308 == v309)
                v309 = *(_QWORD *)(v297 + 80) - *(_QWORD *)(v297 + 72);
              if (v307 >= v309)
                v307 = v309;
              if (v308 > v300)
                v300 = *(_QWORD *)(v297 + 64);
              if (v300 == v307)
                v300 = v307 + *(_QWORD *)(v297 + 80) - *(_QWORD *)(v297 + 72);
              *(_QWORD *)(v297 + 56) = v307;
              *(_QWORD *)(v297 + 64) = v300;
            }
            ++v290;
            v288 = *v289;
          }
          while (v290 < v288);
        }
        else
        {
          v288 = 0;
        }
        v489[9] += v288;
        v287 = v485 + 1;
      }
      while (v485 + 1 != v476);
      v310 = geo::codec::VectorTile::overpasses(*v479);
      if (v310)
      {
        v311 = (ggl::CommonMesh::Pos2Mesh *)operator new();
        ggl::CommonMesh::Pos2Mesh::Pos2Mesh(v311, "/DebugOverpassPoints");
        v312 = v489[26];
        v489[26] = v311;
        if (v312)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
          v311 = (ggl::CommonMesh::Pos2Mesh *)v489[26];
        }
        for (m = 0; m != v476; ++m)
        {
          if (*(_WORD *)(v310 + 2 * m) && *(_DWORD *)(v472 + 32 * m))
          {
            v314 = (unsigned int *)(v468 + 16 * *(unsigned int *)(v472 + 32 * m + 4));
            v315 = (_QWORD *)(v284 + 168 * v314[1]);
            *(_QWORD *)&v490 = 0;
            v316 = geo::codec::multiSectionFeaturePoints(v315, v314[2], &v490)[v314[3]];
            v317 = **((_QWORD **)v311 + 8);
            v318 = *(_QWORD *)(v317 + 8);
            v319 = (*(_QWORD *)(v317 + 48) - *(_QWORD *)(v317 + 40)) / v318;
            v320 = v318 * (v319 + 1);
            v321 = *(_QWORD *)(v317 + 72);
            v322 = *(_QWORD *)(v317 + 80) - v321;
            if (v320 != v322)
            {
              if (v320 <= v322)
              {
                if (v320 < v322)
                  *(_QWORD *)(v317 + 80) = v321 + v320;
              }
              else
              {
                std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v317 + 72, v320 - v322);
              }
              v323 = *(std::__shared_weak_count **)(v317 + 32);
              *(_QWORD *)(v317 + 24) = 0;
              *(_QWORD *)(v317 + 32) = 0;
              if (v323)
              {
                v324 = (unint64_t *)&v323->__shared_owners_;
                do
                  v325 = __ldaxr(v324);
                while (__stlxr(v325 - 1, v324));
                if (!v325)
                {
                  ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                  std::__shared_weak_count::__release_weak(v323);
                }
              }
              *(_QWORD *)(v317 + 120) = 0;
              *(_DWORD *)(v317 + 112) = 0;
              v326 = *(_QWORD *)(v317 + 80) - *(_QWORD *)(v317 + 72);
              *(_QWORD *)(v317 + 40) = 0;
              *(_QWORD *)(v317 + 48) = v326;
              *(_QWORD *)(v317 + 56) = 0;
              *(_QWORD *)(v317 + 64) = v326;
              v317 = **((_QWORD **)v311 + 8);
              v318 = *(_QWORD *)(v317 + 8);
              v320 = v318 * (v319 + 1);
            }
            v327 = v318 * v319;
            *(_QWORD *)(*(_QWORD *)(v317 + 72) + v327) = v316;
            ++v489[11];
            if (v320 != v327)
            {
              v329 = *(_QWORD *)(v317 + 56);
              v328 = *(_QWORD *)(v317 + 64);
              if (v328 == v329)
                v329 = *(_QWORD *)(v317 + 80) - *(_QWORD *)(v317 + 72);
              if (v327 >= v329)
                v327 = v329;
              if (v328 > v320)
                v320 = *(_QWORD *)(v317 + 64);
              if (v320 == v327)
                v320 = v327 + *(_QWORD *)(v317 + 80) - *(_QWORD *)(v317 + 72);
              *(_QWORD *)(v317 + 56) = v327;
              *(_QWORD *)(v317 + 64) = v320;
            }
          }
        }
      }
    }
  }
  v330 = geo::codec::VectorTile::lineCrossingsCount(*v479);
  v489[10] = v330;
  if (v330)
  {
    v477 = geo::codec::VectorTile::lines(*v479);
    v473 = geo::codec::VectorTile::linesCount(*v479);
    v469 = geo::codec::VectorTile::lineCrossings(*v479);
    v331 = (ggl::CommonMesh::Pos2Mesh *)operator new();
    v332 = ggl::CommonMesh::Pos2Mesh::Pos2Mesh(v331, "/DebugCrossingPoints");
    v333 = v489[25];
    v489[25] = v332;
    if (v333)
      (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
    if (v473)
    {
      v334 = 0;
      v335 = v489[25];
      do
      {
        v336 = v477 + 168 * v334;
        v338 = *(unsigned __int16 *)(v336 + 146);
        v337 = (unsigned __int16 *)(v336 + 146);
        if (v338)
        {
          v339 = 0;
          v340 = (float *)(v469 + 12 * *(unsigned int *)(v477 + 168 * v334 + 136));
          do
          {
            v341 = *(unsigned __int16 *)v340;
            v342 = *((unsigned __int16 *)v340 + 1);
            *(_QWORD *)&v490 = 0;
            v343 = (float32x2_t *)&geo::codec::multiSectionFeaturePoints((_QWORD *)(v477 + 168 * v334), v341, &v490)[v342];
            v344 = v340[1];
            v345 = *v343;
            v346 = v343[1];
            v347 = **(_QWORD **)(v335 + 64);
            v348 = *(_QWORD *)(v347 + 8);
            v349 = (*(_QWORD *)(v347 + 48) - *(_QWORD *)(v347 + 40)) / v348;
            v350 = v348 * (v349 + 1);
            v351 = *(_QWORD *)(v347 + 72);
            v352 = *(_QWORD *)(v347 + 80) - v351;
            if (v350 != v352)
            {
              if (v350 <= v352)
              {
                if (v350 < v352)
                  *(_QWORD *)(v347 + 80) = v351 + v350;
              }
              else
              {
                v486 = v340[1];
                std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v347 + 72, v350 - v352);
                v344 = v486;
              }
              v353 = *(std::__shared_weak_count **)(v347 + 32);
              *(_QWORD *)(v347 + 24) = 0;
              *(_QWORD *)(v347 + 32) = 0;
              if (v353)
              {
                v354 = (unint64_t *)&v353->__shared_owners_;
                do
                  v355 = __ldaxr(v354);
                while (__stlxr(v355 - 1, v354));
                if (!v355)
                {
                  v487 = v344;
                  ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                  std::__shared_weak_count::__release_weak(v353);
                  v344 = v487;
                }
              }
              *(_QWORD *)(v347 + 120) = 0;
              *(_DWORD *)(v347 + 112) = 0;
              v356 = *(_QWORD *)(v347 + 80) - *(_QWORD *)(v347 + 72);
              *(_QWORD *)(v347 + 40) = 0;
              *(_QWORD *)(v347 + 48) = v356;
              *(_QWORD *)(v347 + 56) = 0;
              *(_QWORD *)(v347 + 64) = v356;
              v347 = **(_QWORD **)(v335 + 64);
              v348 = *(_QWORD *)(v347 + 8);
              v350 = v348 * (v349 + 1);
            }
            v357 = v348 * v349;
            *(float32x2_t *)(*(_QWORD *)(v347 + 72) + v357) = vmla_n_f32(v345, vsub_f32(v346, v345), v344);
            if (v350 != v357)
            {
              v359 = *(_QWORD *)(v347 + 56);
              v358 = *(_QWORD *)(v347 + 64);
              if (v358 == v359)
                v359 = *(_QWORD *)(v347 + 80) - *(_QWORD *)(v347 + 72);
              if (v357 >= v359)
                v357 = v359;
              if (v358 > v350)
                v350 = *(_QWORD *)(v347 + 64);
              if (v350 == v357)
                v350 = v357 + *(_QWORD *)(v347 + 80) - *(_QWORD *)(v347 + 72);
              *(_QWORD *)(v347 + 56) = v357;
              *(_QWORD *)(v347 + 64) = v350;
            }
            ++v339;
            v340 += 3;
          }
          while (v339 < *v337);
        }
        ++v334;
      }
      while (v334 != v473);
    }
  }
  v360 = v489;
  v488 = geo::codec::VectorTile::coastlinesCount(*v479);
  if (v488)
  {
    v489[12] += v488;
    v361 = (ggl::CommonMesh::Pos4Mesh *)operator new();
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v361, "/DebugCoastLines");
    v362 = v489[21];
    v489[21] = v361;
    if (v362)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v362 + 8))(v362);
      v361 = (ggl::CommonMesh::Pos4Mesh *)v489[21];
    }
    v478 = geo::codec::VectorTile::coastlines(*v479);
    for (n = 0; n != v488; ++n)
    {
      v364 = v478 + 104 * n;
      v366 = *(_DWORD *)(v364 + 100);
      v365 = (unsigned int *)(v364 + 100);
      if (v366)
      {
        v367 = 0;
        do
        {
          *(_QWORD *)&v490 = 0;
          v368 = geo::codec::multiSectionFeaturePoints((_QWORD *)(v478 + 104 * n), v367, &v490);
          v369 = v490;
          v360[13] += v490;
          v369 *= 2;
          *(_QWORD *)&v490 = v369 - 2;
          v370 = **((_QWORD **)v361 + 8);
          v371 = *(_QWORD *)(v370 + 8);
          v372 = (*(_QWORD *)(v370 + 48) - *(_QWORD *)(v370 + 40)) / v371;
          v373 = v372 + v369;
          v374 = v371 * (v372 + v369);
          v375 = *(_QWORD *)(v370 + 72);
          v376 = *(_QWORD *)(v370 + 80) - v375;
          if (v374 != v376)
          {
            if (v374 <= v376)
            {
              if (v374 < v376)
                *(_QWORD *)(v370 + 80) = v375 + v374;
            }
            else
            {
              std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v370 + 72, v374 - v376);
            }
            v377 = *(std::__shared_weak_count **)(v370 + 32);
            *(_QWORD *)(v370 + 24) = 0;
            *(_QWORD *)(v370 + 32) = 0;
            if (v377)
            {
              v378 = (unint64_t *)&v377->__shared_owners_;
              do
                v379 = __ldaxr(v378);
              while (__stlxr(v379 - 1, v378));
              if (!v379)
              {
                ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                std::__shared_weak_count::__release_weak(v377);
              }
            }
            *(_QWORD *)(v370 + 120) = 0;
            *(_DWORD *)(v370 + 112) = 0;
            v380 = *(_QWORD *)(v370 + 80) - *(_QWORD *)(v370 + 72);
            *(_QWORD *)(v370 + 40) = 0;
            *(_QWORD *)(v370 + 48) = v380;
            *(_QWORD *)(v370 + 56) = 0;
            *(_QWORD *)(v370 + 64) = v380;
            v370 = **((_QWORD **)v361 + 8);
            v371 = *(_QWORD *)(v370 + 8);
            v374 = v371 * v373;
          }
          v381 = v371 * v372;
          if (v374 == v381)
            v382 = 0;
          else
            v382 = *(_QWORD *)(v370 + 72) + v381;
          v383 = v490;
          if ((unint64_t)v490 >= 2)
          {
            v384 = (_QWORD *)(v382 + 16);
            v385 = v368 + 1;
            v386 = 1;
            do
            {
              *(v384 - 2) = *(v385 - 1);
              *(v384 - 1) = 0x3F80000000000000;
              v387 = *v385++;
              *v384 = v387;
              v384[1] = 0x3F80000000000000;
              v384 += 4;
              v386 += 2;
            }
            while (v383 > v386);
          }
          if (v382 && v374 != v381)
          {
            v389 = *(_QWORD *)(v370 + 56);
            v388 = *(_QWORD *)(v370 + 64);
            if (v388 == v389)
              v389 = *(_QWORD *)(v370 + 80) - *(_QWORD *)(v370 + 72);
            if (v381 >= v389)
              v381 = v389;
            if (v388 > v374)
              v374 = *(_QWORD *)(v370 + 64);
            if (v374 == v381)
              v374 = v381 + *(_QWORD *)(v370 + 80) - *(_QWORD *)(v370 + 72);
            *(_QWORD *)(v370 + 56) = v381;
            *(_QWORD *)(v370 + 64) = v374;
          }
          ++v367;
          v360 = v489;
        }
        while (v367 < *v365);
      }
    }
  }
  v390 = geo::codec::VectorTile::transitLinkCount(*v479);
  if (v390)
  {
    v391 = (ggl::CommonMesh::Pos2Mesh *)operator new();
    ggl::CommonMesh::Pos2Mesh::Pos2Mesh(v391, "/RealTransitNodes");
    v392 = v360[27];
    v360[27] = v391;
    if (v392)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v392 + 8))(v392);
      v391 = (ggl::CommonMesh::Pos2Mesh *)v360[27];
    }
    for (ii = 0; ii != v390; ++ii)
    {
      v394 = geo::codec::VectorTile::transitLinks(*v479);
      v395 = v394 + 184 * ii;
      v396 = (int *)(v395 + 20);
      if (*(_DWORD *)(v395 + 20))
      {
        *(_QWORD *)&v490 = 0;
        v397 = geo::codec::transitLinkPoints(v394 + 184 * ii, 0, &v490);
        if ((_QWORD)v490)
        {
          v398 = (_QWORD *)v397;
          v399 = **((_QWORD **)v391 + 8);
          v400 = *(_QWORD *)(v399 + 8);
          v401 = (*(_QWORD *)(v399 + 48) - *(_QWORD *)(v399 + 40)) / v400;
          v402 = v400 * (v401 + 1);
          v403 = *(_QWORD *)(v399 + 72);
          v404 = *(_QWORD *)(v399 + 80) - v403;
          if (v402 != v404)
          {
            if (v402 <= v404)
            {
              if (v402 < v404)
                *(_QWORD *)(v399 + 80) = v403 + v402;
            }
            else
            {
              std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v399 + 72, v402 - v404);
            }
            v405 = *(std::__shared_weak_count **)(v399 + 32);
            *(_QWORD *)(v399 + 24) = 0;
            *(_QWORD *)(v399 + 32) = 0;
            if (v405)
            {
              v406 = (unint64_t *)&v405->__shared_owners_;
              do
                v407 = __ldaxr(v406);
              while (__stlxr(v407 - 1, v406));
              if (!v407)
              {
                ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                std::__shared_weak_count::__release_weak(v405);
              }
            }
            *(_QWORD *)(v399 + 120) = 0;
            *(_DWORD *)(v399 + 112) = 0;
            v408 = *(_QWORD *)(v399 + 80) - *(_QWORD *)(v399 + 72);
            *(_QWORD *)(v399 + 40) = 0;
            *(_QWORD *)(v399 + 48) = v408;
            *(_QWORD *)(v399 + 56) = 0;
            *(_QWORD *)(v399 + 64) = v408;
            v399 = **((_QWORD **)v391 + 8);
            v400 = *(_QWORD *)(v399 + 8);
            v402 = v400 * (v401 + 1);
          }
          v409 = v400 * v401;
          *(_QWORD *)(*(_QWORD *)(v399 + 72) + v409) = *v398;
          v360 = v489;
          if (v402 != v409)
          {
            v411 = *(_QWORD *)(v399 + 56);
            v410 = *(_QWORD *)(v399 + 64);
            if (v410 == v411)
              v411 = *(_QWORD *)(v399 + 80) - *(_QWORD *)(v399 + 72);
            if (v409 >= v411)
              v409 = v411;
            if (v410 > v402)
              v402 = *(_QWORD *)(v399 + 64);
            if (v402 == v409)
              v402 = v409 + *(_QWORD *)(v399 + 80) - *(_QWORD *)(v399 + 72);
            *(_QWORD *)(v399 + 56) = v409;
            *(_QWORD *)(v399 + 64) = v402;
          }
        }
        v412 = *v396;
        if (*v396)
        {
          *(_QWORD *)&v490 = 0;
          v413 = geo::codec::transitLinkPoints(v395, (v412 - 1), &v490);
          if ((_QWORD)v490)
          {
            v414 = v413;
            v415 = **((_QWORD **)v391 + 8);
            v416 = *(_QWORD *)(v415 + 8);
            v417 = (*(_QWORD *)(v415 + 48) - *(_QWORD *)(v415 + 40)) / v416;
            v418 = v416 * (v417 + 1);
            v419 = *(_QWORD *)(v415 + 72);
            v420 = *(_QWORD *)(v415 + 80) - v419;
            if (v418 != v420)
            {
              if (v418 <= v420)
              {
                if (v418 < v420)
                  *(_QWORD *)(v415 + 80) = v419 + v418;
              }
              else
              {
                std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v415 + 72, v418 - v420);
              }
              v421 = *(std::__shared_weak_count **)(v415 + 32);
              *(_QWORD *)(v415 + 24) = 0;
              *(_QWORD *)(v415 + 32) = 0;
              if (v421)
              {
                v422 = (unint64_t *)&v421->__shared_owners_;
                do
                  v423 = __ldaxr(v422);
                while (__stlxr(v423 - 1, v422));
                if (!v423)
                {
                  ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                  std::__shared_weak_count::__release_weak(v421);
                }
              }
              *(_QWORD *)(v415 + 120) = 0;
              *(_DWORD *)(v415 + 112) = 0;
              v424 = *(_QWORD *)(v415 + 80) - *(_QWORD *)(v415 + 72);
              *(_QWORD *)(v415 + 40) = 0;
              *(_QWORD *)(v415 + 48) = v424;
              *(_QWORD *)(v415 + 56) = 0;
              *(_QWORD *)(v415 + 64) = v424;
              v415 = **((_QWORD **)v391 + 8);
              v416 = *(_QWORD *)(v415 + 8);
              v418 = v416 * (v417 + 1);
            }
            v425 = v416 * v417;
            v360 = v489;
            *(_QWORD *)(*(_QWORD *)(v415 + 72) + v425) = *(_QWORD *)(v414 + 8 * v490 - 8);
            if (v418 != v425)
            {
              v427 = *(_QWORD *)(v415 + 56);
              v426 = *(_QWORD *)(v415 + 64);
              if (v426 == v427)
                v427 = *(_QWORD *)(v415 + 80) - *(_QWORD *)(v415 + 72);
              if (v425 >= v427)
                v425 = v427;
              if (v426 > v418)
                v418 = *(_QWORD *)(v415 + 64);
              if (v418 == v425)
                v418 = v425 + *(_QWORD *)(v415 + 80) - *(_QWORD *)(v415 + 72);
              *(_QWORD *)(v415 + 56) = v425;
              *(_QWORD *)(v415 + 64) = v418;
            }
          }
        }
      }
    }
  }
  v428 = geo::codec::VectorTile::daVinciMetaData(*v479);
  if (v428)
  {
    v429 = (std::__shared_weak_count *)operator new(0x60uLL);
    v429->__shared_owners_ = 0;
    v430 = (unint64_t *)&v429->__shared_owners_;
    v429->__shared_weak_owners_ = 0;
    v429->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
    v431 = ggl::TextureData2D::TextureData2D((uint64_t)&v429[1], *(unsigned __int16 *)(v428 + 8), *(unsigned __int16 *)(v428 + 8), 1u, 12, 0);
    *(_QWORD *)&v490 = v429 + 1;
    *((_QWORD *)&v490 + 1) = v429;
    v432 = ((uint64_t (*)(_QWORD *, _QWORD))v429[1].__on_zero_shared)(v431, 0);
    LODWORD(v433) = *(unsigned __int16 *)(v428 + 8);
    if (*(_WORD *)(v428 + 8))
    {
      v434 = 0;
      v435 = 0;
      v436 = -1;
      do
      {
        if ((_DWORD)v433)
        {
          v437 = 0;
          v438 = v432 + 3 + (4 * v433 * (v433 + v436));
          do
          {
            v439 = *(unsigned __int8 *)(*(_QWORD *)(v428 + 24) + v434 * v433 + v437);
            v440 = ((v439 >> 1) & 1) - 1;
            if ((v439 & 3) != 0)
              v441 = -1;
            else
              v441 = 64;
            *(_BYTE *)(v438 - 3) = v440;
            *(_BYTE *)(v438 - 2) = v441;
            *(_WORD *)(v438 - 1) = -256;
            ++v437;
            v433 = *(unsigned __int16 *)(v428 + 8);
            v438 += 4;
          }
          while (v437 < v433);
        }
        ++v435;
        --v436;
        ++v434;
      }
      while (v435 < v433);
    }
    v442 = operator new(0x58uLL);
    v442[1] = 0;
    v443 = v442 + 1;
    v442[2] = 0;
    *v442 = &off_1E42DED18;
    v442[3] = &off_1E42B63B0;
    v442[5] = 0;
    v442[6] = 0;
    v442[4] = 0;
    *((_DWORD *)v442 + 14) = 0;
    *((_DWORD *)v442 + 17) = 1;
    *(_QWORD *)((char *)v442 + 60) = 0x100000001;
    v442[9] = 0;
    v442[10] = 0;
    v495 = (geo::codec::VectorTile *)(v442 + 3);
    v496 = (std::__shared_weak_count *)v442;
    v444 = operator new();
    v445 = v444;
    do
      v446 = __ldxr(v430);
    while (__stxr(v446 + 1, v430));
    *(_QWORD *)(v444 + 16) = 0;
    *(_QWORD *)(v444 + 24) = 0;
    *(_DWORD *)(v444 + 32) = 0;
    *(_QWORD *)(v444 + 56) = 0x100000001;
    shared_owners = v429[1].__shared_owners_;
    shared_owners_high = HIDWORD(v429[1].__shared_owners_);
    *(_DWORD *)(v444 + 64) = 0;
    *(_DWORD *)(v444 + 68) = shared_owners_high;
    *(_QWORD *)v444 = &off_1E42BE438;
    *(_QWORD *)(v444 + 8) = 0;
    *(_QWORD *)(v444 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v444 + 48) = "";
    *(_QWORD *)(v444 + 80) = 0;
    *(_QWORD *)(v444 + 72) = 0x100000001;
    *(_QWORD *)(v444 + 88) = 0;
    *(_QWORD *)(v444 + 96) = 0;
    *(_DWORD *)(v444 + 104) = shared_owners;
    *(_QWORD *)(v444 + 112) = v429 + 1;
    *(_QWORD *)(v444 + 120) = v429;
    do
      v449 = __ldxr(v430);
    while (__stxr(v449 + 1, v430));
    *(_WORD *)(v444 + 128) = 0;
    *(_BYTE *)(v444 + 130) = 1;
    *(_QWORD *)(v444 + 136) = v442 + 3;
    *(_QWORD *)(v444 + 144) = v442;
    do
      v450 = __ldxr(v443);
    while (__stxr(v450 + 1, v443));
    *(_QWORD *)(v444 + 80) = v429[1].__shared_weak_owners_;
    do
      v451 = __ldaxr(v430);
    while (__stlxr(v451 - 1, v430));
    if (!v451)
    {
      ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
      std::__shared_weak_count::__release_weak(v429);
    }
    v452 = v489[28];
    v489[28] = v445;
    if (v452)
      (*(void (**)(uint64_t))(*(_QWORD *)v452 + 8))(v452);
    v453 = v496;
    if (v496)
    {
      v454 = (unint64_t *)&v496->__shared_owners_;
      do
        v455 = __ldaxr(v454);
      while (__stlxr(v455 - 1, v454));
      if (!v455)
      {
        ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
        std::__shared_weak_count::__release_weak(v453);
      }
    }
    v456 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
    if (*((_QWORD *)&v490 + 1))
    {
      v457 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
      do
        v458 = __ldaxr(v457);
      while (__stlxr(v458 - 1, v457));
      if (!v458)
      {
        ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
        std::__shared_weak_count::__release_weak(v456);
      }
    }
    return v489;
  }
  return v360;
}

void sub_19F854334(_Unwind_Exception *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, ...)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v15 - 136);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v17 = a15[28];
  a15[28] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = a15[27];
  a15[27] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = a15[26];
  a15[26] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = a15[25];
  a15[25] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = a15[24];
  a15[24] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = a15[23];
  a15[23] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = a15[22];
  a15[22] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = a15[21];
  a15[21] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = a15[20];
  a15[20] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = a15[19];
  a15[19] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = a15[18];
  a15[18] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *a2;
  *a2 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *a3;
  *a3 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

uint64_t ggl::PolygonStroke::MeshPipelineState::MeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::PolygonStrokeShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D00 = 1;
          }
          ggl::PolygonStroke::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57B8B8 = &ggl::PolygonStroke::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57B8C0 = 0;
          if ((v95 & 1) == 0
          {
            ggl::PolygonStroke::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57B8F0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57B8F8 = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
          }
          qword_1EE57B8C8 = (uint64_t)&ggl::PolygonStroke::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE57B8D0 = xmmword_19FFB3C60;
        }
      }
      ggl::PolygonStroke::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonStroke::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonStrokeShader::typedReflection(v90);
      qword_1ECE31100 = (uint64_t)&ggl::PolygonStrokeShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::PolygonStroke::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57B9A0 = 0;
        qword_1EE57B9A8 = (uint64_t)"";
        dword_1EE57B9B0 = 0;
        qword_1EE57B9B8 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57B9C0 = 3;
      }
      qword_1ECE31108 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31110 = 1;
      qword_1ECE31118 = 0;
      unk_1ECE31120 = 2;
      qword_1ECE31128 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31130 = 0;
      if ((v93 & 1) == 0
      {
        ggl::PolygonStroke::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57B910 = 0;
        qword_1EE57B918 = (uint64_t)"view";
        dword_1EE57B920 = 3;
        qword_1EE57B928 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57B930 = xmmword_19FFB35A0;
        qword_1EE57B940 = 1;
        unk_1EE57B948 = "transform";
        dword_1EE57B950 = 3;
        qword_1EE57B958 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57B960 = xmmword_19FFB3660;
        qword_1EE57B970 = 2;
        unk_1EE57B978 = "polygon";
        dword_1EE57B980 = 3;
        qword_1EE57B988 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineConstantPolygonBinding(void)::reflection;
        unk_1EE57B990 = 9;
      }
      qword_1ECE31138 = (uint64_t)&ggl::PolygonStroke::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE31140 = 3;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::PolygonStroke::MeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B67B0;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::PolygonStroke::MeshPipelineSetup::~MeshPipelineSetup(ggl::PolygonStroke::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonStroke::MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonStroke::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::PolygonStroke::MeshPipelineSetup::textureIsEnabled(ggl::PolygonStroke::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  _QWORD *v31;
  unint64_t v32;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 17);
  v6 = (v5
      + ((v4 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v4 - 0x61C8864680B583EBLL);
  v7 = *(int *)(a2 + 20);
  v8 = *(int *)(a2 + 24);
  v9 = (v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  v10 = (v8 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  *(_QWORD *)(a2 + 8) = v10;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = (v8 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
      if (v11 <= v10)
        v13 = v10 % v11;
    }
    else
    {
      v13 = (v11 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      v15 = *v14;
      if (v15)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v10)
            {
              if (*((unsigned __int8 *)v15 + 16) == (_DWORD)v4
                && *((unsigned __int8 *)v15 + 17) == (_DWORD)v5
                && *((_DWORD *)v15 + 5) == (_DWORD)v7
                && *((_DWORD *)v15 + 6) == (_DWORD)v8)
              {
                return 0;
              }
            }
            else if ((v17 & (v11 - 1)) != v13)
            {
              goto LABEL_28;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_28;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (*((unsigned __int8 *)v15 + 16) == (_DWORD)v4
              && *((unsigned __int8 *)v15 + 17) == (_DWORD)v5
              && *((_DWORD *)v15 + 5) == (_DWORD)v7
              && *((_DWORD *)v15 + 6) == (_DWORD)v8)
            {
              return 0;
            }
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v13)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_28:
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_40;
    if (prime < v11)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v11)
LABEL_40:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
  }
  v28 = *(int8x8_t *)(a1 + 8);
  v29 = *(_QWORD *)(a2 + 8);
  v30 = (uint8x8_t)vcnt_s8(v28);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    if (v29 >= *(_QWORD *)&v28)
      v29 %= *(_QWORD *)&v28;
  }
  else
  {
    v29 &= *(_QWORD *)&v28 - 1;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
  if (v31)
  {
    *(_QWORD *)a2 = *v31;
LABEL_63:
    *v31 = a2;
    goto LABEL_64;
  }
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = a1 + 16;
  if (*(_QWORD *)a2)
  {
    v32 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v32 >= *(_QWORD *)&v28)
        v32 %= *(_QWORD *)&v28;
    }
    else
    {
      v32 &= *(_QWORD *)&v28 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void md::mun::MuninMetadataContainer::~MuninMetadataContainer(md::mun::MuninMetadataContainer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  md::mun::MuninMetadataContainer *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  geo::read_write_lock *v11;
  const char *v12;
  geo::read_write_lock *v13;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  md::mun::MuninMetadataContainer *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  void *v24;

  v2 = (_QWORD *)*((_QWORD *)this + 77);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v4)
    operator delete(v4);
  if (*((_QWORD *)this + 74))
  {
    v5 = (md::mun::MuninMetadataContainer *)*((_QWORD *)this + 73);
    v6 = *((_QWORD *)this + 72);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 74) = 0;
    if (v5 != (md::mun::MuninMetadataContainer *)((char *)this + 576))
    {
      do
      {
        v19 = (md::mun::MuninMetadataContainer *)*((_QWORD *)v5 + 1);
        v20 = (_QWORD *)*((_QWORD *)v5 + 14);
        v21 = (_QWORD *)*((_QWORD *)v5 + 15);
        if (v20 != v21)
        {
          do
          {
            v22 = (void *)v20[31];
            if (v22 != (void *)v20[33])
              free(v22);
            v20 += 36;
          }
          while (v20 != v21);
          v20 = (_QWORD *)*((_QWORD *)v5 + 14);
        }
        if (v20 != *((_QWORD **)v5 + 16))
          free(v20);
        operator delete(v5);
        v5 = v19;
      }
      while (v19 != (md::mun::MuninMetadataContainer *)((char *)this + 576));
    }
  }
  std::mutex::~mutex((std::mutex *)this + 8);
  v8 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 40);
    if (v9)
    {
      do
      {
        v23 = (_QWORD *)*v9;
        v24 = (void *)v9[3];
        if (v24 != (void *)v9[5])
          free(v24);
        operator delete(v9);
        v9 = v23;
      }
      while (v23);
    }
    v10 = *(void **)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    if (v10)
      operator delete(v10);
    std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v8 + 8));
    MEMORY[0x1A1AF4E00](v8, 0x10A0C408DBFAB7ELL);
  }
  v11 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 296));
  if ((_DWORD)v11)
    geo::read_write_lock::logFailure(v11, (uint64_t)"destruction", v12);
  v13 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 96));
  if ((_DWORD)v13)
    geo::read_write_lock::logFailure(v13, (uint64_t)"destruction", v14);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 10));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 7));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v15)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v18)
      return;
  }
  else
  {
LABEL_20:
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v18)
      return;
  }
  std::__shared_weak_count::__release_weak(v18);
}

void md::mun::MuninMetadataContainer::addActiveMetadataPoint(std::mutex *this, const md::mun::CollectionPoint *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t sig;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  _QWORD *i;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  __int128 *v56;
  __int128 *v57;
  std::mutex *v58;
  void *v59;
  __int128 *v60;
  __int128 *v61;
  void *v62;
  char *v63;
  _QWORD *v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  std::mutex *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 *v91;
  __int128 *v92;
  __int128 *v93;
  uint64_t v94;
  _BYTE v95[1728];
  _QWORD v96[2];
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  void *v105;
  __int128 *v106;
  __int128 *v107;
  uint64_t v108;
  _BYTE v109[1728];
  _QWORD v110[2];
  uint64_t v111;

  v82 = this + 8;
  std::mutex::lock(this + 8);
  *(_QWORD *)&v83 = *(_QWORD *)a2;
  *((_QWORD *)&v83 + 1) = *(_QWORD *)a2;
  v84 = *(_OWORD *)((char *)a2 + 8);
  v85 = *((_QWORD *)a2 + 3);
  v86 = *((_QWORD *)a2 + 4);
  v87 = *((_DWORD *)a2 + 10);
  v88 = *(_QWORD *)((char *)a2 + 44);
  v89 = *(_OWORD *)((char *)a2 + 56);
  v90 = *(_OWORD *)((char *)a2 + 72);
  v91 = (__int128 *)v95;
  v92 = (__int128 *)v95;
  v93 = (__int128 *)v95;
  v94 = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)&v91, *((__int128 **)a2 + 11), *((__int128 **)a2 + 12));
  *(_QWORD *)((char *)v96 + 5) = *(_QWORD *)((char *)a2 + 1853);
  v96[0] = *((_QWORD *)a2 + 231);
  v97 = v83;
  v98 = v84;
  v99 = v85;
  v100 = v86;
  v101 = v87;
  v102 = v88;
  v103 = v89;
  v104 = v90;
  v105 = v109;
  v106 = (__int128 *)v109;
  v107 = (__int128 *)v109;
  v108 = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)&v105, v91, v92);
  v4 = (char *)&this[9];
  v5 = (unint64_t)&v98;
  *(_QWORD *)((char *)v110 + 5) = *(_QWORD *)((char *)v96 + 5);
  v110[0] = v96[0];
  v111 = 0;
  v6 = *(_QWORD *)&this[9].__m_.__opaque[24];
  if (!v6)
    goto LABEL_21;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v97;
    if ((unint64_t)v97 >= v6)
      v8 = (unint64_t)v97 % v6;
  }
  else
  {
    v8 = (v6 - 1) & v97;
  }
  v9 = *(_QWORD **)(*(_QWORD *)&this[9].__m_.__opaque[16] + 8 * v8);
  if (!v9 || (v10 = (_QWORD *)*v9) == 0)
  {
LABEL_21:
    v14 = operator new(0x768uLL);
    *v14 = 0;
    v14[1] = 0;
    v15 = v98;
    *((_OWORD *)v14 + 1) = v97;
    *((_OWORD *)v14 + 2) = v15;
    v16 = v100;
    v14[6] = v99;
    v14[7] = v16;
    *((_DWORD *)v14 + 16) = v101;
    *(_QWORD *)((char *)v14 + 68) = v102;
    v17 = v104;
    *((_OWORD *)v14 + 5) = v103;
    *((_OWORD *)v14 + 6) = v17;
    v14[14] = v14 + 18;
    v14[15] = v14 + 18;
    v14[16] = v14 + 18;
    v14[17] = 6;
    geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)(v14 + 14), (__int128 *)v105, v106);
    v14[234] = v110[0];
    *(_QWORD *)((char *)v14 + 1877) = *(_QWORD *)((char *)v110 + 5);
    v18 = v111;
    v14[236] = v111;
    sig = this[9].__m_.__sig;
    *(_QWORD *)(sig + 8) = v14;
    this[9].__m_.__sig = (uint64_t)v14;
    *v14 = sig;
    v14[1] = v4;
    ++*(_QWORD *)&this[9].__m_.__opaque[8];
    *(_QWORD *)this[10].__m_.__opaque += v18;
    if ((char *)this[10].__m_.__sig == v4)
      this[10].__m_.__sig = (uint64_t)v14;
    v20 = v97;
    v21 = *(_QWORD *)&this[9].__m_.__opaque[24];
    if (v21)
    {
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        v5 = v97;
        if ((unint64_t)v97 >= v21)
          v5 = (unint64_t)v97 % v21;
      }
      else
      {
        v5 = (v21 - 1) & v97;
      }
      v23 = *(_QWORD **)(*(_QWORD *)&this[9].__m_.__opaque[16] + 8 * v5);
      if (v23)
      {
        v24 = (_QWORD *)*v23;
        if (v24)
        {
          if (v22.u32[0] < 2uLL)
          {
            while (1)
            {
              v26 = v24[1];
              if (v26 == (_QWORD)v97)
              {
                if (v24[2] == (_QWORD)v97)
                  goto LABEL_104;
              }
              else if ((v26 & (v21 - 1)) != v5)
              {
                goto LABEL_44;
              }
              v24 = (_QWORD *)*v24;
              if (!v24)
                goto LABEL_44;
            }
          }
          do
          {
            v25 = v24[1];
            if (v25 == (_QWORD)v97)
            {
              if (v24[2] == (_QWORD)v97)
                goto LABEL_104;
            }
            else
            {
              if (v25 >= v21)
                v25 %= v21;
              if (v25 != v5)
                break;
            }
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
      }
    }
LABEL_44:
    v27 = operator new(0x20uLL);
    *v27 = 0;
    v27[1] = v20;
    v27[2] = v20;
    v27[3] = v14;
    v28 = (float)(unint64_t)(*(_QWORD *)&this[9].__m_.__opaque[40] + 1);
    v29 = *(float *)&this[9].__m_.__opaque[48];
    if (v21 && (float)(v29 * (float)v21) >= v28)
    {
LABEL_94:
      v53 = *(_QWORD *)&this[9].__m_.__opaque[16];
      v54 = *(_QWORD **)(v53 + 8 * v5);
      if (v54)
      {
        *v27 = *v54;
      }
      else
      {
        *v27 = *(_QWORD *)&this[9].__m_.__opaque[32];
        *(_QWORD *)&this[9].__m_.__opaque[32] = v27;
        *(_QWORD *)(v53 + 8 * v5) = (char *)this + 616;
        if (!*v27)
        {
LABEL_103:
          ++*(_QWORD *)&this[9].__m_.__opaque[40];
          goto LABEL_104;
        }
        v55 = *(_QWORD *)(*v27 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v55 >= v21)
            v55 %= v21;
        }
        else
        {
          v55 &= v21 - 1;
        }
        v54 = (_QWORD *)(*(_QWORD *)&this[9].__m_.__opaque[16] + 8 * v55);
      }
      *v54 = v27;
      goto LABEL_103;
    }
    v30 = 1;
    if (v21 >= 3)
      v30 = (v21 & (v21 - 1)) != 0;
    v31 = v30 | (2 * v21);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v21 = *(_QWORD *)&this[9].__m_.__opaque[24];
    }
    if (prime <= v21)
    {
      if (prime >= v21)
        goto LABEL_81;
      v46 = vcvtps_u32_f32((float)*(unint64_t *)&this[9].__m_.__opaque[40] / *(float *)&this[9].__m_.__opaque[48]);
      if (v21 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (prime <= v46)
        prime = v46;
      if (prime >= v21)
      {
        v21 = *(_QWORD *)&this[9].__m_.__opaque[24];
LABEL_81:
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            v5 = v20 % v21;
          else
            v5 = v20;
        }
        else
        {
          v5 = (v21 - 1) & v20;
        }
        goto LABEL_94;
      }
      if (!prime)
      {
        v73 = *(void **)&this[9].__m_.__opaque[16];
        *(_QWORD *)&this[9].__m_.__opaque[16] = 0;
        if (v73)
          operator delete(v73);
        v21 = 0;
        *(_QWORD *)&this[9].__m_.__opaque[24] = 0;
        goto LABEL_81;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v34 = operator new(8 * prime);
    v35 = *(void **)&this[9].__m_.__opaque[16];
    *(_QWORD *)&this[9].__m_.__opaque[16] = v34;
    if (v35)
      operator delete(v35);
    v36 = 0;
    *(_QWORD *)&this[9].__m_.__opaque[24] = prime;
    do
      *(_QWORD *)(*(_QWORD *)&this[9].__m_.__opaque[16] + 8 * v36++) = 0;
    while (prime != v36);
    v37 = *(_QWORD **)&this[9].__m_.__opaque[32];
    if (!v37)
    {
LABEL_80:
      v21 = prime;
      goto LABEL_81;
    }
    v38 = &this[9].__m_.__opaque[32];
    v39 = v37[1];
    v40 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v41 = v39 & v40;
      *(_QWORD *)(*(_QWORD *)&this[9].__m_.__opaque[16] + 8 * v41) = v38;
      for (i = (_QWORD *)*v37; *v37; i = (_QWORD *)*v37)
      {
        v43 = i[1] & v40;
        if (v43 == v41)
        {
          v37 = i;
        }
        else
        {
          v44 = *(_QWORD *)&this[9].__m_.__opaque[16];
          if (*(_QWORD *)(v44 + 8 * v43))
          {
            *v37 = *i;
            v45 = 8 * v43;
            *i = **(_QWORD **)(*(_QWORD *)&this[9].__m_.__opaque[16] + v45);
            **(_QWORD **)(*(_QWORD *)&this[9].__m_.__opaque[16] + v45) = i;
          }
          else
          {
            *(_QWORD *)(v44 + 8 * v43) = v37;
            v37 = i;
            v41 = v43;
          }
        }
      }
      goto LABEL_80;
    }
    if (v39 >= prime)
      v39 %= prime;
    *(_QWORD *)(*(_QWORD *)&this[9].__m_.__opaque[16] + 8 * v39) = v38;
    v49 = (_QWORD *)*v37;
    if (!*v37)
      goto LABEL_80;
    while (1)
    {
      v51 = v49[1];
      if (v51 >= prime)
        v51 %= prime;
      if (v51 != v39)
      {
        v52 = *(_QWORD *)&this[9].__m_.__opaque[16];
        if (!*(_QWORD *)(v52 + 8 * v51))
        {
          *(_QWORD *)(v52 + 8 * v51) = v37;
          goto LABEL_85;
        }
        *v37 = *v49;
        v50 = 8 * v51;
        *v49 = **(_QWORD **)(*(_QWORD *)&this[9].__m_.__opaque[16] + v50);
        **(_QWORD **)(*(_QWORD *)&this[9].__m_.__opaque[16] + v50) = v49;
        v49 = v37;
      }
      v51 = v39;
LABEL_85:
      v37 = v49;
      v49 = (_QWORD *)*v49;
      v39 = v51;
      if (!v49)
        goto LABEL_80;
    }
  }
  if (v7.u32[0] < 2uLL)
  {
    v11 = v6 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == (_QWORD)v97)
      {
        if (v10[2] == (_QWORD)v97)
          goto LABEL_122;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_21;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == (_QWORD)v97)
      break;
    if (v12 >= v6)
      v12 %= v6;
    if (v12 != v8)
      goto LABEL_21;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_21;
  }
  if (v10[2] != (_QWORD)v97)
    goto LABEL_11;
LABEL_122:
  v63 = (char *)v10[3];
  v64 = operator new(0x768uLL);
  *v64 = 0;
  v64[1] = 0;
  v65 = v98;
  *((_OWORD *)v64 + 1) = v97;
  *((_OWORD *)v64 + 2) = v65;
  v66 = v100;
  v64[6] = v99;
  v64[7] = v66;
  *((_DWORD *)v64 + 16) = v101;
  *(_QWORD *)((char *)v64 + 68) = v102;
  v67 = v104;
  *((_OWORD *)v64 + 5) = v103;
  *((_OWORD *)v64 + 6) = v67;
  v64[14] = v64 + 18;
  v64[15] = v64 + 18;
  v64[16] = v64 + 18;
  v64[17] = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)(v64 + 14), (__int128 *)v105, v106);
  v64[234] = v110[0];
  *(_QWORD *)((char *)v64 + 1877) = *(_QWORD *)((char *)v110 + 5);
  v68 = v111;
  v64[236] = v111;
  v69 = this[9].__m_.__sig;
  *(_QWORD *)(v69 + 8) = v64;
  this[9].__m_.__sig = (uint64_t)v64;
  *v64 = v69;
  v64[1] = v4;
  v70 = *(_QWORD *)&this[9].__m_.__opaque[8];
  *(_QWORD *)&this[9].__m_.__opaque[8] = v70 + 1;
  v71 = (char *)this[10].__m_.__sig;
  if (v71 == v63)
  {
    v72 = *((_QWORD *)v63 + 1);
    goto LABEL_135;
  }
  v72 = (uint64_t)v64;
  if (v71 == v4)
LABEL_135:
    this[10].__m_.__sig = v72;
  v74 = *((_QWORD *)v63 + 236);
  v75 = *(_QWORD *)this[10].__m_.__opaque;
  v76 = v75 >= v74;
  v77 = v75 - v74;
  if (!v76)
    v77 = 0;
  *(_QWORD *)this[10].__m_.__opaque = v77 + v68;
  v78 = *(_QWORD *)v63;
  *(_QWORD *)(v78 + 8) = *((_QWORD *)v63 + 1);
  **((_QWORD **)v63 + 1) = v78;
  *(_QWORD *)&this[9].__m_.__opaque[8] = v70;
  v80 = (_QWORD *)*((_QWORD *)v63 + 14);
  v79 = (_QWORD *)*((_QWORD *)v63 + 15);
  if (v80 != v79)
  {
    do
    {
      v81 = (void *)v80[31];
      if (v81 != (void *)v80[33])
        free(v81);
      v80 += 36;
    }
    while (v80 != v79);
    v80 = (_QWORD *)*((_QWORD *)v63 + 14);
  }
  if (v80 != *((_QWORD **)v63 + 16))
    free(v80);
  operator delete(v63);
  v10[3] = v64;
LABEL_104:
  v56 = (__int128 *)v105;
  v57 = v106;
  if (v105 == v106)
  {
    v58 = v82;
  }
  else
  {
    v58 = v82;
    do
    {
      v59 = (void *)*((_QWORD *)v56 + 31);
      if (v59 != *((void **)v56 + 33))
        free(v59);
      v56 += 18;
    }
    while (v56 != v57);
    v56 = (__int128 *)v105;
  }
  if (v56 != v107)
    free(v56);
  v61 = v91;
  v60 = v92;
  if (v91 != v92)
  {
    do
    {
      v62 = (void *)*((_QWORD *)v61 + 31);
      if (v62 != *((void **)v61 + 33))
        free(v62);
      v61 += 18;
    }
    while (v61 != v60);
    v61 = v91;
  }
  if (v61 != v93)
    free(v61);
  std::mutex::unlock(v58);
}

void sub_19F855BD8(_Unwind_Exception *a1, uint64_t a2, std::mutex *a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  operator delete(v3);
  std::pair<unsigned long long,md::mun::CollectionPoint>::~pair(&STACK[0x760]);
  std::pair<unsigned long long,md::mun::CollectionPoint>::~pair(va);
  std::mutex::unlock(a3);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<unsigned long long,md::mun::CollectionPoint>::~pair(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)a1[12];
  v3 = (_QWORD *)a1[13];
  if (v2 != v3)
  {
    do
    {
      v4 = (void *)v2[31];
      if (v4 != (void *)v2[33])
        free(v4);
      v2 += 36;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[12];
  }
  if (v2 != (_QWORD *)a1[14])
    free(v2);
  return a1;
}

void md::mun::MuninMetadataContainer::nearestMetadataTiles(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  uint64_t v5;
  double v8;
  long double v9;
  long double v10;
  long double v11;
  double v12;
  long double v13;
  double v14;
  long double v15;
  long double v16;
  double v17;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  int v22;
  signed int v23;
  int v24;
  unsigned int v25;
  signed int v26;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  signed int v32;
  _BYTE *v33;
  unsigned int v34;
  signed int v35;

  v5 = atomic_load((unsigned __int8 *)(a2 + 24));
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if ((_DWORD)v5)
  {
    v8 = *a3;
    v9 = cos(v8 + v8) * -559.82 + 111132.92;
    v10 = v9 + cos(v8 * 4.0) * 1.175;
    v11 = v10 + cos(v8 * 6.0) * -0.0023;
    v12 = v8 * 0.5;
    v13 = tan(v8 * 0.5 + 0.78103484);
    v14 = log(v13);
    v15 = tan(v12 + 0.789761487);
    v16 = fabs((log(v15) - v14) * 0.159154943) * a4 / v11;
    v17 = a3[1];
    v18 = tan(v12 + 0.785398163);
    v19 = log(v18);
    v20 = v17 * 0.159154943 + 0.5;
    v21 = v19 * 0.159154943 + 0.5;
    v22 = 1 << v5;
    v23 = vcvtmd_s64_f64((v20 - v16) * (double)(1 << v5));
    v24 = v22 + ~vcvtmd_s64_f64((v16 + v21) * (double)v22);
    v25 = vcvtmd_s64_f64((v21 - v16) * (double)(1 << v5));
    v26 = vcvtmd_s64_f64((v16 + v20) * (double)(1 << v5));
    v35 = v23;
    if (v24 <= (int)((1 << v5) + ~v25) && v23 <= v26)
    {
      v28 = v26 + 1;
      v29 = v24;
      v34 = v22 - v25;
      do
      {
        v30 = ((((v5 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
             + (((v5 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)
             - 0x61C8864680B583EBLL
             + v29) ^ (v5 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
        v31 = v35 - 0x61C8864680B583EBLL + (v30 >> 2) + (v30 << 6);
        v32 = v35;
        do
        {
          v33 = operator new(0x28uLL);
          v33[16] = -1;
          v33[17] = v5;
          *((_DWORD *)v33 + 5) = v29;
          *((_DWORD *)v33 + 6) = v32;
          *(_QWORD *)v33 = 0;
          *((_QWORD *)v33 + 1) = v31 ^ v30;
          if ((std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_unique(a1, (uint64_t)v33) & 1) == 0)operator delete(v33);
          ++v32;
          ++v31;
        }
        while (v28 != v32);
        ++v29;
      }
      while (v34 != (_DWORD)v29);
    }
  }
}

void sub_19F855F14(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v3 = v2;
  operator delete(v3);
  v5 = *(_QWORD **)(v1 + 16);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v7)
    operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t std::__function::__func<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0,std::allocator<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E42D40A8;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0,std::allocator<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E42D40A8;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0,std::allocator<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x38uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_1E42D40A8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[4] = 0;
  v2[5] = 0;
  v2[3] = v2 + 4;
  std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>(v2 + 3, *(_QWORD **)(a1 + 24), (_QWORD *)(a1 + 32));
  v3[6] = *(_QWORD *)(a1 + 48);
  return v3;
}

uint64_t *std::__function::__func<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0,std::allocator<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *result;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *a2 = &off_1E42D40A8;
  a2[1] = v4;
  a2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a2[4] = 0;
  a2[3] = a2 + 4;
  v7 = a2 + 3;
  a2[5] = 0;
  result = std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>(a2 + 3, *(_QWORD **)(a1 + 24), (_QWORD *)(a1 + 32));
  v7[3] = *(_QWORD *)(a1 + 48);
  return result;
}

void std::__function::__func<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0,std::allocator<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::__function::__func<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0,std::allocator<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete((void *)a1);
}

void std::__function::__func<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0,std::allocator<md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  pthread_rwlock_t *v7;
  geo::read_write_lock *v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  geo::read_write_lock *v13;
  const char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  void *v18;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new();
        md::mun::MuninNavigationGraph::MuninNavigationGraph((uint64_t *)v6, (_QWORD **)(a1 + 24));
        v7 = (pthread_rwlock_t *)(v5 + 296);
        v8 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v5 + 296));
        if ((_DWORD)v8)
          geo::read_write_lock::logFailure(v8, (uint64_t)"write lock", v9);
        if (*(_QWORD *)(a1 + 48) < *(_QWORD *)(v5 + 504)
          || (v10 = *(_QWORD *)(v5 + 496), *(_QWORD *)(v5 + 496) = v6, (v6 = v10) != 0))
        {
          v11 = *(_QWORD **)(v6 + 40);
          if (v11)
          {
            do
            {
              v17 = (_QWORD *)*v11;
              v18 = (void *)v11[3];
              if (v18 != (void *)v11[5])
                free(v18);
              operator delete(v11);
              v11 = v17;
            }
            while (v17);
          }
          v12 = *(void **)(v6 + 24);
          *(_QWORD *)(v6 + 24) = 0;
          if (v12)
            operator delete(v12);
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v6 + 8));
          MEMORY[0x1A1AF4E00](v6, 0x10A0C408DBFAB7ELL);
        }
        v13 = (geo::read_write_lock *)pthread_rwlock_unlock(v7);
        if ((_DWORD)v13)
          geo::read_write_lock::logFailure(v13, (uint64_t)"unlock", v14);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19F8562E4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geo::optional<md::mun::CollectionPoint>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)a2)
  {
    if (*(_BYTE *)a1)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      if (a1 != a2)
      {
        v4 = (_QWORD **)(a1 + 96);
        v5 = a1 + 128;
        v6 = *(_QWORD **)(a1 + 96);
        v7 = *(_QWORD **)(a1 + 104);
        if (v6 != v7)
        {
          do
          {
            v8 = (void *)v6[31];
            if (v8 != (void *)v6[33])
              free(v8);
            v6 += 36;
          }
          while (v6 != v7);
          v6 = *v4;
        }
        if (v6 != *(_QWORD **)(a1 + 112))
          free(v6);
        *(_QWORD *)(a1 + 96) = v5;
        *(_QWORD *)(a1 + 104) = v5;
        *(_QWORD *)(a1 + 112) = v5;
        *(_QWORD *)(a1 + 120) = 6;
        geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>(a1 + 96, *(__int128 **)(a2 + 96), *(__int128 **)(a2 + 104));
      }
      v16 = *(_QWORD *)(a2 + 1856);
      *(_QWORD *)(a1 + 1861) = *(_QWORD *)(a2 + 1861);
      *(_QWORD *)(a1 + 1856) = v16;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v12 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v12;
      v13 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v13;
      *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
      v14 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v14;
      *(_QWORD *)(a1 + 96) = a1 + 128;
      *(_QWORD *)(a1 + 104) = a1 + 128;
      *(_QWORD *)(a1 + 112) = a1 + 128;
      *(_QWORD *)(a1 + 120) = 6;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>(a1 + 96, *(__int128 **)(a2 + 96), *(__int128 **)(a2 + 104));
      v15 = *(_QWORD *)(a2 + 1856);
      *(_QWORD *)(a1 + 1861) = *(_QWORD *)(a2 + 1861);
      *(_QWORD *)(a1 + 1856) = v15;
      *(_BYTE *)a1 = 1;
    }
  }
  else if (*(_BYTE *)a1)
  {
    v9 = *(_QWORD **)(a1 + 96);
    v10 = *(_QWORD **)(a1 + 104);
    if (v9 != v10)
    {
      do
      {
        v11 = (void *)v9[31];
        if (v11 != (void *)v9[33])
          free(v11);
        v9 += 36;
      }
      while (v9 != v10);
      v9 = *(_QWORD **)(a1 + 96);
    }
    if (v9 != *(_QWORD **)(a1 + 112))
      free(v9);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  __int128 *v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;

  if (*(_BYTE *)a2)
  {
    if (*(_BYTE *)a1)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      if (a1 != a2)
        geo::small_vector_base<md::mun::PhotoInfo>::move(a1 + 96, (uint64_t *)(a2 + 96), a1 + 128);
      v4 = *(_QWORD *)(a2 + 1856);
      *(_QWORD *)(a1 + 1861) = *(_QWORD *)(a2 + 1861);
      *(_QWORD *)(a1 + 1856) = v4;
      return a1;
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    v11 = a1 + 128;
    *(_QWORD *)(a1 + 96) = a1 + 128;
    v12 = *(__int128 **)(a2 + 96);
    *(_QWORD *)(a1 + 112) = a1 + 128;
    v13 = *(__int128 **)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 104) = a1 + 128;
    if (v12 != v13)
    {
      v14 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v12;
      *(_QWORD *)(a1 + 104) = v14;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
LABEL_14:
      v15 = *(_QWORD *)(a2 + 1856);
      *(_QWORD *)(a1 + 1861) = *(_QWORD *)(a2 + 1861);
      *(_QWORD *)(a1 + 1856) = v15;
      *(_BYTE *)a1 = 1;
      return a1;
    }
    *(_QWORD *)(a1 + 104) = v11 + *(_QWORD *)(a2 + 104) - (_QWORD)v12;
    v17 = *(__int128 **)(a2 + 104);
    if (v12 == v17)
      goto LABEL_14;
    v18 = 0;
    v19 = (_OWORD *)(a1 + 424);
    v20 = a1 + 408;
    while (1)
    {
      v22 = *v12;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v11 = v22;
      v23 = *((_QWORD *)v12 + 3);
      *(_DWORD *)(v11 + 32) = *((_DWORD *)v12 + 8);
      *(_QWORD *)(v11 + 24) = v23;
      *(_QWORD *)(v11 + 36) = *(_QWORD *)((char *)v12 + 36);
      v24 = *(__int128 *)((char *)v12 + 44);
      v25 = *(__int128 *)((char *)v12 + 60);
      v26 = *(__int128 *)((char *)v12 + 76);
      *(_OWORD *)(v11 + 92) = *(__int128 *)((char *)v12 + 92);
      *(_OWORD *)(v11 + 76) = v26;
      *(_OWORD *)(v11 + 60) = v25;
      *(_OWORD *)(v11 + 44) = v24;
      v27 = *(__int128 *)((char *)v12 + 108);
      v28 = *(__int128 *)((char *)v12 + 124);
      v29 = *(__int128 *)((char *)v12 + 140);
      *(_OWORD *)(v11 + 156) = *(__int128 *)((char *)v12 + 156);
      *(_OWORD *)(v11 + 140) = v29;
      *(_OWORD *)(v11 + 124) = v28;
      *(_OWORD *)(v11 + 108) = v27;
      v30 = *(__int128 *)((char *)v12 + 172);
      v31 = *(__int128 *)((char *)v12 + 188);
      v32 = *(__int128 *)((char *)v12 + 204);
      *(_OWORD *)(v11 + 220) = *(__int128 *)((char *)v12 + 220);
      *(_OWORD *)(v11 + 204) = v32;
      *(_OWORD *)(v11 + 188) = v31;
      *(_OWORD *)(v11 + 172) = v30;
      v33 = (_BYTE *)(v11 + 280);
      *(_QWORD *)(v11 + 248) = v11 + 280;
      v34 = (char *)*((_QWORD *)v12 + 31);
      *(_BYTE *)(v11 + 240) = *((_BYTE *)v12 + 240);
      *(_QWORD *)(v11 + 264) = v11 + 280;
      v35 = (char *)*((_QWORD *)v12 + 33);
      *(_QWORD *)(v11 + 272) = *((_QWORD *)v12 + 34);
      *(_DWORD *)(v11 + 236) = *((_DWORD *)v12 + 59);
      *(_QWORD *)(v11 + 256) = v11 + 280;
      if (v34 == v35)
      {
        *(_QWORD *)(v11 + 256) = &v33[*((_QWORD *)v12 + 32) - (_QWORD)v34];
        v36 = (char *)*((_QWORD *)v12 + 32);
        if (v34 != v36)
        {
          v37 = v36 - v34;
          if ((unint64_t)(v36 - v34) >= 8 && (unint64_t)(a1 + 408 + 288 * v18 - (_QWORD)v34) >= 0x20)
          {
            if (v37 < 0x20)
            {
              v38 = 0;
              goto LABEL_34;
            }
            v38 = v37 & 0xFFFFFFFFFFFFFFE0;
            v39 = (__int128 *)(v34 + 16);
            v40 = v19;
            v41 = v37 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v42 = *v39;
              *(v40 - 1) = *(v39 - 1);
              *v40 = v42;
              v39 += 2;
              v40 += 2;
              v41 -= 32;
            }
            while (v41);
            if (v37 == v38)
              goto LABEL_23;
            if ((v37 & 0x18) != 0)
            {
LABEL_34:
              v43 = v37 & 0xFFFFFFFFFFFFFFF8;
              v33 += v37 & 0xFFFFFFFFFFFFFFF8;
              v44 = v38 - (v37 & 0xFFFFFFFFFFFFFFF8);
              v45 = (uint64_t *)&v34[v38];
              v46 = (_QWORD *)(v20 + v38);
              do
              {
                v47 = *v45++;
                *v46++ = v47;
                v44 += 8;
              }
              while (v44);
              if (v37 == v43)
                goto LABEL_23;
              v34 += v43;
            }
            else
            {
              v34 += v38;
              v33 += v38;
            }
          }
          do
          {
            v48 = *v34++;
            *v33++ = v48;
          }
          while (v34 != v36);
        }
      }
      else
      {
        v21 = *((_QWORD *)v12 + 32);
        *(_QWORD *)(v11 + 248) = v34;
        *(_QWORD *)(v11 + 256) = v21;
        *(__int128 *)((char *)v12 + 248) = 0uLL;
        *(__int128 *)((char *)v12 + 264) = 0uLL;
      }
LABEL_23:
      v11 += 288;
      v12 += 18;
      ++v18;
      v19 += 18;
      v20 += 288;
      if (v12 == v17)
        goto LABEL_14;
    }
  }
  if (*(_BYTE *)a1)
  {
    v5 = *(_QWORD **)(a1 + 96);
    v6 = *(_QWORD **)(a1 + 104);
    if (v5 != v6)
    {
      do
      {
        v7 = (void *)v5[31];
        if (v7 != (void *)v5[33])
          free(v7);
        v5 += 36;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)(a1 + 96);
    }
    if (v5 != *(_QWORD **)(a1 + 112))
      free(v5);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void md::mun::MuninMetadataContainer::activePoint(md::mun::MuninMetadataContainer *this, uint64_t a2, unint64_t a3)
{
  std::mutex *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE v48[1728];
  _QWORD v49[3];

  v6 = (std::mutex *)(a2 + 512);
  std::mutex::lock((std::mutex *)(a2 + 512));
  v7 = *(int8x8_t *)(a2 + 608);
  if (!*(_QWORD *)&v7)
    goto LABEL_38;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a3;
    if (*(_QWORD *)&v7 <= a3)
      v9 = a3 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & a3;
  }
  v10 = *(_QWORD **)(*(_QWORD *)(a2 + 600) + 8 * v9);
  if (!v10)
    goto LABEL_38;
  v11 = (_QWORD *)*v10;
  if (!*v10)
    goto LABEL_38;
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == a3)
      {
        if (v11[2] == a3)
          goto LABEL_22;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_38;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_38;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == a3)
      break;
    if (v13 >= *(_QWORD *)&v7)
      v13 %= *(_QWORD *)&v7;
    if (v13 != v9)
      goto LABEL_38;
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_38;
  }
  if (v11[2] != a3)
    goto LABEL_11;
LABEL_22:
  v15 = (char *)v11[3];
  v16 = (char *)operator new(0x768uLL);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_OWORD *)v16 + 1) = *((_OWORD *)v15 + 1);
  v17 = *((_OWORD *)v15 + 2);
  *((_QWORD *)v16 + 6) = *((_QWORD *)v15 + 6);
  *((_OWORD *)v16 + 2) = v17;
  v18 = *((_DWORD *)v15 + 16);
  *((_QWORD *)v16 + 7) = *((_QWORD *)v15 + 7);
  *((_DWORD *)v16 + 16) = v18;
  *(_QWORD *)(v16 + 68) = *(_QWORD *)(v15 + 68);
  v19 = *((_OWORD *)v15 + 5);
  v20 = *((_OWORD *)v15 + 6);
  *((_QWORD *)v16 + 14) = v16 + 144;
  *((_OWORD *)v16 + 5) = v19;
  *((_OWORD *)v16 + 6) = v20;
  *((_QWORD *)v16 + 15) = v16 + 144;
  *((_QWORD *)v16 + 16) = v16 + 144;
  *((_QWORD *)v16 + 17) = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)(v16 + 112), *((__int128 **)v15 + 14), *((__int128 **)v15 + 15));
  v21 = (char *)(a2 + 576);
  v22 = *((_QWORD *)v15 + 234);
  *(_QWORD *)(v16 + 1877) = *(_QWORD *)(v15 + 1877);
  *((_QWORD *)v16 + 234) = v22;
  *((_QWORD *)v16 + 236) = *((_QWORD *)v15 + 236);
  v23 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(v23 + 8) = v16;
  *(_QWORD *)(a2 + 576) = v16;
  *(_QWORD *)v16 = v23;
  *((_QWORD *)v16 + 1) = a2 + 576;
  v24 = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a2 + 592) = v24 + 1;
  v25 = *(char **)(a2 + 640);
  if (v25 == v15)
  {
    v26 = (char *)*((_QWORD *)v15 + 1);
    goto LABEL_26;
  }
  v26 = v16;
  if (v25 == v21)
LABEL_26:
    *(_QWORD *)(a2 + 640) = v26;
  v27 = *(_QWORD *)v15;
  *(_QWORD *)(v27 + 8) = *((_QWORD *)v15 + 1);
  **((_QWORD **)v15 + 1) = v27;
  *(_QWORD *)(a2 + 592) = v24;
  v28 = (_QWORD *)*((_QWORD *)v15 + 14);
  v29 = (_QWORD *)*((_QWORD *)v15 + 15);
  if (v28 != v29)
  {
    do
    {
      v30 = (void *)v28[31];
      if (v30 != (void *)v28[33])
        free(v30);
      v28 += 36;
    }
    while (v28 != v29);
    v28 = (_QWORD *)*((_QWORD *)v15 + 14);
  }
  if (v28 != *((_QWORD **)v15 + 16))
    free(v28);
  operator delete(v15);
  v11[3] = v16;
  if (v21 == v16)
  {
LABEL_38:
    *(_BYTE *)this = 0;
    goto LABEL_39;
  }
  v37 = *((_OWORD *)v16 + 2);
  v41 = *(_QWORD *)(v16 + 68);
  v31 = *((_OWORD *)v16 + 6);
  v42 = *((_OWORD *)v16 + 5);
  v36 = *((_QWORD *)v16 + 3);
  v32 = *((_QWORD *)v16 + 7);
  v38 = *((_QWORD *)v16 + 6);
  v39 = v32;
  v40 = *((_DWORD *)v16 + 16);
  v43 = v31;
  v44 = v48;
  v45 = v48;
  v46 = v48;
  v47 = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)&v44, *((__int128 **)v16 + 14), *((__int128 **)v16 + 15));
  *(_QWORD *)((char *)v49 + 5) = *(_QWORD *)(v16 + 1877);
  v49[0] = *((_QWORD *)v16 + 234);
  geo::optional<md::mun::CollectionPoint>::optional((uint64_t)this, (uint64_t)&v36);
  v33 = v44;
  v34 = v45;
  if (v44 != v45)
  {
    do
    {
      v35 = (void *)v33[31];
      if (v35 != (void *)v33[33])
        free(v35);
      v33 += 36;
    }
    while (v33 != v34);
    v33 = v44;
  }
  if (v33 != (_QWORD *)v46)
    free(v33);
LABEL_39:
  std::mutex::unlock(v6);
}

void sub_19F856894(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::mun::CollectionPoint::~CollectionPoint(md::mun::CollectionPoint *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 11);
  v3 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2 != v3)
  {
    do
    {
      v4 = (void *)v2[31];
      if (v4 != (void *)v2[33])
        free(v4);
      v2 += 36;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 11);
  }
  if (v2 != *((_QWORD **)this + 13))
    free(v2);
}

char *std::vector<md::mun::CollectionPoint>::__push_back_slow_path<md::mun::CollectionPoint const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  char *v21;
  char *v22;

  v2 = 0x63FB9AEB1FDCD759 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2328A701194538)
    abort();
  if (0xC7F735D63FB9AEB2 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xC7F735D63FB9AEB2 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x63FB9AEB1FDCD759 * ((a1[2] - *a1) >> 3)) >= 0x119453808CA29CLL)
    v6 = 0x2328A701194538;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2328A701194538)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(1864 * v6);
  }
  else
  {
    v7 = 0;
  }
  v21 = &v7[1864 * v2];
  v22 = &v7[1864 * v6];
  *(_QWORD *)v21 = *(_QWORD *)a2;
  *(_OWORD *)(v21 + 8) = *(_OWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v21 + 3) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v21 + 4) = v8;
  *((_DWORD *)v21 + 10) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(v21 + 44) = *(_QWORD *)(a2 + 44);
  v9 = *(_OWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 72);
  *(int64x2_t *)(v21 + 88) = vdupq_n_s64((unint64_t)(v21 + 120));
  *(_OWORD *)(v21 + 56) = v9;
  *(_OWORD *)(v21 + 72) = v10;
  *((_QWORD *)v21 + 13) = v21 + 120;
  *((_QWORD *)v21 + 14) = 6;
  geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)(v21 + 88), *(__int128 **)(a2 + 88), *(__int128 **)(a2 + 96));
  *((_QWORD *)v21 + 231) = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(v21 + 1853) = *(_QWORD *)(a2 + 1853);
  v11 = (uint64_t)v21;
  v12 = v21 + 1864;
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == (char *)*a1)
  {
    *a1 = (uint64_t)v21;
    a1[1] = (uint64_t)v12;
    a1[2] = (uint64_t)v22;
  }
  else
  {
    do
    {
      v13 -= 1864;
      v11 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(v11 - 1864, (uint64_t)v13);
    }
    while (v13 != v14);
    v13 = (char *)*a1;
    v15 = (char *)a1[1];
    *a1 = v11;
    a1[1] = (uint64_t)v12;
    a1[2] = (uint64_t)v22;
    if (v15 != v13)
    {
      do
      {
        v16 = v15 - 1864;
        v17 = (_QWORD *)*((_QWORD *)v15 - 222);
        v18 = (_QWORD *)*((_QWORD *)v15 - 221);
        if (v17 != v18)
        {
          do
          {
            v19 = (void *)v17[31];
            if (v19 != (void *)v17[33])
              free(v19);
            v17 += 36;
          }
          while (v17 != v18);
          v17 = (_QWORD *)*((_QWORD *)v15 - 222);
        }
        if (v17 != *((_QWORD **)v15 - 220))
          free(v17);
        v15 -= 1864;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v21 + 1864;
}

void sub_19F856B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::mun::CollectionPoint>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::mun::MuninMetadataContainer::navigationGraphAccessor(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  uint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  uint64_t v10;

  v4 = (pthread_rwlock_t *)(a1 + 296);
  v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 296));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  if (*(_QWORD *)(a1 + 496))
  {
    v10 = *(_QWORD *)(a1 + 496);
    v7 = *(_QWORD *)(a2 + 24);
    if (!v7)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v10);
  }
  v8 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
}

void sub_19F856C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
  geo::write_lock_guard::~write_lock_guard(&a9);
  _Unwind_Resume(a1);
}

uint64_t md::FrameGraphUtils::prepareGraphBuilderForRenderTarget(uint64_t result, uint64_t a2, _QWORD *a3, const void *a4, unint64_t a5, const void *a6, unint64_t a7, uint64_t a8, const void *a9, unint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  float *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Resource;
  _BYTE *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int **v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v59;
  _WORD v61[2];
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  _BYTE *v72;

  v11 = a2;
  v12 = result;
  if (a3[9])
  {
    v15 = 0;
    v16 = (float *)(a2 + 88);
    v59 = result + 76;
    v17 = a3 + 11;
    do
    {
      v18 = *v17;
      v20 = *(_DWORD *)(*v17 + 80);
      v19 = *(_DWORD *)(*v17 + 84);
      v22 = *(_DWORD *)(*v17 + 72);
      v21 = *(_DWORD *)(*v17 + 76);
      v23 = *(unsigned int *)(*v17 + 68);
      if ((_DWORD)v23)
        v24 = v23 | 0x100000000;
      else
        v24 = 0;
      v61[0] = 0;
      v62 = v20;
      v63 = 0;
      v64 = v19;
      v65 = 0;
      v66 = v24;
      v67 = 0;
      v68 = 0;
      v69 = v21;
      LODWORD(v70) = 1;
      HIDWORD(v70) = v22;
      v71 = 0;
      Resource = md::FrameGraphBuilder::createResource(v11, (uint64_t)v61, a4, a5, v15);
      v26 = 0;
      if (v15 <= 3)
      {
        *(_QWORD *)(v12 + 8 * v15) = Resource;
        if (!*(_BYTE *)(v12 + 72))
        {
          v27 = *(_OWORD *)(Resource + 88);
          *(_DWORD *)(v59 + 16) = *(_DWORD *)(Resource + 104);
          *(_OWORD *)v59 = v27;
          *(_BYTE *)(v12 + 72) = 1;
        }
        v26 = *(_BYTE **)(v12 + 8 * v15);
      }
      v72 = v26;
      v28 = operator new();
      *(_BYTE *)(v28 + 8) = *v26;
      *(_QWORD *)(v28 + 16) = v18;
      *(_QWORD *)v28 = &off_1E42A8F38;
      v29 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>(v16, (unint64_t)v26, &v72);
      result = v29[3];
      v29[3] = v28;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      ++v15;
      v17 += 3;
      v11 = a2;
    }
    while (v15 < a3[9]);
  }
  v30 = (unsigned int *)a3[35];
  if (v30)
  {
    v32 = v30[20];
    v31 = v30[21];
    v34 = v30[18];
    v33 = v30[19];
    v35 = v30[17];
    if ((_DWORD)v35)
      v36 = v35 | 0x100000000;
    else
      v36 = 0;
    v61[0] = 0;
    v62 = v32;
    v63 = 0;
    v64 = v31;
    v65 = 0;
    v66 = v36;
    v67 = 0;
    v68 = 0;
    v69 = v33;
    LODWORD(v70) = 1;
    HIDWORD(v70) = v34;
    v71 = 1;
    v37 = md::FrameGraphBuilder::createResource(v11, (uint64_t)v61, a6, a7, 0);
    v38 = (_BYTE *)v37;
    *(_QWORD *)(v12 + 64) = v37;
    if (!*(_BYTE *)(v12 + 72))
    {
      v39 = *(_OWORD *)(v37 + 88);
      *(_DWORD *)(v12 + 92) = *(_DWORD *)(v37 + 104);
      *(_OWORD *)(v12 + 76) = v39;
      *(_BYTE *)(v12 + 72) = 1;
    }
    v72 = (_BYTE *)v37;
    v40 = operator new();
    *(_BYTE *)(v40 + 8) = *v38;
    *(_QWORD *)(v40 + 16) = v30;
    *(_QWORD *)v40 = &off_1E42A8F38;
    v41 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(v11 + 88), (unint64_t)v38, &v72);
    result = v41[3];
    v41[3] = v40;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v42 = (unsigned int *)a3[23];
  if (v42)
  {
    v43 = 0;
    v44 = v12 + 32;
    v45 = (unsigned int **)(a3 + 26);
    do
    {
      v48 = v42[20];
      v47 = v42[21];
      v49 = v42[17];
      v50 = v42[19];
      if ((_DWORD)v49)
        v51 = v49 | 0x100000000;
      else
        v51 = 0;
      v61[0] = 0;
      v62 = v48;
      v63 = 0;
      v64 = v47;
      v65 = 0;
      v66 = v51;
      v67 = 0;
      v68 = 0;
      v69 = v50;
      v70 = 0x100000001;
      v71 = 2;
      v52 = md::FrameGraphBuilder::createResource(a2, (uint64_t)v61, a9, a10, v43);
      v53 = 0;
      if (v43 <= 3)
      {
        *(_QWORD *)(v44 + 8 * v43) = v52;
        if (!*(_BYTE *)(v12 + 72))
        {
          v54 = *(_OWORD *)(v52 + 88);
          *(_DWORD *)(v12 + 92) = *(_DWORD *)(v52 + 104);
          *(_OWORD *)(v12 + 76) = v54;
          *(_BYTE *)(v12 + 72) = 1;
        }
        v53 = *(_BYTE **)(v44 + 8 * v43);
      }
      v72 = v53;
      v55 = operator new();
      *(_BYTE *)(v55 + 8) = *v53;
      *(_QWORD *)(v55 + 16) = v42;
      *(_QWORD *)v55 = &off_1E42A8F38;
      v56 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a2 + 88), (unint64_t)v53, &v72);
      result = v56[3];
      v56[3] = v55;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      ++v43;
      v46 = *v45;
      v45 += 3;
      v42 = v46;
    }
    while (v46);
  }
  return result;
}

void md::LabelSpacingDedupingGroup::~LabelSpacingDedupingGroup(md::LabelSpacingDedupingGroup *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42A1FB8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = &off_1E4294980;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v3, *((_QWORD *)this + 7) - v3);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v4, *((_QWORD *)this + 3) - v4);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42A1FB8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = &off_1E4294980;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 6) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v3, *((_QWORD *)this + 7) - v3);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v4, *((_QWORD *)this + 3) - v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelSpacingDedupingGroup *this, md::LabelManager *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  float v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;

  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 24) = 0;
  v3 = *((_QWORD *)a2 + 54);
  if (*(float *)(v3 + 424) > 0.0)
  {
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (v4)
    {
      v6 = std::__shared_weak_count::lock(v4);
      if (v6)
      {
        v7 = v6;
        v8 = *((_QWORD *)this + 10);
        if (v8)
        {
          v9 = (*(float (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 312))(v8, *(unsigned __int8 *)(v3 + 28), v3);
          *((float *)this + 24) = (float)(*((float *)a2 + 44) * v9) * (float)(*((float *)a2 + 44) * v9);
        }
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  v13 = (uint64_t *)*((_QWORD *)this + 1);
  v12 = (uint64_t *)*((_QWORD *)this + 2);
  if (v13 != v12)
  {
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v13 + 16))(*v13) & 1) != 0)
    {
      ++v13;
LABEL_13:
      if (v13 == v12)
        goto LABEL_20;
    }
    v14 = v12 - 1;
    while (v14 != v13)
    {
      v12 = v14;
      v15 = *v14--;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15))
      {
        v16 = *v13;
        *v13++ = *v12;
        *v12 = v16;
        goto LABEL_13;
      }
    }
  }
  v12 = v13;
LABEL_20:
  v17 = *((_QWORD *)this + 1);
  v18 = 126 - 2 * __clz(((uint64_t)v12 - v17) >> 3);
  if (v12 == (uint64_t *)v17)
    v19 = 0;
  else
    v19 = v18;
  result = std::__introsort<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(*((_QWORD *)this + 1), v12, v19, 1);
  v22 = (unint64_t *)*((_QWORD *)this + 1);
  v21 = (unint64_t *)*((_QWORD *)this + 2);
  if (v22 != v21)
  {
    v23 = (char *)v21 - (char *)v22 - 8;
    if (v23 > 7)
    {
      v26 = 0;
      v27 = (v23 >> 3) + 1;
      v24 = v27 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v28 = &v22[v26];
        v30 = *v28;
        v29 = v28[1];
        *(_DWORD *)(v30 + 32) = v26;
        *(_DWORD *)(v29 + 32) = v26 + 1;
        *(_WORD *)(v30 + 36) = v26;
        *(_WORD *)(v29 + 36) = v26 + 1;
        v26 += 2;
      }
      while (v24 != v26);
      if (v27 == v24)
        goto LABEL_31;
      v25 = &v22[v27 & 0x3FFFFFFFFFFFFFFELL];
    }
    else
    {
      LODWORD(v24) = 0;
      v25 = (unint64_t *)*((_QWORD *)this + 1);
    }
    do
    {
      v31 = *v25++;
      *(_DWORD *)(v31 + 32) = v24;
      *(_WORD *)(v31 + 36) = v24;
      LODWORD(v24) = v24 + 1;
    }
    while (v25 != v21);
LABEL_31:
    if ((uint64_t)v12 - v17 >= 8)
    {
      if (v12 == (uint64_t *)v17)
      {
        v22 = (unint64_t *)v17;
      }
      else
      {
        v32 = (unint64_t *)(v17 + 8);
        v22 = (unint64_t *)v17;
        if ((uint64_t *)(v17 + 8) != v12)
        {
          v33 = (unint64_t *)(v17 + 8);
          do
          {
            v34 = *v33++;
            result = md::Label::collisionPriorityCmp(v34, 0, *v22, 0, 0);
            if ((_DWORD)result)
              v22 = v32;
            v32 = v33;
          }
          while (v33 != (unint64_t *)v12);
        }
      }
    }
    *((_QWORD *)this + 9) = *v22;
  }
  return result;
}

void sub_19F857334(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL md::LabelSpacingDedupingGroup::isResolved(md::LabelSpacingDedupingGroup *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float32x2_t v7;
  _BOOL8 result;
  BOOL v9;

  v2 = *((_QWORD *)this + 1);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 2) - v2) >> 3))
    return 0;
  v4 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6);
  if (v4 == v3)
    return 0;
  v5 = *((float *)this + 24);
  v6 = v4 + 8;
  do
  {
    v7 = vsub_f32(*(float32x2_t *)(*(_QWORD *)(v2 + 8 * a2) + 664), *(float32x2_t *)(*(_QWORD *)(v6 - 8) + 664));
    v7.f32[0] = vaddv_f32(vmul_f32(v7, v7));
    result = v7.f32[0] < v5;
    v9 = v7.f32[0] < v5 || v6 == v3;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t md::LabelDedupingGroup::addResolvedLabel(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result;
  v4 = *(_QWORD **)(result + 48);
  v5 = *(_QWORD *)(result + 56);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = a2;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = *(_QWORD *)(result + 40);
  v8 = ((uint64_t)v4 - v7) >> 3;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61)
    abort();
  v10 = v5 - v7;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    v11 = 8 * v9;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 64) + 16))(*(_QWORD *)(result + 64), 8 * v9, 8);
    v12 = (_QWORD *)(result + 8 * v8);
    v9 = result + v11;
    if (result)
      *v12 = a2;
  }
  else
  {
    v12 = (_QWORD *)(8 * v8);
  }
  v6 = v12 + 1;
  v14 = *(_QWORD *)(v3 + 40);
  v13 = *(_QWORD *)(v3 + 48);
  if (v13 != v14)
  {
    v15 = v13 - v14 - 8;
    if (v15 < 0x38)
    {
      v17 = *(_QWORD *)(v3 + 48);
    }
    else if ((unint64_t)(v13 - (_QWORD)v12) < 0x20)
    {
      v17 = *(_QWORD *)(v3 + 48);
    }
    else
    {
      v16 = (v15 >> 3) + 1;
      v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = v12 - 2;
      v19 = (__int128 *)(v13 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v22 = *(_QWORD *)(v17 - 8);
      v17 -= 8;
      *--v12 = v22;
    }
    while (v17 != v14);
LABEL_24:
    v13 = *(_QWORD *)(v3 + 40);
  }
  *(_QWORD *)(v3 + 40) = v12;
  *(_QWORD *)(v3 + 48) = v6;
  v23 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v9;
  if (v13)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 64) + 40))(*(_QWORD *)(v3 + 64), v13, v23 - v13);
LABEL_27:
  *(_QWORD *)(v3 + 48) = v6;
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *j;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *k;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  BOOL v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  float v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t *v73;
  int64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  float v114;
  uint64_t *v115;
  uint64_t *i;
  uint64_t v117;
  uint64_t v118;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  j = v7;
  while (2)
  {
    v7 = j;
    v10 = (char *)a2 - (char *)j;
    v11 = a2 - j;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v48 = *v8;
        v49 = *j;
        v50 = *(unsigned __int8 *)(*v8 + 820);
        if ((v50 == 2) != (*(_BYTE *)(*j + 820) == 2))
        {
          if (v50 != 2)
            return result;
        }
        else if (*(float *)(v48 + 668) >= *(float *)(v49 + 668))
        {
          return result;
        }
        *j = v48;
        *v8 = v49;
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(j, j + 1, a2 - 1);
      case 4uLL:
        v51 = j + 2;
        result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(j, j + 1, j + 2);
        v52 = *v8;
        v53 = j[2];
        v54 = *(unsigned __int8 *)(*v8 + 820);
        if ((v54 == 2) != (*(_BYTE *)(v53 + 820) == 2))
        {
          if (v54 != 2)
            return result;
        }
        else if (*(float *)(v52 + 668) >= *(float *)(v53 + 668))
        {
          return result;
        }
        *v51 = v52;
        *v8 = v53;
        v106 = *v51;
        v107 = j[1];
        v108 = *(unsigned __int8 *)(*v51 + 820);
        if ((v108 == 2) != (*(_BYTE *)(v107 + 820) == 2))
        {
          if (v108 != 2)
            return result;
          j[1] = v106;
          j[2] = v107;
          v109 = *j;
          if (*(_BYTE *)(*j + 820) != 2)
            goto LABEL_238;
          v110 = *(float *)(v106 + 668);
        }
        else
        {
          v110 = *(float *)(v106 + 668);
          if (v110 >= *(float *)(v107 + 668))
            return result;
          j[1] = v106;
          j[2] = v107;
          v109 = *j;
          if ((v108 == 2) != (*(_BYTE *)(*j + 820) == 2))
          {
            if (v108 != 2)
              return result;
            goto LABEL_238;
          }
        }
        if (v110 >= *(float *)(v109 + 668))
          return result;
LABEL_238:
        *j = v106;
        j[1] = v109;
        return result;
      case 5uLL:
        return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(j, j + 1, j + 2, j + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v55 = j + 1;
          v57 = j == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (v57)
              return result;
            v58 = 0;
            v59 = j;
            while (1)
            {
              v61 = v59;
              v59 = v55;
              v63 = *v61;
              v62 = v61[1];
              v64 = *(_BYTE *)(v62 + 820);
              if ((v64 == 2) == (*(_BYTE *)(*v61 + 820) == 2))
                break;
              if (v64 != 2)
                goto LABEL_136;
              v61[1] = v63;
              v60 = j;
              if (v61 != j)
                goto LABEL_144;
LABEL_135:
              *v60 = v62;
LABEL_136:
              v55 = v59 + 1;
              v58 += 8;
              if (v59 + 1 == a2)
                return result;
            }
            v65 = *(float *)(v62 + 668);
            if (v65 >= *(float *)(v63 + 668))
              goto LABEL_136;
            v61[1] = v63;
            v60 = j;
            if (v61 == j)
              goto LABEL_135;
            v66 = v64;
            v67 = v58;
            if (v66 != 2)
            {
              while (1)
              {
                v60 = (uint64_t *)((char *)j + v67);
                v70 = *(uint64_t *)((char *)j + v67 - 8);
                if (*(_BYTE *)(v70 + 820) == 2)
                  goto LABEL_135;
                if (v65 >= *(float *)(v70 + 668))
                {
                  v60 = v61;
                  goto LABEL_135;
                }
                --v61;
                *v60 = v70;
                v67 -= 8;
                if (!v67)
                {
LABEL_134:
                  v60 = j;
                  goto LABEL_135;
                }
              }
            }
LABEL_144:
            v68 = v58;
            while (1)
            {
              v69 = *(uint64_t *)((char *)j + v68 - 8);
              if (*(_BYTE *)(v69 + 820) == 2 && *(float *)(v62 + 668) >= *(float *)(v69 + 668))
                break;
              *(uint64_t *)((char *)j + v68) = v69;
              v68 -= 8;
              if (!v68)
                goto LABEL_134;
            }
            v60 = (uint64_t *)((char *)j + v68);
            goto LABEL_135;
          }
          if (v57)
            return result;
          while (1)
          {
            v111 = *v55;
            v112 = *v7;
            v113 = *(unsigned __int8 *)(*v55 + 820);
            if ((v113 == 2) != (*(_BYTE *)(*v7 + 820) == 2))
            {
              if (v113 != 2)
                goto LABEL_219;
            }
            else
            {
              v114 = *(float *)(v111 + 668);
              if (v114 >= *(float *)(v112 + 668))
                goto LABEL_219;
              if (*(_BYTE *)(*v55 + 820) != 2)
              {
                *v55 = v112;
                v118 = *(v7 - 1);
                for (i = v7; *(_BYTE *)(v118 + 820) != 2; --i)
                {
                  if (v114 >= *(float *)(v118 + 668))
                    break;
                  *i = v118;
                  v118 = *(i - 2);
                }
                goto LABEL_218;
              }
            }
            v115 = v7;
            do
            {
              do
              {
                i = v115;
                v117 = *--v115;
                v115[2] = v112;
                v112 = v117;
              }
              while (*(_BYTE *)(v117 + 820) != 2);
            }
            while (*(float *)(v111 + 668) < *(float *)(v112 + 668));
LABEL_218:
            *i = v111;
LABEL_219:
            ++v55;
            ++v7;
            if (v55 == a2)
              return result;
          }
        }
        if (a3)
        {
          v12 = v11 >> 1;
          v13 = &j[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(&v7[v11 >> 1], v7, a2 - 1);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v7, &v7[v11 >> 1], a2 - 1);
            v14 = &v7[v12];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v7 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v7 + 2, &v7[v12 + 1], a2 - 3);
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v14 - 1, v13, &v7[v12 + 1]);
            v15 = *v7;
            *v7 = *v14;
            *v14 = v15;
          }
          --a3;
          v16 = *v7;
          if ((a4 & 1) == 0)
          {
            v18 = *(v7 - 1);
            v19 = *(unsigned __int8 *)(v18 + 820);
            v17 = *(_BYTE *)(v16 + 820);
            if ((v19 == 2) != (v17 == 2))
            {
              if (v19 == 2)
                goto LABEL_18;
            }
            else if (*(float *)(v18 + 668) < *(float *)(v16 + 668))
            {
              goto LABEL_18;
            }
            v20 = *v8;
            v21 = *(unsigned __int8 *)(*v8 + 820);
            if ((*(_BYTE *)(v16 + 820) == 2) != (v21 == 2))
            {
              if (*(_BYTE *)(v16 + 820) != 2)
              {
                j = v7 + 1;
                v22 = a2;
                if (v7 + 1 >= a2)
                  goto LABEL_93;
                do
                {
LABEL_71:
                  if (*(_BYTE *)(*j + 820) != 2 && *(float *)(v16 + 668) < *(float *)(*j + 668))
                    break;
                  ++j;
                }
                while (j < a2);
                goto LABEL_80;
              }
            }
            else
            {
              v34 = *(float *)(v16 + 668);
              if (v34 >= *(float *)(v20 + 668))
              {
                j = v7 + 1;
                if (v7 + 1 >= a2)
                  goto LABEL_80;
                if (*(_BYTE *)(v16 + 820) == 2)
                {
                  do
                  {
                    if (*(_BYTE *)(*j + 820) != 2)
                      break;
                    if (v34 < *(float *)(*j + 668))
                      break;
                    ++j;
                  }
                  while (j < a2);
                  goto LABEL_80;
                }
                goto LABEL_71;
              }
              if (*(_BYTE *)(v16 + 820) != 2)
              {
                for (j = v7 + 1; *(_BYTE *)(*j + 820) == 2 || v34 >= *(float *)(*j + 668); ++j)
                  ;
                goto LABEL_80;
              }
            }
            j = v7 + 1;
            v35 = v7[1];
            if (*(_BYTE *)(v35 + 820) != 2)
            {
              v22 = a2;
              if (j >= a2)
                goto LABEL_93;
LABEL_82:
              v22 = a2 - 1;
              while (v21 != 2 || *(float *)(v16 + 668) < *(float *)(v20 + 668))
              {
                v37 = *--v22;
                v20 = v37;
                v21 = *(unsigned __int8 *)(v37 + 820);
              }
              goto LABEL_93;
            }
            do
            {
              if (*(float *)(v16 + 668) < *(float *)(v35 + 668))
                break;
              v36 = j[1];
              ++j;
              v35 = v36;
            }
            while (*(_BYTE *)(v36 + 820) == 2);
LABEL_80:
            if (j >= a2)
            {
              v22 = a2;
              goto LABEL_93;
            }
            if (*(_BYTE *)(v16 + 820) == 2)
              goto LABEL_82;
            if (v21 == 2)
            {
              v22 = a2 - 1;
            }
            else
            {
              v22 = a2 - 1;
              do
              {
                if (*(float *)(v16 + 668) >= *(float *)(v20 + 668))
                  break;
                v38 = *--v22;
                v20 = v38;
              }
              while (*(_BYTE *)(v38 + 820) != 2);
            }
LABEL_93:
            if (j < v22)
            {
              v39 = *j;
              v40 = *v22;
              do
              {
                *j = v40;
                *v22 = v39;
                if (v17 == 2)
                {
                  v41 = j[1];
                  ++j;
                  v39 = v41;
                  if (*(_BYTE *)(v41 + 820) != 2)
                    goto LABEL_105;
                  v42 = *(float *)(v16 + 668);
                  do
                  {
                    if (v42 < *(float *)(v39 + 668))
                      break;
                    v43 = j[1];
                    ++j;
                    v39 = v43;
                  }
                  while (*(_BYTE *)(v43 + 820) == 2);
                }
                else
                {
                  do
                  {
                    do
                    {
                      v44 = j[1];
                      ++j;
                      v39 = v44;
                    }
                    while (*(_BYTE *)(v44 + 820) == 2);
                    v42 = *(float *)(v16 + 668);
                  }
                  while (v42 >= *(float *)(v39 + 668));
                }
                if (v17 == 2)
                {
                  do
                  {
                    do
                    {
LABEL_105:
                      v45 = *--v22;
                      v40 = v45;
                    }
                    while (*(_BYTE *)(v45 + 820) != 2);
                  }
                  while (*(float *)(v16 + 668) < *(float *)(v40 + 668));
                  continue;
                }
                do
                {
                  v46 = *--v22;
                  v40 = v46;
                }
                while (*(_BYTE *)(v46 + 820) != 2 && v42 < *(float *)(v40 + 668));
              }
              while (j < v22);
            }
            v47 = j - 1;
            if (j - 1 != v7)
              *v7 = *v47;
            a4 = 0;
            *v47 = v16;
            continue;
          }
          v17 = *(_BYTE *)(v16 + 820);
LABEL_18:
          v23 = v7 + 1;
          while (2)
          {
            v24 = *v23;
            if ((v17 == 2) != (*(_BYTE *)(*v23 + 820) == 2))
            {
              if (*(_BYTE *)(*v23 + 820) != 2)
                goto LABEL_23;
LABEL_20:
              ++v23;
              continue;
            }
            break;
          }
          if (*(float *)(v24 + 668) < *(float *)(v16 + 668))
            goto LABEL_20;
LABEL_23:
          v25 = v23 - 1;
          k = a2 - 1;
          if (v23 - 1 != v7)
          {
            while (1)
            {
              if ((v17 == 2) != (*(_BYTE *)(*k + 820) == 2))
              {
                if (*(_BYTE *)(*k + 820) == 2)
                  goto LABEL_30;
              }
              else if (*(float *)(*k + 668) < *(float *)(v16 + 668))
              {
                goto LABEL_30;
              }
              --k;
            }
          }
          k = a2;
          if (v23 < a2)
          {
            for (k = a2 - 1; ; --k)
            {
              v32 = *(unsigned __int8 *)(*k + 820);
              if ((v17 == 2) != (v32 == 2))
              {
                if (v23 >= k || v32 == 2)
                  break;
              }
              else if (v23 >= k || *(float *)(*k + 668) < *(float *)(v16 + 668))
              {
                break;
              }
            }
          }
LABEL_30:
          if (v23 < k)
          {
            v27 = *k;
            v28 = (unint64_t)v23;
            v29 = k;
            do
            {
              *(_QWORD *)v28 = v27;
              v28 += 8;
              *v29 = v24;
              while (1)
              {
                v24 = *(_QWORD *)v28;
                if ((v17 == 2) == (*(_BYTE *)(*(_QWORD *)v28 + 820) == 2))
                  break;
                if (*(_BYTE *)(*(_QWORD *)v28 + 820) != 2)
                  goto LABEL_38;
LABEL_35:
                v28 += 8;
              }
              if (*(float *)(v24 + 668) < *(float *)(v16 + 668))
                goto LABEL_35;
LABEL_38:
              v25 = (uint64_t *)(v28 - 8);
              do
              {
                while (1)
                {
                  v30 = *--v29;
                  v27 = v30;
                  v31 = *(_BYTE *)(v30 + 820) == 2;
                  if ((v17 == 2) != v31)
                    break;
                  if (*(float *)(v27 + 668) < *(float *)(v16 + 668))
                    goto LABEL_32;
                }
              }
              while (!v31);
LABEL_32:
              ;
            }
            while (v28 < (unint64_t)v29);
          }
          if (v25 != v7)
            *v7 = *v25;
          *v25 = v16;
          if (v23 < k)
            goto LABEL_57;
          v33 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v7, v25);
          j = v25 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v25 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v33)
              continue;
LABEL_57:
            result = std::__introsort<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(v7, v25, a3, a4 & 1);
            a4 = 0;
            j = v25 + 1;
            continue;
          }
          a2 = v25;
          if (v33)
            return result;
          goto LABEL_2;
        }
        if (j != a2)
        {
          v71 = (v11 - 2) >> 1;
          v72 = v71;
          while (1)
          {
            v74 = v72;
            if (v71 < v72)
              goto LABEL_158;
            v75 = (2 * v72) | 1;
            v76 = &j[v75];
            if (2 * v74 + 2 < (uint64_t)v11)
            {
              v77 = v76[1];
              v78 = *(unsigned __int8 *)(*v76 + 820);
              if ((v78 == 2) == (*(_BYTE *)(v77 + 820) == 2))
              {
                if (*(float *)(*v76 + 668) >= *(float *)(v77 + 668))
                  goto LABEL_166;
LABEL_165:
                ++v76;
                v75 = 2 * v74 + 2;
                goto LABEL_166;
              }
              if (v78 == 2)
                goto LABEL_165;
            }
LABEL_166:
            v79 = *v76;
            v80 = j[v74];
            v81 = *(unsigned __int8 *)(*v76 + 820);
            v82 = *(unsigned __int8 *)(v80 + 820);
            result = (v81 == 2) ^ (v82 == 2);
            if ((v81 == 2) != (v82 == 2))
            {
              if (v81 != 2)
                goto LABEL_170;
            }
            else if (*(float *)(v79 + 668) >= *(float *)(v80 + 668))
            {
LABEL_170:
              j[v74] = v79;
              if (v71 < v75)
              {
LABEL_156:
                v73 = v76;
LABEL_157:
                *v73 = v80;
                goto LABEL_158;
              }
              while (2)
              {
                v83 = 2 * v75;
                v75 = (2 * v75) | 1;
                v73 = &j[v75];
                v84 = v83 + 2;
                if (v84 < (uint64_t)v11)
                {
                  v85 = v73[1];
                  v86 = *(unsigned __int8 *)(*v73 + 820);
                  if ((v86 == 2) != (*(_BYTE *)(v85 + 820) == 2))
                  {
                    if (v86 != 2)
                      goto LABEL_180;
LABEL_179:
                    ++v73;
                    v75 = v84;
                  }
                  else if (*(float *)(*v73 + 668) < *(float *)(v85 + 668))
                  {
                    goto LABEL_179;
                  }
                }
LABEL_180:
                v87 = *v73;
                result = (v82 == 2) ^ (*(_BYTE *)(*v73 + 820) == 2);
                if ((v82 == 2) != (*(_BYTE *)(*v73 + 820) == 2))
                {
                  if (*(_BYTE *)(*v73 + 820) == 2)
                    goto LABEL_156;
                }
                else if (*(float *)(v87 + 668) < *(float *)(v80 + 668))
                {
                  goto LABEL_156;
                }
                *v76 = v87;
                v76 = v73;
                if (v71 < v75)
                  goto LABEL_157;
                continue;
              }
            }
LABEL_158:
            v72 = v74 - 1;
            if (!v74)
            {
              v88 = (unint64_t)v10 >> 3;
              while (1)
              {
                v91 = 0;
                v92 = *j;
                v89 = j;
                do
                {
                  v93 = v89;
                  v89 += v91 + 1;
                  v94 = 2 * v91;
                  v91 = (2 * v91) | 1;
                  v95 = v94 + 2;
                  if (v95 < v88)
                  {
                    v96 = v89[1];
                    result = *(unsigned __int8 *)(*v89 + 820);
                    if (((_DWORD)result == 2) != (*(_BYTE *)(v96 + 820) == 2))
                    {
                      if ((_DWORD)result == 2)
                        goto LABEL_188;
                    }
                    else if (*(float *)(*v89 + 668) < *(float *)(v96 + 668))
                    {
LABEL_188:
                      ++v89;
                      v91 = v95;
                    }
                  }
                  *v93 = *v89;
                }
                while (v91 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
                if (v89 == --a2)
                  goto LABEL_185;
                *v89 = *a2;
                *a2 = v92;
                v97 = (char *)v89 - (char *)j + 8;
                if (v97 >= 9)
                {
                  v98 = ((unint64_t)v97 >> 3) - 2;
                  v99 = v98 >> 1;
                  v100 = &j[v98 >> 1];
                  v101 = *v100;
                  v92 = *v89;
                  v102 = *(unsigned __int8 *)(*v100 + 820);
                  v103 = *(unsigned __int8 *)(*v89 + 820);
                  result = v103 == 2;
                  if ((v102 == 2) != (v103 == 2))
                  {
                    if (v102 == 2)
                    {
LABEL_202:
                      *v89 = v101;
                      if (v98 >= 2)
                      {
                        while (1)
                        {
                          v104 = v99 - 1;
                          v99 = (v99 - 1) >> 1;
                          v89 = &j[v99];
                          v105 = *v89;
                          if ((v103 == 2) != (*(_BYTE *)(*v89 + 820) == 2))
                          {
                            if (*(_BYTE *)(*v89 + 820) != 2)
                              break;
                          }
                          else if (*(float *)(v105 + 668) >= *(float *)(v92 + 668))
                          {
                            break;
                          }
                          *v100 = v105;
                          v100 = &j[v99];
                          if (v104 <= 1)
                            goto LABEL_185;
                        }
                      }
                      v89 = v100;
LABEL_185:
                      *v89 = v92;
                    }
                  }
                  else if (*(float *)(v101 + 668) < *(float *)(v92 + 668))
                  {
                    goto LABEL_202;
                  }
                }
                if (v88-- <= 2)
                  return result;
              }
            }
          }
        }
        return result;
    }
  }
}

BOOL md::Label::collisionPriorityCmp(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4, int a5)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  _BOOL8 result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  BOOL v29;
  float v30;
  float v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;

  v5 = atomic_load((unsigned __int8 *)(a1 + 1240));
  v6 = atomic_load((unsigned __int8 *)(a3 + 1240));
  if ((v5 & 1) != (v6 & 1))
  {
    v7 = atomic_load((unsigned __int8 *)(a1 + 1240));
    return v7 & 1;
  }
  v9 = a3;
  v10 = a1;
  if (a5)
  {
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a3 + 24);
    if (v11)
    {
      if (v11 == v12)
      {
        v28 = a2 > a4;
        if (a2 == a4)
        {
          v29 = *(_DWORD *)(a1 + 32) >= *(_DWORD *)(a3 + 32);
          return !v29;
        }
        return v28;
      }
      v13 = *(_QWORD *)(v11 + 72);
      if (v13)
        v10 = v13;
    }
    if (v12)
    {
      v14 = *(_QWORD *)(v12 + 72);
      if (v14)
        v9 = v14;
    }
  }
  if (a2 == 1 || *(_BYTE *)(v10 + 1248))
    v15 = (int *)(v10 + 724);
  else
    v15 = (int *)(v10 + 720);
  v16 = *v15;
  if (a4 == 1 || *(_BYTE *)(v9 + 1248))
    v17 = (int *)(v9 + 724);
  else
    v17 = (int *)(v9 + 720);
  v18 = *v17;
  v19 = v16 < v18;
  if (v16 != v18)
    return v19;
  v20 = *(float *)(v10 + 728);
  v21 = *(float *)(v9 + 728);
  v19 = v20 < v21;
  if (v20 != v21)
    return v19;
  v22 = *(float *)(v10 + 740);
  v23 = *(float *)(v9 + 740);
  v19 = v22 < v23;
  if (v22 != v23)
    return v19;
  v24 = *(_DWORD *)(v10 + 60);
  v25 = *(_DWORD *)(v9 + 60);
  v19 = v24 < v25;
  if (v24 != v25)
    return v19;
  v26 = *(unsigned __int8 *)(v10 + 1222);
  v27 = *(unsigned __int8 *)(v9 + 1222);
  v28 = v26 > v27;
  if (v26 != v27)
    return v28;
  if (a5)
  {
    if (*(_BYTE *)(v10 + 1277))
    {
      if (*(_BYTE *)(v9 + 1277))
      {
        result = *(_BYTE *)(v10 + 1252) != 0;
        if ((*(_BYTE *)(v10 + 1252) != 0) != (*(_BYTE *)(v9 + 1252) != 0))
          return result;
        goto LABEL_39;
      }
      return *(_BYTE *)(v10 + 1277) != 0;
    }
    if (*(_BYTE *)(v9 + 1277))
      return *(_BYTE *)(v10 + 1277) != 0;
  }
LABEL_39:
  v30 = *(float *)(v10 + 196);
  v31 = *(float *)(v9 + 196);
  v19 = v30 < v31;
  if (v30 != v31)
    return v19;
  v32 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v10 + 8) + 472))(*(_QWORD *)(v10 + 8), 0);
  v33 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 8) + 472))(*(_QWORD *)(v9 + 8), 0);
  result = v32 != 0;
  if (!(v32 | v33))
    goto LABEL_49;
  if (v32 && v33)
  {
    v34 = std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::compare((const void **)v32, (_BYTE *)v33);
    if (v34)
      return v34 >> 31;
LABEL_49:
    v29 = v10 >= v9;
    return !v29;
  }
  return result;
}

uint64_t std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::compare(const void **a1, _BYTE *a2)
{
  char v2;
  size_t v3;
  const void **v4;
  size_t v5;
  size_t v6;
  uint64_t result;
  unsigned int v8;

  v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = a1;
    a1 = (const void **)*a1;
    v3 = (size_t)v4[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v2 < 0)
    a2 = *(_BYTE **)a2;
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5)
    v8 = -1;
  else
    v8 = v5 < v3;
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = *a2;
  v4 = *result;
  v5 = *(unsigned __int8 *)(*a2 + 820);
  v6 = *(unsigned __int8 *)(*result + 820);
  if ((v5 == 2) == (v6 == 2))
  {
    if (*(float *)(v3 + 668) >= *(float *)(v4 + 668))
      goto LABEL_3;
LABEL_7:
    v8 = v5 == 2;
    v9 = *a3;
    if (((v8 ^ (*(_BYTE *)(*a3 + 820) == 2)) & 1) != 0)
    {
      if (*(_BYTE *)(*a3 + 820) != 2)
        goto LABEL_9;
    }
    else if (*(float *)(v9 + 668) >= *(float *)(v3 + 668))
    {
LABEL_9:
      *result = v3;
      *a2 = v4;
      v10 = *a3;
      if ((v6 == 2) != (*(_BYTE *)(*a3 + 820) == 2))
      {
        if (*(_BYTE *)(*a3 + 820) != 2)
          return result;
      }
      else if (*(float *)(v10 + 668) >= *(float *)(v4 + 668))
      {
        return result;
      }
      *a2 = v10;
      *a3 = v4;
      return result;
    }
    *result = v9;
    *a3 = v4;
    return result;
  }
  if (v5 == 2)
    goto LABEL_7;
LABEL_3:
  v7 = *a3;
  if ((v5 == 2) != (*(_BYTE *)(*a3 + 820) == 2))
  {
    if (*(_BYTE *)(*a3 + 820) != 2)
      return result;
  }
  else if (*(float *)(v7 + 668) >= *(float *)(v3 + 668))
  {
    return result;
  }
  *a2 = v7;
  *a3 = v3;
  v11 = *a2;
  v12 = *result;
  v13 = *(unsigned __int8 *)(*a2 + 820);
  if ((v13 == 2) != (*(_BYTE *)(*result + 820) == 2))
  {
    if (v13 == 2)
      goto LABEL_21;
  }
  else if (*(float *)(v11 + 668) < *(float *)(v12 + 668))
  {
LABEL_21:
    *result = v11;
    *a2 = v12;
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  v13 = *(unsigned __int8 *)(*a4 + 820);
  if ((v13 == 2) != (*(_BYTE *)(*a3 + 820) == 2))
  {
    if (v13 != 2)
      goto LABEL_14;
  }
  else if (*(float *)(v11 + 668) >= *(float *)(v12 + 668))
  {
    goto LABEL_14;
  }
  *a3 = v11;
  *a4 = v12;
  v14 = *a3;
  v15 = *a2;
  v16 = *(unsigned __int8 *)(*a3 + 820);
  if ((v16 == 2) != (*(_BYTE *)(*a2 + 820) == 2))
  {
    if (v16 != 2)
      goto LABEL_14;
  }
  else if (*(float *)(v14 + 668) >= *(float *)(v15 + 668))
  {
    goto LABEL_14;
  }
  *a2 = v14;
  *a3 = v15;
  v17 = *a2;
  v18 = *a1;
  v19 = *(unsigned __int8 *)(*a2 + 820);
  if ((v19 == 2) == (*(_BYTE *)(*a1 + 820) == 2))
  {
    if (*(float *)(v17 + 668) >= *(float *)(v18 + 668))
      goto LABEL_14;
    goto LABEL_13;
  }
  if (v19 == 2)
  {
LABEL_13:
    *a1 = v17;
    *a2 = v18;
  }
LABEL_14:
  v20 = *a5;
  v21 = *a4;
  v22 = *(unsigned __int8 *)(*a5 + 820);
  if ((v22 == 2) != (*(_BYTE *)(*a4 + 820) == 2))
  {
    if (v22 != 2)
      return result;
  }
  else if (*(float *)(v20 + 668) >= *(float *)(v21 + 668))
  {
    return result;
  }
  *a4 = v20;
  *a5 = v21;
  v23 = *a4;
  v24 = *a3;
  v25 = *(unsigned __int8 *)(*a4 + 820);
  if ((v25 == 2) != (*(_BYTE *)(*a3 + 820) == 2))
  {
    if (v25 != 2)
      return result;
  }
  else if (*(float *)(v23 + 668) >= *(float *)(v24 + 668))
  {
    return result;
  }
  *a3 = v23;
  *a4 = v24;
  v26 = *a3;
  v27 = *a2;
  v28 = *(unsigned __int8 *)(*a3 + 820);
  if ((v28 == 2) != (*(_BYTE *)(*a2 + 820) == 2))
  {
    if (v28 != 2)
      return result;
  }
  else if (*(float *)(v26 + 668) >= *(float *)(v27 + 668))
  {
    return result;
  }
  *a2 = v26;
  *a3 = v27;
  v29 = *a2;
  v30 = *a1;
  v31 = *(unsigned __int8 *)(*a2 + 820);
  if ((v31 == 2) == (*(_BYTE *)(*a1 + 820) == 2))
  {
    if (*(float *)(v29 + 668) >= *(float *)(v30 + 668))
      return result;
    goto LABEL_30;
  }
  if (v31 == 2)
  {
LABEL_30:
    *a1 = v29;
    *a2 = v30;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float v31;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(unsigned __int8 *)(v6 + 820);
      if ((v8 == 2) != (*(_BYTE *)(*a1 + 820) == 2))
      {
        if (v8 != 2)
          return result;
      }
      else if (*(float *)(v6 + 668) >= *(float *)(v7 + 668))
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      v23 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a1 + 2);
      v24 = *(a2 - 1);
      v25 = a1[2];
      v26 = *(unsigned __int8 *)(v24 + 820);
      if ((v26 == 2) != (*(_BYTE *)(v25 + 820) == 2))
      {
        if (v26 != 2)
          return 1;
      }
      else if (*(float *)(v24 + 668) >= *(float *)(v25 + 668))
      {
        return 1;
      }
      *v23 = v24;
      *(a2 - 1) = v25;
      v27 = *v23;
      v28 = a1[1];
      v29 = *(unsigned __int8 *)(*v23 + 820);
      if ((v29 == 2) != (*(_BYTE *)(v28 + 820) == 2))
      {
        if (v29 != 2)
          return 1;
        a1[1] = v27;
        a1[2] = v28;
        v30 = *a1;
        if (*(_BYTE *)(*a1 + 820) != 2)
          goto LABEL_49;
        v31 = *(float *)(v27 + 668);
      }
      else
      {
        v31 = *(float *)(v27 + 668);
        if (v31 >= *(float *)(v28 + 668))
          return 1;
        a1[1] = v27;
        a1[2] = v28;
        v30 = *a1;
        if ((v29 == 2) != (*(_BYTE *)(*a1 + 820) == 2))
        {
          if (v29 != 2)
            return 1;
          goto LABEL_49;
        }
      }
      if (v31 >= *(float *)(v30 + 668))
        return 1;
LABEL_49:
      *a1 = v27;
      a1[1] = v30;
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v14 = *v10;
    v15 = *v9;
    v16 = *(_BYTE *)(*v10 + 820);
    if ((v16 == 2) != (*(_BYTE *)(*v9 + 820) == 2))
    {
      if (v16 != 2)
        goto LABEL_9;
      *v10 = v15;
      v13 = a1;
      if (v9 != a1)
        goto LABEL_17;
    }
    else
    {
      v17 = *(float *)(v14 + 668);
      if (v17 >= *(float *)(v15 + 668))
        goto LABEL_9;
      *v10 = v15;
      v13 = a1;
      if (v9 != a1)
      {
        v18 = v11;
        if (v16 == 2)
        {
LABEL_17:
          v19 = v11;
          while (1)
          {
            v20 = *(uint64_t *)((char *)a1 + v19 + 8);
            if (*(_BYTE *)(v20 + 820) == 2 && *(float *)(v14 + 668) >= *(float *)(v20 + 668))
              break;
            *(uint64_t *)((char *)a1 + v19 + 16) = v20;
            v19 -= 8;
            if (v19 == -16)
              goto LABEL_7;
          }
          v21 = (char *)a1 + v19;
        }
        else
        {
          while (1)
          {
            v22 = *(uint64_t *)((char *)a1 + v18 + 8);
            if (*(_BYTE *)(v22 + 820) == 2)
            {
              v13 = v9;
              goto LABEL_8;
            }
            if (v17 >= *(float *)(v22 + 668))
              break;
            --v9;
            *(uint64_t *)((char *)a1 + v18 + 16) = v22;
            v18 -= 8;
            if (v18 == -16)
            {
LABEL_7:
              v13 = a1;
              goto LABEL_8;
            }
          }
          v21 = (char *)a1 + v18;
        }
        v13 = (uint64_t *)(v21 + 16);
      }
    }
LABEL_8:
    *v13 = v14;
    if (++v12 == 8)
      return v10 + 1 == a2;
LABEL_9:
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

void sub_19F858D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)VKNotificationObserver;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F858EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F858FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F859108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F85918C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F859F30(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v1[14] + 40))(v1[14], v2, 64);

  _Unwind_Resume(a1);
}

void sub_19F85A068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19F85A3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19F85A478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19F85A514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19F85A5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19F85A64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19F85A6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19F85A920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F85A9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKIconManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F85ABB8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F85AC24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F85AD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_19F85AE00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19F85AEB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F85AF60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F85B000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F85B098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F85B0E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F85B12C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F85B170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F85B1B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F85B1F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F85B244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F85B290(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19F85B3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

float VKShieldColorsFromHexString(void *a1)
{
  NSString *v1;
  uint64_t v2;
  uint64_t v3;
  float v4;

  v1 = (NSString *)objc_msgSend(a1, "copy");
  if (-[NSString hasPrefix:](v1, "hasPrefix:", CFSTR("#")))
  {
    -[NSString substringFromIndex:](v1, "substringFromIndex:", 1);
    v2 = objc_claimAutoreleasedReturnValue();

    v1 = (NSString *)v2;
  }
  if (-[NSString length](v1, "length") == 8)
  {
    colorFromStringInRange(v1, (const _NSRange *)6, 2);
    -[NSString substringWithRange:](v1, "substringWithRange:", 0, 6);
    v3 = objc_claimAutoreleasedReturnValue();

    v1 = (NSString *)v3;
  }
  v4 = 0.0;
  if (-[NSString length](v1, "length") == 6)
  {
    v4 = colorFromStringInRange(v1, 0, 2);
    colorFromStringInRange(v1, (const _NSRange *)2, 2);
    colorFromStringInRange(v1, (const _NSRange *)4, 2);
  }

  return v4;
}

void sub_19F85B5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double colorFromStringInRange(NSString *a1, const _NSRange *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  unsigned int v8;

  v8 = 0;
  v3 = (void *)MEMORY[0x1E0CB3900];
  -[NSString substringWithRange:](a1, "substringWithRange:", a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scannerWithString:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "scanHexInt:", &v8);
  v6 = (float)((float)v8 * 0.0039216);

  return v6;
}

void sub_19F85B664(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F85B674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *VKSizeGroupToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return CFSTR("ExtraExtraExtraSmall");
  else
    return (const __CFString *)*((_QWORD *)&off_1E42EF650 + a1 - 1);
}

uint64_t md::TrafficUtilities::buildStartOffset(float *a1, float *a2, std::__shared_weak_count **this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int8x16_t v24;
  float v25;
  unint64_t v26;
  NSObject *v28;
  void *v29;
  double v30;
  double v31;
  void *v32;
  double v33;
  double v34;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  signed int v43;
  int v44;
  uint64_t v45;
  float32x2_t v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  float32x2_t v51;
  int8x16_t v52;
  unint64_t v53;
  int32x4_t *v54;
  float32x4_t v55;
  unint64_t v56;
  float32x4_t v57;
  const float *i32;
  int32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  float32x2_t *v68;
  float32x2_t v69;
  float32x2_t v70;
  void *v71;
  double v72;
  double v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76;
  float v77;
  signed int v78;
  float v79;
  float32x2_t v80;
  float v81;
  float v82;
  float v83;
  signed int v84;
  float v85;
  float32x2_t v86;
  float v87;
  signed int v88;
  float32x2_t *v89;
  int v90;
  float v91;
  float v92;
  float32x2_t v93;
  float v94;
  float32x2_t *v95;
  int v96;
  float v97;
  float v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float v102;
  signed int v103;
  float v104;
  float32x2_t v105;
  float v106;
  signed int v107;
  float v108;
  float32x2_t v109;
  float v110;
  float v111;
  signed int v112;
  float32x2_t *v113;
  int v114;
  float v115;
  float v116;
  float32x2_t v117;
  float v118;
  float32x2_t *v119;
  int v120;
  float v121;
  float v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float v126;
  int v127;
  void *v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  double v138;
  __int16 v139;
  double v140;
  uint64_t v141;
  float32x4x2_t v142;

  v141 = *MEMORY[0x1E0C80C00];
  v17 = *(float *)(a4 + 8);
  v18 = *(float *)(a4 + 12) + v17;
  v19 = floorf(v18);
  v20 = v18 - v19;
  v21 = ceilf(v18);
  if ((float)(v21 - v18) < 0.001)
    v18 = v21;
  if (v20 >= 0.001)
    v22 = v18;
  else
    v22 = v19;
  *a1 = geo::codec::roadFeatureMapOriginalToEvaluatedIndex(this, (const GeoCodecsRoadFeature *)*(unsigned int *)(a4 + 4), *(float *)(a4 + 8));
  v23 = geo::codec::roadFeatureMapOriginalToEvaluatedIndex(this, (const GeoCodecsRoadFeature *)*(unsigned int *)(a4 + 4), v22);
  *a2 = v23;
  v25 = *a1;
  if (*a1 < 0.0 || v23 < 0.0)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v28 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      GEOStringFromTileKey();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = *(float *)(a4 + 8);
      v34 = *(float *)(a4 + 12);
      v127 = 138413826;
      v128 = v32;
      v129 = 2048;
      v130 = v17;
      v131 = 2048;
      v132 = v22;
      v133 = 2048;
      v134 = a5;
      v135 = 2048;
      v136 = a6;
      v137 = 2048;
      v138 = v33;
      v139 = 2048;
      v140 = v34;
      _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_INFO, "Skeleton traffic tile %@ implicates bad section (start: %f, end: %f, valid: %lu,%lu, skeleton record: %f,%f)", (uint8_t *)&v127, 0x48u);

    }
    goto LABEL_49;
  }
  v26 = a6 - 1;
  if (!a6)
    v26 = 0;
  if (v25 > (float)v26 || v23 > (float)v26)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v28 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      GEOStringFromTileKey();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = *a1;
      v31 = *a2;
      v127 = 138413058;
      v128 = v29;
      v129 = 2048;
      v130 = v30;
      v131 = 2048;
      v132 = v31;
      v133 = 2048;
      v134 = a6;
      _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_INFO, "Skeleton traffic tile %@ implicates flow start/end offsets out of range  start: %f end:%f  section len = %ld", (uint8_t *)&v127, 0x2Au);

    }
LABEL_49:

    return 0;
  }
  if (v25 == v23)
    return 0;
  v36 = *(float *)(a7 + 8);
  if (v36 != 0.0 || *(float *)(a7 + 12) != 1.0)
  {
    v37 = *(float *)(a4 + 28);
    v38 = *(float *)(a4 + 32) - v37;
    if (v38 >= 1.0)
    {
      v40 = *(float *)(a7 + 12);
    }
    else
    {
      if (v38 <= 0.0)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v28 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          GEOStringFromTileKey();
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = *(float *)(a4 + 28);
          v73 = *(float *)(a4 + 32);
          v127 = 138412802;
          v128 = v71;
          v129 = 2048;
          v130 = v72;
          v131 = 2048;
          v132 = v73;
          _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_INFO, "Skeleton traffic tile %@ implicates inverted road offsets: %f->%f ", (uint8_t *)&v127, 0x20u);

        }
        goto LABEL_49;
      }
      if (v38 <= 0.00000011921)
        v39 = 1.0;
      else
        v39 = 1.0 / v38;
      v36 = fminf(fmaxf(v39 * (float)(v36 - v37), 0.0), 1.0);
      v40 = fminf(fmaxf((float)(*(float *)(a7 + 12) - v37) * v39, 0.0), 1.0);
    }
    if (v36 >= v40)
      return 0;
    v41 = fmaxf(v23, v25);
    v42 = fminf(v23, v25);
    v43 = vcvtms_s32_f32(v42);
    v44 = vcvtps_s32_f32(v41);
    v45 = v43;
    if (v43 >= v44)
    {
      v46 = *(float32x2_t *)(a8 + 8 * v43);
      v47 = v44;
      v49 = 0.0;
      goto LABEL_51;
    }
    v46 = *(float32x2_t *)(a8 + 8 * v43);
    v47 = v44;
    v48 = v44 - v45;
    v49 = 0.0;
    v50 = v45;
    v51 = *(float32x2_t *)(a8 + 8 * v45);
    if (v48 >= 8)
    {
      v24.i64[1] = *(_QWORD *)(a8 + 8 * v45);
      v52 = (int8x16_t)vdupq_lane_s32((int32x2_t)v46, 0);
      v53 = v48 & 0xFFFFFFFFFFFFFFF8;
      v54 = (int32x4_t *)(a8 + 8 * v45 + 40);
      v55 = 0uLL;
      v56 = v48 & 0xFFFFFFFFFFFFFFF8;
      v57 = 0uLL;
      do
      {
        i32 = (const float *)v54[-2].i32;
        v142 = vld2q_f32(i32);
        v60 = *v54;
        v59 = v54[1];
        v54 += 4;
        v61 = (float32x4_t)vuzp1q_s32(v60, v59);
        v62 = (float32x4_t)vuzp2q_s32(v60, v59);
        v63 = vsubq_f32(v142.val[0], (float32x4_t)vextq_s8(v52, (int8x16_t)v142.val[0], 0xCuLL));
        v64 = vsubq_f32(v61, (float32x4_t)vextq_s8((int8x16_t)v142.val[0], (int8x16_t)v61, 0xCuLL));
        v65 = vsubq_f32(v142.val[1], (float32x4_t)vextq_s8(v24, (int8x16_t)v142.val[1], 0xCuLL));
        v142.val[0] = vsubq_f32(v62, (float32x4_t)vextq_s8((int8x16_t)v142.val[1], (int8x16_t)v62, 0xCuLL));
        v55 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v63, v63), v65, v65)), v55);
        v57 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v64, v64), v142.val[0], v142.val[0])), v57);
        v24 = (int8x16_t)v62;
        v52 = (int8x16_t)v61;
        v56 -= 8;
      }
      while (v56);
      v66 = vaddq_f32(v57, v55);
      v49 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v66, v66));
      if (v48 == v53)
      {
LABEL_51:
        v74 = vsub_f32(*(float32x2_t *)(a8 + 8 * ((int)v45 + 1)), v46);
        v75 = vsub_f32(*(float32x2_t *)(a8 + 8 * v47), *(float32x2_t *)(a8 + 8 * (v44 - 1)));
        v76 = (float)(v49 + (float)(sqrtf(vaddv_f32(vmul_f32(v75, v75))) * (float)(v41 - (float)v44)))
            + (float)(sqrtf(vaddv_f32(vmul_f32(v74, v74))) * (float)((float)(int)v45 - v42));
        v77 = v76 * v36;
        if (v23 <= v25)
        {
          v84 = vcvtps_s32_f32(v25);
          v85 = (float)(v25 - ceilf(v25)) + 1.0;
          v86 = vsub_f32(*(float32x2_t *)(a8 + 8 * v84 - 8), *(float32x2_t *)(a8 + 8 * v84));
          v87 = sqrtf(vaddv_f32(vmul_f32(v86, v86))) * v85;
          if (v87 > v77)
          {
            v82 = fmaxf(v25 - (float)((float)(v85 * v77) / v87), v23);
            v83 = v76 * v40;
            goto LABEL_68;
          }
          v95 = (float32x2_t *)(a8 + 8 * v84 - 8);
          v96 = v84 - 1;
          while (1)
          {
            v97 = (float)v96;
            if (v23 >= (float)v96)
              break;
            v98 = v87;
            v99 = *v95;
            v100 = v95[-1];
            --v95;
            v101 = vsub_f32(v100, v99);
            v102 = sqrtf(vaddv_f32(vmul_f32(v101, v101)));
            v87 = v102 + v98;
            --v96;
            if ((float)(v102 + v98) > v77)
            {
              v82 = fmaxf(v97 + (float)((float)(v98 - v77) / v102), v23);
              goto LABEL_65;
            }
          }
        }
        else
        {
          v78 = vcvtms_s32_f32(v25);
          v79 = (float)(floorf(v25) - v25) + 1.0;
          v80 = vsub_f32(*(float32x2_t *)(a8 + 8 * v78 + 8), *(float32x2_t *)(a8 + 8 * v78));
          v81 = sqrtf(vaddv_f32(vmul_f32(v80, v80))) * v79;
          if (v81 > v77)
          {
            v82 = fminf((float)((float)(v79 * v77) / v81) + v25, v23);
            v83 = v76 * v40;
LABEL_66:
            v103 = vcvtms_s32_f32(v25);
            v104 = (float)(floorf(v25) - v25) + 1.0;
            v105 = vsub_f32(*(float32x2_t *)(a8 + 8 * v103 + 8), *(float32x2_t *)(a8 + 8 * v103));
            v106 = sqrtf(vaddv_f32(vmul_f32(v105, v105))) * v104;
            if (v106 <= v83)
            {
              v112 = v103;
              v113 = (float32x2_t *)(a8 + 8 * v103 + 16);
              v114 = v112 + 1;
              while (1)
              {
                v115 = (float)v114;
                if (v23 <= (float)v114)
                  break;
                v116 = v106;
                v117 = vsub_f32(*v113, v113[-1]);
                v118 = sqrtf(vaddv_f32(vmul_f32(v117, v117)));
                v106 = v118 + v116;
                ++v113;
                ++v114;
                if ((float)(v118 + v116) > v83)
                {
                  v23 = fminf((float)((float)(v83 - v116) / v118) + v115, v23);
                  break;
                }
              }
            }
            else
            {
              v23 = fminf((float)((float)(v104 * v83) / v106) + v25, v23);
            }
LABEL_79:
            *a1 = v82;
            *a2 = v23;
            return 1;
          }
          v88 = v78;
          v89 = (float32x2_t *)(a8 + 8 * v78 + 16);
          v90 = v88 + 1;
          while (1)
          {
            v91 = (float)v90;
            if (v23 <= (float)v90)
              break;
            v92 = v81;
            v93 = vsub_f32(*v89, v89[-1]);
            v94 = sqrtf(vaddv_f32(vmul_f32(v93, v93)));
            v81 = v94 + v92;
            ++v89;
            ++v90;
            if ((float)(v94 + v92) > v77)
            {
              v82 = fminf((float)((float)(v77 - v92) / v94) + v91, v23);
              goto LABEL_65;
            }
          }
        }
        v82 = v23;
LABEL_65:
        v83 = v76 * v40;
        if (v23 > v25)
          goto LABEL_66;
LABEL_68:
        v107 = vcvtps_s32_f32(v25);
        v108 = (float)(v25 - ceilf(v25)) + 1.0;
        v109 = vsub_f32(*(float32x2_t *)(a8 + 8 * v107 - 8), *(float32x2_t *)(a8 + 8 * v107));
        v110 = sqrtf(vaddv_f32(vmul_f32(v109, v109))) * v108;
        if (v110 <= v83)
        {
          v119 = (float32x2_t *)(a8 + 8 * v107 - 8);
          v120 = v107 - 1;
          while (1)
          {
            v121 = (float)v120;
            if (v23 >= (float)v120)
              break;
            v122 = v110;
            v123 = *v119;
            v124 = v119[-1];
            --v119;
            v125 = vsub_f32(v124, v123);
            v126 = sqrtf(vaddv_f32(vmul_f32(v125, v125)));
            v110 = v126 + v122;
            --v120;
            if ((float)(v126 + v122) > v83)
            {
              v111 = v121 + (float)((float)(v122 - v83) / v126);
              goto LABEL_78;
            }
          }
        }
        else
        {
          v111 = v25 - (float)((float)(v108 * v83) / v110);
LABEL_78:
          v23 = fmaxf(v111, v23);
        }
        goto LABEL_79;
      }
      v50 = v53 + v45;
      v51 = (float32x2_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
    }
    v67 = v44 - v50;
    v68 = (float32x2_t *)(a8 + 8 * v50 + 8);
    do
    {
      v69 = *v68++;
      v70 = vsub_f32(v69, v51);
      v49 = sqrtf(vaddv_f32(vmul_f32(v70, v70))) + v49;
      v51 = v69;
      --v67;
    }
    while (v67);
    goto LABEL_51;
  }
  return 1;
}

void sub_19F85BEDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  uint64_t v84;
  float v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  float v91;
  float v92;
  float v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  uint64_t v141;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(float *)(*v8 + 8) < *(float *)(*v9 + 8))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(float *)(v81 + 8);
        v83 = *(float *)(*v9 + 8);
        v84 = *v8;
        v85 = *(float *)(*v8 + 8);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v134 = *v9;
            v133 = v9[1];
            if (*(float *)(v133 + 8) < *(float *)(*v9 + 8))
            {
              *v9 = v133;
              v9[1] = v134;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(float *)(*v8 + 8) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = (uint64_t *)v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = (uint64_t *)*v9;
        v91 = *((float *)v87 + 2);
        v92 = *(float *)(*v9 + 8);
        v93 = *(float *)(v89 + 8);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_164;
          *v86 = v89;
          *v88 = (uint64_t)v87;
          v94 = v9;
          v95 = (uint64_t **)(v9 + 1);
          result = (uint64_t)v87;
          if (v93 >= v92)
            goto LABEL_165;
        }
        else
        {
          v94 = v9;
          v95 = (uint64_t **)(v9 + 2);
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = (uint64_t)v87;
            v9[1] = (uint64_t)v90;
            v94 = v9 + 1;
            v95 = (uint64_t **)(v9 + 2);
            result = (uint64_t)v90;
            if (v93 >= v92)
            {
LABEL_164:
              v87 = (uint64_t *)v89;
LABEL_165:
              if (*(float *)(*v8 + 8) < *((float *)v87 + 2))
              {
                *v88 = *v8;
                *v8 = (uint64_t)v87;
                v138 = *v88;
                v139 = *v86;
                v140 = *(float *)(v138 + 8);
                if (v140 < *(float *)(v139 + 8))
                {
                  v9[1] = v138;
                  v9[2] = v139;
                  v141 = *v9;
                  if (v140 < *(float *)(*v9 + 8))
                  {
                    *v9 = v138;
                    v9[1] = v141;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = (uint64_t *)result;
        goto LABEL_165;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  if (2 * v108 + 2 < v11 && *(float *)(*v111 + 8) < *(float *)(v111[1] + 8))
                  {
                    ++v111;
                    v110 = 2 * v108 + 2;
                  }
                  v112 = &v9[v108];
                  v113 = *v111;
                  v114 = *v112;
                  v115 = *(float *)(*v112 + 8);
                  if (*(float *)(*v111 + 8) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v112 = v113;
                      if (v107 < v110)
                        break;
                      v117 = 2 * v110;
                      v110 = (2 * v110) | 1;
                      v111 = &v9[v110];
                      v118 = v117 + 2;
                      if (v118 < v11)
                      {
                        result = *v111;
                        if (*(float *)(*v111 + 8) < *(float *)(v111[1] + 8))
                        {
                          ++v111;
                          v110 = v118;
                        }
                      }
                      v113 = *v111;
                      v112 = v116;
                    }
                    while (*(float *)(*v111 + 8) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v119 = (unint64_t)v10 >> 3;
              do
              {
                v120 = 0;
                v121 = *v9;
                v122 = v9;
                do
                {
                  v123 = v122;
                  v122 += v120 + 1;
                  v124 = 2 * v120;
                  v120 = (2 * v120) | 1;
                  v125 = v124 + 2;
                  if (v125 < v119 && *(float *)(*v122 + 8) < *(float *)(v122[1] + 8))
                  {
                    ++v122;
                    v120 = v125;
                  }
                  *v123 = *v122;
                }
                while (v120 <= (uint64_t)((unint64_t)(v119 - 2) >> 1));
                if (v122 == --a2)
                {
                  *v122 = v121;
                }
                else
                {
                  *v122 = *a2;
                  *a2 = v121;
                  v126 = (char *)v122 - (char *)v9 + 8;
                  if (v126 >= 9)
                  {
                    v127 = (((unint64_t)v126 >> 3) - 2) >> 1;
                    v128 = &v9[v127];
                    v129 = *v128;
                    v130 = *v122;
                    v131 = *(float *)(*v122 + 8);
                    if (*(float *)(*v128 + 8) < v131)
                    {
                      do
                      {
                        v132 = v128;
                        *v122 = v129;
                        if (!v127)
                          break;
                        v127 = (v127 - 1) >> 1;
                        v128 = &v9[v127];
                        v129 = *v128;
                        v122 = v132;
                      }
                      while (*(float *)(*v128 + 8) < v131);
                      *v132 = v130;
                    }
                  }
                }
                v109 = v119-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(float *)(*v8 + 8);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(float *)(*v13 + 8);
            v19 = *(float *)(*v9 + 8);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(float *)(*v13 + 8) < *(float *)(*v9 + 8))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(float *)(*v8 + 8) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(float *)(v29 + 8);
            v32 = *(float *)(v30 + 8);
            v33 = *(a2 - 2);
            v34 = *(float *)(v33 + 8);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(float *)(*v27 + 8) < *(float *)(v35 + 8))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(float *)(v36 + 8) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(float *)(v40 + 8);
            v43 = *(float *)(v41 + 8);
            v44 = *(a2 - 3);
            v45 = *(float *)(v44 + 8);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(float *)(*v38 + 8) < *(float *)(v46 + 8))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(float *)(v47 + 8) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(float *)(*v13 + 8);
            v51 = *(float *)(*v27 + 8);
            v52 = *v38;
            v53 = *(float *)(*v38 + 8);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(float *)(*v9 + 8);
          v23 = *(float *)(*v13 + 8);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(float *)(*v9 + 8) < *(float *)(*v13 + 8))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(float *)(*v8 + 8) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(float *)(v55 + 8);
            if (*(float *)(*(v9 - 1) + 8) < v56)
              goto LABEL_54;
            if (v56 >= *(float *)(*v8 + 8))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(float *)(*v9 + 8));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(float *)(v70 + 8));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(float *)(v73 + 8));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(float *)(v76 + 8));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(float *)(v77 + 8));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(float *)(v55 + 8);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(float *)(v60 + 8) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(float *)(v63 + 8) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(float *)(v62 + 8) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(float *)(v67 + 8) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(float *)(v68 + 8) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(float *)(v102 + 8);
              if (v104 < *(float *)(v103 + 8))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(float *)(v103 + 8));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v136 = *v7;
            v135 = v7[1];
            v7 = v96;
            v137 = *(float *)(v135 + 8);
            if (v137 < *(float *)(v136 + 8))
            {
              do
              {
                *v96 = v136;
                v136 = *(v96 - 2);
                --v96;
              }
              while (v137 < *(float *)(v136 + 8));
              *v96 = v135;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(*a2 + 8);
  v8 = *(float *)(*result + 8);
  v9 = *a3;
  v10 = *(float *)(*a3 + 8);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(float *)(*a2 + 8) < *(float *)(*result + 8))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(float *)(*a3 + 8) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(float *)(*a4 + 8) < *(float *)(v5 + 8))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(float *)(*a3 + 8) < *(float *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(float *)(*a2 + 8) < *(float *)(*result + 8))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(float *)(*a5 + 8) < *(float *)(*a4 + 8))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(float *)(*a4 + 8) < *(float *)(*a3 + 8))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(float *)(*a3 + 8) < *(float *)(*a2 + 8))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(float *)(*a2 + 8) < *(float *)(*result + 8))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(float *)(v3 + 8) < *(float *)(*a1 + 8))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(float *)(v15 + 8);
      v17 = *(float *)(*a1 + 8);
      v18 = *(a2 - 1);
      v19 = *(float *)(v18 + 8);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(float *)(v40 + 8) < *(float *)(*a1 + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(float *)(v47 + 8) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(float *)(v21 + 8);
      v26 = *(float *)(*a1 + 8);
      v27 = *(float *)(v23 + 8);
      if (v25 >= v26)
      {
        if (v27 >= v25)
          goto LABEL_35;
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
      }
      else
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
          {
LABEL_35:
            v21 = v23;
LABEL_36:
            v42 = *(a2 - 1);
            if (*(float *)(v42 + 8) < *(float *)(v21 + 8))
            {
              *v22 = v42;
              *(a2 - 1) = v21;
              v43 = *v22;
              v44 = *v20;
              v45 = *(float *)(v43 + 8);
              if (v45 < *(float *)(v44 + 8))
              {
                a1[1] = v43;
                a1[2] = v44;
                v46 = *a1;
                if (v45 < *(float *)(*a1 + 8))
                {
                  *a1 = v43;
                  a1[1] = v46;
                }
              }
            }
            return 1;
          }
        }
      }
      *v28 = v23;
      *v29 = v24;
      v21 = v30;
      goto LABEL_36;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TrafficUtilities::enumerateTrafficRoadPiecesForTile(geo::codec::VectorTile &,zilch::TrafficSkeletonTile const&,std::shared_ptr<md::TrafficDynamicTileResource> const&,std::function<void ()(md::RoadPiece const&)> const&)::$_0 &,zilch::TrafficDynamicTile::Flow const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(float *)(v7 + 8);
      v10 = *(float *)(*a1 + 8);
      v11 = *(float *)(v5 + 8);
      if (v9 < v10)
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 >= v9)
        {
          *a1 = v7;
          a1[1] = v8;
          v12 = a1 + 1;
          v13 = a1 + 2;
          if (v11 >= v10)
            goto LABEL_19;
        }
LABEL_18:
        *v12 = v5;
        *v13 = v8;
        goto LABEL_19;
      }
      if (v11 < v9)
      {
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
        if (v11 < v10)
          goto LABEL_18;
      }
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(float *)(*v31 + 8);
        if (v37 < *(float *)(v36 + 8))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(float *)(v36 + 8));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

void md::LabelClusterTree::~LabelClusterTree(md::LabelClusterTree *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E4291B28;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 7);
    v4 = *((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 8))(v5, v4);
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v4, *((_QWORD *)this + 8) - v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  if (v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 3);
    v9 = *((_QWORD *)this + 2);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v10, v9);
      }
      while (v8 != v7);
      v9 = *((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v9, *((_QWORD *)this + 4) - v9);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E4291B28;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 7);
    v4 = *((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 8))(v5, v4);
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v4, *((_QWORD *)this + 8) - v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  if (v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 3);
    v9 = *((_QWORD *)this + 2);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v10, v9);
      }
      while (v8 != v7);
      v9 = *((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v9, *((_QWORD *)this + 4) - v9);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t (***md::LabelClusterTree::labelMarkerForClusterNode@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = *(uint64_t (****)(_QWORD))(a1 + 8);
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void std::__function::__func<md::LabelClusterTree::generateClusters(std::shared_ptr<md::LabelClusterTree> const&,NSArray *,md::LabelManager *)::$_0,std::allocator<md::LabelClusterTree::generateClusters(std::shared_ptr<md::LabelClusterTree> const&,NSArray *,md::LabelManager *)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelClusterTree::generateClusters(std::shared_ptr<md::LabelClusterTree> const&,NSArray *,md::LabelManager *)::$_0,std::allocator<md::LabelClusterTree::generateClusters(std::shared_ptr<md::LabelClusterTree> const&,NSArray *,md::LabelManager *)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD388;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelClusterTree::generateClusters(std::shared_ptr<md::LabelClusterTree> const&,NSArray *,md::LabelManager *)::$_0,std::allocator<md::LabelClusterTree::generateClusters(std::shared_ptr<md::LabelClusterTree> const&,NSArray *,md::LabelManager *)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD388;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelClusterTree::generateClusters(std::shared_ptr<md::LabelClusterTree> const&,NSArray *,md::LabelManager *)::$_0,std::allocator<md::LabelClusterTree::generateClusters(std::shared_ptr<md::LabelClusterTree> const&,NSArray *,md::LabelManager *)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::operator()(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  _DWORD v45[2];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a3;
  md::LabelPoint::lerped((md::LabelPoint *)&v42, (const md::LabelPoint *)(*a2 + 16), 0.5, a2[1] + 16);
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)(v6 + 8) = 0x437C000000000000;
  *(_OWORD *)(v6 + 16) = v42;
  *(_QWORD *)(v6 + 32) = v43;
  *(_OWORD *)(v6 + 40) = v44;
  *(_DWORD *)(v6 + 56) = v45[0];
  *(_DWORD *)(v6 + 59) = *(_DWORD *)((char *)v45 + 3);
  *(_BYTE *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 68) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_BYTE *)(v6 + 80) = 0;
  v8 = (__n128)xmmword_19FFB4C10;
  *(_OWORD *)(v6 + 84) = xmmword_19FFB4C10;
  *(_QWORD *)(v6 + 104) = 0;
  *(_BYTE *)(v6 + 112) = 0;
  *(_QWORD *)v6 = &off_1E429CA58;
  *(_QWORD *)(v6 + 120) = &off_1E42B5570;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 174) = 0;
  v9 = *a2;
  v10 = a2[1];
  *(_QWORD *)(v6 + 144) = *a2;
  *(_QWORD *)(v6 + 152) = v10;
  *(_QWORD *)(v6 + 168) = v5;
  if (*(_BYTE *)(v9 + 112))
  {
    v11 = *(unsigned __int8 *)(v10 + 112);
    *(_BYTE *)(v6 + 112) = v11;
    if (v11)
      *(_QWORD *)(v6 + 104) = *(_QWORD *)(v9 + 104);
  }
  if (*(_BYTE *)(v9 + 68))
  {
    v8.n128_u32[0] = *(_DWORD *)(v9 + 64);
LABEL_7:
    *(_DWORD *)(v6 + 64) = v8.n128_u32[0];
    *(_BYTE *)(v6 + 68) = 1;
    goto LABEL_8;
  }
  v8.n128_u32[0] = 0;
  if (*(_BYTE *)(v10 + 68))
    goto LABEL_7;
LABEL_8:
  v12 = *(_DWORD *)(v9 + 96);
  v13 = *(_DWORD *)(v10 + 96);
  if (v12 != 0x7FFFFFFF && v13 != 0x7FFFFFFF)
  {
    if (v13 >= v12)
      v14 = v12;
    else
      v14 = *(_DWORD *)(v10 + 96);
LABEL_18:
    *(_DWORD *)(v6 + 96) = v14;
    goto LABEL_19;
  }
  if (v12 == 0x7FFFFFFF)
    v14 = *(_DWORD *)(v10 + 96);
  else
    v14 = v12;
  if (v12 != 0x7FFFFFFF || v13 != 0x7FFFFFFF)
    goto LABEL_18;
LABEL_19:
  v15 = *(uint64_t **)(v4 + 56);
  v16 = *(_QWORD *)(v4 + 64);
  if ((unint64_t)v15 < v16)
  {
    if (v15)
      *v15 = v6;
    v17 = v15 + 1;
    goto LABEL_45;
  }
  v18 = *(_QWORD *)(v4 + 48);
  v19 = ((uint64_t)v15 - v18) >> 3;
  v20 = v19 + 1;
  if ((unint64_t)(v19 + 1) >> 61)
    abort();
  v21 = v16 - v18;
  if (v21 >> 2 > v20)
    v20 = v21 >> 2;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  if (v20)
  {
    v22 = 8 * v20;
    v23 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, __n128))(**(_QWORD **)(v4 + 72) + 16))(*(_QWORD *)(v4 + 72), 8 * v20, 8, v8);
    v24 = (uint64_t *)(v23 + 8 * v19);
    v20 = v23 + v22;
    if (v23)
      *v24 = v7;
  }
  else
  {
    v24 = (uint64_t *)(8 * v19);
  }
  v17 = v24 + 1;
  v25 = *(char **)(v4 + 48);
  v26 = *(char **)(v4 + 56);
  if (v26 == v25)
  {
    *(_QWORD *)(v4 + 48) = v24;
    *(_QWORD *)(v4 + 56) = v17;
    v32 = *(_QWORD *)(v4 + 64);
    *(_QWORD *)(v4 + 64) = v20;
    goto LABEL_43;
  }
  v27 = v26 - v25 - 8;
  if (v27 <= 0x57 || (v28 = (v25 - v26 + 7) & 0xFFFFFFFFFFFFFFF8, &v26[v28] < (char *)v24) && (char *)v24 + v28 < v26)
  {
    v29 = *(char **)(v4 + 56);
    do
    {
LABEL_37:
      v30 = *((_QWORD *)v29 - 1);
      v29 -= 8;
      *(_QWORD *)v29 = 0;
      *--v24 = v30;
    }
    while (v29 != v25);
    goto LABEL_38;
  }
  v36 = (v27 >> 3) + 1;
  v29 = &v26[-8 * (v36 & 0x3FFFFFFFFFFFFFFCLL)];
  v37 = v24 - 2;
  v38 = v26 - 32;
  v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v41 = *(_OWORD *)v38;
    v40 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v38 = 0uLL;
    *((_OWORD *)v38 + 1) = 0uLL;
    v38 -= 32;
    *((_OWORD *)v37 - 1) = v41;
    *(_OWORD *)v37 = v40;
    v37 -= 4;
    v39 -= 4;
  }
  while (v39);
  v24 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
  if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_37;
LABEL_38:
  v26 = *(char **)(v4 + 48);
  v31 = *(char **)(v4 + 56);
  *(_QWORD *)(v4 + 48) = v24;
  *(_QWORD *)(v4 + 56) = v17;
  v32 = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v4 + 64) = v20;
  while (v31 != v26)
  {
    v34 = *((_QWORD *)v31 - 1);
    v31 -= 8;
    v33 = v34;
    *(_QWORD *)v31 = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
LABEL_43:
  if (v26)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v4 + 72) + 40))(*(_QWORD *)(v4 + 72), v26, v32 - (_QWORD)v26);
LABEL_45:
  *(_QWORD *)(v4 + 56) = v17;
  return v7;
}

uint64_t geo::_retain_ptr<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5570;

  return a1;
}

void geo::_retain_ptr<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5570;

  JUMPOUT(0x1A1AF4E00);
}

void md::ClusterTreeClusterNode::~ClusterTreeClusterNode(md::ClusterTreeClusterNode *this)
{
  *(_QWORD *)this = &off_1E429CA58;
  *((_QWORD *)this + 15) = &off_1E42B5570;

}

{
  *(_QWORD *)this = &off_1E429CA58;
  *((_QWORD *)this + 15) = &off_1E42B5570;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ClusterTreeClusterNode::populateChildNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), a2, a3, a4);
}

uint64_t md::ClusterTreeClusterNode::populateNodes(_QWORD **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v8 = ((uint64_t (*)(_QWORD **))(*a1)[4])(a1);
  if ((v8 & a3) != 0 && (v8 & a4) == 0)
  {
    v10 = (_QWORD *)a2[1];
    v11 = a2[2];
    if ((unint64_t)v10 < v11)
    {
      if (v10)
        *v10 = a1;
      v12 = v10 + 1;
LABEL_32:
      a2[1] = (uint64_t)v12;
      goto LABEL_33;
    }
    v13 = ((uint64_t)v10 - *a2) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v15 = v11 - *a2;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (v14)
    {
      v16 = 8 * v14;
      v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v14, 8);
      v18 = (_QWORD *)(v17 + 8 * v13);
      v14 = v17 + v16;
      if (v17)
        *v18 = a1;
    }
    else
    {
      v18 = (_QWORD *)(8 * v13);
    }
    v12 = v18 + 1;
    v20 = *a2;
    v19 = a2[1];
    if (v19 == *a2)
    {
LABEL_30:
      *a2 = (uint64_t)v18;
      a2[1] = (uint64_t)v12;
      v29 = a2[2];
      a2[2] = v14;
      if (v19)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v19, v29 - v19);
      goto LABEL_32;
    }
    v21 = v19 - *a2 - 8;
    if (v21 < 0x38)
    {
      v23 = a2[1];
    }
    else if ((unint64_t)(v19 - (_QWORD)v18) < 0x20)
    {
      v23 = a2[1];
    }
    else
    {
      v22 = (v21 >> 3) + 1;
      v23 = v19 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v24 = v18 - 2;
      v25 = (__int128 *)(v19 - 16);
      v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *v24 = v27;
        v24 -= 2;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v18 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_29;
    }
    do
    {
      v28 = *(_QWORD *)(v23 - 8);
      v23 -= 8;
      *--v18 = v28;
    }
    while (v23 != v20);
LABEL_29:
    v19 = *a2;
    goto LABEL_30;
  }
LABEL_33:
  (*(void (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(*a1[18] + 24))(a1[18], a2, a3, a4);
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t))(*a1[19] + 24))(a1[19], a2, a3, a4);
}

uint64_t md::ClusterTreeClusterNode::nodeTypeMask(md::ClusterTreeClusterNode *this)
{
  if (*((_BYTE *)this + 80) == 2)
    return 20;
  if (*((_BYTE *)this + 180))
    return 12;
  return 4;
}

uint64_t md::ClusterTreeClusterNode::isLeafCluster(md::ClusterTreeClusterNode *this)
{
  return *((unsigned __int8 *)this + 180);
}

double md::ClusterTreeClusterNode::distance(md::ClusterTreeClusterNode *this)
{
  return *((double *)this + 21);
}

uint64_t md::ClusterTreeClusterNode::setupClusterNode(md::ClusterTreeClusterNode *this, char a2, float a3)
{
  *((_BYTE *)this + 80) = 1;
  *((_BYTE *)this + 180) = a2;
  if ((a2 & 1) == 0)
    *((float *)this + 3) = a3;
  md::ClusterTreeClusterNode::updateDescendantNode(this, *((md::ClusterTreeNode **)this + 18));
  return md::ClusterTreeClusterNode::updateDescendantNode(this, *((md::ClusterTreeNode **)this + 19));
}

uint64_t md::ClusterNode::waypointStoreClusterNode(md::ClusterNode *this)
{
  return 0;
}

id md::ClusterTreeClusterNode::annotation(id *this)
{
  return this[16];
}

uint64_t md::ClusterTreeClusterNode::updateDescendantNode(md::ClusterTreeClusterNode *this, md::ClusterTreeNode *a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *((_DWORD *)a2 + 2) = *((_DWORD *)this + 3);
  *((_QWORD *)a2 + 9) = this;
  if (*((_BYTE *)a2 + 80) == 1)
  {
    if (((*(uint64_t (**)(md::ClusterTreeNode *))(*(_QWORD *)a2 + 32))(a2) & 1) == 0)
    {
      *((_DWORD *)this + 44) += *((_DWORD *)a2 + 44);
      *((_BYTE *)this + 181) |= *((_BYTE *)a2 + 181);
    }
  }
  else if (!*((_BYTE *)a2 + 80))
  {
    if (((*(uint64_t (**)(md::ClusterTreeNode *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
    {
      ++*((_DWORD *)this + 44);
      if (*((_BYTE *)this + 180))
        v4 = 2;
      else
        v4 = 1;
      *((_BYTE *)a2 + 80) = v4;
    }
    else
    {
      *((_BYTE *)a2 + 80) = 2;
      md::ClusterTreeClusterNode::updateDescendantNode(this, *((md::ClusterTreeNode **)a2 + 18));
      md::ClusterTreeClusterNode::updateDescendantNode(this, *((md::ClusterTreeNode **)a2 + 19));
    }
  }
  v5 = *((_DWORD *)a2 + 21);
  if (v5 != -1)
  {
    v6 = *((_DWORD *)this + 21);
    if (v6 == -1)
      *((_DWORD *)this + 21) = v5;
    else
      *((_BYTE *)this + 181) |= v6 != v5;
  }
  v7 = *((_DWORD *)a2 + 22);
  if (v7 != -1 && *((_DWORD *)this + 22) == -1)
    *((_DWORD *)this + 22) = v7;
  result = (*(uint64_t (**)(md::ClusterTreeNode *))(*(_QWORD *)a2 + 32))(a2);
  if ((result & 1) != 0)
  {
    v11 = *((_QWORD *)this + 20);
    if (!v11 || *(_DWORD *)(v11 + 96) > *((_DWORD *)a2 + 24))
      *((_QWORD *)this + 20) = a2;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 20);
    v10 = *((_QWORD *)this + 20);
    if (!v10 || v9 && *(_DWORD *)(v10 + 96) > *(_DWORD *)(v9 + 96))
      *((_QWORD *)this + 20) = v9;
  }
  return result;
}

void md::ClusterTreeFeatureNode::~ClusterTreeFeatureNode(md::ClusterTreeFeatureNode *this)
{
  *(_QWORD *)this = &off_1E429CAC8;
  *((_QWORD *)this + 15) = &off_1E42B5570;

}

{
  *(_QWORD *)this = &off_1E429CAC8;
  *((_QWORD *)this + 15) = &off_1E42B5570;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ClusterTreeFeatureNode::populateNodes(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t result;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((result & a3) != 0 && (result & a4) == 0)
  {
    v10 = (_QWORD *)a2[1];
    v11 = a2[2];
    if ((unint64_t)v10 < v11)
    {
      if (v10)
        *v10 = a1;
      v12 = v10 + 1;
LABEL_32:
      a2[1] = (uint64_t)v12;
      return result;
    }
    v13 = ((uint64_t)v10 - *a2) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v15 = v11 - *a2;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (v14)
    {
      v16 = 8 * v14;
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v14, 8);
      v17 = (_QWORD *)(result + 8 * v13);
      v14 = result + v16;
      if (result)
        *v17 = a1;
    }
    else
    {
      v17 = (_QWORD *)(8 * v13);
    }
    v12 = v17 + 1;
    v19 = *a2;
    v18 = a2[1];
    if (v18 == *a2)
    {
LABEL_30:
      *a2 = (uint64_t)v17;
      a2[1] = (uint64_t)v12;
      v28 = a2[2];
      a2[2] = v14;
      if (v18)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v18, v28 - v18);
      goto LABEL_32;
    }
    v20 = v18 - *a2 - 8;
    if (v20 < 0x38)
    {
      v22 = a2[1];
    }
    else if ((unint64_t)(v18 - (_QWORD)v17) < 0x20)
    {
      v22 = a2[1];
    }
    else
    {
      v21 = (v20 >> 3) + 1;
      v22 = v18 - 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = v17 - 2;
      v24 = (__int128 *)(v18 - 16);
      v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v17 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_29;
    }
    do
    {
      v27 = *(_QWORD *)(v22 - 8);
      v22 -= 8;
      *--v17 = v27;
    }
    while (v22 != v19);
LABEL_29:
    v18 = *a2;
    goto LABEL_30;
  }
  return result;
}

uint64_t md::ClusterTreeFeatureNode::nodeTypeMask(md::ClusterTreeFeatureNode *this)
{
  if (*((_BYTE *)this + 80) == 2)
    return 3;
  else
    return 1;
}

uint64_t md::ClusterNode::isLeafCluster(md::ClusterNode *this)
{
  return 0;
}

double md::ClusterNode::distance(md::ClusterNode *this)
{
  return 0.0;
}

uint64_t md::ClusterNode::clusterTreeClusterNode(md::ClusterNode *this)
{
  return 0;
}

id md::ClusterTreeFeatureNode::annotation(id *this)
{
  return this[16];
}

uint64_t md::ClusterNode::clusterTreeNode(md::ClusterNode *this)
{
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(_DWORD *)(*v8 + 96) < *(_DWORD *)(*v9 + 96))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(_DWORD *)(v81 + 96);
        v83 = *(_DWORD *)(*v9 + 96);
        v84 = *v8;
        v85 = *(_DWORD *)(*v8 + 96);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v136 = *v9;
            v135 = v9[1];
            if (*(_DWORD *)(v135 + 96) < *(_DWORD *)(*v9 + 96))
            {
              *v9 = v135;
              v9[1] = v136;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(_DWORD *)(*v8 + 96) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = *v9;
        v91 = *(_DWORD *)(v87 + 96);
        v92 = *(_DWORD *)(*v9 + 96);
        v93 = *(_DWORD *)(v89 + 96);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_166;
          *v86 = v89;
          *v88 = v87;
          v94 = v9;
          v95 = v9 + 1;
          result = v87;
          if (v93 >= v92)
            goto LABEL_167;
        }
        else
        {
          v94 = v9;
          v95 = v9 + 2;
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = v87;
            v9[1] = v90;
            v94 = v9 + 1;
            v95 = v9 + 2;
            result = v90;
            if (v93 >= v92)
            {
LABEL_166:
              v87 = v89;
LABEL_167:
              if (*(_DWORD *)(*v8 + 96) < *(_DWORD *)(v87 + 96))
              {
                *v88 = *v8;
                *v8 = v87;
                v140 = *v88;
                v141 = *v86;
                v142 = *(_DWORD *)(v140 + 96);
                if (v142 < *(_DWORD *)(v141 + 96))
                {
                  v9[1] = v140;
                  v9[2] = v141;
                  v143 = *v9;
                  if (v142 < *(_DWORD *)(*v9 + 96))
                  {
                    *v9 = v140;
                    v9[1] = v143;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = result;
        goto LABEL_167;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  v112 = *v111;
                  if (2 * v108 + 2 < v11)
                  {
                    result = *(unsigned int *)(v112 + 96);
                    if ((int)result < *(_DWORD *)(v111[1] + 96))
                    {
                      v112 = v111[1];
                      ++v111;
                      v110 = 2 * v108 + 2;
                    }
                  }
                  v113 = &v9[v108];
                  v114 = *v113;
                  v115 = *(_DWORD *)(*v113 + 96);
                  if (*(_DWORD *)(v112 + 96) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v113 = v112;
                      if (v107 < v110)
                        break;
                      result = (2 * v110) | 1;
                      v111 = &v9[result];
                      v117 = 2 * v110 + 2;
                      v112 = *v111;
                      if (v117 < v11 && *(_DWORD *)(v112 + 96) < *(_DWORD *)(v111[1] + 96))
                      {
                        v112 = v111[1];
                        ++v111;
                        result = v117;
                      }
                      v113 = v116;
                      v110 = result;
                    }
                    while (*(_DWORD *)(v112 + 96) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v118 = (unint64_t)v10 >> 3;
              do
              {
                v119 = 0;
                v120 = *v9;
                v121 = v9;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = *(unsigned int *)(v124 + 96);
                    if ((int)result < *(_DWORD *)(v123[1] + 96))
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v9 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v9[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = *(_DWORD *)(*v123 + 96);
                    if (*(_DWORD *)(*v130 + 96) < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v9[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (*(_DWORD *)(*v130 + 96) < v133);
                      *v134 = v132;
                    }
                  }
                }
                v109 = v118-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(_DWORD *)(*v8 + 96);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(_DWORD *)(*v13 + 96);
            v19 = *(_DWORD *)(*v9 + 96);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(_DWORD *)(*v13 + 96) < *(_DWORD *)(*v9 + 96))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(_DWORD *)(*v8 + 96) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(_DWORD *)(v29 + 96);
            v32 = *(_DWORD *)(v30 + 96);
            v33 = *(a2 - 2);
            v34 = *(_DWORD *)(v33 + 96);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(_DWORD *)(*v27 + 96) < *(_DWORD *)(v35 + 96))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(_DWORD *)(v36 + 96) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(_DWORD *)(v40 + 96);
            v43 = *(_DWORD *)(v41 + 96);
            v44 = *(a2 - 3);
            v45 = *(_DWORD *)(v44 + 96);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(_DWORD *)(*v38 + 96) < *(_DWORD *)(v46 + 96))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(_DWORD *)(v47 + 96) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(_DWORD *)(*v13 + 96);
            v51 = *(_DWORD *)(*v27 + 96);
            v52 = *v38;
            v53 = *(_DWORD *)(*v38 + 96);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(_DWORD *)(*v9 + 96);
          v23 = *(_DWORD *)(*v13 + 96);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(_DWORD *)(*v9 + 96) < *(_DWORD *)(*v13 + 96))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(_DWORD *)(*v8 + 96) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(_DWORD *)(v55 + 96);
            if (*(_DWORD *)(*(v9 - 1) + 96) < v56)
              goto LABEL_54;
            if (v56 >= *(_DWORD *)(*v8 + 96))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(_DWORD *)(*v9 + 96));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(_DWORD *)(v70 + 96));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(_DWORD *)(v73 + 96));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(_DWORD *)(v76 + 96));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(_DWORD *)(v77 + 96));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(_DWORD *)(v55 + 96);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(_DWORD *)(v60 + 96) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(_DWORD *)(v63 + 96) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(_DWORD *)(v62 + 96) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(_DWORD *)(v67 + 96) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(_DWORD *)(v68 + 96) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(_DWORD *)(v102 + 96);
              if (v104 < *(_DWORD *)(v103 + 96))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(_DWORD *)(v103 + 96));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v138 = *v7;
            v137 = v7[1];
            v7 = v96;
            v139 = *(_DWORD *)(v137 + 96);
            if (v139 < *(_DWORD *)(v138 + 96))
            {
              do
              {
                *v96 = v138;
                v138 = *(v96 - 2);
                --v96;
              }
              while (v139 < *(_DWORD *)(v138 + 96));
              *v96 = v137;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_DWORD *)(*a2 + 96);
  v8 = *(_DWORD *)(*result + 96);
  v9 = *a3;
  v10 = *(_DWORD *)(*a3 + 96);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(_DWORD *)(*a2 + 96) < *(_DWORD *)(*result + 96))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_DWORD *)(*a3 + 96) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 96) < *(_DWORD *)(v5 + 96))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(_DWORD *)(*a3 + 96) < *(_DWORD *)(*a2 + 96))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(_DWORD *)(*a2 + 96) < *(_DWORD *)(*result + 96))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(_DWORD *)(*a5 + 96) < *(_DWORD *)(*a4 + 96))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(_DWORD *)(*a4 + 96) < *(_DWORD *)(*a3 + 96))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_DWORD *)(*a3 + 96) < *(_DWORD *)(*a2 + 96))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(_DWORD *)(*a2 + 96) < *(_DWORD *)(*result + 96))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(_DWORD *)(v3 + 96) < *(_DWORD *)(*a1 + 96))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(_DWORD *)(v15 + 96);
      v17 = *(_DWORD *)(*a1 + 96);
      v18 = *(a2 - 1);
      v19 = *(_DWORD *)(v18 + 96);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(_DWORD *)(v40 + 96) < *(_DWORD *)(*a1 + 96))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 96) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(_DWORD *)(v21 + 96);
      v26 = *(_DWORD *)(*a1 + 96);
      v27 = *(_DWORD *)(v23 + 96);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 96) < *(_DWORD *)(v21 + 96))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(_DWORD *)(v43 + 96);
        if (v45 < *(_DWORD *)(v44 + 96))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 96))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(_DWORD *)(v7 + 96);
      v10 = *(_DWORD *)(*a1 + 96);
      v11 = *(_DWORD *)(v5 + 96);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(_DWORD *)(*v31 + 96);
        if (v37 < *(_DWORD *)(v36 + 96))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_DWORD *)(v36 + 96));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

void ggl::PolygonStrokeMask::MeshPipelineSetup::~MeshPipelineSetup(ggl::PolygonStrokeMask::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonStrokeMask::MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonStrokeMask::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::PolygonStrokeMask::MeshPipelineSetup::textureIsEnabled(ggl::PolygonStrokeMask::MeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::FlyoverGroundTileResourceFetcher::~FlyoverGroundTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::FlyoverGroundTileResourceFetcher::downloadZoomRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(this + 592))
  {
    v2 = *(_QWORD *)(this + 596);
    *(_QWORD *)(a2 + 4) = v2;
    *(_BYTE *)a2 = 1;
    if (*(_DWORD *)(this + 556) == 66)
    {
      if (v2 <= 2)
        LODWORD(v2) = 2;
      *(_DWORD *)(a2 + 4) = v2;
    }
  }
  return this;
}

void md::HillshadeTileData::~HillshadeTileData(md::HillshadeTileData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4292618;
  *((_QWORD *)this + 79) = &unk_1E4292658;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4292618;
  *((_QWORD *)this + 79) = &unk_1E4292658;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::SelectedPolygonLayerDataSource::~SelectedPolygonLayerDataSource(md::SelectedPolygonLayerDataSource *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A7C00;
  v2 = (_QWORD *)*((_QWORD *)this + 103);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E429D898;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 99);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *((_QWORD *)this + 95) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A7C00;
  v2 = (_QWORD *)*((_QWORD *)this + 103);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = &off_1E429D898;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 99);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *((_QWORD *)this + 95) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::SelectedPolygonLayerDataSource::setSelectedFeatureId(md::SelectedPolygonLayerDataSource *this, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6[2];
  void *__p[2];
  int v8;

  *(_OWORD *)v6 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 1065353216;
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v6, a2, a2);
  if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*((_QWORD **)this + 103), *((_QWORD *)this + 104), (uint64_t *)v6))
  {
    gdc::LayerDataSource::cancelAllLayerDataRequests(this);
    gdc::LayerDataStore::clearAllData(*((gdc::LayerDataStore **)this + 2));
    if ((void **)((char *)this + 808) != v6)
    {
      *((_DWORD *)this + 210) = v8;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)this + 101, (_QWORD *)__p[0]);
    }
  }
  v3 = __p[0];
  if (__p[0])
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = v6[0];
  v6[0] = 0;
  if (v5)
    operator delete(v5);
}

void sub_19F85ED70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F85ED84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void md::SelectedPolygonLayerDataSource::deselectFeatureId(md::SelectedPolygonLayerDataSource *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5[2];
  void *__p[2];
  int v7;

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)__p = 0u;
  v7 = 1065353216;
  if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*((_QWORD **)this + 103), *((_QWORD *)this + 104), (uint64_t *)v5))
  {
    gdc::LayerDataSource::cancelAllLayerDataRequests(this);
    gdc::LayerDataStore::clearAllData(*((gdc::LayerDataStore **)this + 2));
    if ((void **)((char *)this + 808) != v5)
    {
      *((_DWORD *)this + 210) = 1065353216;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)this + 101, 0);
      v2 = __p[0];
      if (__p[0])
      {
        do
        {
          v3 = (_QWORD *)*v2;
          operator delete(v2);
          v2 = v3;
        }
        while (v3);
      }
    }
  }
  v4 = v5[0];
  v5[0] = 0;
  if (v4)
    operator delete(v4);
}

void sub_19F85EE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL md::SelectedPolygonLayerDataSource::shouldFilterFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 + 40) != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
}

BOOL std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  if (a3[3] != a2)
    return 0;
  v3 = a3[1];
  if (v3)
  {
    v4 = v3 - 1;
    v5 = *a3;
    if ((v3 & (v3 - 1)) != 0)
    {
      if (a1)
      {
LABEL_16:
        v11 = a1[2];
        v12 = v11;
        if (v11 >= v3)
          v12 = v11 % v3;
        v13 = *(_QWORD **)(v5 + 8 * v12);
        if (v13)
        {
          while (1)
          {
            v13 = (_QWORD *)*v13;
            if (!v13)
              break;
            v14 = v13[1];
            if (v11 == v14)
            {
              if (v13[2] == v11)
              {
                a1 = (_QWORD *)*a1;
                v9 = 1;
                if (a1)
                  goto LABEL_16;
                return v9;
              }
            }
            else
            {
              if (v14 >= v3)
                v14 %= v3;
              if (v14 != v12)
                return 0;
            }
          }
        }
        return 0;
      }
    }
    else if (a1)
    {
LABEL_5:
      v6 = a1[2];
      v7 = *(_QWORD **)(v5 + 8 * (v4 & v6));
      if (v7)
      {
        while (1)
        {
          v7 = (_QWORD *)*v7;
          if (!v7)
            break;
          v8 = v7[1];
          if (v6 == v8)
          {
            if (v7[2] == v6)
            {
              a1 = (_QWORD *)*a1;
              v9 = 1;
              if (a1)
                goto LABEL_5;
              return v9;
            }
          }
          else if ((v8 & v4) != (v4 & v6))
          {
            return 0;
          }
        }
      }
      return 0;
    }
    return 1;
  }
  else
  {
    return a1 == 0;
  }
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = a2[2];
      v7 = (_QWORD *)*v6;
      std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi((uint64_t)a1, v6);
      a2 = (_QWORD *)*a2;
      v6 = v7;
      if (!v7)
        goto LABEL_7;
    }
    do
    {
      v10 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v8 = operator new(0x18uLL);
      *v8 = 0;
      v9 = a2[2];
      v8[1] = v9;
      v8[2] = v9;
      std::__hash_table<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::PolygonRouteAttributes>>>::__node_insert_multi((uint64_t)a1, v8);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_19F85F060(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::FlyoverRoadStyle::~FlyoverRoadStyle(md::FlyoverRoadStyle *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E4291A80;
  v2 = *((_QWORD *)this + 43);
  if (v2)
  {
    *((_QWORD *)this + 44) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 46) + 40))(*((_QWORD *)this + 46), v2, *((_QWORD *)this + 45) - v2);
  }
  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    *((_QWORD *)this + 39) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 41) + 40))(*((_QWORD *)this + 41), v3, *((_QWORD *)this + 40) - v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E4291A80;
  v2 = *((_QWORD *)this + 43);
  if (v2)
  {
    *((_QWORD *)this + 44) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 46) + 40))(*((_QWORD *)this + 46), v2, *((_QWORD *)this + 45) - v2);
  }
  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    *((_QWORD *)this + 39) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 41) + 40))(*((_QWORD *)this + 41), v3, *((_QWORD *)this + 40) - v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::FlyoverRoadStyle::willBeDrawn(md::FlyoverRoadStyle *this, altitude::View *a2)
{
  float v4;
  float v5;
  unsigned __int16 **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 *v16;
  unsigned int v17;
  float *v18;
  float v19;
  BOOL v20;
  int v21;
  char v22;
  char v23;
  float v24;
  uint64_t v25;
  float *v26;
  float v27;
  _BOOL4 v28;
  unsigned int v30;
  float v31;
  _BOOL4 v32;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  float v39;
  unsigned int v40;
  float v41;
  unsigned int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unsigned __int16 *v47;
  unsigned int v48;
  float *v49;
  float v50;
  int v51;
  char v52;
  char v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  float v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned __int16 *v76;
  unsigned int v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  int v83;
  char v84;
  char v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  int v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  double v102;
  float v103;
  float v104;
  float v105;
  int v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  uint64_t v120;
  float v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  int v147;
  unsigned __int16 **v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unsigned __int8 v152;
  char v153;

  if (!*((_QWORD *)this + 2))
  {
    *((_BYTE *)this + 289) = 0;
    return;
  }
  v4 = fmaxf((float)(*((float *)a2 + 330) * 0.1) + -5.0, 0.0);
  if (v4 <= 1.0)
    v5 = 1.0 - v4;
  else
    v5 = 0.0;
  v6 = (unsigned __int16 **)*((_QWORD *)this + 34);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v149 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v149 = 0;
  }
  v150 = 0;
  v151 = 0;
  v148 = v6;
  v152 = 0;
  if (v6)
    LODWORD(v6) = (*((uint64_t (**)(unsigned __int16 **, uint64_t *))*v6 + 6))(v6, &v150);
  v152 = v6;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    LODWORD(v6) = v152;
  }
  if ((_DWORD)v6)
  {
    v13 = *((_DWORD *)a2 + 340);
    v14 = *((_DWORD *)a2 + 339);
    v15 = *((_DWORD *)a2 + 341);
    v16 = v148[3];
    if (v14 >= 0x17u)
      v17 = 23;
    else
      v17 = *((_DWORD *)a2 + 339);
    v18 = *(float **)v16;
    if (*(_QWORD *)v16
      && (v19 = *v18, LODWORD(v18) = *v18 == 1.0, *((_BYTE *)v16 + 10))
      && (v19 != 0.0 ? (v20 = v19 == 1.0) : (v20 = 1), !v20)
      || (v21 = *((unsigned __int8 *)v16 + v18 + 11), v19 = 0.0, v21 == 2))
    {
      LOBYTE(v145) = 1;
      BYTE4(v144) = 1;
      v22 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v16, 0x5Bu, v17, 0, &v145);
      v23 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v16, 0x5Bu, v17, 1, (_BYTE *)&v144 + 4);
      if (v19 < 1.0)
        v23 = v22;
    }
    else
    {
      v23 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v148[3], 0x5Bu, v17, v21, 0);
    }
    *((_BYTE *)this + 289) = v23 != 0;
    *((_BYTE *)this + 292) = *((_DWORD *)this + *((unsigned int *)a2 + 339) + 7);
    if (*((_DWORD *)this + 6) <= 8u && v5 <= 0.0)
    {
      *((_BYTE *)this + 289) = 0;
      goto LABEL_124;
    }
    if (!v23)
      goto LABEL_124;
    v24 = (float)v14;
    v25 = (uint64_t)v148[3];
    v26 = *(float **)v25;
    if (*(_QWORD *)v25)
    {
      v27 = *v26;
      v28 = *v26 == 1.0;
      if (*(_BYTE *)(v25 + 10))
      {
        if (v27 != 0.0 && v27 != 1.0)
        {
LABEL_51:
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd((uint64_t)v148[3], 0x12Cu, 0) & 1) != 0)
            goto LABEL_67;
          v30 = 1;
LABEL_53:
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v25, 0x12Cu, v30) & 1) != 0)
            goto LABEL_67;
          if (v26)
          {
            v31 = *v26;
            v32 = *v26 == 1.0;
            if (*(_BYTE *)(v25 + 10))
            {
              if (v31 != 0.0 && v31 != 1.0)
                goto LABEL_64;
            }
          }
          else
          {
            v32 = 0;
          }
          v34 = *(unsigned __int8 *)(v25 + v32 + 11);
          if (v34 != 2)
          {
LABEL_66:
            if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v25, 0x12Du, v34))
            {
              v37 = 0;
              goto LABEL_72;
            }
LABEL_67:
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v145, v25, 0x12Cu, v17, 2);
            v35 = *((_QWORD *)this + 38);
            if (v35)
            {
              *((_QWORD *)this + 39) = v35;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 41) + 40))(*((_QWORD *)this + 41), v35, *((_QWORD *)this + 40) - v35);
            }
            *((_OWORD *)this + 19) = v145;
            *((_QWORD *)this + 40) = v146;
            *((_DWORD *)this + 84) = v147;
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v145, (uint64_t)v148[3], 0x12Du, v17, 2);
            v36 = *((_QWORD *)this + 43);
            if (v36)
            {
              *((_QWORD *)this + 44) = v36;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 46) + 40))(*((_QWORD *)this + 46), v36, *((_QWORD *)this + 45) - v36);
            }
            *(_OWORD *)((char *)this + 344) = v145;
            *((_QWORD *)this + 45) = v146;
            *((_DWORD *)this + 94) = v147;
            v37 = 1;
LABEL_72:
            v144 = 0;
            v143 = 0;
            md::getRoadWidths((uint64_t)&v148, (float *)&v144 + 1, (float *)&v144, (char *)&v143 + 1, v24);
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v145, (uint64_t)v148[3], 0x5Cu, v17, 2u, 0);
            LOWORD(v38) = v145;
            v39 = (float)v38;
            LOWORD(v38) = WORD1(v145);
            *(float *)&v40 = (float)v38;
            v140 = *(float *)&v40;
            LOWORD(v40) = WORD2(v145);
            v41 = (float)v40;
            LOWORD(v40) = WORD3(v145);
            v135 = (float)v40;
            v137 = v41;
            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v145, (uint64_t)v148[3], 0x5Du, v17, 2u, 0);
            LOWORD(v42) = v145;
            v43 = (float)v42;
            LOWORD(v42) = WORD1(v145);
            v44 = (float)v42;
            LOWORD(v42) = WORD2(v145);
            v45 = (float)v42;
            LOWORD(v42) = WORD3(v145);
            v46 = (float)v42;
            v142 = 0;
            v47 = v148[3];
            if (v15 >= 0x17u)
              v48 = 23;
            else
              v48 = v15;
            v49 = *(float **)v47;
            if (*(_QWORD *)v47
              && (v50 = *v49, LODWORD(v49) = *v49 == 1.0, *((_BYTE *)v47 + 10))
              && v50 != 0.0
              && v50 != 1.0
              || (v51 = *((unsigned __int8 *)v47 + v49 + 11), v50 = 0.0, v51 == 2))
            {
              LOBYTE(v145) = 1;
              v153 = 1;
              v52 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v47, 0x5Bu, v48, 0, &v145);
              v53 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v47, 0x5Bu, v48, 1, &v153);
              if (v50 < 1.0)
                v53 = v52;
            }
            else
            {
              v53 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v148[3], 0x5Bu, v48, v51, 0);
            }
            v139 = v5;
            v54 = v39 * 0.000015259;
            v55 = v137 * 0.000015259;
            v56 = v43 * 0.000015259;
            v57 = v44 * 0.000015259;
            v58 = v45 * 0.000015259;
            v132 = v46 * 0.000015259;
            v133 = v135 * 0.000015259;
            if (v53)
            {
              v59 = v137 * 0.000015259;
              v60 = v45 * 0.000015259;
              md::getRoadWidths((uint64_t)&v148, (float *)&v142 + 1, (float *)&v142, (char *)&v143, (float)v15);
              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v145, (uint64_t)v148[3], 0x5Cu, v48, 2u, 0);
              LOWORD(v62) = WORD1(v145);
              LOWORD(v61) = v145;
              LOWORD(v64) = WORD3(v145);
              LOWORD(v63) = WORD2(v145);
              v136 = (float)v62 * 0.000015259;
              v138 = (float)v61 * 0.000015259;
              v134 = (float)v63 * 0.000015259;
              v65 = (float)v64 * 0.000015259;
              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v145, (uint64_t)v148[3], 0x5Du, v48, 2u, 0);
              LOWORD(v66) = v145;
              LOWORD(v68) = WORD2(v145);
              LOWORD(v67) = WORD1(v145);
              LOWORD(v69) = WORD3(v145);
              v70 = (float)v66 * 0.000015259;
              v71 = (float)v67 * 0.000015259;
              v58 = v60;
              v72 = (float)v68 * 0.000015259;
              v73 = (float)v69 * 0.000015259;
            }
            else
            {
              v142 = v144;
              v74 = *((float *)a2 + 344);
              v65 = v74 * (float)(v135 * 0.000015259);
              v70 = v56;
              v71 = v57;
              v73 = v74 * (float)(v46 * 0.000015259);
              v72 = v58;
              v136 = v140 * 0.000015259;
              v138 = v54;
              v59 = v55;
              v134 = v55;
            }
            v75 = v140 * 0.000015259;
            v141 = v57;
            v76 = v148[3];
            if (v13 >= 0x17u)
              v77 = 23;
            else
              v77 = v13;
            v78 = *(float **)v76;
            v79 = v59;
            v130 = v70;
            v131 = v58;
            v128 = v72;
            v129 = v71;
            if (*(_QWORD *)v76)
            {
              v80 = v56;
              v81 = *v78;
              LODWORD(v78) = *v78 == 1.0;
              v82 = v139;
              if (*((_BYTE *)v76 + 10) && v81 != 0.0 && v81 != 1.0)
                goto LABEL_97;
            }
            else
            {
              v80 = v56;
              v82 = v139;
            }
            v83 = *((unsigned __int8 *)v76 + v78 + 11);
            v81 = 0.0;
            if (v83 != 2)
            {
              v85 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v76, 0x5Bu, v77, v83, 0);
LABEL_101:
              v86 = *((float *)a2 + 344);
              v87 = 1.0;
              if (v85)
                v88 = 1.0;
              else
                v88 = *((float *)a2 + 344);
              v89 = v88 * v132;
              v90 = v88 * v133;
              v91 = (float)(v88 * v133) * v82;
              v92 = (float)(v88 * v132) * v82;
              v93 = v65 * v82;
              v94 = v73 * v82;
              if (*((_DWORD *)this + 6) <= 8u)
              {
                v95 = v91;
              }
              else
              {
                v94 = v73;
                v93 = v65;
                v92 = v89;
                v95 = v90;
              }
              v96 = HIBYTE(v143);
              v97 = *(float *)&v144;
              if (HIBYTE(v143))
                v97 = *((float *)&v144 + 1);
              v98 = *(float *)&v142;
              if ((_BYTE)v143)
                v98 = *((float *)&v142 + 1);
              v99 = *((float *)a2 + 347);
              v100 = (float)(*((float *)&v144 + 1)
                           + (float)((float)(*((float *)&v142 + 1) - *((float *)&v144 + 1)) * v86))
                   * v99;
              v101 = (float)(v97 + (float)((float)(v98 - v97) * v86)) * v99;
              v102 = 1.0 / v99;
              v103 = v102 + v100;
              v104 = v102 + v101;
              if (v37)
              {
                v100 = v103;
                v101 = v104;
              }
              v105 = fminf(v100, v101);
              if (*(_BYTE *)(*((_QWORD *)a2 + 4) + 49))
                v106 = v37;
              else
                v106 = 1;
              if (v106)
                v87 = 1.25;
              *((_BYTE *)this + 288) = 1;
              v107 = *((float *)a2 + 346);
              v108 = v107 * v105;
              v109 = v108 * v87;
              v110 = v107 * v101;
              v111 = fmaxf(v108 - v107, 0.0) / v110;
              v112 = fmaxf((float)(v108 * v87) - v107, 0.0);
              v113 = (float)(v110 - v108) / (float)(v108 + v108);
              if (v106)
                v112 = v109;
              else
                v113 = v111;
              *((float *)this + 98) = v113;
              *((float *)this + 99) = v112;
              *((float *)this + 100) = v110 * v87;
              v114 = v93 - v95;
              v115 = v54 + (float)(v86 * (float)(v138 - v54));
              v116 = v75 + (float)(v86 * (float)(v136 - v75));
              v117 = v79 + (float)(v86 * (float)(v134 - v79));
              *((float *)this + 101) = v115;
              *((float *)this + 102) = v116;
              v118 = v95 + (float)(v86 * v114);
              *((float *)this + 103) = v117;
              *((float *)this + 104) = v118;
              if (!v96)
              {
                v119 = *((float *)a2 + 344);
                v115 = v80 + (float)(v119 * (float)(v130 - v80));
                v116 = v141 + (float)(v119 * (float)(v129 - v141));
                v117 = v131 + (float)(v119 * (float)(v128 - v131));
                v118 = v92 + (float)(v119 * (float)(v94 - v92));
              }
              *((float *)this + 105) = v115;
              *((float *)this + 106) = v116;
              *((float *)this + 107) = v117;
              *((float *)this + 108) = v118;
              v120 = *((unsigned int *)a2 + 339);
              v121 = (double)(1 << (19 - v120)) * 64.0;
              *((float *)this + 96) = v121;
              *((float *)this + 97) = *((float *)a2 + 345) / v121;
              *((_BYTE *)this + 293) = *((_DWORD *)this + v120 + 27);
              goto LABEL_124;
            }
LABEL_97:
            LOBYTE(v145) = 1;
            v153 = 1;
            v84 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v76, 0x5Bu, v77, 0, &v145);
            v85 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(v76, 0x5Bu, v77, 1, &v153);
            if (v81 < 1.0)
              v85 = v84;
            goto LABEL_101;
          }
LABEL_64:
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v25, 0x12Du, 0) & 1) != 0)
            goto LABEL_67;
          v34 = 1;
          goto LABEL_66;
        }
      }
    }
    else
    {
      v28 = 0;
    }
    v30 = *(unsigned __int8 *)(v25 + v28 + 11);
    if (v30 != 2)
      goto LABEL_53;
    goto LABEL_51;
  }
LABEL_124:
  if (v152)
    (*((void (**)(unsigned __int16 **))*v148 + 7))(v148);
  v122 = v151;
  if (v151)
  {
    v123 = (unint64_t *)&v151->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v149;
  if (v149)
  {
    v126 = (unint64_t *)&v149->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
}

void md::SettingsLogic::~SettingsLogic(md::SettingsLogic *this)
{
  md::SettingsLogic::~SettingsLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *v6;
  char v7;

  *(_QWORD *)this = &off_1E428E720;
  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
  {
    v3 = *(void ***)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (void **)*v3;
        v5 = *((unsigned int *)v3 + 8);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, void **))off_1E42EF740[v5])(&v7, v3 + 3);
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v6 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v6)
      operator delete(v6);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C408EF24B1CLL);
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0xC97B9E962ADF4AD4 && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBA80;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__0NS_9allocatorISH_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBA38;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBA38;
  a2[1] = v2;
  return result;
}

void md::SettingsContext::~SettingsContext(md::SettingsContext *this)
{
  _QWORD *v2;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 4));
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

_QWORD *gdc::ManagedObjectHolder<md::SettingsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E42B0D70;
  v2 = a1[4];
  if (v2)
  {
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v2 + 32));
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1060C40888B34ABLL);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::SettingsContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *a1 = &off_1E42B0D70;
  v1 = a1[4];
  if (v1)
  {
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 32));
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x1A1AF4E00](v1, 0x1060C40888B34ABLL);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::SettingsContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISB_EEEENS8_INSA_IN2gm6MatrixIfLi3ELi1EEEEENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSE_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISB_EEEENS8_INSA_IN2gm6MatrixIfLi3ELi1EEEEENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSE_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void sub_19F860094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)LabelNavRouteContextObserverProxy;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F8602F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F8603E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F860444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::unordered_map<md::DaVinciGroundSettings::Property,md::DaVinciGroundSettings::PropertyType>::unordered_map(int *a1, uint64_t a2)
{
  unint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD **v22;
  size_t v23;
  size_t v24;
  size_t v25;
  _QWORD *i;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v38;

  *(_OWORD *)&qword_1EE57A968 = 0u;
  dword_1EE57A978 = 1065353216;
  if (!a2)
    return;
  v3 = a1;
  v4 = 0;
  v5 = 0;
  v6 = &a1[2 * a2];
  do
  {
    v7 = *v3;
    if (v4)
    {
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v2 = *v3;
        if (v4 <= v7)
          v2 = v7 % v4;
      }
      else
      {
        v2 = (v4 - 1) & v7;
      }
      if (v9)
      {
        v10 = *v9;
        if (v10)
        {
          if (v8.u32[0] < 2uLL)
          {
            while (1)
            {
              v12 = v10[1];
              if (v12 == v7)
              {
                if (*((_DWORD *)v10 + 4) == (_DWORD)v7)
                  goto LABEL_83;
              }
              else if ((v12 & (v4 - 1)) != v2)
              {
                goto LABEL_23;
              }
              v10 = (uint64_t *)*v10;
              if (!v10)
                goto LABEL_23;
            }
          }
          do
          {
            v11 = v10[1];
            if (v11 == v7)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v7)
                goto LABEL_83;
            }
            else
            {
              if (v11 >= v4)
                v11 %= v4;
              if (v11 != v2)
                break;
            }
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
      }
    }
LABEL_23:
    v13 = operator new(0x18uLL);
    *v13 = 0;
    v13[1] = v7;
    v13[2] = *(_QWORD *)v3;
    v14 = (float)(unint64_t)(v5 + 1);
    if (!v4 || (float)(*(float *)&dword_1EE57A978 * (float)v4) < v14)
    {
      v15 = (v4 & (v4 - 1)) != 0;
      if (v4 < 3)
        v15 = 1;
      v16 = v15 | (2 * v4);
      v17 = vcvtps_u32_f32(v14 / *(float *)&dword_1EE57A978);
      if (v16 <= v17)
        prime = v17;
      else
        prime = v16;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      if (prime <= v4)
      {
        if (prime >= v4)
          goto LABEL_60;
        v29 = vcvtps_u32_f32((float)(unint64_t)qword_1EE57A970 / *(float *)&dword_1EE57A978);
        if (v4 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
        {
          v29 = std::__next_prime(v29);
        }
        else
        {
          v31 = 1 << -(char)__clz(v29 - 1);
          if (v29 >= 2)
            v29 = v31;
        }
        if (prime <= v29)
          prime = v29;
        if (prime >= v4)
        {
LABEL_60:
          if ((v4 & (v4 - 1)) != 0)
          {
            if (v4 <= v7)
              v2 = v7 % v4;
            else
              v2 = v7;
          }
          else
          {
            v2 = (v4 - 1) & v7;
          }
          goto LABEL_73;
        }
        if (!prime)
        {
          if (v38)
            operator delete(v38);
          v4 = 0;
          goto LABEL_60;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = operator new(8 * prime);
      if (v20)
        operator delete(v20);
      v21 = 0;
      do
      while (prime != v21);
      v22 = (_QWORD **)qword_1EE57A968;
      if (!qword_1EE57A968)
      {
LABEL_59:
        v4 = prime;
        goto LABEL_60;
      }
      v23 = *(_QWORD *)(qword_1EE57A968 + 8);
      v24 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v25 = v23 & v24;
        for (i = *v22; *v22; i = *v22)
        {
          v27 = i[1] & v24;
          if (v27 == v25)
          {
            v22 = (_QWORD **)i;
          }
          {
            *v22 = (_QWORD *)*i;
            v28 = 8 * v27;
          }
          else
          {
            v22 = (_QWORD **)i;
            v25 = v27;
          }
        }
        goto LABEL_59;
      }
      if (v23 >= prime)
        v23 %= prime;
      v32 = *v22;
      if (!*v22)
        goto LABEL_59;
      while (1)
      {
        v34 = v32[1];
        if (v34 >= prime)
          v34 %= prime;
        if (v34 != v23)
        {
          {
            goto LABEL_64;
          }
          *v22 = (_QWORD *)*v32;
          v33 = 8 * v34;
          v32 = v22;
        }
        v34 = v23;
LABEL_64:
        v22 = (_QWORD **)v32;
        v32 = (_QWORD *)*v32;
        v23 = v34;
        if (!v32)
          goto LABEL_59;
      }
    }
LABEL_73:
    if (v36)
    {
      *v13 = *v36;
LABEL_81:
      *v36 = v13;
      goto LABEL_82;
    }
    *v13 = qword_1EE57A968;
    qword_1EE57A968 = (uint64_t)v13;
    *(_QWORD *)(v35 + 8 * v2) = &qword_1EE57A968;
    if (*v13)
    {
      v37 = *(_QWORD *)(*v13 + 8);
      if ((v4 & (v4 - 1)) != 0)
      {
        if (v37 >= v4)
          v37 %= v4;
      }
      else
      {
        v37 &= v4 - 1;
      }
      goto LABEL_81;
    }
LABEL_82:
    v5 = ++qword_1EE57A970;
LABEL_83:
    v3 += 2;
  }
  while (v3 != v6);
}

uint64_t std::unordered_map<md::DaVinciGroundSettings::Property,md::DaVinciGroundSettings::PropertyType>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorIZZN2md21DaVinciGroundSettings31_parsePropertyValuesInZoomBlockEN2gm5RangeIhEEP12NSDictionaryEUb_E3__1EEJRNS0_6__baseILNS0_6_TraitE1EJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISN_EEEENSK_INSM_INSA_6MatrixIfLi3ELi1EEEEENSO_IST_EEEEEEEEEEDcT_DpT0_(int **a1, _QWORD *a2)
{
  int *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t (**v8)();
  id v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE buf[24];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) == 0)
  {
    v4 = *v3;
    v5 = (_QWORD *)operator new();
    if (v4)
    {
      v6 = 0;
      v7 = 1;
      v8 = off_1E42C1030;
    }
    else
    {
      v7 = 0;
      v5[1] = &off_1E42C7088;
      v5[2] = gms::lerp<float>;
      v6 = v5 + 1;
      v8 = off_1E42C1180;
    }
    v5[6] = 0;
    v5[7] = 0;
    *v5 = v8;
    v5[4] = v6;
    v5[5] = v5 + 6;
    *(_DWORD *)&buf[8] = v7;
    v13 = *((_QWORD *)v3 + 1);
    *(_QWORD *)buf = v5;
    ((void (*)(uint64_t *))off_1E42EF750[v7])(&v13);
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E42EF740[*(unsigned int *)&buf[8]])(&v13, buf);
  }
  v9 = *((id *)v3 + 2);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v9, "floatValue");
    buf[0] = 1;
    *(_DWORD *)&buf[4] = v10;

    (*(void (**)(_QWORD, int *, uint64_t, _BYTE *))(*(_QWORD *)*a2 + 8))(*a2, v3 + 6, (uint64_t)v3 + 25, &buf[4]);
  }
  else
  {

    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v11 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *((_QWORD *)v3 + 4);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: Type mismatch for key: %@", buf, 0xCu);
    }

  }
}

void sub_19F860C30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorIZZN2md21DaVinciGroundSettings31_parsePropertyValuesInZoomBlockEN2gm5RangeIhEEP12NSDictionaryEUb_E3__1EEJRNS0_6__baseILNS0_6_TraitE1EJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISN_EEEENSK_INSM_INSA_6MatrixIfLi3ELi1EEEEENSO_IST_EEEEEEEEEEDcT_DpT0_(int **a1, _QWORD *a2)
{
  int *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t (**v8)();
  NSObject *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint8_t buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) == 0)
  {
    v4 = *v3;
    v5 = (_QWORD *)operator new();
    if (v4)
    {
      v6 = 0;
      v7 = 1;
      v8 = off_1E42C1030;
    }
    else
    {
      v7 = 0;
      v5[1] = &off_1E42C7088;
      v5[2] = gms::lerp<float>;
      v6 = v5 + 1;
      v8 = off_1E42C1180;
    }
    v5[6] = 0;
    v5[7] = 0;
    *v5 = v8;
    v5[4] = v6;
    v5[5] = v5 + 6;
    v11 = v5;
    v12 = v7;
    *(_QWORD *)buf = *((_QWORD *)v3 + 1);
    ((void (*)(uint8_t *))off_1E42EF750[v7])(buf);
    ((void (*)(uint8_t *, _QWORD **))off_1E42EF740[v12])(buf, &v11);
  }
  if ((_BYTE)v11)
  {
    (*(void (**)(_QWORD, int *, uint64_t, char *))(*(_QWORD *)*a2 + 8))(*a2, v3 + 6, (uint64_t)v3 + 25, (char *)&v11 + 4);
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v9 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *((_QWORD *)v3 + 4);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: Type mismatch for key: %@", buf, 0xCu);
    }

  }
}

void std::unordered_map<std::string,md::DaVinciGroundSettings::Property>::unordered_map(__int128 *a1, uint64_t a2)
{
  unint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __guard *v5;
  int v6;
  const std::string::value_type *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  uint64_t *v26;
  int v27;
  char *v28;
  std::string *v29;
  __int128 v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD **v39;
  size_t v40;
  size_t v41;
  size_t v42;
  _QWORD *i;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  _QWORD *v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  __int128 *v56;

  *(_OWORD *)&qword_1EE57A998 = 0u;
  dword_1EE57A9A8 = 1065353216;
  if (!a2)
    return;
  v3 = a1;
  v4 = 0;
  v56 = &a1[2 * a2];
  do
  {
    v6 = *((char *)v3 + 23);
    v7 = *(const std::string::value_type **)v3;
    if (v6 >= 0)
      v8 = (uint64_t *)v3;
    else
      v8 = *(uint64_t **)v3;
    if (v6 >= 0)
      v9 = *((unsigned __int8 *)v3 + 23);
    else
      v9 = *((_QWORD *)v3 + 1);
    v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
    v11 = v10;
    v12 = v5[306];
    if (v12)
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v2 = v10;
        if (v10 >= v12)
          v2 = v10 % v12;
      }
      else
      {
        v2 = (v12 - 1) & v10;
      }
      if (v14)
      {
        v15 = *v14;
        if (*v14)
        {
          if (v13.u32[0] < 2uLL)
          {
            v16 = v12 - 1;
            while (1)
            {
              v22 = v15[1];
              if (v22 == v11)
              {
                v23 = *((unsigned __int8 *)v15 + 39);
                if ((v23 & 0x80u) == 0)
                  v24 = *((unsigned __int8 *)v15 + 39);
                else
                  v24 = v15[3];
                if (v24 == v9)
                {
                  v25 = (const void **)(v15 + 2);
                  if ((v23 & 0x80) != 0)
                  {
                    v55 = v16;
                    v27 = memcmp(*v25, v8, v15[3]);
                    v16 = v55;
                    if (!v27)
                      goto LABEL_52;
                  }
                  else
                  {
                    if (!*((_BYTE *)v15 + 39))
                      goto LABEL_52;
                    v26 = v8;
                    while (*(unsigned __int8 *)v25 == *(unsigned __int8 *)v26)
                    {
                      v25 = (const void **)((char *)v25 + 1);
                      v26 = (uint64_t *)((char *)v26 + 1);
                      if (!--v23)
                        goto LABEL_52;
                    }
                  }
                }
              }
              else if ((v22 & v16) != v2)
              {
                goto LABEL_53;
              }
              v15 = (uint64_t *)*v15;
              if (!v15)
                goto LABEL_53;
            }
          }
          do
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              v18 = *((unsigned __int8 *)v15 + 39);
              if ((v18 & 0x80u) == 0)
                v19 = *((unsigned __int8 *)v15 + 39);
              else
                v19 = v15[3];
              if (v19 == v9)
              {
                v20 = (const void **)(v15 + 2);
                if ((v18 & 0x80) != 0)
                {
                  if (!memcmp(*v20, v8, v15[3]))
                  {
LABEL_52:
                    goto LABEL_5;
                  }
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    goto LABEL_52;
                  v21 = v8;
                  while (*(unsigned __int8 *)v20 == *(unsigned __int8 *)v21)
                  {
                    v20 = (const void **)((char *)v20 + 1);
                    v21 = (uint64_t *)((char *)v21 + 1);
                    if (!--v18)
                      goto LABEL_52;
                  }
                }
              }
            }
            else
            {
              if (v17 >= v12)
                v17 %= v12;
              if (v17 != v2)
                break;
            }
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
      }
LABEL_53:
    }
    v28 = (char *)operator new(0x30uLL);
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = v11;
    v29 = (std::string *)(v28 + 16);
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v29, v7, *((_QWORD *)v3 + 1));
      v4 = qword_1EE57A9A0;
    }
    else
    {
      v30 = *v3;
      *((_QWORD *)v28 + 4) = *((_QWORD *)v3 + 2);
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
    }
    *((_DWORD *)v28 + 10) = *((_DWORD *)v3 + 6);
    v31 = (float)(unint64_t)(v4 + 1);
    if (!v12 || (float)(*(float *)&dword_1EE57A9A8 * (float)v12) < v31)
    {
      v32 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3)
        v32 = 1;
      v33 = v32 | (2 * v12);
      v34 = vcvtps_u32_f32(v31 / *(float *)&dword_1EE57A9A8);
      if (v33 <= v34)
        prime = v34;
      else
        prime = v33;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v12 = v5[306];
      if (prime <= v12)
      {
        if (prime >= v12)
          goto LABEL_94;
        v46 = vcvtps_u32_f32((float)(unint64_t)qword_1EE57A9A0 / *(float *)&dword_1EE57A9A8);
        if (v12 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
        {
          v46 = std::__next_prime(v46);
        }
        else
        {
          v48 = 1 << -(char)__clz(v46 - 1);
          if (v46 >= 2)
            v46 = v48;
        }
        if (prime <= v46)
          prime = v46;
        if (prime >= v12)
        {
          v12 = v5[306];
LABEL_94:
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v11 >= v12)
              v2 = v11 % v12;
            else
              v2 = v11;
          }
          else
          {
            v2 = (v12 - 1) & v11;
          }
          goto LABEL_107;
        }
        if (!prime)
        {
          if (v54)
            operator delete(v54);
          v12 = 0;
          v5[306] = 0;
          goto LABEL_94;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v36 = operator new(8 * prime);
      if (v37)
        operator delete(v37);
      v38 = 0;
      v5[306] = prime;
      do
      while (prime != v38);
      v39 = (_QWORD **)qword_1EE57A998;
      if (!qword_1EE57A998)
      {
LABEL_93:
        v12 = prime;
        goto LABEL_94;
      }
      v40 = *(_QWORD *)(qword_1EE57A998 + 8);
      v41 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v42 = v40 & v41;
        for (i = *v39; *v39; i = *v39)
        {
          v44 = i[1] & v41;
          if (v44 == v42)
          {
            v39 = (_QWORD **)i;
          }
          {
            *v39 = (_QWORD *)*i;
            v45 = 8 * v44;
          }
          else
          {
            v39 = (_QWORD **)i;
            v42 = v44;
          }
        }
        goto LABEL_93;
      }
      if (v40 >= prime)
        v40 %= prime;
      v49 = *v39;
      if (!*v39)
        goto LABEL_93;
      while (1)
      {
        v51 = v49[1];
        if (v51 >= prime)
          v51 %= prime;
        if (v51 != v40)
        {
          {
            goto LABEL_98;
          }
          *v39 = (_QWORD *)*v49;
          v50 = 8 * v51;
          v49 = v39;
        }
        v51 = v40;
LABEL_98:
        v39 = (_QWORD **)v49;
        v49 = (_QWORD *)*v49;
        v40 = v51;
        if (!v49)
          goto LABEL_93;
      }
    }
LABEL_107:
    if (v52)
    {
      *(_QWORD *)v28 = *v52;
      *v52 = v28;
    }
    else
    {
      *(_QWORD *)v28 = qword_1EE57A998;
      qword_1EE57A998 = (uint64_t)v28;
      if (*(_QWORD *)v28)
      {
        v53 = *(_QWORD *)(*(_QWORD *)v28 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v53 >= v12)
            v53 %= v12;
        }
        else
        {
          v53 &= v12 - 1;
        }
      }
    }
    v4 = ++qword_1EE57A9A0;
LABEL_5:
    v3 += 2;
  }
  while (v3 != v56);
}

uint64_t std::unordered_map<std::string,md::DaVinciGroundSettings::Property>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,md::DaVinciGroundSettings::Property>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,md::DaVinciGroundSettings::Property>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<md::DaVinciGroundSettings::_parsePropertyValue(NSString *,objc_object *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<gms::PropertyStore<float>>,std::__variant_detail::_Trait<gms<gm::Matrix<float,3,1>>,gms::PropertyStore<float><gm::Matrix<float,3,1>>>> &>(id **a1, uint64_t *a2)
{
  id *v3;
  id v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  __int16 v9;
  uint8_t buf[4];
  _DWORD v11[7];

  *(_QWORD *)&v11[5] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v4, "floatValue");
    buf[0] = 1;
    v11[0] = v5;

    v6 = *a2;
    v9 = 0;
    (*(void (**)(uint64_t, char *, __int16 *, _DWORD *))(*(_QWORD *)v6 + 8))(v6, (char *)&v9 + 1, &v9, v11);
  }
  else
  {

    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v7 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = v3[1];
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v11 = v8;
      _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: Type mismatch for key: %@", buf, 0xCu);
    }

  }
}

void sub_19F86168C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<md::DaVinciGroundSettings::_parsePropertyValue(NSString *,objc_object *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<gms::PropertyStore<float>>,std::__variant_detail::_Trait<gms<gm::Matrix<float,3,1>>,gms::PropertyStore<float><gm::Matrix<float,3,1>>>> &>(void ***a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  char v7;
  char v8[4];
  int v9;
  uint8_t buf[4];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (v8[0])
  {
    v4 = *a2;
    buf[0] = 0;
    v7 = 0;
    (*(void (**)(uint64_t, uint8_t *, char *, int *))(*(_QWORD *)v4 + 8))(v4, buf, &v7, &v9);
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v5 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = v3[1];
      *(_DWORD *)buf = 138412290;
      v11 = v6;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: Type mismatch for key: %@", buf, 0xCu);
    }

  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISB_EEEENS8_INSA_IN2gm6MatrixIfLi3ELi1EEEEENSC_ISI_EEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSE_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E42EF740[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10unique_ptrIN3gms13PropertyStoreIfEENS_14default_deleteISB_EEEENS8_INSA_IN2gm6MatrixIfLi3ELi1EEEEENSC_ISI_EEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSE_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E42EF740[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void md::ElevatedOverlayLogic::~ElevatedOverlayLogic(md::ElevatedOverlayLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0x1DCE255EA309B4ADLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::ElevatedOverlayLogic::debugConsoleString@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17[5];
  void *__src;
  void *v19;
  void *__p[2];
  __int128 v21;
  int v22;
  uint64_t v23[19];

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v23[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16 = v5;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
  std::ios_base::init(v7, v17);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v16 = v2 + 24;
  v23[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x1E0DE4FB8];
  v17[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  v22 = 16;
  v9 = v19;
  if (v19)
    *((_QWORD *)&v21 + 1) = v19;
  v10 = __src;
  v11 = (_BYTE *)v19 - (_BYTE *)__src;
  if ((unint64_t)((_BYTE *)v19 - (_BYTE *)__src) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v11 >= 0x17)
  {
    v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v12 = v11 | 7;
    v13 = v12 + 1;
    v14 = operator new(v12 + 1);
    a1[1] = v11;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v14;
    a1 = v14;
    goto LABEL_10;
  }
  *((_BYTE *)a1 + 23) = v11;
  if (v9 != v10)
LABEL_10:
    memmove(a1, v10, v11);
  *((_BYTE *)a1 + v11) = 0;
  v16 = *v4;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v4[3];
  v17[0] = v8 + 16;
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v23);
}

void sub_19F861BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19F861BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *gdc::ManagedObjectHolder<md::ElevatedOverlayContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1180;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

uint64_t gdc::ObjectHolder<md::ElevatedOverlayContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void sub_19F861DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F862DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;

  _Unwind_Resume(a1);
}

void sub_19F8630D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F863100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F863EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F864118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE104c43_ZTSKN3geo5ColorIhLi4ELNS_10ColorSpaceE0EEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return result;
}

uint64_t __copy_helper_block_ea8_48c43_ZTSKN3geo5ColorIhLi4ELNS_10ColorSpaceE0EEE(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void md::LabelDedupingGroup::~LabelDedupingGroup(md::LabelDedupingGroup *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::LabelDedupingGroup::prepareForCollision(_QWORD *this, LabelManager *a2)
{
  this[6] = this[5];
  this[9] = 0;
  return this;
}

BOOL md::LabelDedupingGroup::isResolved(md::LabelDedupingGroup *this)
{
  return *((_QWORD *)this + 5) != *((_QWORD *)this + 6);
}

void md::NamedLabelDedupingGroup::~NamedLabelDedupingGroup(md::NamedLabelDedupingGroup *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::NamedLabelDedupingGroup::prepareForCollision(float32x2_t *this, md::LabelManager *a2, double a3, double a4, double a5, double a6, double a7, __n128 a8)
{
  md::LabelManager *v8;
  float32x2_t *v10;
  float32x2_t *v11;
  float32x2_t *v12;
  float32x2_t *v13;
  float32x2_t v14;
  float32x2_t *v15;
  uint64_t v16;
  float32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  float32x2_t *v22;
  float32x2_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  _OWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  float32x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  float32x2_t v36;
  float32x2_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  float32x2_t *v44;
  uint64_t v45;
  uint64_t v46;
  float32x2_t *v47;
  float32x2_t v48;
  float32x2_t v49;
  uint64_t v50;
  __int128 v52;
  double v53;
  void *v54;
  float32x2_t *v55;
  float32x2_t *v56;
  unint64_t v57;
  _BYTE v58[40];

  v8 = a2;
  this[6] = this[5];
  this[9] = 0;
  v10 = (float32x2_t *)v58;
  v54 = v58;
  v55 = (float32x2_t *)v58;
  v56 = (float32x2_t *)v58;
  v57 = 5;
  v11 = (float32x2_t *)this[1];
  v12 = (float32x2_t *)this[2];
  if (v11 != v12)
  {
    while (1)
    {
      v14 = *v11;
      if (!(*(unsigned int (**)(float32x2_t))(**(_QWORD **)v11 + 16))(*v11))
        goto LABEL_5;
      v15 = (float32x2_t *)v54;
      v13 = v55;
      v16 = ((char *)v55 - (_BYTE *)v54) >> 3;
      if (v57 < v16 + 1)
        break;
LABEL_4:
      *v13 = v14;
      ++v55;
LABEL_5:
      if (++v11 == v12)
      {
        v10 = (float32x2_t *)v54;
        v33 = v55;
        v8 = a2;
        goto LABEL_26;
      }
    }
    v17 = v56;
    v18 = (1 << -(char)__clz(v57 + 1));
    if (v57 >= 0xFFFFFFFFFFFFFFFELL)
      v18 = 1;
    if (v18 <= v16 + 1)
      v19 = v16 + 1;
    else
      v19 = v18;
    v20 = malloc_type_malloc(8 * v19, 0x2004093837F09uLL);
    v21 = (char *)v20;
    v22 = (float32x2_t *)v54;
    v23 = v55;
    if (v54 != v55)
    {
      v24 = (char *)v55 - (_BYTE *)v54 - 8;
      if (v24 < 0x18)
      {
        v25 = v20;
      }
      else
      {
        v25 = v20;
        if ((unint64_t)((char *)v20 - (_BYTE *)v54) >= 0x20)
        {
          v26 = (v24 >> 3) + 1;
          v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          v25 = (_QWORD *)((char *)v20 + v27);
          v28 = (__int128 *)((char *)v54 + 16);
          v29 = v20 + 1;
          v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v31 = *v28;
            *(v29 - 1) = *(v28 - 1);
            *v29 = v31;
            v28 += 2;
            v29 += 2;
            v30 -= 4;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_22;
          v22 = (float32x2_t *)((char *)v22 + v27);
        }
      }
      do
      {
        v32 = (uint64_t)*v22++;
        *v25++ = v32;
      }
      while (v22 != v23);
    }
LABEL_22:
    if (v15 != v17)
      free(v54);
    v13 = (float32x2_t *)&v21[8 * v16];
    v54 = v21;
    v55 = v13;
    v57 = v19;
    goto LABEL_4;
  }
  v33 = (float32x2_t *)v58;
LABEL_26:
  v34 = (char *)v33 - (char *)v10;
  if ((char *)v33 - (char *)v10 == 8)
    goto LABEL_27;
  if ((unint64_t)v34 >= 9)
  {
    v35 = *((_QWORD *)v8 + 54);
    v52 = *(_OWORD *)(v35 + 1120);
    v36 = *(float32x2_t *)(v35 + 1072);
    v37 = vsub_f32(*(float32x2_t *)(v35 + 1080), v36);
    v38 = COERCE_DOUBLE(vmla_f32(v36, (float32x2_t)0x3F0000003F000000, v37));
    v53 = v38;
    v39 = 126 - 2 * __clz(v34 >> 3);
    if (v33 == v10)
      v40 = 0;
    else
      v40 = v39;
    std::__introsort<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,false>(v10, v33, (float32x2_t *)&v52, v40, 1, *(double *)&v37, v38, 0.0000305175853, a6, a7, a8);
    v10 = (float32x2_t *)v54;
    v41 = v55;
    if (v54 == v55)
      goto LABEL_27;
    v42 = (char *)v55 - (_BYTE *)v54 - 8;
    if (v42 > 7)
    {
      v45 = 0;
      v46 = (v42 >> 3) + 1;
      v43 = v46 & 0x3FFFFFFFFFFFFFFELL;
      v44 = (float32x2_t *)((char *)v54 + 8 * (v46 & 0x3FFFFFFFFFFFFFFELL));
      do
      {
        v47 = &v10[v45];
        v49 = *v47;
        v48 = v47[1];
        *(_DWORD *)(*(_QWORD *)&v49 + 32) = v45;
        *(_DWORD *)(*(_QWORD *)&v48 + 32) = v45 + 1;
        v45 += 2;
      }
      while (v43 != v45);
      if (v46 == v43)
        goto LABEL_27;
    }
    else
    {
      LODWORD(v43) = 0;
      v44 = (float32x2_t *)v54;
    }
    do
    {
      v50 = (uint64_t)*v44++;
      *(_DWORD *)(v50 + 32) = v43;
      LODWORD(v43) = v43 + 1;
    }
    while (v44 != v41);
LABEL_27:
    this[9] = *v10;
  }
  if (v10 != v56)
    free(v10);
}

void sub_19F864700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  if (a14 != a16)
    free(a14);
  _Unwind_Resume(exception_object);
}

float32x2_t *std::__introsort<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,false>(float32x2_t *result, float32x2_t *a2, float32x2_t *a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  int32x2_t v13;
  float32x2_t *v14;
  float32x2_t *i;
  float32x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float32x2_t *v20;
  uint64_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  BOOL v28;
  int v29;
  float v30;
  float v31;
  int v33;
  float v34;
  int v35;
  int v36;
  uint64_t v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  unint64_t k;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  float v51;
  float v52;
  int v54;
  float v55;
  float v56;
  int v58;
  float v59;
  int v60;
  int v61;
  uint64_t v62;
  float *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t *v74;
  float32x2_t *m;
  float32x2_t v76;
  unsigned int v77;
  unsigned int v78;
  float v79;
  int v81;
  float v82;
  float v83;
  int v85;
  float v86;
  int v87;
  int v88;
  uint64_t v89;
  float *v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  float32x2_t *v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  unsigned int v102;
  unsigned int v103;
  float v104;
  int v106;
  float v107;
  float v108;
  int v110;
  float v111;
  int v112;
  int v113;
  uint64_t v114;
  float *v115;
  float v116;
  float v117;
  float v118;
  float v119;
  uint64_t v120;
  float32x2_t *v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  unint64_t v126;
  float32x2_t *v127;
  float32x2_t v128;
  float32x2_t v129;
  unsigned int v130;
  unsigned int v131;
  float v132;
  float v133;
  int v135;
  float v136;
  float v137;
  int v139;
  float v140;
  int v141;
  int v142;
  uint64_t v143;
  float *v144;
  float v145;
  float v146;
  float v147;
  float v148;
  uint64_t v149;
  float32x2_t *v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float32x2_t v155;
  float32x2_t v156;
  unsigned int v157;
  unsigned int v158;
  float v159;
  float v160;
  int v162;
  float v163;
  float v164;
  int v166;
  float v167;
  int v168;
  int v169;
  uint64_t v170;
  float *v171;
  float v172;
  float v173;
  float v174;
  float v175;
  uint64_t v176;
  float32x2_t *v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  BOOL v182;
  BOOL v183;
  float32x2_t v184;
  unsigned int v185;
  float v186;
  int v188;
  float32x2_t v189;
  unsigned int v190;
  unsigned int v191;
  float v192;
  int v194;
  float v195;
  float v196;
  int v198;
  float v199;
  int v200;
  int v201;
  uint64_t v202;
  float *v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float32x2_t v208;
  float32x2_t v209;
  float32x2_t v210;
  float32x2_t v211;
  float v212;
  float v213;
  int v215;
  float v216;
  int v217;
  int v218;
  float32x2_t v219;
  unsigned int v220;
  unsigned int v221;
  float v222;
  int v224;
  float v225;
  float v226;
  int v228;
  float v229;
  int v230;
  int v231;
  uint64_t v232;
  float *v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float32x2_t v238;
  float32x2_t v239;
  float32x2_t v240;
  float32x2_t v241;
  float32x2_t *j;
  float32x2_t v243;
  unsigned int v244;
  unsigned int v245;
  float v246;
  int v248;
  float v249;
  float v250;
  int v252;
  float v253;
  int v254;
  int v255;
  uint64_t v256;
  float *v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float32x2_t v262;
  float32x2_t v263;
  float32x2_t v264;
  float32x2_t v265;
  float32x2_t v266;
  float32x2_t v267;
  unsigned int v268;
  unsigned int v269;
  float v270;
  float v271;
  int v273;
  float v274;
  float v275;
  int v277;
  float v278;
  int v279;
  int v280;
  uint64_t v281;
  float *v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float32x2_t v287;
  float32x2_t v288;
  float32x2_t v289;
  float32x2_t v290;
  float32x2_t v291;
  float32x2_t v292;
  unsigned int v293;
  unsigned int v294;
  float v295;
  float v296;
  int v298;
  float v299;
  float v300;
  int v302;
  float v303;
  int v304;
  int v305;
  uint64_t v306;
  float *v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float32x2_t v312;
  float32x2_t v313;
  float32x2_t v314;
  float32x2_t v315;
  float32x2_t *v316;
  uint64_t v317;
  float *v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float32x2_t v323;
  float32x2_t v324;
  float32x2_t v325;
  float32x2_t v326;
  float32x2_t v327;
  float32x2_t v328;
  unsigned int v329;
  unsigned int v330;
  float v331;
  int v333;
  float32x2_t *v334;
  float32x2_t *v335;
  float32x2_t v336;
  float32x2_t v337;
  unsigned int v338;
  unsigned int v339;
  float v340;
  int v342;
  int8x16_t *v343;
  BOOL v344;
  char v345;
  uint64_t v346;
  int32x2_t v347;
  uint64_t *v348;
  uint64_t *v349;
  int8x16_t *v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  unsigned int v354;
  float v355;
  int v357;
  float v358;
  float v359;
  int v361;
  float v362;
  int v363;
  int v364;
  uint64_t v365;
  float *v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float32x2_t v371;
  float32x2_t v372;
  float32x2_t v373;
  float32x2_t v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  unsigned int v378;
  unsigned int v379;
  float v380;
  float v381;
  int v383;
  float v384;
  float v385;
  int v387;
  float v388;
  int v389;
  int v390;
  uint64_t v391;
  float *v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float32x2_t v397;
  float32x2_t v398;
  float32x2_t v399;
  float32x2_t v400;
  int64_t v401;
  int32x2_t v402;
  int64_t v403;
  float32x2_t *v404;
  int64_t v405;
  uint64_t v406;
  float32x2_t *v407;
  uint64_t v408;
  float32x2_t v409;
  float32x2_t v410;
  unsigned int v411;
  unsigned int v412;
  float v413;
  int v415;
  _BOOL4 v416;
  float v417;
  float v418;
  int v420;
  float v421;
  int v422;
  uint64_t v423;
  float *v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float32x2_t v429;
  float32x2_t v430;
  float32x2_t v431;
  float32x2_t v432;
  float32x2_t *v433;
  float32x2_t v434;
  float32x2_t v435;
  unsigned int v436;
  unsigned int v437;
  float v438;
  int v440;
  float v441;
  float v442;
  int v444;
  float v445;
  int v446;
  int v447;
  uint64_t v448;
  float *v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float32x2_t v454;
  float32x2_t v455;
  float32x2_t v456;
  float32x2_t v457;
  float32x2_t *v458;
  uint64_t v459;
  float32x2_t v460;
  float32x2_t v461;
  unsigned int v462;
  unsigned int v463;
  float v464;
  int v466;
  _BOOL4 v467;
  float v468;
  float v469;
  int v471;
  float v472;
  int v473;
  uint64_t v474;
  float *v475;
  float v476;
  float v477;
  float v478;
  float v479;
  float32x2_t v480;
  float32x2_t v481;
  float32x2_t v482;
  float32x2_t v483;
  float32x2_t v484;
  unsigned int v485;
  unsigned int v486;
  float v487;
  int v489;
  float v490;
  float v491;
  int v493;
  float v494;
  int v495;
  int v496;
  uint64_t v497;
  float *v498;
  float v499;
  float v500;
  float v501;
  float v502;
  float32x2_t v503;
  float32x2_t v504;
  float32x2_t v505;
  float32x2_t v506;
  uint64_t v507;
  int32x2_t v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t v511;
  _BOOL4 v512;
  float32x2_t *v513;
  uint64_t v514;
  uint64_t v515;
  float32x2_t v516;
  float32x2_t v517;
  unsigned int v518;
  unsigned int v519;
  float v520;
  float v521;
  int v523;
  float v524;
  float v525;
  int v527;
  float v528;
  int v529;
  uint64_t v530;
  float *v531;
  float v532;
  float v533;
  float v534;
  float v535;
  float32x2_t v536;
  float32x2_t v537;
  float32x2_t v538;
  float32x2_t v539;
  float32x2_t *v540;
  uint64_t v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t *v544;
  float32x2_t v545;
  float32x2_t v546;
  unsigned int v547;
  unsigned int v548;
  float v549;
  int v551;
  float v552;
  float v553;
  int v555;
  float v556;
  int v557;
  int v558;
  uint64_t v559;
  float *v560;
  float v561;
  float v562;
  float v563;
  float v564;
  float32x2_t v565;
  float32x2_t v566;
  float32x2_t v567;
  float32x2_t v568;
  uint64_t *v569;
  unint64_t v570;
  uint64_t v571;
  unsigned int v572;
  unsigned int v573;
  float v574;
  float v575;
  int v577;
  float v578;
  float v579;
  int v581;
  float v582;
  int v583;
  int v584;
  uint64_t v585;
  float *v586;
  float v587;
  float v588;
  float v589;
  float v590;
  float32x2_t v591;
  float32x2_t v592;
  float32x2_t v593;
  float32x2_t v594;
  int32x2_t v595;
  uint64_t *v596;
  uint64_t v597;
  uint64_t v598;
  unsigned int v599;
  unsigned int v600;
  float v601;
  int v603;
  float32x2_t *v604;
  float v605;
  float v606;
  int v608;
  float v609;
  int v610;
  int v611;
  uint64_t v612;
  float *v613;
  float v614;
  float v615;
  float v616;
  float v617;
  float32x2_t v618;
  float32x2_t v619;
  float32x2_t v620;
  float32x2_t v621;
  uint64_t *v622;
  uint64_t v623;
  uint64_t v624;
  unsigned int v625;
  unsigned int v626;
  float v627;
  float v628;
  int v630;
  float v631;
  float v632;
  int v634;
  float v635;
  int v636;
  int v637;
  uint64_t v638;
  float *v639;
  float v640;
  float v641;
  float v642;
  float v643;
  float32x2_t v644;
  float32x2_t v645;
  float32x2_t v646;
  float32x2_t v647;
  float v648;
  float v649;
  int v651;
  float v652;
  float v653;
  int v655;
  float v656;
  int v657;
  int v658;
  float v659;
  int v660;
  int v661;
  uint64_t v662;
  float *v663;
  float v664;
  float v665;
  float v666;
  float v667;
  uint64_t v668;
  float *v669;
  float v670;
  float v671;
  float v672;
  float v673;
  float v674;
  float32x2_t v675;
  float v676;
  float32x2_t v677;
  float32x2_t v678;
  float32x2_t v679;
  float v680;
  float32x2_t v681;
  float v682;
  float32x2_t v683;
  float32x2_t v684;
  float32x2_t v685;
  uint64_t v686;
  uint64_t v687;
  unsigned int v688;
  unsigned int v689;
  float v690;
  int v692;
  float v693;
  float v694;
  int v696;
  float v697;
  int v698;
  int v699;
  uint64_t v700;
  float *v701;
  float v702;
  float v703;
  float v704;
  float v705;
  float v706;
  float32x2_t v707;
  float v708;
  float32x2_t v709;
  float32x2_t v710;
  float32x2_t v711;
  uint64_t v712;
  unsigned int v713;
  float v714;
  int v716;
  float v717;
  float v718;
  int v720;
  float v721;
  int v722;
  int v723;
  uint64_t v724;
  float *v725;
  float v726;
  float v727;
  float v728;
  float v729;
  float v730;
  float32x2_t v731;
  float v732;
  float32x2_t v733;
  float32x2_t v734;
  float32x2_t v735;
  __n128 v737;
  __n128 v738;
  __n128 v739;
  __n128 v740;
  float32x2_t *v741;
  int8x16_t *v743;
  __n128 v744;
  __n128 v745;
  __n128 v746;
  __n128 v747;
  __n128 v748;
  __n128 v749;
  __n128 v750;
  __n128 v751;
  __n128 v752;
  __n128 v753;
  __n128 v754;
  __n128 v755;
  __n128 v756;
  __n128 v757;
  int64_t v758;
  __n128 v759;
  __n128 v760;
  __n128 v761;
  __n128 v762;
  __n128 v763;

  v743 = (int8x16_t *)result;
  v13 = vdup_n_s32(0x7F7FFFFFu);
LABEL_2:
  v14 = a2;
  i = (float32x2_t *)v743;
  v741 = a2 - 1;
  while (2)
  {
    v16 = i;
    v17 = (char *)v14 - (char *)i;
    v18 = v14 - i;
    v743 = (int8x16_t *)v16;
    switch(v18)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v327 = *v741;
        v328 = *v16;
        v329 = *(unsigned __int8 *)(*(_QWORD *)v741 + 1216);
        v330 = *(unsigned __int8 *)(*(_QWORD *)v16 + 1216);
        if (v329 != v330)
        {
          if (v329 >= v330)
            return result;
          goto LABEL_1066;
        }
        v331 = *(float *)(*(_QWORD *)&v327 + 664);
        if (v331 >= a3->f32[0] && v331 < a3[1].f32[0])
        {
          v648 = *(float *)(*(_QWORD *)&v327 + 668);
          v333 = v648 >= a3->f32[1];
          if (v648 >= a3[1].f32[1])
            v333 = 0;
        }
        else
        {
          v333 = 0;
        }
        v649 = *(float *)(*(_QWORD *)&v328 + 664);
        if (v649 >= a3->f32[0] && v649 < a3[1].f32[0])
        {
          v656 = *(float *)(*(_QWORD *)&v328 + 668);
          v651 = v656 >= a3->f32[1];
          if (v656 >= a3[1].f32[1])
            v651 = 0;
        }
        else
        {
          v651 = 0;
        }
        if (*(_BYTE *)(*(_QWORD *)&v327 + 820) == 2)
          v657 = v333;
        else
          v657 = 0;
        if (*(_BYTE *)(*(_QWORD *)&v328 + 820) == 2)
          v658 = v651;
        else
          v658 = 0;
        if ((v657 | v658) == 1 && ((v657 ^ v658) & 1) != 0 || (v657 = v333, v333 != v651))
        {
          if (!v657)
            return result;
          goto LABEL_1066;
        }
        v662 = *(_QWORD *)(*(_QWORD *)&v327 + 264);
        if (v662 && *(_BYTE *)(*(_QWORD *)&v327 + 1283) || (v662 = *(_QWORD *)(*(_QWORD *)&v327 + 272)) != 0)
        {
          v663 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v662 + 248))(v662);
          v664 = *v663;
          v665 = v663[1];
          v666 = v663[2];
          v667 = v663[3];
        }
        else
        {
          v665 = 3.4028e38;
          v666 = -3.4028e38;
          v664 = 3.4028e38;
          v667 = -3.4028e38;
        }
        v674 = v664 + (float)((float)(v666 - v664) * 0.5);
        v675 = a3[2];
        v676 = (float)((float)(v675.f32[0] - v674) * (float)(v675.f32[0] - v674))
             + (float)((float)(v675.f32[1] - (float)(v665 + (float)((float)(v667 - v665) * 0.5)))
                     * (float)(v675.f32[1] - (float)(v665 + (float)((float)(v667 - v665) * 0.5))));
        result = *(float32x2_t **)(*(_QWORD *)&v328 + 264);
        if (result && *(_BYTE *)(*(_QWORD *)&v328 + 1283)
          || (result = *(float32x2_t **)(*(_QWORD *)&v328 + 272)) != 0)
        {
          result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
          v677 = *result;
          v678 = result[1];
          v675 = a3[2];
        }
        else
        {
          v677 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          v678 = (float32x2_t)0x80000000800000;
        }
        v679 = vsub_f32(v675, vmla_f32(v677, (float32x2_t)0x3F0000003F000000, vsub_f32(v678, v677)));
        if (v676 < vaddv_f32(vmul_f32(v679, v679)))
        {
          v328 = *v16;
          v327 = *v741;
LABEL_1066:
          *v16 = v327;
          *v741 = v328;
          return result;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v16, v16 + 1, v741, a3);
      case 4:
        v334 = v16 + 1;
        v335 = v16 + 2;
        result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v16, v16 + 1, v16 + 2, a3);
        v336 = *v741;
        v337 = v16[2];
        v338 = *(unsigned __int8 *)(*(_QWORD *)v741 + 1216);
        v339 = *(unsigned __int8 *)(*(_QWORD *)&v337 + 1216);
        if (v338 == v339)
        {
          v340 = *(float *)(*(_QWORD *)&v336 + 664);
          if (v340 >= a3->f32[0] && v340 < a3[1].f32[0])
          {
            v652 = *(float *)(*(_QWORD *)&v336 + 668);
            v342 = v652 >= a3->f32[1];
            if (v652 >= a3[1].f32[1])
              v342 = 0;
          }
          else
          {
            v342 = 0;
          }
          v653 = *(float *)(*(_QWORD *)&v337 + 664);
          if (v653 >= a3->f32[0] && v653 < a3[1].f32[0])
          {
            v659 = *(float *)(*(_QWORD *)&v337 + 668);
            v655 = v659 >= a3->f32[1];
            if (v659 >= a3[1].f32[1])
              v655 = 0;
          }
          else
          {
            v655 = 0;
          }
          if (*(_BYTE *)(*(_QWORD *)&v336 + 820) == 2)
            v660 = v342;
          else
            v660 = 0;
          if (*(_BYTE *)(*(_QWORD *)&v337 + 820) == 2)
            v661 = v655;
          else
            v661 = 0;
          if ((v660 | v661) == 1 && ((v660 ^ v661) & 1) != 0 || (v660 = v342, v342 != v655))
          {
            if (!v660)
              return result;
          }
          else
          {
            v668 = *(_QWORD *)(*(_QWORD *)&v336 + 264);
            if (v668 && *(_BYTE *)(*(_QWORD *)&v336 + 1283) || (v668 = *(_QWORD *)(*(_QWORD *)&v336 + 272)) != 0)
            {
              v669 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v668 + 248))(v668);
              v670 = *v669;
              v671 = v669[1];
              v672 = v669[2];
              v673 = v669[3];
            }
            else
            {
              v671 = 3.4028e38;
              v672 = -3.4028e38;
              v670 = 3.4028e38;
              v673 = -3.4028e38;
            }
            v680 = v670 + (float)((float)(v672 - v670) * 0.5);
            v681 = a3[2];
            v682 = (float)((float)(v681.f32[0] - v680) * (float)(v681.f32[0] - v680))
                 + (float)((float)(v681.f32[1] - (float)(v671 + (float)((float)(v673 - v671) * 0.5)))
                         * (float)(v681.f32[1] - (float)(v671 + (float)((float)(v673 - v671) * 0.5))));
            result = *(float32x2_t **)(*(_QWORD *)&v337 + 264);
            if (result && *(_BYTE *)(*(_QWORD *)&v337 + 1283)
              || (result = *(float32x2_t **)(*(_QWORD *)&v337 + 272)) != 0)
            {
              result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
              v683 = *result;
              v684 = result[1];
              v681 = a3[2];
            }
            else
            {
              v683 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
              v684 = (float32x2_t)0x80000000800000;
            }
            v685 = vsub_f32(v681, vmla_f32(v683, (float32x2_t)0x3F0000003F000000, vsub_f32(v684, v683)));
            if (v682 >= vaddv_f32(vmul_f32(v685, v685)))
              return result;
            v337 = *v335;
            v336 = *v741;
          }
        }
        else if (v338 >= v339)
        {
          return result;
        }
        *v335 = v336;
        *v741 = v337;
        v686 = (uint64_t)*v335;
        v687 = (uint64_t)*v334;
        v688 = *(unsigned __int8 *)(*(_QWORD *)v335 + 1216);
        v689 = *(unsigned __int8 *)(*(_QWORD *)v334 + 1216);
        if (v688 == v689)
        {
          v690 = *(float *)(v686 + 664);
          if (v690 >= a3->f32[0] && v690 < a3[1].f32[0])
          {
            v693 = *(float *)(v686 + 668);
            v692 = v693 >= a3->f32[1];
            if (v693 >= a3[1].f32[1])
              v692 = 0;
          }
          else
          {
            v692 = 0;
          }
          v694 = *(float *)(v687 + 664);
          if (v694 >= a3->f32[0] && v694 < a3[1].f32[0])
          {
            v697 = *(float *)(v687 + 668);
            v696 = v697 >= a3->f32[1];
            if (v697 >= a3[1].f32[1])
              v696 = 0;
          }
          else
          {
            v696 = 0;
          }
          if (*(_BYTE *)(v686 + 820) == 2)
            v698 = v692;
          else
            v698 = 0;
          if (*(_BYTE *)(v687 + 820) == 2)
            v699 = v696;
          else
            v699 = 0;
          if ((v698 | v699) == 1 && ((v698 ^ v699) & 1) != 0 || (v698 = v692, v692 != v696))
          {
            if (!v698)
              return result;
          }
          else
          {
            v700 = *(_QWORD *)(v686 + 264);
            if (v700 && *(_BYTE *)(v686 + 1283) || (v700 = *(_QWORD *)(v686 + 272)) != 0)
            {
              v701 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v700 + 248))(v700);
              v702 = *v701;
              v703 = v701[1];
              v704 = v701[2];
              v705 = v701[3];
            }
            else
            {
              v703 = 3.4028e38;
              v704 = -3.4028e38;
              v702 = 3.4028e38;
              v705 = -3.4028e38;
            }
            v706 = v702 + (float)((float)(v704 - v702) * 0.5);
            v707 = a3[2];
            v708 = (float)((float)(v707.f32[0] - v706) * (float)(v707.f32[0] - v706))
                 + (float)((float)(v707.f32[1] - (float)(v703 + (float)((float)(v705 - v703) * 0.5)))
                         * (float)(v707.f32[1] - (float)(v703 + (float)((float)(v705 - v703) * 0.5))));
            result = *(float32x2_t **)(v687 + 264);
            if (result && *(_BYTE *)(v687 + 1283) || (result = *(float32x2_t **)(v687 + 272)) != 0)
            {
              result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
              v709 = *result;
              v710 = result[1];
              v707 = a3[2];
            }
            else
            {
              v709 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
              v710 = (float32x2_t)0x80000000800000;
            }
            v711 = vsub_f32(v707, vmla_f32(v709, (float32x2_t)0x3F0000003F000000, vsub_f32(v710, v709)));
            if (v708 >= vaddv_f32(vmul_f32(v711, v711)))
              return result;
            v687 = (uint64_t)*v334;
            v686 = (uint64_t)*v335;
            v688 = *(unsigned __int8 *)(*(_QWORD *)v335 + 1216);
          }
        }
        else if (v688 >= v689)
        {
          return result;
        }
        v743->i64[1] = v686;
        v743[1].i64[0] = v687;
        v712 = v743->i64[0];
        v713 = *(unsigned __int8 *)(v743->i64[0] + 1216);
        if (v688 != v713)
        {
          if (v688 >= v713)
            return result;
          goto LABEL_1154;
        }
        v714 = *(float *)(v686 + 664);
        if (v714 >= a3->f32[0] && v714 < a3[1].f32[0])
        {
          v717 = *(float *)(v686 + 668);
          v716 = v717 >= a3->f32[1];
          if (v717 >= a3[1].f32[1])
            v716 = 0;
        }
        else
        {
          v716 = 0;
        }
        v718 = *(float *)(v712 + 664);
        if (v718 >= a3->f32[0] && v718 < a3[1].f32[0])
        {
          v721 = *(float *)(v712 + 668);
          v720 = v721 >= a3->f32[1];
          if (v721 >= a3[1].f32[1])
            v720 = 0;
        }
        else
        {
          v720 = 0;
        }
        if (*(_BYTE *)(v686 + 820) == 2)
          v722 = v716;
        else
          v722 = 0;
        if (*(_BYTE *)(v712 + 820) == 2)
          v723 = v720;
        else
          v723 = 0;
        if ((v722 | v723) == 1 && ((v722 ^ v723) & 1) != 0 || (v722 = v716, v716 != v720))
        {
          if (!v722)
            return result;
          goto LABEL_1154;
        }
        v724 = *(_QWORD *)(v686 + 264);
        if (v724 && *(_BYTE *)(v686 + 1283) || (v724 = *(_QWORD *)(v686 + 272)) != 0)
        {
          v725 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v724 + 248))(v724);
          v726 = *v725;
          v727 = v725[1];
          v728 = v725[2];
          v729 = v725[3];
        }
        else
        {
          v727 = 3.4028e38;
          v728 = -3.4028e38;
          v726 = 3.4028e38;
          v729 = -3.4028e38;
        }
        v730 = v726 + (float)((float)(v728 - v726) * 0.5);
        v731 = a3[2];
        v732 = (float)((float)(v731.f32[0] - v730) * (float)(v731.f32[0] - v730))
             + (float)((float)(v731.f32[1] - (float)(v727 + (float)((float)(v729 - v727) * 0.5)))
                     * (float)(v731.f32[1] - (float)(v727 + (float)((float)(v729 - v727) * 0.5))));
        result = *(float32x2_t **)(v712 + 264);
        if (result && *(_BYTE *)(v712 + 1283) || (result = *(float32x2_t **)(v712 + 272)) != 0)
        {
          result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
          v733 = *result;
          v734 = result[1];
          v731 = a3[2];
        }
        else
        {
          v733 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          v734 = (float32x2_t)0x80000000800000;
        }
        v735 = vsub_f32(v731, vmla_f32(v733, (float32x2_t)0x3F0000003F000000, vsub_f32(v734, v733)));
        if (v732 < vaddv_f32(vmul_f32(v735, v735)))
        {
LABEL_1154:
          *v743 = vextq_s8(*v743, *v743, 8uLL);
          return result;
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,0>(v16, v16 + 1, v16 + 2, v16 + 3, v741, a3);
      default:
        if (v17 > 191)
        {
          if (!a4)
          {
            if (v16 != v14)
            {
              v401 = (unint64_t)(v18 - 2) >> 1;
              v402 = vdup_n_s32(0x7F7FFFFFu);
              v403 = v401;
              v404 = v16;
              do
              {
                v405 = v403;
                if (v401 >= v403)
                {
                  v758 = v403;
                  v406 = (2 * v403) | 1;
                  v407 = &v404[v406];
                  v408 = 2 * v403 + 2;
                  if (v408 < v18)
                  {
                    v409 = *v407;
                    v410 = v407[1];
                    v411 = *(unsigned __int8 *)(*(_QWORD *)v407 + 1216);
                    v412 = *(unsigned __int8 *)(*(_QWORD *)&v410 + 1216);
                    if (v411 == v412)
                    {
                      v413 = *(float *)(*(_QWORD *)&v409 + 664);
                      if (v413 >= a3->f32[0] && v413 < a3[1].f32[0])
                      {
                        v417 = *(float *)(*(_QWORD *)&v409 + 668);
                        v415 = v417 >= a3->f32[1];
                        if (v417 >= a3[1].f32[1])
                          v415 = 0;
                      }
                      else
                      {
                        v415 = 0;
                      }
                      v418 = *(float *)(*(_QWORD *)&v410 + 664);
                      if (v418 >= a3->f32[0] && v418 < a3[1].f32[0])
                      {
                        v421 = *(float *)(*(_QWORD *)&v410 + 668);
                        v420 = v421 < a3[1].f32[1] && v421 >= a3->f32[1];
                      }
                      else
                      {
                        v420 = 0;
                      }
                      if (*(_BYTE *)(*(_QWORD *)&v409 + 820) == 2)
                        v416 = v415;
                      else
                        v416 = 0;
                      if (*(_BYTE *)(*(_QWORD *)&v410 + 820) == 2)
                        v422 = v420;
                      else
                        v422 = 0;
                      if ((v416 | v422) != 1 || ((v416 ^ v422) & 1) == 0)
                      {
                        v416 = v415;
                        if (v415 == v420)
                        {
                          v423 = *(_QWORD *)(*(_QWORD *)&v409 + 264);
                          if (v423 && *(_BYTE *)(*(_QWORD *)&v409 + 1283)
                            || (v423 = *(_QWORD *)(*(_QWORD *)&v409 + 272)) != 0)
                          {
                            v424 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v423 + 248))(v423);
                            v426 = *v424;
                            v425 = v424[1];
                            v427 = v424[2];
                            v428 = v424[3];
                          }
                          else
                          {
                            v425 = 3.4028e38;
                            v427 = -3.4028e38;
                            v426 = 3.4028e38;
                            v428 = -3.4028e38;
                          }
                          a11.n128_u64[0] = (unint64_t)a3[2];
                          result = *(float32x2_t **)(*(_QWORD *)&v410 + 264);
                          if (result && *(_BYTE *)(*(_QWORD *)&v410 + 1283)
                            || (result = *(float32x2_t **)(*(_QWORD *)&v410 + 272)) != 0)
                          {
                            v737 = a11;
                            result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                            a11 = v737;
                            v429 = *result;
                            v430 = result[1];
                            v431 = a3[2];
                          }
                          else
                          {
                            v430 = (float32x2_t)0x80000000800000;
                            v431 = a3[2];
                            v429 = (float32x2_t)v402;
                          }
                          v401 = (unint64_t)(v18 - 2) >> 1;
                          v432 = vsub_f32(v431, vmla_f32(v429, (float32x2_t)0x3F0000003F000000, vsub_f32(v430, v429)));
                          v416 = (float)((float)((float)(a11.n128_f32[0]
                                                       - (float)(v426 + (float)((float)(v427 - v426) * 0.5)))
                                               * (float)(a11.n128_f32[0]
                                                       - (float)(v426 + (float)((float)(v427 - v426) * 0.5))))
                                       + (float)((float)(a11.n128_f32[1]
                                                       - (float)(v425 + (float)((float)(v428 - v425) * 0.5)))
                                               * (float)(a11.n128_f32[1]
                                                       - (float)(v425 + (float)((float)(v428 - v425) * 0.5))))) < vaddv_f32(vmul_f32(v432, v432));
                        }
                      }
                    }
                    else
                    {
                      v416 = v411 < v412;
                    }
                    if (v416)
                    {
                      ++v407;
                      v406 = v408;
                    }
                    v404 = v16;
                  }
                  v405 = v758;
                  v433 = &v404[v758];
                  v434 = *v407;
                  v435 = *v433;
                  v436 = *(unsigned __int8 *)(*(_QWORD *)v407 + 1216);
                  v437 = *(unsigned __int8 *)(*(_QWORD *)v433 + 1216);
                  if (v436 == v437)
                  {
                    v438 = *(float *)(*(_QWORD *)&v434 + 664);
                    if (v438 >= a3->f32[0] && v438 < a3[1].f32[0])
                    {
                      v441 = *(float *)(*(_QWORD *)&v434 + 668);
                      v440 = v441 >= a3->f32[1];
                      if (v441 >= a3[1].f32[1])
                        v440 = 0;
                    }
                    else
                    {
                      v440 = 0;
                    }
                    v442 = *(float *)(*(_QWORD *)&v435 + 664);
                    if (v442 >= a3->f32[0] && v442 < a3[1].f32[0])
                    {
                      v445 = *(float *)(*(_QWORD *)&v435 + 668);
                      v444 = v445 >= a3->f32[1];
                      if (v445 >= a3[1].f32[1])
                        v444 = 0;
                    }
                    else
                    {
                      v444 = 0;
                    }
                    if (*(_BYTE *)(*(_QWORD *)&v434 + 820) == 2)
                      v446 = v440;
                    else
                      v446 = 0;
                    if (*(_BYTE *)(*(_QWORD *)&v435 + 820) == 2)
                      v447 = v444;
                    else
                      v447 = 0;
                    if ((v446 | v447) == 1 && ((v446 ^ v447) & 1) != 0 || (LOBYTE(v446) = v440, v440 != v444))
                    {
                      if ((v446 & 1) == 0)
                        goto LABEL_710;
                    }
                    else
                    {
                      v448 = *(_QWORD *)(*(_QWORD *)&v434 + 264);
                      if (v448 && *(_BYTE *)(*(_QWORD *)&v434 + 1283)
                        || (v448 = *(_QWORD *)(*(_QWORD *)&v434 + 272)) != 0)
                      {
                        v449 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v448 + 248))(v448);
                        v451 = *v449;
                        v450 = v449[1];
                        v452 = v449[2];
                        v453 = v449[3];
                      }
                      else
                      {
                        v450 = 3.4028e38;
                        v452 = -3.4028e38;
                        v451 = 3.4028e38;
                        v453 = -3.4028e38;
                      }
                      a11.n128_u64[0] = (unint64_t)a3[2];
                      result = *(float32x2_t **)(*(_QWORD *)&v435 + 264);
                      if (result && *(_BYTE *)(*(_QWORD *)&v435 + 1283)
                        || (result = *(float32x2_t **)(*(_QWORD *)&v435 + 272)) != 0)
                      {
                        v738 = a11;
                        result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                        a11 = v738;
                        v454 = *result;
                        v455 = result[1];
                        v456 = a3[2];
                      }
                      else
                      {
                        v454 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                        v455 = (float32x2_t)0x80000000800000;
                        v456 = a3[2];
                      }
                      v401 = (unint64_t)(v18 - 2) >> 1;
                      v457 = vsub_f32(v456, vmla_f32(v454, (float32x2_t)0x3F0000003F000000, vsub_f32(v455, v454)));
                      if ((float)((float)((float)(a11.n128_f32[0] - (float)(v451 + (float)((float)(v452 - v451) * 0.5)))
                                         * (float)(a11.n128_f32[0] - (float)(v451 + (float)((float)(v452 - v451) * 0.5))))
                                 + (float)((float)(a11.n128_f32[1] - (float)(v450 + (float)((float)(v453 - v450) * 0.5)))
                                         * (float)(a11.n128_f32[1] - (float)(v450 + (float)((float)(v453 - v450) * 0.5))))) >= vaddv_f32(vmul_f32(v457, v457)))
                      {
                        v435 = *v433;
LABEL_710:
                        while (1)
                        {
                          v458 = v407;
                          *v433 = *v407;
                          if (v401 < v406)
                            break;
                          v459 = (2 * v406) | 1;
                          v407 = &v404[v459];
                          v406 = 2 * v406 + 2;
                          if (v406 >= v18)
                          {
                            v406 = v459;
                          }
                          else
                          {
                            v460 = *v407;
                            v461 = v407[1];
                            v462 = *(unsigned __int8 *)(*(_QWORD *)v407 + 1216);
                            v463 = *(unsigned __int8 *)(*(_QWORD *)&v461 + 1216);
                            if (v462 == v463)
                            {
                              v464 = *(float *)(*(_QWORD *)&v460 + 664);
                              if (v464 >= a3->f32[0] && v464 < a3[1].f32[0])
                              {
                                v468 = *(float *)(*(_QWORD *)&v460 + 668);
                                v466 = v468 >= a3->f32[1];
                                if (v468 >= a3[1].f32[1])
                                  v466 = 0;
                              }
                              else
                              {
                                v466 = 0;
                              }
                              v469 = *(float *)(*(_QWORD *)&v461 + 664);
                              if (v469 >= a3->f32[0] && v469 < a3[1].f32[0])
                              {
                                v472 = *(float *)(*(_QWORD *)&v461 + 668);
                                v471 = v472 < a3[1].f32[1] && v472 >= a3->f32[1];
                              }
                              else
                              {
                                v471 = 0;
                              }
                              if (*(_BYTE *)(*(_QWORD *)&v460 + 820) == 2)
                                v467 = v466;
                              else
                                v467 = 0;
                              if (*(_BYTE *)(*(_QWORD *)&v461 + 820) == 2)
                                v473 = v471;
                              else
                                v473 = 0;
                              if ((v467 | v473) != 1 || ((v467 ^ v473) & 1) == 0)
                              {
                                v467 = v466;
                                if (v466 == v471)
                                {
                                  v474 = *(_QWORD *)(*(_QWORD *)&v460 + 264);
                                  if (v474 && *(_BYTE *)(*(_QWORD *)&v460 + 1283)
                                    || (v474 = *(_QWORD *)(*(_QWORD *)&v460 + 272)) != 0)
                                  {
                                    v475 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v474 + 248))(v474);
                                    v477 = *v475;
                                    v476 = v475[1];
                                    v478 = v475[2];
                                    v479 = v475[3];
                                  }
                                  else
                                  {
                                    v476 = 3.4028e38;
                                    v478 = -3.4028e38;
                                    v477 = 3.4028e38;
                                    v479 = -3.4028e38;
                                  }
                                  a11.n128_u64[0] = (unint64_t)a3[2];
                                  result = *(float32x2_t **)(*(_QWORD *)&v461 + 264);
                                  if (result && *(_BYTE *)(*(_QWORD *)&v461 + 1283)
                                    || (result = *(float32x2_t **)(*(_QWORD *)&v461 + 272)) != 0)
                                  {
                                    v739 = a11;
                                    result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                                    a11 = v739;
                                    v480 = *result;
                                    v481 = result[1];
                                    v482 = a3[2];
                                  }
                                  else
                                  {
                                    v480 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                                    v481 = (float32x2_t)0x80000000800000;
                                    v482 = a3[2];
                                  }
                                  v401 = (unint64_t)(v18 - 2) >> 1;
                                  v483 = vsub_f32(v482, vmla_f32(v480, (float32x2_t)0x3F0000003F000000, vsub_f32(v481, v480)));
                                  v467 = (float)((float)((float)(a11.n128_f32[0]
                                                               - (float)(v477 + (float)((float)(v478 - v477) * 0.5)))
                                                       * (float)(a11.n128_f32[0]
                                                               - (float)(v477 + (float)((float)(v478 - v477) * 0.5))))
                                               + (float)((float)(a11.n128_f32[1]
                                                               - (float)(v476 + (float)((float)(v479 - v476) * 0.5)))
                                                       * (float)(a11.n128_f32[1]
                                                               - (float)(v476 + (float)((float)(v479 - v476) * 0.5))))) < vaddv_f32(vmul_f32(v483, v483));
                                }
                              }
                            }
                            else
                            {
                              v467 = v462 < v463;
                            }
                            if (v467)
                              ++v407;
                            else
                              v406 = v459;
                            v404 = v16;
                          }
                          v484 = *v407;
                          v485 = *(unsigned __int8 *)(*(_QWORD *)v407 + 1216);
                          v486 = *(unsigned __int8 *)(*(_QWORD *)&v435 + 1216);
                          if (v485 == v486)
                          {
                            v487 = *(float *)(*(_QWORD *)&v484 + 664);
                            if (v487 >= a3->f32[0] && v487 < a3[1].f32[0])
                            {
                              v490 = *(float *)(*(_QWORD *)&v484 + 668);
                              v489 = v490 >= a3->f32[1];
                              if (v490 >= a3[1].f32[1])
                                v489 = 0;
                            }
                            else
                            {
                              v489 = 0;
                            }
                            v491 = *(float *)(*(_QWORD *)&v435 + 664);
                            if (v491 >= a3->f32[0] && v491 < a3[1].f32[0])
                            {
                              v494 = *(float *)(*(_QWORD *)&v435 + 668);
                              v493 = v494 >= a3->f32[1];
                              if (v494 >= a3[1].f32[1])
                                v493 = 0;
                            }
                            else
                            {
                              v493 = 0;
                            }
                            if (*(_BYTE *)(*(_QWORD *)&v484 + 820) == 2)
                              v495 = v489;
                            else
                              v495 = 0;
                            if (*(_BYTE *)(*(_QWORD *)&v435 + 820) == 2)
                              v496 = v493;
                            else
                              v496 = 0;
                            if ((v495 | v496) == 1 && ((v495 ^ v496) & 1) != 0 || (v495 = v489, v489 != v493))
                            {
                              v433 = v458;
                              if (v495)
                                break;
                            }
                            else
                            {
                              v497 = *(_QWORD *)(*(_QWORD *)&v484 + 264);
                              if (v497 && *(_BYTE *)(*(_QWORD *)&v484 + 1283)
                                || (v497 = *(_QWORD *)(*(_QWORD *)&v484 + 272)) != 0)
                              {
                                v498 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v497 + 248))(v497);
                                v500 = *v498;
                                v499 = v498[1];
                                v501 = v498[2];
                                v502 = v498[3];
                              }
                              else
                              {
                                v499 = 3.4028e38;
                                v501 = -3.4028e38;
                                v500 = 3.4028e38;
                                v502 = -3.4028e38;
                              }
                              a11.n128_u64[0] = (unint64_t)a3[2];
                              result = *(float32x2_t **)(*(_QWORD *)&v435 + 264);
                              if (result && *(_BYTE *)(*(_QWORD *)&v435 + 1283)
                                || (result = *(float32x2_t **)(*(_QWORD *)&v435 + 272)) != 0)
                              {
                                v740 = a11;
                                result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result
                                                                                                 + 248))(result);
                                a11 = v740;
                                v503 = *result;
                                v504 = result[1];
                                v505 = a3[2];
                              }
                              else
                              {
                                v503 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                                v504 = (float32x2_t)0x80000000800000;
                                v505 = a3[2];
                              }
                              v401 = (unint64_t)(v18 - 2) >> 1;
                              v506 = vsub_f32(v505, vmla_f32(v503, (float32x2_t)0x3F0000003F000000, vsub_f32(v504, v503)));
                              v433 = v458;
                              if ((float)((float)((float)(a11.n128_f32[0]
                                                         - (float)(v500 + (float)((float)(v501 - v500) * 0.5)))
                                                 * (float)(a11.n128_f32[0]
                                                         - (float)(v500 + (float)((float)(v501 - v500) * 0.5))))
                                         + (float)((float)(a11.n128_f32[1]
                                                         - (float)(v499 + (float)((float)(v502 - v499) * 0.5)))
                                                 * (float)(a11.n128_f32[1]
                                                         - (float)(v499 + (float)((float)(v502 - v499) * 0.5))))) < vaddv_f32(vmul_f32(v506, v506)))
                                break;
                            }
                          }
                          else
                          {
                            v433 = v458;
                            if (v485 < v486)
                              break;
                          }
                        }
                        *v458 = v435;
                        v405 = v758;
                      }
                    }
                  }
                  else if (v436 >= v437)
                  {
                    goto LABEL_710;
                  }
                }
                v403 = v405 - 1;
              }
              while (v405);
              v507 = (unint64_t)v17 >> 3;
              v508 = vdup_n_s32(0x7F7FFFFFu);
              while (1)
              {
                v509 = 0;
                v510 = (uint64_t *)v743;
                v511 = v743->i64[0];
                do
                {
                  v513 = (float32x2_t *)&v510[v509 + 1];
                  v514 = (2 * v509) | 1;
                  v515 = 2 * v509 + 2;
                  if (v515 < v507)
                  {
                    v516 = *v513;
                    v517 = v513[1];
                    v518 = *(unsigned __int8 *)(*(_QWORD *)v513 + 1216);
                    v519 = *(unsigned __int8 *)(*(_QWORD *)&v517 + 1216);
                    if (v518 == v519)
                    {
                      v520 = *(float *)(*(_QWORD *)&v516 + 664);
                      v521 = a3[1].f32[0];
                      if (v520 >= a3->f32[0] && v520 < v521)
                      {
                        v524 = *(float *)(*(_QWORD *)&v516 + 668);
                        v523 = v524 >= a3->f32[1];
                        if (v524 >= a3[1].f32[1])
                          v523 = 0;
                      }
                      else
                      {
                        v523 = 0;
                      }
                      v525 = *(float *)(*(_QWORD *)&v517 + 664);
                      if (v525 >= a3->f32[0] && v525 < v521)
                      {
                        v528 = *(float *)(*(_QWORD *)&v517 + 668);
                        v527 = v528 < a3[1].f32[1] && v528 >= a3->f32[1];
                      }
                      else
                      {
                        v527 = 0;
                      }
                      if (*(_BYTE *)(*(_QWORD *)&v516 + 820) == 2)
                        v512 = v523;
                      else
                        v512 = 0;
                      if (*(_BYTE *)(*(_QWORD *)&v517 + 820) == 2)
                        v529 = v527;
                      else
                        v529 = 0;
                      if ((v512 | v529) != 1 || ((v512 ^ v529) & 1) == 0)
                      {
                        v512 = v523;
                        if (v523 == v527)
                        {
                          v530 = *(_QWORD *)(*(_QWORD *)&v516 + 264);
                          if (v530 && *(_BYTE *)(*(_QWORD *)&v516 + 1283)
                            || (v530 = *(_QWORD *)(*(_QWORD *)&v516 + 272)) != 0)
                          {
                            v531 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v530 + 248))(v530);
                            v533 = *v531;
                            v532 = v531[1];
                            v534 = v531[2];
                            v535 = v531[3];
                          }
                          else
                          {
                            v532 = 3.4028e38;
                            v534 = -3.4028e38;
                            v533 = 3.4028e38;
                            v535 = -3.4028e38;
                          }
                          a11.n128_u64[0] = (unint64_t)a3[2];
                          result = *(float32x2_t **)(*(_QWORD *)&v517 + 264);
                          if (result && *(_BYTE *)(*(_QWORD *)&v517 + 1283)
                            || (result = *(float32x2_t **)(*(_QWORD *)&v517 + 272)) != 0)
                          {
                            v759 = a11;
                            result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                            a11 = v759;
                            v537 = *result;
                            v536 = result[1];
                            v538 = a3[2];
                          }
                          else
                          {
                            v536 = (float32x2_t)0x80000000800000;
                            v537 = (float32x2_t)v508;
                            v538 = a3[2];
                          }
                          v539 = vmla_f32(vsub_f32(v538, v537), (float32x2_t)0xBF000000BF000000, vsub_f32(v536, v537));
                          v512 = (float)((float)((float)(a11.n128_f32[0]
                                                       - (float)(v533 + (float)((float)(v534 - v533) * 0.5)))
                                               * (float)(a11.n128_f32[0]
                                                       - (float)(v533 + (float)((float)(v534 - v533) * 0.5))))
                                       + (float)((float)(a11.n128_f32[1]
                                                       - (float)(v532 + (float)((float)(v535 - v532) * 0.5)))
                                               * (float)(a11.n128_f32[1]
                                                       - (float)(v532 + (float)((float)(v535 - v532) * 0.5))))) < vaddv_f32(vmul_f32(v539, v539));
                        }
                      }
                    }
                    else
                    {
                      v512 = v518 < v519;
                    }
                    if (v512)
                    {
                      ++v513;
                      v514 = v515;
                    }
                  }
                  *v510 = (uint64_t)*v513;
                  v510 = (uint64_t *)v513;
                  v509 = v514;
                }
                while (v514 <= (uint64_t)((unint64_t)(v507 - 2) >> 1));
                v540 = a2 - 1;
                v344 = v513 == &a2[-1];
                --a2;
                if (v344)
                {
                  *v513 = (float32x2_t)v511;
                }
                else
                {
                  *v513 = *v540;
                  *v540 = (float32x2_t)v511;
                  v541 = (char *)v513 - (char *)v743 + 8;
                  if (v541 >= 9)
                  {
                    v542 = ((unint64_t)v541 >> 3) - 2;
                    v543 = v542 >> 1;
                    v544 = &v743->i64[v542 >> 1];
                    v545 = (float32x2_t)*v544;
                    v546 = *v513;
                    v547 = *(unsigned __int8 *)(*v544 + 1216);
                    v548 = *(unsigned __int8 *)(*(_QWORD *)v513 + 1216);
                    if (v547 == v548)
                    {
                      v549 = *(float *)(*(_QWORD *)&v545 + 664);
                      if (v549 >= a3->f32[0] && v549 < a3[1].f32[0])
                      {
                        v552 = *(float *)(*(_QWORD *)&v545 + 668);
                        v551 = v552 >= a3->f32[1];
                        if (v552 >= a3[1].f32[1])
                          v551 = 0;
                      }
                      else
                      {
                        v551 = 0;
                      }
                      v553 = *(float *)(*(_QWORD *)&v546 + 664);
                      if (v553 >= a3->f32[0] && v553 < a3[1].f32[0])
                      {
                        v556 = *(float *)(*(_QWORD *)&v546 + 668);
                        v555 = v556 >= a3->f32[1];
                        if (v556 >= a3[1].f32[1])
                          v555 = 0;
                      }
                      else
                      {
                        v555 = 0;
                      }
                      if (*(_BYTE *)(*(_QWORD *)&v545 + 820) == 2)
                        v557 = v551;
                      else
                        v557 = 0;
                      if (*(_BYTE *)(*(_QWORD *)&v546 + 820) == 2)
                        v558 = v555;
                      else
                        v558 = 0;
                      if ((v557 | v558) == 1 && ((v557 ^ v558) & 1) != 0 || (v557 = v551, v551 != v555))
                      {
                        if (v557)
                          goto LABEL_879;
                      }
                      else
                      {
                        v559 = *(_QWORD *)(*(_QWORD *)&v545 + 264);
                        if (v559 && *(_BYTE *)(*(_QWORD *)&v545 + 1283)
                          || (v559 = *(_QWORD *)(*(_QWORD *)&v545 + 272)) != 0)
                        {
                          v560 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v559 + 248))(v559);
                          v562 = *v560;
                          v561 = v560[1];
                          v563 = v560[2];
                          v564 = v560[3];
                        }
                        else
                        {
                          v561 = 3.4028e38;
                          v563 = -3.4028e38;
                          v562 = 3.4028e38;
                          v564 = -3.4028e38;
                        }
                        a11.n128_u64[0] = (unint64_t)a3[2];
                        result = *(float32x2_t **)(*(_QWORD *)&v546 + 264);
                        if (result && *(_BYTE *)(*(_QWORD *)&v546 + 1283)
                          || (result = *(float32x2_t **)(*(_QWORD *)&v546 + 272)) != 0)
                        {
                          v760 = a11;
                          result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                          a11 = v760;
                          v565 = *result;
                          v566 = result[1];
                          v567 = a3[2];
                        }
                        else
                        {
                          v565 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                          v566 = (float32x2_t)0x80000000800000;
                          v567 = a3[2];
                        }
                        v568 = vsub_f32(v567, vmla_f32(v565, (float32x2_t)0x3F0000003F000000, vsub_f32(v566, v565)));
                        if ((float)((float)((float)(a11.n128_f32[0]
                                                   - (float)(v562 + (float)((float)(v563 - v562) * 0.5)))
                                           * (float)(a11.n128_f32[0]
                                                   - (float)(v562 + (float)((float)(v563 - v562) * 0.5))))
                                   + (float)((float)(a11.n128_f32[1]
                                                   - (float)(v561 + (float)((float)(v564 - v561) * 0.5)))
                                           * (float)(a11.n128_f32[1]
                                                   - (float)(v561 + (float)((float)(v564 - v561) * 0.5))))) < vaddv_f32(vmul_f32(v568, v568)))
                        {
                          v546 = *v513;
                          v545 = (float32x2_t)*v544;
LABEL_879:
                          *v513 = v545;
                          if (v542 >= 2)
                          {
                            do
                            {
                              v569 = v544;
                              v570 = v543 - 1;
                              v543 = (v543 - 1) >> 1;
                              v544 = &v743->i64[v543];
                              v571 = *v544;
                              v572 = *(unsigned __int8 *)(*v544 + 1216);
                              v573 = *(unsigned __int8 *)(*(_QWORD *)&v546 + 1216);
                              if (v572 == v573)
                              {
                                v574 = *(float *)(v571 + 664);
                                v575 = a3[1].f32[0];
                                if (v574 >= a3->f32[0] && v574 < v575)
                                {
                                  v578 = *(float *)(v571 + 668);
                                  v577 = v578 >= a3->f32[1];
                                  if (v578 >= a3[1].f32[1])
                                    v577 = 0;
                                }
                                else
                                {
                                  v577 = 0;
                                }
                                v579 = *(float *)(*(_QWORD *)&v546 + 664);
                                if (v579 >= a3->f32[0] && v579 < v575)
                                {
                                  v582 = *(float *)(*(_QWORD *)&v546 + 668);
                                  v581 = v582 >= a3->f32[1];
                                  if (v582 >= a3[1].f32[1])
                                    v581 = 0;
                                }
                                else
                                {
                                  v581 = 0;
                                }
                                if (*(_BYTE *)(v571 + 820) == 2)
                                  v583 = v577;
                                else
                                  v583 = 0;
                                if (*(_BYTE *)(*(_QWORD *)&v546 + 820) == 2)
                                  v584 = v581;
                                else
                                  v584 = 0;
                                if ((v583 | v584) == 1 && ((v583 ^ v584) & 1) != 0 || (v583 = v577, v577 != v581))
                                {
                                  if (!v583)
                                    goto LABEL_921;
                                }
                                else
                                {
                                  v585 = *(_QWORD *)(v571 + 264);
                                  if (v585 && *(_BYTE *)(v571 + 1283) || (v585 = *(_QWORD *)(v571 + 272)) != 0)
                                  {
                                    v586 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v585 + 248))(v585);
                                    v588 = *v586;
                                    v587 = v586[1];
                                    v589 = v586[2];
                                    v590 = v586[3];
                                  }
                                  else
                                  {
                                    v587 = 3.4028e38;
                                    v589 = -3.4028e38;
                                    v588 = 3.4028e38;
                                    v590 = -3.4028e38;
                                  }
                                  a11.n128_u64[0] = (unint64_t)a3[2];
                                  result = *(float32x2_t **)(*(_QWORD *)&v546 + 264);
                                  if (result && *(_BYTE *)(*(_QWORD *)&v546 + 1283)
                                    || (result = *(float32x2_t **)(*(_QWORD *)&v546 + 272)) != 0)
                                  {
                                    v761 = a11;
                                    result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                                    a11 = v761;
                                    v591 = *result;
                                    v592 = result[1];
                                    v593 = a3[2];
                                  }
                                  else
                                  {
                                    v591 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                                    v592 = (float32x2_t)0x80000000800000;
                                    v593 = a3[2];
                                  }
                                  v594 = vmla_f32(vsub_f32(v593, v591), (float32x2_t)0xBF000000BF000000, vsub_f32(v592, v591));
                                  if ((float)((float)((float)(a11.n128_f32[0]
                                                             - (float)(v588 + (float)((float)(v589 - v588) * 0.5)))
                                                     * (float)(a11.n128_f32[0]
                                                             - (float)(v588 + (float)((float)(v589 - v588) * 0.5))))
                                             + (float)((float)(a11.n128_f32[1]
                                                             - (float)(v587 + (float)((float)(v590 - v587) * 0.5)))
                                                     * (float)(a11.n128_f32[1]
                                                             - (float)(v587 + (float)((float)(v590 - v587) * 0.5))))) >= vaddv_f32(vmul_f32(v594, v594)))
                                  {
LABEL_921:
                                    v544 = v569;
                                    break;
                                  }
                                  v571 = *v544;
                                }
                              }
                              else if (v572 >= v573)
                              {
                                goto LABEL_921;
                              }
                              *v569 = v571;
                            }
                            while (v570 > 1);
                          }
                          *v544 = (uint64_t)v546;
                        }
                      }
                    }
                    else if (v547 < v548)
                    {
                      goto LABEL_879;
                    }
                  }
                }
                v28 = v507-- <= 2;
                if (v28)
                  return result;
              }
            }
            return result;
          }
          v19 = (unint64_t)v18 >> 1;
          v20 = &v16[(unint64_t)v18 >> 1];
          if ((unint64_t)v17 < 0x401)
          {
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v20, v16, v741, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v16, v20, v741, a3);
            v21 = v19;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v16 + 1, &v16[v21 - 1], a2 - 2, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v16 + 2, &v16[v21 + 1], a2 - 3, a3);
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(&v16[v21 - 1], v20, &v16[v21 + 1], a3);
            v22 = *v16;
            *v16 = v16[v21];
            v16[v21] = v22;
          }
          --a4;
          v23 = *v16;
          if ((a5 & 1) != 0)
            goto LABEL_49;
          v24 = v16[-1];
          v25 = *(unsigned __int8 *)(*(_QWORD *)&v24 + 1216);
          v26 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
          if (v25 != v26)
          {
            if (v25 < v26)
              goto LABEL_49;
            goto LABEL_264;
          }
          v27 = *(float *)(*(_QWORD *)&v24 + 664);
          v28 = v27 >= a3->f32[0] && v27 < a3[1].f32[0];
          if (v28)
          {
            v30 = *(float *)(*(_QWORD *)&v24 + 668);
            v29 = v30 >= a3->f32[1];
            if (v30 >= a3[1].f32[1])
              v29 = 0;
          }
          else
          {
            v29 = 0;
          }
          v31 = *(float *)(*(_QWORD *)&v23 + 664);
          if (v31 >= a3->f32[0] && v31 < a3[1].f32[0])
          {
            v34 = *(float *)(*(_QWORD *)&v23 + 668);
            v33 = v34 >= a3->f32[1];
            if (v34 >= a3[1].f32[1])
              v33 = 0;
          }
          else
          {
            v33 = 0;
          }
          if (*(_BYTE *)(*(_QWORD *)&v24 + 820) == 2)
            v35 = v29;
          else
            v35 = 0;
          if (*(_BYTE *)(*(_QWORD *)&v23 + 820) == 2)
            v36 = v33;
          else
            v36 = 0;
          if ((v35 | v36) == 1 && ((v35 ^ v36) & 1) != 0 || (LOBYTE(v35) = v29, v29 != v33))
          {
            if ((v35 & 1) != 0)
              goto LABEL_49;
            goto LABEL_264;
          }
          v37 = *(_QWORD *)(*(_QWORD *)&v24 + 264);
          if (v37 && *(_BYTE *)(*(_QWORD *)&v24 + 1283) || (v37 = *(_QWORD *)(*(_QWORD *)&v24 + 272)) != 0)
          {
            v38 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 248))(v37);
            v40 = *v38;
            v39 = v38[1];
            v41 = v38[2];
            v42 = v38[3];
          }
          else
          {
            v39 = 3.4028e38;
            v41 = -3.4028e38;
            v40 = 3.4028e38;
            v42 = -3.4028e38;
          }
          a11.n128_u64[0] = (unint64_t)a3[2];
          result = *(float32x2_t **)(*(_QWORD *)&v23 + 264);
          if (result && *(_BYTE *)(*(_QWORD *)&v23 + 1283)
            || (result = *(float32x2_t **)(*(_QWORD *)&v23 + 272)) != 0)
          {
            v744 = a11;
            result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
            a11 = v744;
            v43 = *result;
            v44 = result[1];
            v45 = a3[2];
          }
          else
          {
            v43 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
            v44 = (float32x2_t)0x80000000800000;
            v45 = a3[2];
          }
          v46 = vsub_f32(v45, vmla_f32(v43, (float32x2_t)0x3F0000003F000000, vsub_f32(v44, v43)));
          v23 = *v16;
          if ((float)((float)((float)(a11.n128_f32[0] - (float)(v40 + (float)((float)(v41 - v40) * 0.5)))
                             * (float)(a11.n128_f32[0] - (float)(v40 + (float)((float)(v41 - v40) * 0.5))))
                     + (float)((float)(a11.n128_f32[1] - (float)(v39 + (float)((float)(v42 - v39) * 0.5)))
                             * (float)(a11.n128_f32[1] - (float)(v39 + (float)((float)(v42 - v39) * 0.5))))) >= vaddv_f32(vmul_f32(v46, v46)))
          {
            v26 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
LABEL_264:
            v184 = *v741;
            v185 = *(unsigned __int8 *)(*(_QWORD *)v741 + 1216);
            if (v26 == v185)
            {
              v186 = *(float *)(*(_QWORD *)&v23 + 664);
              if (v186 >= a3->f32[0] && v186 < a3[1].f32[0])
              {
                v212 = *(float *)(*(_QWORD *)&v23 + 668);
                v188 = v212 >= a3->f32[1];
                if (v212 >= a3[1].f32[1])
                  v188 = 0;
              }
              else
              {
                v188 = 0;
              }
              v213 = *(float *)(*(_QWORD *)&v184 + 664);
              if (v213 >= a3->f32[0] && v213 < a3[1].f32[0])
              {
                v216 = *(float *)(*(_QWORD *)&v184 + 668);
                v215 = v216 >= a3->f32[1];
                if (v216 >= a3[1].f32[1])
                  v215 = 0;
              }
              else
              {
                v215 = 0;
              }
              if (*(_BYTE *)(*(_QWORD *)&v23 + 820) == 2)
                v217 = v188;
              else
                v217 = 0;
              if (*(_BYTE *)(*(_QWORD *)&v184 + 820) == 2)
                v218 = v215;
              else
                v218 = 0;
              if ((v217 | v218) == 1 && ((v217 ^ v218) & 1) != 0 || (v217 = v188, v188 != v215))
              {
                if (v217)
                  goto LABEL_271;
              }
              else
              {
                v317 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
                if (v317 && *(_BYTE *)(*(_QWORD *)&v23 + 1283) || (v317 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
                {
                  v318 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v317 + 248))(v317);
                  v320 = *v318;
                  v319 = v318[1];
                  v321 = v318[2];
                  v322 = v318[3];
                }
                else
                {
                  v319 = 3.4028e38;
                  v321 = -3.4028e38;
                  v320 = 3.4028e38;
                  v322 = -3.4028e38;
                }
                a11.n128_u64[0] = (unint64_t)a3[2];
                result = *(float32x2_t **)(*(_QWORD *)&v184 + 264);
                if (result && *(_BYTE *)(*(_QWORD *)&v184 + 1283)
                  || (result = *(float32x2_t **)(*(_QWORD *)&v184 + 272)) != 0)
                {
                  v755 = a11;
                  result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                  a11 = v755;
                  v323 = *result;
                  v324 = result[1];
                  v325 = a3[2];
                }
                else
                {
                  v323 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                  v324 = (float32x2_t)0x80000000800000;
                  v325 = a3[2];
                }
                v326 = vsub_f32(v325, vmla_f32(v323, (float32x2_t)0x3F0000003F000000, vsub_f32(v324, v323)));
                if ((float)((float)((float)(a11.n128_f32[0] - (float)(v320 + (float)((float)(v321 - v320) * 0.5)))
                                   * (float)(a11.n128_f32[0] - (float)(v320 + (float)((float)(v321 - v320) * 0.5))))
                           + (float)((float)(a11.n128_f32[1] - (float)(v319 + (float)((float)(v322 - v319) * 0.5)))
                                   * (float)(a11.n128_f32[1] - (float)(v319 + (float)((float)(v322 - v319) * 0.5))))) < vaddv_f32(vmul_f32(v326, v326)))
                {
LABEL_271:
                  for (i = v16 + 1; ; ++i)
                  {
                    v189 = *i;
                    v190 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
                    v191 = *(unsigned __int8 *)(*(_QWORD *)i + 1216);
                    if (v190 == v191)
                    {
                      v192 = *(float *)(*(_QWORD *)&v23 + 664);
                      if (v192 >= a3->f32[0] && v192 < a3[1].f32[0])
                      {
                        v195 = *(float *)(*(_QWORD *)&v23 + 668);
                        v194 = v195 >= a3->f32[1];
                        if (v195 >= a3[1].f32[1])
                          v194 = 0;
                      }
                      else
                      {
                        v194 = 0;
                      }
                      v196 = *(float *)(*(_QWORD *)&v189 + 664);
                      if (v196 >= a3->f32[0] && v196 < a3[1].f32[0])
                      {
                        v199 = *(float *)(*(_QWORD *)&v189 + 668);
                        v198 = v199 >= a3->f32[1];
                        if (v199 >= a3[1].f32[1])
                          v198 = 0;
                      }
                      else
                      {
                        v198 = 0;
                      }
                      if (*(_BYTE *)(*(_QWORD *)&v23 + 820) == 2)
                        v200 = v194;
                      else
                        v200 = 0;
                      if (*(_BYTE *)(*(_QWORD *)&v189 + 820) == 2)
                        v201 = v198;
                      else
                        v201 = 0;
                      if ((v200 | v201) == 1 && ((v200 ^ v201) & 1) != 0 || (LOBYTE(v200) = v194, v194 != v198))
                      {
                        if ((v200 & 1) != 0)
                          goto LABEL_372;
                      }
                      else
                      {
                        v202 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
                        if (v202 && *(_BYTE *)(*(_QWORD *)&v23 + 1283)
                          || (v202 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
                        {
                          v203 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v202 + 248))(v202);
                          v205 = *v203;
                          v204 = v203[1];
                          v206 = v203[2];
                          v207 = v203[3];
                        }
                        else
                        {
                          v204 = 3.4028e38;
                          v206 = -3.4028e38;
                          v205 = 3.4028e38;
                          v207 = -3.4028e38;
                        }
                        a11.n128_u64[0] = (unint64_t)a3[2];
                        result = *(float32x2_t **)(*(_QWORD *)&v189 + 264);
                        if (result && *(_BYTE *)(*(_QWORD *)&v189 + 1283)
                          || (result = *(float32x2_t **)(*(_QWORD *)&v189 + 272)) != 0)
                        {
                          v750 = a11;
                          result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                          a11 = v750;
                          v208 = *result;
                          v209 = result[1];
                          v210 = a3[2];
                        }
                        else
                        {
                          v208 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                          v209 = (float32x2_t)0x80000000800000;
                          v210 = a3[2];
                        }
                        v211 = vsub_f32(v210, vmla_f32(v208, (float32x2_t)0x3F0000003F000000, vsub_f32(v209, v208)));
                        if ((float)((float)((float)(a11.n128_f32[0]
                                                   - (float)(v205 + (float)((float)(v206 - v205) * 0.5)))
                                           * (float)(a11.n128_f32[0]
                                                   - (float)(v205 + (float)((float)(v206 - v205) * 0.5))))
                                   + (float)((float)(a11.n128_f32[1]
                                                   - (float)(v204 + (float)((float)(v207 - v204) * 0.5)))
                                           * (float)(a11.n128_f32[1]
                                                   - (float)(v204 + (float)((float)(v207 - v204) * 0.5))))) < vaddv_f32(vmul_f32(v211, v211)))
                          goto LABEL_372;
                      }
                    }
                    else if (v190 < v191)
                    {
                      goto LABEL_372;
                    }
                  }
                }
              }
            }
            else if (v26 < v185)
            {
              goto LABEL_271;
            }
            for (i = v16 + 1; i < v14; ++i)
            {
              v219 = *i;
              v220 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
              v221 = *(unsigned __int8 *)(*(_QWORD *)i + 1216);
              if (v220 == v221)
              {
                v222 = *(float *)(*(_QWORD *)&v23 + 664);
                if (v222 >= a3->f32[0] && v222 < a3[1].f32[0])
                {
                  v225 = *(float *)(*(_QWORD *)&v23 + 668);
                  v224 = v225 >= a3->f32[1];
                  if (v225 >= a3[1].f32[1])
                    v224 = 0;
                }
                else
                {
                  v224 = 0;
                }
                v226 = *(float *)(*(_QWORD *)&v219 + 664);
                if (v226 >= a3->f32[0] && v226 < a3[1].f32[0])
                {
                  v229 = *(float *)(*(_QWORD *)&v219 + 668);
                  v228 = v229 >= a3->f32[1];
                  if (v229 >= a3[1].f32[1])
                    v228 = 0;
                }
                else
                {
                  v228 = 0;
                }
                if (*(_BYTE *)(*(_QWORD *)&v23 + 820) == 2)
                  v230 = v224;
                else
                  v230 = 0;
                if (*(_BYTE *)(*(_QWORD *)&v219 + 820) == 2)
                  v231 = v228;
                else
                  v231 = 0;
                if ((v230 | v231) == 1 && ((v230 ^ v231) & 1) != 0 || (LOBYTE(v230) = v224, v224 != v228))
                {
                  if ((v230 & 1) != 0)
                    break;
                }
                else
                {
                  v232 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
                  if (v232 && *(_BYTE *)(*(_QWORD *)&v23 + 1283)
                    || (v232 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
                  {
                    v233 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v232 + 248))(v232);
                    v235 = *v233;
                    v234 = v233[1];
                    v236 = v233[2];
                    v237 = v233[3];
                  }
                  else
                  {
                    v234 = 3.4028e38;
                    v236 = -3.4028e38;
                    v235 = 3.4028e38;
                    v237 = -3.4028e38;
                  }
                  a11.n128_u64[0] = (unint64_t)a3[2];
                  result = *(float32x2_t **)(*(_QWORD *)&v219 + 264);
                  if (result && *(_BYTE *)(*(_QWORD *)&v219 + 1283)
                    || (result = *(float32x2_t **)(*(_QWORD *)&v219 + 272)) != 0)
                  {
                    v751 = a11;
                    result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                    a11 = v751;
                    v238 = *result;
                    v239 = result[1];
                    v240 = a3[2];
                  }
                  else
                  {
                    v238 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                    v239 = (float32x2_t)0x80000000800000;
                    v240 = a3[2];
                  }
                  v241 = vsub_f32(v240, vmla_f32(v238, (float32x2_t)0x3F0000003F000000, vsub_f32(v239, v238)));
                  if ((float)((float)((float)(a11.n128_f32[0] - (float)(v235 + (float)((float)(v236 - v235) * 0.5)))
                                     * (float)(a11.n128_f32[0] - (float)(v235 + (float)((float)(v236 - v235) * 0.5))))
                             + (float)((float)(a11.n128_f32[1] - (float)(v234 + (float)((float)(v237 - v234) * 0.5)))
                                     * (float)(a11.n128_f32[1] - (float)(v234 + (float)((float)(v237 - v234) * 0.5))))) < vaddv_f32(vmul_f32(v241, v241)))
                    break;
                }
              }
              else if (v220 < v221)
              {
                break;
              }
            }
LABEL_372:
            j = v14;
            if (i >= v14)
              goto LABEL_493;
            for (j = a2 - 1; ; --j)
            {
              v243 = *j;
              v244 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
              v245 = *(unsigned __int8 *)(*(_QWORD *)j + 1216);
              if (v244 != v245)
              {
                if (v244 >= v245)
                  goto LABEL_493;
                continue;
              }
              v246 = *(float *)(*(_QWORD *)&v23 + 664);
              if (v246 >= a3->f32[0] && v246 < a3[1].f32[0])
              {
                v249 = *(float *)(*(_QWORD *)&v23 + 668);
                v248 = v249 >= a3->f32[1];
                if (v249 >= a3[1].f32[1])
                  v248 = 0;
              }
              else
              {
                v248 = 0;
              }
              v250 = *(float *)(*(_QWORD *)&v243 + 664);
              if (v250 >= a3->f32[0] && v250 < a3[1].f32[0])
              {
                v253 = *(float *)(*(_QWORD *)&v243 + 668);
                v252 = v253 >= a3->f32[1];
                if (v253 >= a3[1].f32[1])
                  v252 = 0;
              }
              else
              {
                v252 = 0;
              }
              v254 = *(_BYTE *)(*(_QWORD *)&v23 + 820) == 2 ? v248 : 0;
              v255 = *(_BYTE *)(*(_QWORD *)&v243 + 820) == 2 ? v252 : 0;
              if ((v254 | v255) != 1 || ((v254 ^ v255) & 1) == 0)
              {
                v254 = v248;
                if (v248 == v252)
                  break;
              }
              if (!v254)
                goto LABEL_493;
LABEL_375:
              ;
            }
            v256 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
            if (v256 && *(_BYTE *)(*(_QWORD *)&v23 + 1283) || (v256 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
            {
              v257 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v256 + 248))(v256);
              v259 = *v257;
              v258 = v257[1];
              v260 = v257[2];
              v261 = v257[3];
            }
            else
            {
              v258 = 3.4028e38;
              v260 = -3.4028e38;
              v259 = 3.4028e38;
              v261 = -3.4028e38;
            }
            a11.n128_u64[0] = (unint64_t)a3[2];
            result = *(float32x2_t **)(*(_QWORD *)&v243 + 264);
            if (result && *(_BYTE *)(*(_QWORD *)&v243 + 1283)
              || (result = *(float32x2_t **)(*(_QWORD *)&v243 + 272)) != 0)
            {
              v752 = a11;
              result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
              a11 = v752;
              v262 = *result;
              v263 = result[1];
              v264 = a3[2];
            }
            else
            {
              v262 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
              v263 = (float32x2_t)0x80000000800000;
              v264 = a3[2];
            }
            v265 = vsub_f32(v264, vmla_f32(v262, (float32x2_t)0x3F0000003F000000, vsub_f32(v263, v262)));
            if ((float)((float)((float)(a11.n128_f32[0] - (float)(v259 + (float)((float)(v260 - v259) * 0.5)))
                               * (float)(a11.n128_f32[0] - (float)(v259 + (float)((float)(v260 - v259) * 0.5))))
                       + (float)((float)(a11.n128_f32[1] - (float)(v258 + (float)((float)(v261 - v258) * 0.5)))
                               * (float)(a11.n128_f32[1] - (float)(v258 + (float)((float)(v261 - v258) * 0.5))))) < vaddv_f32(vmul_f32(v265, v265)))
              goto LABEL_375;
LABEL_493:
            if (i < j)
            {
              v266 = *i;
              *i++ = *j;
              *j = v266;
              while (1)
              {
                v267 = *i;
                v268 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
                v269 = *(unsigned __int8 *)(*(_QWORD *)i + 1216);
                if (v268 == v269)
                {
                  v270 = *(float *)(*(_QWORD *)&v23 + 664);
                  v271 = a3[1].f32[0];
                  if (v270 >= a3->f32[0] && v270 < v271)
                  {
                    v274 = *(float *)(*(_QWORD *)&v23 + 668);
                    v273 = v274 >= a3->f32[1];
                    if (v274 >= a3[1].f32[1])
                      v273 = 0;
                  }
                  else
                  {
                    v273 = 0;
                  }
                  v275 = *(float *)(*(_QWORD *)&v267 + 664);
                  if (v275 >= a3->f32[0] && v275 < v271)
                  {
                    v278 = *(float *)(*(_QWORD *)&v267 + 668);
                    v277 = v278 >= a3->f32[1];
                    if (v278 >= a3[1].f32[1])
                      v277 = 0;
                  }
                  else
                  {
                    v277 = 0;
                  }
                  if (*(_BYTE *)(*(_QWORD *)&v23 + 820) == 2)
                    v279 = v273;
                  else
                    v279 = 0;
                  if (*(_BYTE *)(*(_QWORD *)&v267 + 820) == 2)
                    v280 = v277;
                  else
                    v280 = 0;
                  if ((v279 | v280) == 1 && ((v279 ^ v280) & 1) != 0 || (LOBYTE(v279) = v273, v273 != v277))
                  {
                    if ((v279 & 1) != 0)
                      goto LABEL_456;
                  }
                  else
                  {
                    v281 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
                    if (v281 && *(_BYTE *)(*(_QWORD *)&v23 + 1283)
                      || (v281 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
                    {
                      v282 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v281 + 248))(v281);
                      v284 = *v282;
                      v283 = v282[1];
                      v285 = v282[2];
                      v286 = v282[3];
                    }
                    else
                    {
                      v283 = 3.4028e38;
                      v285 = -3.4028e38;
                      v284 = 3.4028e38;
                      v286 = -3.4028e38;
                    }
                    a11.n128_u64[0] = (unint64_t)a3[2];
                    result = *(float32x2_t **)(*(_QWORD *)&v267 + 264);
                    if (result && *(_BYTE *)(*(_QWORD *)&v267 + 1283)
                      || (result = *(float32x2_t **)(*(_QWORD *)&v267 + 272)) != 0)
                    {
                      v753 = a11;
                      result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                      a11 = v753;
                      v287 = *result;
                      v288 = result[1];
                      v289 = a3[2];
                    }
                    else
                    {
                      v287 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                      v288 = (float32x2_t)0x80000000800000;
                      v289 = a3[2];
                    }
                    v290 = vmla_f32(vsub_f32(v289, v287), (float32x2_t)0xBF000000BF000000, vsub_f32(v288, v287));
                    if ((float)((float)((float)(a11.n128_f32[0] - (float)(v284 + (float)((float)(v285 - v284) * 0.5)))
                                       * (float)(a11.n128_f32[0] - (float)(v284 + (float)((float)(v285 - v284) * 0.5))))
                               + (float)((float)(a11.n128_f32[1] - (float)(v283 + (float)((float)(v286 - v283) * 0.5)))
                                       * (float)(a11.n128_f32[1] - (float)(v283 + (float)((float)(v286 - v283) * 0.5))))) < vaddv_f32(vmul_f32(v290, v290)))
                    {
                      do
                      {
                        while (1)
                        {
LABEL_456:
                          while (1)
                          {
                            v292 = j[-1];
                            --j;
                            v291 = v292;
                            v293 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
                            v294 = *(unsigned __int8 *)(*(_QWORD *)&v292 + 1216);
                            if (v293 == v294)
                              break;
                            if (v293 >= v294)
                              goto LABEL_493;
                          }
                          v295 = *(float *)(*(_QWORD *)&v23 + 664);
                          v296 = a3[1].f32[0];
                          if (v295 >= a3->f32[0] && v295 < v296)
                          {
                            v299 = *(float *)(*(_QWORD *)&v23 + 668);
                            v298 = v299 >= a3->f32[1];
                            if (v299 >= a3[1].f32[1])
                              v298 = 0;
                          }
                          else
                          {
                            v298 = 0;
                          }
                          v300 = *(float *)(*(_QWORD *)&v291 + 664);
                          if (v300 >= a3->f32[0] && v300 < v296)
                          {
                            v303 = *(float *)(*(_QWORD *)&v291 + 668);
                            v302 = v303 >= a3->f32[1];
                            if (v303 >= a3[1].f32[1])
                              v302 = 0;
                          }
                          else
                          {
                            v302 = 0;
                          }
                          v304 = *(_BYTE *)(*(_QWORD *)&v23 + 820) == 2 ? v298 : 0;
                          v305 = *(_BYTE *)(*(_QWORD *)&v291 + 820) == 2 ? v302 : 0;
                          if ((v304 | v305) != 1 || ((v304 ^ v305) & 1) == 0)
                          {
                            v304 = v298;
                            if (v298 == v302)
                              break;
                          }
                          if (!v304)
                            goto LABEL_493;
                        }
                        v306 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
                        if (v306 && *(_BYTE *)(*(_QWORD *)&v23 + 1283)
                          || (v306 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
                        {
                          v307 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v306 + 248))(v306);
                          v309 = *v307;
                          v308 = v307[1];
                          v310 = v307[2];
                          v311 = v307[3];
                        }
                        else
                        {
                          v308 = 3.4028e38;
                          v310 = -3.4028e38;
                          v309 = 3.4028e38;
                          v311 = -3.4028e38;
                        }
                        a11.n128_u64[0] = (unint64_t)a3[2];
                        result = *(float32x2_t **)(*(_QWORD *)&v291 + 264);
                        if (result && *(_BYTE *)(*(_QWORD *)&v291 + 1283)
                          || (result = *(float32x2_t **)(*(_QWORD *)&v291 + 272)) != 0)
                        {
                          v754 = a11;
                          result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                          a11 = v754;
                          v312 = *result;
                          v313 = result[1];
                          v314 = a3[2];
                        }
                        else
                        {
                          v312 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                          v313 = (float32x2_t)0x80000000800000;
                          v314 = a3[2];
                        }
                        v315 = vmla_f32(vsub_f32(v314, v312), (float32x2_t)0xBF000000BF000000, vsub_f32(v313, v312));
                      }
                      while ((float)((float)((float)(a11.n128_f32[0]
                                                    - (float)(v309 + (float)((float)(v310 - v309) * 0.5)))
                                            * (float)(a11.n128_f32[0]
                                                    - (float)(v309 + (float)((float)(v310 - v309) * 0.5))))
                                    + (float)((float)(a11.n128_f32[1]
                                                    - (float)(v308 + (float)((float)(v311 - v308) * 0.5)))
                                            * (float)(a11.n128_f32[1]
                                                    - (float)(v308 + (float)((float)(v311 - v308) * 0.5))))) < vaddv_f32(vmul_f32(v315, v315)));
                      goto LABEL_493;
                    }
                  }
                }
                else if (v268 < v269)
                {
                  goto LABEL_456;
                }
                ++i;
              }
            }
            v316 = i - 1;
            if (&i[-1] != (float32x2_t *)v743)
              *(float32x2_t *)v743->i8 = *v316;
            a5 = 0;
            *v316 = v23;
            continue;
          }
LABEL_49:
          for (k = (unint64_t)&v16[1]; ; k += 8)
          {
            v48 = *(_QWORD *)k;
            v49 = *(unsigned __int8 *)(*(_QWORD *)k + 1216);
            v50 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
            if (v49 != v50)
            {
              if (v49 >= v50)
                goto LABEL_89;
              continue;
            }
            v51 = *(float *)(v48 + 664);
            v52 = a3[1].f32[0];
            if (v51 >= a3->f32[0] && v51 < v52)
            {
              v55 = *(float *)(v48 + 668);
              v54 = v55 >= a3->f32[1];
              if (v55 >= a3[1].f32[1])
                v54 = 0;
            }
            else
            {
              v54 = 0;
            }
            v56 = *(float *)(*(_QWORD *)&v23 + 664);
            if (v56 >= a3->f32[0] && v56 < v52)
            {
              v59 = *(float *)(*(_QWORD *)&v23 + 668);
              v58 = v59 >= a3->f32[1];
              if (v59 >= a3[1].f32[1])
                v58 = 0;
            }
            else
            {
              v58 = 0;
            }
            v60 = *(_BYTE *)(v48 + 820) == 2 ? v54 : 0;
            v61 = *(_BYTE *)(*(_QWORD *)&v23 + 820) == 2 ? v58 : 0;
            if ((v60 | v61) != 1 || ((v60 ^ v61) & 1) == 0)
            {
              v60 = v54;
              if (v54 == v58)
                break;
            }
            if (!v60)
              goto LABEL_89;
LABEL_51:
            ;
          }
          v62 = *(_QWORD *)(v48 + 264);
          if (v62 && *(_BYTE *)(v48 + 1283) || (v62 = *(_QWORD *)(v48 + 272)) != 0)
          {
            v63 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 248))(v62);
            v65 = *v63;
            v64 = v63[1];
            v66 = v63[2];
            v67 = v63[3];
          }
          else
          {
            v64 = 3.4028e38;
            v66 = -3.4028e38;
            v65 = 3.4028e38;
            v67 = -3.4028e38;
          }
          a11.n128_u64[0] = (unint64_t)a3[2];
          v68 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
          if (v68 && *(_BYTE *)(*(_QWORD *)&v23 + 1283) || (v68 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
          {
            v745 = a11;
            v69 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 248))(v68);
            a11 = v745;
            v70 = *v69;
            v71 = v69[1];
            v72 = a3[2];
          }
          else
          {
            v71 = (float32x2_t)0x80000000800000;
            v72 = a3[2];
            v70 = (float32x2_t)v13;
          }
          v73 = vmla_f32(vsub_f32(v72, v70), (float32x2_t)0xBF000000BF000000, vsub_f32(v71, v70));
          if ((float)((float)((float)(a11.n128_f32[0] - (float)(v65 + (float)((float)(v66 - v65) * 0.5)))
                             * (float)(a11.n128_f32[0] - (float)(v65 + (float)((float)(v66 - v65) * 0.5))))
                     + (float)((float)(a11.n128_f32[1] - (float)(v64 + (float)((float)(v67 - v64) * 0.5)))
                             * (float)(a11.n128_f32[1] - (float)(v64 + (float)((float)(v67 - v64) * 0.5))))) < vaddv_f32(vmul_f32(v73, v73)))
            goto LABEL_51;
LABEL_89:
          v74 = (float32x2_t *)(k - 8);
          m = a2 - 1;
          if ((float32x2_t *)(k - 8) != v16)
          {
            while (1)
            {
              v76 = *m;
              v77 = *(unsigned __int8 *)(*(_QWORD *)m + 1216);
              v78 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
              if (v77 == v78)
              {
                v79 = *(float *)(*(_QWORD *)&v76 + 664);
                if (v79 >= a3->f32[0] && v79 < a3[1].f32[0])
                {
                  v82 = *(float *)(*(_QWORD *)&v76 + 668);
                  v81 = v82 >= a3->f32[1];
                  if (v82 >= a3[1].f32[1])
                    v81 = 0;
                }
                else
                {
                  v81 = 0;
                }
                v83 = *(float *)(*(_QWORD *)&v23 + 664);
                if (v83 >= a3->f32[0] && v83 < a3[1].f32[0])
                {
                  v86 = *(float *)(*(_QWORD *)&v23 + 668);
                  v85 = v86 >= a3->f32[1];
                  if (v86 >= a3[1].f32[1])
                    v85 = 0;
                }
                else
                {
                  v85 = 0;
                }
                if (*(_BYTE *)(*(_QWORD *)&v76 + 820) == 2)
                  v87 = v81;
                else
                  v87 = 0;
                if (*(_BYTE *)(*(_QWORD *)&v23 + 820) == 2)
                  v88 = v85;
                else
                  v88 = 0;
                if ((v87 | v88) == 1 && ((v87 ^ v88) & 1) != 0 || (LOBYTE(v87) = v81, v81 != v85))
                {
                  if ((v87 & 1) != 0)
                    goto LABEL_173;
                }
                else
                {
                  v89 = *(_QWORD *)(*(_QWORD *)&v76 + 264);
                  if (v89 && *(_BYTE *)(*(_QWORD *)&v76 + 1283) || (v89 = *(_QWORD *)(*(_QWORD *)&v76 + 272)) != 0)
                  {
                    v90 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 248))(v89);
                    v92 = *v90;
                    v91 = v90[1];
                    v93 = v90[2];
                    v94 = v90[3];
                  }
                  else
                  {
                    v91 = 3.4028e38;
                    v93 = -3.4028e38;
                    v92 = 3.4028e38;
                    v94 = -3.4028e38;
                  }
                  a11.n128_u64[0] = (unint64_t)a3[2];
                  v95 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
                  if (v95 && *(_BYTE *)(*(_QWORD *)&v23 + 1283) || (v95 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
                  {
                    v746 = a11;
                    v96 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 248))(v95);
                    a11 = v746;
                    v97 = *v96;
                    v98 = v96[1];
                    v99 = a3[2];
                  }
                  else
                  {
                    v97 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                    v98 = (float32x2_t)0x80000000800000;
                    v99 = a3[2];
                  }
                  v100 = vsub_f32(v99, vmla_f32(v97, (float32x2_t)0x3F0000003F000000, vsub_f32(v98, v97)));
                  if ((float)((float)((float)(a11.n128_f32[0] - (float)(v92 + (float)((float)(v93 - v92) * 0.5)))
                                     * (float)(a11.n128_f32[0] - (float)(v92 + (float)((float)(v93 - v92) * 0.5))))
                             + (float)((float)(a11.n128_f32[1] - (float)(v91 + (float)((float)(v94 - v91) * 0.5)))
                                     * (float)(a11.n128_f32[1] - (float)(v91 + (float)((float)(v94 - v91) * 0.5))))) < vaddv_f32(vmul_f32(v100, v100)))
                    goto LABEL_173;
                }
              }
              else if (v77 < v78)
              {
                goto LABEL_173;
              }
              --m;
            }
          }
          for (m = a2 - 1; k < (unint64_t)&m[1]; --m)
          {
            v101 = *m;
            v102 = *(unsigned __int8 *)(*(_QWORD *)m + 1216);
            v103 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
            if (v102 == v103)
            {
              v104 = *(float *)(*(_QWORD *)&v101 + 664);
              if (v104 >= a3->f32[0] && v104 < a3[1].f32[0])
              {
                v107 = *(float *)(*(_QWORD *)&v101 + 668);
                v106 = v107 >= a3->f32[1];
                if (v107 >= a3[1].f32[1])
                  v106 = 0;
              }
              else
              {
                v106 = 0;
              }
              v108 = *(float *)(*(_QWORD *)&v23 + 664);
              if (v108 >= a3->f32[0] && v108 < a3[1].f32[0])
              {
                v111 = *(float *)(*(_QWORD *)&v23 + 668);
                v110 = v111 >= a3->f32[1];
                if (v111 >= a3[1].f32[1])
                  v110 = 0;
              }
              else
              {
                v110 = 0;
              }
              if (*(_BYTE *)(*(_QWORD *)&v101 + 820) == 2)
                v112 = v106;
              else
                v112 = 0;
              if (*(_BYTE *)(*(_QWORD *)&v23 + 820) == 2)
                v113 = v110;
              else
                v113 = 0;
              if ((v112 | v113) == 1 && ((v112 ^ v113) & 1) != 0 || (LOBYTE(v112) = v106, v106 != v110))
              {
                if ((v112 & 1) != 0)
                  goto LABEL_173;
              }
              else
              {
                v114 = *(_QWORD *)(*(_QWORD *)&v101 + 264);
                if (v114 && *(_BYTE *)(*(_QWORD *)&v101 + 1283)
                  || (v114 = *(_QWORD *)(*(_QWORD *)&v101 + 272)) != 0)
                {
                  v115 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 248))(v114);
                  v117 = *v115;
                  v116 = v115[1];
                  v118 = v115[2];
                  v119 = v115[3];
                }
                else
                {
                  v116 = 3.4028e38;
                  v118 = -3.4028e38;
                  v117 = 3.4028e38;
                  v119 = -3.4028e38;
                }
                a11.n128_u64[0] = (unint64_t)a3[2];
                v120 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
                if (v120 && *(_BYTE *)(*(_QWORD *)&v23 + 1283) || (v120 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
                {
                  v747 = a11;
                  v121 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 248))(v120);
                  a11 = v747;
                  v122 = *v121;
                  v123 = v121[1];
                  v124 = a3[2];
                }
                else
                {
                  v122 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                  v123 = (float32x2_t)0x80000000800000;
                  v124 = a3[2];
                }
                v125 = vsub_f32(v124, vmla_f32(v122, (float32x2_t)0x3F0000003F000000, vsub_f32(v123, v122)));
                if ((float)((float)((float)(a11.n128_f32[0] - (float)(v117 + (float)((float)(v118 - v117) * 0.5)))
                                   * (float)(a11.n128_f32[0] - (float)(v117 + (float)((float)(v118 - v117) * 0.5))))
                           + (float)((float)(a11.n128_f32[1] - (float)(v116 + (float)((float)(v119 - v116) * 0.5)))
                                   * (float)(a11.n128_f32[1] - (float)(v116 + (float)((float)(v119 - v116) * 0.5))))) < vaddv_f32(vmul_f32(v125, v125)))
                  goto LABEL_173;
              }
            }
            else if (v102 < v103)
            {
              goto LABEL_173;
            }
          }
          ++m;
LABEL_173:
          if (k < (unint64_t)m)
          {
            v126 = k;
            v127 = m;
            do
            {
              v128 = *(float32x2_t *)v126;
              *(float32x2_t *)v126 = *v127;
              v126 += 8;
              *v127 = v128;
              while (1)
              {
                v129 = *(float32x2_t *)v126;
                v130 = *(unsigned __int8 *)(*(_QWORD *)v126 + 1216);
                v131 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
                if (v130 != v131)
                {
                  if (v130 >= v131)
                    goto LABEL_216;
                  goto LABEL_178;
                }
                v132 = *(float *)(*(_QWORD *)&v129 + 664);
                v133 = a3[1].f32[0];
                if (v132 >= a3->f32[0] && v132 < v133)
                {
                  v136 = *(float *)(*(_QWORD *)&v129 + 668);
                  v135 = v136 >= a3->f32[1];
                  if (v136 >= a3[1].f32[1])
                    v135 = 0;
                }
                else
                {
                  v135 = 0;
                }
                v137 = *(float *)(*(_QWORD *)&v23 + 664);
                if (v137 >= a3->f32[0] && v137 < v133)
                {
                  v140 = *(float *)(*(_QWORD *)&v23 + 668);
                  v139 = v140 >= a3->f32[1];
                  if (v140 >= a3[1].f32[1])
                    v139 = 0;
                }
                else
                {
                  v139 = 0;
                }
                v141 = *(_BYTE *)(*(_QWORD *)&v129 + 820) == 2 ? v135 : 0;
                v142 = *(_BYTE *)(*(_QWORD *)&v23 + 820) == 2 ? v139 : 0;
                if ((v141 | v142) != 1 || ((v141 ^ v142) & 1) == 0)
                {
                  v141 = v135;
                  if (v135 == v139)
                    break;
                }
                if (!v141)
                  goto LABEL_216;
LABEL_178:
                v126 += 8;
              }
              v143 = *(_QWORD *)(*(_QWORD *)&v129 + 264);
              if (v143 && *(_BYTE *)(*(_QWORD *)&v129 + 1283) || (v143 = *(_QWORD *)(*(_QWORD *)&v129 + 272)) != 0)
              {
                v144 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 248))(v143);
                v146 = *v144;
                v145 = v144[1];
                v147 = v144[2];
                v148 = v144[3];
              }
              else
              {
                v145 = 3.4028e38;
                v147 = -3.4028e38;
                v146 = 3.4028e38;
                v148 = -3.4028e38;
              }
              a11.n128_u64[0] = (unint64_t)a3[2];
              v149 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
              if (v149 && *(_BYTE *)(*(_QWORD *)&v23 + 1283) || (v149 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
              {
                v748 = a11;
                v150 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 248))(v149);
                a11 = v748;
                v151 = *v150;
                v152 = v150[1];
                v153 = a3[2];
              }
              else
              {
                v151 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                v152 = (float32x2_t)0x80000000800000;
                v153 = a3[2];
              }
              v154 = vmla_f32(vsub_f32(v153, v151), (float32x2_t)0xBF000000BF000000, vsub_f32(v152, v151));
              if ((float)((float)((float)(a11.n128_f32[0] - (float)(v146 + (float)((float)(v147 - v146) * 0.5)))
                                 * (float)(a11.n128_f32[0] - (float)(v146 + (float)((float)(v147 - v146) * 0.5))))
                         + (float)((float)(a11.n128_f32[1] - (float)(v145 + (float)((float)(v148 - v145) * 0.5)))
                                 * (float)(a11.n128_f32[1] - (float)(v145 + (float)((float)(v148 - v145) * 0.5))))) < vaddv_f32(vmul_f32(v154, v154)))
                goto LABEL_178;
LABEL_216:
              v74 = (float32x2_t *)(v126 - 8);
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v156 = v127[-1];
                    --v127;
                    v155 = v156;
                    v157 = *(unsigned __int8 *)(*(_QWORD *)&v156 + 1216);
                    v158 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
                    if (v157 == v158)
                      break;
                    if (v157 < v158)
                      goto LABEL_175;
                  }
                  v159 = *(float *)(*(_QWORD *)&v155 + 664);
                  v160 = a3[1].f32[0];
                  if (v159 >= a3->f32[0] && v159 < v160)
                  {
                    v163 = *(float *)(*(_QWORD *)&v155 + 668);
                    v162 = v163 >= a3->f32[1];
                    if (v163 >= a3[1].f32[1])
                      v162 = 0;
                  }
                  else
                  {
                    v162 = 0;
                  }
                  v164 = *(float *)(*(_QWORD *)&v23 + 664);
                  if (v164 >= a3->f32[0] && v164 < v160)
                  {
                    v167 = *(float *)(*(_QWORD *)&v23 + 668);
                    v166 = v167 >= a3->f32[1];
                    if (v167 >= a3[1].f32[1])
                      v166 = 0;
                  }
                  else
                  {
                    v166 = 0;
                  }
                  v168 = *(_BYTE *)(*(_QWORD *)&v155 + 820) == 2 ? v162 : 0;
                  v169 = *(_BYTE *)(*(_QWORD *)&v23 + 820) == 2 ? v166 : 0;
                  if ((v168 | v169) != 1 || ((v168 ^ v169) & 1) == 0)
                  {
                    LOBYTE(v168) = v162;
                    if (v162 == v166)
                      break;
                  }
                  if ((v168 & 1) != 0)
                    goto LABEL_175;
                }
                v170 = *(_QWORD *)(*(_QWORD *)&v155 + 264);
                if (v170 && *(_BYTE *)(*(_QWORD *)&v155 + 1283)
                  || (v170 = *(_QWORD *)(*(_QWORD *)&v155 + 272)) != 0)
                {
                  v171 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 248))(v170);
                  v173 = *v171;
                  v172 = v171[1];
                  v174 = v171[2];
                  v175 = v171[3];
                }
                else
                {
                  v172 = 3.4028e38;
                  v174 = -3.4028e38;
                  v173 = 3.4028e38;
                  v175 = -3.4028e38;
                }
                a11.n128_u64[0] = (unint64_t)a3[2];
                v176 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
                if (v176 && *(_BYTE *)(*(_QWORD *)&v23 + 1283) || (v176 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
                {
                  v749 = a11;
                  v177 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 248))(v176);
                  a11 = v749;
                  v178 = *v177;
                  v179 = v177[1];
                  v180 = a3[2];
                }
                else
                {
                  v178 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                  v179 = (float32x2_t)0x80000000800000;
                  v180 = a3[2];
                }
                v181 = vmla_f32(vsub_f32(v180, v178), (float32x2_t)0xBF000000BF000000, vsub_f32(v179, v178));
              }
              while ((float)((float)((float)(a11.n128_f32[0] - (float)(v173 + (float)((float)(v174 - v173) * 0.5)))
                                    * (float)(a11.n128_f32[0] - (float)(v173 + (float)((float)(v174 - v173) * 0.5))))
                            + (float)((float)(a11.n128_f32[1] - (float)(v172 + (float)((float)(v175 - v172) * 0.5)))
                                    * (float)(a11.n128_f32[1] - (float)(v172 + (float)((float)(v175 - v172) * 0.5))))) >= vaddv_f32(vmul_f32(v181, v181)));
LABEL_175:
              ;
            }
            while (v126 < (unint64_t)v127);
          }
          if (v74 != (float32x2_t *)v743)
            *(float32x2_t *)v743->i8 = *v74;
          *v74 = v23;
          v182 = k >= (unint64_t)m;
          v14 = a2;
          if (!v182)
            goto LABEL_262;
          v183 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((float32x2_t *)v743, v74, a3);
          i = v74 + 1;
          result = (float32x2_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v74 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v183)
              continue;
LABEL_262:
            result = (float32x2_t *)std::__introsort<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,false>(v743, v74, a3, a4, a5 & 1);
            a5 = 0;
            i = v74 + 1;
            continue;
          }
          a2 = v74;
          if (v183)
            return result;
          goto LABEL_2;
        }
        v343 = (int8x16_t *)&v16[1];
        v344 = v16 == v14 || v343 == (int8x16_t *)v14;
        v345 = v344;
        if ((a5 & 1) != 0)
        {
          if ((v345 & 1) != 0)
            return result;
          v346 = 0;
          v347 = vdup_n_s32(0x7F7FFFFFu);
          v348 = (uint64_t *)v743;
LABEL_539:
          v350 = (int8x16_t *)v348;
          v348 = (uint64_t *)v343;
          v352 = v350->i64[0];
          v351 = v350->i64[1];
          v353 = *(unsigned __int8 *)(v351 + 1216);
          v354 = *(unsigned __int8 *)(v350->i64[0] + 1216);
          if (v353 == v354)
          {
            v355 = *(float *)(v351 + 664);
            if (v355 >= a3->f32[0] && v355 < a3[1].f32[0])
            {
              v358 = *(float *)(v351 + 668);
              v357 = v358 >= a3->f32[1];
              if (v358 >= a3[1].f32[1])
                v357 = 0;
            }
            else
            {
              v357 = 0;
            }
            v359 = *(float *)(v352 + 664);
            if (v359 >= a3->f32[0] && v359 < a3[1].f32[0])
            {
              v362 = *(float *)(v352 + 668);
              v361 = v362 >= a3->f32[1];
              if (v362 >= a3[1].f32[1])
                v361 = 0;
            }
            else
            {
              v361 = 0;
            }
            if (*(_BYTE *)(v351 + 820) == 2)
              v363 = v357;
            else
              v363 = 0;
            if (*(_BYTE *)(v352 + 820) == 2)
              v364 = v361;
            else
              v364 = 0;
            if ((v363 | v364) == 1 && ((v363 ^ v364) & 1) != 0 || (v363 = v357, v357 != v361))
            {
              if (!v363)
                goto LABEL_538;
            }
            else
            {
              v365 = *(_QWORD *)(v351 + 264);
              if (v365 && *(_BYTE *)(v351 + 1283) || (v365 = *(_QWORD *)(v351 + 272)) != 0)
              {
                v366 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v365 + 248))(v365);
                v368 = *v366;
                v367 = v366[1];
                v369 = v366[2];
                v370 = v366[3];
              }
              else
              {
                v367 = 3.4028e38;
                v369 = -3.4028e38;
                v368 = 3.4028e38;
                v370 = -3.4028e38;
              }
              a11.n128_u64[0] = (unint64_t)a3[2];
              result = *(float32x2_t **)(v352 + 264);
              if (result && *(_BYTE *)(v352 + 1283) || (result = *(float32x2_t **)(v352 + 272)) != 0)
              {
                v756 = a11;
                result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                a11 = v756;
                v371 = *result;
                v372 = result[1];
                v373 = a3[2];
              }
              else
              {
                v372 = (float32x2_t)0x80000000800000;
                v373 = a3[2];
                v371 = (float32x2_t)v347;
              }
              v374 = vsub_f32(v373, vmla_f32(v371, (float32x2_t)0x3F0000003F000000, vsub_f32(v372, v371)));
              if ((float)((float)((float)(a11.n128_f32[0] - (float)(v368 + (float)((float)(v369 - v368) * 0.5)))
                                 * (float)(a11.n128_f32[0] - (float)(v368 + (float)((float)(v369 - v368) * 0.5))))
                         + (float)((float)(a11.n128_f32[1] - (float)(v367 + (float)((float)(v370 - v367) * 0.5)))
                                 * (float)(a11.n128_f32[1] - (float)(v367 + (float)((float)(v370 - v367) * 0.5))))) >= vaddv_f32(vmul_f32(v374, v374)))
                goto LABEL_538;
              v351 = *v348;
              v352 = v350->i64[0];
            }
          }
          else if (v353 >= v354)
          {
            goto LABEL_538;
          }
          v350->i64[1] = v352;
          v349 = (uint64_t *)v743;
          if (v350 == v743)
            goto LABEL_537;
          v375 = v346;
          while (1)
          {
            v376 = (uint64_t *)((char *)v743->i64 + v375);
            v377 = *(uint64_t *)((char *)&v743->i64[-1] + v375);
            v378 = *(unsigned __int8 *)(v351 + 1216);
            v379 = *(unsigned __int8 *)(v377 + 1216);
            if (v378 == v379)
            {
              v380 = *(float *)(v351 + 664);
              v381 = a3[1].f32[0];
              if (v380 >= a3->f32[0] && v380 < v381)
              {
                v384 = *(float *)(v351 + 668);
                v383 = v384 >= a3->f32[1];
                if (v384 >= a3[1].f32[1])
                  v383 = 0;
              }
              else
              {
                v383 = 0;
              }
              v385 = *(float *)(v377 + 664);
              if (v385 >= a3->f32[0] && v385 < v381)
              {
                v388 = *(float *)(v377 + 668);
                v387 = v388 >= a3->f32[1];
                if (v388 >= a3[1].f32[1])
                  v387 = 0;
              }
              else
              {
                v387 = 0;
              }
              if (*(_BYTE *)(v351 + 820) == 2)
                v389 = v383;
              else
                v389 = 0;
              if (*(_BYTE *)(v377 + 820) == 2)
                v390 = v387;
              else
                v390 = 0;
              if ((v389 | v390) == 1 && ((v389 ^ v390) & 1) != 0 || (v389 = v383, v383 != v387))
              {
                if (!v389)
                {
LABEL_621:
                  v349 = (uint64_t *)v350;
                  goto LABEL_537;
                }
              }
              else
              {
                v391 = *(_QWORD *)(v351 + 264);
                if (v391 && *(_BYTE *)(v351 + 1283) || (v391 = *(_QWORD *)(v351 + 272)) != 0)
                {
                  v392 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v391 + 248))(v391);
                  v394 = *v392;
                  v393 = v392[1];
                  v395 = v392[2];
                  v396 = v392[3];
                }
                else
                {
                  v393 = 3.4028e38;
                  v395 = -3.4028e38;
                  v394 = 3.4028e38;
                  v396 = -3.4028e38;
                }
                a11.n128_u64[0] = (unint64_t)a3[2];
                result = *(float32x2_t **)(v377 + 264);
                if (result && *(_BYTE *)(v377 + 1283) || (result = *(float32x2_t **)(v377 + 272)) != 0)
                {
                  v757 = a11;
                  result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                  a11 = v757;
                  v397 = *result;
                  v398 = result[1];
                  v399 = a3[2];
                }
                else
                {
                  v397 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                  v398 = (float32x2_t)0x80000000800000;
                  v399 = a3[2];
                }
                v400 = vmla_f32(vsub_f32(v399, v397), (float32x2_t)0xBF000000BF000000, vsub_f32(v398, v397));
                if ((float)((float)((float)(a11.n128_f32[0] - (float)(v394 + (float)((float)(v395 - v394) * 0.5)))
                                   * (float)(a11.n128_f32[0] - (float)(v394 + (float)((float)(v395 - v394) * 0.5))))
                           + (float)((float)(a11.n128_f32[1] - (float)(v393 + (float)((float)(v396 - v393) * 0.5)))
                                   * (float)(a11.n128_f32[1] - (float)(v393 + (float)((float)(v396 - v393) * 0.5))))) >= vaddv_f32(vmul_f32(v400, v400)))
                {
                  v349 = (uint64_t *)((char *)v743->i64 + v375);
LABEL_537:
                  *v349 = v351;
LABEL_538:
                  v343 = (int8x16_t *)(v348 + 1);
                  v346 += 8;
                  if (v348 + 1 == (uint64_t *)a2)
                    return result;
                  goto LABEL_539;
                }
                v377 = *(v376 - 1);
              }
            }
            else if (v378 >= v379)
            {
              goto LABEL_621;
            }
            v350 = (int8x16_t *)((char *)v350 - 8);
            *v376 = v377;
            v375 -= 8;
            if (!v375)
            {
              v349 = (uint64_t *)v743;
              goto LABEL_537;
            }
          }
        }
        if ((v345 & 1) == 0)
        {
          v595 = vdup_n_s32(0x7F7FFFFFu);
          do
          {
            v596 = (uint64_t *)v743;
            v743 = v343;
            v597 = *v596;
            v598 = v596[1];
            v599 = *(unsigned __int8 *)(v598 + 1216);
            v600 = *(unsigned __int8 *)(*v596 + 1216);
            if (v599 == v600)
            {
              v601 = *(float *)(v598 + 664);
              if (v601 >= a3->f32[0] && v601 < a3[1].f32[0])
              {
                v605 = *(float *)(v598 + 668);
                v603 = v605 >= a3->f32[1];
                if (v605 >= a3[1].f32[1])
                  v603 = 0;
              }
              else
              {
                v603 = 0;
              }
              v604 = a2;
              v606 = *(float *)(v597 + 664);
              if (v606 >= a3->f32[0] && v606 < a3[1].f32[0])
              {
                v609 = *(float *)(v597 + 668);
                v608 = v609 >= a3->f32[1];
                if (v609 >= a3[1].f32[1])
                  v608 = 0;
              }
              else
              {
                v608 = 0;
              }
              if (*(_BYTE *)(v598 + 820) == 2)
                v610 = v603;
              else
                v610 = 0;
              if (*(_BYTE *)(v597 + 820) == 2)
                v611 = v608;
              else
                v611 = 0;
              if ((v610 | v611) == 1 && ((v610 ^ v611) & 1) != 0 || (v610 = v603, v603 != v608))
              {
                if (v610)
                  goto LABEL_972;
              }
              else
              {
                v612 = *(_QWORD *)(v598 + 264);
                if (v612 && *(_BYTE *)(v598 + 1283) || (v612 = *(_QWORD *)(v598 + 272)) != 0)
                {
                  v613 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v612 + 248))(v612);
                  v615 = *v613;
                  v614 = v613[1];
                  v616 = v613[2];
                  v617 = v613[3];
                }
                else
                {
                  v614 = 3.4028e38;
                  v616 = -3.4028e38;
                  v615 = 3.4028e38;
                  v617 = -3.4028e38;
                }
                a11.n128_u64[0] = (unint64_t)a3[2];
                result = *(float32x2_t **)(v597 + 264);
                if (result && *(_BYTE *)(v597 + 1283) || (result = *(float32x2_t **)(v597 + 272)) != 0)
                {
                  v762 = a11;
                  result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                  a11 = v762;
                  v618 = *result;
                  v619 = result[1];
                  v620 = a3[2];
                }
                else
                {
                  v619 = (float32x2_t)0x80000000800000;
                  v620 = a3[2];
                  v618 = (float32x2_t)v595;
                }
                v621 = vsub_f32(v620, vmla_f32(v618, (float32x2_t)0x3F0000003F000000, vsub_f32(v619, v618)));
                if ((float)((float)((float)(a11.n128_f32[0] - (float)(v615 + (float)((float)(v616 - v615) * 0.5)))
                                   * (float)(a11.n128_f32[0] - (float)(v615 + (float)((float)(v616 - v615) * 0.5))))
                           + (float)((float)(a11.n128_f32[1] - (float)(v614 + (float)((float)(v617 - v614) * 0.5)))
                                   * (float)(a11.n128_f32[1] - (float)(v614 + (float)((float)(v617 - v614) * 0.5))))) < vaddv_f32(vmul_f32(v621, v621)))
                {
                  v598 = v743->i64[0];
                  do
                  {
                    while (1)
                    {
LABEL_972:
                      while (1)
                      {
                        v622 = v596;
                        v596[1] = *v596;
                        v624 = *--v596;
                        v623 = v624;
                        v625 = *(unsigned __int8 *)(v598 + 1216);
                        v626 = *(unsigned __int8 *)(v624 + 1216);
                        if (v625 == v626)
                          break;
                        if (v625 >= v626)
                          goto LABEL_929;
                      }
                      v627 = *(float *)(v598 + 664);
                      v628 = a3[1].f32[0];
                      if (v627 >= a3->f32[0] && v627 < v628)
                      {
                        v631 = *(float *)(v598 + 668);
                        v630 = v631 >= a3->f32[1];
                        if (v631 >= a3[1].f32[1])
                          v630 = 0;
                      }
                      else
                      {
                        v630 = 0;
                      }
                      v632 = *(float *)(v623 + 664);
                      if (v632 >= a3->f32[0] && v632 < v628)
                      {
                        v635 = *(float *)(v623 + 668);
                        v634 = v635 >= a3->f32[1];
                        if (v635 >= a3[1].f32[1])
                          v634 = 0;
                      }
                      else
                      {
                        v634 = 0;
                      }
                      v636 = *(_BYTE *)(v598 + 820) == 2 ? v630 : 0;
                      v637 = *(_BYTE *)(v623 + 820) == 2 ? v634 : 0;
                      if ((v636 | v637) != 1 || ((v636 ^ v637) & 1) == 0)
                      {
                        LOBYTE(v636) = v630;
                        if (v630 == v634)
                          break;
                      }
                      if ((v636 & 1) == 0)
                        goto LABEL_929;
                    }
                    v638 = *(_QWORD *)(v598 + 264);
                    if (v638 && *(_BYTE *)(v598 + 1283) || (v638 = *(_QWORD *)(v598 + 272)) != 0)
                    {
                      v639 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v638 + 248))(v638);
                      v641 = *v639;
                      v640 = v639[1];
                      v642 = v639[2];
                      v643 = v639[3];
                    }
                    else
                    {
                      v640 = 3.4028e38;
                      v642 = -3.4028e38;
                      v641 = 3.4028e38;
                      v643 = -3.4028e38;
                    }
                    a11.n128_u64[0] = (unint64_t)a3[2];
                    result = *(float32x2_t **)(v623 + 264);
                    if (result && *(_BYTE *)(v623 + 1283) || (result = *(float32x2_t **)(v623 + 272)) != 0)
                    {
                      v763 = a11;
                      result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
                      a11 = v763;
                      v644 = *result;
                      v645 = result[1];
                      v646 = a3[2];
                    }
                    else
                    {
                      v644 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
                      v645 = (float32x2_t)0x80000000800000;
                      v646 = a3[2];
                    }
                    v647 = vmla_f32(vsub_f32(v646, v644), (float32x2_t)0xBF000000BF000000, vsub_f32(v645, v644));
                  }
                  while ((float)((float)((float)(a11.n128_f32[0] - (float)(v641 + (float)((float)(v642 - v641) * 0.5)))
                                        * (float)(a11.n128_f32[0] - (float)(v641 + (float)((float)(v642 - v641) * 0.5))))
                                + (float)((float)(a11.n128_f32[1] - (float)(v640 + (float)((float)(v643 - v640) * 0.5)))
                                        * (float)(a11.n128_f32[1] - (float)(v640 + (float)((float)(v643 - v640) * 0.5))))) < vaddv_f32(vmul_f32(v647, v647)));
LABEL_929:
                  *v622 = v598;
                }
              }
            }
            else
            {
              v604 = a2;
              if (v599 < v600)
                goto LABEL_972;
            }
            v343 = (int8x16_t *)&v743->u64[1];
          }
          while (&v743->u64[1] != (unint64_t *)v604);
        }
        return result;
    }
  }
}

float32x2_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(float32x2_t *result, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t *v7;
  float32x2_t v8;
  float32x2_t v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  int v14;
  int v15;
  float v16;
  float v17;
  int v19;
  float v20;
  int v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float32x2_t v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  unsigned int v35;
  float v36;
  int v38;
  _BOOL4 v39;
  float v40;
  float v41;
  int v43;
  float v44;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x2_t v53;
  float v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  unsigned int v62;
  unsigned int v63;
  float v64;
  int v66;
  float32x2_t v67;
  unsigned int v68;
  unsigned int v69;
  float v70;
  int v72;
  float v73;
  float v74;
  int v76;
  float v77;
  float v78;
  int v80;
  float v81;
  int v82;
  int v83;
  float v84;
  int v85;
  int v86;
  uint64_t v87;
  float *v88;
  float v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  float *v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float32x2_t v100;
  float v101;
  float32x2_t v102;
  float32x2_t v103;
  float v104;
  float32x2_t v105;
  float v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;

  v7 = result;
  v8 = *a2;
  v9 = *result;
  v10 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1216);
  v11 = *(unsigned __int8 *)(*(_QWORD *)result + 1216);
  if (v10 == v11)
  {
    v12 = *(float *)(*(_QWORD *)&v8 + 664);
    if (v12 >= a4->f32[0] && v12 < a4[1].f32[0])
    {
      v16 = *(float *)(*(_QWORD *)&v8 + 668);
      v14 = v16 < a4[1].f32[1] && v16 >= a4->f32[1];
    }
    else
    {
      v14 = 0;
    }
    v17 = *(float *)(*(_QWORD *)&v9 + 664);
    if (v17 >= a4->f32[0] && v17 < a4[1].f32[0])
    {
      v20 = *(float *)(*(_QWORD *)&v9 + 668);
      v19 = v20 >= a4->f32[1];
      if (v20 >= a4[1].f32[1])
        v19 = 0;
    }
    else
    {
      v19 = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)&v8 + 820) == 2)
      v15 = v14;
    else
      v15 = 0;
    if (*(_BYTE *)(*(_QWORD *)&v9 + 820) == 2)
      v21 = v19;
    else
      v21 = 0;
    if ((v15 | v21) != 1 || ((v15 ^ v21) & 1) == 0)
    {
      if (v14 == v19)
      {
        v22 = *(_QWORD *)(*(_QWORD *)&v8 + 264);
        if (v22 && *(_BYTE *)(*(_QWORD *)&v8 + 1283) || (v22 = *(_QWORD *)(*(_QWORD *)&v8 + 272)) != 0)
        {
          v23 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 248))(v22);
          v24 = *v23;
          v25 = v23[1];
          v26 = v23[2];
          v27 = v23[3];
        }
        else
        {
          v25 = 3.4028e38;
          v26 = -3.4028e38;
          v24 = 3.4028e38;
          v27 = -3.4028e38;
        }
        v28 = v24 + (float)((float)(v26 - v24) * 0.5);
        v29 = a4[2];
        v30 = (float)((float)(v29.f32[0] - v28) * (float)(v29.f32[0] - v28))
            + (float)((float)(v29.f32[1] - (float)(v25 + (float)((float)(v27 - v25) * 0.5)))
                    * (float)(v29.f32[1] - (float)(v25 + (float)((float)(v27 - v25) * 0.5))));
        result = *(float32x2_t **)(*(_QWORD *)&v9 + 264);
        if (result && *(_BYTE *)(*(_QWORD *)&v9 + 1283)
          || (result = *(float32x2_t **)(*(_QWORD *)&v9 + 272)) != 0)
        {
          result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
          v31 = *result;
          v32 = result[1];
          v29 = a4[2];
        }
        else
        {
          v31 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          v32 = (float32x2_t)0x80000000800000;
        }
        v33 = vsub_f32(v29, vmla_f32(v31, (float32x2_t)0x3F0000003F000000, vsub_f32(v32, v31)));
        LOBYTE(v15) = v30 < vaddv_f32(vmul_f32(v33, v33));
        v8 = *a2;
        v10 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1216);
      }
      else
      {
        LOBYTE(v15) = v14;
      }
    }
  }
  else
  {
    LOBYTE(v15) = v10 < v11;
  }
  v34 = *a3;
  v35 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1216);
  if (v35 == v10)
  {
    v36 = *(float *)(*(_QWORD *)&v34 + 664);
    if (v36 >= a4->f32[0] && v36 < a4[1].f32[0])
    {
      v40 = *(float *)(*(_QWORD *)&v34 + 668);
      v38 = v40 < a4[1].f32[1] && v40 >= a4->f32[1];
    }
    else
    {
      v38 = 0;
    }
    v41 = *(float *)(*(_QWORD *)&v8 + 664);
    if (v41 >= a4->f32[0] && v41 < a4[1].f32[0])
    {
      v44 = *(float *)(*(_QWORD *)&v8 + 668);
      v43 = v44 < a4[1].f32[1] && v44 >= a4->f32[1];
    }
    else
    {
      v43 = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)&v34 + 820) == 2)
      v39 = v38;
    else
      v39 = 0;
    if (*(_BYTE *)(*(_QWORD *)&v8 + 820) == 2)
      v45 = v43;
    else
      v45 = 0;
    if ((v39 | v45) != 1 || ((v39 ^ v45) & 1) == 0)
    {
      v39 = v38;
      if (v38 == v43)
      {
        v46 = *(_QWORD *)(*(_QWORD *)&v34 + 264);
        if (v46 && *(_BYTE *)(*(_QWORD *)&v34 + 1283) || (v46 = *(_QWORD *)(*(_QWORD *)&v34 + 272)) != 0)
        {
          v47 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 248))(v46);
          v48 = *v47;
          v49 = v47[1];
          v50 = v47[2];
          v51 = v47[3];
        }
        else
        {
          v49 = 3.4028e38;
          v50 = -3.4028e38;
          v48 = 3.4028e38;
          v51 = -3.4028e38;
        }
        v52 = v48 + (float)((float)(v50 - v48) * 0.5);
        v53 = a4[2];
        v54 = (float)((float)(v53.f32[0] - v52) * (float)(v53.f32[0] - v52))
            + (float)((float)(v53.f32[1] - (float)(v49 + (float)((float)(v51 - v49) * 0.5)))
                    * (float)(v53.f32[1] - (float)(v49 + (float)((float)(v51 - v49) * 0.5))));
        result = *(float32x2_t **)(*(_QWORD *)&v8 + 264);
        if (result && *(_BYTE *)(*(_QWORD *)&v8 + 1283)
          || (result = *(float32x2_t **)(*(_QWORD *)&v8 + 272)) != 0)
        {
          result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
          v55 = *result;
          v56 = result[1];
          v53 = a4[2];
        }
        else
        {
          v55 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          v56 = (float32x2_t)0x80000000800000;
        }
        v57 = vsub_f32(v53, vmla_f32(v55, (float32x2_t)0x3F0000003F000000, vsub_f32(v56, v55)));
        v39 = v54 < vaddv_f32(vmul_f32(v57, v57));
      }
    }
  }
  else
  {
    v39 = v35 < v10;
  }
  if ((v15 & 1) == 0)
  {
    if (!v39)
      return result;
    v59 = *a2;
    *a2 = *a3;
    *a3 = v59;
    v60 = *a2;
    v61 = *v7;
    v62 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1216);
    v63 = *(unsigned __int8 *)(*(_QWORD *)v7 + 1216);
    if (v62 == v63)
    {
      v64 = *(float *)(*(_QWORD *)&v60 + 664);
      if (v64 >= a4->f32[0] && v64 < a4[1].f32[0])
      {
        v73 = *(float *)(*(_QWORD *)&v60 + 668);
        v66 = v73 < a4[1].f32[1] && v73 >= a4->f32[1];
      }
      else
      {
        v66 = 0;
      }
      v74 = *(float *)(*(_QWORD *)&v61 + 664);
      if (v74 >= a4->f32[0] && v74 < a4[1].f32[0])
      {
        v81 = *(float *)(*(_QWORD *)&v61 + 668);
        v76 = v81 >= a4->f32[1];
        if (v81 >= a4[1].f32[1])
          v76 = 0;
      }
      else
      {
        v76 = 0;
      }
      if (*(_BYTE *)(*(_QWORD *)&v60 + 820) == 2)
        v82 = v66;
      else
        v82 = 0;
      if (*(_BYTE *)(*(_QWORD *)&v61 + 820) == 2)
        v83 = v76;
      else
        v83 = 0;
      if ((v82 | v83) == 1 && ((v82 ^ v83) & 1) != 0 || (v82 = v66, v66 != v76))
      {
        if (!v82)
          return result;
      }
      else
      {
        v87 = *(_QWORD *)(*(_QWORD *)&v60 + 264);
        if (v87 && *(_BYTE *)(*(_QWORD *)&v60 + 1283) || (v87 = *(_QWORD *)(*(_QWORD *)&v60 + 272)) != 0)
        {
          v88 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 248))(v87);
          v89 = *v88;
          v90 = v88[1];
          v91 = v88[2];
          v92 = v88[3];
        }
        else
        {
          v90 = 3.4028e38;
          v91 = -3.4028e38;
          v89 = 3.4028e38;
          v92 = -3.4028e38;
        }
        v99 = v89 + (float)((float)(v91 - v89) * 0.5);
        v100 = a4[2];
        v101 = (float)((float)(v100.f32[0] - v99) * (float)(v100.f32[0] - v99))
             + (float)((float)(v100.f32[1] - (float)(v90 + (float)((float)(v92 - v90) * 0.5)))
                     * (float)(v100.f32[1] - (float)(v90 + (float)((float)(v92 - v90) * 0.5))));
        result = *(float32x2_t **)(*(_QWORD *)&v61 + 264);
        if (result && *(_BYTE *)(*(_QWORD *)&v61 + 1283)
          || (result = *(float32x2_t **)(*(_QWORD *)&v61 + 272)) != 0)
        {
          result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
          v102 = *result;
          v103 = result[1];
          v100 = a4[2];
        }
        else
        {
          v102 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          v103 = (float32x2_t)0x80000000800000;
        }
        v109 = vsub_f32(v100, vmla_f32(v102, (float32x2_t)0x3F0000003F000000, vsub_f32(v103, v102)));
        if (v101 >= vaddv_f32(vmul_f32(v109, v109)))
          return result;
        v61 = *v7;
        v60 = *a2;
      }
    }
    else if (v62 >= v63)
    {
      return result;
    }
    *v7 = v60;
    *a2 = v61;
    return result;
  }
  v58 = *v7;
  if (v39)
  {
    *v7 = *a3;
LABEL_165:
    *a3 = v58;
    return result;
  }
  *v7 = *a2;
  *a2 = v58;
  v67 = *a3;
  v68 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1216);
  v69 = *(unsigned __int8 *)(*(_QWORD *)&v58 + 1216);
  if (v68 != v69)
  {
    if (v68 >= v69)
      return result;
    goto LABEL_164;
  }
  v70 = *(float *)(*(_QWORD *)&v67 + 664);
  if (v70 >= a4->f32[0] && v70 < a4[1].f32[0])
  {
    v77 = *(float *)(*(_QWORD *)&v67 + 668);
    v72 = v77 < a4[1].f32[1] && v77 >= a4->f32[1];
  }
  else
  {
    v72 = 0;
  }
  v78 = *(float *)(*(_QWORD *)&v58 + 664);
  if (v78 >= a4->f32[0] && v78 < a4[1].f32[0])
  {
    v84 = *(float *)(*(_QWORD *)&v58 + 668);
    v80 = v84 >= a4->f32[1];
    if (v84 >= a4[1].f32[1])
      v80 = 0;
  }
  else
  {
    v80 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)&v67 + 820) == 2)
    v85 = v72;
  else
    v85 = 0;
  if (*(_BYTE *)(*(_QWORD *)&v58 + 820) == 2)
    v86 = v80;
  else
    v86 = 0;
  if ((v85 | v86) == 1 && ((v85 ^ v86) & 1) != 0 || (v85 = v72, v72 != v80))
  {
    if (!v85)
      return result;
LABEL_164:
    *a2 = v67;
    goto LABEL_165;
  }
  v93 = *(_QWORD *)(*(_QWORD *)&v67 + 264);
  if (v93 && *(_BYTE *)(*(_QWORD *)&v67 + 1283) || (v93 = *(_QWORD *)(*(_QWORD *)&v67 + 272)) != 0)
  {
    v94 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 248))(v93);
    v95 = *v94;
    v96 = v94[1];
    v97 = v94[2];
    v98 = v94[3];
  }
  else
  {
    v96 = 3.4028e38;
    v97 = -3.4028e38;
    v95 = 3.4028e38;
    v98 = -3.4028e38;
  }
  v104 = v95 + (float)((float)(v97 - v95) * 0.5);
  v105 = a4[2];
  v106 = (float)((float)(v105.f32[0] - v104) * (float)(v105.f32[0] - v104))
       + (float)((float)(v105.f32[1] - (float)(v96 + (float)((float)(v98 - v96) * 0.5)))
               * (float)(v105.f32[1] - (float)(v96 + (float)((float)(v98 - v96) * 0.5))));
  result = *(float32x2_t **)(*(_QWORD *)&v58 + 264);
  if (result && *(_BYTE *)(*(_QWORD *)&v58 + 1283) || (result = *(float32x2_t **)(*(_QWORD *)&v58 + 272)) != 0)
  {
    result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
    v107 = *result;
    v108 = result[1];
    v105 = a4[2];
  }
  else
  {
    v107 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v108 = (float32x2_t)0x80000000800000;
  }
  v110 = vsub_f32(v105, vmla_f32(v107, (float32x2_t)0x3F0000003F000000, vsub_f32(v108, v107)));
  if (v106 < vaddv_f32(vmul_f32(v110, v110)))
  {
    v58 = *a2;
    v67 = *a3;
    goto LABEL_164;
  }
  return result;
}

float32x2_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,0>(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6)
{
  float32x2_t *result;
  float32x2_t v13;
  float32x2_t v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  int v19;
  float v20;
  float v21;
  int v23;
  float v24;
  int v25;
  int v26;
  uint64_t v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;
  float v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  unsigned int v41;
  unsigned int v42;
  float v43;
  int v45;
  float v46;
  float v47;
  int v49;
  float v50;
  int v51;
  int v52;
  uint64_t v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float32x2_t v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  unsigned int v67;
  unsigned int v68;
  float v69;
  int v71;
  float v72;
  float v73;
  int v75;
  float v76;
  int v77;
  int v78;
  uint64_t v79;
  float *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float32x2_t v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  unsigned int v93;
  unsigned int v94;
  float v95;
  int v97;
  float v98;
  float v99;
  int v101;
  float v102;
  int v103;
  int v104;
  uint64_t v105;
  float *v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float32x2_t v112;
  float v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  unsigned int v119;
  unsigned int v120;
  float v121;
  int v123;
  float v124;
  float v125;
  int v127;
  float v128;
  int v129;
  int v130;
  uint64_t v131;
  float *v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float32x2_t v138;
  float v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  unsigned int v145;
  unsigned int v146;
  float v147;
  int v149;
  float v150;
  int v151;
  float v152;
  float v153;
  int v154;
  int v155;
  uint64_t v156;
  float *v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float32x2_t v163;
  float v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  float v173;
  float v174;
  int v175;
  float v176;
  float v177;
  int v178;
  int v179;
  uint64_t v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float32x2_t v187;
  float v188;
  float32x2_t v189;
  float32x2_t v190;
  float32x2_t v191;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(a1, a2, a3, a6);
  v13 = *a4;
  v14 = *a3;
  v15 = *(unsigned __int8 *)(*(_QWORD *)a4 + 1216);
  v16 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1216);
  if (v15 == v16)
  {
    v17 = *(float *)(*(_QWORD *)&v13 + 664);
    if (v17 >= a6->f32[0] && v17 < a6[1].f32[0])
    {
      v20 = *(float *)(*(_QWORD *)&v13 + 668);
      v19 = v20 < a6[1].f32[1] && v20 >= a6->f32[1];
    }
    else
    {
      v19 = 0;
    }
    v21 = *(float *)(*(_QWORD *)&v14 + 664);
    if (v21 >= a6->f32[0] && v21 < a6[1].f32[0])
    {
      v24 = *(float *)(*(_QWORD *)&v14 + 668);
      v23 = v24 >= a6->f32[1];
      if (v24 >= a6[1].f32[1])
        v23 = 0;
    }
    else
    {
      v23 = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)&v13 + 820) == 2)
      v25 = v19;
    else
      v25 = 0;
    if (*(_BYTE *)(*(_QWORD *)&v14 + 820) == 2)
      v26 = v23;
    else
      v26 = 0;
    if ((v25 | v26) == 1 && ((v25 ^ v26) & 1) != 0 || (v25 = v19, v19 != v23))
    {
      if (!v25)
        goto LABEL_125;
    }
    else
    {
      v27 = *(_QWORD *)(*(_QWORD *)&v13 + 264);
      if (v27 && *(_BYTE *)(*(_QWORD *)&v13 + 1283) || (v27 = *(_QWORD *)(*(_QWORD *)&v13 + 272)) != 0)
      {
        v28 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 248))(v27);
        v29 = *v28;
        v30 = v28[1];
        v31 = v28[2];
        v32 = v28[3];
      }
      else
      {
        v30 = 3.4028e38;
        v31 = -3.4028e38;
        v29 = 3.4028e38;
        v32 = -3.4028e38;
      }
      v33 = v29 + (float)((float)(v31 - v29) * 0.5);
      v34 = a6[2];
      v35 = (float)((float)(v34.f32[0] - v33) * (float)(v34.f32[0] - v33))
          + (float)((float)(v34.f32[1] - (float)(v30 + (float)((float)(v32 - v30) * 0.5)))
                  * (float)(v34.f32[1] - (float)(v30 + (float)((float)(v32 - v30) * 0.5))));
      result = *(float32x2_t **)(*(_QWORD *)&v14 + 264);
      if (result && *(_BYTE *)(*(_QWORD *)&v14 + 1283)
        || (result = *(float32x2_t **)(*(_QWORD *)&v14 + 272)) != 0)
      {
        result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
        v36 = *result;
        v37 = result[1];
        v34 = a6[2];
      }
      else
      {
        v36 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v37 = (float32x2_t)0x80000000800000;
      }
      v38 = vsub_f32(v34, vmla_f32(v36, (float32x2_t)0x3F0000003F000000, vsub_f32(v37, v36)));
      if (v35 >= vaddv_f32(vmul_f32(v38, v38)))
        goto LABEL_125;
      v14 = *a3;
      v13 = *a4;
    }
  }
  else if (v15 >= v16)
  {
    goto LABEL_125;
  }
  *a3 = v13;
  *a4 = v14;
  v39 = *a3;
  v40 = *a2;
  v41 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1216);
  v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1216);
  if (v41 == v42)
  {
    v43 = *(float *)(*(_QWORD *)&v39 + 664);
    if (v43 >= a6->f32[0] && v43 < a6[1].f32[0])
    {
      v46 = *(float *)(*(_QWORD *)&v39 + 668);
      v45 = v46 < a6[1].f32[1] && v46 >= a6->f32[1];
    }
    else
    {
      v45 = 0;
    }
    v47 = *(float *)(*(_QWORD *)&v40 + 664);
    if (v47 >= a6->f32[0] && v47 < a6[1].f32[0])
    {
      v50 = *(float *)(*(_QWORD *)&v40 + 668);
      v49 = v50 >= a6->f32[1];
      if (v50 >= a6[1].f32[1])
        v49 = 0;
    }
    else
    {
      v49 = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)&v39 + 820) == 2)
      v51 = v45;
    else
      v51 = 0;
    if (*(_BYTE *)(*(_QWORD *)&v40 + 820) == 2)
      v52 = v49;
    else
      v52 = 0;
    if ((v51 | v52) == 1 && ((v51 ^ v52) & 1) != 0 || (v51 = v45, v45 != v49))
    {
      if (!v51)
        goto LABEL_125;
    }
    else
    {
      v53 = *(_QWORD *)(*(_QWORD *)&v39 + 264);
      if (v53 && *(_BYTE *)(*(_QWORD *)&v39 + 1283) || (v53 = *(_QWORD *)(*(_QWORD *)&v39 + 272)) != 0)
      {
        v54 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 248))(v53);
        v55 = *v54;
        v56 = v54[1];
        v57 = v54[2];
        v58 = v54[3];
      }
      else
      {
        v56 = 3.4028e38;
        v57 = -3.4028e38;
        v55 = 3.4028e38;
        v58 = -3.4028e38;
      }
      v59 = v55 + (float)((float)(v57 - v55) * 0.5);
      v60 = a6[2];
      v61 = (float)((float)(v60.f32[0] - v59) * (float)(v60.f32[0] - v59))
          + (float)((float)(v60.f32[1] - (float)(v56 + (float)((float)(v58 - v56) * 0.5)))
                  * (float)(v60.f32[1] - (float)(v56 + (float)((float)(v58 - v56) * 0.5))));
      result = *(float32x2_t **)(*(_QWORD *)&v40 + 264);
      if (result && *(_BYTE *)(*(_QWORD *)&v40 + 1283)
        || (result = *(float32x2_t **)(*(_QWORD *)&v40 + 272)) != 0)
      {
        result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
        v62 = *result;
        v63 = result[1];
        v60 = a6[2];
      }
      else
      {
        v62 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v63 = (float32x2_t)0x80000000800000;
      }
      v64 = vsub_f32(v60, vmla_f32(v62, (float32x2_t)0x3F0000003F000000, vsub_f32(v63, v62)));
      if (v61 >= vaddv_f32(vmul_f32(v64, v64)))
        goto LABEL_125;
      v40 = *a2;
      v39 = *a3;
    }
  }
  else if (v41 >= v42)
  {
    goto LABEL_125;
  }
  *a2 = v39;
  *a3 = v40;
  v65 = *a2;
  v66 = *a1;
  v67 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1216);
  v68 = *(unsigned __int8 *)(*(_QWORD *)a1 + 1216);
  if (v67 != v68)
  {
    if (v67 >= v68)
      goto LABEL_125;
    goto LABEL_124;
  }
  v69 = *(float *)(*(_QWORD *)&v65 + 664);
  if (v69 >= a6->f32[0] && v69 < a6[1].f32[0])
  {
    v72 = *(float *)(*(_QWORD *)&v65 + 668);
    v71 = v72 < a6[1].f32[1] && v72 >= a6->f32[1];
  }
  else
  {
    v71 = 0;
  }
  v73 = *(float *)(*(_QWORD *)&v66 + 664);
  if (v73 >= a6->f32[0] && v73 < a6[1].f32[0])
  {
    v76 = *(float *)(*(_QWORD *)&v66 + 668);
    v75 = v76 >= a6->f32[1];
    if (v76 >= a6[1].f32[1])
      v75 = 0;
  }
  else
  {
    v75 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)&v65 + 820) == 2)
    v77 = v71;
  else
    v77 = 0;
  if (*(_BYTE *)(*(_QWORD *)&v66 + 820) == 2)
    v78 = v75;
  else
    v78 = 0;
  if ((v77 | v78) == 1 && ((v77 ^ v78) & 1) != 0 || (v77 = v71, v71 != v75))
  {
    if (!v77)
      goto LABEL_125;
LABEL_124:
    *a1 = v65;
    *a2 = v66;
    goto LABEL_125;
  }
  v79 = *(_QWORD *)(*(_QWORD *)&v65 + 264);
  if (v79 && *(_BYTE *)(*(_QWORD *)&v65 + 1283) || (v79 = *(_QWORD *)(*(_QWORD *)&v65 + 272)) != 0)
  {
    v80 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 248))(v79);
    v81 = *v80;
    v82 = v80[1];
    v83 = v80[2];
    v84 = v80[3];
  }
  else
  {
    v82 = 3.4028e38;
    v83 = -3.4028e38;
    v81 = 3.4028e38;
    v84 = -3.4028e38;
  }
  v85 = v81 + (float)((float)(v83 - v81) * 0.5);
  v86 = a6[2];
  v87 = (float)((float)(v86.f32[0] - v85) * (float)(v86.f32[0] - v85))
      + (float)((float)(v86.f32[1] - (float)(v82 + (float)((float)(v84 - v82) * 0.5)))
              * (float)(v86.f32[1] - (float)(v82 + (float)((float)(v84 - v82) * 0.5))));
  result = *(float32x2_t **)(*(_QWORD *)&v66 + 264);
  if (result && *(_BYTE *)(*(_QWORD *)&v66 + 1283) || (result = *(float32x2_t **)(*(_QWORD *)&v66 + 272)) != 0)
  {
    result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
    v88 = *result;
    v89 = result[1];
    v86 = a6[2];
  }
  else
  {
    v88 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v89 = (float32x2_t)0x80000000800000;
  }
  v90 = vsub_f32(v86, vmla_f32(v88, (float32x2_t)0x3F0000003F000000, vsub_f32(v89, v88)));
  if (v87 < vaddv_f32(vmul_f32(v90, v90)))
  {
    v66 = *a1;
    v65 = *a2;
    goto LABEL_124;
  }
LABEL_125:
  v91 = *a5;
  v92 = *a4;
  v93 = *(unsigned __int8 *)(*(_QWORD *)a5 + 1216);
  v94 = *(unsigned __int8 *)(*(_QWORD *)a4 + 1216);
  if (v93 == v94)
  {
    v95 = *(float *)(*(_QWORD *)&v91 + 664);
    if (v95 >= a6->f32[0] && v95 < a6[1].f32[0])
    {
      v98 = *(float *)(*(_QWORD *)&v91 + 668);
      v97 = v98 < a6[1].f32[1] && v98 >= a6->f32[1];
    }
    else
    {
      v97 = 0;
    }
    v99 = *(float *)(*(_QWORD *)&v92 + 664);
    if (v99 >= a6->f32[0] && v99 < a6[1].f32[0])
    {
      v102 = *(float *)(*(_QWORD *)&v92 + 668);
      v101 = v102 >= a6->f32[1];
      if (v102 >= a6[1].f32[1])
        v101 = 0;
    }
    else
    {
      v101 = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)&v91 + 820) == 2)
      v103 = v97;
    else
      v103 = 0;
    if (*(_BYTE *)(*(_QWORD *)&v92 + 820) == 2)
      v104 = v101;
    else
      v104 = 0;
    if ((v103 | v104) == 1 && ((v103 ^ v104) & 1) != 0 || (v103 = v97, v97 != v101))
    {
      if (!v103)
        return result;
    }
    else
    {
      v105 = *(_QWORD *)(*(_QWORD *)&v91 + 264);
      if (v105 && *(_BYTE *)(*(_QWORD *)&v91 + 1283) || (v105 = *(_QWORD *)(*(_QWORD *)&v91 + 272)) != 0)
      {
        v106 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 248))(v105);
        v107 = *v106;
        v108 = v106[1];
        v109 = v106[2];
        v110 = v106[3];
      }
      else
      {
        v108 = 3.4028e38;
        v109 = -3.4028e38;
        v107 = 3.4028e38;
        v110 = -3.4028e38;
      }
      v111 = v107 + (float)((float)(v109 - v107) * 0.5);
      v112 = a6[2];
      v113 = (float)((float)(v112.f32[0] - v111) * (float)(v112.f32[0] - v111))
           + (float)((float)(v112.f32[1] - (float)(v108 + (float)((float)(v110 - v108) * 0.5)))
                   * (float)(v112.f32[1] - (float)(v108 + (float)((float)(v110 - v108) * 0.5))));
      result = *(float32x2_t **)(*(_QWORD *)&v92 + 264);
      if (result && *(_BYTE *)(*(_QWORD *)&v92 + 1283)
        || (result = *(float32x2_t **)(*(_QWORD *)&v92 + 272)) != 0)
      {
        result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
        v114 = *result;
        v115 = result[1];
        v112 = a6[2];
      }
      else
      {
        v114 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v115 = (float32x2_t)0x80000000800000;
      }
      v116 = vsub_f32(v112, vmla_f32(v114, (float32x2_t)0x3F0000003F000000, vsub_f32(v115, v114)));
      if (v113 >= vaddv_f32(vmul_f32(v116, v116)))
        return result;
      v92 = *a4;
      v91 = *a5;
    }
  }
  else if (v93 >= v94)
  {
    return result;
  }
  *a4 = v91;
  *a5 = v92;
  v117 = *a4;
  v118 = *a3;
  v119 = *(unsigned __int8 *)(*(_QWORD *)a4 + 1216);
  v120 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1216);
  if (v119 == v120)
  {
    v121 = *(float *)(*(_QWORD *)&v117 + 664);
    if (v121 >= a6->f32[0] && v121 < a6[1].f32[0])
    {
      v124 = *(float *)(*(_QWORD *)&v117 + 668);
      v123 = v124 < a6[1].f32[1] && v124 >= a6->f32[1];
    }
    else
    {
      v123 = 0;
    }
    v125 = *(float *)(*(_QWORD *)&v118 + 664);
    if (v125 >= a6->f32[0] && v125 < a6[1].f32[0])
    {
      v128 = *(float *)(*(_QWORD *)&v118 + 668);
      v127 = v128 >= a6->f32[1];
      if (v128 >= a6[1].f32[1])
        v127 = 0;
    }
    else
    {
      v127 = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)&v117 + 820) == 2)
      v129 = v123;
    else
      v129 = 0;
    if (*(_BYTE *)(*(_QWORD *)&v118 + 820) == 2)
      v130 = v127;
    else
      v130 = 0;
    if ((v129 | v130) == 1 && ((v129 ^ v130) & 1) != 0 || (v129 = v123, v123 != v127))
    {
      if (!v129)
        return result;
    }
    else
    {
      v131 = *(_QWORD *)(*(_QWORD *)&v117 + 264);
      if (v131 && *(_BYTE *)(*(_QWORD *)&v117 + 1283) || (v131 = *(_QWORD *)(*(_QWORD *)&v117 + 272)) != 0)
      {
        v132 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 248))(v131);
        v133 = *v132;
        v134 = v132[1];
        v135 = v132[2];
        v136 = v132[3];
      }
      else
      {
        v134 = 3.4028e38;
        v135 = -3.4028e38;
        v133 = 3.4028e38;
        v136 = -3.4028e38;
      }
      v137 = v133 + (float)((float)(v135 - v133) * 0.5);
      v138 = a6[2];
      v139 = (float)((float)(v138.f32[0] - v137) * (float)(v138.f32[0] - v137))
           + (float)((float)(v138.f32[1] - (float)(v134 + (float)((float)(v136 - v134) * 0.5)))
                   * (float)(v138.f32[1] - (float)(v134 + (float)((float)(v136 - v134) * 0.5))));
      result = *(float32x2_t **)(*(_QWORD *)&v118 + 264);
      if (result && *(_BYTE *)(*(_QWORD *)&v118 + 1283)
        || (result = *(float32x2_t **)(*(_QWORD *)&v118 + 272)) != 0)
      {
        result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
        v140 = *result;
        v141 = result[1];
        v138 = a6[2];
      }
      else
      {
        v140 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v141 = (float32x2_t)0x80000000800000;
      }
      v142 = vsub_f32(v138, vmla_f32(v140, (float32x2_t)0x3F0000003F000000, vsub_f32(v141, v140)));
      if (v139 >= vaddv_f32(vmul_f32(v142, v142)))
        return result;
      v118 = *a3;
      v117 = *a4;
    }
  }
  else if (v119 >= v120)
  {
    return result;
  }
  *a3 = v117;
  *a4 = v118;
  v143 = *a3;
  v144 = *a2;
  v145 = *(unsigned __int8 *)(*(_QWORD *)a3 + 1216);
  v146 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1216);
  if (v145 == v146)
  {
    v147 = *(float *)(*(_QWORD *)&v143 + 664);
    if (v147 >= a6->f32[0] && v147 < a6[1].f32[0])
    {
      v150 = *(float *)(*(_QWORD *)&v143 + 668);
      v149 = v150 < a6[1].f32[1] && v150 >= a6->f32[1];
    }
    else
    {
      v149 = 0;
    }
    v151 = 0;
    v152 = *(float *)(*(_QWORD *)&v144 + 664);
    if (v152 >= a6->f32[0] && v152 < a6[1].f32[0])
    {
      v153 = *(float *)(*(_QWORD *)&v144 + 668);
      v151 = v153 >= a6->f32[1];
      if (v153 >= a6[1].f32[1])
        v151 = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)&v143 + 820) == 2)
      v154 = v149;
    else
      v154 = 0;
    if (*(_BYTE *)(*(_QWORD *)&v144 + 820) == 2)
      v155 = v151;
    else
      v155 = 0;
    if ((v154 | v155) == 1 && ((v154 ^ v155) & 1) != 0 || (v154 = v149, v149 != v151))
    {
      if (!v154)
        return result;
    }
    else
    {
      v156 = *(_QWORD *)(*(_QWORD *)&v143 + 264);
      if (v156 && *(_BYTE *)(*(_QWORD *)&v143 + 1283) || (v156 = *(_QWORD *)(*(_QWORD *)&v143 + 272)) != 0)
      {
        v157 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 248))(v156);
        v158 = *v157;
        v159 = v157[1];
        v160 = v157[2];
        v161 = v157[3];
      }
      else
      {
        v159 = 3.4028e38;
        v160 = -3.4028e38;
        v158 = 3.4028e38;
        v161 = -3.4028e38;
      }
      v162 = v158 + (float)((float)(v160 - v158) * 0.5);
      v163 = a6[2];
      v164 = (float)((float)(v163.f32[0] - v162) * (float)(v163.f32[0] - v162))
           + (float)((float)(v163.f32[1] - (float)(v159 + (float)((float)(v161 - v159) * 0.5)))
                   * (float)(v163.f32[1] - (float)(v159 + (float)((float)(v161 - v159) * 0.5))));
      result = *(float32x2_t **)(*(_QWORD *)&v144 + 264);
      if (result && *(_BYTE *)(*(_QWORD *)&v144 + 1283)
        || (result = *(float32x2_t **)(*(_QWORD *)&v144 + 272)) != 0)
      {
        result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
        v165 = *result;
        v166 = result[1];
        v163 = a6[2];
      }
      else
      {
        v165 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v166 = (float32x2_t)0x80000000800000;
      }
      v167 = vsub_f32(v163, vmla_f32(v165, (float32x2_t)0x3F0000003F000000, vsub_f32(v166, v165)));
      if (v164 >= vaddv_f32(vmul_f32(v167, v167)))
        return result;
      v144 = *a2;
      v143 = *a3;
    }
  }
  else if (v145 >= v146)
  {
    return result;
  }
  *a2 = v143;
  *a3 = v144;
  v168 = *a2;
  v169 = *a1;
  v170 = *(unsigned __int8 *)(*(_QWORD *)a2 + 1216);
  v171 = *(unsigned __int8 *)(*(_QWORD *)a1 + 1216);
  if (v170 != v171)
  {
    if (v170 >= v171)
      return result;
    goto LABEL_267;
  }
  v172 = 0;
  v173 = *(float *)(*(_QWORD *)&v168 + 664);
  if (v173 >= a6->f32[0] && v173 < a6[1].f32[0])
  {
    v174 = *(float *)(*(_QWORD *)&v168 + 668);
    v172 = v174 < a6[1].f32[1] && v174 >= a6->f32[1];
  }
  v175 = 0;
  v176 = *(float *)(*(_QWORD *)&v169 + 664);
  if (v176 >= a6->f32[0] && v176 < a6[1].f32[0])
  {
    v177 = *(float *)(*(_QWORD *)&v169 + 668);
    v175 = v177 >= a6->f32[1];
    if (v177 >= a6[1].f32[1])
      v175 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)&v168 + 820) == 2)
    v178 = v172;
  else
    v178 = 0;
  if (*(_BYTE *)(*(_QWORD *)&v169 + 820) == 2)
    v179 = v175;
  else
    v179 = 0;
  if ((v178 | v179) == 1 && ((v178 ^ v179) & 1) != 0 || (v178 = v172, v172 != v175))
  {
    if (!v178)
      return result;
    goto LABEL_267;
  }
  v180 = *(_QWORD *)(*(_QWORD *)&v168 + 264);
  if (v180 && *(_BYTE *)(*(_QWORD *)&v168 + 1283) || (v180 = *(_QWORD *)(*(_QWORD *)&v168 + 272)) != 0)
  {
    v181 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 248))(v180);
    v182 = *v181;
    v183 = v181[1];
    v184 = v181[2];
    v185 = v181[3];
  }
  else
  {
    v183 = 3.4028e38;
    v184 = -3.4028e38;
    v182 = 3.4028e38;
    v185 = -3.4028e38;
  }
  v186 = v182 + (float)((float)(v184 - v182) * 0.5);
  v187 = a6[2];
  v188 = (float)((float)(v187.f32[0] - v186) * (float)(v187.f32[0] - v186))
       + (float)((float)(v187.f32[1] - (float)(v183 + (float)((float)(v185 - v183) * 0.5)))
               * (float)(v187.f32[1] - (float)(v183 + (float)((float)(v185 - v183) * 0.5))));
  result = *(float32x2_t **)(*(_QWORD *)&v169 + 264);
  if (result && *(_BYTE *)(*(_QWORD *)&v169 + 1283) || (result = *(float32x2_t **)(*(_QWORD *)&v169 + 272)) != 0)
  {
    result = (float32x2_t *)(*(uint64_t (**)(float32x2_t *))(*(_QWORD *)result + 248))(result);
    v189 = *result;
    v190 = result[1];
    v187 = a6[2];
  }
  else
  {
    v189 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v190 = (float32x2_t)0x80000000800000;
  }
  v191 = vsub_f32(v187, vmla_f32(v189, (float32x2_t)0x3F0000003F000000, vsub_f32(v190, v189)));
  if (v188 < vaddv_f32(vmul_f32(v191, v191)))
  {
    v169 = *a1;
    v168 = *a2;
LABEL_267:
    *a1 = v168;
    *a2 = v169;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  float32x2_t v8;
  float32x2_t v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  int v14;
  float32x2_t *v15;
  __int128 v16;
  float32x2_t *v17;
  int v18;
  uint64_t v19;
  int32x2_t v20;
  float32x2_t *v21;
  float32x2_t v22;
  float32x2_t v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  int v28;
  float v29;
  float v30;
  int v32;
  float v33;
  int v34;
  int v35;
  uint64_t v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float32x2_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  int v54;
  float v55;
  float v56;
  int v58;
  float v59;
  int v60;
  int v61;
  uint64_t v62;
  float *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t *v74;
  float32x2_t *v75;
  float32x2_t v76;
  float32x2_t v77;
  unsigned int v78;
  unsigned int v79;
  float v80;
  int v82;
  float v83;
  float v84;
  int v86;
  float v87;
  float v88;
  int v90;
  float v91;
  int v92;
  int v93;
  float v94;
  int v95;
  int v96;
  uint64_t v97;
  float *v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  float *v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float32x2_t v110;
  float v111;
  uint64_t v112;
  float32x2_t *v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float v117;
  float32x2_t v118;
  float v119;
  uint64_t v120;
  float32x2_t *v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  unsigned int v127;
  unsigned int v128;
  float v129;
  int v131;
  float v132;
  float v133;
  int v135;
  float v136;
  int v137;
  int v138;
  uint64_t v139;
  float *v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float32x2_t v146;
  float v147;
  uint64_t v148;
  float32x2_t *v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  unsigned int v154;
  float v155;
  int v157;
  float v158;
  float v159;
  int v161;
  float v162;
  int v163;
  int v164;
  uint64_t v165;
  float *v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float32x2_t v172;
  float v173;
  uint64_t v174;
  float32x2_t *v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  __int128 v179;
  __int128 v180;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2[-1];
      v9 = *a1;
      v10 = *(unsigned __int8 *)(*(_QWORD *)&v8 + 1216);
      v11 = *(unsigned __int8 *)(*(_QWORD *)a1 + 1216);
      if (v10 != v11)
      {
        if (v10 >= v11)
          return result;
LABEL_164:
        *a1 = v8;
        a2[-1] = v9;
        return 1;
      }
      v12 = *(float *)(*(_QWORD *)&v8 + 664);
      if (v12 >= a3->f32[0] && v12 < a3[1].f32[0])
      {
        v83 = *(float *)(*(_QWORD *)&v8 + 668);
        v14 = v83 >= a3->f32[1];
        if (v83 >= a3[1].f32[1])
          v14 = 0;
      }
      else
      {
        v14 = 0;
      }
      v84 = *(float *)(*(_QWORD *)&v9 + 664);
      if (v84 >= a3->f32[0] && v84 < a3[1].f32[0])
      {
        v91 = *(float *)(*(_QWORD *)&v9 + 668);
        v86 = v91 >= a3->f32[1];
        if (v91 >= a3[1].f32[1])
          v86 = 0;
      }
      else
      {
        v86 = 0;
      }
      if (*(_BYTE *)(*(_QWORD *)&v8 + 820) == 2)
        v92 = v14;
      else
        v92 = 0;
      if (*(_BYTE *)(*(_QWORD *)&v9 + 820) == 2)
        v93 = v86;
      else
        v93 = 0;
      if ((v92 | v93) != 1 || ((v92 ^ v93) & 1) == 0)
      {
        v92 = v14;
        if (v14 == v86)
        {
          v97 = *(_QWORD *)(*(_QWORD *)&v8 + 264);
          if (v97 && *(_BYTE *)(*(_QWORD *)&v8 + 1283) || (v97 = *(_QWORD *)(*(_QWORD *)&v8 + 272)) != 0)
          {
            v98 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 248))(v97);
            v99 = *v98;
            v100 = v98[1];
            v101 = v98[2];
            v102 = v98[3];
          }
          else
          {
            v100 = 3.4028e38;
            v101 = -3.4028e38;
            v99 = 3.4028e38;
            v102 = -3.4028e38;
          }
          v109 = v99 + (float)((float)(v101 - v99) * 0.5);
          v110 = a3[2];
          v111 = (float)((float)(v110.f32[0] - v109) * (float)(v110.f32[0] - v109))
               + (float)((float)(v110.f32[1] - (float)(v100 + (float)((float)(v102 - v100) * 0.5)))
                       * (float)(v110.f32[1] - (float)(v100 + (float)((float)(v102 - v100) * 0.5))));
          v112 = *(_QWORD *)(*(_QWORD *)&v9 + 264);
          if (v112 && *(_BYTE *)(*(_QWORD *)&v9 + 1283) || (v112 = *(_QWORD *)(*(_QWORD *)&v9 + 272)) != 0)
          {
            v113 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 248))(v112);
            v114 = *v113;
            v115 = v113[1];
            v110 = a3[2];
          }
          else
          {
            v114 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
            v115 = (float32x2_t)0x80000000800000;
          }
          v116 = vsub_f32(v110, vmla_f32(v114, (float32x2_t)0x3F0000003F000000, vsub_f32(v115, v114)));
          if (v111 < vaddv_f32(vmul_f32(v116, v116)))
          {
            v9 = *a1;
            v8 = a2[-1];
            goto LABEL_164;
          }
          return 1;
        }
      }
      if (v92)
        goto LABEL_164;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v74 = a1 + 1;
      v75 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(a1, a1 + 1, a1 + 2, a3);
      v76 = a2[-1];
      v77 = a1[2];
      v78 = *(unsigned __int8 *)(*(_QWORD *)&v76 + 1216);
      v79 = *(unsigned __int8 *)(*(_QWORD *)&v77 + 1216);
      if (v78 == v79)
      {
        v80 = *(float *)(*(_QWORD *)&v76 + 664);
        if (v80 >= a3->f32[0] && v80 < a3[1].f32[0])
        {
          v87 = *(float *)(*(_QWORD *)&v76 + 668);
          v82 = v87 >= a3->f32[1];
          if (v87 >= a3[1].f32[1])
            v82 = 0;
        }
        else
        {
          v82 = 0;
        }
        v88 = *(float *)(*(_QWORD *)&v77 + 664);
        if (v88 >= a3->f32[0] && v88 < a3[1].f32[0])
        {
          v94 = *(float *)(*(_QWORD *)&v77 + 668);
          v90 = v94 >= a3->f32[1];
          if (v94 >= a3[1].f32[1])
            v90 = 0;
        }
        else
        {
          v90 = 0;
        }
        if (*(_BYTE *)(*(_QWORD *)&v76 + 820) == 2)
          v95 = v82;
        else
          v95 = 0;
        if (*(_BYTE *)(*(_QWORD *)&v77 + 820) == 2)
          v96 = v90;
        else
          v96 = 0;
        if ((v95 | v96) == 1 && ((v95 ^ v96) & 1) != 0 || (v95 = v82, v82 != v90))
        {
          if (!v95)
            return 1;
        }
        else
        {
          v103 = *(_QWORD *)(*(_QWORD *)&v76 + 264);
          if (v103 && *(_BYTE *)(*(_QWORD *)&v76 + 1283) || (v103 = *(_QWORD *)(*(_QWORD *)&v76 + 272)) != 0)
          {
            v104 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 248))(v103);
            v105 = *v104;
            v106 = v104[1];
            v107 = v104[2];
            v108 = v104[3];
          }
          else
          {
            v106 = 3.4028e38;
            v107 = -3.4028e38;
            v105 = 3.4028e38;
            v108 = -3.4028e38;
          }
          v117 = v105 + (float)((float)(v107 - v105) * 0.5);
          v118 = a3[2];
          v119 = (float)((float)(v118.f32[0] - v117) * (float)(v118.f32[0] - v117))
               + (float)((float)(v118.f32[1] - (float)(v106 + (float)((float)(v108 - v106) * 0.5)))
                       * (float)(v118.f32[1] - (float)(v106 + (float)((float)(v108 - v106) * 0.5))));
          v120 = *(_QWORD *)(*(_QWORD *)&v77 + 264);
          if (v120 && *(_BYTE *)(*(_QWORD *)&v77 + 1283) || (v120 = *(_QWORD *)(*(_QWORD *)&v77 + 272)) != 0)
          {
            v121 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 248))(v120);
            v122 = *v121;
            v123 = v121[1];
            v118 = a3[2];
          }
          else
          {
            v122 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
            v123 = (float32x2_t)0x80000000800000;
          }
          v124 = vsub_f32(v118, vmla_f32(v122, (float32x2_t)0x3F0000003F000000, vsub_f32(v123, v122)));
          if (v119 >= vaddv_f32(vmul_f32(v124, v124)))
            return 1;
          v77 = *v75;
          v76 = a2[-1];
        }
      }
      else if (v78 >= v79)
      {
        return 1;
      }
      *v75 = v76;
      a2[-1] = v77;
      v125 = *v75;
      v126 = *v74;
      v127 = *(unsigned __int8 *)(*(_QWORD *)v75 + 1216);
      v128 = *(unsigned __int8 *)(*(_QWORD *)v74 + 1216);
      if (v127 == v128)
      {
        v129 = *(float *)(*(_QWORD *)&v125 + 664);
        if (v129 >= a3->f32[0] && v129 < a3[1].f32[0])
        {
          v132 = *(float *)(*(_QWORD *)&v125 + 668);
          v131 = v132 >= a3->f32[1];
          if (v132 >= a3[1].f32[1])
            v131 = 0;
        }
        else
        {
          v131 = 0;
        }
        v133 = *(float *)(*(_QWORD *)&v126 + 664);
        if (v133 >= a3->f32[0] && v133 < a3[1].f32[0])
        {
          v136 = *(float *)(*(_QWORD *)&v126 + 668);
          v135 = v136 >= a3->f32[1];
          if (v136 >= a3[1].f32[1])
            v135 = 0;
        }
        else
        {
          v135 = 0;
        }
        if (*(_BYTE *)(*(_QWORD *)&v125 + 820) == 2)
          v137 = v131;
        else
          v137 = 0;
        if (*(_BYTE *)(*(_QWORD *)&v126 + 820) == 2)
          v138 = v135;
        else
          v138 = 0;
        if ((v137 | v138) == 1 && ((v137 ^ v138) & 1) != 0 || (v137 = v131, v131 != v135))
        {
          if (!v137)
            return 1;
        }
        else
        {
          v139 = *(_QWORD *)(*(_QWORD *)&v125 + 264);
          if (v139 && *(_BYTE *)(*(_QWORD *)&v125 + 1283) || (v139 = *(_QWORD *)(*(_QWORD *)&v125 + 272)) != 0)
          {
            v140 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 248))(v139);
            v141 = *v140;
            v142 = v140[1];
            v143 = v140[2];
            v144 = v140[3];
          }
          else
          {
            v142 = 3.4028e38;
            v143 = -3.4028e38;
            v141 = 3.4028e38;
            v144 = -3.4028e38;
          }
          v145 = v141 + (float)((float)(v143 - v141) * 0.5);
          v146 = a3[2];
          v147 = (float)((float)(v146.f32[0] - v145) * (float)(v146.f32[0] - v145))
               + (float)((float)(v146.f32[1] - (float)(v142 + (float)((float)(v144 - v142) * 0.5)))
                       * (float)(v146.f32[1] - (float)(v142 + (float)((float)(v144 - v142) * 0.5))));
          v148 = *(_QWORD *)(*(_QWORD *)&v126 + 264);
          if (v148 && *(_BYTE *)(*(_QWORD *)&v126 + 1283) || (v148 = *(_QWORD *)(*(_QWORD *)&v126 + 272)) != 0)
          {
            v149 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 248))(v148);
            v150 = *v149;
            v151 = v149[1];
            v146 = a3[2];
          }
          else
          {
            v150 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
            v151 = (float32x2_t)0x80000000800000;
          }
          v152 = vsub_f32(v146, vmla_f32(v150, (float32x2_t)0x3F0000003F000000, vsub_f32(v151, v150)));
          if (v147 >= vaddv_f32(vmul_f32(v152, v152)))
            return 1;
          v126 = *v74;
          v125 = *v75;
          v127 = *(unsigned __int8 *)(*(_QWORD *)v75 + 1216);
        }
      }
      else if (v127 >= v128)
      {
        return 1;
      }
      a1[1] = v125;
      a1[2] = v126;
      v153 = *a1;
      v154 = *(unsigned __int8 *)(*(_QWORD *)a1 + 1216);
      if (v127 == v154)
      {
        v155 = *(float *)(*(_QWORD *)&v125 + 664);
        if (v155 >= a3->f32[0] && v155 < a3[1].f32[0])
        {
          v158 = *(float *)(*(_QWORD *)&v125 + 668);
          v157 = v158 >= a3->f32[1];
          if (v158 >= a3[1].f32[1])
            v157 = 0;
        }
        else
        {
          v157 = 0;
        }
        v159 = *(float *)(*(_QWORD *)&v153 + 664);
        if (v159 >= a3->f32[0] && v159 < a3[1].f32[0])
        {
          v162 = *(float *)(*(_QWORD *)&v153 + 668);
          v161 = v162 >= a3->f32[1];
          if (v162 >= a3[1].f32[1])
            v161 = 0;
        }
        else
        {
          v161 = 0;
        }
        if (*(_BYTE *)(*(_QWORD *)&v125 + 820) == 2)
          v163 = v157;
        else
          v163 = 0;
        if (*(_BYTE *)(*(_QWORD *)&v153 + 820) == 2)
          v164 = v161;
        else
          v164 = 0;
        if ((v163 | v164) == 1 && ((v163 ^ v164) & 1) != 0 || (v163 = v157, v157 != v161))
        {
          if (!v163)
            return 1;
        }
        else
        {
          v165 = *(_QWORD *)(*(_QWORD *)&v125 + 264);
          if (v165 && *(_BYTE *)(*(_QWORD *)&v125 + 1283) || (v165 = *(_QWORD *)(*(_QWORD *)&v125 + 272)) != 0)
          {
            v166 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 248))(v165);
            v167 = *v166;
            v168 = v166[1];
            v169 = v166[2];
            v170 = v166[3];
          }
          else
          {
            v168 = 3.4028e38;
            v169 = -3.4028e38;
            v167 = 3.4028e38;
            v170 = -3.4028e38;
          }
          v171 = v167 + (float)((float)(v169 - v167) * 0.5);
          v172 = a3[2];
          v173 = (float)((float)(v172.f32[0] - v171) * (float)(v172.f32[0] - v171))
               + (float)((float)(v172.f32[1] - (float)(v168 + (float)((float)(v170 - v168) * 0.5)))
                       * (float)(v172.f32[1] - (float)(v168 + (float)((float)(v170 - v168) * 0.5))));
          v174 = *(_QWORD *)(*(_QWORD *)&v153 + 264);
          if (v174 && *(_BYTE *)(*(_QWORD *)&v153 + 1283) || (v174 = *(_QWORD *)(*(_QWORD *)&v153 + 272)) != 0)
          {
            v175 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 248))(v174);
            v176 = *v175;
            v177 = v175[1];
            v172 = a3[2];
          }
          else
          {
            v176 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
            v177 = (float32x2_t)0x80000000800000;
          }
          v178 = vsub_f32(v172, vmla_f32(v176, (float32x2_t)0x3F0000003F000000, vsub_f32(v177, v176)));
          if (v173 >= vaddv_f32(vmul_f32(v178, v178)))
            return 1;
        }
      }
      else if (v127 >= v154)
      {
        return 1;
      }
      *(int8x16_t *)a1->f32 = vextq_s8(*(int8x16_t *)a1->f32, *(int8x16_t *)a1->f32, 8uLL);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v15 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(a1, a1 + 1, a1 + 2, a3);
      v17 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v18 = 0;
      v19 = 16;
      v20 = vdup_n_s32(0x7F7FFFFFu);
      while (2)
      {
        v22 = *v17;
        v23 = *v15;
        v24 = *(unsigned __int8 *)(*(_QWORD *)v17 + 1216);
        v25 = *(unsigned __int8 *)(*(_QWORD *)&v23 + 1216);
        if (v24 == v25)
        {
          v26 = *(float *)(*(_QWORD *)&v22 + 664);
          if (v26 >= a3->f32[0] && v26 < a3[1].f32[0])
          {
            v29 = *(float *)(*(_QWORD *)&v22 + 668);
            v28 = v29 >= a3->f32[1];
            if (v29 >= a3[1].f32[1])
              v28 = 0;
          }
          else
          {
            v28 = 0;
          }
          v30 = *(float *)(*(_QWORD *)&v23 + 664);
          if (v30 >= a3->f32[0] && v30 < a3[1].f32[0])
          {
            v33 = *(float *)(*(_QWORD *)&v23 + 668);
            v32 = v33 >= a3->f32[1];
            if (v33 >= a3[1].f32[1])
              v32 = 0;
          }
          else
          {
            v32 = 0;
          }
          if (*(_BYTE *)(*(_QWORD *)&v22 + 820) == 2)
            v34 = v28;
          else
            v34 = 0;
          if (*(_BYTE *)(*(_QWORD *)&v23 + 820) == 2)
            v35 = v32;
          else
            v35 = 0;
          if ((v34 | v35) == 1 && ((v34 ^ v35) & 1) != 0 || (v34 = v28, v28 != v32))
          {
            if (!v34)
              goto LABEL_12;
          }
          else
          {
            v36 = *(_QWORD *)(*(_QWORD *)&v22 + 264);
            if (v36 && *(_BYTE *)(*(_QWORD *)&v22 + 1283) || (v36 = *(_QWORD *)(*(_QWORD *)&v22 + 272)) != 0)
            {
              v37 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 248))(v36);
              v39 = *v37;
              v38 = v37[1];
              v40 = v37[2];
              v41 = v37[3];
            }
            else
            {
              v38 = 3.4028e38;
              v40 = -3.4028e38;
              v39 = 3.4028e38;
              v41 = -3.4028e38;
            }
            *(float32x2_t *)&v16 = a3[2];
            v42 = *(_QWORD *)(*(_QWORD *)&v23 + 264);
            if (v42 && *(_BYTE *)(*(_QWORD *)&v23 + 1283) || (v42 = *(_QWORD *)(*(_QWORD *)&v23 + 272)) != 0)
            {
              v179 = v16;
              v43 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 248))(v42);
              v16 = v179;
              v44 = *v43;
              v45 = v43[1];
              v46 = a3[2];
            }
            else
            {
              v45 = (float32x2_t)0x80000000800000;
              v46 = a3[2];
              v44 = (float32x2_t)v20;
            }
            v47 = vsub_f32(v46, vmla_f32(v44, (float32x2_t)0x3F0000003F000000, vsub_f32(v45, v44)));
            if ((float)((float)((float)(*(float *)&v16 - (float)(v39 + (float)((float)(v40 - v39) * 0.5)))
                               * (float)(*(float *)&v16 - (float)(v39 + (float)((float)(v40 - v39) * 0.5))))
                       + (float)((float)(*((float *)&v16 + 1) - (float)(v38 + (float)((float)(v41 - v38) * 0.5)))
                               * (float)(*((float *)&v16 + 1) - (float)(v38 + (float)((float)(v41 - v38) * 0.5))))) >= vaddv_f32(vmul_f32(v47, v47)))
              goto LABEL_12;
            v22 = *v17;
          }
        }
        else if (v24 >= v25)
        {
          goto LABEL_12;
        }
        v48 = v19;
LABEL_56:
        *(float32x2_t *)((char *)a1 + v48 + 8) = *(float32x2_t *)((char *)a1 + v48);
        if (!v48)
        {
          v21 = a1;
          goto LABEL_11;
        }
        v49 = *(uint64_t *)((char *)&a1[-1] + v48);
        v50 = *(unsigned __int8 *)(*(_QWORD *)&v22 + 1216);
        v51 = *(unsigned __int8 *)(v49 + 1216);
        if (v50 == v51)
        {
          v52 = *(float *)(*(_QWORD *)&v22 + 664);
          if (v52 >= a3->f32[0] && v52 < a3[1].f32[0])
          {
            v55 = *(float *)(*(_QWORD *)&v22 + 668);
            v54 = v55 >= a3->f32[1];
            if (v55 >= a3[1].f32[1])
              v54 = 0;
          }
          else
          {
            v54 = 0;
          }
          v56 = *(float *)(v49 + 664);
          if (v56 >= a3->f32[0] && v56 < a3[1].f32[0])
          {
            v59 = *(float *)(v49 + 668);
            v58 = v59 >= a3->f32[1];
            if (v59 >= a3[1].f32[1])
              v58 = 0;
          }
          else
          {
            v58 = 0;
          }
          if (*(_BYTE *)(*(_QWORD *)&v22 + 820) == 2)
            v60 = v54;
          else
            v60 = 0;
          if (*(_BYTE *)(v49 + 820) == 2)
            v61 = v58;
          else
            v61 = 0;
          if ((v60 | v61) == 1 && ((v60 ^ v61) & 1) != 0 || (v60 = v54, v54 != v58))
          {
            if (!v60)
              goto LABEL_94;
          }
          else
          {
            v62 = *(_QWORD *)(*(_QWORD *)&v22 + 264);
            if (v62 && *(_BYTE *)(*(_QWORD *)&v22 + 1283) || (v62 = *(_QWORD *)(*(_QWORD *)&v22 + 272)) != 0)
            {
              v63 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 248))(v62);
              v65 = *v63;
              v64 = v63[1];
              v66 = v63[2];
              v67 = v63[3];
            }
            else
            {
              v64 = 3.4028e38;
              v66 = -3.4028e38;
              v65 = 3.4028e38;
              v67 = -3.4028e38;
            }
            *(float32x2_t *)&v16 = a3[2];
            v68 = *(_QWORD *)(v49 + 264);
            if (v68 && *(_BYTE *)(v49 + 1283) || (v68 = *(_QWORD *)(v49 + 272)) != 0)
            {
              v180 = v16;
              v69 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 248))(v68);
              v16 = v180;
              v70 = *v69;
              v71 = v69[1];
              v72 = a3[2];
            }
            else
            {
              v70 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
              v71 = (float32x2_t)0x80000000800000;
              v72 = a3[2];
            }
            v73 = vsub_f32(v72, vmla_f32(v70, (float32x2_t)0x3F0000003F000000, vsub_f32(v71, v70)));
            if ((float)((float)((float)(*(float *)&v16 - (float)(v65 + (float)((float)(v66 - v65) * 0.5)))
                               * (float)(*(float *)&v16 - (float)(v65 + (float)((float)(v66 - v65) * 0.5))))
                       + (float)((float)(*((float *)&v16 + 1) - (float)(v64 + (float)((float)(v67 - v64) * 0.5)))
                               * (float)(*((float *)&v16 + 1) - (float)(v64 + (float)((float)(v67 - v64) * 0.5))))) >= vaddv_f32(vmul_f32(v73, v73)))
            {
LABEL_94:
              v21 = (float32x2_t *)((char *)a1 + v48);
LABEL_11:
              *v21 = v22;
              if (++v18 == 8)
                return &v17[1] == a2;
LABEL_12:
              v15 = v17;
              v19 += 8;
              if (++v17 != a2)
                continue;
              return 1;
            }
          }
        }
        else if (v50 >= v51)
        {
          goto LABEL_94;
        }
        break;
      }
      v48 -= 8;
      goto LABEL_56;
  }
}

void md::MuninPointLabelDedupingGroup::~MuninPointLabelDedupingGroup(md::MuninPointLabelDedupingGroup *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::MuninPointLabelDedupingGroup::prepareForCollision(md::MuninPointLabelDedupingGroup *this, md::LabelManager *a2)
{
  md::LabelManager *v2;
  int8x16_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int8x16_t *v30;
  uint64_t v31;
  int8x16_t *v33;
  int8x16_t *v34;
  unint64_t v35;
  _BYTE v36[40];
  float *v37;

  v2 = a2;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 9) = 0;
  v4 = (int8x16_t *)v36;
  v33 = (int8x16_t *)v36;
  v34 = (int8x16_t *)v36;
  v35 = 5;
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v5 != v6)
  {
    while (1)
    {
      v8 = *v5;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v5 + 16))(*v5))
        goto LABEL_5;
      v7 = v34;
      v9 = ((char *)v34 - (char *)v33) >> 3;
      if (v35 < v9 + 1)
        break;
LABEL_4:
      v7->i64[0] = v8;
      v34 = (int8x16_t *)((char *)v34 + 8);
LABEL_5:
      if (++v5 == v6)
      {
        v4 = v33;
        v24 = v34;
        v2 = a2;
        goto LABEL_26;
      }
    }
    v10 = (1 << -(char)__clz(v35 + 1));
    if (v35 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = 1;
    if (v10 <= v9 + 1)
      v11 = v9 + 1;
    else
      v11 = v10;
    v12 = (int8x16_t *)malloc_type_malloc(8 * v11, 0x2004093837F09uLL);
    v13 = v12;
    v14 = v33;
    if (v33 != v34)
    {
      v15 = (char *)v34 - (char *)v33 - 8;
      if (v15 < 0x18)
      {
        v16 = (char *)v12;
      }
      else
      {
        v16 = (char *)v12;
        if ((unint64_t)((char *)v12 - (char *)v33) >= 0x20)
        {
          v17 = (v15 >> 3) + 1;
          v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
          v16 = &v12->i8[v18];
          v19 = v33 + 1;
          v20 = v12 + 1;
          v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v22 = *v19;
            v20[-1] = v19[-1];
            *v20 = v22;
            v19 += 2;
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_22;
          v14 = (int8x16_t *)((char *)v33 + v18);
        }
      }
      do
      {
        v23 = v14->i64[0];
        v14 = (int8x16_t *)((char *)v14 + 8);
        *(_QWORD *)v16 = v23;
        v16 += 8;
      }
      while (v14 != v34);
    }
LABEL_22:
    if (v33 != (int8x16_t *)v36)
      free(v33);
    v7 = (int8x16_t *)((char *)v13 + 8 * v9);
    v33 = v13;
    v34 = v7;
    v35 = v11;
    goto LABEL_4;
  }
  v24 = (int8x16_t *)v36;
LABEL_26:
  v25 = (char *)v24 - (char *)v4;
  if ((char *)v24 - (char *)v4 == 8)
  {
    v26 = v4->i64[0];
LABEL_28:
    *((_QWORD *)this + 9) = v26;
    goto LABEL_40;
  }
  if ((unint64_t)v25 >= 9)
  {
    v37 = (float *)(*((_QWORD *)v2 + 54) + 1120);
    v27 = 126 - 2 * __clz(v25 >> 3);
    if (v24 == v4)
      v28 = 0;
    else
      v28 = v27;
    std::__introsort<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,false>((uint64_t)v4, v24, &v37, v28, 1);
    v4 = v33;
    if (v33 == v34)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v29 = 0;
      v30 = v33;
      do
      {
        v31 = v30->i64[0];
        *(_DWORD *)(v30->i64[0] + 32) = v29;
        if (!v26 || *(float *)(v31 + 780) < *(float *)(v26 + 780))
          v26 = v31;
        v30 = (int8x16_t *)((char *)v30 + 8);
        ++v29;
      }
      while (v30 != v34);
    }
    goto LABEL_28;
  }
LABEL_40:
  if (v4 != (int8x16_t *)v36)
    free(v4);
}

void sub_19F869C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  if (a11 != a13)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,false>(uint64_t result, int8x16_t *a2, float **a3, uint64_t a4, char a5)
{
  int8x16_t *v7;
  int8x16_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  float v22;
  float v23;
  float *v24;
  uint64_t v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;
  float *v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  int v40;
  float v41;
  float v42;
  unint64_t *v43;
  int8x16_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  float v52;
  float v53;
  float *v54;
  uint64_t v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  int v61;
  float *v62;
  uint64_t v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int v69;
  int v70;
  float v71;
  float v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  float v76;
  float v77;
  float *v78;
  uint64_t v79;
  float *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  int v85;
  float *v86;
  uint64_t v87;
  float *v88;
  float v89;
  float v90;
  float v91;
  float v92;
  int v93;
  int v94;
  float v95;
  float v96;
  BOOL v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  int8x16_t *v101;
  int8x16_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  float v107;
  float v108;
  float *v109;
  uint64_t v110;
  float *v111;
  float v112;
  float v113;
  float v114;
  float v115;
  int v116;
  float *v117;
  float v118;
  float v119;
  float v120;
  float v121;
  int v122;
  int v123;
  float v124;
  float v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  float v129;
  float v130;
  float *v131;
  uint64_t v132;
  float *v133;
  float v134;
  float v135;
  float v136;
  float v137;
  int v138;
  float *v139;
  float v140;
  float v141;
  float v142;
  float v143;
  int v144;
  int v145;
  float v146;
  float v147;
  uint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int8x16_t *v155;
  BOOL v156;
  char v157;
  uint64_t v158;
  unint64_t *v159;
  int8x16_t *v160;
  unint64_t v161;
  unint64_t *v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  int v166;
  float v167;
  float v168;
  float *v169;
  uint64_t v170;
  float *v171;
  float v172;
  float v173;
  float v174;
  float v175;
  int v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  float v181;
  int v182;
  int v183;
  float v184;
  float v185;
  int64_t v186;
  int64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v197;
  int64_t v198;
  unint64_t *v199;
  unint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  int v205;
  float v206;
  float v207;
  float *v208;
  uint64_t v209;
  float *v210;
  float v211;
  float v212;
  float v213;
  float v214;
  int v215;
  float *v216;
  float v217;
  float v218;
  float v219;
  float v220;
  int v221;
  int v222;
  float v223;
  float v224;
  unint64_t *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  int v234;
  float v235;
  float v236;
  float *v237;
  uint64_t v238;
  float *v239;
  float v240;
  float v241;
  float v242;
  float v243;
  int v244;
  float *v245;
  float v246;
  float v247;
  float v248;
  float v249;
  int v250;
  int v251;
  float v252;
  float v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  int v259;
  float v260;
  float v261;
  float *v262;
  uint64_t v263;
  float *v264;
  float v265;
  float v266;
  float v267;
  float v268;
  int v269;
  float *v270;
  float v271;
  float v272;
  float v273;
  float v274;
  int v275;
  int v276;
  float v277;
  float v278;
  unint64_t v280;
  unint64_t *v282;
  int64_t v283;
  uint64_t v284;
  int64_t v285;
  uint64_t v286;
  int8x16_t *v287;

  v7 = (int8x16_t *)result;
LABEL_2:
  v8 = a2;
  v282 = &a2[-1].u64[1];
  while (2)
  {
    v9 = (unint64_t *)v7;
    v10 = (char *)v8 - (char *)v7;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v282, v7->i64[0]);
        if ((_DWORD)result)
        {
          v149 = v7->i64[0];
          v7->i64[0] = *v282;
          *v282 = v149;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((unint64_t *)v7, &v7->u64[1], v282, a3);
      case 4:
        v150 = (unint64_t *)&v7[1];
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((unint64_t *)v7, &v7->u64[1], (unint64_t *)&v7[1], a3);
        result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v282, v7[1].u64[0]);
        if ((_DWORD)result)
        {
          v151 = *v150;
          *v150 = *v282;
          *v282 = v151;
          result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v150, v7->u64[1]);
          if ((_DWORD)result)
          {
            v153 = v7->i64[1];
            v152 = v7[1].u64[0];
            v154 = v7->i64[0];
            v7->i64[1] = v152;
            v7[1].i64[0] = v153;
            result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v152, v154);
            if ((_DWORD)result)
              *v7 = vextq_s8(*v7, *v7, 8uLL);
          }
        }
        return result;
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,0>((unint64_t *)v7, &v7->u64[1], (unint64_t *)&v7[1], &v7[1].u64[1], v282, a3);
      default:
        v287 = v7;
        if (v10 > 191)
        {
          if (!a4)
          {
            if (v7 != a2)
            {
              v186 = (unint64_t)(v11 - 2) >> 1;
              v285 = v186;
              do
              {
                v187 = v186;
                if (v285 >= v186)
                {
                  v188 = (2 * v186) | 1;
                  v189 = &v9[v188];
                  if (2 * v186 + 2 < v11
                    && md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v189, v189[1]))
                  {
                    ++v189;
                    v188 = 2 * v187 + 2;
                  }
                  v190 = &v9[v187];
                  result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v189, *v190);
                  if ((result & 1) == 0)
                  {
                    v191 = *v190;
                    do
                    {
                      v192 = v189;
                      *v190 = *v189;
                      if (v285 < v188)
                        break;
                      v193 = (2 * v188) | 1;
                      v189 = (unint64_t *)v287 + v193;
                      v194 = 2 * v188 + 2;
                      if (v194 < v11
                        && md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v189, v189[1]))
                      {
                        ++v189;
                        v193 = v194;
                      }
                      result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v189, v191);
                      v190 = v192;
                      v188 = v193;
                    }
                    while (!(_DWORD)result);
                    *v192 = v191;
                    v9 = (unint64_t *)v287;
                  }
                }
                v186 = v187 - 1;
              }
              while (v187);
              v195 = (unint64_t)v10 >> 3;
              do
              {
                v197 = 0;
                v280 = *v9;
                v198 = (unint64_t)(v195 - 2) >> 1;
                v199 = v9;
                v283 = v198;
                v286 = v195;
                do
                {
                  v200 = &v199[v197 + 1];
                  v201 = (2 * v197) | 1;
                  v202 = 2 * v197 + 2;
                  if (v202 < v195)
                  {
                    v203 = *v200;
                    v204 = v199[v197 + 2];
                    v205 = *(unsigned __int8 *)(*v200 + 1211) == 18;
                    if (v205 != (*(_BYTE *)(v204 + 1211) != 18))
                    {
                      v206 = *(float *)(v203 + 764);
                      v207 = *(float *)(v204 + 764);
                      v208 = *a3;
                      v209 = *(_QWORD *)(v203 + 264);
                      if (v209 && *(_BYTE *)(v203 + 1283) || (v209 = *(_QWORD *)(v203 + 272)) != 0)
                      {
                        v210 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v209 + 248))(v209);
                        v212 = *v210;
                        v211 = v210[1];
                        v214 = v210[2];
                        v213 = v210[3];
                      }
                      else
                      {
                        v211 = 3.4028e38;
                        v214 = -3.4028e38;
                        v212 = 3.4028e38;
                        v213 = -3.4028e38;
                      }
                      v215 = v208[2] > v212 && *v208 < v214 && v208[3] > v211 && v208[1] < v213;
                      v216 = *a3;
                      result = *(_QWORD *)(v204 + 264);
                      if (result && *(_BYTE *)(v204 + 1283) || (result = *(_QWORD *)(v204 + 272)) != 0)
                      {
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                        v218 = *(float *)result;
                        v217 = *(float *)(result + 4);
                        v220 = *(float *)(result + 8);
                        v219 = *(float *)(result + 12);
                      }
                      else
                      {
                        v217 = 3.4028e38;
                        v220 = -3.4028e38;
                        v218 = 3.4028e38;
                        v219 = -3.4028e38;
                      }
                      v221 = v216[2] > v218 && *v216 < v220 && v216[3] > v217 && v216[1] < v219;
                      if (*(_BYTE *)(v203 + 820) == 2)
                        v205 = v215;
                      else
                        v205 = 0;
                      if (v206 <= 0.0)
                        v205 = 0;
                      if (*(_BYTE *)(v204 + 820) == 2)
                        v222 = v221;
                      else
                        v222 = 0;
                      if (v207 <= 0.0)
                        v222 = 0;
                      v156 = v205 == v222;
                      v198 = v283;
                      v195 = v286;
                      if (v156)
                      {
                        v205 = v215;
                        if (v215 == v221)
                        {
                          v223 = *(float *)(v203 + 764);
                          v224 = *(float *)(v204 + 764);
                          v205 = v223 > v224;
                          if (v223 == v224)
                            v205 = v203 < v204;
                        }
                      }
                    }
                    if (v205)
                    {
                      ++v200;
                      v201 = v202;
                    }
                  }
                  *v199 = *v200;
                  v199 = v200;
                  v197 = v201;
                }
                while (v201 <= v198);
                v225 = &a2[-1].u64[1];
                v156 = v200 == &a2[-1].u64[1];
                a2 = (int8x16_t *)((char *)a2 - 8);
                if (v156)
                {
                  *v200 = v280;
                  v9 = (unint64_t *)v287;
                }
                else
                {
                  *v200 = *v225;
                  *v225 = v280;
                  v9 = (unint64_t *)v287;
                  v226 = (char *)v200 - (char *)v287 + 8;
                  if (v226 >= 9)
                  {
                    v227 = ((unint64_t)v226 >> 3) - 2;
                    v228 = v227 >> 1;
                    v229 = (unint64_t *)v287 + (v227 >> 1);
                    result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v229, *v200);
                    if ((_DWORD)result)
                    {
                      v230 = *v200;
                      *v200 = *v229;
                      if (v227 >= 2)
                      {
                        while (1)
                        {
                          v232 = v228 - 1;
                          v228 = (v228 - 1) >> 1;
                          v231 = (unint64_t *)v287 + v228;
                          v233 = *v231;
                          v234 = *(unsigned __int8 *)(*v231 + 1211) == 18;
                          if (v234 == (*(_BYTE *)(v230 + 1211) != 18))
                            goto LABEL_422;
                          v235 = *(float *)(v233 + 764);
                          v236 = *(float *)(v230 + 764);
                          v237 = *a3;
                          v238 = *(_QWORD *)(v233 + 264);
                          if (v238 && *(_BYTE *)(v233 + 1283) || (v238 = *(_QWORD *)(v233 + 272)) != 0)
                          {
                            v239 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v238 + 248))(v238);
                            v241 = *v239;
                            v240 = v239[1];
                            v243 = v239[2];
                            v242 = v239[3];
                          }
                          else
                          {
                            v240 = 3.4028e38;
                            v243 = -3.4028e38;
                            v241 = 3.4028e38;
                            v242 = -3.4028e38;
                          }
                          v244 = v237[2] > v241 && *v237 < v243 && v237[3] > v240 && v237[1] < v242;
                          v245 = *a3;
                          result = *(_QWORD *)(v230 + 264);
                          if (result && *(_BYTE *)(v230 + 1283) || (result = *(_QWORD *)(v230 + 272)) != 0)
                          {
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                            v247 = *(float *)result;
                            v246 = *(float *)(result + 4);
                            v249 = *(float *)(result + 8);
                            v248 = *(float *)(result + 12);
                          }
                          else
                          {
                            v246 = 3.4028e38;
                            v249 = -3.4028e38;
                            v247 = 3.4028e38;
                            v248 = -3.4028e38;
                          }
                          v250 = v245[2] > v247 && *v245 < v249 && v245[3] > v246 && v245[1] < v248;
                          if (*(_BYTE *)(v233 + 820) == 2)
                            v234 = v244;
                          else
                            v234 = 0;
                          if (v235 <= 0.0)
                            v234 = 0;
                          if (*(_BYTE *)(v230 + 820) == 2)
                            v251 = v250;
                          else
                            v251 = 0;
                          if (v236 <= 0.0)
                            v251 = 0;
                          if (v234 == v251 && (v234 = v244, v244 == v250))
                          {
                            v252 = *(float *)(v233 + 764);
                            v253 = *(float *)(v230 + 764);
                            if (v252 == v253)
                            {
                              if (v233 >= v230)
                                break;
                            }
                            else if (v252 <= v253)
                            {
                              break;
                            }
                          }
                          else
                          {
LABEL_422:
                            if (!v234)
                              break;
                          }
                          *v229 = *v231;
                          v229 = (unint64_t *)v287 + v228;
                          if (v232 <= 1)
                            goto LABEL_386;
                        }
                      }
                      v231 = v229;
LABEL_386:
                      *v231 = v230;
                      v195 = v286;
                      v9 = (unint64_t *)v287;
                    }
                  }
                }
              }
              while (v195-- > 2);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = (unint64_t *)v7 + v12;
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(&v9[v12], v9, v282, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v9, &v9[v12], v282, a3);
            v14 = v12;
            v15 = (uint64_t *)&v9[v12];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v9 + 1, (unint64_t *)v15 - 1, (unint64_t *)&a2[-1], a3);
            v16 = &v9[v14 + 1];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((unint64_t *)&v287[1], v16, &a2[-2].u64[1], a3);
            v9 = (unint64_t *)v287;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((unint64_t *)v15 - 1, v13, v16, a3);
            v17 = v287->i64[0];
            v287->i64[0] = *v15;
            *v15 = v17;
          }
          --a4;
          if ((a5 & 1) == 0
            && !md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *(v9 - 1), *v9))
          {
            v7 = (int8x16_t *)v9;
            v99 = *v9;
            result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v99, *v282);
            if ((result & 1) != 0)
            {
              do
              {
                v100 = v7->u64[1];
                v7 = (int8x16_t *)((char *)v7 + 8);
                result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v99, v100);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v101 = (int8x16_t *)&v7->u64[1];
              do
              {
                v7 = v101;
                if (v101 >= a2)
                  break;
                v101 = (int8x16_t *)((char *)v101 + 8);
                result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v99, v7->i64[0]);
              }
              while (!(_DWORD)result);
            }
            v102 = a2;
            if (v7 < a2)
            {
              v102 = a2;
              do
              {
                v103 = v102[-1].u64[1];
                v102 = (int8x16_t *)((char *)v102 - 8);
                result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v99, v103);
              }
              while ((result & 1) != 0);
            }
LABEL_246:
            while (v7 < v102)
            {
              v104 = v7->i64[0];
              v7->i64[0] = v102->i64[0];
              v7 = (int8x16_t *)((char *)v7 + 8);
              v102->i64[0] = v104;
              while (1)
              {
                v105 = v7->i64[0];
                v106 = *(unsigned __int8 *)(v99 + 1211) == 18;
                if (v106 == (*(_BYTE *)(v7->i64[0] + 1211) != 18))
                  break;
                v107 = *(float *)(v99 + 764);
                v108 = *(float *)(v105 + 764);
                v109 = *a3;
                v110 = *(_QWORD *)(v99 + 264);
                if (v110 && *(_BYTE *)(v99 + 1283) || (v110 = *(_QWORD *)(v99 + 272)) != 0)
                {
                  v111 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 248))(v110);
                  v113 = *v111;
                  v112 = v111[1];
                  v115 = v111[2];
                  v114 = v111[3];
                }
                else
                {
                  v112 = 3.4028e38;
                  v115 = -3.4028e38;
                  v113 = 3.4028e38;
                  v114 = -3.4028e38;
                }
                v116 = v109[2] > v113 && *v109 < v115 && v109[3] > v112 && v109[1] < v114;
                v117 = *a3;
                result = *(_QWORD *)(v105 + 264);
                if (result && *(_BYTE *)(v105 + 1283) || (result = *(_QWORD *)(v105 + 272)) != 0)
                {
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                  v119 = *(float *)result;
                  v118 = *(float *)(result + 4);
                  v121 = *(float *)(result + 8);
                  v120 = *(float *)(result + 12);
                }
                else
                {
                  v118 = 3.4028e38;
                  v121 = -3.4028e38;
                  v119 = 3.4028e38;
                  v120 = -3.4028e38;
                }
                v122 = v117[2] > v119 && *v117 < v121 && v117[3] > v118 && v117[1] < v120;
                if (*(_BYTE *)(v99 + 820) == 2)
                  v106 = v116;
                else
                  v106 = 0;
                if (v107 <= 0.0)
                  v106 = 0;
                if (*(_BYTE *)(v105 + 820) == 2)
                  v123 = v122;
                else
                  v123 = 0;
                if (v108 <= 0.0)
                  v123 = 0;
                if (v106 != v123)
                  break;
                LOBYTE(v106) = v116;
                if (v116 != v122)
                  break;
                v124 = *(float *)(v99 + 764);
                v125 = *(float *)(v105 + 764);
                if (v124 == v125)
                {
                  if (v99 < v105)
                    goto LABEL_207;
                }
                else if (v124 > v125)
                {
                  goto LABEL_207;
                }
LABEL_165:
                v7 = (int8x16_t *)((char *)v7 + 8);
              }
              if ((v106 & 1) == 0)
                goto LABEL_165;
              do
              {
                while (1)
                {
LABEL_207:
                  while (1)
                  {
                    v127 = v102[-1].u64[1];
                    v102 = (int8x16_t *)((char *)v102 - 8);
                    v126 = v127;
                    v128 = *(unsigned __int8 *)(v99 + 1211) == 18;
                    if (v128 != (*(_BYTE *)(v127 + 1211) != 18))
                    {
                      v129 = *(float *)(v99 + 764);
                      v130 = *(float *)(v126 + 764);
                      v131 = *a3;
                      v132 = *(_QWORD *)(v99 + 264);
                      if (v132 && *(_BYTE *)(v99 + 1283) || (v132 = *(_QWORD *)(v99 + 272)) != 0)
                      {
                        v133 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 248))(v132);
                        v135 = *v133;
                        v134 = v133[1];
                        v137 = v133[2];
                        v136 = v133[3];
                      }
                      else
                      {
                        v134 = 3.4028e38;
                        v137 = -3.4028e38;
                        v135 = 3.4028e38;
                        v136 = -3.4028e38;
                      }
                      v138 = v131[2] > v135 && *v131 < v137 && v131[3] > v134 && v131[1] < v136;
                      v139 = *a3;
                      result = *(_QWORD *)(v126 + 264);
                      if (result && *(_BYTE *)(v126 + 1283) || (result = *(_QWORD *)(v126 + 272)) != 0)
                      {
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                        v141 = *(float *)result;
                        v140 = *(float *)(result + 4);
                        v143 = *(float *)(result + 8);
                        v142 = *(float *)(result + 12);
                      }
                      else
                      {
                        v140 = 3.4028e38;
                        v143 = -3.4028e38;
                        v141 = 3.4028e38;
                        v142 = -3.4028e38;
                      }
                      v144 = v139[2] > v141 && *v139 < v143 && v139[3] > v140 && v139[1] < v142;
                      if (*(_BYTE *)(v99 + 820) == 2)
                        v128 = v138;
                      else
                        v128 = 0;
                      if (v129 <= 0.0)
                        v128 = 0;
                      if (*(_BYTE *)(v126 + 820) == 2)
                        v145 = v144;
                      else
                        v145 = 0;
                      if (v130 <= 0.0)
                        v145 = 0;
                      if (v128 == v145)
                      {
                        v128 = v138;
                        if (v138 == v144)
                          break;
                      }
                    }
                    if (!v128)
                      goto LABEL_246;
                  }
                  v146 = *(float *)(v99 + 764);
                  v147 = *(float *)(v126 + 764);
                  if (v146 == v147)
                    break;
                  if (v146 <= v147)
                    goto LABEL_246;
                }
              }
              while (v99 < v126);
            }
            v148 = &v7[-1].i64[1];
            if (&v7[-1].u64[1] != (unint64_t *)v287)
              v287->i64[0] = *v148;
            a5 = 0;
            *v148 = v99;
            v8 = a2;
            continue;
          }
          v18 = v9 + 1;
          v19 = *v9;
          v284 = a4;
          while (2)
          {
            v20 = *v18;
            v21 = *(unsigned __int8 *)(*v18 + 1211) == 18;
            if (v21 == (*(_BYTE *)(v19 + 1211) != 18))
              goto LABEL_12;
            v22 = *(float *)(v20 + 764);
            v23 = *(float *)(v19 + 764);
            v24 = *a3;
            v25 = *(_QWORD *)(v20 + 264);
            if (v25 && *(_BYTE *)(v20 + 1283) || (v25 = *(_QWORD *)(v20 + 272)) != 0)
            {
              v26 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 248))(v25);
              v28 = *v26;
              v27 = v26[1];
              v30 = v26[2];
              v29 = v26[3];
            }
            else
            {
              v27 = 3.4028e38;
              v30 = -3.4028e38;
              v28 = 3.4028e38;
              v29 = -3.4028e38;
            }
            v31 = v24[2] > v28 && *v24 < v30 && v24[3] > v27 && v24[1] < v29;
            v32 = *a3;
            v33 = *(_QWORD *)(v19 + 264);
            if (v33 && *(_BYTE *)(v19 + 1283) || (v33 = *(_QWORD *)(v19 + 272)) != 0)
            {
              v34 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 248))(v33);
              v36 = *v34;
              v35 = v34[1];
              v38 = v34[2];
              v37 = v34[3];
            }
            else
            {
              v35 = 3.4028e38;
              v38 = -3.4028e38;
              v36 = 3.4028e38;
              v37 = -3.4028e38;
            }
            v39 = v32[2] > v36 && *v32 < v38 && v32[3] > v35 && v32[1] < v37;
            if (*(_BYTE *)(v20 + 820) == 2)
              v21 = v31;
            else
              v21 = 0;
            if (v22 <= 0.0)
              v21 = 0;
            if (*(_BYTE *)(v19 + 820) == 2)
              v40 = v39;
            else
              v40 = 0;
            if (v23 <= 0.0)
              v40 = 0;
            if (v21 != v40 || (v21 = v31, v31 != v39))
            {
LABEL_12:
              if (!v21)
                goto LABEL_53;
LABEL_13:
              ++v18;
              continue;
            }
            break;
          }
          v41 = *(float *)(v20 + 764);
          v42 = *(float *)(v19 + 764);
          if (v41 != v42)
          {
            if (v41 <= v42)
              goto LABEL_53;
            goto LABEL_13;
          }
          if (v20 < v19)
            goto LABEL_13;
LABEL_53:
          v43 = v18 - 1;
          v44 = a2;
          if (v18 - 1 == (unint64_t *)v287)
          {
            v44 = a2;
            do
            {
              if (v18 >= (unint64_t *)v44)
                break;
              v46 = v44[-1].u64[1];
              v44 = (int8x16_t *)((char *)v44 - 8);
            }
            while (!md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v46, v19));
          }
          else
          {
            do
            {
              v45 = v44[-1].u64[1];
              v44 = (int8x16_t *)((char *)v44 - 8);
            }
            while (!md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v45, v19));
          }
          if (v18 < (unint64_t *)v44)
          {
            v47 = (unint64_t)v18;
            v48 = (uint64_t *)v44;
            do
            {
              v49 = *(_QWORD *)v47;
              *(_QWORD *)v47 = *v48;
              v47 += 8;
              *v48 = v49;
              while (1)
              {
                v50 = *(_QWORD *)v47;
                v51 = *(unsigned __int8 *)(*(_QWORD *)v47 + 1211) == 18;
                if (v51 == (*(_BYTE *)(v19 + 1211) != 18))
                  goto LABEL_63;
                v52 = *(float *)(v50 + 764);
                v53 = *(float *)(v19 + 764);
                v54 = *a3;
                v55 = *(_QWORD *)(v50 + 264);
                if (v55 && *(_BYTE *)(v50 + 1283) || (v55 = *(_QWORD *)(v50 + 272)) != 0)
                {
                  v56 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 248))(v55);
                  v58 = *v56;
                  v57 = v56[1];
                  v60 = v56[2];
                  v59 = v56[3];
                }
                else
                {
                  v57 = 3.4028e38;
                  v60 = -3.4028e38;
                  v58 = 3.4028e38;
                  v59 = -3.4028e38;
                }
                v61 = v54[2] > v58 && *v54 < v60 && v54[3] > v57 && v54[1] < v59;
                v62 = *a3;
                v63 = *(_QWORD *)(v19 + 264);
                if (v63 && *(_BYTE *)(v19 + 1283) || (v63 = *(_QWORD *)(v19 + 272)) != 0)
                {
                  v64 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 248))(v63);
                  v66 = *v64;
                  v65 = v64[1];
                  v68 = v64[2];
                  v67 = v64[3];
                }
                else
                {
                  v65 = 3.4028e38;
                  v68 = -3.4028e38;
                  v66 = 3.4028e38;
                  v67 = -3.4028e38;
                }
                v69 = v62[2] > v66 && *v62 < v68 && v62[3] > v65 && v62[1] < v67;
                if (*(_BYTE *)(v50 + 820) == 2)
                  v51 = v61;
                else
                  v51 = 0;
                if (v52 <= 0.0)
                  v51 = 0;
                if (*(_BYTE *)(v19 + 820) == 2)
                  v70 = v69;
                else
                  v70 = 0;
                if (v53 <= 0.0)
                  v70 = 0;
                if (v51 != v70 || (v51 = v61, v61 != v69))
                {
LABEL_63:
                  if (!v51)
                    goto LABEL_104;
                  goto LABEL_64;
                }
                v71 = *(float *)(v50 + 764);
                v72 = *(float *)(v19 + 764);
                if (v71 == v72)
                  break;
                if (v71 <= v72)
                  goto LABEL_104;
LABEL_64:
                v47 += 8;
              }
              if (v50 < v19)
                goto LABEL_64;
LABEL_104:
              v43 = (unint64_t *)(v47 - 8);
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v74 = *--v48;
                    v73 = v74;
                    v75 = *(unsigned __int8 *)(v74 + 1211) == 18;
                    if (v75 != (*(_BYTE *)(v19 + 1211) != 18))
                    {
                      v76 = *(float *)(v73 + 764);
                      v77 = *(float *)(v19 + 764);
                      v78 = *a3;
                      v79 = *(_QWORD *)(v73 + 264);
                      if (v79 && *(_BYTE *)(v73 + 1283) || (v79 = *(_QWORD *)(v73 + 272)) != 0)
                      {
                        v80 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 248))(v79);
                        v82 = *v80;
                        v81 = v80[1];
                        v84 = v80[2];
                        v83 = v80[3];
                      }
                      else
                      {
                        v81 = 3.4028e38;
                        v84 = -3.4028e38;
                        v82 = 3.4028e38;
                        v83 = -3.4028e38;
                      }
                      v85 = v78[2] > v82 && *v78 < v84 && v78[3] > v81 && v78[1] < v83;
                      v86 = *a3;
                      v87 = *(_QWORD *)(v19 + 264);
                      if (v87 && *(_BYTE *)(v19 + 1283) || (v87 = *(_QWORD *)(v19 + 272)) != 0)
                      {
                        v88 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 248))(v87);
                        v90 = *v88;
                        v89 = v88[1];
                        v92 = v88[2];
                        v91 = v88[3];
                      }
                      else
                      {
                        v89 = 3.4028e38;
                        v92 = -3.4028e38;
                        v90 = 3.4028e38;
                        v91 = -3.4028e38;
                      }
                      v93 = v86[2] > v90 && *v86 < v92 && v86[3] > v89 && v86[1] < v91;
                      if (*(_BYTE *)(v73 + 820) == 2)
                        v75 = v85;
                      else
                        v75 = 0;
                      if (v76 <= 0.0)
                        v75 = 0;
                      if (*(_BYTE *)(v19 + 820) == 2)
                        v94 = v93;
                      else
                        v94 = 0;
                      if (v77 <= 0.0)
                        v94 = 0;
                      if (v75 == v94)
                      {
                        LOBYTE(v75) = v85;
                        if (v85 == v93)
                          break;
                      }
                    }
                    if ((v75 & 1) != 0)
                      goto LABEL_61;
                  }
                  v95 = *(float *)(v73 + 764);
                  v96 = *(float *)(v19 + 764);
                  if (v95 == v96)
                    break;
                  if (v95 > v96)
                    goto LABEL_61;
                }
              }
              while (v73 >= v19);
LABEL_61:
              ;
            }
            while (v47 < (unint64_t)v48);
          }
          if (v43 != (unint64_t *)v287)
            v287->i64[0] = *v43;
          *v43 = v19;
          v97 = v18 >= (unint64_t *)v44;
          v8 = a2;
          a4 = v284;
          if (!v97)
            goto LABEL_152;
          v98 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(v287, (int8x16_t *)v43, a3);
          v7 = (int8x16_t *)(v43 + 1);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((int8x16_t *)(v43 + 1), a2, a3);
          if (!(_DWORD)result)
          {
            if (v98)
              continue;
LABEL_152:
            result = std::__introsort<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,false>(v287, v43, a3, v284, a5 & 1);
            a5 = 0;
            v7 = (int8x16_t *)(v43 + 1);
            continue;
          }
          a2 = (int8x16_t *)v43;
          v7 = v287;
          if (v98)
            return result;
          goto LABEL_2;
        }
        v155 = (int8x16_t *)&v7->u64[1];
        v156 = v7 == a2 || v155 == a2;
        v157 = v156;
        if ((a5 & 1) == 0)
        {
          if ((v157 & 1) != 0)
            return result;
          while (1)
          {
            v254 = (unint64_t *)v155;
            result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v9[1], *v9);
            if ((_DWORD)result)
            {
              v255 = *v254;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v256 = v9;
                    v9[1] = *v9;
                    v258 = *--v9;
                    v257 = v258;
                    v259 = *(unsigned __int8 *)(v255 + 1211) == 18;
                    if (v259 != (*(_BYTE *)(v258 + 1211) != 18))
                    {
                      v260 = *(float *)(v255 + 764);
                      v261 = *(float *)(v257 + 764);
                      v262 = *a3;
                      v263 = *(_QWORD *)(v255 + 264);
                      if (v263 && *(_BYTE *)(v255 + 1283) || (v263 = *(_QWORD *)(v255 + 272)) != 0)
                      {
                        v264 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v263 + 248))(v263);
                        v266 = *v264;
                        v265 = v264[1];
                        v268 = v264[2];
                        v267 = v264[3];
                      }
                      else
                      {
                        v265 = 3.4028e38;
                        v268 = -3.4028e38;
                        v266 = 3.4028e38;
                        v267 = -3.4028e38;
                      }
                      v269 = v262[2] > v266 && *v262 < v268 && v262[3] > v265 && v262[1] < v267;
                      v270 = *a3;
                      result = *(_QWORD *)(v257 + 264);
                      if (result && *(_BYTE *)(v257 + 1283) || (result = *(_QWORD *)(v257 + 272)) != 0)
                      {
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                        v272 = *(float *)result;
                        v271 = *(float *)(result + 4);
                        v274 = *(float *)(result + 8);
                        v273 = *(float *)(result + 12);
                      }
                      else
                      {
                        v271 = 3.4028e38;
                        v274 = -3.4028e38;
                        v272 = 3.4028e38;
                        v273 = -3.4028e38;
                      }
                      v275 = v270[2] > v272 && *v270 < v274 && v270[3] > v271 && v270[1] < v273;
                      if (*(_BYTE *)(v255 + 820) == 2)
                        v259 = v269;
                      else
                        v259 = 0;
                      if (v260 <= 0.0)
                        v259 = 0;
                      if (*(_BYTE *)(v257 + 820) == 2)
                        v276 = v275;
                      else
                        v276 = 0;
                      if (v261 <= 0.0)
                        v276 = 0;
                      if (v259 == v276)
                      {
                        LOBYTE(v259) = v269;
                        if (v269 == v275)
                          break;
                      }
                    }
                    if ((v259 & 1) == 0)
                      goto LABEL_432;
                  }
                  v277 = *(float *)(v255 + 764);
                  v278 = *(float *)(v257 + 764);
                  if (v277 == v278)
                    break;
                  if (v277 <= v278)
                    goto LABEL_432;
                }
              }
              while (v255 < v257);
LABEL_432:
              *v256 = v255;
            }
            v155 = (int8x16_t *)(v254 + 1);
            v9 = v254;
            if (v254 + 1 == (unint64_t *)a2)
              return result;
          }
        }
        if ((v157 & 1) != 0)
          return result;
        v158 = 0;
        v159 = (unint64_t *)v7;
        while (2)
        {
          v160 = v155;
          result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v159[1], *v159);
          if (!(_DWORD)result)
            goto LABEL_271;
          v161 = v159[1];
          v159[1] = *v159;
          v162 = v9;
          if (v159 == v9)
            goto LABEL_270;
          v163 = v158;
          while (1)
          {
            v164 = (unint64_t *)((char *)v9 + v163);
            v165 = *(unint64_t *)((char *)v9 + v163 - 8);
            v166 = *(unsigned __int8 *)(v161 + 1211) == 18;
            if (v166 != (*(_BYTE *)(v165 + 1211) != 18))
            {
              v167 = *(float *)(v161 + 764);
              v168 = *(float *)(v165 + 764);
              v169 = *a3;
              v170 = *(_QWORD *)(v161 + 264);
              if (v170 && *(_BYTE *)(v161 + 1283) || (v170 = *(_QWORD *)(v161 + 272)) != 0)
              {
                v171 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 248))(v170);
                v173 = *v171;
                v172 = v171[1];
                v175 = v171[2];
                v174 = v171[3];
              }
              else
              {
                v172 = 3.4028e38;
                v175 = -3.4028e38;
                v173 = 3.4028e38;
                v174 = -3.4028e38;
              }
              v176 = v169[2] > v173 && *v169 < v175 && v169[3] > v172 && v169[1] < v174;
              v177 = *a3;
              result = *(_QWORD *)(v165 + 264);
              if (result && *(_BYTE *)(v165 + 1283) || (result = *(_QWORD *)(v165 + 272)) != 0)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                v179 = *(float *)result;
                v178 = *(float *)(result + 4);
                v181 = *(float *)(result + 8);
                v180 = *(float *)(result + 12);
              }
              else
              {
                v178 = 3.4028e38;
                v181 = -3.4028e38;
                v179 = 3.4028e38;
                v180 = -3.4028e38;
              }
              v182 = v177[2] > v179 && *v177 < v181 && v177[3] > v178 && v177[1] < v180;
              v9 = (unint64_t *)v287;
              if (*(_BYTE *)(v161 + 820) == 2)
                v166 = v176;
              else
                v166 = 0;
              if (v167 <= 0.0)
                v166 = 0;
              if (*(_BYTE *)(v165 + 820) == 2)
                v183 = v182;
              else
                v183 = 0;
              if (v168 <= 0.0)
                v183 = 0;
              if (v166 == v183)
              {
                v166 = v176;
                if (v176 == v182)
                  break;
              }
            }
            if (!v166)
              goto LABEL_318;
LABEL_311:
            --v159;
            *v164 = *(v164 - 1);
            v163 -= 8;
            if (!v163)
            {
              v162 = v9;
              goto LABEL_270;
            }
          }
          v184 = *(float *)(v161 + 764);
          v185 = *(float *)(v165 + 764);
          if (v184 == v185)
          {
            if (v161 >= v165)
            {
              v162 = (unint64_t *)((char *)v287->u64 + v163);
              goto LABEL_270;
            }
            goto LABEL_311;
          }
          if (v184 > v185)
            goto LABEL_311;
LABEL_318:
          v162 = v159;
LABEL_270:
          *v162 = v161;
LABEL_271:
          v155 = (int8x16_t *)&v160->u64[1];
          v158 += 8;
          v159 = (unint64_t *)v160;
          if (&v160->u64[1] != (unint64_t *)a2)
            continue;
          return result;
        }
    }
  }
}

BOOL md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(float **a1, unint64_t a2, unint64_t a3)
{
  _BOOL8 result;
  float v7;
  float v8;
  float *v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  _BOOL8 v16;
  float *v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  float v27;
  float v28;

  result = *(unsigned __int8 *)(a2 + 1211) == 18;
  if (result != (*(_BYTE *)(a3 + 1211) != 18))
  {
    v7 = *(float *)(a2 + 764);
    v8 = *(float *)(a3 + 764);
    v9 = *a1;
    v10 = *(_QWORD *)(a2 + 264);
    if (v10 && *(_BYTE *)(a2 + 1283) || (v10 = *(_QWORD *)(a2 + 272)) != 0)
    {
      v11 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 248))(v10);
      v13 = *v11;
      v12 = v11[1];
      v15 = v11[2];
      v14 = v11[3];
    }
    else
    {
      v12 = 3.4028e38;
      v15 = -3.4028e38;
      v13 = 3.4028e38;
      v14 = -3.4028e38;
    }
    v16 = v9[2] > v13 && *v9 < v15 && v9[3] > v12 && v9[1] < v14;
    v17 = *a1;
    v18 = *(_QWORD *)(a3 + 264);
    if (v18 && *(_BYTE *)(a3 + 1283) || (v18 = *(_QWORD *)(a3 + 272)) != 0)
    {
      v19 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 248))(v18);
      v21 = *v19;
      v20 = v19[1];
      v23 = v19[2];
      v22 = v19[3];
    }
    else
    {
      v20 = 3.4028e38;
      v23 = -3.4028e38;
      v21 = 3.4028e38;
      v22 = -3.4028e38;
    }
    v24 = v17[2] > v21 && *v17 < v23 && v17[3] > v20 && v17[1] < v22;
    v25 = *(_BYTE *)(a2 + 820) == 2 && v16;
    result = v7 > 0.0 && v25;
    v26 = *(_BYTE *)(a3 + 820) == 2 && v24;
    if (v8 <= 0.0)
      v26 = 0;
    if (result == v26)
    {
      result = v16;
      if (v16 == v24)
      {
        v27 = *(float *)(a2 + 764);
        v28 = *(float *)(a3 + 764);
        if (v27 == v28)
          return a2 < a3;
        else
          return v27 > v28;
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, float **a4)
{
  BOOL v8;
  _BOOL8 result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a4, *a2, *a1);
  result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, float **a6)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(a1, a2, a3, a6);
  if (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a6, *a4, *a3))
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a6, *a3, *a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a6, *a2, *a1))
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a6, *a5, *a4);
  if (result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a6, *a4, *a3);
    if (result)
    {
      v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a6, *a3, *a2);
      if (result)
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        result = md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a6, *a2, *a1);
        if (result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>(int8x16_t *a1, int8x16_t *a2, float **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  _QWORD *i64;
  unint64_t v14;
  uint64_t v15;
  __int8 *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, a2[-1].u64[1], a1->i64[0]))
      {
        v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1], a3);
      return 1;
    case 4:
      v17 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      if (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, a2[-1].u64[1], a1[1].u64[0]))
      {
        v18 = *v17;
        *v17 = a2[-1].u64[1];
        a2[-1].i64[1] = v18;
        if (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v17, a1->u64[1]))
        {
          v20 = a1->i64[1];
          v19 = a1[1].u64[0];
          v21 = a1->i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v20;
          if (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v19, v21))
            *a1 = vextq_s8(*a1, *a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1], a3);
      return 1;
    default:
      v9 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      v10 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, *v10, *v9))
    {
      v14 = *v10;
      v15 = v11;
      do
      {
        v16 = &a1->i8[v15];
        *(uint64_t *)((char *)&a1[1].i64[1] + v15) = *(uint64_t *)((char *)a1[1].i64 + v15);
        if (v15 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v15 -= 8;
      }
      while (md::MuninPointLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0::operator()(a3, v14, *((_QWORD *)v16 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v15);
LABEL_7:
      *i64 = v14;
      if (++v12 == 8)
        return v10 + 1 == (unint64_t *)a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == (unint64_t *)a2)
      return 1;
  }
}

void md::MuninRoadLabelDedupingGroup::~MuninRoadLabelDedupingGroup(md::MuninRoadLabelDedupingGroup *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::MuninRoadLabelDedupingGroup::prepareForCollision(md::MuninRoadLabelDedupingGroup *this, md::LabelManager *a2)
{
  md::LabelManager *v2;
  unint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  _BYTE v42[40];
  __int128 v43;

  v2 = a2;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 9) = 0;
  v4 = (unint64_t *)v42;
  v39 = (uint64_t *)v42;
  v40 = (uint64_t *)v42;
  v41 = 5;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  if (v5 != v6)
  {
    while (1)
    {
      v8 = *v5;
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5))
        goto LABEL_5;
      v7 = v40;
      v9 = v40 - v39;
      if (v41 < v9 + 1)
        break;
LABEL_4:
      *v7 = v8;
      ++v40;
LABEL_5:
      if (++v5 == v6)
      {
        v4 = (unint64_t *)v39;
        v24 = (unint64_t *)v40;
        v2 = a2;
        goto LABEL_26;
      }
    }
    v10 = (1 << -(char)__clz(v41 + 1));
    if (v41 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = 1;
    if (v10 <= v9 + 1)
      v11 = v9 + 1;
    else
      v11 = v10;
    v12 = (char *)malloc_type_malloc(8 * v11, 0x2004093837F09uLL);
    v13 = (uint64_t *)v12;
    v14 = v39;
    if (v39 != v40)
    {
      v15 = (char *)v40 - (char *)v39 - 8;
      if (v15 < 0x18)
      {
        v16 = v12;
      }
      else
      {
        v16 = v12;
        if ((unint64_t)(v12 - (char *)v39) >= 0x20)
        {
          v17 = (v15 >> 3) + 1;
          v18 = v17 & 0x3FFFFFFFFFFFFFFCLL;
          v16 = &v12[v18 * 8];
          v19 = (__int128 *)(v39 + 2);
          v20 = v12 + 16;
          v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v22 = *v19;
            *(v20 - 1) = *(v19 - 1);
            *v20 = v22;
            v19 += 2;
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_22;
          v14 = &v39[v18];
        }
      }
      do
      {
        v23 = *v14++;
        *(_QWORD *)v16 = v23;
        v16 += 8;
      }
      while (v14 != v40);
    }
LABEL_22:
    if (v39 != (uint64_t *)v42)
      free(v39);
    v7 = &v13[v9];
    v39 = v13;
    v40 = v7;
    v41 = v11;
    goto LABEL_4;
  }
  v24 = (unint64_t *)v42;
LABEL_26:
  v25 = (char *)v24 - (char *)v4;
  if ((char *)v24 - (char *)v4 == 8)
    goto LABEL_27;
  if ((unint64_t)v25 >= 9)
  {
    v26 = *(_OWORD *)(*((_QWORD *)v2 + 54) + 1072);
    v43 = v26;
    v27 = 126 - 2 * __clz(v25 >> 3);
    if (v24 == v4)
      v28 = 0;
    else
      v28 = v27;
    std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **,false>(v4, v24, (float *)&v43, v28, 1, *(float *)&v26);
    v4 = (unint64_t *)v39;
    if (v39 == v40)
      goto LABEL_27;
    v29 = (char *)v40 - (char *)v39 - 8;
    if (v29 > 7)
    {
      v32 = 0;
      v33 = (v29 >> 3) + 1;
      v30 = v33 & 0x3FFFFFFFFFFFFFFELL;
      v31 = &v39[v33 & 0x3FFFFFFFFFFFFFFELL];
      do
      {
        v34 = &v39[v32];
        v36 = *v34;
        v35 = v34[1];
        *(_DWORD *)(v36 + 32) = v32;
        *(_DWORD *)(v35 + 32) = v32 + 1;
        v32 += 2;
      }
      while (v30 != v32);
      if (v33 == v30)
        goto LABEL_27;
    }
    else
    {
      LODWORD(v30) = 0;
      v31 = v39;
    }
    do
    {
      v37 = *v31++;
      *(_DWORD *)(v37 + 32) = v30;
      LODWORD(v30) = v30 + 1;
    }
    while (v31 != v40);
LABEL_27:
    *((_QWORD *)this + 9) = *v4;
  }
  if (v4 != (unint64_t *)v42)
    free(v4);
}

void sub_19F86BC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  if (a10 != a12)
    free(a10);
  _Unwind_Resume(exception_object);
}

float std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **,false>(unint64_t *i, unint64_t *a2, float *a3, uint64_t a4, char a5, float result)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  int v25;
  float *v26;
  int v27;
  int v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  float *v33;
  int v34;
  float *v35;
  int v36;
  int v37;
  int v38;
  float v39;
  float v40;
  unint64_t *v41;
  unint64_t *k;
  unint64_t v43;
  float *v44;
  int v45;
  float *v46;
  int v47;
  int v48;
  int v49;
  float v50;
  float v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  float *v56;
  int v57;
  float *v58;
  int v59;
  int v60;
  int v61;
  float v62;
  float v63;
  unint64_t v64;
  unint64_t v65;
  float *v66;
  int v67;
  float *v68;
  int v69;
  int v70;
  int v71;
  float v72;
  float v73;
  unint64_t v74;
  float *v75;
  int v76;
  float *v77;
  int v78;
  int v79;
  int v80;
  float v81;
  float v82;
  BOOL v83;
  BOOL v84;
  float v85;
  float v86;
  unint64_t v87;
  unint64_t v88;
  float *v89;
  int v90;
  float *v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  float *v96;
  int v97;
  float *v98;
  int v99;
  int v100;
  int v101;
  float v102;
  unint64_t *v103;
  unint64_t *j;
  unint64_t v105;
  float *v106;
  int v107;
  float *v108;
  int v109;
  int v110;
  int v111;
  float v112;
  unint64_t v113;
  unint64_t v114;
  float *v115;
  int v116;
  float *v117;
  int v118;
  int v119;
  int v120;
  float v121;
  float v122;
  unint64_t v123;
  unint64_t v124;
  float *v125;
  int v126;
  float *v127;
  int v128;
  int v129;
  int v130;
  float v131;
  unint64_t *v132;
  float v133;
  unint64_t v134;
  float *v135;
  int v136;
  float *v137;
  int v138;
  int v139;
  int v140;
  float v141;
  unint64_t v142;
  unint64_t v143;
  float *v144;
  int v145;
  unint64_t *v146;
  BOOL v147;
  char v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  float *v155;
  int v156;
  float *v157;
  int v158;
  int v159;
  int v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  float *v165;
  int v166;
  float *v167;
  int v168;
  int v169;
  int v170;
  float v171;
  float v172;
  int64_t v173;
  unint64_t *v174;
  int64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  float *v179;
  int v180;
  float *v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  float *v187;
  int v188;
  float *v189;
  int v190;
  int v191;
  int v192;
  unint64_t v193;
  unint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  float *v199;
  int v200;
  float *v201;
  int v202;
  int v203;
  int v204;
  unint64_t v205;
  float *v206;
  int v207;
  float *v208;
  int v209;
  int v210;
  int v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float *v218;
  int v219;
  int v220;
  int v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v225;
  int64_t v226;
  unint64_t *v227;
  unint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  float *v233;
  int v234;
  float *v235;
  int v236;
  int v237;
  int v238;
  float v239;
  unint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  float *v247;
  int v248;
  float *v249;
  int v250;
  int v251;
  int v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  float *v257;
  int v258;
  float *v259;
  int v260;
  int v261;
  int v262;
  float v263;
  float v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  float *v268;
  int v269;
  float *v270;
  int v271;
  int v272;
  int v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  float *v278;
  int v279;
  float *v280;
  int v281;
  int v282;
  int v283;
  float v284;
  float v285;
  float v286;
  int64_t v287;
  unint64_t v289;
  int64_t v290;
  unint64_t v291;
  unint64_t *v293;
  uint64_t v294;
  unint64_t *v295;
  uint64_t v296;

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, float *a4)
{
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  int v11;
  float *v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  int v19;
  float *result;
  int v21;
  int v22;
  int v23;
  float v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  float *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  float v41;
  float v42;
  unint64_t v43;
  unint64_t v44;
  float *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  float v55;
  float v56;
  unint64_t v57;

  v6 = a2;
  v7 = a1;
  v8 = *a2;
  v9 = *a1;
  v10 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 64) + 248))(*(_QWORD *)(*a2 + 64));
  v11 = a4[2] > *v10 && *a4 < v10[2] && a4[3] > v10[1] && a4[1] < v10[3];
  v12 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 64) + 248))(*(_QWORD *)(v9 + 64));
  v13 = a4[2] > *v12 && *a4 < v12[2] && a4[3] > v12[1] && a4[1] < v12[3];
  if (*(_BYTE *)(v8 + 493) == 2)
    v14 = v11;
  else
    v14 = 0;
  if (*(_BYTE *)(v9 + 493) == 2)
    v15 = v13;
  else
    v15 = 0;
  if ((v14 | v15) != 1 || ((v14 ^ v15) & 1) == 0)
  {
    LOBYTE(v14) = v11;
    if (v11 == v13)
    {
      v24 = *(float *)(v8 + 476);
      v25 = *(float *)(v9 + 476);
      if (v24 == v25)
      {
        if (v8 >= v9)
          goto LABEL_48;
      }
      else if (v24 <= v25)
      {
        goto LABEL_48;
      }
LABEL_23:
      v16 = *a3;
      v17 = *v6;
      v18 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 64) + 248))(*(_QWORD *)(*a3 + 64));
      v19 = a4[2] > *v18 && *a4 < v18[2] && a4[3] > v18[1] && a4[1] < v18[3];
      result = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 64) + 248))(*(_QWORD *)(v17 + 64));
      v21 = a4[2] > *result && *a4 < result[2] && a4[3] > result[1] && a4[1] < result[3];
      if (*(_BYTE *)(v16 + 493) == 2)
        v22 = v19;
      else
        v22 = 0;
      if (*(_BYTE *)(v17 + 493) == 2)
        v23 = v21;
      else
        v23 = 0;
      if ((v22 | v23) == 1 && ((v22 ^ v23) & 1) != 0 || (LOBYTE(v22) = v19, v19 != v21))
      {
        if ((v22 & 1) != 0)
        {
LABEL_45:
          v6 = a3;
LABEL_135:
          v57 = *v7;
          *v7 = *v6;
          *v6 = v57;
          return result;
        }
      }
      else
      {
        v41 = *(float *)(v16 + 476);
        v42 = *(float *)(v17 + 476);
        if (v41 == v42)
        {
          if (v16 < v17)
            goto LABEL_45;
        }
        else if (v41 > v42)
        {
          goto LABEL_45;
        }
      }
      v43 = *v7;
      *v7 = *v6;
      *v6 = v43;
      v44 = *a3;
      v45 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 64) + 248))(*(_QWORD *)(*a3 + 64));
      v46 = a4[2] > *v45 && *a4 < v45[2] && a4[3] > v45[1] && a4[1] < v45[3];
      result = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v43 + 64) + 248))(*(_QWORD *)(v43 + 64));
      v47 = a4[2] > *result && *a4 < result[2] && a4[3] > result[1] && a4[1] < result[3];
      if (*(_BYTE *)(v44 + 493) == 2)
        v48 = v46;
      else
        v48 = 0;
      if (*(_BYTE *)(v43 + 493) == 2)
        v49 = v47;
      else
        v49 = 0;
      if ((v48 | v49) == 1 && ((v48 ^ v49) & 1) != 0 || (v48 = v46, v46 != v47))
      {
        v7 = v6;
        v6 = a3;
        if (!v48)
          return result;
        goto LABEL_135;
      }
      v55 = *(float *)(v44 + 476);
      v56 = *(float *)(v43 + 476);
      v7 = v6;
      v6 = a3;
      v54 = v55 <= v56;
      if (v55 == v56)
      {
        if (v44 >= v43)
          return result;
        goto LABEL_135;
      }
      goto LABEL_127;
    }
  }
  if ((v14 & 1) != 0)
    goto LABEL_23;
LABEL_48:
  v26 = *a3;
  v27 = *v6;
  v28 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 64) + 248))(*(_QWORD *)(*a3 + 64));
  v29 = a4[2] > *v28 && *a4 < v28[2] && a4[3] > v28[1] && a4[1] < v28[3];
  result = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 64) + 248))(*(_QWORD *)(v27 + 64));
  v30 = a4[2] > *result && *a4 < result[2] && a4[3] > result[1] && a4[1] < result[3];
  if (*(_BYTE *)(v26 + 493) == 2)
    v31 = v29;
  else
    v31 = 0;
  if (*(_BYTE *)(v27 + 493) == 2)
    v32 = v30;
  else
    v32 = 0;
  if ((v31 | v32) == 1 && ((v31 ^ v32) & 1) != 0 || (v31 = v29, v29 != v30))
  {
    if (!v31)
      return result;
  }
  else
  {
    v50 = *(float *)(v26 + 476);
    v51 = *(float *)(v27 + 476);
    if (v50 == v51)
    {
      if (v26 >= v27)
        return result;
    }
    else if (v50 <= v51)
    {
      return result;
    }
  }
  v33 = *v6;
  *v6 = *a3;
  *a3 = v33;
  v34 = *v6;
  v35 = *v7;
  v36 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v6 + 64) + 248))(*(_QWORD *)(*v6 + 64));
  v37 = a4[2] > *v36 && *a4 < v36[2] && a4[3] > v36[1] && a4[1] < v36[3];
  result = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 64) + 248))(*(_QWORD *)(v35 + 64));
  v38 = a4[2] > *result && *a4 < result[2] && a4[3] > result[1] && a4[1] < result[3];
  if (*(_BYTE *)(v34 + 493) == 2)
    v39 = v37;
  else
    v39 = 0;
  if (*(_BYTE *)(v35 + 493) == 2)
    v40 = v38;
  else
    v40 = 0;
  if ((v39 | v40) == 1 && ((v39 ^ v40) & 1) != 0 || (LOBYTE(v39) = v37, v37 != v38))
  {
    if ((v39 & 1) != 0)
      goto LABEL_135;
  }
  else
  {
    v52 = *(float *)(v34 + 476);
    v53 = *(float *)(v35 + 476);
    v54 = v52 <= v53;
    if (v52 != v53)
    {
LABEL_127:
      if (!v54)
        goto LABEL_135;
      return result;
    }
    if (v34 < v35)
      goto LABEL_135;
  }
  return result;
}

float std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, float *a5)
{
  unint64_t v10;
  unint64_t v11;
  float *v12;
  int v13;
  float *v14;
  float result;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  int v23;
  float *v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  int v32;
  float v33;
  float *v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  float v39;
  float v40;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 64) + 248))(*(_QWORD *)(*a4 + 64));
  v13 = a5[2] > *v12 && *a5 < v12[2] && a5[3] > v12[1] && a5[1] < v12[3];
  v14 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 64) + 248))(*(_QWORD *)(v11 + 64));
  result = a5[2];
  v16 = 0;
  if (result > *v14)
  {
    result = *a5;
    if (*a5 < v14[2])
    {
      result = a5[3];
      if (result > v14[1])
      {
        result = a5[1];
        if (result < v14[3])
          v16 = 1;
      }
    }
  }
  if (*(_BYTE *)(v10 + 493) == 2)
    v17 = v13;
  else
    v17 = 0;
  if (*(_BYTE *)(v11 + 493) == 2)
    v18 = v16;
  else
    v18 = 0;
  if ((v17 | v18) == 1 && ((v17 ^ v18) & 1) != 0 || (v17 = v13, v13 != v16))
  {
    if (!v17)
      return result;
  }
  else
  {
    result = *(float *)(v10 + 476);
    v33 = *(float *)(v11 + 476);
    if (result == v33)
    {
      if (v10 >= v11)
        return result;
    }
    else if (result <= v33)
    {
      return result;
    }
  }
  v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  v20 = *a3;
  v21 = *a2;
  v22 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 64) + 248))(*(_QWORD *)(*a3 + 64));
  v23 = a5[2] > *v22 && *a5 < v22[2] && a5[3] > v22[1] && a5[1] < v22[3];
  v24 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 64) + 248))(*(_QWORD *)(v21 + 64));
  result = a5[2];
  v25 = 0;
  if (result > *v24)
  {
    result = *a5;
    if (*a5 < v24[2])
    {
      result = a5[3];
      if (result > v24[1])
      {
        result = a5[1];
        if (result < v24[3])
          v25 = 1;
      }
    }
  }
  if (*(_BYTE *)(v20 + 493) == 2)
    v26 = v23;
  else
    v26 = 0;
  if (*(_BYTE *)(v21 + 493) == 2)
    v27 = v25;
  else
    v27 = 0;
  if ((v26 | v27) == 1 && ((v26 ^ v27) & 1) != 0 || (v26 = v23, v23 != v25))
  {
    if (!v26)
      return result;
    goto LABEL_44;
  }
  result = *(float *)(v20 + 476);
  v39 = *(float *)(v21 + 476);
  if (result != v39)
  {
    if (result <= v39)
      return result;
LABEL_44:
    v28 = *a2;
    *a2 = *a3;
    *a3 = v28;
    v29 = *a2;
    v30 = *a1;
    v31 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 64) + 248))(*(_QWORD *)(*a2 + 64));
    v32 = a5[2] > *v31 && *a5 < v31[2] && a5[3] > v31[1] && a5[1] < v31[3];
    v34 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 64) + 248))(*(_QWORD *)(v30 + 64));
    result = a5[2];
    v35 = 0;
    if (result > *v34)
    {
      result = *a5;
      if (*a5 < v34[2])
      {
        result = a5[3];
        if (result > v34[1])
        {
          result = a5[1];
          if (result < v34[3])
            v35 = 1;
        }
      }
    }
    if (*(_BYTE *)(v29 + 493) == 2)
      v36 = v32;
    else
      v36 = 0;
    if (*(_BYTE *)(v30 + 493) == 2)
      v37 = v35;
    else
      v37 = 0;
    if ((v36 | v37) == 1 && ((v36 ^ v37) & 1) != 0 || (v36 = v32, v32 != v35))
    {
      if (!v36)
        return result;
      goto LABEL_69;
    }
    result = *(float *)(v29 + 476);
    v40 = *(float *)(v30 + 476);
    if (result == v40)
    {
      if (v29 >= v30)
        return result;
    }
    else if (result <= v40)
    {
      return result;
    }
LABEL_69:
    v38 = *a1;
    *a1 = *a2;
    *a2 = v38;
    return result;
  }
  if (v20 < v21)
    goto LABEL_44;
  return result;
}

float std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, float *a6)
{
  float v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  int v16;
  float *v17;
  float result;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float *v25;
  int v26;
  float *v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  int v35;
  float v36;
  float *v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float *v44;
  int v45;
  float v46;
  float *v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  float v52;
  float v53;

  v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = (float *)(*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(*a5 + 64) + 248))(*(_QWORD *)(*a5 + 64), v12);
  v16 = a6[2] > *v15 && *a6 < v15[2] && a6[3] > v15[1] && a6[1] < v15[3];
  v17 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 64) + 248))(*(_QWORD *)(v14 + 64));
  result = a6[2];
  v19 = 0;
  if (result > *v17)
  {
    result = *a6;
    if (*a6 < v17[2])
    {
      result = a6[3];
      if (result > v17[1])
      {
        result = a6[1];
        if (result < v17[3])
          v19 = 1;
      }
    }
  }
  if (*(_BYTE *)(v13 + 493) == 2)
    v20 = v16;
  else
    v20 = 0;
  if (*(_BYTE *)(v14 + 493) == 2)
    v21 = v19;
  else
    v21 = 0;
  if ((v20 | v21) == 1 && ((v20 ^ v21) & 1) != 0 || (v20 = v16, v16 != v19))
  {
    if (!v20)
      return result;
  }
  else
  {
    result = *(float *)(v13 + 476);
    v36 = *(float *)(v14 + 476);
    if (result == v36)
    {
      if (v13 >= v14)
        return result;
    }
    else if (result <= v36)
    {
      return result;
    }
  }
  v22 = *a4;
  *a4 = *a5;
  *a5 = v22;
  v23 = *a4;
  v24 = *a3;
  v25 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 64) + 248))(*(_QWORD *)(*a4 + 64));
  v26 = a6[2] > *v25 && *a6 < v25[2] && a6[3] > v25[1] && a6[1] < v25[3];
  v27 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 64) + 248))(*(_QWORD *)(v24 + 64));
  result = a6[2];
  v28 = 0;
  if (result > *v27)
  {
    result = *a6;
    if (*a6 < v27[2])
    {
      result = a6[3];
      if (result > v27[1])
      {
        result = a6[1];
        if (result < v27[3])
          v28 = 1;
      }
    }
  }
  if (*(_BYTE *)(v23 + 493) == 2)
    v29 = v26;
  else
    v29 = 0;
  if (*(_BYTE *)(v24 + 493) == 2)
    v30 = v28;
  else
    v30 = 0;
  if ((v29 | v30) == 1 && ((v29 ^ v30) & 1) != 0 || (v29 = v26, v26 != v28))
  {
    if (!v29)
      return result;
  }
  else
  {
    result = *(float *)(v23 + 476);
    v46 = *(float *)(v24 + 476);
    if (result == v46)
    {
      if (v23 >= v24)
        return result;
    }
    else if (result <= v46)
    {
      return result;
    }
  }
  v31 = *a3;
  *a3 = *a4;
  *a4 = v31;
  v32 = *a3;
  v33 = *a2;
  v34 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 64) + 248))(*(_QWORD *)(*a3 + 64));
  v35 = a6[2] > *v34 && *a6 < v34[2] && a6[3] > v34[1] && a6[1] < v34[3];
  v37 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v33 + 64) + 248))(*(_QWORD *)(v33 + 64));
  result = a6[2];
  v38 = 0;
  if (result > *v37)
  {
    result = *a6;
    if (*a6 < v37[2])
    {
      result = a6[3];
      if (result > v37[1])
      {
        result = a6[1];
        if (result < v37[3])
          v38 = 1;
      }
    }
  }
  if (*(_BYTE *)(v32 + 493) == 2)
    v39 = v35;
  else
    v39 = 0;
  if (*(_BYTE *)(v33 + 493) == 2)
    v40 = v38;
  else
    v40 = 0;
  if ((v39 | v40) == 1 && ((v39 ^ v40) & 1) != 0 || (v39 = v35, v35 != v38))
  {
    if (!v39)
      return result;
    goto LABEL_69;
  }
  result = *(float *)(v32 + 476);
  v52 = *(float *)(v33 + 476);
  if (result != v52)
  {
    if (result <= v52)
      return result;
LABEL_69:
    v41 = *a2;
    *a2 = *a3;
    *a3 = v41;
    v42 = *a2;
    v43 = *a1;
    v44 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 64) + 248))(*(_QWORD *)(*a2 + 64));
    v45 = a6[2] > *v44 && *a6 < v44[2] && a6[3] > v44[1] && a6[1] < v44[3];
    v47 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v43 + 64) + 248))(*(_QWORD *)(v43 + 64));
    result = a6[2];
    v48 = 0;
    if (result > *v47)
    {
      result = *a6;
      if (*a6 < v47[2])
      {
        result = a6[3];
        if (result > v47[1])
        {
          result = a6[1];
          if (result < v47[3])
            v48 = 1;
        }
      }
    }
    if (*(_BYTE *)(v42 + 493) == 2)
      v49 = v45;
    else
      v49 = 0;
    if (*(_BYTE *)(v43 + 493) == 2)
      v50 = v48;
    else
      v50 = 0;
    if ((v49 | v50) == 1 && ((v49 ^ v50) & 1) != 0 || (v49 = v45, v45 != v48))
    {
      if (!v49)
        return result;
      goto LABEL_94;
    }
    result = *(float *)(v42 + 476);
    v53 = *(float *)(v43 + 476);
    if (result == v53)
    {
      if (v42 >= v43)
        return result;
    }
    else if (result <= v53)
    {
      return result;
    }
LABEL_94:
    v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
    return result;
  }
  if (v32 < v33)
    goto LABEL_69;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(unint64_t *a1, unint64_t *a2, float *a3)
{
  unint64_t *v4;
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  int v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  int v20;
  float *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float *v28;
  int v29;
  float *v30;
  int v31;
  int v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  float v43;
  float v44;
  unint64_t *v45;
  int v46;

  v4 = a2;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 64) + 248))(*(_QWORD *)(v8 + 64));
      v11 = a3[2] > *v10 && *a3 < v10[2] && a3[3] > v10[1] && a3[1] < v10[3];
      v38 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 64) + 248))(*(_QWORD *)(v9 + 64));
      v39 = a3[2] > *v38 && *a3 < v38[2] && a3[3] > v38[1] && a3[1] < v38[3];
      if (*(_BYTE *)(v8 + 493) == 2)
        v40 = v11;
      else
        v40 = 0;
      if (*(_BYTE *)(v9 + 493) == 2)
        v41 = v39;
      else
        v41 = 0;
      if ((v40 | v41) == 1 && ((v40 ^ v41) & 1) != 0 || (v40 = v11, v11 != v39))
      {
        if (!v40)
          return 1;
        goto LABEL_88;
      }
      v43 = *(float *)(v8 + 476);
      v44 = *(float *)(v9 + 476);
      if (v43 == v44)
      {
        if (v8 >= v9)
          return 1;
      }
      else if (v43 <= v44)
      {
        return 1;
      }
LABEL_88:
      v42 = *a1;
      *a1 = *(v4 - 1);
      *(v4 - 1) = v42;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(a1, a1 + 1, a1 + 2, a3);
      v13 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v14 = 0;
      v15 = 0;
      v45 = v4;
      while (2)
      {
        v17 = *v13;
        v18 = *v12;
        v19 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v13 + 64) + 248))(*(_QWORD *)(*v13 + 64));
        v20 = a3[2] > *v19 && *a3 < v19[2] && a3[3] > v19[1] && a3[1] < v19[3];
        v21 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 64) + 248))(*(_QWORD *)(v18 + 64));
        v22 = a3[2] > *v21 && *a3 < v21[2] && a3[3] > v21[1] && a3[1] < v21[3];
        if (*(_BYTE *)(v17 + 493) == 2)
          v23 = v20;
        else
          v23 = 0;
        if (*(_BYTE *)(v18 + 493) == 2)
          v24 = v22;
        else
          v24 = 0;
        if ((v23 | v24) == 1 && ((v23 ^ v24) & 1) != 0 || (v23 = v20, v20 != v22))
        {
          if (!v23)
            goto LABEL_12;
        }
        else
        {
          v36 = *(float *)(v17 + 476);
          v37 = *(float *)(v18 + 476);
          if (v36 == v37)
          {
            if (v17 >= v18)
              goto LABEL_12;
          }
          else if (v36 <= v37)
          {
            goto LABEL_12;
          }
        }
        v25 = *v13;
        *v13 = *v12;
        v16 = a1;
        if (v12 == a1)
          goto LABEL_11;
        v46 = v15;
        v26 = v14;
        while (2)
        {
          v27 = *(unint64_t *)((char *)a1 + v26 + 8);
          v28 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 64) + 248))(*(_QWORD *)(v25 + 64));
          v29 = a3[2] > *v28 && *a3 < v28[2] && a3[3] > v28[1] && a3[1] < v28[3];
          v30 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 64) + 248))(*(_QWORD *)(v27 + 64));
          v31 = a3[2] > *v30 && *a3 < v30[2] && a3[3] > v30[1] && a3[1] < v30[3];
          if (*(_BYTE *)(v25 + 493) == 2)
            v32 = v29;
          else
            v32 = 0;
          if (*(_BYTE *)(v27 + 493) == 2)
            v33 = v31;
          else
            v33 = 0;
          if ((v32 | v33) != 1 || ((v32 ^ v33) & 1) == 0)
          {
            v32 = v29;
            if (v29 == v31)
            {
              v34 = *(float *)(v25 + 476);
              v35 = *(float *)(v27 + 476);
              if (v34 == v35)
              {
                if (v25 >= v27)
                {
LABEL_62:
                  v16 = v12;
                  goto LABEL_10;
                }
              }
              else if (v34 <= v35)
              {
                goto LABEL_62;
              }
              goto LABEL_37;
            }
          }
          if (v32)
          {
LABEL_37:
            --v12;
            *(unint64_t *)((char *)a1 + v26 + 16) = *(unint64_t *)((char *)a1 + v26 + 8);
            v26 -= 8;
            if (v26 == -16)
            {
              v16 = a1;
              goto LABEL_10;
            }
            continue;
          }
          break;
        }
        v16 = (unint64_t *)((char *)a1 + v26 + 16);
LABEL_10:
        v4 = v45;
        v15 = v46;
LABEL_11:
        *v16 = v25;
        if (++v15 != 8)
        {
LABEL_12:
          v12 = v13;
          v14 += 8;
          if (++v13 != v4)
            continue;
          return 1;
        }
        return v13 + 1 == v4;
      }
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AppliedWantsDynamicShadowBounds>(gdc::Entity,md::ls::AppliedWantsDynamicShadowBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AppliedWantsDynamicShadowBounds>(gdc::Entity,md::ls::AppliedWantsDynamicShadowBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42817F0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AppliedWantsDynamicShadowBounds>(gdc::Entity,md::ls::AppliedWantsDynamicShadowBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42817F0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AppliedWantsDynamicShadowBounds>(gdc::Entity,md::ls::AppliedWantsDynamicShadowBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::AppliedWantsDynamicShadowBounds>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AppliedUsesIdentityMatrix>(gdc::Entity,md::ls::AppliedUsesIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AppliedUsesIdentityMatrix>(gdc::Entity,md::ls::AppliedUsesIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280290;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AppliedUsesIdentityMatrix>(gdc::Entity,md::ls::AppliedUsesIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280290;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AppliedUsesIdentityMatrix>(gdc::Entity,md::ls::AppliedUsesIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0xD26E29C5780B3C99;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0xD26E29C5780B3C99;
      if (*(_QWORD *)&v5 <= 0xD26E29C5780B3C99)
        v7 = 0xD26E29C5780B3C99 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0xD26E29C5780B3C99;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0xD26E29C5780B3C99)
            {
              if (v9[2] == 0xD26E29C5780B3C99)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0xD26E29C5780B3C99)
          {
            if (v9[2] == 0xD26E29C5780B3C99)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::AppliedUsesIdentityMatrix]";
  *(_QWORD *)(v13 + 24) = 33;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E4272FD8;
  *(_QWORD *)(v13 + 8) = 0xD26E29C5780B3C99;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0xD26E29C5780B3C99, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = (uint64_t *)0xD26E29C5780B3C99;
  v35 = (uint64_t)"md::ls::AppliedUsesIdentityMatrix]";
  v36 = 33;
  gdc::Registry::_registerStorageDataSignals(a2, 0xD26E29C5780B3C99, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = &v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = &v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19F86F7AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::AppliedUsesIdentityMatrix>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AppliedUsesIdentityMatrix>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AppliedUsesIdentityMatrix>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AppliedUsesIdentityMatrix>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<md::ita::ResolveMaterialDiffuseTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>,ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialDiffuseTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>,ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ResolveMaterialDiffuseTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>,ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialDiffuseTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>,ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427C150;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::ita::ResolveMaterialDiffuseTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>,ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialDiffuseTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>,ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427C150;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ResolveMaterialDiffuseTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>,ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialDiffuseTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>,ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  BOOL v12;
  int8x8_t *v13;
  uint64_t v14;
  float v15;
  _QWORD *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  __n128 v36;

  v6 = **(_QWORD **)(a1 + 8);
  v7 = *a2;
  v35 = v7;
  v8 = *(_QWORD *)(v6 + 120);
  if (v7 >= (unint64_t)((*(_QWORD *)(v6 + 128) - v8) >> 3))
    goto LABEL_9;
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (!v9)
    goto LABEL_10;
  if (HIDWORD(v7) != HIDWORD(v9)
    || ((v10 = *(_QWORD *)(v6 + 144),
         v11 = (unint64_t *)(v10 + 8 * v9),
         v11 != *(unint64_t **)(v6 + 152))
      ? (v12 = v10 == 0)
      : (v12 = 1),
        v12))
  {
LABEL_9:
    v9 = 0;
  }
  else
  {
    v31 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v7, &v35);
    ++v31[3];
    v9 = *v11;
  }
LABEL_10:
  v13 = *(int8x8_t **)v6;
  v36 = (__n128)v9;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v33, v13, (uint64_t *)&v36, 0);
  v35 = a2[1];
  v14 = v33;
  v15 = **(float **)(v33 + 48);
  v16 = *(_QWORD **)(v33 + 16);
  if (v16
    && ((v17 = gms::_Material<ggl::Texture2D>::zoomable(v16, 1u), v15 < 1.0) ? (v18 = v17) : (v18 = 0),
        (v18 & 1) != 0)
    || (v19 = *(_QWORD **)(v14 + 32)) != 0
    && ((v20 = gms::_Material<ggl::Texture2D>::zoomable(v19, 1u), v15 > 0.0) ? (v21 = v20) : (v21 = 0),
        v21 == 1))
  {
    v22 = (int)**(float **)(a1 + 16);
  }
  else
  {
    v22 = 0;
  }
  v23 = **(_QWORD **)(a1 + 24);
  v32 = 1;
  md::MaterialTextureManager::textureFromMaterial(&v36, v23, (uint64_t)&v33, &v35, &v32, v22);
  v24 = v36;
  if (v36.n128_u64[0])
  {
    md::SharedResource::addFrameRef((md::SharedResource *)v36.n128_u64[0], **(_QWORD **)(a1 + 32));
    v25 = *(_QWORD *)(v24.n128_u64[0] + 32);
  }
  else
  {
    v25 = 0;
  }
  mre::GGLResourceStore::updateUnmanagedTexture(**(_QWORD **)(a1 + 40), *a3, v25);
  if (v24.n128_u64[1])
  {
    v26 = (unint64_t *)(v24.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v24.n128_u64[1] + 16))(v24.n128_u64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v24.n128_u64[1]);
    }
  }
  v28 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_19F86FBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (a11)
  {
    v15 = (unint64_t *)&a11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::ita::ResolveMaterialEmissiveTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>,ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialEmissiveTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>,ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ResolveMaterialEmissiveTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>,ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialEmissiveTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>,ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427C2B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::ita::ResolveMaterialEmissiveTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>,ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialEmissiveTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>,ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427C2B8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ResolveMaterialEmissiveTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>,ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialEmissiveTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>,ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  BOOL v12;
  int8x8_t *v13;
  uint64_t v14;
  float v15;
  _QWORD *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t v39;
  __n128 v40;

  v6 = **(_QWORD **)(a1 + 8);
  v7 = *a2;
  v39 = v7;
  v8 = *(_QWORD *)(v6 + 120);
  if (v7 >= (unint64_t)((*(_QWORD *)(v6 + 128) - v8) >> 3))
    goto LABEL_9;
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (!v9)
    goto LABEL_10;
  if (HIDWORD(v7) != HIDWORD(v9)
    || ((v10 = *(_QWORD *)(v6 + 144),
         v11 = (unint64_t *)(v10 + 8 * v9),
         v11 != *(unint64_t **)(v6 + 152))
      ? (v12 = v10 == 0)
      : (v12 = 1),
        v12))
  {
LABEL_9:
    v9 = 0;
  }
  else
  {
    v35 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v7, &v39);
    ++v35[3];
    v9 = *v11;
  }
LABEL_10:
  v13 = *(int8x8_t **)v6;
  v40 = (__n128)v9;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v37, v13, (uint64_t *)&v40, 0);
  v39 = a2[1];
  v14 = v37;
  v15 = **(float **)(v37 + 48);
  v16 = *(_QWORD **)(v37 + 16);
  if (v16
    && ((v17 = gms::_Material<ggl::Texture2D>::zoomable(v16, 4u), v15 < 1.0) ? (v18 = v17) : (v18 = 0),
        (v18 & 1) != 0)
    || (v19 = *(_QWORD **)(v14 + 32)) != 0
    && ((v20 = gms::_Material<ggl::Texture2D>::zoomable(v19, 4u), v15 > 0.0) ? (v21 = v20) : (v21 = 0),
        v21 == 1))
  {
    v22 = (int)**(float **)(a1 + 16);
  }
  else
  {
    v22 = 0;
  }
  v23 = **(_QWORD **)(a1 + 24);
  v36 = 4;
  v24 = md::MaterialTextureManager::textureFromMaterial(&v40, v23, (uint64_t)&v37, &v39, &v36, v22);
  v25 = v40;
  if (!v40.n128_u64[0]
    || (md::SharedResource::addFrameRef((md::SharedResource *)v40.n128_u64[0], **(_QWORD **)(a1 + 32)),
        !*(_QWORD *)(v25.n128_u64[0] + 32)))
  {
    v26 = *(std::__shared_weak_count **)(**(_QWORD **)(a1 + 24) + 320);
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v24);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  mre::GGLResourceStore::updateUnmanagedTexture(**(_QWORD **)(a1 + 40), *a3, v25.n128_i64[0]);
  if (v25.n128_u64[1])
  {
    v30 = (unint64_t *)(v25.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v25.n128_u64[1] + 16))(v25.n128_u64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v25.n128_u64[1]);
    }
  }
  v32 = v38;
  if (v38)
  {
    v33 = (unint64_t *)&v38->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_19F86FF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (a11)
  {
    v15 = (unint64_t *)&a11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_2,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_2>,void ()(md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_2,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_2>,void ()(md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427BFA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_2,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_2>,void ()(md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BFA0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_2,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_2>,void ()(md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  _QWORD v27[2];
  int v28;
  _QWORD *v29;
  unint64_t v30[2];
  int v31;
  unint64_t *v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = **(_QWORD **)(a1 + 8);
  v30[0] = *(_QWORD *)(a3 + 16);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v4 + 104));
  v5 = *(_QWORD *)(v4 + 504);
  if (LODWORD(v30[0]) < (unint64_t)((*(_QWORD *)(v4 + 512) - v5) >> 3)
    && ((v6 = *(_QWORD *)(v5 + 8 * LODWORD(v30[0]))) != 0 ? (v7 = HIDWORD(v30[0]) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    v9 = (uint64_t *)(*(_QWORD *)(v4 + 528) + 40 * v6);
    v8 = *(uint64_t **)(v4 + 536);
  }
  else
  {
    v8 = *(uint64_t **)(v4 + 536);
    v9 = v8;
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v4 + 104));
  v10 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v4 + 440), v30[0], v30);
  ++v10[3];
  if (v9 == v8 || v9 == 0)
    v12 = 0;
  else
    v12 = *v9;
  v13 = **(_QWORD **)(a1 + 16);
  v15 = *(_QWORD *)(v13 + 312);
  v14 = *(std::__shared_weak_count **)(v13 + 320);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15 != v12)
  {
    v20 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v21 = HIDWORD(*v20);
    v22 = *v20 << 32;
    v27[0] = &off_1E427E2C8;
    v27[1] = v22;
    v28 = v21;
    v29 = v27;
    v30[0] = (unint64_t)&off_1E427E2C8;
    v32 = v30;
    v30[1] = v22;
    v31 = v21;
    v33 = 0;
    ecs2::Runtime::queueCommand(v23, (uint64_t)v30);
    if (v33 != -1)
      ((void (*)(char *, unint64_t *))off_1E42FB340[v33])(&v26, v30);
    v33 = -1;
    v24 = v29;
    if (v29 == v27)
    {
      v25 = 4;
      v24 = v27;
    }
    else
    {
      if (!v29)
        return;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanEnableTexture>(gdc::Entity,md::ls::CanEnableTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanEnableTexture>(gdc::Entity,md::ls::CanEnableTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E2C8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanEnableTexture>(gdc::Entity,md::ls::CanEnableTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E2C8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanEnableTexture>(gdc::Entity,md::ls::CanEnableTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *CanEnable;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  CanEnable = (uint64_t *)gdc::Registry::storage<md::ls::CanEnableTexture>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(CanEnable + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)CanEnable[11];
    v9 = CanEnable[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)CanEnable[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      CanEnable[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      CanEnable[11] = v11;
      CanEnable[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    CanEnable[11] = v11;
    v6 = CanEnable[31];
  }
  else
  {
    v6 = CanEnable[31];
    if (CanEnable[10] + (((uint64_t)v4 - CanEnable[7]) >> 3) != CanEnable[11])
    {
      v7 = (_QWORD *)CanEnable[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)CanEnable[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_1,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_1,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427BF58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_1,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BF58;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_1,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];
  int v29;
  _QWORD *v30;
  _QWORD v31[2];
  int v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = **(_QWORD **)(a1 + 8);
  v31[0] = v4;
  v6 = *(_QWORD *)(v5 + 504);
  if (v4 < (unint64_t)((*(_QWORD *)(v5 + 512) - v6) >> 3)
    && ((v7 = *(_QWORD *)(v6 + 8 * v4)) != 0 ? (v8 = HIDWORD(v4) == HIDWORD(v7)) : (v8 = 0), v8))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v5 + 528) + 40 * v7);
    v9 = *(uint64_t **)(v5 + 536);
  }
  else
  {
    v9 = *(uint64_t **)(v5 + 536);
    v10 = v9;
  }
  v11 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v5 + 440), v4, v31);
  ++v11[3];
  if (v10 == v9 || v10 == 0)
    v13 = 0;
  else
    v13 = *v10;
  v14 = **(_QWORD **)(a1 + 16);
  v16 = *(_QWORD *)(v14 + 312);
  v15 = *(std::__shared_weak_count **)(v14 + 320);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16 != v13)
  {
    v21 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v22 = HIDWORD(*v21);
    v23 = *v21 << 32;
    v28[0] = &off_1E427E2C8;
    v28[1] = v23;
    v29 = v22;
    v30 = v28;
    v31[0] = &off_1E427E2C8;
    v33 = v31;
    v31[1] = v23;
    v32 = v22;
    v34 = 0;
    ecs2::Runtime::queueCommand(v24, (uint64_t)v31);
    if (v34 != -1)
      ((void (*)(char *, _QWORD *))off_1E42FB340[v34])(&v27, v31);
    v34 = -1;
    v25 = v30;
    if (v30 == v28)
    {
      v26 = 4;
      v25 = v28;
    }
    else
    {
      if (!v30)
        return;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
}

void std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427BF10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427BF10;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_0,std::allocator<md::ita::ResolveMaterialAlbedoTexture::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>,ecs2::Query<md::ls::SharedMaterialAlbedoTexture&,md::ls::TextureHandleForType<DaVinci::TexTexture> &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  BOOL v12;
  int8x8_t *v13;
  _QWORD *v14;
  float v15;
  _QWORD *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  _QWORD *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  __n128 v41;

  v6 = **(_QWORD **)(a1 + 8);
  v7 = *a2;
  v40 = v7;
  v8 = *(_QWORD *)(v6 + 120);
  if (v7 >= (unint64_t)((*(_QWORD *)(v6 + 128) - v8) >> 3))
    goto LABEL_9;
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (!v9)
    goto LABEL_10;
  if (HIDWORD(v7) != HIDWORD(v9)
    || ((v10 = *(_QWORD *)(v6 + 144),
         v11 = (unint64_t *)(v10 + 8 * v9),
         v11 != *(unint64_t **)(v6 + 152))
      ? (v12 = v10 == 0)
      : (v12 = 1),
        v12))
  {
LABEL_9:
    v9 = 0;
  }
  else
  {
    v36 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v7, &v40);
    ++v36[3];
    v9 = *v11;
  }
LABEL_10:
  v13 = *(int8x8_t **)v6;
  v41 = (__n128)v9;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v38, v13, (uint64_t *)&v41, 0);
  v40 = a2[1];
  v14 = (_QWORD *)v38;
  v15 = **(float **)(v38 + 48);
  v16 = *(_QWORD **)(v38 + 16);
  if (v16
    && ((v17 = gms::_Material<ggl::Texture2D>::zoomable(v16, 1u), v15 < 1.0) ? (v18 = v17) : (v18 = 0),
        (v18 & 1) != 0)
    || (v19 = (_QWORD *)v14[4]) != 0
    && ((v20 = gms::_Material<ggl::Texture2D>::zoomable(v19, 1u), v15 > 0.0) ? (v21 = v20) : (v21 = 0),
        (v21 & 1) != 0))
  {
    (*(void (**)(__n128 *__return_ptr, _QWORD *, float))(*v14 + 888))(&v41, v14, **(float **)(a1 + 24));
    if (v41.n128_u8[0] && v41.n128_u8[1])
    {
      v22 = **(_QWORD **)(a1 + 16);
      v24 = *(_QWORD *)(v22 + 312);
      v23 = *(std::__shared_weak_count **)(v22 + 320);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v23 = 0;
      }
      goto LABEL_33;
    }
    v29 = *(float **)(a1 + 24);
    v30 = **(_QWORD **)(a1 + 16);
    v37 = 1;
    md::MaterialTextureManager::textureFromMaterial(&v41, v30, (uint64_t)&v38, &v40, &v37, (int)*v29);
  }
  else
  {
    v28 = **(_QWORD **)(a1 + 16);
    v37 = 1;
    md::MaterialTextureManager::textureFromMaterial(&v41, v28, (uint64_t)&v38, &v40, &v37, 0);
  }
  v23 = (std::__shared_weak_count *)v41.n128_u64[1];
  v24 = v41.n128_u64[0];
  if (v41.n128_u64[0])
  {
    md::SharedResource::addFrameRef((md::SharedResource *)v41.n128_u64[0], **(_QWORD **)(a1 + 32));
    v24 = *(_QWORD *)(v24 + 32);
  }
LABEL_33:
  mre::GGLResourceStore::updateUnmanagedTexture(**(_QWORD **)(a1 + 40), *a3, v24);
  if (v23)
  {
    v31 = (unint64_t *)&v23->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v33 = v39;
  if (v39)
  {
    v34 = (unint64_t *)&v39->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_19F8709D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PositionScaleInfoConstantDataHandle>(gdc::Entity,md::ls::PositionScaleInfoConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PositionScaleInfoConstantDataHandle>(gdc::Entity,md::ls::PositionScaleInfoConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E4281B98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PositionScaleInfoConstantDataHandle>(gdc::Entity,md::ls::PositionScaleInfoConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281B98;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PositionScaleInfoConstantDataHandle>(gdc::Entity,md::ls::PositionScaleInfoConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PositionScaleInfoConstantDataHandle>(a2);
  *(_QWORD *)&v25 = *(_QWORD *)(a1 + 8);
  BYTE8(v25) = *(_BYTE *)(a1 + 16);
  v26 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (_BYTE *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = v4[10];
      v15 = (uint64_t)&v12[-v14] >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_30;
      v17 = v11 - v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[16 * v15];
      *(_OWORD *)v20 = v25;
      v13 = v20 + 16;
      if (v12 != (_BYTE *)v14)
      {
        do
        {
          v21 = *((_QWORD *)v12 - 2);
          v12 -= 16;
          v22 = v12[8];
          *((_QWORD *)v20 - 2) = v21;
          v20 -= 16;
          v20[8] = v22;
        }
        while (v12 != (_BYTE *)v14);
        v12 = (_BYTE *)v4[10];
      }
      v4[10] = (uint64_t)v20;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_OWORD *)v12 = v25;
      v13 = v12 + 16;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 2 * ((_QWORD)v5 - v4[7]);
    *(_QWORD *)v7 = v25;
    *(_BYTE *)(v7 + 8) = BYTE8(v25);
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v23 = (_QWORD *)v4[22];
  if (v23)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v24 = v23[6];
      if (!v24)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v24 + 48))(v24, &v27, &v28);
      v23 = (_QWORD *)*v23;
      if (!v23)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<md::ita::ApplyColorCorrection::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::ApplyColorCorrection::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ApplyColorCorrection::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::ApplyColorCorrection::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427B580;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::ApplyColorCorrection::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::ApplyColorCorrection::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B580;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ApplyColorCorrection::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::ApplyColorCorrection::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int8x8_t *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  int16x4_t v21;
  int16x4_t v22;
  int8x16_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30[4];
  uint64_t v31;
  _BYTE v32[12];
  uint64_t v33;
  std::__shared_weak_count *v34;
  char v35;
  uint64_t v36[4];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = *a5;
  v7 = *(_QWORD ***)(a1 + 24);
  v8 = **(_QWORD **)(a1 + 8);
  *(_QWORD *)v32 = v6;
  v9 = *(_QWORD *)(v8 + 120);
  if (v6 >= (unint64_t)((*(_QWORD *)(v8 + 128) - v9) >> 3))
    goto LABEL_9;
  v10 = *(_QWORD *)(v9 + 8 * v6);
  if (v10)
  {
    if (HIDWORD(v6) == HIDWORD(v10))
    {
      v11 = *(_QWORD *)(v8 + 144);
      v12 = (uint64_t *)(v11 + 8 * v10);
      if (v12 != *(uint64_t **)(v8 + 152) && v11 != 0)
      {
        v27 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v8 + 56, v6, v32);
        ++v27[3];
        v10 = *v12;
        goto LABEL_10;
      }
    }
LABEL_9:
    v10 = 0;
  }
LABEL_10:
  v14 = *(int8x8_t **)v8;
  v36[0] = v10;
  v36[1] = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v33, v14, v36, 0);
  v15 = v33;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, float))(*(_QWORD *)v33 + 752))(v32, v33, **(float **)(a1 + 16));
  (*(void (**)(char *__return_ptr, uint64_t, float))(*(_QWORD *)v15 + 784))(v30, v15, **(float **)(a1 + 16));
  v16 = v32[0];
  v17 = v30[0];
  if (v32[0] | v30[0])
  {
    v29 = v31;
    v28 = *(_QWORD *)&v32[4];
    v18 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v19 = *v7;
    v20 = (char *)operator new(0x20uLL);
    v21 = (int16x4_t)vceqz_s32((int32x2_t)__PAIR64__(v16, v17));
    v22 = vuzp1_s16(v21, v21);
    v23.i64[0] = v29;
    v23.i64[1] = v28;
    *(_QWORD *)v20 = &off_1E4281838;
    *(int8x16_t *)(v20 + 8) = vbslq_s8((int8x16_t)vmovl_s16(vzip1_s16(v22, v22)), (int8x16_t)xmmword_19FFB3970, v23);
    *((_QWORD *)v20 + 3) = v18;
    v36[3] = (uint64_t)v20;
    v37 = 0;
    ecs2::Runtime::queueCommand(v19, (uint64_t)v36);
    if (v37 != -1)
      ((void (*)(char *, uint64_t *))off_1E42FB340[v37])(&v35, v36);
  }
  v24 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19F870F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialBrightnessAndSaturation>(gdc::Entity,md::ls::MaterialBrightnessAndSaturation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialBrightnessAndSaturation>(gdc::Entity,md::ls::MaterialBrightnessAndSaturation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E4281838;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialBrightnessAndSaturation>(gdc::Entity,md::ls::MaterialBrightnessAndSaturation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281838;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialBrightnessAndSaturation>(gdc::Entity,md::ls::MaterialBrightnessAndSaturation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  char v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MaterialBrightnessAndSaturation>(a2);
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v27 = v3;
  v9 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if ((v10 & 1) != 0)
  {
    v16 = (char *)v4[11];
    v15 = v4[12];
    if ((unint64_t)v16 >= v15)
    {
      v18 = (char *)v4[10];
      v19 = (v16 - v18) >> 4;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
        goto LABEL_30;
      v21 = v15 - (_QWORD)v18;
      if (v21 >> 3 > v20)
        v20 = v21 >> 3;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v22 = 0xFFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v23 = (char *)operator new(16 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[16 * v19];
      *(_DWORD *)v24 = v6;
      *((_DWORD *)v24 + 1) = v5;
      *((_DWORD *)v24 + 2) = v8;
      *((_DWORD *)v24 + 3) = v7;
      v17 = v24 + 16;
      if (v16 != v18)
      {
        do
        {
          *((_OWORD *)v24 - 1) = *((_OWORD *)v16 - 1);
          v24 -= 16;
          v16 -= 16;
        }
        while (v16 != v18);
        v16 = (char *)v4[10];
      }
      v4[10] = (uint64_t)v24;
      v4[11] = (uint64_t)v17;
      v4[12] = (uint64_t)&v23[16 * v22];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_DWORD *)v16 = v6;
      *((_DWORD *)v16 + 1) = v5;
      v17 = v16 + 16;
      *((_DWORD *)v16 + 2) = v8;
      *((_DWORD *)v16 + 3) = v7;
    }
    v4[11] = (uint64_t)v17;
    v12 = v4[31];
  }
  else
  {
    v11 = (_DWORD *)(v4[10] + 2 * ((_QWORD)v9 - v4[7]));
    *v11 = v6;
    v11[1] = v5;
    v11[2] = v8;
    v11[3] = v7;
    v12 = v4[31];
    if (v11 != (_DWORD *)v4[11])
    {
      v13 = (_QWORD *)v4[16];
      if (v13)
      {
        while (1)
        {
          v29 = &v27;
          v30 = 1;
          v28 = v12;
          v14 = v13[6];
          if (!v14)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v14 + 48))(v14, &v28, &v29);
          v13 = (_QWORD *)*v13;
          if (!v13)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v25 = (_QWORD *)v4[22];
  if (v25)
  {
    while (1)
    {
      v29 = &v27;
      v30 = 1;
      v28 = v12;
      v26 = v25[6];
      if (!v26)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v26 + 48))(v26, &v28, &v29);
      v25 = (_QWORD *)*v25;
      if (!v25)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<md::ita::CheckIfOpaque::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>)::$_0,std::allocator<md::ita::CheckIfOpaque::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CheckIfOpaque::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>)::$_0,std::allocator<md::ita::CheckIfOpaque::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427B1D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CheckIfOpaque::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>)::$_0,std::allocator<md::ita::CheckIfOpaque::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B1D8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::CheckIfOpaque::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>)::$_0,std::allocator<md::ita::CheckIfOpaque::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  uint64_t (***v24)();
  BOOL v25;
  int8x8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t (***v31)();
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t (***v36)();
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  char v44;
  uint64_t (**v45)();
  unint64_t v46;
  int v47;
  uint64_t (***v48)();
  uint64_t (**v49)();
  uint64_t v50;
  int v51;
  uint64_t (***v52)();
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v8 = *a5;
  v9 = *(_QWORD ***)(a1 + 32);
  v10 = **(_QWORD ***)(a1 + 8);
  v49 = (uint64_t (**)())v8;
  v11 = v10[126];
  if (v8 < (unint64_t)((v10[127] - v11) >> 3)
    && ((v12 = *(_QWORD *)(v11 + 8 * v8)) != 0 ? (v13 = HIDWORD(v8) == HIDWORD(v12)) : (v13 = 0), v13))
  {
    v15 = v10[129] + 20 * v12;
    v14 = v10[130];
  }
  else
  {
    v14 = v10[130];
    v15 = v14;
  }
  if (v15 == v14)
    v16 = 0;
  else
    v16 = v15;
  if (v16)
  {
    v17 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v10 + 118), v8, &v49);
    ++v17[3];
  }
  v18 = *(_DWORD *)(v16 + 16);
  v19 = **(_QWORD **)(a1 + 8);
  v20 = *a6;
  v45 = (uint64_t (**)())v20;
  v21 = *(_QWORD *)(v19 + 120);
  if (v20 >= (unint64_t)((*(_QWORD *)(v19 + 128) - v21) >> 3))
    goto LABEL_20;
  v22 = *(uint64_t (***)())(v21 + 8 * v20);
  if (!v22)
    goto LABEL_21;
  if (HIDWORD(v20) != HIDWORD(v22)
    || ((v23 = *(_QWORD *)(v19 + 144),
         v24 = (uint64_t (***)())(v23 + 8 * v22),
         v24 != *(uint64_t (****)())(v19 + 152))
      ? (v25 = v23 == 0)
      : (v25 = 1),
        v25))
  {
LABEL_20:
    v22 = 0;
  }
  else
  {
    v41 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v19 + 56, v20, &v45);
    ++v41[3];
    v22 = *v24;
  }
LABEL_21:
  v26 = *(int8x8_t **)v19;
  v49 = v22;
  v50 = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v42, v26, (uint64_t *)&v49, 0);
  LOBYTE(v49) = 1;
  md::MaterialTextureManager::hasAlpha((uint64_t)&v42, &v49, (int)**(float **)(a1 + 24));
  v27 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v28 = *v27;
  v29 = *v9;
  if (v30 != 1)
  {
    v45 = &off_1E427DCE0;
    v46 = v18 | (unint64_t)(v28 << 32);
    v47 = HIDWORD(v28);
    v48 = &v45;
    v49 = &off_1E427DCE0;
    v52 = &v49;
    v51 = HIDWORD(v28);
    v50 = v46;
    v53 = 0;
    ecs2::Runtime::queueCommand(v29, (uint64_t)&v49);
    if (v53 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v53])(&v44, &v49);
    v53 = -1;
    v31 = v48;
    if (v48 == &v45)
    {
      v32 = 4;
      v31 = &v45;
    }
    else
    {
      if (!v48)
        goto LABEL_31;
      v32 = 5;
    }
    (*v31)[v32]();
LABEL_31:
    v33 = *v9;
    v34 = HIDWORD(*v27);
    v35 = *v27 << 32;
    v45 = &off_1E4280128;
    v46 = v35;
    v47 = v34;
    v48 = &v45;
    v49 = &off_1E4280128;
    v52 = &v49;
    v50 = v35;
    v51 = v34;
    v53 = 0;
    ecs2::Runtime::queueCommand(v33, (uint64_t)&v49);
    if (v53 == -1)
      goto LABEL_33;
    goto LABEL_32;
  }
  v45 = &off_1E4281E68;
  v46 = v28 << 32;
  v47 = HIDWORD(v28);
  v48 = &v45;
  v49 = &off_1E4281E68;
  v52 = &v49;
  v50 = v28 << 32;
  v51 = HIDWORD(v28);
  v53 = 0;
  ecs2::Runtime::queueCommand(v29, (uint64_t)&v49);
  if (v53 == -1)
    goto LABEL_33;
LABEL_32:
  ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v53])(&v44, &v49);
LABEL_33:
  v53 = -1;
  v36 = v48;
  if (v48 == &v45)
  {
    v37 = 4;
    v36 = &v45;
  }
  else
  {
    if (!v48)
      goto LABEL_38;
    v37 = 5;
  }
  (*v36)[v37]();
LABEL_38:
  v38 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_19F871670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CheckIfRequiresDepthPeel>(gdc::Entity,md::ls::CheckIfRequiresDepthPeel &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CheckIfRequiresDepthPeel>(gdc::Entity,md::ls::CheckIfRequiresDepthPeel &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280128;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CheckIfRequiresDepthPeel>(gdc::Entity,md::ls::CheckIfRequiresDepthPeel &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280128;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CheckIfRequiresDepthPeel>(gdc::Entity,md::ls::CheckIfRequiresDepthPeel &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::CheckIfRequiresDepthPeel>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsTransparent>(gdc::Entity,md::ls::IsTransparent &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsTransparent>(gdc::Entity,md::ls::IsTransparent &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DCE0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsTransparent>(gdc::Entity,md::ls::IsTransparent &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DCE0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsTransparent>(gdc::Entity,md::ls::IsTransparent &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::IsTransparent>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsOpaque>(gdc::Entity,md::ls::IsOpaque &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsOpaque>(gdc::Entity,md::ls::IsOpaque &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281E68;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsOpaque>(gdc::Entity,md::ls::IsOpaque &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281E68;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsOpaque>(gdc::Entity,md::ls::IsOpaque &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::IsOpaque>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<md::ita::CollectParameters::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::CollectParameters::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CollectParameters::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::CollectParameters::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427B3D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::CollectParameters::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::CollectParameters::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B3D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::CollectParameters::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::CollectParameters::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  BOOL v12;
  int8x8_t *v13;
  uint64_t v14;
  char v15;
  int v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _BYTE v26[20];
  unsigned __int8 v27;
  char v28;
  _BYTE v29[11];
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  __int128 v35;
  char *v36;
  int v37;
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  v5 = *a4;
  v6 = *(_QWORD ***)(a1 + 24);
  v7 = **(_QWORD **)(a1 + 8);
  *(_QWORD *)v26 = v5;
  v8 = *(_QWORD *)(v7 + 120);
  if (v5 >= (unint64_t)((*(_QWORD *)(v7 + 128) - v8) >> 3))
    goto LABEL_9;
  v9 = *(_QWORD *)(v8 + 8 * v5);
  if (!v9)
    goto LABEL_10;
  if (HIDWORD(v5) != HIDWORD(v9)
    || ((v10 = *(_QWORD *)(v7 + 144),
         v11 = (unint64_t *)(v10 + 8 * v9),
         v11 != *(unint64_t **)(v7 + 152))
      ? (v12 = v10 == 0)
      : (v12 = 1),
        v12))
  {
LABEL_9:
    v9 = 0;
  }
  else
  {
    v19 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v7 + 56, v5, v26);
    ++v19[3];
    v9 = *v11;
  }
LABEL_10:
  v13 = *(int8x8_t **)v7;
  v35 = v9;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v30, v13, (uint64_t *)&v35, 0);
  v14 = v30;
  if (!v30)
    goto LABEL_33;
  (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, float))(*(_QWORD *)v30 + 1040))(&v27, v30, **(float **)(a1 + 16));
  if (v27)
  {
    v26[0] = 0;
    v15 = v28;
    v34[0] = *(_QWORD *)v29;
    *(_DWORD *)((char *)v34 + 7) = *(_DWORD *)&v29[7];
    v16 = 1;
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, float))(*(_QWORD *)v14 + 816))(v26, v14, **(float **)(a1 + 16));
  if (!(v27 | v26[0]))
    goto LABEL_33;
  if (!v27)
  {
    v16 = 0;
    v15 = 0;
    if (!v26[0])
      goto LABEL_13;
LABEL_20:
    v18 = 0;
    v17 = v26[4];
    v33[0] = *(_QWORD *)&v26[5];
    *(_QWORD *)((char *)v33 + 7) = *(_QWORD *)&v26[12];
    if (v16)
      goto LABEL_14;
    goto LABEL_21;
  }
  v15 = v28;
  v34[0] = *(_QWORD *)v29;
  *(_DWORD *)((char *)v34 + 7) = *(_DWORD *)&v29[7];
  v16 = 1;
  if (v26[0])
    goto LABEL_20;
LABEL_13:
  v17 = 0;
  v18 = 1;
  if (v16)
  {
LABEL_14:
    v32[0] = v34[0];
    *(_DWORD *)((char *)v32 + 7) = *(_DWORD *)((char *)v34 + 7);
    goto LABEL_22;
  }
LABEL_21:
  v15 = 0;
LABEL_22:
  v20 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v21 = *v6;
  if ((v18 & 1) == 0)
  {
    *(_QWORD *)&v35 = v33[0];
    *(_QWORD *)((char *)&v35 + 7) = *(_QWORD *)((char *)v33 + 7);
    if (v16)
      goto LABEL_24;
LABEL_26:
    v15 = 0;
    goto LABEL_27;
  }
  v17 = 0;
  if (!v16)
    goto LABEL_26;
LABEL_24:
  v38[0] = v32[0];
  *(_DWORD *)((char *)v38 + 7) = *(_DWORD *)((char *)v32 + 7);
LABEL_27:
  v22 = (char *)operator new(0x38uLL);
  *(_QWORD *)v22 = &off_1E42801B8;
  v22[8] = 0;
  v22[24] = 0;
  if ((v18 & 1) == 0)
  {
    v22[8] = v17;
    *(_QWORD *)(v22 + 9) = v35;
    *((_QWORD *)v22 + 2) = *(_QWORD *)((char *)&v35 + 7);
    v22[24] = 1;
  }
  v22[28] = 0;
  v22[40] = 0;
  if (v16)
  {
    v22[28] = v15;
    *(_QWORD *)(v22 + 29) = v38[0];
    *((_DWORD *)v22 + 9) = *(_DWORD *)((char *)v38 + 7);
    v22[40] = 1;
  }
  *(_QWORD *)(v22 + 44) = v20;
  v36 = v22;
  v37 = 0;
  ecs2::Runtime::queueCommand(v21, (uint64_t)&v35);
  if (v37 != -1)
    ((void (*)(_QWORD *, __int128 *))off_1E42FB340[v37])(v38, &v35);
LABEL_33:
  v23 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19F8720E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientMaskColorFactors>(gdc::Entity,md::ls::GradientMaskColorFactors &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientMaskColorFactors>(gdc::Entity,md::ls::GradientMaskColorFactors &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x38uLL);
  *(_QWORD *)result = &off_1E42801B8;
  result[8] = 0;
  result[24] = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
    result[24] = 1;
  }
  result[28] = 0;
  result[40] = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    *(_QWORD *)(result + 28) = *(_QWORD *)(a1 + 28);
    *((_DWORD *)result + 9) = *(_DWORD *)(a1 + 36);
    result[40] = 1;
  }
  *(_QWORD *)(result + 44) = *(_QWORD *)(a1 + 44);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientMaskColorFactors>(gdc::Entity,md::ls::GradientMaskColorFactors &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42801B8;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(result + 24))
  {
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
    *(_BYTE *)(a2 + 24) = 1;
  }
  *(_BYTE *)(a2 + 28) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(result + 40))
  {
    v2 = *(_QWORD *)(result + 28);
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(result + 36);
    *(_QWORD *)(a2 + 28) = v2;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_QWORD *)(a2 + 44) = *(_QWORD *)(result + 44);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientMaskColorFactors>(gdc::Entity,md::ls::GradientMaskColorFactors &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a1 + 44);
  v9 = gdc::Registry::storage<md::ls::GradientMaskColorFactors>(a2);
  v10 = (_QWORD *)v9;
  v11 = *(unsigned __int8 *)(a1 + 24);
  v12 = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    v13 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    v14 = 1;
    v5 = *(_DWORD *)(a1 + 16);
    v4 = *(_DWORD *)(a1 + 20);
    v15 = *(unsigned __int8 *)(a1 + 40);
    if (*(_BYTE *)(a1 + 40))
    {
LABEL_3:
      v12 = *(_DWORD *)(a1 + 28);
      v3 = *(_DWORD *)(a1 + 32);
      v16 = 1;
      v2 = *(_DWORD *)(a1 + 36);
      goto LABEL_6;
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v15 = *(unsigned __int8 *)(a1 + 40);
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_3;
  }
  v16 = 0;
LABEL_6:
  v48 = v8;
  v17 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v9 + 32), (uint64_t)&v48);
  if ((v18 & 1) != 0)
  {
    v23 = (_BYTE *)v10[11];
    v22 = v10[12];
    if ((unint64_t)v23 >= v22)
    {
      v25 = (_BYTE *)v10[10];
      v26 = 0x8E38E38E38E38E39 * ((v23 - v25) >> 2) + 1;
      if (v26 > 0x71C71C71C71C71CLL)
        goto LABEL_60;
      v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v22 - (_QWORD)v25) >> 2);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x38E38E38E38E38ELL)
        v28 = 0x71C71C71C71C71CLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 > 0x71C71C71C71C71CLL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v29 = (char *)operator new(36 * v28);
      }
      else
      {
        v29 = 0;
      }
      v39 = &v29[4 * ((v23 - v25) >> 2)];
      *v39 = 0;
      v39[16] = 0;
      if (v11)
      {
        *(_DWORD *)v39 = v13;
        *((_DWORD *)v39 + 1) = v6;
        *((_DWORD *)v39 + 2) = v5;
        *((_DWORD *)v39 + 3) = v4;
        v39[16] = 1;
      }
      v40 = &v29[4 * ((v23 - v25) >> 2)];
      v40[20] = 0;
      v41 = v40 + 20;
      v41[12] = 0;
      if (v15)
      {
        *(_DWORD *)v41 = v12;
        *((_DWORD *)v41 + 1) = v3;
        *((_DWORD *)v41 + 2) = v2;
        v41[12] = 1;
      }
      v24 = v39 + 36;
      if (v23 != v25)
      {
        v42 = 0;
        do
        {
          v43 = &v39[v42];
          v39[v42 - 36] = 0;
          v44 = &v23[v42];
          v39[v42 - 20] = 0;
          if (v23[v42 - 20])
          {
            *(_OWORD *)&v39[v42 - 36] = *(_OWORD *)(v44 - 36);
            *(v43 - 20) = 1;
          }
          *(v43 - 16) = 0;
          *(v43 - 4) = 0;
          if (*(v44 - 4))
          {
            v45 = *(_QWORD *)&v23[v42 - 16];
            *((_DWORD *)v43 - 2) = *(_DWORD *)&v23[v42 - 8];
            *((_QWORD *)v43 - 2) = v45;
            *(v43 - 4) = 1;
          }
          v42 -= 36;
        }
        while (&v23[v42] != v25);
        v39 += v42;
        v23 = (_BYTE *)v10[10];
      }
      v10[10] = v39;
      v10[11] = v24;
      v10[12] = &v29[36 * v28];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v23 = 0;
      v23[16] = 0;
      if (v11)
      {
        *(_DWORD *)v23 = v13;
        *((_DWORD *)v23 + 1) = v6;
        *((_DWORD *)v23 + 2) = v5;
        *((_DWORD *)v23 + 3) = v4;
        v23[16] = 1;
      }
      v23[20] = 0;
      v23[32] = 0;
      if (v15)
      {
        *((_DWORD *)v23 + 5) = v12;
        *((_DWORD *)v23 + 6) = v3;
        *((_DWORD *)v23 + 7) = v2;
        v23[32] = 1;
      }
      v24 = v23 + 36;
    }
    v10[11] = v24;
    v36 = v10[31];
  }
  else
  {
    v19 = v10[10];
    v20 = ((uint64_t)v17 - v10[7]) >> 3;
    v21 = v19 + 36 * v20;
    if (*(unsigned __int8 *)(v21 + 16) == v14)
    {
      if (*(_BYTE *)(v21 + 16))
      {
        *(_DWORD *)v21 = v13;
        *(_DWORD *)(v21 + 4) = v6;
        *(_DWORD *)(v21 + 8) = v5;
        *(_DWORD *)(v21 + 12) = v4;
      }
    }
    else if (*(_BYTE *)(v21 + 16))
    {
      *(_BYTE *)(v21 + 16) = 0;
    }
    else
    {
      *(_DWORD *)v21 = v13;
      *(_DWORD *)(v21 + 4) = v6;
      *(_DWORD *)(v21 + 8) = v5;
      *(_DWORD *)(v21 + 12) = v4;
      *(_BYTE *)(v21 + 16) = 1;
    }
    v30 = v19 + 36 * v20;
    v33 = *(unsigned __int8 *)(v30 + 32);
    v31 = (_BYTE *)(v30 + 32);
    v32 = v33;
    v34 = v31 - 12;
    if (v33 == v16)
    {
      if (v32)
      {
        *v34 = v12;
        v35 = v19 + 36 * v20;
        *(_DWORD *)(v35 + 24) = v3;
        *(_DWORD *)(v35 + 28) = v2;
      }
    }
    else if (v32)
    {
      *v31 = 0;
    }
    else
    {
      *v34 = v12;
      *((_DWORD *)v31 - 2) = v3;
      *((_DWORD *)v31 - 1) = v2;
      *v31 = 1;
    }
    v36 = v10[31];
    if (v21 != v10[11])
    {
      v37 = (_QWORD *)v10[16];
      if (v37)
      {
        while (1)
        {
          v50 = &v48;
          v51 = 1;
          v49 = v36;
          v38 = v37[6];
          if (!v38)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v38 + 48))(v38, &v49, &v50);
          v37 = (_QWORD *)*v37;
          if (!v37)
            return;
        }
LABEL_59:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_60:
        abort();
      }
      return;
    }
  }
  v46 = (_QWORD *)v10[22];
  if (v46)
  {
    while (1)
    {
      v50 = &v48;
      v51 = 1;
      v49 = v36;
      v47 = v46[6];
      if (!v47)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v47 + 48))(v47, &v49, &v50);
      v46 = (_QWORD *)*v46;
      if (!v46)
        return;
    }
    goto LABEL_59;
  }
}

void std::__function::__func<md::ita::CheckIfNeedsDepthPeel::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>)::$_0,std::allocator<md::ita::CheckIfNeedsDepthPeel::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::CheckIfNeedsDepthPeel::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>)::$_0,std::allocator<md::ita::CheckIfNeedsDepthPeel::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B778;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::CheckIfNeedsDepthPeel::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>)::$_0,std::allocator<md::ita::CheckIfNeedsDepthPeel::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B778;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ita::CheckIfNeedsDepthPeel::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>)::$_0,std::allocator<md::ita::CheckIfNeedsDepthPeel::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  int v12;
  _QWORD *v13;
  _QWORD v14[2];
  int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a4 == 3)
  {
    v4 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v5 = HIDWORD(*v4);
    v6 = *v4 << 32;
    v11[0] = &off_1E427EAA8;
    v11[1] = v6;
    v12 = v5;
    v13 = v11;
    v14[0] = &off_1E427EAA8;
    v16 = v14;
    v14[1] = v6;
    v15 = v5;
    v17 = 0;
    ecs2::Runtime::queueCommand(v7, (uint64_t)v14);
    if (v17 != -1)
      ((void (*)(char *, _QWORD *))off_1E42FB340[v17])(&v10, v14);
    v17 = -1;
    v8 = v13;
    if (v13 == v11)
    {
      v9 = 4;
      v8 = v11;
    }
    else
    {
      if (!v13)
        return;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresDepthPeel>(gdc::Entity,md::ls::RequiresDepthPeel &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresDepthPeel>(gdc::Entity,md::ls::RequiresDepthPeel &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427EAA8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresDepthPeel>(gdc::Entity,md::ls::RequiresDepthPeel &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427EAA8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresDepthPeel>(gdc::Entity,md::ls::RequiresDepthPeel &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresDepthPeel>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void md::RasterTileData::~RasterTileData(md::RasterTileData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428FC50;
  *((_QWORD *)this + 79) = &unk_1E428FC90;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428FC50;
  *((_QWORD *)this + 79) = &unk_1E428FC90;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::PolygonAnimatableStroke::MeshPipelineState::MeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::PolygonAnimatableStrokeShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D00 = 1;
          }
          ggl::PolygonAnimatableStroke::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57F8C8 = &ggl::PolygonAnimatableStroke::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57F8D0 = 0;
          if ((v95 & 1) == 0
          {
            ggl::PolygonAnimatableStroke::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57F900 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57F908 = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
            unk_1EE57F910 = ggl::AnimatableTexture::Variant::reflection(void)::reflection;
            qword_1EE57F918 = (uint64_t)ggl::PolygonAnimatableStroke::AnimatablePolygon::reflection(void)::reflection;
          }
          qword_1EE57F8D8 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE57F8E0 = xmmword_19FFB38C0;
        }
      }
      ggl::PolygonAnimatableStroke::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonAnimatableStroke::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonAnimatableStrokeShader::typedReflection(v90);
      qword_1ECE31BD0 = (uint64_t)&ggl::PolygonAnimatableStrokeShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57FA20 = 0;
        qword_1EE57FA28 = (uint64_t)"";
        dword_1EE57FA30 = 0;
        qword_1EE57FA38 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57FA40 = 3;
      }
      qword_1ECE31BD8 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31BE0 = 1;
      qword_1ECE31BE8 = 0;
      unk_1ECE31BF0 = 3;
      qword_1ECE31BF8 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31C00 = 0;
      if ((v93 & 1) == 0
      {
        ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57F930 = 0;
        qword_1EE57F938 = (uint64_t)"view";
        dword_1EE57F940 = 3;
        qword_1EE57F948 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57F950 = xmmword_19FFB35A0;
        qword_1EE57F960 = 1;
        unk_1EE57F968 = "transform";
        dword_1EE57F970 = 3;
        qword_1EE57F978 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57F980 = xmmword_19FFB3660;
        qword_1EE57F990 = 2;
        unk_1EE57F998 = "polygon";
        dword_1EE57F9A0 = 3;
        qword_1EE57F9A8 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantPolygonBinding(void)::reflection;
        *(_OWORD *)algn_1EE57F9B0 = xmmword_19FFB4C20;
        qword_1EE57F9C0 = 3;
        unk_1EE57F9C8 = "variant";
        dword_1EE57F9D0 = 3;
        qword_1EE57F9D8 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantVariantBinding(void)::reflection;
        unk_1EE57F9E0 = xmmword_19FFB3050;
        qword_1EE57F9F0 = 4;
        unk_1EE57F9F8 = "animatablePolygon";
        dword_1EE57FA00 = 3;
        qword_1EE57FA08 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantAnimatablePolygonBinding(void)::reflection;
        unk_1EE57FA10 = 1;
      }
      qword_1ECE31C08 = (uint64_t)&ggl::PolygonAnimatableStroke::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE31C10 = 5;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::PolygonAnimatableStroke::MeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BB1D0;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::PolygonAnimatableStroke::MeshPipelineSetup::~MeshPipelineSetup(ggl::PolygonAnimatableStroke::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonAnimatableStroke::MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonAnimatableStroke::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::PolygonAnimatableStroke::MeshPipelineSetup::textureIsEnabled(ggl::PolygonAnimatableStroke::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void md::MeshRenderableLogic::~MeshRenderableLogic(int8x8_t **this)
{
  md::MeshRenderableLogic::~MeshRenderableLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  int8x8_t *v2;
  int8x8_t *v3;
  int8x8_t *v4;
  int8x8_t *v5;
  int8x8_t *v6;
  int8x8_t *v7;
  int8x8_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int8x8_t *v18;
  void *v19;
  int8x8_t *v20;
  void *v21;

  *this = (int8x8_t *)&off_1E4297820;
  md::RegistryManager::removeCollectorSubscription(this[17], (uint64_t)this, 2u);
  md::RegistryManager::removeCollectorSubscription(this[17], (uint64_t)this, 0);
  md::RegistryManager::removeCollectorSubscription(this[17], (uint64_t)this, 1u);
  md::RegistryManager::removeCollectorSubscription(this[17], (uint64_t)this, 3u);
  md::RegistryManager::removeCollectorSubscription(this[17], (uint64_t)this, 4u);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable((uint64_t)(this + 53));
  v2 = this[49];
  if (v2)
  {
    do
    {
      v18 = (int8x8_t *)*v2;
      v19 = (void *)v2[3];
      if (v19)
      {
        v2[4] = (int8x8_t)v19;
        operator delete(v19);
      }
      operator delete(v2);
      v2 = v18;
    }
    while (v18);
  }
  v3 = this[47];
  this[47] = 0;
  if (v3)
    operator delete(v3);
  v4 = this[44];
  if (v4)
  {
    do
    {
      v5 = (int8x8_t *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = this[42];
  this[42] = 0;
  if (v6)
    operator delete(v6);
  v7 = this[39];
  if (v7)
  {
    do
    {
      v20 = (int8x8_t *)*v7;
      v21 = (void *)v7[3];
      if (v21)
      {
        v7[4] = (int8x8_t)v21;
        operator delete(v21);
      }
      operator delete(v7);
      v7 = v20;
    }
    while (v20);
  }
  v8 = this[37];
  this[37] = 0;
  if (v8)
    operator delete(v8);
  v9 = (std::__shared_weak_count *)this[36];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  geo::Pool<md::TexturedRenderable>::disposeElements((uint64_t)(this + 28));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[29]);
  geo::Pool<md::MaterialRenderable>::disposeElements((uint64_t)(this + 22));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[23]);
  v12 = (std::__shared_weak_count *)this[21];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)this[18];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *this = (int8x8_t *)off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[13]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[10]);
}

void md::MeshRenderableLogic::prune(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  void *v6;

  if (*(_QWORD *)(a1 + 320))
  {
    v2 = *(_QWORD **)(a1 + 312);
    if (v2)
    {
      do
      {
        v5 = (_QWORD *)*v2;
        v6 = (void *)v2[3];
        if (v6)
        {
          v2[4] = v6;
          operator delete(v6);
        }
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 312) = 0;
    v3 = *(_QWORD *)(a1 + 304);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 320) = 0;
  }
  *(_BYTE *)(a1 + 416) = 1;
}

uint64_t md::MeshRenderableLogic::didBecomeInactive(md::MeshRenderableLogic *this)
{
  return (*(uint64_t (**)(md::MeshRenderableLogic *))(*(_QWORD *)this + 16))(this);
}

void md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *__p;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  char v19;

  v4 = (_QWORD *)operator new();
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&__p, a1);
  v5 = operator new();
  v6 = __p;
  v7 = v15;
  __p = 0;
  v15 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v16;
  v8 = v17;
  *(_QWORD *)(v5 + 16) = v16;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v18;
  if (v8)
  {
    v10 = v9[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    v9 = 0;
    v6[v10] = v5 + 16;
    v16 = 0;
    v17 = 0;
  }
  *(_BYTE *)(v5 + 40) = v19;
  v4[2] = "md::MeshRenderableContext]";
  v4[3] = 25;
  v4[4] = v5;
  *v4 = &off_1E42B1158;
  v4[1] = 0xF014CCE28176CA44;
  *a2 = v4;
  if (v9)
  {
    do
    {
      v12 = (_QWORD *)*v9;
      v13 = (void *)v9[3];
      if (v13)
      {
        v9[4] = v13;
        operator delete(v13);
      }
      operator delete(v9);
      v9 = v12;
    }
    while (v12);
  }
  v11 = __p;
  __p = 0;
  if (v11)
    operator delete(v11);
}

void sub_19F873654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[10];

  if (*(_QWORD *)(a3 + 8) == 0xF014CCE28176CA44)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[10];

  if (*(_QWORD *)(a3 + 8) == 0xF014CCE28176CA44)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[10];

  if (*(_QWORD *)(a3 + 8) == 0xF014CCE28176CA44)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[10];

  if (*(_QWORD *)(a3 + 8) == 0xF014CCE28176CA44)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[10];

  if (*(_QWORD *)(a3 + 8) == 0xF014CCE28176CA44 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::MeshRenderableLogic::runBeforeLayoutAtVariableRate(uint64_t a1, const md::LayoutContext *a2, uint64_t **a3, uint64_t a4)
{
  const md::LayoutContext *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int8x8_t **v13;
  uint64_t v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  NSObject *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (***v47)(_QWORD);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int16 *v58;
  unsigned __int16 *i;
  unsigned __int16 v60;
  NSObject *v61;
  NSObject *v62;
  os_signpost_id_t v63;
  uint64_t v64;
  uint64_t (***v65)();
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *j;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  NSObject *v97;
  NSObject *v98;
  os_signpost_id_t v99;
  NSObject *v100;
  NSObject *v101;
  os_signpost_id_t v102;
  NSObject *v103;
  NSObject *v104;
  os_signpost_id_t v105;
  _QWORD *result;
  uint64_t v107;
  const md::LayoutContext *v108;
  uint64_t v109;
  int8x8_t **v110;
  uint64_t *v111;
  _QWORD v112[3];
  _QWORD *v113;
  _QWORD v114[3];
  _QWORD *v115;
  _QWORD v116[3];
  _QWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t (**v123)();
  uint64_t *v124;
  uint64_t v125;
  uint64_t (***v126)();
  uint64_t *v127;
  _QWORD v128[3];
  _QWORD *v129;
  uint64_t *v130;
  _QWORD v131[3];
  _QWORD *v132;
  uint64_t buf;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  _BYTE v137[24];
  _BYTE *v138;
  uint64_t v139;

  v6 = a2;
  v139 = *MEMORY[0x1E0C80C00];
  v114[0] = &off_1E42D0040;
  v114[1] = a2;
  v115 = v114;
  v112[0] = &off_1E42D0088;
  v112[1] = a2;
  v113 = v112;
  v117 = v116;
  v116[0] = &off_1E42D0088;
  v116[1] = a2;
  _ZNSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__0NS_9allocatorISR_EEFvvEEclEv((uint64_t)v114);
  v8 = v113;
  if (v113 == v112)
  {
    v9 = 4;
    v8 = v112;
  }
  else
  {
    if (!v113)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v115;
  if (v115 == v114)
  {
    v11 = 4;
    v10 = v114;
  }
  else
  {
    if (!v115)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = *(_QWORD **)(a1 + 136);
  v13 = (int8x8_t **)v12[51];
  v110 = (int8x8_t **)v12[52];
  if (v13 != v110)
  {
    v108 = v6;
    v109 = a4;
    v111 = (uint64_t *)(a1 + 296);
    do
    {
      v14 = (uint64_t)*v13;
      v15 = (*v13)[1];
      if (v15)
      {
        v16 = (uint8x8_t)vcnt_s8(v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v17 = 0xCA93DB2C2ACE8387;
          if (*(_QWORD *)&v15 <= 0xCA93DB2C2ACE8387)
            v17 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v15;
        }
        else
        {
          v17 = (*(_QWORD *)&v15 - 1) & 0xCA93DB2C2ACE8387;
        }
        v18 = *(_QWORD **)(*(_QWORD *)v14 + 8 * v17);
        if (v18)
        {
          v19 = (_QWORD *)*v18;
          if (v19)
          {
            if (v16.u32[0] < 2uLL)
            {
              v20 = *(_QWORD *)&v15 - 1;
              while (1)
              {
                v22 = v19[1];
                if (v22 == 0xCA93DB2C2ACE8387)
                {
                  if (v19[2] == 0xCA93DB2C2ACE8387)
                    goto LABEL_35;
                }
                else if ((v22 & v20) != v17)
                {
                  goto LABEL_41;
                }
                v19 = (_QWORD *)*v19;
                if (!v19)
                  goto LABEL_41;
              }
            }
            do
            {
              v21 = v19[1];
              if (v21 == 0xCA93DB2C2ACE8387)
              {
                if (v19[2] == 0xCA93DB2C2ACE8387)
                {
LABEL_35:
                  v23 = v19[5];
                  if (*(_QWORD *)(v23 + 8) == 0xCA93DB2C2ACE8387)
                  {
                    v24 = *(unsigned __int16 **)(v23 + 32);
                    if (v24)
                    {
                      if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
                        dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
                      v25 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
                      if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
                      {
                        v26 = *v24;
                        LODWORD(buf) = 67109120;
                        HIDWORD(buf) = v26;
                        _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_DEBUG, "Exiting BatchManager(id:%d)", (uint8_t *)&buf, 8u);
                      }
                    }
                  }
                  break;
                }
              }
              else
              {
                if (v21 >= *(_QWORD *)&v15)
                  v21 %= *(_QWORD *)&v15;
                if (v21 != v17)
                  break;
              }
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
        }
      }
LABEL_41:
      v27 = (_QWORD *)gdc::Registry::storage<md::components::DynamicMeshInstance>(v14);
      v28 = gdc::Registry::storage<md::components::Material>(v14);
      v29 = (_QWORD *)v28;
      v30 = v28 + 32;
      v32 = v27[7];
      v31 = v27[8];
      if (*(_QWORD *)(v28 + 64) - *(_QWORD *)(v28 + 56) >= (unint64_t)(v31 - v32))
        v33 = v27 + 4;
      else
        v33 = (_QWORD *)(v28 + 32);
      if (v27 + 4 == v33 && v32 != v31)
      {
        do
        {
          v39 = *(unsigned int *)(v32 + 4);
          v40 = v29[4];
          if (v39 >> 7 < (v29[5] - v40) >> 3)
          {
            v41 = *(_QWORD *)(v40 + 8 * (v39 >> 7));
            if (v41)
            {
              v42 = *(unsigned __int16 *)(v41 + 2 * (v39 & 0x7F));
              v44 = v29[7];
              v43 = v29[8];
              if (v42 < (v43 - v44) >> 3)
              {
                v45 = v44 + 8 * v42;
                if (v45 != v43 && *(_DWORD *)(v45 + 4) == (_DWORD)v39)
                  md::MeshRenderableLogic::removeDynamicEntity((_QWORD *)a1, *(_QWORD *)v32);
              }
            }
          }
          v32 += 8;
        }
        while (v32 != v31);
      }
      if ((_QWORD *)v30 == v33)
      {
        v48 = v29[7];
        v49 = v29[8];
        while (v48 != v49)
        {
          v50 = *(unsigned int *)(v48 + 4);
          v51 = v27[4];
          if (v50 >> 7 < (v27[5] - v51) >> 3)
          {
            v52 = *(_QWORD *)(v51 + 8 * (v50 >> 7));
            if (v52)
            {
              v53 = *(unsigned __int16 *)(v52 + 2 * (v50 & 0x7F));
              v55 = v27[7];
              v54 = v27[8];
              if (v53 < (v54 - v55) >> 3)
              {
                v56 = v55 + 8 * v53;
                if (v56 != v54 && *(_DWORD *)(v56 + 4) == (_DWORD)v50)
                  md::MeshRenderableLogic::removeDynamicEntity((_QWORD *)a1, *(_QWORD *)v48);
              }
            }
          }
          v48 += 8;
        }
      }
      md::MeshRenderableLogic::clearInjectedRenderables((md::MeshRenderableLogic *)a1, *(unsigned __int16 *)(v14 + 40));
      v35 = gdc::Registry::storage<md::components::TexturedMeshInstance>(v14);
      if (*(_QWORD *)(v35 + 88) != *(_QWORD *)(v35 + 80))
      {
        LOWORD(buf) = *(_WORD *)(v14 + 40);
        v36 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v111, buf, &buf);
        v37 = (_QWORD *)v36[3];
        v38 = (_QWORD *)v36[4];
        while (v37 != v38)
        {
          v47 = (void (***)(_QWORD))*v37;
          if (*(_BYTE *)(*v37 + 8) == 3)
          {
            if (*(_QWORD *)(a1 + 240))
            {
              (**v47)(*v37);
              *v47 = *(void (***)(_QWORD))(a1 + 264);
              *(_QWORD *)(a1 + 264) = v47;
            }
          }
          ++v37;
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__erase_unique<unsigned short>(v111, *(_WORD *)(v14 + 40));
      ++v13;
    }
    while (v13 != v110);
    v12 = *(_QWORD **)(a1 + 136);
    v6 = v108;
    a4 = v109;
  }
  v58 = (unsigned __int16 *)v12[57];
  for (i = (unsigned __int16 *)v12[58]; v58 != i; ++v58)
  {
    v60 = *v58;
    md::MeshRenderableLogic::clearInjectedRenderables((md::MeshRenderableLogic *)a1, *v58);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__erase_unique<unsigned short>((uint64_t *)(a1 + 296), v60);
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v61 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v62 = v61;
  v63 = *((_QWORD *)v6 + 10);
  if (v63 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v61))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v62, OS_SIGNPOST_INTERVAL_BEGIN, v63, "updateStaticNonBatchedMeshes", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  md::MeshRenderableBuilder::MeshRenderableBuilder(&buf, **a3, (*a3)[1], *a3 + 2);
  v64 = *(_QWORD *)(a1 + 136);
  v128[0] = &off_1E42CFFF8;
  v129 = v128;
  v126 = &v123;
  v123 = &off_1E42CFFF8;
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v130, v64 + 432, (uint64_t)&v123, *(_QWORD *)(v64 + 432));
  v65 = v126;
  if (v126 == &v123)
  {
    v66 = 4;
    v65 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_92;
    v66 = 5;
  }
  (*v65)[v66]();
LABEL_92:
  v67 = v129;
  if (v129 == v128)
  {
    v68 = 4;
    v67 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_97;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_97:
  v69 = (uint64_t)v130;
  v70 = (uint64_t)v132;
  if (!v132)
  {
LABEL_100:
    v121 = (uint64_t *)v70;
    goto LABEL_102;
  }
  if (v132 != v131)
  {
    v70 = (*(uint64_t (**)(void))(*v132 + 16))();
    goto LABEL_100;
  }
  v121 = &v118;
  (*(void (**)(void))(*v132 + 24))();
LABEL_102:
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v123, v69, (uint64_t)&v118, *v130);
  v71 = v121;
  if (v121 == &v118)
  {
    v72 = 4;
    v71 = &v118;
  }
  else
  {
    if (!v121)
      goto LABEL_107;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_107:
  v73 = (uint64_t)v130;
  v74 = (uint64_t)v132;
  if (!v132)
  {
LABEL_110:
    v138 = (_BYTE *)v74;
    goto LABEL_112;
  }
  if (v132 != v131)
  {
    v74 = (*(uint64_t (**)(void))(*v132 + 16))();
    goto LABEL_110;
  }
  v138 = v137;
  (*(void (**)(_QWORD *, _BYTE *))(v131[0] + 24))(v131, v137);
LABEL_112:
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v118, v73, (uint64_t)v137, v130[1]);
  v75 = v138;
  if (v138 == v137)
  {
    v76 = 4;
    v75 = v137;
    goto LABEL_116;
  }
  if (v138)
  {
    v76 = 5;
LABEL_116:
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
  v77 = v119;
  v78 = v124;
  while (v77 != v78)
  {
    md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(a1, *v78);
    while (1)
    {
      v78 = v124 + 1;
      v124 = v78;
      if (v78 == (uint64_t *)v123[1])
        break;
      if (!v127)
        goto LABEL_182;
      if ((*(unsigned int (**)(uint64_t *))(*v127 + 48))(v127))
      {
        v78 = v124;
        break;
      }
    }
    v77 = v119;
  }
  v79 = v122;
  if (v122 == &v120)
  {
    v80 = 4;
    v79 = &v120;
  }
  else
  {
    if (!v122)
      goto LABEL_130;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_130:
  v81 = v127;
  if (v127 == &v125)
  {
    v82 = 4;
    v81 = &v125;
  }
  else
  {
    if (!v127)
      goto LABEL_135;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_135:
  v83 = v132;
  if (v132 == v131)
  {
    v84 = 4;
    v83 = v131;
    goto LABEL_139;
  }
  if (v132)
  {
    v84 = 5;
LABEL_139:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v85 = *(_QWORD *)(a1 + 136);
    v86 = *(uint64_t **)(v85 + 384);
    for (j = *(uint64_t **)(v85 + 392); v86 != j; ++v86)
      md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(a1, *v86);
  }
  v88 = v136;
  if (v136)
  {
    p_shared_owners = (unint64_t *)&v136->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v135;
  if (v135)
  {
    v92 = (unint64_t *)&v135->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v97 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v98 = v97;
  v99 = *((_QWORD *)v6 + 10);
  if (v99 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v97))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v98, OS_SIGNPOST_INTERVAL_END, v99, "updateStaticNonBatchedMeshes", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v100 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v101 = v100;
  v102 = *((_QWORD *)v6 + 10);
  if (v102 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v100))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v101, OS_SIGNPOST_INTERVAL_BEGIN, v102, "UpdateBatches", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  md::MeshRenderableLogic::updateBatches((md::MeshRenderableLogic *)a1, v6, (const md::MaterialContext *)*a3);
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v103 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v104 = v103;
  v105 = *((_QWORD *)v6 + 10);
  if (v105 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v103))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v104, OS_SIGNPOST_INTERVAL_END, v105, "UpdateBatches", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  if (a1 + 296 != a4)
  {
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 328);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,void *> *>>((_QWORD *)a4, *(char **)(a1 + 312));
  }
  *(_BYTE *)(a4 + 40) = *(_BYTE *)(a1 + 417);
  if (!v117)
  {
LABEL_182:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v117 + 48))(v117);
  result = v117;
  if (v117 == v116)
  {
    v107 = 4;
    result = v116;
  }
  else
  {
    if (!v117)
      return result;
    v107 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v107))();
}

void sub_19F874444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t *a40)
{
  uint64_t v40;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v42 = a40;
  if (a40 == &a37)
  {
    v43 = 4;
    v42 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_6;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_6:
  v44 = *(_QWORD **)(v40 - 184);
  if (v44 == (_QWORD *)(v40 - 208))
  {
    v45 = 4;
    v44 = (_QWORD *)(v40 - 208);
  }
  else
  {
    if (!v44)
      goto LABEL_11;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_11:
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)(v40 - 176));
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a25);
  _Unwind_Resume(a1);
}

void md::MeshRenderableLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_signpost_id_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  NSObject *v70;
  NSObject *v71;
  os_signpost_id_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t buf;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *p_buf;
  uint64_t v84;

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v7 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v8 = v7;
  v73 = a2;
  v9 = *(_QWORD *)(a2 + 80);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "updateDynamicMeshes", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  v75 = *(_QWORD *)(a3 + 40);
  md::MeshRenderableBuilder::MeshRenderableBuilder(&buf, **(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)a3 + 8), (_QWORD *)(*(_QWORD *)a3 + 16));
  v10 = a1;
  v11 = *(_QWORD *)(a1 + 136);
  v12 = *(uint64_t **)(v11 + 384);
  v13 = *(uint64_t **)(v11 + 392);
  while (v12 != v13)
  {
    v14 = *v12;
    v76 = v14;
    v15 = (_QWORD *)gdc::Registry::storage<md::components::DynamicMeshInstance>(v14);
    v16 = gdc::Registry::storage<md::components::Material>(v14);
    v17 = (_QWORD *)v16;
    v18 = v16 + 32;
    v19 = v15[7];
    v20 = v15[8];
    if (*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56) >= (unint64_t)(v20 - v19))
      v21 = v15 + 4;
    else
      v21 = (_QWORD *)(v16 + 32);
    if (v15 + 4 != v21)
    {
      if ((_QWORD *)v18 != v21)
        goto LABEL_7;
LABEL_38:
      v81 = v10;
      v82 = &v76;
      p_buf = &buf;
      v84 = v75;
      v41 = v17[7];
      v42 = v17[8];
      if (v41 != v42)
      {
        v43 = (unint64_t *)v17[10];
        do
        {
          v45 = *(unsigned int *)(v41 + 4);
          v46 = v15[4];
          v47 = (v15[5] - v46) >> 3;
          if (v45 >> 7 < v47)
          {
            v48 = *(_QWORD *)(v46 + 8 * (v45 >> 7));
            if (v48)
            {
              v49 = *(unsigned __int16 *)(v48 + 2 * (v45 & 0x7F));
              v51 = v15[7];
              v50 = v15[8];
              v52 = (v50 - v51) >> 3;
              if (v52 > v49)
              {
                v53 = v51 + 8 * v49;
                if (v53 != v50 && *(_DWORD *)(v53 + 4) == (_DWORD)v45)
                {
                  v55 = *(_QWORD *)v41;
                  v56 = *(_QWORD *)v41 >> 39;
                  if (v56 < v47
                    && (v57 = *(_QWORD *)(v46 + 8 * v56)) != 0
                    && (v58 = *(unsigned __int16 *)(v57 + 2 * (HIDWORD(v55) & 0x7F)), v52 > v58)
                    && ((v59 = v51 + 8 * v58, v59 != v50) ? (v60 = *(_DWORD *)(v59 + 4) == HIDWORD(v55)) : (v60 = 0), v60))
                  {
                    v44 = (uint64_t *)(v15[10] + 304 * v58);
                  }
                  else
                  {
                    v44 = (uint64_t *)v15[11];
                  }
                  md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(&v81, v55, v44, v43);
                }
              }
            }
          }
          v43 += 3;
          v41 += 8;
        }
        while (v41 != v42);
      }
      goto LABEL_7;
    }
    v22 = v10;
    v81 = v10;
    v82 = &v76;
    p_buf = &buf;
    v84 = v75;
    if (v19 != v20)
    {
      v23 = (uint64_t *)v15[10];
      do
      {
        v25 = *(unsigned int *)(v19 + 4);
        v26 = v17[4];
        v27 = (v17[5] - v26) >> 3;
        if (v25 >> 7 < v27)
        {
          v28 = *(_QWORD *)(v26 + 8 * (v25 >> 7));
          if (v28)
          {
            v29 = *(unsigned __int16 *)(v28 + 2 * (v25 & 0x7F));
            v31 = v17[7];
            v30 = v17[8];
            v32 = (v30 - v31) >> 3;
            if (v32 > v29)
            {
              v33 = v31 + 8 * v29;
              if (v33 != v30 && *(_DWORD *)(v33 + 4) == (_DWORD)v25)
              {
                v35 = *(_QWORD *)v19;
                v36 = *(_QWORD *)v19 >> 39;
                if (v36 < v27
                  && (v37 = *(_QWORD *)(v26 + 8 * v36)) != 0
                  && (v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v35) & 0x7F)), v32 > v38)
                  && ((v39 = v31 + 8 * v38, v39 != v30) ? (v40 = *(_DWORD *)(v39 + 4) == HIDWORD(v35)) : (v40 = 0), v40))
                {
                  v24 = (unint64_t *)(v17[10] + 24 * v38);
                }
                else
                {
                  v24 = (unint64_t *)v17[11];
                }
                md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(&v81, v35, v23, v24);
              }
            }
          }
        }
        v23 += 38;
        v19 += 8;
      }
      while (v19 != v20);
    }
    v10 = v22;
    if ((_QWORD *)v18 == v21)
      goto LABEL_38;
LABEL_7:
    ++v12;
  }
  v61 = v80;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v79;
  if (v79)
  {
    v65 = (unint64_t *)&v79->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v78;
  if (v78)
  {
    v68 = (unint64_t *)&v78->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v70 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v71 = v70;
  v72 = *(_QWORD *)(v73 + 80);
  if (v72 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v70))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v71, OS_SIGNPOST_INTERVAL_END, v72, "updateDynamicMeshes", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  if (v10 + 296 != a4)
  {
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(v10 + 328);
    std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,void *> *>>((_QWORD *)a4, *(char **)(v10 + 312));
  }
  *(_BYTE *)(a4 + 40) = *(_BYTE *)(v10 + 417);
}

void sub_19F874B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (a16)
  {
    v21 = (unint64_t *)&a16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (a14)
  {
    v23 = (unint64_t *)&a14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::MeshRenderableLogic::debugConsoleString@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  size_t v4;
  unint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  unint64_t v16;
  void *__p;
  char v18;
  unint64_t v19;
  int v20;
  uint64_t v21;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v13);
  md::MeshRenderableLogic::buildDebugDetailsString(a1, (uint64_t)v13);
  if ((v20 & 0x10) != 0)
  {
    v5 = v19;
    if (v19 < v16)
    {
      v19 = v16;
      v5 = v16;
    }
    v6 = (const void **)&v15;
  }
  else
  {
    if ((v20 & 8) == 0)
    {
      v4 = 0;
      a2[23] = 0;
      goto LABEL_16;
    }
    v6 = (const void **)v14;
    v5 = v14[2];
  }
  v7 = *v6;
  v4 = v5 - (_QWORD)*v6;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    *((_QWORD *)a2 + 1) = v4;
    *((_QWORD *)a2 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a2 = v10;
    a2 = v10;
    goto LABEL_15;
  }
  a2[23] = v4;
  if (v4)
LABEL_15:
    memmove(a2, v7, v4);
LABEL_16:
  a2[v4] = 0;
  v13[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[2] = v11;
  v13[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v21);
}

void sub_19F874D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::MeshRenderableLogic::buildDebugDetailsString(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int8x8_t **v3;
  int8x8_t **v4;
  _QWORD *v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::locale::__imp **v17;
  std::locale::__imp **v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  int64_t *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  _DWORD *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  std::locale::__imp *locale;
  int v102;
  int v103;
  _QWORD *v104;
  _QWORD *v105;
  __int128 v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  int v110;
  int v111;
  const std::locale::facet *v112;
  char *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  int64_t v117;
  std::locale::__imp *p_b;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  uint64_t v127;
  int v128;
  int v129;
  const std::locale::facet *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  size_t v134;
  std::locale::__imp *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  int v145;
  int v146;
  const std::locale::facet *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  size_t v151;
  std::locale::__imp *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  char *v160;
  uint64_t v161;
  int v162;
  int v163;
  const std::locale::facet *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  std::locale::__imp *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  int v179;
  int v180;
  const std::locale::facet *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  size_t v185;
  std::locale::__imp *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  char *v194;
  uint64_t v195;
  int v196;
  int v197;
  const std::locale::facet *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  size_t v202;
  std::locale::__imp *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  int v213;
  int v214;
  const std::locale::facet *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  size_t v219;
  std::locale::__imp *v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  char *v228;
  uint64_t v229;
  int v230;
  int v231;
  const std::locale::facet *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  size_t v236;
  std::locale::__imp *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  std::locale::__imp *v246;
  int v247;
  int v248;
  _QWORD *v249;
  _QWORD *v250;
  unint64_t *v251;
  unint64_t v252;
  _QWORD *v253;
  size_t v254;
  std::locale::__imp *v255;
  unint64_t v256;
  const void **v257;
  const void *v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  std::locale::__imp *v263;
  int64_t v264;
  std::locale::__imp *v265;
  uint64_t v266;
  _QWORD *v267;
  std::locale *v268;
  uint64_t v269;
  _QWORD *v270;
  std::locale *v271;
  uint64_t v272;
  _QWORD *v273;
  std::locale *v274;
  uint64_t v275;
  _QWORD *i;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  size_t v284;
  std::locale::__imp *v285;
  unint64_t v286;
  const void **v287;
  const void *v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t *v294;
  uint64_t *v295;
  char *v296;
  char *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  _BYTE *v303;
  char *v304;
  char *v305;
  unint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  _OWORD *v310;
  char *v311;
  uint64_t v312;
  __int128 v313;
  _QWORD *v314;
  char *v315;
  const std::ios_base *v316;
  void *rdbuf;
  std::ios_base::fmtflags fmtflags;
  int v319;
  const std::locale::facet *v320;
  char *v321;
  uint64_t width;
  uint64_t v323;
  int64_t v324;
  std::locale::__imp *v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  uint64_t v334;
  int v335;
  int v336;
  const std::locale::facet *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  size_t v341;
  std::locale::__imp *v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD **v349;
  _QWORD *v350;
  void *v351;
  uint64_t *v354;
  uint64_t *v355;
  _QWORD *v356;
  uint64_t *v357;
  uint64_t v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  std::locale __dst[2];
  _QWORD *v364;
  _QWORD *v365;
  __int16 v366;
  uint64_t v367;
  _DWORD *v368;
  std::__shared_weak_count *v369;
  void *v370[2];
  __int128 v371;
  int v372;
  std::locale v373;
  size_t v374;
  int64_t v375;
  uint64_t v376;
  _BYTE v377[16];
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  void *__p;
  char v382;
  unint64_t v383;
  int v384;
  _BYTE v385[152];
  _QWORD v386[2];
  std::locale __b;
  size_t v388;
  int64_t v389;
  _QWORD *v390;
  char v391;
  _QWORD v392[3];
  _QWORD *v393;
  uint64_t v394;

  v394 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v370 = 0u;
  v371 = 0u;
  v372 = 1065353216;
  v2 = a1[17];
  v3 = *(int8x8_t ***)(v2 + 384);
  v4 = *(int8x8_t ***)(v2 + 392);
  if (v3 == v4)
    goto LABEL_36;
  while (2)
  {
    v7 = (*v3)[1];
    if (!*(_QWORD *)&v7)
      goto LABEL_6;
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0xCA93DB2C2ACE8387;
      if (*(_QWORD *)&v7 <= 0xCA93DB2C2ACE8387)
        v9 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & 0xCA93DB2C2ACE8387;
    }
    v10 = *(_QWORD **)(*(_QWORD *)*v3 + 8 * v9);
    if (!v10)
      goto LABEL_6;
    v11 = (_QWORD *)*v10;
    if (!v11)
      goto LABEL_6;
    if (v8.u32[0] < 2uLL)
    {
      v12 = *(_QWORD *)&v7 - 1;
      while (1)
      {
        v14 = v11[1];
        if (v14 == 0xCA93DB2C2ACE8387)
        {
          if (v11[2] == 0xCA93DB2C2ACE8387)
            goto LABEL_28;
        }
        else if ((v14 & v12) != v9)
        {
          goto LABEL_6;
        }
        v11 = (_QWORD *)*v11;
        if (!v11)
          goto LABEL_6;
      }
    }
    while (1)
    {
      v13 = v11[1];
      if (v13 == 0xCA93DB2C2ACE8387)
        break;
      if (v13 >= *(_QWORD *)&v7)
        v13 %= *(_QWORD *)&v7;
      if (v13 != v9)
        goto LABEL_6;
LABEL_17:
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_6;
    }
    if (v11[2] != 0xCA93DB2C2ACE8387)
      goto LABEL_17;
LABEL_28:
    v15 = v11[5];
    if (*(_QWORD *)(v15 + 8) != 0xCA93DB2C2ACE8387)
      goto LABEL_6;
    v16 = *(_QWORD *)(v15 + 32);
    if (!v16)
      goto LABEL_6;
    v392[0] = &off_1E42D9128;
    v392[1] = v370;
    v5 = v392;
    v393 = v392;
    v17 = *(std::locale::__imp ***)(v16 + 8);
    v18 = *(std::locale::__imp ***)(v16 + 16);
    if (v17 == v18)
    {
LABEL_4:
      v6 = 4;
      goto LABEL_5;
    }
    while (2)
    {
      v373.__locale_ = *v17;
      if (!v393)
      {
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_612:
        __break(1u);
        return;
      }
      (*(void (**)(_QWORD *, std::locale *))(*v393 + 48))(v393, &v373);
      if (++v17 != v18)
        continue;
      break;
    }
    v5 = v393;
    if (v393 == v392)
    {
      v5 = v392;
      goto LABEL_4;
    }
    if (v393)
    {
      v6 = 5;
LABEL_5:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
LABEL_6:
    if (++v3 != v4)
      continue;
    break;
  }
LABEL_36:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v373);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\tMaterials: [\n", 14);
  v19 = a1[17];
  v20 = *(uint64_t **)(v19 + 384);
  v354 = *(uint64_t **)(v19 + 392);
  if (v20 != v354)
  {
    v21 = 0;
    do
    {
      v22 = *v20;
      v23 = (uint64_t *)gdc::Registry::storage<md::components::DynamicMeshInstance>(*v20);
      v24 = gdc::Registry::storage<md::components::Material>(v22);
      v25 = (_QWORD *)v24;
      v26 = (uint64_t *)(v24 + 32);
      if (*(_QWORD *)(v24 + 64) - *(_QWORD *)(v24 + 56) >= (unint64_t)(v23[8] - v23[7]))
        v27 = (uint64_t)(v23 + 4);
      else
        v27 = v24 + 32;
      gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(__dst, v27, v23 + 4, v26, *(_QWORD *)(v27 + 24));
      if (v25[8] - v25[7] >= (unint64_t)(v23[8] - v23[7]))
        v28 = (uint64_t)(v23 + 4);
      else
        v28 = (uint64_t)v26;
      gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(&__b, v28, v23 + 4, v26, *(_QWORD *)(v28 + 32));
      v29 = v365;
      v357 = v20;
      v361 = v21;
      v30 = 0;
      if (v390 != v365)
      {
        v31 = (_QWORD *)*((_QWORD *)__dst[0].__locale_ + 4);
        do
        {
          v365 = v29 + 1;
          v32 = v31;
          if (v29 + 1 != v31)
          {
            v33 = *(_QWORD *)__dst[1].__locale_;
            v34 = (uint64_t)(*((_QWORD *)__dst[1].__locale_ + 1) - *(_QWORD *)__dst[1].__locale_) >> 3;
            v35 = v29 + 2;
            while (1)
            {
              v36 = *((unsigned int *)v35 - 1);
              v37 = v36 >> 7;
              if (v36 >> 7 < v34)
              {
                v38 = *(_QWORD *)(v33 + 8 * v37);
                if (v38)
                {
                  v39 = *(unsigned __int16 *)(v38 + 2 * (v36 & 0x7F));
                  v41 = *((_QWORD *)__dst[1].__locale_ + 3);
                  v40 = *((_QWORD *)__dst[1].__locale_ + 4);
                  if (v39 < (v40 - v41) >> 3)
                  {
                    v42 = v41 + 8 * v39;
                    v43 = v42 != v40 && *(_DWORD *)(v42 + 4) == (_DWORD)v36;
                    if (v43 && v37 < (uint64_t)(v364[1] - *v364) >> 3)
                    {
                      v44 = *(_QWORD *)(*v364 + 8 * v37);
                      if (v44)
                      {
                        v45 = *(unsigned __int16 *)(v44 + 2 * (v36 & 0x7F));
                        v46 = v364[3];
                        v47 = v364[4];
                        if (v45 < (v47 - v46) >> 3)
                        {
                          v48 = v46 + 8 * v45;
                          if (v48 != v47 && *(_DWORD *)(v48 + 4) == (_DWORD)v36)
                            break;
                        }
                      }
                    }
                  }
                }
              }
              v365 = v35;
              v43 = v35++ == v31;
              if (v43)
              {
                v32 = v31;
                goto LABEL_48;
              }
            }
            v32 = v35 - 1;
          }
LABEL_48:
          ++v30;
          v29 = v32;
        }
        while (v390 != v32);
      }
      v50 = v23[7];
      v51 = v23[8];
      if (v25[8] - v25[7] >= (unint64_t)(v51 - v50))
        v52 = v23 + 4;
      else
        v52 = v26;
      if (v23 + 4 == v52 && v50 != v51)
      {
        do
        {
          v57 = *(unsigned int *)(v50 + 4);
          v58 = v25[4];
          v59 = (v25[5] - v58) >> 3;
          if (v57 >> 7 < v59)
          {
            v60 = *(_QWORD *)(v58 + 8 * (v57 >> 7));
            if (v60)
            {
              v61 = *(unsigned __int16 *)(v60 + 2 * (v57 & 0x7F));
              v63 = v25[7];
              v62 = v25[8];
              if ((v62 - v63) >> 3 > v61)
              {
                v64 = v63 + 8 * v61;
                if (v64 != v62 && *(_DWORD *)(v64 + 4) == (_DWORD)v57)
                {
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t\t", 2);
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"entity: ", 8);
                  v66 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)", materialSheetID: ", 19);
                  v67 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)"\n", 1);
                }
              }
            }
          }
          v50 += 8;
        }
        while (v50 != v51);
      }
      if (v26 == v52)
      {
        v54 = v25[7];
        v55 = v25[8];
        if (v54 != v55)
        {
          v56 = v25[10];
          do
          {
            v68 = *(unsigned int *)(v54 + 4);
            v69 = v23[4];
            if (v68 >> 7 < (v23[5] - v69) >> 3)
            {
              v70 = *(_QWORD *)(v69 + 8 * (v68 >> 7));
              if (v70)
              {
                v71 = *(unsigned __int16 *)(v70 + 2 * (v68 & 0x7F));
                v73 = v23[7];
                v72 = v23[8];
                if (v71 < (v72 - v73) >> 3)
                {
                  v74 = v73 + 8 * v71;
                  if (v74 != v72 && *(_DWORD *)(v74 + 4) == (_DWORD)v68)
                  {
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t\t", 2);
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"entity: ", 8);
                    v76 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v76, (uint64_t)", materialSheetID: ", 19);
                    v77 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v77, (uint64_t)"\n", 1);
                  }
                }
              }
            }
            v56 += 24;
            v54 += 8;
          }
          while (v54 != v55);
        }
      }
      v21 = v30 + v361;
      ++v20;
    }
    while (v357 + 1 != v354);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t]\n", 3);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t# Entities with <DynamicMeshInstance, Material>: ", 50);
  v78 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)"\n", 1);
  v79 = a1 + 44;
  while (2)
  {
    v79 = (uint64_t *)*v79;
    if (v79)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\tEntity idx: ", 13);
      v80 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)" version: ", 10);
      v81 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)" owner: ", 8);
      v82 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*v82 - 24)));
      v355 = v79;
      v83 = std::locale::use_facet(__dst, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
      std::locale::~locale(__dst);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\tInjectedRegistry: [\n", 21);
      if (*((_BYTE *)v79 + 34))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t\tId: ", 6);
        if (!*((_BYTE *)v79 + 34))
        {
          std::__throw_bad_optional_access[abi:nn180100]();
          goto LABEL_612;
        }
        v84 = (int64_t *)std::ostream::operator<<();
        v85 = "\n";
        v86 = 1;
      }
      else
      {
        v84 = &v375;
        v85 = "\t\tNone\n";
        v86 = 7;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\tRenderable position: [\n", 24);
      v87 = v79[3];
      if (!v87)
        goto LABEL_102;
      v89 = *(_DWORD **)(v87 + 32);
      v88 = *(std::__shared_weak_count **)(v87 + 40);
      v368 = v89;
      v369 = v88;
      if (v88)
      {
        p_shared_owners = (unint64_t *)&v88->__shared_owners_;
        do
          v91 = __ldxr(p_shared_owners);
        while (__stxr(v91 + 1, p_shared_owners));
      }
      v92 = *(_QWORD *)v89;
      v94 = *(_QWORD *)(*(_QWORD *)v89 + 40);
      v93 = *(_QWORD *)(*(_QWORD *)v89 + 48);
      v95 = *(_QWORD *)(*(_QWORD *)v89 + 8);
      v367 = 0;
      __dst[0].__locale_ = 0;
      __dst[1].__locale_ = 0;
      if ((*(_BYTE *)(v92 + 16) & 2) == 0)
      {
        v96 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v96 != -1)
        {
          __b.__locale_ = (std::locale::__imp *)&v391;
          v386[0] = &__b;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v386, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
      }
      v97 = (v93 - v94) / v95 * v95;
      if (v93 - v94 == (v93 - v94) % v95)
      {
        v98 = 0;
        if (!v367)
          goto LABEL_134;
      }
      else
      {
        v98 = *(_QWORD *)(v92 + 72);
        if (!v367)
          goto LABEL_134;
      }
      v100 = v364;
      v99 = v365;
      if (v365 != v364)
      {
        locale = __dst[1].__locale_;
        v102 = v366;
        v103 = HIBYTE(v366);
        if (__dst[0].__locale_ && *((_BYTE *)__dst[1].__locale_ + 17) != 2)
        {
          v358 = v98;
          (*(void (**)(void))(*(_QWORD *)__dst[0].__locale_ + 64))();
          v98 = v358;
        }
        if (v102 && !v103)
        {
          v104 = (_QWORD *)*((_QWORD *)locale + 7);
          v105 = (_QWORD *)*((_QWORD *)locale + 8);
          if (v105 == v104)
            v104 = (_QWORD *)(*((_QWORD *)locale + 10) - *((_QWORD *)locale + 9));
          if (v100 < v104)
            v104 = v100;
          if (v105 <= v99)
            v105 = v99;
          if (v105 == v104)
            v105 = (_QWORD *)((char *)v104 + *((_QWORD *)locale + 10) - *((_QWORD *)locale + 9));
          *((_QWORD *)locale + 7) = v104;
          *((_QWORD *)locale + 8) = v105;
        }
      }
LABEL_134:
      *(_QWORD *)&v106 = 0;
      *((_QWORD *)&v106 + 1) = v92;
      *(_OWORD *)&__dst[0].__locale_ = v106;
      v364 = 0;
      v365 = (_QWORD *)v97;
      v367 = v98;
      v366 = 0;
      if (!v89[4])
      {
        if (v98)
          goto LABEL_378;
        goto LABEL_393;
      }
      v362 = 0;
      v107 = 0;
LABEL_138:
      MEMORY[0x1A1AF49E0](v386, &v375);
      if (LOBYTE(v386[0]))
      {
        v108 = (char *)&v375 + *(_QWORD *)(v375 - 24);
        v109 = *((_QWORD *)v108 + 5);
        v110 = *((_DWORD *)v108 + 2);
        v111 = *((_DWORD *)v108 + 36);
        if (v111 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v375 + *(_QWORD *)(v375 - 24)));
          v112 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v111 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v108 + 36) = v111;
        }
        if ((v110 & 0xB0) == 0x20)
          v113 = "";
        else
          v113 = "\t\tTile local [";
        if (!v109)
          goto LABEL_166;
        v114 = *((_QWORD *)v108 + 3);
        v115 = v114 <= 14;
        v116 = v114 - 14;
        v117 = v115 ? 0 : v116;
        if (v113 - "\t\tTile local [" >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v109 + 96))(v109, "\t\tTile local [", v113 - "\t\tTile local [") != v113 - "\t\tTile local [")
        {
          goto LABEL_166;
        }
        if (v117 >= 1)
        {
          if ((unint64_t)v117 >= 0x17)
          {
            v119 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v117 | 7) != 0x17)
              v119 = v117 | 7;
            v120 = v119 + 1;
            p_b = (std::locale::__imp *)operator new(v119 + 1);
            v388 = v117;
            v389 = v120 | 0x8000000000000000;
            __b.__locale_ = p_b;
          }
          else
          {
            HIBYTE(v389) = v117;
            p_b = (std::locale::__imp *)&__b;
          }
          memset(p_b, v111, v117);
          *((_BYTE *)p_b + v117) = 0;
          if (v389 >= 0)
            v121 = &__b;
          else
            v121 = __b.__locale_;
          v122 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v109 + 96))(v109, v121, v117);
          v123 = v122;
          if (SHIBYTE(v389) < 0)
          {
            operator delete(__b.__locale_);
            if (v123 != v117)
              goto LABEL_166;
          }
          else if (v122 != v117)
          {
            goto LABEL_166;
          }
        }
        v124 = "\t\tTile local [" - v113 + 14;
        if (v124 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v109 + 96))(v109, v113, "\t\tTile local [" - v113 + 14) == v124)
        {
          *((_QWORD *)v108 + 3) = 0;
        }
        else
        {
LABEL_166:
          std::ios_base::clear((std::ios_base *)((char *)&v375 + *(_QWORD *)(v375 - 24)), *(_DWORD *)&v377[*(_QWORD *)(v375 - 24) + 8] | 5);
        }
      }
      MEMORY[0x1A1AF49EC](v386);
      v125 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v386, v125);
      if (LOBYTE(v386[0]))
      {
        v126 = (char *)v125 + *(_QWORD *)(*v125 - 24);
        v127 = *((_QWORD *)v126 + 5);
        v128 = *((_DWORD *)v126 + 2);
        v129 = *((_DWORD *)v126 + 36);
        if (v129 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v125 + *(_QWORD *)(*v125 - 24)));
          v130 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v129 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v126 + 36) = v129;
        }
        if ((v128 & 0xB0) == 0x20)
          v131 = "";
        else
          v131 = "]: (";
        if (!v127)
          goto LABEL_196;
        v132 = *((_QWORD *)v126 + 3);
        v115 = v132 <= 4;
        v133 = v132 - 4;
        v134 = v115 ? 0 : v133;
        if (v131 - "]: (" >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v127 + 96))(v127, "]: (", v131 - "]: (") != v131 - "]: (")
        {
          goto LABEL_196;
        }
        if ((uint64_t)v134 >= 1)
        {
          if (v134 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v134 >= 0x17)
          {
            v136 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v134 | 7) != 0x17)
              v136 = v134 | 7;
            v137 = v136 + 1;
            v135 = (std::locale::__imp *)operator new(v136 + 1);
            v388 = v134;
            v389 = v137 | 0x8000000000000000;
            __b.__locale_ = v135;
          }
          else
          {
            HIBYTE(v389) = v134;
            v135 = (std::locale::__imp *)&__b;
          }
          memset(v135, v129, v134);
          *((_BYTE *)v135 + v134) = 0;
          if (v389 >= 0)
            v138 = &__b;
          else
            v138 = __b.__locale_;
          v139 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v127 + 96))(v127, v138, v134);
          v140 = v139;
          if (SHIBYTE(v389) < 0)
          {
            operator delete(__b.__locale_);
            if (v140 != v134)
              goto LABEL_196;
          }
          else if (v139 != v134)
          {
            goto LABEL_196;
          }
        }
        v141 = "]: (" - v131 + 4;
        if (v141 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v127 + 96))(v127, v131, "]: (" - v131 + 4) == v141)
        {
          *((_QWORD *)v126 + 3) = 0;
        }
        else
        {
LABEL_196:
          std::ios_base::clear((std::ios_base *)((char *)v125 + *(_QWORD *)(*v125 - 24)), *(_DWORD *)((char *)v125 + *(_QWORD *)(*v125 - 24) + 32) | 5);
        }
      }
      v142 = MEMORY[0x1A1AF49EC](v386);
      MEMORY[0x1A1AF49E0](v142, &v375);
      if (LOBYTE(v386[0]))
      {
        v143 = (char *)&v375 + *(_QWORD *)(v375 - 24);
        v144 = *((_QWORD *)v143 + 5);
        v145 = *((_DWORD *)v143 + 2);
        v146 = *((_DWORD *)v143 + 36);
        if (v146 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v375 + *(_QWORD *)(v375 - 24)));
          v147 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v146 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v147->__vftable[2].~facet_0)(v147, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v143 + 36) = v146;
        }
        if ((v145 & 0xB0) == 0x20)
          v148 = "";
        else
          v148 = "x: ";
        if (!v144)
          goto LABEL_226;
        v149 = *((_QWORD *)v143 + 3);
        v115 = v149 <= 3;
        v150 = v149 - 3;
        v151 = v115 ? 0 : v150;
        if (v148 - "x: " >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v144 + 96))(v144, "x: ", v148 - "x: ") != v148 - "x: ")
        {
          goto LABEL_226;
        }
        if ((uint64_t)v151 >= 1)
        {
          if (v151 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v151 >= 0x17)
          {
            v153 = (v151 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v151 | 7) != 0x17)
              v153 = v151 | 7;
            v154 = v153 + 1;
            v152 = (std::locale::__imp *)operator new(v153 + 1);
            v388 = v151;
            v389 = v154 | 0x8000000000000000;
            __b.__locale_ = v152;
          }
          else
          {
            HIBYTE(v389) = v151;
            v152 = (std::locale::__imp *)&__b;
          }
          memset(v152, v146, v151);
          *((_BYTE *)v152 + v151) = 0;
          if (v389 >= 0)
            v155 = &__b;
          else
            v155 = __b.__locale_;
          v156 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v144 + 96))(v144, v155, v151);
          v157 = v156;
          if (SHIBYTE(v389) < 0)
          {
            operator delete(__b.__locale_);
            if (v157 != v151)
              goto LABEL_226;
          }
          else if (v156 != v151)
          {
            goto LABEL_226;
          }
        }
        v158 = "x: " - v148 + 3;
        if (v158 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v144 + 96))(v144, v148, "x: " - v148 + 3) == v158)
        {
          *((_QWORD *)v143 + 3) = 0;
        }
        else
        {
LABEL_226:
          std::ios_base::clear((std::ios_base *)((char *)&v375 + *(_QWORD *)(v375 - 24)), *(_DWORD *)&v377[*(_QWORD *)(v375 - 24) + 8] | 5);
        }
      }
      MEMORY[0x1A1AF49EC](v386);
      v159 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v386, v159);
      if (LOBYTE(v386[0]))
      {
        v160 = (char *)v159 + *(_QWORD *)(*v159 - 24);
        v161 = *((_QWORD *)v160 + 5);
        v162 = *((_DWORD *)v160 + 2);
        v163 = *((_DWORD *)v160 + 36);
        if (v163 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v159 + *(_QWORD *)(*v159 - 24)));
          v164 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v163 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v164->__vftable[2].~facet_0)(v164, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v160 + 36) = v163;
        }
        if ((v162 & 0xB0) == 0x20)
          v165 = "";
        else
          v165 = ", ";
        if (!v161)
          goto LABEL_256;
        v166 = *((_QWORD *)v160 + 3);
        v115 = v166 <= 2;
        v167 = v166 - 2;
        v168 = v115 ? 0 : v167;
        if (v165 - ", " >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v161 + 96))(v161, ", ", v165 - ", ") != v165 - ", ")
        {
          goto LABEL_256;
        }
        if ((uint64_t)v168 >= 1)
        {
          if (v168 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v168 >= 0x17)
          {
            v170 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v168 | 7) != 0x17)
              v170 = v168 | 7;
            v171 = v170 + 1;
            v169 = (std::locale::__imp *)operator new(v170 + 1);
            v388 = v168;
            v389 = v171 | 0x8000000000000000;
            __b.__locale_ = v169;
          }
          else
          {
            HIBYTE(v389) = v168;
            v169 = (std::locale::__imp *)&__b;
          }
          memset(v169, v163, v168);
          *((_BYTE *)v169 + v168) = 0;
          if (v389 >= 0)
            v172 = &__b;
          else
            v172 = __b.__locale_;
          v173 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v161 + 96))(v161, v172, v168);
          v174 = v173;
          if (SHIBYTE(v389) < 0)
          {
            operator delete(__b.__locale_);
            if (v174 != v168)
              goto LABEL_256;
          }
          else if (v173 != v168)
          {
            goto LABEL_256;
          }
        }
        v175 = ", " - v165 + 2;
        if (v175 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v161 + 96))(v161, v165, ", " - v165 + 2) == v175)
        {
          *((_QWORD *)v160 + 3) = 0;
        }
        else
        {
LABEL_256:
          std::ios_base::clear((std::ios_base *)((char *)v159 + *(_QWORD *)(*v159 - 24)), *(_DWORD *)((char *)v159 + *(_QWORD *)(*v159 - 24) + 32) | 5);
        }
      }
      v176 = MEMORY[0x1A1AF49EC](v386);
      MEMORY[0x1A1AF49E0](v176, &v375);
      if (LOBYTE(v386[0]))
      {
        v177 = (char *)&v375 + *(_QWORD *)(v375 - 24);
        v178 = *((_QWORD *)v177 + 5);
        v179 = *((_DWORD *)v177 + 2);
        v180 = *((_DWORD *)v177 + 36);
        if (v180 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v375 + *(_QWORD *)(v375 - 24)));
          v181 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v180 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v181->__vftable[2].~facet_0)(v181, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v177 + 36) = v180;
        }
        if ((v179 & 0xB0) == 0x20)
          v182 = "";
        else
          v182 = "y: ";
        if (!v178)
          goto LABEL_286;
        v183 = *((_QWORD *)v177 + 3);
        v115 = v183 <= 3;
        v184 = v183 - 3;
        v185 = v115 ? 0 : v184;
        if (v182 - "y: " >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v178 + 96))(v178, "y: ", v182 - "y: ") != v182 - "y: ")
        {
          goto LABEL_286;
        }
        if ((uint64_t)v185 >= 1)
        {
          if (v185 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v185 >= 0x17)
          {
            v187 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v185 | 7) != 0x17)
              v187 = v185 | 7;
            v188 = v187 + 1;
            v186 = (std::locale::__imp *)operator new(v187 + 1);
            v388 = v185;
            v389 = v188 | 0x8000000000000000;
            __b.__locale_ = v186;
          }
          else
          {
            HIBYTE(v389) = v185;
            v186 = (std::locale::__imp *)&__b;
          }
          memset(v186, v180, v185);
          *((_BYTE *)v186 + v185) = 0;
          if (v389 >= 0)
            v189 = &__b;
          else
            v189 = __b.__locale_;
          v190 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v178 + 96))(v178, v189, v185);
          v191 = v190;
          if (SHIBYTE(v389) < 0)
          {
            operator delete(__b.__locale_);
            if (v191 != v185)
              goto LABEL_286;
          }
          else if (v190 != v185)
          {
            goto LABEL_286;
          }
        }
        v192 = "y: " - v182 + 3;
        if (v192 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v178 + 96))(v178, v182, "y: " - v182 + 3) == v192)
        {
          *((_QWORD *)v177 + 3) = 0;
        }
        else
        {
LABEL_286:
          std::ios_base::clear((std::ios_base *)((char *)&v375 + *(_QWORD *)(v375 - 24)), *(_DWORD *)&v377[*(_QWORD *)(v375 - 24) + 8] | 5);
        }
      }
      MEMORY[0x1A1AF49EC](v386);
      v193 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v386, v193);
      if (LOBYTE(v386[0]))
      {
        v194 = (char *)v193 + *(_QWORD *)(*v193 - 24);
        v195 = *((_QWORD *)v194 + 5);
        v196 = *((_DWORD *)v194 + 2);
        v197 = *((_DWORD *)v194 + 36);
        if (v197 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v193 + *(_QWORD *)(*v193 - 24)));
          v198 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v197 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v198->__vftable[2].~facet_0)(v198, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v194 + 36) = v197;
        }
        if ((v196 & 0xB0) == 0x20)
          v199 = "";
        else
          v199 = ", ";
        if (!v195)
          goto LABEL_316;
        v200 = *((_QWORD *)v194 + 3);
        v115 = v200 <= 2;
        v201 = v200 - 2;
        v202 = v115 ? 0 : v201;
        if (v199 - ", " >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v195 + 96))(v195, ", ", v199 - ", ") != v199 - ", ")
        {
          goto LABEL_316;
        }
        if ((uint64_t)v202 >= 1)
        {
          if (v202 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v202 >= 0x17)
          {
            v204 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v202 | 7) != 0x17)
              v204 = v202 | 7;
            v205 = v204 + 1;
            v203 = (std::locale::__imp *)operator new(v204 + 1);
            v388 = v202;
            v389 = v205 | 0x8000000000000000;
            __b.__locale_ = v203;
          }
          else
          {
            HIBYTE(v389) = v202;
            v203 = (std::locale::__imp *)&__b;
          }
          memset(v203, v197, v202);
          *((_BYTE *)v203 + v202) = 0;
          if (v389 >= 0)
            v206 = &__b;
          else
            v206 = __b.__locale_;
          v207 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v195 + 96))(v195, v206, v202);
          v208 = v207;
          if (SHIBYTE(v389) < 0)
          {
            operator delete(__b.__locale_);
            if (v208 != v202)
              goto LABEL_316;
          }
          else if (v207 != v202)
          {
            goto LABEL_316;
          }
        }
        v209 = ", " - v199 + 2;
        if (v209 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v195 + 96))(v195, v199, ", " - v199 + 2) == v209)
        {
          *((_QWORD *)v194 + 3) = 0;
        }
        else
        {
LABEL_316:
          std::ios_base::clear((std::ios_base *)((char *)v193 + *(_QWORD *)(*v193 - 24)), *(_DWORD *)((char *)v193 + *(_QWORD *)(*v193 - 24) + 32) | 5);
        }
      }
      v210 = MEMORY[0x1A1AF49EC](v386);
      MEMORY[0x1A1AF49E0](v210, &v375);
      if (LOBYTE(v386[0]))
      {
        v211 = (char *)&v375 + *(_QWORD *)(v375 - 24);
        v212 = *((_QWORD *)v211 + 5);
        v213 = *((_DWORD *)v211 + 2);
        v214 = *((_DWORD *)v211 + 36);
        if (v214 == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v375 + *(_QWORD *)(v375 - 24)));
          v215 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
          v214 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v215->__vftable[2].~facet_0)(v215, 32);
          std::locale::~locale(&__b);
          *((_DWORD *)v211 + 36) = v214;
        }
        if ((v213 & 0xB0) == 0x20)
          v216 = "";
        else
          v216 = "z: ";
        if (!v212)
          goto LABEL_346;
        v217 = *((_QWORD *)v211 + 3);
        v115 = v217 <= 3;
        v218 = v217 - 3;
        v219 = v115 ? 0 : v218;
        if (v216 - "z: " >= 1
          && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v212 + 96))(v212, "z: ", v216 - "z: ") != v216 - "z: ")
        {
          goto LABEL_346;
        }
        if ((uint64_t)v219 >= 1)
        {
          if (v219 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v219 >= 0x17)
          {
            v221 = (v219 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v219 | 7) != 0x17)
              v221 = v219 | 7;
            v222 = v221 + 1;
            v220 = (std::locale::__imp *)operator new(v221 + 1);
            v388 = v219;
            v389 = v222 | 0x8000000000000000;
            __b.__locale_ = v220;
          }
          else
          {
            HIBYTE(v389) = v219;
            v220 = (std::locale::__imp *)&__b;
          }
          memset(v220, v214, v219);
          *((_BYTE *)v220 + v219) = 0;
          if (v389 >= 0)
            v223 = &__b;
          else
            v223 = __b.__locale_;
          v224 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v212 + 96))(v212, v223, v219);
          v225 = v224;
          if (SHIBYTE(v389) < 0)
          {
            operator delete(__b.__locale_);
            if (v225 != v219)
              goto LABEL_346;
          }
          else if (v224 != v219)
          {
            goto LABEL_346;
          }
        }
        v226 = "z: " - v216 + 3;
        if (v226 < 1
          || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v212 + 96))(v212, v216, "z: " - v216 + 3) == v226)
        {
          *((_QWORD *)v211 + 3) = 0;
        }
        else
        {
LABEL_346:
          std::ios_base::clear((std::ios_base *)((char *)&v375 + *(_QWORD *)(v375 - 24)), *(_DWORD *)&v377[*(_QWORD *)(v375 - 24) + 8] | 5);
        }
      }
      MEMORY[0x1A1AF49EC](v386);
      v227 = (_QWORD *)std::ostream::operator<<();
      MEMORY[0x1A1AF49E0](v386, v227);
      if (!LOBYTE(v386[0]))
        goto LABEL_137;
      v228 = (char *)v227 + *(_QWORD *)(*v227 - 24);
      v229 = *((_QWORD *)v228 + 5);
      v230 = *((_DWORD *)v228 + 2);
      v231 = *((_DWORD *)v228 + 36);
      if (v231 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v227 + *(_QWORD *)(*v227 - 24)));
        v232 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
        v231 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v232->__vftable[2].~facet_0)(v232, 32);
        std::locale::~locale(&__b);
        *((_DWORD *)v228 + 36) = v231;
      }
      if ((v230 & 0xB0) == 0x20)
        v233 = "";
      else
        v233 = ")\n";
      if (!v229)
        goto LABEL_136;
      v234 = *((_QWORD *)v228 + 3);
      v115 = v234 <= 2;
      v235 = v234 - 2;
      v236 = v115 ? 0 : v235;
      if (v233 - ")\n" >= 1
        && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v229 + 96))(v229, ")\n", v233 - ")\n") != v233 - ")\n")
      {
        goto LABEL_136;
      }
      if ((uint64_t)v236 >= 1)
      {
        if (v236 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v236 >= 0x17)
        {
          v238 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v236 | 7) != 0x17)
            v238 = v236 | 7;
          v239 = v238 + 1;
          v237 = (std::locale::__imp *)operator new(v238 + 1);
          v388 = v236;
          v389 = v239 | 0x8000000000000000;
          __b.__locale_ = v237;
        }
        else
        {
          HIBYTE(v389) = v236;
          v237 = (std::locale::__imp *)&__b;
        }
        memset(v237, v231, v236);
        *((_BYTE *)v237 + v236) = 0;
        if (v389 >= 0)
          v240 = &__b;
        else
          v240 = __b.__locale_;
        v241 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v229 + 96))(v229, v240, v236);
        v242 = v241;
        if ((SHIBYTE(v389) & 0x80000000) == 0)
        {
          if (v241 == v236)
            goto LABEL_373;
LABEL_136:
          std::ios_base::clear((std::ios_base *)((char *)v227 + *(_QWORD *)(*v227 - 24)), *(_DWORD *)((char *)v227 + *(_QWORD *)(*v227 - 24) + 32) | 5);
LABEL_137:
          MEMORY[0x1A1AF49EC](v386);
          ++v107;
          v362 += 64;
          if (v107 >= v368[4])
          {
            v88 = v369;
LABEL_378:
            v245 = v364;
            v244 = v365;
            if (v365 != v364)
            {
              v246 = __dst[1].__locale_;
              v247 = v366;
              v248 = HIBYTE(v366);
              if (__dst[0].__locale_ && *((_BYTE *)__dst[1].__locale_ + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)__dst[0].__locale_ + 64))();
              if (v247 && !v248)
              {
                v249 = (_QWORD *)*((_QWORD *)v246 + 7);
                v250 = (_QWORD *)*((_QWORD *)v246 + 8);
                if (v250 == v249)
                  v249 = (_QWORD *)(*((_QWORD *)v246 + 10) - *((_QWORD *)v246 + 9));
                if (v245 < v249)
                  v249 = v245;
                if (v250 <= v244)
                  v250 = v244;
                if (v250 == v249)
                  v250 = (_QWORD *)((char *)v249 + *((_QWORD *)v246 + 10) - *((_QWORD *)v246 + 9));
                *((_QWORD *)v246 + 7) = v249;
                *((_QWORD *)v246 + 8) = v250;
              }
            }
LABEL_393:
            if (v88)
            {
              v251 = (unint64_t *)&v88->__shared_owners_;
              do
                v252 = __ldaxr(v251);
              while (__stlxr(v252 - 1, v251));
              if (!v252)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            v79 = v355;
LABEL_102:
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t]\n", 3);
            continue;
          }
          goto LABEL_138;
        }
        operator delete(__b.__locale_);
        if (v242 != v236)
          goto LABEL_136;
      }
LABEL_373:
      v243 = ")\n" - v233 + 2;
      if (v243 >= 1
        && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v229 + 96))(v229, v233, ")\n" - v233 + 2) != v243)
      {
        goto LABEL_136;
      }
      *((_QWORD *)v228 + 3) = 0;
      goto LABEL_137;
    }
    break;
  }
  v253 = (_QWORD *)(a2 + 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"DynamicRenderableInjections:[\n", 30);
  if ((v384 & 0x10) != 0)
  {
    v256 = v383;
    if (v383 < v380)
    {
      v383 = v380;
      v256 = v380;
    }
    v257 = (const void **)&v379;
  }
  else
  {
    if ((v384 & 8) == 0)
    {
      v254 = 0;
      HIBYTE(v364) = 0;
      v255 = (std::locale::__imp *)__dst;
      goto LABEL_413;
    }
    v257 = (const void **)v377;
    v256 = v378;
  }
  v258 = *v257;
  v254 = v256 - (_QWORD)*v257;
  if (v254 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v254 >= 0x17)
  {
    v259 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v254 | 7) != 0x17)
      v259 = v254 | 7;
    v260 = v259 + 1;
    v255 = (std::locale::__imp *)operator new(v259 + 1);
    __dst[1].__locale_ = (std::locale::__imp *)v254;
    v364 = (_QWORD *)(v260 | 0x8000000000000000);
    __dst[0].__locale_ = v255;
    goto LABEL_412;
  }
  HIBYTE(v364) = v256 - *(_BYTE *)v257;
  v255 = (std::locale::__imp *)__dst;
  if (v254)
LABEL_412:
    memmove(v255, v258, v254);
LABEL_413:
  *((_BYTE *)v255 + v254) = 0;
  if (SHIBYTE(v364) >= 0)
    v261 = __dst;
  else
    v261 = __dst[0].__locale_;
  if (SHIBYTE(v364) >= 0)
    v262 = HIBYTE(v364);
  else
    v262 = (uint64_t)__dst[1].__locale_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)v261, v262);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"]\n", 2);
  if (SHIBYTE(v364) < 0)
    operator delete(__dst[0].__locale_);
  v263 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
  v373.__locale_ = v263;
  v265 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
  v264 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::locale::__imp **)((char *)&v373.__locale_ + *((_QWORD *)v263 - 3)) = v265;
  v266 = MEMORY[0x1E0DE4FB8];
  v375 = v264;
  v376 = MEMORY[0x1E0DE4FB8] + 16;
  if (v382 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v385);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"Batches:[\n", 10);
  v373.__locale_ = 0;
  if (std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v370, 0, (uint64_t *)&v373)[5])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\tMaterialBatches:[\n", 19);
    __dst[0].__locale_ = 0;
    v267 = std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v370, 0, (uint64_t *)__dst);
    md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)const::$_2::operator()(&v373, v267 + 3);
    v268 = v375 >= 0 ? &v373 : (std::locale *)v373.__locale_;
    v269 = v375 >= 0 ? HIBYTE(v375) : v374;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)v268, v269);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\t]\n", 3);
    if (SHIBYTE(v375) < 0)
      operator delete(v373.__locale_);
  }
  v373.__locale_ = (std::locale::__imp *)3;
  if (std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v370, 3uLL, (uint64_t *)&v373)[5])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\tDynamicTypedRenderBatches:[\n", 29);
    __dst[0].__locale_ = (std::locale::__imp *)1;
    v270 = std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v370, 1uLL, (uint64_t *)__dst);
    md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)const::$_2::operator()(&v373, v270 + 3);
    v271 = v375 >= 0 ? &v373 : (std::locale *)v373.__locale_;
    v272 = v375 >= 0 ? HIBYTE(v375) : v374;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)v271, v272);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\t]\n", 3);
    if (SHIBYTE(v375) < 0)
      operator delete(v373.__locale_);
  }
  v373.__locale_ = (std::locale::__imp *)5;
  if (std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v370, 5uLL, (uint64_t *)&v373)[5])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\tMaterialDecalRenderBatches:[\n", 30);
    __dst[0].__locale_ = (std::locale::__imp *)2;
    v273 = std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v370, 2uLL, (uint64_t *)__dst);
    md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)const::$_2::operator()(&v373, v273 + 3);
    v274 = v375 >= 0 ? &v373 : (std::locale *)v373.__locale_;
    v275 = v375 >= 0 ? HIBYTE(v375) : v374;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)v274, v275);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\t]\n", 3);
    if (SHIBYTE(v375) < 0)
      operator delete(v373.__locale_);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"]\n", 2);
  __b.__locale_ = 0;
  v388 = 0;
  for (i = (_QWORD *)a1[39]; i; i = (_QWORD *)*i)
  {
    v277 = i[3];
    v278 = i[4];
    while (v277 != v278)
    {
      v279 = *(unsigned __int8 *)(*(_QWORD *)v277 + 8);
      if (v279 <= 3)
        ++*((_DWORD *)&__b.__locale_ + v279);
      v277 += 8;
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"Renderables:[\n", 14);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v373);
  if (LODWORD(__b.__locale_))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"Mesh", 4);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)":", 1);
    v280 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v280, (uint64_t)"\n", 1);
  }
  if (HIDWORD(__b.__locale_))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"Material", 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)":", 1);
    v281 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v281, (uint64_t)"\n", 1);
  }
  if ((_DWORD)v388)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"MaterialDecal", 13);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)":", 1);
    v282 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v282, (uint64_t)"\n", 1);
  }
  if (HIDWORD(v388))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"\t", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)"Textured", 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v375, (uint64_t)":", 1);
    v283 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v283, (uint64_t)"\n", 1);
  }
  if ((v384 & 0x10) != 0)
  {
    v286 = v383;
    if (v383 < v380)
    {
      v383 = v380;
      v286 = v380;
    }
    v287 = (const void **)&v379;
  }
  else
  {
    if ((v384 & 8) == 0)
    {
      v284 = 0;
      HIBYTE(v364) = 0;
      v285 = (std::locale::__imp *)__dst;
      goto LABEL_481;
    }
    v287 = (const void **)v377;
    v286 = v378;
  }
  v288 = *v287;
  v284 = v286 - (_QWORD)*v287;
  if (v284 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v284 >= 0x17)
  {
    v289 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v284 | 7) != 0x17)
      v289 = v284 | 7;
    v290 = v289 + 1;
    v285 = (std::locale::__imp *)operator new(v289 + 1);
    __dst[1].__locale_ = (std::locale::__imp *)v284;
    v364 = (_QWORD *)(v290 | 0x8000000000000000);
    __dst[0].__locale_ = v285;
    goto LABEL_480;
  }
  HIBYTE(v364) = v286 - *(_BYTE *)v287;
  v285 = (std::locale::__imp *)__dst;
  if (v284)
LABEL_480:
    memmove(v285, v288, v284);
LABEL_481:
  *((_BYTE *)v285 + v284) = 0;
  v373.__locale_ = v263;
  *(std::locale::__imp **)((char *)&v373.__locale_ + *((_QWORD *)v263 - 3)) = v265;
  v375 = v264;
  v376 = v266 + 16;
  if (v382 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v385);
  if (SHIBYTE(v364) >= 0)
    v291 = __dst;
  else
    v291 = __dst[0].__locale_;
  if (SHIBYTE(v364) >= 0)
    v292 = HIBYTE(v364);
  else
    v292 = (uint64_t)__dst[1].__locale_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)v291, v292);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"]\n", 2);
  if (SHIBYTE(v364) < 0)
    operator delete(__dst[0].__locale_);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"Dynamic Renderables: [\n", 23);
  v293 = (_QWORD *)a1[39];
  if (v293)
  {
LABEL_494:
    v294 = (uint64_t *)v293[3];
    v295 = (uint64_t *)v293[4];
    if (v294 == v295)
      goto LABEL_493;
    v356 = v293;
    v296 = 0;
    v297 = 0;
    v298 = 0;
    while (1)
    {
      v299 = *v294;
      if (*(_BYTE *)(*v294 + 148))
      {
        if (v297 >= v296)
        {
          v300 = (v297 - v298) >> 3;
          v301 = v300 + 1;
          if ((unint64_t)(v300 + 1) >> 61)
            abort();
          if ((v296 - v298) >> 2 > v301)
            v301 = (v296 - v298) >> 2;
          if ((unint64_t)(v296 - v298) >= 0x7FFFFFFFFFFFFFF8)
            v302 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v302 = v301;
          if (v302)
          {
            if (v302 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v303 = operator new(8 * v302);
          }
          else
          {
            v303 = 0;
          }
          v304 = &v303[8 * v300];
          *(_QWORD *)v304 = v299;
          v305 = v304 + 8;
          if (v297 != v298)
          {
            v306 = v297 - 8 - v298;
            if (v306 < 0x168)
            {
              v307 = v297;
              goto LABEL_513;
            }
            if (&v303[v297 - v298 - 8 - (v306 & 0xFFFFFFFFFFFFFFF8)] > &v303[v297 - v298 - 8])
            {
              v307 = v297;
              goto LABEL_513;
            }
            if (&v297[-(v306 & 0xFFFFFFFFFFFFFFF8) - 8] > v297 - 8)
            {
              v307 = v297;
              goto LABEL_513;
            }
            if ((unint64_t)(v298 - v303) < 0x20)
            {
              v307 = v297;
              goto LABEL_513;
            }
            v309 = (v306 >> 3) + 1;
            v307 = &v297[-8 * (v309 & 0x3FFFFFFFFFFFFFFCLL)];
            v310 = &v303[8 * v300 - 16];
            v311 = v297 - 16;
            v312 = v309 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v313 = *(_OWORD *)v311;
              *(v310 - 1) = *((_OWORD *)v311 - 1);
              *v310 = v313;
              v310 -= 2;
              v311 -= 32;
              v312 -= 4;
            }
            while (v312);
            v304 -= 8 * (v309 & 0x3FFFFFFFFFFFFFFCLL);
            if (v309 != (v309 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_513:
                v308 = *((_QWORD *)v307 - 1);
                v307 -= 8;
                *((_QWORD *)v304 - 1) = v308;
                v304 -= 8;
              }
              while (v307 != v298);
            }
            v297 = v298;
          }
          v298 = v304;
          v296 = &v303[8 * v302];
          if (v297)
            operator delete(v297);
          v297 = v305;
          goto LABEL_497;
        }
        *(_QWORD *)v297 = v299;
        v297 += 8;
      }
LABEL_497:
      if (++v294 == v295)
      {
        if (v298 != v297)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\tRegistry ", 10);
          v314 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v314, (uint64_t)": [\n", 4);
          v315 = v298;
          while (1)
          {
            MEMORY[0x1A1AF49E0](__dst, v253);
            if (!LOBYTE(__dst[0].__locale_))
              goto LABEL_561;
            v316 = (const std::ios_base *)((char *)v253 + *(_QWORD *)(*v253 - 24));
            rdbuf = v316->__rdbuf_;
            fmtflags = v316->__fmtflags_;
            v319 = v316[1].__fmtflags_;
            if (v319 == -1)
            {
              std::ios_base::getloc(v316);
              v320 = std::locale::use_facet(&v373, MEMORY[0x1E0DE4A90]);
              v319 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v320->__vftable[2].~facet_0)(v320, 32);
              std::locale::~locale(&v373);
              v316[1].__fmtflags_ = v319;
            }
            if ((fmtflags & 0xB0) == 0x20)
              v321 = "";
            else
              v321 = "\t\tRenderable: ";
            if (!rdbuf)
              goto LABEL_560;
            width = v316->__width_;
            v115 = width <= 14;
            v323 = width - 14;
            v324 = v115 ? 0 : v323;
            if (v321 - "\t\tRenderable: " >= 1
              && (*(uint64_t (**)(void *, const char *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, "\t\tRenderable: ", v321 - "\t\tRenderable: ") != v321 - "\t\tRenderable: ")
            {
              goto LABEL_560;
            }
            if (v324 >= 1)
            {
              if ((unint64_t)v324 >= 0x17)
              {
                v359 = v321;
                v326 = (v324 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v324 | 7) != 0x17)
                  v326 = v324 | 7;
                v327 = v326 + 1;
                v325 = (std::locale::__imp *)operator new(v326 + 1);
                v374 = v324;
                v375 = v327 | 0x8000000000000000;
                v373.__locale_ = v325;
                v321 = v359;
              }
              else
              {
                HIBYTE(v375) = v324;
                v325 = (std::locale::__imp *)&v373;
              }
              memset(v325, v319, v324);
              *((_BYTE *)v325 + v324) = 0;
              if (v375 >= 0)
                v328 = &v373;
              else
                v328 = v373.__locale_;
              v329 = (*(uint64_t (**)(void *, void *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, v328, v324);
              v330 = v329;
              if (SHIBYTE(v375) < 0)
              {
                operator delete(v373.__locale_);
                if (v330 != v324)
                  goto LABEL_560;
              }
              else if (v329 != v324)
              {
                goto LABEL_560;
              }
            }
            v331 = "\t\tRenderable: " - v321 + 14;
            if (v331 < 1
              || (*(uint64_t (**)(void *, char *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, v321, "\t\tRenderable: " - v321 + 14) == v331)
            {
              v316->__width_ = 0;
              v253 = (_QWORD *)(a2 + 16);
              goto LABEL_561;
            }
LABEL_560:
            v253 = (_QWORD *)(a2 + 16);
            std::ios_base::clear((std::ios_base *)(a2 + 16 + *(_QWORD *)(*(_QWORD *)(a2 + 16) - 24)), *(_DWORD *)(a2 + 16 + *(_QWORD *)(*(_QWORD *)(a2 + 16) - 24) + 32) | 5);
LABEL_561:
            MEMORY[0x1A1AF49EC](__dst);
            v332 = (_QWORD *)std::ostream::operator<<();
            MEMORY[0x1A1AF49E0](__dst, v332);
            if (!LOBYTE(__dst[0].__locale_))
              goto LABEL_531;
            v333 = (char *)v332 + *(_QWORD *)(*v332 - 24);
            v334 = *((_QWORD *)v333 + 5);
            v335 = *((_DWORD *)v333 + 2);
            v336 = *((_DWORD *)v333 + 36);
            if (v336 == -1)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v332 + *(_QWORD *)(*v332 - 24)));
              v337 = std::locale::use_facet(&v373, MEMORY[0x1E0DE4A90]);
              v336 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v337->__vftable[2].~facet_0)(v337, 32);
              std::locale::~locale(&v373);
              *((_DWORD *)v333 + 36) = v336;
            }
            if ((v335 & 0xB0) == 0x20)
              v338 = "";
            else
              v338 = "\n";
            if (v334)
            {
              v339 = *((_QWORD *)v333 + 3);
              v115 = v339 <= 1;
              v340 = v339 - 1;
              v341 = v115 ? 0 : v340;
              if (v338 - "\n" < 1
                || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v334 + 96))(v334, "\n", v338 - "\n") == v338 - "\n")
              {
                if ((uint64_t)v341 < 1)
                  goto LABEL_587;
                if (v341 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                v360 = v338;
                if (v341 >= 0x17)
                {
                  v343 = (v341 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v341 | 7) != 0x17)
                    v343 = v341 | 7;
                  v344 = v343 + 1;
                  v342 = (std::locale::__imp *)operator new(v343 + 1);
                  v374 = v341;
                  v375 = v344 | 0x8000000000000000;
                  v373.__locale_ = v342;
                }
                else
                {
                  HIBYTE(v375) = v341;
                  v342 = (std::locale::__imp *)&v373;
                }
                memset(v342, v336, v341);
                *((_BYTE *)v342 + v341) = 0;
                if (v375 >= 0)
                  v345 = &v373;
                else
                  v345 = v373.__locale_;
                v346 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v334 + 96))(v334, v345, v341);
                v347 = v346;
                v338 = v360;
                if (SHIBYTE(v375) < 0)
                {
                  operator delete(v373.__locale_);
                  if (v347 == v341)
                  {
LABEL_587:
                    v348 = "\n" - v338 + 1;
                    if (v348 < 1
                      || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v334 + 96))(v334, v338, "\n" - v338 + 1) == v348)
                    {
                      *((_QWORD *)v333 + 3) = 0;
                      v253 = (_QWORD *)(a2 + 16);
                      goto LABEL_531;
                    }
                  }
                }
                else if (v346 == v341)
                {
                  goto LABEL_587;
                }
              }
            }
            std::ios_base::clear((std::ios_base *)((char *)v332 + *(_QWORD *)(*v332 - 24)), *(_DWORD *)((char *)v332 + *(_QWORD *)(*v332 - 24) + 32) | 5);
            v253 = (_QWORD *)(a2 + 16);
LABEL_531:
            MEMORY[0x1A1AF49EC](__dst);
            v315 += 8;
            if (v315 == v297)
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\t]\n", 3);
              break;
            }
          }
        }
        v293 = v356;
        if (v298)
          operator delete(v298);
LABEL_493:
        v293 = (_QWORD *)*v293;
        if (!v293)
          break;
        goto LABEL_494;
      }
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"]\n", 2);
  v349 = (_QWORD **)v371;
  if ((_QWORD)v371)
  {
    do
    {
      v350 = *v349;
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v349[4]);
      operator delete(v349);
      v349 = (_QWORD **)v350;
    }
    while (v350);
  }
  v351 = v370[0];
  v370[0] = 0;
  if (v351)
    operator delete(v351);
}

void sub_19F8775C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::unordered_map<unsigned long,std::map<unsigned long,unsigned int>>::~unordered_map[abi:nn180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v14 = *a3;
  v10[5] = 0;
  v10[4] = 0;
  v10[2] = v14;
  v10[3] = v10 + 4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *v10 = *v25;
LABEL_58:
    *v25 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v24 + 8 * v5) = v13;
  if (*v10)
  {
    v26 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F877B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)const::$_2::operator()(_BYTE *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  size_t v12;
  unint64_t v13;
  const void **v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[3];
  _QWORD v23[3];
  uint64_t v24;
  unint64_t v25;
  void *__p;
  char v27;
  unint64_t v28;
  int v29;
  uint64_t v30;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v21);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"\t\t(size:", 8);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)", count:", 8);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)")\n", 2);
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v4);
  }
  if ((v29 & 0x10) != 0)
  {
    v13 = v28;
    if (v28 < v25)
    {
      v28 = v25;
      v13 = v25;
    }
    v14 = (const void **)&v24;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v12 = 0;
      a1[23] = 0;
      goto LABEL_25;
    }
    v14 = (const void **)v23;
    v13 = v23[2];
  }
  v15 = *v14;
  v12 = v13 - (_QWORD)*v14;
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v12 >= 0x17)
  {
    v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v16 = v12 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a1 + 1) = v12;
    *((_QWORD *)a1 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a1 = v18;
    a1 = v18;
    goto LABEL_24;
  }
  a1[23] = v12;
  if (v12)
LABEL_24:
    memmove(a1, v15, v12);
LABEL_25:
  a1[v12] = 0;
  v21[0] = *MEMORY[0x1E0DE4F50];
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v22[0] = v19;
  v22[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v30);
}

void sub_19F877D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long,std::map<unsigned long,unsigned int>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD **v2;

  v2 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2[4]);
    operator delete(v2);
  }
  return a1;
}

_QWORD *gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(_QWORD *result, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 != a5)
  {
    v6 = *(unsigned int *)(a5 + 4);
    v7 = v6 >> 7;
    v8 = *a3;
    v9 = (a3[1] - *a3) >> 3;
    if (v6 >> 7 >= v9)
      goto LABEL_17;
    v10 = *(_QWORD *)(v8 + 8 * v7);
    if (!v10)
      goto LABEL_17;
    v11 = *(unsigned __int16 *)(v10 + 2 * (v6 & 0x7F));
    v13 = a3[3];
    v12 = a3[4];
    if (v11 >= (v12 - v13) >> 3)
      goto LABEL_17;
    v14 = v13 + 8 * v11;
    v15 = v14 != v12 && *(_DWORD *)(v14 + 4) == (_DWORD)v6;
    if (!v15
      || v7 >= (uint64_t)(a4[1] - *a4) >> 3
      || (v16 = *(_QWORD *)(*a4 + 8 * v7)) == 0
      || (v17 = *(unsigned __int16 *)(v16 + 2 * (v6 & 0x7F)), v19 = a4[3], v18 = a4[4], v17 >= (v18 - v19) >> 3)
      || ((v20 = v19 + 8 * v17, v20 != v18) ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v6) : (v21 = 0), !v21))
    {
LABEL_17:
      result[3] = a5 + 8;
      if (a5 + 8 != v5)
      {
        v22 = a5 + 16;
        do
        {
          v23 = *(unsigned int *)(v22 - 4);
          v24 = v23 >> 7;
          if (v23 >> 7 < v9)
          {
            v25 = *(_QWORD *)(v8 + 8 * v24);
            if (v25)
            {
              v26 = *(unsigned __int16 *)(v25 + 2 * (v23 & 0x7F));
              v28 = a3[3];
              v27 = a3[4];
              if (v26 < (v27 - v28) >> 3)
              {
                v29 = v28 + 8 * v26;
                if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v23 && v24 < (uint64_t)(a4[1] - *a4) >> 3)
                {
                  v31 = *(_QWORD *)(*a4 + 8 * v24);
                  if (v31)
                  {
                    v32 = *(unsigned __int16 *)(v31 + 2 * (v23 & 0x7F));
                    v34 = a4[3];
                    v33 = a4[4];
                    if (v32 < (v33 - v34) >> 3)
                    {
                      v35 = v34 + 8 * v32;
                      if (v35 != v33 && *(_DWORD *)(v35 + 4) == (_DWORD)v23)
                        break;
                    }
                  }
                }
              }
            }
          }
          result[3] = v22;
          v15 = v22 == v5;
          v22 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)::$_0,std::allocator<md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)::$_0>,void ()(md::RenderBatch const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)::$_0,std::allocator<md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)::$_0>,void ()(md::RenderBatch const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9128;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)::$_0,std::allocator<md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)::$_0>,void ()(md::RenderBatch const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9128;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)::$_0,std::allocator<md::MeshRenderableLogic::buildDebugDetailsString(std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>> &)::$_0>,void ()(md::RenderBatch const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD v30[3];
  unint64_t v31;
  _QWORD *v32;

  v2 = *a2;
  v30[0] = &v31;
  v30[1] = &v31;
  v30[2] = &v31;
  v31 = 0;
  v3 = *(unsigned int *)(v2 + 224);
  if ((_DWORD)v3 == -1)
  {
    v27 = std::__throw_bad_variant_access[abi:nn180100]();
    return std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v27, v28, v29);
  }
  else
  {
    v32 = v30;
    ((void (*)(_QWORD **, uint64_t))off_1E42EF858[v3])(&v32, v2);
    v5 = (_QWORD *)std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(*(_QWORD *)(a1 + 8), v31, (uint64_t *)&v31)[4];
    if (v5)
    {
      v6 = *(_QWORD *)(v2 + 264);
      do
      {
        v7 = v5[4];
        if (v6 >= v7)
        {
          if (v7 >= v6)
          {
            result = std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(*(_QWORD *)(a1 + 8), v31, (uint64_t *)&v31);
            v9 = result;
            v10 = *(uint64_t **)(v2 + 264);
            v12 = (uint64_t **)(result + 4);
            v11 = (uint64_t *)result[4];
            if (v11)
            {
              while (1)
              {
                while (1)
                {
                  v13 = (uint64_t **)v11;
                  v14 = v11[4];
                  if ((unint64_t)v10 >= v14)
                    break;
                  v11 = *v13;
                  v12 = v13;
                  if (!*v13)
                    goto LABEL_15;
                }
                if (v14 >= (unint64_t)v10)
                  break;
                v11 = v13[1];
                if (!v11)
                {
                  v12 = v13 + 1;
                  goto LABEL_15;
                }
              }
            }
            else
            {
              v13 = (uint64_t **)(result + 4);
LABEL_15:
              v15 = (uint64_t *)v13;
              v13 = (uint64_t **)operator new(0x30uLL);
              v13[4] = v10;
              *((_DWORD *)v13 + 10) = 0;
              *v13 = 0;
              v13[1] = 0;
              v13[2] = v15;
              *v12 = (uint64_t *)v13;
              v16 = *(_QWORD *)v9[3];
              v17 = (uint64_t *)v13;
              if (v16)
              {
                v9[3] = v16;
                v17 = *v12;
              }
              result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v9[4], v17);
              ++v9[5];
            }
            v18 = *((_DWORD *)v13 + 10) + 1;
            goto LABEL_30;
          }
          ++v5;
        }
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    result = std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(*(_QWORD *)(a1 + 8), v31, (uint64_t *)&v31);
    v19 = result;
    v20 = *(uint64_t **)(v2 + 264);
    v22 = (uint64_t **)(result + 4);
    v21 = (uint64_t *)result[4];
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v21;
          v23 = v21[4];
          if ((unint64_t)v20 >= v23)
            break;
          v21 = *v13;
          v22 = v13;
          if (!*v13)
            goto LABEL_26;
        }
        if (v23 >= (unint64_t)v20)
          break;
        v21 = v13[1];
        if (!v21)
        {
          v22 = v13 + 1;
          goto LABEL_26;
        }
      }
    }
    else
    {
      v13 = (uint64_t **)(result + 4);
LABEL_26:
      v24 = (uint64_t *)v13;
      v13 = (uint64_t **)operator new(0x30uLL);
      v13[4] = v20;
      *((_DWORD *)v13 + 10) = 0;
      *v13 = 0;
      v13[1] = 0;
      v13[2] = v24;
      *v22 = (uint64_t *)v13;
      v25 = *(_QWORD *)v19[3];
      v26 = (uint64_t *)v13;
      if (v25)
      {
        v19[3] = v25;
        v26 = *v22;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v19[4], v26);
      ++v19[5];
    }
    v18 = 1;
LABEL_30:
    *((_DWORD *)v13 + 10) = v18;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v14 = *a3;
  v10[5] = 0;
  v10[4] = 0;
  v10[2] = v14;
  v10[3] = v10 + 4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *v10 = *v25;
LABEL_58:
    *v25 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v24 + 8 * v5) = v13;
  if (*v10)
  {
    v26 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F8784C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::map<unsigned long,unsigned int>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorI10overloadedIJZZNK2md19MeshRenderableLogic23buildDebugDetailsStringERNS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3__0clEPKNS9_11RenderBatchEEUlRKNS9_22MaterialRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlRKNS9_26DynamicTypedRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlRKNS9_27MaterialDecalRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlT_E_EEEEJRKNS0_6__baseILNS0_6_TraitE1EJSM_SQ_SU_EEEEEEDcSY_DpT0_(_QWORD ***result)
{
  ***result = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorI10overloadedIJZZNK2md19MeshRenderableLogic23buildDebugDetailsStringERNS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3__0clEPKNS9_11RenderBatchEEUlRKNS9_22MaterialRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlRKNS9_26DynamicTypedRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlRKNS9_27MaterialDecalRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlT_E_EEEEJRKNS0_6__baseILNS0_6_TraitE1EJSM_SQ_SU_EEEEEEDcSY_DpT0_(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorI10overloadedIJZZNK2md19MeshRenderableLogic23buildDebugDetailsStringERNS_18basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEEENK3__0clEPKNS9_11RenderBatchEEUlRKNS9_22MaterialRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlRKNS9_26DynamicTypedRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlRKNS9_27MaterialDecalRenderBatchKeyEE_ZZNKSA_23buildDebugDetailsStringESH_ENKSI_clESL_EUlT_E_EEEEJRKNS0_6__baseILNS0_6_TraitE1EJSM_SQ_SU_EEEEEEDcSY_DpT0_(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 16) = 2;
  return result;
}

_QWORD *md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(uint64_t *a1, unint64_t a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  float64x2_t v11;
  __n128 v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  unint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  int *v114;
  unsigned int *v115;
  char *v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  char v121;
  char v123;
  char v124;
  md::RegistryManager *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  _BOOL4 v132;
  _QWORD *RegistryByIdentifier;
  _QWORD *v134;
  _QWORD *RegistryToInject;
  _BOOL4 v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  BOOL v146;
  uint64_t *v147;
  _QWORD *result;
  int8x8_t v149;
  uint8x8_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *p_shared_owners;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  char *v169;
  char v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  char *v181;
  char v182;
  _QWORD *v183;
  uint64_t v184;
  unsigned int v185;
  char v186;
  unint64_t v187;
  uint8x8_t v188;
  NSObject *v189;
  int v190;
  NSObject *v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  void **v197;
  unint64_t v198;
  uint64_t v199;
  float v200;
  float v201;
  _BOOL8 v202;
  unint64_t v203;
  unint64_t v204;
  size_t prime;
  void *v206;
  void *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  size_t v211;
  size_t v212;
  size_t v213;
  _QWORD *v214;
  size_t v215;
  uint64_t v216;
  unint64_t v217;
  uint8x8_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  size_t v225;
  _QWORD *v226;
  _QWORD *v227;
  unint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  float64x2_t *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  __n128 v244;
  uint64_t v245;
  _DWORD *v246;
  _QWORD *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void *v257;
  unint64_t *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  char v264;
  _BYTE *v265;
  int *v266;
  _BYTE *v267;
  char *v268;
  uint64_t *v269;
  char *v270;
  uint64_t v271;
  unsigned int v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char v276;
  int v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t v280;
  unint64_t v281;
  _BYTE v282[24];
  uint64_t v283[7];
  char v284;
  char v285;
  _BYTE v286[15];
  char v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  _OWORD v290[2];
  int64x2_t v291;
  std::__shared_weak_count *v292;
  char v293;
  _QWORD v294[3];
  _QWORD *v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  _QWORD v299[3];
  _QWORD *v300;
  _BYTE buf[48];
  uint64_t v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  char v312;
  char v313;
  int v314;
  char v315;
  char v316;
  char v317;
  __int128 v318;
  _BYTE *v319;
  __int128 *v320;
  uint64_t v321;

  v6 = a2;
  v7 = a1;
  v321 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = (void **)(*a1 + 336);
  v10 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v9, a2);
  if (v10)
    goto LABEL_2;
  v279 = v7;
  v15 = *(_QWORD *)v7[1];
  v16 = (_QWORD *)gdc::Registry::storage<md::components::MarketMask>(v15);
  v17 = HIDWORD(v6);
  v18 = v6 >> 39;
  v19 = v16[4];
  if (v6 >> 39 < (v16[5] - v19) >> 3
    && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
    && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v6) & 0x7F)), v23 = v16[7], v22 = v16[8], v21 < (v22 - v23) >> 3)
    && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == HIDWORD(v6)) : (v25 = 0), v25))
  {
    v275 = v16[11];
    v26 = v16[10] + v21;
  }
  else
  {
    v26 = v16[11];
    v275 = v26;
  }
  v273 = v26;
  v27 = (_QWORD *)gdc::Registry::storage<md::components::GeneratedTexture>(v15);
  v28 = v27[4];
  if (v18 < (v27[5] - v28) >> 3
    && (v29 = *(_QWORD *)(v28 + 8 * v18)) != 0
    && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v6) & 0x7F)), v32 = v27[7], v31 = v27[8], v30 < (v31 - v32) >> 3)
    && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == HIDWORD(v6)) : (v34 = 0), v34))
  {
    v271 = v27[11];
    v35 = v27[10] + 16 * v30;
  }
  else
  {
    v35 = v27[11];
    v271 = v35;
  }
  v269 = (uint64_t *)v35;
  v36 = (_QWORD *)gdc::Registry::storage<md::components::Visibility>(v15);
  v37 = v36[4];
  if (v18 < (v36[5] - v37) >> 3
    && (v38 = *(_QWORD *)(v37 + 8 * v18)) != 0
    && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v6) & 0x7F)), v41 = v36[7], v40 = v36[8], v39 < (v40 - v41) >> 3)
    && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == HIDWORD(v6)) : (v43 = 0), v43))
  {
    v265 = (_BYTE *)v36[11];
    v44 = v36[10] + v39;
  }
  else
  {
    v44 = v36[11];
    v265 = (_BYTE *)v44;
  }
  v267 = (_BYTE *)v44;
  v45 = (_QWORD *)gdc::Registry::storage<md::components::Collapsible>(v15);
  v46 = v45[4];
  if (v18 < (v45[5] - v46) >> 3
    && (v47 = *(_QWORD *)(v46 + 8 * v18)) != 0
    && (v48 = *(unsigned __int16 *)(v47 + 2 * (HIDWORD(v6) & 0x7F)), v50 = v45[7], v49 = v45[8], v48 < (v49 - v50) >> 3)
    && ((v51 = v50 + 8 * v48, v51 != v49) ? (v52 = *(_DWORD *)(v51 + 4) == HIDWORD(v6)) : (v52 = 0), v52))
  {
    v263 = v45[11];
    v53 = v45[10] + v48;
  }
  else
  {
    v53 = v45[11];
    v263 = v53;
  }
  v262 = v53;
  v54 = (_QWORD *)gdc::Registry::storage<md::components::CustomRenderState>(v15);
  v55 = v54[4];
  if (v18 < (v54[5] - v55) >> 3
    && (v56 = *(_QWORD *)(v55 + 8 * v18)) != 0
    && (v57 = *(unsigned __int16 *)(v56 + 2 * (HIDWORD(v6) & 0x7F)), v59 = v54[7], v58 = v54[8], v57 < (v58 - v59) >> 3)
    && ((v60 = v59 + 8 * v57, v60 != v58) ? (v61 = *(_DWORD *)(v60 + 4) == HIDWORD(v6)) : (v61 = 0), v61))
  {
    v261 = v54[11];
    v62 = v54[10] + 24 * v57;
  }
  else
  {
    v62 = v54[11];
    v261 = v62;
  }
  v260 = v62;
  v63 = (_QWORD *)gdc::Registry::storage<md::components::IntendedSceneLayer>(v15);
  v64 = v63[4];
  v281 = v6;
  if (v18 < (v63[5] - v64) >> 3
    && (v65 = *(_QWORD *)(v64 + 8 * v18)) != 0
    && (v66 = *(unsigned __int16 *)(v65 + 2 * (HIDWORD(v6) & 0x7F)), v68 = v63[7], v67 = v63[8], v66 < (v67 - v68) >> 3)
    && ((v69 = v68 + 8 * v66, v69 != v67) ? (v70 = *(_DWORD *)(v69 + 4) == HIDWORD(v6)) : (v70 = 0), v70))
  {
    v259 = (char *)v63[11];
    v71 = (char *)(v63[10] + v66);
  }
  else
  {
    v71 = (char *)v63[11];
    v259 = v71;
  }
  v72 = (_QWORD *)gdc::Registry::storage<md::components::AlbedoTint>(v15);
  v73 = v72[4];
  if (v18 < (v72[5] - v73) >> 3
    && (v74 = *(_QWORD *)(v73 + 8 * v18)) != 0
    && (v75 = *(unsigned __int16 *)(v74 + 2 * (HIDWORD(v281) & 0x7F)), v77 = v72[7],
                                                                       v76 = v72[8],
                                                                       v75 < (v76 - v77) >> 3)
    && ((v78 = v77 + 8 * v75, v78 != v76) ? (v79 = *(_DWORD *)(v78 + 4) == (_DWORD)v17) : (v79 = 0), v79))
  {
    v80 = v72[11];
    v81 = v72[10] + 16 * v75;
  }
  else
  {
    v80 = v72[11];
    v81 = v80;
  }
  v258 = a4;
  v278 = a3;
  v82 = (_QWORD *)gdc::Registry::storage<md::components::PositionScaleFactor>(v15);
  v83 = v82[4];
  if (v18 < (v82[5] - v83) >> 3
    && (v84 = *(_QWORD *)(v83 + 8 * v18)) != 0
    && (v85 = *(unsigned __int16 *)(v84 + 2 * (HIDWORD(v281) & 0x7F)), v87 = v82[7],
                                                                       v86 = v82[8],
                                                                       v85 < (v86 - v87) >> 3)
    && ((v88 = v87 + 8 * v85, v88 != v86) ? (v89 = *(_DWORD *)(v88 + 4) == (_DWORD)v17) : (v89 = 0), v89))
  {
    v90 = v82[11];
    v91 = v82[10] + 4 * v85;
  }
  else
  {
    v90 = v82[11];
    v91 = v90;
  }
  v280 = v8;
  v92 = (_QWORD *)gdc::Registry::storage<md::components::CustomZIndex>(v15);
  v93 = v92[4];
  v277 = v17;
  if (v18 < (v92[5] - v93) >> 3
    && (v94 = *(_QWORD *)(v93 + 8 * v18)) != 0
    && (v95 = *(unsigned __int16 *)(v94 + 2 * (HIDWORD(v281) & 0x7F)), v97 = v92[7],
                                                                       v96 = v92[8],
                                                                       v95 < (v96 - v97) >> 3)
    && ((v98 = v97 + 8 * v95, v98 != v96) ? (v99 = *(_DWORD *)(v98 + 4) == (_DWORD)v17) : (v99 = 0), v99))
  {
    v100 = v92[11];
    v101 = v92[10] + 4 * v95;
  }
  else
  {
    v100 = v92[11];
    v101 = v100;
  }
  v102 = (_QWORD *)gdc::Registry::storage<md::components::StencilBucket>(v15);
  v103 = v102[4];
  if (v18 < (v102[5] - v103) >> 3
    && (v104 = *(_QWORD *)(v103 + 8 * v18)) != 0
    && (v105 = *(unsigned __int16 *)(v104 + 2 * (HIDWORD(v281) & 0x7F)),
        v107 = v102[7],
        v106 = v102[8],
        v105 < (v106 - v107) >> 3)
    && ((v108 = v107 + 8 * v105, v108 != v106) ? (v109 = *(_DWORD *)(v108 + 4) == v277) : (v109 = 0), v109))
  {
    v110 = v102[11];
    v111 = v102[10] + v105;
  }
  else
  {
    v110 = v102[11];
    v111 = v110;
  }
  v113 = v265;
  v112 = v267;
  if (v101 == v100)
    v114 = 0;
  else
    v114 = (int *)v101;
  v266 = v114;
  if (v91 == v90)
    v115 = 0;
  else
    v115 = (unsigned int *)v91;
  if (v81 == v80)
    v81 = 0;
  if (v71 == v259)
    v116 = 0;
  else
    v116 = v71;
  if (v260 == v261)
    v117 = 0;
  else
    v117 = v260;
  if (v269 == (uint64_t *)v271)
    v118 = 0;
  else
    v118 = v269;
  if (v273 == v275)
    v119 = 0;
  else
    v119 = (char *)v273;
  if (v111 == v110)
    v120 = 0;
  else
    v120 = (char *)v111;
  v268 = v120;
  v270 = v119;
  v121 = 1;
  if (v112 != v113 && v112)
    v121 = *v112 != 0;
  v123 = v262 != v263 && v262 != 0;
  if (v116)
  {
    v276 = *v116;
    if (v81)
      goto LABEL_119;
  }
  else
  {
    v276 = 0;
    if (v81)
    {
LABEL_119:
      v264 = *(_BYTE *)v81;
      *(_QWORD *)&v318 = *(_QWORD *)(v81 + 1);
      *(_QWORD *)((char *)&v318 + 7) = *(_QWORD *)(v81 + 8);
      if (v115)
        goto LABEL_120;
LABEL_171:
      v274 = 0;
      v272 = 0;
      if (v117)
        goto LABEL_121;
LABEL_172:
      v124 = 0;
      goto LABEL_173;
    }
  }
  v264 = 0;
  if (!v115)
    goto LABEL_171;
LABEL_120:
  v272 = *v115;
  v274 = 0x100000000;
  if (!v117)
    goto LABEL_172;
LABEL_121:
  v124 = *(_BYTE *)(v117 + 16) != 0;
LABEL_173:
  v155 = operator new();
  md::InstanceData::InstanceData(v155, 1u, 1);
  *(_QWORD *)buf = v155;
  v156 = (std::__shared_weak_count *)operator new();
  v156->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v156->__shared_owners_;
  v156->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6BC0;
  v156->__shared_weak_owners_ = 0;
  v156[1].__vftable = (std::__shared_weak_count_vtbl *)v155;
  *(_QWORD *)&buf[8] = v156;
  md::MeshRenderable::MeshRenderable((uint64_t)v290, 1, v278, buf);
  do
    v158 = __ldaxr(p_shared_owners);
  while (__stlxr(v158 - 1, p_shared_owners));
  if (!v158)
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
  }
  v159 = *(_QWORD *)v291.i64[0];
  v160 = *(_QWORD *)(*(_QWORD *)v291.i64[0] + 48) - *(_QWORD *)(*(_QWORD *)v291.i64[0] + 40);
  v161 = *(_QWORD *)(*(_QWORD *)v291.i64[0] + 72);
  v162 = v160 % *(_QWORD *)(*(_QWORD *)v291.i64[0] + 8);
  *(_DWORD *)v161 = 1065353216;
  *(_QWORD *)(v161 + 12) = 0;
  *(_QWORD *)(v161 + 4) = 0;
  *(_DWORD *)(v161 + 20) = 1065353216;
  *(_QWORD *)(v161 + 24) = 0;
  *(_QWORD *)(v161 + 32) = 0;
  *(_DWORD *)(v161 + 40) = 1065353216;
  *(_QWORD *)(v161 + 52) = 0;
  *(_QWORD *)(v161 + 44) = 0;
  *(_DWORD *)(v161 + 60) = 1065353216;
  v163 = v160 - v162;
  if (v163)
  {
    if (*(_QWORD *)(v159 + 64) > v163)
      v163 = *(_QWORD *)(v159 + 64);
    *(_QWORD *)(v159 + 56) = 0;
    *(_QWORD *)(v159 + 64) = v163;
  }
  *(_BYTE *)(v291.i64[0] + 20) = 1;
  v164 = v279[2];
  v165 = *v258;
  if (v118)
  {
    v166 = (std::__shared_weak_count *)v118[1];
    v288 = *v118;
    v289 = v166;
    if (v166)
    {
      v167 = (unint64_t *)&v166->__shared_owners_;
      do
        v168 = __ldxr(v167);
      while (__stxr(v168 + 1, v167));
    }
    v169 = v270;
    if (v270)
      goto LABEL_186;
  }
  else
  {
    v166 = 0;
    v288 = 0;
    v289 = 0;
    v169 = v270;
    if (v270)
    {
LABEL_186:
      v170 = *v169;
      goto LABEL_189;
    }
  }
  v170 = 3;
LABEL_189:
  v285 = 0;
  v287 = 0;
  if (v81)
  {
    v285 = v264;
    *(_QWORD *)v286 = v318;
    *(_QWORD *)&v286[7] = *(_QWORD *)((char *)&v318 + 7);
    v287 = 1;
  }
  LOBYTE(v283[0]) = 0;
  v284 = 0;
  v282[0] = 0;
  v282[16] = 0;
  md::MeshRenderableBuilder::buildRenderable((uint64_t)buf, v164, (uint64_t)v290, v258 + 1, v165, &v288, v121, v276, v170, v123, 0, (uint64_t)&v285, v274 | v272, SBYTE4(v274), (v274 | (unint64_t)v272) >> 48, v124, v283, (uint64_t)v282, 0);
  if (v118)
  {
    if (!v166)
      goto LABEL_201;
    v171 = (unint64_t *)&v166->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
  }
  else
  {
    if (!v166)
      goto LABEL_201;
    v173 = (unint64_t *)&v166->__shared_owners_;
    do
      v172 = __ldaxr(v173);
    while (__stlxr(v172 - 1, v173));
  }
  if (!v172)
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
  }
LABEL_201:
  if (v266)
  {
    v314 = *v266;
    v315 = 1;
  }
  if (!v117)
  {
LABEL_214:
    v181 = v268;
    if (!v268)
      goto LABEL_218;
    goto LABEL_215;
  }
  v174 = *(_QWORD *)v117;
  if (v313)
  {
    v175 = *(std::__shared_weak_count **)(v117 + 8);
    if (v175)
    {
      v176 = (unint64_t *)&v175->__shared_owners_;
      do
        v177 = __ldxr(v176);
      while (__stxr(v177 + 1, v176));
    }
    v178 = v311;
    v310 = v174;
    v311 = v175;
    if (v178)
    {
      v179 = (unint64_t *)&v178->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
    v312 = *(_BYTE *)(v117 + 16);
    goto LABEL_214;
  }
  v310 = *(_QWORD *)v117;
  v220 = *(std::__shared_weak_count **)(v117 + 8);
  v311 = v220;
  if (v220)
  {
    v221 = (unint64_t *)&v220->__shared_owners_;
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
  }
  v312 = *(_BYTE *)(v117 + 16);
  v313 = 1;
  v181 = v268;
  if (v268)
  {
LABEL_215:
    v182 = *v181;
    if (!v317)
      v317 = 1;
    v316 = v182;
  }
LABEL_218:
  v183 = *(_QWORD **)(v280 + 216);
  if (!v183)
  {
    geo::Pool<md::MaterialRenderable>::allocateSlab((uint64_t **)(v280 + 176));
    v183 = *(_QWORD **)(v280 + 216);
  }
  *(_QWORD *)(v280 + 216) = *v183;
  md::MaterialRenderable::MaterialRenderable((uint64_t)v183, (const md::MaterialRenderable *)buf);
  v184 = *(_QWORD *)v279[1];
  if (v184)
  {
    v185 = *(unsigned __int16 *)(v184 + 40);
    LODWORD(v156) = v185 >> 8;
    v186 = 1;
  }
  else
  {
    LOBYTE(v185) = 0;
    v186 = 0;
  }
  v187 = *(_QWORD *)(v280 + 344);
  if (v187)
  {
    v188 = (uint8x8_t)vcnt_s8((int8x8_t)v187);
    v188.i16[0] = vaddlv_u8(v188);
    if (v188.u32[0] > 1uLL)
    {
      v118 = (uint64_t *)v281;
      if (v187 <= v281)
        v118 = (uint64_t *)(v281 % v187);
    }
    else
    {
      v118 = (uint64_t *)((v187 - 1) & v281);
    }
    v197 = (void **)*((_QWORD *)*v9 + (_QWORD)v118);
    if (v197)
    {
      v10 = *v197;
      if (*v197)
      {
        if (v188.u32[0] < 2uLL)
        {
          while (1)
          {
            v199 = v10[1];
            if (v199 == v281)
            {
              if (__PAIR64__(*((unsigned __int16 *)v10 + 9), *((unsigned __int16 *)v10 + 8)) == __PAIR64__(WORD1(v281), (unsigned __int16)v281)&& *((_DWORD *)v10 + 5) == v277)
              {
                goto LABEL_277;
              }
            }
            else if ((uint64_t *)(v199 & (v187 - 1)) != v118)
            {
              goto LABEL_278;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_278;
          }
        }
        do
        {
          v198 = v10[1];
          if (v198 == v281)
          {
            if (__PAIR64__(*((unsigned __int16 *)v10 + 9), *((unsigned __int16 *)v10 + 8)) == __PAIR64__(WORD1(v281), (unsigned __int16)v281)&& *((_DWORD *)v10 + 5) == v277)
            {
LABEL_277:
              a3 = v278;
              v7 = v279;
              v8 = v280;
              v6 = v281;
              goto LABEL_343;
            }
          }
          else
          {
            if (v198 >= v187)
              v198 %= v187;
            if ((uint64_t *)v198 != v118)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_278:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v281;
  v10[2] = v281;
  v10[3] = v183;
  *((_BYTE *)v10 + 32) = 0;
  *((_BYTE *)v10 + 34) = 0;
  *((_WORD *)v10 + 18) = v185 | (unsigned __int16)((_WORD)v156 << 8);
  *((_BYTE *)v10 + 38) = v186;
  v6 = v281;
  v10[5] = v281;
  v8 = v280;
  v200 = (float)(unint64_t)(*(_QWORD *)(v280 + 360) + 1);
  v201 = *(float *)(v280 + 368);
  if (v187 && (float)(v201 * (float)v187) >= v200)
  {
    v7 = v279;
    goto LABEL_333;
  }
  v202 = 1;
  if (v187 >= 3)
    v202 = (v187 & (v187 - 1)) != 0;
  v203 = v202 | (2 * v187);
  v204 = vcvtps_u32_f32(v200 / v201);
  if (v203 <= v204)
    prime = v204;
  else
    prime = v203;
  v7 = v279;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v187 = *(_QWORD *)(v280 + 344);
  }
  if (prime > v187)
  {
LABEL_291:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v206 = operator new(8 * prime);
    v207 = *v9;
    *v9 = v206;
    if (v207)
      operator delete(v207);
    v208 = 0;
    *(_QWORD *)(v280 + 344) = prime;
    do
      *((_QWORD *)*v9 + v208++) = 0;
    while (prime != v208);
    v209 = *(_QWORD **)(v280 + 352);
    if (!v209)
      goto LABEL_319;
    v210 = v280 + 352;
    v211 = v209[1];
    v212 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v213 = v211 & v212;
      *((_QWORD *)*v9 + v213) = v210;
      while (1)
      {
        v214 = (_QWORD *)*v209;
        if (!*v209)
          break;
        v215 = v214[1] & v212;
        if (v215 == v213)
        {
          v209 = (_QWORD *)*v209;
        }
        else if (*((_QWORD *)*v9 + v215))
        {
          *v209 = *v214;
          v216 = 8 * v215;
          *v214 = **(_QWORD **)((char *)*v9 + v216);
          **(_QWORD **)((char *)*v9 + v216) = v214;
        }
        else
        {
          *((_QWORD *)*v9 + v215) = v209;
          v209 = v214;
          v213 = v215;
        }
      }
LABEL_319:
      v187 = prime;
      goto LABEL_320;
    }
    if (v211 >= prime)
      v211 %= prime;
    *((_QWORD *)*v9 + v211) = v210;
    v223 = (_QWORD *)*v209;
    if (!*v209)
      goto LABEL_319;
    while (1)
    {
      v225 = v223[1];
      if (v225 >= prime)
        v225 %= prime;
      if (v225 != v211)
      {
        if (!*((_QWORD *)*v9 + v225))
        {
          *((_QWORD *)*v9 + v225) = v209;
          goto LABEL_324;
        }
        *v209 = *v223;
        v224 = 8 * v225;
        *v223 = **(_QWORD **)((char *)*v9 + v224);
        **(_QWORD **)((char *)*v9 + v224) = v223;
        v223 = v209;
      }
      v225 = v211;
LABEL_324:
      v209 = v223;
      v223 = (_QWORD *)*v223;
      v211 = v225;
      if (!v223)
        goto LABEL_319;
    }
  }
  if (prime >= v187)
    goto LABEL_320;
  v217 = vcvtps_u32_f32((float)*(unint64_t *)(v280 + 360) / *(float *)(v280 + 368));
  if (v187 < 3 || (v218 = (uint8x8_t)vcnt_s8((int8x8_t)v187), v218.i16[0] = vaddlv_u8(v218), v218.u32[0] > 1uLL))
  {
    v217 = std::__next_prime(v217);
  }
  else
  {
    v219 = 1 << -(char)__clz(v217 - 1);
    if (v217 >= 2)
      v217 = v219;
  }
  if (prime <= v217)
    prime = v217;
  if (prime < v187)
  {
    if (!prime)
    {
      v257 = *v9;
      *v9 = 0;
      if (v257)
        operator delete(v257);
      v187 = 0;
      *(_QWORD *)(v280 + 344) = 0;
      goto LABEL_320;
    }
    goto LABEL_291;
  }
  v187 = *(_QWORD *)(v280 + 344);
LABEL_320:
  if ((v187 & (v187 - 1)) != 0)
  {
    if (v187 <= v281)
      v118 = (uint64_t *)(v281 % v187);
    else
      v118 = (uint64_t *)v281;
  }
  else
  {
    v118 = (uint64_t *)((v187 - 1) & v281);
  }
LABEL_333:
  v226 = *v9;
  v227 = (_QWORD *)*((_QWORD *)*v9 + (_QWORD)v118);
  if (v227)
  {
    *v10 = *v227;
    a3 = v278;
LABEL_341:
    *v227 = v10;
    goto LABEL_342;
  }
  *v10 = *(_QWORD *)(v280 + 352);
  *(_QWORD *)(v280 + 352) = v10;
  v226[(_QWORD)v118] = v280 + 352;
  a3 = v278;
  if (*v10)
  {
    v228 = *(_QWORD *)(*v10 + 8);
    if ((v187 & (v187 - 1)) != 0)
    {
      if (v228 >= v187)
        v228 %= v187;
    }
    else
    {
      v228 &= v187 - 1;
    }
    v227 = (char *)*v9 + 8 * v228;
    goto LABEL_341;
  }
LABEL_342:
  ++*(_QWORD *)(v280 + 360);
  v184 = *(_QWORD *)v7[1];
LABEL_343:
  v299[0] = &off_1E4289EF0;
  v299[1] = v8;
  v300 = v299;
  v229 = *(_QWORD *)(v184 + 256) + 1;
  *(_QWORD *)(v184 + 256) = v229;
  v230 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v184 + 264), v229, (_QWORD *)(v184 + 256));
  v231 = (uint64_t)v300;
  if (!v300)
    goto LABEL_346;
  if (v300 != v299)
  {
    v231 = (*(uint64_t (**)(void))(*v300 + 16))();
LABEL_346:
    *(_QWORD *)&v297.f64[1] = v231;
    goto LABEL_348;
  }
  *(_QWORD *)&v297.f64[1] = &v296;
  (*(void (**)(uint64_t, _QWORD *))(v299[0] + 24))((uint64_t)v299, &v296);
LABEL_348:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v296, v230 + 3);
  v232 = *(float64x2_t **)&v297.f64[1];
  if (*(float64x2_t **)&v297.f64[1] == &v296)
  {
    v233 = 4;
    v232 = &v296;
  }
  else
  {
    if (!*(_QWORD *)&v297.f64[1])
      goto LABEL_353;
    v233 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)&v232->f64[0] + 8 * v233))();
LABEL_353:
  v234 = v300;
  if (v300 == v299)
  {
    v235 = 4;
    v234 = v299;
  }
  else
  {
    if (!v300)
      goto LABEL_358;
    v235 = 5;
  }
  (*(void (**)(void))(*v234 + 8 * v235))();
LABEL_358:
  md::MaterialRenderable::~MaterialRenderable((md::MaterialRenderable *)buf);
  *(_QWORD *)&v290[0] = &off_1E428F838;
  if (v293)
  {
    v236 = v292;
    if (v292)
    {
      v237 = (unint64_t *)&v292->__shared_owners_;
      do
        v238 = __ldaxr(v237);
      while (__stlxr(v238 - 1, v237));
      if (!v238)
      {
        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
        std::__shared_weak_count::__release_weak(v236);
      }
    }
  }
  v239 = (std::__shared_weak_count *)v291.i64[1];
  if (v291.i64[1])
  {
    v240 = (unint64_t *)(v291.i64[1] + 8);
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
LABEL_2:
  v11 = vcvtq_f64_f32(*(float32x2_t *)((char *)a3 + 44));
  v296 = vcvtq_f64_f32(*(float32x2_t *)((char *)a3 + 36));
  v297 = v11;
  v298 = vcvtq_f64_f32(*(float32x2_t *)((char *)a3 + 52));
  *(_OWORD *)buf = *((_OWORD *)a3 + 13);
  *(_OWORD *)&buf[32] = *(_OWORD *)(a3 + 29);
  v304 = *((_OWORD *)a3 + 16);
  v307 = *(_OWORD *)(a3 + 35);
  *(_QWORD *)&buf[16] = a3[28];
  v302 = a3[31];
  v305 = a3[34];
  v308 = a3[37];
  *(_QWORD *)&buf[24] = 0;
  v303 = 0;
  v306 = 0;
  v309 = 0x3FF0000000000000;
  v290[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v290[1] = xmmword_19FFB2E00;
  v291 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)&v318 = &off_1E42D8A68;
  *((_QWORD *)&v318 + 1) = v290;
  v319 = buf;
  v320 = &v318;
  v12.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)&v296, (uint64_t)&v318);
  v13 = v320;
  if (v320 == &v318)
  {
    v14 = 4;
    v13 = &v318;
    goto LABEL_123;
  }
  if (v320)
  {
    v14 = 5;
LABEL_123:
    (*(void (**)(__n128))(*(_QWORD *)v13 + 8 * v14))(v12);
  }
  if (!*((_BYTE *)v10 + 34))
    goto LABEL_142;
  v125 = *(md::RegistryManager **)(v8 + 136);
  v127 = *((_QWORD *)v125 + 48);
  v126 = *((_QWORD *)v125 + 49);
  v128 = *((unsigned __int16 *)v10 + 16);
  if (v127 == v126)
  {
    v129 = 0;
  }
  else
  {
    while (v128 != *(unsigned __int16 *)(*(_QWORD *)v127 + 40))
    {
      v127 += 8;
      if (v127 == v126)
      {
        v127 = *((_QWORD *)v125 + 49);
        break;
      }
    }
    v129 = v127 != v126;
  }
  v131 = *((_QWORD *)v125 + 60);
  v130 = *((_QWORD *)v125 + 61);
  if (v131 == v130)
  {
    v132 = 0;
  }
  else
  {
    while (v128 != *(unsigned __int16 *)(*(_QWORD *)v131 + 40))
    {
      v131 += 8;
      if (v131 == v130)
      {
        v131 = *((_QWORD *)v125 + 61);
        break;
      }
    }
    v132 = v131 != v130;
  }
  RegistryByIdentifier = (_QWORD *)md::RegistryManager::getRegistryByIdentifier(v125, v128);
  if (!*((_BYTE *)v10 + 34))
  {
LABEL_142:
    RegistryToInject = md::MeshRenderableLogic::findRegistryToInject(*(_QWORD *)(v8 + 136), (double *)v290);
    goto LABEL_143;
  }
  if (!v129 && !v132)
  {
    v152 = *(_QWORD *)(v8 + 136);
    v153 = *(_QWORD *)(v152 + 408);
    v154 = *(_QWORD *)(v152 + 416);
    if (v153 != v154)
    {
      while (*((unsigned __int16 *)v10 + 16) != *(unsigned __int16 *)(*(_QWORD *)v153 + 40))
      {
        v153 += 8;
        if (v153 == v154)
          goto LABEL_228;
      }
    }
    if (v153 == v154)
    {
LABEL_228:
      if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
      v189 = (id)GEOGetVectorKitMeshRenderableLogicLog(void)::log;
      if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
      {
        if (!*((_BYTE *)v10 + 34))
        {
LABEL_414:
          result = (_QWORD *)std::__throw_bad_optional_access[abi:nn180100]();
          __break(1u);
          return result;
        }
        v190 = *((unsigned __int16 *)v10 + 16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v190;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "isExiting()";
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MeshRenderableLogic.mm";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 517;
        _os_log_impl(&dword_19F029000, v189, OS_LOG_TYPE_ERROR, "[RenderableInjection] Injected registry %hu is not tracked: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x22u);
      }

    }
    md::MeshRenderableLogic::removeDynamicRenderableInjection(v8, v6);
    RegistryToInject = md::MeshRenderableLogic::findRegistryToInject(*(_QWORD *)(v8 + 136), (double *)v290);
    if (!*(_QWORD *)v7[1])
    {
      if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
      v191 = (id)GEOGetVectorKitMeshRenderableLogicLog(void)::log;
      if (os_log_type_enabled(v191, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "registry";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MeshRenderableLogic.mm";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 521;
        _os_log_impl(&dword_19F029000, v191, OS_LOG_TYPE_ERROR, "[RenderableInjection] Failed to find registry to re-inject into: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }

    }
    goto LABEL_143;
  }
  v134 = RegistryByIdentifier;
  if (!registryContainsInstance((double *)v290, RegistryByIdentifier))
  {
    RegistryToInject = md::MeshRenderableLogic::findRegistryToInject(*(_QWORD *)(v8 + 136), (double *)v290);
    if (RegistryToInject != v134)
    {
      md::MeshRenderableLogic::removeDynamicRenderableInjection(v8, v6);
LABEL_143:
      md::MeshRenderableLogic::injectDynamicRenderable(v8, v6, (uint64_t)RegistryToInject);
    }
  }
  v136 = *((_BYTE *)v10 + 34) == 0;
  v137 = (_QWORD *)gdc::Registry::storage<md::components::RenderableInjected>(*(_QWORD *)v7[1]);
  if (v136)
    return (_QWORD *)gdc::ComponentStorageWrapper<md::components::RenderableInjected>::remove(v137, v6);
  v138 = v137[4];
  if (v6 >> 39 >= (v137[5] - v138) >> 3)
    goto LABEL_158;
  v139 = *(_QWORD *)(v138 + 8 * (v6 >> 39));
  if (!v139)
    goto LABEL_158;
  v140 = *(unsigned __int16 *)(v139 + 2 * (HIDWORD(v6) & 0x7F));
  v142 = v137[7];
  v141 = v137[8];
  if (v140 >= (v141 - v142) >> 3)
    goto LABEL_158;
  v143 = v142 + 8 * v140;
  v144 = v143 != v141 && *(_DWORD *)(v143 + 4) == HIDWORD(v6);
  if (!v144 || ((v145 = v137[10], v145 + v140 != v137[11]) ? (v146 = v145 == 0) : (v146 = 1), v146))
  {
LABEL_158:
    v147 = (uint64_t *)gdc::Registry::storage<md::components::RenderableInjected>(*(_QWORD *)v7[1]);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v147, v6);
  }
  if (!*((_BYTE *)v10 + 34))
    goto LABEL_414;
  result = (_QWORD *)md::RegistryManager::getRegistryByIdentifier(*(md::RegistryManager **)(v8 + 136), *((unsigned __int16 *)v10 + 16));
  if (!result)
    return result;
  v149 = (int8x8_t)result[1];
  if (!*(_QWORD *)&v149)
    goto LABEL_381;
  v150 = (uint8x8_t)vcnt_s8(v149);
  v150.i16[0] = vaddlv_u8(v150);
  if (v150.u32[0] > 1uLL)
  {
    v151 = 0x64A448A5CD5D38DBLL;
    if (*(_QWORD *)&v149 <= 0x64A448A5CD5D38DBuLL)
      v151 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v149;
  }
  else
  {
    v151 = (*(_QWORD *)&v149 - 1) & 0x64A448A5CD5D38DBLL;
  }
  v192 = *(_QWORD **)(*result + 8 * v151);
  if (!v192)
    goto LABEL_381;
  v193 = (_QWORD *)*v192;
  if (!v193)
    goto LABEL_381;
  if (v150.u32[0] < 2uLL)
  {
    v194 = *(_QWORD *)&v149 - 1;
    while (1)
    {
      v196 = v193[1];
      if (v196 == 0x64A448A5CD5D38DBLL)
      {
        if (v193[2] == 0x64A448A5CD5D38DBLL)
          goto LABEL_379;
      }
      else if ((v196 & v194) != v151)
      {
        goto LABEL_381;
      }
      v193 = (_QWORD *)*v193;
      if (!v193)
        goto LABEL_381;
    }
  }
  while (1)
  {
    v195 = v193[1];
    if (v195 == 0x64A448A5CD5D38DBLL)
      break;
    if (v195 >= *(_QWORD *)&v149)
      v195 %= *(_QWORD *)&v149;
    if (v195 != v151)
      goto LABEL_381;
LABEL_247:
    v193 = (_QWORD *)*v193;
    if (!v193)
      goto LABEL_381;
  }
  if (v193[2] != 0x64A448A5CD5D38DBLL)
    goto LABEL_247;
LABEL_379:
  v242 = v193[5];
  if (*(_QWORD *)(v242 + 8) == 0x64A448A5CD5D38DBLL)
  {
    v243 = *(_QWORD *)(v242 + 32);
    goto LABEL_382;
  }
LABEL_381:
  v243 = 0;
LABEL_382:
  v244.n128_f64[0] = gm::Matrix<double,4,4>::inverted<int,void>((double *)buf, (double *)(v243 + 304));
  v245 = v10[3];
  v294[0] = &off_1E42D9CF8;
  v294[1] = buf;
  result = v294;
  v294[2] = a3;
  v295 = v294;
  if (!*(_BYTE *)(v245 + 148))
  {
    v253 = 4;
    return (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v253))(v244);
  }
  v246 = *(_DWORD **)(v245 + 32);
  v247 = *(_QWORD **)v246;
  v248 = *(_QWORD *)(*(_QWORD *)v246 + 48) - *(_QWORD *)(*(_QWORD *)v246 + 40);
  v249 = *(_QWORD *)(*(_QWORD *)v246 + 8);
  v250 = v248 / v249 * v249;
  v251 = v248 % v249;
  if (v248 == v248 % v249)
  {
    v252 = 0;
    if (!v246[4])
      goto LABEL_391;
LABEL_388:
    v254 = 0;
    v255 = v252;
    do
    {
      *(_QWORD *)&v290[0] = v254;
      if (!v295)
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(_QWORD *, _OWORD *, uint64_t, __n128))(*v295 + 48))(v295, v290, v255, v244);
      ++v254;
      v255 += 64;
    }
    while (v254 < *(unsigned int *)(*(_QWORD *)(v245 + 32) + 16));
  }
  else
  {
    v252 = v247[9];
    if (v246[4])
      goto LABEL_388;
  }
LABEL_391:
  md::MeshRenderable::recalculateBounds((md::MeshRenderable *)v245);
  if (v252 && v248 != v251)
  {
    v256 = v247[8];
    if (v256 <= v250)
      v256 = v250;
    v247[7] = 0;
    v247[8] = v256;
  }
  result = v295;
  if (v295 == v294)
  {
    v253 = 4;
    result = v294;
    return (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v253))(v244);
  }
  else if (v295)
  {
    v253 = 5;
    return (_QWORD *)(*(uint64_t (**)(__n128))(*result + 8 * v253))(v244);
  }
  return result;
}

void sub_19F879B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::optional<md::RasterOverlayRenderPatch>::~optional(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)(a1 + 8);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return a1;
}

_QWORD *md::MeshRenderableLogic::findRegistryToInject(uint64_t a1, double *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)();
  unsigned __int8 v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t (**v35)();
  uint64_t (*v36)();
  uint64_t v37;
  uint64_t (***v38)();
  uint64_t *v39;
  _QWORD v40[3];
  _QWORD *v41;
  uint64_t *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _BYTE v45[24];
  _BYTE *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v40[0] = &off_1E427A020;
  v41 = v40;
  v38 = &v35;
  v35 = &off_1E427A020;
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v42, a1 + 384, (uint64_t)&v35, *(_QWORD *)(a1 + 384));
  v3 = v38;
  if (v38 == &v35)
  {
    v4 = 4;
    v3 = &v35;
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_6:
  v5 = v41;
  if (v41 == v40)
  {
    v6 = 4;
    v5 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (uint64_t)v42;
  v8 = (uint64_t)v44;
  if (!v44)
  {
LABEL_14:
    v33 = (uint64_t *)v8;
    goto LABEL_16;
  }
  if (v44 != v43)
  {
    v8 = (*(uint64_t (**)(void))(*v44 + 16))();
    goto LABEL_14;
  }
  v33 = &v30;
  (*(void (**)(void))(*v44 + 24))();
LABEL_16:
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v35, v7, (uint64_t)&v30, *v42);
  v9 = v33;
  if (v33 == &v30)
  {
    v10 = 4;
    v9 = &v30;
  }
  else
  {
    if (!v33)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (uint64_t)v42;
  v12 = (uint64_t)v44;
  if (!v44)
  {
LABEL_24:
    v46 = (_BYTE *)v12;
    goto LABEL_26;
  }
  if (v44 != v43)
  {
    v12 = (*(uint64_t (**)(void))(*v44 + 16))();
    goto LABEL_24;
  }
  v46 = v45;
  (*(void (**)(_QWORD *, _BYTE *))(v43[0] + 24))(v43, v45);
LABEL_26:
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v30, v11, (uint64_t)v45, v42[1]);
  v13 = v46;
  if (v46 == v45)
  {
    v14 = 4;
    v13 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = v36;
  if (v31 == v36)
  {
    v17 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *(_QWORD **)v15;
      if (registryContainsInstance(a2, *(_QWORD **)v15))
      {
        v19 = v18[1];
        if ((v19 & (v19 - 1)) != 0)
        {
          v21 = 0x64A448A5CD5D38DBLL;
          if (v19 <= 0x64A448A5CD5D38DBLL)
            v21 = 0x64A448A5CD5D38DBLL % v19;
          v20 = *(_QWORD **)(*v18 + 8 * v21);
          do
          {
            do
              v20 = (_QWORD *)*v20;
            while (v20[1] != 0x64A448A5CD5D38DBLL);
          }
          while (v20[2] != 0x64A448A5CD5D38DBLL);
        }
        else
        {
          v20 = *(_QWORD **)(*v18 + 8 * ((v19 - 1) & 0x64A448A5CD5D38DBLL));
          do
          {
            do
              v20 = (_QWORD *)*v20;
            while (v20[1] != 0x64A448A5CD5D38DBLL);
          }
          while (v20[2] != 0x64A448A5CD5D38DBLL);
        }
        v22 = *(unsigned __int8 *)(*(_QWORD *)(v20[5] + 32) + 1);
        if (v22 >= v16)
          v17 = v18;
        if (v22 > v16)
          v16 = v22;
      }
      while (1)
      {
        v15 = (uint64_t (*)())((char *)v36 + 8);
        v36 = v15;
        if (v15 == v35[1])
          break;
        if (!v39)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        if ((*(unsigned int (**)(uint64_t *))(*v39 + 48))(v39))
        {
          v15 = v36;
          break;
        }
      }
    }
    while (v31 != v15);
  }
  v23 = v34;
  if (v34 == &v32)
  {
    v24 = 4;
    v23 = &v32;
  }
  else
  {
    if (!v34)
      goto LABEL_59;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_59:
  v25 = v39;
  if (v39 == &v37)
  {
    v26 = 4;
    v25 = &v37;
  }
  else
  {
    if (!v39)
      goto LABEL_64;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_64:
  v27 = v44;
  if (v44 == v43)
  {
    v28 = 4;
    v27 = v43;
    goto LABEL_68;
  }
  if (v44)
  {
    v28 = 5;
LABEL_68:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  return v17;
}

void sub_19F87A0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31)
{
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v32 = a21;
  if (a21 == &a18)
  {
    v33 = 4;
    v32 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  v34 = a31;
  if (a31 == &a28)
  {
    v35 = 4;
    v34 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_11;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void md::MeshRenderableLogic::injectDynamicRenderable(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v7;
  uint64_t *v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  uint64_t *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t RegistryByIdentifier;
  uint64_t v89;
  uint64_t *v90;
  void *v91;
  _BYTE v92[22];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v7 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((_QWORD *)(a1 + 336), a2);
  if (!a3)
    return;
  v8 = v7;
  if (!v7)
    return;
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
  v9 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v10 = v8[5];
    *(_DWORD *)v92 = 134218240;
    *(_QWORD *)&v92[4] = v10;
    *(_WORD *)&v92[12] = 2048;
    *(_QWORD *)&v92[14] = a3;
    _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_DEBUG, "[RenderableInjection] Injecting entity %llu into registry %p\n", v92, 0x16u);
  }
  *((_WORD *)v8 + 16) = *(_WORD *)(a3 + 40);
  *((_BYTE *)v8 + 34) = 1;
  v11 = *(unsigned __int16 *)(a3 + 40);
  v12 = *(_QWORD *)(a1 + 384);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v3 = *(unsigned __int16 *)(a3 + 40);
      if (v12 <= v11)
        v3 = v11 % v12;
    }
    else
    {
      v3 = ((_DWORD)v12 - 1) & v11;
    }
    v14 = *(void ***)(*(_QWORD *)(a1 + 376) + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (*((unsigned __int16 *)v15 + 8) == (_DWORD)v11)
                goto LABEL_87;
            }
            else if ((v17 & (v12 - 1)) != v3)
            {
              goto LABEL_28;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_28;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (*((unsigned __int16 *)v15 + 8) == (_DWORD)v11)
              goto LABEL_87;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v3)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_28:
  v15 = operator new(0x30uLL);
  v18 = (_QWORD *)(a1 + 392);
  *(_QWORD *)v92 = v15;
  *(_QWORD *)&v92[8] = a1 + 392;
  *v15 = 0;
  v15[1] = v11;
  *((_WORD *)v15 + 8) = v11;
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 400) + 1);
  v92[16] = 1;
  v20 = *(float *)(a1 + 408);
  if ((((float)(v20 * (float)v12) >= v19) & ~(v12 == 0)) != 0)
  {
    v11 = v3;
    goto LABEL_77;
  }
  v21 = 1;
  if (v12 >= 3)
    v21 = (v12 & (v12 - 1)) != 0;
  v22 = v21 | (2 * v12);
  v23 = vcvtps_u32_f32(v19 / v20);
  if (v22 <= v23)
    prime = v23;
  else
    prime = v22;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v12 = *(_QWORD *)(a1 + 384);
  }
  if (prime > v12)
  {
LABEL_40:
    if (prime >> 61)
      goto LABEL_148;
    v25 = operator new(8 * prime);
    v26 = *(void **)(a1 + 376);
    *(_QWORD *)(a1 + 376) = v25;
    if (v26)
      operator delete(v26);
    v27 = 0;
    *(_QWORD *)(a1 + 384) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v27++) = 0;
    while (prime != v27);
    v28 = (_QWORD *)*v18;
    if (!*v18)
      goto LABEL_64;
    v29 = v28[1];
    v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v31 = v29 & v30;
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v31) = v18;
      for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
      {
        v33 = i[1] & v30;
        if (v33 == v31)
        {
          v28 = i;
        }
        else
        {
          v34 = *(_QWORD *)(a1 + 376);
          if (*(_QWORD *)(v34 + 8 * v33))
          {
            *v28 = *i;
            v35 = 8 * v33;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 376) + v35);
            **(_QWORD **)(*(_QWORD *)(a1 + 376) + v35) = i;
          }
          else
          {
            *(_QWORD *)(v34 + 8 * v33) = v28;
            v28 = i;
            v31 = v33;
          }
        }
      }
LABEL_64:
      v12 = prime;
      goto LABEL_65;
    }
    if (v29 >= prime)
      v29 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v29) = v18;
    v39 = (_QWORD *)*v28;
    if (!*v28)
      goto LABEL_64;
    while (1)
    {
      v41 = v39[1];
      if (v41 >= prime)
        v41 %= prime;
      if (v41 != v29)
      {
        v42 = *(_QWORD *)(a1 + 376);
        if (!*(_QWORD *)(v42 + 8 * v41))
        {
          *(_QWORD *)(v42 + 8 * v41) = v28;
          goto LABEL_69;
        }
        *v28 = *v39;
        v40 = 8 * v41;
        *v39 = **(_QWORD **)(*(_QWORD *)(a1 + 376) + v40);
        **(_QWORD **)(*(_QWORD *)(a1 + 376) + v40) = v39;
        v39 = v28;
      }
      v41 = v29;
LABEL_69:
      v28 = v39;
      v39 = (_QWORD *)*v39;
      v29 = v41;
      if (!v39)
        goto LABEL_64;
    }
  }
  if (prime >= v12)
    goto LABEL_65;
  v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 400) / *(float *)(a1 + 408));
  if (v12 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
  {
    v36 = std::__next_prime(v36);
  }
  else
  {
    v38 = 1 << -(char)__clz(v36 - 1);
    if (v36 >= 2)
      v36 = v38;
  }
  if (prime <= v36)
    prime = v36;
  if (prime < v12)
  {
    if (!prime)
    {
      v91 = *(void **)(a1 + 376);
      *(_QWORD *)(a1 + 376) = 0;
      if (v91)
        operator delete(v91);
      v12 = 0;
      *(_QWORD *)(a1 + 384) = 0;
      goto LABEL_65;
    }
    goto LABEL_40;
  }
  v12 = *(_QWORD *)(a1 + 384);
LABEL_65:
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v12 <= v11)
      v11 %= v12;
  }
  else
  {
    v11 = ((_DWORD)v12 - 1) & v11;
  }
LABEL_77:
  v43 = *(_QWORD *)(a1 + 376);
  v44 = *(_QWORD **)(v43 + 8 * v11);
  if (v44)
  {
    *v15 = *v44;
LABEL_85:
    *v44 = v15;
    goto LABEL_86;
  }
  *v15 = *v18;
  *v18 = v15;
  *(_QWORD *)(v43 + 8 * v11) = v18;
  if (*v15)
  {
    v45 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v45 >= v12)
        v45 %= v12;
    }
    else
    {
      v45 &= v12 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v45);
    goto LABEL_85;
  }
LABEL_86:
  ++*(_QWORD *)(a1 + 400);
LABEL_87:
  v47 = (unint64_t *)v15[4];
  v46 = v15[5];
  if ((unint64_t)v47 >= v46)
  {
    v49 = (char *)v15[3];
    v50 = ((char *)v47 - v49) >> 3;
    v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 61)
      abort();
    v52 = v46 - (_QWORD)v49;
    if (v52 >> 2 > v51)
      v51 = v52 >> 2;
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v51;
    if (v53)
    {
      if (v53 >> 61)
        goto LABEL_148;
      v54 = (char *)operator new(8 * v53);
    }
    else
    {
      v54 = 0;
    }
    v55 = (unint64_t *)&v54[8 * v50];
    v56 = &v54[8 * v53];
    *v55 = a2;
    v48 = v55 + 1;
    if (v47 != (unint64_t *)v49)
    {
      v57 = (char *)v47 - v49 - 8;
      if (v57 < 0x58)
        goto LABEL_153;
      if ((unint64_t)(v49 - v54) < 0x20)
        goto LABEL_153;
      v58 = (v57 >> 3) + 1;
      v59 = &v54[8 * v50 - 16];
      v60 = v47 - 2;
      v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *(_OWORD *)v60;
        *((_OWORD *)v59 - 1) = *((_OWORD *)v60 - 1);
        *(_OWORD *)v59 = v62;
        v59 -= 32;
        v60 -= 4;
        v61 -= 4;
      }
      while (v61);
      v55 -= v58 & 0x3FFFFFFFFFFFFFFCLL;
      v47 -= v58 & 0x3FFFFFFFFFFFFFFCLL;
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_153:
        do
        {
          v63 = *--v47;
          *--v55 = v63;
        }
        while (v47 != (unint64_t *)v49);
      }
      v47 = (unint64_t *)v15[3];
    }
    v15[3] = v55;
    v15[4] = v48;
    v15[5] = v56;
    if (v47)
      operator delete(v47);
  }
  else
  {
    *v47 = a2;
    v48 = v47 + 1;
  }
  v15[4] = v48;
  *(_WORD *)v92 = *(_WORD *)(a3 + 40);
  v64 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t *)(a1 + 296), *(unsigned __int16 *)v92, v92);
  v65 = v64;
  v66 = v8[3];
  v68 = (uint64_t *)v64[4];
  v67 = v64[5];
  if ((unint64_t)v68 >= v67)
  {
    v70 = (uint64_t *)v64[3];
    v71 = v68 - v70;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 61)
      abort();
    v73 = v67 - (_QWORD)v70;
    if (v73 >> 2 > v72)
      v72 = v73 >> 2;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
      v74 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    if (!v74)
    {
      v75 = 0;
      goto LABEL_121;
    }
    if (!(v74 >> 61))
    {
      v75 = operator new(8 * v74);
LABEL_121:
      v76 = (uint64_t *)&v75[8 * v71];
      v77 = &v75[8 * v74];
      *v76 = v66;
      v69 = v76 + 1;
      if (v68 == v70)
      {
        v70 = v68;
      }
      else
      {
        v78 = (char *)v68 - (char *)v70 - 8;
        if (v78 < 0x58)
          goto LABEL_154;
        if ((unint64_t)((char *)v70 - v75) < 0x20)
          goto LABEL_154;
        v79 = (v78 >> 3) + 1;
        v80 = &v75[8 * v71 - 16];
        v81 = (__int128 *)(v68 - 2);
        v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *v81;
          *(v80 - 1) = *(v81 - 1);
          *v80 = v83;
          v80 -= 2;
          v81 -= 2;
          v82 -= 4;
        }
        while (v82);
        v76 -= v79 & 0x3FFFFFFFFFFFFFFCLL;
        v68 -= v79 & 0x3FFFFFFFFFFFFFFCLL;
        if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_154:
          do
          {
            v84 = *--v68;
            *--v76 = v84;
          }
          while (v68 != v70);
          v70 = (uint64_t *)v65[3];
        }
      }
      v65[3] = v76;
      v65[4] = v69;
      v65[5] = v77;
      if (v70)
        operator delete(v70);
      goto LABEL_132;
    }
LABEL_148:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  *v68 = v66;
  v69 = v68 + 1;
LABEL_132:
  v85 = v65[3];
  v86 = 126 - 2 * __clz(((uint64_t)v69 - v85) >> 3);
  v65[4] = v69;
  if (v69 == (uint64_t *)v85)
    v87 = 0;
  else
    v87 = v86;
  std::__introsort<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **,false>(v85, v69, v87, 1);
  if (*((_BYTE *)v8 + 38))
  {
    RegistryByIdentifier = md::RegistryManager::getRegistryByIdentifier(*(md::RegistryManager **)(a1 + 136), *((unsigned __int16 *)v8 + 18));
    if (RegistryByIdentifier)
    {
      v89 = v8[5];
      v90 = (uint64_t *)gdc::Registry::storage<md::components::RenderableInjected>(RegistryByIdentifier);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v90, v89);
    }
  }
}

void sub_19F87AA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MeshRenderableLogic::removeDynamicRenderableInjection(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  int8x8_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t ***v23;
  uint64_t **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  uint64_t RegistryByIdentifier;
  _QWORD *v32;
  _DWORD v33[2];
  __int16 v34;
  unint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((_QWORD *)(a1 + 336), a2);
  if (!v4)
    return;
  v5 = v4;
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
  v6 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v7 = *((unsigned __int8 *)v5 + 34);
    if (*((_BYTE *)v5 + 34))
      v7 = *((unsigned __int16 *)v5 + 16);
    v33[0] = 67109376;
    v33[1] = v7;
    v34 = 2048;
    v35 = a2;
    _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_DEBUG, "[RenderableInjection] Removing injection, injectedRegistry: %hu, entity %llu\n", (uint8_t *)v33, 0x12u);
  }
  if (!*((_BYTE *)v5 + 34))
    goto LABEL_86;
  v8 = *((unsigned __int16 *)v5 + 16);
  v9 = *(int8x8_t *)(a1 + 304);
  if (!*(_QWORD *)&v9)
    goto LABEL_45;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = *((unsigned __int16 *)v5 + 16);
    if (*(_QWORD *)&v9 <= v8)
      v11 = v8 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (v9.i32[0] - 1) & v8;
  }
  v12 = *(uint64_t ****)(*(_QWORD *)(a1 + 296) + 8 * v11);
  if (!v12)
    goto LABEL_45;
  v13 = *v12;
  if (!*v12)
    goto LABEL_45;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v15 = v13[1];
      if (v15 == (uint64_t *)v8)
      {
        if (*((unsigned __int16 *)v13 + 8) == (_DWORD)v8)
          goto LABEL_30;
      }
      else if (((unint64_t)v15 & v14) != v11)
      {
        goto LABEL_45;
      }
      v13 = (uint64_t **)*v13;
      if (!v13)
        goto LABEL_45;
    }
  }
  while (1)
  {
    v16 = (unint64_t)v13[1];
    if (v16 == v8)
      break;
    if (v16 >= *(_QWORD *)&v9)
      v16 %= *(_QWORD *)&v9;
    if (v16 != v11)
      goto LABEL_45;
LABEL_24:
    v13 = (uint64_t **)*v13;
    if (!v13)
      goto LABEL_45;
  }
  if (*((unsigned __int16 *)v13 + 8) != (_DWORD)v8)
    goto LABEL_24;
LABEL_30:
  v17 = v13[4];
  if (v13[3] == v17)
  {
    v18 = v13[3];
  }
  else
  {
    v18 = v13[3];
    while (*v18 != v5[3])
    {
      if (++v18 == v17)
      {
        v18 = v13[4];
        break;
      }
    }
  }
  if (v18 != v17)
  {
    v19 = v18 + 1;
    if (v18 + 1 != v17)
    {
      do
      {
        if (*v19 != v5[3])
          *v18++ = *v19;
        ++v19;
      }
      while (v19 != v17);
      v17 = v13[4];
    }
  }
  if (v18 != v17)
    v13[4] = v18;
LABEL_45:
  v20 = *(int8x8_t *)(a1 + 384);
  if (!*(_QWORD *)&v20)
    goto LABEL_84;
  v21 = (uint8x8_t)vcnt_s8(v20);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v22 = v8;
    if (*(_QWORD *)&v20 <= v8)
      v22 = v8 % *(_QWORD *)&v20;
  }
  else
  {
    v22 = (v20.i32[0] - 1) & v8;
  }
  v23 = *(uint64_t ****)(*(_QWORD *)(a1 + 376) + 8 * v22);
  if (!v23)
    goto LABEL_84;
  v24 = *v23;
  if (!*v23)
    goto LABEL_84;
  if (v21.u32[0] < 2uLL)
  {
    v25 = *(_QWORD *)&v20 - 1;
    while (1)
    {
      v27 = v24[1];
      if (v27 == (uint64_t *)v8)
      {
        if (*((unsigned __int16 *)v24 + 8) == (_DWORD)v8)
          goto LABEL_66;
      }
      else if (((unint64_t)v27 & v25) != v22)
      {
        goto LABEL_84;
      }
      v24 = (uint64_t **)*v24;
      if (!v24)
        goto LABEL_84;
    }
  }
  while (2)
  {
    v26 = (unint64_t)v24[1];
    if (v26 != v8)
    {
      if (v26 >= *(_QWORD *)&v20)
        v26 %= *(_QWORD *)&v20;
      if (v26 != v22)
        goto LABEL_84;
      goto LABEL_55;
    }
    if (*((unsigned __int16 *)v24 + 8) != (_DWORD)v8)
    {
LABEL_55:
      v24 = (uint64_t **)*v24;
      if (!v24)
        goto LABEL_84;
      continue;
    }
    break;
  }
LABEL_66:
  v28 = (unsigned __int16 *)v24[4];
  v29 = (unsigned __int16 *)v24[3];
  if (v29 != v28)
  {
    while (__PAIR64__(v29[1], *v29) != __PAIR64__(WORD1(a2), (unsigned __int16)a2)
         || *((_DWORD *)v29 + 1) != HIDWORD(a2))
    {
      v29 += 4;
      if (v29 == v28)
      {
        v29 = (unsigned __int16 *)v24[4];
        break;
      }
    }
  }
  if (v29 != v28)
  {
    v30 = v29 + 4;
    if (v29 + 4 != v28)
    {
      do
      {
        if (__PAIR64__(v30[1], *v30) != __PAIR64__(WORD1(a2), (unsigned __int16)a2)
          || *((_DWORD *)v30 + 1) != HIDWORD(a2))
        {
          *(_QWORD *)v29 = *(_QWORD *)v30;
          v29 += 4;
        }
        v30 += 4;
      }
      while (v30 != v28);
      v28 = (unsigned __int16 *)v24[4];
    }
    if (v29 != v28)
      v24[4] = (uint64_t *)v29;
  }
LABEL_84:
  if (*((_BYTE *)v5 + 34))
    *((_BYTE *)v5 + 34) = 0;
LABEL_86:
  if (*((_BYTE *)v5 + 38))
  {
    RegistryByIdentifier = md::RegistryManager::getRegistryByIdentifier(*(md::RegistryManager **)(a1 + 136), *((unsigned __int16 *)v5 + 18));
    if (RegistryByIdentifier)
    {
      v32 = (_QWORD *)gdc::Registry::storage<md::components::RenderableInjected>(RegistryByIdentifier);
      gdc::ComponentStorageWrapper<md::components::RenderableInjected>::remove(v32, v5[5]);
    }
  }
}

BOOL registryContainsInstance(double *a1, _QWORD *a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;

  if (!a2)
    return 0;
  v2 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x64A448A5CD5D38DBLL;
    if (*(_QWORD *)&v2 <= 0x64A448A5CD5D38DBuLL)
      v4 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & 0x64A448A5CD5D38DBLL;
  }
  v5 = *(_QWORD **)(*a2 + 8 * v4);
  if (!v5)
    return 0;
  v6 = (_QWORD *)*v5;
  if (!v6)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == 0x64A448A5CD5D38DBLL)
      {
        if (v6[2] == 0x64A448A5CD5D38DBLL)
          goto LABEL_23;
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == 0x64A448A5CD5D38DBLL)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      return 0;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return 0;
  }
  if (v6[2] != 0x64A448A5CD5D38DBLL)
    goto LABEL_12;
LABEL_23:
  v10 = v6[5];
  if (*(_QWORD *)(v10 + 8) != 0x64A448A5CD5D38DBLL)
    return 0;
  v11 = *(_QWORD *)(v10 + 32);
  if (!v11)
    return 0;
  v12 = 1 << *(_BYTE *)(v11 + 1);
  v13 = 1.0 / (double)v12;
  v14 = v13 * (double)*(int *)(v11 + 8);
  if (v14 + v13 <= *a1)
    return 0;
  v15 = v13 * (double)(v12 + ~*(_DWORD *)(v11 + 4));
  v16 = v14 < a1[3];
  if (v15 + v13 <= a1[1])
    v16 = 0;
  return v15 < a1[4] && v16;
}

void std::__function::__func<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(unsigned long,gm::Matrix<float,4,4> &)#1},std::allocator<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(unsigned long,gm::Matrix<float,4,4> &)#1}>,void ()(unsigned long,gm::Matrix<float,4,4> &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(unsigned long,gm::Matrix<float,4,4> &)#1},std::allocator<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(unsigned long,gm::Matrix<float,4,4> &)#1}>,void ()(unsigned long,gm::Matrix<float,4,4> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D9CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(unsigned long,gm::Matrix<float,4,4> &)#1},std::allocator<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(unsigned long,gm::Matrix<float,4,4> &)#1}>,void ()(unsigned long,gm::Matrix<float,4,4> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D9CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float64_t std::__function::__func<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(unsigned long,gm::Matrix<float,4,4> &)#1},std::allocator<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(unsigned long,gm::Matrix<float,4,4> &)#1}>,void ()(unsigned long,gm::Matrix<float,4,4> &)>::operator()(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  double *v4;
  uint64_t v5;
  __int128 v6;
  float32x4_t v7;
  float64_t result;
  float32x4_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t v22[7];
  float64x2_t v23;

  v4 = *(double **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_OWORD *)(v5 + 208);
  v5 += 208;
  v10 = v6;
  v13 = *(_OWORD *)(v5 + 24);
  v16 = *(_OWORD *)(v5 + 48);
  v19 = *(_OWORD *)(v5 + 72);
  v11 = *(_QWORD *)(v5 + 16);
  v14 = *(_QWORD *)(v5 + 40);
  v17 = *(_QWORD *)(v5 + 64);
  v20 = *(_QWORD *)(v5 + 88);
  v12 = 0;
  v15 = 0;
  v18 = 0;
  v21 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v22[0].f64, v4, (double *)&v10);
  v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v22[2]), v22[3]);
  *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v22[0]), v22[1]);
  a3[1] = v7;
  result = v23.f64[0];
  v9 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v22[6]), v23);
  a3[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v22[4]), v22[5]);
  a3[3] = v9;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(unsigned __int8 *)(*v8 + 8) < *(unsigned __int8 *)(*v9 + 8))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(unsigned __int8 *)(v81 + 8);
        v83 = *(unsigned __int8 *)(*v9 + 8);
        v84 = *v8;
        v85 = *(unsigned __int8 *)(*v8 + 8);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v136 = *v9;
            v135 = v9[1];
            if (*(unsigned __int8 *)(v135 + 8) < *(unsigned __int8 *)(*v9 + 8))
            {
              *v9 = v135;
              v9[1] = v136;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(unsigned __int8 *)(*v8 + 8) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = *v9;
        v91 = *(unsigned __int8 *)(v87 + 8);
        v92 = *(unsigned __int8 *)(*v9 + 8);
        v93 = *(unsigned __int8 *)(v89 + 8);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_166;
          *v86 = v89;
          *v88 = v87;
          v94 = v9;
          v95 = v9 + 1;
          result = v87;
          if (v93 >= v92)
            goto LABEL_167;
        }
        else
        {
          v94 = v9;
          v95 = v9 + 2;
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = v87;
            v9[1] = v90;
            v94 = v9 + 1;
            v95 = v9 + 2;
            result = v90;
            if (v93 >= v92)
            {
LABEL_166:
              v87 = v89;
LABEL_167:
              if (*(unsigned __int8 *)(*v8 + 8) < *(unsigned __int8 *)(v87 + 8))
              {
                *v88 = *v8;
                *v8 = v87;
                v140 = *v88;
                v141 = *v86;
                v142 = *(unsigned __int8 *)(v140 + 8);
                if (v142 < *(unsigned __int8 *)(v141 + 8))
                {
                  v9[1] = v140;
                  v9[2] = v141;
                  v143 = *v9;
                  if (v142 < *(unsigned __int8 *)(*v9 + 8))
                  {
                    *v9 = v140;
                    v9[1] = v143;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = result;
        goto LABEL_167;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  v112 = *v111;
                  if (2 * v108 + 2 < v11)
                  {
                    result = *(unsigned __int8 *)(v112 + 8);
                    if (result < *(unsigned __int8 *)(v111[1] + 8))
                    {
                      v112 = v111[1];
                      ++v111;
                      v110 = 2 * v108 + 2;
                    }
                  }
                  v113 = &v9[v108];
                  v114 = *v113;
                  v115 = *(unsigned __int8 *)(*v113 + 8);
                  if (*(unsigned __int8 *)(v112 + 8) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v113 = v112;
                      if (v107 < v110)
                        break;
                      result = (2 * v110) | 1;
                      v111 = &v9[result];
                      v117 = 2 * v110 + 2;
                      v112 = *v111;
                      if (v117 < v11
                        && *(unsigned __int8 *)(v112 + 8) < *(unsigned __int8 *)(v111[1] + 8))
                      {
                        v112 = v111[1];
                        ++v111;
                        result = v117;
                      }
                      v113 = v116;
                      v110 = result;
                    }
                    while (*(unsigned __int8 *)(v112 + 8) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v118 = (unint64_t)v10 >> 3;
              do
              {
                v119 = 0;
                v120 = *v9;
                v121 = v9;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = *(unsigned __int8 *)(v124 + 8);
                    if (result < *(unsigned __int8 *)(v123[1] + 8))
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v9 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v9[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = *(unsigned __int8 *)(*v123 + 8);
                    if (*(unsigned __int8 *)(*v130 + 8) < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v9[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (*(unsigned __int8 *)(*v130 + 8) < v133);
                      *v134 = v132;
                    }
                  }
                }
                v109 = v118-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(unsigned __int8 *)(*v8 + 8);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(unsigned __int8 *)(*v13 + 8);
            v19 = *(unsigned __int8 *)(*v9 + 8);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(unsigned __int8 *)(*v13 + 8) < *(unsigned __int8 *)(*v9 + 8))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(unsigned __int8 *)(*v8 + 8) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(unsigned __int8 *)(v29 + 8);
            v32 = *(unsigned __int8 *)(v30 + 8);
            v33 = *(a2 - 2);
            v34 = *(unsigned __int8 *)(v33 + 8);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(unsigned __int8 *)(*v27 + 8) < *(unsigned __int8 *)(v35 + 8))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(unsigned __int8 *)(v36 + 8) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(unsigned __int8 *)(v40 + 8);
            v43 = *(unsigned __int8 *)(v41 + 8);
            v44 = *(a2 - 3);
            v45 = *(unsigned __int8 *)(v44 + 8);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(unsigned __int8 *)(*v38 + 8) < *(unsigned __int8 *)(v46 + 8))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(unsigned __int8 *)(v47 + 8) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(unsigned __int8 *)(*v13 + 8);
            v51 = *(unsigned __int8 *)(*v27 + 8);
            v52 = *v38;
            v53 = *(unsigned __int8 *)(*v38 + 8);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(unsigned __int8 *)(*v9 + 8);
          v23 = *(unsigned __int8 *)(*v13 + 8);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(unsigned __int8 *)(*v9 + 8) < *(unsigned __int8 *)(*v13 + 8))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(unsigned __int8 *)(*v8 + 8) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(unsigned __int8 *)(v55 + 8);
            if (*(unsigned __int8 *)(*(v9 - 1) + 8) < v56)
              goto LABEL_54;
            if (v56 >= *(unsigned __int8 *)(*v8 + 8))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(unsigned __int8 *)(*v9 + 8));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(unsigned __int8 *)(v70 + 8));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(unsigned __int8 *)(v73 + 8));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(unsigned __int8 *)(v76 + 8));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(unsigned __int8 *)(v77 + 8));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(unsigned __int8 *)(v55 + 8);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(unsigned __int8 *)(v60 + 8) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(unsigned __int8 *)(v63 + 8) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(unsigned __int8 *)(v62 + 8) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(unsigned __int8 *)(v67 + 8) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(unsigned __int8 *)(v68 + 8) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(unsigned __int8 *)(v102 + 8);
              if (v104 < *(unsigned __int8 *)(v103 + 8))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(unsigned __int8 *)(v103 + 8));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v138 = *v7;
            v137 = v7[1];
            v7 = v96;
            v139 = *(unsigned __int8 *)(v137 + 8);
            if (v139 < *(unsigned __int8 *)(v138 + 8))
            {
              do
              {
                *v96 = v138;
                v138 = *(v96 - 2);
                --v96;
              }
              while (v139 < *(unsigned __int8 *)(v138 + 8));
              *v96 = v137;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(unsigned __int8 *)(*a2 + 8);
  v8 = *(unsigned __int8 *)(*result + 8);
  v9 = *a3;
  v10 = *(unsigned __int8 *)(*a3 + 8);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(unsigned __int8 *)(*a2 + 8) < *(unsigned __int8 *)(*result + 8))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(unsigned __int8 *)(*a3 + 8) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(unsigned __int8 *)(*a4 + 8) < *(unsigned __int8 *)(v5 + 8))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(unsigned __int8 *)(*a3 + 8) < *(unsigned __int8 *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(unsigned __int8 *)(*a2 + 8) < *(unsigned __int8 *)(*result + 8))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  v14 = *a4;
  if (*(unsigned __int8 *)(*a5 + 8) < *(unsigned __int8 *)(*a4 + 8))
  {
    *a4 = *a5;
    *a5 = v14;
    v15 = *a3;
    if (*(unsigned __int8 *)(*a4 + 8) < *(unsigned __int8 *)(*a3 + 8))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(unsigned __int8 *)(*a3 + 8) < *(unsigned __int8 *)(*a2 + 8))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *result;
        if (*(unsigned __int8 *)(*a2 + 8) < *(unsigned __int8 *)(*result + 8))
        {
          *result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(unsigned __int8 *)(v3 + 8) < *(unsigned __int8 *)(*a1 + 8))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(unsigned __int8 *)(v15 + 8);
      v17 = *(unsigned __int8 *)(*a1 + 8);
      v18 = *(a2 - 1);
      v19 = *(unsigned __int8 *)(v18 + 8);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(unsigned __int8 *)(v40 + 8) < *(unsigned __int8 *)(*a1 + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(unsigned __int8 *)(v47 + 8) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(unsigned __int8 *)(v21 + 8);
      v26 = *(unsigned __int8 *)(*a1 + 8);
      v27 = *(unsigned __int8 *)(v23 + 8);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(unsigned __int8 *)(v42 + 8) < *(unsigned __int8 *)(v21 + 8))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(unsigned __int8 *)(v43 + 8);
        if (v45 < *(unsigned __int8 *)(v44 + 8))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(unsigned __int8 *)(*a1 + 8))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(unsigned __int8 *)(v7 + 8);
      v10 = *(unsigned __int8 *)(*a1 + 8);
      v11 = *(unsigned __int8 *)(v5 + 8);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(unsigned __int8 *)(*v31 + 8);
        if (v37 < *(unsigned __int8 *)(v36 + 8))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(unsigned __int8 *)(v36 + 8));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

void std::__function::__func<md::MeshRenderableLogic::findRegistryToInject(md::CameraContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::MeshRenderableLogic::findRegistryToInject(md::CameraContext const&,gm::Box<double,3> const&)::$_0>,BOOL ()(gdc::Registry * const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::findRegistryToInject(md::CameraContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::MeshRenderableLogic::findRegistryToInject(md::CameraContext const&,gm::Box<double,3> const&)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427A020;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::findRegistryToInject(md::CameraContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::MeshRenderableLogic::findRegistryToInject(md::CameraContext const&,gm::Box<double,3> const&)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427A020;
}

BOOL std::__function::__func<md::MeshRenderableLogic::findRegistryToInject(md::CameraContext const&,gm::Box<double,3> const&)::$_0,std::allocator<md::MeshRenderableLogic::findRegistryToInject(md::CameraContext const&,gm::Box<double,3> const&)::$_0>,BOOL ()(gdc::Registry * const&)>::operator()(uint64_t a1, int8x8_t **a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;

  v2 = (*a2)[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x3B7BEE224038A636;
    if (*(_QWORD *)&v2 <= 0x3B7BEE224038A636uLL)
      v4 = 0x3B7BEE224038A636uLL % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & 0x3B7BEE224038A636;
  }
  v5 = *(_QWORD **)(*(_QWORD *)*a2 + 8 * v4);
  if (!v5)
    return 0;
  v6 = (_QWORD *)*v5;
  if (!v6)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == 0x3B7BEE224038A636)
      {
        if (v6[2] == 0x3B7BEE224038A636)
          goto LABEL_22;
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == 0x3B7BEE224038A636)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      return 0;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return 0;
  }
  if (v6[2] != 0x3B7BEE224038A636)
    goto LABEL_11;
LABEL_22:
  v10 = v6[5];
  if (*(_QWORD *)(v10 + 8) == 0x3B7BEE224038A636)
  {
    v11 = *(unsigned __int16 **)(v10 + 32);
    if (v11)
      return *v11 == 62;
  }
  return 0;
}

void std::__function::__func<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4289EF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4289EF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<md::MeshRenderableLogic::updateDynamicMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator() const(gdc::Entity,md::components::DynamicMeshInstance &,md::components::Material &)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(unint64_t **)a3;
    v6 = 8 * v3;
    do
    {
      v7 = *v5++;
      md::MeshRenderableLogic::removeDynamicEntity(v4, v7);
      v6 -= 8;
    }
    while (v6);
  }
}

void md::MeshRenderableLogic::removeDynamicEntity(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  void (***v7)(_QWORD);
  uint64_t *v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = a1 + 42;
  v5 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(a1 + 42, a2);
  if (v5)
  {
    v6 = v5;
    md::MeshRenderableLogic::removeDynamicRenderableInjection((uint64_t)a1, a2);
    v7 = (void (***)(_QWORD))v6[3];
    if (v7 && a1[24])
    {
      (**v7)(v7);
      *v7 = (void (**)(_QWORD))a1[27];
      a1[27] = v7;
    }
    v8 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(v4, a2);
    if (v8)
    {
      v9 = (int8x8_t)a1[43];
      v10 = v8[1];
      v11 = (uint8x8_t)vcnt_s8(v9);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v9)
          v10 %= *(_QWORD *)&v9;
      }
      else
      {
        v10 &= *(_QWORD *)&v9 - 1;
      }
      v12 = *(uint64_t **)(*v4 + 8 * v10);
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12 != v8);
      if (v13 == a1 + 44)
        goto LABEL_24;
      v14 = v13[1];
      if (v11.u32[0] > 1uLL)
      {
        if (v14 >= *(_QWORD *)&v9)
          v14 %= *(_QWORD *)&v9;
      }
      else
      {
        v14 &= *(_QWORD *)&v9 - 1;
      }
      if (v14 != v10)
      {
LABEL_24:
        if (!*v8)
          goto LABEL_25;
        v15 = *(_QWORD *)(*v8 + 8);
        if (v11.u32[0] > 1uLL)
        {
          if (v15 >= *(_QWORD *)&v9)
            v15 %= *(_QWORD *)&v9;
        }
        else
        {
          v15 &= *(_QWORD *)&v9 - 1;
        }
        if (v15 != v10)
LABEL_25:
          *(_QWORD *)(*v4 + 8 * v10) = 0;
      }
      v16 = *v8;
      if (*v8)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v11.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&v9)
            v17 %= *(_QWORD *)&v9;
        }
        else
        {
          v17 &= *(_QWORD *)&v9 - 1;
        }
        if (v17 != v10)
        {
          *(_QWORD *)(*v4 + 8 * v17) = v13;
          v16 = *v8;
        }
      }
      *v13 = v16;
      *v8 = 0;
      --a1[45];
      operator delete(v8);
    }
  }
}

void std::__shared_ptr_pointer<md::InstanceData *,std::shared_ptr<md::InstanceData>::__shared_ptr_default_delete<md::InstanceData,md::InstanceData>,std::allocator<md::InstanceData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::InstanceData *,std::shared_ptr<md::InstanceData>::__shared_ptr_default_delete<md::InstanceData,md::InstanceData>,std::allocator<md::InstanceData>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t gdc::ComponentStorageWrapper<md::components::GeneratedTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<md::components::GeneratedTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::GeneratedTexture>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v32 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (_QWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v17 = *(_QWORD *)(v15 - 16);
  v16 = *(_QWORD *)(v15 - 8);
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)v14[1];
  *v14 = v17;
  v14[1] = v16;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a1[11];
  v24 = *(std::__shared_weak_count **)(v23 - 8);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  a1[11] = v23 - 16;
  v27 = (_QWORD *)a1[28];
  if (!v27)
    return 1;
  v28 = a1[31];
  while (1)
  {
    v34[0] = &v32;
    v34[1] = 1;
    v33 = v28;
    v29 = v27[6];
    if (!v29)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v29 + 48))(v29, &v33, v34);
    v27 = (_QWORD *)*v27;
    if (!v27)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::GeneratedTexture>::contains(v30, v31);
}

BOOL gdc::ComponentStorageWrapper<md::components::GeneratedTexture>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void _ZNSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__0NS_9allocatorISR_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MeshRenderableLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_0 &,md::MeshRenderable **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  BOOL v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  int64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *v9;
        if (*(unsigned __int8 *)(*v8 + 8) < *(unsigned __int8 *)(*v9 + 8))
        {
          *v9 = *v8;
          *v8 = v79;
        }
        return result;
      case 3:
        v80 = *v9;
        v81 = v9[1];
        v82 = *(unsigned __int8 *)(v81 + 8);
        v83 = *(unsigned __int8 *)(*v9 + 8);
        v84 = *v8;
        v85 = *(unsigned __int8 *)(*v8 + 8);
        if (v82 >= v83)
        {
          if (v85 < v82)
          {
            v9[1] = v84;
            *v8 = v81;
            v136 = *v9;
            v135 = v9[1];
            if (*(unsigned __int8 *)(v135 + 8) < *(unsigned __int8 *)(*v9 + 8))
            {
              *v9 = v135;
              v9[1] = v136;
            }
          }
        }
        else
        {
          if (v85 >= v82)
          {
            *v9 = v81;
            v9[1] = v80;
            if (*(unsigned __int8 *)(*v8 + 8) >= v83)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v84;
          }
          *v8 = v80;
        }
        return result;
      case 4:
        v86 = v9 + 1;
        v87 = v9[1];
        v88 = v9 + 2;
        v89 = v9[2];
        v90 = *v9;
        v91 = *(unsigned __int8 *)(v87 + 8);
        v92 = *(unsigned __int8 *)(*v9 + 8);
        v93 = *(unsigned __int8 *)(v89 + 8);
        if (v91 >= v92)
        {
          if (v93 >= v91)
            goto LABEL_166;
          *v86 = v89;
          *v88 = v87;
          v94 = v9;
          v95 = v9 + 1;
          result = v87;
          if (v93 >= v92)
            goto LABEL_167;
        }
        else
        {
          v94 = v9;
          v95 = v9 + 2;
          result = *v9;
          if (v93 >= v91)
          {
            *v9 = v87;
            v9[1] = v90;
            v94 = v9 + 1;
            v95 = v9 + 2;
            result = v90;
            if (v93 >= v92)
            {
LABEL_166:
              v87 = v89;
LABEL_167:
              if (*(unsigned __int8 *)(*v8 + 8) < *(unsigned __int8 *)(v87 + 8))
              {
                *v88 = *v8;
                *v8 = v87;
                v140 = *v88;
                v141 = *v86;
                v142 = *(unsigned __int8 *)(v140 + 8);
                if (v142 < *(unsigned __int8 *)(v141 + 8))
                {
                  v9[1] = v140;
                  v9[2] = v141;
                  v143 = *v9;
                  if (v142 < *(unsigned __int8 *)(*v9 + 8))
                  {
                    *v9 = v140;
                    v9[1] = v143;
                  }
                }
              }
              return result;
            }
          }
        }
        *v94 = v89;
        *v95 = v90;
        v87 = result;
        goto LABEL_167;
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **,0>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v107 = (unint64_t)(v11 - 2) >> 1;
              v108 = v107;
              do
              {
                if (v107 >= v108)
                {
                  v110 = (2 * v108) | 1;
                  v111 = &v9[v110];
                  v112 = *v111;
                  if (2 * v108 + 2 < v11)
                  {
                    result = *(unsigned __int8 *)(v112 + 8);
                    if (result < *(unsigned __int8 *)(v111[1] + 8))
                    {
                      v112 = v111[1];
                      ++v111;
                      v110 = 2 * v108 + 2;
                    }
                  }
                  v113 = &v9[v108];
                  v114 = *v113;
                  v115 = *(unsigned __int8 *)(*v113 + 8);
                  if (*(unsigned __int8 *)(v112 + 8) >= v115)
                  {
                    do
                    {
                      v116 = v111;
                      *v113 = v112;
                      if (v107 < v110)
                        break;
                      result = (2 * v110) | 1;
                      v111 = &v9[result];
                      v117 = 2 * v110 + 2;
                      v112 = *v111;
                      if (v117 < v11
                        && *(unsigned __int8 *)(v112 + 8) < *(unsigned __int8 *)(v111[1] + 8))
                      {
                        v112 = v111[1];
                        ++v111;
                        result = v117;
                      }
                      v113 = v116;
                      v110 = result;
                    }
                    while (*(unsigned __int8 *)(v112 + 8) >= v115);
                    *v116 = v114;
                  }
                }
                v109 = v108-- <= 0;
              }
              while (!v109);
              v118 = (unint64_t)v10 >> 3;
              do
              {
                v119 = 0;
                v120 = *v9;
                v121 = v9;
                do
                {
                  v122 = &v121[v119];
                  v125 = v122[1];
                  v123 = v122 + 1;
                  v124 = v125;
                  v126 = (2 * v119) | 1;
                  v127 = 2 * v119 + 2;
                  if (v127 < v118)
                  {
                    result = *(unsigned __int8 *)(v124 + 8);
                    if (result < *(unsigned __int8 *)(v123[1] + 8))
                    {
                      v124 = v123[1];
                      ++v123;
                      v126 = v127;
                    }
                  }
                  *v121 = v124;
                  v121 = v123;
                  v119 = v126;
                }
                while (v126 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v123 == --a2)
                {
                  *v123 = v120;
                }
                else
                {
                  *v123 = *a2;
                  *a2 = v120;
                  v128 = (char *)v123 - (char *)v9 + 8;
                  if (v128 >= 9)
                  {
                    v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
                    v130 = &v9[v129];
                    v131 = *v130;
                    v132 = *v123;
                    v133 = *(unsigned __int8 *)(*v123 + 8);
                    if (*(unsigned __int8 *)(*v130 + 8) < v133)
                    {
                      do
                      {
                        v134 = v130;
                        *v123 = v131;
                        if (!v129)
                          break;
                        v129 = (v129 - 1) >> 1;
                        v130 = &v9[v129];
                        v131 = *v130;
                        v123 = v134;
                      }
                      while (*(unsigned __int8 *)(*v130 + 8) < v133);
                      *v134 = v132;
                    }
                  }
                }
                v109 = v118-- <= 2;
              }
              while (!v109);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          v14 = *v8;
          v15 = *(unsigned __int8 *)(*v8 + 8);
          if ((unint64_t)v10 >= 0x401)
          {
            v16 = *v13;
            v17 = *v9;
            v18 = *(unsigned __int8 *)(*v13 + 8);
            v19 = *(unsigned __int8 *)(*v9 + 8);
            if (v18 >= v19)
            {
              if (v15 < v18)
              {
                *v13 = v14;
                *v8 = v16;
                v24 = *v9;
                if (*(unsigned __int8 *)(*v13 + 8) < *(unsigned __int8 *)(*v9 + 8))
                {
                  *v9 = *v13;
                  *v13 = v24;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v9 = v14;
                goto LABEL_21;
              }
              *v9 = v16;
              *v13 = v17;
              if (*(unsigned __int8 *)(*v8 + 8) < v19)
              {
                *v13 = *v8;
LABEL_21:
                *v8 = v17;
              }
            }
            v26 = &v9[v12];
            v29 = *(v26 - 1);
            v27 = v26 - 1;
            v28 = v29;
            v30 = v9[1];
            v31 = *(unsigned __int8 *)(v29 + 8);
            v32 = *(unsigned __int8 *)(v30 + 8);
            v33 = *(a2 - 2);
            v34 = *(unsigned __int8 *)(v33 + 8);
            if (v31 >= v32)
            {
              if (v34 < v31)
              {
                *v27 = v33;
                *(a2 - 2) = v28;
                v35 = v9[1];
                if (*(unsigned __int8 *)(*v27 + 8) < *(unsigned __int8 *)(v35 + 8))
                {
                  v9[1] = *v27;
                  *v27 = v35;
                }
              }
            }
            else
            {
              if (v34 < v31)
              {
                v9[1] = v33;
                goto LABEL_33;
              }
              v9[1] = v28;
              *v27 = v30;
              v36 = *(a2 - 2);
              if (*(unsigned __int8 *)(v36 + 8) < v32)
              {
                *v27 = v36;
LABEL_33:
                *(a2 - 2) = v30;
              }
            }
            v37 = &v9[v12];
            v40 = v37[1];
            v38 = v37 + 1;
            v39 = v40;
            v41 = v9[2];
            v42 = *(unsigned __int8 *)(v40 + 8);
            v43 = *(unsigned __int8 *)(v41 + 8);
            v44 = *(a2 - 3);
            v45 = *(unsigned __int8 *)(v44 + 8);
            if (v42 >= v43)
            {
              if (v45 < v42)
              {
                *v38 = v44;
                *(a2 - 3) = v39;
                v46 = v9[2];
                if (*(unsigned __int8 *)(*v38 + 8) < *(unsigned __int8 *)(v46 + 8))
                {
                  v9[2] = *v38;
                  *v38 = v46;
                }
              }
            }
            else
            {
              if (v45 < v42)
              {
                v9[2] = v44;
                goto LABEL_42;
              }
              v9[2] = v39;
              *v38 = v41;
              v47 = *(a2 - 3);
              if (*(unsigned __int8 *)(v47 + 8) < v43)
              {
                *v38 = v47;
LABEL_42:
                *(a2 - 3) = v41;
              }
            }
            v48 = *v13;
            v49 = *v27;
            v50 = *(unsigned __int8 *)(*v13 + 8);
            v51 = *(unsigned __int8 *)(*v27 + 8);
            v52 = *v38;
            v53 = *(unsigned __int8 *)(*v38 + 8);
            if (v50 >= v51)
            {
              if (v53 >= v50)
                goto LABEL_50;
              *v13 = v52;
              *v38 = v48;
              v38 = v13;
              v48 = v49;
              if (v53 >= v51)
              {
                v48 = v52;
                goto LABEL_50;
              }
            }
            else if (v53 >= v50)
            {
              *v27 = v48;
              *v13 = v49;
              v27 = v13;
              v48 = v52;
              if (v53 >= v51)
              {
                v48 = v49;
LABEL_50:
                v54 = *v9;
                *v9 = v48;
                *v13 = v54;
                goto LABEL_51;
              }
            }
            *v27 = v52;
            *v38 = v49;
            goto LABEL_50;
          }
          v20 = *v9;
          v21 = *v13;
          v22 = *(unsigned __int8 *)(*v9 + 8);
          v23 = *(unsigned __int8 *)(*v13 + 8);
          if (v22 >= v23)
          {
            if (v15 < v22)
            {
              *v9 = v14;
              *v8 = v20;
              v25 = *v13;
              if (*(unsigned __int8 *)(*v9 + 8) < *(unsigned __int8 *)(*v13 + 8))
              {
                *v13 = *v9;
                *v9 = v25;
              }
            }
          }
          else
          {
            if (v15 >= v22)
            {
              *v13 = v20;
              *v9 = v21;
              if (*(unsigned __int8 *)(*v8 + 8) >= v23)
                goto LABEL_51;
              *v9 = *v8;
            }
            else
            {
              *v13 = v14;
            }
            *v8 = v21;
          }
LABEL_51:
          --a3;
          v55 = *v9;
          if ((a4 & 1) == 0)
          {
            v56 = *(unsigned __int8 *)(v55 + 8);
            if (*(unsigned __int8 *)(*(v9 - 1) + 8) < v56)
              goto LABEL_54;
            if (v56 >= *(unsigned __int8 *)(*v8 + 8))
            {
              v71 = v9 + 1;
              do
              {
                v9 = v71;
                if (v71 >= a2)
                  break;
                ++v71;
              }
              while (v56 >= *(unsigned __int8 *)(*v9 + 8));
            }
            else
            {
              do
              {
                v70 = v9[1];
                ++v9;
              }
              while (v56 >= *(unsigned __int8 *)(v70 + 8));
            }
            v72 = a2;
            if (v9 < a2)
            {
              v72 = a2;
              do
                v73 = *--v72;
              while (v56 < *(unsigned __int8 *)(v73 + 8));
            }
            if (v9 < v72)
            {
              v74 = *v9;
              v75 = *v72;
              do
              {
                *v9 = v75;
                *v72 = v74;
                do
                {
                  v76 = v9[1];
                  ++v9;
                  v74 = v76;
                }
                while (v56 >= *(unsigned __int8 *)(v76 + 8));
                do
                {
                  v77 = *--v72;
                  v75 = v77;
                }
                while (v56 < *(unsigned __int8 *)(v77 + 8));
              }
              while (v9 < v72);
            }
            v78 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v55;
            continue;
          }
          v56 = *(unsigned __int8 *)(v55 + 8);
LABEL_54:
          v57 = v9;
          do
          {
            v58 = v57;
            v60 = v57[1];
            ++v57;
            v59 = v60;
          }
          while (*(unsigned __int8 *)(v60 + 8) < v56);
          v61 = a2;
          if (v58 == v9)
          {
            v61 = a2;
            do
            {
              if (v57 >= v61)
                break;
              v63 = *--v61;
            }
            while (*(unsigned __int8 *)(v63 + 8) >= v56);
          }
          else
          {
            do
              v62 = *--v61;
            while (*(unsigned __int8 *)(v62 + 8) >= v56);
          }
          if (v57 < v61)
          {
            v64 = *v61;
            v65 = v57;
            v66 = v61;
            do
            {
              *v65 = v64;
              *v66 = v59;
              do
              {
                v58 = v65;
                v67 = v65[1];
                ++v65;
                v59 = v67;
              }
              while (*(unsigned __int8 *)(v67 + 8) < v56);
              do
              {
                v68 = *--v66;
                v64 = v68;
              }
              while (*(unsigned __int8 *)(v68 + 8) >= v56);
            }
            while (v65 < v66);
          }
          if (v58 != v9)
            *v9 = *v58;
          *v58 = v55;
          if (v57 < v61)
            goto LABEL_73;
          v69 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_0 &,md::MeshRenderable **>(v9, v58);
          v9 = v58 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_0 &,md::MeshRenderable **>(v58 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v69)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_0 &,md::MeshRenderable **,false>(v7, v58, a3, a4 & 1);
            a4 = 0;
            v9 = v58 + 1;
            continue;
          }
          a2 = v58;
          if (v69)
            return result;
          goto LABEL_2;
        }
        v96 = v9 + 1;
        v98 = v9 == a2 || v96 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v98)
          {
            v99 = 8;
            v100 = v9;
            do
            {
              v103 = *v100;
              v102 = v100[1];
              v100 = v96;
              v104 = *(unsigned __int8 *)(v102 + 8);
              if (v104 < *(unsigned __int8 *)(v103 + 8))
              {
                v105 = v99;
                do
                {
                  *(uint64_t *)((char *)v9 + v105) = v103;
                  v106 = v105 - 8;
                  if (v105 == 8)
                  {
                    v101 = v9;
                    goto LABEL_116;
                  }
                  v103 = *(uint64_t *)((char *)v9 + v105 - 16);
                  v105 -= 8;
                }
                while (v104 < *(unsigned __int8 *)(v103 + 8));
                v101 = (uint64_t *)((char *)v9 + v106);
LABEL_116:
                *v101 = v102;
              }
              v96 = v100 + 1;
              v99 += 8;
            }
            while (v100 + 1 != a2);
          }
        }
        else if (!v98)
        {
          do
          {
            v138 = *v7;
            v137 = v7[1];
            v7 = v96;
            v139 = *(unsigned __int8 *)(v137 + 8);
            if (v139 < *(unsigned __int8 *)(v138 + 8))
            {
              do
              {
                *v96 = v138;
                v138 = *(v96 - 2);
                --v96;
              }
              while (v139 < *(unsigned __int8 *)(v138 + 8));
              *v96 = v137;
            }
            v96 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_0 &,md::MeshRenderable **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t i;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (*(unsigned __int8 *)(v3 + 8) < *(unsigned __int8 *)(*a1 + 8))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v14 = *a1;
      v15 = a1[1];
      v16 = *(unsigned __int8 *)(v15 + 8);
      v17 = *(unsigned __int8 *)(*a1 + 8);
      v18 = *(a2 - 1);
      v19 = *(unsigned __int8 *)(v18 + 8);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          v41 = *a1;
          v40 = a1[1];
          if (*(unsigned __int8 *)(v40 + 8) < *(unsigned __int8 *)(*a1 + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          v47 = *(a2 - 1);
          if (*(unsigned __int8 *)(v47 + 8) >= v17)
            return 1;
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      v20 = a1 + 1;
      v21 = a1[1];
      v22 = a1 + 2;
      v23 = a1[2];
      v24 = *a1;
      v25 = *(unsigned __int8 *)(v21 + 8);
      v26 = *(unsigned __int8 *)(*a1 + 8);
      v27 = *(unsigned __int8 *)(v23 + 8);
      if (v25 < v26)
      {
        v28 = a1;
        v29 = a1 + 2;
        v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          v28 = a1 + 1;
          v29 = a1 + 2;
          v30 = v24;
          if (v27 >= v26)
            goto LABEL_35;
        }
LABEL_34:
        *v28 = v23;
        *v29 = v24;
        v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *v20 = v23;
        *v22 = v21;
        v28 = a1;
        v29 = a1 + 1;
        v30 = v21;
        if (v27 >= v26)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v21 = v23;
LABEL_36:
      v42 = *(a2 - 1);
      if (*(unsigned __int8 *)(v42 + 8) < *(unsigned __int8 *)(v21 + 8))
      {
        *v22 = v42;
        *(a2 - 1) = v21;
        v43 = *v22;
        v44 = *v20;
        v45 = *(unsigned __int8 *)(v43 + 8);
        if (v45 < *(unsigned __int8 *)(v44 + 8))
        {
          a1[1] = v43;
          a1[2] = v44;
          v46 = *a1;
          if (v45 < *(unsigned __int8 *)(*a1 + 8))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MeshRenderableLogic::injectDynamicRenderable(gdc::Entity,gdc::Registry *)::$_0 &,md::MeshRenderable **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      v9 = *(unsigned __int8 *)(v7 + 8);
      v10 = *(unsigned __int8 *)(*a1 + 8);
      v11 = *(unsigned __int8 *)(v5 + 8);
      if (v9 >= v10)
      {
        if (v11 >= v9)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v12 = a1;
        v13 = a1 + 1;
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 < v9)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v12 = a1 + 1;
        v13 = a1 + 2;
      }
      if (v11 >= v10)
        goto LABEL_19;
LABEL_18:
      *v12 = v5;
      *v13 = v8;
LABEL_19:
      v31 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v32 = 0;
      for (i = 24; ; i += 8)
      {
        v35 = *v31;
        v36 = *v6;
        v37 = *(unsigned __int8 *)(*v31 + 8);
        if (v37 < *(unsigned __int8 *)(v36 + 8))
        {
          v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            v39 = v38 - 8;
            if (v38 == 8)
            {
              v34 = a1;
              goto LABEL_22;
            }
            v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(unsigned __int8 *)(v36 + 8));
          v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *v34 = v35;
          if (++v32 == 8)
            break;
        }
        v6 = v31++;
        if (v31 == a2)
          return 1;
      }
      return v31 + 1 == a2;
  }
}

void std::__function::__func<md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_1>,BOOL ()(md::MeshRenderable *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_1>,BOOL ()(md::MeshRenderable *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CFF20;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_1>,BOOL ()(md::MeshRenderable *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CFF20;
}

BOOL std::__function::__func<md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_1>,BOOL ()(md::MeshRenderable *)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(unsigned __int8 *)(*(_QWORD *)a2 + 8) <= 3u)
    return *(_BYTE *)(*(_QWORD *)a2 + 144) != 0;
  return v2;
}

void std::__function::__func<md::MeshRenderableLogic::processChangedBatches(md::LayoutContext const&)::$_1,std::allocator<md::MeshRenderableLogic::processChangedBatches(md::LayoutContext const&)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MeshRenderableLogic::processChangedBatches(md::LayoutContext const&)::$_1,std::allocator<md::MeshRenderableLogic::processChangedBatches(md::LayoutContext const&)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42CFF68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::MeshRenderableLogic::processChangedBatches(md::LayoutContext const&)::$_1,std::allocator<md::MeshRenderableLogic::processChangedBatches(md::LayoutContext const&)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CFF68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::processChangedBatches(md::LayoutContext const&)::$_1,std::allocator<md::MeshRenderableLogic::processChangedBatches(md::LayoutContext const&)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count **v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (_QWORD *)a1[1];
  if (v2[1] != *v2)
  {
    v4 = 0;
    v5 = *a2;
    v6 = a1[2];
    v7 = (_QWORD *)a1[3];
    v8 = (std::__shared_weak_count **)(a1[5] + 160);
    do
    {
      v9 = *(_QWORD *)(*v2 + 8 * v4);
      v11 = v9;
      v10 = std::__hash_table<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::__unordered_map_hasher<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::hash<md::RenderBatch *>,std::equal_to<md::RenderBatch *>,true>,std::__unordered_map_equal<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::equal_to<md::RenderBatch *>,std::hash<md::RenderBatch *>,true>,std::allocator<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>>>::__emplace_unique_key_args<md::RenderBatch *,std::piecewise_construct_t const&,std::tuple<md::RenderBatch * const&>,std::tuple<>>(v6, v9, &v11);
      md::RenderBatch::prepareResources(v9, v5, v8, *v7 + 8 * v10[3], *v7 + 8 * v10[4]);
      ++v4;
    }
    while (v4 < (uint64_t)(*(_QWORD *)(a1[1] + 8) - *(_QWORD *)a1[1]) >> 3);
  }
}

void md::MeshRenderableLogic::processVisibilityUpdateCollector(md::MeshRenderableLogic *this, int8x8_t *a2, gdc::EntityCollector *a3)
{
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a2[1];
  if (!*(_QWORD *)&v6)
    goto LABEL_24;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0xCA93DB2C2ACE8387;
    if (*(_QWORD *)&v6 <= 0xCA93DB2C2ACE8387)
      v8 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0xCA93DB2C2ACE8387;
  }
  v9 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v8);
  if (!v9)
    goto LABEL_24;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_24;
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == 0xCA93DB2C2ACE8387)
      {
        if (v10[2] == 0xCA93DB2C2ACE8387)
          goto LABEL_22;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_24;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == 0xCA93DB2C2ACE8387)
      break;
    if (v12 >= *(_QWORD *)&v6)
      v12 %= *(_QWORD *)&v6;
    if (v12 != v8)
      goto LABEL_24;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_24;
  }
  if (v10[2] != 0xCA93DB2C2ACE8387)
    goto LABEL_11;
LABEL_22:
  v14 = v10[5];
  if (*(_QWORD *)(v14 + 8) != 0xCA93DB2C2ACE8387)
  {
LABEL_24:
    v15 = 0;
    goto LABEL_25;
  }
  v15 = *(unsigned __int16 **)(v14 + 32);
LABEL_25:
  v16 = (unint64_t *)*((_QWORD *)a3 + 4);
  v17 = (unint64_t *)*((_QWORD *)a3 + 5);
  while (v16 != v17)
  {
    v18 = *v16;
    if (gdc::Registry::hasAny<md::components::MeshInstance,md::components::DynamicMeshInstance>((uint64_t)a2, *v16))md::MeshRenderableLogic::updateEntityVisibility((uint64_t)this, v18, a2);
    ++v16;
  }
  if (v15)
  {
    if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
    v19 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v20 = (uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 3;
      v21 = *v15;
      v27 = 134218240;
      v28 = v20;
      v29 = 1024;
      v30 = v21;
      v22 = "Processed %zu visibility updates for BatchManager(id:%d)";
      v23 = v19;
      goto LABEL_39;
    }
  }
  else
  {
    if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
    v24 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      v25 = (uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 3;
      v26 = a2[5].u16[0];
      v27 = 134218240;
      v28 = v25;
      v29 = 1024;
      v30 = v26;
      v22 = "Processed %zu visibility updates for registry (id:%d)";
      v23 = v24;
LABEL_39:
      _os_log_impl(&dword_19F029000, v23, OS_LOG_TYPE_DEBUG, v22, (uint8_t *)&v27, 0x12u);
    }
  }
}

uint64_t gdc::Registry::hasAny<md::components::MeshInstance,md::components::DynamicMeshInstance>(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = HIDWORD(a2);
  v5 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(a1);
  v6 = a2 >> 39;
  v7 = v5[4];
  if (a2 >> 39 >= (v5[5] - v7) >> 3
    || (v8 = *(_QWORD *)(v7 + 8 * v6)) == 0
    || (v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F)), v11 = v5[7], v10 = v5[8], v9 >= (v10 - v11) >> 3)
    || ((v12 = v11 + 8 * v9, v12 != v10) ? (v13 = *(_DWORD *)(v12 + 4) == (_DWORD)v4) : (v13 = 0), !v13))
  {
    v14 = (_QWORD *)gdc::Registry::storage<md::components::DynamicMeshInstance>(a1);
    v15 = v14[4];
    if (v6 < (v14[5] - v15) >> 3 && (v16 = *(_QWORD *)(v15 + 8 * v6)) != 0)
    {
      v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(a2) & 0x7F));
      v19 = v14[7];
      v18 = v14[8];
      if (v17 < (v18 - v19) >> 3)
      {
        v20 = v19 + 8 * v17;
        if (*(_DWORD *)(v20 + 4) != (_DWORD)v4)
          v20 = v14[8];
        return v20 != v18;
      }
    }
    else
    {
      v18 = v14[8];
    }
    v20 = v18;
    return v20 != v18;
  }
  return 1;
}

void md::MeshRenderableLogic::updateEntityVisibility(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t *v27;
  _BOOL4 v28;
  int v29;
  _BOOL4 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t *v42;
  char v43;
  _BYTE v44[224];
  unsigned int v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v6)
    goto LABEL_43;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0xCA93DB2C2ACE8387;
    if (*(_QWORD *)&v6 <= 0xCA93DB2C2ACE8387)
      v8 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0xCA93DB2C2ACE8387;
  }
  v9 = *(_QWORD **)(*a3 + 8 * v8);
  if (!v9)
    goto LABEL_43;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_43;
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == 0xCA93DB2C2ACE8387)
      {
        if (v10[2] == 0xCA93DB2C2ACE8387)
          goto LABEL_22;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_43;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == 0xCA93DB2C2ACE8387)
      break;
    if (v12 >= *(_QWORD *)&v6)
      v12 %= *(_QWORD *)&v6;
    if (v12 != v8)
      goto LABEL_43;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_43;
  }
  if (v10[2] != 0xCA93DB2C2ACE8387)
    goto LABEL_11;
LABEL_22:
  v14 = v10[5];
  if (*(_QWORD *)(v14 + 8) != 0xCA93DB2C2ACE8387 || (v15 = *(_QWORD *)(v14 + 32)) == 0)
  {
LABEL_43:
    v31 = (_QWORD *)gdc::Registry::storage<md::components::Visibility>((uint64_t)a3);
    v32 = v31[4];
    if (a2 >> 39 < (v31[5] - v32) >> 3
      && (v33 = *(_QWORD *)(v32 + 8 * (a2 >> 39))) != 0
      && (v34 = *(unsigned __int16 *)(v33 + 2 * (HIDWORD(a2) & 0x7F)), v36 = v31[7],
                                                                       v35 = v31[8],
                                                                       v34 < (v35 - v36) >> 3)
      && ((v37 = v36 + 8 * v34, v37 != v35) ? (v38 = *(_DWORD *)(v37 + 4) == HIDWORD(a2)) : (v38 = 0), v38))
    {
      v39 = (_BYTE *)v31[11];
      v40 = (_BYTE *)(v31[10] + v34);
    }
    else
    {
      v39 = (_BYTE *)v31[11];
      v40 = v39;
    }
    if (v40 == v39)
      v41 = 0;
    else
      v41 = v40;
    v42 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((_QWORD *)(a1 + 336), a2);
    if (v42)
    {
      if (v41)
        *(_BYTE *)(v42[3] + 144) = *v41;
    }
    return;
  }
  v16 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)a3);
  v17 = v16[4];
  if (a2 >> 39 < (v16[5] - v17) >> 3
    && (v18 = *(_QWORD *)(v17 + 8 * (a2 >> 39))) != 0
    && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(a2) & 0x7F)), v21 = v16[7], v20 = v16[8], v19 < (v20 - v21) >> 3)
    && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == HIDWORD(a2)) : (v23 = 0), v23))
  {
    v24 = v16[11];
    v25 = v16[10] + 112 * v19;
  }
  else
  {
    v24 = v16[11];
    v25 = v24;
  }
  v26 = (_BYTE *)gdc::Registry::get<md::components::MeshInstance,md::components::Material>((uint64_t)a3, a2);
  if (v26 && v27)
  {
    v28 = v25 != v24;
    buildMaterialKey((uint64_t)a3, a2, v26, v27, (uint64_t)v44);
    v29 = v46;
    if (v25)
      v30 = v28;
    else
      v30 = 0;
    if (v46 && v30)
    {
      md::RenderBatchManager::process(v15, (size_t)v44, a2);
      v29 = v46;
    }
    if (v29 && v45 != -1)
      (*(&off_1E42F43B8 + v45))((int)&v43, (md::MaterialRenderBatchKey *)v44);
  }
}

void sub_19F87DBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  uint64_t v44;

  if (a42)
  {
    v44 = *(unsigned int *)(v42 + 224);
    if ((_DWORD)v44 != -1)
    {
      (*(&off_1E42F43B8 + v44))((int)&a12, (md::MaterialRenderBatchKey *)&a13);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::MeshRenderableLogic::updateEntityCustomRenderState(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t *v27;
  _BOOL4 v28;
  int v29;
  _BOOL4 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char v54;
  _BYTE v55[224];
  unsigned int v56;
  unsigned __int8 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v6)
    goto LABEL_43;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0xCA93DB2C2ACE8387;
    if (*(_QWORD *)&v6 <= 0xCA93DB2C2ACE8387)
      v8 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0xCA93DB2C2ACE8387;
  }
  v9 = *(_QWORD **)(*a3 + 8 * v8);
  if (!v9)
    goto LABEL_43;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_43;
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == 0xCA93DB2C2ACE8387)
      {
        if (v10[2] == 0xCA93DB2C2ACE8387)
          goto LABEL_22;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_43;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == 0xCA93DB2C2ACE8387)
      break;
    if (v12 >= *(_QWORD *)&v6)
      v12 %= *(_QWORD *)&v6;
    if (v12 != v8)
      goto LABEL_43;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_43;
  }
  if (v10[2] != 0xCA93DB2C2ACE8387)
    goto LABEL_11;
LABEL_22:
  v14 = v10[5];
  if (*(_QWORD *)(v14 + 8) != 0xCA93DB2C2ACE8387 || (v15 = *(_QWORD *)(v14 + 32)) == 0)
  {
LABEL_43:
    v31 = (_QWORD *)gdc::Registry::storage<md::components::CustomRenderState>((uint64_t)a3);
    v32 = v31[4];
    if (a2 >> 39 < (v31[5] - v32) >> 3
      && (v33 = *(_QWORD *)(v32 + 8 * (a2 >> 39))) != 0
      && (v34 = *(unsigned __int16 *)(v33 + 2 * (HIDWORD(a2) & 0x7F)), v36 = v31[7],
                                                                       v35 = v31[8],
                                                                       v34 < (v35 - v36) >> 3)
      && ((v37 = v36 + 8 * v34, v37 != v35) ? (v38 = *(_DWORD *)(v37 + 4) == HIDWORD(a2)) : (v38 = 0), v38))
    {
      v39 = v31[11];
      v40 = v31[10] + 24 * v34;
    }
    else
    {
      v39 = v31[11];
      v40 = v39;
    }
    if (v40 == v39)
      v41 = 0;
    else
      v41 = v40;
    v42 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((_QWORD *)(a1 + 336), a2);
    if (v42 && v41)
    {
      v43 = v42[3];
      v44 = *(_QWORD *)v41;
      if (*(_BYTE *)(v43 + 176))
      {
        v45 = *(_QWORD *)(v41 + 8);
        if (v45)
        {
          v46 = (unint64_t *)(v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = *(std::__shared_weak_count **)(v43 + 160);
        *(_QWORD *)(v43 + 152) = v44;
        *(_QWORD *)(v43 + 160) = v45;
        if (v48)
        {
          p_shared_owners = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(p_shared_owners);
          while (__stlxr(v50 - 1, p_shared_owners));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        *(_BYTE *)(v43 + 168) = *(_BYTE *)(v41 + 16);
      }
      else
      {
        *(_QWORD *)(v43 + 152) = v44;
        v51 = *(_QWORD *)(v41 + 8);
        *(_QWORD *)(v43 + 160) = v51;
        if (v51)
        {
          v52 = (unint64_t *)(v51 + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        *(_BYTE *)(v43 + 168) = *(_BYTE *)(v41 + 16);
        *(_BYTE *)(v43 + 176) = 1;
      }
    }
    return;
  }
  v16 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)a3);
  v17 = v16[4];
  if (a2 >> 39 < (v16[5] - v17) >> 3
    && (v18 = *(_QWORD *)(v17 + 8 * (a2 >> 39))) != 0
    && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(a2) & 0x7F)), v21 = v16[7], v20 = v16[8], v19 < (v20 - v21) >> 3)
    && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == HIDWORD(a2)) : (v23 = 0), v23))
  {
    v24 = v16[11];
    v25 = v16[10] + 112 * v19;
  }
  else
  {
    v24 = v16[11];
    v25 = v24;
  }
  v26 = (_BYTE *)gdc::Registry::get<md::components::MeshInstance,md::components::Material>((uint64_t)a3, a2);
  if (v26 && v27)
  {
    v28 = v25 != v24;
    buildMaterialKey((uint64_t)a3, a2, v26, v27, (uint64_t)v55);
    v29 = v57;
    if (v25)
      v30 = v28;
    else
      v30 = 0;
    if (v57 && v30)
    {
      md::RenderBatchManager::process(v15, (size_t)v55, a2);
      v29 = v57;
    }
    if (v29 && v56 != -1)
      (*(&off_1E42F43B8 + v56))((int)&v54, (md::MaterialRenderBatchKey *)v55);
  }
}

void sub_19F87DFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  uint64_t v44;

  if (a42)
  {
    v44 = *(unsigned int *)(v42 + 224);
    if ((_DWORD)v44 != -1)
    {
      (*(&off_1E42F43B8 + v44))((int)&a12, (md::MaterialRenderBatchKey *)&a13);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::MeshRenderableLogic::processMaterialUpdateCollector(md::MeshRenderableLogic *this, int8x8_t *a2, gdc::EntityCollector *a3)
{
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t *v15;
  unint64_t *i;
  unint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  BOOL v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0xCA93DB2C2ACE8387;
    if (*(_QWORD *)&v5 <= 0xCA93DB2C2ACE8387)
      v7 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0xCA93DB2C2ACE8387;
  }
  v8 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0xCA93DB2C2ACE8387)
      {
        if (v9[2] == 0xCA93DB2C2ACE8387)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0xCA93DB2C2ACE8387)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0xCA93DB2C2ACE8387)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0xCA93DB2C2ACE8387)
  {
    v14 = *(unsigned __int16 **)(v13 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v14 = 0;
LABEL_25:
  v15 = (unint64_t *)*((_QWORD *)a3 + 4);
  for (i = (unint64_t *)*((_QWORD *)a3 + 5); v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (_BYTE *)gdc::Registry::get<md::components::MeshInstance,md::components::Material>((uint64_t)a2, *v15);
    if (v19)
      v20 = v18 == 0;
    else
      v20 = 1;
    if (!v20)
    {
      buildMaterialKey((uint64_t)a2, v17, v18, v19, (uint64_t)buf);
      if (v30)
      {
        md::RenderBatchManager::process((uint64_t)v14, (size_t)buf, v17);
        if (v30)
        {
          if (v29 != -1)
            (*(&off_1E42F43B8 + v29))((int)&v24, (md::MaterialRenderBatchKey *)buf);
        }
      }
    }
  }
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
  v21 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v22 = (uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 3;
    v23 = *v14;
    *(_DWORD *)buf = 134218240;
    v26 = v22;
    v27 = 1024;
    v28 = v23;
    _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_DEBUG, "Processed %zu material updates for BatchManager(id:%d)", buf, 0x12u);
  }
}

void sub_19F87E2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  if (a43)
  {
    v46 = *(unsigned int *)(v44 + 224);
    if ((_DWORD)v46 != -1)
    {
      (*(void (**)(char *, char *))(v43 + 8 * v46))(&a13, &a14);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(int a1, md::MaterialRenderBatchKey *this)
{
  md::MaterialRenderBatchKey::~MaterialRenderBatchKey(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v3 = (std::__shared_weak_count *)a2[7];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a2[5];
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v6 = (std::__shared_weak_count *)a2[5];
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  v9 = (std::__shared_weak_count *)a2[3];
  if (!v9)
    goto LABEL_15;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)a2[1];
    if (!v12)
      return;
  }
  else
  {
LABEL_15:
    v12 = (std::__shared_weak_count *)a2[1];
    if (!v12)
      return;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md22MaterialRenderBatchKeyENS8_26DynamicTypedRenderBatchKeyENS8_27MaterialDecalRenderBatchKeyEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(int a1, md::MaterialDecalRenderBatchKey *this)
{
  md::MaterialDecalRenderBatchKey::~MaterialDecalRenderBatchKey(this);
}

void md::MaterialDecalRenderBatchKey::~MaterialDecalRenderBatchKey(md::MaterialDecalRenderBatchKey *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void md::MaterialRenderBatchKey::~MaterialRenderBatchKey(md::MaterialRenderBatchKey *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  if (*((_BYTE *)this + 208))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v11)
    goto LABEL_21;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v14)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v14)
      goto LABEL_27;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_27:
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v17)
    goto LABEL_31;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v20)
      goto LABEL_37;
  }
  else
  {
LABEL_31:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v20)
      goto LABEL_37;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_37:
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v23)
    goto LABEL_41;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v26)
      return;
  }
  else
  {
LABEL_41:
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v26)
      return;
  }
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
}

uint64_t md::BaseRenderBatchKey<ggl::VertexData>::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = a2[1];
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v9 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = a2[2];
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v13 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v12;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = a2[3];
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v17 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 70) = *(_QWORD *)((char *)a2 + 70);
  *(_QWORD *)(a1 + 64) = v20;
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E28D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E28D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gdc::ComponentStorageWrapper<md::components::MaterialRaster>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::MaterialRaster>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_BYTE *)(v14 + v7) = *(_BYTE *)--a1[11];
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::MaterialRaster>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::components::MaterialRaster>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::IntersectionWithTileEdges>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::IntersectionWithTileEdges>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::IntersectionWithTileEdges>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::components::IntersectionWithTileEdges>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0,std::allocator<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0>,void ()(gdc::Registry *,gdc::EntityCollector *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0,std::allocator<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0>,void ()(gdc::Registry *,gdc::EntityCollector *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CFFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0,std::allocator<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0>,void ()(gdc::Registry *,gdc::EntityCollector *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CFFB0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0,std::allocator<md::MeshRenderableLogic::getWrappedCollectorVisitor(BOOL,std::function<void ()(gdc::Registry *,gdc::EntityCollector *)>)::$_0>,void ()(gdc::Registry *,gdc::EntityCollector *)>::operator()(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a3;
  v4 = *(_QWORD *)(*a3 + 40) - *(_QWORD *)(*a3 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(result + 16);
    v6 = *(_QWORD *)(v5 + 120);
    if (v6 <= *(int *)(result + 8))
    {
      v7 = *a2;
      *(_QWORD *)(v5 + 120) = v6 + (v4 >> 3);
      v8 = *(_QWORD *)(result + 24);
      v10 = v3;
      v11 = v7;
      v9 = *(_QWORD *)(v8 + 24);
      if (!v9)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x19F87EE48);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11, &v10);
      *(_QWORD *)(v3 + 40) = *(_QWORD *)(v3 + 32);
    }
    else
    {
      *(_BYTE *)(v5 + 128) = 1;
    }
  }
  return result;
}

void std::__function::__func<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(gdc::Registry *,gdc::EntityCollector *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(gdc::Registry *,gdc::EntityCollector *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_1E42C6C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(gdc::Registry *,gdc::EntityCollector *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42C6C30;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0,std::allocator<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0>,void ()(gdc::Registry *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0,std::allocator<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0>,void ()(gdc::Registry *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CFE90;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0,std::allocator<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0>,void ()(gdc::Registry *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CFE90;
}

void std::__function::__func<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0,std::allocator<md::MeshRenderableLogic::processUpdates(md::MaterialContext const&)::$_0>,void ()(gdc::Registry *)>::operator()(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x8_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v64;

  v2 = (_QWORD *)*a2;
  v3 = *(int8x8_t *)(*a2 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCA93DB2C2ACE8387;
      if (*(_QWORD *)&v3 <= 0xCA93DB2C2ACE8387)
        v5 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCA93DB2C2ACE8387;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCA93DB2C2ACE8387)
            {
              if (v7[2] == 0xCA93DB2C2ACE8387)
                goto LABEL_22;
            }
            else if ((v10 & v8) != v5)
            {
              return;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCA93DB2C2ACE8387)
          {
            if (v7[2] == 0xCA93DB2C2ACE8387)
            {
LABEL_22:
              v11 = v7[5];
              if (*(_QWORD *)(v11 + 8) == 0xCA93DB2C2ACE8387)
              {
                v12 = *(int8x8_t **)(v11 + 32);
                if (v12)
                {
                  v13 = (_QWORD *)gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(*a2);
                  v14 = gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v2);
                  v15 = (_QWORD *)v14;
                  v16 = v14 + 32;
                  v18 = v13[7];
                  v17 = v13[8];
                  if (*(_QWORD *)(v14 + 64) - *(_QWORD *)(v14 + 56) >= (unint64_t)(v17 - v18))
                    v19 = v13 + 4;
                  else
                    v19 = (_QWORD *)(v14 + 32);
                  if (v17 != v18 && v13 + 4 == v19)
                  {
                    do
                    {
                      v28 = *(unsigned int *)(v18 + 4);
                      v29 = v15[4];
                      if (v28 >> 7 < (v15[5] - v29) >> 3)
                      {
                        v30 = *(_QWORD *)(v29 + 8 * (v28 >> 7));
                        if (v30)
                        {
                          v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
                          v33 = v15[7];
                          v32 = v15[8];
                          if (v31 < (v32 - v33) >> 3)
                          {
                            v34 = v33 + 8 * v31;
                            if (v34 != v32 && *(_DWORD *)(v34 + 4) == (_DWORD)v28)
                            {
                              v64 = *(_QWORD *)v18;
                              md::RenderBatchManager::removeEntity(v12, &v64);
                            }
                          }
                        }
                      }
                      v18 += 8;
                    }
                    while (v18 != v17);
                  }
                  if ((_QWORD *)v16 == v19)
                  {
                    v45 = v15[7];
                    v44 = v15[8];
                    while (v45 != v44)
                    {
                      v46 = *(unsigned int *)(v45 + 4);
                      v47 = v13[4];
                      if (v46 >> 7 < (v13[5] - v47) >> 3)
                      {
                        v48 = *(_QWORD *)(v47 + 8 * (v46 >> 7));
                        if (v48)
                        {
                          v49 = *(unsigned __int16 *)(v48 + 2 * (v46 & 0x7F));
                          v51 = v13[7];
                          v50 = v13[8];
                          if (v49 < (v50 - v51) >> 3)
                          {
                            v52 = v51 + 8 * v49;
                            if (v52 != v50 && *(_DWORD *)(v52 + 4) == (_DWORD)v46)
                            {
                              v64 = *(_QWORD *)v45;
                              md::RenderBatchManager::removeEntity(v12, &v64);
                            }
                          }
                        }
                      }
                      v45 += 8;
                    }
                  }
                  v20 = (_QWORD *)gdc::Registry::storage<md::components::QueuedForDestruction<>>((uint64_t)v2);
                  v21 = gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v2);
                  v22 = (_QWORD *)v21;
                  v23 = v21 + 32;
                  v25 = v20[7];
                  v24 = v20[8];
                  if (*(_QWORD *)(v21 + 64) - *(_QWORD *)(v21 + 56) >= (unint64_t)(v24 - v25))
                    v26 = v20 + 4;
                  else
                    v26 = (_QWORD *)(v21 + 32);
                  if (v24 != v25 && v20 + 4 == v26)
                  {
                    do
                    {
                      v36 = *(unsigned int *)(v25 + 4);
                      v37 = v22[4];
                      if (v36 >> 7 < (v22[5] - v37) >> 3)
                      {
                        v38 = *(_QWORD *)(v37 + 8 * (v36 >> 7));
                        if (v38)
                        {
                          v39 = *(unsigned __int16 *)(v38 + 2 * (v36 & 0x7F));
                          v41 = v22[7];
                          v40 = v22[8];
                          if (v39 < (v40 - v41) >> 3)
                          {
                            v42 = v41 + 8 * v39;
                            if (v42 != v40 && *(_DWORD *)(v42 + 4) == (_DWORD)v36)
                            {
                              v64 = *(_QWORD *)v25;
                              md::RenderBatchManager::removeEntity(v12, &v64);
                            }
                          }
                        }
                      }
                      v25 += 8;
                    }
                    while (v25 != v24);
                  }
                  if ((_QWORD *)v23 == v26)
                  {
                    v55 = v22[7];
                    v54 = v22[8];
                    while (v55 != v54)
                    {
                      v56 = *(unsigned int *)(v55 + 4);
                      v57 = v20[4];
                      if (v56 >> 7 < (v20[5] - v57) >> 3)
                      {
                        v58 = *(_QWORD *)(v57 + 8 * (v56 >> 7));
                        if (v58)
                        {
                          v59 = *(unsigned __int16 *)(v58 + 2 * (v56 & 0x7F));
                          v61 = v20[7];
                          v60 = v20[8];
                          if (v59 < (v60 - v61) >> 3)
                          {
                            v62 = v61 + 8 * v59;
                            if (v62 != v60 && *(_DWORD *)(v62 + 4) == (_DWORD)v56)
                            {
                              v64 = *(_QWORD *)v55;
                              md::RenderBatchManager::removeEntity(v12, &v64);
                            }
                          }
                        }
                      }
                      v55 += 8;
                    }
                  }
                }
              }
              return;
            }
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              return;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
}

_QWORD *gdc::ManagedObjectHolder<md::RenderBatchManager>::~ManagedObjectHolder(_QWORD *a1)
{
  md::RenderBatchManager *v2;

  *a1 = &off_1E42B0F78;
  v2 = (md::RenderBatchManager *)a1[4];
  if (v2)
  {
    md::RenderBatchManager::~RenderBatchManager(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::RenderBatchManager>::~ManagedObjectHolder(_QWORD *a1)
{
  md::RenderBatchManager *v1;

  *a1 = &off_1E42B0F78;
  v1 = (md::RenderBatchManager *)a1[4];
  if (v1)
  {
    md::RenderBatchManager::~RenderBatchManager(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::RenderBatchManager>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::processEntering(void)::$_0,std::allocator<md::MeshRenderableLogic::processEntering(void)::$_0>,BOOL ()(gdc::Registry * const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::processEntering(void)::$_0,std::allocator<md::MeshRenderableLogic::processEntering(void)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CFED8;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::processEntering(void)::$_0,std::allocator<md::MeshRenderableLogic::processEntering(void)::$_0>,BOOL ()(gdc::Registry * const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CFED8;
}

BOOL std::__function::__func<md::MeshRenderableLogic::processEntering(void)::$_0,std::allocator<md::MeshRenderableLogic::processEntering(void)::$_0>,BOOL ()(gdc::Registry * const&)>::operator()(uint64_t a1, int8x8_t **a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *a2;
  v3 = (*a2)[1];
  if (!*(_QWORD *)&v3)
    goto LABEL_25;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 0xCBD572B797B24F09;
    if (*(_QWORD *)&v3 <= 0xCBD572B797B24F09)
      v5 = 0xCBD572B797B24F09 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & 0xCBD572B797B24F09;
  }
  v6 = *(_QWORD **)(*(_QWORD *)v2 + 8 * v5);
  if (!v6)
    goto LABEL_25;
  v7 = (_QWORD *)*v6;
  if (!v7)
    goto LABEL_25;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == 0xCBD572B797B24F09)
      {
        if (v7[2] == 0xCBD572B797B24F09)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_25;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == 0xCBD572B797B24F09)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      goto LABEL_25;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_25;
  }
  if (v7[2] != 0xCBD572B797B24F09)
    goto LABEL_11;
LABEL_22:
  v11 = v7[5];
  if (*(_QWORD *)(v11 + 8) == 0xCBD572B797B24F09 && *(_QWORD *)(v11 + 32))
    return 0;
LABEL_25:
  v13 = gdc::Registry::storage<md::components::TexturedMeshInstance>((uint64_t)v2);
  return *(_QWORD *)(v13 + 88) == *(_QWORD *)(v13 + 80);
}

uint64_t gdc::Registry::storage<md::components::TexturedMeshInstance>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF135342237B2A4BFLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF135342237B2A4BFLL;
      if (*(_QWORD *)&v3 <= 0xF135342237B2A4BFLL)
        v5 = 0xF135342237B2A4BFLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF135342237B2A4BFLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF135342237B2A4BFLL)
            {
              if (v7[2] == 0xF135342237B2A4BFLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF135342237B2A4BFLL)
          {
            if (v7[2] == 0xF135342237B2A4BFLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::TexturedMeshInstance]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B32B8;
  *(_QWORD *)(v11 + 8) = 0xF135342237B2A4BFLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF135342237B2A4BFLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF135342237B2A4BFLL;
  v15[1] = "md::components::TexturedMeshInstance]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF135342237B2A4BFLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F87F710(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v44[2];

  v42 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  v15 = v14 + 152 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v16 = a1[11];
  v17 = *(_OWORD *)(v16 - 152);
  v18 = *(_OWORD *)(v16 - 136);
  *(_BYTE *)(v15 + 32) = *(_BYTE *)(v16 - 120);
  *(_OWORD *)v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  *(_DWORD *)(v15 + 36) = *(_DWORD *)(v16 - 116);
  *(_DWORD *)(v15 + 40) = *(_DWORD *)(v16 - 112);
  *(_DWORD *)(v15 + 44) = *(_DWORD *)(v16 - 108);
  *(_DWORD *)(v15 + 48) = *(_DWORD *)(v16 - 104);
  *(_DWORD *)(v15 + 52) = *(_DWORD *)(v16 - 100);
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(v16 - 96);
  *(_DWORD *)(v15 + 60) = *(_DWORD *)(v16 - 92);
  *(_DWORD *)(v15 + 64) = *(_DWORD *)(v16 - 88);
  *(_DWORD *)(v15 + 68) = *(_DWORD *)(v16 - 84);
  *(_DWORD *)(v15 + 72) = *(_DWORD *)(v16 - 80);
  *(_DWORD *)(v15 + 76) = *(_DWORD *)(v16 - 76);
  *(_DWORD *)(v15 + 80) = *(_DWORD *)(v16 - 72);
  *(_DWORD *)(v15 + 84) = *(_DWORD *)(v16 - 68);
  *(_DWORD *)(v15 + 88) = *(_DWORD *)(v16 - 64);
  *(_DWORD *)(v15 + 92) = *(_DWORD *)(v16 - 60);
  *(_DWORD *)(v15 + 96) = *(_DWORD *)(v16 - 56);
  *(_DWORD *)(v15 + 100) = *(_DWORD *)(v16 - 52);
  *(_DWORD *)(v15 + 104) = *(_DWORD *)(v16 - 48);
  v20 = *(_QWORD *)(v16 - 40);
  v19 = *(_QWORD *)(v16 - 32);
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(v15 + 112) = v20;
  v23 = v14 + 152 * v7;
  v24 = *(std::__shared_weak_count **)(v23 + 120);
  *(_QWORD *)(v23 + 120) = v19;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v15 != v16 - 152)
    std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(v14 + 152 * v7 + 128, *(uint64_t **)(v16 - 24), *(uint64_t **)(v16 - 16), (uint64_t)(*(_QWORD *)(v16 - 16) - *(_QWORD *)(v16 - 24)) >> 4);
  v27 = a1[11];
  v28 = *(_QWORD *)(v27 - 24);
  if (v28)
  {
    v29 = *(_QWORD *)(v27 - 16);
    v30 = *(void **)(v27 - 24);
    if (v29 != v28)
    {
      do
      {
        v31 = *(std::__shared_weak_count **)(v29 - 8);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 16;
      }
      while (v29 != v28);
      v30 = *(void **)(v27 - 24);
    }
    *(_QWORD *)(v27 - 16) = v28;
    operator delete(v30);
  }
  v34 = *(std::__shared_weak_count **)(v27 - 32);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  a1[11] = v27 - 152;
  v37 = (_QWORD *)a1[28];
  if (!v37)
    return 1;
  v38 = a1[31];
  while (1)
  {
    v44[0] = &v42;
    v44[1] = 1;
    v43 = v38;
    v39 = v37[6];
    if (!v39)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v39 + 48))(v39, &v43, v44);
    v37 = (_QWORD *)*v37;
    if (!v37)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::contains(v40, v41);
}

BOOL gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::~ComponentStorageWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 24);
        if (v5)
        {
          v6 = *(_QWORD *)(v3 - 16);
          v7 = *(void **)(v3 - 24);
          if (v6 != v5)
          {
            do
            {
              v8 = *(std::__shared_weak_count **)(v6 - 8);
              if (v8)
              {
                p_shared_owners = (unint64_t *)&v8->__shared_owners_;
                do
                  v10 = __ldaxr(p_shared_owners);
                while (__stlxr(v10 - 1, p_shared_owners));
                if (!v10)
                {
                  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                  std::__shared_weak_count::__release_weak(v8);
                }
              }
              v6 -= 16;
            }
            while (v6 != v5);
            v7 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v7);
        }
        v11 = *(std::__shared_weak_count **)(v3 - 32);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v3 -= 152;
      }
      while (v3 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v14 = (void *)a1[7];
  if (v14)
  {
    a1[8] = v14;
    operator delete(v14);
  }
  v15 = (_QWORD *)a1[4];
  if (v15)
  {
    v16 = (_QWORD *)a1[5];
    v17 = (void *)a1[4];
    if (v16 != v15)
    {
      do
      {
        v19 = *--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          MEMORY[0x1A1AF4E00](v18, 0x1000C40104B78CFLL);
      }
      while (v16 != v15);
      v17 = (void *)a1[4];
    }
    a1[5] = v15;
    operator delete(v17);
  }
  return a1;
}

void md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  char *v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t **v99;
  uint64_t v100;
  _QWORD *v101;
  void *__p;
  char *v103;
  _QWORD *v104;
  void (**v105)(md::MeshRenderable *__hidden);
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[22];
  uint64_t v116;
  std::__shared_weak_count *v117;
  char v118;
  char v119;
  uint64_t v120;
  char v121;
  char v122;
  _BYTE v123[28];
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _QWORD v130[4];
  _BYTE *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  char v134;

  v3 = a1;
  LOWORD(v105) = *(_WORD *)(a2 + 40);
  v4 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t *)(a1 + 296), (unsigned __int16)v105, &v105);
  v5 = (_QWORD *)gdc::Registry::storage<md::components::TexturedMeshInstance>(a2);
  v6 = v5[7];
  v7 = v5[8];
  if (v6 != v7)
  {
    v8 = (uint64_t *)v5[10];
    v99 = (uint64_t **)(v3 + 232);
    v100 = v5[8];
    v101 = v4;
    do
    {
      v9 = operator new();
      md::InstanceData::InstanceData(v9, 1u, 0);
      v105 = (void (**)(md::MeshRenderable *__hidden))v9;
      v10 = (std::__shared_weak_count *)operator new();
      v10->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6BC0;
      v10->__shared_weak_owners_ = 0;
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
      *(_QWORD *)&v106 = v10;
      md::MeshRenderable::MeshRenderable((uint64_t)v130, 3, v8, &v105);
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      v13 = *(_QWORD *)v131;
      v14 = *(_QWORD *)(*(_QWORD *)v131 + 48) - *(_QWORD *)(*(_QWORD *)v131 + 40);
      v15 = v14 % *(_QWORD *)(*(_QWORD *)v131 + 8);
      v16 = *(_QWORD *)(*(_QWORD *)v131 + 72);
      *(_DWORD *)v16 = 1065353216;
      *(_QWORD *)(v16 + 12) = 0;
      *(_QWORD *)(v16 + 4) = 0;
      *(_DWORD *)(v16 + 20) = 1065353216;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      *(_DWORD *)(v16 + 40) = 1065353216;
      *(_QWORD *)(v16 + 52) = 0;
      *(_QWORD *)(v16 + 44) = 0;
      *(_DWORD *)(v16 + 60) = 1065353216;
      v17 = v14 - v15;
      if (v17)
      {
        if (*(_QWORD *)(v13 + 64) > v17)
          v17 = *(_QWORD *)(v13 + 64);
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 64) = v17;
      }
      v131[20] = 1;
      __p = 0;
      v103 = 0;
      v104 = 0;
      v18 = (char *)v8[16];
      v19 = (char *)v8[17];
      v20 = v19 - v18;
      if (v19 != v18)
      {
        if (v20 < 0)
          abort();
        v21 = operator new(v19 - v18);
        __p = v21;
        v103 = (char *)v21;
        v104 = &v21[2 * (v20 >> 4)];
        do
        {
          *v21 = *(_QWORD *)v18;
          v22 = *((_QWORD *)v18 + 1);
          v21[1] = v22;
          if (v22)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v18 += 16;
          v21 += 2;
        }
        while (v18 != v19);
        v103 = (char *)v21;
      }
      v25 = md::MeshRenderableBuilder::buildRenderable((uint64_t)&v105, (uint64_t)v130, v8 + 14, (uint64_t **)&__p, (uint64_t)v8 + 60);
      v26 = (char *)__p;
      if (__p)
      {
        v27 = v103;
        v28 = __p;
        if (v103 != __p)
        {
          do
          {
            v29 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
            if (v29)
            {
              v30 = (unint64_t *)&v29->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v29->__on_zero_shared)(v29, v25);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            v27 -= 16;
          }
          while (v27 != v26);
          v28 = __p;
        }
        v103 = v26;
        operator delete(v28);
      }
      v32 = *(_QWORD **)(v3 + 264);
      if (!v32)
      {
        v33 = (char *)malloc_type_malloc(*(_QWORD *)(v3 + 256), 0x160B39uLL);
        v34 = v33;
        v35 = v99;
        while (1)
        {
          v36 = *v35;
          v37 = v35;
          if (!*v35)
            break;
          while (1)
          {
            v35 = (uint64_t **)v36;
            v38 = v36[4];
            if ((unint64_t)v33 < v38)
              break;
            if (v38 >= (unint64_t)v33)
              goto LABEL_42;
            v36 = v35[1];
            if (!v36)
            {
              v37 = v35 + 1;
              goto LABEL_39;
            }
          }
        }
LABEL_39:
        v39 = (uint64_t *)operator new(0x28uLL);
        v39[4] = (uint64_t)v34;
        *v39 = 0;
        v39[1] = 0;
        v39[2] = (uint64_t)v35;
        *v37 = v39;
        v40 = **(_QWORD **)(v3 + 224);
        if (v40)
        {
          *(_QWORD *)(v3 + 224) = v40;
          v39 = *v37;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 232), v39);
        ++*(_QWORD *)(v3 + 240);
LABEL_42:
        v32 = *(_QWORD **)(v3 + 264);
        v41 = 312 * *(_QWORD *)(v3 + 248) - 312;
        if ((v41 & 0x8000000000000000) == 0)
        {
          v42 = &v34[v41];
          do
          {
            *(_QWORD *)v42 = v32;
            v43 = v42 - 312;
            v32 = v42;
            v42 = v43;
          }
          while (v43 >= v34);
          v32 = v43 + 312;
        }
        *(_QWORD *)(v3 + 264) = v32;
      }
      *(_QWORD *)(v3 + 264) = *v32;
      *v32 = &off_1E428F838;
      v44 = v106;
      v32[3] = v107;
      *(_OWORD *)(v32 + 1) = v44;
      v32[4] = v108;
      v45 = v109;
      v32[5] = v109;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v48 = v110;
      v49 = v112;
      *((_OWORD *)v32 + 4) = v111;
      *((_OWORD *)v32 + 5) = v49;
      *((_OWORD *)v32 + 3) = v48;
      v50 = v113;
      v51 = v114;
      v52 = *(_OWORD *)v115;
      *(_QWORD *)((char *)v32 + 142) = *(_QWORD *)&v115[14];
      *((_OWORD *)v32 + 7) = v51;
      *((_OWORD *)v32 + 8) = v52;
      *((_OWORD *)v32 + 6) = v50;
      *((_BYTE *)v32 + 152) = 0;
      *((_BYTE *)v32 + 176) = 0;
      if (v119)
      {
        v32[19] = v116;
        v53 = v117;
        v32[20] = v117;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        *((_BYTE *)v32 + 168) = v118;
        *((_BYTE *)v32 + 176) = 1;
      }
      v32[23] = v120;
      *((_WORD *)v32 + 96) = 0;
      if (v122)
      {
        *((_BYTE *)v32 + 192) = v121;
        *((_BYTE *)v32 + 193) = 1;
      }
      v56 = *(_OWORD *)v123;
      *((_OWORD *)v32 + 13) = *(_OWORD *)&v123[12];
      *(_OWORD *)((char *)v32 + 196) = v56;
      *v32 = &off_1E4296560;
      *((_OWORD *)v32 + 14) = v124;
      v124 = 0uLL;
      v32[31] = 0;
      v32[32] = 0;
      v32[30] = 0;
      *((_OWORD *)v32 + 15) = v125;
      v32[32] = v126;
      v125 = 0uLL;
      v126 = 0;
      v57 = v127;
      v58 = v129;
      *(_OWORD *)(v32 + 35) = v128;
      *(_OWORD *)(v32 + 37) = v58;
      *(_OWORD *)(v32 + 33) = v57;
      v60 = (char *)v4[4];
      v59 = v4[5];
      if ((unint64_t)v60 >= v59)
      {
        v62 = (char *)v4[3];
        v63 = (v60 - v62) >> 3;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 61)
          abort();
        v65 = v6;
        v66 = v3;
        v67 = v59 - (_QWORD)v62;
        if (v67 >> 2 > v64)
          v64 = v67 >> 2;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v64;
        if (v68)
        {
          if (v68 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v69 = operator new(8 * v68);
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v63];
        *v70 = v32;
        v61 = v70 + 1;
        if (v60 == v62)
        {
          v62 = v60;
        }
        else
        {
          v71 = v60 - 8 - v62;
          if (v71 < 0x58)
            goto LABEL_127;
          if ((unint64_t)(v62 - v69) < 0x20)
            goto LABEL_127;
          v72 = (v71 >> 3) + 1;
          v73 = &v69[8 * v63 - 16];
          v74 = v60 - 16;
          v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v76 = *(_OWORD *)v74;
            *(v73 - 1) = *((_OWORD *)v74 - 1);
            *v73 = v76;
            v73 -= 2;
            v74 -= 32;
            v75 -= 4;
          }
          while (v75);
          v70 -= v72 & 0x3FFFFFFFFFFFFFFCLL;
          v60 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
          if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_127:
            do
            {
              v77 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *--v70 = v77;
            }
            while (v60 != v62);
            v62 = (char *)v101[3];
          }
        }
        v101[3] = v70;
        v101[4] = v61;
        v101[5] = &v69[8 * v68];
        if (v62)
          operator delete(v62);
        v3 = v66;
        v6 = v65;
        v7 = v100;
      }
      else
      {
        *(_QWORD *)v60 = v32;
        v61 = v60 + 8;
      }
      v101[4] = v61;
      v4 = v101;
      v105 = &off_1E4296560;
      v78 = v125;
      if ((_QWORD)v125)
      {
        v79 = *((_QWORD *)&v125 + 1);
        v80 = (void *)v125;
        if (*((_QWORD *)&v125 + 1) != (_QWORD)v125)
        {
          do
          {
            v81 = *(std::__shared_weak_count **)(v79 - 8);
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v79 -= 16;
          }
          while (v79 != v78);
          v80 = (void *)v125;
        }
        *((_QWORD *)&v125 + 1) = v78;
        operator delete(v80);
      }
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
      if (*((_QWORD *)&v124 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v105 = &off_1E428F838;
      if (!v119)
        goto LABEL_102;
      v87 = v117;
      if (!v117)
        goto LABEL_102;
      v88 = (unint64_t *)&v117->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
        v90 = v109;
        if (!v109)
          goto LABEL_107;
      }
      else
      {
LABEL_102:
        v90 = v109;
        if (!v109)
          goto LABEL_107;
      }
      v91 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
LABEL_107:
      v130[0] = &off_1E428F838;
      if (!v134)
        goto LABEL_112;
      v93 = v133;
      if (!v133)
        goto LABEL_112;
      v94 = (unint64_t *)&v133->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        v96 = v132;
        if (v132)
        {
LABEL_113:
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
      }
      else
      {
LABEL_112:
        v96 = v132;
        if (v132)
          goto LABEL_113;
      }
      v8 += 19;
      v6 += 8;
    }
    while (v6 != v7);
  }
}

void std::__function::__func<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1>,BOOL ()(gdc::Registry * const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1>,BOOL ()(gdc::Registry * const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CFFF8;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1>,BOOL ()(gdc::Registry * const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CFFF8;
}

BOOL std::__function::__func<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1,std::allocator<md::MeshRenderableLogic::updateStaticNonBatchedMeshes(md::CameraContext const&,md::MaterialContext const&)::$_1>,BOOL ()(gdc::Registry * const&)>::operator()(uint64_t a1, int8x8_t **a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (*a2)[1];
  if (!*(_QWORD *)&v2)
    return 1;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0xCBD572B797B24F09;
    if (*(_QWORD *)&v2 <= 0xCBD572B797B24F09)
      v4 = 0xCBD572B797B24F09 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & 0xCBD572B797B24F09;
  }
  v5 = *(_QWORD **)(*(_QWORD *)*a2 + 8 * v4);
  if (!v5)
    return 1;
  v6 = (_QWORD *)*v5;
  if (!v6)
    return 1;
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == 0xCBD572B797B24F09)
      {
        if (v6[2] == 0xCBD572B797B24F09)
          goto LABEL_22;
      }
      else if ((v9 & v7) != v4)
      {
        return 1;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        return 1;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == 0xCBD572B797B24F09)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      return 1;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return 1;
  }
  if (v6[2] != 0xCBD572B797B24F09)
    goto LABEL_11;
LABEL_22:
  v10 = v6[5];
  if (*(_QWORD *)(v10 + 8) == 0xCBD572B797B24F09)
    return *(_QWORD *)(v10 + 32) == 0;
  return 1;
}

void _ZNSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__1NS_9allocatorISR_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__1NS_9allocatorISR_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0088;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__1NS_9allocatorISR_EEFvvEE7__cloneEPNS0_6__baseISU_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0088;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__1NS_9allocatorISR_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MeshRenderableLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__0NS_9allocatorISR_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__0NS_9allocatorISR_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D0040;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md19MeshRenderableLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_15MaterialContextENS2_12AssetContextENS2_17StyleLogicContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_13CameraContextENS2_14DrapingContextENS2_25IdentifiedResourceContextENS2_11PuckContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_21MeshRenderableContextEE3__0NS_9allocatorISR_EEFvvEE7__cloneEPNS0_6__baseISU_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D0040;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>::buildRequiredTuple<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_209;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0xD2404CDD1F9A6950;
    if (a3 <= 0xD2404CDD1F9A6950)
      v4 = 0xD2404CDD1F9A6950 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0xD2404CDD1F9A6950;
  }
  v13 = *(_QWORD **)(a2 + 8 * v4);
  if (!v13)
    goto LABEL_25;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0xD2404CDD1F9A6950)
      {
        if (v14[2] == 0xD2404CDD1F9A6950)
          goto LABEL_23;
      }
      else if ((v16 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == 0xD2404CDD1F9A6950)
      break;
    if (v15 >= a3)
      v15 %= a3;
    if (v15 != v4)
      goto LABEL_25;
LABEL_12:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_25;
  }
  if (v14[2] != 0xD2404CDD1F9A6950)
    goto LABEL_12;
LABEL_23:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0xD2404CDD1F9A6950)
  {
    v9 = *(_QWORD *)(v17 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x88B81689974D86F3;
    if (a3 <= 0x88B81689974D86F3)
      v18 = 0x88B81689974D86F3 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x88B81689974D86F3;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_48;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x88B81689974D86F3)
      {
        if (v20[2] == 0x88B81689974D86F3)
          goto LABEL_46;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_48;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v21 = v20[1];
    if (v21 != 0x88B81689974D86F3)
    {
      if (v21 >= a3)
        v21 %= a3;
      if (v21 != v18)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v20[2] != 0x88B81689974D86F3)
    {
LABEL_35:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) == 0x88B81689974D86F3)
  {
    v8 = *(_QWORD *)(v23 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v8 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v24 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v24 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v24 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v25 = *(_QWORD **)(a2 + 8 * v24);
  if (!v25)
    goto LABEL_71;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v28 = v26[1];
      if (v28 == 0xE42D19AFCA302E68)
      {
        if (v26[2] == 0xE42D19AFCA302E68)
          goto LABEL_69;
      }
      else if ((v28 & (a3 - 1)) != v24)
      {
        goto LABEL_71;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v27 = v26[1];
    if (v27 != 0xE42D19AFCA302E68)
    {
      if (v27 >= a3)
        v27 %= a3;
      if (v27 != v24)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v26[2] != 0xE42D19AFCA302E68)
    {
LABEL_58:
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v29 = v26[5];
  if (*(_QWORD *)(v29 + 8) == 0xE42D19AFCA302E68)
  {
    v10 = *(_QWORD *)(v29 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v10 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v30 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL)
      v30 = 0xFBD83FDA8879FF7ELL % a3;
  }
  else
  {
    v30 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  v31 = *(_QWORD **)(a2 + 8 * v30);
  if (!v31)
    goto LABEL_94;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v34 = v32[1];
      if (v34 == 0xFBD83FDA8879FF7ELL)
      {
        if (v32[2] == 0xFBD83FDA8879FF7ELL)
          goto LABEL_92;
      }
      else if ((v34 & (a3 - 1)) != v30)
      {
        goto LABEL_94;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v33 = v32[1];
    if (v33 != 0xFBD83FDA8879FF7ELL)
    {
      if (v33 >= a3)
        v33 %= a3;
      if (v33 != v30)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v32[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_81:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v35 = v32[5];
  if (*(_QWORD *)(v35 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    v7 = *(_QWORD *)(v35 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v7 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    v36 = 0xDFC317497CF9A4BFLL;
    if (a3 <= 0xDFC317497CF9A4BFLL)
      v36 = 0xDFC317497CF9A4BFLL % a3;
  }
  else
  {
    v36 = (a3 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v37 = *(_QWORD **)(a2 + 8 * v36);
  if (!v37)
    goto LABEL_117;
  v38 = (_QWORD *)*v37;
  if (!v38)
    goto LABEL_117;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v40 = v38[1];
      if (v40 == 0xDFC317497CF9A4BFLL)
      {
        if (v38[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_115;
      }
      else if ((v40 & (a3 - 1)) != v36)
      {
        goto LABEL_117;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_117;
    }
  }
  while (2)
  {
    v39 = v38[1];
    if (v39 != 0xDFC317497CF9A4BFLL)
    {
      if (v39 >= a3)
        v39 %= a3;
      if (v39 != v36)
        goto LABEL_117;
      goto LABEL_104;
    }
    if (v38[2] != 0xDFC317497CF9A4BFLL)
    {
LABEL_104:
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_117;
      continue;
    }
    break;
  }
LABEL_115:
  v41 = v38[5];
  if (*(_QWORD *)(v41 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v11 = *(_QWORD *)(v41 + 32);
    goto LABEL_118;
  }
LABEL_117:
  v11 = 0;
LABEL_118:
  if (v3.u32[0] > 1uLL)
  {
    v42 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v42 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v42 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v43 = *(_QWORD **)(a2 + 8 * v42);
  if (!v43)
    goto LABEL_140;
  v44 = (_QWORD *)*v43;
  if (!v44)
    goto LABEL_140;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v46 = v44[1];
      if (v46 == 0x1AF456233693CD46)
      {
        if (v44[2] == 0x1AF456233693CD46)
          goto LABEL_138;
      }
      else if ((v46 & (a3 - 1)) != v42)
      {
        goto LABEL_140;
      }
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_140;
    }
  }
  while (2)
  {
    v45 = v44[1];
    if (v45 != 0x1AF456233693CD46)
    {
      if (v45 >= a3)
        v45 %= a3;
      if (v45 != v42)
        goto LABEL_140;
      goto LABEL_127;
    }
    if (v44[2] != 0x1AF456233693CD46)
    {
LABEL_127:
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_140;
      continue;
    }
    break;
  }
LABEL_138:
  v47 = v44[5];
  if (*(_QWORD *)(v47 + 8) == 0x1AF456233693CD46)
  {
    v6 = *(_QWORD *)(v47 + 32);
    goto LABEL_141;
  }
LABEL_140:
  v6 = 0;
LABEL_141:
  if (v3.u32[0] > 1uLL)
  {
    v48 = 0x1B9039CBDAB12E5CLL;
    if (a3 <= 0x1B9039CBDAB12E5CLL)
      v48 = 0x1B9039CBDAB12E5CLL % a3;
  }
  else
  {
    v48 = (a3 - 1) & 0x1B9039CBDAB12E5CLL;
  }
  v49 = *(_QWORD **)(a2 + 8 * v48);
  if (!v49)
    goto LABEL_163;
  v50 = (_QWORD *)*v49;
  if (!v50)
    goto LABEL_163;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v52 = v50[1];
      if (v52 == 0x1B9039CBDAB12E5CLL)
      {
        if (v50[2] == 0x1B9039CBDAB12E5CLL)
          goto LABEL_161;
      }
      else if ((v52 & (a3 - 1)) != v48)
      {
        goto LABEL_163;
      }
      v50 = (_QWORD *)*v50;
      if (!v50)
        goto LABEL_163;
    }
  }
  while (2)
  {
    v51 = v50[1];
    if (v51 != 0x1B9039CBDAB12E5CLL)
    {
      if (v51 >= a3)
        v51 %= a3;
      if (v51 != v48)
        goto LABEL_163;
      goto LABEL_150;
    }
    if (v50[2] != 0x1B9039CBDAB12E5CLL)
    {
LABEL_150:
      v50 = (_QWORD *)*v50;
      if (!v50)
        goto LABEL_163;
      continue;
    }
    break;
  }
LABEL_161:
  v53 = v50[5];
  if (*(_QWORD *)(v53 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    v12 = *(_QWORD *)(v53 + 32);
    goto LABEL_164;
  }
LABEL_163:
  v12 = 0;
LABEL_164:
  if (v3.u32[0] > 1uLL)
  {
    v54 = 0x12B1E486D3040E2CLL;
    if (a3 <= 0x12B1E486D3040E2CLL)
      v54 = 0x12B1E486D3040E2CLL % a3;
  }
  else
  {
    v54 = (a3 - 1) & 0x12B1E486D3040E2CLL;
  }
  v55 = *(_QWORD **)(a2 + 8 * v54);
  if (!v55)
    goto LABEL_186;
  v56 = (_QWORD *)*v55;
  if (!v56)
    goto LABEL_186;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v58 = v56[1];
      if (v58 == 0x12B1E486D3040E2CLL)
      {
        if (v56[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_184;
      }
      else if ((v58 & (a3 - 1)) != v54)
      {
        goto LABEL_186;
      }
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_186;
    }
  }
  while (2)
  {
    v57 = v56[1];
    if (v57 != 0x12B1E486D3040E2CLL)
    {
      if (v57 >= a3)
        v57 %= a3;
      if (v57 != v54)
        goto LABEL_186;
      goto LABEL_173;
    }
    if (v56[2] != 0x12B1E486D3040E2CLL)
    {
LABEL_173:
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_186;
      continue;
    }
    break;
  }
LABEL_184:
  v59 = v56[5];
  if (*(_QWORD *)(v59 + 8) == 0x12B1E486D3040E2CLL)
  {
    v5 = *(_QWORD *)(v59 + 32);
    goto LABEL_187;
  }
LABEL_186:
  v5 = 0;
LABEL_187:
  if (v3.u32[0] > 1uLL)
  {
    v60 = 0x9AEE7E062376E454;
    if (a3 <= 0x9AEE7E062376E454)
      v60 = 0x9AEE7E062376E454 % a3;
  }
  else
  {
    v60 = (a3 - 1) & 0x9AEE7E062376E454;
  }
  v61 = *(_QWORD **)(a2 + 8 * v60);
  if (!v61)
    goto LABEL_209;
  v62 = (_QWORD *)*v61;
  if (!v62)
    goto LABEL_209;
  if (v3.u32[0] < 2uLL)
  {
    v63 = a3 - 1;
    while (1)
    {
      v65 = v62[1];
      if (v65 == 0x9AEE7E062376E454)
      {
        if (v62[2] == 0x9AEE7E062376E454)
          goto LABEL_207;
      }
      else if ((v65 & v63) != v60)
      {
        goto LABEL_209;
      }
      v62 = (_QWORD *)*v62;
      if (!v62)
        goto LABEL_209;
    }
  }
  while (1)
  {
    v64 = v62[1];
    if (v64 == 0x9AEE7E062376E454)
      break;
    if (v64 >= a3)
      v64 %= a3;
    if (v64 != v60)
      goto LABEL_209;
LABEL_196:
    v62 = (_QWORD *)*v62;
    if (!v62)
      goto LABEL_209;
  }
  if (v62[2] != 0x9AEE7E062376E454)
    goto LABEL_196;
LABEL_207:
  v66 = v62[5];
  if (*(_QWORD *)(v66 + 8) != 0x9AEE7E062376E454)
  {
LABEL_209:
    v67 = 0;
    goto LABEL_210;
  }
  v67 = *(_QWORD *)(v66 + 32);
LABEL_210:
  *result = v9;
  result[1] = v8;
  result[2] = v10;
  result[3] = v7;
  result[4] = v11;
  result[5] = v6;
  result[6] = v12;
  result[7] = v5;
  result[8] = v67;
  return result;
}

void md::MeshRenderableContext::~MeshRenderableContext(md::MeshRenderableContext *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (void *)v2[3];
      if (v5)
      {
        v2[4] = v5;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v3)
    operator delete(v3);
}

_QWORD *gdc::ManagedObjectHolder<md::MeshRenderableContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  void *v7;

  *a1 = &off_1E42B1158;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v6 = (_QWORD *)*v3;
        v7 = (void *)v3[3];
        if (v7)
        {
          v3[4] = v7;
          operator delete(v7);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      operator delete(v4);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C40EAD8C993);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::MeshRenderableContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;

  *a1 = &off_1E42B1158;
  v1 = a1[4];
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 16);
    if (v2)
    {
      do
      {
        v4 = (_QWORD *)*v2;
        v5 = (void *)v2[3];
        if (v5)
        {
          v2[4] = v5;
          operator delete(v5);
        }
        operator delete(v2);
        v2 = v4;
      }
      while (v4);
    }
    v3 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      operator delete(v3);
    MEMORY[0x1A1AF4E00](v1, 0x10A0C40EAD8C993);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::MeshRenderableContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void geo::Pool<md::TexturedRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 312 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F881594(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void sub_19F8817C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 184));
  _Unwind_Resume(a1);
}

void sub_19F8817E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable(v1 + 424);
  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)(v1 + 376));
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 336);
  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)(v1 + 296));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 280);
  geo::Pool<md::TexturedRenderable>::~Pool(v1 + 224);
  geo::Pool<md::MaterialRenderable>::~Pool(v1 + 176);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 160);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void geo::Pool<md::MaterialRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 408 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F881AA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::Pool<md::TexturedRenderable>::~Pool(uint64_t a1)
{
  geo::Pool<md::TexturedRenderable>::disposeElements(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_19F881AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t geo::Pool<md::MaterialRenderable>::~Pool(uint64_t a1)
{
  geo::Pool<md::MaterialRenderable>::disposeElements(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_19F881B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::vector<md::MeshRenderable *>::~vector[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_BYTE *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D01F0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

_QWORD *gdc::EntityCollector::observe(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;

  v3 = result;
  if (result[7] != a2)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  v3[7] = a2;
  return result;
}

_QWORD *gdc::EntityCollector::unobserve(_QWORD *this)
{
  this[5] = this[4];
  this[7] = 0;
  return this;
}

void gdc::RegistrySignalCollector<md::components::Material>::~RegistrySignalCollector(_QWORD *a1)
{
  gdc::RegistrySignalCollector<md::components::Material>::~RegistrySignalCollector(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D1E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427D1E8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *(unint64_t **)a3;
    v5 = (uint64_t *)result[1];
    v6 = 8 * v3;
    do
    {
      v7 = *v4;
      v8 = *v4 >> 39;
      v9 = v5[1];
      if (v8 < (v5[2] - v9) >> 3)
      {
        v10 = *(_QWORD *)(v9 + 8 * v8);
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v7) & 0x7F));
          v13 = v5[4];
          v12 = v5[5];
          if (v11 < (v12 - v13) >> 3)
          {
            v14 = HIDWORD(v7);
            v15 = v13 + 8 * v11;
            if (v15 != v12 && *(_DWORD *)(v15 + 4) == (_DWORD)v14)
              result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v5 + 1, (_QWORD *)v15);
          }
        }
      }
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D230;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427D230;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *a2;
    v5 = *(unint64_t **)a3;
    v6 = (uint64_t *)result[1];
    v7 = 8 * v3;
    do
    {
      v8 = *v5;
      result = (_QWORD *)gdc::Registry::storage<md::components::Material>(v4);
      v9 = result[4];
      if (v8 >> 39 < (result[5] - v9) >> 3)
      {
        v10 = *(_QWORD *)(v9 + 8 * (v8 >> 39));
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v8) & 0x7F));
          v13 = result[7];
          v12 = result[8];
          if (v11 < (v12 - v13) >> 3)
          {
            v14 = v13 + 8 * v11;
            if (v14 != v12 && *(_DWORD *)(v14 + 4) == HIDWORD(v8))
            {
              v17 = v8;
              v16 = v6[11];
              if (!v16
                || (v18 = v6[7],
                    v19 = v8,
                    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v16 + 48))(v16, &v18, &v19), (_DWORD)result))
              {
                result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v6 + 1, (uint64_t)&v17);
              }
            }
          }
        }
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D00D0;
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_BYTE *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D01A8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

void gdc::RegistrySignalCollector<md::components::MeshInstance>::~RegistrySignalCollector(_QWORD *a1)
{
  gdc::RegistrySignalCollector<md::components::MeshInstance>::~RegistrySignalCollector(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D158;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427D158;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *(unint64_t **)a3;
    v5 = (uint64_t *)result[1];
    v6 = 8 * v3;
    do
    {
      v7 = *v4;
      v8 = *v4 >> 39;
      v9 = v5[1];
      if (v8 < (v5[2] - v9) >> 3)
      {
        v10 = *(_QWORD *)(v9 + 8 * v8);
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v7) & 0x7F));
          v13 = v5[4];
          v12 = v5[5];
          if (v11 < (v12 - v13) >> 3)
          {
            v14 = HIDWORD(v7);
            v15 = v13 + 8 * v11;
            if (v15 != v12 && *(_DWORD *)(v15 + 4) == (_DWORD)v14)
              result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v5 + 1, (_QWORD *)v15);
          }
        }
      }
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D1A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427D1A0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *a2;
    v5 = *(unint64_t **)a3;
    v6 = (uint64_t *)result[1];
    v7 = 8 * v3;
    do
    {
      v8 = *v5;
      result = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(v4);
      v9 = result[4];
      if (v8 >> 39 < (result[5] - v9) >> 3)
      {
        v10 = *(_QWORD *)(v9 + 8 * (v8 >> 39));
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v8) & 0x7F));
          v13 = result[7];
          v12 = result[8];
          if (v11 < (v12 - v13) >> 3)
          {
            v14 = v13 + 8 * v11;
            if (v14 != v12 && *(_DWORD *)(v14 + 4) == HIDWORD(v8))
            {
              v17 = v8;
              v16 = v6[11];
              if (!v16
                || (v18 = v6[7],
                    v19 = v8,
                    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v16 + 48))(v16, &v18, &v19), (_DWORD)result))
              {
                result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v6 + 1, (uint64_t)&v17);
              }
            }
          }
        }
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_BYTE *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D0160;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

void std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D0C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427D0C8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *(unint64_t **)a3;
    v5 = (uint64_t *)result[1];
    v6 = 8 * v3;
    do
    {
      v7 = *v4;
      v8 = *v4 >> 39;
      v9 = v5[1];
      if (v8 < (v5[2] - v9) >> 3)
      {
        v10 = *(_QWORD *)(v9 + 8 * v8);
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v7) & 0x7F));
          v13 = v5[4];
          v12 = v5[5];
          if (v11 < (v12 - v13) >> 3)
          {
            v14 = HIDWORD(v7);
            v15 = v13 + 8 * v11;
            if (v15 != v12 && *(_DWORD *)(v15 + 4) == (_DWORD)v14)
              result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v5 + 1, (_QWORD *)v15);
          }
        }
      }
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D110;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427D110;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *a2;
    v5 = *(unint64_t **)a3;
    v6 = (uint64_t *)result[1];
    v7 = 8 * v3;
    do
    {
      v8 = *v5;
      result = (_QWORD *)gdc::Registry::storage<md::components::Material>(v4);
      v9 = result[4];
      if (v8 >> 39 < (result[5] - v9) >> 3)
      {
        v10 = *(_QWORD *)(v9 + 8 * (v8 >> 39));
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v8) & 0x7F));
          v13 = result[7];
          v12 = result[8];
          if (v11 < (v12 - v13) >> 3)
          {
            v14 = v13 + 8 * v11;
            if (v14 != v12 && *(_DWORD *)(v14 + 4) == HIDWORD(v8))
            {
              v17 = v8;
              v16 = v6[11];
              if (!v16
                || (v18 = v6[7],
                    v19 = v8,
                    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v16 + 48))(v16, &v18, &v19), (_DWORD)result))
              {
                result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v6 + 1, (uint64_t)&v17);
              }
            }
          }
        }
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_BYTE *std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D0118;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

void gdc::RegistrySignalCollector<md::components::Visibility>::~RegistrySignalCollector(_QWORD *a1)
{
  gdc::RegistrySignalCollector<md::components::Visibility>::~RegistrySignalCollector(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D038;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427D038;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *(unint64_t **)a3;
    v5 = (uint64_t *)result[1];
    v6 = 8 * v3;
    do
    {
      v7 = *v4;
      v8 = *v4 >> 39;
      v9 = v5[1];
      if (v8 < (v5[2] - v9) >> 3)
      {
        v10 = *(_QWORD *)(v9 + 8 * v8);
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v7) & 0x7F));
          v13 = v5[4];
          v12 = v5[5];
          if (v11 < (v12 - v13) >> 3)
          {
            v14 = HIDWORD(v7);
            v15 = v13 + 8 * v11;
            if (v15 != v12 && *(_DWORD *)(v15 + 4) == (_DWORD)v14)
              result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v5 + 1, (_QWORD *)v15);
          }
        }
      }
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427D080;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427D080;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = *a2;
    v5 = *(unint64_t **)a3;
    v6 = (uint64_t *)result[1];
    v7 = 8 * v3;
    do
    {
      v8 = *v5;
      result = (_QWORD *)gdc::Registry::storage<md::components::Visibility>(v4);
      v9 = result[4];
      if (v8 >> 39 < (result[5] - v9) >> 3)
      {
        v10 = *(_QWORD *)(v9 + 8 * (v8 >> 39));
        if (v10)
        {
          v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(v8) & 0x7F));
          v13 = result[7];
          v12 = result[8];
          if (v11 < (v12 - v13) >> 3)
          {
            v14 = v13 + 8 * v11;
            if (v14 != v12 && *(_DWORD *)(v14 + 4) == HIDWORD(v8))
            {
              v17 = v8;
              v16 = v6[11];
              if (!v16
                || (v18 = v6[7],
                    v19 = v8,
                    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v16 + 48))(v16, &v18, &v19), (_DWORD)result))
              {
                result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v6 + 1, (uint64_t)&v17);
              }
            }
          }
        }
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void md::Logic<md::MeshRenderableLogic,md::MeshRenderableContext,md::LogicDependencies<gdc::TypeList<md::MaterialContext,md::AssetContext,md::StyleLogicContext,md::RegistryContext,md::SceneQueryContext,md::CameraContext,md::DrapingContext,md::IdentifiedResourceContext,md::PuckContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::FlyoverRoadBatch::~FlyoverRoadBatch(md::FlyoverRoadBatch *this)
{
  md::FlyoverRoadBatch::~FlyoverRoadBatch(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)this = &off_1E4291A40;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 22);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 38);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (uint64_t *)*((_QWORD *)this + 63);
  v6 = (uint64_t *)*((_QWORD *)this + 64);
  while (v5 != v6)
  {
    v7 = *v5;
    v8 = *(_QWORD *)(*v5 + 88);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = *v5;
    }
    v9 = *(_QWORD *)(v7 + 208);
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v7 = *v5;
    }
    v10 = *(_QWORD *)(v7 + 328);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    ++v5;
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  md::Ribbons::RibbonBatch<md::FlyoverRoadTypeDesc>::~RibbonBatch((uint64_t)this);
}

uint64_t md::Ribbons::RibbonBatch<md::FlyoverRoadTypeDesc>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  void (***v9)(void);
  void (**v10)(void);
  _QWORD **v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;

  *(_QWORD *)a1 = &off_1E42AF268;
  v2 = *(_QWORD **)(a1 + 504);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 512);
    v4 = *(void **)(a1 + 504);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          std::default_delete<md::FlyoverRoadSection>::operator()[abi:nn180100](v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 504);
    }
    *(_QWORD *)(a1 + 512) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 480);
  do
  {
    if (v7[1])
    {
      v8 = 0;
      v9 = (void (***)(void))(v7 + 2);
      do
      {
        v10 = *v9;
        v9 += 15;
        (*v10)();
        ++v8;
      }
      while (v8 < v7[1]);
    }
    v7[1] = 0;
    v7 = (_QWORD *)*v7;
  }
  while (v7);
  v11 = *(_QWORD ***)(a1 + 480);
  *(_QWORD *)(a1 + 488) = v11;
  v12 = *v11;
  *v11 = 0;
  if (v12)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      free(v12);
      v12 = v13;
    }
    while (v13);
    v11 = *(_QWORD ***)(a1 + 480);
  }
  free(v11);
  v14 = *(void **)(a1 + 456);
  if (v14)
  {
    *(_QWORD *)(a1 + 464) = v14;
    operator delete(v14);
  }
  v15 = *(_QWORD *)(a1 + 424);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 432);
    v17 = *(_QWORD *)(a1 + 424);
    if (v16 != v15)
    {
      v18 = *(_QWORD *)(a1 + 432);
      do
      {
        v20 = *(void **)(v18 - 24);
        v18 -= 24;
        v19 = v20;
        if (v20)
        {
          *(_QWORD *)(v16 - 16) = v19;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = *(_QWORD *)(a1 + 424);
    }
    *(_QWORD *)(a1 + 432) = v15;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 448) + 40))(*(_QWORD *)(a1 + 448), v17, *(_QWORD *)(a1 + 440) - v17);
  }
  v21 = *(void **)(a1 + 400);
  if (v21)
  {
    *(_QWORD *)(a1 + 408) = v21;
    operator delete(v21);
  }
  *(_QWORD *)(a1 + 272) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 288) = 3131955885;
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void std::default_delete<md::FlyoverRoadSection>::operator()[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  malloc_zone_t *zone;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = *(_QWORD **)(a1 + 416);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 424);
    v4 = *(_QWORD *)(a1 + 416);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          if ((v8 & 1) == 0)
          {
            v14 = v6;
            v6 = v14;
            if (v9)
            {
              v13 = v2;
              v10 = operator new();
              *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v10 + 24) = "VectorKitLabels";
              *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v10 = &off_1E42B5668;
              *(_QWORD *)(v10 + 8) = "VectorKitLabels";
              *(_OWORD *)(v10 + 72) = 0u;
              *(_OWORD *)(v10 + 88) = 0u;
              *(_OWORD *)(v10 + 104) = 0u;
              *(_OWORD *)(v10 + 120) = 0u;
              *(_OWORD *)(v10 + 136) = 0u;
              *(_OWORD *)(v10 + 152) = 0u;
              *(_OWORD *)(v10 + 168) = 0u;
              *(_OWORD *)(v10 + 184) = 0u;
              *(_OWORD *)(v10 + 200) = 0u;
              *(_OWORD *)(v10 + 216) = 0u;
              *(_OWORD *)(v10 + 232) = 0u;
              *(_QWORD *)(v10 + 248) = 0;
              *(_OWORD *)(v10 + 56) = 0u;
              v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
              if ((_DWORD)v11)
                geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v10 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v10 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v10;
              v2 = v13;
              v6 = v14;
            }
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v6, 80);
        }
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 416);
    }
    *(_QWORD *)(a1 + 424) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 440) + 40))(*(_QWORD *)(a1 + 440), v4, *(_QWORD *)(a1 + 432) - v4);
  }
  *(_QWORD *)(a1 + 296) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 312) = 3131955885;
  *(_QWORD *)(a1 + 176) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 192) = 3131955885;
  *(_QWORD *)(a1 + 56) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 72) = 3131955885;
  JUMPOUT(0x1A1AF4E00);
}

void md::Ribbons::RibbonBatch<md::FlyoverRoadTypeDesc>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::FlyoverRoadTypeDesc>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRoad::RibbonExtra>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverRoad::RibbonExtra>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::RibbonExtra>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::RibbonExtra>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::RibbonExtra>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRoad::Color>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverRoad::Color>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Color>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Color>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Color>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRoad::Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverRoad::Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverRoad::Blend>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverRoad::Blend>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Blend>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Blend>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverRoad::Blend>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Color>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Color>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Color>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Color>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Color>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Border>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Border>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Border>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Border>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Border>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Tile>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Tile>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Tile>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Tile>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverBorderRibbon::Tile>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::FlyoverRoadLayer::~FlyoverRoadLayer(md::FlyoverRoadLayer *this)
{
  md::Ribbons::RibbonLayer<md::FlyoverRoadTypeDesc>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::FlyoverRoadTypeDesc>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF4A8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[11];
  a1[11] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::FlyoverRoadTypeDesc>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::FlyoverRoadTypeDesc>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverRoad::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::FlyoverRoad::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverRoad::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoad::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoad::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoad::Default>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int *v42;
  int *v43;
  int v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  int v49;
  int *v50;
  int *v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  int *v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int *v68;
  int *v69;
  int *v70;
  int v71;
  int *v72;
  int *v73;
  _DWORD *v74;
  int *v75;
  BOOL v77;
  uint64_t v78;
  int *v79;
  int *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  int *v88;
  int v89;
  BOOL v90;
  int *v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int *v102;
  int v103;
  int v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v64 = *v9;
        if (*v8 < *v9)
        {
          *v9 = *v8;
          *v8 = v64;
        }
        return result;
      case 3:
        v65 = *v9;
        v66 = v9[1];
        v67 = *v8;
        if (v66 >= *v9)
        {
          if (v67 < v66)
          {
            v9[1] = v67;
            *v8 = v66;
            v96 = *v9;
            v95 = v9[1];
            if (v95 < *v9)
            {
              *v9 = v95;
              v9[1] = v96;
            }
          }
        }
        else
        {
          if (v67 >= v66)
          {
            *v9 = v66;
            v9[1] = v65;
            if (*v8 >= v65)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v67;
          }
          *v8 = v65;
        }
        return result;
      case 4:
        v68 = v9 + 1;
        v69 = (int *)v9[1];
        v70 = v9 + 2;
        v71 = v9[2];
        v72 = (int *)*v9;
        if ((int)v69 >= (int)v72)
        {
          if (v71 >= (int)v69)
            goto LABEL_175;
          *v68 = v71;
          *v70 = (int)v69;
          v73 = v9;
          v74 = v9 + 1;
          result = v69;
          if (v71 >= (int)v72)
            goto LABEL_176;
        }
        else
        {
          v73 = v9;
          v74 = v9 + 2;
          result = (int *)*v9;
          if (v71 >= (int)v69)
          {
            *v9 = (int)v69;
            v9[1] = (int)v72;
            v73 = v9 + 1;
            v74 = v9 + 2;
            result = v72;
            if (v71 >= (int)v72)
            {
LABEL_175:
              LODWORD(v69) = v71;
LABEL_176:
              if (*v8 < (int)v69)
              {
                *v70 = *v8;
                *v8 = (int)v69;
                v112 = *v70;
                v113 = *v68;
                if (v112 < v113)
                {
                  v9[1] = v112;
                  v9[2] = v113;
                  v114 = *v9;
                  if (v112 < *v9)
                  {
                    *v9 = v112;
                    v9[1] = v114;
                  }
                }
              }
              return result;
            }
          }
        }
        *v73 = v71;
        *v74 = (_DWORD)v72;
        LODWORD(v69) = (_DWORD)result;
        goto LABEL_176;
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 <= 95)
        {
          v75 = v9 + 1;
          v77 = v9 == a2 || v75 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v77)
            {
              v78 = 4;
              v79 = v9;
              do
              {
                v82 = *v79;
                v81 = v79[1];
                v79 = v75;
                if (v81 < v82)
                {
                  v83 = v78;
                  do
                  {
                    *(int *)((char *)v9 + v83) = v82;
                    v84 = v83 - 4;
                    if (v83 == 4)
                    {
                      v80 = v9;
                      goto LABEL_114;
                    }
                    v82 = *(int *)((char *)v9 + v83 - 8);
                    v83 -= 4;
                  }
                  while (v81 < v82);
                  v80 = (int *)((char *)v9 + v84);
LABEL_114:
                  *v80 = v81;
                }
                v75 = v79 + 1;
                v78 += 4;
              }
              while (v79 + 1 != a2);
            }
          }
          else if (!v77)
          {
            do
            {
              v98 = *v7;
              v97 = v7[1];
              v7 = v75;
              if (v97 < v98)
              {
                do
                {
                  *v75 = v98;
                  v98 = *(v75 - 2);
                  --v75;
                }
                while (v97 < v98);
                *v75 = v97;
              }
              v75 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v85 = (unint64_t)(v11 - 2) >> 1;
            v86 = v85;
            do
            {
              if (v85 >= v86)
              {
                v87 = (2 * v86) | 1;
                v88 = &v9[v87];
                if (2 * v86 + 2 >= v11)
                {
                  v89 = *v88;
                }
                else
                {
                  v89 = v88[1];
                  v90 = *v88 < v89;
                  if (*v88 > v89)
                    v89 = *v88;
                  if (v90)
                  {
                    ++v88;
                    v87 = 2 * v86 + 2;
                  }
                }
                v91 = &v9[v86];
                v92 = *v91;
                if (v89 >= *v91)
                {
                  while (1)
                  {
                    *v91 = v89;
                    v91 = v88;
                    if (v85 < v87)
                      break;
                    v94 = (2 * v87) | 1;
                    v88 = &v9[v94];
                    v87 = 2 * v87 + 2;
                    if (v87 < v11)
                    {
                      v89 = *v88;
                      result = v88 + 1;
                      v93 = v88[1];
                      if (*v88 <= v93)
                        v89 = v88[1];
                      if (*v88 >= v93)
                        v87 = v94;
                      else
                        ++v88;
                      if (v89 < v92)
                        break;
                    }
                    else
                    {
                      v89 = *v88;
                      v87 = v94;
                      if (*v88 < v92)
                        break;
                    }
                  }
                  *v91 = v92;
                }
              }
              v90 = v86-- <= 0;
            }
            while (!v90);
            v99 = (unint64_t)v10 >> 2;
            do
            {
              v100 = 0;
              v101 = *v9;
              v102 = v9;
              do
              {
                v105 = &v102[v100 + 1];
                v106 = (2 * v100) | 1;
                v100 = 2 * v100 + 2;
                if (v100 < v99)
                {
                  v103 = *v105;
                  v104 = v105[1];
                  if (*v105 <= v104)
                    v103 = v105[1];
                  if (*v105 >= v104)
                    v100 = v106;
                  else
                    ++v105;
                }
                else
                {
                  v103 = *v105;
                  v100 = v106;
                }
                *v102 = v103;
                v102 = v105;
              }
              while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
              if (v105 == --a2)
              {
                *v105 = v101;
              }
              else
              {
                *v105 = *a2;
                *a2 = v101;
                v107 = (char *)v105 - (char *)v9 + 4;
                if (v107 >= 5)
                {
                  v108 = (((unint64_t)v107 >> 2) - 2) >> 1;
                  v109 = &v9[v108];
                  v110 = *v109;
                  v111 = *v105;
                  if (*v109 < *v105)
                  {
                    do
                    {
                      *v105 = v110;
                      v105 = v109;
                      if (!v108)
                        break;
                      v108 = (v108 - 1) >> 1;
                      v109 = &v9[v108];
                      v110 = *v109;
                    }
                    while (*v109 < v111);
                    *v105 = v111;
                  }
                }
              }
              v90 = v99-- <= 2;
            }
            while (!v90);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        v14 = *v8;
        if ((unint64_t)v10 >= 0x201)
        {
          v15 = *v13;
          v16 = *v9;
          if (*v13 >= *v9)
          {
            if (v14 < v15)
            {
              *v13 = v14;
              *v8 = v15;
              v19 = *v9;
              if (*v13 < *v9)
              {
                *v9 = *v13;
                *v13 = v19;
              }
            }
          }
          else
          {
            if (v14 < v15)
            {
              *v9 = v14;
              goto LABEL_21;
            }
            *v9 = v15;
            *v13 = v16;
            if (*v8 < v16)
            {
              *v13 = *v8;
LABEL_21:
              *v8 = v16;
            }
          }
          v21 = &v9[v12];
          v24 = *(v21 - 1);
          v22 = v21 - 1;
          v23 = v24;
          v25 = v9[1];
          v26 = *(a2 - 2);
          if (v24 >= v25)
          {
            if (v26 < v23)
            {
              *v22 = v26;
              *(a2 - 2) = v23;
              v27 = v9[1];
              if (*v22 < v27)
              {
                v9[1] = *v22;
                *v22 = v27;
              }
            }
          }
          else
          {
            if (v26 < v23)
            {
              v9[1] = v26;
              goto LABEL_33;
            }
            v9[1] = v23;
            *v22 = v25;
            v28 = *(a2 - 2);
            if (v28 < v25)
            {
              *v22 = v28;
LABEL_33:
              *(a2 - 2) = v25;
            }
          }
          v29 = &v9[v12];
          v32 = v29[1];
          v30 = v29 + 1;
          v31 = v32;
          v33 = v9[2];
          v34 = *(a2 - 3);
          if (v32 >= v33)
          {
            if (v34 < v31)
            {
              *v30 = v34;
              *(a2 - 3) = v31;
              v35 = v9[2];
              if (*v30 < v35)
              {
                v9[2] = *v30;
                *v30 = v35;
              }
            }
          }
          else
          {
            if (v34 < v31)
            {
              v9[2] = v34;
              goto LABEL_42;
            }
            v9[2] = v31;
            *v30 = v33;
            v36 = *(a2 - 3);
            if (v36 < v33)
            {
              *v30 = v36;
LABEL_42:
              *(a2 - 3) = v33;
            }
          }
          v37 = *v13;
          v38 = *v22;
          v39 = *v30;
          if (*v13 >= *v22)
          {
            if (v39 >= v37)
              goto LABEL_50;
            *v13 = v39;
            *v30 = v37;
            v30 = v13;
            v37 = v38;
            if (v39 >= v38)
            {
              v37 = v39;
              goto LABEL_50;
            }
          }
          else if (v39 >= v37)
          {
            *v22 = v37;
            *v13 = v38;
            v22 = v13;
            v37 = v39;
            if (v39 >= v38)
            {
              v37 = v38;
LABEL_50:
              v40 = *v9;
              *v9 = v37;
              *v13 = v40;
              goto LABEL_51;
            }
          }
          *v22 = v39;
          *v30 = v38;
          goto LABEL_50;
        }
        v17 = *v9;
        v18 = *v13;
        if (*v9 >= *v13)
        {
          if (v14 < v17)
          {
            *v9 = v14;
            *v8 = v17;
            v20 = *v13;
            if (*v9 < *v13)
            {
              *v13 = *v9;
              *v9 = v20;
            }
          }
        }
        else
        {
          if (v14 >= v17)
          {
            *v13 = v17;
            *v9 = v18;
            if (*v8 >= v18)
              goto LABEL_51;
            *v9 = *v8;
          }
          else
          {
            *v13 = v14;
          }
          *v8 = v18;
        }
LABEL_51:
        --a3;
        v41 = *v9;
        v42 = v9;
        if ((a4 & 1) == 0)
        {
          v42 = v9;
          if (*(v9 - 1) >= v41)
          {
            if (v41 >= *v8)
            {
              v56 = v9 + 1;
              do
              {
                v9 = v56;
                if (v56 >= a2)
                  break;
                ++v56;
              }
              while (v41 >= *v9);
            }
            else
            {
              do
              {
                v55 = v9[1];
                ++v9;
              }
              while (v41 >= v55);
            }
            v57 = a2;
            if (v9 < a2)
            {
              v57 = a2;
              do
                v58 = *--v57;
              while (v41 < v58);
            }
            if (v9 < v57)
            {
              v59 = *v9;
              v60 = *v57;
              do
              {
                *v9 = v60;
                *v57 = v59;
                do
                {
                  v61 = v9[1];
                  ++v9;
                  v59 = v61;
                }
                while (v41 >= v61);
                do
                {
                  v62 = *--v57;
                  v60 = v62;
                }
                while (v41 < v62);
              }
              while (v9 < v57);
            }
            v63 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v63;
            a4 = 0;
            *v63 = v41;
            continue;
          }
        }
        do
        {
          v43 = v42;
          v45 = v42[1];
          ++v42;
          v44 = v45;
        }
        while (v45 < v41);
        v46 = a2;
        if (v43 == v9)
        {
          v46 = a2;
          do
          {
            if (v42 >= v46)
              break;
            v48 = *--v46;
          }
          while (v48 >= v41);
        }
        else
        {
          do
            v47 = *--v46;
          while (v47 >= v41);
        }
        if (v42 < v46)
        {
          v49 = *v46;
          v50 = v42;
          v51 = v46;
          do
          {
            *v50 = v49;
            *v51 = v44;
            do
            {
              v43 = v50;
              v52 = v50[1];
              ++v50;
              v44 = v52;
            }
            while (v52 < v41);
            do
            {
              v53 = *--v51;
              v49 = v53;
            }
            while (v53 >= v41);
          }
          while (v50 < v51);
        }
        if (v43 != v9)
          *v9 = *v43;
        *v43 = v41;
        if (v42 < v46)
        {
LABEL_71:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *,false>(v7, v43, a3, a4 & 1);
          a4 = 0;
          v9 = v43 + 1;
          continue;
        }
        v54 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *>(v9, v43);
        v9 = v43 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *>(v43 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v54)
            continue;
          goto LABEL_71;
        }
        a2 = v43;
        if (!v54)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *>(int *result, int *a2, int *a3, int *a4, int *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v7;
      *a3 = v5;
      v8 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v8;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v7 < v5)
    {
      *result = v7;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*a3 < v6)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v5)
  {
    *a3 = *a4;
    *a4 = v5;
    v9 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v9;
      v10 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *>(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t i;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          v31 = *a1;
          v30 = a1[1];
          if (v30 < *a1)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v12)
        {
          *a1 = v12;
          a1[1] = v11;
          v36 = *(a2 - 1);
          if (v36 >= v11)
            return 1;
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v11;
      }
      return 1;
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_35;
        }
LABEL_34:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
        goto LABEL_36;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_34;
      }
LABEL_35:
      v15 = v17;
LABEL_36:
      v32 = *(a2 - 1);
      if (v32 < v15)
      {
        *v16 = v32;
        *(a2 - 1) = v15;
        v33 = *v16;
        v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          v35 = *a1;
          if (v33 < *a1)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ZOrder *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v7 = a1[1];
      v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7)
          goto LABEL_19;
        a1[1] = v5;
        *v6 = v7;
        v9 = a1;
        v10 = a1 + 1;
      }
      else
      {
        v9 = a1;
        v10 = a1 + 2;
        if (v5 < v7)
          goto LABEL_18;
        *a1 = v7;
        a1[1] = v8;
        v9 = a1 + 1;
        v10 = a1 + 2;
      }
      if (v5 >= v8)
        goto LABEL_19;
LABEL_18:
      *v9 = v5;
      *v10 = v8;
LABEL_19:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 12; ; i += 4)
      {
        v26 = *v22;
        v27 = *v6;
        if (*v22 < v27)
        {
          v28 = i;
          do
          {
            *(int *)((char *)a1 + v28) = v27;
            v29 = v28 - 4;
            if (v28 == 4)
            {
              v25 = a1;
              goto LABEL_22;
            }
            v27 = *(int *)((char *)a1 + v28 - 8);
            v28 -= 4;
          }
          while (v26 < v27);
          v25 = (int *)((char *)a1 + v29);
LABEL_22:
          *v25 = v26;
          if (++v23 == 8)
            break;
        }
        v6 = v22++;
        if (v22 == a2)
          return 1;
      }
      return v22 + 1 == a2;
  }
}

void md::MuninRoadLabeler::~MuninRoadLabeler(md::MuninRoadLabeler *this)
{
  md::MuninRoadLabeler::~MuninRoadLabeler(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  char *v9;
  BOOL v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = &off_1E4291F28;
  v2 = (char *)*((_QWORD *)this + 21);
  v3 = (char *)this + 176;
  if (v2 != (char *)this + 176)
  {
    do
    {
      md::MuninJunctionFeature::clearLabels(*(md::MuninJunctionFeature **)(*((_QWORD *)v2 + 4) + 56), *(md::MuninJunctionFeature **)(*((_QWORD *)v2 + 4) + 64));
      v8 = (char *)*((_QWORD *)v2 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v2 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != v3);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)this + 22));
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = v3;
  md::MuninRoadLabelPool::clear(*((md::MuninRoadLabelPool **)this + 4));
  v4 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
    MEMORY[0x1A1AF4E00](v4, 0x1000C407D563059);
  md::MuninRoadLabeler::{unnamed type#1}::~MuninRoadLabeler((uint64_t *)this + 16);
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = *((_QWORD *)this + 14);
    v7 = (void *)*((_QWORD *)this + 13);
    if (v6 != v5)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v6 - 8);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v5;
    operator delete(v7);
  }
  v14 = *((_QWORD *)this + 10);
  if (v14)
  {
    v15 = *((_QWORD *)this + 11);
    v16 = (void *)*((_QWORD *)this + 10);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v14;
    operator delete(v16);
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v23)
    std::default_delete<md::MuninRoadLabelPool>::operator()[abi:nn180100](v23);
  v24 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v24)
    MEMORY[0x1A1AF4E00](v24, 0x20C4093837F09);
}

uint64_t md::MuninRoadLabeler::startFrameLayout(uint64_t this, const md::LayoutContext *a2, float a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v6;
  int v7;
  __n128 v8;
  double (**v9)(__n128);
  __n128 v10;

  *(float *)(this + 40) = a3;
  *(_WORD *)(this + 72) = 0;
  v3 = *(uint64_t **)(this + 104);
  for (i = *(uint64_t **)(this + 112); v3 != i; v3 += 2)
  {
    v6 = *v3;
    v7 = *(unsigned __int8 *)(*v3 + 538);
    if (v7 == 2)
    {
      *(float *)(v6 + 264) = fmaxf(fminf(*(float *)(v6 + 264), 0.9) - (float)(a3 / *(float *)(v6 + 276)), 0.0);
      v8.n128_f32[0] = (*(float (**)(void))(v6 + 288))();
      *(_DWORD *)(v6 + 268) = v8.n128_u32[0];
      if (*(float *)(v6 + 264) <= 0.0 || v8.n128_f32[0] <= 0.1)
      {
        v9 = (double (**)(__n128))(v6 + 288);
        *(_DWORD *)(v6 + 264) = 0;
        v8.n128_u32[0] = 0;
        goto LABEL_12;
      }
    }
    else if (v7 == 1)
    {
      *(float *)(v6 + 264) = fminf((float)(a3 / *(float *)(v6 + 272)) + fmaxf(*(float *)(v6 + 264), 0.1), 1.0);
      v8.n128_f32[0] = (*(float (**)(void))(v6 + 280))();
      *(_DWORD *)(v6 + 268) = v8.n128_u32[0];
      if (*(float *)(v6 + 264) >= 1.0 || v8.n128_f32[0] >= 0.9)
      {
        v9 = (double (**)(__n128))(v6 + 280);
        *(_DWORD *)(v6 + 264) = 1065353216;
        v8.n128_u32[0] = 1.0;
LABEL_12:
        v10.n128_f64[0] = (*v9)(v8);
        *(_DWORD *)(v6 + 268) = v10.n128_u32[0];
        md::MuninRoadLabel::updateStateMachineForDisplay(v6, 7, *(_BYTE *)(v6 + 539), 0, v10);
      }
    }
    this = *(_QWORD *)(v6 + 64);
    if (this)
      this = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)this + 616))(this, a3);
  }
  return this;
}

void md::MuninRoadLabeler::synchronizedUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  float *v24;
  gss::Allocator *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int *v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  float v48;
  _QWORD *v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  int v57;
  BOOL v58;
  unsigned __int16 *v59;
  BOOL v60;
  __int128 v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  unint64_t *v69;
  unint64_t v70;
  __n128 *v71;
  char *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  unint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void **v83;
  _QWORD *v84;
  char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  char *v112;
  _QWORD *v113;
  __int128 v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  _QWORD *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  void **v129;
  int v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t i;
  char *v137;
  char *v138;
  void *v139;
  _QWORD *v140;
  _QWORD *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  md::MuninRoadGraph *v146;
  uint64_t v147;
  md::MuninRoadGraphZData *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  char *v156;
  char *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __n128 v169;
  unint64_t v170;
  void *__p;
  std::__shared_weak_count *v172;
  unint64_t v173;
  __int128 v174;
  _QWORD *v175;
  uint64_t v176;
  unsigned __int8 v177;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
  {
    v7 = 0;
    goto LABEL_48;
  }
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v8 = *v3;
  v9 = *(_QWORD **)(v8 + 8 * v6);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v10[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v12 & (*(_QWORD *)&v4 - 1)) != v6)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x1AF456233693CD46)
      break;
    if (v11 >= *(_QWORD *)&v4)
      v11 %= *(_QWORD *)&v4;
    if (v11 != v6)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x1AF456233693CD46)
  {
    v7 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v5.u32[0] > 1uLL)
  {
    v14 = 0xC83717EF586624DCLL;
    if (*(_QWORD *)&v4 <= 0xC83717EF586624DCLL)
      v14 = 0xC83717EF586624DCLL % *(_QWORD *)&v4;
  }
  else
  {
    v14 = (*(_QWORD *)&v4 - 1) & 0xC83717EF586624DCLL;
  }
  v15 = *(_QWORD **)(v8 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v5.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v19 = v16[1];
      if (v19 == 0xC83717EF586624DCLL)
      {
        if (v16[2] == 0xC83717EF586624DCLL)
          goto LABEL_46;
      }
      else if ((v19 & v17) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v18 = v16[1];
    if (v18 != 0xC83717EF586624DCLL)
    {
      if (v18 >= *(_QWORD *)&v4)
        v18 %= *(_QWORD *)&v4;
      if (v18 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0xC83717EF586624DCLL)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v20 = v16[5];
  if (*(_QWORD *)(v20 + 8) == 0xC83717EF586624DCLL)
  {
    v21 = *(_QWORD *)(v20 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v21 = 0;
LABEL_49:
  v22 = (_BYTE *)md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336)
                                                                                             + 200));
  v23 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 336) + 200);
  v24 = (float *)v23[4];
  if (!v24)
  {
    v25 = (gss::Allocator *)operator new();
    *(_QWORD *)v25 = 0;
    *(_DWORD *)v25 = 0;
    v26 = v23[4];
    v23[4] = (uint64_t)v25;
    if (v26)
    {
      MEMORY[0x1A1AF4E00](v26, 0x1000C4090D0E795);
      v25 = (gss::Allocator *)v23[4];
    }
    *(_DWORD *)v25 = 1112014848;
    *((_BYTE *)v25 + 4) = 4;
    v27 = gss::Allocator::instance(v25);
    v176 = v27;
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, 8, 4);
    v29 = v28;
    *(_QWORD *)&v174 = v28;
    v175 = v28 + 1;
    if (v28)
      *v28 = 0x40001004BLL;
    *((_QWORD *)&v174 + 1) = v28 + 1;
    md::LabelSettingsStyleCache::styleQueryForAttributes((unint64_t *)&__p, *v23, (uint64_t)&v174);
    if (v29)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v27 + 40))(v27, v29, 8);
    v30 = __p;
    if (__p)
    {
      v31 = v172;
      if (v172)
      {
        p_shared_owners = (unint64_t *)&v172->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        *((_QWORD *)&v174 + 1) = v31;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
      }
      else
      {
        *((_QWORD *)&v174 + 1) = 0;
      }
      v175 = 0;
      v176 = 0;
      *(_QWORD *)&v174 = v30;
      v177 = 0;
      v35 = (*(uint64_t (**)(void *, _QWORD **))(*(_QWORD *)v30 + 48))(v30, &v175);
      v177 = v35;
      if (v31)
      {
        v36 = (unint64_t *)&v31->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        v35 = v177;
      }
      if (v35)
      {
        v38 = *(_QWORD *)(v174 + 24);
        v39 = *(unsigned __int8 *)(v38 + 12);
        if (v39 == 2)
        {
          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v38, 0x165u, 0) & 1) != 0
            || (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v38, 0x165u, 1u) & 1) != 0)
          {
            v169.n128_u8[0] = 1;
            LOBYTE(v168) = 1;
            v40 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v38, 0x165u, 0, &v169);
            gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v38, 0x165u, 1u, &v168);
            v41 = *v40;
            goto LABEL_77;
          }
        }
        else if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v38, 0x165u, *(unsigned __int8 *)(v38 + 12)))
        {
          v41 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v38, 0x165u, v39, 0);
LABEL_77:
          *(_DWORD *)v23[4] = v41;
        }
      }
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v174);
    }
    v42 = v172;
    if (v172)
    {
      v43 = (unint64_t *)&v172->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v24 = (float *)v23[4];
  }
  *(_BYTE *)(a1 + 48) = *v22;
  if (*(_BYTE *)(a1 + 289))
  {
    *(_BYTE *)(a1 + 289) = 0;
    *(_WORD *)(a1 + 74) = 257;
    v45 = 1;
    *(_BYTE *)(a1 + 77) = 1;
    v46 = 1;
  }
  else
  {
    v46 = *(_BYTE *)(a1 + 75);
    v45 = *(_BYTE *)(a1 + 74);
  }
  v47 = *(_QWORD *)(a1 + 152);
  v48 = *v24;
  *(_BYTE *)(a1 + 75) = v46 | (*(float *)(a1 + 44) != *v24);
  *(_BYTE *)(a1 + 74) = v45 | (v47 == 0);
  *(float *)(a1 + 44) = v48;
  v49 = *(_QWORD **)(v21 + 8);
  v50 = (unsigned __int16 *)v49[23];
  v51 = (unsigned __int16 *)v49[24];
  if (v50 == v51)
  {
LABEL_97:
    v54 = (unsigned __int16 *)v49[26];
    v55 = (unsigned __int16 *)v49[27];
    if (v54 == v55)
    {
      *(_BYTE *)(a1 + 79) = 1;
      if (*(_BYTE *)(a1 + 288))
      {
LABEL_110:
        v60 = 0;
        goto LABEL_114;
      }
    }
    else
    {
      v56 = (unsigned __int16 *)v49[15];
      do
      {
        v59 = (unsigned __int16 *)v49[14];
        if (v59 != v56)
        {
          v59 = (unsigned __int16 *)v49[14];
          while (*v59 != *v54)
          {
            v59 += 56;
            if (v59 == v56)
            {
              v59 = (unsigned __int16 *)v49[15];
              break;
            }
          }
        }
        v57 = *((unsigned __int8 *)v59 + 9);
        ++v54;
        if (v57)
          v58 = v54 == v55;
        else
          v58 = 1;
      }
      while (!v58);
      *(_BYTE *)(a1 + 79) = v57;
      if (!v57 || *(_BYTE *)(a1 + 288))
        goto LABEL_110;
    }
    v60 = *(_BYTE *)(a1 + 78) == 0;
    goto LABEL_114;
  }
  v52 = (unsigned __int16 *)v49[15];
  while (1)
  {
    v53 = (unsigned __int16 *)v49[14];
    if (v53 != v52)
    {
      v53 = (unsigned __int16 *)v49[14];
      while (*v53 != *v50)
      {
        v53 += 56;
        if (v53 == v52)
        {
          v53 = (unsigned __int16 *)v49[15];
          break;
        }
      }
    }
    if (!*((_BYTE *)v53 + 9))
      break;
    if (++v50 == v51)
      goto LABEL_97;
  }
  v60 = 0;
  *(_BYTE *)(a1 + 79) = 0;
LABEL_114:
  *(_BYTE *)(a1 + 76) = v60;
  __p = 0;
  v172 = 0;
  v173 = 0;
  md::SceneContext::renderData((md::SceneContext *)&v174, (uint64_t)v49, 35);
  v61 = v174;
  v62 = v175;
  while (2)
  {
    v63 = v61;
    if ((_QWORD *)v61 != v62)
    {
      v64 = *(_QWORD *)(v61 + 112);
      v65 = *(std::__shared_weak_count **)(v61 + 120);
      v169.n128_u64[0] = v64;
      v169.n128_u64[1] = (unint64_t)v65;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        v68 = (char *)v172;
        if ((unint64_t)v172 < v173)
        {
          v172->__vftable = (std::__shared_weak_count_vtbl *)v64;
          *((_QWORD *)v68 + 1) = v65;
          v69 = (unint64_t *)&v65->__shared_owners_;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
          v71 = (__n128 *)(v68 + 16);
          goto LABEL_127;
        }
LABEL_126:
        v164 = *((_QWORD *)&v61 + 1);
        v163 = v169.n128_u64[1];
        v71 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&__p, v169);
        v65 = (std::__shared_weak_count *)v163;
        *((_QWORD *)&v61 + 1) = v164;
      }
      else
      {
        v72 = (char *)v172;
        if ((unint64_t)v172 >= v173)
          goto LABEL_126;
        v172->__vftable = (std::__shared_weak_count_vtbl *)v64;
        *((_QWORD *)v72 + 1) = 0;
        v71 = (__n128 *)(v72 + 16);
      }
LABEL_127:
      v172 = (std::__shared_weak_count *)v71;
      if (v65)
      {
        v73 = (unint64_t *)&v65->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          v165 = *((_QWORD *)&v61 + 1);
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          *((_QWORD *)&v61 + 1) = v165;
        }
      }
      v75 = v63 + 144;
      if (v63 + 144 != *((_QWORD *)&v61 + 1))
      {
        while (!*(_QWORD *)(v75 + 112))
        {
          v75 += 144;
          if (v75 == *((_QWORD *)&v61 + 1))
          {
            v75 = *((_QWORD *)&v61 + 1);
            break;
          }
        }
      }
      *(_QWORD *)&v61 = v75;
      continue;
    }
    break;
  }
  v76 = __p;
  v77 = (char *)v172;
  v78 = 126 - 2 * __clz(((char *)v172 - (_BYTE *)__p) >> 4);
  v79 = (_BYTE *)((char *)v172 - (_BYTE *)__p);
  if (v172 == __p)
    v80 = 0;
  else
    v80 = v78;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::mun::MuninMetadata> *,false>((unint64_t *)__p, (char *)v172, v80, 1);
  v81 = *(char **)(a1 + 216);
  v82 = *(char **)(a1 + 224);
  v83 = (void **)(a1 + 216);
  v162 = v7;
  if ((_BYTE *)(v82 - v81) != v79)
    goto LABEL_145;
  if (v81 == v82)
  {
LABEL_144:
    v161 = 0;
  }
  else
  {
    v84 = v76;
    v85 = *(char **)(a1 + 216);
    while (*(_QWORD *)v85 == *v84)
    {
      v85 += 16;
      v84 += 2;
      if (v85 == v82)
        goto LABEL_144;
    }
LABEL_145:
    if (v81)
    {
      if (v82 != v81)
      {
        do
        {
          v86 = (std::__shared_weak_count *)*((_QWORD *)v82 - 1);
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          v82 -= 16;
        }
        while (v82 != v81);
        v82 = (char *)*v83;
        v76 = __p;
        v77 = (char *)v172;
      }
      *(_QWORD *)(a1 + 224) = v81;
      operator delete(v82);
      *v83 = 0;
      *(_QWORD *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 232) = 0;
    }
    *(_QWORD *)(a1 + 216) = v76;
    *(_QWORD *)(a1 + 224) = v77;
    *(_QWORD *)(a1 + 232) = v173;
    v172 = 0;
    v173 = 0;
    __p = 0;
    v161 = 1;
  }
  v169 = 0uLL;
  v170 = 0;
  md::SceneContext::renderData((md::SceneContext *)&v174, *(_QWORD *)(v21 + 8), 39);
  v89 = v174;
  v90 = v175;
  while (2)
  {
    v91 = v89;
    if ((_QWORD *)v89 != v90)
    {
      v92 = *(_QWORD *)(v89 + 112);
      v93 = *(_QWORD *)(v89 + 120);
      *(_QWORD *)&v168 = v92;
      *((_QWORD *)&v168 + 1) = v93;
      if (v93)
      {
        v94 = (unint64_t *)(v93 + 8);
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
        v97 = v169.n128_u64[1];
        v96 = v170;
        if (v169.n128_u64[1] < v170)
        {
          *(_QWORD *)v169.n128_u64[1] = v92;
          *(_QWORD *)(v97 + 8) = v93;
          v98 = (unint64_t *)(v93 + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
          v100 = v97 + 16;
          goto LABEL_194;
        }
      }
      else
      {
        v97 = v169.n128_u64[1];
        v96 = v170;
        if (v169.n128_u64[1] < v170)
        {
          *(_QWORD *)v169.n128_u64[1] = v92;
          *(_QWORD *)(v97 + 8) = 0;
          v100 = v97 + 16;
LABEL_194:
          v169.n128_u64[1] = v100;
          v118 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
          if (*((_QWORD *)&v168 + 1))
          {
            v119 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              v167 = *((_QWORD *)&v89 + 1);
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
              *((_QWORD *)&v89 + 1) = v167;
            }
          }
          v121 = v91 + 144;
          if (v91 + 144 != *((_QWORD *)&v89 + 1))
          {
            while (!*(_QWORD *)(v121 + 112))
            {
              v121 += 144;
              if (v121 == *((_QWORD *)&v89 + 1))
              {
                v121 = *((_QWORD *)&v89 + 1);
                break;
              }
            }
          }
          *(_QWORD *)&v89 = v121;
          continue;
        }
      }
      v101 = (_QWORD *)v169.n128_u64[0];
      v102 = (uint64_t)(v97 - v169.n128_u64[0]) >> 4;
      v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 60)
        abort();
      v166 = *((_QWORD *)&v89 + 1);
      v104 = v96 - v169.n128_u64[0];
      v105 = (uint64_t)(v96 - v169.n128_u64[0]) >> 3;
      if (v105 > v103)
        v103 = v105;
      if (v104 >= 0x7FFFFFFFFFFFFFF0)
        v106 = 0xFFFFFFFFFFFFFFFLL;
      else
        v106 = v103;
      if (v106 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v107 = (char *)operator new(16 * v106);
      v108 = &v107[16 * v102];
      v109 = *((_QWORD *)&v168 + 1);
      *(_OWORD *)v108 = v168;
      if (v109)
      {
        v110 = (unint64_t *)(v109 + 8);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
        v97 = v169.n128_u64[1];
      }
      v112 = &v107[16 * v106];
      v100 = (unint64_t)(v108 + 16);
      if ((_QWORD *)v97 == v101)
      {
        v169.n128_u64[0] = (unint64_t)&v107[16 * v102];
        v170 = (unint64_t)v112;
      }
      else
      {
        v113 = (_QWORD *)v97;
        do
        {
          v114 = *((_OWORD *)v113 - 1);
          v113 -= 2;
          *((_OWORD *)v108 - 1) = v114;
          v108 -= 16;
          *v113 = 0;
          v113[1] = 0;
        }
        while (v113 != v101);
        v169.n128_u64[0] = (unint64_t)v108;
        v169.n128_u64[1] = v100;
        v170 = (unint64_t)v112;
        do
        {
          v115 = *(std::__shared_weak_count **)(v97 - 8);
          if (v115)
          {
            v116 = (unint64_t *)&v115->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          v97 -= 16;
        }
        while ((_QWORD *)v97 != v101);
      }
      if (v101)
        operator delete(v101);
      *((_QWORD *)&v89 + 1) = v166;
      goto LABEL_194;
    }
    break;
  }
  v122 = (char *)v169.n128_u64[1];
  v123 = (_QWORD *)v169.n128_u64[0];
  v124 = 126 - 2 * __clz((uint64_t)(v169.n128_u64[1] - v169.n128_u64[0]) >> 4);
  v125 = v169.n128_u64[1] - v169.n128_u64[0];
  if (v169.n128_u64[1] == v169.n128_u64[0])
    v126 = 0;
  else
    v126 = v124;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *,false>((unint64_t *)v169.n128_u64[0], (char *)v169.n128_u64[1], v126, 1);
  v127 = *(char **)(a1 + 192);
  v128 = *(char **)(a1 + 200);
  v129 = (void **)(a1 + 192);
  if (v128 - v127 != v125)
    goto LABEL_212;
  if (v127 == v128)
  {
LABEL_210:
    v130 = 0;
    if (*(_QWORD *)(a1 + 136))
      goto LABEL_241;
  }
  else
  {
    while (*(_QWORD *)v127 == *v123)
    {
      v127 += 16;
      v123 += 2;
      if (v127 == v128)
        goto LABEL_210;
    }
LABEL_212:
    v131 = *(_QWORD **)(a1 + 168);
    v132 = (_QWORD *)(a1 + 176);
    if (v131 != (_QWORD *)(a1 + 176))
    {
      do
      {
        md::MuninJunctionFeature::clearLabels(*(md::MuninJunctionFeature **)(v131[4] + 56), *(md::MuninJunctionFeature **)(v131[4] + 64));
        v140 = (_QWORD *)v131[1];
        if (v140)
        {
          do
          {
            v141 = v140;
            v140 = (_QWORD *)*v140;
          }
          while (v140);
        }
        else
        {
          do
          {
            v141 = (_QWORD *)v131[2];
            v58 = *v141 == (_QWORD)v131;
            v131 = v141;
          }
          while (!v58);
        }
        v131 = v141;
      }
      while (v141 != v132);
    }
    std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 176));
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 168) = v132;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    if (*(_QWORD *)(a1 + 264))
    {
      v133 = *(_QWORD **)(a1 + 256);
      if (v133)
      {
        do
        {
          v134 = (_QWORD *)*v133;
          operator delete(v133);
          v133 = v134;
        }
        while (v134);
      }
      *(_QWORD *)(a1 + 256) = 0;
      v135 = *(_QWORD *)(a1 + 248);
      if (v135)
      {
        for (i = 0; i != v135; ++i)
          *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * i) = 0;
      }
      *(_QWORD *)(a1 + 264) = 0;
    }
    v137 = (char *)*v129;
    if (*v129)
    {
      v138 = *(char **)(a1 + 200);
      v139 = *v129;
      if (v138 != v137)
      {
        do
        {
          v142 = (std::__shared_weak_count *)*((_QWORD *)v138 - 1);
          if (v142)
          {
            v143 = (unint64_t *)&v142->__shared_owners_;
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          v138 -= 16;
        }
        while (v138 != v137);
        v139 = *v129;
      }
      *(_QWORD *)(a1 + 200) = v137;
      operator delete(v139);
      *v129 = 0;
      *(_QWORD *)(a1 + 200) = 0;
      *(_QWORD *)(a1 + 208) = 0;
    }
    *(__n128 *)(a1 + 192) = v169;
    *(_QWORD *)(a1 + 208) = v170;
    v170 = 0;
    v169 = 0uLL;
    v145 = operator new();
    md::MuninRoadGraph::MuninRoadGraph(v145, (char **)(a1 + 192));
    v146 = *(md::MuninRoadGraph **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v145;
    if (v146)
    {
      md::MuninRoadGraph::~MuninRoadGraph(v146);
      MEMORY[0x1A1AF4E00]();
    }
    v122 = 0;
    *(_WORD *)(a1 + 74) = 257;
    v130 = 1;
    if (*(_QWORD *)(a1 + 136))
    {
LABEL_241:
      if (((v161 | v130) & 1) != 0 || !*(_QWORD *)(a1 + 144))
      {
        v147 = operator new();
        md::MuninRoadGraphZData::MuninRoadGraphZData(v147, *(_QWORD **)(a1 + 136), (uint64_t **)(a1 + 216));
        v148 = *(md::MuninRoadGraphZData **)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v147;
        if (v148)
        {
          md::MuninRoadGraphZData::~MuninRoadGraphZData(v148);
          MEMORY[0x1A1AF4E00]();
        }
      }
    }
  }
  v149 = operator new();
  v150 = md::MuninRoadLabelingCameraState::MuninRoadLabelingCameraState(v149, v162, v162 + 496);
  v151 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v150;
  if (v151)
    MEMORY[0x1A1AF4E00](v151, 0x1000C407D563059);
  v152 = v169.n128_u64[0];
  if (v169.n128_u64[0])
  {
    if (v122 != (char *)v169.n128_u64[0])
    {
      do
      {
        v153 = (std::__shared_weak_count *)*((_QWORD *)v122 - 1);
        if (v153)
        {
          v154 = (unint64_t *)&v153->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        v122 -= 16;
      }
      while (v122 != (char *)v152);
      v122 = (char *)v169.n128_u64[0];
    }
    v169.n128_u64[1] = v152;
    operator delete(v122);
  }
  v156 = (char *)__p;
  if (__p)
  {
    v157 = (char *)v172;
    if (v172 != __p)
    {
      do
      {
        v158 = (std::__shared_weak_count *)*((_QWORD *)v157 - 1);
        if (v158)
        {
          v159 = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
        v157 -= 16;
      }
      while (v157 != v156);
      v156 = (char *)__p;
    }
    operator delete(v156);
  }
}

void sub_19F885A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  MEMORY[0x1A1AF4E00](v9, 0x10F0C40B169F8A8);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va1);
  _Unwind_Resume(a1);
}

void md::MuninRoadLabeler::layoutForStaging(md::MuninRoadLabeler *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __n128 *v21;
  unsigned __int8 *v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 *v27;
  __n128 *v28;
  __n128 **v29;
  __n128 *v30;
  __n128 *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  float64x2_t *v55;
  float v56;
  float v57;
  int v58;
  float v59;
  int v60;
  int v61;
  int v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  double v68;
  float v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  int v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  unsigned __int8 v100;
  float v101;
  char v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  float *v113;
  float *v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  float v117;
  float v118;
  float v119;
  char v120;
  BOOL v121;
  int v122;
  uint64_t v123;
  uint64_t **v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t *v140;
  _BYTE *v141;
  int v142;
  unsigned __int8 v143;
  char *v144;
  char *v145;
  void *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  _QWORD v152[3];
  void *__p[2];
  __int128 v154;
  int v155;
  char v156;
  __int128 v157;
  double v158;
  __int16 v159;
  _QWORD v160[2];
  md::LabelCollisionItemBase *v161;

  v155 = 0;
  v154 = 0u;
  *(_OWORD *)__p = 0u;
  v156 = 3;
  v2 = *((_QWORD *)this + 1);
  v152[0] = v2;
  v152[1] = this;
  v152[2] = *((_QWORD *)this + 16);
  if (__p != (void **)((char *)this + 216))
  {
    v3 = (char *)*((_QWORD *)this + 27);
    v4 = (char *)*((_QWORD *)this + 28);
    v5 = v4 - v3;
    if (v4 == v3)
    {
      __p[1] = 0;
    }
    else
    {
      if (v5 < 0)
        abort();
      v6 = operator new(v4 - v3);
      __p[0] = v6;
      __p[1] = v6;
      *(_QWORD *)&v154 = &v6[2 * (v5 >> 4)];
      do
      {
        *v6 = *(_QWORD *)v3;
        v7 = *((_QWORD *)v3 + 1);
        v6[1] = v7;
        if (v7)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v3 += 16;
        v6 += 2;
      }
      while (v3 != v4);
      __p[1] = v6;
    }
    v2 = *((_QWORD *)this + 1);
  }
  *((_QWORD *)&v154 + 1) = *(_QWORD *)(v2 + 432);
  if (*((_BYTE *)this + 74) || *((_BYTE *)this + 75))
  {
    *((_BYTE *)this + 74) = 0;
    md::MuninRoadLabeler::updateLocationInformation(this, (const md::MuninRoadLabelingContext *)v152);
  }
  if (!*((_BYTE *)this + 78) && !*(_BYTE *)(*((_QWORD *)this + 1) + 3152))
  {
    v15 = *((_QWORD *)this + 4);
    if (*(_BYTE *)(v15 + 96))
    {
      v16 = *((_QWORD *)this + 10);
      v17 = *((_QWORD *)this + 11);
LABEL_30:
      *(_BYTE *)(v15 + 96) = 0;
      while (v17 != v16)
      {
        v18 = *(std::__shared_weak_count **)(v17 - 8);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v17 -= 16;
      }
      *((_QWORD *)this + 11) = v16;
      std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)this + 80, *(_QWORD *)(v15 + 32));
      v21 = *(__n128 **)(v15 + 8);
      if (v21 != (__n128 *)(v15 + 16))
      {
        do
        {
          v22 = (unsigned __int8 *)v21[2].n128_u64[0];
          if (v22[493] || v22[302])
          {
            v23 = (unsigned __int8 **)*((_QWORD *)this + 11);
            if ((unint64_t)v23 >= *((_QWORD *)this + 12))
            {
              v27 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 80, v21[2]);
            }
            else
            {
              *v23 = v22;
              v24 = v21[2].n128_u64[1];
              v23[1] = (unsigned __int8 *)v24;
              if (v24)
              {
                v25 = (unint64_t *)(v24 + 8);
                do
                  v26 = __ldxr(v25);
                while (__stxr(v26 + 1, v25));
              }
              v27 = (__n128 *)(v23 + 2);
            }
            *((_QWORD *)this + 11) = v27;
            v28 = (__n128 *)v21->n128_u64[1];
            if (v28)
            {
              do
              {
                v29 = (__n128 **)v28;
                v28 = (__n128 *)v28->n128_u64[0];
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (__n128 **)v21[1].n128_u64[0];
                v121 = *v29 == v21;
                v21 = (__n128 *)v29;
              }
              while (!v121);
            }
          }
          else
          {
            atomic_store(0, v22 + 298);
            md::MuninRoadLabel::setActive((int32x2_t *)v21[2].n128_u64[0], 0);
            v30 = (__n128 *)v21->n128_u64[1];
            v31 = v21;
            if (v30)
            {
              do
              {
                v29 = (__n128 **)v30;
                v30 = (__n128 *)v30->n128_u64[0];
              }
              while (v30);
            }
            else
            {
              do
              {
                v29 = (__n128 **)v31[1].n128_u64[0];
                v121 = *v29 == v31;
                v31 = (__n128 *)v29;
              }
              while (!v121);
            }
            if (*(__n128 **)(v15 + 8) == v21)
              *(_QWORD *)(v15 + 8) = v29;
            --*(_QWORD *)(v15 + 32);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v15 + 16), (uint64_t *)v21);
            v32 = (std::__shared_weak_count *)v21[2].n128_u64[1];
            if (v32)
            {
              v33 = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            (*(void (**)(_QWORD, __n128 *, uint64_t))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), v21, 48);
          }
          v21 = (__n128 *)v29;
        }
        while (v29 != (__n128 **)(v15 + 16));
      }
    }
    else
    {
      v16 = *((_QWORD *)this + 10);
      v17 = *((_QWORD *)this + 11);
      if (v16 != v17)
      {
        LOBYTE(v35) = 0;
        v36 = 0;
        v37 = *((_QWORD *)this + 10);
        do
        {
          if (v35)
          {
            do
              v37 += 16;
            while (v37 != v17);
            goto LABEL_30;
          }
          if (*(_BYTE *)(*(_QWORD *)v37 + 493))
          {
            v35 = 0;
          }
          else
          {
            v38 = (unint64_t)(v36 + 1) > 4;
            if (*(_BYTE *)(*(_QWORD *)v37 + 302))
            {
              v35 = 0;
            }
            else
            {
              ++v36;
              v35 = v38;
            }
          }
          v37 += 16;
        }
        while (v37 != v17);
        if (v35)
          goto LABEL_30;
      }
    }
    v39 = (uint64_t *)*((_QWORD *)this + 10);
    v151 = (uint64_t *)*((_QWORD *)this + 11);
    v40 = (char *)v151 - (char *)v39;
    if (v151 != v39)
    {
      if (v40 < 0)
        abort();
      v41 = (uint64_t *)operator new((unint64_t)v40 >> 1);
      v42 = &v41[v40 >> 4];
      v43 = v41;
      v40 = (uint64_t)v41;
      while (1)
      {
        v44 = *v39;
        v45 = *(char *)(*v39 + 493);
        if (!*(_BYTE *)(*v39 + 493))
          goto LABEL_93;
        v46 = *((_QWORD *)this + 1);
        v47 = *(unsigned __int8 *)(*v39 + 493);
        *(_QWORD *)(v44 + 320) = 0;
        *(_BYTE *)(v44 + 354) = 0;
        if (*(_BYTE *)(v44 + 301))
        {
          v48 = byte_1A007EA28[v45 + 6];
          if (v48 != 255)
          {
            *(_BYTE *)(v44 + 493) = v48;
            *(_BYTE *)(v44 + 494) = 20;
            v47 = v48;
          }
          if (v47 != 2)
            goto LABEL_90;
          goto LABEL_91;
        }
        v150 = v42;
        v55 = *(float64x2_t **)(v46 + 432);
        v157 = xmmword_19FFB34C0;
        v158 = 0.0;
        v159 = 0;
        md::LabelLayoutContext::evaluateWorldPoint((uint64_t)v55, v44 + 184, v44 + 240, *(unsigned __int8 *)(v44 + 296), 1, (uint64_t)&v157, 1.0);
        v56 = v158;
        *(float *)(v44 + 488) = v56;
        v57 = *(float *)&v157;
        v58 = DWORD2(v157);
        v59 = fmaxf(*(float *)&v157, 0.0);
        *(float *)(v44 + 112) = v59;
        v60 = (int)v59;
        if ((int)v59 >= 0x17)
          LOBYTE(v60) = 23;
        *(_BYTE *)(v44 + 124) = v60;
        *(_DWORD *)(v44 + 476) = v58;
        v61 = v159;
        *(_BYTE *)(v44 + 492) = v159;
        if (v61)
        {
          v62 = byte_1A007EA28[v45 + 6];
          if (v62 != 255)
          {
            *(_BYTE *)(v44 + 493) = v62;
            *(_BYTE *)(v44 + 494) = 3;
            v47 = v62;
          }
          v42 = v150;
          if (v47 == 2)
            goto LABEL_91;
LABEL_90:
          *(_BYTE *)(v44 + 299) = 0;
LABEL_91:
          v49 = atomic_load((unsigned __int8 *)(v44 + 353));
          if ((v49 & 1) == 0)
            *(_BYTE *)(v44 + 356) = 2 * (*(_BYTE *)(v44 + 493) == 2);
          goto LABEL_93;
        }
        md::LabelStyle::setZoom(*(md::LabelStyle **)(v44 + 80), v57);
        if (*(_BYTE *)(v44 + 305)
          || (v70 = *(_BYTE *)(v46 + 3051)) != 0 && (v70 = *(_BYTE *)(*(_QWORD *)(v44 + 80) + 141)) != 0)
        {
          LODWORD(v68) = *(_DWORD *)(v44 + 112);
          v69 = *(float *)(*(_QWORD *)(v46 + 232) + 36);
          v70 = *(float *)&v68 >= v69 && *(_BYTE *)(v46 + 3612) != 0;
        }
        atomic_store(v70, (unsigned __int8 *)(v44 + 353));
        if (*(_BYTE *)(v44 + 355))
        {
          v71 = atomic_load((unsigned __int8 *)(v44 + 353));
          v72 = *(_QWORD *)(v44 + 328);
          if ((v71 & 1) != 0)
          {
            v73 = atomic_load((unsigned __int8 *)(v72 + 286));
            if ((v73 & 1) == 0)
              goto LABEL_136;
            if (*(_BYTE *)(*(_QWORD *)(v44 + 328) + 280))
              *(_BYTE *)(v44 + 356) = *(_BYTE *)(*(_QWORD *)(v44 + 328) + 280);
          }
          else
          {
            *(_BYTE *)(v72 + 285) = 1;
          }
          *(_BYTE *)(v44 + 355) = 0;
        }
LABEL_136:
        v74 = *(_QWORD *)(v44 + 80);
        v75 = *(unsigned __int8 *)(v74 + 123);
        *(_BYTE *)(v44 + 495) = v75;
        v76 = 1.0;
        if (v75 == 2)
        {
          v76 = *(float *)(v74 + 196);
          v77 = *(_QWORD *)(v74 + 392);
          if (!v77)
          {
            md::LabelStyle::prepareDisplayCoreStyleGroup((md::LabelStyle *)v74);
            v77 = *(_QWORD *)(v74 + 392);
          }
          v78 = *(_QWORD *)(v74 + 400);
          if (v78)
          {
            v79 = (unint64_t *)(v78 + 8);
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          v81 = *(std::__shared_weak_count **)(v44 + 504);
          *(_QWORD *)(v44 + 496) = v77;
          *(_QWORD *)(v44 + 504) = v78;
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
        *(float *)(v44 + 116) = v76;
        md::LabelStyle::getLabelKnobs(*(uint64_t **)(v44 + 80), v44 + 440, *(unsigned __int8 *)(v44 + 176), 0, v68, v69);
        *(_QWORD *)(v44 + 384) = 0;
        *(_QWORD *)(v44 + 392) = 0;
        *(_QWORD *)(v44 + 400) = 0;
        v84 = *(_QWORD *)(v44 + 80);
        v85 = *(float *)(v84 + 204);
        if (v85 == 0.0)
        {
          v92 = 0.0;
          v91 = 0.0;
          v90 = 0.0;
        }
        else
        {
          *(float *)(v44 + 480) = v85;
          v86 = *(double *)(v44 + 216);
          v87 = *(double *)(v44 + 224);
          v88 = *(double *)(v44 + 232);
          v89 = v85 / sqrt(v86 * v86 + v87 * v87 + v88 * v88);
          v90 = v89 * v86;
          v91 = v89 * v87;
          v92 = v89 * v88;
          *(double *)(v44 + 384) = v90;
          *(double *)(v44 + 392) = v91;
          *(double *)(v44 + 400) = v92;
        }
        *(double *)(v44 + 360) = v90;
        *(double *)(v44 + 368) = v91;
        *(double *)(v44 + 376) = v92;
        v93 = *(float *)(v84 + 208);
        if (v93 != 0.0 && *(_BYTE *)(v44 + 252))
        {
          *(float *)(v44 + 484) = v93;
          v94 = (float)(*(float *)(v44 + 240) * v93);
          v95 = (float)(*(float *)(v44 + 244) * v93);
          v96 = (float)(*(float *)(v44 + 248) * v93);
          v90 = v90 + v94;
          v91 = v91 + v95;
          *(double *)(v44 + 384) = v90;
          *(double *)(v44 + 392) = v91;
          v92 = v92 + v96;
          *(double *)(v44 + 400) = v92;
        }
        v97 = v90 + *(double *)(v44 + 216);
        v98 = v91 + *(double *)(v44 + 224);
        v99 = v92 + *(double *)(v44 + 232);
        *(double *)(v44 + 408) = v97;
        *(double *)(v44 + 416) = v98;
        *(double *)(v44 + 424) = v99;
        *(float32x2_t *)(v44 + 432) = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v55[60], v55[54], v97), v55[56], v98), v55[58], v99), 1.0/ (v55[61].f64[1]+ v55[55].f64[1] * v97+ v55[57].f64[1] * v98+ v55[59].f64[1] * v99)));
        v100 = atomic_load((unsigned __int8 *)(v44 + 297));
        if ((v100 & 1) != 0)
        {
LABEL_163:
          v108 = 0;
          v102 = 37;
          goto LABEL_166;
        }
        v101 = *(float *)(v44 + 112);
        if (v101 >= *(float *)(v44 + 464))
        {
          if (v101 < *(float *)(v44 + 468))
            goto LABEL_163;
          v102 = 7;
        }
        else
        {
          v102 = 6;
        }
        v108 = 1;
LABEL_166:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v44 + 64) + 72))(*(_QWORD *)(v44 + 64), v46);
        v109 = *(_QWORD *)(v44 + 64);
        v160[0] = 0;
        v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v109 + 80))(v109, v46, v44 + 432, v160);
        if (v110 == 37)
          v111 = v108;
        else
          v111 = 1;
        if ((v111 & 1) != 0)
        {
          v42 = v150;
          if (v108)
            goto LABEL_190;
          goto LABEL_171;
        }
        v113 = *(float **)(v46 + 432);
        v114 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v44 + 64) + 248))(*(_QWORD *)(v44 + 64));
        if (v113[278] <= *v114 || v113[276] >= v114[2] || v113[279] <= v114[1] || v113[277] >= v114[3])
        {
          v102 = 2;
          v42 = v150;
          goto LABEL_190;
        }
        v115 = atomic_load((unsigned __int8 *)(v44 + 353));
        if ((v115 & 1) == 0 || (v116 = atomic_load((unsigned __int8 *)(v44 + 297)), (v116 & 1) != 0))
        {
          v102 = 37;
          v42 = v150;
          if (v108)
            goto LABEL_190;
LABEL_171:
          if (v110 != 37)
          {
            v112 = 2;
            goto LABEL_194;
          }
          goto LABEL_186;
        }
        if (*(_BYTE *)(v46 + 3615)
          || !*(_BYTE *)(*(_QWORD *)(v46 + 232) + 23)
          || *(_BYTE *)(v46 + 3152)
          || *(_BYTE *)(v44 + 356) != 2)
        {
          v117 = *(float *)(v46 + 3308);
          v118 = *(float *)(v44 + 432);
          v119 = *(float *)(v44 + 436);
          if (vabds_f32(v118, *(float *)(v44 + 344)) >= v117 || vabds_f32(v119, *(float *)(v44 + 348)) >= v117)
          {
            *(_BYTE *)(v44 + 352) = 1;
            *(float *)(v44 + 344) = v118;
            *(float *)(v44 + 348) = v119;
          }
        }
        v120 = *(_BYTE *)(v44 + 352);
        v42 = v150;
        if (v120)
          v120 = *(_BYTE *)(v46 + 3153) != 0;
        *(_BYTE *)(v44 + 354) = v120;
        if (*(_BYTE *)(v44 + 356) != 2)
        {
          v102 = 22;
LABEL_190:
          v121 = v110 == 37;
          if (v110 == 37)
            LOBYTE(v110) = v102;
          v112 = 2;
          if (v121)
            v112 = 3;
LABEL_194:
          v122 = byte_1A007EA28[3 * v112 + *(char *)(v44 + 493)];
          if (v122 == 255)
          {
            if (*(_BYTE *)(v44 + 493) != 2)
              goto LABEL_90;
          }
          else
          {
            *(_BYTE *)(v44 + 493) = v122;
            *(_BYTE *)(v44 + 494) = v110;
            if (v122 != 2)
              goto LABEL_90;
          }
          goto LABEL_91;
        }
LABEL_186:
        if (!*(_BYTE *)(v44 + 299))
          *(_WORD *)(v44 + 299) = 1;
        *(_QWORD *)(v44 + 72) = *(_QWORD *)(v44 + 64);
LABEL_93:
        v50 = *v39;
        if (*(_BYTE *)(*v39 + 299))
        {
          if (v40 >= (unint64_t)v42)
          {
            v51 = (v40 - (uint64_t)v41) >> 3;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 61)
              abort();
            if (((char *)v42 - (char *)v41) >> 2 > v52)
              v52 = ((char *)v42 - (char *)v41) >> 2;
            if ((unint64_t)((char *)v42 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8)
              v53 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v53 = v52;
            if (v53)
            {
              if (v53 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v54 = operator new(8 * v53);
            }
            else
            {
              v54 = 0;
            }
            v63 = (uint64_t *)&v54[8 * v51];
            *v63 = v50;
            v43 = v63 + 1;
            if ((uint64_t *)v40 != v41)
            {
              v64 = v40 - 8 - (_QWORD)v41;
              if (v64 < 0x168)
              {
                v65 = (uint64_t *)v40;
                goto LABEL_115;
              }
              if (&v54[v40 - (_QWORD)v41 - 8 - (v64 & 0xFFFFFFFFFFFFFFF8)] > &v54[v40 - (_QWORD)v41 - 8])
              {
                v65 = (uint64_t *)v40;
                goto LABEL_115;
              }
              if (v40 - 8 - (v64 & 0xFFFFFFFFFFFFFFF8) > v40 - 8)
              {
                v65 = (uint64_t *)v40;
                goto LABEL_115;
              }
              if ((unint64_t)((char *)v41 - v54) < 0x20)
              {
                v65 = (uint64_t *)v40;
                goto LABEL_115;
              }
              v103 = (v64 >> 3) + 1;
              v65 = (uint64_t *)(v40 - 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL));
              v104 = &v54[8 * v51 - 16];
              v105 = (uint64_t *)(v40 - 16);
              v106 = v103 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v107 = *(_OWORD *)v105;
                *(v104 - 1) = *((_OWORD *)v105 - 1);
                *v104 = v107;
                v104 -= 2;
                v105 -= 4;
                v106 -= 4;
              }
              while (v106);
              v63 -= v103 & 0x3FFFFFFFFFFFFFFCLL;
              if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_115:
                  v66 = *--v65;
                  *--v63 = v66;
                }
                while (v65 != v41);
              }
            }
            v42 = (uint64_t *)&v54[8 * v53];
            if (v41)
            {
              v67 = &v54[8 * v53];
              operator delete(v41);
              v42 = (uint64_t *)v67;
            }
            v41 = v63;
            v40 = (uint64_t)v43;
            goto LABEL_84;
          }
          *(_QWORD *)v40 = v50;
          v40 += 8;
          v43 = (uint64_t *)v40;
        }
LABEL_84:
        v39 += 2;
        if (v39 == v151)
          goto LABEL_207;
      }
    }
    v41 = 0;
    v43 = 0;
LABEL_207:
    v123 = *((_QWORD *)this + 1);
    v124 = *(uint64_t ***)(*((_QWORD *)this + 4) + 64);
    if (v124)
    {
      do
      {
        (*(void (**)(uint64_t *, uint64_t))(*v124[6] + 16))(v124[6], v123);
        v124 = (uint64_t **)*v124;
      }
      while (v124);
      v123 = *((_QWORD *)this + 1);
    }
    v125 = md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(v123 + 336) + 200));
    v126 = 126 - 2 * __clz((v40 - (uint64_t)v41) >> 3);
    if ((uint64_t *)v40 == v41)
      v127 = 0;
    else
      v127 = v126;
    std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **,false>((unint64_t)v41, (uint64_t *)v40, v127, 1);
    v128 = *(unsigned int *)(v125 + 4);
    LOWORD(v157) = 0;
    *((_QWORD *)&v157 + 1) = 0;
    v160[1] = 0;
    LOWORD(v160[0]) = 257;
    v129 = v43 - v41;
    v130 = 0;
    if (v43 != v41)
    {
      v131 = 0;
      if (v129 <= 1)
        v132 = 1;
      else
        v132 = v129;
      while (1)
      {
        v133 = v41[v130];
        if (*(_BYTE *)(v133 + 299))
        {
          v134 = *(_QWORD *)(v133 + 312);
          if (*(_BYTE *)(*((_QWORD *)this + 1) + 3610))
          {
            v135 = *((_QWORD *)this + 2);
            v161 = *(md::LabelCollisionItemBase **)(v133 + 312);
            md::LabelCollider::collideItems(v135, &v161, 1);
          }
          else
          {
            v136 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v134 + 88))(*(_QWORD *)(v133 + 312));
            if (v136
              && (v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 96))(v134),
                  (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v136 + 24))(v136, v137)))
            {
              v138 = (unsigned __int8 *)v160;
            }
            else
            {
              v138 = (unsigned __int8 *)&v157;
            }
            md::MuninRoadLabel::setCollisionResult(v133, v138);
          }
        }
        if (*(_BYTE *)(v133 + 493) == 2 && ++v131 >= v128)
          break;
        if (v132 == ++v130)
          goto LABEL_239;
      }
    }
    v139 = v129 - v130;
    if (v129 <= v130)
    {
      if (v41)
LABEL_239:
        operator delete(v41);
      goto LABEL_240;
    }
    v140 = &v41[v130];
    while (1)
    {
      v141 = (_BYTE *)*v140;
      v142 = byte_1A007EA28[*(char *)(*v140 + 493) + 6];
      if (v142 == 255)
        break;
      v141[493] = v142;
      v141[494] = 36;
      if (v142 != 2)
        goto LABEL_233;
LABEL_234:
      v143 = atomic_load(v141 + 353);
      if ((v143 & 1) == 0)
        v141[356] = 2 * (v141[493] == 2);
      ++v140;
      if (!--v139)
        goto LABEL_239;
    }
    if (*(_BYTE *)(*v140 + 493) == 2)
      goto LABEL_234;
LABEL_233:
    v141[299] = 0;
    goto LABEL_234;
  }
  v10 = *((_QWORD *)this + 10);
  v11 = *((_QWORD *)this + 11);
  if (v10 != v11)
  {
    while (1)
    {
      v12 = *(_BYTE **)v10;
      v13 = byte_1A007EA28[*(char *)(*(_QWORD *)v10 + 493) + 6];
      if (v13 == 255)
        break;
      v12[493] = v13;
      v12[494] = 29;
      if (v13 != 2)
        goto LABEL_23;
LABEL_24:
      v14 = atomic_load(v12 + 353);
      if ((v14 & 1) == 0)
        v12[356] = 2 * (v12[493] == 2);
      v10 += 16;
      if (v10 == v11)
        goto LABEL_240;
    }
    if (*(_BYTE *)(*(_QWORD *)v10 + 493) == 2)
      goto LABEL_24;
LABEL_23:
    v12[299] = 0;
    goto LABEL_24;
  }
LABEL_240:
  v144 = (char *)__p[0];
  if (__p[0])
  {
    v145 = (char *)__p[1];
    v146 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v147 = (std::__shared_weak_count *)*((_QWORD *)v145 - 1);
        if (v147)
        {
          v148 = (unint64_t *)&v147->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v145 -= 16;
      }
      while (v145 != v144);
      v146 = __p[0];
    }
    __p[1] = v144;
    operator delete(v146);
  }
}

void sub_19F8868A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  md::MuninRoadLabelingContext::~MuninRoadLabelingContext((md::MuninRoadLabelingContext *)&a13);
  _Unwind_Resume(a1);
}

void md::MuninRoadLabeler::synchStagingWithDisplay(md::MuninRoadLabeler *this)
{
  __n128 *v2;
  __n128 *v3;
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  __n128 *v9;
  _BYTE *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 *v19;
  __n128 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __n128 *v24;
  __n128 *v25;
  unint64_t v26;
  __n128 *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __n128 *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  __n128 *v44;
  __n128 v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  __n128 v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  __n128 *v56;
  __n128 *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __n128 *v61;
  __n128 *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *__p;
  __n128 *v78;
  unint64_t v79;
  void *v80;
  __n128 *v81;
  unint64_t v82;

  v80 = 0;
  v81 = 0;
  v82 = 0;
  v2 = (__n128 *)*((_QWORD *)this + 13);
  v3 = (__n128 *)*((_QWORD *)this + 14);
  if (v2 == v3)
    goto LABEL_28;
  v4 = (__n128 *)*((_QWORD *)this + 14);
  while (1)
  {
    v5 = v2->n128_u64[0];
    if (*(_BYTE *)(v2->n128_u64[0] + 493) != 2)
    {
      *(_BYTE *)(v5 + 303) = 0;
      if (!*(_BYTE *)(v5 + 538))
        break;
    }
    if (++v2 == v3)
      goto LABEL_29;
  }
  v6 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v80, *v2);
  v7 = v2->n128_u64[0];
  v81 = v6;
  if (*(_BYTE *)(v7 + 302))
    *(_BYTE *)(v7 + 302) = 0;
  if (v2 != v3)
  {
    v8 = v2 + 1;
    if (&v2[1] != v3)
    {
      v4 = v2;
      do
      {
        v9 = v2;
        v2 = v8;
        v10 = (_BYTE *)v9[1].n128_u64[0];
        if (v10[493] == 2 || (v10[303] = 0, v10[538]))
        {
          v11 = v9[1].n128_u64[1];
          v2->n128_u64[0] = 0;
          v2->n128_u64[1] = 0;
          v12 = (std::__shared_weak_count *)v4->n128_u64[1];
          v4->n128_u64[0] = (unint64_t)v10;
          v4->n128_u64[1] = v11;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          ++v4;
        }
        else
        {
          v15 = v81;
          if ((unint64_t)v81 >= v82)
          {
            v19 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v80, *v2);
          }
          else
          {
            v81->n128_u64[0] = (unint64_t)v10;
            v16 = v9[1].n128_u64[1];
            v15->n128_u64[1] = v16;
            if (v16)
            {
              v17 = (unint64_t *)(v16 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            v19 = v15 + 1;
          }
          v81 = v19;
          if (*(_BYTE *)(v2->n128_u64[0] + 302))
            *(_BYTE *)(v2->n128_u64[0] + 302) = 0;
        }
        v8 = v2 + 1;
      }
      while (&v2[1] != v3);
      goto LABEL_29;
    }
LABEL_28:
    v4 = v2;
  }
LABEL_29:
  v20 = (__n128 *)*((_QWORD *)this + 14);
  if (v4 != v20)
  {
    while (v20 != v4)
    {
      v21 = (std::__shared_weak_count *)v20[-1].n128_u64[1];
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      --v20;
    }
    *((_QWORD *)this + 14) = v4;
  }
  __p = 0;
  v78 = 0;
  v79 = 0;
  v24 = (__n128 *)*((_QWORD *)this + 10);
  v25 = (__n128 *)*((_QWORD *)this + 11);
  if (v24 != v25)
  {
    do
    {
      v26 = v24->n128_u64[0];
      if (*(_BYTE *)(v24->n128_u64[0] + 493) == 2)
      {
        if (!*(_BYTE *)(v26 + 302))
        {
          v27 = v78;
          if ((unint64_t)v78 >= v79)
          {
            v31 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&__p, *v24);
          }
          else
          {
            v78->n128_u64[0] = v26;
            v28 = v24->n128_u64[1];
            v27->n128_u64[1] = v28;
            if (v28)
            {
              v29 = (unint64_t *)(v28 + 8);
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
            }
            v31 = v27 + 1;
          }
          v78 = v31;
          if (!*(_BYTE *)(v24->n128_u64[0] + 302))
            *(_BYTE *)(v24->n128_u64[0] + 302) = 1;
          v33 = (char *)*((_QWORD *)this + 14);
          v32 = *((_QWORD *)this + 15);
          if ((unint64_t)v33 >= v32)
          {
            v38 = (char *)*((_QWORD *)this + 13);
            v39 = (v33 - v38) >> 4;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 60)
              abort();
            v41 = v32 - (_QWORD)v38;
            if (v41 >> 3 > v40)
              v40 = v41 >> 3;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
              v42 = 0xFFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v43 = (char *)operator new(16 * v42);
            v44 = (__n128 *)&v43[16 * v39];
            v45 = *v24;
            *v44 = *v24;
            if (v45.n128_u64[1])
            {
              v46 = (unint64_t *)(v45.n128_u64[1] + 8);
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
              v38 = (char *)*((_QWORD *)this + 13);
              v33 = (char *)*((_QWORD *)this + 14);
            }
            v48 = &v43[16 * v42];
            v37 = v44 + 1;
            if (v33 == v38)
            {
              *((_QWORD *)this + 13) = v44;
              *((_QWORD *)this + 14) = v37;
              *((_QWORD *)this + 15) = v48;
            }
            else
            {
              do
              {
                v49 = *((__n128 *)v33 - 1);
                v33 -= 16;
                v44[-1] = v49;
                --v44;
                *(_QWORD *)v33 = 0;
                *((_QWORD *)v33 + 1) = 0;
              }
              while (v33 != v38);
              v38 = (char *)*((_QWORD *)this + 13);
              v50 = (char *)*((_QWORD *)this + 14);
              *((_QWORD *)this + 13) = v44;
              *((_QWORD *)this + 14) = v37;
              *((_QWORD *)this + 15) = v48;
              while (v50 != v38)
              {
                v51 = (std::__shared_weak_count *)*((_QWORD *)v50 - 1);
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v50 -= 16;
              }
            }
            if (v38)
              operator delete(v38);
          }
          else
          {
            *(_QWORD *)v33 = v24->n128_u64[0];
            v34 = v24->n128_u64[1];
            *((_QWORD *)v33 + 1) = v34;
            if (v34)
            {
              v35 = (unint64_t *)(v34 + 8);
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            v37 = (__n128 *)(v33 + 16);
          }
          *((_QWORD *)this + 14) = v37;
          v26 = v24->n128_u64[0];
        }
        v54 = *(unsigned __int8 *)(v26 + 303);
        *(_BYTE *)(v26 + 303) = 1;
        if (!v54)
        {
          v55 = *(_QWORD *)(v26 + 64);
          if (v55)
            *(_BYTE *)(v55 + 560) = 1;
        }
      }
      ++v24;
    }
    while (v24 != v25);
    v56 = (__n128 *)__p;
    if (__p)
    {
      v57 = v78;
      if (v78 != __p)
      {
        do
        {
          v58 = (std::__shared_weak_count *)v57[-1].n128_u64[1];
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          --v57;
        }
        while (v57 != v56);
        v56 = (__n128 *)__p;
      }
      operator delete(v56);
    }
  }
  v61 = (__n128 *)v80;
  if (v80)
  {
    v62 = v81;
    if (v81 != v80)
    {
      do
      {
        v63 = (std::__shared_weak_count *)v62[-1].n128_u64[1];
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        --v62;
      }
      while (v62 != v61);
      v61 = (__n128 *)v80;
    }
    operator delete(v61);
  }
  v66 = (uint64_t *)*((_QWORD *)this + 13);
  v67 = (uint64_t *)*((_QWORD *)this + 14);
  while (v66 != v67)
  {
    v68 = *v66;
    v69 = *((_QWORD *)this + 1);
    *(_BYTE *)(v68 + 540) = *(_BYTE *)(*v66 + 495);
    v71 = *(_QWORD *)(v68 + 496);
    v70 = *(_QWORD *)(v68 + 504);
    if (v70)
    {
      v72 = (unint64_t *)(v70 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    *(_QWORD *)(v68 + 544) = v71;
    v74 = *(std::__shared_weak_count **)(v68 + 552);
    *(_QWORD *)(v68 + 552) = v70;
    if (v74)
    {
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    *(_OWORD *)(v68 + 512) = *(_OWORD *)(v68 + 384);
    *(_QWORD *)(v68 + 528) = *(_QWORD *)(v68 + 400);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v68 + 64) + 104))(*(_QWORD *)(v68 + 64), v69);
    (*(void (**)(_QWORD))(**(_QWORD **)(v68 + 64) + 112))(*(_QWORD *)(v68 + 64));
    v66 += 2;
  }
}

void sub_19F886EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char *__p, char *a13)
{
  char *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v14 = __p;
  if (!__p)
    _Unwind_Resume(exception_object);
  v15 = a13;
  if (a13 != __p)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 16;
    }
    while (v15 != __p);
    v14 = __p;
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void md::MuninRoadLabeler::layoutForDisplay(md::MuninRoadLabeler *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *i;
  int v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  int8x8_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  int v42;
  int v43;
  float (**v44)(__n128);
  float v45;
  float v46;
  uint64_t v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  float v51;
  float v52;
  float v53;
  int v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  double v59;
  int v67;
  float v68;
  uint64_t v69;
  int v70;
  __n128 v71;
  char v72;
  char v73;
  int v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  double v78;
  unsigned __int8 v79;

  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  v5 = v4[1];
  if ((v5 & (v5 - 1)) != 0)
  {
    v7 = 0xC83717EF586624DCLL;
    if (v5 <= 0xC83717EF586624DCLL)
      v7 = 0xC83717EF586624DCLL % v5;
    v6 = *(_QWORD **)(*v4 + 8 * v7);
    do
    {
      do
        v6 = (_QWORD *)*v6;
      while (v6[1] != 0xC83717EF586624DCLL);
    }
    while (v6[2] != 0xC83717EF586624DCLL);
  }
  else
  {
    v6 = *(_QWORD **)(*v4 + 8 * ((v5 - 1) & 0xC83717EF586624DCLL));
    do
    {
      do
        v6 = (_QWORD *)*v6;
      while (v6[1] != 0xC83717EF586624DCLL);
    }
    while (v6[2] != 0xC83717EF586624DCLL);
  }
  v8 = *(_QWORD *)(v6[5] + 32);
  v9 = *(unsigned __int8 **)(v8 + 40);
  for (i = *(unsigned __int8 **)(v8 + 48); v9 != i; v9 += 272)
  {
    v11 = *v9;
    switch(v11)
    {
      case 6:
        *((_BYTE *)this + 289) = 1;
        break;
      case 5:
        *((_BYTE *)this + 288) = 0;
        break;
      case 2:
        *((_BYTE *)this + 288) = 1;
        v12 = (char *)*((_QWORD *)this + 13);
        v13 = (char *)*((_QWORD *)this + 14);
        if (v12 == v13)
          continue;
        v14 = v13 - v12 - 16;
        if (v14 >= 0x10)
        {
          v15 = (v14 >> 4) + 1;
          v16 = (uint64_t *)(v12 + 16);
          v17 = v15 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v18 = *(v16 - 2);
            v19 = *v16;
            v16 += 4;
            *(_BYTE *)(v18 + 537) = 1;
            *(_BYTE *)(v19 + 537) = 1;
            v17 -= 2;
          }
          while (v17);
          if (v15 == (v15 & 0x1FFFFFFFFFFFFFFELL))
            continue;
          v12 += 16 * (v15 & 0x1FFFFFFFFFFFFFFELL);
        }
        do
        {
          v20 = *(_QWORD *)v12;
          v12 += 16;
          *(_BYTE *)(v20 + 537) = 1;
        }
        while (v12 != v13);
        break;
      default:
        continue;
    }
  }
  v21 = *((_QWORD *)this + 7);
  if (v21)
  {
    v22 = atomic_load((unsigned __int8 *)(v21 + 298));
    if ((v22 & 1) == 0)
    {
      v77 = 0uLL;
      md::MuninRoadLabeler::setDebugHighlight((uint64_t)this, (uint64_t *)&v77);
    }
  }
  if (!*((_BYTE *)this + 49) && !*((_QWORD *)this + 7))
    goto LABEL_58;
  v23 = (_QWORD *)*((_QWORD *)a2 + 1);
  v24 = (int8x8_t)v23[1];
  if (!*(_QWORD *)&v24)
    goto LABEL_55;
  v25 = (uint8x8_t)vcnt_s8(v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    v26 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v24 <= 0x1AF456233693CD46uLL)
      v26 = 0x1AF456233693CD46uLL % *(_QWORD *)&v24;
  }
  else
  {
    v26 = (*(_QWORD *)&v24 - 1) & 0x1AF456233693CD46;
  }
  v27 = *(_QWORD **)(*v23 + 8 * v26);
  if (!v27)
    goto LABEL_55;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_55;
  if (v25.u32[0] < 2uLL)
  {
    v29 = *(_QWORD *)&v24 - 1;
    while (1)
    {
      v31 = v28[1];
      if (v31 == 0x1AF456233693CD46)
      {
        if (v28[2] == 0x1AF456233693CD46)
          goto LABEL_53;
      }
      else if ((v31 & v29) != v26)
      {
        goto LABEL_55;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_55;
    }
  }
  while (1)
  {
    v30 = v28[1];
    if (v30 == 0x1AF456233693CD46)
      break;
    if (v30 >= *(_QWORD *)&v24)
      v30 %= *(_QWORD *)&v24;
    if (v30 != v26)
      goto LABEL_55;
LABEL_42:
    v28 = (_QWORD *)*v28;
    if (!v28)
      goto LABEL_55;
  }
  if (v28[2] != 0x1AF456233693CD46)
    goto LABEL_42;
LABEL_53:
  v32 = v28[5];
  if (*(_QWORD *)(v32 + 8) != 0x1AF456233693CD46)
  {
LABEL_55:
    v33 = 0;
    goto LABEL_56;
  }
  v33 = *(_QWORD *)(v32 + 32);
LABEL_56:
  v34 = operator new();
  md::MuninRoadLabelingCameraState::MuninRoadLabelingCameraState(v34, v33, v33 + 496);
  v35 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = v34;
  if (v35)
    MEMORY[0x1A1AF4E00](v35, 0x1000C407D563059);
LABEL_58:
  v36 = (uint64_t *)*((_QWORD *)this + 13);
  v37 = (uint64_t *)*((_QWORD *)this + 14);
  if (v36 != v37)
  {
    while (2)
    {
      v39 = *v36;
      v40 = *((_QWORD *)this + 1);
      v77 = xmmword_19FFB34C0;
      v78 = 0.0;
      v79 = 0;
      LOBYTE(v75) = 0;
      v76 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v40 + 440, v39 + 184, (uint64_t)&v75, *(unsigned __int8 *)(v39 + 296), 0, (uint64_t)&v77, 1.0);
      v42 = v79;
      *(_BYTE *)(v39 + 536) = v79;
      if (v42)
      {
        v43 = byte_1A007EA46[*(char *)(v39 + 538) + 8];
        if (v43 == 255)
        {
          v43 = *(unsigned __int8 *)(v39 + 538);
          if (!*(_BYTE *)(v39 + 538))
            goto LABEL_82;
LABEL_68:
          if (v43 == 3)
          {
            *(_DWORD *)(v39 + 264) = 1065353216;
            v44 = (float (**)(__n128))(v39 + 280);
            v41.n128_u32[0] = 1.0;
            goto LABEL_83;
          }
        }
        else
        {
          *(_BYTE *)(v39 + 538) = v43;
          *(_BYTE *)(v39 + 539) = 3;
          if (v43)
            goto LABEL_68;
LABEL_82:
          *(_DWORD *)(v39 + 264) = 0;
          v44 = (float (**)(__n128))(v39 + 288);
          v41.n128_u32[0] = 0;
LABEL_83:
          *(float *)(v39 + 268) = (*v44)(v41);
        }
        v54 = *(unsigned __int8 *)(v39 + 538);
        if (v54 == 1)
        {
          v57 = *(_QWORD *)(v39 + 560);
          if (!v57 || (v58 = *(float *)(v57 + 8), v58 == 0.0))
            v58 = 0.4;
          *(_QWORD *)(v39 + 280) = EaseQuadOut;
          *(float *)(v39 + 272) = fmaxf(v58, 0.000001);
          *(float *)(v39 + 268) = EaseQuadOut(*(float *)(v39 + 264));
        }
        else if (v54 == 2)
        {
          v55 = *(_QWORD *)(v39 + 560);
          if (!v55 || (v56 = *(float *)(v55 + 12), v56 == 0.0))
            v56 = 0.4;
          *(_QWORD *)(v39 + 288) = EaseQuadIn;
          *(float *)(v39 + 276) = fmaxf(v56, 0.000001);
          *(float *)(v39 + 268) = EaseQuadIn(*(float *)(v39 + 264));
        }
LABEL_64:
        v36 += 2;
        if (v36 == v37)
          return;
        continue;
      }
      break;
    }
    v45 = 1.0;
    v46 = *(float *)&v77;
    if (*(_BYTE *)(v39 + 540) == 2)
    {
      v47 = *(_QWORD *)(v39 + 544);
      v48 = fminf(fmaxf(*(float *)&v77, 0.0), 23.0);
      v49 = (int)v48;
      if ((int)v48 >= 0x17)
        v50 = 23;
      else
        v50 = (int)v48;
      v51 = *(float *)(v47 + 4 * v50);
      if (((*(_QWORD *)(v47 + 96) >> v50) & 1) != 0)
      {
        if (v49 >= 0x16)
          v49 = 22;
        v52 = *(float *)(v47 + 4 * (v49 + 1));
        if (*(_BYTE *)(v47 + 104) || (v53 = 0.0, v51 != 0.0) && v52 != 0.0)
          v53 = v51 + (float)((float)(v52 - v51) * (float)(v48 - (float)v50));
      }
      else
      {
        v53 = *(float *)(v47 + 4 * v50);
      }
      v45 = fmaxf(v53, 0.01);
      *(float *)(v47 + 112) = v45;
    }
    v59 = *(double *)(v39 + 528) + *(double *)(v39 + 232);
    _Q3 = vaddq_f64(*(float64x2_t *)(v39 + 512), *(float64x2_t *)(v39 + 216));
    *(float64x2_t *)(v39 + 128) = _Q3;
    *(double *)(v39 + 144) = v59;
    _D5 = *(_QWORD *)(v40 + 1360);
    __asm { FMLA            D6, D5, V3.D[1] }
    *(float32x2_t *)(v39 + 152) = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(v40 + 1400), *(float64x2_t *)(v40 + 1304), _Q3.f64[0]), *(float64x2_t *)(v40 + 1336), _Q3, 1), *(float64x2_t *)(v40 + 1368), v59), 1.0 / (_D6 + *(double *)(v40 + 1392) * v59)));
    v67 = (int)v46;
    *(float *)(v39 + 160) = v46;
    *(float *)(v39 + 164) = v45;
    if ((int)v46 >= 0x17)
      LOBYTE(v67) = 23;
    *(_BYTE *)(v39 + 172) = v67;
    v68 = v78;
    *(float *)(v39 + 168) = v68;
    v69 = *(_QWORD *)(v39 + 64);
    v75 = 0;
    v70 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v69 + 120))(v69, v40, 0, v39 + 152, &v75);
    v72 = v70;
    if (*(_BYTE *)(v39 + 303))
    {
      if (*(_BYTE *)(v39 + 537))
      {
        v73 = 29;
        if (*(_BYTE *)(v39 + 538))
          goto LABEL_101;
LABEL_104:
        *(_BYTE *)(v39 + 539) = v73;
        goto LABEL_64;
      }
      v74 = 1;
      v73 = 37;
      if (v70 == 37)
      {
LABEL_106:
        if (v74)
          v72 = 37;
        else
          v72 = v73;
        if (v74)
          v38 = 4;
        else
          v38 = 3;
        goto LABEL_63;
      }
    }
    else
    {
      v73 = 30;
      if (!*(_BYTE *)(v39 + 538))
        goto LABEL_104;
LABEL_101:
      v74 = 0;
      if (v70 == 37)
        goto LABEL_106;
    }
    if ((v70 & 0xFE) == 0x12)
      v38 = 3;
    else
      v38 = 2;
LABEL_63:
    md::MuninRoadLabel::updateStateMachineForDisplay(v39, v38, v72, v40, v71);
    goto LABEL_64;
  }
}

void md::MuninRoadLabeler::render(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  uint64_t *v6;
  uint64_t *i;
  float *v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (*(_BYTE *)(a1 + 72))
    v5 = 0;
  else
    v5 = *(_BYTE *)(a1 + 73) == 0;
  v6 = *(uint64_t **)(a1 + 104);
  for (i = *(uint64_t **)(a1 + 112); v6 != i; v6 += 2)
  {
    if (!*(_BYTE *)(*v6 + 538))
      continue;
    v8 = *(float **)(a1 + 8);
    if (v8[384] <= (*(float (**)(_QWORD))(**(_QWORD **)(*v6 + 64) + 256))(*(_QWORD *)(*v6 + 64))
      || v8[382] >= v10
      || v8[385] <= v9
      || v8[383] >= v11)
    {
      continue;
    }
    if (*(_BYTE *)(*v6 + 536))
    {
      if (!v5)
        goto LABEL_6;
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, float))(**(_QWORD **)(*v6 + 64) + 128))(*(_QWORD *)(*v6 + 64), a3, *(float *)(*v6 + 268));
      if (!v5)
      {
LABEL_6:
        v5 = 0;
        continue;
      }
    }
    v12 = *v6;
    if (!*(_BYTE *)(*v6 + 302))
      goto LABEL_25;
    v13 = *(_QWORD *)(v12 + 64);
    if (!v13 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 608))(v13) & 1) == 0)
    {
      v14 = *(unsigned __int8 *)(v12 + 538);
      if (v14 == 1)
      {
        if (*(float *)(v12 + 264) >= 1.0)
          goto LABEL_25;
      }
      else if (v14 != 2 || *(float *)(v12 + 264) <= 0.0)
      {
LABEL_25:
        v5 = 1;
        continue;
      }
    }
    v5 = 0;
    *(_BYTE *)(a1 + 73) = 1;
  }
}

uint64_t md::MuninRoadLabeler::endFrameLayout(uint64_t this, BOOL *a2, BOOL *a3)
{
  *a2 |= *(_BYTE *)(this + 72);
  *a3 |= *(_BYTE *)(this + 73);
  return this;
}

void md::MuninRoadLabeler::clearScene(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t i;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t j;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  md::MuninRoadGraph *v13;
  md::MuninRoadGraphZData *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t k;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t m;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t n;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  if (a2 != 1)
  {
    v3 = *(_QWORD *)(a1 + 192);
    for (i = *(_QWORD *)(a1 + 200); i != v3; i -= 16)
    {
      v5 = *(std::__shared_weak_count **)(i - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    *(_QWORD *)(a1 + 200) = v3;
    v8 = *(_QWORD *)(a1 + 216);
    for (j = *(_QWORD *)(a1 + 224); j != v8; j -= 16)
    {
      v10 = *(std::__shared_weak_count **)(j - 8);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    *(_QWORD *)(a1 + 224) = v8;
    v13 = *(md::MuninRoadGraph **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = 0;
    if (v13)
    {
      md::MuninRoadGraph::~MuninRoadGraph(v13);
      MEMORY[0x1A1AF4E00]();
    }
    v14 = *(md::MuninRoadGraphZData **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    if (v14)
    {
      md::MuninRoadGraphZData::~MuninRoadGraphZData(v14);
      MEMORY[0x1A1AF4E00]();
    }
    if (*(_QWORD *)(a1 + 264))
    {
      v15 = *(_QWORD **)(a1 + 256);
      if (v15)
      {
        do
        {
          v16 = (_QWORD *)*v15;
          operator delete(v15);
          v15 = v16;
        }
        while (v16);
      }
      *(_QWORD *)(a1 + 256) = 0;
      v17 = *(_QWORD *)(a1 + 248);
      if (v17)
      {
        for (k = 0; k != v17; ++k)
          *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * k) = 0;
      }
      *(_QWORD *)(a1 + 264) = 0;
    }
    v19 = *(_QWORD **)(a1 + 168);
    v20 = (_QWORD *)(a1 + 176);
    if (v19 != (_QWORD *)(a1 + 176))
    {
      do
      {
        md::MuninJunctionFeature::clearLabels(*(md::MuninJunctionFeature **)(v19[4] + 56), *(md::MuninJunctionFeature **)(v19[4] + 64));
        v26 = (_QWORD *)v19[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v19[2];
            v28 = *v27 == (_QWORD)v19;
            v19 = v27;
          }
          while (!v28);
        }
        v19 = v27;
      }
      while (v27 != v20);
    }
    std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 176));
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 168) = v20;
    md::MuninRoadLabelPool::clear(*(md::MuninRoadLabelPool **)(a1 + 32));
    v21 = *(_QWORD *)(a1 + 80);
    for (m = *(_QWORD *)(a1 + 88); m != v21; m -= 16)
    {
      v23 = *(std::__shared_weak_count **)(m - 8);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    *(_QWORD *)(a1 + 88) = v21;
    v29 = *(_QWORD *)(a1 + 104);
    for (n = *(_QWORD *)(a1 + 112); n != v29; n -= 16)
    {
      v31 = *(std::__shared_weak_count **)(n - 8);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
    *(_QWORD *)(a1 + 112) = v29;
  }
}

uint64_t md::Labeler::checkNeedsOcclusionTests(md::Labeler *this, const md::LayoutContext *a2)
{
  return 0;
}

uint64_t md::MuninRoadLabeler::resetOcclusionQueries(uint64_t this)
{
  _QWORD *v1;
  _QWORD *i;
  _BYTE *v3;

  v1 = *(_QWORD **)(this + 80);
  for (i = *(_QWORD **)(this + 88); v1 != i; v1 += 2)
  {
    v3 = (_BYTE *)*v1;
    v3[352] = 1;
    if (v3[493] != 2)
      v3[356] = 0;
  }
  return this;
}

void md::MuninRoadLabeler::updateOcclusionQueries(md::MuninRoadLabeler *this)
{
  uint64_t *v1;
  uint64_t *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  unsigned __int8 v8;
  double v9;
  float v10;
  _QWORD *v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t *v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  uint64_t v58;

  v1 = (uint64_t *)*((_QWORD *)this + 10);
  v2 = (uint64_t *)*((_QWORD *)this + 11);
  if (v1 != v2)
  {
    while (1)
    {
      v5 = *v1;
      if (!*(_BYTE *)(*v1 + 354) || *(_BYTE *)(v5 + 355))
        goto LABEL_6;
      v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 360);
      v7 = (__int128 *)(v5 + 328);
      if (!*(_QWORD *)(v5 + 328))
      {
        v11 = operator new(0x138uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E42DB208;
        v12.n128_f64[0] = md::OcclusionQuery::OcclusionQuery((uint64_t)(v11 + 3), 2, 19);
        v13 = *(std::__shared_weak_count **)(v5 + 336);
        *(_QWORD *)(v5 + 328) = v14;
        *(_QWORD *)(v5 + 336) = v11;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      v8 = atomic_load((unsigned __int8 *)(*(_QWORD *)v7 + 286));
      if ((v8 & 1) == 0)
        goto LABEL_6;
      *(_BYTE *)(v5 + 352) = 0;
      *(_BYTE *)(v5 + 355) = 1;
      v9 = *(double *)(v5 + 376);
      v10 = *(float *)(v5 + 256);
      if (v10 == 0.0 || !*(_BYTE *)(v5 + 252))
      {
        v57 = *(float64x2_t *)(v5 + 360);
      }
      else
      {
        v57 = vaddq_f64(*(float64x2_t *)(v5 + 360), vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v5 + 240), -v10)));
        v9 = v9 - (float)(*(float *)(v5 + 248) * v10);
      }
      v17 = *(double *)(v5 + 232);
      v56 = *(float64x2_t *)(v5 + 216);
      v18 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 64) + 248))(*(_QWORD *)(v5 + 64));
      v19 = v18[2];
      if (v19 >= *v18 && (v20 = v18[3], v21 = v18[1], v20 >= v21))
      {
        v26 = *(float *)(v5 + 432);
        v25 = *v18 - v26;
        v27 = *(float *)(v5 + 436);
        v22 = v21 - v27;
        v24 = v19 - v26;
        v23 = v20 - v27;
      }
      else
      {
        v22 = 3.4028e38;
        v23 = -3.4028e38;
        v24 = -3.4028e38;
        v25 = 3.4028e38;
      }
      v28 = **(_QWORD **)(v5 + 328);
      *(_BYTE *)v28 = 5;
      *(_BYTE *)(v28 + 237) = 2;
      v30 = *(float64x2_t **)(v28 + 80);
      v29 = *(float64x2_t **)(v28 + 88);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3) > 1)
        goto LABEL_25;
      if (v29 == v30)
        break;
LABEL_27:
      *v30 = vaddq_f64(v56, v57);
      v30[1].f64[0] = v17 + v9;
      *(float *)(v28 + 200) = v25;
      *(float *)(v28 + 204) = v22;
      *(float *)(v28 + 208) = v24;
      *(float *)(v28 + 212) = v23;
      *(_BYTE *)(v28 + 239) = 8;
      if (*(unsigned __int8 *)(v28 + 228) == *(unsigned __int8 *)(v5 + 252))
      {
        if (*(_BYTE *)(v28 + 228))
        {
          *(_DWORD *)(v28 + 216) = *(_DWORD *)(v5 + 240);
          *(_DWORD *)(v28 + 220) = *(_DWORD *)(v5 + 244);
          *(_DWORD *)(v28 + 224) = *(_DWORD *)(v5 + 248);
        }
      }
      else if (*(_BYTE *)(v28 + 228))
      {
        *(_BYTE *)(v28 + 228) = 0;
      }
      else
      {
        v37 = *(_QWORD *)(v5 + 240);
        *(_DWORD *)(v28 + 224) = *(_DWORD *)(v5 + 248);
        *(_QWORD *)(v28 + 216) = v37;
        *(_BYTE *)(v28 + 228) = 1;
      }
      *(_BYTE *)(v28 + 240) = 4;
      v38 = *(_QWORD *)(v28 + 8);
      v4 = *(char **)(v28 + 16);
      v39 = (uint64_t)&v4[-v38];
      if ((unint64_t)&v4[-v38] < 0x41)
      {
        if (v39 == 64)
          goto LABEL_5;
        v40 = *(_QWORD *)(v28 + 32);
        if (v40 > 7)
        {
          v44 = *(char **)(v28 + 8);
        }
        else
        {
          v58 = *(_QWORD *)(v28 + 24);
          v41 = 1 << -(char)__clz(v40 + 1);
          if (v41 <= 8)
            v42 = 8;
          else
            v42 = v41;
          v43 = (char *)malloc_type_malloc(8 * v42, 0x100004090D0E795uLL);
          v44 = v43;
          v45 = *(uint64_t **)(v28 + 8);
          v46 = *(char **)(v28 + 16);
          if (v45 != (uint64_t *)v46)
          {
            v47 = v46 - (char *)v45 - 8;
            if (v47 < 0x18)
            {
              v48 = v43;
              goto LABEL_55;
            }
            v48 = v43;
            if ((unint64_t)(v43 - (char *)v45) < 0x20)
            {
              do
              {
LABEL_55:
                v55 = *v45++;
                *(_QWORD *)v48 = v55;
                v48 += 8;
              }
              while (v45 != (uint64_t *)v46);
            }
            else
            {
              v49 = (v47 >> 3) + 1;
              v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v43[v50];
              v51 = (__int128 *)(v45 + 2);
              v52 = v43 + 16;
              v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v54 = *v51;
                *(v52 - 1) = *(v51 - 1);
                *v52 = v54;
                v51 += 2;
                v52 += 2;
                v53 -= 4;
              }
              while (v53);
              if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v45 = (uint64_t *)((char *)v45 + v50);
                goto LABEL_55;
              }
            }
          }
          if (v38 != v58)
            free(*(void **)(v28 + 8));
          *(_QWORD *)(v28 + 8) = v44;
          v4 = &v44[8 * (v39 >> 3)];
          *(_QWORD *)(v28 + 32) = v42;
        }
        if (v4 != v44 + 64)
        {
          memset_pattern16(v4, &unk_19FFB6350, ((v44 - v4 + 56) & 0xFFFFFFFFFFFFFFF8) + 8);
          v4 = v44 + 64;
        }
        goto LABEL_4;
      }
      v4 = (char *)(v38 + 64);
LABEL_4:
      *(_QWORD *)(v28 + 16) = v4;
LABEL_5:
      md::OcclusionManager::addQuery(v6, v7);
LABEL_6:
      v1 += 2;
      if (v1 == v2)
        return;
    }
    v30 = *(float64x2_t **)(v28 + 88);
    if (!*(_QWORD *)(v28 + 104))
    {
      v31 = *(float64x2_t **)(v28 + 96);
      v32 = (float64x2_t *)malloc_type_malloc(0x30uLL, 0x1000040504FFAC1uLL);
      v30 = v32;
      v33 = *(float64x2_t **)(v28 + 80);
      v34 = *(float64x2_t **)(v28 + 88);
      if (v33 != v34)
      {
        v35 = v32;
        do
        {
          v36 = *v33;
          v35[1].f64[0] = v33[1].f64[0];
          *v35 = v36;
          v35 = (float64x2_t *)((char *)v35 + 24);
          v33 = (float64x2_t *)((char *)v33 + 24);
        }
        while (v33 != v34);
      }
      if (v29 != v31)
        free(*(void **)(v28 + 80));
      *(_QWORD *)(v28 + 80) = v30;
      *(_QWORD *)(v28 + 104) = 2;
    }
LABEL_25:
    *(_QWORD *)(v28 + 88) = (char *)v30 + 24;
    goto LABEL_27;
  }
}

void sub_19F887F9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::Labeler::labelMarkerForSelectionAtPixel(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::MuninRoadLabeler::getLabelMarkers(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  float v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *p_shared_weak_owners;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  _QWORD *v48;

  v2 = (_QWORD *)a1[13];
  v3 = (_QWORD *)a1[14];
  if (v2 != v3)
  {
    v6 = a2 + 3;
    while (1)
    {
      v7 = **(_QWORD ***)(*v2 + 48);
      v8 = (_QWORD *)operator new();
      v9 = a1[1];
      v11 = *(std::__shared_weak_count **)(v9 + 8);
      v10 = *(std::__shared_weak_count **)(v9 + 16);
      if (!v10 || (v12 = std::__shared_weak_count::lock(v10), (v43 = v12) == 0))
      {
        std::__throw_bad_weak_ptr[abi:nn180100]();
        __break(1u);
        return;
      }
      v13 = v12;
      v14 = *(float *)(a1[1] + 176);
      v44 = v11;
      v45 = v12;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      md::LabelMarker::LabelMarker((uint64_t)v8, 2, 19, &v44, v14);
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      *v8 = &off_1E4299200;
      v8[37] = 0;
      v8[38] = 0;
      v8[36] = v7;
      v18 = (std::__shared_weak_count *)v7[1];
      if (v18)
      {
        v19 = std::__shared_weak_count::lock(v18);
        v8[38] = v19;
        if (v19)
          v8[37] = *v7;
      }
      v8[39] = *v2;
      v20 = v2[1];
      v8[40] = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v24 = a2[1];
      v23 = a2[2];
      if (v24 < v23)
      {
        if (v24)
          std::shared_ptr<md::LabelMarker>::shared_ptr[abi:nn180100]<md::MuninRoadLabelMarker,void>((_QWORD *)a2[1], (uint64_t)v8);
        p_shared_weak_owners = (uint64_t *)(v24 + 16);
        a2[1] = p_shared_weak_owners;
        goto LABEL_40;
      }
      v26 = (uint64_t)(v24 - *a2) >> 4;
      if ((unint64_t)(v26 + 1) >> 60)
        abort();
      v27 = v23 - *a2;
      v28 = v27 >> 3;
      if (v27 >> 3 <= (unint64_t)(v26 + 1))
        v28 = v26 + 1;
      v29 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v28;
      v48 = v6;
      if (v29)
      {
        v30 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, 16 * v29, 8);
        v31 = (std::__shared_weak_count *)(v30 + 16 * v26);
        v44 = (std::__shared_weak_count *)v30;
        v45 = v31;
        v29 = v30 + 16 * v29;
        v46 = v31;
        v47 = v29;
        if (v30)
          v31 = (std::__shared_weak_count *)std::shared_ptr<md::LabelMarker>::shared_ptr[abi:nn180100]<md::MuninRoadLabelMarker,void>(v31, (uint64_t)v8);
      }
      else
      {
        v31 = (std::__shared_weak_count *)(16 * v26);
      }
      v33 = (std::__shared_weak_count *)*a2;
      v32 = (std::__shared_weak_count *)a2[1];
      if (v32 == (std::__shared_weak_count *)*a2)
      {
        v36 = (std::__shared_weak_count *)a2[1];
        v34 = &v31->__vftable;
      }
      else
      {
        v34 = &v31->__vftable;
        do
        {
          v35 = *(_OWORD *)&v32[-1].__shared_owners_;
          v32 = (std::__shared_weak_count *)((char *)v32 - 16);
          *((_OWORD *)v34 - 1) = v35;
          v34 -= 2;
          v32->__vftable = 0;
          v32->__shared_owners_ = 0;
        }
        while (v32 != v33);
        v36 = (std::__shared_weak_count *)*a2;
        v32 = (std::__shared_weak_count *)a2[1];
      }
      p_shared_weak_owners = &v31->__shared_weak_owners_;
      *a2 = v34;
      a2[1] = &v31->__shared_weak_owners_;
      v37 = a2[2];
      a2[2] = v29;
      v47 = v37;
      v44 = v36;
      v45 = v36;
      if (v32 != v36)
        break;
      if (v32)
        goto LABEL_39;
LABEL_40:
      a2[1] = p_shared_weak_owners;
      if (v43)
      {
        v38 = (unint64_t *)&v43->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v2 += 2;
      if (v2 == v3)
        return;
    }
    do
    {
      v46 = (std::__shared_weak_count *)((char *)v32 - 16);
      shared_weak_owners = (std::__shared_weak_count *)v32[-1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        v41 = (unint64_t *)&shared_weak_owners->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
          std::__shared_weak_count::__release_weak(shared_weak_owners);
        }
      }
      v32 = v46;
    }
    while (v46 != v36);
    v32 = v44;
    if (!v44)
      goto LABEL_40;
LABEL_39:
    (*(void (**)(_QWORD, std::__shared_weak_count *, uint64_t))(*(_QWORD *)*v48 + 40))(*v48, v32, v47 - (_QWORD)v32);
    goto LABEL_40;
  }
}

void sub_19F8882FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::__split_buffer<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator> &>::~__split_buffer((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F888330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C4014FF10CDLL);
  _Unwind_Resume(a1);
}

uint64_t md::Labeler::isLabelHitAtPixel()
{
  return 0;
}

_QWORD *std::shared_ptr<md::LabelMarker>::shared_ptr[abi:nn180100]<md::MuninRoadLabelMarker,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6FB0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (a2)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 16);
    if (v6)
    {
      if (v6->__shared_owners_ != -1)
        return a1;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      *(_QWORD *)(a2 + 8) = a2;
      *(_QWORD *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
    }
    else
    {
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      *(_QWORD *)(a2 + 8) = a2;
      *(_QWORD *)(a2 + 16) = v4;
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_19F888464(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void std::__shared_ptr_pointer<md::MuninRoadLabelMarker *,std::shared_ptr<md::LabelMarker>::__shared_ptr_default_delete<md::LabelMarker,md::MuninRoadLabelMarker>,std::allocator<md::MuninRoadLabelMarker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::MuninRoadLabelMarker *,std::shared_ptr<md::LabelMarker>::__shared_ptr_default_delete<md::LabelMarker,md::MuninRoadLabelMarker>,std::allocator<md::MuninRoadLabelMarker>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::MuninRoadGraph::~MuninRoadGraph(md::MuninRoadGraph *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (_QWORD *)*((_QWORD *)this + 25);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 20);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 15);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v10)
    operator delete(v10);
  v11 = *((_QWORD *)this + 10);
  if (v11)
  {
    v12 = *((_QWORD *)this + 11);
    v13 = (void *)*((_QWORD *)this + 10);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v11;
    operator delete(v13);
  }
  v17 = (void *)*((_QWORD *)this + 7);
  if (v17)
  {
    *((_QWORD *)this + 8) = v17;
    operator delete(v17);
  }
  v18 = (_QWORD *)*((_QWORD *)this + 4);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
    operator delete(v20);
  v21 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v21)
  {
    geo::Pool<md::ComposedRoadEdge>::disposeElements(v21);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v21 + 8));
    MEMORY[0x1A1AF4E00](v21, 0x1020C407A7143E5);
  }
  v22 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v22)
  {
    geo::Pool<md::CoalescedJunction>::disposeElements(v22);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v22 + 8));
    MEMORY[0x1A1AF4E00](v22, 0x1020C407A7143E5);
  }
}

void sub_19F888718(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void md::MuninRoadGraphZData::~MuninRoadGraphZData(md::MuninRoadGraphZData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;

  v2 = (_QWORD *)*((_QWORD *)this + 56);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v4)
    operator delete(v4);
  std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::~__hash_table((uint64_t)this + 392);
  v5 = (_QWORD *)*((_QWORD *)this + 46);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 41);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 36);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = (void *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v13)
    operator delete(v13);
  v14 = (void *)*((_QWORD *)this + 31);
  if (v14)
  {
    *((_QWORD *)this + 32) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 28);
  if (v15)
  {
    *((_QWORD *)this + 29) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 25);
  if (v16)
  {
    *((_QWORD *)this + 26) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 22);
  if (v17)
  {
    *((_QWORD *)this + 23) = v17;
    operator delete(v17);
  }
  v18 = (_QWORD *)*((_QWORD *)this + 17);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v20)
    operator delete(v20);
  v21 = (_QWORD *)*((_QWORD *)this + 12);
  if (v21)
  {
    do
    {
      v22 = (_QWORD *)*v21;
      operator delete(v21);
      v21 = v22;
    }
    while (v22);
  }
  v23 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v23)
    operator delete(v23);
  std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::~__hash_table((uint64_t)this + 40);
}

uint64_t std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[13];
      if (v6)
      {
        v2[14] = v6;
        operator delete(v6);
      }
      v7 = (void *)v2[10];
      if (v7)
      {
        v2[11] = v7;
        operator delete(v7);
      }
      v8 = (void *)v2[7];
      if (v8)
      {
        v2[8] = v8;
        operator delete(v8);
      }
      v9 = (void *)v2[4];
      if (v9)
      {
        v2[5] = v9;
        operator delete(v9);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void geo::Pool<md::ComposedRoadEdge>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  v32 = &v33;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v33;
      v5 = &v33;
      if (v33)
      {
        v6 = v33;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v32)
        {
          v32 = (uint64_t **)*v32;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v33, v8);
        v3 = ++v34;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_53;
    goto LABEL_55;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = v16 + 152 * v15;
        v18 = v33;
        if (!v33)
          goto LABEL_38;
        v19 = &v33;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v33)
          goto LABEL_38;
        if (v22 < v17)
          v20 = (uint64_t *)v21;
        if (v17 < v20[4])
        {
LABEL_38:
          v24 = *(_QWORD **)(v17 + 64);
          if (v24)
          {
            do
            {
              v25 = (_QWORD *)*v24;
              operator delete(v24);
              v24 = v25;
            }
            while (v25);
          }
          v26 = *(void **)(v17 + 48);
          *(_QWORD *)(v17 + 48) = 0;
          if (v26)
            operator delete(v26);
          v27 = *(void **)(v17 + 24);
          if (v27)
          {
            *(_QWORD *)(v17 + 32) = v27;
            operator delete(v27);
          }
          if (*(_QWORD *)v17)
            operator delete(*(void **)v17);
        }
        ++v15;
        v14 = *(_QWORD *)(a1 + 24);
      }
      while (v15 < v14);
    }
    v28 = (_QWORD *)v10[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (_QWORD *)v10[2];
        v12 = *v29 == (_QWORD)v10;
        v10 = v29;
      }
      while (!v12);
    }
    v10 = v29;
  }
  while (v29 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_55:
      free((void *)v10[4]);
      v30 = (_QWORD *)v10[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v10[2];
          v12 = *v31 == (_QWORD)v10;
          v10 = v31;
        }
        while (!v12);
      }
      v10 = v31;
    }
    while (v31 != v11);
  }
LABEL_53:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v33);
}

void sub_19F888BC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void geo::Pool<md::CoalescedJunction>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 96 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F888E40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::MuninRoadLabeler::updateLocationInformation(md::MuninRoadLabeler *this, const md::MuninRoadLabelingContext *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v9;
  long double v15;
  long double v16;
  double v17;
  double v18;
  long double v19;
  long double v20;
  double v21;
  long double v22;
  double v23;
  _QWORD *v24;
  double v25;
  double v26;
  double v27;
  __n128 **v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  double v32;
  __n128 v33;
  double v34;
  double v35;
  BOOL v36;
  void **v39;
  void **i;
  float v41;
  float v42;
  double v43;
  double v44;
  __n128 *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  float *v49;
  float v50;
  float v51;
  char *v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  __n128 *v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  double v66;
  _QWORD *v67;
  __n128 **v68;
  void *v69;
  int64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  double v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  float *v87;
  double v88;
  unint64_t v89;
  uint64_t v90;
  float *v91;
  void *v92;
  float v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  void **v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  int v107;
  double v108;
  void **v109;
  uint64_t v110;
  float v111;
  double *v112;
  double *v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  double v124;
  long double v125;
  long double v126;
  long double v127;
  long double v128;
  long double v129;
  long double v130;
  long double v131;
  double v132;
  long double v133;
  double v134;
  _OWORD *v135;
  unint64_t v136;
  char *v137;
  __int128 v138;
  __n128 v139;
  void **v140;
  uint64_t v141;
  void **v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  __n128 *v147;
  unint64_t v148;
  uint64_t v149;
  void **v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  const void **v158;
  unsigned __int8 *v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  BOOL v165;
  _BOOL4 v166;
  double *v167;
  double *v168;
  _QWORD *v169;
  float v170;
  char *v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  float v176;
  uint64_t v177;
  float v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unsigned __int8 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  void *v187;
  uint64_t *v188;
  void *v189;
  void *v190;
  _QWORD *v191;
  _QWORD *v192;
  double v193;
  double v194;
  uint64_t v195;
  float v196;
  void **v198;
  long double v201;
  long double v202;
  double v203;
  double v204;
  double v205;
  long double v206;
  long double v207;
  double v208;
  long double v209;
  __n128 v210;
  void **v211;
  void **v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  void *v221;
  int v222;
  double v223;
  double v224;
  BOOL v225;
  void **v227;
  void **v228;
  double *v229;
  double v231;
  int v233;
  void *v234;
  __n128 *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  void **v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  __n128 *v254;
  __n128 *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t **v258;
  uint64_t **v259;
  uint64_t *v260;
  unint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  double v269;
  double v270;
  uint64_t *v271;
  uint64_t **v272;
  uint64_t *v273;
  uint64_t **v274;
  unint64_t v275;
  _QWORD *v276;
  std::__shared_weak_count *v277;
  int8x8_t *v278;
  int8x8_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint8x8_t v283;
  unint64_t v284;
  double **v285;
  double *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t **v290;
  unint64_t *v291;
  unint64_t v292;
  double v293;
  long double v294;
  long double v295;
  double v296;
  long double v297;
  double v298;
  __double2 v299;
  double v300;
  double v301;
  __double2 v302;
  _QWORD *v303;
  _QWORD *v304;
  void *v305;
  _QWORD *v306;
  _QWORD *v307;
  void *v308;
  _QWORD *v309;
  _QWORD *v310;
  void *v311;
  float v312;
  _QWORD *v313;
  _QWORD *v314;
  void *v315;
  uint64_t *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t *v319;
  _BOOL4 v320;
  double v321;
  void *v322;
  size_t v323;
  int64_t v324;
  char *v325;
  char *v326;
  unint64_t v327;
  void **v328;
  void **v329;
  unint64_t v330;
  unint64_t v331;
  double v332;
  char *v333;
  double v334;
  unint64_t v335;
  unint64_t v336;
  float64x2_t *v337;
  unint64_t v338;
  double v339;
  float64x2_t v340;
  unint64_t v341;
  double *v342;
  void **v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  double v348;
  double v349;
  double v350;
  double v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  double *v355;
  double v356;
  uint64_t v357;
  double v358;
  char *v359;
  double v360;
  double v361;
  long double v362;
  long double v363;
  double v364;
  long double v365;
  double v366;
  __double2 v367;
  double v368;
  double v369;
  __double2 v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t **v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t *v379;
  _QWORD *v380;
  uint64_t *v381;
  double *v382;
  double v383;
  long double v384;
  long double v385;
  long double v386;
  double v387;
  double v388;
  double v389;
  __double2 v390;
  long double v391;
  long double v392;
  double v393;
  uint64_t v394;
  double v395;
  unint64_t v396;
  __n128 *v397;
  uint64_t **v398;
  uint64_t v399;
  uint64_t v400;
  __n128 v401;
  double v402;
  double v403;
  double v404;
  double v405;
  __n128 *v406;
  __n128 *v407;
  uint64_t *v408;
  unint64_t v409;
  double v410;
  double v411;
  BOOL v412;
  unint64_t v413;
  unint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  char *v418;
  unint64_t v419;
  char v420;
  char v421;
  unsigned __int8 **v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  size_t v427;
  uint64_t v428;
  const void **v429;
  unsigned __int8 *v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  size_t v434;
  uint64_t v435;
  const void **v436;
  unsigned __int8 *v437;
  int v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t **v448;
  unint64_t v449;
  uint64_t *v450;
  _QWORD *v451;
  uint64_t *v452;
  uint64_t *v453;
  _QWORD *v454;
  uint64_t *v455;
  uint64_t *v456;
  uint64_t *v457;
  __int128 v458;
  uint64_t **v459;
  uint64_t *v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  char *v469;
  uint64_t *v470;
  _QWORD *v471;
  uint64_t *v472;
  uint64_t *v473;
  uint64_t *v474;
  __int128 v475;
  uint64_t *v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t *v480;
  uint64_t **v481;
  uint64_t **v482;
  unint64_t v483;
  uint64_t *v484;
  uint64_t *v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  uint64_t *v492;
  uint64_t **v493;
  uint64_t **v494;
  unint64_t v495;
  uint64_t *v496;
  uint64_t *v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  char *v504;
  double v505;
  char *v506;
  uint64_t v507;
  uint64_t v508;
  _BYTE *v509;
  __n128 *v510;
  __n128 *v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  __n128 *v518;
  __n128 *v519;
  __n128 *v520;
  unint64_t v521;
  unsigned __int8 *v522;
  int v523;
  unsigned __int8 v524;
  __n128 *v525;
  unint64_t v526;
  unint64_t *v527;
  unint64_t v528;
  md::LabelBase **v529;
  md::LabelBase **v530;
  uint64_t v531;
  uint64_t **v532;
  uint64_t *v533;
  md::LabelBase *v534;
  uint64_t *v535;
  unint64_t v536;
  md::LabelBase *v537;
  uint64_t **v538;
  uint64_t **v539;
  unint64_t v540;
  uint64_t *v541;
  uint64_t *v542;
  md::LabelBase *v543;
  unint64_t *v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  void *v548;
  uint64_t *v549;
  std::__shared_weak_count *v550;
  md::LabelDedupingGroup *v551;
  unint64_t *v552;
  unint64_t v553;
  unint64_t *v554;
  _QWORD *v555;
  unint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  unint64_t *v560;
  unint64_t v561;
  uint64_t *v562;
  uint64_t v563;
  __n128 *v564;
  __n128 *v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  _QWORD *v569;
  double v570;
  void *v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  void **v575;
  void **v576;
  void *v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  double v587;
  _QWORD *v588;
  _QWORD *v589;
  _QWORD *v590;
  uint64_t v591;
  unint64_t v592;
  double v593;
  uint64_t v594;
  __n128 *v595;
  void **v596;
  double v597;
  __n128 *v598;
  void **v599;
  double v600;
  _QWORD *v601;
  double v602;
  double v603;
  double v604;
  uint64_t v605;
  char *v606;
  __int128 v607;
  __int128 v608;
  uint64_t **v609;
  float *v610;
  void *v611;
  __n128 *v612;
  uint64_t v613;
  unsigned __int8 v614;
  __int128 v615;
  __int128 v616;
  uint64_t **v617;
  std::__shared_weak_count *v618;
  double v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t **v622;
  double v623;
  uint64_t v624;
  uint64_t **v625;
  double v626;
  _QWORD *v627;
  void *__p;
  uint64_t *v629;
  _OWORD *v630;
  void *v631;
  double v632;
  double v633;
  void **v634;
  void *v635;
  void **v636;
  uint64_t v637;
  void **v638;
  void *v639;
  _QWORD *v640;
  _QWORD *v641;
  void *v642;
  __n128 *v643;
  __n128 *v644;
  double v645;
  void *v646;
  _QWORD *v647;
  _QWORD *v648;
  float v649;
  uint64_t v650;

  v2 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v5 = v2;
  v650 = *MEMORY[0x1E0C80C00];
  v6 = v2[19];
  v591 = v2[18];
  v7 = v2[16];
  *(double *)&v631 = 0.0;
  v632 = 0.0;
  v633 = 0.0;
  v584 = v6;
  v585 = v7;
  _Q2 = *(_OWORD *)(v7 + 24);
  v9 = &v635;
  v635 = &off_1E42C7478;
  v638 = &v635;
  v586 = 0x401921FB54442D18;
  v607 = _Q2;
  __asm { FMLA            D0, D1, V2.D[1]; __x }
  v15 = exp(_D0);
  v16 = atan(v15) * 114.591559 + -90.0;
  v602 = cos(v16 * 0.034906585);
  v17 = cos(v16 * 0.0698131701);
  v18 = cos(v16 * 0.104719755);
  v19 = v16 * 0.00872664626;
  v20 = tan(v19 + 0.78103484);
  v21 = log(v20);
  v22 = tan(v19 + 0.789761487);
  v23 = log(v22);
  v24 = (_QWORD *)v5[24];
  v589 = v4;
  v590 = (_QWORD *)v5[25];
  v588 = v5;
  if (v24 == v590)
  {
    v86 = 4;
  }
  else
  {
    v25 = *(double *)&v607;
    v587 = fabs((v23 - v21) * 0.159154943) / (v602 * -559.82 + 111132.92 + v17 * 1.175 + v18 * -0.0023);
    v26 = *(double *)&v607 - v587 * 20.0;
    v27 = v587 * 20.0 + *(double *)&v607;
    v597 = v587 * 20.0 + *((double *)&v607 + 1);
    v600 = *((double *)&v607 + 1) - v587 * 20.0;
    v28 = &v644;
    do
    {
      v29 = *v24;
      v30 = 1 << *(_BYTE *)(*v24 + 169);
      *(double *)&v31 = (double)v30;
      v32 = 1.0 / (double)v30;
      v33.n128_u64[1] = (int)HIDWORD(COERCE_UNSIGNED_INT64(1.0));
      v33.n128_f64[0] = v32 * (double)*(int *)(*v24 + 176);
      v34 = v32 * (double)(v30 + ~*(_DWORD *)(*v24 + 172));
      v36 = v33.n128_f64[0] + v32 <= v26;
      v35 = v34 + v32;
      v36 = !v36 && v33.n128_f64[0] < v27;
      if (v36 && v35 > v600 && v34 < v597)
      {
        v39 = *(void ***)(v29 + 752);
        i = *(void ***)(v29 + 760);
        if (v39 != i)
        {
          v41 = (v25 - v33.n128_f64[0]) * *(double *)&v31;
          v42 = (*((double *)&v607 + 1) - v34) * *(double *)&v31;
          v43 = v587 * *(double *)&v31 * (v587 * *(double *)&v31);
          v44 = v43 * 400.0;
          v33.n128_u64[0] = 1.0;
          v603 = 1.0 / v43;
          do
          {
            v45 = (__n128 *)*v39;
            *(_QWORD *)&v31 = *((_QWORD *)*v39 + 8);
            if (*(double *)&v31 > v26)
            {
              *(_QWORD *)&v31 = v45[3].n128_u64[0];
              if (*(double *)&v31 < v27)
              {
                *(_QWORD *)&v31 = v45[4].n128_u64[1];
                v33.n128_f64[0] = *((double *)&v607 + 1) - v587 * 20.0;
                if (*(double *)&v31 > v600)
                {
                  *(_QWORD *)&v31 = v45[3].n128_u64[1];
                  v33.n128_f64[0] = v587 * 20.0 + *((double *)&v607 + 1);
                  if (*(double *)&v31 < v597)
                  {
                    if (!v638
                      || (v642 = *v39,
                          v46 = (*((uint64_t (**)(void **, void **))*v638 + 6))(v638, &v642),
                          v25 = *(double *)&v607,
                          v46))
                    {
                      v47 = v45->n128_u64[0];
                      if (*(_DWORD *)(v45->n128_u64[0] + 100))
                      {
                        v48 = 0;
                        v595 = v45;
                        v596 = i;
                        v592 = v45->n128_u64[0];
                        do
                        {
                          __p = 0;
                          v49 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)v47, v48, &__p);
                          if ((unint64_t)__p < 2)
                          {
                            LODWORD(v31) = 0;
                            v54 = 3.4028e38;
                          }
                          else
                          {
                            v51 = *v49;
                            v50 = v49[1];
                            v52 = (char *)__p - 1;
                            v53 = v49 + 3;
                            LODWORD(v31) = 0;
                            v54 = 3.4028e38;
                            do
                            {
                              v56 = *(v53 - 1);
                              v57 = *v53;
                              v58 = v56 - v51;
                              v59 = *v53 - v50;
                              v60 = (float)(v58 * v58) + (float)(v59 * v59);
                              v61 = 0.0;
                              if (v60 > 1.0e-15)
                                v61 = fminf(fmaxf((float)((float)((float)(v41 - v51) * v58) + (float)((float)(v42 - v50) * v59))/ v60, 0.0), 1.0);
                              v55 = (float)((float)(v41 - (float)(v51 + (float)(v61 * v58)))
                                          * (float)(v41 - (float)(v51 + (float)(v61 * v58))))
                                  + (float)((float)(v42 - (float)(v50 + (float)(v61 * v59)))
                                          * (float)(v42 - (float)(v50 + (float)(v61 * v59))));
                              if (v55 < v54)
                                *(float *)&v31 = v61;
                              v54 = fminf(v55, v54);
                              v53 += 2;
                              v50 = v57;
                              v51 = v56;
                              --v52;
                            }
                            while (v52);
                          }
                          v33.n128_f64[0] = v54;
                          v25 = *(double *)&v607;
                          if (v44 > v33.n128_f64[0])
                          {
                            v63 = (void *)*v24;
                            v62 = (__n128 *)v24[1];
                            if (v62)
                            {
                              v64 = &v62->n128_u64[1];
                              do
                                v65 = __ldxr(v64);
                              while (__stxr(v65 + 1, v64));
                            }
                            v642 = v63;
                            v643 = v62;
                            v66 = v632;
                            v644 = v45;
                            v33.n128_f64[0] = v33.n128_f64[0] * v603;
                            v33.n128_f32[0] = v33.n128_f64[0];
                            v645 = COERCE_DOUBLE(__PAIR64__(v31, v33.n128_u32[0]));
                            if (*(_QWORD *)&v632 >= *(_QWORD *)&v633)
                            {
                              v68 = v28;
                              v69 = v631;
                              v70 = (uint64_t)(*(_QWORD *)&v632 - (_QWORD)v631) >> 5;
                              v71 = v70 + 1;
                              if ((unint64_t)(v70 + 1) >> 59)
                                abort();
                              v72 = v24;
                              v73 = *(_QWORD *)&v633 - (_QWORD)v631;
                              if ((uint64_t)(*(_QWORD *)&v633 - (_QWORD)v631) >> 4 > v71)
                                v71 = v73 >> 4;
                              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0)
                                v74 = 0x7FFFFFFFFFFFFFFLL;
                              else
                                v74 = v71;
                              if (v74)
                              {
                                if (v74 >> 59)
                                  goto LABEL_737;
                                v75 = (char *)operator new(32 * v74);
                                v25 = *(double *)&v607;
                              }
                              else
                              {
                                v75 = 0;
                              }
                              v76 = &v75[32 * v70];
                              v77 = &v75[32 * v74];
                              *(_QWORD *)v76 = v63;
                              *((_QWORD *)v76 + 1) = v62;
                              v643 = 0;
                              v642 = 0;
                              v28 = v68;
                              v31 = *(_OWORD *)v68;
                              *((_OWORD *)v76 + 1) = *(_OWORD *)v68;
                              v67 = v76 + 32;
                              if (*(void **)&v66 == v69)
                              {
                                v631 = v76;
                                *(_QWORD *)&v632 = v76 + 32;
                                *(_QWORD *)&v633 = &v75[32 * v74];
                                v24 = v72;
                                i = v596;
                                v47 = v592;
                              }
                              else
                              {
                                v24 = v72;
                                v47 = v592;
                                do
                                {
                                  v78 = *(_OWORD *)(*(_QWORD *)&v66 - 32);
                                  *(_QWORD *)&v66 -= 32;
                                  *((_OWORD *)v76 - 2) = v78;
                                  v76 -= 32;
                                  **(_QWORD **)&v66 = 0;
                                  *(_QWORD *)(*(_QWORD *)&v66 + 8) = 0;
                                  v31 = *(_OWORD *)(*(_QWORD *)&v66 + 16);
                                  *((_OWORD *)v76 + 1) = v31;
                                }
                                while (*(void **)&v66 != v69);
                                v66 = *(double *)&v631;
                                v79 = v632;
                                v631 = v76;
                                v632 = *(double *)&v67;
                                v633 = *(double *)&v77;
                                for (i = v596; *(_QWORD *)&v79 != *(_QWORD *)&v66; *(_QWORD *)&v79 -= 32)
                                {
                                  v80 = *(std::__shared_weak_count **)(*(_QWORD *)&v79 - 24);
                                  if (v80)
                                  {
                                    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                                    do
                                      v82 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v82 - 1, p_shared_owners));
                                    if (!v82)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                                      std::__shared_weak_count::__release_weak(v80);
                                      v25 = *(double *)&v607;
                                    }
                                  }
                                }
                              }
                              v45 = v595;
                              if (v66 != 0.0)
                              {
                                operator delete(*(void **)&v66);
                                v25 = *(double *)&v607;
                              }
                            }
                            else
                            {
                              **(_QWORD **)&v632 = v63;
                              *(_QWORD *)(*(_QWORD *)&v66 + 8) = v62;
                              v643 = 0;
                              v642 = 0;
                              v31 = *(_OWORD *)v28;
                              *(_OWORD *)(*(_QWORD *)&v66 + 16) = *(_OWORD *)v28;
                              v67 = (_QWORD *)(*(_QWORD *)&v66 + 32);
                            }
                            v632 = *(double *)&v67;
                            v83 = (std::__shared_weak_count *)v643;
                            if (v643)
                            {
                              v84 = &v643->n128_u64[1];
                              do
                                v85 = __ldaxr(v84);
                              while (__stlxr(v85 - 1, v84));
                              if (!v85)
                              {
                                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                                std::__shared_weak_count::__release_weak(v83);
                                v25 = *(double *)&v607;
                              }
                            }
                          }
                          ++v48;
                        }
                        while (v48 < *(unsigned int *)(v47 + 100));
                      }
                    }
                  }
                }
              }
            }
            ++v39;
          }
          while (v39 != i);
        }
      }
      v24 += 2;
    }
    while (v24 != v590);
    v9 = v638;
    if (v638 == &v635)
    {
      v86 = 4;
      v9 = &v635;
      v5 = v588;
      v4 = v589;
    }
    else
    {
      v5 = v588;
      v4 = v589;
      if (!v638)
        goto LABEL_76;
      v86 = 5;
    }
  }
  (*((void (**)(void **))*v9 + v86))(v9);
LABEL_76:
  v87 = (float *)v631;
  v88 = v632;
  v89 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v632 - (_QWORD)v631) >> 5);
  if (*(void **)&v632 == v631)
    v90 = 0;
  else
    v90 = v89;
  std::__introsort<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *,false>((uint64_t)v631, *(_QWORD **)&v632, v90, 1, *(double *)&v31, v33);
  if (*(float **)&v88 != v87)
  {
    v91 = v87;
    while (1)
    {
      v92 = (void *)*((_QWORD *)v91 + 2);
      v93 = v91[7];
      v94 = md::MuninRoadGraph::composedEdgeForEdge(*(int8x8_t **)v591, (unint64_t)v92);
      if (v94)
      {
        v95 = (_QWORD *)v94;
        v96 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(v591 + 40), v94);
        if (v96)
        {
          v97 = v96;
          if (v96[7] != v96[8])
          {
            v98 = (void **)v95[3];
            v99 = v95[4] - (_QWORD)v98;
            if (v99)
            {
              v100 = v99 >> 3;
              if (v100 <= 1)
                v101 = 1;
              else
                v101 = v100;
              if (*v98 == v92)
              {
                v102 = 0;
LABEL_97:
                v106 = *(_QWORD *)(*v95 + ((v102 >> 3) & 0x1FFFFFFFFFFFFFF8));
                v107 = *((unsigned __int8 *)v96 + 24);
                v619 = 0.0;
                *(double *)&v611 = 0.0;
                __p = v92;
                LOBYTE(v617) = 0;
                v622 = 0;
                v108 = COERCE_DOUBLE(operator new(0x38uLL));
                **(_QWORD **)&v108 = &unk_1E42D8EE8;
                *(_QWORD *)(*(_QWORD *)&v108 + 8) = &__p;
                *(_QWORD *)(*(_QWORD *)&v108 + 16) = &v619;
                *(_QWORD *)(*(_QWORD *)&v108 + 24) = &v622;
                *(_QWORD *)(*(_QWORD *)&v108 + 32) = v95;
                *(_QWORD *)(*(_QWORD *)&v108 + 40) = &v611;
                *(_QWORD *)(*(_QWORD *)&v108 + 48) = &v617;
                v645 = v108;
                md::ComposedRoadEdge::walkEdges((uint64_t)v95, v107 != 0, (uint64_t)&v642);
                v109 = *(void ***)&v645;
                v4 = v589;
                if (*(void ***)&v645 == &v642)
                {
                  v109 = &v642;
                  v110 = 4;
LABEL_101:
                  (*((void (**)(void))*v109 + v110))();
                }
                else if (v645 != 0.0)
                {
                  v110 = 5;
                  goto LABEL_101;
                }
                if ((_BYTE)v617)
                {
                  v111 = 1.0 - v93;
                  if ((v106 & (1 << v102)) != 0)
                    v111 = v93;
                  v112 = (double *)v97[4];
                  v113 = (double *)v97[5];
                  v5 = v588;
                  if (v112 != v113)
                  {
                    v114 = v619 + (*(double *)&v611 - v619) * v111;
                    v115 = 0;
                    v116 = (((char *)v113 - (char *)v112) >> 4) - 1;
                    if (v116)
                    {
                      while (*v112 < v114)
                      {
                        ++v115;
                        v112 += 2;
                        if (v116 == v115)
                        {
                          v115 = v116;
                          break;
                        }
                      }
                    }
                    if (vabdd_f64(*(double *)(v585 + 40), *(double *)(v97[7] + 16 * v115 + 8) + *(double *)(v97[7] + 16 * v115) * v114)/ sqrtf(v91[6]) <= 0.400000006)
                    {
                      v117 = 1;
                      v614 = 1;
                      v615 = *(_OWORD *)v91;
                      *(_QWORD *)v91 = 0;
                      *((_QWORD *)v91 + 1) = 0;
                      v616 = *((_OWORD *)v91 + 1);
                      goto LABEL_114;
                    }
                  }
                }
                else
                {
                  v5 = v588;
                }
                goto LABEL_82;
              }
              v102 = 0;
              v103 = v98 + 1;
              v104 = v101 - 1;
              while (v104 != v102)
              {
                v105 = (void *)v103[v102++];
                if (v105 == v92)
                {
                  if (v102 >= v100)
                    break;
                  goto LABEL_97;
                }
              }
            }
          }
        }
      }
LABEL_82:
      v91 += 8;
      if (v91 == *(float **)&v88)
      {
        v117 = 1;
        v614 = 1;
        v615 = *(_OWORD *)v87;
        *(_QWORD *)v87 = 0;
        *((_QWORD *)v87 + 1) = 0;
        v616 = *((_OWORD *)v87 + 1);
        goto LABEL_115;
      }
    }
  }
  v117 = 0;
  v614 = 0;
LABEL_114:
  if (v87)
  {
LABEL_115:
    if (*(float **)&v88 != v87)
    {
      do
      {
        v118 = *(std::__shared_weak_count **)(*(_QWORD *)&v88 - 24);
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        *(_QWORD *)&v88 -= 32;
      }
      while (*(float **)&v88 != v87);
      v87 = (float *)v631;
      v117 = v614;
    }
    operator delete(v87);
  }
  if (v117)
  {
    v121 = v616;
    v5[19] = v616;
    if (v121)
    {
      __p = 0;
      v629 = 0;
      v630 = 0;
      LODWORD(v611) = 1;
      v122 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v122 + 1) = 0u;
      *((_OWORD *)v122 + 2) = 0u;
      *(_OWORD *)v122 = 0u;
      __p = v122;
      v629 = v122 + 6;
      v630 = v122 + 6;
      v123 = v5[16];
      v124 = *(double *)(v123 + 32);
      v622 = *(uint64_t ***)(v123 + 24);
      v623 = v124;
      v125 = exp(v124 * 6.28318531 + -3.14159265);
      v126 = atan(v125) * 114.591559 + -90.0;
      v127 = cos(v126 * 0.034906585) * -559.82 + 111132.92;
      v128 = v127 + cos(v126 * 0.0698131701) * 1.175;
      v129 = v128 + cos(v126 * 0.104719755) * -0.0023;
      v130 = v126 * 0.00872664626;
      v131 = tan(v130 + 0.78103484);
      v132 = log(v131);
      v133 = tan(v130 + 0.789761487);
      v619 = fabs((log(v133) - v132) * 0.159154943) / v129;
      v134 = COERCE_DOUBLE(operator new(0x28uLL));
      **(_QWORD **)&v134 = &off_1E42D8FC0;
      *(_QWORD *)(*(_QWORD *)&v134 + 8) = &v622;
      v135 = (_OWORD *)(*(_QWORD *)&v134 + 8);
      *(_QWORD *)(*(_QWORD *)&v134 + 16) = &v619;
      *(_QWORD *)(*(_QWORD *)&v134 + 24) = &v611;
      *(_QWORD *)(*(_QWORD *)&v134 + 32) = &__p;
      v645 = v134;
      v136 = v5[17];
      v137 = (char *)operator new(0x28uLL);
      *(_QWORD *)v137 = &off_1E42D8FC0;
      v138 = v135[1];
      *(_OWORD *)(v137 + 8) = *v135;
      *(_OWORD *)(v137 + 24) = v138;
      v638 = (void **)v137;
      v634 = 0;
      md::MuninRoadGraph::traverseDrivableEdges(v136, v121, 1, &v635, &v631);
      v140 = v634;
      if (v634 == &v631)
      {
        v141 = 4;
        v140 = &v631;
      }
      else
      {
        if (!v634)
          goto LABEL_133;
        v141 = 5;
      }
      (*((void (**)(void))*v140 + v141))();
LABEL_133:
      v142 = v638;
      if (v638 == &v635)
      {
        v143 = 4;
        v142 = &v635;
      }
      else
      {
        if (!v638)
        {
LABEL_138:
          v144 = (uint64_t *)__p;
          v145 = v629;
          if (__p != v629 && *(_QWORD *)__p != *((_QWORD *)__p + 1))
          {
            do
            {
              v146 = *v144;
              v147 = (__n128 *)v144[1];
              v144 += 3;
              v148 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v147 - v146) >> 3));
              if (v147 == (__n128 *)v146)
                v149 = 0;
              else
                v149 = v148;
              v139.n128_f64[0] = std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_0 &,md::MuninJunctionInfo*,false>(v146, v147, v149, 1, v139);
            }
            while (v144 != v145);
          }
          v150 = *(void ***)&v645;
          if (*(void ***)&v645 == &v642)
          {
            v151 = 4;
            v150 = &v642;
          }
          else
          {
            if (v645 == 0.0)
              goto LABEL_149;
            v151 = 5;
          }
          (*((void (**)(void))*v150 + v151))();
LABEL_149:
          v152 = v5[19];
          v153 = v152 != v584;
          if (v584 && v152 != v584)
          {
            v154 = *(unsigned __int8 *)(v152 + 39);
            if ((v154 & 0x80u) == 0)
              v155 = *(unsigned __int8 *)(v152 + 39);
            else
              v155 = *(_QWORD *)(v152 + 24);
            if (!v155)
              goto LABEL_171;
            v156 = *(unsigned __int8 *)(v584 + 39);
            v157 = (char)v156;
            if ((v156 & 0x80u) != 0)
              v156 = *(_QWORD *)(v584 + 24);
            if (v155 == v156)
            {
              v158 = (const void **)(v152 + 16);
              if (v157 >= 0)
                v159 = (unsigned __int8 *)(v584 + 16);
              else
                v159 = *(unsigned __int8 **)(v584 + 16);
              if ((v154 & 0x80) != 0)
              {
                v166 = memcmp(*v158, v159, *(_QWORD *)(v152 + 24)) == 0;
              }
              else if (*(_BYTE *)(v152 + 39))
              {
                v160 = v154 - 1;
                do
                {
                  v162 = *(unsigned __int8 *)v158;
                  v158 = (const void **)((char *)v158 + 1);
                  v161 = v162;
                  v164 = *v159++;
                  v163 = v164;
                  v165 = v160-- != 0;
                  _ZF = v161 == v163;
                  v166 = v161 == v163;
                }
                while (_ZF && v165);
              }
              else
              {
                v166 = 1;
              }
            }
            else
            {
LABEL_171:
              v166 = 0;
            }
            v153 = !v166;
          }
          v167 = *(double **)__p;
          v168 = (double *)*((_QWORD *)__p + 1);
          if (*(double **)__p != v168)
          {
            do
            {
              v169 = *(_QWORD **)v167;
              v170 = 10.0;
              if (!*(_DWORD *)(*(_QWORD *)v167 + 64))
              {
                v171 = (char *)v169[5];
                v172 = (char *)v169[6];
                if (v171 == v172)
                {
                  v170 = 0.0;
                }
                else
                {
                  v173 = v172 - v171 - 8;
                  if (v173 >= 8)
                  {
                    v174 = (v173 >> 3) + 1;
                    v175 = v171 + 8;
                    v176 = 0.0;
                    v177 = v174 & 0x3FFFFFFFFFFFFFFELL;
                    v178 = 0.0;
                    do
                    {
                      v176 = fmaxf(v176, *(float *)(*(v175 - 1) + 8));
                      v178 = fmaxf(v178, *(float *)(*v175 + 8));
                      v175 += 2;
                      v177 -= 2;
                    }
                    while (v177);
                    v170 = fmaxf(v176, v178);
                    if (v174 == (v174 & 0x3FFFFFFFFFFFFFFELL))
                      goto LABEL_184;
                    v171 += 8 * (v174 & 0x3FFFFFFFFFFFFFFELL);
                  }
                  else
                  {
                    v170 = 0.0;
                  }
                  do
                  {
                    v179 = *(_QWORD *)v171;
                    v171 += 8;
                    v170 = fmaxf(v170, *(float *)(v179 + 8));
                  }
                  while (v171 != v172);
                }
              }
LABEL_184:
              if (v167[1] <= (float)(v170 + *((float *)v5 + 11)))
                goto LABEL_187;
              v167 += 3;
            }
            while (v167 != v168);
          }
          v169 = 0;
LABEL_187:
          v180 = (_QWORD *)v5[20];
          v5[20] = v169;
          if (v169 != v180)
            v153 = 1;
          if (v153 == 1)
          {
            v181 = v5[1];
            v182 = atomic_load((unsigned __int8 *)(v181 + 3392));
            v183 = *(_QWORD *)(v181 + 136);
            if (v183)
            {
              v184 = *(_QWORD *)(v183 + 216);
              if (v184)
              {
                v642 = v169;
                v635 = (void *)v152;
                LOBYTE(v631) = v182 & 1;
                (*(void (**)(uint64_t, void **, void **, void **))(*(_QWORD *)v184 + 48))(v184, &v642, &v635, &v631);
              }
            }
          }
          v185 = (uint64_t *)__p;
          if (__p)
          {
            v186 = v629;
            v187 = __p;
            if (v629 != __p)
            {
              v188 = v629;
              do
              {
                v190 = (void *)*(v188 - 3);
                v188 -= 3;
                v189 = v190;
                if (v190)
                {
                  *(v186 - 2) = (uint64_t)v189;
                  operator delete(v189);
                }
                v186 = v188;
              }
              while (v188 != v185);
              v187 = __p;
            }
            v629 = v185;
            operator delete(v187);
          }
          goto LABEL_201;
        }
        v143 = 5;
      }
      (*((void (**)(void))*v142 + v143))();
      goto LABEL_138;
    }
  }
  else
  {
    v5[19] = 0;
  }
LABEL_201:
  if (!*((_BYTE *)v5 + 75) || !*((_BYTE *)v5 + 76))
    goto LABEL_727;
  *((_BYTE *)v5 + 75) = 0;
  if (*((_BYTE *)v5 + 77))
  {
    *((_BYTE *)v5 + 77) = 0;
    v191 = (_QWORD *)v5[21];
    v192 = v5 + 22;
    if (v191 != v5 + 22)
    {
      do
      {
        md::MuninJunctionFeature::clearLabels(*(md::MuninJunctionFeature **)(v191[4] + 56), *(md::MuninJunctionFeature **)(v191[4] + 64));
        v244 = (_QWORD *)v191[1];
        if (v244)
        {
          do
          {
            v245 = v244;
            v244 = (_QWORD *)*v244;
          }
          while (v244);
        }
        else
        {
          do
          {
            v245 = (_QWORD *)v191[2];
            _ZF = *v245 == (_QWORD)v191;
            v191 = v245;
          }
          while (!_ZF);
        }
        v191 = v245;
      }
      while (v245 != v192);
    }
    std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)v5[22]);
    v5[22] = 0;
    v5[23] = 0;
    v5[21] = v192;
  }
  v193 = 0.159154943;
  v194 = -559.82;
  v195 = md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(v5[1] + 336) + 200));
  *(double *)&v611 = 0.0;
  v612 = 0;
  v613 = 0;
  v196 = *(float *)(v195 + 12);
  _Q2 = *(_OWORD *)(v5[16] + 24);
  v635 = &off_1E42D8F30;
  v636 = &v611;
  v638 = &v635;
  v198 = &v631;
  *(double *)&v631 = COERCE_DOUBLE(&off_1E42D8F78);
  v634 = &v631;
  _D1 = 0x401921FB54442D18;
  v608 = _Q2;
  __asm { FMLA            D0, D1, V2.D[1]; __x }
  v201 = exp(_D0);
  v202 = atan(v201) * 114.591559 + -90.0;
  v203 = cos(v202 * 0.034906585);
  v204 = cos(v202 * 0.0698131701);
  v205 = cos(v202 * 0.104719755);
  v206 = v202 * 0.00872664626;
  v207 = tan(v202 * 0.00872664626 + 0.78103484);
  v208 = log(v207);
  v209 = tan(v206 + 0.789761487);
  v210.n128_f64[0] = log(v209);
  v211 = (void **)v5[24];
  v212 = (void **)v5[25];
  if (v211 == v212)
  {
    v246 = 4;
LABEL_262:
    (*((void (**)(void **, __n128))*v198 + v246))(v198, v210);
    goto LABEL_263;
  }
  v213 = fabs((v210.n128_f64[0] - v208) * 0.159154943) / (v203 * -559.82 + 111132.92 + v204 * 1.175 + v205 * -0.0023);
  v214 = v213 * v196;
  v215 = v214 * v214;
  v216 = *(double *)&v608 - v214;
  v217 = *((double *)&v608 + 1) - v214;
  v218 = v214 + *(double *)&v608;
  v219 = v214 + *((double *)&v608 + 1);
  v193 = 1.0;
  v604 = 1.0 / (v213 * v213);
  v220 = *(double *)&v608;
  do
  {
    v221 = *v211;
    v222 = 1 << *((_BYTE *)*v211 + 169);
    v210.n128_f64[0] = 1.0 / (double)v222;
    v223 = v210.n128_f64[0] * (double)*((int *)*v211 + 44);
    if (v223 + v210.n128_f64[0] > v216)
    {
      v224 = v210.n128_f64[0] * (double)(v222 + ~*((_DWORD *)v221 + 43));
      v210.n128_f64[0] = v224 + v210.n128_f64[0];
      v225 = v223 >= v218 || v210.n128_f64[0] <= v217;
      if (!v225 && v224 < v219)
      {
        v227 = (void **)*((_QWORD *)v221 + 97);
        v228 = (void **)*((_QWORD *)v221 + 98);
        while (v227 != v228)
        {
          v229 = (double *)*v227;
          v210.n128_u64[0] = *((_QWORD *)*v227 + 2);
          if (v210.n128_f64[0] >= v216 && v210.n128_f64[0] < v218)
          {
            v231 = v229[3];
            if (v231 >= v217 && v231 < v219)
            {
              if (v634)
              {
                v642 = *v227;
                v233 = (*((uint64_t (**)(void **, void **))*v634 + 6))(v634, &v642);
                v220 = *(double *)&v608;
                if (!v233)
                  goto LABEL_219;
                v210.n128_f64[0] = v229[2];
                v231 = v229[3];
              }
              v210.n128_f64[0] = (v220 - v210.n128_f64[0]) * (v220 - v210.n128_f64[0]);
              v194 = v210.n128_f64[0] + (*((double *)&v608 + 1) - v231) * (*((double *)&v608 + 1) - v231);
              if (v194 <= v215)
              {
                v643 = 0;
                v642 = 0;
                v644 = 0;
                v645 = -1.0;
                v234 = *v211;
                v235 = (__n128 *)v211[1];
                if (v235)
                {
                  v236 = &v235->n128_u64[1];
                  do
                    v237 = __ldxr(v236);
                  while (__stxr(v237 + 1, v236));
                  v238 = (std::__shared_weak_count *)v643;
                  v642 = v234;
                  v643 = v235;
                  if (v238)
                  {
                    v239 = (unint64_t *)&v238->__shared_owners_;
                    do
                      v240 = __ldaxr(v239);
                    while (__stlxr(v240 - 1, v239));
                    if (!v240)
                    {
                      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                      std::__shared_weak_count::__release_weak(v238);
                    }
                  }
                }
                else
                {
                  v642 = *v211;
                }
                v644 = (__n128 *)v229;
                v645 = v194 * v604;
                if (!v638)
                {
LABEL_738:
                  std::__throw_bad_function_call[abi:nn180100]();
                  __break(1u);
                  return;
                }
                (*((void (**)(void **, void **))*v638 + 6))(v638, &v642);
                v241 = (std::__shared_weak_count *)v643;
                v220 = *(double *)&v608;
                if (v643)
                {
                  v242 = &v643->n128_u64[1];
                  do
                    v243 = __ldaxr(v242);
                  while (__stlxr(v243 - 1, v242));
                  if (!v243)
                  {
                    ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                    std::__shared_weak_count::__release_weak(v241);
                    v220 = *(double *)&v608;
                  }
                }
              }
            }
          }
LABEL_219:
          ++v227;
        }
      }
    }
    v211 += 2;
  }
  while (v211 != v212);
  v198 = v634;
  if (v634 == &v631)
  {
    v246 = 4;
    v198 = &v631;
    goto LABEL_262;
  }
  if (v634)
  {
    v246 = 5;
    goto LABEL_262;
  }
LABEL_263:
  v247 = v638;
  if (v638 == &v635)
  {
    v248 = 4;
    v247 = &v635;
LABEL_267:
    (*((void (**)(__n128))*v247 + v248))(v210);
  }
  else if (v638)
  {
    v248 = 5;
    goto LABEL_267;
  }
  v249 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v612 - (_BYTE *)v611) >> 3));
  if (v612 == v611)
    v250 = 0;
  else
    v250 = v249;
  std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*,false>((uint64_t)v611, v612, v250, 1, v210);
  v623 = 0.0;
  v624 = 0;
  v622 = (uint64_t **)&v623;
  v251 = (_QWORD *)v5[21];
  v252 = v5 + 22;
  if (v251 != v5 + 22)
  {
    do
    {
      v257 = *(_QWORD *)v251[4];
      v258 = (uint64_t **)&v623;
      v259 = (uint64_t **)&v623;
      if (v623 == 0.0)
      {
LABEL_282:
        v262 = (uint64_t *)operator new(0x38uLL);
        v263 = v262;
        v262[4] = v257;
        v262[5] = v251[4];
        v264 = v251[5];
        v262[6] = v264;
        if (v264)
        {
          v265 = (unint64_t *)(v264 + 8);
          do
            v266 = __ldxr(v265);
          while (__stxr(v266 + 1, v265));
        }
        *v262 = 0;
        v262[1] = 0;
        v262[2] = (uint64_t)v259;
        *v258 = v262;
        if (*v622)
        {
          v622 = (uint64_t **)*v622;
          v263 = *v258;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v623, v263);
        ++v624;
      }
      else
      {
        v260 = *(uint64_t **)&v623;
        while (1)
        {
          while (1)
          {
            v259 = (uint64_t **)v260;
            v261 = v260[4];
            if (v257 >= v261)
              break;
            v260 = *v259;
            v258 = v259;
            if (!*v259)
              goto LABEL_282;
          }
          if (v261 >= v257)
            break;
          v260 = v259[1];
          if (!v260)
          {
            v258 = v259 + 1;
            goto LABEL_282;
          }
        }
      }
      v267 = (_QWORD *)v251[1];
      if (v267)
      {
        do
        {
          v268 = v267;
          v267 = (_QWORD *)*v267;
        }
        while (v267);
      }
      else
      {
        do
        {
          v268 = (_QWORD *)v251[2];
          _ZF = *v268 == (_QWORD)v251;
          v251 = v268;
        }
        while (!_ZF);
      }
      v251 = v268;
    }
    while (v268 != v252);
  }
  v620 = 0;
  v621 = 0;
  v619 = COERCE_DOUBLE(&v620);
  v253 = md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(v5[1] + 336) + 200));
  v255 = (__n128 *)v611;
  v254 = v612;
  v601 = v252;
  if (v611 == v612)
    goto LABEL_606;
  v256 = v253;
  v605 = v253;
  v598 = v612;
  while (2)
  {
    v269 = v255->n128_f64[1];
    if (v269 < *(float *)(v256 + 8) || v269 >= *(float *)(v256 + 12) || v269 < v255[1].n128_f32[0])
      goto LABEL_295;
    v270 = v255->n128_f64[0];
    v617 = 0;
    v618 = 0;
    v271 = *(uint64_t **)&v623;
    if (v623 == 0.0)
      goto LABEL_310;
    v272 = (uint64_t **)&v623;
    do
    {
      v273 = v271;
      v274 = v272;
      v275 = v271[4];
      if (v275 >= *(_QWORD *)&v270)
        v272 = (uint64_t **)v271;
      else
        ++v271;
      v271 = (uint64_t *)*v271;
    }
    while (v271);
    if (v272 == (uint64_t **)&v623
      || (v275 >= *(_QWORD *)&v270 ? (v276 = v273) : (v276 = v274), *(_QWORD *)&v270 < v276[4]))
    {
LABEL_310:
      v277 = 0;
    }
    else
    {
      if (v275 < *(_QWORD *)&v270)
        v273 = (uint64_t *)v274;
      v290 = (uint64_t **)v273[5];
      v277 = (std::__shared_weak_count *)v273[6];
      if (v277)
      {
        v291 = (unint64_t *)&v277->__shared_owners_;
        do
          v292 = __ldxr(v291);
        while (__stxr(v292 + 1, v291));
      }
      v617 = v290;
      v618 = v277;
      if (*((_BYTE *)v290 + 80) == 1)
        goto LABEL_588;
    }
    v278 = (int8x8_t *)v588[18];
    v279 = v278[11];
    if (!*(_QWORD *)&v279)
      goto LABEL_378;
    v280 = 0x9DDFEA08EB382D69 * (((8 * LODWORD(v270)) + 8) ^ HIDWORD(*(_QWORD *)&v270));
    v281 = 0x9DDFEA08EB382D69 * (HIDWORD(*(_QWORD *)&v270) ^ (v280 >> 47) ^ v280);
    v282 = 0x9DDFEA08EB382D69 * (v281 ^ (v281 >> 47));
    v283 = (uint8x8_t)vcnt_s8(v279);
    v283.i16[0] = vaddlv_u8(v283);
    if (v283.u32[0] > 1uLL)
    {
      v284 = v282;
      if (v282 >= *(_QWORD *)&v279)
        v284 = v282 % *(_QWORD *)&v279;
    }
    else
    {
      v284 = v282 & (*(_QWORD *)&v279 - 1);
    }
    v285 = *(double ***)(*(_QWORD *)&v278[10] + 8 * v284);
    if (!v285 || (v286 = *v285) == 0)
    {
LABEL_378:
      v635 = 0;
      v636 = 0;
      v637 = 0;
      *(double *)&v631 = 0.0;
      v632 = 0.0;
      v633 = 0.0;
      __p = 0;
      v629 = 0;
      v630 = 0;
      v316 = (uint64_t *)v588[27];
      v317 = (uint64_t *)v588[28];
      if (v316 == v317)
      {
        v320 = 1;
LABEL_430:
        if (*(double *)&v631 != 0.0)
        {
          v632 = *(double *)&v631;
          operator delete(v631);
        }
        if (v635)
          operator delete(v635);
        if (v320)
          v293 = *(double *)(v588[16] + 40);
        else
          v293 = v193 - v194;
        goto LABEL_437;
      }
      do
      {
        v318 = *v316;
        v316 += 2;
        md::mun::MuninMetadata::neighborsWithinRadius(v318, (double *)(*(_QWORD *)&v270 + 16), (uint64_t)&__p, (uint64_t)&v631, 5.0);
      }
      while (v316 != v317);
      v319 = v629;
      v320 = __p == v629;
      if (__p == v629)
        goto LABEL_422;
      v322 = v631;
      v321 = v632;
      v323 = *(_QWORD *)&v632 - (_QWORD)v631;
      v324 = (uint64_t)(*(_QWORD *)&v632 - (_QWORD)v631) >> 3;
      if (*(void **)&v632 != v631)
      {
        std::vector<double>::__append((uint64_t)&v635, (uint64_t)(*(_QWORD *)&v632 - (_QWORD)v631) >> 3);
        v322 = v631;
        v321 = v632;
        v323 = *(_QWORD *)&v632 - (_QWORD)v631;
        v324 = (uint64_t)(*(_QWORD *)&v632 - (_QWORD)v631) >> 3;
      }
      if (*(void **)&v321 == v322)
      {
        v325 = 0;
        v326 = 0;
      }
      else
      {
        if ((v323 & 0x8000000000000000) != 0)
          abort();
        v325 = (char *)operator new(v323);
        v326 = &v325[8 * v324];
        memcpy(v325, v322, v323);
      }
      v642 = &unk_1E42CEFF0;
      v645 = COERCE_DOUBLE(&v642);
      v327 = (v326 - v325) >> 3;
      v329 = (void **)v635;
      v328 = v636;
      v330 = ((char *)v636 - (_BYTE *)v635) >> 3;
      if (v327 <= v330)
      {
        if (v327 < v330)
        {
          v328 = (void **)((char *)v635 + 8 * v327);
          v636 = v328;
        }
      }
      else
      {
        std::vector<double>::__append((uint64_t)&v635, v327 - v330);
        v329 = (void **)v635;
        v328 = v636;
      }
      if (v328 == v329)
      {
        v332 = 0.0;
      }
      else
      {
        v331 = 0;
        v332 = 0.0;
        v333 = v325;
        do
        {
          if (v645 == 0.0)
            goto LABEL_738;
          v334 = (*(double (**)(double, char *))(**(_QWORD **)&v645 + 48))(COERCE_DOUBLE(*(_QWORD *)&v645), v333);
          v329 = (void **)v635;
          *((double *)v635 + v331) = v334;
          v332 = v334 + v332;
          ++v331;
          v333 += 8;
        }
        while (v331 < v636 - v329);
        v4 = v589;
      }
      _ZF = v326 == v325;
      v252 = v601;
      if (!_ZF)
      {
        if (v327 <= 1)
          v335 = 1;
        else
          v335 = v327;
        if (v335 <= 3)
        {
          v336 = 0;
LABEL_407:
          v341 = v335 - v336;
          v342 = (double *)&v329[v336];
          do
          {
            *v342 = *v342 * (1.0 / v332);
            ++v342;
            --v341;
          }
          while (v341);
          goto LABEL_409;
        }
        v336 = v335 & 0xFFFFFFFFFFFFFFFCLL;
        v337 = (float64x2_t *)(v329 + 2);
        v338 = v335 & 0xFFFFFFFFFFFFFFFCLL;
        v339 = 1.0 / v332;
        do
        {
          v340 = vmulq_n_f64(*v337, v339);
          v337[-1] = vmulq_n_f64(v337[-1], v339);
          *v337 = v340;
          v337 += 2;
          v338 -= 4;
        }
        while (v338);
        if (v335 != v336)
          goto LABEL_407;
      }
LABEL_409:
      v343 = *(void ***)&v645;
      if (*(void ***)&v645 == &v642)
      {
        v343 = &v642;
        v344 = 4;
      }
      else
      {
        if (v645 == 0.0)
        {
LABEL_414:
          if (v325)
            operator delete(v325);
          v319 = (uint64_t *)__p;
          if (v629 != __p)
          {
            v345 = ((char *)v629 - (_BYTE *)__p) >> 3;
            if (v345 <= 1)
              v345 = 1;
            if (v345 <= 1)
            {
              v346 = 0;
              v194 = 0.0;
              v193 = 0.0;
              goto LABEL_427;
            }
            v347 = 0;
            v346 = v345 & 0xFFFFFFFFFFFFFFFELL;
            v348 = 0.0;
            v349 = 0.0;
            v350 = 0.0;
            v351 = 0.0;
            do
            {
              v352 = (uint64_t *)((char *)__p + 8 * v347);
              v354 = *v352;
              v353 = v352[1];
              v355 = (double *)&v329[v347];
              v356 = v355[1];
              v350 = v350 + *(double *)(v354 + 72) * *v355;
              v351 = v351 + *(double *)(v353 + 72) * v356;
              v348 = v348 + *v355 * *(float *)(v354 + 1848);
              v349 = v349 + v356 * *(float *)(v353 + 1848);
              v347 += 2;
            }
            while (v346 != v347);
            v193 = v351 + v350;
            v194 = v349 + v348;
            while (v345 != v346)
            {
LABEL_427:
              v357 = *((_QWORD *)__p + v346);
              v358 = *(double *)&v329[v346];
              v193 = v193 + *(double *)(v357 + 72) * v358;
              v194 = v194 + v358 * *(float *)(v357 + 1848);
              ++v346;
            }
LABEL_429:
            v629 = v319;
            operator delete(v319);
            goto LABEL_430;
          }
          v194 = 0.0;
          v193 = 0.0;
LABEL_422:
          if (!v319)
            goto LABEL_430;
          goto LABEL_429;
        }
        v344 = 5;
      }
      (*((void (**)(void))*v343 + v344))();
      goto LABEL_414;
    }
    if (v283.u32[0] < 2uLL)
    {
      v287 = *(_QWORD *)&v279 - 1;
      while (1)
      {
        v289 = *((_QWORD *)v286 + 1);
        if (v282 == v289)
        {
          if (*((_QWORD *)v286 + 2) == *(_QWORD *)&v270)
            goto LABEL_339;
        }
        else if ((v289 & v287) != v284)
        {
          goto LABEL_378;
        }
        v286 = *(double **)v286;
        if (!v286)
          goto LABEL_378;
      }
    }
    while (1)
    {
      v288 = *((_QWORD *)v286 + 1);
      if (v282 == v288)
        break;
      if (v288 >= *(_QWORD *)&v279)
        v288 %= *(_QWORD *)&v279;
      if (v288 != v284)
        goto LABEL_378;
LABEL_321:
      v286 = *(double **)v286;
      if (!v286)
        goto LABEL_378;
    }
    if (*((_QWORD *)v286 + 2) != *(_QWORD *)&v270)
      goto LABEL_321;
LABEL_339:
    v293 = v286[3];
    v294 = *(double *)(*(_QWORD *)&v270 + 16) * 6.28318531;
    v295 = exp(*(double *)(*(_QWORD *)&v270 + 24) * 6.28318531 + -3.14159265);
    v296 = atan(v295) * 2.0 + -1.57079633;
    v297 = fmod(v294, 6.28318531);
    v298 = fmod(v297 + 6.28318531, 6.28318531) + -3.14159265;
    v299 = __sincos_stret(v296);
    v300 = 6378137.0 / sqrt(v299.__sinval * v299.__sinval * -0.00669437999 + 1.0);
    v301 = (v300 + v293) * v299.__cosval;
    v302 = __sincos_stret(v298);
    *(double *)&v631 = v301 * v302.__cosval;
    v632 = v301 * v302.__sinval;
    v633 = (v293 + v300 * 0.99330562) * v299.__sinval;
    LOBYTE(v642) = 0;
    md::mun::MuninMetadata::nearestPointInMetadatas<std::vector<std::shared_ptr<md::mun::MuninMetadata>>>(&v635, (uint64_t *)v588[27], (uint64_t *)v588[28], (uint64_t)&v631, 20.0);
    geo::optional<md::mun::CollectionPoint>::operator=((uint64_t)&v642, (uint64_t)&v635);
    if ((_BYTE)v635)
    {
      v303 = v639;
      v304 = v640;
      if (v639 != v640)
      {
        do
        {
          v305 = (void *)v303[31];
          if (v305 != (void *)v303[33])
            free(v305);
          v303 += 36;
        }
        while (v303 != v304);
        v303 = v639;
      }
      if (v303 != v641)
        free(v303);
    }
    if ((_BYTE)v642)
      goto LABEL_369;
    md::mun::MuninMetadata::nearestPointInMetadatas<std::vector<std::shared_ptr<md::mun::MuninMetadata>>>(&v635, (uint64_t *)v588[27], (uint64_t *)v588[28], (uint64_t)&v631, 35.0);
    geo::optional<md::mun::CollectionPoint>::operator=((uint64_t)&v642, (uint64_t)&v635);
    if ((_BYTE)v635)
    {
      v306 = v639;
      v307 = v640;
      if (v639 != v640)
      {
        do
        {
          v308 = (void *)v306[31];
          if (v308 != (void *)v306[33])
            free(v308);
          v306 += 36;
        }
        while (v306 != v307);
        v306 = v639;
      }
      if (v306 != v641)
        free(v306);
    }
    if ((_BYTE)v642)
      goto LABEL_369;
    md::mun::MuninMetadata::nearestPointInMetadatas<std::vector<std::shared_ptr<md::mun::MuninMetadata>>>(&v635, (uint64_t *)v588[27], (uint64_t *)v588[28], (uint64_t)&v631, 50.0);
    geo::optional<md::mun::CollectionPoint>::operator=((uint64_t)&v642, (uint64_t)&v635);
    if ((_BYTE)v635)
    {
      v309 = v639;
      v310 = v640;
      if (v639 != v640)
      {
        do
        {
          v311 = (void *)v309[31];
          if (v311 != (void *)v309[33])
            free(v311);
          v309 += 36;
        }
        while (v309 != v310);
        v309 = v639;
      }
      if (v309 != v641)
        free(v309);
    }
    if ((_BYTE)v642)
    {
LABEL_369:
      v312 = v649;
      v313 = v646;
      v314 = v647;
      if (v646 != v647)
      {
        do
        {
          v315 = (void *)v313[31];
          if (v315 != (void *)v313[33])
            free(v315);
          v313 += 36;
        }
        while (v313 != v314);
        v313 = v646;
      }
      v293 = v293 - v312;
      if (v313 != v648)
        free(v313);
    }
    if (v293 == 1.79769313e308)
      goto LABEL_378;
LABEL_437:
    v359 = (char *)operator new(0x70uLL);
    *((_QWORD *)v359 + 1) = 0;
    *((_QWORD *)v359 + 2) = 0;
    *(_QWORD *)v359 = &off_1E42DC3F8;
    *((double *)v359 + 3) = v270;
    v360 = *(double *)(*(_QWORD *)&v270 + 16);
    v361 = *(double *)(*(_QWORD *)&v270 + 24);
    *((double *)v359 + 4) = v360;
    *((double *)v359 + 5) = v361;
    *((double *)v359 + 6) = v293;
    v362 = v360 * 6.28318531;
    v363 = exp(v361 * 6.28318531 + -3.14159265);
    v364 = atan(v363) * 2.0 + -1.57079633;
    v365 = fmod(v362, 6.28318531);
    v366 = fmod(v365 + 6.28318531, 6.28318531) + -3.14159265;
    v367 = __sincos_stret(v364);
    v368 = 6378137.0 / sqrt(v367.__sinval * v367.__sinval * -0.00669437999 + 1.0);
    v369 = (v368 + v293) * v367.__cosval;
    v370 = __sincos_stret(v366);
    *((double *)v359 + 7) = v369 * v370.__cosval;
    *((double *)v359 + 8) = v369 * v370.__sinval;
    *((double *)v359 + 9) = (v293 + v368 * 0.99330562) * v367.__sinval;
    *((_QWORD *)v359 + 11) = 0;
    *((_QWORD *)v359 + 12) = 0;
    *((_QWORD *)v359 + 10) = 0;
    v359[104] = 0;
    v617 = (uint64_t **)(v359 + 24);
    v618 = (std::__shared_weak_count *)v359;
    if (v277)
    {
      v371 = (unint64_t *)&v277->__shared_owners_;
      do
        v372 = __ldaxr(v371);
      while (__stlxr(v372 - 1, v371));
      if (!v372)
      {
        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
        std::__shared_weak_count::__release_weak(v277);
      }
    }
    v373 = v617;
    *((_BYTE *)v617 + 80) = 1;
    v374 = *v373;
    v375 = (*v373)[1];
    v609 = v373;
    if (!v375 || !*(_QWORD *)(v375 + 8))
    {
      v382 = (double *)v4[6];
      v383 = *((double *)v373 + 1);
      v593 = *((double *)v373 + 2);
      v384 = v382[17];
      v385 = v382[18];
      v386 = v382[19];
      v387 = sqrt(v384 * v384 + v385 * v385);
      v388 = atan2(v386, v387 * 0.996647189);
      v389 = atan2(v385, v384);
      v390 = __sincos_stret(v388);
      v391 = atan2(v386 + v390.__sinval * v390.__sinval * 42841.3115 * v390.__sinval, v387 + v390.__cosval * v390.__cosval * -42697.6727 * v390.__cosval);
      v392 = tan(v391 * 0.5 + 0.785398163);
      v393 = log(v392);
      v394 = v374[6] - v374[5];
      if (!v394)
        goto LABEL_568;
      if ((unint64_t)v394 >= 0x5555555555555551)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v395 = v393;
      v396 = v394 >> 3;
      v397 = (__n128 *)operator new(24 * (v394 >> 3));
      v398 = v373;
      v399 = (uint64_t)v397;
      v400 = 0;
      v401.n128_f64[0] = 0.5 - v383 + v389 * 0.159154943;
      v402 = 0.5 - v593 + v395 * 0.159154943;
      v403 = 1.0 / sqrt(v401.n128_f64[0] * v401.n128_f64[0] + v402 * v402);
      v404 = v403 * v401.n128_f64[0];
      v405 = v403 * v402;
      v406 = (__n128 *)((char *)v397 + 24 * v396);
      if (v396 <= 1)
        v396 = 1;
      v407 = v397;
      while (1)
      {
        v408 = *v398;
        v409 = *(_QWORD *)(v408[5] + 8 * v400);
        if (*(char *)(v409 + 39) < 0)
        {
          if (*(_QWORD *)(v409 + 24))
          {
LABEL_457:
            v401.n128_f64[0] = md::MuninRoadEdge::direction(*(std::__shared_weak_count ****)(v408[5] + 8 * v400), *(_QWORD *)(v409 + 96) == (_QWORD)v408);
            v411 = fabs(v401.n128_f64[0] * v404 + v410 * v405);
            v401.n128_f64[0] = -(v401.n128_f64[0] * v405 - v410 * v404);
            v412 = v401.n128_f64[0] >= 0.0;
            if (v407 < v406)
            {
              v407->n128_u64[0] = v409;
              v407->n128_f64[1] = v411;
              v407[1].n128_u8[0] = v412;
              v407 = (__n128 *)((char *)v407 + 24);
              v4 = v589;
            }
            else
            {
              v413 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v407 - v399) >> 3) + 1;
              if (v413 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:nn180100]();
              if (0x5555555555555556 * (((uint64_t)v406 - v399) >> 3) > v413)
                v413 = 0x5555555555555556 * (((uint64_t)v406 - v399) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v406 - v399) >> 3) >= 0x555555555555555)
                v414 = 0xAAAAAAAAAAAAAAALL;
              else
                v414 = v413;
              if (v414)
              {
                if (v414 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_737;
                v415 = (char *)operator new(24 * v414);
              }
              else
              {
                v415 = 0;
              }
              v416 = &v415[8 * (((uint64_t)v407 - v399) >> 3)];
              *(_QWORD *)v416 = v409;
              *((double *)v416 + 1) = v411;
              v416[16] = v412;
              if (v407 == (__n128 *)v399)
              {
                v418 = &v415[8 * (((uint64_t)v407 - v399) >> 3)];
                v4 = v589;
              }
              else
              {
                v417 = &v415[8 * (((uint64_t)v407 - v399) >> 3)];
                v4 = v589;
                do
                {
                  v401 = *(__n128 *)((char *)v407 - 24);
                  v418 = v417 - 24;
                  *(v417 - 8) = v407[-1].n128_i8[8];
                  *(__n128 *)(v417 - 24) = v401;
                  v407 = (__n128 *)((char *)v407 - 24);
                  v417 -= 24;
                }
                while (v407 != (__n128 *)v399);
              }
              v406 = (__n128 *)&v415[24 * v414];
              v407 = (__n128 *)(v416 + 24);
              if (v399)
                operator delete((void *)v399);
              v399 = (uint64_t)v418;
            }
          }
        }
        else if (*(_BYTE *)(v409 + 39))
        {
          goto LABEL_457;
        }
        ++v400;
        v398 = v609;
        if (v400 == v396)
        {
          if ((__n128 *)v399 == v407)
          {
            v252 = v601;
            if (!v407)
              goto LABEL_568;
          }
          else
          {
            v419 = ((uint64_t)v407 - v399) / 24;
            std::__introsort<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *,false>(v399, v407, 126 - 2 * __clz(v419), 1, v401);
            v252 = v601;
            if (*(_BYTE *)(*v4 + 3614) || *(double *)(v399 + 8) <= 0.707106769)
            {
              v420 = *(_BYTE *)(v399 + 16) != 0;
              v421 = *(_BYTE *)(v399 + 16) == 0;
              if (v419 >= 2)
              {
                v422 = (unsigned __int8 **)(*(_QWORD *)v399 + 16);
                if (*(char *)(*(_QWORD *)v399 + 39) >= 0)
                  v423 = *(unsigned __int8 *)(*(_QWORD *)v399 + 39);
                else
                  v423 = *(_QWORD *)(*(_QWORD *)v399 + 24);
                v594 = *(_QWORD *)v399 + 16;
                v424 = 1;
                if ((*(_BYTE *)(*(_QWORD *)v399 + 39) & 0x80) != 0)
                {
                  while (1)
                  {
                    v432 = *(_QWORD *)(v399 + 24 * v424);
                    v433 = *(unsigned __int8 *)(v432 + 39);
                    v434 = *(_QWORD *)(v432 + 24);
                    if ((v433 & 0x80u) == 0)
                      v435 = *(unsigned __int8 *)(v432 + 39);
                    else
                      v435 = *(_QWORD *)(v432 + 24);
                    if (v435 != v423)
                      goto LABEL_500;
                    v436 = (const void **)(v432 + 16);
                    v437 = *v422;
                    if ((v433 & 0x80) != 0)
                    {
                      v438 = memcmp(*v436, v437, v434);
                      v422 = (unsigned __int8 **)v594;
                      if (v438)
                        goto LABEL_500;
                    }
                    else if ((_DWORD)v433)
                    {
                      while (*(unsigned __int8 *)v436 == *v437)
                      {
                        v436 = (const void **)((char *)v436 + 1);
                        ++v437;
                        if (!--v433)
                          goto LABEL_499;
                      }
                      goto LABEL_500;
                    }
LABEL_499:
                    v420 |= *(_BYTE *)(v399 + 24 * v424 + 16) != 0;
                    v421 |= *(_BYTE *)(v399 + 24 * v424 + 16) == 0;
LABEL_500:
                    if (++v424 == v419)
                      goto LABEL_523;
                  }
                }
                while (2)
                {
                  v425 = *(_QWORD *)(v399 + 24 * v424);
                  v426 = *(unsigned __int8 *)(v425 + 39);
                  v427 = *(_QWORD *)(v425 + 24);
                  if ((v426 & 0x80u) == 0)
                    v428 = *(unsigned __int8 *)(v425 + 39);
                  else
                    v428 = *(_QWORD *)(v425 + 24);
                  if (v428 == v423)
                  {
                    v429 = (const void **)(v425 + 16);
                    if ((v426 & 0x80) != 0)
                    {
                      v431 = memcmp(*v429, v422, v427);
                      v422 = (unsigned __int8 **)v594;
                      if (v431)
                        goto LABEL_486;
                    }
                    else if ((_DWORD)v426)
                    {
                      v430 = (unsigned __int8 *)v422;
                      while (*(unsigned __int8 *)v429 == *v430)
                      {
                        v429 = (const void **)((char *)v429 + 1);
                        ++v430;
                        if (!--v426)
                          goto LABEL_485;
                      }
                      goto LABEL_486;
                    }
LABEL_485:
                    v420 |= *(_BYTE *)(v399 + 24 * v424 + 16) != 0;
                    v421 |= *(_BYTE *)(v399 + 24 * v424 + 16) == 0;
                  }
LABEL_486:
                  if (++v424 == v419)
                    break;
                  continue;
                }
              }
LABEL_523:
              v445 = operator new();
              v446 = v445;
              v447 = *(_QWORD *)v399;
              *(_BYTE *)(v445 + 40) = 0;
              *(_QWORD *)(v445 + 24) = 0;
              *(_QWORD *)(v445 + 32) = 0;
              v448 = v609;
              *(_QWORD *)(v445 + 8) = v609;
              *(_QWORD *)(v445 + 16) = 0;
              *(_QWORD *)v445 = &off_1E42A0EC8;
              *(_QWORD *)(v445 + 48) = v447;
              *(_QWORD *)(v445 + 56) = 0;
              *(_QWORD *)(v445 + 64) = 0;
              *(_QWORD *)(v445 + 72) = 0;
              *(_BYTE *)(v445 + 80) = v421 & 1;
              *(_BYTE *)(v445 + 81) = v420 & 1;
              v450 = v609[8];
              v449 = (unint64_t)v609[9];
              if ((unint64_t)v450 >= v449)
              {
                v464 = v609[7];
                v465 = ((char *)v450 - (char *)v464) >> 4;
                if ((unint64_t)(v465 + 1) >> 60)
                  abort();
                v466 = v449 - (_QWORD)v464;
                v467 = v466 >> 3;
                if (v466 >> 3 <= (unint64_t)(v465 + 1))
                  v467 = v465 + 1;
                if ((unint64_t)v466 >= 0x7FFFFFFFFFFFFFF0)
                  v468 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v468 = v467;
                if (v468)
                {
                  if (v468 >> 60)
                    goto LABEL_737;
                  v469 = (char *)operator new(16 * v468);
                }
                else
                {
                  v469 = 0;
                }
                v470 = (uint64_t *)&v469[16 * v465];
                *v470 = v446;
                v471 = (_QWORD *)operator new();
                v472 = (uint64_t *)&v469[16 * v468];
                *v471 = &off_1E42E70C8;
                v471[1] = 0;
                v471[2] = 0;
                v471[3] = v446;
                v470[1] = (uint64_t)v471;
                v452 = v470 + 2;
                v448 = v609;
                v473 = v609[7];
                v474 = v609[8];
                v252 = v601;
                if (v474 == v473)
                {
                  v609[7] = v470;
                  v609[8] = v452;
                  v609[9] = v472;
                }
                else
                {
                  do
                  {
                    v475 = *((_OWORD *)v474 - 1);
                    v474 -= 2;
                    *((_OWORD *)v470 - 1) = v475;
                    v470 -= 2;
                    *v474 = 0;
                    v474[1] = 0;
                  }
                  while (v474 != v473);
                  v476 = v609[7];
                  v474 = v609[8];
                  v609[7] = v470;
                  v609[8] = v452;
                  v609[9] = v472;
                  if (v474 == v476)
                  {
                    v252 = v601;
                  }
                  else
                  {
                    do
                    {
                      v477 = (std::__shared_weak_count *)*(v474 - 1);
                      if (v477)
                      {
                        v478 = (unint64_t *)&v477->__shared_owners_;
                        do
                          v479 = __ldaxr(v478);
                        while (__stlxr(v479 - 1, v478));
                        if (!v479)
                        {
                          ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
                          std::__shared_weak_count::__release_weak(v477);
                        }
                      }
                      v474 -= 2;
                    }
                    while (v474 != v476);
                    v474 = v476;
                    v252 = v601;
                    v448 = v609;
                  }
                }
                if (v474)
                  operator delete(v474);
              }
              else
              {
                *v450 = v445;
                v451 = (_QWORD *)operator new();
                v252 = v601;
                *v451 = &off_1E42E70C8;
                v451[1] = 0;
                v451[2] = 0;
                v451[3] = v446;
                v450[1] = (uint64_t)v451;
                v452 = v450 + 2;
                v609[8] = v450 + 2;
              }
              v448[8] = v452;
            }
          }
          operator delete((void *)v399);
          goto LABEL_568;
        }
      }
    }
    v376 = operator new();
    v377 = v376;
    *(_BYTE *)(v376 + 40) = 0;
    *(_QWORD *)(v376 + 24) = 0;
    *(_QWORD *)(v376 + 32) = 0;
    *(_QWORD *)(v376 + 8) = v373;
    *(_QWORD *)(v376 + 16) = 0;
    *(_QWORD *)v376 = &off_1E42A2070;
    *(_QWORD *)(v376 + 56) = 0;
    *(_QWORD *)(v376 + 64) = 0;
    *(_QWORD *)(v376 + 48) = 0;
    v379 = v373[8];
    v378 = (unint64_t)v373[9];
    if ((unint64_t)v379 < v378)
    {
      *v379 = v376;
      v380 = (_QWORD *)operator new();
      *v380 = &off_1E42E7100;
      v380[1] = 0;
      v380[2] = 0;
      v380[3] = v377;
      v379[1] = (uint64_t)v380;
      v381 = v379 + 2;
      v373[8] = v379 + 2;
      goto LABEL_539;
    }
    v439 = v373[7];
    v440 = ((char *)v379 - (char *)v439) >> 4;
    if ((unint64_t)(v440 + 1) >> 60)
      abort();
    v441 = v378 - (_QWORD)v439;
    v442 = v441 >> 3;
    if (v441 >> 3 <= (unint64_t)(v440 + 1))
      v442 = v440 + 1;
    if ((unint64_t)v441 >= 0x7FFFFFFFFFFFFFF0)
      v443 = 0xFFFFFFFFFFFFFFFLL;
    else
      v443 = v442;
    if (v443)
    {
      if (!(v443 >> 60))
      {
        v444 = (char *)operator new(16 * v443);
        goto LABEL_526;
      }
LABEL_737:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v444 = 0;
LABEL_526:
    v453 = (uint64_t *)&v444[16 * v440];
    *v453 = v377;
    v454 = (_QWORD *)operator new();
    v455 = (uint64_t *)&v444[16 * v443];
    *v454 = &off_1E42E7100;
    v454[1] = 0;
    v454[2] = 0;
    v454[3] = v377;
    v453[1] = (uint64_t)v454;
    v381 = v453 + 2;
    v456 = v373[7];
    v457 = v373[8];
    if (v457 == v456)
    {
      v373[7] = v453;
      v373[8] = v381;
      v373[9] = v455;
      if (v457)
        goto LABEL_538;
    }
    else
    {
      do
      {
        v458 = *((_OWORD *)v457 - 1);
        v457 -= 2;
        *((_OWORD *)v453 - 1) = v458;
        v453 -= 2;
        *v457 = 0;
        v457[1] = 0;
      }
      while (v457 != v456);
      v459 = v373;
      v460 = v373[7];
      v457 = v459[8];
      v459[7] = v453;
      v459[8] = v381;
      v459[9] = v455;
      if (v457 != v460)
      {
        do
        {
          v461 = (std::__shared_weak_count *)*(v457 - 1);
          if (v461)
          {
            v462 = (unint64_t *)&v461->__shared_owners_;
            do
              v463 = __ldaxr(v462);
            while (__stlxr(v463 - 1, v462));
            if (!v463)
            {
              ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
              std::__shared_weak_count::__release_weak(v461);
            }
          }
          v457 -= 2;
        }
        while (v457 != v460);
        v457 = v460;
      }
      v373 = v609;
      if (v457)
LABEL_538:
        operator delete(v457);
    }
LABEL_539:
    v373[8] = v381;
LABEL_568:
    v480 = *(uint64_t **)&v623;
    v481 = (uint64_t **)&v623;
    v482 = (uint64_t **)&v623;
    if (v623 == 0.0)
    {
LABEL_575:
      v484 = (uint64_t *)operator new(0x38uLL);
      v484[5] = 0;
      v484[6] = 0;
      *((double *)v484 + 4) = v270;
      *v484 = 0;
      v484[1] = 0;
      v484[2] = (uint64_t)v482;
      *v481 = v484;
      v485 = v484;
      if (*v622)
      {
        v622 = (uint64_t **)*v622;
        v485 = *v481;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v623, v485);
      ++v624;
      v609 = v617;
      v486 = v618;
      if (!v618)
        goto LABEL_582;
LABEL_580:
      v487 = (unint64_t *)&v486->__shared_owners_;
      do
        v488 = __ldxr(v487);
      while (__stxr(v488 + 1, v487));
      goto LABEL_582;
    }
    while (1)
    {
      while (1)
      {
        v482 = (uint64_t **)v480;
        v483 = v480[4];
        if (*(_QWORD *)&v270 >= v483)
          break;
        v480 = *v482;
        v481 = v482;
        if (!*v482)
          goto LABEL_575;
      }
      if (v483 >= *(_QWORD *)&v270)
        break;
      v480 = v482[1];
      if (!v480)
      {
        v481 = v482 + 1;
        goto LABEL_575;
      }
    }
    v484 = (uint64_t *)v482;
    v486 = v618;
    if (v618)
      goto LABEL_580;
LABEL_582:
    v489 = (std::__shared_weak_count *)v484[6];
    v484[5] = (uint64_t)v609;
    v484[6] = (uint64_t)v486;
    if (v489)
    {
      v490 = (unint64_t *)&v489->__shared_owners_;
      do
        v491 = __ldaxr(v490);
      while (__stlxr(v491 - 1, v490));
      if (!v491)
      {
        ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
        std::__shared_weak_count::__release_weak(v489);
      }
    }
    v290 = v617;
LABEL_588:
    v492 = v620;
    v493 = &v620;
LABEL_590:
    v494 = v493;
    if (v492)
    {
      do
      {
        v493 = (uint64_t **)v492;
        v495 = v492[4];
        if ((unint64_t)v290 < v495)
        {
          v492 = *v493;
          goto LABEL_590;
        }
        if (v495 >= (unint64_t)v290)
          goto LABEL_601;
        v492 = v493[1];
      }
      while (v492);
      v494 = v493 + 1;
    }
    v496 = (uint64_t *)operator new(0x30uLL);
    v497 = v496;
    v498 = v618;
    v496[4] = (uint64_t)v290;
    v496[5] = (uint64_t)v498;
    if (v498)
    {
      v499 = (unint64_t *)&v498->__shared_owners_;
      do
        v500 = __ldxr(v499);
      while (__stxr(v500 + 1, v499));
    }
    *v496 = 0;
    v496[1] = 0;
    v496[2] = (uint64_t)v493;
    *v494 = v496;
    if (**(_QWORD **)&v619)
    {
      v619 = **(double **)&v619;
      v497 = *v494;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v620, v497);
    ++v621;
LABEL_601:
    v501 = v618;
    v256 = v605;
    if (v618)
    {
      v502 = (unint64_t *)&v618->__shared_owners_;
      do
        v503 = __ldaxr(v502);
      while (__stlxr(v503 - 1, v502));
      if (!v503)
      {
        ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
        std::__shared_weak_count::__release_weak(v501);
      }
    }
    v254 = v598;
LABEL_295:
    v255 = (__n128 *)((char *)v255 + 24);
    if (v255 != v254)
      continue;
    break;
  }
LABEL_606:
  v635 = 0;
  v636 = 0;
  v637 = 0;
  v627 = (_QWORD *)v588[21];
  __p = *(void **)&v619;
  v617 = &v620;
  v626 = *(double *)&v252;
  *(double *)&v631 = COERCE_DOUBLE(&v635);
  v632 = 0.0;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::insert_iterator<std::vector<std::shared_ptr<md::MuninJunctionFeature>>> &>((char *)&v642, (uint64_t)&__p, &v617, (uint64_t)&v627, &v626, (uint64_t)&v631);
  *(double *)&v631 = 0.0;
  v632 = 0.0;
  v633 = 0.0;
  v617 = (uint64_t **)v588[21];
  v626 = v619;
  v627 = v252;
  v625 = &v620;
  __p = &v631;
  v629 = 0;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::__tree_const_iterator<std::shared_ptr<md::MuninJunctionFeature>,std::__tree_node<std::shared_ptr<md::MuninJunctionFeature>,void *> *,long> &,std::insert_iterator<std::vector<std::shared_ptr<md::MuninJunctionFeature>>> &>((char *)&v642, (uint64_t)&v617, &v627, (uint64_t)&v626, &v625, (uint64_t)&__p);
  v504 = (char *)v631;
  v505 = v632;
  if (v631 != *(void **)&v632)
  {
    do
    {
      md::MuninJunctionFeature::clearLabels(*(md::MuninJunctionFeature **)(*(_QWORD *)v504 + 56), *(md::MuninJunctionFeature **)(*(_QWORD *)v504 + 64));
      v504 += 16;
    }
    while (v504 != *(char **)&v505);
  }
  v643 = 0;
  v642 = 0;
  v644 = 0;
  v506 = (char *)v635;
  v599 = v636;
  if (v635 != v636)
  {
    while (1)
    {
      v507 = *(_QWORD *)(*(_QWORD *)v506 + 56);
      v508 = *(_QWORD *)(*(_QWORD *)v506 + 64);
      while (v507 != v508)
      {
        v509 = *(_BYTE **)v507;
        if (!*(_BYTE *)(*(_QWORD *)v507 + 40))
        {
          v509[40] = 1;
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v509 + 24))(v509, v4);
        }
        v507 += 16;
      }
      v510 = v643;
      v511 = (__n128 *)v642;
      while (v510 != v511)
      {
        v512 = (std::__shared_weak_count *)v510[-1].n128_u64[1];
        if (v512)
        {
          v513 = (unint64_t *)&v512->__shared_owners_;
          do
            v514 = __ldaxr(v513);
          while (__stlxr(v514 - 1, v513));
          if (!v514)
          {
            ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
            std::__shared_weak_count::__release_weak(v512);
          }
        }
        --v510;
      }
      v643 = v511;
      v515 = *(_QWORD *)v506;
      std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&v642, (uint64_t)(*(_QWORD *)(*(_QWORD *)v506 + 64) - *(_QWORD *)(*(_QWORD *)v506 + 56)) >> 3);
      v516 = *(_QWORD *)(v515 + 56);
      v517 = *(_QWORD *)(v515 + 64);
      while (v516 != v517)
      {
        v518 = *(__n128 **)(*(_QWORD *)v516 + 16);
        v519 = *(__n128 **)(*(_QWORD *)v516 + 24);
        while (v518 != v519)
        {
          v521 = v518->n128_u64[0];
          v522 = (unsigned __int8 *)(v518->n128_u64[0] + 306);
          do
            v523 = __ldaxr(v522);
          while (__stlxr(v523 + 1, v522));
          if (!v523 && !*(_BYTE *)(v521 + 493))
          {
            *(_WORD *)(v521 + 493) = 9473;
            *(_BYTE *)(v521 + 299) = 0;
            v524 = atomic_load((unsigned __int8 *)(v521 + 353));
            if ((v524 & 1) == 0)
              *(_BYTE *)(v521 + 356) = 2 * (*(_BYTE *)(v521 + 493) == 2);
          }
          v525 = v643;
          if (v643 >= v644)
          {
            v520 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v642, *v518);
          }
          else
          {
            v643->n128_u64[0] = v518->n128_u64[0];
            v526 = v518->n128_u64[1];
            v525->n128_u64[1] = v526;
            if (v526)
            {
              v527 = (unint64_t *)(v526 + 8);
              do
                v528 = __ldxr(v527);
              while (__stxr(v528 + 1, v527));
            }
            v520 = v525 + 1;
          }
          v643 = v520;
          ++v518;
        }
        v516 += 16;
      }
      v606 = v506;
      v529 = (md::LabelBase **)v642;
      v530 = (md::LabelBase **)v643;
      if (v642 != v643)
        break;
LABEL_610:
      v252 = v601;
      v506 = v606 + 16;
      v4 = v589;
      if (v606 + 16 == (char *)v599)
        goto LABEL_689;
    }
    v531 = v588[4];
    v532 = (uint64_t **)(v531 + 16);
    v610 = (float *)(v531 + 40);
    while (2)
    {
      v533 = *v532;
      if (*v532)
      {
        v534 = *v529;
        v535 = *v532;
        do
        {
          v536 = v535[4];
          if ((unint64_t)v534 >= v536)
          {
            if (v536 >= (unint64_t)v534)
              goto LABEL_645;
            ++v535;
          }
          v535 = (uint64_t *)*v535;
        }
        while (v535);
      }
      v537 = *v529;
      if (!*((_BYTE *)*v529 + 304))
        *((_BYTE *)v537 + 304) = 1;
      v538 = (uint64_t **)(v531 + 16);
      v539 = (uint64_t **)(v531 + 16);
      if (v533)
      {
        while (1)
        {
          while (1)
          {
            v539 = (uint64_t **)v533;
            v540 = v533[4];
            if ((unint64_t)v537 >= v540)
              break;
            v533 = *v539;
            v538 = v539;
            if (!*v539)
              goto LABEL_661;
          }
          if (v540 >= (unint64_t)v537)
            break;
          v533 = v539[1];
          if (!v533)
          {
            v538 = v539 + 1;
            goto LABEL_661;
          }
        }
      }
      else
      {
LABEL_661:
        v541 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v531 + 24) + 16))(*(_QWORD *)(v531 + 24), 48, 8);
        v542 = v541;
        v541[4] = (uint64_t)*v529;
        v543 = v529[1];
        v541[5] = (uint64_t)v543;
        if (v543)
        {
          v544 = (unint64_t *)((char *)v543 + 8);
          do
            v545 = __ldxr(v544);
          while (__stxr(v545 + 1, v544));
        }
        *v541 = 0;
        v541[1] = 0;
        v541[2] = (uint64_t)v539;
        *v538 = v541;
        v546 = **(_QWORD **)(v531 + 8);
        if (v546)
        {
          *(_QWORD *)(v531 + 8) = v546;
          v542 = *v538;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v531 + 16), v542);
        ++*(_QWORD *)(v531 + 32);
      }
      if (!*(_BYTE *)(*(_QWORD *)v531 + 3613))
      {
        v547 = *((_QWORD *)*v529 + 6);
        if ((*(char *)(v547 + 47) & 0x80000000) == 0)
        {
          if (!*(_BYTE *)(v547 + 47))
            goto LABEL_644;
LABEL_672:
          v548 = (void *)(v547 + 24);
          v549 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>(v610, v547 + 24);
          if (v549)
          {
            v551 = (md::LabelDedupingGroup *)v549[6];
            v550 = (std::__shared_weak_count *)v549[7];
            if (v550)
            {
              v552 = (unint64_t *)&v550->__shared_owners_;
              do
                v553 = __ldxr(v552);
              while (__stxr(v553 + 1, v552));
            }
          }
          else
          {
            v550 = (std::__shared_weak_count *)operator new(0x68uLL);
            v550->__shared_owners_ = 0;
            v554 = (unint64_t *)&v550->__shared_owners_;
            v550->__shared_weak_owners_ = 0;
            v550->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD620;
            v550[1].std::__shared_count = 0u;
            v551 = (md::LabelDedupingGroup *)&v550[1];
            *(_OWORD *)&v550[1].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v550[2].__shared_owners_ = 0u;
            v550[3].std::__shared_count = 0u;
            *(_OWORD *)&v550[3].__shared_weak_owners_ = 0u;
            md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)&v550[1]);
            v550[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A3E20;
            __p = v548;
            v555 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::__emplace_unique_key_args<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>,std::tuple<>>(v610, (uint64_t)v548, (__int128 **)&__p);
            do
              v556 = __ldxr(v554);
            while (__stxr(v556 + 1, v554));
            v557 = (std::__shared_weak_count *)v555[7];
            v555[6] = v551;
            v555[7] = v550;
            if (v557)
            {
              v558 = (unint64_t *)&v557->__shared_owners_;
              do
                v559 = __ldaxr(v558);
              while (__stlxr(v559 - 1, v558));
              if (!v559)
              {
                ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
                std::__shared_weak_count::__release_weak(v557);
              }
            }
          }
          md::LabelBase::setDedupingGroup(*v529, v551);
          if (v550)
          {
            v560 = (unint64_t *)&v550->__shared_owners_;
            do
              v561 = __ldaxr(v560);
            while (__stlxr(v561 - 1, v560));
            if (!v561)
            {
              ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
              std::__shared_weak_count::__release_weak(v550);
            }
          }
          goto LABEL_644;
        }
        if (*(_QWORD *)(v547 + 32))
          goto LABEL_672;
      }
LABEL_644:
      *(_BYTE *)(v531 + 96) = 1;
LABEL_645:
      v529 += 2;
      if (v529 == v530)
        goto LABEL_610;
      continue;
    }
  }
LABEL_689:
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)v588[22]);
  v562 = v620;
  *((double *)v588 + 21) = v619;
  v588[22] = v562;
  v563 = v621;
  v588[23] = v621;
  if (v563)
  {
    v562[2] = (uint64_t)v252;
    v619 = COERCE_DOUBLE(&v620);
    v620 = 0;
    v621 = 0;
    v564 = (__n128 *)v642;
    if (!v642)
      goto LABEL_703;
  }
  else
  {
    v588[21] = v252;
    v564 = (__n128 *)v642;
    if (!v642)
      goto LABEL_703;
  }
  v565 = v643;
  if (v643 != v564)
  {
    do
    {
      v566 = (std::__shared_weak_count *)v565[-1].n128_u64[1];
      if (v566)
      {
        v567 = (unint64_t *)&v566->__shared_owners_;
        do
          v568 = __ldaxr(v567);
        while (__stlxr(v568 - 1, v567));
        if (!v568)
        {
          ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
          std::__shared_weak_count::__release_weak(v566);
        }
      }
      --v565;
    }
    while (v565 != v564);
    v564 = (__n128 *)v642;
  }
  operator delete(v564);
LABEL_703:
  v569 = v631;
  if (*(double *)&v631 != 0.0)
  {
    v570 = v632;
    v571 = v631;
    if (*(void **)&v632 != v631)
    {
      do
      {
        v572 = *(std::__shared_weak_count **)(*(_QWORD *)&v570 - 8);
        if (v572)
        {
          v573 = (unint64_t *)&v572->__shared_owners_;
          do
            v574 = __ldaxr(v573);
          while (__stlxr(v574 - 1, v573));
          if (!v574)
          {
            ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
            std::__shared_weak_count::__release_weak(v572);
          }
        }
        *(_QWORD *)&v570 -= 16;
      }
      while (*(_QWORD **)&v570 != v569);
      v571 = v631;
    }
    v632 = *(double *)&v569;
    operator delete(v571);
  }
  v575 = (void **)v635;
  if (v635)
  {
    v576 = v636;
    v577 = v635;
    if (v636 != v635)
    {
      do
      {
        v578 = (std::__shared_weak_count *)*(v576 - 1);
        if (v578)
        {
          v579 = (unint64_t *)&v578->__shared_owners_;
          do
            v580 = __ldaxr(v579);
          while (__stlxr(v580 - 1, v579));
          if (!v580)
          {
            ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
            std::__shared_weak_count::__release_weak(v578);
          }
        }
        v576 -= 2;
      }
      while (v576 != v575);
      v577 = v635;
    }
    v636 = v575;
    operator delete(v577);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(v620);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)&v623);
  if (*(double *)&v611 != 0.0)
  {
    v612 = (__n128 *)v611;
    operator delete(v611);
  }
LABEL_727:
  if (v614)
  {
    v581 = (std::__shared_weak_count *)*((_QWORD *)&v615 + 1);
    if (*((_QWORD *)&v615 + 1))
    {
      v582 = (unint64_t *)(*((_QWORD *)&v615 + 1) + 8);
      do
        v583 = __ldaxr(v582);
      while (__stlxr(v583 - 1, v582));
      if (!v583)
      {
        ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
        std::__shared_weak_count::__release_weak(v581);
      }
    }
  }
}

void sub_19F88BCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,_QWORD *a50,uint64_t a51,uint64_t a52,_QWORD *a53)
{
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;

  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  *(_QWORD *)(v56 + 64) = v53;
  if (v54)
    operator delete(v54);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a50);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(a53);
  if (__p)
    operator delete(__p);
  geo::optional<md::RoadSearchResult>::~optional((uint64_t)&a42);
  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t *j;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  BOOL v77;
  uint64_t v78;
  uint64_t *v79;
  int64_t v80;
  int64_t v81;
  uint64_t *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v71 = *v8;
        v72 = *i;
        if (*v8 == *i)
          return result;
        v73 = *(_QWORD *)(v71 + 24);
        if (v73 && v73 == *(_QWORD *)(v72 + 24))
        {
          if (*(_DWORD *)(v71 + 32) >= *(_DWORD *)(v72 + 32))
            return result;
        }
        else
        {
          v74 = *(_BYTE *)(v71 + 538) & 0xFD;
          if ((v74 == 1) != ((*(_BYTE *)(v72 + 538) & 0xFD) == 1))
          {
            if (v74 != 1)
              return result;
          }
          else if (*(float *)(v71 + 488) > *(float *)(v72 + 488))
          {
            return result;
          }
        }
        *i = v71;
        *v8 = v72;
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(i, i + 1, a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(i, i + 1, i + 2, a2 - 1);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(i, i + 1, i + 2, i + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v75 = i + 1;
          v77 = i == a2 || v75 == a2;
          if ((a4 & 1) != 0)
          {
            if (v77)
              return result;
            v78 = 0;
            v79 = i;
LABEL_260:
            v101 = v79;
            v79 = v75;
            v103 = *v101;
            v102 = v101[1];
            if (v102 == *v101)
              goto LABEL_259;
            v104 = *(_QWORD *)(v102 + 24);
            if (v104 && v104 == *(_QWORD *)(v103 + 24))
            {
              if (*(_DWORD *)(v102 + 32) >= *(_DWORD *)(v103 + 32))
                goto LABEL_259;
            }
            else
            {
              v105 = *(_BYTE *)(v102 + 538) & 0xFD;
              if ((v105 == 1) != ((*(_BYTE *)(v103 + 538) & 0xFD) == 1))
              {
                if (v105 != 1)
                  goto LABEL_259;
              }
              else if (*(float *)(v102 + 488) > *(float *)(v103 + 488))
              {
                goto LABEL_259;
              }
            }
            v101[1] = v103;
            v100 = i;
            if (v101 == i)
              goto LABEL_258;
            v106 = v78;
            while (1)
            {
              v107 = *(uint64_t *)((char *)i + v106 - 8);
              if (v102 == v107)
              {
LABEL_257:
                v100 = v101;
                goto LABEL_258;
              }
              v108 = *(_QWORD *)(v102 + 24);
              if (v108 && v108 == *(_QWORD *)(v107 + 24))
              {
                if (*(_DWORD *)(v102 + 32) >= *(_DWORD *)(v107 + 32))
                  goto LABEL_257;
              }
              else
              {
                v109 = *(_BYTE *)(v102 + 538) & 0xFD;
                if ((v109 == 1) != ((*(_BYTE *)(v107 + 538) & 0xFD) == 1))
                {
                  if (v109 != 1)
                  {
                    v100 = (uint64_t *)((char *)i + v106);
LABEL_258:
                    *v100 = v102;
LABEL_259:
                    v75 = v79 + 1;
                    v78 += 8;
                    if (v79 + 1 == a2)
                      return result;
                    goto LABEL_260;
                  }
                }
                else if (*(float *)(v102 + 488) > *(float *)(v107 + 488))
                {
                  goto LABEL_257;
                }
              }
              --v101;
              *(uint64_t *)((char *)i + v106) = v107;
              v106 -= 8;
              if (!v106)
              {
                v100 = i;
                goto LABEL_258;
              }
            }
          }
          if (v77)
            return result;
          while (1)
          {
            v110 = *v75;
            v111 = *v7;
            if (*v75 != *v7)
            {
              v112 = *(_QWORD *)(v110 + 24);
              if (v112 && v112 == *(_QWORD *)(v111 + 24))
              {
                if (*(_DWORD *)(v110 + 32) >= *(_DWORD *)(v111 + 32))
                  goto LABEL_286;
              }
              else
              {
                v113 = *(_BYTE *)(v110 + 538) & 0xFD;
                if ((v113 == 1) != ((*(_BYTE *)(v111 + 538) & 0xFD) == 1))
                {
                  if (v113 != 1)
                    goto LABEL_286;
                }
                else if (*(float *)(v110 + 488) > *(float *)(v111 + 488))
                {
                  goto LABEL_286;
                }
              }
              *v75 = v111;
              v114 = *(v7 - 1);
              v115 = v7;
              if (v110 != v114)
              {
                v115 = v7;
                do
                {
                  v116 = *(_QWORD *)(v110 + 24);
                  if (v116 && v116 == *(_QWORD *)(v114 + 24))
                  {
                    if (*(_DWORD *)(v110 + 32) >= *(_DWORD *)(v114 + 32))
                      break;
                  }
                  else
                  {
                    v117 = *(_BYTE *)(v110 + 538) & 0xFD;
                    if ((v117 == 1) != ((*(_BYTE *)(v114 + 538) & 0xFD) == 1))
                    {
                      if (v117 != 1)
                        break;
                    }
                    else if (*(float *)(v110 + 488) > *(float *)(v114 + 488))
                    {
                      break;
                    }
                  }
                  *v115 = v114;
                  v114 = *(v115 - 2);
                  --v115;
                }
                while (v110 != v114);
              }
              *v115 = v110;
            }
LABEL_286:
            ++v75;
            ++v7;
            if (v75 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v80 = (v11 - 2) >> 1;
          v81 = v80;
          while (1)
          {
            v83 = v81;
            if (v80 < v81)
              goto LABEL_212;
            v84 = (2 * v81) | 1;
            v82 = &i[v84];
            if (2 * v83 + 2 >= (uint64_t)v11)
              goto LABEL_223;
            v85 = *v82;
            v86 = v82[1];
            if (*v82 == v86)
              goto LABEL_223;
            result = *(_QWORD *)(v85 + 24);
            if (result)
            {
              if (result == *(_QWORD *)(v86 + 24))
                break;
            }
            result = *(_BYTE *)(v85 + 538) & 0xFD;
            if (((_DWORD)result == 1) != ((*(_BYTE *)(v86 + 538) & 0xFD) == 1))
            {
              if ((_DWORD)result != 1)
                goto LABEL_223;
              goto LABEL_222;
            }
            if (*(float *)(v85 + 488) <= *(float *)(v86 + 488))
              goto LABEL_222;
LABEL_223:
            v87 = *v82;
            v88 = i[v83];
            if (*v82 != v88)
            {
              v89 = *(_QWORD *)(v87 + 24);
              if (v89 && v89 == *(_QWORD *)(v88 + 24))
              {
                if (*(_DWORD *)(v87 + 32) < *(_DWORD *)(v88 + 32))
                  goto LABEL_212;
              }
              else
              {
                v90 = *(_BYTE *)(v87 + 538) & 0xFD;
                result = (*(_BYTE *)(v88 + 538) & 0xFD) == 1;
                if ((v90 == 1) != ((*(_BYTE *)(v88 + 538) & 0xFD) == 1))
                {
                  if (v90 == 1)
                    goto LABEL_212;
                }
                else if (*(float *)(v87 + 488) <= *(float *)(v88 + 488))
                {
                  goto LABEL_212;
                }
              }
            }
            i[v83] = v87;
            while (1)
            {
              if (v80 < v84)
                goto LABEL_211;
              v91 = v82;
              v92 = 2 * v84;
              v84 = (2 * v84) | 1;
              v82 = &i[v84];
              v93 = v92 + 2;
              if (v93 < (uint64_t)v11)
              {
                result = *v82;
                v94 = v82[1];
                if (*v82 != v94)
                {
                  v95 = *(_QWORD *)(result + 24);
                  if (v95 && v95 == *(_QWORD *)(v94 + 24))
                  {
                    result = *(unsigned int *)(result + 32);
                    if (result < *(_DWORD *)(v94 + 32))
                      goto LABEL_244;
                  }
                  else
                  {
                    v96 = *(_BYTE *)(result + 538) & 0xFD;
                    if ((v96 == 1) == ((*(_BYTE *)(v94 + 538) & 0xFD) == 1))
                    {
                      if (*(float *)(result + 488) > *(float *)(v94 + 488))
                        goto LABEL_245;
LABEL_244:
                      ++v82;
                      v84 = v93;
                      goto LABEL_245;
                    }
                    if (v96 == 1)
                      goto LABEL_244;
                  }
                }
              }
LABEL_245:
              v97 = *v82;
              if (*v82 == v88)
                goto LABEL_234;
              v98 = *(_QWORD *)(v97 + 24);
              if (v98)
              {
                if (v98 == *(_QWORD *)(v88 + 24))
                  break;
              }
              v99 = *(_BYTE *)(v97 + 538) & 0xFD;
              result = (v99 == 1) ^ ((*(_BYTE *)(v88 + 538) & 0xFD) == 1);
              if ((v99 == 1) != ((*(_BYTE *)(v88 + 538) & 0xFD) == 1))
              {
                if (v99 == 1)
                  goto LABEL_210;
              }
              else if (*(float *)(v97 + 488) <= *(float *)(v88 + 488))
              {
                goto LABEL_210;
              }
LABEL_234:
              *v91 = v97;
            }
            result = *(unsigned int *)(v88 + 32);
            if (*(_DWORD *)(v97 + 32) >= result)
              goto LABEL_234;
LABEL_210:
            v82 = v91;
LABEL_211:
            *v82 = v88;
LABEL_212:
            v81 = v83 - 1;
            if (!v83)
            {
              v118 = (unint64_t)v10 >> 3;
              while (1)
              {
                v121 = 0;
                v122 = *i;
                v119 = i;
                do
                {
                  v123 = v119;
                  v119 += v121 + 1;
                  v124 = 2 * v121;
                  v121 = (2 * v121) | 1;
                  v125 = v124 + 2;
                  if (v125 < v118)
                  {
                    v126 = *v119;
                    v127 = v119[1];
                    if (*v119 != v127)
                    {
                      result = *(_QWORD *)(v126 + 24);
                      if (result && result == *(_QWORD *)(v127 + 24))
                      {
                        if (*(_DWORD *)(v126 + 32) < *(_DWORD *)(v127 + 32))
                        {
LABEL_312:
                          ++v119;
                          v121 = v125;
                        }
                      }
                      else
                      {
                        result = *(_BYTE *)(v126 + 538) & 0xFD;
                        if (((_DWORD)result == 1) != ((*(_BYTE *)(v127 + 538) & 0xFD) == 1))
                        {
                          if ((_DWORD)result == 1)
                            goto LABEL_312;
                        }
                        else if (*(float *)(v126 + 488) <= *(float *)(v127 + 488))
                        {
                          goto LABEL_312;
                        }
                      }
                    }
                  }
                  *v123 = *v119;
                }
                while (v121 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                if (v119 == --a2)
                  goto LABEL_309;
                *v119 = *a2;
                *a2 = v122;
                v128 = (char *)v119 - (char *)i + 8;
                if (v128 < 9)
                  goto LABEL_310;
                v129 = (v128 >> 3) - 2;
                v130 = v129 >> 1;
                v131 = &i[v129 >> 1];
                v132 = *v131;
                v122 = *v119;
                if (*v131 == *v119)
                  goto LABEL_310;
                v133 = *(_QWORD *)(v132 + 24);
                if (v133 && v133 == *(_QWORD *)(v122 + 24))
                {
                  if (*(_DWORD *)(v132 + 32) < *(_DWORD *)(v122 + 32))
                    goto LABEL_336;
                  goto LABEL_310;
                }
                v134 = *(_BYTE *)(v132 + 538) & 0xFD;
                if ((v134 == 1) == ((*(_BYTE *)(v122 + 538) & 0xFD) == 1))
                {
                  if (*(float *)(v132 + 488) > *(float *)(v122 + 488))
                    goto LABEL_310;
LABEL_336:
                  *v119 = v132;
                  if (v129 >= 2)
                  {
                    while (1)
                    {
                      v135 = v130 - 1;
                      v130 = (v130 - 1) >> 1;
                      v119 = &i[v130];
                      v136 = *v119;
                      if (*v119 == v122)
                        break;
                      v137 = *(_QWORD *)(v136 + 24);
                      if (v137 && v137 == *(_QWORD *)(v122 + 24))
                      {
                        if (*(_DWORD *)(v136 + 32) >= *(_DWORD *)(v122 + 32))
                          break;
                      }
                      else
                      {
                        v138 = *(_BYTE *)(v136 + 538) & 0xFD;
                        if ((v138 == 1) != ((*(_BYTE *)(v122 + 538) & 0xFD) == 1))
                        {
                          if (v138 != 1)
                            break;
                        }
                        else if (*(float *)(v136 + 488) > *(float *)(v122 + 488))
                        {
                          break;
                        }
                      }
                      *v131 = v136;
                      v131 = &i[v130];
                      if (v135 <= 1)
                        goto LABEL_309;
                    }
                  }
                  v119 = v131;
LABEL_309:
                  *v119 = v122;
                  goto LABEL_310;
                }
                if (v134 == 1)
                  goto LABEL_336;
LABEL_310:
                if (v118-- <= 2)
                  return result;
              }
            }
          }
          if (*(_DWORD *)(v85 + 32) >= *(_DWORD *)(v86 + 32))
            goto LABEL_223;
LABEL_222:
          ++v82;
          v84 = 2 * v83 + 2;
          goto LABEL_223;
        }
        v12 = v11 >> 1;
        v13 = &i[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(v7, &v7[v11 >> 1], a2 - 1);
          v14 = &v7[v12];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(v7 + 1, v14 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(v14 - 1, v13, &v7[v12 + 1]);
          v15 = *v7;
          *v7 = *v14;
          *v14 = v15;
        }
        --a3;
        v16 = *v7;
        if ((a4 & 1) == 0)
        {
          v17 = *(v7 - 1);
          if (v17 != v16)
          {
            v18 = *(_QWORD *)(v17 + 24);
            if (v18 && v18 == *(_QWORD *)(v16 + 24))
            {
              if (*(_DWORD *)(v17 + 32) < *(_DWORD *)(v16 + 32))
                goto LABEL_22;
            }
            else
            {
              v19 = *(_BYTE *)(v17 + 538) & 0xFD;
              if ((v19 == 1) != ((*(_BYTE *)(v16 + 538) & 0xFD) == 1))
              {
                if (v19 == 1)
                  goto LABEL_22;
              }
              else if (*(float *)(v17 + 488) <= *(float *)(v16 + 488))
              {
                goto LABEL_22;
              }
            }
          }
          v20 = *v8;
          if (v16 != *v8)
          {
            v21 = *(_QWORD *)(v16 + 24);
            if (v21 && v21 == *(_QWORD *)(v20 + 24))
            {
              if (*(_DWORD *)(v16 + 32) < *(_DWORD *)(v20 + 32))
              {
LABEL_113:
                for (i = v7 + 1; ; ++i)
                {
                  v51 = *i;
                  if (v16 != *i)
                  {
                    if (v21 && v21 == *(_QWORD *)(v51 + 24))
                    {
                      if (*(_DWORD *)(v16 + 32) < *(_DWORD *)(v51 + 32))
                        goto LABEL_123;
                    }
                    else
                    {
                      v52 = *(_BYTE *)(v16 + 538) & 0xFD;
                      if ((v52 == 1) != ((*(_BYTE *)(v51 + 538) & 0xFD) == 1))
                      {
                        if (v52 == 1)
                          goto LABEL_123;
                      }
                      else if (*(float *)(v16 + 488) <= *(float *)(v51 + 488))
                      {
                        goto LABEL_123;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v22 = *(_BYTE *)(v16 + 538) & 0xFD;
              if ((v22 == 1) != ((*(_BYTE *)(v20 + 538) & 0xFD) == 1))
              {
                if (v22 == 1)
                  goto LABEL_113;
              }
              else if (*(float *)(v16 + 488) <= *(float *)(v20 + 488))
              {
                goto LABEL_113;
              }
            }
          }
          for (i = v7 + 1; i < a2; ++i)
          {
            v48 = *i;
            if (v16 != *i)
            {
              v49 = *(_QWORD *)(v16 + 24);
              if (v49 && v49 == *(_QWORD *)(v48 + 24))
              {
                if (*(_DWORD *)(v16 + 32) < *(_DWORD *)(v48 + 32))
                  break;
              }
              else
              {
                v50 = *(_BYTE *)(v16 + 538) & 0xFD;
                if ((v50 == 1) != ((*(_BYTE *)(v48 + 538) & 0xFD) == 1))
                {
                  if (v50 == 1)
                    break;
                }
                else if (*(float *)(v16 + 488) <= *(float *)(v48 + 488))
                {
                  break;
                }
              }
            }
          }
LABEL_123:
          v53 = a2;
          if (i < a2)
          {
            v53 = a2 - 1;
            if (v16 != v20)
            {
              v54 = *(_QWORD *)(v16 + 24);
              if (v54)
              {
                v53 = a2 - 1;
                while (1)
                {
                  if (v54 == *(_QWORD *)(v20 + 24))
                  {
                    if (*(_DWORD *)(v16 + 32) >= *(_DWORD *)(v20 + 32))
                      goto LABEL_147;
                  }
                  else
                  {
                    v56 = *(_BYTE *)(v16 + 538) & 0xFD;
                    if ((v56 == 1) != ((*(_BYTE *)(v20 + 538) & 0xFD) == 1))
                    {
                      if (v56 != 1)
                        goto LABEL_147;
                    }
                    else if (*(float *)(v16 + 488) > *(float *)(v20 + 488))
                    {
                      goto LABEL_147;
                    }
                  }
                  v55 = *--v53;
                  v20 = v55;
                  if (v16 == v55)
                    goto LABEL_147;
                }
              }
              if ((*(_BYTE *)(v16 + 538) & 0xFD) == 1)
              {
                v53 = a2 - 1;
                do
                {
                  if ((*(_BYTE *)(v20 + 538) & 0xFD) == 1 && *(float *)(v16 + 488) > *(float *)(v20 + 488))
                    break;
                  v57 = *--v53;
                  v20 = v57;
                }
                while (v16 != v57);
              }
              else
              {
                v53 = a2 - 1;
                do
                {
                  if ((*(_BYTE *)(v20 + 538) & 0xFD) == 1)
                    break;
                  if (*(float *)(v16 + 488) > *(float *)(v20 + 488))
                    break;
                  v58 = *--v53;
                  v20 = v58;
                }
                while (v16 != v58);
              }
            }
          }
LABEL_147:
          if (i < v53)
          {
            v59 = *i;
            v60 = *v53;
            while (1)
            {
              *i++ = v60;
              *v53 = v59;
              while (1)
              {
                v59 = *i;
                if (v16 == *i)
                  goto LABEL_153;
                v61 = *(_QWORD *)(v16 + 24);
                if (!v61 || v61 != *(_QWORD *)(v59 + 24))
                  break;
                if (*(_DWORD *)(v16 + 32) < *(_DWORD *)(v59 + 32))
                {
                  v64 = *--v53;
                  v63 = v64;
                  v60 = v16;
                  if (v16 == v64)
                    goto LABEL_150;
LABEL_165:
                  v60 = v63;
                  while (1)
                  {
                    if (v61 == *(_QWORD *)(v60 + 24))
                    {
                      if (*(_DWORD *)(v16 + 32) >= *(_DWORD *)(v60 + 32))
                        goto LABEL_150;
                    }
                    else
                    {
                      v67 = *(_BYTE *)(v16 + 538) & 0xFD;
                      if ((v67 == 1) != ((*(_BYTE *)(v60 + 538) & 0xFD) == 1))
                      {
                        if (v67 != 1)
                          goto LABEL_150;
                      }
                      else if (*(float *)(v16 + 488) > *(float *)(v60 + 488))
                      {
                        goto LABEL_150;
                      }
                    }
                    v66 = *--v53;
                    v60 = v66;
                    if (v16 == v66)
                      goto LABEL_149;
                  }
                }
LABEL_153:
                ++i;
              }
              v62 = *(_BYTE *)(v16 + 538) & 0xFD;
              if ((v62 == 1) != ((*(_BYTE *)(v59 + 538) & 0xFD) == 1))
                break;
              if (*(float *)(v16 + 488) > *(float *)(v59 + 488))
                goto LABEL_153;
LABEL_163:
              v65 = *--v53;
              v63 = v65;
              if (v16 == v65)
              {
LABEL_149:
                v60 = v16;
                goto LABEL_150;
              }
              if (v61)
                goto LABEL_165;
              if (v62 == 1)
              {
                while ((*(_BYTE *)(v63 + 538) & 0xFD) != 1 || *(float *)(v16 + 488) <= *(float *)(v63 + 488))
                {
                  v69 = *--v53;
                  v63 = v69;
                  if (v16 == v69)
                    goto LABEL_149;
                }
              }
              else
              {
                while ((*(_BYTE *)(v63 + 538) & 0xFD) != 1 && *(float *)(v16 + 488) <= *(float *)(v63 + 488))
                {
                  v68 = *--v53;
                  v63 = v68;
                  if (v16 == v68)
                    goto LABEL_149;
                }
              }
              v60 = v63;
LABEL_150:
              if (i >= v53)
                goto LABEL_183;
            }
            if (v62 == 1)
              goto LABEL_163;
            goto LABEL_153;
          }
LABEL_183:
          v70 = i - 1;
          if (i - 1 != v7)
            *v7 = *v70;
          a4 = 0;
          *v70 = v16;
          continue;
        }
LABEL_22:
        v24 = v7 + 1;
        v23 = v7[1];
        if (v23 == v16)
        {
          v23 = *v7;
          if (v24 >= a2)
            goto LABEL_60;
LABEL_34:
          for (j = a2 - 1; ; --j)
          {
            v30 = *j;
            if (*j == v16)
            {
              if (v24 >= j)
                goto LABEL_55;
            }
            else
            {
              v31 = *(_QWORD *)(v30 + 24);
              if (v31 && v31 == *(_QWORD *)(v16 + 24))
              {
                if (*(_DWORD *)(v30 + 32) < *(_DWORD *)(v16 + 32) || v24 >= j)
                {
LABEL_55:
                  v25 = v24;
                  goto LABEL_70;
                }
              }
              else
              {
                v32 = *(_BYTE *)(v30 + 538) & 0xFD;
                if ((v32 == 1) != ((*(_BYTE *)(v16 + 538) & 0xFD) == 1))
                {
                  if (v24 >= j || v32 == 1)
                    goto LABEL_55;
                }
                else if (*(float *)(v30 + 488) <= *(float *)(v16 + 488) || v24 >= j)
                {
                  goto LABEL_55;
                }
              }
            }
          }
        }
        v25 = v7;
        while (2)
        {
          v26 = v25;
          v25 = v24;
          v27 = *(_QWORD *)(v23 + 24);
          if (v27 && v27 == *(_QWORD *)(v16 + 24))
          {
            if (*(_DWORD *)(v23 + 32) >= *(_DWORD *)(v16 + 32))
              goto LABEL_58;
LABEL_25:
            ++v24;
            v23 = v25[1];
            if (v23 == v16)
            {
              v23 = *v7;
              v26 = v25++;
              goto LABEL_58;
            }
            continue;
          }
          break;
        }
        v28 = *(_BYTE *)(v23 + 538) & 0xFD;
        if ((v28 == 1) == ((*(_BYTE *)(v16 + 538) & 0xFD) == 1))
        {
          if (*(float *)(v23 + 488) > *(float *)(v16 + 488))
            goto LABEL_58;
          goto LABEL_25;
        }
        if (v28 == 1)
          goto LABEL_25;
        v26 = v24 - 1;
LABEL_58:
        j = a2 - 1;
        if (v26 != v7)
        {
          while (1)
          {
            v35 = *j;
            if (*j != v16)
            {
              v36 = *(_QWORD *)(v35 + 24);
              if (v36 && v36 == *(_QWORD *)(v16 + 24))
              {
                if (*(_DWORD *)(v35 + 32) < *(_DWORD *)(v16 + 32))
                  goto LABEL_70;
              }
              else
              {
                v37 = *(_BYTE *)(v35 + 538) & 0xFD;
                if ((v37 == 1) != ((*(_BYTE *)(v16 + 538) & 0xFD) == 1))
                {
                  if (v37 == 1)
                    goto LABEL_70;
                }
                else if (*(float *)(v35 + 488) <= *(float *)(v16 + 488))
                {
                  goto LABEL_70;
                }
              }
            }
            --j;
          }
        }
        v24 = v25;
        if (v25 < a2)
          goto LABEL_34;
LABEL_60:
        v25 = v24;
        j = a2;
LABEL_70:
        i = v25;
        if (v25 < j)
        {
          v38 = *j;
          i = v25;
          v39 = j;
          do
          {
            *i = v38;
            *v39 = v23;
            do
            {
              while (1)
              {
                v40 = i[1];
                ++i;
                v23 = v40;
                if (v40 == v16)
                {
                  v23 = v16;
                  goto LABEL_85;
                }
                v41 = *(_QWORD *)(v23 + 24);
                if (v41)
                {
                  if (v41 == *(_QWORD *)(v16 + 24))
                    break;
                }
                v42 = *(_BYTE *)(v23 + 538) & 0xFD;
                if ((v42 == 1) != ((*(_BYTE *)(v16 + 538) & 0xFD) == 1))
                {
                  if (v42 != 1)
                    goto LABEL_85;
                }
                else if (*(float *)(v23 + 488) > *(float *)(v16 + 488))
                {
                  goto LABEL_85;
                }
              }
            }
            while (*(_DWORD *)(v23 + 32) < *(_DWORD *)(v16 + 32));
            do
            {
              while (1)
              {
                do
                {
LABEL_85:
                  v43 = *--v39;
                  v38 = v43;
                }
                while (v43 == v16);
                v44 = *(_QWORD *)(v38 + 24);
                if (v44)
                {
                  if (v44 == *(_QWORD *)(v16 + 24))
                    break;
                }
                v45 = *(_BYTE *)(v38 + 538) & 0xFD;
                if ((v45 == 1) != ((*(_BYTE *)(v16 + 538) & 0xFD) == 1))
                {
                  if (v45 == 1)
                    goto LABEL_72;
                }
                else if (*(float *)(v38 + 488) <= *(float *)(v16 + 488))
                {
                  goto LABEL_72;
                }
              }
            }
            while (*(_DWORD *)(v38 + 32) >= *(_DWORD *)(v16 + 32));
LABEL_72:
            ;
          }
          while (i < v39);
        }
        v46 = i - 1;
        if (i - 1 != v7)
          *v7 = *v46;
        *v46 = v16;
        if (v25 < j)
        {
LABEL_98:
          result = std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **,false>(v7, i - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(v7, i - 1);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(i, a2);
        if (!(_DWORD)result)
        {
          if (v47)
            continue;
          goto LABEL_98;
        }
        a2 = i - 1;
        if (!v47)
          goto LABEL_2;
        return result;
    }
  }
}

void md::MuninRoadLabelingContext::~MuninRoadLabelingContext(md::MuninRoadLabelingContext *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v3 = *a2;
  v4 = *result;
  if (*a2 == *result)
    goto LABEL_6;
  v5 = *(_QWORD *)(v3 + 24);
  if (v5 && v5 == *(_QWORD *)(v4 + 24))
  {
    if (*(_DWORD *)(v3 + 32) >= *(_DWORD *)(v4 + 32))
      goto LABEL_6;
    goto LABEL_13;
  }
  v6 = *(_BYTE *)(v3 + 538) & 0xFD;
  if ((v6 == 1) == ((*(_BYTE *)(v4 + 538) & 0xFD) == 1))
  {
    if (*(float *)(v3 + 488) > *(float *)(v4 + 488))
      goto LABEL_6;
LABEL_13:
    v10 = *a3;
    if (*a3 == v3)
      goto LABEL_37;
    v11 = *(_QWORD *)(v10 + 24);
    if (v11)
      v12 = v11 == v5;
    else
      v12 = 0;
    if (v12)
    {
      if (*(_DWORD *)(v10 + 32) >= *(_DWORD *)(v3 + 32))
        goto LABEL_37;
    }
    else
    {
      v13 = *(_BYTE *)(v10 + 538) & 0xFD;
      if ((v13 == 1) != ((*(_BYTE *)(v3 + 538) & 0xFD) == 1))
      {
        if (v13 != 1)
        {
LABEL_37:
          *result = v3;
          *a2 = v4;
          v18 = *a3;
          if (*a3 == v4)
            return result;
          v19 = *(_QWORD *)(v18 + 24);
          if (v19 && v19 == *(_QWORD *)(v4 + 24))
          {
            if (*(_DWORD *)(v18 + 32) >= *(_DWORD *)(v4 + 32))
              return result;
          }
          else
          {
            v20 = *(_BYTE *)(v18 + 538) & 0xFD;
            if ((v20 == 1) != ((*(_BYTE *)(v4 + 538) & 0xFD) == 1))
            {
              if (v20 != 1)
                return result;
            }
            else if (*(float *)(v18 + 488) > *(float *)(v4 + 488))
            {
              return result;
            }
          }
          *a2 = v18;
          *a3 = v4;
          return result;
        }
      }
      else if (*(float *)(v10 + 488) > *(float *)(v3 + 488))
      {
        goto LABEL_37;
      }
    }
    *result = v10;
    *a3 = v4;
    return result;
  }
  if (v6 == 1)
    goto LABEL_13;
LABEL_6:
  v7 = *a3;
  if (*a3 == v3)
    return result;
  v8 = *(_QWORD *)(v7 + 24);
  if (v8 && v8 == *(_QWORD *)(v3 + 24))
  {
    if (*(_DWORD *)(v7 + 32) >= *(_DWORD *)(v3 + 32))
      return result;
  }
  else
  {
    v9 = *(_BYTE *)(v7 + 538) & 0xFD;
    if ((v9 == 1) != ((*(_BYTE *)(v3 + 538) & 0xFD) == 1))
    {
      if (v9 != 1)
        return result;
    }
    else if (*(float *)(v7 + 488) > *(float *)(v3 + 488))
    {
      return result;
    }
  }
  *a2 = v7;
  *a3 = v3;
  v14 = *a2;
  v15 = *result;
  if (*a2 != *result)
  {
    v16 = *(_QWORD *)(v14 + 24);
    if (v16 && v16 == *(_QWORD *)(v15 + 24))
    {
      if (*(_DWORD *)(v14 + 32) < *(_DWORD *)(v15 + 32))
      {
LABEL_46:
        *result = v14;
        *a2 = v15;
      }
    }
    else
    {
      v17 = *(_BYTE *)(v14 + 538) & 0xFD;
      if ((v17 == 1) != ((*(_BYTE *)(v15 + 538) & 0xFD) == 1))
      {
        if (v17 == 1)
          goto LABEL_46;
      }
      else if (*(float *)(v14 + 488) <= *(float *)(v15 + 488))
      {
        goto LABEL_46;
      }
    }
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 != *a3)
  {
    v11 = *(_QWORD *)(v9 + 24);
    if (v11 && v11 == *(_QWORD *)(v10 + 24))
    {
      if (*(_DWORD *)(v9 + 32) >= *(_DWORD *)(v10 + 32))
        return result;
    }
    else
    {
      v12 = *(_BYTE *)(v9 + 538) & 0xFD;
      if ((v12 == 1) != ((*(_BYTE *)(v10 + 538) & 0xFD) == 1))
      {
        if (v12 != 1)
          return result;
      }
      else if (*(float *)(v9 + 488) > *(float *)(v10 + 488))
      {
        return result;
      }
    }
    *a3 = v9;
    *a4 = v10;
    v13 = *a3;
    v14 = *a2;
    if (*a3 != *a2)
    {
      v15 = *(_QWORD *)(v13 + 24);
      if (v15 && v15 == *(_QWORD *)(v14 + 24))
      {
        if (*(_DWORD *)(v13 + 32) >= *(_DWORD *)(v14 + 32))
          return result;
      }
      else
      {
        v16 = *(_BYTE *)(v13 + 538) & 0xFD;
        if ((v16 == 1) != ((*(_BYTE *)(v14 + 538) & 0xFD) == 1))
        {
          if (v16 != 1)
            return result;
        }
        else if (*(float *)(v13 + 488) > *(float *)(v14 + 488))
        {
          return result;
        }
      }
      *a2 = v13;
      *a3 = v14;
      v17 = *a2;
      v18 = *a1;
      if (*a2 != *a1)
      {
        v19 = *(_QWORD *)(v17 + 24);
        if (v19 && v19 == *(_QWORD *)(v18 + 24))
        {
          if (*(_DWORD *)(v17 + 32) >= *(_DWORD *)(v18 + 32))
            return result;
        }
        else
        {
          v20 = *(_BYTE *)(v17 + 538) & 0xFD;
          if ((v20 == 1) != ((*(_BYTE *)(v18 + 538) & 0xFD) == 1))
          {
            if (v20 != 1)
              return result;
          }
          else if (*(float *)(v17 + 488) > *(float *)(v18 + 488))
          {
            return result;
          }
        }
        *a1 = v17;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelSorter &,md::MuninRoadLabel **>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 != *a4)
  {
    v13 = *(_QWORD *)(v11 + 24);
    if (v13 && v13 == *(_QWORD *)(v12 + 24))
    {
      if (*(_DWORD *)(v11 + 32) >= *(_DWORD *)(v12 + 32))
        return result;
    }
    else
    {
      v14 = *(_BYTE *)(v11 + 538) & 0xFD;
      if ((v14 == 1) != ((*(_BYTE *)(v12 + 538) & 0xFD) == 1))
      {
        if (v14 != 1)
          return result;
      }
      else if (*(float *)(v11 + 488) > *(float *)(v12 + 488))
      {
        return result;
      }
    }
    *a4 = v11;
    *a5 = v12;
    v15 = *a4;
    v16 = *a3;
    if (*a4 != *a3)
    {
      v17 = *(_QWORD *)(v15 + 24);
      if (v17 && v17 == *(_QWORD *)(v16 + 24))
      {
        if (*(_DWORD *)(v15 + 32) >= *(_DWORD *)(v16 + 32))
          return result;
      }
      else
      {
        v18 = *(_BYTE *)(v15 + 538) & 0xFD;
        if ((v18 == 1) != ((*(_BYTE *)(v16 + 538) & 0xFD) == 1))
        {
          if (v18 != 1)
            return result;
        }
        else if (*(float *)(v15 + 488) > *(float *)(v16 + 488))
        {
          return result;
        }
      }
      *a3 = v15;
      *a4 = v16;
      v19 = *a3;
      v20 = *a2;
      if (*a3 != *a2)
      {
        v21 = *(_QWORD *)(v19 + 24);
        if (v21 && v21 == *(_QWORD *)(v20 + 24))
        {
          if (*(_DWORD *)(v19 + 32) >= *(_DWORD *)(v20 + 32))
            return result;
        }
        else
        {
          v22 = *(_BYTE *)(v19 + 538) & 0xFD;
          if ((v22 == 1) != ((*(_BYTE *)(v20 + 538) & 0xFD) == 1))
          {
            if (v22 != 1)
              return result;
          }
          else if (*(float *)(v19 + 488) > *(float *)(v20 + 488))
          {
            return result;
          }
        }
        *a2 = v19;
        *a3 = v20;
        v23 = *a2;
        v24 = *a1;
        if (*a2 != *a1)
        {
          v25 = *(_QWORD *)(v23 + 24);
          if (v25 && v25 == *(_QWORD *)(v24 + 24))
          {
            if (*(_DWORD *)(v23 + 32) >= *(_DWORD *)(v24 + 32))
              return result;
          }
          else
          {
            v26 = *(_BYTE *)(v23 + 538) & 0xFD;
            if ((v26 == 1) != ((*(_BYTE *)(v24 + 538) & 0xFD) == 1))
            {
              if (v26 != 1)
                return result;
            }
            else if (*(float *)(v23 + 488) > *(float *)(v24 + 488))
            {
              return result;
            }
          }
          *a1 = v23;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

