void sub_19F9525EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::AlphaFillPipelineState,std::shared_ptr<ggl::PolylineOverlayAlphaFillShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  int8x16_t v6;
  __int8 v7;
  int8x16_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unsigned __int8 v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  char v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  int v137;
  char v138;
  char v139;
  std::__shared_weak_count **v140;
  __int128 v141;
  __int128 v142;
  _BYTE v143[28];

  v5 = a3[2];
  v6.i16[3] = 0;
  v6.i8[8] = 0;
  v6.i16[5] = 0;
  v6.i32[3] = 0;
  v6.i16[0] = *(_WORD *)a3;
  *(__int32 *)((char *)v6.i32 + 2) = v5;
  v7 = a3[3];
  v6.i8[9] = v7;
  v8 = vceqzq_s8(v6);
  v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  v12 = v11;
  v13 = vmovl_high_s8(v8);
  v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  v15 = v11;
  v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  v17 = v11;
  v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v22), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v20), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v17), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v12), vbicq_s8((int8x16_t)xmmword_19FFB3080, v15)))));
  v24 = v23;
  v26 = (uint64_t **)(a2 + 104);
  v25 = *(_QWORD **)(a2 + 104);
  if (!v25)
    goto LABEL_12;
  v27 = (uint64_t **)(a2 + 104);
  do
  {
    v28 = v25[4];
    v29 = v28 >= v23;
    if (v28 >= v23)
      v30 = v25;
    else
      v30 = v25 + 1;
    if (v29)
      v27 = (uint64_t **)v25;
    v25 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    v125 = v27[6];
    a1[1] = (std::__shared_weak_count *)v125;
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 1);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
    }
  }
  else
  {
LABEL_12:
    v138 = a3[1];
    v139 = *a3;
    v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3AF8;
    v141 = *(_OWORD *)(a2 + 16);
    v142 = *(_OWORD *)(a2 + 32);
    v140 = a1;
    if ((v33 & 1) == 0
    {
      if ((v128 & 1) == 0
      {
        if ((v132 & 1) == 0
        {
          if ((v136 & 1) == 0
          {
            ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE324F8 = 1;
        }
        ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        unk_1ECE31A30 = &ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineDeviceStructs(void)::ref;
        qword_1ECE31A38 = 0;
        if ((v133 & 1) == 0
        {
          ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(_QWORD *)algn_1ECE31AA8 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE31AB0 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
        }
        qword_1ECE31A40 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref;
        *(_OWORD *)algn_1ECE31A48 = xmmword_19FFB35E0;
      }
      ggl::PolylineOverlayRibbon::AlphaFillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref;
      if ((v129 & 1) == 0
      {
        ggl::PolylineOverlayAlphaFillShader::typedReflection(void)::ref = (uint64_t)"PolylineOverlayAlphaFillShader";
        if ((v134 & 1) == 0
        {
          v137 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
          qword_1ECE426D8 = (uint64_t)"PolylineOverlayAlphaFillShader";
          unk_1ECE426E0 = ggl::polylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE426E8 = 1;
          unk_1ECE426F0 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE426F8 = 3;
          unk_1ECE42700 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42708 = 0;
          unk_1ECE42710 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = v137;
          *(_DWORD *)algn_1ECE426D4 = 0;
          qword_1ECE42718 = 0;
          unk_1ECE42720 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42730 = 0;
          unk_1ECE42738 = 0;
          qword_1ECE42728 = 0;
        }
        qword_1ECE3BA48 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3BA50 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
        if ((v135 & 1) == 0
        {
          qword_1ECE42E40 = 0;
          unk_1ECE42E48 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42E50 = 1;
          unk_1ECE42E58 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x17E32C928;
          qword_1ECE42E60 = 0;
          unk_1ECE42E68 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42E30 = (uint64_t)"PolylineOverlayAlphaFillShader";
          unk_1ECE42E38 = 0;
          qword_1ECE42E70 = 1;
          unk_1ECE42E78 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42E88 = 0;
          unk_1ECE42E90 = 0;
          qword_1ECE42E80 = 1;
        }
        qword_1ECE3BA58 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BA60 = 2117257512;
        qword_1ECE3BA68 = (uint64_t)ggl::polylineOverlayAlphaFillShaderShaderConstants(void)::ref;
        unk_1ECE3BA70 = 3;
        qword_1ECE3BA78 = (uint64_t)ggl::polylineOverlayAlphaFillShaderShaderTextures(void)::ref;
        unk_1ECE3BA80 = 1;
        qword_1ECE3BA88 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderShaderSamplers(void)::ref;
        unk_1ECE3BA90 = 1;
      }
      qword_1ECE2F3E8 = (uint64_t)&ggl::PolylineOverlayAlphaFillShader::typedReflection(void)::ref;
      if ((v130 & 1) == 0
      {
        ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE589178 = 0;
        qword_1EE589180 = (uint64_t)"";
        dword_1EE589188 = 0;
        qword_1EE589190 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeBinding_0(void)::attr;
        unk_1EE589198 = 5;
      }
      qword_1ECE2F3F0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE2F3F8 = 1;
      qword_1ECE2F400 = 0;
      unk_1ECE2F408 = 1;
      qword_1ECE2F410 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F418 = 0;
      if ((v131 & 1) == 0
      {
        ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5891B8 = 0;
        qword_1EE5891C0 = (uint64_t)"view";
        dword_1EE5891C8 = 3;
        qword_1EE5891D0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantViewBinding(void)::reflection;
        unk_1EE5891D8 = xmmword_19FFB35A0;
        qword_1EE5891E8 = 1;
        unk_1EE5891F0 = "transform";
        dword_1EE5891F8 = 3;
        qword_1EE589200 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantTransformBinding(void)::reflection;
        unk_1EE589208 = xmmword_19FFB3660;
        qword_1EE589218 = 2;
        unk_1EE589220 = "style";
        dword_1EE589228 = 3;
        qword_1EE589230 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStyleBinding(void)::reflection;
        unk_1EE589238 = 8;
      }
      qword_1ECE2F420 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F428 = 3;
    }
    v34 = *(std::__shared_weak_count_vtbl **)a2;
    v35 = *(std::__shared_weak_count **)(a2 + 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = v31 + 1;
    *(_OWORD *)v143 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v143[12] = *(_OWORD *)(a2 + 60);
    v39 = *(_OWORD *)(a2 + 76);
    v40 = *(_BYTE *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::PolylineOverlayRibbon::AlphaFillPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v34;
    v31[3].__shared_owners_ = (uint64_t)v35;
    if (v35)
    {
      v41 = (unint64_t *)&v35->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v141;
    *(_OWORD *)&v31[12].__shared_owners_ = v142;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v143[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v143;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v39;
    BYTE4(v31[5].__shared_owners_) = v40;
    if (v35)
    {
      v43 = (unint64_t *)&v35->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v139;
    BYTE1(v31[13].__shared_weak_owners_) = v138;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    v45 = *(int8x16_t *)&v31[14].__shared_owners_;
    v46 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    v47 = vmovl_high_s8(v46);
    v48 = vmovl_s16(*(int16x4_t *)v47.i8);
    v49.i64[0] = v48.u32[0];
    v49.i64[1] = v48.u32[1];
    v50 = v49;
    v51 = vmovl_s8(*(int8x8_t *)v46.i8);
    v52 = vmovl_s16(*(int16x4_t *)v51.i8);
    v49.i64[0] = v52.u32[0];
    v49.i64[1] = v52.u32[1];
    v53 = v49;
    v54 = vmovl_high_s16(v47);
    v49.i64[0] = v54.u32[0];
    v49.i64[1] = v54.u32[1];
    v55 = v49;
    v56 = vmovl_high_s16(v51);
    v49.i64[0] = v56.u32[0];
    v49.i64[1] = v56.u32[1];
    v57 = v49;
    v49.i64[0] = v48.u32[2];
    v49.i64[1] = v48.u32[3];
    v58 = v49;
    v49.i64[0] = v52.u32[2];
    v49.i64[1] = v52.u32[3];
    v59 = v49;
    v49.i64[0] = v54.u32[2];
    v49.i64[1] = v54.u32[3];
    v60 = v49;
    v49.i64[0] = v56.u32[2];
    v49.i64[1] = v56.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BAF30;
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v49);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v60);
    v63 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v59);
    v64 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v55);
    v65 = vceqzq_s8(v45);
    v66 = vmovl_high_s8(v65);
    v67 = vmovl_s16(*(int16x4_t *)v66.i8);
    v49.i64[0] = v67.u32[0];
    v49.i64[1] = v67.u32[1];
    v68 = v49;
    v69 = vmovl_s8(*(int8x8_t *)v65.i8);
    v70 = vmovl_s16(*(int16x4_t *)v69.i8);
    v49.i64[0] = v70.u32[0];
    v49.i64[1] = v70.u32[1];
    v71 = v49;
    v72 = vmovl_high_s16(v66);
    v49.i64[0] = v72.u32[0];
    v49.i64[1] = v72.u32[1];
    v73 = v49;
    v74 = vmovl_high_s16(v69);
    v49.i64[0] = v74.u32[0];
    v49.i64[1] = v74.u32[1];
    v75 = v49;
    v49.i64[0] = v67.u32[2];
    v49.i64[1] = v67.u32[3];
    v76 = v49;
    v49.i64[0] = v70.u32[2];
    v49.i64[1] = v70.u32[3];
    v77 = v49;
    v49.i64[0] = v72.u32[2];
    v49.i64[1] = v72.u32[3];
    v78 = v49;
    v49.i64[0] = v74.u32[2];
    v49.i64[1] = v74.u32[3];
    v79 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v78);
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v68), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v50));
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v71), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v53));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v73), v64);
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v75), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v57));
    v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v76), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v58));
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v77), v63);
    v86 = vorrq_s8(v79, v62);
    v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v49), v61);
    v88 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    v89 = vmovl_s8(*(int8x8_t *)v88.i8);
    v90 = vmovl_high_s16(v89);
    v49.i64[0] = v90.i32[2];
    v49.i64[1] = v90.i32[3];
    v91 = v49;
    v92 = vmovl_high_s8(v88);
    v93 = vmovl_high_s16(v92);
    v49.i64[0] = v93.i32[2];
    v49.i64[1] = v93.i32[3];
    v94 = v49;
    v95 = vmovl_s16(*(int16x4_t *)v89.i8);
    v49.i64[0] = v95.i32[2];
    v49.i64[1] = v95.i32[3];
    v96 = v49;
    v97 = vmovl_s16(*(int16x4_t *)v92.i8);
    v49.i64[0] = v97.i32[2];
    v49.i64[1] = v97.i32[3];
    v98 = v49;
    v49.i64[0] = v90.i32[0];
    v49.i64[1] = v90.i32[1];
    v99 = v49;
    v49.i64[0] = v93.i32[0];
    v49.i64[1] = v93.i32[1];
    v100 = v49;
    v49.i64[0] = v95.i32[0];
    v49.i64[1] = v95.i32[1];
    v101 = v49;
    v49.i64[0] = v97.i32[0];
    v49.i64[1] = v97.i32[1];
    v102 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v49);
    v103 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    v104 = vmovl_high_s8(v103);
    v105 = vmovl_s16(*(int16x4_t *)v104.i8);
    v49.i64[0] = v105.i32[0];
    v49.i64[1] = v105.i32[1];
    v106 = v49;
    v107 = vmovl_s8(*(int8x8_t *)v103.i8);
    v108 = vmovl_s16(*(int16x4_t *)v107.i8);
    v49.i64[0] = v108.i32[0];
    v49.i64[1] = v108.i32[1];
    v109 = v49;
    v110 = vmovl_high_s16(v104);
    v49.i64[0] = v110.i32[0];
    v49.i64[1] = v110.i32[1];
    v111 = v49;
    v112 = vmovl_high_s16(v107);
    v49.i64[0] = v112.i32[0];
    v49.i64[1] = v112.i32[1];
    v113 = v49;
    v49.i64[0] = v105.i32[2];
    v49.i64[1] = v105.i32[3];
    v114 = v49;
    v49.i64[0] = v108.i32[2];
    v49.i64[1] = v108.i32[3];
    v115 = v49;
    v49.i64[0] = v110.i32[2];
    v49.i64[1] = v110.i32[3];
    v116 = v49;
    v49.i64[0] = v112.i32[2];
    v49.i64[1] = v112.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v109), vbicq_s8((int8x16_t)xmmword_19FFB3170, v101)), v81), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v106), v102), v80)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v113), vbicq_s8((int8x16_t)xmmword_19FFB3190, v99)), v83), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v111),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v100)),
                                                    v82))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v115), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v96)), v85), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v114), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v98)), v84)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v49), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v91)), v87), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v116),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v94)),
                                                    v86)))));
    LOBYTE(v31[13].__vftable) = 1;
    *v140 = v38;
    v140[1] = v31;
    do
      v117 = __ldxr(p_shared_owners);
    while (__stxr(v117 + 1, p_shared_owners));
    v118 = *v26;
    v119 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          v119 = (uint64_t **)v118;
          v120 = v118[4];
          if (v24 >= v120)
            break;
          v118 = *v119;
          v26 = v119;
          if (!*v119)
            goto LABEL_33;
        }
        if (v120 >= v24)
          break;
        v118 = v119[1];
        if (!v118)
        {
          v26 = v119 + 1;
          goto LABEL_33;
        }
      }
      v123 = (unint64_t *)&v31->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_33:
      v121 = (uint64_t *)operator new(0x38uLL);
      v121[4] = v24;
      v121[5] = (uint64_t)v38;
      v121[6] = (uint64_t)v31;
      *v121 = 0;
      v121[1] = 0;
      v121[2] = (uint64_t)v119;
      *v26 = v121;
      v122 = **(_QWORD **)(a2 + 96);
      if (v122)
      {
        *(_QWORD *)(a2 + 96) = v122;
        v121 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v121);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F9532B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::AlphaPipelineState,std::shared_ptr<ggl::PolylineOverlayAlphaShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  int8x16_t v6;
  __int8 v7;
  int8x16_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unsigned __int8 v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  char v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t *v126;
  unint64_t v127;
  ggl::PolylineOverlayAlphaShader *v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  char v135;
  char v136;
  std::__shared_weak_count **v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[28];

  v5 = a3[2];
  v6.i16[3] = 0;
  v6.i8[8] = 0;
  v6.i16[5] = 0;
  v6.i32[3] = 0;
  v6.i16[0] = *(_WORD *)a3;
  *(__int32 *)((char *)v6.i32 + 2) = v5;
  v7 = a3[3];
  v6.i8[9] = v7;
  v8 = vceqzq_s8(v6);
  v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  v12 = v11;
  v13 = vmovl_high_s8(v8);
  v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  v15 = v11;
  v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  v17 = v11;
  v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v22), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v20), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v17), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v12), vbicq_s8((int8x16_t)xmmword_19FFB3080, v15)))));
  v24 = v23;
  v26 = (uint64_t **)(a2 + 104);
  v25 = *(_QWORD **)(a2 + 104);
  if (!v25)
    goto LABEL_12;
  v27 = (uint64_t **)(a2 + 104);
  do
  {
    v28 = v25[4];
    v29 = v28 >= v23;
    if (v28 >= v23)
      v30 = v25;
    else
      v30 = v25 + 1;
    if (v29)
      v27 = (uint64_t **)v25;
    v25 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    v125 = v27[6];
    a1[1] = (std::__shared_weak_count *)v125;
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 1);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
    }
  }
  else
  {
LABEL_12:
    v135 = a3[1];
    v136 = *a3;
    v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3AC0;
    v138 = *(_OWORD *)(a2 + 16);
    v139 = *(_OWORD *)(a2 + 32);
    v137 = a1;
    if ((v33 & 1) == 0)
    {
      if ((_DWORD)v128)
      {
        if ((v129 & 1) == 0)
        {
          if ((_DWORD)v128)
          {
            if ((v132 & 1) == 0
            {
              if ((v134 & 1) == 0
              {
                ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
              }
              ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
              unk_1ECE324F8 = 1;
            }
            ggl::PolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
            unk_1ECE31A00 = &ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineDeviceStructs(void)::ref;
            qword_1ECE31A08 = 0;
            if ((v133 & 1) == 0
            {
              ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(_QWORD *)algn_1ECE31A88 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1ECE31A90 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
            }
            qword_1ECE31A10 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref;
            unk_1ECE31A18 = xmmword_19FFB35E0;
          }
        }
        ggl::PolylineOverlayRibbon::AlphaPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref;
        ggl::PolylineOverlayAlphaShader::typedReflection(v128);
        qword_1ECE2FA78 = (uint64_t)&ggl::PolylineOverlayAlphaShader::typedReflection(void)::ref;
        if ((v130 & 1) == 0
        {
          ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE589098 = 0;
          qword_1EE5890A0 = (uint64_t)"";
          dword_1EE5890A8 = 0;
          qword_1EE5890B0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeBinding_0(void)::attr;
          unk_1EE5890B8 = 5;
        }
        qword_1ECE2FA80 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1ECE2FA88 = 1;
        qword_1ECE2FA90 = 0;
        unk_1ECE2FA98 = 1;
        qword_1ECE2FAA0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineDeviceStructBinding(void)::ref;
        unk_1ECE2FAA8 = 0;
        if ((v131 & 1) == 0
        {
          ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE5890D8 = 0;
          qword_1EE5890E0 = (uint64_t)"view";
          dword_1EE5890E8 = 3;
          qword_1EE5890F0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantViewBinding(void)::reflection;
          unk_1EE5890F8 = xmmword_19FFB35A0;
          qword_1EE589108 = 1;
          unk_1EE589110 = "transform";
          dword_1EE589118 = 3;
          qword_1EE589120 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantTransformBinding(void)::reflection;
          unk_1EE589128 = xmmword_19FFB3660;
          qword_1EE589138 = 2;
          unk_1EE589140 = "style";
          dword_1EE589148 = 3;
          qword_1EE589150 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStyleBinding(void)::reflection;
          unk_1EE589158 = 8;
        }
        qword_1ECE2FAB0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStructBinding(void)::ref;
        *(_QWORD *)algn_1ECE2FAB8 = 3;
      }
    }
    v34 = *(std::__shared_weak_count_vtbl **)a2;
    v35 = *(std::__shared_weak_count **)(a2 + 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = v31 + 1;
    *(_OWORD *)v140 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v140[12] = *(_OWORD *)(a2 + 60);
    v39 = *(_OWORD *)(a2 + 76);
    v40 = *(_BYTE *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::PolylineOverlayRibbon::AlphaPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v34;
    v31[3].__shared_owners_ = (uint64_t)v35;
    if (v35)
    {
      v41 = (unint64_t *)&v35->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v138;
    *(_OWORD *)&v31[12].__shared_owners_ = v139;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v140[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v140;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v39;
    BYTE4(v31[5].__shared_owners_) = v40;
    if (v35)
    {
      v43 = (unint64_t *)&v35->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v136;
    BYTE1(v31[13].__shared_weak_owners_) = v135;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    v45 = *(int8x16_t *)&v31[14].__shared_owners_;
    v46 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    v47 = vmovl_high_s8(v46);
    v48 = vmovl_s16(*(int16x4_t *)v47.i8);
    v49.i64[0] = v48.u32[0];
    v49.i64[1] = v48.u32[1];
    v50 = v49;
    v51 = vmovl_s8(*(int8x8_t *)v46.i8);
    v52 = vmovl_s16(*(int16x4_t *)v51.i8);
    v49.i64[0] = v52.u32[0];
    v49.i64[1] = v52.u32[1];
    v53 = v49;
    v54 = vmovl_high_s16(v47);
    v49.i64[0] = v54.u32[0];
    v49.i64[1] = v54.u32[1];
    v55 = v49;
    v56 = vmovl_high_s16(v51);
    v49.i64[0] = v56.u32[0];
    v49.i64[1] = v56.u32[1];
    v57 = v49;
    v49.i64[0] = v48.u32[2];
    v49.i64[1] = v48.u32[3];
    v58 = v49;
    v49.i64[0] = v52.u32[2];
    v49.i64[1] = v52.u32[3];
    v59 = v49;
    v49.i64[0] = v54.u32[2];
    v49.i64[1] = v54.u32[3];
    v60 = v49;
    v49.i64[0] = v56.u32[2];
    v49.i64[1] = v56.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BAEE0;
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v49);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v60);
    v63 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v59);
    v64 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v55);
    v65 = vceqzq_s8(v45);
    v66 = vmovl_high_s8(v65);
    v67 = vmovl_s16(*(int16x4_t *)v66.i8);
    v49.i64[0] = v67.u32[0];
    v49.i64[1] = v67.u32[1];
    v68 = v49;
    v69 = vmovl_s8(*(int8x8_t *)v65.i8);
    v70 = vmovl_s16(*(int16x4_t *)v69.i8);
    v49.i64[0] = v70.u32[0];
    v49.i64[1] = v70.u32[1];
    v71 = v49;
    v72 = vmovl_high_s16(v66);
    v49.i64[0] = v72.u32[0];
    v49.i64[1] = v72.u32[1];
    v73 = v49;
    v74 = vmovl_high_s16(v69);
    v49.i64[0] = v74.u32[0];
    v49.i64[1] = v74.u32[1];
    v75 = v49;
    v49.i64[0] = v67.u32[2];
    v49.i64[1] = v67.u32[3];
    v76 = v49;
    v49.i64[0] = v70.u32[2];
    v49.i64[1] = v70.u32[3];
    v77 = v49;
    v49.i64[0] = v72.u32[2];
    v49.i64[1] = v72.u32[3];
    v78 = v49;
    v49.i64[0] = v74.u32[2];
    v49.i64[1] = v74.u32[3];
    v79 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v78);
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v68), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v50));
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v71), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v53));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v73), v64);
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v75), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v57));
    v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v76), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v58));
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v77), v63);
    v86 = vorrq_s8(v79, v62);
    v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v49), v61);
    v88 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    v89 = vmovl_s8(*(int8x8_t *)v88.i8);
    v90 = vmovl_high_s16(v89);
    v49.i64[0] = v90.i32[2];
    v49.i64[1] = v90.i32[3];
    v91 = v49;
    v92 = vmovl_high_s8(v88);
    v93 = vmovl_high_s16(v92);
    v49.i64[0] = v93.i32[2];
    v49.i64[1] = v93.i32[3];
    v94 = v49;
    v95 = vmovl_s16(*(int16x4_t *)v89.i8);
    v49.i64[0] = v95.i32[2];
    v49.i64[1] = v95.i32[3];
    v96 = v49;
    v97 = vmovl_s16(*(int16x4_t *)v92.i8);
    v49.i64[0] = v97.i32[2];
    v49.i64[1] = v97.i32[3];
    v98 = v49;
    v49.i64[0] = v90.i32[0];
    v49.i64[1] = v90.i32[1];
    v99 = v49;
    v49.i64[0] = v93.i32[0];
    v49.i64[1] = v93.i32[1];
    v100 = v49;
    v49.i64[0] = v95.i32[0];
    v49.i64[1] = v95.i32[1];
    v101 = v49;
    v49.i64[0] = v97.i32[0];
    v49.i64[1] = v97.i32[1];
    v102 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v49);
    v103 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    v104 = vmovl_high_s8(v103);
    v105 = vmovl_s16(*(int16x4_t *)v104.i8);
    v49.i64[0] = v105.i32[0];
    v49.i64[1] = v105.i32[1];
    v106 = v49;
    v107 = vmovl_s8(*(int8x8_t *)v103.i8);
    v108 = vmovl_s16(*(int16x4_t *)v107.i8);
    v49.i64[0] = v108.i32[0];
    v49.i64[1] = v108.i32[1];
    v109 = v49;
    v110 = vmovl_high_s16(v104);
    v49.i64[0] = v110.i32[0];
    v49.i64[1] = v110.i32[1];
    v111 = v49;
    v112 = vmovl_high_s16(v107);
    v49.i64[0] = v112.i32[0];
    v49.i64[1] = v112.i32[1];
    v113 = v49;
    v49.i64[0] = v105.i32[2];
    v49.i64[1] = v105.i32[3];
    v114 = v49;
    v49.i64[0] = v108.i32[2];
    v49.i64[1] = v108.i32[3];
    v115 = v49;
    v49.i64[0] = v110.i32[2];
    v49.i64[1] = v110.i32[3];
    v116 = v49;
    v49.i64[0] = v112.i32[2];
    v49.i64[1] = v112.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v109), vbicq_s8((int8x16_t)xmmword_19FFB3170, v101)), v81), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v106), v102), v80)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v113), vbicq_s8((int8x16_t)xmmword_19FFB3190, v99)), v83), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v111),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v100)),
                                                    v82))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v115), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v96)), v85), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v114), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v98)), v84)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v49), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v91)), v87), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v116),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v94)),
                                                    v86)))));
    LOBYTE(v31[13].__vftable) = 1;
    *v137 = v38;
    v137[1] = v31;
    do
      v117 = __ldxr(p_shared_owners);
    while (__stxr(v117 + 1, p_shared_owners));
    v118 = *v26;
    v119 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          v119 = (uint64_t **)v118;
          v120 = v118[4];
          if (v24 >= v120)
            break;
          v118 = *v119;
          v26 = v119;
          if (!*v119)
            goto LABEL_33;
        }
        if (v120 >= v24)
          break;
        v118 = v119[1];
        if (!v118)
        {
          v26 = v119 + 1;
          goto LABEL_33;
        }
      }
      v123 = (unint64_t *)&v31->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_33:
      v121 = (uint64_t *)operator new(0x38uLL);
      v121[4] = v24;
      v121[5] = (uint64_t)v38;
      v121[6] = (uint64_t)v31;
      *v121 = 0;
      v121[1] = 0;
      v121[2] = (uint64_t)v119;
      *v26 = v121;
      v122 = **(_QWORD **)(a2 + 96);
      if (v122)
      {
        *(_QWORD *)(a2 + 96) = v122;
        v121 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v121);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F953CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::PolylineOverlayFillShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  int8x16_t v6;
  __int8 v7;
  int8x16_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unsigned __int8 v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  char v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t *v126;
  unint64_t v127;
  ggl::PolylineOverlayFillShader *v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  char v135;
  char v136;
  std::__shared_weak_count **v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[28];

  v5 = a3[2];
  v6.i16[3] = 0;
  v6.i8[8] = 0;
  v6.i16[5] = 0;
  v6.i32[3] = 0;
  v6.i16[0] = *(_WORD *)a3;
  *(__int32 *)((char *)v6.i32 + 2) = v5;
  v7 = a3[3];
  v6.i8[9] = v7;
  v8 = vceqzq_s8(v6);
  v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  v12 = v11;
  v13 = vmovl_high_s8(v8);
  v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  v15 = v11;
  v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  v17 = v11;
  v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v22), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v20), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v17), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v12), vbicq_s8((int8x16_t)xmmword_19FFB3080, v15)))));
  v24 = v23;
  v26 = (uint64_t **)(a2 + 104);
  v25 = *(_QWORD **)(a2 + 104);
  if (!v25)
    goto LABEL_12;
  v27 = (uint64_t **)(a2 + 104);
  do
  {
    v28 = v25[4];
    v29 = v28 >= v23;
    if (v28 >= v23)
      v30 = v25;
    else
      v30 = v25 + 1;
    if (v29)
      v27 = (uint64_t **)v25;
    v25 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    v125 = v27[6];
    a1[1] = (std::__shared_weak_count *)v125;
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 1);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
    }
  }
  else
  {
LABEL_12:
    v135 = a3[1];
    v136 = *a3;
    v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3A88;
    v138 = *(_OWORD *)(a2 + 16);
    v139 = *(_OWORD *)(a2 + 32);
    v137 = a1;
    if ((v33 & 1) == 0)
    {
      if ((_DWORD)v128)
      {
        if ((v129 & 1) == 0)
        {
          if ((_DWORD)v128)
          {
            if ((v132 & 1) == 0
            {
              if ((v134 & 1) == 0
              {
                ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
              }
              ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
              unk_1ECE324F8 = 1;
            }
            ggl::PolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
            unk_1ECE319D0 = &ggl::PolylineOverlayRibbon::pipelineDataFillPipelineDeviceStructs(void)::ref;
            qword_1ECE319D8 = 0;
            if ((v133 & 1) == 0
            {
              ggl::PolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(_QWORD *)algn_1ECE31A68 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1ECE31A70 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
            }
            qword_1ECE319E0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref;
            unk_1ECE319E8 = xmmword_19FFB35E0;
          }
        }
        ggl::PolylineOverlayRibbon::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref;
        ggl::PolylineOverlayFillShader::typedReflection(v128);
        qword_1ECE2FA28 = (uint64_t)&ggl::PolylineOverlayFillShader::typedReflection(void)::ref;
        if ((v130 & 1) == 0
        {
          ggl::PolylineOverlayRibbon::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE588FB8 = 0;
          qword_1EE588FC0 = (uint64_t)"";
          dword_1EE588FC8 = 0;
          qword_1EE588FD0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
          unk_1EE588FD8 = 5;
        }
        qword_1ECE2FA30 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1ECE2FA38 = 1;
        qword_1ECE2FA40 = 0;
        unk_1ECE2FA48 = 1;
        qword_1ECE2FA50 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
        unk_1ECE2FA58 = 0;
        if ((v131 & 1) == 0
        {
          ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE588FF8 = 0;
          qword_1EE589000 = (uint64_t)"view";
          dword_1EE589008 = 3;
          qword_1EE589010 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
          unk_1EE589018 = xmmword_19FFB35A0;
          qword_1EE589028 = 1;
          unk_1EE589030 = "transform";
          dword_1EE589038 = 3;
          qword_1EE589040 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
          unk_1EE589048 = xmmword_19FFB3660;
          qword_1EE589058 = 2;
          unk_1EE589060 = "style";
          dword_1EE589068 = 3;
          qword_1EE589070 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantStyleBinding(void)::reflection;
          unk_1EE589078 = 8;
        }
        qword_1ECE2FA60 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantStructBinding(void)::ref;
        *(_QWORD *)algn_1ECE2FA68 = 3;
      }
    }
    v34 = *(std::__shared_weak_count_vtbl **)a2;
    v35 = *(std::__shared_weak_count **)(a2 + 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = v31 + 1;
    *(_OWORD *)v140 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v140[12] = *(_OWORD *)(a2 + 60);
    v39 = *(_OWORD *)(a2 + 76);
    v40 = *(_BYTE *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::PolylineOverlayRibbon::FillPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v34;
    v31[3].__shared_owners_ = (uint64_t)v35;
    if (v35)
    {
      v41 = (unint64_t *)&v35->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v138;
    *(_OWORD *)&v31[12].__shared_owners_ = v139;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v140[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v140;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v39;
    BYTE4(v31[5].__shared_owners_) = v40;
    if (v35)
    {
      v43 = (unint64_t *)&v35->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v136;
    BYTE1(v31[13].__shared_weak_owners_) = v135;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    v45 = *(int8x16_t *)&v31[14].__shared_owners_;
    v46 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    v47 = vmovl_high_s8(v46);
    v48 = vmovl_s16(*(int16x4_t *)v47.i8);
    v49.i64[0] = v48.u32[0];
    v49.i64[1] = v48.u32[1];
    v50 = v49;
    v51 = vmovl_s8(*(int8x8_t *)v46.i8);
    v52 = vmovl_s16(*(int16x4_t *)v51.i8);
    v49.i64[0] = v52.u32[0];
    v49.i64[1] = v52.u32[1];
    v53 = v49;
    v54 = vmovl_high_s16(v47);
    v49.i64[0] = v54.u32[0];
    v49.i64[1] = v54.u32[1];
    v55 = v49;
    v56 = vmovl_high_s16(v51);
    v49.i64[0] = v56.u32[0];
    v49.i64[1] = v56.u32[1];
    v57 = v49;
    v49.i64[0] = v48.u32[2];
    v49.i64[1] = v48.u32[3];
    v58 = v49;
    v49.i64[0] = v52.u32[2];
    v49.i64[1] = v52.u32[3];
    v59 = v49;
    v49.i64[0] = v54.u32[2];
    v49.i64[1] = v54.u32[3];
    v60 = v49;
    v49.i64[0] = v56.u32[2];
    v49.i64[1] = v56.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BAE90;
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v49);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v60);
    v63 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v59);
    v64 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v55);
    v65 = vceqzq_s8(v45);
    v66 = vmovl_high_s8(v65);
    v67 = vmovl_s16(*(int16x4_t *)v66.i8);
    v49.i64[0] = v67.u32[0];
    v49.i64[1] = v67.u32[1];
    v68 = v49;
    v69 = vmovl_s8(*(int8x8_t *)v65.i8);
    v70 = vmovl_s16(*(int16x4_t *)v69.i8);
    v49.i64[0] = v70.u32[0];
    v49.i64[1] = v70.u32[1];
    v71 = v49;
    v72 = vmovl_high_s16(v66);
    v49.i64[0] = v72.u32[0];
    v49.i64[1] = v72.u32[1];
    v73 = v49;
    v74 = vmovl_high_s16(v69);
    v49.i64[0] = v74.u32[0];
    v49.i64[1] = v74.u32[1];
    v75 = v49;
    v49.i64[0] = v67.u32[2];
    v49.i64[1] = v67.u32[3];
    v76 = v49;
    v49.i64[0] = v70.u32[2];
    v49.i64[1] = v70.u32[3];
    v77 = v49;
    v49.i64[0] = v72.u32[2];
    v49.i64[1] = v72.u32[3];
    v78 = v49;
    v49.i64[0] = v74.u32[2];
    v49.i64[1] = v74.u32[3];
    v79 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v78);
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v68), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v50));
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v71), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v53));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v73), v64);
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v75), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v57));
    v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v76), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v58));
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v77), v63);
    v86 = vorrq_s8(v79, v62);
    v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v49), v61);
    v88 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    v89 = vmovl_s8(*(int8x8_t *)v88.i8);
    v90 = vmovl_high_s16(v89);
    v49.i64[0] = v90.i32[2];
    v49.i64[1] = v90.i32[3];
    v91 = v49;
    v92 = vmovl_high_s8(v88);
    v93 = vmovl_high_s16(v92);
    v49.i64[0] = v93.i32[2];
    v49.i64[1] = v93.i32[3];
    v94 = v49;
    v95 = vmovl_s16(*(int16x4_t *)v89.i8);
    v49.i64[0] = v95.i32[2];
    v49.i64[1] = v95.i32[3];
    v96 = v49;
    v97 = vmovl_s16(*(int16x4_t *)v92.i8);
    v49.i64[0] = v97.i32[2];
    v49.i64[1] = v97.i32[3];
    v98 = v49;
    v49.i64[0] = v90.i32[0];
    v49.i64[1] = v90.i32[1];
    v99 = v49;
    v49.i64[0] = v93.i32[0];
    v49.i64[1] = v93.i32[1];
    v100 = v49;
    v49.i64[0] = v95.i32[0];
    v49.i64[1] = v95.i32[1];
    v101 = v49;
    v49.i64[0] = v97.i32[0];
    v49.i64[1] = v97.i32[1];
    v102 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v49);
    v103 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    v104 = vmovl_high_s8(v103);
    v105 = vmovl_s16(*(int16x4_t *)v104.i8);
    v49.i64[0] = v105.i32[0];
    v49.i64[1] = v105.i32[1];
    v106 = v49;
    v107 = vmovl_s8(*(int8x8_t *)v103.i8);
    v108 = vmovl_s16(*(int16x4_t *)v107.i8);
    v49.i64[0] = v108.i32[0];
    v49.i64[1] = v108.i32[1];
    v109 = v49;
    v110 = vmovl_high_s16(v104);
    v49.i64[0] = v110.i32[0];
    v49.i64[1] = v110.i32[1];
    v111 = v49;
    v112 = vmovl_high_s16(v107);
    v49.i64[0] = v112.i32[0];
    v49.i64[1] = v112.i32[1];
    v113 = v49;
    v49.i64[0] = v105.i32[2];
    v49.i64[1] = v105.i32[3];
    v114 = v49;
    v49.i64[0] = v108.i32[2];
    v49.i64[1] = v108.i32[3];
    v115 = v49;
    v49.i64[0] = v110.i32[2];
    v49.i64[1] = v110.i32[3];
    v116 = v49;
    v49.i64[0] = v112.i32[2];
    v49.i64[1] = v112.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v109), vbicq_s8((int8x16_t)xmmword_19FFB3170, v101)), v81), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v106), v102), v80)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v113), vbicq_s8((int8x16_t)xmmword_19FFB3190, v99)), v83), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v111),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v100)),
                                                    v82))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v115), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v96)), v85), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v114), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v98)), v84)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v49), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v91)), v87), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v116),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v94)),
                                                    v86)))));
    LOBYTE(v31[13].__vftable) = 1;
    *v137 = v38;
    v137[1] = v31;
    do
      v117 = __ldxr(p_shared_owners);
    while (__stxr(v117 + 1, p_shared_owners));
    v118 = *v26;
    v119 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          v119 = (uint64_t **)v118;
          v120 = v118[4];
          if (v24 >= v120)
            break;
          v118 = *v119;
          v26 = v119;
          if (!*v119)
            goto LABEL_33;
        }
        if (v120 >= v24)
          break;
        v118 = v119[1];
        if (!v118)
        {
          v26 = v119 + 1;
          goto LABEL_33;
        }
      }
      v123 = (unint64_t *)&v31->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_33:
      v121 = (uint64_t *)operator new(0x38uLL);
      v121[4] = v24;
      v121[5] = (uint64_t)v38;
      v121[6] = (uint64_t)v31;
      *v121 = 0;
      v121[1] = 0;
      v121[2] = (uint64_t)v119;
      *v26 = v121;
      v122 = **(_QWORD **)(a2 + 96);
      if (v122)
      {
        *(_QWORD *)(a2 + 96) = v122;
        v121 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v121);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F9546D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaFillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaFillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaFillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *md::PolylineOverlayStyle::setStyleConstants(_QWORD *result, uint64_t a2, __int32 *a3, float a4, float32_t a5)
{
  unint64_t v5;
  float32x2_t *v6;

  v5 = result[1];
  v6 = (float32x2_t *)result[9];
  v6[2] = 0;
  v6->i32[0] = *a3;
  v6->i32[1] = a3[1];
  v6[1].i32[0] = a3[2];
  v6[1].i32[1] = a3[3];
  v6[3].f32[0] = *(float *)(a2 + 4) * 0.5;
  v6[3].f32[1] = a5;
  v6[4].f32[0] = *(float *)(a2 + 28) * a4;
  v6[5].i32[0] = *(_DWORD *)(a2 + 36);
  v6[5].i32[1] = *(_DWORD *)(a2 + 40);
  v6[7].i32[0] = *(_DWORD *)(a2 + 52);
  v6[6] = vneg_f32((float32x2_t)vrev64_s32(*(int32x2_t *)(a2 + 44)));
  if (result[8] > v5)
    v5 = result[8];
  result[7] = 0;
  result[8] = v5;
  return result;
}

uint64_t md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::RibbonLayer(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, char *a6)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD);
  void (***v45)(_QWORD);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  __int128 v53;
  int64x2_t v54;
  unsigned __int8 v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t *v103;
  int64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  void (***v122)(_QWORD, uint64_t);
  void (***v123)(_QWORD, uint64_t);
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  void (***v128)(_QWORD, uint64_t);
  void (***v129)(_QWORD, uint64_t);
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  int64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t *v147;
  int64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t *v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  _QWORD *v166;
  malloc_zone_t *zone;
  void (***v168)(_QWORD, uint64_t);
  void (***v169)(_QWORD, uint64_t);
  unsigned __int8 v170;
  uint64_t v171;
  geo::read_write_lock *v172;
  const char *v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  void (***v177)(_QWORD, uint64_t);
  void (***v178)(_QWORD, uint64_t);
  unsigned __int8 v179;
  uint64_t v180;
  float64x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  _QWORD *v184;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  BOOL v199;
  unint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _OWORD *v203;
  __int128 *v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  _QWORD *v209;
  void (***v210)(_QWORD);
  void (***v211)(_QWORD);
  unsigned __int8 v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int8x16_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  unint64_t v240;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  _QWORD *v254;
  _QWORD *v255;
  void (***v256)(_QWORD, uint64_t);
  void (***v257)(_QWORD, uint64_t);
  unsigned __int8 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  void (***v262)(_QWORD, uint64_t);
  void (***v263)(_QWORD, uint64_t);
  unsigned __int8 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  void (***v270)(_QWORD, uint64_t);
  void (***v271)(_QWORD, uint64_t);
  unsigned __int8 v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  int v278;
  char v279;
  int64_t v280;
  _QWORD *v281;
  char *v282;
  _QWORD *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD **v286;
  _QWORD **v287;
  char *v288;
  _QWORD *v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  float v299;
  float *v300;
  float v301;
  uint64_t v302;
  float v303;
  float v304;
  float v305;
  float v306;
  unint64_t v307;
  float v308;
  float v309;
  float v310;
  uint64_t v311;
  int v312;
  double v313;
  float *v314;
  uint64_t v315;
  uint64_t v316;
  float v317;
  unint64_t v318;
  float v319;
  float v320;
  uint64_t v321;
  float *v322;
  float v323;
  float v324;
  float *v325;
  uint64_t v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  double v333;
  double v334;
  float v335;
  int v336;
  float v337;
  _QWORD *v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  _BYTE *v348;
  _QWORD *v349;
  char *v350;
  unint64_t v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  _OWORD *v355;
  char *v356;
  uint64_t v357;
  __int128 v358;
  gdc::GlobeTileGrid *v359;
  char *v360;
  gdc::GlobeTileGrid *v361;
  char *v362;
  gdc::GlobeTileGrid *v363;
  uint64_t v364;
  char *v365;
  uint64_t *v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  gdc::GlobeTileGrid *v373;
  uint64_t v374;
  float *v375;
  float v376;
  unsigned int v377;
  float v378;
  unsigned int v379;
  float *v380;
  float v381;
  float v382;
  char *v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  std::__shared_count v391;
  unsigned __int8 v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  std::__shared_weak_count *v395;
  std::__shared_count v396;
  unsigned __int8 v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unsigned __int8 v401;
  uint64_t v402;
  unsigned __int8 v403;
  uint64_t v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t *v416;
  _QWORD *v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  _BYTE *v424;
  uint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  _OWORD *v428;
  uint64_t *v429;
  uint64_t v430;
  __int128 v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _QWORD *v447;
  _QWORD *v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  _QWORD *v460;
  int v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  unsigned __int8 v465;
  int v466;
  uint64_t v467;
  geo::read_write_lock *v468;
  const char *v469;
  malloc_zone_t *v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  geo::read_write_lock *v474;
  const char *v475;
  malloc_zone_t *v476;
  uint64_t v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t *v481;
  unint64_t v482;
  uint64_t v483;
  float v484;
  uint64_t **v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  __int128 v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  __int128 v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t *v507;
  void *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  int8x16_t v514;
  unint64_t v515;
  char *v516;
  int32x2_t v517;
  unint64_t v518;
  unint64_t v519;
  float v520;
  float32x2_t v521;
  int8x16_t v522;
  _OWORD *v523;
  float32x4_t v524;
  unint64_t v525;
  float32x4_t v526;
  const float *v527;
  int8x16_t v528;
  int32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  unint64_t v536;
  float32x2_t *v537;
  float32x2_t v538;
  float32x2_t v539;
  double v540;
  float v541;
  float v542;
  float *v543;
  float v544;
  uint64_t v545;
  float v546;
  float v547;
  float v548;
  float v549;
  float v550;
  float v551;
  float v552;
  int v553;
  char *v554;
  __int128 *v555;
  unsigned int v556;
  float *v557;
  unint64_t v558;
  uint64_t v559;
  float v560;
  int32x2_t v561;
  float v562;
  float v563;
  float *v564;
  float v565;
  float v566;
  float *v567;
  unint64_t v568;
  float v569;
  float32x2_t v570;
  int32x2_t v571;
  float v572;
  float v573;
  float v574;
  float v575;
  unsigned int v576;
  float *v577;
  float v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float v583;
  float v584;
  float v585;
  int v586;
  uint64_t v587;
  float v588;
  float v589;
  float v590;
  float v591;
  double v592;
  float v593;
  float v594;
  float v595;
  int v596;
  long double v597;
  float v598;
  unint64_t v599;
  float v601;
  float v607;
  float v608;
  float v609;
  float v613;
  float v614;
  float v615;
  float v618;
  float v622;
  float v623;
  float v624;
  float v625;
  float v626;
  float v627;
  float v628;
  float v629;
  float v630;
  unsigned int v631;
  unsigned int v632;
  float v633;
  int8x16_t v634;
  _BYTE *v635;
  _BYTE *v636;
  uint64_t i;
  __float2 v638;
  unsigned int v639;
  unsigned int v640;
  __int32 v641;
  float *v642;
  float *v643;
  float v644;
  float v645;
  float v646;
  float v647;
  float v648;
  float v649;
  uint64_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  char *v655;
  _BYTE *v656;
  unsigned int v657;
  int16x8_t v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  _WORD *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  _WORD *v669;
  __int16 v670;
  unint64_t v671;
  __int16 v672;
  __int16 v673;
  uint64_t v674;
  unint64_t v675;
  unint64_t v676;
  _WORD *v677;
  unint64_t v678;
  int64x2_t v679;
  int64x2_t v680;
  int64x2_t v681;
  int64x2_t v682;
  int64x2_t v683;
  int64x2_t v684;
  __int16 *v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  unsigned __int8 v689;
  _QWORD *v690;
  uint64_t *v691;
  _QWORD *v692;
  _QWORD *v693;
  void (***v694)(_QWORD, _QWORD *);
  void (***v695)(_QWORD, _QWORD *);
  unsigned __int8 v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  _QWORD *v700;
  int v701;
  int v702;
  unint64_t v703;
  unint64_t v704;
  unint64_t v705;
  unint64_t v706;
  _QWORD *v707;
  int v708;
  int v709;
  unint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t result;
  uint64_t v714;
  uint64_t v715;
  uint64_t **v716;
  _QWORD *v718;
  uint64_t **v719;
  uint64_t *v720;
  uint64_t *v721;
  uint64_t v722;
  _WORD *v724;
  unint64_t v725;
  QuadTile *v726;
  float v727;
  void **v728;
  float v729;
  _QWORD *v730;
  float v731;
  _QWORD *v734;
  gdc::GlobeTileGrid **v735;
  char *__p;
  char *__pa;
  _QWORD **v738;
  char *v740;
  uint64_t v741;
  _WORD *v742;
  char *v743;
  _QWORD *v744;
  char *v745;
  float v746;
  uint64_t *v747;
  _QWORD *v748;
  float v749;
  float v750;
  char *v751;
  char *v752;
  unint64_t v753;
  float v754;
  uint64_t v755;
  char *v756;
  _QWORD *v757;
  std::vector<unsigned int>::pointer begin;
  uint64_t *v759;
  uint64_t *v760;
  float v761;
  float v762;
  uint64_t *v763;
  uint64_t v764;
  float v765;
  float v766;
  uint64_t *v767;
  std::__shared_weak_count *v768;
  float v769;
  int32x2_t v770;
  __int32 v771;
  unint64_t v772;
  uint64_t *v773;
  unint64_t v774;
  uint64_t *v775;
  char *v776;
  float v777;
  unint64_t v778;
  int32x2_t v779;
  float32x2_t v780;
  std::vector<unsigned int> v781;
  void *v782[3];
  __int128 v783;
  unint64_t v784;
  unint64_t v785;
  __int16 v786;
  uint64_t v787;
  __int128 v788;
  unint64_t v789;
  unint64_t v790;
  __int16 v791;
  uint64_t v792;
  void *v793;
  std::__shared_weak_count *v794;
  float32x4_t v795;
  float v796;
  float v797;
  int8x16_t v798;
  uint64_t v799;
  char v800;
  char v801;
  unint64_t v802;
  uint64_t v803;
  void *v804;
  uint64_t v805;
  __int128 v806;
  __int128 v807;
  _BYTE v808[32];
  __int128 v809;
  __int128 v810;
  uint64_t v811;
  uint64_t v812;
  int16x8x2_t v813;
  float32x4x2_t v814;

  v8 = a1;
  v812 = *MEMORY[0x1E0C80C00];
  v747 = a3;
  v9 = 0;
  if (!a3)
  {
    v751 = 0;
    goto LABEL_356;
  }
  v751 = 0;
  v743 = 0;
  v7 = 1065353216;
  while (2)
  {
    v805 = 0;
    v804 = 0;
    {
      v274 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v274, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    __p = v9;
    v806 = (unint64_t)mdm::Allocator::instance(void)::alloc;
    {
      v275 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v275, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v807 = (unint64_t)mdm::Allocator::instance(void)::alloc;
    *(_DWORD *)v808 = 1065353216;
    v12 = (uint64_t *)v747[6];
    v13 = (uint64_t *)v747[7];
    while (v12 != v13)
    {
      LODWORD(v782[0]) = 0;
      LODWORD(v782[0]) = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*v12 + 88), *(float **)(*v12 + 72), 0);
      *(_QWORD *)&v788 = v782;
      v14 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v804, v782[0], (_DWORD **)&v788);
      v15 = v14;
      v16 = *(_QWORD **)(v14 + 32);
      v17 = *(_QWORD *)(v14 + 40);
      if ((unint64_t)v16 < v17)
      {
        if (v16)
        {
          v18 = *v12;
          *v12 = 0;
          *v16 = v18;
        }
        v6 = v16 + 1;
        goto LABEL_9;
      }
      v19 = *(_QWORD *)(v14 + 24);
      v20 = ((uint64_t)v16 - v19) >> 3;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        abort();
      v22 = v17 - v19;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 48) + 16))(*(_QWORD *)(v14 + 48), 8 * v23, 8);
        v25 = (_QWORD *)(v24 + 8 * v20);
        v26 = v24 + 8 * v23;
        if (v24)
        {
          v27 = *v12;
          *v12 = 0;
          *v25 = v27;
        }
      }
      else
      {
        v26 = 0;
        v25 = (_QWORD *)(8 * v20);
      }
      v6 = v25 + 1;
      v28 = *(_QWORD **)(v15 + 24);
      v29 = *(_QWORD *)(v15 + 32);
      if ((_QWORD *)v29 == v28)
      {
        *(_QWORD *)(v15 + 24) = v25;
        *(_QWORD *)(v15 + 32) = v6;
        v43 = *(_QWORD *)(v15 + 40);
        *(_QWORD *)(v15 + 40) = v26;
        if (!v29)
          goto LABEL_9;
LABEL_47:
        (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v15 + 48) + 40))(*(_QWORD *)(v15 + 48), v29, v43 - v29);
        goto LABEL_9;
      }
      v30 = v29 - (_QWORD)v28 - 8;
      if (v30 > 0x47
        && ((v31 = v30 >> 3, v29 - 8 * v31 - 8 < (unint64_t)v25)
          ? (_CF = (unint64_t)&v25[-v31 - 1] >= v29)
          : (_CF = 1),
            _CF))
      {
        v33 = v31 + 1;
        v34 = (v31 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v35 = (_QWORD *)(v29 - 8 * v34);
        v36 = v25 - 2;
        v37 = (__int128 *)(v29 - 32);
        v38 = v34;
        do
        {
          v40 = *v37;
          v39 = v37[1];
          *v37 = 0uLL;
          v37[1] = 0uLL;
          v37 -= 2;
          *(v36 - 1) = v40;
          *v36 = v39;
          v36 -= 2;
          v38 -= 4;
        }
        while (v38);
        v25 -= v34;
        if (v33 == v34)
          goto LABEL_37;
      }
      else
      {
        v35 = *(_QWORD **)(v15 + 32);
      }
      do
      {
        v41 = *--v35;
        *v35 = 0;
        *--v25 = v41;
      }
      while (v35 != v28);
LABEL_37:
      v29 = *(_QWORD *)(v15 + 24);
      v42 = *(_QWORD **)(v15 + 32);
      *(_QWORD *)(v15 + 24) = v25;
      *(_QWORD *)(v15 + 32) = v6;
      v43 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v26;
      while (v42 != (_QWORD *)v29)
      {
        v45 = (void (***)(_QWORD))*--v42;
        v44 = v45;
        *v42 = 0;
        if (v45)
        {
          (**v44)(v44);
          {
            v47 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v44, 136);
        }
      }
      v8 = a1;
      if (v29)
        goto LABEL_47;
LABEL_9:
      *(_QWORD *)(v15 + 32) = v6;
      ++v12;
    }
    v48 = operator new();
    v49 = v48;
    v50 = *(std::__shared_weak_count **)(a4 + 8);
    v793 = *(void **)a4;
    v794 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(p_shared_owners);
      while (__stxr(v52 + 1, p_shared_owners));
    }
    *(_QWORD *)v48 = &off_1E42AF248;
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v48 + 64) = 0;
    *(_QWORD *)(v48 + 40) = 0;
    *(_QWORD *)(v48 + 48) = 0;
    *(_QWORD *)(v48 + 32) = "";
    *(_DWORD *)(v48 + 56) = 0;
    *(_DWORD *)(v48 + 72) = 1065353216;
    v53 = 0uLL;
    *(_OWORD *)(v48 + 80) = 0u;
    *(_OWORD *)(v48 + 96) = 0u;
    v54 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v48 + 112) = v54;
    *(_QWORD *)(v48 + 128) = 0;
    *(_QWORD *)(v48 + 16) = &off_1E42AF548;
    *(_BYTE *)(v48 + 136) = 1;
    *(_QWORD *)(v48 + 192) = 0;
    *(_QWORD *)(v48 + 168) = 0;
    *(_QWORD *)(v48 + 176) = 0;
    *(_QWORD *)(v48 + 160) = "";
    *(_DWORD *)(v48 + 184) = 0;
    *(_DWORD *)(v48 + 200) = 1065353216;
    *(_OWORD *)(v48 + 208) = 0u;
    *(_OWORD *)(v48 + 224) = 0u;
    *(int64x2_t *)(v48 + 240) = v54;
    *(_QWORD *)(v48 + 256) = 0;
    *(_QWORD *)(v48 + 144) = &off_1E42AF548;
    *(_BYTE *)(v48 + 264) = 1;
    *(_QWORD *)(v48 + 320) = 0;
    *(_DWORD *)(v48 + 312) = 0;
    *(_QWORD *)(v48 + 288) = "";
    *(_QWORD *)(v48 + 296) = 0;
    *(_QWORD *)(v48 + 304) = 0;
    *(_DWORD *)(v48 + 328) = 1065353216;
    *(_OWORD *)(v48 + 336) = 0u;
    *(_OWORD *)(v48 + 352) = 0u;
    *(int64x2_t *)(v48 + 368) = v54;
    *(_QWORD *)(v48 + 384) = 0;
    *(_QWORD *)(v48 + 272) = &off_1E42AF548;
    *(_BYTE *)(v48 + 392) = 1;
    *(_QWORD *)(v48 + 448) = 0;
    *(_QWORD *)(v48 + 424) = 0;
    *(_QWORD *)(v48 + 432) = 0;
    *(_QWORD *)(v48 + 416) = "";
    *(_DWORD *)(v48 + 440) = 0;
    *(_DWORD *)(v48 + 456) = 1065353216;
    *(_OWORD *)(v48 + 464) = 0u;
    *(_OWORD *)(v48 + 480) = 0u;
    *(int64x2_t *)(v48 + 496) = v54;
    *(_QWORD *)(v48 + 512) = 0;
    *(_QWORD *)(v48 + 400) = &off_1E42AF548;
    *(_BYTE *)(v48 + 520) = 1;
    *(_QWORD *)(v48 + 544) = "";
    *(_QWORD *)(v48 + 576) = 0;
    *(_DWORD *)(v48 + 568) = 0;
    *(_QWORD *)(v48 + 552) = 0;
    *(_QWORD *)(v48 + 560) = 0;
    *(_DWORD *)(v48 + 584) = 1065353216;
    *(_OWORD *)(v48 + 592) = 0u;
    *(_OWORD *)(v48 + 608) = 0u;
    *(int64x2_t *)(v48 + 624) = v54;
    *(_QWORD *)(v48 + 640) = 0;
    *(_QWORD *)(v48 + 528) = &off_1E42AF548;
    *(_BYTE *)(v48 + 648) = 1;
    *(_QWORD *)(v48 + 672) = "";
    *(_QWORD *)(v48 + 704) = 0;
    *(_QWORD *)(v48 + 688) = 0;
    *(_QWORD *)(v48 + 680) = 0;
    *(_DWORD *)(v48 + 696) = 0;
    *(_DWORD *)(v48 + 712) = 1065353216;
    *(_OWORD *)(v48 + 720) = 0u;
    *(_OWORD *)(v48 + 736) = 0u;
    *(int64x2_t *)(v48 + 752) = v54;
    *(_QWORD *)(v48 + 768) = 0;
    *(_QWORD *)(v48 + 656) = &off_1E42AF548;
    *(_BYTE *)(v48 + 776) = 1;
    *(_QWORD *)(v48 + 800) = "";
    *(_QWORD *)(v48 + 832) = 0;
    *(_QWORD *)(v48 + 816) = 0;
    *(_QWORD *)(v48 + 808) = 0;
    *(_DWORD *)(v48 + 824) = 0;
    *(_DWORD *)(v48 + 840) = 1065353216;
    *(_OWORD *)(v48 + 848) = 0u;
    *(_OWORD *)(v48 + 864) = 0u;
    *(int64x2_t *)(v48 + 880) = v54;
    *(_QWORD *)(v48 + 896) = 0;
    *(_QWORD *)(v48 + 784) = &off_1E42AF548;
    *(_BYTE *)(v48 + 904) = 1;
    *(_QWORD *)(v48 + 928) = "";
    *(_QWORD *)(v48 + 960) = 0;
    *(_QWORD *)(v48 + 944) = 0;
    *(_QWORD *)(v48 + 936) = 0;
    *(_DWORD *)(v48 + 952) = 0;
    *(_DWORD *)(v48 + 968) = 1065353216;
    *(_OWORD *)(v48 + 976) = 0u;
    *(_OWORD *)(v48 + 992) = 0u;
    *(int64x2_t *)(v48 + 1008) = v54;
    *(_QWORD *)(v48 + 1024) = 0;
    *(_QWORD *)(v48 + 912) = &off_1E42AF548;
    *(_BYTE *)(v48 + 1032) = 1;
    *(_QWORD *)(v48 + 1056) = "";
    *(_QWORD *)(v48 + 1088) = 0;
    *(_QWORD *)(v48 + 1072) = 0;
    *(_QWORD *)(v48 + 1064) = 0;
    *(_DWORD *)(v48 + 1080) = 0;
    *(_DWORD *)(v48 + 1096) = 1065353216;
    *(_OWORD *)(v48 + 1120) = 0u;
    *(_OWORD *)(v48 + 1104) = 0u;
    *(int64x2_t *)(v48 + 1136) = v54;
    *(_QWORD *)(v48 + 1152) = 0;
    *(_QWORD *)(v48 + 1040) = &off_1E42AF548;
    *(_BYTE *)(v48 + 1160) = 1;
    *(_QWORD *)(v48 + 1184) = "";
    *(_QWORD *)(v48 + 1216) = 0;
    *(_QWORD *)(v48 + 1200) = 0;
    *(_QWORD *)(v48 + 1192) = 0;
    *(_DWORD *)(v48 + 1208) = 0;
    *(_DWORD *)(v48 + 1224) = 1065353216;
    *(_OWORD *)(v48 + 1248) = 0u;
    *(_OWORD *)(v48 + 1232) = 0u;
    *(int64x2_t *)(v48 + 1264) = v54;
    *(_QWORD *)(v48 + 1280) = 0;
    *(_QWORD *)(v48 + 1168) = &off_1E42AF548;
    *(_BYTE *)(v48 + 1288) = 1;
    *(_OWORD *)(v48 + 1328) = 0u;
    *(_OWORD *)(v48 + 1312) = 0u;
    *(_OWORD *)(v48 + 1296) = 0u;
    if ((v55 & 1) == 0)
    {
      v53 = 0uLL;
      if (v276)
      {
        v277 = operator new();
        ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v277, "GeoGL", 0xA3D02C1100000005);
        v53 = 0uLL;
      }
    }
    *(_QWORD *)(v49 + 1344) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v49 + 1384) = 0;
    *(_OWORD *)(v49 + 1352) = v53;
    *(_OWORD *)(v49 + 1368) = v53;
    *(_QWORD *)(v49 + 1392) = 32;
    v56 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v56 = 0;
    v56[1] = 0;
    *(_QWORD *)(v49 + 1376) = v56;
    *(_QWORD *)(v49 + 1384) = v56;
    *(_QWORD *)(v49 + 1400) = 0;
    *(_QWORD *)(v49 + 1416) = 0;
    *(_QWORD *)(v49 + 1408) = 0;
    *(_BYTE *)(v49 + 1424) = 1;
    *(_QWORD *)v49 = &off_1E428C7E0;
    *(_DWORD *)(v49 + 1432) = *((_DWORD *)v747 + 4);
    *(_QWORD *)(v49 + 1440) = v747[3];
    v57 = v747[4];
    *(_QWORD *)(v49 + 1448) = v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    *(_BYTE *)(v49 + 1456) = *((_BYTE *)v747 + 40);
    *(_QWORD *)v49 = &off_1E429A3C8;
    +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = *(_BYTE *)(objc_msgSend(v60, "gglDevice") + 20);

    *(_BYTE *)(v49 + 1464) = v61;
    *(_QWORD *)(v49 + 1472) = v747[3];
    v62 = v747[4];
    *(_QWORD *)(v49 + 1480) = v62;
    if (v62)
    {
      v63 = (unint64_t *)(v62 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = v794;
    *(_QWORD *)(v49 + 1488) = v793;
    *(_QWORD *)(v49 + 1496) = v65;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v68 = a5[1];
    *(_QWORD *)(v49 + 1504) = *a5;
    *(_QWORD *)(v49 + 1512) = v68;
    if (v68)
    {
      v69 = (unint64_t *)(v68 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    if (v751 >= v743)
    {
      v72 = (v751 - __p) >> 3;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 61)
        abort();
      if ((v743 - __p) >> 2 > v73)
        v73 = (v743 - __p) >> 2;
      if ((unint64_t)(v743 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v74 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      if (v74)
      {
        if (v74 >> 61)
          goto LABEL_767;
        v75 = (char *)operator new(8 * v74);
      }
      else
      {
        v75 = 0;
      }
      v6 = (uint64_t *)&v75[8 * v72];
      *v6 = v49;
      v76 = (char *)(v6 + 1);
      v77 = __p;
      if (v751 != __p)
      {
        v78 = v751 - 8 - __p;
        if (v78 < 0x58)
        {
          v79 = v751;
          v77 = __p;
          goto LABEL_85;
        }
        if ((unint64_t)(__p - v75) < 0x20)
        {
          v79 = v751;
          v77 = __p;
          do
          {
LABEL_85:
            v85 = *((_QWORD *)v79 - 1);
            v79 -= 8;
            *--v6 = v85;
          }
          while (v79 != v77);
          goto LABEL_86;
        }
        v80 = (v78 >> 3) + 1;
        v79 = &v751[-8 * (v80 & 0x3FFFFFFFFFFFFFFCLL)];
        v81 = &v75[8 * v72 - 16];
        v82 = v751 - 16;
        v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
          *(_OWORD *)v81 = v84;
          v81 -= 32;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        v6 -= v80 & 0x3FFFFFFFFFFFFFFCLL;
        v77 = __p;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_85;
      }
LABEL_86:
      v743 = &v75[8 * v74];
      if (v77)
        operator delete(v77);
      __p = (char *)v6;
      v751 = v76;
      v71 = v794;
      if (v794)
        goto LABEL_89;
      goto LABEL_93;
    }
    *(_QWORD *)v751 = v49;
    v751 += 8;
    v71 = v794;
    if (!v794)
      goto LABEL_93;
LABEL_89:
    v86 = (unint64_t *)&v71->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
LABEL_93:
    v759 = (uint64_t *)*((_QWORD *)&v806 + 1);
    if (*((_QWORD *)&v806 + 1))
    {
      v88 = 0;
      v89 = 0;
      v90 = 0;
      while (1)
      {
        v91 = operator new();
        *(_OWORD *)(v91 + 80) = 0u;
        *(_OWORD *)(v91 + 96) = 0u;
        *(_OWORD *)(v91 + 48) = 0u;
        *(_OWORD *)(v91 + 64) = 0u;
        *(_OWORD *)(v91 + 16) = 0u;
        *(_OWORD *)(v91 + 32) = 0u;
        *(_OWORD *)v91 = 0u;
        *(_BYTE *)(v91 + 48) = 1;
        *(_QWORD *)(v91 + 56) = 0;
        *(_QWORD *)(v91 + 64) = 0;
        *(_QWORD *)(v91 + 72) = 0;
        {
          v217 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v217, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v91 + 80) = mdm::Allocator::instance(void)::alloc;
        *(_DWORD *)(v91 + 96) = 0;
        *(_QWORD *)(v91 + 100) = 1065353216;
        *(_QWORD *)&v788 = v91;
        if (v90 < (uint64_t *)v89)
        {
          *(_QWORD *)&v788 = 0;
          *v90 = v91;
          v93 = v90 + 1;
          v94 = v788;
          if (!(_QWORD)v788)
            goto LABEL_152;
LABEL_140:
          v126 = *(uint64_t **)(v94 + 56);
          if (v126)
          {
            v6 = *(uint64_t **)(v94 + 64);
            v127 = *(_QWORD *)(v94 + 56);
            if (v6 != v126)
            {
              do
              {
                v129 = (void (***)(_QWORD, uint64_t))*--v6;
                v128 = v129;
                *v6 = 0;
                if (v129)
                {
                  (**v128)(v128, v127);
                  if ((v130 & 1) == 0
                  {
                    v131 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v131, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v128, 136);
                }
              }
              while (v6 != v126);
              v127 = *(_QWORD *)(v94 + 56);
            }
            *(_QWORD *)(v94 + 64) = v126;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v94 + 80) + 40))(*(_QWORD *)(v94 + 80), v127, *(_QWORD *)(v94 + 72) - v127);
          }
          MEMORY[0x1A1AF4E00](v94, 0x1020C40379845F6);
          goto LABEL_152;
        }
        v95 = v89;
        v96 = (char *)v90 - (char *)v88;
        v97 = v90 - v88;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 61)
          abort();
        v99 = v95 - (char *)v88;
        v100 = (v95 - (char *)v88) >> 2;
        if (v100 > v98)
          v98 = v100;
        v101 = v99 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v98;
        v772 = v101;
        if (v101)
        {
          if (v101 >> 61)
            goto LABEL_767;
          v102 = (char *)operator new(8 * v101);
        }
        else
        {
          v102 = 0;
        }
        v103 = (uint64_t *)&v102[8 * v97];
        *(_QWORD *)&v788 = 0;
        *v103 = v91;
        v93 = v103 + 1;
        v104 = (char *)v90 - (char *)v88;
        if (v90 != v88)
          break;
LABEL_137:
        v89 = &v102[8 * v772];
        if (v88)
          operator delete(v88);
        v88 = v103;
        v94 = v788;
        if ((_QWORD)v788)
          goto LABEL_140;
LABEL_152:
        *(_DWORD *)(*(v93 - 1) + 96) = *((_DWORD *)v759 + 4);
        v132 = (uint64_t *)v759[3];
        v767 = (uint64_t *)v759[4];
        if (v132 != v767)
        {
          v133 = 0;
          while (1)
          {
            v134 = *v132;
            v6 = *(uint64_t **)(*v132 + 88);
            if ((unint64_t)v6 + v133 <= 0x5999)
            {
              v773 = v88;
              v138 = *(v93 - 1);
              goto LABEL_217;
            }
            v135 = operator new();
            *(_OWORD *)(v135 + 80) = 0u;
            *(_OWORD *)(v135 + 96) = 0u;
            *(_OWORD *)(v135 + 48) = 0u;
            *(_OWORD *)(v135 + 64) = 0u;
            *(_OWORD *)(v135 + 16) = 0u;
            *(_OWORD *)(v135 + 32) = 0u;
            *(_OWORD *)v135 = 0u;
            *(_BYTE *)(v135 + 48) = 1;
            *(_QWORD *)(v135 + 56) = 0;
            *(_QWORD *)(v135 + 64) = 0;
            *(_QWORD *)(v135 + 72) = 0;
            {
              v216 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v216, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *(_QWORD *)(v135 + 80) = mdm::Allocator::instance(void)::alloc;
            *(_DWORD *)(v135 + 96) = 0;
            *(_QWORD *)(v135 + 100) = 1065353216;
            *(_QWORD *)&v788 = v135;
            if (v93 >= (uint64_t *)v89)
              break;
            *(_QWORD *)&v788 = 0;
            *v93++ = v135;
            v137 = v788;
            if ((_QWORD)v788)
              goto LABEL_204;
LABEL_216:
            v773 = v88;
            v133 = 0;
            v138 = *(v93 - 1);
            *(_DWORD *)(v138 + 96) = *((_DWORD *)v759 + 4);
            v134 = *v132;
            v6 = *(uint64_t **)(*v132 + 88);
LABEL_217:
            *v132 = 0;
            v181.f64[0] = *(float64_t *)(v134 + 104);
            v181.f64[1] = *(double *)(v134 + 112) + v181.f64[0];
            *(float32x2_t *)&v181.f64[0] = vcvt_f32_f64(v181);
            v182.i32[0] = *(_QWORD *)(v138 + 100);
            v182.i32[1] = HIDWORD(v181.f64[0]);
            v183.i32[0] = LODWORD(v181.f64[0]);
            v183.i32[1] = HIDWORD(*(_QWORD *)(v138 + 100));
            *(int8x8_t *)(v138 + 100) = vbsl_s8((int8x8_t)vcgt_f32(v182, v183), *(int8x8_t *)&v181.f64[0], *(int8x8_t *)(v138 + 100));
            v184 = *(_QWORD **)(v138 + 64);
            v185 = *(_QWORD *)(v138 + 72);
            if ((unint64_t)v184 < v185)
            {
              if (v184)
              {
                *v184 = v134;
                v134 = 0;
              }
              v186 = v184 + 1;
              goto LABEL_254;
            }
            v187 = *(_QWORD *)(v138 + 56);
            v188 = ((uint64_t)v184 - v187) >> 3;
            v189 = v188 + 1;
            if ((unint64_t)(v188 + 1) >> 61)
              abort();
            v190 = v185 - v187;
            if (v190 >> 2 > v189)
              v189 = v190 >> 2;
            if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8)
              v191 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v191 = v189;
            if (v191)
            {
              v192 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v138 + 80) + 16))(*(_QWORD *)(v138 + 80), 8 * v191, 8);
              v193 = (_QWORD *)(v192 + 8 * v188);
              v194 = v192 + 8 * v191;
              if (v192)
              {
                *v193 = v134;
                v134 = 0;
              }
            }
            else
            {
              v194 = 0;
              v193 = (_QWORD *)(8 * v188);
            }
            v186 = v193 + 1;
            v195 = *(_QWORD **)(v138 + 56);
            v196 = *(_QWORD *)(v138 + 64);
            if ((_QWORD *)v196 == v195)
            {
              *(_QWORD *)(v138 + 56) = v193;
              *(_QWORD *)(v138 + 64) = v186;
              v764 = *(_QWORD *)(v138 + 72);
              *(_QWORD *)(v138 + 72) = v194;
              if (!v196)
                goto LABEL_254;
              goto LABEL_253;
            }
            v197 = v196 - (_QWORD)v195 - 8;
            if (v197 <= 0x47
              || ((v198 = v197 >> 3, v196 - 8 * v198 - 8 < (unint64_t)v193)
                ? (v199 = (unint64_t)&v193[-v198 - 1] >= v196)
                : (v199 = 1),
                  !v199))
            {
              v202 = *(_QWORD **)(v138 + 64);
              do
              {
LABEL_243:
                v208 = *--v202;
                *v202 = 0;
                *--v193 = v208;
              }
              while (v202 != v195);
              goto LABEL_244;
            }
            v200 = v198 + 1;
            v201 = (v198 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v202 = (_QWORD *)(v196 - 8 * v201);
            v203 = v193 - 2;
            v204 = (__int128 *)(v196 - 32);
            v205 = v201;
            do
            {
              v207 = *v204;
              v206 = v204[1];
              *v204 = 0uLL;
              v204[1] = 0uLL;
              v204 -= 2;
              *(v203 - 1) = v207;
              *v203 = v206;
              v203 -= 2;
              v205 -= 4;
            }
            while (v205);
            v193 -= v201;
            if (v200 != v201)
              goto LABEL_243;
LABEL_244:
            v196 = *(_QWORD *)(v138 + 56);
            v209 = *(_QWORD **)(v138 + 64);
            *(_QWORD *)(v138 + 56) = v193;
            *(_QWORD *)(v138 + 64) = v186;
            v764 = *(_QWORD *)(v138 + 72);
            *(_QWORD *)(v138 + 72) = v194;
            if (v209 == (_QWORD *)v196)
            {
              if (!v196)
                goto LABEL_254;
            }
            else
            {
              v756 = v89;
              do
              {
                v211 = (void (***)(_QWORD))*--v209;
                v210 = v211;
                *v209 = 0;
                if (v211)
                {
                  (**v210)(v210);
                  if ((v212 & 1) == 0
                  {
                    v213 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v210, 136);
                }
              }
              while (v209 != (_QWORD *)v196);
              v89 = v756;
              if (!v196)
                goto LABEL_254;
            }
LABEL_253:
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v138 + 80) + 40))(*(_QWORD *)(v138 + 80), v196, v764 - v196);
LABEL_254:
            *(_QWORD *)(v138 + 64) = v186;
            v88 = v773;
            if (v134)
            {
              (**(void (***)(uint64_t))v134)(v134);
              {
                v215 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v215, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v134, 136);
            }
            v133 += (uint64_t)v6;
            if (++v132 == v767)
              goto LABEL_95;
          }
          v139 = v89;
          v140 = (char *)v93 - (char *)v88;
          v141 = v93 - v88;
          v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 61)
            abort();
          v143 = v139 - (char *)v88;
          v144 = (v139 - (char *)v88) >> 2;
          if (v144 > v142)
            v142 = v144;
          if (v143 >= 0x7FFFFFFFFFFFFFF8)
            v145 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v145 = v142;
          v774 = v145;
          if (v145)
          {
            if (v145 >> 61)
              goto LABEL_767;
            v146 = (char *)operator new(8 * v145);
          }
          else
          {
            v146 = 0;
          }
          v147 = (uint64_t *)&v146[8 * v141];
          *(_QWORD *)&v788 = 0;
          *v147 = v135;
          v763 = v147 + 1;
          v148 = (char *)v93 - (char *)v88;
          if (v93 != v88)
          {
            v149 = v148 - 8;
            if ((unint64_t)(v148 - 8) < 0x138)
            {
              v150 = v93;
              goto LABEL_175;
            }
            v152 = v149 & 0xFFFFFFFFFFFFFFF8;
            if ((uint64_t *)((char *)v93 - (v149 & 0xFFFFFFFFFFFFFFF8) - 8) > v93 - 1)
            {
              v150 = v93;
              goto LABEL_175;
            }
            if (&v146[v140 - 8 - v152] > &v146[v140 - 8])
            {
              v150 = v93;
              goto LABEL_175;
            }
            v153 = v149 >> 3;
            if (&v93[-v153 - 1] < v147)
            {
              v154 = (unint64_t)&v146[v140 - v152 - 8];
              v150 = v93;
              if (v154 < (unint64_t)v93)
                goto LABEL_778;
            }
            v155 = v153 + 1;
            v150 = &v93[-(v155 & 0x3FFFFFFFFFFFFFFCLL)];
            v156 = &v146[8 * v141 - 16];
            v157 = v93 - 4;
            v158 = v155 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v160 = *(_OWORD *)v157;
              v159 = *((_OWORD *)v157 + 1);
              *(_OWORD *)v157 = 0uLL;
              *((_OWORD *)v157 + 1) = 0uLL;
              v157 -= 4;
              *((_OWORD *)v156 - 1) = v160;
              *(_OWORD *)v156 = v159;
              v156 -= 32;
              v158 -= 4;
            }
            while (v158);
            v147 -= v155 & 0x3FFFFFFFFFFFFFFCLL;
            if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_778:
              do
              {
LABEL_175:
                v151 = *--v150;
                *v150 = 0;
                *--v147 = v151;
              }
              while (v150 != v88);
            }
            do
            {
              v163 = *--v93;
              v162 = v163;
              *v93 = 0;
              if (v163)
              {
                v164 = *(_QWORD **)(v162 + 56);
                if (v164)
                {
                  v165 = v88;
                  v166 = *(_QWORD **)(v162 + 64);
                  v161 = *(_QWORD *)(v162 + 56);
                  if (v166 != v164)
                  {
                    do
                    {
                      v169 = (void (***)(_QWORD, uint64_t))*--v166;
                      v168 = v169;
                      *v166 = 0;
                      if (v169)
                      {
                        (**v168)(v168, v161);
                        if ((v170 & 1) == 0
                        {
                          v171 = operator new();
                          *(_QWORD *)(v171 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v171 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v171 + 32) = xmmword_19FFB2E80;
                          *(_QWORD *)v171 = &off_1E42B5668;
                          *(_QWORD *)(v171 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v171 + 72) = 0u;
                          *(_OWORD *)(v171 + 88) = 0u;
                          *(_OWORD *)(v171 + 104) = 0u;
                          *(_OWORD *)(v171 + 120) = 0u;
                          *(_OWORD *)(v171 + 136) = 0u;
                          *(_OWORD *)(v171 + 152) = 0u;
                          *(_OWORD *)(v171 + 168) = 0u;
                          *(_OWORD *)(v171 + 184) = 0u;
                          *(_OWORD *)(v171 + 200) = 0u;
                          *(_OWORD *)(v171 + 216) = 0u;
                          *(_OWORD *)(v171 + 232) = 0u;
                          *(_QWORD *)(v171 + 248) = 0;
                          v755 = v171;
                          *(_OWORD *)(v171 + 56) = 0u;
                          v172 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v171 + 56), 0);
                          if ((_DWORD)v172)
                            geo::read_write_lock::logFailure(v172, (uint64_t)"initialization", v173);
                          zone = malloc_create_zone(0, 0);
                          *(_QWORD *)(v755 + 48) = zone;
                          malloc_set_zone_name(zone, "VectorKitLabels");
                          *(_QWORD *)(v755 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          mdm::Allocator::instance(void)::alloc = v755;
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v168, 136);
                      }
                    }
                    while (v166 != v164);
                    v161 = *(_QWORD *)(v162 + 56);
                  }
                  *(_QWORD *)(v162 + 64) = v164;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v162 + 80) + 40))(*(_QWORD *)(v162 + 80), v161, *(_QWORD *)(v162 + 72) - v161);
                  v88 = v165;
                }
                MEMORY[0x1A1AF4E00](v162, 0x1020C40379845F6);
              }
            }
            while (v93 != v88);
          }
          v89 = &v146[8 * v774];
          if (v88)
            operator delete(v88);
          v88 = v147;
          v93 = v763;
          v137 = v788;
          if (!(_QWORD)v788)
            goto LABEL_216;
LABEL_204:
          v174 = *(_QWORD **)(v137 + 56);
          if (v174)
          {
            v175 = *(_QWORD **)(v137 + 64);
            v176 = *(_QWORD *)(v137 + 56);
            if (v175 != v174)
            {
              do
              {
                v178 = (void (***)(_QWORD, uint64_t))*--v175;
                v177 = v178;
                *v175 = 0;
                if (v178)
                {
                  (**v177)(v177, v176);
                  if ((v179 & 1) == 0
                  {
                    v180 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v180, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v177, 136);
                }
              }
              while (v175 != v174);
              v176 = *(_QWORD *)(v137 + 56);
            }
            *(_QWORD *)(v137 + 64) = v174;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v137 + 80) + 40))(*(_QWORD *)(v137 + 80), v176, *(_QWORD *)(v137 + 72) - v176);
          }
          MEMORY[0x1A1AF4E00](v137, 0x1020C40379845F6);
          goto LABEL_216;
        }
LABEL_95:
        v90 = v93;
        v8 = a1;
        v759 = (uint64_t *)*v759;
        if (!v759)
          goto LABEL_271;
      }
      v105 = v104 - 8;
      if ((unint64_t)(v104 - 8) >= 0x138)
      {
        v108 = v105 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v90 - (v105 & 0xFFFFFFFFFFFFFFF8) - 8) > v90 - 1)
        {
          v106 = v90;
        }
        else if (&v102[v96 - 8 - v108] > &v102[v96 - 8])
        {
          v106 = v90;
        }
        else
        {
          v109 = v105 >> 3;
          if (&v90[-v109 - 1] >= v103
            || (v110 = (unint64_t)&v102[v96 - v108 - 8], v106 = v90, v110 >= (unint64_t)v90))
          {
            v111 = v109 + 1;
            v106 = &v90[-(v111 & 0x3FFFFFFFFFFFFFFCLL)];
            v112 = &v102[8 * v97 - 16];
            v113 = v90 - 4;
            v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *(_OWORD *)v113;
              v115 = *((_OWORD *)v113 + 1);
              *(_OWORD *)v113 = 0uLL;
              *((_OWORD *)v113 + 1) = 0uLL;
              v113 -= 4;
              *((_OWORD *)v112 - 1) = v116;
              *(_OWORD *)v112 = v115;
              v112 -= 32;
              v114 -= 4;
            }
            while (v114);
            v103 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
            if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_127:
                v119 = *--v90;
                v118 = v119;
                *v90 = 0;
                if (v119)
                {
                  v120 = *(_QWORD **)(v118 + 56);
                  if (v120)
                  {
                    v6 = v88;
                    v121 = *(_QWORD **)(v118 + 64);
                    v117 = *(_QWORD *)(v118 + 56);
                    if (v121 != v120)
                    {
                      do
                      {
                        v123 = (void (***)(_QWORD, uint64_t))*--v121;
                        v122 = v123;
                        *v121 = 0;
                        if (v123)
                        {
                          (**v122)(v122, v117);
                          if ((v124 & 1) == 0
                          {
                            v125 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v125, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v122, 136);
                        }
                      }
                      while (v121 != v120);
                      v117 = *(_QWORD *)(v118 + 56);
                    }
                    *(_QWORD *)(v118 + 64) = v120;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v118 + 80) + 40))(*(_QWORD *)(v118 + 80), v117, *(_QWORD *)(v118 + 72) - v117);
                    v88 = v6;
                  }
                  MEMORY[0x1A1AF4E00](v118, 0x1020C40379845F6);
                }
              }
              while (v90 != v88);
              goto LABEL_137;
            }
          }
        }
      }
      else
      {
        v106 = v90;
      }
      do
      {
        v107 = *--v106;
        *v106 = 0;
        *--v103 = v107;
      }
      while (v106 != v88);
      goto LABEL_127;
    }
    v93 = 0;
    v88 = 0;
LABEL_271:
    v218 = *((_QWORD *)v751 - 1);
    v219 = *(_QWORD *)(v218 + 1400);
    v220 = *(int8x16_t **)(v218 + 1408);
    v221 = 126 - 2 * __clz(((uint64_t)v220->i64 - v219) >> 3);
    if (v220 == (int8x16_t *)v219)
      v222 = 0;
    else
      v222 = v221;
    std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(v219, v220, v222, 1);
    v223 = v88;
    if (v88 == v93)
    {
      if (!v93)
        goto LABEL_4;
LABEL_3:
      operator delete(v88);
      goto LABEL_4;
    }
    do
    {
      v6 = (uint64_t *)*((_QWORD *)v751 - 1);
      v225 = *v223;
      *v223 = 0;
      *(_QWORD *)&v783 = v225;
      v226 = (uint64_t *)v6[176];
      v227 = v6[177];
      if ((unint64_t)v226 < v227)
      {
        *(_QWORD *)&v783 = 0;
        *v226 = v225;
        v228 = v226 + 1;
        goto LABEL_321;
      }
      v775 = v223;
      v229 = v6[175];
      v230 = (char *)v226 - v229;
      v231 = ((uint64_t)v226 - v229) >> 3;
      if ((unint64_t)(v231 + 1) >> 61)
        abort();
      v232 = v227 - v229;
      v233 = v232 >> 2;
      if (v232 >> 2 <= (unint64_t)(v231 + 1))
        v233 = v231 + 1;
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
        v234 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v234 = v233;
      if (v234)
      {
        if (v234 >> 61)
          goto LABEL_767;
        v235 = (char *)operator new(8 * v234);
      }
      else
      {
        v235 = 0;
      }
      v236 = &v235[8 * v231];
      v237 = &v235[8 * v234];
      *(_QWORD *)&v783 = 0;
      *(_QWORD *)v236 = v225;
      v228 = v236 + 8;
      v238 = (char *)v6[176];
      v239 = (char *)v6[175];
      if (v238 == v239)
      {
        v6[175] = (uint64_t)v236;
        v6[176] = (uint64_t)v228;
        v6[177] = (uint64_t)v237;
        if (v238)
          goto LABEL_320;
      }
      else
      {
        v240 = v238 - v239 - 8;
        if (v240 <= 0x77)
          goto LABEL_779;
        if (&v238[-(v240 & 0xFFFFFFFFFFFFFFF8) - 8] < v236
          && &v230[(_QWORD)v235 - (v240 & 0xFFFFFFFFFFFFFFF8) - 8] < v238)
        {
          goto LABEL_779;
        }
        v242 = (v240 >> 3) + 1;
        v243 = &v235[8 * v231 - 16];
        v244 = v238 - 32;
        v245 = v242 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v247 = *(_OWORD *)v244;
          v246 = *((_OWORD *)v244 + 1);
          *(_OWORD *)v244 = 0uLL;
          *((_OWORD *)v244 + 1) = 0uLL;
          v244 -= 32;
          *((_OWORD *)v243 - 1) = v247;
          *(_OWORD *)v243 = v246;
          v243 -= 32;
          v245 -= 4;
        }
        while (v245);
        v236 -= 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
        v238 -= 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
        if (v242 != (v242 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_779:
          do
          {
            v248 = *((_QWORD *)v238 - 1);
            v238 -= 8;
            *(_QWORD *)v238 = 0;
            *((_QWORD *)v236 - 1) = v248;
            v236 -= 8;
          }
          while (v238 != v239);
        }
        v238 = (char *)v6[175];
        v249 = (char *)v6[176];
        v6[175] = (uint64_t)v236;
        v6[176] = (uint64_t)v228;
        v6[177] = (uint64_t)v237;
        while (v249 != v238)
        {
          v252 = *((_QWORD *)v249 - 1);
          v249 -= 8;
          v251 = v252;
          *(_QWORD *)v249 = 0;
          if (v252)
          {
            v253 = v88;
            v254 = *(_QWORD **)(v251 + 56);
            if (v254)
            {
              v255 = *(_QWORD **)(v251 + 64);
              v250 = *(_QWORD *)(v251 + 56);
              if (v255 != v254)
              {
                do
                {
                  v257 = (void (***)(_QWORD, uint64_t))*--v255;
                  v256 = v257;
                  *v255 = 0;
                  if (v257)
                  {
                    (**v256)(v256, v250);
                    if ((v258 & 1) == 0
                    {
                      v259 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v259, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v256, 136);
                  }
                }
                while (v255 != v254);
                v250 = *(_QWORD *)(v251 + 56);
              }
              *(_QWORD *)(v251 + 64) = v254;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v251 + 80) + 40))(*(_QWORD *)(v251 + 80), v250, *(_QWORD *)(v251 + 72) - v250);
            }
            MEMORY[0x1A1AF4E00](v251, 0x1020C40379845F6);
            v88 = v253;
          }
        }
        v8 = a1;
        v223 = v775;
        if (v238)
LABEL_320:
          operator delete(v238);
      }
LABEL_321:
      v6[176] = (uint64_t)v228;
      v260 = v783;
      *(_QWORD *)&v783 = 0;
      if (v260)
      {
        v6 = *(uint64_t **)(v260 + 56);
        if (v6)
        {
          v261 = *(uint64_t **)(v260 + 64);
          v224 = *(_QWORD *)(v260 + 56);
          if (v261 != v6)
          {
            do
            {
              v263 = (void (***)(_QWORD, uint64_t))*--v261;
              v262 = v263;
              *v261 = 0;
              if (v263)
              {
                (**v262)(v262, v224);
                {
                  v265 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v265, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v262, 136);
              }
            }
            while (v261 != v6);
            v224 = *(_QWORD *)(v260 + 56);
          }
          *(_QWORD *)(v260 + 64) = v6;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v260 + 80) + 40))(*(_QWORD *)(v260 + 80), v224, *(_QWORD *)(v260 + 72) - v224);
        }
        MEMORY[0x1A1AF4E00](v260, 0x1020C40379845F6);
      }
      ++v223;
    }
    while (v223 != v93);
    if (v88)
    {
      do
      {
        v268 = *--v93;
        v267 = v268;
        *v93 = 0;
        if (v268)
        {
          v269 = *(uint64_t **)(v267 + 56);
          if (v269)
          {
            v6 = *(uint64_t **)(v267 + 64);
            v266 = *(_QWORD *)(v267 + 56);
            if (v6 != v269)
            {
              do
              {
                v271 = (void (***)(_QWORD, uint64_t))*--v6;
                v270 = v271;
                *v6 = 0;
                if (v271)
                {
                  (**v270)(v270, v266);
                  if ((v272 & 1) == 0
                  {
                    v273 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v273, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v270, 136);
                }
              }
              while (v6 != v269);
              v266 = *(_QWORD *)(v267 + 56);
            }
            *(_QWORD *)(v267 + 64) = v269;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v267 + 80) + 40))(*(_QWORD *)(v267 + 80), v266, *(_QWORD *)(v267 + 72) - v266);
          }
          MEMORY[0x1A1AF4E00](v267, 0x1020C40379845F6);
        }
      }
      while (v93 != v88);
      goto LABEL_3;
    }
LABEL_4:
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&v804);
    v9 = __p;
    v747 = (uint64_t *)*v747;
    if (v747)
      continue;
    break;
  }
LABEL_356:
  __pa = v9;
  v278 = a6[24];
  if (a6[24])
  {
    LOBYTE(v6) = a6[1];
    v279 = *a6;
    v7 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v279 = 0;
  }
  *v8 = &off_1E42AF488;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  v280 = v751 - __pa;
  if (v751 == __pa)
  {
    v730 = 0;
    v283 = 0;
  }
  else
  {
    if (v280 < 0)
      abort();
    v281 = operator new(v751 - __pa);
    v8[1] = v281;
    v8[2] = v281;
    v282 = (char *)&v281[v280 >> 3];
    v8[3] = v282;
    v283 = v281;
    memcpy(v281, __pa, v280);
    v730 = v282;
    v8[2] = v282;
  }
  *((_OWORD *)v8 + 2) = 0u;
  v8[18] = 0;
  v735 = (gdc::GlobeTileGrid **)(v8 + 18);
  *((_BYTE *)v8 + 152) = 0;
  *((_BYTE *)v8 + 176) = 0;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  v728 = (void **)(v8 + 4);
  *(_OWORD *)((char *)v8 + 121) = 0u;
  if (v278)
  {
    *((_BYTE *)v8 + 152) = v279;
    *((_BYTE *)v8 + 153) = (_BYTE)v6;
    *(_QWORD *)((char *)v8 + 156) = v7;
    *((_BYTE *)v8 + 176) = 1;
  }
  if (v283 == v730)
  {
    v383 = 0;
    v360 = 0;
    goto LABEL_479;
  }
  v726 = (QuadTile *)(v8 + 19);
  v284 = 0;
  v752 = 0;
  v740 = 0;
  while (2)
  {
    v734 = v283;
    v285 = (_QWORD *)*v283;
    v285[1] = v8;
    v286 = (_QWORD **)v285[175];
    v287 = (_QWORD **)v285[176];
    v738 = v287;
LABEL_371:
    if (v286 != v287)
    {
      v748 = v286;
      v289 = *v286;
      v289[1] = **v286;
      v289[3] = v289[2];
      v289[5] = v289[4];
      v805 = 0;
      v804 = 0;
      *(_QWORD *)&v806 = 0;
      v794 = 0;
      v793 = 0;
      v795.i64[0] = 0;
      v291 = (uint64_t *)v289[7];
      v290 = (uint64_t *)v289[8];
      if (v291 == v290)
        goto LABEL_425;
      v744 = v284;
      v757 = v289;
      v760 = (uint64_t *)v289[8];
LABEL_377:
      v296 = *v291;
      *(_QWORD *)&v788 = 1;
      md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(v296, &v804, (std::vector<unsigned int> *)&v793, (uint64_t *)&v788);
      v297 = v788;
      v298 = v788 - 2;
      if ((unint64_t)v788 < 2)
        goto LABEL_376;
      v299 = *(float *)(v296 + 128);
      if (v299 >= 1.5708)
      {
        v307 = 2 * v788;
        goto LABEL_417;
      }
      v300 = (float *)((char *)v804 + 8);
      v301 = *(float *)v804;
      v302 = 1;
      v776 = (char *)v804;
      while (1)
      {
        if (vabds_f32(*v300, v301) >= 1.0e-10)
        {
          v308 = v300[1] - *((float *)v804 + 1);
          goto LABEL_387;
        }
        v303 = *((float *)v804 + 1);
        v304 = v300[1];
        if (vabds_f32(v304, v303) >= 1.0e-10)
          break;
        ++v302;
        v300 += 2;
        if ((_QWORD)v788 == v302)
        {
          v305 = 0.0;
          v306 = 1.0;
          goto LABEL_388;
        }
      }
      v308 = v304 - v303;
LABEL_387:
      v309 = *v300 - v301;
      v310 = 1.0 / sqrtf((float)(v309 * v309) + (float)(v308 * v308));
      v306 = v310 * v309;
      v305 = v310 * v308;
LABEL_388:
      v311 = v788 - 1;
      if ((unint64_t)(v788 - 1) < 2)
      {
        v307 = 4;
        v290 = v760;
        goto LABEL_417;
      }
      v312 = *(unsigned __int8 *)(v296 + 121);
      v313 = *(float *)(v296 + 124);
      v314 = (float *)((char *)v804 + 16);
      v315 = 1;
      v316 = 2;
      v317 = 1.0 / v299;
      while (1)
      {
        v319 = v306;
        v320 = v305;
        v321 = v315 + 1;
        if (v315 + 1 < v297)
        {
          v322 = (float *)&v776[8 * v315];
          v323 = *v322;
          v324 = v322[1];
          v325 = v314;
          v326 = v298;
          while (vabds_f32(*v325, v323) < 1.0e-10)
          {
            v327 = v325[1];
            if (vabds_f32(v327, v324) >= 1.0e-10)
              goto LABEL_399;
            v325 += 2;
            if (!--v326)
              goto LABEL_400;
          }
          v327 = v325[1];
LABEL_399:
          v328 = v327 - v324;
          v329 = *v325 - v323;
          v330 = 1.0 / sqrtf((float)(v329 * v329) + (float)(v328 * v328));
          v306 = v330 * v329;
          v305 = v330 * v328;
        }
LABEL_400:
        v331 = atan2f(v305, v306);
        v332 = v331 - atan2f(v320, v319);
        v333 = v332;
        if (v332 > 3.14159265)
          break;
        if (v333 < -3.14159265)
        {
          v334 = 6.28318531;
          goto LABEL_404;
        }
LABEL_405:
        v335 = fabsf(v332);
        v336 = v312;
        if (v312 == 2)
        {
          if (1.0 / sin(v335 * -0.5 + 1.57079633) <= v313)
            v336 = 2;
          else
            v336 = 1;
        }
        v337 = fmaxf(ceilf(v335 * v317), 1.0);
        if ((unint64_t)v337 < 2)
        {
          v318 = 2;
        }
        else if (v336 == 1)
        {
          v318 = 6;
        }
        else if (v336 == 2)
        {
          v318 = 12;
        }
        else
        {
          v318 = 2 * (unint64_t)v337;
        }
        v316 += v318;
        --v298;
        v314 += 2;
        v315 = v321;
        if (v321 == v311)
        {
          v307 = v316 + 2;
          v8 = a1;
          v289 = v757;
          v290 = v760;
LABEL_417:
          if (*(_BYTE *)(v296 + 96))
            v307 += 2;
          if (*(_BYTE *)(v296 + 97))
            v307 += 2;
          if (v307 < 0x10000)
          {
            v292 = 3 * v307 + *(_QWORD *)(v296 + 24);
            v293 = *(_QWORD *)(v296 + 8) + v307;
            v294 = v292 - 6;
          }
          else
          {
            v293 = *(_QWORD *)(v296 + 8);
            v294 = *(_QWORD *)(v296 + 24);
          }
          *(_QWORD *)(v296 + 16) = v293;
          *(_QWORD *)(v296 + 32) = v294;
          *(_QWORD *)(v296 + 48) = *(_QWORD *)(v296 + 40);
LABEL_376:
          v295 = (_QWORD *)*v291++;
          v289[1] = v295[2] + v289[1] - v295[1];
          v289[3] = v295[4] + v289[3] - v295[3];
          v289[5] = v295[6] + v289[5] - v295[5];
          if (v291 != v290)
            goto LABEL_377;
          v284 = v744;
          if (v793)
            operator delete(v793);
LABEL_425:
          if (v804)
            operator delete(v804);
          v338 = v748;
          v339 = *v748;
          if (v752 < v740)
          {
            *(_QWORD *)v752 = v339;
            v288 = v752 + 8;
          }
          else
          {
            v340 = (char *)v284;
            v341 = v752 - (char *)v284;
            v342 = v341 >> 3;
            v343 = (v341 >> 3) + 1;
            if (v343 >> 61)
              abort();
            v344 = v340;
            v345 = v740 - v340;
            v346 = (v740 - v340) >> 2;
            if (v346 > v343)
              v343 = v346;
            if (v345 >= 0x7FFFFFFFFFFFFFF8)
              v347 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v347 = v343;
            if (v347)
            {
              if (!(v347 >> 61))
              {
                v348 = operator new(8 * v347);
                goto LABEL_438;
              }
LABEL_767:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v348 = 0;
LABEL_438:
            v349 = &v348[8 * v342];
            *v349 = v339;
            v288 = (char *)(v349 + 1);
            v350 = v344;
            if (v752 != v344)
            {
              v351 = v752 - 8 - v344;
              if (v351 < 0x168)
              {
                v352 = v752;
                goto LABEL_446;
              }
              if (&v348[v341 - 8 - (v351 & 0xFFFFFFFFFFFFFFF8)] <= &v348[v341 - 8]
                && &v752[-(v351 & 0xFFFFFFFFFFFFFFF8) - 8] <= v752 - 8
                && (unint64_t)(v752 - &v348[v341]) >= 0x20)
              {
                v354 = (v351 >> 3) + 1;
                v352 = &v752[-8 * (v354 & 0x3FFFFFFFFFFFFFFCLL)];
                v355 = &v348[8 * v342 - 16];
                v356 = v752 - 16;
                v357 = v354 & 0x3FFFFFFFFFFFFFFCLL;
                v350 = v344;
                do
                {
                  v358 = *(_OWORD *)v356;
                  *(v355 - 1) = *((_OWORD *)v356 - 1);
                  *v355 = v358;
                  v355 -= 2;
                  v356 -= 32;
                  v357 -= 4;
                }
                while (v357);
                v349 -= v354 & 0x3FFFFFFFFFFFFFFCLL;
                if (v354 != (v354 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_447;
              }
              else
              {
                v352 = v752;
LABEL_446:
                v350 = v344;
                do
                {
LABEL_447:
                  v353 = *((_QWORD *)v352 - 1);
                  v352 -= 8;
                  *--v349 = v353;
                }
                while (v352 != v350);
              }
            }
            v740 = &v348[8 * v347];
            if (v350)
              operator delete(v350);
            v284 = v349;
            v338 = v748;
          }
          v286 = (_QWORD **)(v338 + 1);
          v752 = v288;
          v287 = v738;
          goto LABEL_371;
        }
      }
      v334 = -6.28318531;
LABEL_404:
      v332 = v333 + v334;
      goto LABEL_405;
    }
    v283 = v734 + 1;
    if (v734 + 1 != v730)
      continue;
    break;
  }
  if (!*((_BYTE *)v8 + 136))
  {
    v383 = (char *)v284;
    v360 = v752;
    goto LABEL_479;
  }
  v359 = (gdc::GlobeTileGrid *)operator new();
  v360 = v752;
  v361 = v359;
  v362 = (char *)v284;
  if (*((_BYTE *)v8 + 176))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v359, v726);
    v363 = *v735;
    *v735 = v361;
    if (v363)
    {
      v364 = *((_QWORD *)v363 + 323);
      if (v364)
        MEMORY[0x1A1AF4DE8](v364, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v363, 0x1020C4007FF0C4BLL);
      v361 = *v735;
    }
    *((_QWORD *)v361 + 323) = operator new[]();
    if (v362 != v752)
    {
      v365 = v362;
      do
      {
        v366 = *(uint64_t **)(*(_QWORD *)v365 + 56);
        v367 = *(uint64_t **)(*(_QWORD *)v365 + 64);
        while (v366 != v367)
        {
          v368 = *v366;
          v369 = *(_QWORD *)(*v366 + 80);
          if (v369)
          {
            v370 = *(_QWORD *)(v368 + 88);
            if (v370)
            {
              v371 = 0;
              v372 = *(_QWORD *)(v368 + 72);
              v373 = *v735;
              v374 = *((_QWORD *)*v735 + 323);
              v375 = (float *)(v372 + 4);
              do
              {
                v376 = *((float *)v373 + 648) * *(float *)(v369 + 4 * v371);
                v377 = vcvts_n_u32_f32(*(v375 - 1), 2uLL);
                if (v377 >= 3)
                  v377 = 3;
                v378 = *v375;
                v375 += 2;
                v379 = vcvts_n_u32_f32(v378, 2uLL);
                if (v379 >= 3)
                  v379 = 3;
                v380 = (float *)(v374 + 8 * (v377 | (4 * v379)));
                v381 = fminf(v376, *v380);
                v382 = fmaxf(v380[1], v376);
                *v380 = v381;
                v380[1] = v382;
                ++v371;
              }
              while (v370 > v371);
            }
          }
          ++v366;
        }
        v365 += 8;
      }
      while (v365 != v752);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v735);
    v383 = v362;
LABEL_479:
    v384 = 0;
    v385 = 0;
    v386 = 0;
    v387 = 0;
    v745 = v383;
    v388 = (v360 - v383) >> 3;
    v753 = v388;
    while (2)
    {
      if (v385 == v388
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v745[8 * v385] + 8) + v387 - **(_QWORD **)&v745[8 * v385]) >= 0x10000)
      {
        v389 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v389->__shared_owners_ = 0;
        v390 = (unint64_t *)&v389->__shared_owners_;
        v389->__shared_weak_owners_ = 0;
        v389->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0218;
        v389[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v389[1].__shared_owners_ = 20;
        LODWORD(v389[1].__shared_weak_owners_) = 1;
        v389[2].__vftable = 0;
        v389[2].__shared_owners_ = 0;
        v389[2].__shared_weak_owners_ = 0;
        v389[3].__vftable = (std::__shared_weak_count_vtbl *)(20 * v387);
        v391 = (std::__shared_count)0;
        *(_OWORD *)&v389[3].__shared_owners_ = 0u;
        v389[4].std::__shared_count = 0u;
        v389[4].__shared_weak_owners_ = 0;
        if ((v392 & 1) == 0)
        {
          v391 = (std::__shared_count)0;
          if (v461)
          {
            v462 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v462, "GeoGL", 0xA3D02C1100000005);
            v391 = (std::__shared_count)0;
          }
        }
        v389[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v389[5].__shared_owners_ = 0;
        *((std::__shared_count *)v389 + 11) = v391;
        v389[8].std::__shared_count = v391;
        v389[8].__shared_weak_owners_ = 0;
        v389[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v389 + 10) = v391;
        v389[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v389[5].__shared_weak_owners_) = 0;
        v389[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7F60;
        v389[9].__shared_weak_owners_ = (uint64_t)"BatchType/VData";
        v389[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
        v389[9].__shared_owners_ = (uint64_t)&unk_1E42B7F80;
        v793 = &v389[1];
        v794 = v389;
        v393 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v393->__shared_owners_ = 0;
        v394 = (unint64_t *)&v393->__shared_owners_;
        v393->__shared_weak_owners_ = 0;
        v393[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v395 = v393 + 1;
        v393->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v393[1].__shared_owners_ = 2;
        LODWORD(v393[1].__shared_weak_owners_) = 257;
        v393[2].__vftable = 0;
        v393[2].__shared_owners_ = 0;
        v393[2].__shared_weak_owners_ = 0;
        v393[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v386);
        v396 = (std::__shared_count)0;
        *(_OWORD *)&v393[3].__shared_owners_ = 0u;
        v393[4].std::__shared_count = 0u;
        v393[4].__shared_weak_owners_ = 0;
        if ((v397 & 1) == 0)
        {
          v396 = (std::__shared_count)0;
          v395 = v393 + 1;
          if (v463)
          {
            v464 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v464, "GeoGL", 0xA3D02C1100000005);
            v396 = (std::__shared_count)0;
            v395 = v393 + 1;
          }
        }
        v393[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v393[5].__shared_owners_ = 0;
        *((std::__shared_count *)v393 + 11) = v396;
        v393[8].std::__shared_count = v396;
        v393[8].__shared_weak_owners_ = 0;
        v393[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v393 + 10) = v396;
        v393[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v393[5].__shared_weak_owners_) = 0;
        LODWORD(v393[10].__vftable) = 0;
        v393[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v393[1].__shared_owners_ = 2;
        v393[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v393[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
        v768 = v395;
        *(_QWORD *)&v788 = v395;
        *((_QWORD *)&v788 + 1) = v393;
        v398 = operator new();
        do
          v399 = __ldxr(v390);
        while (__stxr(v399 + 1, v390));
        do
          v400 = __ldxr(v394);
        while (__stxr(v400 + 1, v394));
        if ((v401 & 1) == 0
        {
          if ((v465 & 1) == 0
          {
            ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE32518 = 1;
        }
        *(_QWORD *)(v398 + 32) = 0;
        *(_QWORD *)(v398 + 40) = 0;
        *(_DWORD *)(v398 + 48) = 0;
        *(_QWORD *)v398 = &off_1E42BBC08;
        *(_QWORD *)(v398 + 8) = "BatchType/Mesh";
        *(_QWORD *)(v398 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v398 + 24) = 0;
        *(_QWORD *)(v398 + 56) = &ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v398 + 64) = 0;
        v402 = v398 + 64;
        *(_QWORD *)(v398 + 72) = 0;
        *(_QWORD *)(v398 + 80) = 0;
        if ((v403 & 1) == 0)
        {
          v402 = v398 + 64;
          if (v466)
          {
            v467 = operator new();
            *(_QWORD *)(v467 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v467 + 24) = "GeoGL";
            *(_OWORD *)(v467 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v467 = &off_1E42B5668;
            *(_QWORD *)(v467 + 8) = "GeoGL";
            *(_OWORD *)(v467 + 72) = 0u;
            *(_OWORD *)(v467 + 88) = 0u;
            *(_OWORD *)(v467 + 104) = 0u;
            *(_OWORD *)(v467 + 120) = 0u;
            *(_OWORD *)(v467 + 136) = 0u;
            *(_OWORD *)(v467 + 152) = 0u;
            *(_OWORD *)(v467 + 168) = 0u;
            *(_OWORD *)(v467 + 184) = 0u;
            *(_OWORD *)(v467 + 200) = 0u;
            *(_OWORD *)(v467 + 216) = 0u;
            *(_OWORD *)(v467 + 232) = 0u;
            *(_QWORD *)(v467 + 248) = 0;
            *(_OWORD *)(v467 + 56) = 0u;
            v468 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v467 + 56), 0);
            if ((_DWORD)v468)
              geo::read_write_lock::logFailure(v468, (uint64_t)"initialization", v469);
            v470 = malloc_create_zone(0, 0);
            *(_QWORD *)(v467 + 48) = v470;
            malloc_set_zone_name(v470, "GeoGL");
            *(_QWORD *)(v467 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v467;
            v402 = v398 + 64;
          }
        }
        v404 = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v398 + 120) = 0;
        *(_QWORD *)(v398 + 96) = 0;
        *(_QWORD *)(v398 + 104) = 0;
        *(_QWORD *)(v398 + 88) = v404;
        if ((v404 & 1) == 0)
        {
          v741 = v402;
          v402 = v741;
          if (v471)
          {
            v472 = operator new();
            *(_QWORD *)(v472 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v472 + 24) = "GeoGL";
            *(_OWORD *)(v472 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v472 = &off_1E42B5668;
            *(_QWORD *)(v472 + 8) = "GeoGL";
            *(_OWORD *)(v472 + 72) = 0u;
            *(_OWORD *)(v472 + 88) = 0u;
            *(_OWORD *)(v472 + 104) = 0u;
            *(_OWORD *)(v472 + 120) = 0u;
            *(_OWORD *)(v472 + 136) = 0u;
            *(_OWORD *)(v472 + 152) = 0u;
            *(_OWORD *)(v472 + 168) = 0u;
            *(_OWORD *)(v472 + 184) = 0u;
            *(_OWORD *)(v472 + 200) = 0u;
            *(_OWORD *)(v472 + 216) = 0u;
            *(_OWORD *)(v472 + 232) = 0u;
            *(_QWORD *)(v472 + 248) = 0;
            v473 = v472;
            *(_OWORD *)(v472 + 56) = 0u;
            v474 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v472 + 56), 0);
            if ((_DWORD)v474)
              geo::read_write_lock::logFailure(v474, (uint64_t)"initialization", v475);
            v476 = malloc_create_zone(0, 0);
            *(_QWORD *)(v473 + 48) = v476;
            malloc_set_zone_name(v476, "GeoGL");
            *(_QWORD *)(v473 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v473;
            v402 = v741;
          }
        }
        *(_QWORD *)(v398 + 128) = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v398 + 136) = 0;
        *(_QWORD *)(v398 + 112) = v398 + 120;
        *(_QWORD *)v398 = &off_1E42BDBF8;
        *(_QWORD *)(v398 + 16) = &unk_1E42BDC18;
        v804 = &v389[1];
        v805 = (uint64_t)v389;
        do
          v405 = __ldxr(v390);
        while (__stxr(v405 + 1, v390));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v402, (uint64_t *)&v804, (uint64_t *)&v806, 1uLL);
        v406 = (std::__shared_weak_count *)v805;
        if (v805)
        {
          v407 = (unint64_t *)(v805 + 8);
          do
            v408 = __ldaxr(v407);
          while (__stlxr(v408 - 1, v407));
          if (!v408)
          {
            ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
            std::__shared_weak_count::__release_weak(v406);
          }
        }
        do
          v409 = __ldxr(v394);
        while (__stxr(v409 + 1, v394));
        v410 = *(std::__shared_weak_count **)(v398 + 104);
        *(_QWORD *)(v398 + 96) = v768;
        *(_QWORD *)(v398 + 104) = v393;
        if (v410)
        {
          v411 = (unint64_t *)&v410->__shared_owners_;
          do
            v412 = __ldaxr(v411);
          while (__stlxr(v412 - 1, v411));
          if (!v412)
          {
            ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
            std::__shared_weak_count::__release_weak(v410);
          }
        }
        *(_QWORD *)v398 = &off_1E42BB720;
        *(_QWORD *)(v398 + 16) = &unk_1E42BB740;
        do
          v413 = __ldaxr(v394);
        while (__stlxr(v413 - 1, v394));
        if (!v413)
        {
          ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
          std::__shared_weak_count::__release_weak(v393);
        }
        do
          v414 = __ldaxr(v390);
        while (__stlxr(v414 - 1, v390));
        if (!v414)
        {
          ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
          std::__shared_weak_count::__release_weak(v389);
        }
        v416 = (uint64_t *)a1[5];
        v415 = a1[6];
        if ((unint64_t)v416 >= v415)
        {
          v418 = (uint64_t *)*v728;
          v419 = (char *)v416 - (_BYTE *)*v728;
          v420 = v419 >> 3;
          v421 = (v419 >> 3) + 1;
          if (v421 >> 61)
            abort();
          v422 = v415 - (_QWORD)v418;
          if (v422 >> 2 > v421)
            v421 = v422 >> 2;
          if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFF8)
            v423 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v423 = v421;
          if (v423)
          {
            if (v423 >> 61)
              goto LABEL_767;
            v424 = operator new(8 * v423);
          }
          else
          {
            v424 = 0;
          }
          v425 = (uint64_t *)&v424[8 * v420];
          *v425 = v398;
          v417 = v425 + 1;
          if (v416 == v418)
          {
            v418 = v416;
          }
          else
          {
            v426 = (char *)(v416 - 1) - (char *)v418;
            if (v426 < 0x58)
              goto LABEL_780;
            if ((unint64_t)((char *)v416 - &v424[v419]) < 0x20)
              goto LABEL_780;
            v427 = (v426 >> 3) + 1;
            v428 = &v424[8 * v420 - 16];
            v429 = v416 - 2;
            v430 = v427 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v431 = *(_OWORD *)v429;
              *(v428 - 1) = *((_OWORD *)v429 - 1);
              *v428 = v431;
              v428 -= 2;
              v429 -= 4;
              v430 -= 4;
            }
            while (v430);
            v425 -= v427 & 0x3FFFFFFFFFFFFFFCLL;
            v416 -= v427 & 0x3FFFFFFFFFFFFFFCLL;
            if (v427 != (v427 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_780:
              do
              {
                v432 = *--v416;
                *--v425 = v432;
              }
              while (v416 != v418);
              v418 = (uint64_t *)*v728;
            }
          }
          a1[4] = v425;
          a1[5] = v417;
          a1[6] = &v424[8 * v423];
          if (v418)
            operator delete(v418);
        }
        else
        {
          *v416 = v398;
          v417 = v416 + 1;
        }
        v388 = v753;
        a1[5] = v417;
        if (v384 < v385)
        {
          v433 = 0;
          v434 = v384;
          do
          {
            v435 = *(_QWORD *)&v745[8 * v434];
            v436 = *(_QWORD *)(v435 + 32);
            v437 = v436 + v433;
            v438 = *(_QWORD *)(v435 + 40) + v433;
            *(_QWORD *)(v435 + 32) = v437;
            *(_QWORD *)(v435 + 40) = v438;
            v433 = v438 - v436;
            ++v434;
          }
          while (v385 != v434);
          v439 = 0;
          do
          {
            v440 = *(uint64_t **)&v745[8 * v384];
            v441 = *v440;
            v442 = *v440 + v439;
            v443 = v440[1] + v439;
            *v440 = v442;
            v440[1] = v443;
            v444 = v440[2];
            v445 = v444 + v433;
            v446 = v440[3] + v433;
            v440[2] = v445;
            v440[3] = v446;
            v440[11] = v398;
            v447 = (_QWORD *)v440[7];
            v448 = (_QWORD *)v440[8];
            if (v447 != v448)
            {
              v449 = v440[4];
              do
              {
                v450 = (_QWORD *)*v447++;
                v451 = v450[2] - v450[1];
                v450[1] = v442;
                v442 += v451;
                v452 = v450[4] - v450[3];
                v450[2] = v442;
                v450[3] = v445;
                v445 += v452;
                v453 = v450[6] - v450[5];
                v450[4] = v445;
                v450[5] = v449;
                v449 += v453;
                v450[6] = v449;
              }
              while (v447 != v448);
            }
            v439 = v443 - v441;
            v433 = v446 - v444;
            ++v384;
          }
          while (v384 != v385);
        }
        v454 = (std::__shared_weak_count *)*((_QWORD *)&v788 + 1);
        if (!*((_QWORD *)&v788 + 1))
          goto LABEL_547;
        v455 = (unint64_t *)(*((_QWORD *)&v788 + 1) + 8);
        do
          v456 = __ldaxr(v455);
        while (__stlxr(v456 - 1, v455));
        if (!v456)
        {
          ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
          std::__shared_weak_count::__release_weak(v454);
          v457 = v794;
          if (v794)
          {
LABEL_548:
            v458 = (unint64_t *)&v457->__shared_owners_;
            do
              v459 = __ldaxr(v458);
            while (__stlxr(v459 - 1, v458));
            if (!v459)
            {
              ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
              std::__shared_weak_count::__release_weak(v457);
            }
          }
        }
        else
        {
LABEL_547:
          v457 = v794;
          if (v794)
            goto LABEL_548;
        }
        v387 = 0;
        v386 = 0;
        v384 = v385;
      }
      if (v385 < v388)
      {
        v460 = *(_QWORD **)&v745[8 * v385];
        v387 = v460[1] + v387 - *v460;
        v386 = v460[3] + v386 + v460[5] - (v460[2] + v460[4]);
      }
      if (++v385 <= v388)
        continue;
      break;
    }
    if (v745)
      operator delete(v745);
    if (__pa)
      operator delete(__pa);
    *a1 = &off_1E428C960;
    a1[23] = *(_QWORD *)a4;
    v477 = *(_QWORD *)(a4 + 8);
    a1[24] = v477;
    if (v477)
    {
      v478 = (unint64_t *)(v477 + 8);
      do
        v479 = __ldxr(v478);
      while (__stxr(v479 + 1, v478));
    }
    a1[25] = *a5;
    v480 = a5[1];
    a1[26] = v480;
    if (v480)
    {
      v481 = (unint64_t *)(v480 + 8);
      do
        v482 = __ldxr(v481);
      while (__stxr(v482 + 1, v481));
    }
    a1[27] = 0;
    v483 = a1[1];
    v714 = a1[2];
    if (v483 != v714)
    {
      v484 = 1.0;
      while (1)
      {
        v485 = *(uint64_t ***)(*(_QWORD *)v483 + 1400);
        v715 = v483;
        v716 = *(uint64_t ***)(*(_QWORD *)v483 + 1408);
        if (v485 != v716)
          break;
LABEL_585:
        v483 = v715 + 8;
        if (v715 + 8 == v714)
          return (uint64_t)a1;
      }
      while (1)
      {
        v486 = 0;
        v487 = *v485;
        v488 = **(_QWORD **)((*v485)[11] + 64);
        v489 = **v485;
        v490 = (*v485)[1];
        v788 = 0uLL;
        v491 = *(_QWORD *)(v488 + 8);
        v492 = v491 * v489;
        v493 = v491 * v490;
        if (v491 * v490 != v491 * v489)
        {
          if (a2 && *(_BYTE *)(v488 + 17) != 2)
            v486 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v488, v492, v491 * v490, 1, 1);
          else
            v486 = *(_QWORD *)(v488 + 72) + v492;
        }
        *(_QWORD *)&v494 = a2;
        *((_QWORD *)&v494 + 1) = v488;
        v788 = v494;
        v789 = v492;
        v790 = v493;
        v792 = v486;
        v791 = 257;
        v495 = v487[2];
        v497 = v487[4];
        v496 = v487[5];
        if (v496 == v497)
        {
          v496 = v487[3];
        }
        else
        {
          if (v497 < v495)
            v495 = v487[4];
          if (v487[3] > v496)
            v496 = v487[3];
        }
        v498 = 0;
        v499 = *(_QWORD *)(v487[11] + 96);
        v783 = 0uLL;
        v500 = *(_QWORD *)(v499 + 8);
        v501 = v500 * v495;
        v502 = v500 * v496;
        if (v500 * v496 != v500 * v495)
        {
          if (a2 && *(_BYTE *)(v499 + 17) != 2)
            v498 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v499, v500 * v495, v502, 1, 1);
          else
            v498 = *(_QWORD *)(v499 + 72) + v501;
        }
        v719 = v485;
        *(_QWORD *)&v503 = a2;
        *((_QWORD *)&v503 + 1) = v499;
        v783 = v503;
        v784 = v501;
        v785 = v502;
        v787 = v498;
        v786 = 257;
        v504 = v487[2];
        v505 = v487[4];
        memset(v782, 0, sizeof(v782));
        memset(&v781, 0, sizeof(v781));
        v720 = v487;
        v506 = (uint64_t *)v487[7];
        v718 = v487 + 7;
        v507 = (uint64_t *)v487[8];
        v508 = a1;
        if (v506 != v507)
          break;
LABEL_715:
        {
          v712 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v712, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v690 = (_QWORD *)*v718;
        v691 = v720;
        if (*v718)
        {
          v692 = (_QWORD *)v720[8];
          v693 = (_QWORD *)*v718;
          if (v692 != v690)
          {
            do
            {
              v695 = (void (***)(_QWORD, _QWORD *))*--v692;
              v694 = v695;
              *v692 = 0;
              if (v695)
              {
                (**v694)(v694, v693);
                {
                  v697 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v697, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, _QWORD *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v694, 136);
              }
            }
            while (v692 != v690);
            v693 = (_QWORD *)*v718;
            v691 = v720;
          }
          v691[8] = (uint64_t)v690;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v691[10] + 40))(v691[10], v693, v691[9] - (_QWORD)v693);
          *v718 = 0;
          v718[1] = 0;
          v718[2] = 0;
        }
        *v718 = 0;
        v718[1] = 0;
        v718[2] = 0;
        if (v781.__begin_)
          operator delete(v781.__begin_);
        if (v782[0])
          operator delete(v782[0]);
        if (v787)
        {
          v698 = v784;
          v699 = v785;
          if (v785 != v784)
          {
            v700 = (_QWORD *)*((_QWORD *)&v783 + 1);
            v701 = v786;
            v702 = HIBYTE(v786);
            if ((_QWORD)v783 && *(_BYTE *)(*((_QWORD *)&v783 + 1) + 17) != 2)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v783 + 64))(v783, v787);
            if (v701 && !v702)
            {
              v703 = v700[7];
              v704 = v700[8];
              if (v704 == v703)
                v703 = v700[10] - v700[9];
              if (v698 < v703)
                v703 = v698;
              if (v704 <= v699)
                v704 = v699;
              if (v704 == v703)
                v704 = v703 + v700[10] - v700[9];
              v700[7] = v703;
              v700[8] = v704;
            }
          }
        }
        if (v792)
        {
          v705 = v789;
          v706 = v790;
          if (v790 != v789)
          {
            v707 = (_QWORD *)*((_QWORD *)&v788 + 1);
            v708 = v791;
            v709 = HIBYTE(v791);
            if ((_QWORD)v788 && *(_BYTE *)(*((_QWORD *)&v788 + 1) + 17) != 2)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v788 + 64))(v788, v792);
            if (v708 && !v709)
            {
              v710 = v707[7];
              v711 = v707[8];
              if (v711 == v710)
                v710 = v707[10] - v707[9];
              if (v705 < v710)
                v710 = v705;
              if (v711 <= v706)
                v711 = v706;
              if (v711 == v710)
                v711 = v710 + v707[10] - v707[9];
              v707[7] = v710;
              v707[8] = v711;
            }
          }
        }
        v485 = v719 + 1;
        if (v719 + 1 == v716)
          goto LABEL_585;
      }
      v509 = v486;
      v510 = v498 + 2 * v505 - 2 * v495;
      v511 = v498 + 2 * v504 - 2 * v495;
      v721 = (uint64_t *)v487[8];
      while (2)
      {
        v513 = *v506;
        v804 = v508;
        v805 = v513;
        v806 = xmmword_19FFB2F80;
        v807 = xmmword_19FFB3450;
        *(_OWORD *)v808 = xmmword_19FFB2FB0;
        *(_OWORD *)&v808[16] = xmmword_19FFB2F60;
        v809 = xmmword_19FFB2F70;
        v810 = xmmword_19FFB3460;
        v803 = v509;
        if (*(_QWORD *)(v513 + 16) != *(_QWORD *)(v513 + 8))
        {
          v802 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(v513, v782, &v781, (uint64_t *)&v802);
          v742 = (_WORD *)v511;
          v515 = v802;
          if (v802 >= 2)
          {
            v724 = (_WORD *)v510;
            v725 = v802 - 2;
            v516 = (char *)v782[0];
            begin = v781.__begin_;
            v811 = v509;
            v517 = *(int32x2_t *)v782[0];
            v518 = v802 - 1;
            if (v802 >= 9)
            {
              v519 = v518 & 0xFFFFFFFFFFFFFFF8;
              v514.i64[1] = *(_QWORD *)v782[0];
              v522 = (int8x16_t)vdupq_lane_s32(v517, 0);
              v523 = (char *)v782[0] + 40;
              v524 = 0uLL;
              v525 = v518 & 0xFFFFFFFFFFFFFFF8;
              v526 = 0uLL;
              do
              {
                v527 = (const float *)(v523 - 2);
                v814 = vld2q_f32(v527);
                v529 = *(int32x4_t *)v523;
                v528 = *((int8x16_t *)v523 + 1);
                v523 += 4;
                v530 = (float32x4_t)vuzp1q_s32(v529, (int32x4_t)v528);
                v531 = (float32x4_t)vuzp2q_s32(v529, (int32x4_t)v528);
                v532 = vsubq_f32(v814.val[0], (float32x4_t)vextq_s8(v522, (int8x16_t)v814.val[0], 0xCuLL));
                v533 = vsubq_f32(v530, (float32x4_t)vextq_s8((int8x16_t)v814.val[0], (int8x16_t)v530, 0xCuLL));
                v534 = vsubq_f32(v814.val[1], (float32x4_t)vextq_s8(v514, (int8x16_t)v814.val[1], 0xCuLL));
                v814.val[0] = vsubq_f32(v531, (float32x4_t)vextq_s8((int8x16_t)v814.val[1], (int8x16_t)v531, 0xCuLL));
                v524 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v532, v532), v534, v534)), v524);
                v526 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v533, v533), v814.val[0], v814.val[0])), v526);
                v514 = (int8x16_t)v531;
                v522 = (int8x16_t)v530;
                v525 -= 8;
              }
              while (v525);
              v535 = vaddq_f32(v526, v524);
              v520 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v535, v535));
              if (v518 != v519)
              {
                v521 = (float32x2_t)vextq_s8(v528, v528, 8uLL).u64[0];
                goto LABEL_619;
              }
            }
            else
            {
              v519 = 0;
              v520 = 0.0;
              v521 = *(float32x2_t *)v782[0];
LABEL_619:
              v536 = ~v519 + v802;
              v537 = (float32x2_t *)((char *)v782[0] + 8 * v519 + 8);
              do
              {
                v538 = *v537++;
                v539 = vsub_f32(v538, v521);
                v520 = sqrtf(vaddv_f32(vmul_f32(v539, v539))) + v520;
                v521 = v538;
                --v536;
              }
              while (v536);
            }
            v540 = v520;
            v541 = v484 / v520;
            if (v540 <= 1.0e-10)
              v542 = 0.0;
            else
              v542 = v541;
            v543 = (float *)((char *)v782[0] + 8);
            v544 = sqrtf((float)((float)(*((float *)v782[0] + 2) - *(float *)v517.i32)* (float)(*((float *)v782[0] + 2) - *(float *)v517.i32))+ (float)((float)(*((float *)v782[0] + 3) - *(float *)&v517.i32[1])* (float)(*((float *)v782[0] + 3) - *(float *)&v517.i32[1])));
            v545 = 1;
            while (vabds_f32(*v543, *(float *)v517.i32) < 1.0e-10)
            {
              v546 = v543[1];
              if (vabds_f32(v546, *(float *)&v517.i32[1]) >= 1.0e-10)
                goto LABEL_630;
              ++v545;
              v543 += 2;
              if (v802 == v545)
              {
                v547 = 1.0;
                v548 = 0.0;
                goto LABEL_631;
              }
            }
            v546 = v543[1];
LABEL_630:
            v549 = v546 - *(float *)&v517.i32[1];
            v550 = *v543 - *(float *)v517.i32;
            v551 = v484 / sqrtf((float)(v550 * v550) + (float)(v549 * v549));
            v547 = v551 * v550;
            v548 = v551 * v549;
LABEL_631:
            v552 = -v548;
            v793 = (void *)*v781.__begin_;
            LODWORD(v794) = v517.i32[0];
            v553 = *((_DWORD *)v782[0] + 1);
            v799 = 0;
            HIDWORD(v794) = v553;
            v796 = -v548;
            v797 = v547;
            v801 = 0;
            if (*(_BYTE *)(v805 + 96))
            {
              v800 = 1;
              v795.f32[0] = v552 - (float)(v547 * *((float *)&v810 + 2));
              v795.f32[1] = v547 - (float)(v548 * *((float *)&v810 + 2));
              v795.f32[2] = v548 - (float)(v547 * *((float *)&v810 + 2));
              v795.f32[3] = -(float)((float)(v548 * *((float *)&v810 + 2)) + v547);
              v554 = (char *)&v806 + 12;
              v555 = &v806;
              if (!*(_BYTE *)(v805 + 120))
                goto LABEL_635;
              if (*(_BYTE *)(v805 + 120) == 1)
              {
                v555 = (__int128 *)v808;
                v554 = &v808[12];
LABEL_635:
                v556 = *((_DWORD *)v555 + 2);
                v798.i64[0] = *(_QWORD *)v555;
                v798.i64[1] = __PAIR64__(*(_DWORD *)v554, v556);
              }
              HIDWORD(v799) = 0;
              v769 = v548;
              v777 = v547;
              md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
              v548 = v769;
              v547 = v777;
            }
            v722 = v509;
            v778 = __PAIR64__(LODWORD(v548), LODWORD(v547));
            v800 = 0;
            v795.i64[0] = __PAIR64__(LODWORD(v547), LODWORD(v552));
            v795.f32[2] = v548;
            v795.f32[3] = -v547;
            v798 = *(int8x16_t *)v808;
            md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
            if (v518 >= 2)
            {
              v557 = (float *)(v516 + 16);
              v558 = v725;
              v559 = 1;
              v560 = v544;
              v561 = (int32x2_t)v778;
              v746 = v542;
              while (1)
              {
                v793 = (void *)begin[v559];
                v564 = (float *)&v516[8 * v559];
                v565 = *v564;
                v566 = v564[1];
                if (++v559 >= v515)
                {
LABEL_647:
                  v570 = (float32x2_t)vdup_lane_s32(v561, 1);
                  v571 = v561;
                  v572 = *(float *)v561.i32;
                }
                else
                {
                  v567 = v557;
                  v568 = v558;
                  while (vabds_f32(*v567, v565) < 1.0e-10)
                  {
                    v569 = v567[1];
                    if (vabds_f32(v569, v566) >= 1.0e-10)
                      goto LABEL_649;
                    v567 += 2;
                    if (!--v568)
                      goto LABEL_647;
                  }
                  v569 = v567[1];
LABEL_649:
                  v573 = v569 - v566;
                  v574 = *v567 - v565;
                  v575 = v484 / sqrtf((float)(v574 * v574) + (float)(v573 * v573));
                  v572 = v575 * v574;
                  *(float *)&v576 = v575 * v573;
                  *(float *)v571.i32 = v575 * v574;
                  v571.i32[1] = v576;
                  v570 = (float32x2_t)__PAIR64__(v561.u32[1], v576);
                }
                v779 = v571;
                v577 = (float *)&v516[8 * v559];
                v578 = *v577;
                v579 = v577[1];
                v580 = v572 + *(float *)v561.i32;
                v581 = vaddv_f32(v570);
                v582 = (float)(v580 * v580) + (float)(v581 * v581);
                if (v582 <= 0.0)
                {
                  v585 = *(float *)&v561.i32[1];
                  v584 = *(float *)v561.i32;
                }
                else
                {
                  v583 = v484 / sqrtf(v582);
                  v584 = -(float)(v581 * v583);
                  v585 = v583 * v580;
                }
                v562 = v484
                     - (float)((float)((float)(v584 * v572) + (float)(v585 * v570.f32[0]))
                             * (float)((float)(v584 * v572) + (float)(v585 * v570.f32[0])));
                *(float *)&v794 = *v564;
                v586 = *((_DWORD *)v564 + 1);
                *((float *)&v799 + 1) = v560 * v542;
                v798 = *(int8x16_t *)v808;
                HIDWORD(v794) = v586;
                v796 = v584;
                *(float *)&v799 = v560;
                v797 = v585;
                v801 = 1;
                v587 = v805;
                v588 = *(float *)(v805 + 128);
                if (v588 >= 1.5708)
                  goto LABEL_640;
                v761 = v579;
                v765 = v578;
                v749 = v484
                     - (float)((float)((float)(v584 * v572) + (float)(v585 * v570.f32[0]))
                             * (float)((float)(v584 * v572) + (float)(v585 * v570.f32[0])));
                v754 = v560;
                v589 = v570.f32[1];
                v770 = v561;
                v590 = atan2f(v570.f32[0], v572);
                v591 = v590 - atan2f(v589, *(float *)v770.i32);
                v592 = v591;
                if (v591 <= 3.14159265)
                {
                  v593 = v765;
                  v594 = v761;
                  if (v592 < -3.14159265)
                    v591 = v592 + 6.28318531;
                }
                else
                {
                  v591 = v592 + -6.28318531;
                  v593 = v765;
                  v594 = v761;
                }
                v595 = fabsf(v591);
                v596 = *(unsigned __int8 *)(v587 + 121);
                v484 = 1.0;
                if (v596 == 2)
                {
                  v597 = sin(v595 * -0.5 + 1.57079633);
                  v594 = v761;
                  v593 = v765;
                  *(float *)&v597 = 1.0 / v597;
                  if (*(float *)(v587 + 124) < *(float *)&v597)
                    v596 = 1;
                  else
                    v596 = 2;
                }
                v598 = sqrtf((float)((float)(v593 - v565) * (float)(v593 - v565))+ (float)((float)(v594 - v566) * (float)(v594 - v566)));
                v599 = (unint64_t)fmaxf(ceilf(v595 / v588), 1.0);
                _V5.S[1] = v770.i32[1];
                if (v599 <= 1)
                  break;
                if (v596 == 2)
                {
                  v762 = v598;
                  _S10 = v770.i32[1];
                  __asm { FMLA            S0, S10, V5.S[1] }
                  v618 = 1.0 / sqrtf(_S0);
                  _V2.S[1] = v779.i32[1];
                  _S0 = v779.i32[1];
                  __asm { FMLA            S1, S0, V2.S[1] }
                  v622 = 1.0 / sqrtf(_S1);
                  v731 = -(float)(*(float *)&v779.i32[1] * v622);
                  v729 = v622 * *(float *)v779.i32;
                  v623 = sqrtf(fmaxf(v749, 0.00001));
                  v750 = v584 / v623;
                  v624 = (float)(v584 / v623) - v584;
                  v727 = v585 / v623;
                  v625 = (float)(v585 / v623) - v585;
                  v626 = atan2f(v625, v624);
                  v627 = atan2f(*(float *)&v770.i32[1], *(float *)v770.i32);
                  v766 = sqrtf((float)(v624 * v624) + (float)(v625 * v625)) * sinf(v626 - v627);
                  v628 = 1.0 - v766;
                  v629 = -(float)(*(float *)&v770.i32[1] * v618);
                  v795.f32[0] = v629;
                  v795.f32[1] = v618 * *(float *)v770.i32;
                  v795.f32[2] = -(float)(v618 * (float)-*(float *)&v770.i32[1]);
                  v795.f32[3] = -(float)(v618 * *(float *)v770.i32);
                  md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                  if (v591 >= 0.0)
                  {
                    v795.i64[0] = 0;
                    v795.f32[2] = -(float)(v624 + (float)(v628 * v629));
                    v795.f32[3] = -(float)(v625 + (float)(v628 * (float)(v618 * *(float *)v770.i32)));
                    v798 = vextq_s8(*(int8x16_t *)&v808[8], *(int8x16_t *)&v808[8], 8uLL);
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.f32[0] = -v624;
                    v795.f32[1] = -v625;
                    v795.f32[2] = -v750;
                    v795.f32[3] = -v727;
                    *(float32x2_t *)v798.i8 = vmul_n_f32(*(float32x2_t *)&v808[8], v766);
                    v798.i64[1] = *(_QWORD *)&v808[8];
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.f32[0] = -v624;
                    v795.f32[1] = -v625;
                    v630 = v731;
                    *(float *)&v639 = -(float)(v624 + (float)(v628 * v731));
                    *(float *)&v640 = -(float)(v625 + (float)(v628 * v729));
                    v633 = v729;
                    v795.i64[1] = __PAIR64__(v640, v639);
                    *(float32x2_t *)v798.i8 = vmul_n_f32(*(float32x2_t *)&v808[8], v766);
                    v798.i64[1] = *(_QWORD *)&v808[8];
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.i64[0] = 0;
                    v636 = &v808[20];
                    v635 = &v808[16];
                  }
                  else
                  {
                    v795.f32[0] = v624 + (float)(v628 * v629);
                    v795.f32[1] = v625 + (float)(v628 * (float)(v618 * *(float *)v770.i32));
                    v795.i64[1] = __PAIR64__(LODWORD(v625), LODWORD(v624));
                    v798.i64[0] = *(_QWORD *)v808;
                    v798.u64[1] = (unint64_t)vmul_n_f32(*(float32x2_t *)v808, v766);
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.i64[0] = __PAIR64__(LODWORD(v727), LODWORD(v750));
                    v795.i64[1] = __PAIR64__(LODWORD(v625), LODWORD(v624));
                    v798.i64[0] = *(_QWORD *)v808;
                    v798.u64[1] = (unint64_t)vmul_n_f32(*(float32x2_t *)v808, v766);
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v630 = v731;
                    *(float *)&v631 = v624 + (float)(v628 * v731);
                    *(float *)&v632 = v625 + (float)(v628 * v729);
                    v633 = v729;
                    v795 = (float32x4_t)__PAIR64__(v632, v631);
                    v634.i64[0] = *(_QWORD *)v808;
                    v634.i64[1] = *(_QWORD *)&v808[16];
                    v798 = v634;
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v795.i64[0] = __PAIR64__(LODWORD(v729), LODWORD(v731));
                    v635 = v808;
                    v636 = &v808[4];
                  }
                  v542 = v746;
                  v601 = v762;
                  v795.f32[2] = -v630;
                  v795.f32[3] = -v633;
                  v641 = *(_DWORD *)v636;
                  v798.i32[0] = *(_DWORD *)v635;
                  v798.i32[1] = v641;
                  v798.i64[1] = *(_QWORD *)&v808[8];
                  md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                  v795.i64[0] = __PAIR64__(LODWORD(v633), LODWORD(v630));
                  v795.f32[2] = -v630;
                  v795.f32[3] = -v633;
                  v798 = *(int8x16_t *)v808;
                }
                else
                {
                  if (v596 != 1)
                  {
                    for (i = 0; i != v599; ++i)
                    {
                      v638 = __sincosf_stret((float)((float)((float)(int)i * (float)(1.0 / (float)((float)v599 + -1.0))) + -0.5)* v591);
                      v796 = -(float)((float)(v638.__sinval * v585) - (float)(v638.__cosval * v584));
                      v797 = (float)(v638.__sinval * v584) + (float)(v638.__cosval * v585);
                      v795.f32[0] = v796;
                      v795.f32[1] = v797;
                      v795.f32[2] = -(float)((float)(v638.__cosval * v584) - (float)(v638.__sinval * v585));
                      v795.f32[3] = -v797;
                      md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                      v801 = 0;
                    }
                    v560 = v598 + v754;
                    v542 = v746;
                    goto LABEL_641;
                  }
                  v601 = v598;
                  _S0 = v770.i32[1];
                  __asm { FMLA            S2, S0, V5.S[1] }
                  v607 = 1.0 / sqrtf(_S2);
                  v608 = -(float)(*(float *)&v770.i32[1] * v607);
                  v609 = v607 * *(float *)v770.i32;
                  _V4.S[1] = v779.i32[1];
                  _S0 = v779.i32[1];
                  __asm { FMLA            S3, S0, V4.S[1] }
                  v613 = 1.0 / sqrtf(_S3);
                  v614 = -(float)(*(float *)&v779.i32[1] * v613);
                  v615 = v613 * *(float *)v779.i32;
                  v795.f32[0] = v608;
                  v795.f32[1] = v607 * *(float *)v770.i32;
                  v795.f32[2] = -(float)(v607 * (float)-*(float *)&v770.i32[1]);
                  v795.f32[3] = -(float)(v607 * *(float *)v770.i32);
                  md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                  if (v591 >= 0.0)
                  {
                    v795.i64[0] = 0;
                    v795.f32[2] = -v614;
                    v795.f32[3] = -v615;
                    v798.i64[0] = *(_QWORD *)&v808[16];
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v798.i64[0] = *(_QWORD *)v808;
                  }
                  else
                  {
                    v795 = (float32x4_t)__PAIR64__(LODWORD(v609), LODWORD(v608));
                    v798.i64[1] = *(_QWORD *)&v808[16];
                    md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                    v798.i64[1] = *(_QWORD *)&v808[8];
                  }
                  v542 = v746;
                  v795.i64[0] = __PAIR64__(LODWORD(v615), LODWORD(v614));
                  v795.f32[2] = -v614;
                  v795.f32[3] = -v615;
                }
                md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
                v560 = v601 + v754;
                v484 = 1.0;
LABEL_641:
                --v558;
                v557 += 2;
                v561 = v779;
                if (v559 == v518)
                  goto LABEL_678;
              }
              v560 = v598 + v754;
              v542 = v746;
              v562 = v749;
LABEL_640:
              v563 = sqrtf(fmaxf(v562, 0.1));
              v795.f32[0] = v584 / v563;
              v795.f32[1] = v585 / v563;
              v795.f32[2] = -(float)(v584 / v563);
              v795.f32[3] = -(float)(v585 / v563);
              md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
              goto LABEL_641;
            }
            v560 = v544;
            v561 = (int32x2_t)v778;
LABEL_678:
            v642 = (float *)&v516[8 * v518];
            v643 = (float *)&v516[8 * v725];
            v508 = a1;
            v507 = v721;
            if (vabds_f32(*v642, *v643) >= 1.0e-10)
            {
              v647 = v642[1] - v643[1];
              v509 = v722;
            }
            else
            {
              v644 = v643[1];
              v645 = v642[1];
              v509 = v722;
              if (vabds_f32(v645, v644) < 1.0e-10)
              {
                v646 = *(float *)&v561.i32[1];
                goto LABEL_684;
              }
              v647 = v645 - v644;
            }
            v648 = *v642 - *v643;
            v649 = v484 / sqrtf((float)(v648 * v648) + (float)(v647 * v647));
            *(float *)v561.i32 = v649 * v648;
            v646 = v649 * v647;
            *(float *)&v561.i32[1] = v646;
LABEL_684:
            v771 = LODWORD(v646);
            v780 = (float32x2_t)v561;
            v795.f32[0] = -v646;
            *(uint64_t *)((char *)v795.i64 + 4) = __PAIR64__(LODWORD(v646), v561.u32[0]);
            v795.f32[3] = -*(float *)v561.i32;
            v801 = 0;
            v793 = (void *)begin[v518];
            v794 = *(std::__shared_weak_count **)v642;
            v796 = -v646;
            v797 = *(float *)v561.i32;
            *(float *)&v799 = v560;
            *((float *)&v799 + 1) = v560 * v542;
            md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
            v650 = v805;
            if (*(_BYTE *)(v805 + 97))
            {
              v800 = 1;
              *(float32x2_t *)v651.f32 = vmul_n_f32(v780, *((float *)&v810 + 3));
              v651.i64[1] = v651.i64[0];
              *(int32x2_t *)v652.f32 = vdup_lane_s32((int32x2_t)v780, 0);
              v652.i32[0] = v771;
              v652.i64[1] = v652.i64[0];
              v653 = vsubq_f32(v651, v652);
              v654 = vaddq_f32(v651, v652);
              v654.i32[0] = v653.i32[0];
              v654.i32[3] = v653.i32[3];
              v795 = v654;
              v655 = (char *)&v809 + 4;
              v656 = &v808[24];
              if (!*(_BYTE *)(v805 + 120))
                goto LABEL_688;
              if (*(_BYTE *)(v805 + 120) == 1)
              {
                v656 = v808;
                v655 = &v808[12];
LABEL_688:
                v657 = *((_DWORD *)v656 + 2);
                v798.i64[0] = *(_QWORD *)v656;
                v798.i64[1] = __PAIR64__(*(_DWORD *)v655, v657);
              }
              md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex((uint64_t)&v804, &v803, (float *)&v793);
              v650 = v805;
            }
            v658.i64[0] = 0x1000100010001;
            v658.i64[1] = 0x1000100010001;
            v659 = *(_QWORD *)(v650 + 8);
            v660 = *(_QWORD *)(v650 + 16) - v659;
            v661 = v660 >> 1;
            if (v660 >= 4)
            {
              v662 = *(_QWORD *)(v650 + 8);
              v663 = 2;
              if (v661 > 2)
                v663 = v661;
              if (v663 >= 3)
              {
                v666 = 0;
                v667 = v663 - 1;
                v668 = (v663 - 1) & 0xFFFFFFFFFFFFFFFELL;
                v669 = v742 + 6;
                do
                {
                  v670 = v659 + 2 * v666;
                  *(v669 - 6) = v670;
                  *v669 = v670 + 2;
                  *(v669 - 5) = v670 + 1;
                  v669[1] = v670 + 3;
                  *(v669 - 4) = v670 + 2;
                  v669[2] = v670 + 4;
                  *(v669 - 3) = v670 + 1;
                  v669[3] = v670 + 3;
                  *(v669 - 2) = v670 + 3;
                  v669[4] = v670 + 5;
                  v666 += 2;
                  *(v669 - 1) = v670 + 2;
                  v669[5] = v670 + 4;
                  v669 += 12;
                }
                while (v668 != v666);
                if (v667 != v668)
                {
                  v664 = v667 | 1;
                  LODWORD(v662) = 2 * v668 + v659;
                  v665 = &v742[6 * v668];
                  goto LABEL_699;
                }
              }
              else
              {
                v664 = 1;
                v665 = v742;
LABEL_699:
                v671 = v663 - v664;
                do
                {
                  *v665 = v662;
                  v672 = v662 + 1;
                  v665[1] = v662 + 1;
                  v673 = v662 + 3;
                  LODWORD(v662) = v662 + 2;
                  v665[2] = v662;
                  v665[3] = v672;
                  v665[4] = v673;
                  v665[5] = v662;
                  v665 += 6;
                  --v671;
                }
                while (v671);
              }
            }
            if (*(_QWORD *)(v650 + 48) != *(_QWORD *)(v650 + 40))
            {
              v674 = *(char *)(v650 + 97);
              v675 = *(_BYTE *)(v650 + 96) ? 2 : 1;
              if (v661 - v674 > v675)
              {
                v676 = v661 - (v675 + v674);
                v677 = v724;
                if (v676 < 8)
                {
LABEL_711:
                  v687 = v675 + v674 - v661;
                  v688 = v659 + 2 * v675;
                  do
                  {
                    *v677 = v688 - 2;
                    v677[1] = v688;
                    v688 += 2;
                    v677 += 2;
                    _CF = __CFADD__(v687++, 1);
                  }
                  while (!_CF);
                }
                else
                {
                  v678 = v676 & 0xFFFFFFFFFFFFFFF8;
                  v679 = vdupq_n_s64(v675);
                  v680 = vaddq_s64(v679, (int64x2_t)xmmword_19FFB2FE0);
                  v681 = vaddq_s64(v679, (int64x2_t)xmmword_19FFB2FF0);
                  v682 = vaddq_s64(v679, (int64x2_t)xmmword_19FFB3000);
                  v683 = vaddq_s64(v679, (int64x2_t)xmmword_19FFB2E40);
                  v684 = vdupq_n_s64(v659);
                  v685 = v724;
                  v686 = v676 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v813.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v684, vaddq_s64(v683, v683)), (int32x4_t)vaddq_s64(v684, vaddq_s64(v682, v682))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v684, vaddq_s64(v681, v681)), (int32x4_t)vaddq_s64(v684, vaddq_s64(v680, v680))));
                    v813.val[0] = vaddq_s16(v813.val[1], v658);
                    vst2q_s16(v685, v813);
                    v685 += 16;
                    v813.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    v681 = vaddq_s64(v681, (int64x2_t)v813.val[0]);
                    v682 = vaddq_s64(v682, (int64x2_t)v813.val[0]);
                    v683 = vaddq_s64(v683, (int64x2_t)v813.val[0]);
                    v680 = vaddq_s64(v680, (int64x2_t)v813.val[0]);
                    v686 -= 8;
                  }
                  while (v686);
                  if (v676 != v678)
                  {
                    v675 |= v678;
                    v677 = &v724[2 * (v676 & 0xFFFFFFFFFFFFFFF8)];
                    goto LABEL_711;
                  }
                }
              }
            }
            v510 = (uint64_t)v724;
          }
          v511 = (uint64_t)v742;
        }
        v512 = (_QWORD *)*v506++;
        v509 += 20 * (v512[2] - v512[1]);
        v511 += 2 * (v512[4] - v512[3]);
        v510 += 2 * (v512[6] - v512[5]);
        if (v506 == v507)
          goto LABEL_715;
        continue;
      }
    }
    return (uint64_t)a1;
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_19F958B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t *a47,uint64_t a48,void *a49)
{
  void *v49;
  uint64_t v50;
  void *v52;
  void *v53;

  MEMORY[0x1A1AF4E00](v50, 0x1020C4007FF0C4BLL);
  if (v49)
    operator delete(v49);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a47);
  v52 = *a39;
  if (*a39)
  {
    *(_QWORD *)(a33 + 40) = v52;
    operator delete(v52);
  }
  v53 = *a37;
  if (*a37)
  {
    *(_QWORD *)(a33 + 16) = v53;
    operator delete(v53);
    if (a49)
    {
LABEL_9:
      operator delete(a49);
      _Unwind_Resume(a1);
    }
  }
  else if (a49)
  {
    goto LABEL_9;
  }
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 136);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C40379845F6);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 136);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C40379845F6);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 136);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C40379845F6);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 136);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C40379845F6);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 136);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C40379845F6);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 136);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C40379845F6);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 136);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C40379845F6);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 136);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C40379845F6);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 136);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C40379845F6);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 136);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C40379845F6);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 136);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C40379845F6);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 136);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 136);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C40379845F6);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 136);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C40379845F6);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 136);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C40379845F6);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 136);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C40379845F6);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 136);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C40379845F6);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 136);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C40379845F6);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t md::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C7E0;
  v2 = (std::__shared_weak_count *)a1[181];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C7E0;
  v2 = (std::__shared_weak_count *)a1[181];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF248;
  v2 = *(_QWORD **)(a1 + 1400);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 1408);
    v4 = *(void **)(a1 + 1400);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 136);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C40379845F6);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 1400);
    }
    *(_QWORD *)(a1 + 1408) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 1376);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 1376);
  *(_QWORD *)(a1 + 1384) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 1376);
  }
  free(v21);
  v24 = *(void **)(a1 + 1352);
  if (v24)
  {
    *(_QWORD *)(a1 + 1360) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 1320);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 1328);
    v27 = *(_QWORD *)(a1 + 1320);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 1328);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 1320);
    }
    *(_QWORD *)(a1 + 1328) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 1344) + 40))(*(_QWORD *)(a1 + 1344), v27, *(_QWORD *)(a1 + 1336) - v27);
  }
  v31 = *(void **)(a1 + 1296);
  if (v31)
  {
    *(_QWORD *)(a1 + 1304) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 1168) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1184) = 3131955885;
  *(_QWORD *)(a1 + 1040) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 1056) = 3131955885;
  *(_QWORD *)(a1 + 912) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 928) = 3131955885;
  *(_QWORD *)(a1 + 784) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 800) = 3131955885;
  *(_QWORD *)(a1 + 656) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 672) = 3131955885;
  *(_QWORD *)(a1 + 528) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 544) = 3131955885;
  *(_QWORD *)(a1 + 400) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 416) = 3131955885;
  *(_QWORD *)(a1 + 272) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 288) = 3131955885;
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::PolylineOverlayBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(_QWORD *a1)
{
  md::PolylineOverlayBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PolylineOverlayBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E429A3C8;
  v2 = (std::__shared_weak_count *)a1[189];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[187];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[187];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[185];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_1E428C7E0;
  v11 = (std::__shared_weak_count *)a1[181];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C7E0;
  v2 = (std::__shared_weak_count *)a1[181];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::layout(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  float *v23;
  double v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t *v37;
  _BYTE *v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  __int128 *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  __int128 *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  __int128 *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *p_shared_owners;
  unint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  int *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t i;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  int *v195;
  int *v196;
  unint64_t shared_weak_owners;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t v437;
  unint64_t *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  _QWORD *v466;
  uint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  unint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t *v511;
  unint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  unint64_t *v519;
  unint64_t v520;
  uint64_t *v521;
  uint64_t *v522;
  uint64_t v523;
  _QWORD *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t shared_owners;
  __int128 v529;
  std::__shared_weak_count *v530;
  std::__shared_weak_count *v531;
  _QWORD *v532;
  uint64_t v533;
  char v534;
  _OWORD *v535;
  _OWORD v536[2];
  __int16 v537;
  uint64_t v538;
  int v539;

  v2 = (uint64_t)a2;
  v4 = *(_QWORD *)(a1 + 224);
  if (*(_BYTE *)(v4 + 304))
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v4 + 176);
    if (a2[136])
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(v4 + 176);
  }
  if (a2[132])
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v4 + 200);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v4 + 208);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 240);
    if (a2[136])
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 200);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(v4 + 208);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v4 + 240);
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(v4 + 248);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(v4 + 248);
  }
  else
  {
    v5 = a2[56];
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v4 + 184);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v4 + 208);
    if (v5)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 232);
      if (!a2[136])
        goto LABEL_14;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 184);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(v4 + 208);
      v6 = *(_QWORD *)(v4 + 232);
    }
    else
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 224);
      if (!a2[136])
        goto LABEL_14;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 184);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(v4 + 208);
      v6 = *(_QWORD *)(v4 + 224);
    }
    *(_QWORD *)(a1 + 112) = v6;
  }
LABEL_14:
  v7 = *(uint64_t **)(a1 + 8);
  v521 = *(uint64_t **)(a1 + 16);
  if (v521 == v7)
    return;
  if (*(_BYTE *)(*v7 + 1456))
    goto LABEL_74;
  v8 = *(_QWORD **)(*(_QWORD *)a2 + 8);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_39;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v11 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x1AF456233693CD46;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_39;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_39;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46)
          goto LABEL_37;
      }
      else if ((v15 & (*(_QWORD *)&v9 - 1)) != v11)
      {
        goto LABEL_39;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_39;
    }
  }
  while (1)
  {
    v14 = v13[1];
    if (v14 == 0x1AF456233693CD46)
      break;
    if (v14 >= *(_QWORD *)&v9)
      v14 %= *(_QWORD *)&v9;
    if (v14 != v11)
      goto LABEL_39;
LABEL_26:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_39;
  }
  if (v13[2] != 0x1AF456233693CD46)
    goto LABEL_26;
LABEL_37:
  v16 = v13[5];
  if (*(_QWORD *)(v16 + 8) == 0x1AF456233693CD46)
  {
    v17 = *(_QWORD *)(v16 + 32);
    goto LABEL_40;
  }
LABEL_39:
  v17 = 0;
LABEL_40:
  if (*(_BYTE *)(v17 + 3776))
  {
    v18 = *(_QWORD *)(a1 + 144);
    if (v18)
    {
      v19 = gdc::GlobeTileGrid::intersectWithFrustum(v18, (const double *)(v17 + 984), *(double *)(v17 + 24));
      goto LABEL_65;
    }
    v21 = *(_QWORD *)(a1 + 184);
    if ((*(_BYTE *)(v21 + 16) & 2) == 0)
    {
      v22 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v22 != -1)
      {
        *(_QWORD *)&v536[0] = &v534;
        v535 = v536;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v535, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v23 = *(float **)(v21 + 72);
    v24 = 0.0;
  }
  else
  {
    if ((*(_QWORD *)&v9 & (*(_QWORD *)&v9 - 1)) != 0)
    {
      v25 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v9 <= 0x8BD499FBD96FBB9ELL)
        v25 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v9;
      v20 = *(_QWORD **)(*v8 + 8 * v25);
      do
      {
        do
          v20 = (_QWORD *)*v20;
        while (v20[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v20[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v20 = *(_QWORD **)(*v8 + 8 * ((*(_QWORD *)&v9 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v20 = (_QWORD *)*v20;
        while (v20[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v20[2] != 0x8BD499FBD96FBB9ELL);
    }
    v26 = 0.0;
    if (**(_BYTE **)(v20[5] + 32) && *(_BYTE *)(a1 + 176))
      v26 = *(double *)(v17 + 24) * 0.0000000249532021 * (double)(1 << *(_BYTE *)(a1 + 153));
    v27 = *(_QWORD *)(a1 + 184);
    if ((*(_BYTE *)(v27 + 16) & 2) == 0)
    {
      v28 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v28 != -1)
      {
        *(_QWORD *)&v536[0] = &v534;
        v535 = v536;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v535, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v23 = *(float **)(v27 + 72);
    v24 = v26;
  }
  v19 = ggl::CullingGrid::intersectedCellsForView(v23, v24);
LABEL_65:
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(a1 + 16);
  if (v29 != v30)
  {
    do
    {
      v32 = *(_BYTE **)v29;
      v33 = *(uint64_t **)(*(_QWORD *)v29 + 1400);
      v34 = *(uint64_t **)(*(_QWORD *)v29 + 1408);
      if (v33 == v34)
      {
        v31 = 0;
      }
      else
      {
        v31 = 0;
        do
        {
          v35 = *v33++;
          v36 = (*(_DWORD *)(v35 + 96) & v19) != 0;
          v31 |= v36;
          *(_BYTE *)(v35 + 48) = v36;
        }
        while (v33 != v34);
      }
      v32[136] = v31 & 1;
      v32[264] = v31 & 1;
      v32[392] = v31 & 1;
      v32[520] = v31 & 1;
      v32[648] = v31 & 1;
      v32[776] = v31 & 1;
      v32[904] = v31 & 1;
      v32[1032] = v31 & 1;
      v32[1160] = v31 & 1;
      v32[1288] = v31 & 1;
      v29 += 8;
      v32[1424] = v31 & 1;
    }
    while (v29 != v30);
    v7 = *(uint64_t **)(a1 + 8);
    v521 = *(uint64_t **)(a1 + 16);
LABEL_74:
    if (v7 == v521)
      return;
    v37 = v7;
    v523 = v2;
    while (1)
    {
      v522 = v37;
      if (!*(_BYTE *)(*v37 + 1424))
        goto LABEL_76;
      v533 = *v37;
      v38 = *(_BYTE **)(*v37 + 1472);
      v536[0] = xmmword_19FFB3980;
      v536[1] = xmmword_19FFB3B40;
      v537 = 256;
      v538 = 0x3F800000BF800000;
      v539 = 0;
      if (*(_QWORD *)(v2 + 144))
      {
        if (*(_BYTE *)(v2 + 136))
          break;
      }
      md::PolylineOverlayStyle::updateFromOverlay((uint64_t)v38, v2, (uint64_t)v536);
      if (*v38)
        goto LABEL_83;
LABEL_84:
      v39 = *(_QWORD *)(v533 + 1472);
      os_unfair_lock_lock((os_unfair_lock_t)(v39 + 196));
      v40 = *(float *)(v39 + 152);
      v41 = *(float *)(v39 + 156);
      v42 = v533;
      os_unfair_lock_unlock((os_unfair_lock_t)(v39 + 196));
      v43 = *(uint64_t **)(v533 + 1400);
      v44 = *(uint64_t **)(v533 + 1408);
      while (v43 != v44)
      {
        v46 = *v43;
        if (*(_BYTE *)(*v43 + 48))
        {
          v45 = *(float *)(v46 + 104) >= v40 && *(float *)(v46 + 100) <= v41;
          *(_BYTE *)(v46 + 48) = v45;
        }
        ++v43;
      }
      v47 = **(unsigned __int8 **)(v533 + 1472);
      *(_BYTE *)(v533 + 136) = v47;
      *(_BYTE *)(v533 + 264) = v47;
      *(_BYTE *)(v533 + 392) = v47;
      *(_BYTE *)(v533 + 520) = v47;
      *(_BYTE *)(v533 + 648) = v47;
      *(_BYTE *)(v533 + 776) = v47;
      *(_BYTE *)(v533 + 904) = v47;
      *(_BYTE *)(v533 + 1032) = v47;
      *(_BYTE *)(v533 + 1160) = v47;
      *(_BYTE *)(v533 + 1288) = v47;
      *(_BYTE *)(v533 + 1424) = v47;
      if (v47)
      {
        v48 = 0;
        LOBYTE(v535) = *(_BYTE *)(v533 + 1464);
        BYTE1(v535) = *(_BYTE *)(v2 + 88);
        BYTE2(v535) = *(_BYTE *)(v2 + 135);
        BYTE3(v535) = *(_BYTE *)(v2 + 134);
        v532 = *(_QWORD **)(*(_QWORD *)(v533 + 8) + 224);
        while (!*(_BYTE *)(*(_QWORD *)(v42 + 1472) + v48 + 120))
        {
          *(_BYTE *)(v42 + (v48 << 7) + 136) = 0;
LABEL_95:
          if (++v48 == 10)
            goto LABEL_76;
        }
        v49 = v42 + (v48 << 7);
        *(_BYTE *)(v49 + 136) = 1;
        *(_DWORD *)(v49 + 56) = *(unsigned __int8 *)(v2 + 57);
        v50 = v48;
        v51 = v48;
        if (((1 << v48) & 0x255) != 0)
        {
          v52 = v532[20];
          v53 = *(_QWORD *)(v52 + 8);
          if (v53 != *(_QWORD *)v52)
          {
            v54 = *(_QWORD *)(v53 - 8);
            *(_QWORD *)(v52 + 8) = v53 - 8;
            v55 = *(uint64_t **)(v52 + 40);
            v56 = *(_QWORD *)(v52 + 48);
            if ((unint64_t)v55 >= v56)
            {
              v57 = *(_QWORD *)(v52 + 32);
              v58 = ((uint64_t)v55 - v57) >> 3;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61)
                goto LABEL_598;
              v60 = v56 - v57;
              if (v60 >> 2 > v59)
                v59 = v60 >> 2;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              if (v59)
              {
                v61 = 8 * v59;
                v62 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v52 + 56) + 16))(*(_QWORD *)(v52 + 56), 8 * v59, 8);
                v63 = (uint64_t *)(v62 + 8 * v58);
                v59 = v62 + v61;
                if (v62)
                  *v63 = v54;
              }
              else
              {
                v63 = (uint64_t *)(8 * v58);
              }
              v93 = *(_QWORD *)(v52 + 32);
              v92 = *(_QWORD *)(v52 + 40);
              v94 = v92 - v93;
              if (v92 != v93)
              {
                v95 = v94 - 8;
                if ((unint64_t)(v94 - 8) < 0x38)
                {
                  v96 = v63;
                }
                else
                {
                  v96 = v63;
                  if ((unint64_t)(v92 - (_QWORD)v63) >= 0x20)
                  {
                    v97 = (v95 >> 3) + 1;
                    v98 = v63 - 2;
                    v99 = (__int128 *)(v92 - 16);
                    v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v101 = *v99;
                      *((_OWORD *)v98 - 1) = *(v99 - 1);
                      *(_OWORD *)v98 = v101;
                      v98 -= 4;
                      v99 -= 2;
                      v100 -= 4;
                    }
                    while (v100);
                    v96 = &v63[-(v97 & 0x3FFFFFFFFFFFFFFCLL)];
                    v92 -= 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_233;
                  }
                }
                do
                {
                  v128 = *(_QWORD *)(v92 - 8);
                  v92 -= 8;
                  *--v96 = v128;
                }
                while (v92 != v93);
                goto LABEL_233;
              }
LABEL_224:
              v96 = v63;
LABEL_234:
              v89 = v63 + 1;
              *(_QWORD *)(v52 + 32) = v96;
              *(_QWORD *)(v52 + 40) = v63 + 1;
              v158 = *(_QWORD *)(v52 + 48);
              *(_QWORD *)(v52 + 48) = v59;
              if (v92)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v52 + 56) + 40))(*(_QWORD *)(v52 + 56), v92, v158 - v92);
LABEL_236:
              *(_QWORD *)(v52 + 40) = v89;
              *(_QWORD *)&v536[0] = v54;
              v159 = *(_QWORD *)(v52 + 120);
              if (!v159)
              {
LABEL_597:
                std::__throw_bad_function_call[abi:nn180100]();
LABEL_598:
                abort();
              }
              (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v159 + 48))(v159, v536);
              v48 = v51;
              while (2)
              {
                v160 = v49 + 16;
                v161 = *(_QWORD **)(*(_QWORD *)(v42 + 8) + 224);
                switch(v50)
                {
                  case 0:
                    v163 = v161[8];
                    goto LABEL_247;
                  case 1:
                  case 8:
                    v162 = v161[9];
                    goto LABEL_243;
                  case 2:
                  case 9:
                    v163 = v161[10];
                    goto LABEL_247;
                  case 3:
                  case 7:
                    md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayFillShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v536, v161[11], (char *)&v535);
                    break;
                  case 4:
                    v163 = v161[12];
                    goto LABEL_247;
                  case 5:
                    v162 = v161[13];
LABEL_243:
                    md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::AlphaPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayAlphaShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v536, v162, (char *)&v535);
                    break;
                  case 6:
                    v163 = v161[14];
LABEL_247:
                    md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayAlphaFillShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v536, v163, (char *)&v535);
                    break;
                  default:
                    v54 = 0;
                    continue;
                }
                break;
              }
              v164 = (std::__shared_weak_count *)*((_QWORD *)&v536[0] + 1);
              v165 = *(_QWORD *)&v536[0];
              if (!*(_QWORD *)&v536[0] || **(_QWORD **)(*(_QWORD *)&v536[0] + 40) != *(_QWORD *)(v54 + 8))
              {
                v166 = *(std::__shared_weak_count **)(v54 + 24);
                *(_QWORD *)(v54 + 16) = 0;
                *(_QWORD *)(v54 + 24) = 0;
                if (v166)
                {
                  p_shared_owners = (unint64_t *)&v166->__shared_owners_;
                  do
                    v168 = __ldaxr(p_shared_owners);
                  while (__stlxr(v168 - 1, p_shared_owners));
                  goto LABEL_263;
                }
                goto LABEL_264;
              }
              v169 = *(_QWORD *)(v54 + 16);
              if (v169 && v169 != *(_QWORD *)&v536[0])
              {
                v529 = v536[0];
                ggl::PipelineSetup::resetData(v54);
                v164 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
                v165 = v529;
              }
              if (v164)
              {
                v170 = (unint64_t *)&v164->__shared_owners_;
                do
                  v171 = __ldxr(v170);
                while (__stxr(v171 + 1, v170));
              }
              v166 = *(std::__shared_weak_count **)(v54 + 24);
              *(_QWORD *)(v54 + 16) = v165;
              *(_QWORD *)(v54 + 24) = v164;
              if (!v166)
                goto LABEL_264;
              v172 = (unint64_t *)&v166->__shared_owners_;
              do
                v168 = __ldaxr(v172);
              while (__stlxr(v168 - 1, v172));
LABEL_263:
              if (!v168)
              {
                v531 = v164;
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
                v173 = v531;
                if (v531)
                {
LABEL_265:
                  v174 = (unint64_t *)&v173->__shared_owners_;
                  do
                    v175 = __ldaxr(v174);
                  while (__stlxr(v175 - 1, v174));
                  if (!v175)
                  {
                    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                    std::__shared_weak_count::__release_weak(v173);
                  }
                }
              }
              else
              {
LABEL_264:
                v173 = v164;
                if (v164)
                  goto LABEL_265;
              }
              **(_QWORD **)(v54 + 96) = *(_QWORD *)(v532[32] + 16);
              if (v54)
              {
                v176 = *(_QWORD *)(v42 + 1472);
                if (v176)
                {
                  v525 = v160;
                  v526 = v54;
                  os_unfair_lock_lock((os_unfair_lock_t)(v176 + 196));
                  os_unfair_lock_unlock((os_unfair_lock_t)(v176 + 196));
                  v179 = v176 + 168;
                  v177 = *(_QWORD *)(v176 + 168);
                  v178 = *(_QWORD *)(v179 + 8);
                  v180 = *(_QWORD *)(v42 + 1472);
                  os_unfair_lock_lock((os_unfair_lock_t)(v180 + 196));
                  os_unfair_lock_unlock((os_unfair_lock_t)(v180 + 196));
                  v181 = *(_QWORD *)(v180 + 168);
                  v182 = *(_QWORD *)(v180 + 176);
                  if (v181 == v182)
                  {
LABEL_275:
                    v183 = 0;
                  }
                  else
                  {
                    while (*(float *)(v181 + 12) >= 1.0)
                    {
                      v181 += 20;
                      if (v181 == v182)
                        goto LABEL_275;
                    }
                    v183 = 1;
                  }
                  v184 = (std::__shared_weak_count *)operator new(0xE8uLL);
                  v184->__shared_owners_ = 0;
                  v185 = (unint64_t *)&v184->__shared_owners_;
                  v184->__shared_weak_owners_ = 0;
                  v184->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20B8;
                  v524 = &v184[1].__vftable;
                  ggl::BufferData::BufferData((uint64_t)&v184[1], qword_1EE546D58, 2, 1, 6, 1);
                  v184[9].__shared_owners_ = (uint64_t)ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
                  v184[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9690;
                  v527 = v48;
                  shared_owners = v184[1].__shared_owners_;
                  v530 = v184;
                  if (shared_owners)
                    v186 = (int *)v184[4].__vftable;
                  else
                    v186 = 0;
                  v187 = 0;
                  *v186 = v183;
                  v186[1] = -858993459 * ((v178 - v177) >> 2);
                  v188 = 4;
                  for (i = 68; ; ++i)
                  {
                    v190 = *(_QWORD *)(v533 + 1472);
                    os_unfair_lock_lock((os_unfair_lock_t)(v190 + 196));
                    os_unfair_lock_unlock((os_unfair_lock_t)(v190 + 196));
                    v191 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v190 + 176) - *(_QWORD *)(v190 + 168)) >> 2);
                    v192 = *(_QWORD *)(v533 + 1472);
                    os_unfair_lock_lock((os_unfair_lock_t)(v192 + 196));
                    os_unfair_lock_unlock((os_unfair_lock_t)(v192 + 196));
                    v193 = *(_QWORD *)(v192 + 168);
                    v194 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v192 + 176) - v193) >> 2);
                    if (i - 68 >= v191)
                      break;
                    if (v194 <= i - 68)
                      abort();
                    v195 = (int *)(v193 + v187);
                    v196 = &v186[v188];
                    *v196 = *v195;
                    v196[1] = v195[1];
                    v196[2] = v195[2];
                    v196[3] = v195[3];
                    v186[i] = v195[4];
                    v187 += 20;
                    v188 += 4;
                  }
                  if (v194 <= 0xF)
                    memset_pattern16(&v186[v194 + 68], &unk_19FFB6340, 64 - 4 * v194);
                  v42 = v533;
                  v54 = v526;
                  v48 = v527;
                  if (shared_owners)
                  {
                    shared_weak_owners = v530[3].__shared_weak_owners_;
                    if (shared_weak_owners <= shared_owners)
                      shared_weak_owners = shared_owners;
                    v530[3].__shared_owners_ = 0;
                    v530[3].__shared_weak_owners_ = shared_weak_owners;
                  }
                  v2 = v523;
                  switch((char)v527)
                  {
                    case 0:
                      v198 = *(_QWORD *)(v533 + 1472);
                      v199 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v199 + 40) = 0;
                      v200 = *(_QWORD *)(v198 + 8);
                      *(_QWORD *)(v199 + 32) = v200;
                      v201 = *(_QWORD *)(v526 + 160);
                      v202 = *(_QWORD *)(v198 + 16);
                      if (v202)
                      {
                        v203 = (unint64_t *)(v202 + 8);
                        do
                          v204 = __ldxr(v203);
                        while (__stxr(v204 + 1, v203));
                      }
                      v205 = *(std::__shared_weak_count **)(v201 + 40);
                      *(_QWORD *)(v201 + 32) = v200;
                      *(_QWORD *)(v201 + 40) = v202;
                      if (v205)
                      {
                        v206 = (unint64_t *)&v205->__shared_owners_;
                        do
                          v207 = __ldaxr(v206);
                        while (__stlxr(v207 - 1, v206));
                        if (!v207)
                        {
                          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                          std::__shared_weak_count::__release_weak(v205);
                        }
                      }
                      v208 = *(_QWORD **)(v526 + 64);
                      v208[1] = 0;
                      v209 = *(_QWORD *)(v533 + 1488);
                      *v208 = v209;
                      v210 = *(_QWORD **)(v526 + 160);
                      v211 = *(_QWORD *)(v533 + 1496);
                      if (v211)
                      {
                        v212 = (unint64_t *)(v211 + 8);
                        do
                          v213 = __ldxr(v212);
                        while (__stxr(v213 + 1, v212));
                      }
                      v214 = (std::__shared_weak_count *)v210[1];
                      *v210 = v209;
                      v210[1] = v211;
                      if (v214)
                      {
                        v215 = (unint64_t *)&v214->__shared_owners_;
                        do
                          v216 = __ldaxr(v215);
                        while (__stlxr(v216 - 1, v215));
                        if (!v216)
                        {
                          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                          std::__shared_weak_count::__release_weak(v214);
                        }
                      }
                      v217 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v217 + 24) = 0;
                      v218 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v217 + 16) = v218;
                      v219 = *(_QWORD *)(v526 + 160);
                      v220 = *(_QWORD *)(v533 + 1512);
                      if (v220)
                      {
                        v221 = (unint64_t *)(v220 + 8);
                        do
                          v222 = __ldxr(v221);
                        while (__stxr(v222 + 1, v221));
                      }
                      v223 = *(std::__shared_weak_count **)(v219 + 24);
                      *(_QWORD *)(v219 + 16) = v218;
                      *(_QWORD *)(v219 + 24) = v220;
                      if (v223)
                      {
                        v224 = (unint64_t *)&v223->__shared_owners_;
                        do
                          v225 = __ldaxr(v224);
                        while (__stlxr(v225 - 1, v224));
                        if (!v225)
                        {
                          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                          std::__shared_weak_count::__release_weak(v223);
                        }
                      }
                      v226 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v226 + 48) = v524;
                      *(_QWORD *)(v226 + 56) = 0;
                      v227 = *(_QWORD *)(v526 + 160);
                      do
                        v228 = __ldxr(v185);
                      while (__stxr(v228 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v227 + 56);
                      *(_QWORD *)(v227 + 48) = v524;
                      *(_QWORD *)(v227 + 56) = v530;
                      if (v229)
                      {
                        v230 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v230);
                        while (__stlxr(v231 - 1, v230));
                        goto LABEL_590;
                      }
                      break;
                    case 1:
                      v392 = *(_QWORD *)(v533 + 1472);
                      v393 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v393 + 40) = 0;
                      v394 = *(_QWORD *)(v392 + 24);
                      *(_QWORD *)(v393 + 32) = v394;
                      v395 = *(_QWORD *)(v526 + 160);
                      v396 = *(_QWORD *)(v392 + 32);
                      if (v396)
                      {
                        v397 = (unint64_t *)(v396 + 8);
                        do
                          v398 = __ldxr(v397);
                        while (__stxr(v398 + 1, v397));
                      }
                      v399 = *(std::__shared_weak_count **)(v395 + 40);
                      *(_QWORD *)(v395 + 32) = v394;
                      *(_QWORD *)(v395 + 40) = v396;
                      if (v399)
                      {
                        v400 = (unint64_t *)&v399->__shared_owners_;
                        do
                          v401 = __ldaxr(v400);
                        while (__stlxr(v401 - 1, v400));
                        if (!v401)
                        {
                          ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                          std::__shared_weak_count::__release_weak(v399);
                        }
                      }
                      v402 = *(_QWORD **)(v526 + 64);
                      v402[1] = 0;
                      v403 = *(_QWORD *)(v533 + 1488);
                      *v402 = v403;
                      v404 = *(_QWORD **)(v526 + 160);
                      v405 = *(_QWORD *)(v533 + 1496);
                      if (v405)
                      {
                        v406 = (unint64_t *)(v405 + 8);
                        do
                          v407 = __ldxr(v406);
                        while (__stxr(v407 + 1, v406));
                      }
                      v408 = (std::__shared_weak_count *)v404[1];
                      *v404 = v403;
                      v404[1] = v405;
                      if (v408)
                      {
                        v409 = (unint64_t *)&v408->__shared_owners_;
                        do
                          v410 = __ldaxr(v409);
                        while (__stlxr(v410 - 1, v409));
                        if (!v410)
                        {
                          ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
                          std::__shared_weak_count::__release_weak(v408);
                        }
                      }
                      v411 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v411 + 24) = 0;
                      v412 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v411 + 16) = v412;
                      v413 = *(_QWORD *)(v526 + 160);
                      v414 = *(_QWORD *)(v533 + 1512);
                      if (v414)
                      {
                        v415 = (unint64_t *)(v414 + 8);
                        do
                          v416 = __ldxr(v415);
                        while (__stxr(v416 + 1, v415));
                      }
                      v417 = *(std::__shared_weak_count **)(v413 + 24);
                      *(_QWORD *)(v413 + 16) = v412;
                      *(_QWORD *)(v413 + 24) = v414;
                      if (v417)
                      {
                        v418 = (unint64_t *)&v417->__shared_owners_;
                        do
                          v419 = __ldaxr(v418);
                        while (__stlxr(v419 - 1, v418));
                        if (!v419)
                        {
                          ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                          std::__shared_weak_count::__release_weak(v417);
                        }
                      }
                      v420 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v420 + 48) = v524;
                      *(_QWORD *)(v420 + 56) = 0;
                      v421 = *(_QWORD *)(v526 + 160);
                      do
                        v422 = __ldxr(v185);
                      while (__stxr(v422 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v421 + 56);
                      *(_QWORD *)(v421 + 48) = v524;
                      *(_QWORD *)(v421 + 56) = v530;
                      if (v229)
                      {
                        v423 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v423);
                        while (__stlxr(v231 - 1, v423));
                        goto LABEL_590;
                      }
                      break;
                    case 2:
                      v296 = *(_QWORD *)(v533 + 1472);
                      v297 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v297 + 40) = 0;
                      v298 = *(_QWORD *)(v296 + 40);
                      *(_QWORD *)(v297 + 32) = v298;
                      v299 = *(_QWORD *)(v526 + 160);
                      v300 = *(_QWORD *)(v296 + 48);
                      if (v300)
                      {
                        v301 = (unint64_t *)(v300 + 8);
                        do
                          v302 = __ldxr(v301);
                        while (__stxr(v302 + 1, v301));
                      }
                      v303 = *(std::__shared_weak_count **)(v299 + 40);
                      *(_QWORD *)(v299 + 32) = v298;
                      *(_QWORD *)(v299 + 40) = v300;
                      if (v303)
                      {
                        v304 = (unint64_t *)&v303->__shared_owners_;
                        do
                          v305 = __ldaxr(v304);
                        while (__stlxr(v305 - 1, v304));
                        if (!v305)
                        {
                          ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                          std::__shared_weak_count::__release_weak(v303);
                        }
                      }
                      v306 = *(_QWORD **)(v526 + 64);
                      v306[1] = 0;
                      v307 = *(_QWORD *)(v533 + 1488);
                      *v306 = v307;
                      v308 = *(_QWORD **)(v526 + 160);
                      v309 = *(_QWORD *)(v533 + 1496);
                      if (v309)
                      {
                        v310 = (unint64_t *)(v309 + 8);
                        do
                          v311 = __ldxr(v310);
                        while (__stxr(v311 + 1, v310));
                      }
                      v312 = (std::__shared_weak_count *)v308[1];
                      *v308 = v307;
                      v308[1] = v309;
                      if (v312)
                      {
                        v313 = (unint64_t *)&v312->__shared_owners_;
                        do
                          v314 = __ldaxr(v313);
                        while (__stlxr(v314 - 1, v313));
                        if (!v314)
                        {
                          ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                          std::__shared_weak_count::__release_weak(v312);
                        }
                      }
                      v315 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v315 + 24) = 0;
                      v316 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v315 + 16) = v316;
                      v317 = *(_QWORD *)(v526 + 160);
                      v318 = *(_QWORD *)(v533 + 1512);
                      if (v318)
                      {
                        v319 = (unint64_t *)(v318 + 8);
                        do
                          v320 = __ldxr(v319);
                        while (__stxr(v320 + 1, v319));
                      }
                      v321 = *(std::__shared_weak_count **)(v317 + 24);
                      *(_QWORD *)(v317 + 16) = v316;
                      *(_QWORD *)(v317 + 24) = v318;
                      if (v321)
                      {
                        v322 = (unint64_t *)&v321->__shared_owners_;
                        do
                          v323 = __ldaxr(v322);
                        while (__stlxr(v323 - 1, v322));
                        if (!v323)
                        {
                          ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                          std::__shared_weak_count::__release_weak(v321);
                        }
                      }
                      v324 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v324 + 48) = v524;
                      *(_QWORD *)(v324 + 56) = 0;
                      v325 = *(_QWORD *)(v526 + 160);
                      do
                        v326 = __ldxr(v185);
                      while (__stxr(v326 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v325 + 56);
                      *(_QWORD *)(v325 + 48) = v524;
                      *(_QWORD *)(v325 + 56) = v530;
                      if (v229)
                      {
                        v327 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v327);
                        while (__stlxr(v231 - 1, v327));
                        goto LABEL_590;
                      }
                      break;
                    case 3:
                      v328 = *(_QWORD *)(v533 + 1472);
                      v329 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v329 + 40) = 0;
                      v330 = *(_QWORD *)(v328 + 40);
                      *(_QWORD *)(v329 + 32) = v330;
                      v331 = *(_QWORD *)(v526 + 160);
                      v332 = *(_QWORD *)(v328 + 48);
                      if (v332)
                      {
                        v333 = (unint64_t *)(v332 + 8);
                        do
                          v334 = __ldxr(v333);
                        while (__stxr(v334 + 1, v333));
                      }
                      v335 = *(std::__shared_weak_count **)(v331 + 40);
                      *(_QWORD *)(v331 + 32) = v330;
                      *(_QWORD *)(v331 + 40) = v332;
                      if (v335)
                      {
                        v336 = (unint64_t *)&v335->__shared_owners_;
                        do
                          v337 = __ldaxr(v336);
                        while (__stlxr(v337 - 1, v336));
                        if (!v337)
                        {
                          ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                          std::__shared_weak_count::__release_weak(v335);
                        }
                      }
                      v338 = *(_QWORD **)(v526 + 64);
                      v338[1] = 0;
                      v339 = *(_QWORD *)(v533 + 1488);
                      *v338 = v339;
                      v340 = *(_QWORD **)(v526 + 160);
                      v341 = *(_QWORD *)(v533 + 1496);
                      if (v341)
                      {
                        v342 = (unint64_t *)(v341 + 8);
                        do
                          v343 = __ldxr(v342);
                        while (__stxr(v343 + 1, v342));
                      }
                      v344 = (std::__shared_weak_count *)v340[1];
                      *v340 = v339;
                      v340[1] = v341;
                      if (v344)
                      {
                        v345 = (unint64_t *)&v344->__shared_owners_;
                        do
                          v346 = __ldaxr(v345);
                        while (__stlxr(v346 - 1, v345));
                        if (!v346)
                        {
                          ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                          std::__shared_weak_count::__release_weak(v344);
                        }
                      }
                      v347 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v347 + 24) = 0;
                      v348 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v347 + 16) = v348;
                      v349 = *(_QWORD *)(v526 + 160);
                      v350 = *(_QWORD *)(v533 + 1512);
                      if (v350)
                      {
                        v351 = (unint64_t *)(v350 + 8);
                        do
                          v352 = __ldxr(v351);
                        while (__stxr(v352 + 1, v351));
                      }
                      v353 = *(std::__shared_weak_count **)(v349 + 24);
                      *(_QWORD *)(v349 + 16) = v348;
                      *(_QWORD *)(v349 + 24) = v350;
                      if (v353)
                      {
                        v354 = (unint64_t *)&v353->__shared_owners_;
                        do
                          v355 = __ldaxr(v354);
                        while (__stlxr(v355 - 1, v354));
                        if (!v355)
                        {
                          ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                          std::__shared_weak_count::__release_weak(v353);
                        }
                      }
                      v356 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v356 + 48) = v524;
                      *(_QWORD *)(v356 + 56) = 0;
                      v357 = *(_QWORD *)(v526 + 160);
                      do
                        v358 = __ldxr(v185);
                      while (__stxr(v358 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v357 + 56);
                      *(_QWORD *)(v357 + 48) = v524;
                      *(_QWORD *)(v357 + 56) = v530;
                      if (v229)
                      {
                        v359 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v359);
                        while (__stlxr(v231 - 1, v359));
                        goto LABEL_590;
                      }
                      break;
                    case 4:
                      v232 = *(_QWORD *)(v533 + 1472);
                      v233 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v233 + 40) = 0;
                      v234 = *(_QWORD *)(v232 + 56);
                      *(_QWORD *)(v233 + 32) = v234;
                      v235 = *(_QWORD *)(v526 + 160);
                      v236 = *(_QWORD *)(v232 + 64);
                      if (v236)
                      {
                        v237 = (unint64_t *)(v236 + 8);
                        do
                          v238 = __ldxr(v237);
                        while (__stxr(v238 + 1, v237));
                      }
                      v239 = *(std::__shared_weak_count **)(v235 + 40);
                      *(_QWORD *)(v235 + 32) = v234;
                      *(_QWORD *)(v235 + 40) = v236;
                      if (v239)
                      {
                        v240 = (unint64_t *)&v239->__shared_owners_;
                        do
                          v241 = __ldaxr(v240);
                        while (__stlxr(v241 - 1, v240));
                        if (!v241)
                        {
                          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                          std::__shared_weak_count::__release_weak(v239);
                        }
                      }
                      v242 = *(_QWORD **)(v526 + 64);
                      v242[1] = 0;
                      v243 = *(_QWORD *)(v533 + 1488);
                      *v242 = v243;
                      v244 = *(_QWORD **)(v526 + 160);
                      v245 = *(_QWORD *)(v533 + 1496);
                      if (v245)
                      {
                        v246 = (unint64_t *)(v245 + 8);
                        do
                          v247 = __ldxr(v246);
                        while (__stxr(v247 + 1, v246));
                      }
                      v248 = (std::__shared_weak_count *)v244[1];
                      *v244 = v243;
                      v244[1] = v245;
                      if (v248)
                      {
                        v249 = (unint64_t *)&v248->__shared_owners_;
                        do
                          v250 = __ldaxr(v249);
                        while (__stlxr(v250 - 1, v249));
                        if (!v250)
                        {
                          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                          std::__shared_weak_count::__release_weak(v248);
                        }
                      }
                      v251 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v251 + 24) = 0;
                      v252 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v251 + 16) = v252;
                      v253 = *(_QWORD *)(v526 + 160);
                      v254 = *(_QWORD *)(v533 + 1512);
                      if (v254)
                      {
                        v255 = (unint64_t *)(v254 + 8);
                        do
                          v256 = __ldxr(v255);
                        while (__stxr(v256 + 1, v255));
                      }
                      v257 = *(std::__shared_weak_count **)(v253 + 24);
                      *(_QWORD *)(v253 + 16) = v252;
                      *(_QWORD *)(v253 + 24) = v254;
                      if (v257)
                      {
                        v258 = (unint64_t *)&v257->__shared_owners_;
                        do
                          v259 = __ldaxr(v258);
                        while (__stlxr(v259 - 1, v258));
                        if (!v259)
                        {
                          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                          std::__shared_weak_count::__release_weak(v257);
                        }
                      }
                      v260 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v260 + 48) = v524;
                      *(_QWORD *)(v260 + 56) = 0;
                      v261 = *(_QWORD *)(v526 + 160);
                      do
                        v262 = __ldxr(v185);
                      while (__stxr(v262 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v261 + 56);
                      *(_QWORD *)(v261 + 48) = v524;
                      *(_QWORD *)(v261 + 56) = v530;
                      if (v229)
                      {
                        v263 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v263);
                        while (__stlxr(v231 - 1, v263));
                        goto LABEL_590;
                      }
                      break;
                    case 5:
                      v424 = *(_QWORD *)(v533 + 1472);
                      v425 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v425 + 40) = 0;
                      v426 = *(_QWORD *)(v424 + 72);
                      *(_QWORD *)(v425 + 32) = v426;
                      v427 = *(_QWORD *)(v526 + 160);
                      v428 = *(_QWORD *)(v424 + 80);
                      if (v428)
                      {
                        v429 = (unint64_t *)(v428 + 8);
                        do
                          v430 = __ldxr(v429);
                        while (__stxr(v430 + 1, v429));
                      }
                      v431 = *(std::__shared_weak_count **)(v427 + 40);
                      *(_QWORD *)(v427 + 32) = v426;
                      *(_QWORD *)(v427 + 40) = v428;
                      if (v431)
                      {
                        v432 = (unint64_t *)&v431->__shared_owners_;
                        do
                          v433 = __ldaxr(v432);
                        while (__stlxr(v433 - 1, v432));
                        if (!v433)
                        {
                          ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
                          std::__shared_weak_count::__release_weak(v431);
                        }
                      }
                      v434 = *(_QWORD **)(v526 + 64);
                      v434[1] = 0;
                      v435 = *(_QWORD *)(v533 + 1488);
                      *v434 = v435;
                      v436 = *(_QWORD **)(v526 + 160);
                      v437 = *(_QWORD *)(v533 + 1496);
                      if (v437)
                      {
                        v438 = (unint64_t *)(v437 + 8);
                        do
                          v439 = __ldxr(v438);
                        while (__stxr(v439 + 1, v438));
                      }
                      v440 = (std::__shared_weak_count *)v436[1];
                      *v436 = v435;
                      v436[1] = v437;
                      if (v440)
                      {
                        v441 = (unint64_t *)&v440->__shared_owners_;
                        do
                          v442 = __ldaxr(v441);
                        while (__stlxr(v442 - 1, v441));
                        if (!v442)
                        {
                          ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
                          std::__shared_weak_count::__release_weak(v440);
                        }
                      }
                      v443 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v443 + 24) = 0;
                      v444 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v443 + 16) = v444;
                      v445 = *(_QWORD *)(v526 + 160);
                      v446 = *(_QWORD *)(v533 + 1512);
                      if (v446)
                      {
                        v447 = (unint64_t *)(v446 + 8);
                        do
                          v448 = __ldxr(v447);
                        while (__stxr(v448 + 1, v447));
                      }
                      v449 = *(std::__shared_weak_count **)(v445 + 24);
                      *(_QWORD *)(v445 + 16) = v444;
                      *(_QWORD *)(v445 + 24) = v446;
                      if (v449)
                      {
                        v450 = (unint64_t *)&v449->__shared_owners_;
                        do
                          v451 = __ldaxr(v450);
                        while (__stlxr(v451 - 1, v450));
                        if (!v451)
                        {
                          ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
                          std::__shared_weak_count::__release_weak(v449);
                        }
                      }
                      v452 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v452 + 48) = v524;
                      *(_QWORD *)(v452 + 56) = 0;
                      v453 = *(_QWORD *)(v526 + 160);
                      do
                        v454 = __ldxr(v185);
                      while (__stxr(v454 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v453 + 56);
                      *(_QWORD *)(v453 + 48) = v524;
                      *(_QWORD *)(v453 + 56) = v530;
                      if (v229)
                      {
                        v455 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v455);
                        while (__stlxr(v231 - 1, v455));
                        goto LABEL_590;
                      }
                      break;
                    case 6:
                      v456 = *(_QWORD *)(v533 + 1472);
                      v457 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v457 + 40) = 0;
                      v458 = *(_QWORD *)(v456 + 88);
                      *(_QWORD *)(v457 + 32) = v458;
                      v459 = *(_QWORD *)(v526 + 160);
                      v460 = *(_QWORD *)(v456 + 96);
                      if (v460)
                      {
                        v461 = (unint64_t *)(v460 + 8);
                        do
                          v462 = __ldxr(v461);
                        while (__stxr(v462 + 1, v461));
                      }
                      v463 = *(std::__shared_weak_count **)(v459 + 40);
                      *(_QWORD *)(v459 + 32) = v458;
                      *(_QWORD *)(v459 + 40) = v460;
                      if (v463)
                      {
                        v464 = (unint64_t *)&v463->__shared_owners_;
                        do
                          v465 = __ldaxr(v464);
                        while (__stlxr(v465 - 1, v464));
                        if (!v465)
                        {
                          ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                          std::__shared_weak_count::__release_weak(v463);
                        }
                      }
                      v466 = *(_QWORD **)(v526 + 64);
                      v466[1] = 0;
                      v467 = *(_QWORD *)(v533 + 1488);
                      *v466 = v467;
                      v468 = *(_QWORD **)(v526 + 160);
                      v469 = *(_QWORD *)(v533 + 1496);
                      if (v469)
                      {
                        v470 = (unint64_t *)(v469 + 8);
                        do
                          v471 = __ldxr(v470);
                        while (__stxr(v471 + 1, v470));
                      }
                      v472 = (std::__shared_weak_count *)v468[1];
                      *v468 = v467;
                      v468[1] = v469;
                      if (v472)
                      {
                        v473 = (unint64_t *)&v472->__shared_owners_;
                        do
                          v474 = __ldaxr(v473);
                        while (__stlxr(v474 - 1, v473));
                        if (!v474)
                        {
                          ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                          std::__shared_weak_count::__release_weak(v472);
                        }
                      }
                      v475 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v475 + 24) = 0;
                      v476 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v475 + 16) = v476;
                      v477 = *(_QWORD *)(v526 + 160);
                      v478 = *(_QWORD *)(v533 + 1512);
                      if (v478)
                      {
                        v479 = (unint64_t *)(v478 + 8);
                        do
                          v480 = __ldxr(v479);
                        while (__stxr(v480 + 1, v479));
                      }
                      v481 = *(std::__shared_weak_count **)(v477 + 24);
                      *(_QWORD *)(v477 + 16) = v476;
                      *(_QWORD *)(v477 + 24) = v478;
                      if (v481)
                      {
                        v482 = (unint64_t *)&v481->__shared_owners_;
                        do
                          v483 = __ldaxr(v482);
                        while (__stlxr(v483 - 1, v482));
                        if (!v483)
                        {
                          ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
                          std::__shared_weak_count::__release_weak(v481);
                        }
                      }
                      v484 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v484 + 48) = v524;
                      *(_QWORD *)(v484 + 56) = 0;
                      v485 = *(_QWORD *)(v526 + 160);
                      do
                        v486 = __ldxr(v185);
                      while (__stxr(v486 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v485 + 56);
                      *(_QWORD *)(v485 + 48) = v524;
                      *(_QWORD *)(v485 + 56) = v530;
                      if (v229)
                      {
                        v487 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v487);
                        while (__stlxr(v231 - 1, v487));
                        goto LABEL_590;
                      }
                      break;
                    case 7:
                      v360 = *(_QWORD *)(v533 + 1472);
                      v361 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v361 + 40) = 0;
                      v362 = *(_QWORD *)(v360 + 88);
                      *(_QWORD *)(v361 + 32) = v362;
                      v363 = *(_QWORD *)(v526 + 160);
                      v364 = *(_QWORD *)(v360 + 96);
                      if (v364)
                      {
                        v365 = (unint64_t *)(v364 + 8);
                        do
                          v366 = __ldxr(v365);
                        while (__stxr(v366 + 1, v365));
                      }
                      v367 = *(std::__shared_weak_count **)(v363 + 40);
                      *(_QWORD *)(v363 + 32) = v362;
                      *(_QWORD *)(v363 + 40) = v364;
                      if (v367)
                      {
                        v368 = (unint64_t *)&v367->__shared_owners_;
                        do
                          v369 = __ldaxr(v368);
                        while (__stlxr(v369 - 1, v368));
                        if (!v369)
                        {
                          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                          std::__shared_weak_count::__release_weak(v367);
                        }
                      }
                      v370 = *(_QWORD **)(v526 + 64);
                      v370[1] = 0;
                      v371 = *(_QWORD *)(v533 + 1488);
                      *v370 = v371;
                      v372 = *(_QWORD **)(v526 + 160);
                      v373 = *(_QWORD *)(v533 + 1496);
                      if (v373)
                      {
                        v374 = (unint64_t *)(v373 + 8);
                        do
                          v375 = __ldxr(v374);
                        while (__stxr(v375 + 1, v374));
                      }
                      v376 = (std::__shared_weak_count *)v372[1];
                      *v372 = v371;
                      v372[1] = v373;
                      if (v376)
                      {
                        v377 = (unint64_t *)&v376->__shared_owners_;
                        do
                          v378 = __ldaxr(v377);
                        while (__stlxr(v378 - 1, v377));
                        if (!v378)
                        {
                          ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                          std::__shared_weak_count::__release_weak(v376);
                        }
                      }
                      v379 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v379 + 24) = 0;
                      v380 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v379 + 16) = v380;
                      v381 = *(_QWORD *)(v526 + 160);
                      v382 = *(_QWORD *)(v533 + 1512);
                      if (v382)
                      {
                        v383 = (unint64_t *)(v382 + 8);
                        do
                          v384 = __ldxr(v383);
                        while (__stxr(v384 + 1, v383));
                      }
                      v385 = *(std::__shared_weak_count **)(v381 + 24);
                      *(_QWORD *)(v381 + 16) = v380;
                      *(_QWORD *)(v381 + 24) = v382;
                      if (v385)
                      {
                        v386 = (unint64_t *)&v385->__shared_owners_;
                        do
                          v387 = __ldaxr(v386);
                        while (__stlxr(v387 - 1, v386));
                        if (!v387)
                        {
                          ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                          std::__shared_weak_count::__release_weak(v385);
                        }
                      }
                      v388 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v388 + 48) = v524;
                      *(_QWORD *)(v388 + 56) = 0;
                      v389 = *(_QWORD *)(v526 + 160);
                      do
                        v390 = __ldxr(v185);
                      while (__stxr(v390 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v389 + 56);
                      *(_QWORD *)(v389 + 48) = v524;
                      *(_QWORD *)(v389 + 56) = v530;
                      if (v229)
                      {
                        v391 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v391);
                        while (__stlxr(v231 - 1, v391));
                        goto LABEL_590;
                      }
                      break;
                    case 8:
                      v488 = *(_QWORD *)(v533 + 1472);
                      v489 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v489 + 40) = 0;
                      v490 = *(_QWORD *)(v488 + 104);
                      *(_QWORD *)(v489 + 32) = v490;
                      v491 = *(_QWORD *)(v526 + 160);
                      v492 = *(_QWORD *)(v488 + 112);
                      if (v492)
                      {
                        v493 = (unint64_t *)(v492 + 8);
                        do
                          v494 = __ldxr(v493);
                        while (__stxr(v494 + 1, v493));
                      }
                      v495 = *(std::__shared_weak_count **)(v491 + 40);
                      *(_QWORD *)(v491 + 32) = v490;
                      *(_QWORD *)(v491 + 40) = v492;
                      if (v495)
                      {
                        v496 = (unint64_t *)&v495->__shared_owners_;
                        do
                          v497 = __ldaxr(v496);
                        while (__stlxr(v497 - 1, v496));
                        if (!v497)
                        {
                          ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                          std::__shared_weak_count::__release_weak(v495);
                        }
                      }
                      v498 = *(_QWORD **)(v526 + 64);
                      v498[1] = 0;
                      v499 = *(_QWORD *)(v533 + 1488);
                      *v498 = v499;
                      v500 = *(_QWORD **)(v526 + 160);
                      v501 = *(_QWORD *)(v533 + 1496);
                      if (v501)
                      {
                        v502 = (unint64_t *)(v501 + 8);
                        do
                          v503 = __ldxr(v502);
                        while (__stxr(v503 + 1, v502));
                      }
                      v504 = (std::__shared_weak_count *)v500[1];
                      *v500 = v499;
                      v500[1] = v501;
                      if (v504)
                      {
                        v505 = (unint64_t *)&v504->__shared_owners_;
                        do
                          v506 = __ldaxr(v505);
                        while (__stlxr(v506 - 1, v505));
                        if (!v506)
                        {
                          ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                          std::__shared_weak_count::__release_weak(v504);
                        }
                      }
                      v507 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v507 + 24) = 0;
                      v508 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v507 + 16) = v508;
                      v509 = *(_QWORD *)(v526 + 160);
                      v510 = *(_QWORD *)(v533 + 1512);
                      if (v510)
                      {
                        v511 = (unint64_t *)(v510 + 8);
                        do
                          v512 = __ldxr(v511);
                        while (__stxr(v512 + 1, v511));
                      }
                      v513 = *(std::__shared_weak_count **)(v509 + 24);
                      *(_QWORD *)(v509 + 16) = v508;
                      *(_QWORD *)(v509 + 24) = v510;
                      if (v513)
                      {
                        v514 = (unint64_t *)&v513->__shared_owners_;
                        do
                          v515 = __ldaxr(v514);
                        while (__stlxr(v515 - 1, v514));
                        if (!v515)
                        {
                          ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
                          std::__shared_weak_count::__release_weak(v513);
                        }
                      }
                      v516 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v516 + 48) = v524;
                      *(_QWORD *)(v516 + 56) = 0;
                      v517 = *(_QWORD *)(v526 + 160);
                      do
                        v518 = __ldxr(v185);
                      while (__stxr(v518 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v517 + 56);
                      *(_QWORD *)(v517 + 48) = v524;
                      *(_QWORD *)(v517 + 56) = v530;
                      if (v229)
                      {
                        v519 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v519);
                        while (__stlxr(v231 - 1, v519));
                        goto LABEL_590;
                      }
                      break;
                    case 9:
                      v264 = *(_QWORD *)(v533 + 1472);
                      v265 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v265 + 40) = 0;
                      v266 = *(_QWORD *)(v264 + 40);
                      *(_QWORD *)(v265 + 32) = v266;
                      v267 = *(_QWORD *)(v526 + 160);
                      v268 = *(_QWORD *)(v264 + 48);
                      if (v268)
                      {
                        v269 = (unint64_t *)(v268 + 8);
                        do
                          v270 = __ldxr(v269);
                        while (__stxr(v270 + 1, v269));
                      }
                      v271 = *(std::__shared_weak_count **)(v267 + 40);
                      *(_QWORD *)(v267 + 32) = v266;
                      *(_QWORD *)(v267 + 40) = v268;
                      if (v271)
                      {
                        v272 = (unint64_t *)&v271->__shared_owners_;
                        do
                          v273 = __ldaxr(v272);
                        while (__stlxr(v273 - 1, v272));
                        if (!v273)
                        {
                          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                          std::__shared_weak_count::__release_weak(v271);
                        }
                      }
                      v274 = *(_QWORD **)(v526 + 64);
                      v274[1] = 0;
                      v275 = *(_QWORD *)(v533 + 1488);
                      *v274 = v275;
                      v276 = *(_QWORD **)(v526 + 160);
                      v277 = *(_QWORD *)(v533 + 1496);
                      if (v277)
                      {
                        v278 = (unint64_t *)(v277 + 8);
                        do
                          v279 = __ldxr(v278);
                        while (__stxr(v279 + 1, v278));
                      }
                      v280 = (std::__shared_weak_count *)v276[1];
                      *v276 = v275;
                      v276[1] = v277;
                      if (v280)
                      {
                        v281 = (unint64_t *)&v280->__shared_owners_;
                        do
                          v282 = __ldaxr(v281);
                        while (__stlxr(v282 - 1, v281));
                        if (!v282)
                        {
                          ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                          std::__shared_weak_count::__release_weak(v280);
                        }
                      }
                      v283 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v283 + 24) = 0;
                      v284 = *(_QWORD *)(v533 + 1504);
                      *(_QWORD *)(v283 + 16) = v284;
                      v285 = *(_QWORD *)(v526 + 160);
                      v286 = *(_QWORD *)(v533 + 1512);
                      if (v286)
                      {
                        v287 = (unint64_t *)(v286 + 8);
                        do
                          v288 = __ldxr(v287);
                        while (__stxr(v288 + 1, v287));
                      }
                      v289 = *(std::__shared_weak_count **)(v285 + 24);
                      *(_QWORD *)(v285 + 16) = v284;
                      *(_QWORD *)(v285 + 24) = v286;
                      if (v289)
                      {
                        v290 = (unint64_t *)&v289->__shared_owners_;
                        do
                          v291 = __ldaxr(v290);
                        while (__stlxr(v291 - 1, v290));
                        if (!v291)
                        {
                          ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                          std::__shared_weak_count::__release_weak(v289);
                        }
                      }
                      v292 = *(_QWORD *)(v526 + 64);
                      *(_QWORD *)(v292 + 48) = v524;
                      *(_QWORD *)(v292 + 56) = 0;
                      v293 = *(_QWORD *)(v526 + 160);
                      do
                        v294 = __ldxr(v185);
                      while (__stxr(v294 + 1, v185));
                      v229 = *(std::__shared_weak_count **)(v293 + 56);
                      *(_QWORD *)(v293 + 48) = v524;
                      *(_QWORD *)(v293 + 56) = v530;
                      if (v229)
                      {
                        v295 = (unint64_t *)&v229->__shared_owners_;
                        do
                          v231 = __ldaxr(v295);
                        while (__stlxr(v231 - 1, v295));
LABEL_590:
                        if (!v231)
                        {
                          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                          std::__shared_weak_count::__release_weak(v229);
                        }
                      }
                      break;
                    default:
                      goto LABEL_592;
                  }
                  do
LABEL_592:
                    v520 = __ldaxr(v185);
                  while (__stlxr(v520 - 1, v185));
                  v160 = v525;
                  if (!v520)
                  {
                    ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
                    std::__shared_weak_count::__release_weak(v530);
                  }
                }
              }
              *(_QWORD *)(v160 + 32) = v54;
              goto LABEL_95;
            }
LABEL_148:
            if (v55)
              *v55 = v54;
            v89 = v55 + 1;
            goto LABEL_236;
          }
          v78 = *(_QWORD *)(v52 + 88);
          if (!v78)
            goto LABEL_597;
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 48))(v78);
          v55 = *(uint64_t **)(v52 + 40);
          v79 = *(_QWORD *)(v52 + 48);
          if ((unint64_t)v55 < v79)
            goto LABEL_148;
          v80 = *(_QWORD *)(v52 + 32);
          v81 = ((uint64_t)v55 - v80) >> 3;
          v59 = v81 + 1;
          if ((unint64_t)(v81 + 1) >> 61)
            goto LABEL_598;
          v82 = v79 - v80;
          if (v82 >> 2 > v59)
            v59 = v82 >> 2;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          if (v59)
          {
            v83 = 8 * v59;
            v84 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v52 + 56) + 16))(*(_QWORD *)(v52 + 56), 8 * v59, 8);
            v63 = (uint64_t *)(v84 + 8 * v81);
            v59 = v84 + v83;
            if (v84)
              *v63 = v54;
          }
          else
          {
            v63 = (uint64_t *)(8 * v81);
          }
          v120 = *(_QWORD *)(v52 + 32);
          v92 = *(_QWORD *)(v52 + 40);
          v121 = v92 - v120;
          if (v92 == v120)
            goto LABEL_224;
          v122 = v121 - 8;
          if ((unint64_t)(v121 - 8) < 0x38)
          {
            v96 = v63;
          }
          else
          {
            v96 = v63;
            if ((unint64_t)(v92 - (_QWORD)v63) >= 0x20)
            {
              v123 = (v122 >> 3) + 1;
              v124 = v63 - 2;
              v125 = (__int128 *)(v92 - 16);
              v126 = v123 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v127 = *v125;
                *((_OWORD *)v124 - 1) = *(v125 - 1);
                *(_OWORD *)v124 = v127;
                v124 -= 4;
                v125 -= 2;
                v126 -= 4;
              }
              while (v126);
              v96 = &v63[-(v123 & 0x3FFFFFFFFFFFFFFCLL)];
              v92 -= 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
              if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_233;
            }
          }
          do
          {
            v146 = *(_QWORD *)(v92 - 8);
            v92 -= 8;
            *--v96 = v146;
          }
          while (v92 != v120);
        }
        else if (((1 << v48) & 0x122) != 0)
        {
          v52 = v532[19];
          v64 = *(_QWORD *)(v52 + 8);
          if (v64 == *(_QWORD *)v52)
          {
            v85 = *(_QWORD *)(v52 + 88);
            if (!v85)
              goto LABEL_597;
            v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 48))(v85);
            v87 = *(uint64_t **)(v52 + 40);
            v88 = *(_QWORD *)(v52 + 48);
            if ((unint64_t)v87 < v88)
            {
              if (v87)
                *v87 = v86;
              v54 = v86;
              v89 = v87 + 1;
              goto LABEL_236;
            }
            v102 = *(_QWORD *)(v52 + 32);
            v103 = ((uint64_t)v87 - v102) >> 3;
            v59 = v103 + 1;
            if ((unint64_t)(v103 + 1) >> 61)
              goto LABEL_598;
            v54 = v86;
            v104 = v88 - v102;
            if (v104 >> 2 > v59)
              v59 = v104 >> 2;
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            if (v59)
            {
              v105 = 8 * v59;
              v106 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v52 + 56) + 16))(*(_QWORD *)(v52 + 56), 8 * v59, 8);
              v63 = (uint64_t *)(v106 + 8 * v103);
              v59 = v106 + v105;
              if (v106)
                *v63 = v54;
            }
            else
            {
              v63 = (uint64_t *)(8 * v103);
            }
            v137 = *(_QWORD *)(v52 + 32);
            v92 = *(_QWORD *)(v52 + 40);
            v138 = v92 - v137;
            if (v92 == v137)
              goto LABEL_224;
            v139 = v138 - 8;
            if ((unint64_t)(v138 - 8) < 0x38)
            {
              v96 = v63;
            }
            else
            {
              v96 = v63;
              if ((unint64_t)(v92 - (_QWORD)v63) >= 0x20)
              {
                v140 = (v139 >> 3) + 1;
                v141 = v63 - 2;
                v142 = (__int128 *)(v92 - 16);
                v143 = v140 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v144 = *v142;
                  *((_OWORD *)v141 - 1) = *(v142 - 1);
                  *(_OWORD *)v141 = v144;
                  v141 -= 4;
                  v142 -= 2;
                  v143 -= 4;
                }
                while (v143);
                v96 = &v63[-(v140 & 0x3FFFFFFFFFFFFFFCLL)];
                v92 -= 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
                if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_233;
              }
            }
            do
            {
              v156 = *(_QWORD *)(v92 - 8);
              v92 -= 8;
              *--v96 = v156;
            }
            while (v92 != v137);
          }
          else
          {
            v54 = *(_QWORD *)(v64 - 8);
            *(_QWORD *)(v52 + 8) = v64 - 8;
            v55 = *(uint64_t **)(v52 + 40);
            v65 = *(_QWORD *)(v52 + 48);
            if ((unint64_t)v55 < v65)
              goto LABEL_148;
            v66 = *(_QWORD *)(v52 + 32);
            v67 = ((uint64_t)v55 - v66) >> 3;
            v59 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 61)
              goto LABEL_598;
            v68 = v65 - v66;
            if (v68 >> 2 > v59)
              v59 = v68 >> 2;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            if (v59)
            {
              v69 = 8 * v59;
              v70 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v52 + 56) + 16))(*(_QWORD *)(v52 + 56), 8 * v59, 8);
              v63 = (uint64_t *)(v70 + 8 * v67);
              v59 = v70 + v69;
              if (v70)
                *v63 = v54;
            }
            else
            {
              v63 = (uint64_t *)(8 * v67);
            }
            v112 = *(_QWORD *)(v52 + 32);
            v92 = *(_QWORD *)(v52 + 40);
            v113 = v92 - v112;
            if (v92 == v112)
              goto LABEL_224;
            v114 = v113 - 8;
            if ((unint64_t)(v113 - 8) < 0x38)
            {
              v96 = v63;
            }
            else
            {
              v96 = v63;
              if ((unint64_t)(v92 - (_QWORD)v63) >= 0x20)
              {
                v115 = (v114 >> 3) + 1;
                v116 = v63 - 2;
                v117 = (__int128 *)(v92 - 16);
                v118 = v115 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v119 = *v117;
                  *((_OWORD *)v116 - 1) = *(v117 - 1);
                  *(_OWORD *)v116 = v119;
                  v116 -= 4;
                  v117 -= 2;
                  v118 -= 4;
                }
                while (v118);
                v96 = &v63[-(v115 & 0x3FFFFFFFFFFFFFFCLL)];
                v92 -= 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
                if (v115 == (v115 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_233;
              }
            }
            do
            {
              v145 = *(_QWORD *)(v92 - 8);
              v92 -= 8;
              *--v96 = v145;
            }
            while (v92 != v112);
          }
        }
        else
        {
          v52 = v532[21];
          v71 = *(_QWORD *)(v52 + 8);
          if (v71 == *(_QWORD *)v52)
          {
            v90 = *(_QWORD *)(v52 + 88);
            if (!v90)
              goto LABEL_597;
            v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 48))(v90);
            v55 = *(uint64_t **)(v52 + 40);
            v91 = *(_QWORD *)(v52 + 48);
            if ((unint64_t)v55 < v91)
              goto LABEL_148;
            v107 = *(_QWORD *)(v52 + 32);
            v108 = ((uint64_t)v55 - v107) >> 3;
            v59 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 61)
              goto LABEL_598;
            v109 = v91 - v107;
            if (v109 >> 2 > v59)
              v59 = v109 >> 2;
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            if (v59)
            {
              v110 = 8 * v59;
              v111 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v52 + 56) + 16))(*(_QWORD *)(v52 + 56), 8 * v59, 8);
              v63 = (uint64_t *)(v111 + 8 * v108);
              v59 = v111 + v110;
              if (v111)
                *v63 = v54;
            }
            else
            {
              v63 = (uint64_t *)(8 * v108);
            }
            v147 = *(_QWORD *)(v52 + 32);
            v92 = *(_QWORD *)(v52 + 40);
            v148 = v92 - v147;
            if (v92 == v147)
              goto LABEL_224;
            v149 = v148 - 8;
            if ((unint64_t)(v148 - 8) < 0x38)
            {
              v96 = v63;
            }
            else
            {
              v96 = v63;
              if ((unint64_t)(v92 - (_QWORD)v63) >= 0x20)
              {
                v150 = (v149 >> 3) + 1;
                v151 = v63 - 2;
                v152 = (__int128 *)(v92 - 16);
                v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v154 = *v152;
                  *((_OWORD *)v151 - 1) = *(v152 - 1);
                  *(_OWORD *)v151 = v154;
                  v151 -= 4;
                  v152 -= 2;
                  v153 -= 4;
                }
                while (v153);
                v96 = &v63[-(v150 & 0x3FFFFFFFFFFFFFFCLL)];
                v92 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
                if (v150 == (v150 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_233;
              }
            }
            do
            {
              v157 = *(_QWORD *)(v92 - 8);
              v92 -= 8;
              *--v96 = v157;
            }
            while (v92 != v147);
          }
          else
          {
            v54 = *(_QWORD *)(v71 - 8);
            *(_QWORD *)(v52 + 8) = v71 - 8;
            v55 = *(uint64_t **)(v52 + 40);
            v72 = *(_QWORD *)(v52 + 48);
            if ((unint64_t)v55 < v72)
              goto LABEL_148;
            v73 = *(_QWORD *)(v52 + 32);
            v74 = ((uint64_t)v55 - v73) >> 3;
            v59 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 61)
              goto LABEL_598;
            v75 = v72 - v73;
            if (v75 >> 2 > v59)
              v59 = v75 >> 2;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            if (v59)
            {
              v76 = 8 * v59;
              v77 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v52 + 56) + 16))(*(_QWORD *)(v52 + 56), 8 * v59, 8);
              v63 = (uint64_t *)(v77 + 8 * v74);
              v59 = v77 + v76;
              if (v77)
                *v63 = v54;
            }
            else
            {
              v63 = (uint64_t *)(8 * v74);
            }
            v129 = *(_QWORD *)(v52 + 32);
            v92 = *(_QWORD *)(v52 + 40);
            v130 = v92 - v129;
            if (v92 == v129)
              goto LABEL_224;
            v131 = v130 - 8;
            if ((unint64_t)(v130 - 8) < 0x38)
            {
              v96 = v63;
            }
            else
            {
              v96 = v63;
              if ((unint64_t)(v92 - (_QWORD)v63) >= 0x20)
              {
                v132 = (v131 >> 3) + 1;
                v133 = v63 - 2;
                v134 = (__int128 *)(v92 - 16);
                v135 = v132 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v136 = *v134;
                  *((_OWORD *)v133 - 1) = *(v134 - 1);
                  *(_OWORD *)v133 = v136;
                  v133 -= 4;
                  v134 -= 2;
                  v135 -= 4;
                }
                while (v135);
                v96 = &v63[-(v132 & 0x3FFFFFFFFFFFFFFCLL)];
                v92 -= 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
                if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_233;
              }
            }
            do
            {
              v155 = *(_QWORD *)(v92 - 8);
              v92 -= 8;
              *--v96 = v155;
            }
            while (v92 != v129);
          }
        }
LABEL_233:
        v92 = *(_QWORD *)(v52 + 32);
        goto LABEL_234;
      }
LABEL_76:
      v37 = v522 + 1;
      if (v522 + 1 == v521)
        return;
    }
    md::PolylineOverlayStyle::updateFromStyleQuery<md::Stroke1StyleProperties>((uint64_t)v38, v2, (uint64_t)v536);
    if (!*v38)
      goto LABEL_84;
LABEL_83:
    md::PolylineOverlayStyle::writePasses((uint64_t)v38, v2, (uint64_t)v536);
    goto LABEL_84;
  }
}

void sub_19F95DD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (a20)
  {
    shared_weak_owners = v20[3].__shared_weak_owners_;
    if (shared_weak_owners <= a20)
      shared_weak_owners = a20;
    v20[3].__shared_owners_ = 0;
    v20[3].__shared_weak_owners_ = shared_weak_owners;
  }
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E20B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayAlphaFillShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  int8x16_t v6;
  __int8 v7;
  int8x16_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unsigned __int8 v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  char v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  char v137;
  char v138;
  std::__shared_weak_count **v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[28];

  v5 = a3[2];
  v6.i16[3] = 0;
  v6.i8[8] = 0;
  v6.i16[5] = 0;
  v6.i32[3] = 0;
  v6.i16[0] = *(_WORD *)a3;
  *(__int32 *)((char *)v6.i32 + 2) = v5;
  v7 = a3[3];
  v6.i8[9] = v7;
  v8 = vceqzq_s8(v6);
  v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  v12 = v11;
  v13 = vmovl_high_s8(v8);
  v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  v15 = v11;
  v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  v17 = v11;
  v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v22), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v20), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v17), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v12), vbicq_s8((int8x16_t)xmmword_19FFB3080, v15)))));
  v24 = v23;
  v26 = (uint64_t **)(a2 + 104);
  v25 = *(_QWORD **)(a2 + 104);
  if (!v25)
    goto LABEL_12;
  v27 = (uint64_t **)(a2 + 104);
  do
  {
    v28 = v25[4];
    v29 = v28 >= v23;
    if (v28 >= v23)
      v30 = v25;
    else
      v30 = v25 + 1;
    if (v29)
      v27 = (uint64_t **)v25;
    v25 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    v125 = v27[6];
    a1[1] = (std::__shared_weak_count *)v125;
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 1);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
    }
  }
  else
  {
LABEL_12:
    v137 = a3[1];
    v138 = *a3;
    v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E40E0;
    v140 = *(_OWORD *)(a2 + 16);
    v141 = *(_OWORD *)(a2 + 32);
    v139 = a1;
    if ((v33 & 1) == 0
    {
      if ((v128 & 1) == 0
      {
        if ((v132 & 1) == 0
        {
          if ((v136 & 1) == 0
          {
            ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE32518 = 1;
        }
        ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1ECE31E88 = &ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineDeviceStructs(void)::ref;
        qword_1ECE31E90 = 0;
        if ((v133 & 1) == 0
        {
          ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1ECE31F10 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE31F18 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
          unk_1ECE31F20 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
        }
        qword_1ECE31E98 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref;
        unk_1ECE31EA0 = xmmword_19FFB48D0;
      }
      ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref;
      if ((v129 & 1) == 0
      {
        ggl::GradientPolylineOverlayAlphaFillShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
        if ((v134 & 1) == 0
        {
          qword_1ECE436C0 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
          unk_1ECE436C8 = ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE436D0 = 1;
          unk_1ECE436D8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE436E0 = 3;
          unk_1ECE436E8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE436F0 = 0;
          unk_1ECE436F8 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = 503820842;
          qword_1ECE43700 = 0;
          unk_1ECE43708 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43718 = 0;
          unk_1ECE43720 = 0;
          qword_1ECE43710 = 0;
        }
        qword_1ECE3BEF0 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3BEF8 = 503820842;
        if ((v135 & 1) == 0
        {
          ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x10A41F7BCLL;
          qword_1ECE43738 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
          unk_1ECE43740 = 0;
          qword_1ECE43748 = 0;
          unk_1ECE43750 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43758 = 2;
          unk_1ECE43760 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43768 = 0;
          unk_1ECE43770 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43778 = 1;
          unk_1ECE43780 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43790 = 0;
          unk_1ECE43798 = 0;
          qword_1ECE43788 = 1;
        }
        qword_1ECE3BF00 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BF08 = 172095420;
        qword_1ECE3BF10 = (uint64_t)ggl::gradientPolylineOverlayAlphaFillShaderShaderConstants(void)::ref;
        unk_1ECE3BF18 = 4;
        qword_1ECE3BF20 = (uint64_t)ggl::gradientPolylineOverlayAlphaFillShaderShaderTextures(void)::ref;
        unk_1ECE3BF28 = 1;
        qword_1ECE3BF30 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderShaderSamplers(void)::ref;
        unk_1ECE3BF38 = 1;
      }
      qword_1ECE2FBC0 = (uint64_t)&ggl::GradientPolylineOverlayAlphaFillShader::typedReflection(void)::ref;
      if ((v130 & 1) == 0
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58B060 = 0;
        qword_1EE58B068 = (uint64_t)"";
        dword_1EE58B070 = 0;
        qword_1EE58B078 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeBinding_0(void)::attr;
        unk_1EE58B080 = 5;
      }
      qword_1ECE2FBC8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2FBD0 = 1;
      qword_1ECE2FBD8 = 0;
      unk_1ECE2FBE0 = 1;
      qword_1ECE2FBE8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2FBF0 = 0;
      if ((v131 & 1) == 0
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58B0A0 = 0;
        qword_1EE58B0A8 = (uint64_t)"view";
        dword_1EE58B0B0 = 3;
        qword_1EE58B0B8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantViewBinding(void)::reflection;
        unk_1EE58B0C0 = xmmword_19FFB35A0;
        qword_1EE58B0D0 = 1;
        unk_1EE58B0D8 = "transform";
        dword_1EE58B0E0 = 3;
        qword_1EE58B0E8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE58B0F0 = xmmword_19FFB3660;
        qword_1EE58B100 = 2;
        unk_1EE58B108 = "style";
        dword_1EE58B110 = 3;
        qword_1EE58B118 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStyleBinding(void)::reflection;
        unk_1EE58B120 = xmmword_19FFB4DE0;
        qword_1EE58B130 = 3;
        unk_1EE58B138 = "gradientInfo";
        dword_1EE58B140 = 3;
        qword_1EE58B148 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantGradientInfoBinding(void)::reflection;
        unk_1EE58B150 = 4;
      }
      qword_1ECE2FBF8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStructBinding(void)::ref;
      unk_1ECE2FC00 = 4;
    }
    v34 = *(std::__shared_weak_count_vtbl **)a2;
    v35 = *(std::__shared_weak_count **)(a2 + 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = v31 + 1;
    *(_OWORD *)v142 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v142[12] = *(_OWORD *)(a2 + 60);
    v39 = *(_OWORD *)(a2 + 76);
    v40 = *(_BYTE *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v34;
    v31[3].__shared_owners_ = (uint64_t)v35;
    if (v35)
    {
      v41 = (unint64_t *)&v35->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v140;
    *(_OWORD *)&v31[12].__shared_owners_ = v141;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v142[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v142;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v39;
    BYTE4(v31[5].__shared_owners_) = v40;
    if (v35)
    {
      v43 = (unint64_t *)&v35->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v138;
    BYTE1(v31[13].__shared_weak_owners_) = v137;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    v45 = *(int8x16_t *)&v31[14].__shared_owners_;
    v46 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    v47 = vmovl_high_s8(v46);
    v48 = vmovl_s16(*(int16x4_t *)v47.i8);
    v49.i64[0] = v48.u32[0];
    v49.i64[1] = v48.u32[1];
    v50 = v49;
    v51 = vmovl_s8(*(int8x8_t *)v46.i8);
    v52 = vmovl_s16(*(int16x4_t *)v51.i8);
    v49.i64[0] = v52.u32[0];
    v49.i64[1] = v52.u32[1];
    v53 = v49;
    v54 = vmovl_high_s16(v47);
    v49.i64[0] = v54.u32[0];
    v49.i64[1] = v54.u32[1];
    v55 = v49;
    v56 = vmovl_high_s16(v51);
    v49.i64[0] = v56.u32[0];
    v49.i64[1] = v56.u32[1];
    v57 = v49;
    v49.i64[0] = v48.u32[2];
    v49.i64[1] = v48.u32[3];
    v58 = v49;
    v49.i64[0] = v52.u32[2];
    v49.i64[1] = v52.u32[3];
    v59 = v49;
    v49.i64[0] = v54.u32[2];
    v49.i64[1] = v54.u32[3];
    v60 = v49;
    v49.i64[0] = v56.u32[2];
    v49.i64[1] = v56.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BB700;
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v49);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v60);
    v63 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v59);
    v64 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v55);
    v65 = vceqzq_s8(v45);
    v66 = vmovl_high_s8(v65);
    v67 = vmovl_s16(*(int16x4_t *)v66.i8);
    v49.i64[0] = v67.u32[0];
    v49.i64[1] = v67.u32[1];
    v68 = v49;
    v69 = vmovl_s8(*(int8x8_t *)v65.i8);
    v70 = vmovl_s16(*(int16x4_t *)v69.i8);
    v49.i64[0] = v70.u32[0];
    v49.i64[1] = v70.u32[1];
    v71 = v49;
    v72 = vmovl_high_s16(v66);
    v49.i64[0] = v72.u32[0];
    v49.i64[1] = v72.u32[1];
    v73 = v49;
    v74 = vmovl_high_s16(v69);
    v49.i64[0] = v74.u32[0];
    v49.i64[1] = v74.u32[1];
    v75 = v49;
    v49.i64[0] = v67.u32[2];
    v49.i64[1] = v67.u32[3];
    v76 = v49;
    v49.i64[0] = v70.u32[2];
    v49.i64[1] = v70.u32[3];
    v77 = v49;
    v49.i64[0] = v72.u32[2];
    v49.i64[1] = v72.u32[3];
    v78 = v49;
    v49.i64[0] = v74.u32[2];
    v49.i64[1] = v74.u32[3];
    v79 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v78);
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v68), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v50));
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v71), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v53));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v73), v64);
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v75), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v57));
    v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v76), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v58));
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v77), v63);
    v86 = vorrq_s8(v79, v62);
    v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v49), v61);
    v88 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    v89 = vmovl_s8(*(int8x8_t *)v88.i8);
    v90 = vmovl_high_s16(v89);
    v49.i64[0] = v90.i32[2];
    v49.i64[1] = v90.i32[3];
    v91 = v49;
    v92 = vmovl_high_s8(v88);
    v93 = vmovl_high_s16(v92);
    v49.i64[0] = v93.i32[2];
    v49.i64[1] = v93.i32[3];
    v94 = v49;
    v95 = vmovl_s16(*(int16x4_t *)v89.i8);
    v49.i64[0] = v95.i32[2];
    v49.i64[1] = v95.i32[3];
    v96 = v49;
    v97 = vmovl_s16(*(int16x4_t *)v92.i8);
    v49.i64[0] = v97.i32[2];
    v49.i64[1] = v97.i32[3];
    v98 = v49;
    v49.i64[0] = v90.i32[0];
    v49.i64[1] = v90.i32[1];
    v99 = v49;
    v49.i64[0] = v93.i32[0];
    v49.i64[1] = v93.i32[1];
    v100 = v49;
    v49.i64[0] = v95.i32[0];
    v49.i64[1] = v95.i32[1];
    v101 = v49;
    v49.i64[0] = v97.i32[0];
    v49.i64[1] = v97.i32[1];
    v102 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v49);
    v103 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    v104 = vmovl_high_s8(v103);
    v105 = vmovl_s16(*(int16x4_t *)v104.i8);
    v49.i64[0] = v105.i32[0];
    v49.i64[1] = v105.i32[1];
    v106 = v49;
    v107 = vmovl_s8(*(int8x8_t *)v103.i8);
    v108 = vmovl_s16(*(int16x4_t *)v107.i8);
    v49.i64[0] = v108.i32[0];
    v49.i64[1] = v108.i32[1];
    v109 = v49;
    v110 = vmovl_high_s16(v104);
    v49.i64[0] = v110.i32[0];
    v49.i64[1] = v110.i32[1];
    v111 = v49;
    v112 = vmovl_high_s16(v107);
    v49.i64[0] = v112.i32[0];
    v49.i64[1] = v112.i32[1];
    v113 = v49;
    v49.i64[0] = v105.i32[2];
    v49.i64[1] = v105.i32[3];
    v114 = v49;
    v49.i64[0] = v108.i32[2];
    v49.i64[1] = v108.i32[3];
    v115 = v49;
    v49.i64[0] = v110.i32[2];
    v49.i64[1] = v110.i32[3];
    v116 = v49;
    v49.i64[0] = v112.i32[2];
    v49.i64[1] = v112.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v109), vbicq_s8((int8x16_t)xmmword_19FFB3170, v101)), v81), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v106), v102), v80)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v113), vbicq_s8((int8x16_t)xmmword_19FFB3190, v99)), v83), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v111),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v100)),
                                                    v82))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v115), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v96)), v85), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v114), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v98)), v84)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v49), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v91)), v87), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v116),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v94)),
                                                    v86)))));
    LOBYTE(v31[13].__vftable) = 1;
    *v139 = v38;
    v139[1] = v31;
    do
      v117 = __ldxr(p_shared_owners);
    while (__stxr(v117 + 1, p_shared_owners));
    v118 = *v26;
    v119 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          v119 = (uint64_t **)v118;
          v120 = v118[4];
          if (v24 >= v120)
            break;
          v118 = *v119;
          v26 = v119;
          if (!*v119)
            goto LABEL_33;
        }
        if (v120 >= v24)
          break;
        v118 = v119[1];
        if (!v118)
        {
          v26 = v119 + 1;
          goto LABEL_33;
        }
      }
      v123 = (unint64_t *)&v31->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_33:
      v121 = (uint64_t *)operator new(0x38uLL);
      v121[4] = v24;
      v121[5] = (uint64_t)v38;
      v121[6] = (uint64_t)v31;
      *v121 = 0;
      v121[1] = 0;
      v121[2] = (uint64_t)v119;
      *v26 = v121;
      v122 = **(_QWORD **)(a2 + 96);
      if (v122)
      {
        *(_QWORD *)(a2 + 96) = v122;
        v121 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v121);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F95EAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::AlphaPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayAlphaShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  int8x16_t v6;
  __int8 v7;
  int8x16_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unsigned __int8 v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  char v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  char v137;
  char v138;
  std::__shared_weak_count **v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[28];

  v5 = a3[2];
  v6.i16[3] = 0;
  v6.i8[8] = 0;
  v6.i16[5] = 0;
  v6.i32[3] = 0;
  v6.i16[0] = *(_WORD *)a3;
  *(__int32 *)((char *)v6.i32 + 2) = v5;
  v7 = a3[3];
  v6.i8[9] = v7;
  v8 = vceqzq_s8(v6);
  v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  v12 = v11;
  v13 = vmovl_high_s8(v8);
  v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  v15 = v11;
  v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  v17 = v11;
  v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v22), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v20), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v17), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v12), vbicq_s8((int8x16_t)xmmword_19FFB3080, v15)))));
  v24 = v23;
  v26 = (uint64_t **)(a2 + 104);
  v25 = *(_QWORD **)(a2 + 104);
  if (!v25)
    goto LABEL_12;
  v27 = (uint64_t **)(a2 + 104);
  do
  {
    v28 = v25[4];
    v29 = v28 >= v23;
    if (v28 >= v23)
      v30 = v25;
    else
      v30 = v25 + 1;
    if (v29)
      v27 = (uint64_t **)v25;
    v25 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    v125 = v27[6];
    a1[1] = (std::__shared_weak_count *)v125;
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 1);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
    }
  }
  else
  {
LABEL_12:
    v137 = a3[1];
    v138 = *a3;
    v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E40A8;
    v140 = *(_OWORD *)(a2 + 16);
    v141 = *(_OWORD *)(a2 + 32);
    v139 = a1;
    if ((v33 & 1) == 0
    {
      if ((v128 & 1) == 0
      {
        if ((v132 & 1) == 0
        {
          if ((v136 & 1) == 0
          {
            ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE32518 = 1;
        }
        ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1ECE31E58 = &ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineDeviceStructs(void)::ref;
        qword_1ECE31E60 = 0;
        if ((v133 & 1) == 0
        {
          ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(_QWORD *)algn_1ECE31EE8 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE31EF0 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
          unk_1ECE31EF8 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
        }
        qword_1ECE31E68 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref;
        *(_OWORD *)algn_1ECE31E70 = xmmword_19FFB48D0;
      }
      ggl::GradientPolylineOverlayRibbon::AlphaPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref;
      if ((v129 & 1) == 0
      {
        ggl::GradientPolylineOverlayAlphaShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayAlphaShader";
        if ((v134 & 1) == 0
        {
          qword_1ECE43320 = (uint64_t)"GradientPolylineOverlayAlphaShader";
          unk_1ECE43328 = ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE43330 = 1;
          unk_1ECE43338 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43340 = 3;
          unk_1ECE43348 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43350 = 0;
          unk_1ECE43358 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = 1527713323;
          qword_1ECE43360 = 0;
          unk_1ECE43368 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43378 = 0;
          unk_1ECE43380 = 0;
          qword_1ECE43370 = 0;
        }
        qword_1ECE3BE90 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3BE98 = 1527713323;
        if ((v135 & 1) == 0
        {
          ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x1D18D7C52;
          qword_1ECE43648 = (uint64_t)"GradientPolylineOverlayAlphaShader";
          unk_1ECE43650 = 0;
          qword_1ECE43658 = 0;
          unk_1ECE43660 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43668 = 2;
          unk_1ECE43670 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43678 = 0;
          unk_1ECE43680 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43688 = 1;
          unk_1ECE43690 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE436A0 = 0;
          unk_1ECE436A8 = 0;
          qword_1ECE43698 = 1;
        }
        qword_1ECE3BEA0 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BEA8 = -779256750;
        qword_1ECE3BEB0 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderConstants(void)::ref;
        unk_1ECE3BEB8 = 4;
        qword_1ECE3BEC0 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderTextures(void)::ref;
        unk_1ECE3BEC8 = 1;
        qword_1ECE3BED0 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderSamplers(void)::ref;
        unk_1ECE3BED8 = 1;
      }
      qword_1ECE2FB70 = (uint64_t)&ggl::GradientPolylineOverlayAlphaShader::typedReflection(void)::ref;
      if ((v130 & 1) == 0
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE58AF48 = 0;
        qword_1EE58AF50 = (uint64_t)"";
        dword_1EE58AF58 = 0;
        qword_1EE58AF60 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeBinding_0(void)::attr;
        unk_1EE58AF68 = 5;
      }
      qword_1ECE2FB78 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2FB80 = 1;
      qword_1ECE2FB88 = 0;
      unk_1ECE2FB90 = 1;
      qword_1ECE2FB98 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2FBA0 = 0;
      if ((v131 & 1) == 0
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE58AF88 = 0;
        qword_1EE58AF90 = (uint64_t)"view";
        dword_1EE58AF98 = 3;
        qword_1EE58AFA0 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantViewBinding(void)::reflection;
        unk_1EE58AFA8 = xmmword_19FFB35A0;
        qword_1EE58AFB8 = 1;
        unk_1EE58AFC0 = "transform";
        dword_1EE58AFC8 = 3;
        qword_1EE58AFD0 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantTransformBinding(void)::reflection;
        unk_1EE58AFD8 = xmmword_19FFB3660;
        qword_1EE58AFE8 = 2;
        unk_1EE58AFF0 = "style";
        dword_1EE58AFF8 = 3;
        qword_1EE58B000 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStyleBinding(void)::reflection;
        unk_1EE58B008 = xmmword_19FFB4DE0;
        qword_1EE58B018 = 3;
        unk_1EE58B020 = "gradientInfo";
        dword_1EE58B028 = 3;
        qword_1EE58B030 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantGradientInfoBinding(void)::reflection;
        unk_1EE58B038 = 4;
      }
      qword_1ECE2FBA8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStructBinding(void)::ref;
      unk_1ECE2FBB0 = 4;
    }
    v34 = *(std::__shared_weak_count_vtbl **)a2;
    v35 = *(std::__shared_weak_count **)(a2 + 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = v31 + 1;
    *(_OWORD *)v142 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v142[12] = *(_OWORD *)(a2 + 60);
    v39 = *(_OWORD *)(a2 + 76);
    v40 = *(_BYTE *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v34;
    v31[3].__shared_owners_ = (uint64_t)v35;
    if (v35)
    {
      v41 = (unint64_t *)&v35->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v140;
    *(_OWORD *)&v31[12].__shared_owners_ = v141;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v142[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v142;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v39;
    BYTE4(v31[5].__shared_owners_) = v40;
    if (v35)
    {
      v43 = (unint64_t *)&v35->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v138;
    BYTE1(v31[13].__shared_weak_owners_) = v137;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    v45 = *(int8x16_t *)&v31[14].__shared_owners_;
    v46 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    v47 = vmovl_high_s8(v46);
    v48 = vmovl_s16(*(int16x4_t *)v47.i8);
    v49.i64[0] = v48.u32[0];
    v49.i64[1] = v48.u32[1];
    v50 = v49;
    v51 = vmovl_s8(*(int8x8_t *)v46.i8);
    v52 = vmovl_s16(*(int16x4_t *)v51.i8);
    v49.i64[0] = v52.u32[0];
    v49.i64[1] = v52.u32[1];
    v53 = v49;
    v54 = vmovl_high_s16(v47);
    v49.i64[0] = v54.u32[0];
    v49.i64[1] = v54.u32[1];
    v55 = v49;
    v56 = vmovl_high_s16(v51);
    v49.i64[0] = v56.u32[0];
    v49.i64[1] = v56.u32[1];
    v57 = v49;
    v49.i64[0] = v48.u32[2];
    v49.i64[1] = v48.u32[3];
    v58 = v49;
    v49.i64[0] = v52.u32[2];
    v49.i64[1] = v52.u32[3];
    v59 = v49;
    v49.i64[0] = v54.u32[2];
    v49.i64[1] = v54.u32[3];
    v60 = v49;
    v49.i64[0] = v56.u32[2];
    v49.i64[1] = v56.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BB6B0;
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v49);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v60);
    v63 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v59);
    v64 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v55);
    v65 = vceqzq_s8(v45);
    v66 = vmovl_high_s8(v65);
    v67 = vmovl_s16(*(int16x4_t *)v66.i8);
    v49.i64[0] = v67.u32[0];
    v49.i64[1] = v67.u32[1];
    v68 = v49;
    v69 = vmovl_s8(*(int8x8_t *)v65.i8);
    v70 = vmovl_s16(*(int16x4_t *)v69.i8);
    v49.i64[0] = v70.u32[0];
    v49.i64[1] = v70.u32[1];
    v71 = v49;
    v72 = vmovl_high_s16(v66);
    v49.i64[0] = v72.u32[0];
    v49.i64[1] = v72.u32[1];
    v73 = v49;
    v74 = vmovl_high_s16(v69);
    v49.i64[0] = v74.u32[0];
    v49.i64[1] = v74.u32[1];
    v75 = v49;
    v49.i64[0] = v67.u32[2];
    v49.i64[1] = v67.u32[3];
    v76 = v49;
    v49.i64[0] = v70.u32[2];
    v49.i64[1] = v70.u32[3];
    v77 = v49;
    v49.i64[0] = v72.u32[2];
    v49.i64[1] = v72.u32[3];
    v78 = v49;
    v49.i64[0] = v74.u32[2];
    v49.i64[1] = v74.u32[3];
    v79 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v78);
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v68), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v50));
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v71), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v53));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v73), v64);
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v75), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v57));
    v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v76), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v58));
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v77), v63);
    v86 = vorrq_s8(v79, v62);
    v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v49), v61);
    v88 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    v89 = vmovl_s8(*(int8x8_t *)v88.i8);
    v90 = vmovl_high_s16(v89);
    v49.i64[0] = v90.i32[2];
    v49.i64[1] = v90.i32[3];
    v91 = v49;
    v92 = vmovl_high_s8(v88);
    v93 = vmovl_high_s16(v92);
    v49.i64[0] = v93.i32[2];
    v49.i64[1] = v93.i32[3];
    v94 = v49;
    v95 = vmovl_s16(*(int16x4_t *)v89.i8);
    v49.i64[0] = v95.i32[2];
    v49.i64[1] = v95.i32[3];
    v96 = v49;
    v97 = vmovl_s16(*(int16x4_t *)v92.i8);
    v49.i64[0] = v97.i32[2];
    v49.i64[1] = v97.i32[3];
    v98 = v49;
    v49.i64[0] = v90.i32[0];
    v49.i64[1] = v90.i32[1];
    v99 = v49;
    v49.i64[0] = v93.i32[0];
    v49.i64[1] = v93.i32[1];
    v100 = v49;
    v49.i64[0] = v95.i32[0];
    v49.i64[1] = v95.i32[1];
    v101 = v49;
    v49.i64[0] = v97.i32[0];
    v49.i64[1] = v97.i32[1];
    v102 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v49);
    v103 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    v104 = vmovl_high_s8(v103);
    v105 = vmovl_s16(*(int16x4_t *)v104.i8);
    v49.i64[0] = v105.i32[0];
    v49.i64[1] = v105.i32[1];
    v106 = v49;
    v107 = vmovl_s8(*(int8x8_t *)v103.i8);
    v108 = vmovl_s16(*(int16x4_t *)v107.i8);
    v49.i64[0] = v108.i32[0];
    v49.i64[1] = v108.i32[1];
    v109 = v49;
    v110 = vmovl_high_s16(v104);
    v49.i64[0] = v110.i32[0];
    v49.i64[1] = v110.i32[1];
    v111 = v49;
    v112 = vmovl_high_s16(v107);
    v49.i64[0] = v112.i32[0];
    v49.i64[1] = v112.i32[1];
    v113 = v49;
    v49.i64[0] = v105.i32[2];
    v49.i64[1] = v105.i32[3];
    v114 = v49;
    v49.i64[0] = v108.i32[2];
    v49.i64[1] = v108.i32[3];
    v115 = v49;
    v49.i64[0] = v110.i32[2];
    v49.i64[1] = v110.i32[3];
    v116 = v49;
    v49.i64[0] = v112.i32[2];
    v49.i64[1] = v112.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v109), vbicq_s8((int8x16_t)xmmword_19FFB3170, v101)), v81), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v106), v102), v80)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v113), vbicq_s8((int8x16_t)xmmword_19FFB3190, v99)), v83), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v111),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v100)),
                                                    v82))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v115), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v96)), v85), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v114), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v98)), v84)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v49), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v91)), v87), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v116),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v94)),
                                                    v86)))));
    LOBYTE(v31[13].__vftable) = 1;
    *v139 = v38;
    v139[1] = v31;
    do
      v117 = __ldxr(p_shared_owners);
    while (__stxr(v117 + 1, p_shared_owners));
    v118 = *v26;
    v119 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          v119 = (uint64_t **)v118;
          v120 = v118[4];
          if (v24 >= v120)
            break;
          v118 = *v119;
          v26 = v119;
          if (!*v119)
            goto LABEL_33;
        }
        if (v120 >= v24)
          break;
        v118 = v119[1];
        if (!v118)
        {
          v26 = v119 + 1;
          goto LABEL_33;
        }
      }
      v123 = (unint64_t *)&v31->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_33:
      v121 = (uint64_t *)operator new(0x38uLL);
      v121[4] = v24;
      v121[5] = (uint64_t)v38;
      v121[6] = (uint64_t)v31;
      *v121 = 0;
      v121[1] = 0;
      v121[2] = (uint64_t)v119;
      *v26 = v121;
      v122 = **(_QWORD **)(a2 + 96);
      if (v122)
      {
        *(_QWORD *)(a2 + 96) = v122;
        v121 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v121);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F95F69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayFillShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  int8x16_t v6;
  __int8 v7;
  int8x16_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unsigned __int8 v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  char v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t *v126;
  unint64_t v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  char v137;
  char v138;
  std::__shared_weak_count **v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[28];

  v5 = a3[2];
  v6.i16[3] = 0;
  v6.i8[8] = 0;
  v6.i16[5] = 0;
  v6.i32[3] = 0;
  v6.i16[0] = *(_WORD *)a3;
  *(__int32 *)((char *)v6.i32 + 2) = v5;
  v7 = a3[3];
  v6.i8[9] = v7;
  v8 = vceqzq_s8(v6);
  v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  v12 = v11;
  v13 = vmovl_high_s8(v8);
  v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  v15 = v11;
  v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  v17 = v11;
  v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v22), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v20), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v17), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v12), vbicq_s8((int8x16_t)xmmword_19FFB3080, v15)))));
  v24 = v23;
  v26 = (uint64_t **)(a2 + 104);
  v25 = *(_QWORD **)(a2 + 104);
  if (!v25)
    goto LABEL_12;
  v27 = (uint64_t **)(a2 + 104);
  do
  {
    v28 = v25[4];
    v29 = v28 >= v23;
    if (v28 >= v23)
      v30 = v25;
    else
      v30 = v25 + 1;
    if (v29)
      v27 = (uint64_t **)v25;
    v25 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    v125 = v27[6];
    a1[1] = (std::__shared_weak_count *)v125;
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 1);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
    }
  }
  else
  {
LABEL_12:
    v137 = a3[1];
    v138 = *a3;
    v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4070;
    v140 = *(_OWORD *)(a2 + 16);
    v141 = *(_OWORD *)(a2 + 32);
    v139 = a1;
    if ((v33 & 1) == 0
    {
      if ((v128 & 1) == 0
      {
        if ((v132 & 1) == 0
        {
          if ((v136 & 1) == 0
          {
            ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE32518 = 1;
        }
        ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1ECE31E28 = &ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineDeviceStructs(void)::ref;
        qword_1ECE31E30 = 0;
        if ((v133 & 1) == 0
        {
          ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1ECE31EC0 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE31EC8 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
          unk_1ECE31ED0 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
        }
        qword_1ECE31E38 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref;
        unk_1ECE31E40 = xmmword_19FFB48D0;
      }
      ggl::GradientPolylineOverlayRibbon::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref;
      if ((v129 & 1) == 0
      {
        ggl::GradientPolylineOverlayFillShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayFillShader";
        if ((v134 & 1) == 0
        {
          qword_1ECE43160 = (uint64_t)"GradientPolylineOverlayFillShader";
          unk_1ECE43168 = ggl::gradientPolylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE43170 = 1;
          unk_1ECE43178 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43180 = 3;
          unk_1ECE43188 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43190 = 0;
          unk_1ECE43198 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = 878884475;
          qword_1ECE431A0 = 0;
          unk_1ECE431A8 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE431B8 = 0;
          unk_1ECE431C0 = 0;
          qword_1ECE431B0 = 0;
        }
        qword_1ECE3BD70 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3BD78 = 878884475;
        if ((v135 & 1) == 0
        {
          ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = 0x1AE8C75D5;
          qword_1ECE434F8 = (uint64_t)"GradientPolylineOverlayFillShader";
          unk_1ECE43500 = 0;
          qword_1ECE43508 = 0;
          unk_1ECE43510 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43518 = 2;
          unk_1ECE43520 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43528 = 0;
          unk_1ECE43530 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43538 = 1;
          unk_1ECE43540 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43550 = 0;
          unk_1ECE43558 = 0;
          qword_1ECE43548 = 1;
        }
        qword_1ECE3BD80 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BD88 = -1366526507;
        qword_1ECE3BD90 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderConstants(void)::ref;
        unk_1ECE3BD98 = 4;
        qword_1ECE3BDA0 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderTextures(void)::ref;
        unk_1ECE3BDA8 = 1;
        qword_1ECE3BDB0 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderSamplers(void)::ref;
        unk_1ECE3BDB8 = 1;
      }
      qword_1ECE2FB20 = (uint64_t)&ggl::GradientPolylineOverlayFillShader::typedReflection(void)::ref;
      if ((v130 & 1) == 0
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58AE30 = 0;
        qword_1EE58AE38 = (uint64_t)"";
        dword_1EE58AE40 = 0;
        qword_1EE58AE48 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
        unk_1EE58AE50 = 5;
      }
      qword_1ECE2FB28 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2FB30 = 1;
      qword_1ECE2FB38 = 0;
      unk_1ECE2FB40 = 1;
      qword_1ECE2FB48 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2FB50 = 0;
      if ((v131 & 1) == 0
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58AE70 = 0;
        qword_1EE58AE78 = (uint64_t)"view";
        dword_1EE58AE80 = 3;
        qword_1EE58AE88 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE58AE90 = xmmword_19FFB35A0;
        qword_1EE58AEA0 = 1;
        unk_1EE58AEA8 = "transform";
        dword_1EE58AEB0 = 3;
        qword_1EE58AEB8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
        unk_1EE58AEC0 = xmmword_19FFB3660;
        qword_1EE58AED0 = 2;
        unk_1EE58AED8 = "style";
        dword_1EE58AEE0 = 3;
        qword_1EE58AEE8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE58AEF0 = xmmword_19FFB4DE0;
        qword_1EE58AF00 = 3;
        unk_1EE58AF08 = "gradientInfo";
        dword_1EE58AF10 = 3;
        qword_1EE58AF18 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantGradientInfoBinding(void)::reflection;
        unk_1EE58AF20 = 4;
      }
      qword_1ECE2FB58 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantStructBinding(void)::ref;
      unk_1ECE2FB60 = 4;
    }
    v34 = *(std::__shared_weak_count_vtbl **)a2;
    v35 = *(std::__shared_weak_count **)(a2 + 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = v31 + 1;
    *(_OWORD *)v142 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v142[12] = *(_OWORD *)(a2 + 60);
    v39 = *(_OWORD *)(a2 + 76);
    v40 = *(_BYTE *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::GradientPolylineOverlayRibbon::FillPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v34;
    v31[3].__shared_owners_ = (uint64_t)v35;
    if (v35)
    {
      v41 = (unint64_t *)&v35->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v140;
    *(_OWORD *)&v31[12].__shared_owners_ = v141;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v142[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v142;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v39;
    BYTE4(v31[5].__shared_owners_) = v40;
    if (v35)
    {
      v43 = (unint64_t *)&v35->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v138;
    BYTE1(v31[13].__shared_weak_owners_) = v137;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    v45 = *(int8x16_t *)&v31[14].__shared_owners_;
    v46 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    v47 = vmovl_high_s8(v46);
    v48 = vmovl_s16(*(int16x4_t *)v47.i8);
    v49.i64[0] = v48.u32[0];
    v49.i64[1] = v48.u32[1];
    v50 = v49;
    v51 = vmovl_s8(*(int8x8_t *)v46.i8);
    v52 = vmovl_s16(*(int16x4_t *)v51.i8);
    v49.i64[0] = v52.u32[0];
    v49.i64[1] = v52.u32[1];
    v53 = v49;
    v54 = vmovl_high_s16(v47);
    v49.i64[0] = v54.u32[0];
    v49.i64[1] = v54.u32[1];
    v55 = v49;
    v56 = vmovl_high_s16(v51);
    v49.i64[0] = v56.u32[0];
    v49.i64[1] = v56.u32[1];
    v57 = v49;
    v49.i64[0] = v48.u32[2];
    v49.i64[1] = v48.u32[3];
    v58 = v49;
    v49.i64[0] = v52.u32[2];
    v49.i64[1] = v52.u32[3];
    v59 = v49;
    v49.i64[0] = v54.u32[2];
    v49.i64[1] = v54.u32[3];
    v60 = v49;
    v49.i64[0] = v56.u32[2];
    v49.i64[1] = v56.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BB660;
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v49);
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v60);
    v63 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v59);
    v64 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v55);
    v65 = vceqzq_s8(v45);
    v66 = vmovl_high_s8(v65);
    v67 = vmovl_s16(*(int16x4_t *)v66.i8);
    v49.i64[0] = v67.u32[0];
    v49.i64[1] = v67.u32[1];
    v68 = v49;
    v69 = vmovl_s8(*(int8x8_t *)v65.i8);
    v70 = vmovl_s16(*(int16x4_t *)v69.i8);
    v49.i64[0] = v70.u32[0];
    v49.i64[1] = v70.u32[1];
    v71 = v49;
    v72 = vmovl_high_s16(v66);
    v49.i64[0] = v72.u32[0];
    v49.i64[1] = v72.u32[1];
    v73 = v49;
    v74 = vmovl_high_s16(v69);
    v49.i64[0] = v74.u32[0];
    v49.i64[1] = v74.u32[1];
    v75 = v49;
    v49.i64[0] = v67.u32[2];
    v49.i64[1] = v67.u32[3];
    v76 = v49;
    v49.i64[0] = v70.u32[2];
    v49.i64[1] = v70.u32[3];
    v77 = v49;
    v49.i64[0] = v72.u32[2];
    v49.i64[1] = v72.u32[3];
    v78 = v49;
    v49.i64[0] = v74.u32[2];
    v49.i64[1] = v74.u32[3];
    v79 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v78);
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v68), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v50));
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v71), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v53));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v73), v64);
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v75), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v57));
    v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v76), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v58));
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v77), v63);
    v86 = vorrq_s8(v79, v62);
    v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v49), v61);
    v88 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    v89 = vmovl_s8(*(int8x8_t *)v88.i8);
    v90 = vmovl_high_s16(v89);
    v49.i64[0] = v90.i32[2];
    v49.i64[1] = v90.i32[3];
    v91 = v49;
    v92 = vmovl_high_s8(v88);
    v93 = vmovl_high_s16(v92);
    v49.i64[0] = v93.i32[2];
    v49.i64[1] = v93.i32[3];
    v94 = v49;
    v95 = vmovl_s16(*(int16x4_t *)v89.i8);
    v49.i64[0] = v95.i32[2];
    v49.i64[1] = v95.i32[3];
    v96 = v49;
    v97 = vmovl_s16(*(int16x4_t *)v92.i8);
    v49.i64[0] = v97.i32[2];
    v49.i64[1] = v97.i32[3];
    v98 = v49;
    v49.i64[0] = v90.i32[0];
    v49.i64[1] = v90.i32[1];
    v99 = v49;
    v49.i64[0] = v93.i32[0];
    v49.i64[1] = v93.i32[1];
    v100 = v49;
    v49.i64[0] = v95.i32[0];
    v49.i64[1] = v95.i32[1];
    v101 = v49;
    v49.i64[0] = v97.i32[0];
    v49.i64[1] = v97.i32[1];
    v102 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v49);
    v103 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    v104 = vmovl_high_s8(v103);
    v105 = vmovl_s16(*(int16x4_t *)v104.i8);
    v49.i64[0] = v105.i32[0];
    v49.i64[1] = v105.i32[1];
    v106 = v49;
    v107 = vmovl_s8(*(int8x8_t *)v103.i8);
    v108 = vmovl_s16(*(int16x4_t *)v107.i8);
    v49.i64[0] = v108.i32[0];
    v49.i64[1] = v108.i32[1];
    v109 = v49;
    v110 = vmovl_high_s16(v104);
    v49.i64[0] = v110.i32[0];
    v49.i64[1] = v110.i32[1];
    v111 = v49;
    v112 = vmovl_high_s16(v107);
    v49.i64[0] = v112.i32[0];
    v49.i64[1] = v112.i32[1];
    v113 = v49;
    v49.i64[0] = v105.i32[2];
    v49.i64[1] = v105.i32[3];
    v114 = v49;
    v49.i64[0] = v108.i32[2];
    v49.i64[1] = v108.i32[3];
    v115 = v49;
    v49.i64[0] = v110.i32[2];
    v49.i64[1] = v110.i32[3];
    v116 = v49;
    v49.i64[0] = v112.i32[2];
    v49.i64[1] = v112.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v109), vbicq_s8((int8x16_t)xmmword_19FFB3170, v101)), v81), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v106), v102), v80)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v113), vbicq_s8((int8x16_t)xmmword_19FFB3190, v99)), v83), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v111),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v100)),
                                                    v82))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v115), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v96)), v85), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v114), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v98)), v84)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v49), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v91)), v87), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v116),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v94)),
                                                    v86)))));
    LOBYTE(v31[13].__vftable) = 1;
    *v139 = v38;
    v139[1] = v31;
    do
      v117 = __ldxr(p_shared_owners);
    while (__stxr(v117 + 1, p_shared_owners));
    v118 = *v26;
    v119 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          v119 = (uint64_t **)v118;
          v120 = v118[4];
          if (v24 >= v120)
            break;
          v118 = *v119;
          v26 = v119;
          if (!*v119)
            goto LABEL_33;
        }
        if (v120 >= v24)
          break;
        v118 = v119[1];
        if (!v118)
        {
          v26 = v119 + 1;
          goto LABEL_33;
        }
      }
      v123 = (unint64_t *)&v31->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_33:
      v121 = (uint64_t *)operator new(0x38uLL);
      v121[4] = v24;
      v121[5] = (uint64_t)v38;
      v121[6] = (uint64_t)v31;
      *v121 = 0;
      v121[1] = 0;
      v121[2] = (uint64_t)v119;
      *v26 = v121;
      v122 = **(_QWORD **)(a2 + 96);
      if (v122)
      {
        *(_QWORD *)(a2 + 96) = v122;
        v121 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v121);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F960290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E40A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E40A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E40E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E40E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::PolylineOverlayStyleConstants::~PolylineOverlayStyleConstants(md::PolylineOverlayStyleConstants *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

uint64_t ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

md::PolylineOverlayStyle *md::PolylineOverlayStyle::PolylineOverlayStyle(md::PolylineOverlayStyle *this)
{
  void *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 114) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *((_QWORD *)this + 19) = 0x3F80000000000000;
  *(_QWORD *)((char *)this + 164) = 0;
  *(_QWORD *)((char *)this + 180) = 0;
  *(_QWORD *)((char *)this + 172) = 0;
  *((_DWORD *)this + 47) = 0;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(unsigned __int8 *)(objc_msgSend(v2, "gglDevice") + 20);

  *((_BYTE *)this + 193) = v3;
  *((_DWORD *)this + 49) = 0;
  *(_QWORD *)((char *)this + 140) = 0;
  *(_QWORD *)((char *)this + 132) = 0;
  *((_DWORD *)this + 37) = 0;
  *((_QWORD *)this + 22) = *((_QWORD *)this + 21);
  *((_BYTE *)this + 192) = 0;
  if (v3)
  {
    v4 = operator new(0xE8uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E42E1F68;
    v5 = ggl::BufferData::BufferData((uint64_t)(v4 + 3), qword_1EE54ACC0, 2, 1, 6, 1);
    v4[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
    v4[3] = &off_1E42B95D0;
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = v4;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = operator new(0xE8uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E42E1F68;
    v10 = ggl::BufferData::BufferData((uint64_t)(v9 + 3), qword_1EE54ACC0, 2, 1, 6, 1);
    v9[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
    v9[3] = &off_1E42B95D0;
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 7) = v10;
    *((_QWORD *)this + 8) = v9;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = operator new(0xE8uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E42E1F68;
  v15 = ggl::BufferData::BufferData((uint64_t)(v14 + 3), qword_1EE54ACC0, 2, 1, 6, 1);
  v14[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  v14[3] = &off_1E42B95D0;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = v15;
  *((_QWORD *)this + 4) = v14;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = operator new(0xE8uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &off_1E42E1F68;
  v20 = ggl::BufferData::BufferData((uint64_t)(v19 + 3), qword_1EE54ACC0, 2, 1, 6, 1);
  v19[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  v19[3] = &off_1E42B95D0;
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = v20;
  *((_QWORD *)this + 6) = v19;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = operator new(0xE8uLL);
  v24[1] = 0;
  v24[2] = 0;
  *v24 = &off_1E42E1F68;
  v25 = ggl::BufferData::BufferData((uint64_t)(v24 + 3), qword_1EE54ACC0, 2, 1, 6, 1);
  v24[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  v24[3] = &off_1E42B95D0;
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 9) = v25;
  *((_QWORD *)this + 10) = v24;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = operator new(0xE8uLL);
  v29[1] = 0;
  v29[2] = 0;
  *v29 = &off_1E42E1F68;
  v30 = ggl::BufferData::BufferData((uint64_t)(v29 + 3), qword_1EE54ACC0, 2, 1, 6, 1);
  v29[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  v29[3] = &off_1E42B95D0;
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = v30;
  *((_QWORD *)this + 12) = v29;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = operator new(0xE8uLL);
  v34[1] = 0;
  v34[2] = 0;
  *v34 = &off_1E42E1F68;
  v35 = ggl::BufferData::BufferData((uint64_t)(v34 + 3), qword_1EE54ACC0, 2, 1, 6, 1);
  v34[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  v34[3] = &off_1E42B95D0;
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = v35;
  *((_QWORD *)this + 14) = v34;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return this;
}

void sub_19F960AB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  md::PolylineOverlayStyleConstants *v2;
  void *v4;

  v4 = *(void **)(v1 + 168);
  if (v4)
  {
    *(_QWORD *)(v1 + 176) = v4;
    operator delete(v4);
  }
  md::PolylineOverlayStyleConstants::~PolylineOverlayStyleConstants(v2);
  _Unwind_Resume(a1);
}

_QWORD *md::PolylineOverlaySharedResources::resetPools(_QWORD *this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _OWORD *v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _OWORD *v120;
  __int128 *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _OWORD *v145;
  __int128 *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v1 = this;
  v2 = (uint64_t *)this[16];
  v3 = (uint64_t *)v2[4];
  v4 = (uint64_t *)v2[5];
  if (v3 == v4)
    goto LABEL_33;
  v5 = (_QWORD *)v2[1];
  do
  {
    v6 = *v3;
    v7 = v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5)
        *v5 = v6;
      ++v5;
      goto LABEL_4;
    }
    v8 = ((uint64_t)v5 - *v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
LABEL_194:
      abort();
    v9 = v7 - *v2;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = v11;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 16))(v2[3], 8 * v11, 8);
      v13 = &this[v8];
      v11 = (uint64_t)&this[v12];
      if (this)
        *v13 = v6;
    }
    else
    {
      v13 = (_QWORD *)(8 * v8);
    }
    v15 = *v2;
    v14 = v2[1];
    v16 = v14 - *v2;
    if (v14 == *v2)
    {
      v18 = v13;
      goto LABEL_29;
    }
    v17 = v16 - 8;
    if ((unint64_t)(v16 - 8) < 0x38)
    {
      v18 = v13;
    }
    else
    {
      v18 = v13;
      if ((unint64_t)(v14 - (_QWORD)v13) >= 0x20)
      {
        v19 = (v17 >> 3) + 1;
        v20 = v13 - 2;
        v21 = (__int128 *)(v14 - 16);
        v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *v21;
          *(v20 - 1) = *(v21 - 1);
          *v20 = v23;
          v20 -= 2;
          v21 -= 2;
          v22 -= 4;
        }
        while (v22);
        v18 = &v13[-(v19 & 0x3FFFFFFFFFFFFFFCLL)];
        v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v24 = *(_QWORD *)(v14 - 8);
      v14 -= 8;
      *--v18 = v24;
    }
    while (v14 != v15);
LABEL_28:
    v14 = *v2;
LABEL_29:
    v5 = v13 + 1;
    *v2 = (uint64_t)v18;
    v2[1] = (uint64_t)(v13 + 1);
    v25 = v2[2];
    v2[2] = v11;
    if (v14)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[3] + 40))(v2[3], v14, v25 - v14);
LABEL_4:
    v2[1] = (uint64_t)v5;
    ++v3;
  }
  while (v3 != v4);
  v26 = v2[4];
  if (v26 != v2[5])
    v2[5] = v26;
LABEL_33:
  v27 = (uint64_t *)v1[17];
  v28 = (uint64_t *)v27[4];
  v29 = (uint64_t *)v27[5];
  if (v28 == v29)
    goto LABEL_65;
  v30 = (_QWORD *)v27[1];
  while (2)
  {
    v31 = *v28;
    v32 = v27[2];
    if ((unint64_t)v30 < v32)
    {
      if (v30)
        *v30 = v31;
      ++v30;
      goto LABEL_36;
    }
    v33 = ((uint64_t)v30 - *v27) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      goto LABEL_194;
    v34 = v32 - *v27;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
    {
      v37 = v36;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[3] + 16))(v27[3], 8 * v36, 8);
      v38 = &this[v33];
      v36 = (uint64_t)&this[v37];
      if (this)
        *v38 = v31;
    }
    else
    {
      v38 = (_QWORD *)(8 * v33);
    }
    v40 = *v27;
    v39 = v27[1];
    v41 = v39 - *v27;
    if (v39 == *v27)
    {
      v43 = v38;
      goto LABEL_61;
    }
    v42 = v41 - 8;
    if ((unint64_t)(v41 - 8) < 0x38)
    {
      v43 = v38;
      do
      {
LABEL_59:
        v49 = *(_QWORD *)(v39 - 8);
        v39 -= 8;
        *--v43 = v49;
      }
      while (v39 != v40);
      goto LABEL_60;
    }
    v43 = v38;
    if ((unint64_t)(v39 - (_QWORD)v38) < 0x20)
      goto LABEL_59;
    v44 = (v42 >> 3) + 1;
    v45 = v38 - 2;
    v46 = (__int128 *)(v39 - 16);
    v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *v46;
      *(v45 - 1) = *(v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 2;
      v47 -= 4;
    }
    while (v47);
    v43 = &v38[-(v44 & 0x3FFFFFFFFFFFFFFCLL)];
    v39 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_59;
LABEL_60:
    v39 = *v27;
LABEL_61:
    v30 = v38 + 1;
    *v27 = (uint64_t)v43;
    v27[1] = (uint64_t)(v38 + 1);
    v50 = v27[2];
    v27[2] = v36;
    if (v39)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[3] + 40))(v27[3], v39, v50 - v39);
LABEL_36:
    v27[1] = (uint64_t)v30;
    if (++v28 != v29)
      continue;
    break;
  }
  v51 = v27[4];
  if (v51 != v27[5])
    v27[5] = v51;
LABEL_65:
  v52 = (uint64_t *)v1[18];
  v53 = (uint64_t *)v52[4];
  v54 = (uint64_t *)v52[5];
  if (v53 == v54)
    goto LABEL_97;
  v55 = (_QWORD *)v52[1];
  while (2)
  {
    v56 = *v53;
    v57 = v52[2];
    if ((unint64_t)v55 < v57)
    {
      if (v55)
        *v55 = v56;
      ++v55;
      goto LABEL_68;
    }
    v58 = ((uint64_t)v55 - *v52) >> 3;
    if ((unint64_t)(v58 + 1) >> 61)
      goto LABEL_194;
    v59 = v57 - *v52;
    v60 = v59 >> 2;
    if (v59 >> 2 <= (unint64_t)(v58 + 1))
      v60 = v58 + 1;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
      v61 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v61 = v60;
    if (v61)
    {
      v62 = v61;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52[3] + 16))(v52[3], 8 * v61, 8);
      v63 = &this[v58];
      v61 = (uint64_t)&this[v62];
      if (this)
        *v63 = v56;
    }
    else
    {
      v63 = (_QWORD *)(8 * v58);
    }
    v65 = *v52;
    v64 = v52[1];
    v66 = v64 - *v52;
    if (v64 == *v52)
    {
      v68 = v63;
      goto LABEL_93;
    }
    v67 = v66 - 8;
    if ((unint64_t)(v66 - 8) < 0x38)
    {
      v68 = v63;
      do
      {
LABEL_91:
        v74 = *(_QWORD *)(v64 - 8);
        v64 -= 8;
        *--v68 = v74;
      }
      while (v64 != v65);
      goto LABEL_92;
    }
    v68 = v63;
    if ((unint64_t)(v64 - (_QWORD)v63) < 0x20)
      goto LABEL_91;
    v69 = (v67 >> 3) + 1;
    v70 = v63 - 2;
    v71 = (__int128 *)(v64 - 16);
    v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v73 = *v71;
      *(v70 - 1) = *(v71 - 1);
      *v70 = v73;
      v70 -= 2;
      v71 -= 2;
      v72 -= 4;
    }
    while (v72);
    v68 = &v63[-(v69 & 0x3FFFFFFFFFFFFFFCLL)];
    v64 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_91;
LABEL_92:
    v64 = *v52;
LABEL_93:
    v55 = v63 + 1;
    *v52 = (uint64_t)v68;
    v52[1] = (uint64_t)(v63 + 1);
    v75 = v52[2];
    v52[2] = v61;
    if (v64)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52[3] + 40))(v52[3], v64, v75 - v64);
LABEL_68:
    v52[1] = (uint64_t)v55;
    if (++v53 != v54)
      continue;
    break;
  }
  v76 = v52[4];
  if (v76 != v52[5])
    v52[5] = v76;
LABEL_97:
  v77 = (uint64_t *)v1[19];
  v78 = (uint64_t *)v77[4];
  v79 = (uint64_t *)v77[5];
  if (v78 == v79)
    goto LABEL_129;
  v80 = (_QWORD *)v77[1];
  while (2)
  {
    v81 = *v78;
    v82 = v77[2];
    if ((unint64_t)v80 < v82)
    {
      if (v80)
        *v80 = v81;
      ++v80;
      goto LABEL_100;
    }
    v83 = ((uint64_t)v80 - *v77) >> 3;
    if ((unint64_t)(v83 + 1) >> 61)
      goto LABEL_194;
    v84 = v82 - *v77;
    v85 = v84 >> 2;
    if (v84 >> 2 <= (unint64_t)(v83 + 1))
      v85 = v83 + 1;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
      v86 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v86 = v85;
    if (v86)
    {
      v87 = v86;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77[3] + 16))(v77[3], 8 * v86, 8);
      v88 = &this[v83];
      v86 = (uint64_t)&this[v87];
      if (this)
        *v88 = v81;
    }
    else
    {
      v88 = (_QWORD *)(8 * v83);
    }
    v90 = *v77;
    v89 = v77[1];
    v91 = v89 - *v77;
    if (v89 == *v77)
    {
      v93 = v88;
      goto LABEL_125;
    }
    v92 = v91 - 8;
    if ((unint64_t)(v91 - 8) < 0x38)
    {
      v93 = v88;
      do
      {
LABEL_123:
        v99 = *(_QWORD *)(v89 - 8);
        v89 -= 8;
        *--v93 = v99;
      }
      while (v89 != v90);
      goto LABEL_124;
    }
    v93 = v88;
    if ((unint64_t)(v89 - (_QWORD)v88) < 0x20)
      goto LABEL_123;
    v94 = (v92 >> 3) + 1;
    v95 = v88 - 2;
    v96 = (__int128 *)(v89 - 16);
    v97 = v94 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v98 = *v96;
      *(v95 - 1) = *(v96 - 1);
      *v95 = v98;
      v95 -= 2;
      v96 -= 2;
      v97 -= 4;
    }
    while (v97);
    v93 = &v88[-(v94 & 0x3FFFFFFFFFFFFFFCLL)];
    v89 -= 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
    if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_123;
LABEL_124:
    v89 = *v77;
LABEL_125:
    v80 = v88 + 1;
    *v77 = (uint64_t)v93;
    v77[1] = (uint64_t)(v88 + 1);
    v100 = v77[2];
    v77[2] = v86;
    if (v89)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77[3] + 40))(v77[3], v89, v100 - v89);
LABEL_100:
    v77[1] = (uint64_t)v80;
    if (++v78 != v79)
      continue;
    break;
  }
  v101 = v77[4];
  if (v101 != v77[5])
    v77[5] = v101;
LABEL_129:
  v102 = (uint64_t *)v1[20];
  v103 = (uint64_t *)v102[4];
  v104 = (uint64_t *)v102[5];
  if (v103 == v104)
    goto LABEL_161;
  v105 = (_QWORD *)v102[1];
  while (2)
  {
    v106 = *v103;
    v107 = v102[2];
    if ((unint64_t)v105 < v107)
    {
      if (v105)
        *v105 = v106;
      ++v105;
      goto LABEL_132;
    }
    v108 = ((uint64_t)v105 - *v102) >> 3;
    if ((unint64_t)(v108 + 1) >> 61)
      goto LABEL_194;
    v109 = v107 - *v102;
    v110 = v109 >> 2;
    if (v109 >> 2 <= (unint64_t)(v108 + 1))
      v110 = v108 + 1;
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
      v111 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v111 = v110;
    if (v111)
    {
      v112 = v111;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102[3] + 16))(v102[3], 8 * v111, 8);
      v113 = &this[v108];
      v111 = (uint64_t)&this[v112];
      if (this)
        *v113 = v106;
    }
    else
    {
      v113 = (_QWORD *)(8 * v108);
    }
    v115 = *v102;
    v114 = v102[1];
    v116 = v114 - *v102;
    if (v114 == *v102)
    {
      v118 = v113;
      goto LABEL_157;
    }
    v117 = v116 - 8;
    if ((unint64_t)(v116 - 8) < 0x38)
    {
      v118 = v113;
      do
      {
LABEL_155:
        v124 = *(_QWORD *)(v114 - 8);
        v114 -= 8;
        *--v118 = v124;
      }
      while (v114 != v115);
      goto LABEL_156;
    }
    v118 = v113;
    if ((unint64_t)(v114 - (_QWORD)v113) < 0x20)
      goto LABEL_155;
    v119 = (v117 >> 3) + 1;
    v120 = v113 - 2;
    v121 = (__int128 *)(v114 - 16);
    v122 = v119 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v123 = *v121;
      *(v120 - 1) = *(v121 - 1);
      *v120 = v123;
      v120 -= 2;
      v121 -= 2;
      v122 -= 4;
    }
    while (v122);
    v118 = &v113[-(v119 & 0x3FFFFFFFFFFFFFFCLL)];
    v114 -= 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
    if (v119 != (v119 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_155;
LABEL_156:
    v114 = *v102;
LABEL_157:
    v105 = v113 + 1;
    *v102 = (uint64_t)v118;
    v102[1] = (uint64_t)(v113 + 1);
    v125 = v102[2];
    v102[2] = v111;
    if (v114)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102[3] + 40))(v102[3], v114, v125 - v114);
LABEL_132:
    v102[1] = (uint64_t)v105;
    if (++v103 != v104)
      continue;
    break;
  }
  v126 = v102[4];
  if (v126 != v102[5])
    v102[5] = v126;
LABEL_161:
  v127 = (uint64_t *)v1[21];
  v128 = (uint64_t *)v127[4];
  v129 = (uint64_t *)v127[5];
  if (v128 == v129)
    return this;
  v130 = (_QWORD *)v127[1];
  while (2)
  {
    v131 = *v128;
    v132 = v127[2];
    if ((unint64_t)v130 < v132)
    {
      if (v130)
        *v130 = v131;
      ++v130;
      goto LABEL_164;
    }
    v133 = ((uint64_t)v130 - *v127) >> 3;
    if ((unint64_t)(v133 + 1) >> 61)
      goto LABEL_194;
    v134 = v132 - *v127;
    v135 = v134 >> 2;
    if (v134 >> 2 <= (unint64_t)(v133 + 1))
      v135 = v133 + 1;
    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
      v136 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v136 = v135;
    if (v136)
    {
      v137 = v136;
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v127[3] + 16))(v127[3], 8 * v136, 8);
      v138 = &this[v133];
      v136 = (uint64_t)&this[v137];
      if (this)
        *v138 = v131;
    }
    else
    {
      v138 = (_QWORD *)(8 * v133);
    }
    v140 = *v127;
    v139 = v127[1];
    v141 = v139 - *v127;
    if (v139 == *v127)
    {
      v143 = v138;
      goto LABEL_189;
    }
    v142 = v141 - 8;
    if ((unint64_t)(v141 - 8) < 0x38)
    {
      v143 = v138;
      do
      {
LABEL_187:
        v149 = *(_QWORD *)(v139 - 8);
        v139 -= 8;
        *--v143 = v149;
      }
      while (v139 != v140);
      goto LABEL_188;
    }
    v143 = v138;
    if ((unint64_t)(v139 - (_QWORD)v138) < 0x20)
      goto LABEL_187;
    v144 = (v142 >> 3) + 1;
    v145 = v138 - 2;
    v146 = (__int128 *)(v139 - 16);
    v147 = v144 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v148 = *v146;
      *(v145 - 1) = *(v146 - 1);
      *v145 = v148;
      v145 -= 2;
      v146 -= 2;
      v147 -= 4;
    }
    while (v147);
    v143 = &v138[-(v144 & 0x3FFFFFFFFFFFFFFCLL)];
    v139 -= 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
    if (v144 != (v144 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_187;
LABEL_188:
    v139 = *v127;
LABEL_189:
    v130 = v138 + 1;
    *v127 = (uint64_t)v143;
    v127[1] = (uint64_t)(v138 + 1);
    v150 = v127[2];
    v127[2] = v136;
    if (v139)
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v127[3] + 40))(v127[3], v139, v150 - v139);
LABEL_164:
    v127[1] = (uint64_t)v130;
    if (++v128 != v129)
      continue;
    break;
  }
  v151 = v127[4];
  if (v151 != v127[5])
    v127[5] = v151;
  return this;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D72C8;
  return result;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5>,ggl::GradientPolylineOverlayRibbon::FillPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5>,ggl::GradientPolylineOverlayRibbon::FillPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3A78;
  return result;
}

uint64_t std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5>,ggl::GradientPolylineOverlayRibbon::FillPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE32518 = 1;
    }
    ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE31E28 = &ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineDeviceStructs(void)::ref;
    qword_1ECE31E30 = 0;
    if ((v4 & 1) == 0
    {
      ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE31EC0 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE31EC8 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
      unk_1ECE31ED0 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
    }
    qword_1ECE31E38 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref;
    unk_1ECE31E40 = xmmword_19FFB48D0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BB630;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon22AlphaFillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon22AlphaFillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7358;
  return result;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4>,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4>,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3A30;
  return result;
}

uint64_t std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4>,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE32518 = 1;
    }
    ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE31E88 = &ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineDeviceStructs(void)::ref;
    qword_1ECE31E90 = 0;
    if ((v4 & 1) == 0
    {
      ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE31F10 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE31F18 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
      unk_1ECE31F20 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
    }
    qword_1ECE31E98 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref;
    unk_1ECE31EA0 = xmmword_19FFB48D0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BB6D0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon18AlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon18AlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7310;
  return result;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3>,ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3>,ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D39E8;
  return result;
}

uint64_t std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3>,ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE32518 = 1;
    }
    ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE31E58 = &ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineDeviceStructs(void)::ref;
    qword_1ECE31E60 = 0;
    if ((v4 & 1) == 0
    {
      ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(_QWORD *)algn_1ECE31EE8 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE31EF0 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
      unk_1ECE31EF8 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
    }
    qword_1ECE31E68 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1ECE31E70 = xmmword_19FFB48D0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BB680;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6ED8;
  return result;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2>,ggl::PolylineOverlayRibbon::FillPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2>,ggl::PolylineOverlayRibbon::FillPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D39A0;
  return result;
}

uint64_t std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2>,ggl::PolylineOverlayRibbon::FillPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE324F8 = 1;
    }
    ggl::PolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
    unk_1ECE319D0 = &ggl::PolylineOverlayRibbon::pipelineDataFillPipelineDeviceStructs(void)::ref;
    qword_1ECE319D8 = 0;
    if ((v4 & 1) == 0
    {
      ggl::PolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(_QWORD *)algn_1ECE31A68 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE31A70 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
    }
    qword_1ECE319E0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref;
    unk_1ECE319E8 = xmmword_19FFB35E0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::PolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BAE60;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon22AlphaFillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon22AlphaFillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6F68;
  return result;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1>,ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1>,ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3958;
  return result;
}

uint64_t std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1>,ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE324F8 = 1;
    }
    ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
    unk_1ECE31A30 = &ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineDeviceStructs(void)::ref;
    qword_1ECE31A38 = 0;
    if ((v4 & 1) == 0
    {
      ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(_QWORD *)algn_1ECE31AA8 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE31AB0 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
    }
    qword_1ECE31A40 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1ECE31A48 = xmmword_19FFB35E0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BAF00;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon18AlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon18AlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6F20;
  return result;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0>,ggl::PolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0>,ggl::PolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3910;
  return result;
}

uint64_t std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0>,ggl::PolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::operator()()
{
  _QWORD *v0;
  unsigned __int8 v1;
  uint64_t result;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v0 = (_QWORD *)operator new();
  if ((v1 & 1) == 0
  {
    if ((v3 & 1) == 0
    {
      if ((v5 & 1) == 0
      {
        ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE324F8 = 1;
    }
    ggl::PolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
    unk_1ECE31A00 = &ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineDeviceStructs(void)::ref;
    qword_1ECE31A08 = 0;
    if ((v4 & 1) == 0
    {
      ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(_QWORD *)algn_1ECE31A88 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE31A90 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
    }
    qword_1ECE31A10 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref;
    unk_1ECE31A18 = xmmword_19FFB35E0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)v0, (uint64_t)&ggl::PolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref);
  *v0 = &off_1E42BAEB0;
  return result;
}

uint64_t *std::unique_ptr<md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayFillShader>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v2 + 104));
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40AD78EA61);
  }
  return a1;
}

void sub_19F962250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::RasterResourceDataRequester::~RasterResourceDataRequester(md::RasterResourceDataRequester *this)
{
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
}

{
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
  JUMPOUT(0x1A1AF4E00);
}

void md::RasterResourceDataRequester::resolveTile(md::RasterResourceDataRequester *this@<X0>, const QuadTile *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int level;
  int32x2_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *((_QWORD *)this + 6);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 776));
  level = a2->_level;
  *(_BYTE *)a3 = a2->_type;
  *(_BYTE *)(a3 + 1) = level;
  v7 = *(int32x2_t *)&a2->_yIdx;
  *(int32x2_t *)(a3 + 4) = v7;
  if (level)
  {
    do
    {
      v8 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)(v5 + 792), (unsigned __int8 *)a3);
      if (!v8)
        break;
      v9 = *(uint64_t **)(v5 + 840);
      v10 = (uint64_t *)v8[5];
      if (v9 != v10)
      {
        v11 = (uint64_t *)v10[1];
        if (v11 != v9)
        {
          v12 = *v10;
          *(_QWORD *)(v12 + 8) = v11;
          *(_QWORD *)v10[1] = v12;
          v13 = *v9;
          *(_QWORD *)(v13 + 8) = v10;
          *v10 = v13;
          *v9 = (uint64_t)v10;
          v10[1] = (uint64_t)v9;
          v9 = *(uint64_t **)(v5 + 840);
        }
      }
      if (v9 == (uint64_t *)(v5 + 832))
        break;
      *(_BYTE *)(a3 + 1) = --level;
      v7 = vshr_n_s32(v7, 1uLL);
      *(int32x2_t *)(a3 + 4) = v7;
    }
    while ((_BYTE)level);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 776));
}

void std::__shared_ptr_emplace<md::LabelManagerCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelManagerCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::LabelManager::activeTileGroupDidChange(void)::$_0,std::allocator<md::LabelManager::activeTileGroupDidChange(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::activeTileGroupDidChange(void)::$_0,std::allocator<md::LabelManager::activeTileGroupDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA130;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::activeTileGroupDidChange(void)::$_0,std::allocator<md::LabelManager::activeTileGroupDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA130;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelManager::activeTileGroupDidChange(void)::$_0,std::allocator<md::LabelManager::activeTileGroupDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  md::FontGlyphCache *v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 304);
  *(_BYTE *)(v2 + 120) = 1;
  md::FontAtlas::clearCells((md::FontAtlas *)v2);
  *(_DWORD *)(v2 + 116) = 0;
  v3 = operator new();
  md::FontGlyphCache::FontGlyphCache(v3, 1);
  v4 = *(md::FontGlyphCache **)(v2 + 128);
  *(_QWORD *)(v2 + 128) = v3;
  if (v4)
  {
    md::FontGlyphCache::~FontGlyphCache(v4);
    MEMORY[0x1A1AF4E00]();
  }
  md::LabelManager::clearScene(v1, 2);
}

void md::LabelManager::didReceiveMemoryWarning(md::FontTrackingCache **this, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E42C9FC8;
  v6[1] = this;
  v7 = v6;
  md::LabelManager::queueCommand((md::LabelManager *)this, 1, 1, v6);
  v4 = v7;
  if (v7 == v6)
  {
    v5 = 4;
    v4 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  if (a2 && md::LabelManager::tryWaitForBkgdUpdateComplete((md::LabelManager *)this, 0x1F4u))
  {
    if (*((_BYTE *)this + 3384))
    {
      *((_BYTE *)this + 3384) = 0;
      md::FontTrackingCache::updateForDisplay(this[39]);
      (*(void (**)(md::FontTrackingCache *))(*(_QWORD *)this[30] + 48))(this[30]);
    }
    md::LabelManager::flushCommands((md::LabelManager *)this);
  }
}

void sub_19F962F78(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F962F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelManager::didReceiveMemoryWarning(BOOL)::$_0,std::allocator<md::LabelManager::didReceiveMemoryWarning(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::didReceiveMemoryWarning(BOOL)::$_0,std::allocator<md::LabelManager::didReceiveMemoryWarning(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C9FC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::didReceiveMemoryWarning(BOOL)::$_0,std::allocator<md::LabelManager::didReceiveMemoryWarning(BOOL)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C9FC8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelManager::didReceiveMemoryWarning(BOOL)::$_0,std::allocator<md::LabelManager::didReceiveMemoryWarning(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  md::LabelManager::clearScene(*(_QWORD *)(a1 + 8), 1);
}

_QWORD *md::LabelManager::localeChanged(md::LabelManager *this)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = &off_1E42C9560;
  v3[1] = this;
  v4 = v3;
  md::LabelManager::queueCommand(this, 2, 1, v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_19F9630D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelManager::localeChanged(void)::$_0,std::allocator<md::LabelManager::localeChanged(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::localeChanged(void)::$_0,std::allocator<md::LabelManager::localeChanged(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C9560;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::localeChanged(void)::$_0,std::allocator<md::LabelManager::localeChanged(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C9560;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelManager::localeChanged(void)::$_0,std::allocator<md::LabelManager::localeChanged(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  md::LabelManager::clearScene(*(_QWORD *)(a1 + 8), 2);
}

void std::__function::__func<md::LabelManager::focusedVenueDidChange(BOOL)::$_0,std::allocator<md::LabelManager::focusedVenueDidChange(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::focusedVenueDidChange(BOOL)::$_0,std::allocator<md::LabelManager::focusedVenueDidChange(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9E18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::focusedVenueDidChange(BOOL)::$_0,std::allocator<md::LabelManager::focusedVenueDidChange(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9E18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::focusedVenueDidChange(BOOL)::$_0,std::allocator<md::LabelManager::focusedVenueDidChange(BOOL)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 8);
  *(_BYTE *)(v1 + 3348) = *(_BYTE *)(result + 16);
  *(_BYTE *)(v1 + 3052) = 1;
  v2 = *(uint64_t ***)(v1 + 168);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    do
    {
      v5 = *v3++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    }
    while (v3 != v4);
  }
  return result;
}

void std::__function::__func<md::LabelManager::venueBuildingFloorDidChange(void)::$_0,std::allocator<md::LabelManager::venueBuildingFloorDidChange(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::venueBuildingFloorDidChange(void)::$_0,std::allocator<md::LabelManager::venueBuildingFloorDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA3B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::venueBuildingFloorDidChange(void)::$_0,std::allocator<md::LabelManager::venueBuildingFloorDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA3B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::venueBuildingFloorDidChange(void)::$_0,std::allocator<md::LabelManager::venueBuildingFloorDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 8);
  *(_BYTE *)(v1 + 3041) = 1;
  *(_BYTE *)(v1 + 3052) = 1;
  v2 = *(uint64_t ***)(v1 + 168);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    do
    {
      v5 = *v3++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    }
    while (v3 != v4);
  }
  return result;
}

void std::__function::__func<md::LabelManager::venueFloorSwitcherActiveDidChange(BOOL)::$_0,std::allocator<md::LabelManager::venueFloorSwitcherActiveDidChange(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::venueFloorSwitcherActiveDidChange(BOOL)::$_0,std::allocator<md::LabelManager::venueFloorSwitcherActiveDidChange(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA5F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::venueFloorSwitcherActiveDidChange(BOOL)::$_0,std::allocator<md::LabelManager::venueFloorSwitcherActiveDidChange(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA5F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::venueFloorSwitcherActiveDidChange(BOOL)::$_0,std::allocator<md::LabelManager::venueFloorSwitcherActiveDidChange(BOOL)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned __int8 *)(v1 + 3349) != v2)
  {
    *(_BYTE *)(v1 + 3349) = v2;
    *(_WORD *)(v1 + 3373) = 257;
    v3 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 136);
      if (v4)
      {
        result = *(_QWORD *)(v4 + 56);
        if (result)
        {
          v6 = v1;
          v5 = 9;
          return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v6, &v5);
        }
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::setContentScale(float)::$_0,std::allocator<md::LabelManager::setContentScale(float)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setContentScale(float)::$_0,std::allocator<md::LabelManager::setContentScale(float)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C96C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setContentScale(float)::$_0,std::allocator<md::LabelManager::setContentScale(float)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C96C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setContentScale(float)::$_0,std::allocator<md::LabelManager::setContentScale(float)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t j;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(float *)(a1 + 16);
  if (*(float *)(v1 + 176) == v2)
    goto LABEL_27;
  *(float *)(v1 + 176) = v2;
  *(_BYTE *)(v1 + 3049) = 1;
  *(float *)(v1 + 3308) = v2 * 4.0;
  v4 = *(_QWORD *)(v1 + 312);
  if (*(float *)(v4 + 120) != v2)
  {
    *(float *)(v4 + 120) = v2;
    if (*(_QWORD *)(v4 + 104))
    {
      v5 = *(uint64_t **)(v4 + 88);
      if (v5)
      {
        do
        {
          v14 = (uint64_t *)*v5;
          if (*((char *)v5 + 39) < 0)
            operator delete((void *)v5[2]);
          (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v4 + 96) + 40))(*(_QWORD *)(v4 + 96), v5, 176);
          v5 = v14;
        }
        while (v14);
      }
      *(_QWORD *)(v4 + 88) = 0;
      v6 = *(_QWORD *)(v4 + 72);
      if (v6)
      {
        for (i = 0; i != v6; ++i)
          *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * i) = 0;
      }
      *(_QWORD *)(v4 + 104) = 0;
    }
    if (*(_QWORD *)(v4 + 48))
    {
      v8 = *(uint64_t **)(v4 + 32);
      if (v8)
      {
        do
        {
          v15 = (uint64_t *)*v8;
          if (*((char *)v8 + 39) < 0)
            operator delete((void *)v8[2]);
          (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v4 + 40) + 40))(*(_QWORD *)(v4 + 40), v8, 176);
          v8 = v15;
        }
        while (v15);
      }
      *(_QWORD *)(v4 + 32) = 0;
      v9 = *(_QWORD *)(v4 + 16);
      if (v9)
      {
        for (j = 0; j != v9; ++j)
          *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * j) = 0;
      }
      *(_QWORD *)(v4 + 48) = 0;
    }
  }
  v11 = *(_QWORD **)(v1 + 280);
  v16[0] = &off_1E427A380;
  v16[1] = v11;
  v17 = v16;
  md::LabelGlyphImageLoader::queueCommand(v11, v16);
  v12 = v17;
  if (v17 == v16)
  {
    v13 = 4;
    v12 = v16;
    goto LABEL_25;
  }
  if (v17)
  {
    v13 = 5;
LABEL_25:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v2 = *(float *)(a1 + 16);
LABEL_27:
  if (md::LabelStyleCache::setContentScale(*(md::LabelStyleCache **)(v1 + 336), v2))
    md::LabelManager::clearScene(v1, 3);
}

void sub_19F96366C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelManager::setLocalizeLabels(BOOL)::$_0,std::allocator<md::LabelManager::setLocalizeLabels(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setLocalizeLabels(BOOL)::$_0,std::allocator<md::LabelManager::setLocalizeLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setLocalizeLabels(BOOL)::$_0,std::allocator<md::LabelManager::setLocalizeLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setLocalizeLabels(BOOL)::$_0,std::allocator<md::LabelManager::setLocalizeLabels(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::mutex *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *opaque;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 336);
  v4 = *(unsigned __int8 *)(a1 + 16);
  std::mutex::lock((std::mutex *)v3);
  if (*(unsigned __int8 *)(v3 + 156) == v4)
  {
    std::mutex::unlock((std::mutex *)v3);
  }
  else
  {
    *(_BYTE *)(v3 + 156) = v4;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear(v3 + 208);
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear(v3 + 320);
    v5 = *(_QWORD *)(v3 + 432);
    v6 = *(unsigned __int8 *)(v3 + 156);
    if (*(unsigned __int8 *)(v5 + 92) != v6)
    {
      *(_BYTE *)(v5 + 92) = v6;
      *(_BYTE *)(v5 + 136) = -1;
      *(_BYTE *)(v5 + 125) = 0;
      v7 = *(std::__shared_weak_count **)(v5 + 416);
      *(_QWORD *)(v5 + 408) = 0;
      *(_QWORD *)(v5 + 416) = 0;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(std::__shared_weak_count **)(v5 + 432);
      *(_QWORD *)(v5 + 424) = 0;
      *(_QWORD *)(v5 + 432) = 0;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    std::mutex::unlock((std::mutex *)v3);
    atomic_store(*(_BYTE *)(a1 + 16), (unsigned __int8 *)(v2 + 3392));
    md::LabelManager::clearScene(v2, 2);
    v13 = *(std::mutex **)(v2 + 288);
    v14 = *(unsigned __int8 *)(a1 + 16);
    std::mutex::lock(v13);
    v15 = &v13[5].__m_.__opaque[40];
    while (1)
    {
      v15 = *(char **)v15;
      if (!v15)
        break;
      v16 = *((_QWORD *)v15 + 2);
      if (v16)
        v17 = v16 + 8;
      else
        v17 = 0;
      (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(v17 + 8) + 32))(*(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 56), v14 != 0);
    }
    v18 = &v13[1].__m_.__opaque[16];
    while (1)
    {
      v18 = *(char **)v18;
      if (!v18)
        break;
      v19 = *((_QWORD *)v18 + 2);
      if (v19)
        v20 = v19 + 8;
      else
        v20 = 0;
      (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(v20 + 8) + 32))(*(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 56), v14 != 0);
    }
    opaque = v13[3].__m_.__opaque;
    while (1)
    {
      opaque = *(char **)opaque;
      if (!opaque)
        break;
      v22 = *((_QWORD *)opaque + 2);
      if (v22)
        v23 = v22 + 8;
      else
        v23 = 0;
      (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(v23 + 8) + 32))(*(_QWORD *)(v23 + 8), *(_QWORD *)(v23 + 56), v14 != 0);
    }
    v24 = &v13[6].__m_.__opaque[32];
    while (1)
    {
      v24 = *(char **)v24;
      if (!v24)
        break;
      v25 = *((_QWORD *)v24 + 2);
      if (v25)
        v26 = v25 + 8;
      else
        v26 = 0;
      (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(v26 + 8) + 32))(*(_QWORD *)(v26 + 8), *(_QWORD *)(v26 + 56), v14 != 0);
    }
    std::mutex::unlock(v13);
    v27 = *(unsigned int **)(v2 + 296);
    v28 = v27[3];
    v29 = __CFADD__(v28, 1);
    v30 = v28 + 1;
    v27[3] = v30;
    if (v29)
    {
      *(_QWORD *)(v27 + 3) = 0x100000002;
      v30 = 2;
    }
    v27[4] = v30 - 1;
    atomic_store(v30, v27 + 2);
    v31 = *(uint64_t ***)(v2 + 168);
    v32 = *v31;
    v33 = v31[1];
    if (*v31 != v33)
    {
      do
      {
        v34 = *v32++;
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
      }
      while (v32 != v33);
    }
  }
}

void sub_19F9639B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::setLabelScaleFactor(gss::LabelScaleFactor)::$_0,std::allocator<md::LabelManager::setLabelScaleFactor(gss::LabelScaleFactor)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setLabelScaleFactor(gss::LabelScaleFactor)::$_0,std::allocator<md::LabelManager::setLabelScaleFactor(gss::LabelScaleFactor)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setLabelScaleFactor(gss::LabelScaleFactor)::$_0,std::allocator<md::LabelManager::setLabelScaleFactor(gss::LabelScaleFactor)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setLabelScaleFactor(gss::LabelScaleFactor)::$_0,std::allocator<md::LabelManager::setLabelScaleFactor(gss::LabelScaleFactor)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v1 + 3368) != v2)
  {
    *(_BYTE *)(v1 + 3368) = v2;
    md::LabelManager::resolveLabelScaleFactor((md::LabelManager *)v1);
    *(_BYTE *)(v1 + 3373) = 1;
    v3 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 136);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 56);
        if (v5)
        {
          v7 = v1;
          v6 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v5 + 48))(v5, &v7, &v6);
        }
      }
    }
  }
}

void std::__function::__func<md::LabelManager::setMapType(VKMapType)::$_0,std::allocator<md::LabelManager::setMapType(VKMapType)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setMapType(VKMapType)::$_0,std::allocator<md::LabelManager::setMapType(VKMapType)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C92D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setMapType(VKMapType)::$_0,std::allocator<md::LabelManager::setMapType(VKMapType)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C92D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setMapType(VKMapType)::$_0,std::allocator<md::LabelManager::setMapType(VKMapType)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  int v23;
  char v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(v1 + 196) != v2)
  {
    *(_DWORD *)(v1 + 196) = v2;
    v4 = *(_QWORD *)(v1 + 232);
    v5 = *(unsigned __int8 *)(v4 + 31);
    v6 = (v2 < 0xB) & (0x418u >> v2);
    if (*(unsigned __int8 *)(v4 + 16) - 5 <= 1 && v5 != v6)
    {
      *(_BYTE *)(v4 + 31) = v6;
      v24 = v6 ? -4 : 4;
      *(_BYTE *)(v4 + 35) = v24;
      *(_BYTE *)(v4 + 29) = v6;
      *(_BYTE *)(v4 + 30) = v6;
      *(_BYTE *)(v4 + 28) = v6 ^ 1;
      *(_BYTE *)(v4 + 19) = v6 ^ 1;
      v25 = *(uint64_t ***)(*(_QWORD *)(v4 + 8) + 168);
      v26 = *v25;
      v27 = v25[1];
      if (*v25 != v27)
      {
        do
        {
          v28 = *v26++;
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
        }
        while (v26 != v27);
      }
    }
    if ((v5 != 0) != (*(_BYTE *)(*(_QWORD *)(v1 + 232) + 31) != 0) && *(_QWORD *)(v1 + 3400))
    {
      v8 = (_QWORD *)(v1 + 3400);
      v9 = *(std::__shared_weak_count **)(v1 + 3408);
      v34 = *(_QWORD *)(v1 + 3400);
      v35 = v9;
      if (!v9)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      if (*v8)
      {
LABEL_14:
        (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 240) + 192))(*(_QWORD *)(v1 + 240));
        v12 = *(std::__shared_weak_count **)(v1 + 3512);
        *(_QWORD *)(v1 + 3504) = 0;
        *(_QWORD *)(v1 + 3512) = 0;
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = *(std::__shared_weak_count **)(v1 + 3408);
        *v8 = 0;
        *(_QWORD *)(v1 + 3408) = 0;
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      md::LabelManager::adoptSelectedLabelMarker(v1, &v34);
      v18 = v35;
      if (v35)
      {
        v19 = (unint64_t *)&v35->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    v21 = *(_DWORD *)(a1 + 16) == 8 && *(_BYTE *)(*(_QWORD *)(v1 + 232) + 19) != 0;
    atomic_store(v21, (unsigned __int8 *)(v1 + 3391));
    v22 = atomic_load((unsigned __int8 *)(v1 + 3391));
    if ((v22 & 1) != 0)
    {
      v23 = 1;
    }
    else if (*(_DWORD *)(v1 + 196) == 5)
    {
      v23 = 3;
    }
    else
    {
      v23 = 2 * (*(_BYTE *)(v1 + 3024) == 1);
    }
    v29 = atomic_load((unsigned __int8 *)(v1 + 3394));
    if (v29 != v23)
      atomic_store(v23, (unsigned __int8 *)(v1 + 3394));
    *(_BYTE *)(v1 + 3040) = (*(_DWORD *)(a1 + 16) & 0xFFFFFFFD) == 1;
    v30 = *(uint64_t ***)(v1 + 168);
    v31 = *v30;
    v32 = v30[1];
    if (*v30 != v32)
    {
      do
      {
        v33 = *v31++;
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
      }
      while (v31 != v32);
    }
  }
}

void sub_19F963DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelManager::setMapsUsage(VKMapsUsage)::$_0,std::allocator<md::LabelManager::setMapsUsage(VKMapsUsage)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setMapsUsage(VKMapsUsage)::$_0,std::allocator<md::LabelManager::setMapsUsage(VKMapsUsage)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C94D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setMapsUsage(VKMapsUsage)::$_0,std::allocator<md::LabelManager::setMapsUsage(VKMapsUsage)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C94D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setMapsUsage(VKMapsUsage)::$_0,std::allocator<md::LabelManager::setMapsUsage(VKMapsUsage)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned __int8 *)(v1 + 200) != v2)
    *(_BYTE *)(v1 + 200) = v2;
  return result;
}

void std::__function::__func<md::LabelManager::setLabelMode(md::LabelMode)::$_0,std::allocator<md::LabelManager::setLabelMode(md::LabelMode)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setLabelMode(md::LabelMode)::$_0,std::allocator<md::LabelManager::setLabelMode(md::LabelMode)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setLabelMode(md::LabelMode)::$_0,std::allocator<md::LabelManager::setLabelMode(md::LabelMode)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setLabelMode(md::LabelMode)::$_0,std::allocator<md::LabelManager::setLabelMode(md::LabelMode)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned __int8 *)(v1 + 192) != v2)
  {
    *(_BYTE *)(v1 + 192) = v2;
    v3 = v2 == 2;
    v4 = 3;
    if (!v3)
      v4 = 0;
    v7[0] = &off_1E42C9290;
    v7[1] = v1;
    v7[2] = v4;
    v8 = v7;
    md::LabelManager::queueCommand((md::LabelManager *)v1, 9, 0, v7);
    v5 = v8;
    if (v8 == v7)
    {
      v6 = 4;
      v5 = v7;
    }
    else
    {
      if (!v8)
        return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 168) + 32) + 168))(*(_QWORD *)(*(_QWORD *)(v1 + 168) + 32), *(unsigned __int8 *)(v1 + 192));
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 168) + 32) + 168))(*(_QWORD *)(*(_QWORD *)(v1 + 168) + 32), *(unsigned __int8 *)(v1 + 192));
  }
  return result;
}

void sub_19F963FFC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F964008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelManager::setMapMode(gss::MapMode)::$_0,std::allocator<md::LabelManager::setMapMode(gss::MapMode)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setMapMode(gss::MapMode)::$_0,std::allocator<md::LabelManager::setMapMode(gss::MapMode)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setMapMode(gss::MapMode)::$_0,std::allocator<md::LabelManager::setMapMode(gss::MapMode)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setMapMode(gss::MapMode)::$_0,std::allocator<md::LabelManager::setMapMode(gss::MapMode)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  int v4;
  BOOL v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::mutex **)(v2 + 336);
  v4 = *(unsigned __int8 *)(a1 + 16);
  std::mutex::lock(v3);
  if (v3[2].__m_.__opaque[24] == v4)
  {
    std::mutex::unlock(v3);
  }
  else
  {
    v3[2].__m_.__opaque[24] = v4;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear((uint64_t)&v3[3].__m_.__opaque[8]);
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear((uint64_t)&v3[5]);
    std::mutex::unlock(v3);
    v5 = *(_BYTE *)(a1 + 16) == 3 && *(_BYTE *)(v2 + 3026) != 1;
    *(_BYTE *)(v2 + 3370) = v5;
    md::LabelManager::resolveLabelScaleFactor((md::LabelManager *)v2);
    *(_BYTE *)(v2 + 3373) = 1;
    v6 = atomic_load((unsigned __int8 *)(v2 + 3058));
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v2 + 136);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 56);
        if (v8)
        {
          v10 = v2;
          v9 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v8 + 48))(v8, &v10, &v9);
        }
      }
    }
  }
}

void std::__function::__func<md::LabelManager::setNavMode(md::LabelNavMode)::$_0,std::allocator<md::LabelManager::setNavMode(md::LabelNavMode)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setNavMode(md::LabelNavMode)::$_0,std::allocator<md::LabelManager::setNavMode(md::LabelNavMode)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9320;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setNavMode(md::LabelNavMode)::$_0,std::allocator<md::LabelManager::setNavMode(md::LabelNavMode)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9320;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setNavMode(md::LabelNavMode)::$_0,std::allocator<md::LabelManager::setNavMode(md::LabelNavMode)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  result = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v2 + 168) + 32))(*(_QWORD *)(*(_QWORD *)(v2 + 168)
                                                                                            + 32));
  if ((_DWORD)result != *(unsigned __int8 *)(a1 + 16))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 168) + 32) + 176))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 32));
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 168) + 32) + 8))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 32));
    if ((_DWORD)result)
    {
      *(_WORD *)(v2 + 3373) = 257;
      v4 = atomic_load((unsigned __int8 *)(v2 + 3058));
      if ((v4 & 1) != 0)
      {
        v5 = *(_QWORD *)(v2 + 136);
        if (v5)
        {
          result = *(_QWORD *)(v5 + 56);
          if (result)
          {
            v7 = v2;
            v6 = 9;
            return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v7, &v6);
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::setInARMode(BOOL)::$_0,std::allocator<md::LabelManager::setInARMode(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setInARMode(BOOL)::$_0,std::allocator<md::LabelManager::setInARMode(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C93B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setInARMode(BOOL)::$_0,std::allocator<md::LabelManager::setInARMode(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C93B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setInARMode(BOOL)::$_0,std::allocator<md::LabelManager::setInARMode(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v2 + 3387) != v3)
  {
    *(_BYTE *)(v2 + 3387) = v3;
    md::LabelManager::clearScene(v2, 3);
  }
}

void std::__function::__func<md::LabelManager::setStyleManager(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::setStyleManager(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setStyleManager(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::setStyleManager(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C97E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setStyleManager(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::setStyleManager(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C97E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelManager::setStyleManager(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::setStyleManager(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_weak_owners;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  __int128 v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  uint64_t v107[2];
  __int128 v108;
  std::__shared_weak_count *v109;
  __int128 *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v1 + 3488))
  {
    v3 = (uint64_t *)(v1 + 336);
    v4 = *(_QWORD *)(v1 + 336);
    goto LABEL_41;
  }
  md::LabelManager::updateStyleManagerClientStyleAttributes(*(md::LabelManager **)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 3488);
  v3 = (uint64_t *)(v1 + 336);
  v4 = *(_QWORD *)(v1 + 336);
  if (!v2)
  {
LABEL_41:
    v104 = 0u;
    goto LABEL_42;
  }
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  v107[0] = *(_QWORD *)(v2 + 16);
  v107[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  gss::StylesheetManager<gss::PropertyID>::initWithStyleSheet((gss::Allocator **)&v108, v107);
  v104 = v108;
  v108 = 0uLL;
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (!(_QWORD)v104)
    goto LABEL_42;
  v10 = *(_QWORD *)(v104 + 520);
  v11 = *(std::__shared_weak_count **)(v104 + 528);
  if (!v11)
    goto LABEL_17;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_17:
    if (v10)
      goto LABEL_18;
LABEL_131:
    v93 = (std::__shared_weak_count_vtbl *)operator new();
    gss::ClientStyleState<gss::PropertyID>::ClientStyleState((uint64_t)v93);
    std::shared_ptr<gss::ClientStyleState<gss::PropertyID>>::shared_ptr[abi:nn180100]<gss::ClientStyleState<gss::PropertyID>,void>(&v105, v93);
    v95 = v105;
    v94 = v106;
    if (v106)
    {
      v96 = (unint64_t *)&v106->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    *(_QWORD *)(v104 + 520) = v95;
    v98 = *(std::__shared_weak_count **)(v104 + 528);
    *(_QWORD *)(v104 + 528) = v94;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = v106;
    if (v106)
    {
      v102 = (unint64_t *)&v106->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v10)
    goto LABEL_131;
LABEL_18:
  v15 = *(_QWORD *)(v1 + 3488);
  v16 = *(_QWORD *)(v15 + 520);
  v17 = *(std::__shared_weak_count **)(v15 + 528);
  if (!v17)
    goto LABEL_23;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v16)
      goto LABEL_42;
  }
  else
  {
LABEL_23:
    if (!v16)
      goto LABEL_42;
  }
  v21 = *(_QWORD *)(v104 + 520);
  v22 = *(std::__shared_weak_count **)(v104 + 528);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(_QWORD *)(v1 + 3488);
  v26 = *(_QWORD *)(v25 + 520);
  v27 = *(std::__shared_weak_count **)(v25 + 528);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  gss::ClientStyleState<gss::PropertyID>::setStateWithClientStyleState(v21, v26);
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v22)
  {
    v32 = (unint64_t *)&v22->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_42:
  std::mutex::lock((std::mutex *)v4);
  std::mutex::lock((std::mutex *)(v4 + 64));
  if (*((_QWORD *)&v104 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(std::__shared_weak_count **)(v4 + 192);
  *(_OWORD *)(v4 + 184) = v104;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  std::mutex::unlock((std::mutex *)(v4 + 64));
  md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear(v4 + 208);
  md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::clear(v4 + 320);
  v39 = *(std::__shared_weak_count **)(v4 + 456);
  *(_QWORD *)(v4 + 448) = 0;
  *(_QWORD *)(v4 + 456) = 0;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *(std::__shared_weak_count **)(v4 + 472);
  *(_QWORD *)(v4 + 464) = 0;
  *(_QWORD *)(v4 + 472) = 0;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  std::mutex::unlock((std::mutex *)v4);
  md::LabelStyleContext::initialize(*(md::LabelStyleContext **)(v4 + 136), (uint64_t *)(v4 + 184));
  v45 = *(_QWORD *)(v4 + 200);
  if (*((_QWORD *)&v104 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = *(std::__shared_weak_count **)(v45 + 8);
  *(_OWORD *)v45 = v104;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *(_QWORD *)(v45 + 16);
  *(_QWORD *)(v45 + 16) = 0;
  if (v51)
    MEMORY[0x1A1AF4E00](v51, 0x1000C40D77C405DLL);
  v52 = *(_QWORD *)(v45 + 24);
  *(_QWORD *)(v45 + 24) = 0;
  if (v52)
    MEMORY[0x1A1AF4E00](v52, 0x1000C40005DEF19);
  v53 = *(_QWORD *)(v45 + 32);
  *(_QWORD *)(v45 + 32) = 0;
  if (v53)
    MEMORY[0x1A1AF4E00](v53, 0x1000C4090D0E795);
  v54 = *(_QWORD *)(v45 + 40);
  *(_QWORD *)(v45 + 40) = 0;
  if (v54)
    MEMORY[0x1A1AF4E00](v54, 0x1000C4052888210);
  v55 = *(_QWORD *)(v45 + 48);
  *(_QWORD *)(v45 + 48) = 0;
  if (v55)
    MEMORY[0x1A1AF4E00](v55, 0x1000C4052888210);
  v56 = *(_QWORD *)(v45 + 64);
  *(_QWORD *)(v45 + 64) = 0;
  if (v56)
    MEMORY[0x1A1AF4E00](v56, 0x1000C4000313F17);
  v57 = *(_QWORD *)(v45 + 72);
  *(_QWORD *)(v45 + 72) = 0;
  if (v57)
    MEMORY[0x1A1AF4E00](v57, 0x1000C4033FC2DF1);
  *(_BYTE *)(v45 + 88) = 1;
  if (*((_QWORD *)&v104 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v104 + 1) + 16))(*((_QWORD *)&v104 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v104 + 1));
    }
  }
  if (!*(_QWORD *)(*v3 + 184))
  {
    if (md::LabelStyleCache::setVariantStyleType(*v3, 0x1010000000000uLL))
    {
      v72 = *(uint64_t ***)(v1 + 168);
      v73 = *v72;
      v74 = v72[1];
      if (*v72 != v74)
      {
        do
        {
          v75 = *v73++;
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
        }
        while (v73 != v74);
      }
    }
    if (*(_BYTE *)(v1 + 3375))
      goto LABEL_120;
    goto LABEL_121;
  }
  v60 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v60 || (v61 = *(_QWORD *)(v1 + 8), (v62 = std::__shared_weak_count::lock(v60)) == 0))
    std::__throw_bad_weak_ptr[abi:nn180100]();
  v63 = v62;
  p_shared_weak_owners = (unint64_t *)&v62->__shared_weak_owners_;
  do
    v65 = __ldxr(p_shared_weak_owners);
  while (__stxr(v65 + 1, p_shared_weak_owners));
  v66 = (unint64_t *)&v62->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v63);
  }
  v68 = *(uint64_t **)(*v3 + 184);
  do
    v69 = __ldxr(p_shared_weak_owners);
  while (__stxr(v69 + 1, p_shared_weak_owners));
  *(_QWORD *)&v108 = &off_1E42C9B90;
  *((_QWORD *)&v108 + 1) = v61;
  v109 = v63;
  v110 = &v108;
  gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(v68, &v108);
  v70 = v110;
  if (v110 == &v108)
  {
    v71 = 4;
    v70 = &v108;
  }
  else
  {
    if (!v110)
      goto LABEL_108;
    v71 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v70 + 8 * v71))();
LABEL_108:
  v76 = *(_QWORD *)(*v3 + 184);
  v77 = *(_QWORD *)(v76 + 520);
  v78 = *(std::__shared_weak_count **)(v76 + 528);
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  v81 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v77);
  if (md::LabelStyleCache::setVariantStyleType(*v3, v81))
  {
    v82 = *(_QWORD *)(v1 + 168);
    v83 = *(_QWORD **)v82;
    v84 = *(_QWORD **)(v82 + 8);
    if (*(_QWORD **)v82 != v84)
    {
      do
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v83 + 8))(*v83);
        ++v83;
      }
      while (v83 != v84);
    }
  }
  if (v78)
  {
    v85 = (unint64_t *)&v78->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  std::__shared_weak_count::__release_weak(v63);
  if (*(_BYTE *)(v1 + 3375))
  {
LABEL_120:
    *(_BYTE *)(v1 + 3375) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 240) + 152))(*(_QWORD *)(v1 + 240));
  }
LABEL_121:
  *(_WORD *)(v1 + 3373) = 257;
  v87 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if ((v87 & 1) != 0)
  {
    v88 = *(_QWORD *)(v1 + 136);
    if (v88)
    {
      v89 = *(_QWORD *)(v88 + 56);
      if (v89)
      {
        v107[0] = v1;
        LOBYTE(v105) = 9;
        (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **))(*(_QWORD *)v89 + 48))(v89, v107, &v105);
      }
    }
  }
  if (*(_QWORD *)(v1 + 184))
  {
    *(_BYTE *)(v1 + 3388) = 1;
  }
  else
  {
    v90 = *(_QWORD **)(v1 + 168);
    v91 = (_QWORD *)*v90;
    v92 = (_QWORD *)v90[1];
    if ((_QWORD *)*v90 != v92)
    {
      do
      {
        (**(void (***)(_QWORD))*v91)(*v91);
        ++v91;
      }
      while (v91 != v92);
    }
  }
}

void sub_19F964BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  MEMORY[0x1A1AF4E00](v10, 0x1030C406D3438E8);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::setShieldSize(grl::SizeGroup)::$_0,std::allocator<md::LabelManager::setShieldSize(grl::SizeGroup)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShieldSize(grl::SizeGroup)::$_0,std::allocator<md::LabelManager::setShieldSize(grl::SizeGroup)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C95F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShieldSize(grl::SizeGroup)::$_0,std::allocator<md::LabelManager::setShieldSize(grl::SizeGroup)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C95F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setShieldSize(grl::SizeGroup)::$_0,std::allocator<md::LabelManager::setShieldSize(grl::SizeGroup)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned __int8 *)(v1 + 3360) != v2)
  {
    *(_BYTE *)(v1 + 3360) = v2;
    *(_BYTE *)(v1 + 3373) = 1;
    v3 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 136);
      if (v4)
      {
        result = *(_QWORD *)(v4 + 56);
        if (result)
        {
          v6 = v1;
          v5 = 9;
          return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v6, &v5);
        }
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::setEmphasis(gss::Emphasis)::$_0,std::allocator<md::LabelManager::setEmphasis(gss::Emphasis)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setEmphasis(gss::Emphasis)::$_0,std::allocator<md::LabelManager::setEmphasis(gss::Emphasis)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setEmphasis(gss::Emphasis)::$_0,std::allocator<md::LabelManager::setEmphasis(gss::Emphasis)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setEmphasis(gss::Emphasis)::$_0,std::allocator<md::LabelManager::setEmphasis(gss::Emphasis)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned __int8 v3;
  int v4;
  unsigned __int8 *v5;
  int v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned __int8 *)(v1 + 3024) != v2)
  {
    *(_BYTE *)(v1 + 3024) = v2;
    v3 = atomic_load((unsigned __int8 *)(v1 + 3391));
    if ((v3 & 1) != 0)
    {
      v4 = 1;
    }
    else if (*(_DWORD *)(v1 + 196) == 5)
    {
      v4 = 3;
    }
    else
    {
      v4 = 2 * (*(_BYTE *)(v1 + 3024) == 1);
    }
    v5 = (unsigned __int8 *)(v1 + 3394);
    v6 = atomic_load(v5);
    if (v6 != v4)
      atomic_store(v4, v5);
  }
  return result;
}

void std::__function::__func<md::LabelManager::setGroundMode(gss::GroundMode)::$_0,std::allocator<md::LabelManager::setGroundMode(gss::GroundMode)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setGroundMode(gss::GroundMode)::$_0,std::allocator<md::LabelManager::setGroundMode(gss::GroundMode)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C95A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setGroundMode(gss::GroundMode)::$_0,std::allocator<md::LabelManager::setGroundMode(gss::GroundMode)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C95A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setGroundMode(gss::GroundMode)::$_0,std::allocator<md::LabelManager::setGroundMode(gss::GroundMode)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned __int8 *)(v1 + 3025) != v2)
  {
    *(_BYTE *)(v1 + 3025) = v2;
    *(_WORD *)(v1 + 3373) = 257;
    v3 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 136);
      if (v4)
      {
        result = *(_QWORD *)(v4 + 56);
        if (result)
        {
          v6 = v1;
          v5 = 9;
          return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v6, &v5);
        }
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::setNavigationShieldSize(grl::SizeGroup)::$_0,std::allocator<md::LabelManager::setNavigationShieldSize(grl::SizeGroup)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setNavigationShieldSize(grl::SizeGroup)::$_0,std::allocator<md::LabelManager::setNavigationShieldSize(grl::SizeGroup)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setNavigationShieldSize(grl::SizeGroup)::$_0,std::allocator<md::LabelManager::setNavigationShieldSize(grl::SizeGroup)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setNavigationShieldSize(grl::SizeGroup)::$_0,std::allocator<md::LabelManager::setNavigationShieldSize(grl::SizeGroup)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v2 + 3361) != v3)
  {
    *(_BYTE *)(v2 + 3361) = v3;
    if (*(_BYTE *)(v2 + 192) == 2)
      md::LabelManager::clearScene(v2, 2);
  }
}

void std::__function::__func<md::LabelManager::setShieldIdiom(VKShieldIdiom)::$_0,std::allocator<md::LabelManager::setShieldIdiom(VKShieldIdiom)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShieldIdiom(VKShieldIdiom)::$_0,std::allocator<md::LabelManager::setShieldIdiom(VKShieldIdiom)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShieldIdiom(VKShieldIdiom)::$_0,std::allocator<md::LabelManager::setShieldIdiom(VKShieldIdiom)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9680;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::LabelManager::setShieldIdiom(VKShieldIdiom)::$_0,std::allocator<md::LabelManager::setShieldIdiom(VKShieldIdiom)::$_0>,void ()(void)>::operator()(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = result[1];
  v2 = result[2];
  if (*(_QWORD *)(v1 + 3352) != v2)
  {
    *(_QWORD *)(v1 + 3352) = v2;
    *(_BYTE *)(v1 + 3373) = 1;
    v3 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 136);
      if (v4)
      {
        result = *(_QWORD **)(v4 + 56);
        if (result)
        {
          v6 = v1;
          v5 = 9;
          return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, char *))(*result + 48))(result, &v6, &v5);
        }
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::setTargetDisplay(gss::TargetDisplay)::$_0,std::allocator<md::LabelManager::setTargetDisplay(gss::TargetDisplay)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setTargetDisplay(gss::TargetDisplay)::$_0,std::allocator<md::LabelManager::setTargetDisplay(gss::TargetDisplay)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setTargetDisplay(gss::TargetDisplay)::$_0,std::allocator<md::LabelManager::setTargetDisplay(gss::TargetDisplay)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setTargetDisplay(gss::TargetDisplay)::$_0,std::allocator<md::LabelManager::setTargetDisplay(gss::TargetDisplay)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 3026) = *(_BYTE *)(result + 16);
  return result;
}

void std::__function::__func<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setLabelMarkerSelectionEnabled(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v1 + 3027) != v2)
  {
    *(_BYTE *)(v1 + 3027) = v2;
    md::LabelManager::updateStyleManagerClientStyleAttributes((md::LabelManager *)v1);
    md::LabelStyleCache::stylesheetDidChange(*(std::mutex **)(v1 + 336));
    md::LabelManager::clearScene(v1, 0);
  }
}

void md::LabelManager::selectLabelMarker(md::LabelManager *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)a1 + 438) = v5;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 439);
  *((_QWORD *)a1 + 439) = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v12 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v25 = 0;
  v15 = operator new(0x20uLL);
  *v15 = &off_1E42C9878;
  v15[1] = a1;
  v15[2] = v12;
  v15[3] = v11;
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v25 = v15;
  md::LabelManager::queueCommand(a1, 39, 1, v24);
  v20 = v25;
  if (v25 == v24)
  {
    v21 = 4;
    v20 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_20;
    v21 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v20 + 8 * v21))(v20, v18, v19);
LABEL_20:
  if (v11)
  {
    v22 = (unint64_t *)&v11->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19F965494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  md::components::Material::~Material((md::components::Material *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42C9878;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42C9878;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42C9878;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42C9878;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::selectLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = a1 + 2;
  v1 = a1[2];
  v3 = a1[1];
  v4 = a1[3];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(v3 + 3504) = v1;
  v7 = *(std::__shared_weak_count **)(v3 + 3512);
  *(_QWORD *)(v3 + 3512) = v4;
  if (!v7)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = *v2;
    if (!*v2)
      goto LABEL_25;
  }
  else
  {
LABEL_8:
    v10 = *v2;
    if (!*v2)
      goto LABEL_25;
  }
  v11 = *(std::__shared_weak_count **)(v10 + 240);
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)(v10 + 232);
      if (v14)
        v15 = v14 == v3;
      else
        v15 = 0;
      v16 = v15;
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (v18)
      {
        if (!v16)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v13);
        if ((v16 & 1) == 0)
          return;
      }
LABEL_25:
      md::LabelManager::setSelectedLabelMarker(v3, v2);
    }
  }
}

void std::__function::__func<md::LabelManager::clearPreviouslySelectedLabelMarker(void)::$_0,std::allocator<md::LabelManager::clearPreviouslySelectedLabelMarker(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::clearPreviouslySelectedLabelMarker(void)::$_0,std::allocator<md::LabelManager::clearPreviouslySelectedLabelMarker(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA640;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::clearPreviouslySelectedLabelMarker(void)::$_0,std::allocator<md::LabelManager::clearPreviouslySelectedLabelMarker(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA640;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::clearPreviouslySelectedLabelMarker(void)::$_0,std::allocator<md::LabelManager::clearPreviouslySelectedLabelMarker(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 240) + 200))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 240));
}

_QWORD *std::__function::__func<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42798D0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42798D0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42798D0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42798D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0,std::allocator<md::LabelManager::setPreviouslySelectedLabelMarker(std::shared_ptr<md::LabelMarker> const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v1 = a1 + 16;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 8);
  if (!v2)
    goto LABEL_14;
  v4 = *(std::__shared_weak_count **)(v2 + 240);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v2 + 232);
      if (v7)
        v8 = v7 == v3;
      else
        v8 = 0;
      v9 = v8;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
      {
        if (!v9)
          return;
        goto LABEL_14;
      }
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
      if ((v9 & 1) != 0)
LABEL_14:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 240) + 208))(*(_QWORD *)(v3 + 240), v1);
    }
  }
}

void std::__function::__func<md::LabelManager::setTrafficEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setTrafficEnabled(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setTrafficEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setTrafficEnabled(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9998;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setTrafficEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setTrafficEnabled(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9998;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setTrafficEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setTrafficEnabled(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v1 + 3029) != v2)
  {
    *(_BYTE *)(v1 + 3029) = v2;
    v3 = *(_QWORD *)(v1 + 3400);
    if (v3 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3))
      md::LabelManager::deselectLabelMarkerImpl((md::LabelManager *)v1);
    *(_BYTE *)(v1 + 3041) = 1;
    *(_BYTE *)(v1 + 3045) = 1;
    *(_BYTE *)(v1 + 3047) = 1;
    v4 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v1 + 136);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 56);
        if (v6)
        {
          v8 = v1;
          v7 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v6 + 48))(v6, &v8, &v7);
        }
      }
    }
  }
}

void std::__function::__func<md::LabelManager::setTrafficClosuresEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setTrafficClosuresEnabled(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setTrafficClosuresEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setTrafficClosuresEnabled(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setTrafficClosuresEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setTrafficClosuresEnabled(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setTrafficClosuresEnabled(BOOL)::$_0,std::allocator<md::LabelManager::setTrafficClosuresEnabled(BOOL)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned __int8 *)(v1 + 3030) != v2)
  {
    *(_BYTE *)(v1 + 3030) = v2;
    *(_BYTE *)(v1 + 3041) = 1;
    *(_BYTE *)(v1 + 3045) = 1;
    *(_BYTE *)(v1 + 3047) = 1;
    v3 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 136);
      if (v4)
      {
        result = *(_QWORD *)(v4 + 56);
        if (result)
        {
          v6 = v1;
          v5 = 9;
          return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v6, &v5);
        }
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::setShowingTrafficCasing(BOOL)::$_0,std::allocator<md::LabelManager::setShowingTrafficCasing(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowingTrafficCasing(BOOL)::$_0,std::allocator<md::LabelManager::setShowingTrafficCasing(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA0A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowingTrafficCasing(BOOL)::$_0,std::allocator<md::LabelManager::setShowingTrafficCasing(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA0A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setShowingTrafficCasing(BOOL)::$_0,std::allocator<md::LabelManager::setShowingTrafficCasing(BOOL)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(unsigned __int8 *)(result + 16);
  if (*(unsigned __int8 *)(v1 + 3031) != v2)
  {
    *(_BYTE *)(v1 + 3031) = v2;
    if (*(_BYTE *)(v1 + 3029))
    {
      *(_BYTE *)(v1 + 3045) = 1;
      *(_BYTE *)(v1 + 3047) = 1;
      v3 = atomic_load((unsigned __int8 *)(v1 + 3048));
      if ((v3 & 1) == 0)
      {
        v4 = atomic_load((unsigned __int8 *)(v1 + 3058));
        if ((v4 & 1) != 0)
        {
          v5 = *(_QWORD *)(v1 + 136);
          if (v5)
          {
            result = *(_QWORD *)(v5 + 56);
            if (result)
            {
              v7 = v1;
              v6 = 9;
              return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v7, &v6);
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::setShowsPointsOfInterest(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPointsOfInterest(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowsPointsOfInterest(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPointsOfInterest(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA1C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowsPointsOfInterest(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPointsOfInterest(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA1C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setShowsPointsOfInterest(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPointsOfInterest(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v2 + 3032) != v3)
  {
    *(_BYTE *)(v2 + 3032) = v3;
    md::LabelManager::clearScene(v2, 0);
  }
}

_QWORD *std::__function::__func<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0,std::allocator<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42C98C0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0,std::allocator<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42C98C0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0,std::allocator<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42C98C0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0,std::allocator<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42C98C0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0,std::allocator<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0,std::allocator<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0,std::allocator<md::LabelManager::setCategoryFilter(std::shared_ptr<md::LabelCategoryFilter> const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 != *(_QWORD *)(v2 + 3576))
  {
    v3 = a1[3];
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    *(_QWORD *)(v2 + 3576) = v1;
    v6 = *(std::__shared_weak_count **)(v2 + 3584);
    *(_QWORD *)(v2 + 3584) = v3;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_BYTE *)(v2 + 3045) = 1;
    *(_BYTE *)(v2 + 3047) = 1;
    v9 = atomic_load((unsigned __int8 *)(v2 + 3058));
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v2 + 136);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 56);
        if (v11)
        {
          v13 = v2;
          v12 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v11 + 48))(v11, &v13, &v12);
        }
      }
    }
  }
}

void std::__function::__func<md::LabelManager::setShowsRoadLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsRoadLabels(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowsRoadLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsRoadLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9AB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowsRoadLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsRoadLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9AB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setShowsRoadLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsRoadLabels(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v2[3034] != v3)
  {
    v2[3034] = v3;
    if (v3)
      v4 = v2[3036] == 0;
    else
      v4 = 1;
    v5 = v4 || !v2[3035] || !v2[3037] || !v2[3038] || v2[3039] == 0;
    v2[3033] = v5;
    md::LabelManager::clearScene((uint64_t)v2, 0);
  }
}

void std::__function::__func<md::LabelManager::setShowsRoadShields(BOOL)::$_0,std::allocator<md::LabelManager::setShowsRoadShields(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowsRoadShields(BOOL)::$_0,std::allocator<md::LabelManager::setShowsRoadShields(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowsRoadShields(BOOL)::$_0,std::allocator<md::LabelManager::setShowsRoadShields(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setShowsRoadShields(BOOL)::$_0,std::allocator<md::LabelManager::setShowsRoadShields(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v2[3035] != v3)
  {
    v2[3035] = v3;
    v5 = !v2[3036] || (v3 ? (v4 = v2[3034] == 0) : (v4 = 1), v4 || !v2[3037] || !v2[3038]) || v2[3039] == 0;
    v2[3033] = v5;
    md::LabelManager::clearScene((uint64_t)v2, 0);
  }
}

void std::__function::__func<md::LabelManager::setShowsPointLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPointLabels(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowsPointLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPointLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowsPointLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPointLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setShowsPointLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPointLabels(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  BOOL v4;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v2[3036] != v3)
  {
    v2[3036] = v3;
    v4 = !v3 || !v2[3034] || !v2[3035] || !v2[3037] || !v2[3038] || v2[3039] == 0;
    v2[3033] = v4;
    md::LabelManager::clearScene((uint64_t)v2, 0);
  }
}

void std::__function::__func<md::LabelManager::setShowsContourLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsContourLabels(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowsContourLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsContourLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4279840;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowsContourLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsContourLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4279840;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setShowsContourLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsContourLabels(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  BOOL v4;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v2[3037] != v3)
  {
    v2[3037] = v3;
    if (!v2[3036] || !v2[3034])
      goto LABEL_8;
    v4 = 1;
    if (!v3 || !v2[3035])
      goto LABEL_9;
    if (v2[3038])
      v4 = v2[3039] == 0;
    else
LABEL_8:
      v4 = 1;
LABEL_9:
    v2[3033] = v4;
    md::LabelManager::clearScene((uint64_t)v2, 0);
  }
}

void std::__function::__func<md::LabelManager::setShowsPhysicalFeatureLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPhysicalFeatureLabels(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowsPhysicalFeatureLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPhysicalFeatureLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4279888;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowsPhysicalFeatureLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPhysicalFeatureLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4279888;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setShowsPhysicalFeatureLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsPhysicalFeatureLabels(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  BOOL v4;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v2[3038] != v3)
  {
    v2[3038] = v3;
    if (v2[3036] && v2[3034] && v2[3035])
    {
      v4 = 1;
      if (v3)
      {
        if (v2[3037])
          v4 = v2[3039] == 0;
      }
    }
    else
    {
      v4 = 1;
    }
    v2[3033] = v4;
    md::LabelManager::clearScene((uint64_t)v2, 0);
  }
}

void std::__function::__func<md::LabelManager::setShowsLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsLabels(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowsLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42797F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowsLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsLabels(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42797F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setShowsLabels(BOOL)::$_0,std::allocator<md::LabelManager::setShowsLabels(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  BOOL v4;
  char v5;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v2[3039] != v3)
  {
    v2[3039] = v3;
    if (v2[3036] && v2[3034] && v2[3035] && v2[3037])
    {
      if (v3)
        v4 = v2[3038] == 0;
      else
        v4 = 1;
      v5 = v4;
    }
    else
    {
      v5 = 1;
    }
    v2[3033] = v5;
    md::LabelManager::clearScene((uint64_t)v2, 0);
  }
}

void std::__function::__func<md::LabelManager::setMKRenderingSelectionBalloon(BOOL)::$_0,std::allocator<md::LabelManager::setMKRenderingSelectionBalloon(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setMKRenderingSelectionBalloon(BOOL)::$_0,std::allocator<md::LabelManager::setMKRenderingSelectionBalloon(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA4D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setMKRenderingSelectionBalloon(BOOL)::$_0,std::allocator<md::LabelManager::setMKRenderingSelectionBalloon(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA4D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setMKRenderingSelectionBalloon(BOOL)::$_0,std::allocator<md::LabelManager::setMKRenderingSelectionBalloon(BOOL)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 3056) = *(_BYTE *)(result + 16);
  return result;
}

void std::__function::__func<md::LabelManager::setSupportedEVConnectorTypes(unsigned long long)::$_0,std::allocator<md::LabelManager::setSupportedEVConnectorTypes(unsigned long long)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setSupportedEVConnectorTypes(unsigned long long)::$_0,std::allocator<md::LabelManager::setSupportedEVConnectorTypes(unsigned long long)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA400;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setSupportedEVConnectorTypes(unsigned long long)::$_0,std::allocator<md::LabelManager::setSupportedEVConnectorTypes(unsigned long long)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA400;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setSupportedEVConnectorTypes(unsigned long long)::$_0,std::allocator<md::LabelManager::setSupportedEVConnectorTypes(unsigned long long)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + 3456) = *(_QWORD *)(result + 16);
  return result;
}

void std::__function::__func<md::LabelManager::setNeedsClearScene(BOOL)::$_0,std::allocator<md::LabelManager::setNeedsClearScene(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setNeedsClearScene(BOOL)::$_0,std::allocator<md::LabelManager::setNeedsClearScene(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9A28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setNeedsClearScene(BOOL)::$_0,std::allocator<md::LabelManager::setNeedsClearScene(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9A28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setNeedsClearScene(BOOL)::$_0,std::allocator<md::LabelManager::setNeedsClearScene(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 16))
    v1 = 1;
  else
    v1 = 2;
  md::LabelManager::clearScene(*(_QWORD *)(a1 + 8), v1);
}

_QWORD *std::__function::__func<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0,std::allocator<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42C9908;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0,std::allocator<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42C9908;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0,std::allocator<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42C9908;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0,std::allocator<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42C9908;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0,std::allocator<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0,std::allocator<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

_BYTE *std::__function::__func<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0,std::allocator<md::LabelManager::setLabelIsDragged(std::shared_ptr<md::Label> const&,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *result;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  result = *(_BYTE **)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 488);
  if (result[142] != v4)
  {
    result[142] = v4;
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 536))(result, v2);
  }
  *(_BYTE *)(v2 + 3045) = 1;
  *(_BYTE *)(v2 + 3047) = 1;
  v5 = atomic_load((unsigned __int8 *)(v2 + 3058));
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 136);
    if (v6)
    {
      result = *(_BYTE **)(v6 + 56);
      if (result)
      {
        v8 = v2;
        v7 = 9;
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v8, &v7);
      }
    }
  }
  return result;
}

uint64_t geo::_retain_ptr<NSArray<VKLabelExclusionRegion *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5390;

  return a1;
}

void geo::_retain_ptr<NSArray<VKLabelExclusionRegion *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5390;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0,std::allocator<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CA178;
  *(_QWORD *)(a1 + 16) = &off_1E42B5390;

  return a1;
}

void std::__function::__func<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0,std::allocator<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CA178;
  *(_QWORD *)(a1 + 16) = &off_1E42B5390;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0,std::allocator<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42CA178;
  v2[1] = v3;
  v2[2] = &off_1E42B5390;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

void std::__function::__func<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0,std::allocator<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E42CA178;
  a2[1] = v3;
  a2[2] = &off_1E42B5390;
  a2[3] = 0;
  v4 = *(id *)(a1 + 24);
  v5 = (void *)a2[3];
  a2[3] = v4;

}

void std::__function::__func<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0,std::allocator<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B5390;

}

void std::__function::__func<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0,std::allocator<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B5390;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0,std::allocator<md::LabelManager::setLabelExclusionRegions(NSArray<VKLabelExclusionRegion *> *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168) + 64);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v1);
}

uint64_t std::__function::__func<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0,std::allocator<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0,std::allocator<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0,std::allocator<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_1E42C9F80;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id std::__function::__func<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0,std::allocator<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *a2 = &off_1E42C9F80;
  a2[1] = v3;
  result = v4;
  a2[2] = result;
  return result;
}

void std::__function::__func<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0,std::allocator<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0,std::allocator<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0,std::allocator<md::LabelManager::setScreenLabelFeatures(NSArray<VKScreenLabelFeature *> *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168) + 64);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 88))(v2, v1);
}

uint64_t std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x20uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42C9758;
  v2[1] = v3;
  *((_BYTE *)v2 + 16) = *(_BYTE *)(a1 + 16);
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

id std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id result;

  *(_QWORD *)a2 = &off_1E42C9758;
  v3 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  result = *(id *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_1,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v2 + 201) = *(_BYTE *)(a1 + 16);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 168) + 32) + 112))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 32), *(_QWORD *)(a1 + 24));
  return (***(uint64_t (****)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 168) + 40))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 40), *(_QWORD *)(a1 + 24));
}

uint64_t std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_0,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_0,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_0,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x20uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42C9710;
  v2[1] = v3;
  *((_BYTE *)v2 + 16) = *(_BYTE *)(a1 + 16);
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

id std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_0,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id result;

  *(_QWORD *)a2 = &off_1E42C9710;
  v3 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  result = *(id *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_0,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_0,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<md::LabelManager::setRouteContext(VKRouteContext *)::$_0,std::allocator<md::LabelManager::setRouteContext(VKRouteContext *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 201) = *(_BYTE *)(a1 + 16);
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 168) + 56) + 8))(*(_QWORD *)(*(_QWORD *)(v1 + 168) + 56), *(_QWORD *)(a1 + 24));
}

uint64_t std::__function::__func<md::LabelManager::setRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelManager::setRouteLine(VKRouteLine *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C9518;
  *(_QWORD *)(a1 + 16) = &off_1E42B4A30;

  return a1;
}

void std::__function::__func<md::LabelManager::setRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelManager::setRouteLine(VKRouteLine *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C9518;
  *(_QWORD *)(a1 + 16) = &off_1E42B4A30;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelManager::setRouteLine(VKRouteLine *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42C9518;
  v2[1] = v3;
  v2[2] = &off_1E42B4A30;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

void std::__function::__func<md::LabelManager::setRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelManager::setRouteLine(VKRouteLine *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E42C9518;
  a2[1] = v3;
  a2[2] = &off_1E42B4A30;
  a2[3] = 0;
  v4 = *(id *)(a1 + 24);
  v5 = (void *)a2[3];
  a2[3] = v4;

}

void std::__function::__func<md::LabelManager::setRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelManager::setRouteLine(VKRouteLine *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B4A30;

}

void std::__function::__func<md::LabelManager::setRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelManager::setRouteLine(VKRouteLine *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B4A30;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::LabelManager::setRouteLine(VKRouteLine *)::$_0,std::allocator<md::LabelManager::setRouteLine(VKRouteLine *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = atomic_load((unsigned __int8 *)(v1 + 3391));
  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(a1 + 24);
  if ((v2 & 1) != 0)
    return (***(uint64_t (****)(_QWORD, uint64_t))(v3 + 56))(*(_QWORD *)(v3 + 56), v4);
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 32) + 184))(*(_QWORD *)(v3 + 32), v4);
}

void std::__function::__func<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0,std::allocator<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0,std::allocator<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9A70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0,std::allocator<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9A70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0,std::allocator<md::LabelManager::setRouteUserOffset(geo::PolylineCoordinate const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 16;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v1 + 168) + 32) + 104))(*(_QWORD *)(*(_QWORD *)(v1 + 168) + 32), a1 + 16);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v1 + 168) + 48) + 8))(*(_QWORD *)(*(_QWORD *)(v1 + 168) + 48), v2);
}

void std::__function::__func<md::LabelManager::setIsNavCameraDetached(BOOL)::$_0,std::allocator<md::LabelManager::setIsNavCameraDetached(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setIsNavCameraDetached(BOOL)::$_0,std::allocator<md::LabelManager::setIsNavCameraDetached(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setIsNavCameraDetached(BOOL)::$_0,std::allocator<md::LabelManager::setIsNavCameraDetached(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setIsNavCameraDetached(BOOL)::$_0,std::allocator<md::LabelManager::setIsNavCameraDetached(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168) + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 152))(v2, v1);
}

_QWORD *std::__function::__func<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0,std::allocator<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42C97A0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0,std::allocator<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42C97A0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0,std::allocator<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42C97A0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0,std::allocator<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42C97A0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0,std::allocator<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0,std::allocator<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0,std::allocator<md::LabelManager::setSceneManager(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(v1 + 352);
  *(_QWORD *)(v1 + 344) = v2;
  *(_QWORD *)(v1 + 352) = v3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t std::__function::__func<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0,std::allocator<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C9DD0;
  *(_QWORD *)(a1 + 16) = &off_1E42B4F50;

  return a1;
}

void std::__function::__func<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0,std::allocator<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C9DD0;
  *(_QWORD *)(a1 + 16) = &off_1E42B4F50;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0,std::allocator<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42C9DD0;
  v2[1] = v3;
  v2[2] = &off_1E42B4F50;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

void std::__function::__func<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0,std::allocator<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E42C9DD0;
  a2[1] = v3;
  a2[2] = &off_1E42B4F50;
  a2[3] = 0;
  v4 = *(id *)(a1 + 24);
  v5 = (void *)a2[3];
  a2[3] = v4;

}

void std::__function::__func<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0,std::allocator<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B4F50;

}

void std::__function::__func<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0,std::allocator<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B4F50;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0,std::allocator<md::LabelManager::setARWalkingFeatures(VKARWalkingFeatureSet *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168) + 40);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 8))(v2, v1);
}

uint64_t std::__function::__func<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CA5B0;
  *(_QWORD *)(a1 + 16) = &off_1E42B53F0;

  return a1;
}

void std::__function::__func<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CA5B0;
  *(_QWORD *)(a1 + 16) = &off_1E42B53F0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42CA5B0;
  v2[1] = v3;
  v2[2] = &off_1E42B53F0;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

void std::__function::__func<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E42CA5B0;
  a2[1] = v3;
  a2[2] = &off_1E42B53F0;
  a2[3] = 0;
  v4 = *(id *)(a1 + 24);
  v5 = (void *)a2[3];
  a2[3] = v4;

}

void std::__function::__func<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B53F0;

}

void std::__function::__func<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B53F0;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0,std::allocator<md::LabelManager::setHiddenTrafficIncidentFeatures(NSArray<VKTrafficIncidentFeature *> *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)(_QWORD, uint64_t);

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(uint64_t (****)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168) + 64);
  return (**v2)(v2, v1);
}

uint64_t std::__function::__func<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0,std::allocator<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CA370;
  *(_QWORD *)(a1 + 16) = &off_1E42B53F0;

  return a1;
}

void std::__function::__func<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0,std::allocator<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CA370;
  *(_QWORD *)(a1 + 16) = &off_1E42B53F0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0,std::allocator<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42CA370;
  v2[1] = v3;
  v2[2] = &off_1E42B53F0;
  v2[3] = *(id *)(a1 + 24);
  *((_BYTE *)v2 + 40) = *(_BYTE *)(a1 + 40);
  return v2;
}

void std::__function::__func<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0,std::allocator<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  void *v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_1E42CA370;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = &off_1E42B53F0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(id *)(a1 + 24);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;

  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
}

void std::__function::__func<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0,std::allocator<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B53F0;

}

void std::__function::__func<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0,std::allocator<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B53F0;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0,std::allocator<md::LabelManager::setExternalTrafficFeatures(NSArray *,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  (***(void (****)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v2 + 168) + 48))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 48), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 40));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 168) + 32) + 136))(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 32), *(_QWORD *)(a1 + 24));
}

void std::__function::__func<md::LabelManager::setNavigationPuckSize(float)::$_0,std::allocator<md::LabelManager::setNavigationPuckSize(float)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setNavigationPuckSize(float)::$_0,std::allocator<md::LabelManager::setNavigationPuckSize(float)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9E60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setNavigationPuckSize(float)::$_0,std::allocator<md::LabelManager::setNavigationPuckSize(float)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9E60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<md::LabelManager::setNavigationPuckSize(float)::$_0,std::allocator<md::LabelManager::setNavigationPuckSize(float)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  float result;

  result = *(float *)(a1 + 16);
  *(float *)(*(_QWORD *)(a1 + 8) + 3364) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setCurrentLocationText(NSString *)::$_0,std::allocator<md::LabelManager::setCurrentLocationText(NSString *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C9EA8;
  *(_QWORD *)(a1 + 16) = &off_1E42B5490;

  return a1;
}

void std::__function::__func<md::LabelManager::setCurrentLocationText(NSString *)::$_0,std::allocator<md::LabelManager::setCurrentLocationText(NSString *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C9EA8;
  *(_QWORD *)(a1 + 16) = &off_1E42B5490;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setCurrentLocationText(NSString *)::$_0,std::allocator<md::LabelManager::setCurrentLocationText(NSString *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42C9EA8;
  v2[1] = v3;
  v2[2] = &off_1E42B5490;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

void std::__function::__func<md::LabelManager::setCurrentLocationText(NSString *)::$_0,std::allocator<md::LabelManager::setCurrentLocationText(NSString *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E42C9EA8;
  a2[1] = v3;
  a2[2] = &off_1E42B5490;
  a2[3] = 0;
  v4 = *(id *)(a1 + 24);
  v5 = (void *)a2[3];
  a2[3] = v4;

}

void std::__function::__func<md::LabelManager::setCurrentLocationText(NSString *)::$_0,std::allocator<md::LabelManager::setCurrentLocationText(NSString *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B5490;

}

void std::__function::__func<md::LabelManager::setCurrentLocationText(NSString *)::$_0,std::allocator<md::LabelManager::setCurrentLocationText(NSString *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B5490;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::LabelManager::setCurrentLocationText(NSString *)::$_0,std::allocator<md::LabelManager::setCurrentLocationText(NSString *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168) + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 144))(v2, v1);
}

uint64_t std::__function::__func<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0,std::allocator<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C99E0;
  *(_QWORD *)(a1 + 16) = &off_1E42B4CF0;

  return a1;
}

void std::__function::__func<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0,std::allocator<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42C99E0;
  *(_QWORD *)(a1 + 16) = &off_1E42B4CF0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0,std::allocator<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42C99E0;
  v2[1] = v3;
  v2[2] = &off_1E42B4CF0;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

void std::__function::__func<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0,std::allocator<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E42C99E0;
  a2[1] = v3;
  a2[2] = &off_1E42B4CF0;
  a2[3] = 0;
  v4 = *(id *)(a1 + 24);
  v5 = (void *)a2[3];
  a2[3] = v4;

}

void std::__function::__func<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0,std::allocator<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B4CF0;

}

void std::__function::__func<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0,std::allocator<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B4CF0;

  operator delete((void *)a1);
}

uint64_t std::__function::__func<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0,std::allocator<md::LabelManager::setFocusedPolyline(VKPolylineOverlay *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168) + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 128))(v2, v1);
}

void std::__function::__func<md::LabelManager::setShowVenues(BOOL)::$_0,std::allocator<md::LabelManager::setShowVenues(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::setShowVenues(BOOL)::$_0,std::allocator<md::LabelManager::setShowVenues(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42C9638;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::setShowVenues(BOOL)::$_0,std::allocator<md::LabelManager::setShowVenues(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C9638;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::setShowVenues(BOOL)::$_0,std::allocator<md::LabelManager::setShowVenues(BOOL)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 3389) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t geo::_retain_ptr<VKClientLocalizedStrings * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5110;

  return a1;
}

void geo::_retain_ptr<VKClientLocalizedStrings * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B5110;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0,std::allocator<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CA2E0;
  *(_QWORD *)(a1 + 16) = &off_1E42B5110;

  return a1;
}

void std::__function::__func<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0,std::allocator<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42CA2E0;
  *(_QWORD *)(a1 + 16) = &off_1E42B5110;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0,std::allocator<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42CA2E0;
  v2[1] = v3;
  v2[2] = &off_1E42B5110;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

void std::__function::__func<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0,std::allocator<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E42CA2E0;
  a2[1] = v3;
  a2[2] = &off_1E42B5110;
  a2[3] = 0;
  v4 = *(id *)(a1 + 24);
  v5 = (void *)a2[3];
  a2[3] = v4;

}

void std::__function::__func<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0,std::allocator<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B5110;

}

void std::__function::__func<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0,std::allocator<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_1E42B5110;

  operator delete((void *)a1);
}

void std::__function::__func<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0,std::allocator<md::LabelManager::setClientLocalizedStrings(VKClientLocalizedStrings *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(id *)(a1 + 24);
  v5 = v2;
  if (v2)
  {
    v3 = v2;
    v2 = v5;
  }
  v4 = *(void **)(v1 + 3472);
  *(_QWORD *)(v1 + 3472) = v2;

}

BOOL md::requiredDataForPipeline(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  _BOOL8 result;
  md *v34;

  if (!a4)
    return 0;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a1;
    if (a4 <= a1)
      v7 = a1 % a4;
  }
  else
  {
    v7 = (a4 - 1) & a1;
  }
  v8 = *(_QWORD **)(a3 + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (!v9)
    return 0;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == a1)
      {
        if (v9[2] == a1)
          goto LABEL_22;
      }
      else if ((v11 & (a4 - 1)) != v7)
      {
        return 0;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return 0;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == a1)
      break;
    if (v10 >= a4)
      v10 %= a4;
    if (v10 != v7)
      return 0;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return 0;
  }
  if (v9[2] != a1)
    goto LABEL_11;
LABEL_22:
  if ((v12 & 1) == 0)
  {
    if ((_DWORD)v34)
    {
      md::typeToIntMap(v34);
    }
  }
  if (!qword_1EE5779D0)
    goto LABEL_60;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = a1;
    if (qword_1EE5779D0 <= a1)
      v14 = a1 % qword_1EE5779D0;
  }
  else
  {
    v14 = (qword_1EE5779D0 - 1) & a1;
  }
  v15 = *(uint64_t ***)(md::typeToIntMap(void)::typeToIntMap + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
LABEL_60:
    abort();
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == a1)
      {
        if (v16[2] == a1)
          goto LABEL_43;
      }
      else if ((v18 & (qword_1EE5779D0 - 1)) != v14)
      {
        goto LABEL_60;
      }
      v16 = (uint64_t *)*v16;
      if (!v16)
        goto LABEL_60;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != a1)
    {
      if (v17 >= qword_1EE5779D0)
        v17 %= (unint64_t)qword_1EE5779D0;
      if (v17 != v14)
        goto LABEL_60;
      goto LABEL_33;
    }
    if (v16[2] != a1)
    {
LABEL_33:
      v16 = (uint64_t *)*v16;
      if (!v16)
        goto LABEL_60;
      continue;
    }
    break;
  }
LABEL_43:
  v19 = *((_DWORD *)v16 + 6);
  if (v19 == -1)
  {
    v19 = *((_DWORD *)v16 + 7);
    if (v19 == -1)
      return 0;
  }
  v20 = *(_QWORD *)(a2 + 16);
  if (!v20)
    return 0;
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 72);
  v22 = *(_QWORD *)(v21 + 8);
  v23 = *(_QWORD *)(v22 + 40);
  if (!v23)
  {
LABEL_50:
    v26 = *(_QWORD *)(v21 + 24);
    v27 = *(_QWORD *)(v26 + 40);
    if (v27)
    {
      v28 = *(_QWORD *)(v26 + 32);
      v29 = v27 - 1;
      v30 = (unsigned __int8 *)(v28 + 1);
      do
      {
        v31 = *v30;
        v30 += 2;
        result = v31 == (uint64_t)v19;
      }
      while (v31 != (uint64_t)v19 && v29-- != 0);
      return result;
    }
    return 0;
  }
  v24 = (unsigned __int8 *)(*(_QWORD *)(v22 + 32) + 1);
  while (1)
  {
    v25 = *v24;
    v24 += 2;
    if (v25 == (uint64_t)v19)
      return 1;
    if (!--v23)
      goto LABEL_50;
  }
}

void sub_19F96846C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::typeToIntMap(md *this)
{
  unsigned __int8 v1;
  unint64_t v2[130];

  v2[128] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      v2[0] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>();
      v2[1] = -4294967285;
      v2[2] = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>();
      v2[3] = 0xFFFFFFFF00000004;
      v2[4] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>();
      v2[5] = 0xFFFFFFFF00000001;
      v2[6] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>();
      v2[7] = 0x12FFFFFFFFLL;
      v2[8] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>();
      v2[9] = 0x13FFFFFFFFLL;
      v2[10] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>();
      v2[11] = 0xFFFFFFFF00000002;
      v2[12] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>();
      v2[13] = 0xFFFFFFFF00000003;
      v2[14] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>();
      v2[15] = 0x500000005;
      v2[16] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>();
      v2[17] = -4294967290;
      v2[18] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>();
      v2[19] = 0x700000007;
      v2[20] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>();
      v2[21] = 0xFFFFFFFF00000008;
      v2[22] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>();
      v2[23] = -4294967287;
      v2[24] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>();
      v2[25] = -4294967286;
      v2[26] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>();
      v2[27] = 0xC0000000CLL;
      v2[28] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>();
      v2[29] = 0xD0000000DLL;
      v2[30] = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>();
      v2[31] = -4294967282;
      v2[32] = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>();
      v2[33] = 0xFFFFFFFF0000000FLL;
      v2[34] = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>();
      v2[35] = 0xFFFFFFFF00000010;
      v2[36] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>();
      v2[37] = -4294967279;
      v2[38] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>>();
      v2[39] = -4294967278;
      v2[40] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>>();
      v2[41] = -4294967277;
      v2[42] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>();
      v2[43] = -4294967276;
      v2[44] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>();
      v2[45] = 0xFFFFFFFFLL;
      v2[46] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>();
      v2[47] = 0x1FFFFFFFFLL;
      v2[48] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>>();
      v2[49] = 0x2FFFFFFFFLL;
      v2[50] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>();
      v2[51] = 0x3FFFFFFFFLL;
      v2[52] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>();
      v2[53] = 0x4FFFFFFFFLL;
      v2[54] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>();
      v2[55] = 0x6FFFFFFFFLL;
      v2[56] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>();
      v2[57] = 0x8FFFFFFFFLL;
      v2[58] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>();
      v2[59] = 0x9FFFFFFFFLL;
      v2[60] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>();
      v2[61] = 0xBFFFFFFFFLL;
      v2[62] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>();
      v2[63] = 0xDFFFFFFFFLL;
      v2[64] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>();
      v2[65] = 0x10FFFFFFFFLL;
      v2[66] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>();
      v2[67] = 0x12FFFFFFFFLL;
      v2[68] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>();
      v2[69] = 0x13FFFFFFFFLL;
      v2[70] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>();
      v2[71] = 0x14FFFFFFFFLL;
      v2[72] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>();
      v2[73] = 0x15FFFFFFFFLL;
      v2[74] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>();
      v2[75] = 0x16FFFFFFFFLL;
      v2[76] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>();
      v2[77] = 0x19FFFFFFFFLL;
      v2[78] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>();
      v2[79] = 0xEFFFFFFFFLL;
      v2[80] = gdc::typeIndex<DaVinci::AmbientTexture>();
      v2[81] = 0xFFFFFFFFLL;
      v2[82] = gdc::typeIndex<DaVinci::ShadowTexture>();
      v2[83] = 0xFFFFFFFF00000001;
      v2[84] = gdc::typeIndex<DaVinci::TexTexture>();
      v2[85] = 0xFFFFFFFF00000002;
      v2[86] = gdc::typeIndex<DaVinci::OcclusionTexture>();
      v2[87] = 0xFFFFFFFF00000003;
      v2[88] = gdc::typeIndex<DaVinci::RouteMaskTexture>();
      v2[89] = 0xFFFFFFFF00000004;
      v2[90] = gdc::typeIndex<DaVinci::EmissiveTexture>();
      v2[91] = -4294967291;
      v2[92] = gdc::typeIndex<DaVinci::OverlayTexture>();
      v2[93] = -4294967290;
      v2[94] = gdc::typeIndex<DaVinci::StyleIndexTexture>();
      v2[95] = 0xFFFFFFFF00000007;
      v2[96] = gdc::typeIndex<DaVinci::StyleTexture>();
      v2[97] = 0xFFFFFFFF00000008;
      v2[98] = gdc::typeIndex<DaVinci::AridityTexture>();
      v2[99] = -4294967287;
      v2[100] = gdc::typeIndex<DaVinci::TemperatureTexture>();
      v2[101] = -4294967286;
      v2[102] = gdc::typeIndex<DaVinci::Gradient1Texture>();
      v2[103] = -4294967285;
      v2[104] = gdc::typeIndex<DaVinci::Gradient2Texture>();
      v2[105] = -4294967284;
      v2[106] = gdc::typeIndex<DaVinci::DiffuseTexture>();
      v2[107] = -4294967283;
      v2[108] = gdc::typeIndex<DaVinci::AlphaTexture>();
      v2[109] = -4294967282;
      v2[110] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>();
      v2[111] = 0xFFFFFFFF00000002;
      v2[112] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>();
      v2[113] = -4294967290;
      v2[114] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>();
      v2[115] = 0xFFFFFFFF00000003;
      v2[116] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>();
      v2[117] = -4294967291;
      v2[118] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>();
      v2[119] = 1;
      v2[120] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>();
      v2[121] = 0x100000004;
      v2[122] = gdc::typeIndex<Flyover::AtmosphereTexture>();
      v2[123] = 0xFFFFFFFF00000000;
      v2[124] = gdc::typeIndex<Flyover::DiffuseTexture>();
      v2[125] = 0x1FFFFFFFFLL;
      v2[126] = gdc::typeIndex<Flyover::NightTexture>();
      v2[127] = 0x2FFFFFFFFLL;
      std::unordered_map<unsigned long,std::pair<int,int>>::unordered_map(&md::typeToIntMap(void)::typeToIntMap, v2, 64);
      __cxa_atexit((void (*)(void *))std::unordered_map<unsigned long,std::pair<int,int>>::~unordered_map[abi:nn180100], &md::typeToIntMap(void)::typeToIntMap, &dword_19F029000);
    }
  }
}

void sub_19F9688F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<unsigned long,std::pair<int,int>>::unordered_map(uint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v42;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (!a3)
    return a1;
  v5 = a2;
  v6 = 0;
  v7 = 0;
  v8 = a1 + 2;
  v9 = &a2[2 * a3];
  do
  {
    v10 = *v5;
    if (v6)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v3 = *v5;
        if (v10 >= v6)
          v3 = v10 % v6;
      }
      else
      {
        v3 = (v6 - 1) & v10;
      }
      v12 = *(_QWORD **)(*a1 + 8 * v3);
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if (v13)
        {
          if (v11.u32[0] < 2uLL)
          {
            while (1)
            {
              v15 = v13[1];
              if (v15 == v10)
              {
                if (v13[2] == v10)
                  goto LABEL_83;
              }
              else if ((v15 & (v6 - 1)) != v3)
              {
                goto LABEL_23;
              }
              v13 = (_QWORD *)*v13;
              if (!v13)
                goto LABEL_23;
            }
          }
          do
          {
            v14 = v13[1];
            if (v14 == v10)
            {
              if (v13[2] == v10)
                goto LABEL_83;
            }
            else
            {
              if (v14 >= v6)
                v14 %= v6;
              if (v14 != v3)
                break;
            }
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
      }
    }
LABEL_23:
    v16 = operator new(0x20uLL);
    *v16 = 0;
    v16[1] = v10;
    *((_OWORD *)v16 + 1) = *(_OWORD *)v5;
    v17 = (float)(unint64_t)(v7 + 1);
    v18 = *((float *)a1 + 8);
    if (!v6 || (float)(v18 * (float)v6) < v17)
    {
      v19 = (v6 & (v6 - 1)) != 0;
      if (v6 < 3)
        v19 = 1;
      v20 = v19 | (2 * v6);
      v21 = vcvtps_u32_f32(v17 / v18);
      if (v20 <= v21)
        prime = v21;
      else
        prime = v20;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v6 = a1[1];
      }
      if (prime <= v6)
      {
        if (prime >= v6)
          goto LABEL_60;
        v33 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
        if (v6 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
        {
          v33 = std::__next_prime(v33);
        }
        else
        {
          v35 = 1 << -(char)__clz(v33 - 1);
          if (v33 >= 2)
            v33 = v35;
        }
        if (prime <= v33)
          prime = v33;
        if (prime >= v6)
        {
          v6 = a1[1];
LABEL_60:
          if ((v6 & (v6 - 1)) != 0)
          {
            if (v10 >= v6)
              v3 = v10 % v6;
            else
              v3 = v10;
          }
          else
          {
            v3 = (v6 - 1) & v10;
          }
          goto LABEL_73;
        }
        if (!prime)
        {
          v42 = (void *)*a1;
          *a1 = 0;
          if (v42)
            operator delete(v42);
          v6 = 0;
          a1[1] = 0;
          goto LABEL_60;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v23 = operator new(8 * prime);
      v24 = (void *)*a1;
      *a1 = (uint64_t)v23;
      if (v24)
        operator delete(v24);
      v25 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v25++) = 0;
      while (prime != v25);
      v26 = (_QWORD *)*v8;
      if (!*v8)
      {
LABEL_59:
        v6 = prime;
        goto LABEL_60;
      }
      v27 = v26[1];
      v28 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v29 = v27 & v28;
        *(_QWORD *)(*a1 + 8 * v29) = v8;
        for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
        {
          v31 = i[1] & v28;
          if (v31 == v29)
          {
            v26 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v31))
          {
            *v26 = *i;
            v32 = 8 * v31;
            *i = **(_QWORD **)(*a1 + v32);
            **(_QWORD **)(*a1 + v32) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v31) = v26;
            v26 = i;
            v29 = v31;
          }
        }
        goto LABEL_59;
      }
      if (v27 >= prime)
        v27 %= prime;
      *(_QWORD *)(*a1 + 8 * v27) = v8;
      v36 = (_QWORD *)*v26;
      if (!*v26)
        goto LABEL_59;
      while (1)
      {
        v38 = v36[1];
        if (v38 >= prime)
          v38 %= prime;
        if (v38 != v27)
        {
          if (!*(_QWORD *)(*a1 + 8 * v38))
          {
            *(_QWORD *)(*a1 + 8 * v38) = v26;
            goto LABEL_64;
          }
          *v26 = *v36;
          v37 = 8 * v38;
          *v36 = **(_QWORD **)(*a1 + v37);
          **(_QWORD **)(*a1 + v37) = v36;
          v36 = v26;
        }
        v38 = v27;
LABEL_64:
        v26 = v36;
        v36 = (_QWORD *)*v36;
        v27 = v38;
        if (!v36)
          goto LABEL_59;
      }
    }
LABEL_73:
    v39 = *a1;
    v40 = *(_QWORD **)(*a1 + 8 * v3);
    if (v40)
    {
      *v16 = *v40;
LABEL_81:
      *v40 = v16;
      goto LABEL_82;
    }
    *v16 = *v8;
    *v8 = v16;
    *(_QWORD *)(v39 + 8 * v3) = v8;
    if (*v16)
    {
      v41 = *(_QWORD *)(*v16 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v41 >= v6)
          v41 %= v6;
      }
      else
      {
        v41 &= v6 - 1;
      }
      v40 = (_QWORD *)(*a1 + 8 * v41);
      goto LABEL_81;
    }
LABEL_82:
    v7 = a1[3] + 1;
    a1[3] = v7;
LABEL_83:
    v5 += 2;
  }
  while (v5 != v9);
  return a1;
}

uint64_t std::unordered_map<unsigned long,std::pair<int,int>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL md::requiredDeviceDataForPipeline(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  _BOOL8 result;
  md *v34;

  if (!a4)
    return 0;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a1;
    if (a4 <= a1)
      v7 = a1 % a4;
  }
  else
  {
    v7 = (a4 - 1) & a1;
  }
  v8 = *(_QWORD **)(a3 + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (!v9)
    return 0;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == a1)
      {
        if (v9[2] == a1)
          goto LABEL_22;
      }
      else if ((v11 & (a4 - 1)) != v7)
      {
        return 0;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return 0;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == a1)
      break;
    if (v10 >= a4)
      v10 %= a4;
    if (v10 != v7)
      return 0;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return 0;
  }
  if (v9[2] != a1)
    goto LABEL_11;
LABEL_22:
  if ((v12 & 1) == 0)
  {
    if ((_DWORD)v34)
    {
      md::typeToIntMap(v34);
    }
  }
  if (!qword_1EE5779D0)
    goto LABEL_60;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = a1;
    if (qword_1EE5779D0 <= a1)
      v14 = a1 % qword_1EE5779D0;
  }
  else
  {
    v14 = (qword_1EE5779D0 - 1) & a1;
  }
  v15 = *(uint64_t ***)(md::typeToIntMap(void)::typeToIntMap + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
LABEL_60:
    abort();
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == a1)
      {
        if (v16[2] == a1)
          goto LABEL_43;
      }
      else if ((v18 & (qword_1EE5779D0 - 1)) != v14)
      {
        goto LABEL_60;
      }
      v16 = (uint64_t *)*v16;
      if (!v16)
        goto LABEL_60;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != a1)
    {
      if (v17 >= qword_1EE5779D0)
        v17 %= (unint64_t)qword_1EE5779D0;
      if (v17 != v14)
        goto LABEL_60;
      goto LABEL_33;
    }
    if (v16[2] != a1)
    {
LABEL_33:
      v16 = (uint64_t *)*v16;
      if (!v16)
        goto LABEL_60;
      continue;
    }
    break;
  }
LABEL_43:
  v19 = *((_DWORD *)v16 + 6);
  if (v19 == -1)
  {
    v19 = *((_DWORD *)v16 + 7);
    if (v19 == -1)
      return 0;
  }
  v20 = *(_QWORD *)(a2 + 16);
  if (!v20)
    return 0;
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 72);
  v22 = *(_QWORD *)(v21 + 8);
  v23 = *(_QWORD *)(v22 + 56);
  if (!v23)
  {
LABEL_50:
    v26 = *(_QWORD *)(v21 + 24);
    v27 = *(_QWORD *)(v26 + 56);
    if (v27)
    {
      v28 = *(_QWORD *)(v26 + 48);
      v29 = v27 - 1;
      v30 = (unsigned __int8 *)(v28 + 1);
      do
      {
        v31 = *v30;
        v30 += 2;
        result = v31 == (uint64_t)v19;
      }
      while (v31 != (uint64_t)v19 && v29-- != 0);
      return result;
    }
    return 0;
  }
  v24 = (unsigned __int8 *)(*(_QWORD *)(v22 + 48) + 1);
  while (1)
  {
    v25 = *v24;
    v24 += 2;
    if (v25 == (uint64_t)v19)
      return 1;
    if (!--v23)
      goto LABEL_50;
  }
}

void sub_19F96909C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL md::requiredTextureForPipeline(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  _BOOL8 result;
  md *v34;

  if (!a4)
    return 0;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a1;
    if (a4 <= a1)
      v7 = a1 % a4;
  }
  else
  {
    v7 = (a4 - 1) & a1;
  }
  v8 = *(_QWORD **)(a3 + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (!v9)
    return 0;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == a1)
      {
        if (v9[2] == a1)
          goto LABEL_22;
      }
      else if ((v11 & (a4 - 1)) != v7)
      {
        return 0;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return 0;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == a1)
      break;
    if (v10 >= a4)
      v10 %= a4;
    if (v10 != v7)
      return 0;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return 0;
  }
  if (v9[2] != a1)
    goto LABEL_11;
LABEL_22:
  if ((v12 & 1) == 0)
  {
    if ((_DWORD)v34)
    {
      md::typeToIntMap(v34);
    }
  }
  if (!qword_1EE5779D0)
    goto LABEL_60;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = a1;
    if (qword_1EE5779D0 <= a1)
      v14 = a1 % qword_1EE5779D0;
  }
  else
  {
    v14 = (qword_1EE5779D0 - 1) & a1;
  }
  v15 = *(uint64_t ***)(md::typeToIntMap(void)::typeToIntMap + 8 * v14);
  if (!v15 || (v16 = *v15) == 0)
LABEL_60:
    abort();
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == a1)
      {
        if (v16[2] == a1)
          goto LABEL_43;
      }
      else if ((v18 & (qword_1EE5779D0 - 1)) != v14)
      {
        goto LABEL_60;
      }
      v16 = (uint64_t *)*v16;
      if (!v16)
        goto LABEL_60;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != a1)
    {
      if (v17 >= qword_1EE5779D0)
        v17 %= (unint64_t)qword_1EE5779D0;
      if (v17 != v14)
        goto LABEL_60;
      goto LABEL_33;
    }
    if (v16[2] != a1)
    {
LABEL_33:
      v16 = (uint64_t *)*v16;
      if (!v16)
        goto LABEL_60;
      continue;
    }
    break;
  }
LABEL_43:
  v19 = *((_DWORD *)v16 + 6);
  if (v19 == -1)
  {
    v19 = *((_DWORD *)v16 + 7);
    if (v19 == -1)
      return 0;
  }
  v20 = *(_QWORD *)(a2 + 16);
  if (!v20)
    return 0;
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + 72);
  v22 = *(_QWORD *)(v21 + 8);
  v23 = *(_QWORD *)(v22 + 72);
  if (!v23)
  {
LABEL_50:
    v26 = *(_QWORD *)(v21 + 24);
    v27 = *(_QWORD *)(v26 + 72);
    if (v27)
    {
      v28 = *(_QWORD *)(v26 + 64);
      v29 = v27 - 1;
      v30 = (unsigned __int8 *)(v28 + 1);
      do
      {
        v31 = *v30;
        v30 += 2;
        result = v31 == (uint64_t)v19;
      }
      while (v31 != (uint64_t)v19 && v29-- != 0);
      return result;
    }
    return 0;
  }
  v24 = (unsigned __int8 *)(*(_QWORD *)(v22 + 64) + 1);
  while (1)
  {
    v25 = *v24;
    v24 += 2;
    if (v25 == (uint64_t)v19)
      return 1;
    if (!--v23)
      goto LABEL_50;
  }
}

void sub_19F969340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::MarkPipelineDataRequirements::operator()(ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::MarkPipelineDataRequirements::operator()(ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::MarkPipelineDataRequirements::operator()(ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::MarkPipelineDataRequirements::operator()(ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BEC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::MarkPipelineDataRequirements::operator()(ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::MarkPipelineDataRequirements::operator()(ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BEC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::MarkPipelineDataRequirements::operator()(ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::MarkPipelineDataRequirements::operator()(ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6))()
{
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t (***v30)();
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t (***v33)();
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t (***v36)();
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t (***v39)();
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t (***v42)();
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t (***v45)();
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t (***v48)();
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t (***v51)();
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t (***v54)();
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t (***v57)();
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t (***v60)();
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t (***v63)();
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t (***v66)();
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t (***v69)();
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t (***v72)();
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t (***v75)();
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t (***v78)();
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t (***v83)();
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t (***v86)();
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t (***v89)();
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t (***v92)();
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t (***v97)();
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t (***v100)();
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t (***v103)();
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t (***v106)();
  uint64_t v107;
  unsigned __int8 v108;
  uint64_t (***v109)();
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t (***v112)();
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t (***v115)();
  uint64_t v116;
  unsigned __int8 v117;
  uint64_t (***v118)();
  uint64_t v119;
  unsigned __int8 v120;
  uint64_t (***v121)();
  uint64_t v122;
  unsigned __int8 v123;
  uint64_t (***v124)();
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t (***v127)();
  uint64_t v128;
  unsigned __int8 v129;
  uint64_t (***v130)();
  uint64_t v131;
  unsigned __int8 v132;
  uint64_t (***v133)();
  uint64_t v134;
  unsigned __int8 v135;
  uint64_t (***v136)();
  uint64_t v137;
  unsigned __int8 v138;
  uint64_t (***v139)();
  uint64_t v140;
  unsigned __int8 v141;
  uint64_t (***v142)();
  uint64_t v143;
  unsigned __int8 v144;
  uint64_t (***v145)();
  uint64_t v146;
  unsigned __int8 v147;
  uint64_t (***v148)();
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t (***v151)();
  uint64_t v152;
  unsigned __int8 v153;
  uint64_t (***v154)();
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t (***v157)();
  uint64_t v158;
  unsigned __int8 v159;
  uint64_t (***v160)();
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t (***v163)();
  uint64_t v164;
  unsigned __int8 v165;
  uint64_t (***v166)();
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t (***v169)();
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t (***v172)();
  uint64_t v173;
  unsigned __int8 v174;
  uint64_t (***v175)();
  uint64_t v176;
  unsigned __int8 v177;
  uint64_t (***v178)();
  uint64_t v179;
  unsigned __int8 v180;
  uint64_t (***v181)();
  uint64_t v182;
  unsigned __int8 v183;
  uint64_t (***v184)();
  uint64_t v185;
  unsigned __int8 v186;
  uint64_t (***v187)();
  uint64_t v188;
  unsigned __int8 v189;
  uint64_t (***v190)();
  uint64_t v191;
  unsigned __int8 v192;
  uint64_t (***v193)();
  uint64_t v194;
  unsigned __int8 v195;
  uint64_t (***v196)();
  uint64_t v197;
  unsigned __int8 v198;
  uint64_t (***result)();
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  char v257;
  uint64_t (**v258)();
  uint64_t v259;
  int v260;
  uint64_t (***v261)();
  uint64_t (**v262)();
  uint64_t v263;
  int v264;
  uint64_t (***v265)();
  int v266;
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD ***)(a1 + 16);
  v8 = **(_QWORD ***)(a1 + 8);
  v9 = *a6;
  v10 = *a6;
  v11 = v8[50];
  v12 = (v8[51] - v11) >> 3;
  if (v10 < v12
    && (v13 = *(_QWORD *)(v11 + 8 * v10)) != 0
    && HIDWORD(v9) == HIDWORD(v13)
    && ((v14 = v8[53], v15 = (uint64_t *)(v14 + 16 * v13), v15 != (uint64_t *)v8[54])
      ? (v16 = v14 == 0)
      : (v16 = 1),
        !v16))
  {
    v25 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v8 + 37), v9, a6);
    ++v25[3];
    v17 = *v15;
    v8 = **(_QWORD ***)(a1 + 8);
    v9 = *a6;
    v11 = v8[50];
    v10 = *a6;
    if (v10 >= (v8[51] - v11) >> 3)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
    if (v10 >= v12)
    {
LABEL_18:
      v23 = 0;
      goto LABEL_19;
    }
  }
  v18 = *(_QWORD *)(v11 + 8 * v10);
  if (!v18 || HIDWORD(v9) != HIDWORD(v18))
    goto LABEL_18;
  v19 = v8[53];
  if (v19 + 16 * v18 == v8[54] || v19 == 0)
    goto LABEL_18;
  v21 = v18;
  v22 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v8 + 37), v9, a6);
  ++v22[3];
  v23 = *(_QWORD *)(v19 + 16 * v21 + 8);
LABEL_19:
  v26 = *v7;
  v27 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v28 = *v27;
  if ((v29 & 1) == 0
  {
    do
      v201 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v201 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::AmbientTexture>(void)::index = v201;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::AmbientTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FCF0;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FCF0;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v30 = v261;
    if (v261 == &v258)
    {
      v31 = 4;
      v30 = &v258;
      goto LABEL_27;
    }
    if (v261)
    {
      v31 = 5;
LABEL_27:
      (*v30)[v31]();
    }
  }
  if ((v32 & 1) == 0
  {
    do
      v202 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v202 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::AridityTexture>(void)::index = v202;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::AridityTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FD38;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FD38;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v33 = v261;
    if (v261 == &v258)
    {
      v34 = 4;
      v33 = &v258;
      goto LABEL_36;
    }
    if (v261)
    {
      v34 = 5;
LABEL_36:
      (*v33)[v34]();
    }
  }
  if ((v35 & 1) == 0
  {
    do
      v203 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v203 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index = v203;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FD80;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FD80;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v36 = v261;
    if (v261 == &v258)
    {
      v37 = 4;
      v36 = &v258;
      goto LABEL_45;
    }
    if (v261)
    {
      v37 = 5;
LABEL_45:
      (*v36)[v37]();
    }
  }
  if ((v38 & 1) == 0
  {
    do
      v204 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v204 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index = v204;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FE10;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FE10;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v39 = v261;
    if (v261 == &v258)
    {
      v40 = 4;
      v39 = &v258;
      goto LABEL_54;
    }
    if (v261)
    {
      v40 = 5;
LABEL_54:
      (*v39)[v40]();
    }
  }
  if ((v41 & 1) == 0
  {
    do
      v205 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v205 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index = v205;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FE58;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FE58;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v42 = v261;
    if (v261 == &v258)
    {
      v43 = 4;
      v42 = &v258;
      goto LABEL_63;
    }
    if (v261)
    {
      v43 = 5;
LABEL_63:
      (*v42)[v43]();
    }
  }
  if ((v44 & 1) == 0
  {
    do
      v206 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v206 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index = v206;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FEA0;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FEA0;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v45 = v261;
    if (v261 == &v258)
    {
      v46 = 4;
      v45 = &v258;
      goto LABEL_72;
    }
    if (v261)
    {
      v46 = 5;
LABEL_72:
      (*v45)[v46]();
    }
  }
  if ((v47 & 1) == 0
  {
    do
      v207 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v207 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index = v207;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FEE8;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FEE8;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v48 = v261;
    if (v261 == &v258)
    {
      v49 = 4;
      v48 = &v258;
      goto LABEL_81;
    }
    if (v261)
    {
      v49 = 5;
LABEL_81:
      (*v48)[v49]();
    }
  }
  if ((v50 & 1) == 0
  {
    do
      v208 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v208 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::OverlayTexture>(void)::index = v208;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::OverlayTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FDC8;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FDC8;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v51 = v261;
    if (v261 == &v258)
    {
      v52 = 4;
      v51 = &v258;
      goto LABEL_90;
    }
    if (v261)
    {
      v52 = 5;
LABEL_90:
      (*v51)[v52]();
    }
  }
  if ((v53 & 1) == 0
  {
    do
      v209 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v209 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index = v209;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FF30;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FF30;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v54 = v261;
    if (v261 == &v258)
    {
      v55 = 4;
      v54 = &v258;
      goto LABEL_99;
    }
    if (v261)
    {
      v55 = 5;
LABEL_99:
      (*v54)[v55]();
    }
  }
  if ((v56 & 1) == 0
  {
    do
      v210 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v210 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::ShadowTexture>(void)::index = v210;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::ShadowTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FCA8;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FCA8;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v57 = v261;
    if (v261 == &v258)
    {
      v58 = 4;
      v57 = &v258;
      goto LABEL_108;
    }
    if (v261)
    {
      v58 = 5;
LABEL_108:
      (*v57)[v58]();
    }
  }
  if ((v59 & 1) == 0
  {
    do
      v211 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v211 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index = v211;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FF78;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FF78;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v60 = v261;
    if (v261 == &v258)
    {
      v61 = 4;
      v60 = &v258;
      goto LABEL_117;
    }
    if (v261)
    {
      v61 = 5;
LABEL_117:
      (*v60)[v61]();
    }
  }
  if ((v62 & 1) == 0
  {
    do
      v212 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v212 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::StyleTexture>(void)::index = v212;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::StyleTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FC60;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FC60;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v63 = v261;
    if (v261 == &v258)
    {
      v64 = 4;
      v63 = &v258;
      goto LABEL_126;
    }
    if (v261)
    {
      v64 = 5;
LABEL_126:
      (*v63)[v64]();
    }
  }
  if ((v65 & 1) == 0
  {
    do
      v213 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v213 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index = v213;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FFC0;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FFC0;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v66 = v261;
    if (v261 == &v258)
    {
      v67 = 4;
      v66 = &v258;
      goto LABEL_135;
    }
    if (v261)
    {
      v67 = 5;
LABEL_135:
      (*v66)[v67]();
    }
  }
  if ((v68 & 1) == 0
  {
    do
      v214 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v214 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::TexTexture>(void)::index = v214;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<DaVinci::TexTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E427FC18;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E427FC18;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v69 = v261;
    if (v261 == &v258)
    {
      v70 = 4;
      v69 = &v258;
      goto LABEL_144;
    }
    if (v261)
    {
      v70 = 5;
LABEL_144:
      (*v69)[v70]();
    }
  }
  if ((v71 & 1) == 0
  {
    do
      v215 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v215 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index = v215;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280098;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E4280098;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v72 = v261;
    if (v261 == &v258)
    {
      v73 = 4;
      v72 = &v258;
      goto LABEL_153;
    }
    if (v261)
    {
      v73 = 5;
LABEL_153:
      (*v72)[v73]();
    }
  }
  if ((v74 & 1) == 0
  {
    do
      v216 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v216 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<Flyover::DiffuseTexture>(void)::index = v216;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<Flyover::DiffuseTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280050;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E4280050;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v75 = v261;
    if (v261 == &v258)
    {
      v76 = 4;
      v75 = &v258;
      goto LABEL_162;
    }
    if (v261)
    {
      v76 = 5;
LABEL_162:
      (*v75)[v76]();
    }
  }
  if ((v77 & 1) == 0
  {
    do
      v217 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v217 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<Flyover::NightTexture>(void)::index = v217;
  }
  if (md::requiredTextureForPipeline(gdc::typeIndex<Flyover::NightTexture>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280008;
    v259 = v28 << 32;
    v260 = HIDWORD(v28);
    v261 = &v258;
    v262 = &off_1E4280008;
    v265 = &v262;
    v263 = v28 << 32;
    v264 = HIDWORD(v28);
    v266 = 0;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v78 = v261;
    if (v261 == &v258)
    {
      v79 = 4;
      v78 = &v258;
      goto LABEL_171;
    }
    if (v261)
    {
      v79 = 5;
LABEL_171:
      (*v78)[v79]();
    }
  }
  v80 = *v7;
  v81 = *v27;
  if ((v82 & 1) == 0
  {
    do
      v218 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v218 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index = v218;
  }
  if (md::requiredDeviceDataForPipeline(gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E42805A8;
    v259 = v81 << 32;
    v260 = HIDWORD(v81);
    v261 = &v258;
    v262 = &off_1E42805A8;
    v265 = &v262;
    v263 = v81 << 32;
    v264 = HIDWORD(v81);
    v266 = 0;
    ecs2::Runtime::queueCommand(v80, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v83 = v261;
    if (v261 == &v258)
    {
      v84 = 4;
      v83 = &v258;
      goto LABEL_180;
    }
    if (v261)
    {
      v84 = 5;
LABEL_180:
      (*v83)[v84]();
    }
  }
  if ((v85 & 1) == 0
  {
    do
      v219 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v219 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index = v219;
  }
  if (md::requiredDeviceDataForPipeline(gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280560;
    v259 = v81 << 32;
    v260 = HIDWORD(v81);
    v261 = &v258;
    v262 = &off_1E4280560;
    v265 = &v262;
    v263 = v81 << 32;
    v264 = HIDWORD(v81);
    v266 = 0;
    ecs2::Runtime::queueCommand(v80, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v86 = v261;
    if (v261 == &v258)
    {
      v87 = 4;
      v86 = &v258;
      goto LABEL_189;
    }
    if (v261)
    {
      v87 = 5;
LABEL_189:
      (*v86)[v87]();
    }
  }
  if ((v88 & 1) == 0
  {
    do
      v220 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v220 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index = v220;
  }
  if (md::requiredDeviceDataForPipeline(gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280638;
    v259 = v81 << 32;
    v260 = HIDWORD(v81);
    v261 = &v258;
    v262 = &off_1E4280638;
    v265 = &v262;
    v263 = v81 << 32;
    v264 = HIDWORD(v81);
    v266 = 0;
    ecs2::Runtime::queueCommand(v80, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v89 = v261;
    if (v261 == &v258)
    {
      v90 = 4;
      v89 = &v258;
      goto LABEL_198;
    }
    if (v261)
    {
      v90 = 5;
LABEL_198:
      (*v89)[v90]();
    }
  }
  if ((v91 & 1) == 0
  {
    do
      v221 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v221 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index = v221;
  }
  if (md::requiredDeviceDataForPipeline(gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E42805F0;
    v259 = v81 << 32;
    v260 = HIDWORD(v81);
    v261 = &v258;
    v262 = &off_1E42805F0;
    v265 = &v262;
    v263 = v81 << 32;
    v264 = HIDWORD(v81);
    v266 = 0;
    ecs2::Runtime::queueCommand(v80, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v92 = v261;
    if (v261 == &v258)
    {
      v93 = 4;
      v92 = &v258;
      goto LABEL_207;
    }
    if (v261)
    {
      v93 = 5;
LABEL_207:
      (*v92)[v93]();
    }
  }
  v94 = *v7;
  v95 = *v27;
  if ((v96 & 1) == 0
  {
    do
      v222 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v222 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index = v222;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281370;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281370;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v97 = v261;
    if (v261 == &v258)
    {
      v98 = 4;
      v97 = &v258;
      goto LABEL_216;
    }
    if (v261)
    {
      v98 = 5;
LABEL_216:
      (*v97)[v98]();
    }
  }
  if ((v99 & 1) == 0
  {
    do
      v223 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v223 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index = v223;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281208;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281208;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v100 = v261;
    if (v261 == &v258)
    {
      v101 = 4;
      v100 = &v258;
      goto LABEL_225;
    }
    if (v261)
    {
      v101 = 5;
LABEL_225:
      (*v100)[v101]();
    }
  }
  if ((v102 & 1) == 0
  {
    do
      v224 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v224 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index = v224;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280EF0;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280EF0;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v103 = v261;
    if (v261 == &v258)
    {
      v104 = 4;
      v103 = &v258;
      goto LABEL_234;
    }
    if (v261)
    {
      v104 = 5;
LABEL_234:
      (*v103)[v104]();
    }
  }
  if ((v105 & 1) == 0
  {
    do
      v225 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v225 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index = v225;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E42810A0;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E42810A0;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v106 = v261;
    if (v261 == &v258)
    {
      v107 = 4;
      v106 = &v258;
      goto LABEL_243;
    }
    if (v261)
    {
      v107 = 5;
LABEL_243:
      (*v106)[v107]();
    }
  }
  if ((v108 & 1) == 0
  {
    do
      v226 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v226 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index = v226;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280F80;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280F80;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v109 = v261;
    if (v261 == &v258)
    {
      v110 = 4;
      v109 = &v258;
      goto LABEL_252;
    }
    if (v261)
    {
      v110 = 5;
LABEL_252:
      (*v109)[v110]();
    }
  }
  if ((v111 & 1) == 0
  {
    do
      v227 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v227 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index = v227;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280E60;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280E60;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v112 = v261;
    if (v261 == &v258)
    {
      v113 = 4;
      v112 = &v258;
      goto LABEL_261;
    }
    if (v261)
    {
      v113 = 5;
LABEL_261:
      (*v112)[v113]();
    }
  }
  if ((v114 & 1) == 0
  {
    do
      v228 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v228 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index = v228;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280FC8;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280FC8;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v115 = v261;
    if (v261 == &v258)
    {
      v116 = 4;
      v115 = &v258;
      goto LABEL_270;
    }
    if (v261)
    {
      v116 = 5;
LABEL_270:
      (*v115)[v116]();
    }
  }
  if ((v117 & 1) == 0
  {
    do
      v229 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v229 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index = v229;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280EA8;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280EA8;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v118 = v261;
    if (v261 == &v258)
    {
      v119 = 4;
      v118 = &v258;
      goto LABEL_279;
    }
    if (v261)
    {
      v119 = 5;
LABEL_279:
      (*v118)[v119]();
    }
  }
  if ((v120 & 1) == 0
  {
    do
      v230 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v230 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index = v230;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281010;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281010;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v121 = v261;
    if (v261 == &v258)
    {
      v122 = 4;
      v121 = &v258;
      goto LABEL_288;
    }
    if (v261)
    {
      v122 = 5;
LABEL_288:
      (*v121)[v122]();
    }
  }
  if ((v123 & 1) == 0
  {
    do
      v231 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v231 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index = v231;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E42812E0;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E42812E0;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v124 = v261;
    if (v261 == &v258)
    {
      v125 = 4;
      v124 = &v258;
      goto LABEL_297;
    }
    if (v261)
    {
      v125 = 5;
LABEL_297:
      (*v124)[v125]();
    }
  }
  if ((v126 & 1) == 0
  {
    do
      v232 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v232 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index = v232;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280D88;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280D88;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v127 = v261;
    if (v261 == &v258)
    {
      v128 = 4;
      v127 = &v258;
      goto LABEL_306;
    }
    if (v261)
    {
      v128 = 5;
LABEL_306:
      (*v127)[v128]();
    }
  }
  if ((v129 & 1) == 0
  {
    do
      v233 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v233 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index = v233;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281178;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281178;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v130 = v261;
    if (v261 == &v258)
    {
      v131 = 4;
      v130 = &v258;
      goto LABEL_315;
    }
    if (v261)
    {
      v131 = 5;
LABEL_315:
      (*v130)[v131]();
    }
  }
  if ((v132 & 1) == 0
  {
    do
      v234 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v234 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index = v234;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280DD0;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280DD0;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v133 = v261;
    if (v261 == &v258)
    {
      v134 = 4;
      v133 = &v258;
      goto LABEL_324;
    }
    if (v261)
    {
      v134 = 5;
LABEL_324:
      (*v133)[v134]();
    }
  }
  if ((v135 & 1) == 0
  {
    do
      v235 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v235 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index = v235;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281298;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281298;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v136 = v261;
    if (v261 == &v258)
    {
      v137 = 4;
      v136 = &v258;
      goto LABEL_333;
    }
    if (v261)
    {
      v137 = 5;
LABEL_333:
      (*v136)[v137]();
    }
  }
  if ((v138 & 1) == 0
  {
    do
      v236 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v236 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index = v236;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E42810E8;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E42810E8;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v139 = v261;
    if (v261 == &v258)
    {
      v140 = 4;
      v139 = &v258;
      goto LABEL_342;
    }
    if (v261)
    {
      v140 = 5;
LABEL_342:
      (*v139)[v140]();
    }
  }
  if ((v141 & 1) == 0
  {
    do
      v237 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v237 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index = v237;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E42811C0;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E42811C0;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v142 = v261;
    if (v261 == &v258)
    {
      v143 = 4;
      v142 = &v258;
      goto LABEL_351;
    }
    if (v261)
    {
      v143 = 5;
LABEL_351:
      (*v142)[v143]();
    }
  }
  if ((v144 & 1) == 0
  {
    do
      v238 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v238 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index = v238;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281130;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281130;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v145 = v261;
    if (v261 == &v258)
    {
      v146 = 4;
      v145 = &v258;
      goto LABEL_360;
    }
    if (v261)
    {
      v146 = 5;
LABEL_360:
      (*v145)[v146]();
    }
  }
  if ((v147 & 1) == 0
  {
    do
      v239 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v239 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index = v239;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280E18;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280E18;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v148 = v261;
    if (v261 == &v258)
    {
      v149 = 4;
      v148 = &v258;
      goto LABEL_369;
    }
    if (v261)
    {
      v149 = 5;
LABEL_369:
      (*v148)[v149]();
    }
  }
  if ((v150 & 1) == 0
  {
    do
      v240 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v240 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index = v240;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281328;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281328;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v151 = v261;
    if (v261 == &v258)
    {
      v152 = 4;
      v151 = &v258;
      goto LABEL_378;
    }
    if (v261)
    {
      v152 = 5;
LABEL_378:
      (*v151)[v152]();
    }
  }
  if ((v153 & 1) == 0
  {
    do
      v241 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v241 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index = v241;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280F38;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280F38;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v154 = v261;
    if (v261 == &v258)
    {
      v155 = 4;
      v154 = &v258;
      goto LABEL_387;
    }
    if (v261)
    {
      v155 = 5;
LABEL_387:
      (*v154)[v155]();
    }
  }
  if ((v156 & 1) == 0
  {
    do
      v242 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v242 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index = v242;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281250;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281250;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v157 = v261;
    if (v261 == &v258)
    {
      v158 = 4;
      v157 = &v258;
      goto LABEL_396;
    }
    if (v261)
    {
      v158 = 5;
LABEL_396:
      (*v157)[v158]();
    }
  }
  if ((v159 & 1) == 0
  {
    do
      v243 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v243 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index = v243;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E42813B8;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E42813B8;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v160 = v261;
    if (v261 == &v258)
    {
      v161 = 4;
      v160 = &v258;
      goto LABEL_405;
    }
    if (v261)
    {
      v161 = 5;
LABEL_405:
      (*v160)[v161]();
    }
  }
  if ((v162 & 1) == 0
  {
    do
      v244 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v244 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index = v244;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281400;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281400;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v163 = v261;
    if (v261 == &v258)
    {
      v164 = 4;
      v163 = &v258;
      goto LABEL_414;
    }
    if (v261)
    {
      v164 = 5;
LABEL_414:
      (*v163)[v164]();
    }
  }
  if ((v165 & 1) == 0
  {
    do
      v245 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v245 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index = v245;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280CF8;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280CF8;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v166 = v261;
    if (v261 == &v258)
    {
      v167 = 4;
      v166 = &v258;
      goto LABEL_423;
    }
    if (v261)
    {
      v167 = 5;
LABEL_423:
      (*v166)[v167]();
    }
  }
  if ((v168 & 1) == 0
  {
    do
      v246 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v246 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index = v246;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280C20;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280C20;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v169 = v261;
    if (v261 == &v258)
    {
      v170 = 4;
      v169 = &v258;
      goto LABEL_432;
    }
    if (v261)
    {
      v170 = 5;
LABEL_432:
      (*v169)[v170]();
    }
  }
  if ((v171 & 1) == 0
  {
    do
      v247 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v247 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index = v247;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280C68;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280C68;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v172 = v261;
    if (v261 == &v258)
    {
      v173 = 4;
      v172 = &v258;
      goto LABEL_441;
    }
    if (v261)
    {
      v173 = 5;
LABEL_441:
      (*v172)[v173]();
    }
  }
  if ((v174 & 1) == 0
  {
    do
      v248 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v248 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index = v248;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280D40;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280D40;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v175 = v261;
    if (v261 == &v258)
    {
      v176 = 4;
      v175 = &v258;
      goto LABEL_450;
    }
    if (v261)
    {
      v176 = 5;
LABEL_450:
      (*v175)[v176]();
    }
  }
  if ((v177 & 1) == 0
  {
    do
      v249 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v249 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index = v249;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280CB0;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280CB0;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v178 = v261;
    if (v261 == &v258)
    {
      v179 = 4;
      v178 = &v258;
      goto LABEL_459;
    }
    if (v261)
    {
      v179 = 5;
LABEL_459:
      (*v178)[v179]();
    }
  }
  if ((v180 & 1) == 0
  {
    do
      v250 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v250 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index = v250;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4281058;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4281058;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v181 = v261;
    if (v261 == &v258)
    {
      v182 = 4;
      v181 = &v258;
      goto LABEL_468;
    }
    if (v261)
    {
      v182 = 5;
LABEL_468:
      (*v181)[v182]();
    }
  }
  if ((v183 & 1) == 0
  {
    do
      v251 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v251 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index = v251;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280BD8;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280BD8;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v184 = v261;
    if (v261 == &v258)
    {
      v185 = 4;
      v184 = &v258;
      goto LABEL_477;
    }
    if (v261)
    {
      v185 = 5;
LABEL_477:
      (*v184)[v185]();
    }
  }
  if ((v186 & 1) == 0
  {
    do
      v252 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v252 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index = v252;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280A70;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280A70;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v187 = v261;
    if (v261 == &v258)
    {
      v188 = 4;
      v187 = &v258;
      goto LABEL_486;
    }
    if (v261)
    {
      v188 = 5;
LABEL_486:
      (*v187)[v188]();
    }
  }
  if ((v189 & 1) == 0
  {
    do
      v253 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v253 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index = v253;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280AB8;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280AB8;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v190 = v261;
    if (v261 == &v258)
    {
      v191 = 4;
      v190 = &v258;
      goto LABEL_495;
    }
    if (v261)
    {
      v191 = 5;
LABEL_495:
      (*v190)[v191]();
    }
  }
  if ((v192 & 1) == 0
  {
    do
      v254 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v254 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index = v254;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280B90;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280B90;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v193 = v261;
    if (v261 == &v258)
    {
      v194 = 4;
      v193 = &v258;
      goto LABEL_504;
    }
    if (v261)
    {
      v194 = 5;
LABEL_504:
      (*v193)[v194]();
    }
  }
  if ((v195 & 1) == 0
  {
    do
      v255 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v255 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index = v255;
  }
  if (md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8)))
  {
    v258 = &off_1E4280B00;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280B00;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    v196 = v261;
    if (v261 == &v258)
    {
      v197 = 4;
      v196 = &v258;
      goto LABEL_513;
    }
    if (v261)
    {
      v197 = 5;
LABEL_513:
      (*v196)[v197]();
    }
  }
  if ((v198 & 1) == 0
  {
    do
      v256 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v256 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index = v256;
  }
  result = (uint64_t (***)())md::requiredDataForPipeline(gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index, v17, *(_QWORD *)v23, *(_QWORD *)(v23 + 8));
  if ((_DWORD)result)
  {
    v258 = &off_1E4280B48;
    v259 = v95 << 32;
    v260 = HIDWORD(v95);
    v261 = &v258;
    v262 = &off_1E4280B48;
    v265 = &v262;
    v263 = v95 << 32;
    v264 = HIDWORD(v95);
    v266 = 0;
    ecs2::Runtime::queueCommand(v94, (uint64_t)&v262);
    if (v266 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v266])(&v257, &v262);
    v266 = -1;
    result = v261;
    if (v261 == &v258)
    {
      v200 = 4;
      result = &v258;
    }
    else
    {
      if (!v261)
        return result;
      v200 = 5;
    }
    return (uint64_t (***)())(*result)[v200]();
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280B48;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280B48;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280B00;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280B00;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280B90;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280B90;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280AB8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280AB8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280A70;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280A70;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280BD8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280BD8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281058;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281058;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280CB0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280CB0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280D40;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280D40;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280C68;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280C68;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280C20;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280C20;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280CF8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280CF8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281400;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281400;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = 0;
  v4 = *(_QWORD *)(a1 + 12);
  v5 = 0xCBF29CE484222325;
  do
    v5 = 0x100000001B3 * (v5 ^ aStdStringViewG_654[v3++ + 38]);
  while (v3 != 103);
  v6 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>(a2, v5);
  v25 = v4;
  v7 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v6 + 4, (uint64_t)&v25);
  if ((v8 & 1) != 0)
  {
    v13 = (_BYTE *)v6[11];
    v12 = v6[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v6[10];
      v16 = v13 - v15;
      v17 = v13 - v15 + 1;
      if (v17 < 0)
        goto LABEL_30;
      v18 = v12 - (_QWORD)v15;
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)operator new(v19);
      else
        v20 = 0;
      v21 = &v20[v19];
      v14 = (uint64_t)&v20[v16 + 1];
      v22 = (char *)(v15 - v13);
      if (v15 == v13)
        v22 = 0;
      v6[10] = (uint64_t)&v20[v16 + (_QWORD)v22];
      v6[11] = v14;
      v6[12] = (uint64_t)v21;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v14 = (uint64_t)(v13 + 1);
    }
    v6[11] = v14;
    v9 = v6[31];
  }
  else
  {
    v9 = v6[31];
    if (v6[10] + (((uint64_t)v7 - v6[7]) >> 3) != v6[11])
    {
      v10 = (_QWORD *)v6[16];
      if (v10)
      {
        while (1)
        {
          v27 = &v25;
          v28 = 1;
          v26 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v26, &v27);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v23 = (_QWORD *)v6[22];
  if (v23)
  {
    while (1)
    {
      v27 = &v25;
      v28 = 1;
      v26 = v9;
      v24 = v23[6];
      if (!v24)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v24 + 48))(v24, &v26, &v27);
      v23 = (_QWORD *)*v23;
      if (!v23)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42813B8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42813B8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281250;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281250;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280F38;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280F38;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281328;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281328;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280E18;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280E18;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281130;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281130;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42811C0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42811C0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42810E8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42810E8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281298;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281298;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280DD0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280DD0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281178;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281178;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280D88;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280D88;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42812E0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42812E0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281010;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281010;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280EA8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280EA8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280FC8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280FC8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280E60;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280E60;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280F80;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280F80;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42810A0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42810A0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280EF0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280EF0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281208;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281208;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281370;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281370;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(gdc::Entity,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42805F0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42805F0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280638;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280638;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280560;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280560;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42805A8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42805A8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(gdc::Entity,md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::NightTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::NightTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280008;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::NightTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280008;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::NightTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280050;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280050;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280098;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280098;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FC18;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FC18;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FFC0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FFC0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::StyleTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::StyleTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FC60;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::StyleTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FC60;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::StyleTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FF78;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FF78;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FCA8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FCA8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FF30;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FF30;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FDC8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FDC8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FEE8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FEE8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FEA0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FEA0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FE58;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FE58;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FE10;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FE10;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FD80;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FD80;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::AridityTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::AridityTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FD38;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::AridityTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FD38;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::AridityTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FCF0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FCF0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(gdc::Entity,md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void md::typeToIntOrVectorMap(md *this)
{
  unsigned __int8 v1;
  unint64_t v2[3];

  v2[2] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      v2[0] = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>();
      v2[1] = 0xFFFFFFFFFLL;
      std::unordered_map<unsigned long,std::pair<int,int>>::unordered_map(&md::typeToIntOrVectorMap(void)::typeToIntOrVectorMap, v2, 1);
      __cxa_atexit((void (*)(void *))std::unordered_map<unsigned long,std::pair<int,int>>::~unordered_map[abi:nn180100], &md::typeToIntOrVectorMap(void)::typeToIntOrVectorMap, &dword_19F029000);
    }
  }
}

void sub_19F973C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_1,std::allocator<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_1>,void ()(md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_1,std::allocator<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_1>,void ()(md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_1,std::allocator<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_1>,void ()(md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_1,std::allocator<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_1>,void ()(md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&)>::operator()(uint64_t a1, unint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint8x8_t v33;
  unint64_t v34;
  uint64_t ***v35;
  uint64_t **v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  md *v42;

  v4 = **(_QWORD ***)(a1 + 8);
  v5 = *a2;
  v6 = v5;
  v7 = v4[50];
  v8 = (v4[51] - v7) >> 3;
  if (v5 < v8
    && (v9 = *(_QWORD *)(v7 + 8 * v5)) != 0
    && HIDWORD(v5) == HIDWORD(v9)
    && ((v10 = v4[53], v10 + 16 * v9 != v4[54]) ? (v11 = v10 == 0) : (v11 = 1), !v11))
  {
    v19 = *(_QWORD *)(v7 + 8 * v5);
    v20 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v4 + 37), v5, a2);
    ++v20[3];
    v12 = *(_QWORD **)(v10 + 16 * v19 + 8);
    v4 = **(_QWORD ***)(a1 + 8);
    v5 = *a2;
    v7 = v4[50];
    v6 = *a2;
    if (v6 >= (v4[51] - v7) >> 3)
      goto LABEL_18;
  }
  else
  {
    v12 = 0;
    if (v5 >= v8)
    {
LABEL_18:
      v18 = 0;
      goto LABEL_19;
    }
  }
  v13 = *(_QWORD *)(v7 + 8 * v6);
  if (!v13 || HIDWORD(v5) != HIDWORD(v13))
    goto LABEL_18;
  v14 = v4[53];
  v15 = (_QWORD **)(v14 + 16 * v13);
  if (v15 == (_QWORD **)v4[54] || v14 == 0)
    goto LABEL_18;
  v17 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v4 + 37), v5, a2);
  ++v17[3];
  v18 = *v15;
LABEL_19:
  v21 = **(_QWORD **)(a1 + 16);
  if (v21)
  {
    if ((v22 & 1) == 0
    {
      do
        v41 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v41 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index = v41;
    }
    v23 = v12[1];
    if (v23)
    {
      v24 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index;
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index;
        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index >= v23)
          v26 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index % v23;
      }
      else
      {
        v26 = (v23 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index;
      }
      v27 = *(_QWORD **)(*v12 + 8 * v26);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v25.u32[0] < 2uLL)
          {
            v29 = v23 - 1;
            while (1)
            {
              v31 = v28[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index == v31)
              {
                if (v28[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index)
                  goto LABEL_42;
              }
              else if ((v31 & v29) != v26)
              {
                return;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                return;
            }
          }
          do
          {
            v30 = v28[1];
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index == v30)
            {
              if (v28[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>(void)::index)
              {
LABEL_42:
                if ((v32 & 1) == 0)
                {
                  if ((_DWORD)v42)
                  {
                    md::typeToIntMap(v42);
                  }
                }
                if (!qword_1EE5779D0)
                  goto LABEL_68;
                v33 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                v33.i16[0] = vaddlv_u8(v33);
                if (v33.u32[0] > 1uLL)
                {
                  v34 = v24;
                  if (v24 >= qword_1EE5779D0)
                    v34 = v24 % qword_1EE5779D0;
                }
                else
                {
                  v34 = (qword_1EE5779D0 - 1) & v24;
                }
                v35 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v34);
                if (!v35 || (v36 = *v35) == 0)
LABEL_68:
                  abort();
                if (v33.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v38 = v36[1];
                    if ((uint64_t *)v24 == v38)
                    {
                      if (v36[2] == (uint64_t *)v24)
                        goto LABEL_63;
                    }
                    else if (((unint64_t)v38 & (qword_1EE5779D0 - 1)) != v34)
                    {
                      goto LABEL_68;
                    }
                    v36 = (uint64_t **)*v36;
                    if (!v36)
                      goto LABEL_68;
                  }
                }
                while (1)
                {
                  v37 = (unint64_t)v36[1];
                  if (v24 == v37)
                  {
                    if (v36[2] == (uint64_t *)v24)
                    {
LABEL_63:
                      v39 = *((int *)v36 + 6);
                      v40 = *((int *)v36 + 7);
                      if ((_DWORD)v39 != -1)
                        ggl::PipelineSetup::setConstantData(v18, v39, v21, 1);
                      if ((_DWORD)v40 != -1)
                        ggl::PipelineSetup::setConstantData(v18, v40, v21, 2);
                      return;
                    }
                  }
                  else
                  {
                    if (v37 >= qword_1EE5779D0)
                      v37 %= (unint64_t)qword_1EE5779D0;
                    if (v37 != v34)
                      goto LABEL_68;
                  }
                  v36 = (uint64_t **)*v36;
                  if (!v36)
                    goto LABEL_68;
                }
              }
            }
            else
            {
              if (v30 >= v23)
                v30 %= v23;
              if (v30 != v26)
                return;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
  }
}

void sub_19F9740BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_0,std::allocator<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_0>,void ()(md::ls::FlyoverSharedConstants const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_0,std::allocator<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_0>,void ()(md::ls::FlyoverSharedConstants const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C300;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_0,std::allocator<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_0>,void ()(md::ls::FlyoverSharedConstants const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C300;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_0,std::allocator<md::ita::AssignFlyoverSharedConstantData::operator()(ecs2::Query<md::ls::FlyoverSharedConstants const&>,ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>)::$_0>,void ()(md::ls::FlyoverSharedConstants const&)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = md::VKMRenderResourcesStore::getConstantData<ggl::FlyoverCommon::Shared>(**(_QWORD **)(a1 + 16), *a2);
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

void md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t ***v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  md *v26;
  _QWORD *v27;

  if (a3)
  {
    if ((v5 & 1) == 0)
    {
      v27 = a1;
      a1 = v27;
      if (v24)
      {
        do
          v25 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v25 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index = v25;
        a1 = v27;
      }
    }
    v6 = a1[1];
    if (v6)
    {
      v7 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index;
        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index >= v6)
          v9 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index % v6;
      }
      else
      {
        v9 = (v6 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index;
      }
      v10 = *(_QWORD **)(*a1 + 8 * v9);
      if (v10)
      {
        v11 = (_QWORD *)*v10;
        if (v11)
        {
          if (v8.u32[0] < 2uLL)
          {
            v12 = v6 - 1;
            while (1)
            {
              v14 = v11[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index == v14)
              {
                if (v11[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index)
                  goto LABEL_24;
              }
              else if ((v14 & v12) != v9)
              {
                return;
              }
              v11 = (_QWORD *)*v11;
              if (!v11)
                return;
            }
          }
          do
          {
            v13 = v11[1];
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index == v13)
            {
              if (v11[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index)
              {
LABEL_24:
                if ((v15 & 1) == 0)
                {
                  if ((_DWORD)v26)
                  {
                    md::typeToIntMap(v26);
                  }
                }
                if (!qword_1EE5779D0)
                  goto LABEL_50;
                v16 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                v16.i16[0] = vaddlv_u8(v16);
                if (v16.u32[0] > 1uLL)
                {
                  v17 = v7;
                  if (v7 >= qword_1EE5779D0)
                    v17 = v7 % qword_1EE5779D0;
                }
                else
                {
                  v17 = (qword_1EE5779D0 - 1) & v7;
                }
                v18 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v17);
                if (!v18 || (v19 = *v18) == 0)
LABEL_50:
                  abort();
                if (v16.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v21 = v19[1];
                    if ((uint64_t *)v7 == v21)
                    {
                      if (v19[2] == (uint64_t *)v7)
                        goto LABEL_45;
                    }
                    else if (((unint64_t)v21 & (qword_1EE5779D0 - 1)) != v17)
                    {
                      goto LABEL_50;
                    }
                    v19 = (uint64_t **)*v19;
                    if (!v19)
                      goto LABEL_50;
                  }
                }
                while (1)
                {
                  v20 = (unint64_t)v19[1];
                  if (v7 == v20)
                  {
                    if (v19[2] == (uint64_t *)v7)
                    {
LABEL_45:
                      v22 = *((int *)v19 + 6);
                      v23 = *((int *)v19 + 7);
                      if ((_DWORD)v22 != -1)
                        ggl::PipelineSetup::setConstantData(a2, v22, a3, 1);
                      if ((_DWORD)v23 != -1)
                        ggl::PipelineSetup::setConstantData(a2, v23, a3, 2);
                      return;
                    }
                  }
                  else
                  {
                    if (v20 >= qword_1EE5779D0)
                      v20 %= (unint64_t)qword_1EE5779D0;
                    if (v20 != v17)
                      goto LABEL_50;
                  }
                  v19 = (uint64_t **)*v19;
                  if (!v19)
                    goto LABEL_50;
                }
              }
            }
            else
            {
              if (v13 >= v6)
                v13 %= v6;
              if (v13 != v9)
                return;
            }
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
      }
    }
  }
}

void sub_19F97443C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::AssignStyleSSAOConstantData::operator()(ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignStyleSSAOConstantData::operator()(ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::AssignStyleSSAOConstantData::operator()(ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignStyleSSAOConstantData::operator()(ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E427BC88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::ita::AssignStyleSSAOConstantData::operator()(ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignStyleSSAOConstantData::operator()(ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427BC88;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::AssignStyleSSAOConstantData::operator()(ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignStyleSSAOConstantData::operator()(ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  int8x8_t *v30;
  int *v31;
  uint64_t v32;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  char *v92;
  __int128 v93;
  char *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  __int128 *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint8x8_t v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  float v122;
  float v123;
  _BOOL8 v124;
  unint64_t v125;
  unint64_t v126;
  size_t prime;
  unint64_t v128;
  uint8x8_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  int v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint8x8_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v153;
  float v155;
  float v156;
  _BOOL8 v157;
  unint64_t v158;
  unint64_t v159;
  size_t v160;
  void *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  size_t v166;
  size_t v167;
  size_t v168;
  _QWORD *v169;
  size_t v170;
  uint64_t v171;
  unint64_t v172;
  uint8x8_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  size_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  uint8x8_t v183;
  void **v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  float v188;
  float v189;
  _BOOL8 v190;
  unint64_t v191;
  unint64_t v192;
  size_t v193;
  void *v194;
  void *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  size_t v199;
  size_t v200;
  size_t v201;
  _QWORD *v202;
  size_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint8x8_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  size_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  uint8x8_t v224;
  _QWORD **v225;
  _QWORD *v226;
  unint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  float v230;
  float v231;
  _BOOL8 v232;
  unint64_t v233;
  unint64_t v234;
  size_t v235;
  void *v236;
  void *v237;
  uint64_t v238;
  _QWORD *v239;
  size_t v240;
  size_t v241;
  size_t v242;
  _QWORD *v243;
  size_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint8x8_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  size_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  _WORD *v261;
  unsigned __int8 v263;
  unint64_t v264;
  unint64_t v265;
  uint8x8_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unsigned __int8 v273;
  uint8x8_t v274;
  unint64_t v275;
  uint64_t ***v276;
  uint64_t **v277;
  unint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  md *v286;
  _QWORD *v287;
  uint64_t v288;
  _BYTE v289[20];
  uint64_t v290;
  std::__shared_weak_count *v291;
  __int128 v292;
  std::__shared_weak_count *v293;

  v7 = **(_QWORD ***)(a1 + 8);
  v8 = *a4;
  v9 = *a4;
  v10 = v7[50];
  v11 = (v7[51] - v10) >> 3;
  if (v9 < v11
    && (v12 = *(_QWORD *)(v10 + 8 * v9)) != 0
    && HIDWORD(v8) == HIDWORD(v12)
    && ((v13 = v7[53], v13 + 16 * v12 != v7[54]) ? (_ZF = v13 == 0) : (_ZF = 1), !_ZF))
  {
    v21 = *(_QWORD *)(v10 + 8 * v9);
    v22 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v7 + 37), v8, a4);
    ++v22[3];
    v15 = *(_QWORD **)(v13 + 16 * v21 + 8);
    v7 = **(_QWORD ***)(a1 + 8);
    v8 = *a4;
    v10 = v7[50];
    v9 = *a4;
    if (v9 >= (v7[51] - v10) >> 3)
      goto LABEL_18;
  }
  else
  {
    v15 = 0;
    if (v9 >= v11)
    {
LABEL_18:
      v287 = 0;
      goto LABEL_19;
    }
  }
  v16 = *(_QWORD *)(v10 + 8 * v9);
  if (!v16 || HIDWORD(v8) != HIDWORD(v16))
    goto LABEL_18;
  v17 = v7[53];
  v18 = (_QWORD **)(v17 + 16 * v16);
  if (v18 == (_QWORD **)v7[54] || v17 == 0)
    goto LABEL_18;
  v20 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v7 + 37), v8, a4);
  ++v20[3];
  v287 = *v18;
LABEL_19:
  v23 = **(_QWORD **)(a1 + 16);
  v24 = *a2;
  *(_QWORD *)&v292 = v24;
  v25 = *(_QWORD *)(v23 + 120);
  if (v24 >= (unint64_t)((*(_QWORD *)(v23 + 128) - v25) >> 3))
    goto LABEL_27;
  v26 = *(_QWORD *)(v25 + 8 * v24);
  if (!v26)
    goto LABEL_28;
  if (HIDWORD(v24) != HIDWORD(v26)
    || ((v27 = *(_QWORD *)(v23 + 144), v28 = (uint64_t *)(v27 + 8 * v26), v28 != *(uint64_t **)(v23 + 152))
      ? (v29 = v27 == 0)
      : (v29 = 1),
        v29))
  {
LABEL_27:
    v26 = 0;
  }
  else
  {
    v68 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v23 + 56, v24, &v292);
    ++v68[3];
    v26 = *v28;
  }
LABEL_28:
  v30 = *(int8x8_t **)v23;
  v288 = v26;
  *(_QWORD *)v289 = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v290, v30, &v288, 0);
  (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v290 + 1224))(&v288, **(float **)(a1 + 24));
  v31 = *(int **)(a1 + 32);
  v32 = *(_QWORD *)(a1 + 40);
  if ((_BYTE)v288)
    v31 = (int *)&v288 + 1;
  _S8 = *v31;
  _H9 = *(_WORD *)(*(_QWORD *)v32 + 212);
  _H10 = *(_WORD *)(*(_QWORD *)v32 + 214);
  _H11 = *(_WORD *)(*(_QWORD *)v32 + 216);
  *(_WORD *)v289 = 0;
  __asm
  {
    FCVT            S0, H9
    FCVT            S1, H10
    FCVT            S2, H11
  }
  *(_DWORD *)&v289[4] = _S0;
  *(_DWORD *)&v289[8] = _S1;
  *(_DWORD *)&v289[12] = _S2;
  *(_DWORD *)&v289[16] = _S8;
  v43 = **(_QWORD **)(a1 + 8);
  v44 = (_QWORD *)(v43 + 8440);
  v45 = std::__hash_table<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::__unordered_map_hasher<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,md::StyleSSAOKeyHasher,std::equal_to<md::StyleSSAOKey>,true>,std::__unordered_map_equal<md::StyleSSAOKey,std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<md::StyleSSAOKey>,md::StyleSSAOKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleSSAOKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>>>::find<md::StyleSSAOKey>((_QWORD *)(v43 + 8440), (float *)&v288);
  if (!v45 || (v46 = v45[6]) == 0)
  {
    v292 = 0uLL;
    v293 = 0;
    v55 = *(_QWORD *)(v43 + 8312);
    if (*(_QWORD *)(v43 + 8304) == v55)
    {
      v58 = (-1431655765 * ((*(_QWORD *)(v43 + 8360) - *(_QWORD *)(v43 + 8352)) >> 3)) | 0x100000000;
      v59 = *(uint64_t **)(v43 + 8336);
      v60 = *(_QWORD *)(v43 + 8344);
      if ((unint64_t)v59 >= v60)
      {
        v62 = *(char **)(v43 + 8328);
        v63 = ((char *)v59 - v62) >> 3;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_533;
        v65 = v60 - (_QWORD)v62;
        if (v65 >> 2 > v64)
          v64 = v65 >> 2;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          if (v66 >> 61)
            goto LABEL_532;
          v67 = (char *)operator new(8 * v66);
        }
        else
        {
          v67 = 0;
        }
        v69 = (uint64_t *)&v67[8 * v63];
        *v69 = v58;
        v61 = v69 + 1;
        if (v59 != (uint64_t *)v62)
        {
          v70 = (char *)v59 - v62 - 8;
          if (v70 < 0x58)
            goto LABEL_541;
          if ((unint64_t)(v62 - v67) < 0x20)
            goto LABEL_541;
          v71 = (v70 >> 3) + 1;
          v72 = &v67[(char *)v59 - v62 - 16];
          v73 = v59 - 2;
          v74 = v71 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *(_OWORD *)v73;
            *((_OWORD *)v72 - 1) = *((_OWORD *)v73 - 1);
            *(_OWORD *)v72 = v75;
            v72 -= 32;
            v73 -= 4;
            v74 -= 4;
          }
          while (v74);
          v69 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
          v59 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
          if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_541:
            do
            {
              v76 = *--v59;
              *--v69 = v76;
            }
            while (v59 != (uint64_t *)v62);
          }
          v59 = *(uint64_t **)(v43 + 8328);
        }
        *(_QWORD *)(v43 + 8328) = v69;
        *(_QWORD *)(v43 + 8336) = v61;
        *(_QWORD *)(v43 + 8344) = &v67[8 * v66];
        if (v59)
          operator delete(v59);
      }
      else
      {
        *v59 = v58;
        v61 = v59 + 1;
      }
      *(_QWORD *)(v43 + 8336) = v61;
      v57 = *(v61 - 1);
    }
    else
    {
      v56 = *(_QWORD *)(v55 - 8);
      *(_QWORD *)(v43 + 8312) = v55 - 8;
      *(_DWORD *)(*(_QWORD *)(v43 + 8328) + 8 * v56) = -1431655765
                                                     * ((*(_QWORD *)(v43 + 8360) - *(_QWORD *)(v43 + 8352)) >> 3);
      *(_DWORD *)(*(_QWORD *)(v43 + 8328) + 8 * v56 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v43 + 8328)
                                                                                               + 8 * v56
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
      v57 = v56 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v43 + 8328) + 8 * v56 + 4) << 32);
    }
    v77 = *(char **)(v43 + 8360);
    v78 = *(_QWORD *)(v43 + 8368);
    if ((unint64_t)v77 >= v78)
    {
      v83 = *(char **)(v43 + 8352);
      v84 = 0xAAAAAAAAAAAAAAABLL * ((v77 - v83) >> 3) + 1;
      if (v84 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_533;
      v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (_QWORD)v83) >> 3);
      if (2 * v85 > v84)
        v84 = 2 * v85;
      if (v85 >= 0x555555555555555)
        v86 = 0xAAAAAAAAAAAAAAALL;
      else
        v86 = v84;
      if (v86 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_532;
      v87 = (char *)operator new(24 * v86);
      v88 = &v87[8 * ((v77 - v83) >> 3)];
      *(_OWORD *)v88 = v292;
      v89 = v293;
      *((_QWORD *)v88 + 2) = v293;
      if (v89)
      {
        p_shared_owners = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldxr(p_shared_owners);
        while (__stxr(v91 + 1, p_shared_owners));
        v77 = *(char **)(v43 + 8360);
        v83 = *(char **)(v43 + 8352);
      }
      v92 = &v87[24 * v86];
      v82 = v88 + 24;
      if (v77 == v83)
      {
        *(_QWORD *)(v43 + 8352) = v88;
        *(_QWORD *)(v43 + 8360) = v82;
        *(_QWORD *)(v43 + 8368) = v92;
      }
      else
      {
        do
        {
          v93 = *(_OWORD *)(v77 - 24);
          v77 -= 24;
          *(_OWORD *)(v88 - 24) = v93;
          v88 -= 24;
          *((_QWORD *)v88 + 2) = *((_QWORD *)v77 + 2);
          *((_QWORD *)v77 + 1) = 0;
          *((_QWORD *)v77 + 2) = 0;
        }
        while (v77 != v83);
        v83 = *(char **)(v43 + 8352);
        v94 = *(char **)(v43 + 8360);
        *(_QWORD *)(v43 + 8352) = v88;
        *(_QWORD *)(v43 + 8360) = v82;
        *(_QWORD *)(v43 + 8368) = v92;
        while (v94 != v83)
        {
          v95 = (std::__shared_weak_count *)*((_QWORD *)v94 - 1);
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          v94 -= 24;
        }
      }
      if (v83)
        operator delete(v83);
    }
    else
    {
      *(_OWORD *)v77 = v292;
      v79 = v293;
      *((_QWORD *)v77 + 2) = v293;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v82 = v77 + 24;
    }
    *(_QWORD *)(v43 + 8360) = v82;
    v98 = *(_QWORD *)(v43 + 8384);
    v99 = *(_QWORD *)(v43 + 8392);
    if (v98 < v99)
    {
      *(_QWORD *)v98 = v57;
      v98 += 8;
      v100 = v98;
      goto LABEL_119;
    }
    v101 = *(_BYTE **)(v43 + 8376);
    v102 = (uint64_t)(v98 - (_QWORD)v101) >> 3;
    v103 = v102 + 1;
    if (!((unint64_t)(v102 + 1) >> 61))
    {
      v104 = v99 - (_QWORD)v101;
      if (v104 >> 2 > v103)
        v103 = v104 >> 2;
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
        v105 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v105 = v103;
      if (v105)
      {
        if (v105 >> 61)
          goto LABEL_532;
        v106 = operator new(8 * v105);
      }
      else
      {
        v106 = 0;
      }
      v107 = &v106[8 * v102];
      *v107 = v57;
      v100 = (unint64_t)(v107 + 1);
      if ((_BYTE *)v98 != v101)
      {
        v108 = v98 - (_QWORD)v101 - 8;
        if (v108 < 0x58)
          goto LABEL_542;
        if ((unint64_t)(v101 - v106) < 0x20)
          goto LABEL_542;
        v109 = (v108 >> 3) + 1;
        v110 = &v106[v98 - (_QWORD)v101 - 16];
        v111 = (__int128 *)(v98 - 16);
        v112 = v109 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v113 = *v111;
          *(v110 - 1) = *(v111 - 1);
          *v110 = v113;
          v110 -= 2;
          v111 -= 2;
          v112 -= 4;
        }
        while (v112);
        v107 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
        v98 -= 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
        if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_542:
          do
          {
            v114 = *(_QWORD *)(v98 - 8);
            v98 -= 8;
            *--v107 = v114;
          }
          while ((_BYTE *)v98 != v101);
        }
      }
      *(_QWORD *)(v43 + 8376) = v107;
      *(_QWORD *)(v43 + 8384) = v100;
      *(_QWORD *)(v43 + 8392) = &v106[8 * v105];
      if (v101)
        operator delete(v101);
LABEL_119:
      *(_QWORD *)(v43 + 8384) = v100;
      v115 = (uint64_t *)(v43 + 8264);
      v116 = *(_QWORD *)(v43 + 8272);
      if (v116)
      {
        v117 = (uint8x8_t)vcnt_s8((int8x8_t)v116);
        v117.i16[0] = vaddlv_u8(v117);
        if (v117.u32[0] > 1uLL)
        {
          v100 = v57;
          if (v57 >= v116)
            v100 = v57 % v116;
        }
        else
        {
          v100 = (v116 - 1) & v57;
        }
        v118 = *(_QWORD **)(*v115 + 8 * v100);
        if (v118)
        {
          v119 = (_QWORD *)*v118;
          if (v119)
          {
            if (v117.u32[0] < 2uLL)
            {
              while (1)
              {
                v121 = v119[1];
                if (v121 == v57)
                {
                  if (v119[2] == v57)
                    goto LABEL_178;
                }
                else if ((v121 & (v116 - 1)) != v100)
                {
                  goto LABEL_140;
                }
                v119 = (_QWORD *)*v119;
                if (!v119)
                  goto LABEL_140;
              }
            }
            do
            {
              v120 = v119[1];
              if (v120 == v57)
              {
                if (v119[2] == v57)
                  goto LABEL_178;
              }
              else
              {
                if (v120 >= v116)
                  v120 %= v116;
                if (v120 != v100)
                  break;
              }
              v119 = (_QWORD *)*v119;
            }
            while (v119);
          }
        }
      }
LABEL_140:
      v98 = (unint64_t)operator new(0x30uLL);
      *(_QWORD *)v98 = 0;
      *(_QWORD *)(v98 + 8) = v57;
      *(_QWORD *)(v98 + 16) = v57;
      *(int64x2_t *)(v98 + 24) = vdupq_n_s64(1uLL);
      *(_BYTE *)(v98 + 40) = 0;
      v122 = (float)(unint64_t)(*(_QWORD *)(v43 + 8288) + 1);
      v123 = *(float *)(v43 + 8296);
      if (!v116 || (float)(v123 * (float)v116) < v122)
      {
        v124 = 1;
        if (v116 >= 3)
          v124 = (v116 & (v116 - 1)) != 0;
        v125 = v124 | (2 * v116);
        v126 = vcvtps_u32_f32(v122 / v123);
        if (v125 <= v126)
          prime = v126;
        else
          prime = v125;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v116 = *(_QWORD *)(v43 + 8272);
        }
        if (prime > v116)
          goto LABEL_152;
        if (prime < v116)
        {
          v128 = vcvtps_u32_f32((float)*(unint64_t *)(v43 + 8288) / *(float *)(v43 + 8296));
          if (v116 < 3
            || (v129 = (uint8x8_t)vcnt_s8((int8x8_t)v116), v129.i16[0] = vaddlv_u8(v129), v129.u32[0] > 1uLL))
          {
            v128 = std::__next_prime(v128);
          }
          else
          {
            v130 = 1 << -(char)__clz(v128 - 1);
            if (v128 >= 2)
              v128 = v130;
          }
          if (prime <= v128)
            prime = v128;
          if (prime < v116)
LABEL_152:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v43 + 8264, prime);
        }
        v116 = *(_QWORD *)(v43 + 8272);
        if ((v116 & (v116 - 1)) != 0)
        {
          if (v57 >= v116)
            v100 = v57 % v116;
          else
            v100 = v57;
        }
        else
        {
          v100 = (v116 - 1) & v57;
        }
      }
      v131 = *v115;
      v132 = *(unint64_t **)(*v115 + 8 * v100);
      if (v132)
      {
        *(_QWORD *)v98 = *v132;
      }
      else
      {
        *(_QWORD *)v98 = *(_QWORD *)(v43 + 8280);
        *(_QWORD *)(v43 + 8280) = v98;
        *(_QWORD *)(v131 + 8 * v100) = v43 + 8280;
        if (!*(_QWORD *)v98)
        {
LABEL_177:
          ++*(_QWORD *)(v43 + 8288);
LABEL_178:
          v134 = v293;
          if (v293)
          {
            v135 = (unint64_t *)&v293->__shared_owners_;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          v138 = *(_DWORD *)&v289[12];
          v137 = *(_DWORD *)&v289[16];
          v139 = *(unsigned int *)&v289[16];
          if (*(float *)&v289[16] == 0.0)
            v139 = 0;
          v141 = *(_DWORD *)&v289[4];
          v140 = *(_DWORD *)&v289[8];
          v142 = *(unsigned int *)&v289[4] - 0x61C8864680B583EBLL;
          if (*(float *)&v289[4] == 0.0)
            v142 = 0x9E3779B97F4A7C15;
          v143 = *(unsigned int *)&v289[8] - 0x61C8864680B583EBLL;
          if (*(float *)&v289[8] == 0.0)
            v143 = 0x9E3779B97F4A7C15;
          v144 = ((v142 >> 2) + (v142 << 6) + v143) ^ v142;
          v145 = *(unsigned int *)&v289[12] - 0x61C8864680B583EBLL;
          if (*(float *)&v289[12] == 0.0)
            v145 = 0x9E3779B97F4A7C15;
          v146 = ((v139 << 6) + (v139 >> 2) - 0x61C8864680B583EBLL + ((v145 + (v144 << 6) + (v144 >> 2)) ^ v144)) ^ v139;
          v147 = *(_QWORD *)(v43 + 8448);
          if (v147)
          {
            v148 = (uint8x8_t)vcnt_s8((int8x8_t)v147);
            v148.i16[0] = vaddlv_u8(v148);
            if (v148.u32[0] > 1uLL)
            {
              v98 = ((v139 << 6) + (v139 >> 2) - 0x61C8864680B583EBLL + ((v145 + (v144 << 6) + (v144 >> 2)) ^ v144)) ^ v139;
              if (v146 >= v147)
                v98 = v146 % v147;
            }
            else
            {
              v98 = v146 & (v147 - 1);
            }
            v149 = *(uint64_t **)(*v44 + 8 * v98);
            if (v149)
            {
              v150 = *v149;
              if (*v149)
              {
                if (v148.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v153 = *(_QWORD *)(v150 + 8);
                    if (v153 == v146)
                    {
                      if (*(float *)(v150 + 40) == *(float *)&v289[16]
                        && *(_QWORD *)(v150 + 28) == *(_QWORD *)&v289[4]
                        && *(_DWORD *)(v150 + 36) == (unint64_t)*(unsigned int *)&v289[12])
                      {
                        goto LABEL_290;
                      }
                    }
                    else if ((v153 & (v147 - 1)) != v98)
                    {
                      goto LABEL_223;
                    }
                    v150 = *(_QWORD *)v150;
                    if (!v150)
                      goto LABEL_223;
                  }
                }
                do
                {
                  v151 = *(_QWORD *)(v150 + 8);
                  if (v151 == v146)
                  {
                    if (*(float *)(v150 + 40) == *(float *)&v289[16]
                      && *(_QWORD *)(v150 + 28) == *(_QWORD *)&v289[4]
                      && *(_DWORD *)(v150 + 36) == (unint64_t)*(unsigned int *)&v289[12])
                    {
                      goto LABEL_290;
                    }
                  }
                  else
                  {
                    if (v151 >= v147)
                      v151 %= v147;
                    if (v151 != v98)
                      break;
                  }
                  v150 = *(_QWORD *)v150;
                }
                while (v150);
              }
            }
          }
LABEL_223:
          v150 = (uint64_t)operator new(0x38uLL);
          *(_QWORD *)v150 = 0;
          *(_QWORD *)(v150 + 8) = v146;
          *(_WORD *)(v150 + 20) = WORD2(v288);
          *(_DWORD *)(v150 + 16) = v288;
          *(_WORD *)(v150 + 24) = *(_WORD *)v289;
          *(_OWORD *)(v150 + 28) = *(_OWORD *)&v289[4];
          *(_QWORD *)(v150 + 48) = 0;
          v155 = (float)(unint64_t)(*(_QWORD *)(v43 + 8464) + 1);
          v156 = *(float *)(v43 + 8472);
          if (v147 && (float)(v156 * (float)v147) >= v155)
          {
LABEL_280:
            v179 = (_QWORD *)*v44;
            v180 = *(uint64_t **)(*v44 + 8 * v98);
            if (v180)
            {
              *(_QWORD *)v150 = *v180;
            }
            else
            {
              *(_QWORD *)v150 = *(_QWORD *)(v43 + 8456);
              *(_QWORD *)(v43 + 8456) = v150;
              v179[v98] = v43 + 8456;
              if (!*(_QWORD *)v150)
              {
LABEL_289:
                ++*(_QWORD *)(v43 + 8464);
LABEL_290:
                *(_QWORD *)(v150 + 48) = v57;
                v182 = *(_QWORD *)(v43 + 8488);
                if (v182)
                {
                  v183 = (uint8x8_t)vcnt_s8((int8x8_t)v182);
                  v183.i16[0] = vaddlv_u8(v183);
                  if (v183.u32[0] > 1uLL)
                  {
                    v150 = v57;
                    if (v57 >= v182)
                      v150 = v57 % v182;
                  }
                  else
                  {
                    v150 = (v182 - 1) & v57;
                  }
                  v184 = *(void ***)(*(_QWORD *)(v43 + 8480) + 8 * v150);
                  if (v184)
                  {
                    v185 = (char *)*v184;
                    if (*v184)
                    {
                      if (v183.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v187 = *((_QWORD *)v185 + 1);
                          if (v187 == v57)
                          {
                            if (*((_QWORD *)v185 + 2) == v57)
                              goto LABEL_378;
                          }
                          else if ((v187 & (v182 - 1)) != v150)
                          {
                            goto LABEL_311;
                          }
                          v185 = *(char **)v185;
                          if (!v185)
                            goto LABEL_311;
                        }
                      }
                      do
                      {
                        v186 = *((_QWORD *)v185 + 1);
                        if (v186 == v57)
                        {
                          if (*((_QWORD *)v185 + 2) == v57)
                            goto LABEL_378;
                        }
                        else
                        {
                          if (v186 >= v182)
                            v186 %= v182;
                          if (v186 != v150)
                            break;
                        }
                        v185 = *(char **)v185;
                      }
                      while (v185);
                    }
                  }
                }
LABEL_311:
                v185 = (char *)operator new(0x38uLL);
                *(_QWORD *)v185 = 0;
                *((_QWORD *)v185 + 1) = v57;
                *((_QWORD *)v185 + 2) = v57;
                *(_OWORD *)(v185 + 24) = 0u;
                *(_OWORD *)(v185 + 40) = 0u;
                v188 = (float)(unint64_t)(*(_QWORD *)(v43 + 8504) + 1);
                v189 = *(float *)(v43 + 8512);
                if (v182 && (float)(v189 * (float)v182) >= v188)
                {
LABEL_368:
                  v214 = *(_QWORD *)(v43 + 8480);
                  v215 = *(_QWORD **)(v214 + 8 * v150);
                  if (v215)
                  {
                    *(_QWORD *)v185 = *v215;
                  }
                  else
                  {
                    *(_QWORD *)v185 = *(_QWORD *)(v43 + 8496);
                    *(_QWORD *)(v43 + 8496) = v185;
                    *(_QWORD *)(v214 + 8 * v150) = v43 + 8496;
                    if (!*(_QWORD *)v185)
                    {
LABEL_377:
                      ++*(_QWORD *)(v43 + 8504);
LABEL_378:
                      *((_WORD *)v185 + 12) = v288;
                      *(_DWORD *)(v185 + 26) = *(_DWORD *)((char *)&v288 + 2);
                      *((_WORD *)v185 + 16) = *(_WORD *)v289;
                      *((_DWORD *)v185 + 9) = v141;
                      *((_DWORD *)v185 + 10) = v140;
                      *((_DWORD *)v185 + 11) = v138;
                      *((_DWORD *)v185 + 12) = v137;
                      v217 = **(_QWORD **)(a1 + 8);
                      v218 = *(_QWORD *)(v217 + 8336);
                      v219 = *(_QWORD *)(v217 + 8328);
                      *(_QWORD *)&v292 = v57;
                      if (v57 < (unint64_t)((v218 - v219) >> 3)
                        && (v220 = *(_QWORD *)(v219 + 8 * v57)) != 0)
                      {
                        if (HIDWORD(v57) == HIDWORD(v220))
                        {
                          v221 = (_QWORD *)(*(_QWORD *)(v217 + 8352) + 24 * v220);
                          if (v221 != *(_QWORD **)(v217 + 8360))
                          {
                            v54 = (_QWORD *)operator new();
                            v222 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v54, qword_1EE54A6E8, 2, 0, 6, 1);
                            v222[25] = ggl::DaVinci::StyleSSAO::reflection(void)::reflection;
                            *v222 = &off_1E42B9DD0;
                            v223 = *(_QWORD *)(v217 + 8408);
                            if (v223)
                            {
                              v224 = (uint8x8_t)vcnt_s8((int8x8_t)v223);
                              v224.i16[0] = vaddlv_u8(v224);
                              if (v224.u32[0] > 1uLL)
                              {
                                v150 = v57;
                                if (v57 >= v223)
                                  v150 = v57 % v223;
                              }
                              else
                              {
                                v150 = (v223 - 1) & v57;
                              }
                              v225 = *(_QWORD ***)(*(_QWORD *)(v217 + 8400) + 8 * v150);
                              if (v225)
                              {
                                v226 = *v225;
                                if (*v225)
                                {
                                  if (v224.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      v228 = v226[1];
                                      if (v228 == v57)
                                      {
                                        if (v226[2] == v57)
                                          goto LABEL_472;
                                      }
                                      else if ((v228 & (v223 - 1)) != v150)
                                      {
                                        goto LABEL_405;
                                      }
                                      v226 = (_QWORD *)*v226;
                                      if (!v226)
                                        goto LABEL_405;
                                    }
                                  }
                                  do
                                  {
                                    v227 = v226[1];
                                    if (v227 == v57)
                                    {
                                      if (v226[2] == v57)
                                        goto LABEL_472;
                                    }
                                    else
                                    {
                                      if (v227 >= v223)
                                        v227 %= v223;
                                      if (v227 != v150)
                                        break;
                                    }
                                    v226 = (_QWORD *)*v226;
                                  }
                                  while (v226);
                                }
                              }
                            }
LABEL_405:
                            v226 = operator new(0x20uLL);
                            v229 = (_QWORD *)(v217 + 8416);
                            *v226 = 0;
                            v226[1] = v57;
                            v226[2] = v57;
                            v226[3] = 0;
                            v230 = (float)(unint64_t)(*(_QWORD *)(v217 + 8424) + 1);
                            v231 = *(float *)(v217 + 8432);
                            if (v223 && (float)(v231 * (float)v223) >= v230)
                            {
                              v57 = v150;
                              goto LABEL_462;
                            }
                            v232 = 1;
                            if (v223 >= 3)
                              v232 = (v223 & (v223 - 1)) != 0;
                            v233 = v232 | (2 * v223);
                            v234 = vcvtps_u32_f32(v230 / v231);
                            if (v233 <= v234)
                              v235 = v234;
                            else
                              v235 = v233;
                            if (v235 == 1)
                            {
                              v235 = 2;
                            }
                            else if ((v235 & (v235 - 1)) != 0)
                            {
                              v235 = std::__next_prime(v235);
                              v223 = *(_QWORD *)(v217 + 8408);
                            }
                            if (v235 <= v223)
                            {
                              if (v235 >= v223)
                                goto LABEL_458;
                              v247 = vcvtps_u32_f32((float)*(unint64_t *)(v217 + 8424) / *(float *)(v217 + 8432));
                              if (v223 < 3
                                || (v248 = (uint8x8_t)vcnt_s8((int8x8_t)v223),
                                    v248.i16[0] = vaddlv_u8(v248),
                                    v248.u32[0] > 1uLL))
                              {
                                v247 = std::__next_prime(v247);
                              }
                              else
                              {
                                v249 = 1 << -(char)__clz(v247 - 1);
                                if (v247 >= 2)
                                  v247 = v249;
                              }
                              if (v235 <= v247)
                                v235 = v247;
                              if (v235 >= v223)
                                goto LABEL_458;
                              if (!v235)
                              {
                                v254 = *(void **)(v217 + 8400);
                                *(_QWORD *)(v217 + 8400) = 0;
                                if (v254)
                                  operator delete(v254);
                                *(_QWORD *)(v217 + 8408) = 0;
                                goto LABEL_458;
                              }
                            }
                            if (!(v235 >> 61))
                            {
                              v236 = operator new(8 * v235);
                              v237 = *(void **)(v217 + 8400);
                              *(_QWORD *)(v217 + 8400) = v236;
                              if (v237)
                                operator delete(v237);
                              v238 = 0;
                              *(_QWORD *)(v217 + 8408) = v235;
                              do
                                *(_QWORD *)(*(_QWORD *)(v217 + 8400) + 8 * v238++) = 0;
                              while (v235 != v238);
                              v239 = (_QWORD *)*v229;
                              if (!*v229)
                                goto LABEL_458;
                              v240 = v239[1];
                              v241 = v235 - 1;
                              if ((v235 & (v235 - 1)) == 0)
                              {
                                v242 = v240 & v241;
                                *(_QWORD *)(*(_QWORD *)(v217 + 8400) + 8 * v242) = v229;
                                while (1)
                                {
                                  v243 = (_QWORD *)*v239;
                                  if (!*v239)
                                    break;
                                  v244 = v243[1] & v241;
                                  if (v244 == v242)
                                  {
                                    v239 = (_QWORD *)*v239;
                                  }
                                  else
                                  {
                                    v245 = *(_QWORD *)(v217 + 8400);
                                    if (*(_QWORD *)(v245 + 8 * v244))
                                    {
                                      *v239 = *v243;
                                      v246 = 8 * v244;
                                      *v243 = **(_QWORD **)(*(_QWORD *)(v217 + 8400) + v246);
                                      **(_QWORD **)(*(_QWORD *)(v217 + 8400) + v246) = v243;
                                    }
                                    else
                                    {
                                      *(_QWORD *)(v245 + 8 * v244) = v239;
                                      v239 = v243;
                                      v242 = v244;
                                    }
                                  }
                                }
LABEL_458:
                                v223 = *(_QWORD *)(v217 + 8408);
                                if ((v223 & (v223 - 1)) != 0)
                                {
                                  if (v57 >= v223)
                                    v57 %= v223;
                                }
                                else
                                {
                                  v57 &= v223 - 1;
                                }
LABEL_462:
                                v255 = *(_QWORD *)(v217 + 8400);
                                v256 = *(_QWORD **)(v255 + 8 * v57);
                                if (v256)
                                {
                                  *v226 = *v256;
                                }
                                else
                                {
                                  *v226 = *v229;
                                  *v229 = v226;
                                  *(_QWORD *)(v255 + 8 * v57) = v229;
                                  if (!*v226)
                                    goto LABEL_471;
                                  v257 = *(_QWORD *)(*v226 + 8);
                                  if ((v223 & (v223 - 1)) != 0)
                                  {
                                    if (v257 >= v223)
                                      v257 %= v223;
                                  }
                                  else
                                  {
                                    v257 &= v223 - 1;
                                  }
                                  v256 = (_QWORD *)(*(_QWORD *)(v217 + 8400) + 8 * v257);
                                }
                                *v256 = v226;
LABEL_471:
                                ++*(_QWORD *)(v217 + 8424);
LABEL_472:
                                v258 = v226[3];
                                v226[3] = v54;
                                if (v258)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
                                v259 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>> const&>,std::tuple<>>(v217 + 8264, v292, &v292);
                                ++v259[3];
                                *v221 = v54;
                                goto LABEL_475;
                              }
                              if (v240 >= v235)
                                v240 %= v235;
                              *(_QWORD *)(*(_QWORD *)(v217 + 8400) + 8 * v240) = v229;
                              v250 = (_QWORD *)*v239;
                              if (!*v239)
                                goto LABEL_458;
                              while (1)
                              {
                                v252 = v250[1];
                                if (v252 >= v235)
                                  v252 %= v235;
                                if (v252 != v240)
                                {
                                  v253 = *(_QWORD *)(v217 + 8400);
                                  if (!*(_QWORD *)(v253 + 8 * v252))
                                  {
                                    *(_QWORD *)(v253 + 8 * v252) = v239;
                                    goto LABEL_444;
                                  }
                                  *v239 = *v250;
                                  v251 = 8 * v252;
                                  *v250 = **(_QWORD **)(*(_QWORD *)(v217 + 8400) + v251);
                                  **(_QWORD **)(*(_QWORD *)(v217 + 8400) + v251) = v250;
                                  v250 = v239;
                                }
                                v252 = v240;
LABEL_444:
                                v239 = v250;
                                v250 = (_QWORD *)*v250;
                                v240 = v252;
                                if (!v250)
                                  goto LABEL_458;
                              }
                            }
LABEL_532:
                            std::__throw_bad_array_new_length[abi:nn180100]();
                          }
                        }
                        v54 = 0;
                      }
                      else
                      {
                        v54 = 0;
                      }
LABEL_475:
                      v260 = v54[1];
                      v261 = (_WORD *)v54[9];
                      *v261 = _H9;
                      v261[1] = _H10;
                      v261[2] = _H11;
                      __asm { FCVT            H0, S8 }
                      v261[4] = _H0;
                      if (v54[8] > v260)
                        v260 = v54[8];
                      v54[7] = 0;
                      v54[8] = v260;
                      goto LABEL_478;
                    }
                    v216 = *(_QWORD *)(*(_QWORD *)v185 + 8);
                    if ((v182 & (v182 - 1)) != 0)
                    {
                      if (v216 >= v182)
                        v216 %= v182;
                    }
                    else
                    {
                      v216 &= v182 - 1;
                    }
                    v215 = (_QWORD *)(*(_QWORD *)(v43 + 8480) + 8 * v216);
                  }
                  *v215 = v185;
                  goto LABEL_377;
                }
                v190 = 1;
                if (v182 >= 3)
                  v190 = (v182 & (v182 - 1)) != 0;
                v191 = v190 | (2 * v182);
                v192 = vcvtps_u32_f32(v188 / v189);
                if (v191 <= v192)
                  v193 = v192;
                else
                  v193 = v191;
                if (v193 == 1)
                {
                  v193 = 2;
                }
                else if ((v193 & (v193 - 1)) != 0)
                {
                  v193 = std::__next_prime(v193);
                  v182 = *(_QWORD *)(v43 + 8488);
                }
                if (v193 <= v182)
                {
                  if (v193 >= v182)
                    goto LABEL_363;
                  v206 = vcvtps_u32_f32((float)*(unint64_t *)(v43 + 8504) / *(float *)(v43 + 8512));
                  if (v182 < 3
                    || (v207 = (uint8x8_t)vcnt_s8((int8x8_t)v182), v207.i16[0] = vaddlv_u8(v207), v207.u32[0] > 1uLL))
                  {
                    v206 = std::__next_prime(v206);
                  }
                  else
                  {
                    v208 = 1 << -(char)__clz(v206 - 1);
                    if (v206 >= 2)
                      v206 = v208;
                  }
                  if (v193 <= v206)
                    v193 = v206;
                  if (v193 >= v182)
                    goto LABEL_363;
                  if (!v193)
                  {
                    v213 = *(void **)(v43 + 8480);
                    *(_QWORD *)(v43 + 8480) = 0;
                    if (v213)
                      operator delete(v213);
                    *(_QWORD *)(v43 + 8488) = 0;
                    goto LABEL_363;
                  }
                }
                if (v193 >> 61)
                  goto LABEL_532;
                v194 = operator new(8 * v193);
                v195 = *(void **)(v43 + 8480);
                *(_QWORD *)(v43 + 8480) = v194;
                if (v195)
                  operator delete(v195);
                v196 = 0;
                *(_QWORD *)(v43 + 8488) = v193;
                do
                  *(_QWORD *)(*(_QWORD *)(v43 + 8480) + 8 * v196++) = 0;
                while (v193 != v196);
                v197 = *(_QWORD **)(v43 + 8496);
                if (!v197)
                  goto LABEL_363;
                v198 = v43 + 8496;
                v199 = v197[1];
                v200 = v193 - 1;
                if ((v193 & (v193 - 1)) == 0)
                {
                  v201 = v199 & v200;
                  *(_QWORD *)(*(_QWORD *)(v43 + 8480) + 8 * v201) = v198;
                  while (1)
                  {
                    v202 = (_QWORD *)*v197;
                    if (!*v197)
                      break;
                    v203 = v202[1] & v200;
                    if (v203 == v201)
                    {
                      v197 = (_QWORD *)*v197;
                    }
                    else
                    {
                      v204 = *(_QWORD *)(v43 + 8480);
                      if (*(_QWORD *)(v204 + 8 * v203))
                      {
                        *v197 = *v202;
                        v205 = 8 * v203;
                        *v202 = **(_QWORD **)(*(_QWORD *)(v43 + 8480) + v205);
                        **(_QWORD **)(*(_QWORD *)(v43 + 8480) + v205) = v202;
                      }
                      else
                      {
                        *(_QWORD *)(v204 + 8 * v203) = v197;
                        v197 = v202;
                        v201 = v203;
                      }
                    }
                  }
LABEL_363:
                  v182 = *(_QWORD *)(v43 + 8488);
                  if ((v182 & (v182 - 1)) != 0)
                  {
                    if (v57 >= v182)
                      v150 = v57 % v182;
                    else
                      v150 = v57;
                  }
                  else
                  {
                    v150 = (v182 - 1) & v57;
                  }
                  goto LABEL_368;
                }
                if (v199 >= v193)
                  v199 %= v193;
                *(_QWORD *)(*(_QWORD *)(v43 + 8480) + 8 * v199) = v198;
                v209 = (_QWORD *)*v197;
                if (!*v197)
                  goto LABEL_363;
                while (1)
                {
                  v211 = v209[1];
                  if (v211 >= v193)
                    v211 %= v193;
                  if (v211 != v199)
                  {
                    v212 = *(_QWORD *)(v43 + 8480);
                    if (!*(_QWORD *)(v212 + 8 * v211))
                    {
                      *(_QWORD *)(v212 + 8 * v211) = v197;
                      goto LABEL_349;
                    }
                    *v197 = *v209;
                    v210 = 8 * v211;
                    *v209 = **(_QWORD **)(*(_QWORD *)(v43 + 8480) + v210);
                    **(_QWORD **)(*(_QWORD *)(v43 + 8480) + v210) = v209;
                    v209 = v197;
                  }
                  v211 = v199;
LABEL_349:
                  v197 = v209;
                  v209 = (_QWORD *)*v209;
                  v199 = v211;
                  if (!v209)
                    goto LABEL_363;
                }
              }
              v181 = *(_QWORD *)(*(_QWORD *)v150 + 8);
              if ((v147 & (v147 - 1)) != 0)
              {
                if (v181 >= v147)
                  v181 %= v147;
              }
              else
              {
                v181 &= v147 - 1;
              }
              v180 = (uint64_t *)(*v44 + 8 * v181);
            }
            *v180 = v150;
            goto LABEL_289;
          }
          v157 = 1;
          if (v147 >= 3)
            v157 = (v147 & (v147 - 1)) != 0;
          v158 = v157 | (2 * v147);
          v159 = vcvtps_u32_f32(v155 / v156);
          if (v158 <= v159)
            v160 = v159;
          else
            v160 = v158;
          if (v160 == 1)
          {
            v160 = 2;
          }
          else if ((v160 & (v160 - 1)) != 0)
          {
            v160 = std::__next_prime(v160);
            v147 = *(_QWORD *)(v43 + 8448);
          }
          if (v160 <= v147)
          {
            if (v160 >= v147)
              goto LABEL_275;
            v172 = vcvtps_u32_f32((float)*(unint64_t *)(v43 + 8464) / *(float *)(v43 + 8472));
            if (v147 < 3
              || (v173 = (uint8x8_t)vcnt_s8((int8x8_t)v147), v173.i16[0] = vaddlv_u8(v173), v173.u32[0] > 1uLL))
            {
              v172 = std::__next_prime(v172);
            }
            else
            {
              v174 = 1 << -(char)__clz(v172 - 1);
              if (v172 >= 2)
                v172 = v174;
            }
            if (v160 <= v172)
              v160 = v172;
            if (v160 >= v147)
              goto LABEL_275;
            if (!v160)
            {
              v178 = (_QWORD *)*v44;
              *v44 = 0;
              if (v178)
                operator delete(v178);
              *(_QWORD *)(v43 + 8448) = 0;
              goto LABEL_275;
            }
          }
          if (v160 >> 61)
            goto LABEL_532;
          v161 = operator new(8 * v160);
          v162 = (_QWORD *)*v44;
          *v44 = v161;
          if (v162)
            operator delete(v162);
          v163 = 0;
          *(_QWORD *)(v43 + 8448) = v160;
          do
            *(_QWORD *)(*v44 + 8 * v163++) = 0;
          while (v160 != v163);
          v164 = *(_QWORD **)(v43 + 8456);
          if (!v164)
            goto LABEL_275;
          v165 = v43 + 8456;
          v166 = v164[1];
          v167 = v160 - 1;
          if ((v160 & (v160 - 1)) == 0)
          {
            v168 = v166 & v167;
            *(_QWORD *)(*v44 + 8 * v168) = v165;
            while (1)
            {
              v169 = (_QWORD *)*v164;
              if (!*v164)
                break;
              v170 = v169[1] & v167;
              if (v170 == v168)
              {
                v164 = (_QWORD *)*v164;
              }
              else if (*(_QWORD *)(*v44 + 8 * v170))
              {
                *v164 = *v169;
                v171 = 8 * v170;
                *v169 = **(_QWORD **)(*v44 + v171);
                **(_QWORD **)(*v44 + v171) = v169;
              }
              else
              {
                *(_QWORD *)(*v44 + 8 * v170) = v164;
                v164 = v169;
                v168 = v170;
              }
            }
LABEL_275:
            v147 = *(_QWORD *)(v43 + 8448);
            if ((v147 & (v147 - 1)) != 0)
            {
              if (v146 >= v147)
                v98 = v146 % v147;
              else
                v98 = v146;
            }
            else
            {
              v98 = (v147 - 1) & v146;
            }
            goto LABEL_280;
          }
          if (v166 >= v160)
            v166 %= v160;
          *(_QWORD *)(*v44 + 8 * v166) = v165;
          v175 = (_QWORD *)*v164;
          if (!*v164)
            goto LABEL_275;
          while (1)
          {
            v177 = v175[1];
            if (v177 >= v160)
              v177 %= v160;
            if (v177 != v166)
            {
              if (!*(_QWORD *)(*v44 + 8 * v177))
              {
                *(_QWORD *)(*v44 + 8 * v177) = v164;
                goto LABEL_261;
              }
              *v164 = *v175;
              v176 = 8 * v177;
              *v175 = **(_QWORD **)(*v44 + v176);
              **(_QWORD **)(*v44 + v176) = v175;
              v175 = v164;
            }
            v177 = v166;
LABEL_261:
            v164 = v175;
            v175 = (_QWORD *)*v175;
            v166 = v177;
            if (!v175)
              goto LABEL_275;
          }
        }
        v133 = *(_QWORD *)(*(_QWORD *)v98 + 8);
        if ((v116 & (v116 - 1)) != 0)
        {
          if (v133 >= v116)
            v133 %= v116;
        }
        else
        {
          v133 &= v116 - 1;
        }
        v132 = (unint64_t *)(*v115 + 8 * v133);
      }
      *v132 = v98;
      goto LABEL_177;
    }
LABEL_533:
    abort();
  }
  *(_QWORD *)&v292 = v45[6];
  v47 = *(_QWORD *)(v43 + 8328);
  if (v46 >= (unint64_t)((*(_QWORD *)(v43 + 8336) - v47) >> 3))
    goto LABEL_525;
  v48 = *(_QWORD *)(v47 + 8 * v46);
  if (!v48 || HIDWORD(v46) != HIDWORD(v48))
    goto LABEL_525;
  v50 = *(_QWORD *)(v43 + 8352);
  v51 = (_QWORD **)(v50 + 24 * v48);
  if (v51 == *(_QWORD ***)(v43 + 8360) || v50 == 0)
    goto LABEL_525;
  v53 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleSSAO>> const&>,std::tuple<>>(v43 + 8264, v46, &v292);
  ++v53[3];
  v54 = *v51;
  if (!*v51)
    goto LABEL_525;
LABEL_478:
  if ((v263 & 1) == 0
  {
    do
      v285 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v285 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index = v285;
  }
  v264 = v15[1];
  if (v264)
  {
    v265 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index;
    v266 = (uint8x8_t)vcnt_s8((int8x8_t)v264);
    v266.i16[0] = vaddlv_u8(v266);
    if (v266.u32[0] > 1uLL)
    {
      v267 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index;
      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index >= v264)
        v267 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index % v264;
    }
    else
    {
      v267 = (v264 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index;
    }
    v268 = *(_QWORD **)(*v15 + 8 * v267);
    if (v268)
    {
      v269 = (_QWORD *)*v268;
      if (v269)
      {
        if (v266.u32[0] < 2uLL)
        {
          v270 = v264 - 1;
          while (1)
          {
            v272 = v269[1];
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index == v272)
            {
              if (v269[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index)
                goto LABEL_500;
            }
            else if ((v272 & v270) != v267)
            {
              goto LABEL_525;
            }
            v269 = (_QWORD *)*v269;
            if (!v269)
              goto LABEL_525;
          }
        }
        do
        {
          v271 = v269[1];
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index == v271)
          {
            if (v269[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index)
            {
LABEL_500:
              if ((v273 & 1) == 0)
              {
                if ((_DWORD)v286)
                {
                  md::typeToIntMap(v286);
                }
              }
              if (!qword_1EE5779D0)
                goto LABEL_531;
              v274 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
              v274.i16[0] = vaddlv_u8(v274);
              if (v274.u32[0] > 1uLL)
              {
                v275 = v265;
                if (v265 >= qword_1EE5779D0)
                  v275 = v265 % qword_1EE5779D0;
              }
              else
              {
                v275 = (qword_1EE5779D0 - 1) & v265;
              }
              v276 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v275);
              if (!v276 || (v277 = *v276) == 0)
LABEL_531:
                abort();
              if (v274.u32[0] < 2uLL)
              {
                while (1)
                {
                  v279 = v277[1];
                  if ((uint64_t *)v265 == v279)
                  {
                    if (v277[2] == (uint64_t *)v265)
                      goto LABEL_521;
                  }
                  else if (((unint64_t)v279 & (qword_1EE5779D0 - 1)) != v275)
                  {
                    goto LABEL_531;
                  }
                  v277 = (uint64_t **)*v277;
                  if (!v277)
                    goto LABEL_531;
                }
              }
              while (1)
              {
                v278 = (unint64_t)v277[1];
                if (v265 == v278)
                {
                  if (v277[2] == (uint64_t *)v265)
                  {
LABEL_521:
                    v280 = *((int *)v277 + 6);
                    v281 = *((int *)v277 + 7);
                    if ((_DWORD)v280 != -1)
                      ggl::PipelineSetup::setConstantData(v287, v280, (uint64_t)v54, 1);
                    if ((_DWORD)v281 != -1)
                      ggl::PipelineSetup::setConstantData(v287, v281, (uint64_t)v54, 2);
                    goto LABEL_525;
                  }
                }
                else
                {
                  if (v278 >= qword_1EE5779D0)
                    v278 %= (unint64_t)qword_1EE5779D0;
                  if (v278 != v275)
                    goto LABEL_531;
                }
                v277 = (uint64_t **)*v277;
                if (!v277)
                  goto LABEL_531;
              }
            }
          }
          else
          {
            if (v271 >= v264)
              v271 %= v264;
            if (v271 != v267)
              break;
          }
          v269 = (_QWORD *)*v269;
        }
        while (v269);
      }
    }
  }
LABEL_525:
  v282 = v291;
  if (v291)
  {
    v283 = (unint64_t *)&v291->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
}

void sub_19F975FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;

  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(a1);
}

void md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint8x8_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  md *v34;
  md *v35;
  int v36;
  _QWORD *v37;

  if (a3)
  {
    if ((v6 & 1) == 0)
    {
      v37 = a1;
      v36 = a4;
      a4 = v36;
      v32 = v31;
      a1 = v37;
      if (v32)
      {
        do
          v33 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v33 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index = v33;
        a4 = v36;
        a1 = v37;
      }
    }
    v7 = a1[1];
    if (v7)
    {
      v8 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index;
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v10 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index;
        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index >= v7)
          v10 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index % v7;
      }
      else
      {
        v10 = (v7 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index;
      }
      v11 = *(_QWORD **)(*a1 + 8 * v10);
      if (v11)
      {
        v12 = (_QWORD *)*v11;
        if (v12)
        {
          if (v9.u32[0] < 2uLL)
          {
            v13 = v7 - 1;
            while (1)
            {
              v15 = v12[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index == v15)
              {
                if (v12[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index)
                  goto LABEL_24;
              }
              else if ((v15 & v13) != v10)
              {
                return;
              }
              v12 = (_QWORD *)*v12;
              if (!v12)
                return;
            }
          }
          do
          {
            v14 = v12[1];
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index == v14)
            {
              if (v12[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index)
              {
LABEL_24:
                if (a4)
                {
                  if ((v16 & 1) == 0)
                  {
                    if ((_DWORD)v34)
                    {
                      md::typeToIntOrVectorMap(v34);
                    }
                  }
                  if (qword_1EE57AA18)
                  {
                    v17 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE57AA18);
                    v17.i16[0] = vaddlv_u8(v17);
                    if (v17.u32[0] > 1uLL)
                    {
                      v18 = v8;
                      if (v8 >= qword_1EE57AA18)
                        v18 = v8 % qword_1EE57AA18;
                    }
                    else
                    {
                      v18 = (qword_1EE57AA18 - 1) & v8;
                    }
                    v22 = *(uint64_t ***)(md::typeToIntOrVectorMap(void)::typeToIntOrVectorMap + 8 * v18);
                    if (v22)
                    {
                      v23 = *v22;
                      if (v23)
                      {
                        if (v17.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v25 = v23[1];
                            if (v8 == v25)
                            {
                              if (v23[2] == v8)
                                goto LABEL_68;
                            }
                            else if ((v25 & (qword_1EE57AA18 - 1)) != v18)
                            {
                              goto LABEL_73;
                            }
                            v23 = (uint64_t *)*v23;
                            if (!v23)
                              goto LABEL_73;
                          }
                        }
                        do
                        {
                          v24 = v23[1];
                          if (v8 == v24)
                          {
                            if (v23[2] == v8)
                              goto LABEL_68;
                          }
                          else
                          {
                            if (v24 >= qword_1EE57AA18)
                              v24 %= (unint64_t)qword_1EE57AA18;
                            if (v24 != v18)
                              break;
                          }
                          v23 = (uint64_t *)*v23;
                        }
                        while (v23);
                      }
                    }
                  }
                }
                else
                {
                  if ((v19 & 1) == 0)
                  {
                    if ((_DWORD)v35)
                    {
                      md::typeToIntMap(v35);
                    }
                  }
                  if (qword_1EE5779D0)
                  {
                    v20 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                    v20.i16[0] = vaddlv_u8(v20);
                    if (v20.u32[0] > 1uLL)
                    {
                      v21 = v8;
                      if (v8 >= qword_1EE5779D0)
                        v21 = v8 % qword_1EE5779D0;
                    }
                    else
                    {
                      v21 = (qword_1EE5779D0 - 1) & v8;
                    }
                    v26 = *(uint64_t ***)(md::typeToIntMap(void)::typeToIntMap + 8 * v21);
                    if (v26)
                    {
                      v23 = *v26;
                      if (v23)
                      {
                        if (v20.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v28 = v23[1];
                            if (v8 == v28)
                            {
                              if (v23[2] == v8)
                                goto LABEL_68;
                            }
                            else if ((v28 & (qword_1EE5779D0 - 1)) != v21)
                            {
                              goto LABEL_73;
                            }
                            v23 = (uint64_t *)*v23;
                            if (!v23)
                              goto LABEL_73;
                          }
                        }
                        do
                        {
                          v27 = v23[1];
                          if (v8 == v27)
                          {
                            if (v23[2] == v8)
                            {
LABEL_68:
                              v29 = *((_DWORD *)v23 + 7);
                              v30 = *((int *)v23 + 6);
                              if ((_DWORD)v30 != -1)
                                ggl::PipelineSetup::setConstantData(a2, v30, a3, 1);
                              if (v29 != -1)
                                ggl::PipelineSetup::setConstantData(a2, v29, a3, 2);
                              return;
                            }
                          }
                          else
                          {
                            if (v27 >= qword_1EE5779D0)
                              v27 %= (unint64_t)qword_1EE5779D0;
                            if (v27 != v21)
                              break;
                          }
                          v23 = (uint64_t *)*v23;
                        }
                        while (v23);
                      }
                    }
                  }
                }
LABEL_73:
                abort();
              }
            }
            else
            {
              if (v14 >= v7)
                v14 %= v7;
              if (v14 != v10)
                return;
            }
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
      }
    }
  }
}

void sub_19F9764A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::AssignShadowTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignShadowTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::AssignShadowTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignShadowTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BA90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::AssignShadowTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignShadowTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BA90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::AssignShadowTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignShadowTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t ***v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  unint64_t v72;
  md *v73;

  v5 = **(_QWORD ***)(a1 + 8);
  v6 = *a3;
  v7 = *a3;
  v8 = v5[50];
  v9 = (v5[51] - v8) >> 3;
  if (v7 < v9
    && (v10 = *(_QWORD *)(v8 + 8 * v7)) != 0
    && HIDWORD(v6) == HIDWORD(v10)
    && ((v11 = v5[53], v11 + 16 * v10 != v5[54]) ? (v12 = v11 == 0) : (v12 = 1), !v12))
  {
    v20 = *(_QWORD *)(v8 + 8 * v7);
    v21 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v5 + 37), v6, a3);
    ++v21[3];
    v13 = *(_QWORD **)(v11 + 16 * v20 + 8);
    v5 = **(_QWORD ***)(a1 + 8);
    v6 = *a3;
    v8 = v5[50];
    v7 = *a3;
    if (v7 >= (v5[51] - v8) >> 3)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if (v7 >= v9)
    {
LABEL_18:
      v19 = 0;
      goto LABEL_19;
    }
  }
  v14 = *(_QWORD *)(v8 + 8 * v7);
  if (!v14 || HIDWORD(v6) != HIDWORD(v14))
    goto LABEL_18;
  v15 = v5[53];
  v16 = (uint64_t *)(v15 + 16 * v14);
  if (v16 == (uint64_t *)v5[54] || v15 == 0)
    goto LABEL_18;
  v18 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v5 + 37), v6, a3);
  ++v18[3];
  v19 = *v16;
LABEL_19:
  v22 = **(_QWORD **)(a1 + 16);
  if ((v23 & 1) == 0
  {
    do
      v72 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v72 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::ShadowTexture>(void)::index = v72;
  }
  v24 = v13[1];
  if (!v24)
    return;
  v25 = gdc::typeIndex<DaVinci::ShadowTexture>(void)::index;
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = gdc::typeIndex<DaVinci::ShadowTexture>(void)::index;
    if (gdc::typeIndex<DaVinci::ShadowTexture>(void)::index >= v24)
      v27 = gdc::typeIndex<DaVinci::ShadowTexture>(void)::index % v24;
  }
  else
  {
    v27 = (v24 - 1) & gdc::typeIndex<DaVinci::ShadowTexture>(void)::index;
  }
  v28 = *(_QWORD **)(*v13 + 8 * v27);
  if (!v28)
    return;
  v29 = (_QWORD *)*v28;
  if (!v29)
    return;
  if (v26.u32[0] < 2uLL)
  {
    v30 = v24 - 1;
    while (1)
    {
      v32 = v29[1];
      if (gdc::typeIndex<DaVinci::ShadowTexture>(void)::index == v32)
      {
        if (v29[2] == gdc::typeIndex<DaVinci::ShadowTexture>(void)::index)
          goto LABEL_41;
      }
      else if ((v32 & v30) != v27)
      {
        return;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        return;
    }
  }
  while (1)
  {
    v31 = v29[1];
    if (gdc::typeIndex<DaVinci::ShadowTexture>(void)::index == v31)
      break;
    if (v31 >= v24)
      v31 %= v24;
    if (v31 != v27)
      return;
LABEL_30:
    v29 = (_QWORD *)*v29;
    if (!v29)
      return;
  }
  if (v29[2] != gdc::typeIndex<DaVinci::ShadowTexture>(void)::index)
    goto LABEL_30;
LABEL_41:
  if ((v33 & 1) == 0)
  {
    if ((_DWORD)v73)
    {
      md::typeToIntMap(v73);
    }
  }
  if (!qword_1EE5779D0)
    goto LABEL_91;
  v34 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    v35 = v25;
    if (v25 >= qword_1EE5779D0)
      v35 = v25 % qword_1EE5779D0;
  }
  else
  {
    v35 = (qword_1EE5779D0 - 1) & v25;
  }
  v36 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v35);
  if (!v36 || (v37 = *v36) == 0)
LABEL_91:
    abort();
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      v39 = v37[1];
      if ((uint64_t *)v25 == v39)
      {
        if (v37[2] == (uint64_t *)v25)
          goto LABEL_62;
      }
      else if (((unint64_t)v39 & (qword_1EE5779D0 - 1)) != v35)
      {
        goto LABEL_91;
      }
      v37 = (uint64_t **)*v37;
      if (!v37)
        goto LABEL_91;
    }
  }
  while (2)
  {
    v38 = (unint64_t)v37[1];
    if (v25 != v38)
    {
      if (v38 >= qword_1EE5779D0)
        v38 %= (unint64_t)qword_1EE5779D0;
      if (v38 != v35)
        goto LABEL_91;
      goto LABEL_52;
    }
    if (v37[2] != (uint64_t *)v25)
    {
LABEL_52:
      v37 = (uint64_t **)*v37;
      if (!v37)
        goto LABEL_91;
      continue;
    }
    break;
  }
LABEL_62:
  v41 = *((int *)v37 + 6);
  v40 = *((int *)v37 + 7);
  if ((_DWORD)v41 != -1)
  {
    v42 = *(_QWORD *)(v19 + 16);
    if (v42)
    {
      v43 = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 72);
      v44 = *(_QWORD *)(v43 + 8);
      v45 = *(_QWORD *)(v44 + 72);
      if (v45)
      {
        v46 = 0;
        v47 = *(_QWORD *)(v44 + 64);
        v48 = (unsigned __int8 *)(v47 + 1);
        while (1)
        {
          v49 = *v48;
          v48 += 2;
          if (v49 == v41)
            break;
          if (v45 == ++v46)
            goto LABEL_68;
        }
        v56 = (unsigned __int8 *)(v47 + 2 * v46);
LABEL_75:
        *(_QWORD *)(*(_QWORD *)(v19 + 96) + 8 * *v56) = v22;
      }
      else
      {
LABEL_68:
        v50 = *(_QWORD *)(v43 + 24);
        v51 = *(_QWORD *)(v50 + 72);
        if (v51)
        {
          v52 = 0;
          v53 = *(_QWORD *)(v50 + 64);
          v54 = (unsigned __int8 *)(v53 + 1);
          while (1)
          {
            v55 = *v54;
            v54 += 2;
            if (v55 == v41)
              break;
            if (v51 == ++v52)
              goto LABEL_76;
          }
          v56 = (unsigned __int8 *)(v53 + 2 * v52);
          goto LABEL_75;
        }
      }
    }
  }
LABEL_76:
  if ((_DWORD)v40 != -1)
  {
    v57 = *(_QWORD *)(v19 + 16);
    if (v57)
    {
      v58 = *(_QWORD *)(*(_QWORD *)(v57 + 48) + 72);
      v59 = *(_QWORD *)(v58 + 8);
      v60 = *(_QWORD *)(v59 + 72);
      if (v60)
      {
        v61 = 0;
        v62 = *(_QWORD *)(v59 + 64);
        v63 = (unsigned __int8 *)(v62 + 1);
        while (1)
        {
          v64 = *v63;
          v63 += 2;
          if (v64 == v40)
            break;
          if (v60 == ++v61)
            goto LABEL_82;
        }
        v71 = (unsigned __int8 *)(v62 + 2 * v61);
LABEL_89:
        *(_QWORD *)(*(_QWORD *)(v19 + 96) + 8 * *v71) = v22;
      }
      else
      {
LABEL_82:
        v65 = *(_QWORD *)(v58 + 24);
        v66 = *(_QWORD *)(v65 + 72);
        if (v66)
        {
          v67 = 0;
          v68 = *(_QWORD *)(v65 + 64);
          v69 = (unsigned __int8 *)(v68 + 1);
          while (1)
          {
            v70 = *v69;
            v69 += 2;
            if (v70 == v40)
              break;
            if (v66 == ++v67)
              return;
          }
          v71 = (unsigned __int8 *)(v68 + 2 * v67);
          goto LABEL_89;
        }
      }
    }
  }
}

void sub_19F9769C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::AssignOcclusionTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignOcclusionTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::AssignOcclusionTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignOcclusionTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BBF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::AssignOcclusionTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignOcclusionTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BBF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::AssignOcclusionTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignOcclusionTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t ***v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  unint64_t v72;
  md *v73;

  v5 = **(_QWORD ***)(a1 + 8);
  v6 = *a3;
  v7 = *a3;
  v8 = v5[50];
  v9 = (v5[51] - v8) >> 3;
  if (v7 < v9
    && (v10 = *(_QWORD *)(v8 + 8 * v7)) != 0
    && HIDWORD(v6) == HIDWORD(v10)
    && ((v11 = v5[53], v11 + 16 * v10 != v5[54]) ? (v12 = v11 == 0) : (v12 = 1), !v12))
  {
    v20 = *(_QWORD *)(v8 + 8 * v7);
    v21 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v5 + 37), v6, a3);
    ++v21[3];
    v13 = *(_QWORD **)(v11 + 16 * v20 + 8);
    v5 = **(_QWORD ***)(a1 + 8);
    v6 = *a3;
    v8 = v5[50];
    v7 = *a3;
    if (v7 >= (v5[51] - v8) >> 3)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if (v7 >= v9)
    {
LABEL_18:
      v19 = 0;
      goto LABEL_19;
    }
  }
  v14 = *(_QWORD *)(v8 + 8 * v7);
  if (!v14 || HIDWORD(v6) != HIDWORD(v14))
    goto LABEL_18;
  v15 = v5[53];
  v16 = (uint64_t *)(v15 + 16 * v14);
  if (v16 == (uint64_t *)v5[54] || v15 == 0)
    goto LABEL_18;
  v18 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v5 + 37), v6, a3);
  ++v18[3];
  v19 = *v16;
LABEL_19:
  v22 = **(_QWORD **)(a1 + 16);
  if ((v23 & 1) == 0
  {
    do
      v72 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v72 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index = v72;
  }
  v24 = v13[1];
  if (!v24)
    return;
  v25 = gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index;
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index;
    if (gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index >= v24)
      v27 = gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index % v24;
  }
  else
  {
    v27 = (v24 - 1) & gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index;
  }
  v28 = *(_QWORD **)(*v13 + 8 * v27);
  if (!v28)
    return;
  v29 = (_QWORD *)*v28;
  if (!v29)
    return;
  if (v26.u32[0] < 2uLL)
  {
    v30 = v24 - 1;
    while (1)
    {
      v32 = v29[1];
      if (gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index == v32)
      {
        if (v29[2] == gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index)
          goto LABEL_41;
      }
      else if ((v32 & v30) != v27)
      {
        return;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        return;
    }
  }
  while (1)
  {
    v31 = v29[1];
    if (gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index == v31)
      break;
    if (v31 >= v24)
      v31 %= v24;
    if (v31 != v27)
      return;
LABEL_30:
    v29 = (_QWORD *)*v29;
    if (!v29)
      return;
  }
  if (v29[2] != gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index)
    goto LABEL_30;
LABEL_41:
  if ((v33 & 1) == 0)
  {
    if ((_DWORD)v73)
    {
      md::typeToIntMap(v73);
    }
  }
  if (!qword_1EE5779D0)
    goto LABEL_91;
  v34 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    v35 = v25;
    if (v25 >= qword_1EE5779D0)
      v35 = v25 % qword_1EE5779D0;
  }
  else
  {
    v35 = (qword_1EE5779D0 - 1) & v25;
  }
  v36 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v35);
  if (!v36 || (v37 = *v36) == 0)
LABEL_91:
    abort();
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      v39 = v37[1];
      if ((uint64_t *)v25 == v39)
      {
        if (v37[2] == (uint64_t *)v25)
          goto LABEL_62;
      }
      else if (((unint64_t)v39 & (qword_1EE5779D0 - 1)) != v35)
      {
        goto LABEL_91;
      }
      v37 = (uint64_t **)*v37;
      if (!v37)
        goto LABEL_91;
    }
  }
  while (2)
  {
    v38 = (unint64_t)v37[1];
    if (v25 != v38)
    {
      if (v38 >= qword_1EE5779D0)
        v38 %= (unint64_t)qword_1EE5779D0;
      if (v38 != v35)
        goto LABEL_91;
      goto LABEL_52;
    }
    if (v37[2] != (uint64_t *)v25)
    {
LABEL_52:
      v37 = (uint64_t **)*v37;
      if (!v37)
        goto LABEL_91;
      continue;
    }
    break;
  }
LABEL_62:
  v41 = *((int *)v37 + 6);
  v40 = *((int *)v37 + 7);
  if ((_DWORD)v41 != -1)
  {
    v42 = *(_QWORD *)(v19 + 16);
    if (v42)
    {
      v43 = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 72);
      v44 = *(_QWORD *)(v43 + 8);
      v45 = *(_QWORD *)(v44 + 72);
      if (v45)
      {
        v46 = 0;
        v47 = *(_QWORD *)(v44 + 64);
        v48 = (unsigned __int8 *)(v47 + 1);
        while (1)
        {
          v49 = *v48;
          v48 += 2;
          if (v49 == v41)
            break;
          if (v45 == ++v46)
            goto LABEL_68;
        }
        v56 = (unsigned __int8 *)(v47 + 2 * v46);
LABEL_75:
        *(_QWORD *)(*(_QWORD *)(v19 + 96) + 8 * *v56) = v22;
      }
      else
      {
LABEL_68:
        v50 = *(_QWORD *)(v43 + 24);
        v51 = *(_QWORD *)(v50 + 72);
        if (v51)
        {
          v52 = 0;
          v53 = *(_QWORD *)(v50 + 64);
          v54 = (unsigned __int8 *)(v53 + 1);
          while (1)
          {
            v55 = *v54;
            v54 += 2;
            if (v55 == v41)
              break;
            if (v51 == ++v52)
              goto LABEL_76;
          }
          v56 = (unsigned __int8 *)(v53 + 2 * v52);
          goto LABEL_75;
        }
      }
    }
  }
LABEL_76:
  if ((_DWORD)v40 != -1)
  {
    v57 = *(_QWORD *)(v19 + 16);
    if (v57)
    {
      v58 = *(_QWORD *)(*(_QWORD *)(v57 + 48) + 72);
      v59 = *(_QWORD *)(v58 + 8);
      v60 = *(_QWORD *)(v59 + 72);
      if (v60)
      {
        v61 = 0;
        v62 = *(_QWORD *)(v59 + 64);
        v63 = (unsigned __int8 *)(v62 + 1);
        while (1)
        {
          v64 = *v63;
          v63 += 2;
          if (v64 == v40)
            break;
          if (v60 == ++v61)
            goto LABEL_82;
        }
        v71 = (unsigned __int8 *)(v62 + 2 * v61);
LABEL_89:
        *(_QWORD *)(*(_QWORD *)(v19 + 96) + 8 * *v71) = v22;
      }
      else
      {
LABEL_82:
        v65 = *(_QWORD *)(v58 + 24);
        v66 = *(_QWORD *)(v65 + 72);
        if (v66)
        {
          v67 = 0;
          v68 = *(_QWORD *)(v65 + 64);
          v69 = (unsigned __int8 *)(v68 + 1);
          while (1)
          {
            v70 = *v69;
            v69 += 2;
            if (v70 == v40)
              break;
            if (v66 == ++v67)
              return;
          }
          v71 = (unsigned __int8 *)(v68 + 2 * v67);
          goto LABEL_89;
        }
      }
    }
  }
}

void sub_19F976ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::AssignRouteMaskTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignRouteMaskTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::AssignRouteMaskTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignRouteMaskTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BC40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::AssignRouteMaskTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignRouteMaskTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BC40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::AssignRouteMaskTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>)::$_0,std::allocator<md::ita::AssignRouteMaskTextureIndex::operator()(ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>)::$_0>,void ()(md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t ***v41;
  uint64_t **v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  unsigned __int8 *v76;
  unint64_t v77;
  md *v78;

  v5 = **(_QWORD ***)(a1 + 8);
  v6 = *a3;
  v7 = *a3;
  v8 = v5[50];
  v9 = (v5[51] - v8) >> 3;
  if (v7 < v9
    && (v10 = *(_QWORD *)(v8 + 8 * v7)) != 0
    && HIDWORD(v6) == HIDWORD(v10)
    && ((v11 = v5[53], v11 + 16 * v10 != v5[54]) ? (v12 = v11 == 0) : (v12 = 1), !v12))
  {
    v20 = *(_QWORD *)(v8 + 8 * v7);
    v21 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v5 + 37), v6, a3);
    ++v21[3];
    v13 = *(_QWORD **)(v11 + 16 * v20 + 8);
    v5 = **(_QWORD ***)(a1 + 8);
    v6 = *a3;
    v8 = v5[50];
    v7 = *a3;
    if (v7 >= (v5[51] - v8) >> 3)
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if (v7 >= v9)
    {
LABEL_18:
      v19 = 0;
      goto LABEL_19;
    }
  }
  v14 = *(_QWORD *)(v8 + 8 * v7);
  if (!v14 || HIDWORD(v6) != HIDWORD(v14))
    goto LABEL_18;
  v15 = v5[53];
  v16 = (uint64_t *)(v15 + 16 * v14);
  if (v16 == (uint64_t *)v5[54] || v15 == 0)
    goto LABEL_18;
  v18 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v5 + 37), v6, a3);
  ++v18[3];
  v19 = *v16;
LABEL_19:
  v22 = **(_QWORD **)(a1 + 16);
  v23 = *(_QWORD *)(v22 + 160);
  if (v23
    && (v24 = *(_QWORD *)(v22 + 8),
        v25 = *(_QWORD *)(v23 + 32),
        v26 = *(_QWORD *)(v24 + 96),
        v25 < (*(_QWORD *)(v24 + 104) - v26) >> 3))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v26 + 8 * v25) + 16);
  }
  else
  {
    v27 = 0;
  }
  if ((v28 & 1) == 0
  {
    do
      v77 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
    while (__stlxr(v77 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
    gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index = v77;
  }
  v29 = v13[1];
  if (!v29)
    return;
  v30 = gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index;
  v31 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    v32 = gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index;
    if (gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index >= v29)
      v32 = gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index % v29;
  }
  else
  {
    v32 = (v29 - 1) & gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index;
  }
  v33 = *(_QWORD **)(*v13 + 8 * v32);
  if (!v33)
    return;
  v34 = (_QWORD *)*v33;
  if (!v34)
    return;
  if (v31.u32[0] < 2uLL)
  {
    v35 = v29 - 1;
    while (1)
    {
      v37 = v34[1];
      if (gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index == v37)
      {
        if (v34[2] == gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index)
          goto LABEL_45;
      }
      else if ((v37 & v35) != v32)
      {
        return;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
  }
  while (1)
  {
    v36 = v34[1];
    if (gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index == v36)
      break;
    if (v36 >= v29)
      v36 %= v29;
    if (v36 != v32)
      return;
LABEL_34:
    v34 = (_QWORD *)*v34;
    if (!v34)
      return;
  }
  if (v34[2] != gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index)
    goto LABEL_34;
LABEL_45:
  if ((v38 & 1) == 0)
  {
    if ((_DWORD)v78)
    {
      md::typeToIntMap(v78);
    }
  }
  if (!qword_1EE5779D0)
    goto LABEL_95;
  v39 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = v30;
    if (v30 >= qword_1EE5779D0)
      v40 = v30 % qword_1EE5779D0;
  }
  else
  {
    v40 = (qword_1EE5779D0 - 1) & v30;
  }
  v41 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v40);
  if (!v41 || (v42 = *v41) == 0)
LABEL_95:
    abort();
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      v44 = v42[1];
      if ((uint64_t *)v30 == v44)
      {
        if (v42[2] == (uint64_t *)v30)
          goto LABEL_66;
      }
      else if (((unint64_t)v44 & (qword_1EE5779D0 - 1)) != v40)
      {
        goto LABEL_95;
      }
      v42 = (uint64_t **)*v42;
      if (!v42)
        goto LABEL_95;
    }
  }
  while (2)
  {
    v43 = (unint64_t)v42[1];
    if (v30 != v43)
    {
      if (v43 >= qword_1EE5779D0)
        v43 %= (unint64_t)qword_1EE5779D0;
      if (v43 != v40)
        goto LABEL_95;
      goto LABEL_56;
    }
    if (v42[2] != (uint64_t *)v30)
    {
LABEL_56:
      v42 = (uint64_t **)*v42;
      if (!v42)
        goto LABEL_95;
      continue;
    }
    break;
  }
LABEL_66:
  v46 = *((int *)v42 + 6);
  v45 = *((int *)v42 + 7);
  if ((_DWORD)v46 != -1)
  {
    v47 = *(_QWORD *)(v19 + 16);
    if (v47)
    {
      v48 = *(_QWORD *)(*(_QWORD *)(v47 + 48) + 72);
      v49 = *(_QWORD *)(v48 + 8);
      v50 = *(_QWORD *)(v49 + 72);
      if (v50)
      {
        v51 = 0;
        v52 = *(_QWORD *)(v49 + 64);
        v53 = (unsigned __int8 *)(v52 + 1);
        while (1)
        {
          v54 = *v53;
          v53 += 2;
          if (v54 == v46)
            break;
          if (v50 == ++v51)
            goto LABEL_72;
        }
        v61 = (unsigned __int8 *)(v52 + 2 * v51);
LABEL_79:
        *(_QWORD *)(*(_QWORD *)(v19 + 96) + 8 * *v61) = v27;
      }
      else
      {
LABEL_72:
        v55 = *(_QWORD *)(v48 + 24);
        v56 = *(_QWORD *)(v55 + 72);
        if (v56)
        {
          v57 = 0;
          v58 = *(_QWORD *)(v55 + 64);
          v59 = (unsigned __int8 *)(v58 + 1);
          while (1)
          {
            v60 = *v59;
            v59 += 2;
            if (v60 == v46)
              break;
            if (v56 == ++v57)
              goto LABEL_80;
          }
          v61 = (unsigned __int8 *)(v58 + 2 * v57);
          goto LABEL_79;
        }
      }
    }
  }
LABEL_80:
  if ((_DWORD)v45 != -1)
  {
    v62 = *(_QWORD *)(v19 + 16);
    if (v62)
    {
      v63 = *(_QWORD *)(*(_QWORD *)(v62 + 48) + 72);
      v64 = *(_QWORD *)(v63 + 8);
      v65 = *(_QWORD *)(v64 + 72);
      if (v65)
      {
        v66 = 0;
        v67 = *(_QWORD *)(v64 + 64);
        v68 = (unsigned __int8 *)(v67 + 1);
        while (1)
        {
          v69 = *v68;
          v68 += 2;
          if (v69 == v45)
            break;
          if (v65 == ++v66)
            goto LABEL_86;
        }
        v76 = (unsigned __int8 *)(v67 + 2 * v66);
LABEL_93:
        *(_QWORD *)(*(_QWORD *)(v19 + 96) + 8 * *v76) = v27;
      }
      else
      {
LABEL_86:
        v70 = *(_QWORD *)(v63 + 24);
        v71 = *(_QWORD *)(v70 + 72);
        if (v71)
        {
          v72 = 0;
          v73 = *(_QWORD *)(v70 + 64);
          v74 = (unsigned __int8 *)(v73 + 1);
          while (1)
          {
            v75 = *v74;
            v74 += 2;
            if (v75 == v45)
              break;
            if (v71 == ++v72)
              return;
          }
          v76 = (unsigned __int8 *)(v73 + 2 * v72);
          goto LABEL_93;
        }
      }
    }
  }
}

void sub_19F97740C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::StyleTexture<md::LowZoomClimateStyle>::_processStylePixelsIfNecessary(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t v25;
  uint64_t v26;
  uint64_t v27;
  int shared_owners_high;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  int8x16x4_t v41;
  int8x16x4_t v42;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = (std::__shared_weak_count *)operator new(0x58uLL);
    v2->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    v2->__shared_weak_owners_ = 0;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
    v4 = v2 + 1;
    v5 = *(_DWORD *)(a1 + 92);
    v2[1].__shared_weak_owners_ = 0;
    v2[2].__vftable = 0;
    v2[1].__shared_owners_ = 0;
    LODWORD(v2[2].__shared_owners_) = 0;
    *(uint64_t *)((char *)&v2[2].__shared_owners_ + 4) = 0x100000001;
    HIDWORD(v2[2].__shared_weak_owners_) = 1;
    LODWORD(v2[3].__vftable) = v5;
    v2[3].__shared_owners_ = 0;
    HIDWORD(v2[3].__vftable) = v5;
    v6 = operator new();
    if ((v7 & 1) == 0
    {
      md::StyleTexture<md::LowZoomClimateStyle>::textureData(void)::bytesPerPixel = 4;
    }
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::__shared_weak_count *)operator new(0x60uLL);
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
    v11 = v10 + 1;
    v12 = ggl::TextureData2D::TextureData2D((uint64_t)&v10[1], v8, v9, 1u, 12, 1);
    v39 = v10 + 1;
    v40 = v10;
    v13 = ((uint64_t (*)(_QWORD *, _QWORD))v10[1].__on_zero_shared)(v12, 0);
    v14 = operator new();
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    if (v15)
      MEMORY[0x1A1AF4E00](v15, 0xC400A2AC0F1);
    v16 = *(float32x4_t **)a1;
    v17 = *(float32x4_t **)(a1 + 8);
    if (*(float32x4_t **)a1 != v17)
    {
      v37 = v6;
      LODWORD(v18) = 0;
      v19 = md::StyleTexture<md::LowZoomClimateStyle>::textureData(void)::bytesPerPixel * *(_QWORD *)(a1 + 48);
      v20 = 1;
      v21 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v22 = (int8x16_t)xmmword_19FFB4E00;
      v38 = v21;
      do
      {
        v41.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v16[3], v21));
        v41.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v16[2], v21));
        v41.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v16[1], v21));
        v41.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(*v16, v21));
        v23 = (int16x8_t)vqtbl4q_s8(v41, v22);
        v42.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v16[7], v21));
        v42.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v16[6], v21));
        v42.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v16[5], v21));
        v42.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v16[4], v21));
        v24 = vqtbl4q_s8(v42, v22);
        v25 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(v16[8], v21));
        *(int16x4_t *)v25.i8 = vmovn_s32((int32x4_t)v25);
        *(_DWORD *)(v13 + 8) = v23.i32[2];
        *(_QWORD *)v13 = v23.i64[0];
        v23.i16[0] = v23.u8[12];
        v23.i16[1] = v23.u8[13];
        v23.i16[2] = v23.u8[14];
        v23.i16[3] = v23.u8[15];
        v26 = v13 + v19;
        *(_DWORD *)v26 = vmovn_s16(v23).u32[0];
        *(_QWORD *)(v26 + 4) = v24.i64[0];
        v27 = v13 + 2 * v19;
        *(_QWORD *)v27 = vextq_s8(v24, v24, 8uLL).u64[0];
        *(_DWORD *)(v27 + 8) = vmovn_s16(v25).u32[0];
        if (v20 % *(_QWORD *)(a1 + 72))
        {
          v13 += *(_QWORD *)(a1 + 64);
        }
        else
        {
          v18 = (v18 + 1);
          v13 = ((uint64_t (*)(std::__shared_weak_count *, _QWORD))v11->__on_zero_shared)(v11, 0)
              + 3 * v19 * v18;
          v22 = (int8x16_t)xmmword_19FFB4E00;
          v21 = v38;
        }
        ++v20;
        v16 += 9;
      }
      while (v16 != v17);
      v11 = v39;
      v10 = v40;
      v6 = v37;
      v4 = v2 + 1;
    }
    shared_owners_high = HIDWORD(v11->__shared_owners_);
    *(_DWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 56) = 0x100000001;
    *(_DWORD *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 68) = shared_owners_high;
    *(_QWORD *)(v6 + 72) = 0x100000001;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)v6 = &off_1E42BE438;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v6 + 48) = "";
    *(_DWORD *)(v6 + 104) = v11->__shared_owners_;
    *(_QWORD *)(v6 + 112) = v11;
    *(_QWORD *)(v6 + 120) = v10;
    if (v10)
    {
      v29 = (unint64_t *)&v10->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    *(_WORD *)(v6 + 128) = 0;
    *(_BYTE *)(v6 + 130) = 1;
    *(_QWORD *)(v6 + 136) = v4;
    *(_QWORD *)(v6 + 144) = v2;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    *(_QWORD *)(v6 + 80) = v11->__shared_weak_owners_;
    v32 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    if (v10)
    {
      v33 = (unint64_t *)&v10->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_BYTE *)(a1 + 32) = 0;
    if (v2)
    {
      v35 = (unint64_t *)&v2->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_19F977868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1A1AF4E00](v11, 0x10F1C40BE47B5E1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t md::PolylinePixelHiker::timeStamp(md::PolylinePixelHiker *this)
{
  return *((unsigned int *)this + 146);
}

float md::PolylinePixelHiker::computeBisector(_BYTE *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5, int a6, md::LabelPoint *this)
{
  double v13;
  double v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float result;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;

  if (a1[65])
  {
    md::LabelPoint::geocentricNormal(this);
    if (a3)
    {
      v15 = *a4 ^ *(_QWORD *)a2 | (*((_DWORD *)a4 + 2) ^ *(_DWORD *)(a2 + 8));
      v16 = v15 != 0;
      if ((a6 & 1) == 0)
      {
        if (!v15)
          return 0.0;
        goto LABEL_23;
      }
LABEL_12:
      v18 = *a4 ^ *a5 | (*((_DWORD *)a4 + 2) ^ *((_DWORD *)a5 + 2));
      if (!v16 && !v18)
        return 0.0;
      if (v18)
      {
        if (v16)
        {
          v19 = *((float *)a4 + 1);
          v20 = *(float *)a4 - *(float *)a2;
          v21 = v19 - *(float *)(a2 + 4);
          v22 = *((float *)a4 + 2);
          v23 = v22 - *(float *)(a2 + 8);
          v24 = 1.0 / sqrtf((float)((float)(v20 * v20) + (float)(v21 * v21)) + (float)(v23 * v23));
          v25 = v24 * v20;
          v26 = v24 * v21;
          v27 = v24 * v23;
          v28 = *(float *)a5 - *(float *)a4;
          v29 = *((float *)a5 + 1) - v19;
          v30 = *((float *)a5 + 2) - v22;
          v31 = 1.0 / sqrtf((float)((float)(v28 * v28) + (float)(v29 * v29)) + (float)(v30 * v30));
          v32 = v25 + (float)(v31 * v28);
          v33 = v26 + (float)(v31 * v29);
          v34 = v27 + (float)(v31 * v30);
          v35 = 1.0 / sqrtf((float)((float)(v32 * v32) + (float)(v33 * v33)) + (float)(v34 * v34));
          goto LABEL_30;
        }
        v39 = *(float *)a5 - *(float *)a4;
        v33 = *((float *)a5 + 1) - *((float *)a4 + 1);
        v40 = *((float *)a5 + 2);
        v41 = *((float *)a4 + 2);
LABEL_29:
        v34 = v40 - v41;
        v35 = 1.0 / sqrtf((float)((float)(v39 * v39) + (float)(v33 * v33)) + (float)(v34 * v34));
LABEL_30:
        v54 = v13;
        v55 = v14;
        result = -(float)((float)((float)(v35 * v33) * v55) - (float)((float)(v35 * v34) * v54));
        if (a1[11])
        {
          if (!a1[12])
            return -result;
        }
        return result;
      }
LABEL_23:
      v39 = *(float *)a4 - *(float *)a2;
      v33 = *((float *)a4 + 1) - *(float *)(a2 + 4);
      v40 = *((float *)a4 + 2);
      v41 = *(float *)(a2 + 8);
      goto LABEL_29;
    }
    if (a6)
    {
      v16 = 0;
      goto LABEL_12;
    }
    return 0.0;
  }
  if (a3)
  {
    v17 = *a4 != *(_QWORD *)a2;
    if ((a6 & 1) == 0)
    {
      if (*a4 == *(_QWORD *)a2)
        return 0.0;
      goto LABEL_27;
    }
  }
  else
  {
    if (!a6)
      return 0.0;
    v17 = 0;
  }
  v36 = *a4;
  v37 = *a5;
  if (!v17 && v36 == v37)
    return 0.0;
  if (v36 == v37)
  {
LABEL_27:
    v53 = *(float *)(a2 + 4) - *((float *)a4 + 1);
    result = (float)(1.0
                   / sqrtf((float)((float)(*(float *)a2 - *(float *)a4) * (float)(*(float *)a2 - *(float *)a4))+ (float)(v53 * v53)))* v53;
    goto LABEL_35;
  }
  if (v17)
  {
    v42 = *((float *)a4 + 1);
    v43 = *(float *)a4 - *(float *)a2;
    v44 = v42 - *(float *)(a2 + 4);
    v45 = 1.0 / sqrtf((float)(v43 * v43) + (float)(v44 * v44));
    v46 = v45 * v43;
    v47 = v45 * v44;
    v48 = *(float *)a5 - *(float *)a4;
    v49 = *((float *)a5 + 1) - v42;
    v50 = 1.0 / sqrtf((float)(v48 * v48) + (float)(v49 * v49));
    v51 = v46 + (float)(v50 * v48);
    v52 = v47 + (float)(v50 * v49);
  }
  else
  {
    v51 = *(float *)a5 - *(float *)a4;
    v52 = *((float *)a5 + 1) - *((float *)a4 + 1);
  }
  result = -(float)(v52 * (float)(1.0 / sqrtf((float)(v51 * v51) + (float)(v52 * v52))));
LABEL_35:
  if (a1[11] && !a1[12])
    return -result;
  return result;
}

void std::__shared_ptr_pointer<md::RoadPosition  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::RoadPosition  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ggl::DaVinciTraffic::BaseMesh::~BaseMesh(ggl::DaVinciTraffic::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinciTraffic::BaseMesh::~BaseMesh(ggl::DaVinciTraffic::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinciTraffic::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinciTraffic::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinciTraffic::BasePipelineState::~BasePipelineState(ggl::DaVinciTraffic::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinciTraffic::BasePipelineSetup::~BasePipelineSetup(ggl::DaVinciTraffic::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinciTraffic::BasePipelineSetup::constantDataIsEnabled(ggl::DaVinciTraffic::BasePipelineSetup *this, unint64_t a2)
{
  _BOOL8 result;

  result = 1;
  if (a2 >= 2 && a2 != 3)
    return a2 == 2 && *(_BYTE *)(*((_QWORD *)this + 2) + 309) != 0;
  return result;
}

BOOL ggl::DaVinciTraffic::BasePipelineSetup::textureIsEnabled(ggl::DaVinciTraffic::BasePipelineSetup *this, uint64_t a2)
{
  if (!a2)
    return 1;
  if (a2 == 1)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 308) != 0;
  return 0;
}

void md::FlyoverTileData::~FlyoverTileData(md::FlyoverTileData *this)
{
  md::FlyoverTileData::~FlyoverTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  *(_QWORD *)this = &off_1E4290540;
  *((_QWORD *)this + 79) = &unk_1E4290588;
  md::RegistryManager::removeRegistry(*((md::RegistryManager **)this + 97), this);
  v2 = *((_QWORD *)this + 99);
  if (v2)
  {
    v3 = *((_QWORD *)this + 100);
    v4 = (void *)*((_QWORD *)this + 99);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 99);
    }
    *((_QWORD *)this + 100) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((_QWORD *)this + 93);
  if (v11)
  {
    v12 = *((_QWORD *)this + 94);
    v13 = (void *)*((_QWORD *)this + 93);
    if (v12 == v11)
    {
LABEL_33:
      *((_QWORD *)this + 94) = v11;
      operator delete(v13);
      goto LABEL_34;
    }
    while (1)
    {
      v14 = *(std::__shared_weak_count **)(v12 - 8);
      if (!v14)
        goto LABEL_25;
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v17 = *(std::__shared_weak_count **)(v12 - 72);
        if (v17)
        {
LABEL_26:
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      else
      {
LABEL_25:
        v17 = *(std::__shared_weak_count **)(v12 - 72);
        if (v17)
          goto LABEL_26;
      }
      v12 -= 80;
      if (v12 == v11)
      {
        v13 = (void *)*((_QWORD *)this + 93);
        goto LABEL_33;
      }
    }
  }
LABEL_34:
  v20 = *((_QWORD *)this + 90);
  if (v20)
  {
    v21 = *((_QWORD *)this + 91);
    v22 = (void *)*((_QWORD *)this + 90);
    if (v21 != v20)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = (void *)*((_QWORD *)this + 90);
    }
    *((_QWORD *)this + 91) = v20;
    operator delete(v22);
  }
  md::MapTileData::~MapTileData(this);
}

uint64_t md::FlyoverTileData::featureRegistryPtr(md::FlyoverTileData *this)
{
  return *((_QWORD *)this + 96);
}

uint64_t `non-virtual thunk to'md::FlyoverTileData::featureRegistryPtr(md::FlyoverTileData *this)
{
  return *((_QWORD *)this + 17);
}

void sub_19F97820C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 99));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  std::vector<md::Mesh>::~vector[abi:nn180100](v1 + 93);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 90));
  md::MapTileData::~MapTileData((md::MapTileData *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_1,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42CC2A8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_1,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42CC2A8;
  v1 = (std::__shared_weak_count *)a1[6];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_1,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x40uLL);
  *(_QWORD *)result = &off_1E42CC2A8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)result + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_1,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = &off_1E42CC2A8;
  v2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 56);
  return result;
}

void std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_1,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_1,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_1,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t result, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  int8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  char v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  float64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  __int128 v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t shared_weak_owners;
  uint64_t shared_owners;
  _QWORD *v85;
  __n128 v86;
  _BYTE *v87;
  float64x2_t *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  double *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  int v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  float64_t v105;
  uint64_t v106;
  uint64_t *v107;
  __n128 v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  char v112;
  char v113;
  _BYTE *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  float64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  float64_t v130;
  _OWORD *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  float64x2_t v140;
  float64x2_t v141;
  __n128 *v142;
  gdc::Registry *v143;
  uint64_t v144;
  __n128 v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  __n128 *v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  char *v157;
  char *v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  __n128 *v166;
  __n128 *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  __int128 v185;
  std::__shared_weak_count *v186;
  char v187;
  float32x4_t v188;
  float32x4_t v189;
  std::__shared_weak_count *v190;
  __n128 v191;
  uint64_t v192;
  void *v193;
  __n128 *v194;
  uint64_t v195;
  float64x2_t v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  float32x4_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  float64x2_t v205;
  _BYTE v206[76];
  _BYTE v207[28];
  std::__shared_weak_count *v208;
  void *__p;
  char *v210;
  _QWORD *v211;
  _BYTE v212[32];
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  float32x4_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  int v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  float64x2_t v230;
  char v231;
  char v232;
  char v233;
  int v234;
  __int128 v235;
  _BYTE v236[24];
  _BYTE *v237;
  _QWORD v238[3];
  _QWORD *v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  v3 = **(_QWORD **)(result + 16);
  if (*(_QWORD *)(*(_QWORD *)(result + 16) + 8) != v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 8);
    v184 = *a2;
    v192 = result;
    while (1)
    {
      v6 = (unsigned __int8 *)(v3 + 40 * v4);
      v7 = *(_QWORD **)(result + 24);
      v8 = (int8x8_t)v7[1];
      if (v8)
      {
        v9 = *v6;
        v10 = v6[1];
        v11 = (v10
             - 0x61C8864680B583EBLL
             + ((v9 - 0x61C8864680B583EBLL) << 6)
             + ((unint64_t)(v9 - 0x61C8864680B583EBLL) >> 2)) ^ (v9 - 0x61C8864680B583EBLL);
        v12 = *((int *)v6 + 1);
        v13 = *((int *)v6 + 2);
        v14 = (v12 - 0x61C8864680B583EBLL + (v11 << 6) + (v11 >> 2)) ^ v11;
        v15 = (v13 - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
        v16 = (uint8x8_t)vcnt_s8(v8);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v17 = v15;
          if (v15 >= *(_QWORD *)&v8)
            v17 = v15 % *(_QWORD *)&v8;
        }
        else
        {
          v17 = v15 & (*(_QWORD *)&v8 - 1);
        }
        v18 = *(uint64_t ***)(*v7 + 8 * v17);
        if (v18)
        {
          v19 = *v18;
          if (*v18)
          {
            if (v16.u32[0] < 2uLL)
            {
              v20 = *(_QWORD *)&v8 - 1;
              while (1)
              {
                v22 = v19[1];
                if (v22 == v15)
                {
                  if (__PAIR64__(*((unsigned __int8 *)v19 + 17), *((unsigned __int8 *)v19 + 16)) == __PAIR64__(v10, v9)
                    && *(uint64_t *)((char *)v19 + 20) == __PAIR64__(v13, v12))
                  {
                    goto LABEL_26;
                  }
                }
                else if ((v22 & v20) != v17)
                {
                  goto LABEL_27;
                }
                v19 = (uint64_t *)*v19;
                if (!v19)
                  goto LABEL_27;
              }
            }
            do
            {
              v21 = v19[1];
              if (v21 == v15)
              {
                if (__PAIR64__(*((unsigned __int8 *)v19 + 17), *((unsigned __int8 *)v19 + 16)) == __PAIR64__(v10, v9)
                  && *(uint64_t *)((char *)v19 + 20) == __PAIR64__(v13, v12))
                {
LABEL_26:
                  v187 = 0;
                  goto LABEL_37;
                }
              }
              else
              {
                if (v21 >= *(_QWORD *)&v8)
                  v21 %= *(_QWORD *)&v8;
                if (v21 != v17)
                  break;
              }
              v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
        }
      }
LABEL_27:
      v23 = **(_QWORD **)(result + 32);
      if (v4 >= (*(_QWORD *)(*(_QWORD *)(result + 32) + 8) - v23) >> 4)
        break;
      v24 = (uint64_t *)(v23 + 16 * v4);
      v25 = *v24;
      v26 = (std::__shared_weak_count *)v24[1];
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      if (!v25)
      {
        v19 = 0;
        v29 = 0;
        v187 = 1;
LABEL_39:
        v32 = 1;
        goto LABEL_40;
      }
      v29 = *(_QWORD *)(v25 + 144);
      v2 = *(std::__shared_weak_count **)(v25 + 152);
      if (v2)
      {
        v30 = (unint64_t *)&v2->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v19 = 0;
      v32 = 0;
      v187 = 1;
LABEL_40:
      v205.f64[0] = 0.0;
      LODWORD(v220) = 1065353216;
      md::FlyoverTileBuilder::generateHeightMesh((uint64_t)&v196, (uint64_t)v6, v29, (float *)&v205, (float *)&v220);
      if (v2)
        v33 = v32;
      else
        v33 = 1;
      if ((v33 & 1) == 0)
      {
        v34 = (unint64_t *)&v2->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      v36 = operator new(0xA8uLL);
      v37 = v36;
      v186 = v2;
      v190 = v26;
      v36[1] = 0;
      v36[2] = 0;
      *v36 = &off_1E42DE570;
      v205 = v196;
      if (*(_QWORD *)&v196.f64[1])
      {
        v38 = (unint64_t *)(*(_QWORD *)&v196.f64[1] + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = v36 + 3;
      v41 = v198;
      v220 = v197;
      v221 = v198;
      if (v198)
      {
        v42 = (unint64_t *)&v198->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)(v36 + 3), (uint64_t)"Height Mesh", (uint64_t *)&v205, (uint64_t *)&v220);
        do
          v44 = __ldaxr(v42);
        while (__stlxr(v44 - 1, v42));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      else
      {
        ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)(v36 + 3), (uint64_t)"Height Mesh", (uint64_t *)&v205, (uint64_t *)&v220);
      }
      v45 = v205.f64[1];
      if (*(_QWORD *)&v205.f64[1])
      {
        v46 = (unint64_t *)(*(_QWORD *)&v205.f64[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v45 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v45));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v45);
        }
      }
      v48 = *(_QWORD **)(v5 + 728);
      v49 = *(_QWORD *)(v5 + 736);
      if ((unint64_t)v48 >= v49)
      {
        v51 = *(_QWORD *)(v5 + 720);
        v52 = ((uint64_t)v48 - v51) >> 4;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 60)
          abort();
        v54 = v49 - v51;
        if (v54 >> 3 > v53)
          v53 = v54 >> 3;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0)
          v55 = 0xFFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v56 = (char *)operator new(16 * v55);
        *(_QWORD *)&v57 = v37 + 3;
        *((_QWORD *)&v57 + 1) = v37;
        v58 = &v56[16 * v52];
        v59 = &v56[16 * v55];
        *(_OWORD *)v58 = v57;
        v50 = v58 + 16;
        v60 = *(_QWORD **)(v5 + 728);
        v61 = *(_QWORD **)(v5 + 720);
        if (v60 == v61)
        {
          *(_QWORD *)(v5 + 720) = v58;
          *(_QWORD *)(v5 + 728) = v50;
          *(_QWORD *)(v5 + 736) = v59;
        }
        else
        {
          do
          {
            v62 = *((_OWORD *)v60 - 1);
            v60 -= 2;
            *((_OWORD *)v58 - 1) = v62;
            v58 -= 16;
            *v60 = 0;
            v60[1] = 0;
          }
          while (v60 != v61);
          v60 = *(_QWORD **)(v5 + 720);
          v63 = *(_QWORD **)(v5 + 728);
          *(_QWORD *)(v5 + 720) = v58;
          *(_QWORD *)(v5 + 728) = v50;
          *(_QWORD *)(v5 + 736) = v59;
          while (v63 != v60)
          {
            v64 = (std::__shared_weak_count *)*(v63 - 1);
            if (v64)
            {
              v65 = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            v63 -= 2;
          }
        }
        if (v60)
          operator delete(v60);
      }
      else
      {
        *v48 = v40;
        v48[1] = v37;
        v50 = v48 + 2;
      }
      *(_QWORD *)(v5 + 728) = v50;
      v67 = *((_QWORD *)v6 + 3);
      v68 = (char *)operator new(0xB0uLL);
      v69 = (std::__shared_weak_count *)v68;
      *((_QWORD *)v68 + 1) = 0;
      v70 = (unint64_t *)(v68 + 8);
      *((_QWORD *)v68 + 2) = 0;
      *(_QWORD *)v68 = &off_1E42E53B0;
      v71 = *(_QWORD *)(v67 + 144);
      v72 = *(std::__shared_weak_count **)(v67 + 152);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      v75 = *(_DWORD *)(v71 + 12);
      *((_DWORD *)v68 + 14) = 0;
      *((_QWORD *)v68 + 5) = 0;
      *((_QWORD *)v68 + 6) = 0;
      *((_QWORD *)v68 + 10) = 0x100000001;
      *((_DWORD *)v68 + 22) = 0;
      *((_DWORD *)v68 + 23) = v75;
      *((_DWORD *)v68 + 24) = 1;
      *(_QWORD *)(v68 + 100) = 0;
      *(_QWORD *)(v68 + 116) = 0;
      *(_QWORD *)(v68 + 108) = 0;
      *((_DWORD *)v68 + 31) = 0;
      *((_QWORD *)v68 + 3) = &off_1E42BE438;
      *((_QWORD *)v68 + 4) = 0;
      *((_QWORD *)v68 + 8) = &unk_1E42BE458;
      *((_QWORD *)v68 + 9) = "";
      *((_DWORD *)v68 + 32) = *(_DWORD *)(v71 + 8);
      *((_QWORD *)v68 + 17) = v71;
      *((_QWORD *)v68 + 18) = v72;
      if (v72)
      {
        v76 = (unint64_t *)&v72->__shared_owners_;
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      *((_WORD *)v68 + 76) = 0;
      v68[154] = 1;
      v78 = *(_QWORD *)(v192 + 48);
      *((_QWORD *)v68 + 20) = *(_QWORD *)(v192 + 40);
      *((_QWORD *)v68 + 21) = v78;
      if (v78)
      {
        v79 = (unint64_t *)(v78 + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      *((_QWORD *)v68 + 13) = *(_QWORD *)(v71 + 16);
      if (v72)
      {
        v81 = (unint64_t *)&v72->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      shared_weak_owners = v69[5].__shared_weak_owners_;
      shared_owners = v69[4].__shared_owners_;
      v85 = operator new(0x20uLL);
      *v85 = &off_1E42C6DE0;
      v85[1] = ggl::Texture2D::onImplicitLoadComplete;
      v85[2] = 0;
      v85[3] = v69 + 1;
      *(_QWORD *)&v206[8] = v85;
      *(_QWORD *)&v230.f64[0] = shared_weak_owners;
      *(_QWORD *)&v230.f64[1] = &v69[1];
      v231 = 0;
      v233 = 0;
      *(_QWORD *)&v235 = 0;
      *((_QWORD *)&v235 + 1) = shared_owners;
      v86 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v85);
      v237 = v87;
      v88 = *(float64x2_t **)&v206[8];
      if (*(float64x2_t **)&v206[8] == &v205)
      {
        v88 = &v205;
        v89 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v206[8])
          goto LABEL_105;
        v89 = 5;
      }
      (*(void (**)(__n128))(*(_QWORD *)&v88->f64[0] + 8 * v89))(v86);
LABEL_105:
      (*(void (**)(uint64_t, float64x2_t *, __n128))(*(_QWORD *)v184 + 24))(v184, &v230, v86);
      v191 = 0u;
      if ((v187 & 1) != 0)
        goto LABEL_152;
      v90 = v19[5];
      v91 = operator new(0xB0uLL);
      v92 = (double *)v91;
      v91[1] = 0;
      v91[2] = 0;
      *v91 = &off_1E42E53B0;
      v93 = *(_QWORD *)(v90 + 144);
      v94 = *(std::__shared_weak_count **)(v90 + 152);
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      v97 = *(_DWORD *)(v93 + 12);
      *((_DWORD *)v91 + 14) = 0;
      v91[5] = 0;
      v91[6] = 0;
      v91[10] = 0x100000001;
      *((_DWORD *)v91 + 22) = 0;
      *((_DWORD *)v91 + 23) = v97;
      *((_DWORD *)v91 + 24) = 1;
      *(_QWORD *)((char *)v91 + 100) = 0;
      *(_QWORD *)((char *)v91 + 116) = 0;
      *(_QWORD *)((char *)v91 + 108) = 0;
      *((_DWORD *)v91 + 31) = 0;
      v91[3] = &off_1E42BE438;
      v91[4] = 0;
      v91[8] = &unk_1E42BE458;
      v91[9] = "";
      *((_DWORD *)v91 + 32) = *(_DWORD *)(v93 + 8);
      v91[17] = v93;
      v91[18] = v94;
      if (v94)
      {
        v98 = (unint64_t *)&v94->__shared_owners_;
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      *((_WORD *)v91 + 76) = 0;
      *((_BYTE *)v91 + 154) = 1;
      v100 = *(_QWORD *)(v192 + 48);
      v91[20] = *(_QWORD *)(v192 + 40);
      v91[21] = v100;
      if (v100)
      {
        v101 = (unint64_t *)(v100 + 8);
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      v91[13] = *(_QWORD *)(v93 + 16);
      if (v94)
      {
        v103 = (unint64_t *)&v94->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v105 = v92[17];
      v106 = *((_QWORD *)v92 + 13);
      v107 = (uint64_t *)operator new(0x20uLL);
      *v107 = (uint64_t)&off_1E42C6DE0;
      v107[1] = (uint64_t)ggl::Texture2D::onImplicitLoadComplete;
      v107[2] = 0;
      v107[3] = (uint64_t)(v92 + 3);
      v223 = v107;
      v205.f64[0] = v105;
      *(_QWORD *)&v205.f64[1] = v92 + 3;
      v206[0] = 0;
      v206[4] = 0;
      *(_QWORD *)&v206[12] = 0;
      *(_QWORD *)&v206[20] = v106;
      v108 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v107);
      *(_QWORD *)&v206[56] = v109;
      v110 = v223;
      if (v223 == (uint64_t *)&v220)
      {
        v110 = (uint64_t *)&v220;
        v111 = 4;
      }
      else
      {
        if (!v223)
          goto LABEL_125;
        v111 = 5;
      }
      (*(void (**)(__n128))(*v110 + 8 * v111))(v108);
LABEL_125:
      v230 = v205;
      if (v206[0])
      {
        v232 = v206[1];
        if (v231)
          goto LABEL_131;
        v112 = 1;
      }
      else
      {
        if (!v231)
          goto LABEL_131;
        v112 = 0;
      }
      v231 = v112;
LABEL_131:
      if (v206[4])
      {
        v234 = *(_DWORD *)&v206[8];
        if (v233)
          goto LABEL_137;
        v113 = 1;
      }
      else
      {
        if (!v233)
          goto LABEL_137;
        v113 = 0;
      }
      v233 = v113;
LABEL_137:
      v235 = *(_OWORD *)&v206[12];
      v114 = v237;
      v237 = 0;
      if (v114 == v236)
      {
        v114 = v236;
        v115 = 4;
      }
      else
      {
        if (!v114)
          goto LABEL_142;
        v115 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v114 + 8 * v115))();
LABEL_142:
      if (*(_QWORD *)&v206[56])
      {
        if (*(_BYTE **)&v206[56] == &v206[32])
        {
          v237 = v236;
          (*(void (**)(_BYTE *))(*(_QWORD *)&v206[32] + 24))(&v206[32]);
          v116 = *(_QWORD **)&v206[56];
          if (*(_BYTE **)&v206[56] == &v206[32])
          {
            v116 = &v206[32];
            v117 = 4;
            goto LABEL_150;
          }
          if (*(_QWORD *)&v206[56])
          {
            v117 = 5;
LABEL_150:
            (*(void (**)(void))(*v116 + 8 * v117))();
          }
        }
        else
        {
          v237 = *(_BYTE **)&v206[56];
        }
      }
      else
      {
        v237 = 0;
      }
      v118.n128_u64[0] = (unint64_t)(v92 + 3);
      v118.n128_u64[1] = (unint64_t)v92;
      v191 = v118;
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v184 + 24))(v184, &v230);
LABEL_152:
      v119 = *(_QWORD *)(v5 + 728);
      v120 = *(double *)(v119 - 16);
      v121 = *(std::__shared_weak_count **)(v119 - 8);
      if (v121)
      {
        v122 = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      v125 = v197[5];
      v124 = v197[6];
      v126 = v197[1];
      v205.f64[0] = v120;
      *(_QWORD *)&v205.f64[1] = v121;
      if (v121)
      {
        v127 = (unint64_t *)&v121->__shared_owners_;
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
      }
      *(_QWORD *)v206 = 0;
      *(_QWORD *)&v206[8] = (v124 - v125) / v126;
      v206[16] = 3;
      *(_OWORD *)&v206[20] = v201;
      *(_QWORD *)&v206[36] = v202;
      *(_WORD *)&v206[44] = 0;
      *(_QWORD *)&v206[48] = 0;
      *(_QWORD *)&v206[56] = 0;
      v129 = *(_QWORD *)(v5 + 752);
      if (v129 >= *(_QWORD *)(v5 + 760))
      {
        v131 = std::vector<md::Mesh>::__push_back_slow_path<md::Mesh>((void **)(v5 + 744), (__int128 *)&v205);
        v132 = *(std::__shared_weak_count **)&v206[56];
        *(_QWORD *)(v5 + 752) = v131;
        if (!v132)
          goto LABEL_165;
        v133 = (unint64_t *)&v132->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
          v130 = v205.f64[1];
          if (!*(_QWORD *)&v205.f64[1])
            goto LABEL_170;
        }
        else
        {
LABEL_165:
          v130 = v205.f64[1];
          if (!*(_QWORD *)&v205.f64[1])
            goto LABEL_170;
        }
      }
      else
      {
        *(float64_t *)v129 = v120;
        *(_QWORD *)(v129 + 8) = v121;
        v205 = 0u;
        *(_OWORD *)(v129 + 16) = *(_OWORD *)v206;
        *(_OWORD *)(v129 + 32) = *(_OWORD *)&v206[16];
        *(_OWORD *)(v129 + 46) = *(_OWORD *)&v206[30];
        *(_OWORD *)(v129 + 64) = 0u;
        *(_OWORD *)&v206[48] = 0u;
        *(_QWORD *)(v5 + 752) = v129 + 80;
        v130 = v205.f64[1];
        if (!*(_QWORD *)&v205.f64[1])
          goto LABEL_170;
      }
      v135 = (unint64_t *)(*(_QWORD *)&v130 + 8);
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v130 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v130));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v130);
      }
LABEL_170:
      if (v121)
      {
        v137 = (unint64_t *)&v121->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v188 = v199;
      v139 = v200;
      gm::Matrix<double,4,4>::inverted<int,void>((double *)&v220, (double *)(v5 + 344));
      *(_OWORD *)v212 = xmmword_19FFB32C0;
      v213 = xmmword_19FFB33A0;
      *(_QWORD *)&v212[24] = 0;
      *(_QWORD *)&v212[16] = 0;
      v214 = 0u;
      v215 = 0u;
      v216 = xmmword_19FFB32C0;
      v217 = v188;
      v218 = v139;
      v219 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v205.f64, (double *)&v220, (double *)v212);
      v140.f64[0] = *(float64_t *)v206;
      v141.f64[0] = *(float64_t *)&v206[64];
      v140.f64[1] = *(float64_t *)&v206[16];
      v141.f64[1] = *(float64_t *)&v207[4];
      v189 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v205), v140);
      *(float32x4_t *)v212 = v189;
      *(float32x4_t *)&v212[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v206[24]), *(float64x2_t *)&v206[48]);
      v185 = (__int128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v141), *(float64x2_t *)&v207[12]);
      v213 = v185;
      v193 = 0;
      v194 = 0;
      v195 = 0;
      if (v191.n128_u64[0])
      {
        v142 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v193, v191);
        v194 = v142;
      }
      else
      {
        v142 = 0;
      }
      *(_OWORD *)&v206[44] = *(_OWORD *)v212;
      *(_OWORD *)&v206[60] = *(_OWORD *)&v212[16];
      v143 = *(gdc::Registry **)(v192 + 56);
      v144 = *(_QWORD *)(v5 + 752);
      *(_QWORD *)&v205.f64[0] = v144 - 80;
      LOBYTE(v205.f64[1]) = 0;
      v206[8] = 0;
      v206[16] = 0;
      *(_OWORD *)&v206[20] = xmmword_19FFB3470;
      *(_QWORD *)&v206[36] = 0x80000000800000;
      *(_OWORD *)v207 = v213;
      v221 = (std::__shared_weak_count *)v189.u32[2];
      v220 = (_QWORD *)v189.i64[0];
      v223 = (uint64_t *)*(unsigned int *)&v212[20];
      v222 = *(_QWORD *)&v212[12];
      v225 = v213;
      v224 = *(_QWORD *)&v212[24];
      v227 = v185 >> 32;
      v226 = 0;
      v228 = HIDWORD(v185);
      v229 = 1065353216;
      v203 = xmmword_19FFB3470;
      v204 = 0x80000000800000;
      v238[0] = &off_1E42D8AB0;
      v238[1] = &v203;
      v238[2] = &v220;
      v239 = v238;
      v145.n128_u64[0] = (unint64_t)gm::Box<float,3>::forEachCorner((uint64_t *)(v144 - 44), (uint64_t)v238);
      v146 = v239;
      if (v239 == v238)
      {
        v146 = v238;
        v147 = 4;
        goto LABEL_182;
      }
      if (v239)
      {
        v147 = 5;
LABEL_182:
        (*(void (**)(__n128))(*v146 + 8 * v147))(v145);
      }
      *(_OWORD *)&v206[20] = v203;
      *(_QWORD *)&v206[36] = v204;
      *(_QWORD *)&v207[20] = v69 + 1;
      v208 = v69;
      do
        v148 = __ldxr(v70);
      while (__stxr(v148 + 1, v70));
      __p = 0;
      v210 = 0;
      v211 = 0;
      v149 = (__n128 *)v193;
      v150 = (char *)v142 - (_BYTE *)v193;
      if (v142 != v193)
      {
        if (v150 < 0)
          abort();
        v151 = operator new((char *)v142 - (_BYTE *)v193);
        __p = v151;
        v211 = &v151[2 * (v150 >> 4)];
        do
        {
          *v151 = v149->n128_u64[0];
          v152 = v149->n128_u64[1];
          v151[1] = v152;
          if (v152)
          {
            v153 = (unint64_t *)(v152 + 8);
            do
              v154 = __ldxr(v153);
            while (__stxr(v154 + 1, v153));
          }
          ++v149;
          v151 += 2;
        }
        while (v149 != v142);
        v210 = (char *)v151;
      }
      v155 = gdc::Registry::create(v143);
      v156 = (uint64_t *)gdc::Registry::storage<md::components::TexturedMeshInstance>((uint64_t)v143);
      gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::emplace(v156, v155, (uint64_t)&v205);
      v157 = (char *)__p;
      if (__p)
      {
        v158 = v210;
        v159 = __p;
        if (v210 != __p)
        {
          do
          {
            v160 = (std::__shared_weak_count *)*((_QWORD *)v158 - 1);
            if (v160)
            {
              v161 = (unint64_t *)&v160->__shared_owners_;
              do
                v162 = __ldaxr(v161);
              while (__stlxr(v162 - 1, v161));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                std::__shared_weak_count::__release_weak(v160);
              }
            }
            v158 -= 16;
          }
          while (v158 != v157);
          v159 = __p;
        }
        v210 = v157;
        operator delete(v159);
      }
      v163 = v208;
      if (!v208)
        goto LABEL_209;
      v164 = (unint64_t *)&v208->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
        v166 = (__n128 *)v193;
        if (!v193)
          goto LABEL_220;
      }
      else
      {
LABEL_209:
        v166 = (__n128 *)v193;
        if (!v193)
          goto LABEL_220;
      }
      v167 = v194;
      if (v194 != v166)
      {
        do
        {
          v168 = (std::__shared_weak_count *)v167[-1].n128_u64[1];
          if (v168)
          {
            v169 = (unint64_t *)&v168->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          --v167;
        }
        while (v167 != v166);
        v166 = (__n128 *)v193;
      }
      operator delete(v166);
LABEL_220:
      if (v191.n128_u64[1])
      {
        v171 = (unint64_t *)(v191.n128_u64[1] + 8);
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v191.n128_u64[1] + 16))(v191.n128_u64[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v191.n128_u64[1]);
        }
      }
      v173 = v237;
      if (v237 == v236)
      {
        v173 = v236;
        v174 = 4;
      }
      else
      {
        if (!v237)
          goto LABEL_230;
        v174 = 5;
      }
      (*(void (**)(void))(*v173 + 8 * v174))();
      do
LABEL_230:
        v175 = __ldaxr(v70);
      while (__stlxr(v175 - 1, v70));
      if (v175)
      {
        v176 = v198;
        if (!v198)
          goto LABEL_238;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        v176 = v198;
        if (!v198)
          goto LABEL_238;
      }
      v177 = (unint64_t *)&v176->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (v178)
      {
LABEL_238:
        v179 = *(std::__shared_weak_count **)&v196.f64[1];
        if (*(_QWORD *)&v196.f64[1])
          goto LABEL_239;
        goto LABEL_246;
      }
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
      v179 = *(std::__shared_weak_count **)&v196.f64[1];
      if (*(_QWORD *)&v196.f64[1])
      {
LABEL_239:
        v180 = (unint64_t *)&v179->__shared_owners_;
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
        }
      }
LABEL_246:
      v2 = v186;
      if (v190)
      {
        v182 = (unint64_t *)&v190->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
      }
      ++v4;
      result = v192;
      v3 = **(_QWORD **)(v192 + 16);
      if (v4 >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(v192 + 16) + 8) - v3) >> 3))
        return result;
    }
    v19 = 0;
    v187 = 1;
LABEL_37:
    v26 = 0;
    v29 = 0;
    goto LABEL_39;
  }
  return result;
}

void sub_19F9795A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,std::__shared_weak_count *a46)
{
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;

  do
    v49 = __ldaxr(v46);
  while (__stlxr(v49 - 1, v46));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  if (a46)
  {
    p_shared_owners = (unint64_t *)&a46->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))a46->__on_zero_shared)(a46);
      std::__shared_weak_count::__release_weak(a46);
    }
  }
  if (a44)
  {
    v52 = (unint64_t *)&a44->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))a44->__on_zero_shared)(a44);
      std::__shared_weak_count::__release_weak(a44);
    }
  }
  if (a36)
  {
    v54 = (unint64_t *)&a36->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))a36->__on_zero_shared)(a36);
      std::__shared_weak_count::__release_weak(a36);
    }
  }
  _Unwind_Resume(a1);
}

_OWORD *std::vector<md::Mesh>::__push_back_slow_path<md::Mesh>(void **a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v3;
  if (v5 > 0x333333333333333)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v7 = 80 * v5;
  v8 = (char *)operator new(80 * v5);
  v9 = *a2;
  v10 = a2[1];
  v11 = &v8[80 * v2];
  v12 = &v8[v7];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v11 = v9;
  *((_OWORD *)v11 + 1) = v10;
  *((_OWORD *)v11 + 2) = a2[2];
  *(_OWORD *)(v11 + 46) = *(__int128 *)((char *)a2 + 46);
  *((_OWORD *)v11 + 4) = a2[4];
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  v13 = v11 + 80;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 != *a1)
  {
    do
    {
      v16 = *((_OWORD *)v15 - 5);
      v15 -= 80;
      *((_OWORD *)v11 - 5) = v16;
      v11 -= 80;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      v17 = *((_OWORD *)v15 + 1);
      v18 = *((_OWORD *)v15 + 2);
      *(_OWORD *)(v11 + 46) = *(_OWORD *)(v15 + 46);
      *((_OWORD *)v11 + 1) = v17;
      *((_OWORD *)v11 + 2) = v18;
      *((_OWORD *)v11 + 4) = *((_OWORD *)v15 + 4);
      *((_QWORD *)v15 + 8) = 0;
      *((_QWORD *)v15 + 9) = 0;
    }
    while (v15 != v14);
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (1)
    {
      if (v19 == v15)
        goto LABEL_25;
      v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
      if (!v20)
        goto LABEL_17;
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v23 = (std::__shared_weak_count *)*((_QWORD *)v19 - 9);
        if (!v23)
          goto LABEL_11;
      }
      else
      {
LABEL_17:
        v23 = (std::__shared_weak_count *)*((_QWORD *)v19 - 9);
        if (!v23)
          goto LABEL_11;
      }
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
LABEL_11:
      v19 -= 80;
    }
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
LABEL_25:
  if (v15)
    operator delete(v15);
  return v13;
}

void gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char **v29;
  char *v30;
  char *v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;

  v62 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v62);
  if ((v6 & 1) != 0)
  {
    v11 = a1[12];
    v12 = a1[11];
    if (v12 < v11)
    {
      std::construct_at[abi:nn180100]<md::components::TexturedMeshInstance,md::components::TexturedMeshInstance&,md::components::TexturedMeshInstance*>(a1[11], (__int128 *)a3);
      a1[11] = v12 + 152;
      a1[11] = v12 + 152;
      goto LABEL_49;
    }
    v13 = a1[10];
    v14 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v12 - v13) >> 3);
    if (v14 + 1 > 0x1AF286BCA1AF286)
      goto LABEL_74;
    v15 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v11 - v13) >> 3);
    v16 = 2 * v15;
    if (2 * v15 <= v14 + 1)
      v16 = v14 + 1;
    if (v15 >= 0xD79435E50D7943)
      v17 = 0x1AF286BCA1AF286;
    else
      v17 = v16;
    v68 = a1 + 12;
    if (v17)
    {
      if (v17 > 0x1AF286BCA1AF286)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = (char *)operator new(152 * v17);
    }
    else
    {
      v18 = 0;
    }
    v64 = v18;
    v65 = (uint64_t)&v18[152 * v14];
    v66 = v65;
    v67 = &v18[152 * v17];
    std::construct_at[abi:nn180100]<md::components::TexturedMeshInstance,md::components::TexturedMeshInstance&,md::components::TexturedMeshInstance*>(v65, (__int128 *)a3);
    v39 = v65;
    v40 = v66 + 152;
    v41 = (char *)a1[10];
    v42 = (char *)a1[11];
    if (v42 == v41)
    {
      v48 = a1[11];
    }
    else
    {
      do
      {
        v43 = *(_OWORD *)(v42 - 152);
        v44 = *(_OWORD *)(v42 - 136);
        *(_OWORD *)(v39 - 120) = *(_OWORD *)(v42 - 120);
        *(_OWORD *)(v39 - 136) = v44;
        *(_OWORD *)(v39 - 152) = v43;
        v45 = *(_OWORD *)(v42 - 104);
        v46 = *(_OWORD *)(v42 - 88);
        v47 = *(_OWORD *)(v42 - 72);
        *(_OWORD *)(v39 - 56) = *(_OWORD *)(v42 - 56);
        *(_OWORD *)(v39 - 72) = v47;
        *(_OWORD *)(v39 - 88) = v46;
        *(_OWORD *)(v39 - 104) = v45;
        *(_OWORD *)(v39 - 40) = *(_OWORD *)(v42 - 40);
        *((_QWORD *)v42 - 5) = 0;
        *((_QWORD *)v42 - 4) = 0;
        *(_QWORD *)(v39 - 24) = 0;
        *(_QWORD *)(v39 - 16) = 0;
        *(_QWORD *)(v39 - 8) = 0;
        *(_OWORD *)(v39 - 24) = *(_OWORD *)(v42 - 24);
        *(_QWORD *)(v39 - 8) = *((_QWORD *)v42 - 1);
        v39 -= 152;
        *((_QWORD *)v42 - 3) = 0;
        *((_QWORD *)v42 - 2) = 0;
        *((_QWORD *)v42 - 1) = 0;
        v42 -= 152;
      }
      while (v42 != v41);
      v48 = a1[10];
      v42 = (char *)a1[11];
    }
    a1[10] = v39;
    a1[11] = v40;
    v49 = a1[12];
    a1[12] = (uint64_t)v67;
    v67 = (char *)v49;
    v64 = (char *)v48;
    v65 = v48;
    if (v42 == (char *)v48)
    {
      if (!v42)
      {
LABEL_48:
        a1[11] = v40;
        goto LABEL_49;
      }
    }
    else
    {
      do
      {
        v66 = (uint64_t)(v42 - 152);
        v53 = *((_QWORD *)v42 - 3);
        if (v53)
        {
          v54 = *((_QWORD *)v42 - 2);
          v55 = (void *)*((_QWORD *)v42 - 3);
          if (v54 != v53)
          {
            do
            {
              v56 = *(std::__shared_weak_count **)(v54 - 8);
              if (v56)
              {
                p_shared_owners = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(p_shared_owners);
                while (__stlxr(v58 - 1, p_shared_owners));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v54 -= 16;
            }
            while (v54 != v53);
            v55 = (void *)*((_QWORD *)v42 - 3);
          }
          *((_QWORD *)v42 - 2) = v53;
          operator delete(v55);
        }
        v59 = (std::__shared_weak_count *)*((_QWORD *)v42 - 4);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v42 = (char *)v66;
      }
      while (v66 != v48);
      v42 = v64;
      if (!v64)
        goto LABEL_48;
    }
    operator delete(v42);
    goto LABEL_48;
  }
  v7 = a1[10];
  v8 = ((uint64_t)v5 - a1[7]) >> 3;
  v9 = v7 + 152 * v8;
  *(_QWORD *)v9 = *(_QWORD *)a3;
  if (*(unsigned __int8 *)(v9 + 24) != *(unsigned __int8 *)(a3 + 24))
  {
    if (*(_BYTE *)(v9 + 24))
    {
      v10 = 0;
    }
    else
    {
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + 8);
      v10 = 1;
    }
    *(_BYTE *)(v9 + 24) = v10;
  }
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(a3 + 32);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(v9 + 40) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(v9 + 44) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(v9 + 48) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(v9 + 52) = *(_DWORD *)(a3 + 52);
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(a3 + 60);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(a3 + 68);
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(a3 + 72);
  *(_DWORD *)(v9 + 76) = *(_DWORD *)(a3 + 76);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(a3 + 80);
  *(_DWORD *)(v9 + 84) = *(_DWORD *)(a3 + 84);
  *(_DWORD *)(v9 + 88) = *(_DWORD *)(a3 + 88);
  *(_DWORD *)(v9 + 92) = *(_DWORD *)(a3 + 92);
  *(_DWORD *)(v9 + 96) = *(_DWORD *)(a3 + 96);
  *(_DWORD *)(v9 + 100) = *(_DWORD *)(a3 + 100);
  *(_DWORD *)(v9 + 104) = *(_DWORD *)(a3 + 104);
  v19 = v7 + 152 * v8;
  v20 = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  v21 = *(std::__shared_weak_count **)(v19 + 120);
  *(_OWORD *)(v19 + 112) = v20;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v7 + 152 * v8;
  v27 = *(char **)(v24 + 128);
  v25 = v24 + 128;
  v26 = v27;
  if (v27)
  {
    v28 = v7 + 152 * v8;
    v31 = *(char **)(v28 + 136);
    v29 = (char **)(v28 + 136);
    v30 = v31;
    v32 = v26;
    if (v31 != v26)
    {
      do
      {
        v33 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v30 -= 16;
      }
      while (v30 != v26);
      v32 = *(char **)v25;
    }
    *v29 = v26;
    operator delete(v32);
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = 0;
  }
  *(_OWORD *)v25 = *(_OWORD *)(a3 + 128);
  *(_QWORD *)(v7 + 152 * v8 + 144) = *(_QWORD *)(a3 + 144);
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  if (v9 != a1[11])
  {
    v36 = (_QWORD *)a1[16];
    if (v36)
    {
      v37 = a1[31];
      while (1)
      {
        v64 = (char *)&v62;
        v65 = 1;
        v63 = v37;
        v38 = v36[6];
        if (!v38)
          break;
        (*(void (**)(uint64_t, uint64_t *, char **))(*(_QWORD *)v38 + 48))(v38, &v63, &v64);
        v36 = (_QWORD *)*v36;
        if (!v36)
          return;
      }
LABEL_73:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_74:
      abort();
    }
    return;
  }
LABEL_49:
  v50 = (_QWORD *)a1[22];
  if (v50)
  {
    v51 = a1[31];
    while (1)
    {
      v64 = (char *)&v62;
      v65 = 1;
      v63 = v51;
      v52 = v50[6];
      if (!v52)
        break;
      (*(void (**)(uint64_t, uint64_t *, char **))(*(_QWORD *)v52 + 48))(v52, &v63, &v64);
      v50 = (_QWORD *)*v50;
      if (!v50)
        return;
    }
    goto LABEL_73;
  }
}

void sub_19F97A080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<md::components::TexturedMeshInstance>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F97A094(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<md::components::TexturedMeshInstance,md::components::TexturedMeshInstance&,md::components::TexturedMeshInstance*>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a2;
  v4 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v3;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  v8 = *((_QWORD *)a2 + 15);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_QWORD *)(a1 + 120) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v11 = (char *)*((_QWORD *)a2 + 16);
  v12 = (char *)*((_QWORD *)a2 + 17);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      abort();
    v14 = operator new(v12 - v11);
    *(_QWORD *)(a1 + 128) = v14;
    *(_QWORD *)(a1 + 136) = v14;
    *(_QWORD *)(a1 + 144) = &v14[2 * (v13 >> 4)];
    do
    {
      v15 = *((_QWORD *)v11 + 1);
      *v14 = *(_QWORD *)v11;
      v14[1] = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v11 += 16;
      v14 += 2;
    }
    while (v11 != v12);
    *(_QWORD *)(a1 + 136) = v14;
  }
  return a1;
}

void sub_19F97A178(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 120);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<md::components::TexturedMeshInstance>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    v4 = *(_QWORD *)(i - 24);
    if (v4)
    {
      v5 = *(_QWORD *)(i - 16);
      v6 = *(void **)(i - 24);
      if (v5 != v4)
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = *(void **)(i - 24);
      }
      *(_QWORD *)(i - 16) = v4;
      operator delete(v6);
    }
    v10 = *(std::__shared_weak_count **)(i - 32);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42CC260;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CC260;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager>>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  float32x2_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  float v46;
  float v47;
  float32_t v48;
  float32_t v49;
  uint64_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  unint64_t v66;
  int shared_owners_high;
  int shared_owners;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  float64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  float64x2_t v107;
  float64x2_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned __int8 *v117;
  int v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t (**v130)();
  uint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  unint64_t v138;
  unint64_t shared_weak_owners;
  std::__shared_weak_count_vtbl *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  float64x2_t v149;
  int v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  BOOL v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  long double v164;
  long double v165;
  double v166;
  long double v167;
  __double2 v168;
  double v169;
  double v170;
  __double2 v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  uint64_t v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  float *v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  long double v197;
  long double v198;
  long double v199;
  double v200;
  double v201;
  double v202;
  __double2 v203;
  double v204;
  __double2 v205;
  long double v206;
  double v207;
  double v208;
  double v209;
  int v210;
  double v211;
  float32_t v212;
  double v213;
  float v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  float *v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  long double v234;
  long double v235;
  long double v236;
  double v237;
  double v238;
  double v239;
  __double2 v240;
  long double v241;
  long double v242;
  double v243;
  double v244;
  unint64_t v245;
  BOOL v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  long double v253;
  double v254;
  long double v255;
  __double2 v256;
  double v257;
  double v258;
  __double2 v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  uint64_t v266;
  _DWORD *v267;
  _DWORD *v268;
  _DWORD *v269;
  float64_t v270;
  unint64_t v271;
  float64_t v272;
  int v273;
  int v274;
  float64_t v275;
  unint64_t v276;
  float32x4_t *v277;
  std::__shared_weak_count *j;
  uint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  unint64_t *v284;
  unint64_t v285;
  _QWORD *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t v290;
  float64_t v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  char *v295;
  unint64_t v296;
  _QWORD *v297;
  std::__shared_weak_count *v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  char *v305;
  char *v306;
  __int128 v307;
  char *v308;
  unint64_t *v309;
  unint64_t *v310;
  float64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  float64_t v315;
  uint64_t v316;
  float64_t v317;
  uint64_t v318;
  float64_t *v319;
  __n128 v320;
  float64_t v321;
  float32x4_t *v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  _DWORD *v336;
  int *v337;
  uint64_t v338;
  int v339;
  _QWORD *v340;
  uint64_t v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t v346;
  float64_t v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  char *v351;
  unint64_t v352;
  _QWORD *v353;
  char *v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  char *v359;
  char *v360;
  char *v361;
  __int128 v362;
  char *v363;
  unint64_t *v364;
  unint64_t *v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  double *v389;
  uint64_t *v390;
  uint64_t v392;
  std::__shared_weak_count *v393;
  std::__shared_weak_count *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  double v399;
  char *v400;
  double v401;
  char *v402;
  double v403;
  double v404;
  unint64_t *v405;
  double v406;
  std::__shared_weak_count *v407;
  double v408;
  double v409;
  std::__shared_weak_count *v410;
  double v411;
  double v412;
  std::__shared_weak_count *v413;
  double v414;
  float v415;
  double v416;
  double v417;
  float v418;
  double v419;
  float v420;
  double v421;
  double v422;
  double v423;
  float v424;
  __int128 v425;
  double v426;
  std::__shared_weak_count *v427;
  _QWORD *v428;
  float32x4_t v429;
  float32x4_t v430;
  float64x2_t v431;
  float32x4_t v432;
  _OWORD *v433;
  _OWORD v434[8];
  __int128 v435;
  float32x4_t v436;
  double v437;
  float32x4_t *v438;
  double v439;
  double v440;
  double v441;
  uint64_t v442;
  double v443;
  double v444;
  double v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  uint64_t v449;
  float64x2_t v450;
  float64_t v451;
  _BYTE v452[32];
  float64x2_t v453;
  float64_t v454;
  float64_t v455;
  float64x2_t v456;
  uint64_t v457;

  v457 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t ***)(a1 + 16);
  i = *v2;
  v390 = v2[1];
  if (*v2 != v390)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v389 = (double *)(v4 + 344);
    v396 = *a2;
    v395 = v4;
    while (1)
    {
      v5 = *i;
      v435 = 0uLL;
      v397 = i;
      if (**(_QWORD **)(a1 + 24) == *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
        goto LABEL_97;
      v6 = *(_QWORD *)(v5 + 824);
      v7 = *(_QWORD *)(v5 + 816);
      if (v6 == v7)
        break;
      v8 = 0;
      v9 = (v6 - v7) >> 4;
      v10 = *(unsigned __int8 **)(v5 + 472);
      if (v9 <= 1)
        v9 = 1;
      while (1)
      {
        v11 = *v10;
        v10 += 104;
        if (v11 == 2)
          break;
        if (v9 == ++v8)
          goto LABEL_10;
      }
      v12 = *(_QWORD *)(v7 + 16 * v8);
      if (!v12)
        goto LABEL_11;
      v13 = *(std::__shared_weak_count **)(v7 + 16 * v8 + 8);
      if (!v13)
        goto LABEL_12;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v79 = __ldxr(p_shared_owners);
      while (__stxr(v79 + 1, p_shared_owners));
      v14 = *i;
      v80 = *(_QWORD *)(*i + 824);
      v7 = *(_QWORD *)(*i + 816);
      v15 = v80 - v7;
      if (v80 == v7)
      {
LABEL_17:
        v20 = 0;
LABEL_18:
        v21 = 0;
        goto LABEL_19;
      }
LABEL_13:
      v16 = 0;
      v17 = v15 >> 4;
      v18 = *(unsigned __int8 **)(v14 + 472);
      if (v17 <= 1)
        v17 = 1;
      while (1)
      {
        v19 = *v18;
        v18 += 104;
        if (v19 == 4)
          break;
        if (v17 == ++v16)
          goto LABEL_17;
      }
      v20 = *(_QWORD *)(v7 + 16 * v16);
      if (!v20)
        goto LABEL_18;
      v21 = *(std::__shared_weak_count **)(v7 + 16 * v16 + 8);
      if (v21)
      {
        v81 = (unint64_t *)&v21->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
LABEL_19:
      v22 = **(_QWORD **)(a1 + 24);
      v23 = *(_QWORD *)(v22 + 24);
      v24 = *(std::__shared_weak_count **)(v22 + 32);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      if (!v12 || !v20 || !v23)
      {
LABEL_82:
        if (!v24)
          goto LABEL_87;
        goto LABEL_83;
      }
      v27 = (char *)operator new(0x58uLL);
      v413 = v24;
      *((_QWORD *)v27 + 1) = 0;
      v402 = v27;
      v405 = (unint64_t *)(v27 + 8);
      *((_QWORD *)v27 + 2) = 0;
      *(_QWORD *)v27 = &off_1E42DED18;
      *((_QWORD *)v27 + 3) = &off_1E42B63B0;
      *((_QWORD *)v27 + 5) = 0;
      *((_QWORD *)v27 + 6) = 0;
      *((_QWORD *)v27 + 4) = 0;
      *((_DWORD *)v27 + 14) = 0;
      *(_QWORD *)&v28 = 0x100000001;
      *((_QWORD *)&v28 + 1) = 0x100000001;
      *(_OWORD *)(v27 + 60) = v28;
      *(_QWORD *)(v27 + 76) = 0x100000001;
      *((_DWORD *)v27 + 21) = 0;
      v400 = v27 + 24;
      *(_QWORD *)&v450.f64[0] = v27 + 24;
      *(_QWORD *)&v450.f64[1] = v27;
      v29 = *(unint64_t **)(v12 + 144);
      v30 = *(_QWORD *)(v23 + 144);
      v32 = *v29;
      v31 = v29[1];
      v34 = *(unsigned int *)(v30 + 16);
      v33 = *(unsigned int *)(v30 + 20);
      if (v32 <= v34)
        v35 = v34;
      else
        v35 = v32;
      if (v31 <= v33)
        v36 = v33;
      else
        v36 = v31;
      v37 = (std::__shared_weak_count *)operator new(0x60uLL);
      v407 = v21;
      v410 = v13;
      v37->__shared_owners_ = 0;
      v38 = (unint64_t *)&v37->__shared_owners_;
      v37->__shared_weak_owners_ = 0;
      v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
      v39 = v35;
      *(_QWORD *)&v434[0] = ggl::TextureData2D::TextureData2D((uint64_t)&v37[1], v35, v36, 1u, 12, 0);
      *((_QWORD *)&v434[0] + 1) = v37;
      v398 = *(_QWORD *)&v434[0];
      v40 = ((uint64_t (*)(void))v37[1].__on_zero_shared)();
      if (HIDWORD(v37[1].__shared_weak_owners_) && LODWORD(v37[1].__shared_weak_owners_))
      {
        v42 = v40;
        v43 = v36;
        v44 = 0;
        v415 = 1.0 / (float)(v43 - 1);
        v418 = 1.0 / (float)(v39 - 1);
        do
        {
          if (LODWORD(v37[1].__shared_weak_owners_))
          {
            v45 = 0;
            v46 = (float)v44 * v415;
            v420 = 1.0 - v46;
            do
            {
              v48 = (float)v45 * v418;
              v41.f32[0] = v46;
              v49 = md::imageSampleBilinear<geo::Color<float,4,(geo::ColorSpace)0>>(&v436, *(_QWORD *)(*(_QWORD *)(v12 + 144) + 24), *(_DWORD *)(*(_QWORD *)(v12 + 144) + 16), **(_DWORD **)(v12 + 144), *(_DWORD *)(*(_QWORD *)(v12 + 144) + 8), v48, v41);
              v50 = (*(uint64_t (**)(_QWORD, _QWORD, float))(**(_QWORD **)(v23 + 144) + 16))(*(_QWORD *)(v23 + 144), 0, v49);
              v51.f32[0] = v420;
              md::imageSampleBilinear<geo::Color<float,4,(geo::ColorSpace)0>>(&v432, v50, *(_DWORD *)(*(_QWORD *)(v23 + 144) + 12), *(_DWORD *)(*(_QWORD *)(v23 + 144) + 16), *(_DWORD *)(*(_QWORD *)(v23 + 144) + 20), v48, v51);
              v52.f32[0] = v46;
              v53 = md::imageSampleBilinear<float>(*(_QWORD *)(*(_QWORD *)(v20 + 144) + 24), *(_DWORD *)(*(_QWORD *)(v20 + 144) + 16), **(_DWORD **)(v20 + 144), *(_DWORD *)(*(_QWORD *)(v20 + 144) + 8), v48, v52).n128_f32[0];
              v54 = v436.f32[1];
              v55 = v436.i64[1];
              v56 = 1.0 - v53;
              v57 = *(uint64_t *)((char *)v432.i64 + 4);
              v58 = (float)(v436.f32[0] * v53) + (float)(v432.f32[0] * (float)(1.0 - v53));
              v424 = v432.f32[3];
              if (v58 >= 0.0031308)
                v59 = (float)(powf(v58, 0.41667) * 1.055) + -0.055;
              else
                v59 = v58 * 12.92;
              v60 = (float)(v54 * v53) + (float)(*(float *)&v57 * v56);
              if (v60 >= 0.0031308)
                v61 = (float)(powf(v60, 0.41667) * 1.055) + -0.055;
              else
                v61 = v60 * 12.92;
              v62 = (float)(*(float *)&v55 * v53) + (float)(*((float *)&v57 + 1) * v56);
              if (v62 < 0.0031308)
                v47 = v62 * 12.92;
              else
                v47 = (float)(powf(v62, 0.41667) * 1.055) + -0.055;
              v46 = (float)v44 * v415;
              *(_BYTE *)(v42 + (4 * (v45 + v44 * LODWORD(v37[1].__shared_weak_owners_)))) = (int)(float)(v59 * 255.0);
              *(_BYTE *)(v42 + (4 * (v45 + v44 * LODWORD(v37[1].__shared_weak_owners_))) + 1) = (int)(float)(v61 * 255.0);
              *(_BYTE *)(v42 + (4 * (v45 + v44 * LODWORD(v37[1].__shared_weak_owners_))) + 2) = (int)(float)(v47 * 255.0);
              *(_BYTE *)(v42 + (4 * (v45 + v44 * LODWORD(v37[1].__shared_weak_owners_))) + 3) = (int)(float)((float)((float)(*((float *)&v55 + 1) * v53) + (float)(v424 * v56)) * 255.0);
              ++v45;
            }
            while (v45 < LODWORD(v37[1].__shared_weak_owners_));
          }
          ++v44;
        }
        while (v44 < HIDWORD(v37[1].__shared_weak_owners_));
      }
      v63 = operator new(0xB0uLL);
      v64 = v63;
      v63[1] = 0;
      v63[2] = 0;
      v65 = (char *)(v63 + 3);
      *v63 = &off_1E42E53B0;
      do
        v66 = __ldxr(v38);
      while (__stxr(v66 + 1, v38));
      shared_owners = v37[1].__shared_owners_;
      shared_owners_high = HIDWORD(v37[1].__shared_owners_);
      *((_DWORD *)v63 + 22) = 0;
      *((_DWORD *)v63 + 23) = shared_owners_high;
      v63[8] = &unk_1E42BE458;
      v63[9] = "";
      v63[5] = 0;
      v63[6] = 0;
      *((_DWORD *)v63 + 14) = 0;
      v63[10] = 0x100000001;
      *((_DWORD *)v63 + 24) = 1;
      *(_QWORD *)((char *)v63 + 100) = 0;
      *(_QWORD *)((char *)v63 + 116) = 0;
      *(_QWORD *)((char *)v63 + 108) = 0;
      v63[3] = &off_1E42BE438;
      v63[4] = 0;
      *((_DWORD *)v63 + 31) = 0;
      *((_DWORD *)v63 + 32) = shared_owners;
      v63[17] = v398;
      v63[18] = v37;
      do
        v69 = __ldxr(v38);
      while (__stxr(v69 + 1, v38));
      *((_WORD *)v63 + 76) = 0;
      *((_BYTE *)v63 + 154) = 1;
      v63[20] = v400;
      v63[21] = v402;
      v21 = v407;
      do
        v70 = __ldxr(v405);
      while (__stxr(v70 + 1, v405));
      v63[13] = v37[1].__shared_weak_owners_;
      do
        v71 = __ldaxr(v38);
      while (__stlxr(v71 - 1, v38));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v434[0] + 1);
      v24 = v413;
      if (!*((_QWORD *)&v434[0] + 1))
        goto LABEL_61;
      v73 = (unint64_t *)(*((_QWORD *)&v434[0] + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
        v75 = v450.f64[1];
        if (!*(_QWORD *)&v450.f64[1])
          goto LABEL_78;
      }
      else
      {
LABEL_61:
        v75 = v450.f64[1];
        if (!*(_QWORD *)&v450.f64[1])
          goto LABEL_78;
      }
      v76 = (unint64_t *)(*(_QWORD *)&v75 + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v75 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v75));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v75);
      }
LABEL_78:
      *(_QWORD *)&v83 = v65;
      *((_QWORD *)&v83 + 1) = v64;
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v435 + 1);
      v435 = v83;
      i = v397;
      v4 = v395;
      v13 = v410;
      if (!v84)
        goto LABEL_82;
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (v86)
        goto LABEL_82;
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
      if (!v413)
        goto LABEL_87;
LABEL_83:
      v87 = (unint64_t *)&v24->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      if (!v21)
        goto LABEL_91;
LABEL_87:
      v89 = (unint64_t *)&v21->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if (v13)
        {
LABEL_92:
          v91 = (unint64_t *)&v13->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      else
      {
LABEL_91:
        if (v13)
          goto LABEL_92;
      }
LABEL_97:
      v93 = *(double *)(v5 + 184);
      v94 = *(double *)(v5 + 192);
      v95 = *(double *)(v5 + 200);
      v425 = *(_OWORD *)(v5 + 152);
      v97 = *(_QWORD *)(v5 + 168);
      v96 = *(double *)(v5 + 176);
      gm::Matrix<double,4,4>::inverted<int,void>((double *)v434, v389);
      v98 = 1.0 - (v96 + v96) * v96;
      v99 = (v93 + v93) * v93;
      v100 = v95 * (v96 + v96);
      v101 = (v93 + v93) * v94;
      v102 = v94 * (v96 + v96);
      v103 = (v94 + v94) * v94;
      v104 = (v94 + v94) * v95;
      v105 = (v96 + v96) * v93;
      *(double *)v436.i64 = 1.0 - (v99 + v103);
      *(double *)&v436.i64[1] = v104 + v105;
      v106 = v95 * (v93 + v93);
      v439 = v105 - v104;
      v440 = v98 - v103;
      v443 = v106 + v102;
      v444 = v101 - v100;
      v437 = v102 - v106;
      v441 = v100 + v101;
      v445 = v98 - v99;
      v438 = 0;
      v442 = 0;
      v446 = 0;
      v447 = v425;
      v448 = v97;
      v449 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v450.f64, (double *)v434, (double *)v436.i64);
      v107.f64[0] = v451;
      v108.f64[0] = v454;
      v107.f64[1] = *(float64_t *)&v452[8];
      v108.f64[1] = v455;
      v434[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v450), v107);
      v434[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v452[16]), v453);
      v434[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v108), v456);
      v109 = *(_QWORD *)(a1 + 40);
      v432.i64[0] = v4;
      v432.i64[1] = v109;
      v433 = v434;
      v111 = *(_QWORD *)(v5 + 256);
      v110 = *(_QWORD *)(v5 + 264);
      v392 = v110;
      while (v111 != v110)
      {
        if (*(unsigned __int8 *)(v111 + 177) - 3 >= 2)
        {
          if (*(_BYTE *)(v111 + 177))
            goto LABEL_98;
          v132 = *(_QWORD *)(v111 + 80);
          v131 = *(_QWORD *)(v111 + 88);
          v133 = (std::__shared_weak_count *)operator new(0xF8uLL);
          v133->__shared_owners_ = 0;
          v134 = (unint64_t *)&v133->__shared_owners_;
          v133->__shared_weak_owners_ = 0;
          v133->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF990;
          v135 = (uint64_t)&v133[1];
          ggl::BufferData::BufferData((uint64_t)&v133[1], 32, 0, 0, 7, 0xAAAAAAAAAAAAAAABLL * ((v131 - v132) >> 2));
          v133[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B75A0;
          v133[9].__shared_weak_owners_ = (uint64_t)"Flyover VertexData";
          v133[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4UVReflection;
          v133[9].__shared_owners_ = (uint64_t)&unk_1E42B75C0;
          v136 = *(uint64_t **)(v111 + 80);
          v137 = *(uint64_t **)(v111 + 88);
          v138 = ((char *)v137 - (char *)v136) / 12;
          shared_weak_owners = v133[1].__shared_owners_ * v138;
          if (shared_weak_owners)
            v140 = v133[4].__vftable;
          else
            v140 = 0;
          if (v137 != v136)
          {
            if (v138 <= 1)
              v138 = 1;
            v336 = (_DWORD *)&v140->__on_zero_shared + 1;
            v337 = (int *)(*(_QWORD *)(v111 + 104) + 4);
            do
            {
              v338 = *v136;
              *(v336 - 3) = *((_DWORD *)v136 + 2);
              *(_QWORD *)(v336 - 5) = v338;
              *(v336 - 2) = 1065353216;
              *(v336 - 1) = *(v337 - 1);
              v339 = *v337;
              v337 += 2;
              *v336 = v339;
              v336 += 8;
              v136 = (uint64_t *)((char *)v136 + 12);
              --v138;
            }
            while (v138);
          }
          if (v140 && shared_weak_owners)
          {
            if (v133[3].__shared_weak_owners_ > shared_weak_owners)
              shared_weak_owners = v133[3].__shared_weak_owners_;
            v133[3].__shared_owners_ = 0;
            v133[3].__shared_weak_owners_ = shared_weak_owners;
          }
          md::FlyoverTileBuilder::createIndexData((md::FlyoverTileBuilder *)&v429, (const geo::c3m::Mesh *)v111);
          v340 = operator new(0xA8uLL);
          v340[1] = 0;
          v340[2] = 0;
          *v340 = &off_1E42DE570;
          v341 = (uint64_t)(v340 + 3);
          *(_QWORD *)&v450.f64[0] = &v133[1];
          v394 = v133;
          *(_QWORD *)&v450.f64[1] = v133;
          do
            v342 = __ldxr(v134);
          while (__stxr(v342 + 1, v134));
          v343 = (std::__shared_weak_count *)v429.i64[1];
          v436 = v429;
          v428 = v340 + 3;
          if (v429.i64[1])
          {
            v344 = (unint64_t *)(v429.i64[1] + 8);
            do
              v345 = __ldxr(v344);
            while (__stxr(v345 + 1, v344));
            ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(v341, (uint64_t)"Flyover Mesh", (uint64_t *)&v450, (uint64_t *)&v436);
            do
              v346 = __ldaxr(v344);
            while (__stlxr(v346 - 1, v344));
            if (!v346)
            {
              ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
              std::__shared_weak_count::__release_weak(v343);
            }
          }
          else
          {
            ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(v341, (uint64_t)"Flyover Mesh", (uint64_t *)&v450, (uint64_t *)&v436);
          }
          v347 = v450.f64[1];
          if (*(_QWORD *)&v450.f64[1])
          {
            v348 = (unint64_t *)(*(_QWORD *)&v450.f64[1] + 8);
            do
              v349 = __ldaxr(v348);
            while (__stlxr(v349 - 1, v348));
            if (!v349)
            {
              (*(void (**)(float64_t))(**(_QWORD **)&v347 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v347));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v347);
            }
          }
          v350 = v395;
          v351 = *(char **)(v395 + 728);
          v352 = *(_QWORD *)(v395 + 736);
          if ((unint64_t)v351 >= v352)
          {
            v354 = *(char **)(v395 + 720);
            v355 = (v351 - v354) >> 4;
            v356 = v355 + 1;
            if ((unint64_t)(v355 + 1) >> 60)
              abort();
            v357 = v352 - (_QWORD)v354;
            if (v357 >> 3 > v356)
              v356 = v357 >> 3;
            if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF0)
              v358 = 0xFFFFFFFFFFFFFFFLL;
            else
              v358 = v356;
            if (v358 >> 60)
LABEL_342:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v359 = (char *)operator new(16 * v358);
            v360 = &v359[16 * v355];
            v361 = &v359[16 * v358];
            *(_QWORD *)v360 = v428;
            *((_QWORD *)v360 + 1) = v340;
            v353 = v360 + 16;
            if (v351 == v354)
            {
              v350 = v395;
              *(_QWORD *)(v395 + 720) = v360;
              *(_QWORD *)(v395 + 728) = v353;
              *(_QWORD *)(v395 + 736) = v361;
              i = v397;
              if (!v351)
                goto LABEL_290;
            }
            else
            {
              do
              {
                v362 = *((_OWORD *)v351 - 1);
                v351 -= 16;
                *((_OWORD *)v360 - 1) = v362;
                v360 -= 16;
                *(_QWORD *)v351 = 0;
                *((_QWORD *)v351 + 1) = 0;
              }
              while (v351 != v354);
              v351 = *(char **)(v395 + 720);
              v363 = *(char **)(v395 + 728);
              *(_QWORD *)(v395 + 720) = v360;
              *(_QWORD *)(v395 + 728) = v353;
              *(_QWORD *)(v395 + 736) = v361;
              for (i = v397; v363 != v351; v363 -= 16)
              {
                v383 = (std::__shared_weak_count *)*((_QWORD *)v363 - 1);
                if (v383)
                {
                  v384 = (unint64_t *)&v383->__shared_owners_;
                  do
                    v385 = __ldaxr(v384);
                  while (__stlxr(v385 - 1, v384));
                  if (!v385)
                  {
                    ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                    std::__shared_weak_count::__release_weak(v383);
                  }
                }
              }
              v350 = v395;
              if (!v351)
                goto LABEL_290;
            }
            operator delete(v351);
          }
          else
          {
            *(_QWORD *)v351 = v428;
            *((_QWORD *)v351 + 1) = v340;
            v353 = v351 + 16;
          }
LABEL_290:
          v298 = v394;
          *(_QWORD *)(v350 + 728) = v353;
          v364 = *(unint64_t **)v111;
          v365 = *(unint64_t **)(v111 + 8);
          if (*(unint64_t **)v111 != v365)
          {
            do
            {
              md::FlyoverTileBuilder::computeBounds((uint64_t)&v450, v364, v111, v135);
              v369 = *((unsigned int *)v364 + 4);
              v370 = *(_QWORD *)(*i + 816);
              if (v369 >= (*(_QWORD *)(*i + 824) - v370) >> 4
                || *(_BYTE *)(*(_QWORD *)(*i + 472) + 104 * v369)
                || (v374 = *(_QWORD *)(v370 + 16 * v369)) == 0)
              {
                v436 = 0uLL;
              }
              else
              {
                v375 = *(std::__shared_weak_count **)(v370 + 16 * v369 + 8);
                if (v375)
                {
                  v376 = (unint64_t *)&v375->__shared_owners_;
                  do
                    v377 = __ldxr(v376);
                  while (__stxr(v377 + 1, v376));
                }
                v378 = *(_QWORD *)(v374 + 152);
                v436.i64[0] = *(_QWORD *)(v374 + 144);
                v436.i64[1] = v378;
                if (v378)
                {
                  v379 = (unint64_t *)(v378 + 8);
                  do
                    v380 = __ldxr(v379);
                  while (__stxr(v380 + 1, v379));
                }
                if (v375)
                {
                  v381 = (unint64_t *)&v375->__shared_owners_;
                  do
                    v382 = __ldaxr(v381);
                  while (__stlxr(v382 - 1, v381));
                  if (!v382)
                  {
                    ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                    std::__shared_weak_count::__release_weak(v375);
                  }
                }
                i = v397;
                if (v436.i64[0])
                  md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::c3m::SubMesh const&,gm::Box<float,3> const&,std::vector<gdc::Resource::LoadMetadata> &&<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const::Texture2D> const&)#1}::operator()(&v432, (__int128 *)v364, (uint64_t)&v450, (uint64_t *)&v436);
              }
              v371 = (std::__shared_weak_count *)v436.i64[1];
              if (v436.i64[1])
              {
                v372 = (unint64_t *)(v436.i64[1] + 8);
                do
                  v373 = __ldaxr(v372);
                while (__stlxr(v373 - 1, v372));
                if (!v373)
                {
                  ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                  std::__shared_weak_count::__release_weak(v371);
                }
              }
              v364 += 3;
            }
            while (v364 != v365);
          }
          v366 = (std::__shared_weak_count *)v429.i64[1];
          v4 = v395;
          if (v429.i64[1])
          {
            v367 = (unint64_t *)(v429.i64[1] + 8);
            do
              v368 = __ldaxr(v367);
            while (__stlxr(v368 - 1, v367));
            if (!v368)
            {
              ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
              std::__shared_weak_count::__release_weak(v366);
            }
          }
          do
            v335 = __ldaxr(v134);
          while (__stlxr(v335 - 1, v134));
          goto LABEL_297;
        }
        v112 = *(_QWORD *)(*i + 824);
        v113 = *(_QWORD *)(*i + 816);
        v114 = v112 - v113;
        if (v112 == v113)
        {
LABEL_106:
          v119 = 0;
LABEL_107:
          v120 = 0;
          goto LABEL_108;
        }
        v115 = 0;
        v116 = v114 >> 4;
        v117 = *(unsigned __int8 **)(*i + 472);
        if (v116 <= 1)
          v116 = 1;
        while (1)
        {
          v118 = *v117;
          v117 += 104;
          if (v118 == 5)
            break;
          if (v116 == ++v115)
            goto LABEL_106;
        }
        v119 = *(_QWORD *)(v113 + 16 * v115);
        if (!v119)
          goto LABEL_107;
        v120 = *(std::__shared_weak_count **)(v113 + 16 * v115 + 8);
        if (v120)
        {
          v330 = (unint64_t *)&v120->__shared_owners_;
          do
            v331 = __ldxr(v330);
          while (__stxr(v331 + 1, v330));
        }
LABEL_108:
        v121 = **(uint64_t ***)(a1 + 32);
        v122 = *v121;
        v123 = (std::__shared_weak_count *)v121[1];
        if (v123)
        {
          v124 = (unint64_t *)&v123->__shared_owners_;
          do
            v125 = __ldxr(v124);
          while (__stxr(v125 + 1, v124));
        }
        v126 = *(_QWORD *)(v122 + 144);
        v127 = *(std::__shared_weak_count **)(v122 + 152);
        if (v127)
        {
          v128 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        if (v126)
        {
          v436.i64[1] = v126;
          v130 = &off_1E4279D98;
        }
        else
        {
          v130 = &off_1E4279DE0;
        }
        v436.i64[0] = (uint64_t)v130;
        v438 = &v436;
        v142 = *(_QWORD *)(v111 + 80);
        v141 = *(_QWORD *)(v111 + 88);
        v143 = operator new(0xF8uLL);
        v143[1] = 0;
        v143[2] = 0;
        *v143 = &off_1E42DF990;
        v144 = ggl::BufferData::BufferData((uint64_t)(v143 + 3), 32, 0, 0, 7, 0xAAAAAAAAAAAAAAABLL * ((v141 - v142) >> 2));
        v143[3] = &off_1E42B75A0;
        v143[29] = "Flyover VertexData";
        v143[30] = &ggl::CommonMesh::bufferPos4UVReflection;
        v143[28] = &unk_1E42B75C0;
        *(_QWORD *)&v431.f64[0] = v144;
        *(_QWORD *)&v431.f64[1] = v143;
        v145 = *(_QWORD *)(v111 + 80);
        v146 = *(_QWORD *)(v111 + 88);
        v450 = 0uLL;
        v147 = 0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 2) * v143[4];
        if (v147)
          v148 = v143[12];
        else
          v148 = 0;
        v149.f64[0] = 0.0;
        *(_QWORD *)&v149.f64[1] = v144;
        v450 = v149;
        v451 = 0.0;
        *(_QWORD *)v452 = v147;
        *(_QWORD *)&v452[16] = v148;
        *(float *)v149.f64 = (float)(1 << *(_BYTE *)(v395 + 169));
        *(_WORD *)&v452[8] = 1;
        v426 = (float)(1000000.0 / *(float *)v149.f64);
        v150 = *(unsigned __int8 *)(v111 + 177);
        v393 = v120;
        if (v150 != 3)
        {
          if (v150 == 4 && v146 != v145)
          {
            v151 = v123;
            v152 = 0;
            v153 = 0;
            v154 = 0;
            v155 = 20;
            while (1)
            {
              v182 = (float *)(v145 + v152);
              v183 = *v182;
              v184 = v182[1];
              v185 = v182[2];
              v186 = *(double *)(v5 + 184);
              v187 = *(double *)(v5 + 192);
              v188 = *(double *)(v5 + 200);
              v189 = *(double *)(v5 + 176);
              v190 = -(v189 * v185 - v187 * v183);
              v191 = *(double *)(v5 + 152) + v183;
              v192 = -(v186 * v183 - v189 * v184);
              v193 = *(double *)(v5 + 160) + v184;
              v194 = -(v187 * v184 - v186 * v185) - (v187 * v184 - v186 * v185);
              v195 = v190 + v190;
              v196 = v192 + v192;
              v197 = v191 + v196 * v186 + v194 * v188 - v195 * v187;
              v198 = v193 - v196 * v189 + v194 * v187 + v195 * v188;
              v199 = v185 + v196 * v188 + *(double *)(v5 + 168) + v195 * v189 - v194 * v186;
              v200 = sqrt(v197 * v197 + v198 * v198);
              v201 = atan2(v199, v200 * 0.996647189);
              v202 = atan2(v198, v197);
              v203 = __sincos_stret(v201);
              v204 = atan2(v199 + v203.__sinval * v203.__sinval * 42841.3115 * v203.__sinval, v200 + v203.__cosval * v203.__cosval * -42697.6727 * v203.__cosval);
              v205 = __sincos_stret(v204);
              v206 = tan(v204 * 0.5 + 0.785398163);
              v207 = v202 * 0.159154943 + 0.5;
              v208 = log(v206) * 0.159154943 + 0.5;
              *(double *)v429.i64 = v207;
              *(double *)&v429.i64[1] = v208;
              if (!v438)
                break;
              v209 = (*(float (**)(float32x4_t *, float32x4_t *))(v438->i64[0] + 48))(v438, &v429);
              if (v119)
              {
                v210 = 1 << *(_BYTE *)(v395 + 169);
                v211 = 1.0 / (double)v210;
                v212 = (*(double *)v429.i64 - v211 * (double)*(int *)(v395 + 176)) * (double)v210;
                v213 = -(*(double *)&v429.i64[1] - v211 * (double)(v210 + ~*(_DWORD *)(v395 + 172))) * (double)v210;
                *(float *)&v213 = v213;
                *(float *)&v213 = *(float *)&v213 + 1.0;
                v214 = md::imageSampleBilinear<float>(*(_QWORD *)(*(_QWORD *)(v119 + 144) + 24), *(_DWORD *)(*(_QWORD *)(v119 + 144) + 16), **(_DWORD **)(v119 + 144), *(_DWORD *)(*(_QWORD *)(v119 + 144) + 8), v212, *(float32x2_t *)&v213).n128_f32[0];
                v209 = (v200 / v205.__cosval + -6378137.0 / sqrt(v205.__sinval * v205.__sinval * -0.00669437999 + 1.0))
                     * v214
                     + (float)(1.0 - v214) * v209;
              }
              v156 = *(unsigned int *)(v111 + 180);
              v157 = v154 <= v156 || (int)v156 <= 0;
              v158 = 0.0;
              if (!v157)
                v158 = v426;
              v399 = v209 - v158;
              v160 = *(double *)(v5 + 184);
              v159 = *(double *)(v5 + 192);
              v161 = *(double *)(v5 + 200);
              v162 = *(double *)(v5 + 176);
              v163 = *(double *)(v5 + 152);
              v416 = *(double *)(v5 + 160);
              v419 = *(double *)(v5 + 168);
              v408 = v163;
              v411 = -(v419 * v160 - v416 * v159) - (v419 * v160 - v416 * v159);
              v403 = -(v163 * v159 - v419 * v162) - (v163 * v159 - v419 * v162);
              v406 = -(v416 * v162 - v163 * v160) - (v416 * v162 - v163 * v160);
              v164 = v207 * 6.28318531;
              v165 = exp(v208 * 6.28318531 + -3.14159265);
              v166 = atan(v165) * 2.0 + -1.57079633;
              v167 = fmod(v164, 6.28318531);
              v421 = fmod(v167 + 6.28318531, 6.28318531) + -3.14159265;
              v168 = __sincos_stret(v166);
              v169 = 6378137.0 / sqrt(v168.__sinval * v168.__sinval * -0.00669437999 + 1.0);
              v170 = (v169 + v399) * v168.__cosval;
              v171 = __sincos_stret(v421);
              v172 = v170 * v171.__cosval;
              v173 = v170 * v171.__sinval;
              v174 = (v399 + v169 * 0.99330562) * v168.__sinval;
              v175 = -(v174 * v160 - v173 * v159) - (v174 * v160 - v173 * v159);
              v176 = -(v172 * v159 - v174 * v162) - (v172 * v159 - v174 * v162);
              v177 = -(v173 * v162 - v172 * v160) - (v173 * v162 - v172 * v160);
              *(float *)&v172 = v170 * v171.__cosval
                              - (v408
                               - v406 * v160)
                              + v175 * v161
                              + v176 * v159
                              - (v411 * v161
                               + v403 * v159
                               + v177 * v160);
              *(float *)&v173 = v170 * v171.__sinval
                              - (v416
                               - v411 * v159)
                              + v176 * v161
                              + v177 * v162
                              - (v406 * v162
                               + v403 * v161
                               + v175 * v159);
              *(float *)&v174 = v174
                              - (v419
                               - v403 * v162)
                              + v175 * v160
                              + v177 * v161
                              - (v411 * v160
                               + v406 * v161
                               + v176 * v162);
              v178 = *(_QWORD *)&v452[16];
              v179 = (_DWORD *)(*(_QWORD *)&v452[16] + v155);
              *(v179 - 5) = LODWORD(v172);
              v180 = (_DWORD *)(v178 + 4 * v153);
              v180[1] = LODWORD(v173);
              v180[2] = LODWORD(v174);
              v180[3] = 1065353216;
              v181 = (_DWORD *)(*(_QWORD *)(v111 + 104) + v153);
              v180[4] = *v181;
              *v179 = v181[1];
              ++v154;
              v145 = *(_QWORD *)(v111 + 80);
              v155 += 32;
              v153 += 8;
              v152 += 12;
              if (v154 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v111 + 88) - v145) >> 2))
                goto LABEL_147;
            }
LABEL_340:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
LABEL_146:
          v151 = v123;
          if (!v148)
            goto LABEL_162;
          goto LABEL_147;
        }
        if (v146 == v145)
          goto LABEL_146;
        v215 = 0;
        v216 = 0;
        v217 = 0;
        v218 = 20;
        do
        {
          v219 = (float *)(v145 + v215);
          v220 = *v219;
          v221 = v219[1];
          v222 = v219[2];
          v223 = *(double *)(v5 + 184);
          v224 = *(double *)(v5 + 192);
          v225 = *(double *)(v5 + 200);
          v226 = *(double *)(v5 + 176);
          v227 = -(v226 * v222 - v224 * v220);
          v228 = *(double *)(v5 + 152) + v220;
          v229 = -(v223 * v220 - v226 * v221);
          v230 = *(double *)(v5 + 160) + v221;
          v231 = -(v224 * v221 - v223 * v222) - (v224 * v221 - v223 * v222);
          v232 = v227 + v227;
          v233 = v229 + v229;
          v234 = v228 + v233 * v223 + v231 * v225 - v232 * v224;
          v235 = v230 - v233 * v226 + v231 * v224 + v232 * v225;
          v236 = v222 + v233 * v225 + *(double *)(v5 + 168) + v232 * v226 - v231 * v223;
          v237 = sqrt(v234 * v234 + v235 * v235);
          v238 = atan2(v236, v237 * 0.996647189);
          v239 = atan2(v235, v234);
          v240 = __sincos_stret(v238);
          v241 = atan2(v236 + v240.__sinval * v240.__sinval * 42841.3115 * v240.__sinval, v237 + v240.__cosval * v240.__cosval * -42697.6727 * v240.__cosval);
          v242 = tan(v241 * 0.5 + 0.785398163);
          v243 = log(v242) * 0.159154943 + 0.5;
          *(double *)v429.i64 = v239 * 0.159154943 + 0.5;
          *(double *)&v429.i64[1] = v243;
          if (!v438)
            goto LABEL_340;
          v244 = (*(float (**)(float32x4_t *, float32x4_t *))(v438->i64[0] + 48))(v438, &v429);
          v245 = *(unsigned int *)(v111 + 180);
          v246 = v217 <= v245 || (int)v245 <= 0;
          v247 = 0.0;
          if (!v246)
            v247 = v426;
          v404 = v244 - v247;
          v248 = *(double *)(v5 + 184);
          v249 = *(double *)(v5 + 192);
          v250 = *(double *)(v5 + 200);
          v251 = *(double *)(v5 + 176);
          v252 = *(double *)(v5 + 152);
          v422 = *(double *)(v5 + 160);
          v423 = *(double *)(v5 + 168);
          v414 = v252;
          v417 = -(v423 * v248 - v422 * v249) - (v423 * v248 - v422 * v249);
          v409 = -(v252 * v249 - v423 * v251) - (v252 * v249 - v423 * v251);
          v412 = -(v422 * v251 - v252 * v248) - (v422 * v251 - v252 * v248);
          v253 = exp(v243 * 6.28318531 + -3.14159265);
          v254 = atan(v253) * 2.0 + -1.57079633;
          v255 = fmod((v239 * 0.159154943 + 0.5) * 6.28318531, 6.28318531);
          v401 = fmod(v255 + 6.28318531, 6.28318531) + -3.14159265;
          v256 = __sincos_stret(v254);
          v257 = 6378137.0 / sqrt(v256.__sinval * v256.__sinval * -0.00669437999 + 1.0);
          v258 = (v257 + v404) * v256.__cosval;
          v259 = __sincos_stret(v401);
          v260 = v258 * v259.__cosval;
          v261 = v258 * v259.__sinval;
          v262 = (v404 + v257 * 0.99330562) * v256.__sinval;
          v263 = -(v262 * v248 - v261 * v249) - (v262 * v248 - v261 * v249);
          v264 = -(v260 * v249 - v262 * v251) - (v260 * v249 - v262 * v251);
          v265 = -(v261 * v251 - v260 * v248) - (v261 * v251 - v260 * v248);
          *(float *)&v260 = v258 * v259.__cosval
                          - (v414
                           - v412 * v248)
                          + v263 * v250
                          + v264 * v249
                          - (v417 * v250
                           + v409 * v249
                           + v265 * v248);
          *(float *)&v261 = v258 * v259.__sinval
                          - (v422
                           - v417 * v249)
                          + v264 * v250
                          + v265 * v251
                          - (v412 * v251
                           + v409 * v250
                           + v263 * v249);
          *(float *)&v262 = v262
                          - (v423
                           - v409 * v251)
                          + v263 * v248
                          + v265 * v250
                          - (v417 * v248
                           + v412 * v250
                           + v264 * v251);
          v266 = *(_QWORD *)&v452[16];
          v267 = (_DWORD *)(*(_QWORD *)&v452[16] + v218);
          *(v267 - 5) = LODWORD(v260);
          v268 = (_DWORD *)(v266 + 4 * v216);
          v268[1] = LODWORD(v261);
          v268[2] = LODWORD(v262);
          v268[3] = 1065353216;
          v269 = (_DWORD *)(*(_QWORD *)(v111 + 104) + v216);
          v268[4] = *v269;
          *v267 = v269[1];
          ++v217;
          v145 = *(_QWORD *)(v111 + 80);
          v218 += 32;
          v216 += 8;
          v215 += 12;
        }
        while (v217 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v111 + 88) - v145) >> 2));
        v151 = v123;
LABEL_147:
        v270 = v451;
        v271 = *(_QWORD *)v452;
        if (*(_QWORD *)v452 != *(_QWORD *)&v451)
        {
          v272 = v450.f64[1];
          v273 = v452[8];
          v274 = v452[9];
          if (*(_QWORD *)&v450.f64[0] && *(_BYTE *)(*(_QWORD *)&v450.f64[1] + 17) != 2)
            (*(void (**)(void))(**(_QWORD **)&v450.f64[0] + 64))();
          if (v273 && !v274)
          {
            v275 = *(double *)(*(_QWORD *)&v272 + 56);
            v276 = *(_QWORD *)(*(_QWORD *)&v272 + 64);
            if (v276 == *(_QWORD *)&v275)
              *(_QWORD *)&v275 = *(_QWORD *)(*(_QWORD *)&v272 + 80) - *(_QWORD *)(*(_QWORD *)&v272 + 72);
            if (*(_QWORD *)&v270 < *(_QWORD *)&v275)
              v275 = v270;
            if (v276 <= v271)
              v276 = v271;
            if (v276 == *(_QWORD *)&v275)
              v276 = *(_QWORD *)&v275 + *(_QWORD *)(*(_QWORD *)&v272 + 80) - *(_QWORD *)(*(_QWORD *)&v272 + 72);
            *(float64_t *)(*(_QWORD *)&v272 + 56) = v275;
            *(_QWORD *)(*(_QWORD *)&v272 + 64) = v276;
          }
        }
LABEL_162:
        v277 = v438;
        if (v438 == &v436)
        {
          v277 = &v436;
          v279 = 4;
          j = v151;
          goto LABEL_166;
        }
        j = v151;
        if (v438)
        {
          v279 = 5;
LABEL_166:
          (*(void (**)(void))(v277->i64[0] + 8 * v279))();
        }
        if (v127)
        {
          v280 = (unint64_t *)&v127->__shared_owners_;
          do
            v281 = __ldaxr(v280);
          while (__stlxr(v281 - 1, v280));
          if (!v281)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        md::FlyoverTileBuilder::createIndexData((md::FlyoverTileBuilder *)&v430, (const geo::c3m::Mesh *)v111);
        v282 = operator new(0xA8uLL);
        v283 = v282;
        v282[1] = 0;
        v282[2] = 0;
        *v282 = &off_1E42DE570;
        v450 = v431;
        if (*(_QWORD *)&v431.f64[1])
        {
          v284 = (unint64_t *)(*(_QWORD *)&v431.f64[1] + 8);
          do
            v285 = __ldxr(v284);
          while (__stxr(v285 + 1, v284));
        }
        v286 = v282 + 3;
        v287 = (std::__shared_weak_count *)v430.i64[1];
        v436 = v430;
        if (v430.i64[1])
        {
          v288 = (unint64_t *)(v430.i64[1] + 8);
          do
            v289 = __ldxr(v288);
          while (__stxr(v289 + 1, v288));
          ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)(v282 + 3), (uint64_t)"Blend Mesh", (uint64_t *)&v450, (uint64_t *)&v436);
          do
            v290 = __ldaxr(v288);
          while (__stlxr(v290 - 1, v288));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
            std::__shared_weak_count::__release_weak(v287);
          }
        }
        else
        {
          ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)(v282 + 3), (uint64_t)"Blend Mesh", (uint64_t *)&v450, (uint64_t *)&v436);
        }
        v291 = v450.f64[1];
        if (*(_QWORD *)&v450.f64[1])
        {
          v292 = (unint64_t *)(*(_QWORD *)&v450.f64[1] + 8);
          do
            v293 = __ldaxr(v292);
          while (__stlxr(v293 - 1, v292));
          if (!v293)
          {
            (*(void (**)(float64_t))(**(_QWORD **)&v291 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v291));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v291);
          }
        }
        v294 = v395;
        v295 = *(char **)(v395 + 728);
        v296 = *(_QWORD *)(v395 + 736);
        if ((unint64_t)v295 < v296)
        {
          *(_QWORD *)v295 = v286;
          *((_QWORD *)v295 + 1) = v283;
          v297 = v295 + 16;
          i = v397;
          v298 = v393;
          goto LABEL_203;
        }
        v427 = j;
        v299 = *(char **)(v395 + 720);
        v300 = (v295 - v299) >> 4;
        v301 = v300 + 1;
        if ((unint64_t)(v300 + 1) >> 60)
          abort();
        v302 = v296 - (_QWORD)v299;
        if (v302 >> 3 > v301)
          v301 = v302 >> 3;
        if ((unint64_t)v302 >= 0x7FFFFFFFFFFFFFF0)
          v303 = 0xFFFFFFFFFFFFFFFLL;
        else
          v303 = v301;
        if (v303 >> 60)
          goto LABEL_342;
        v304 = (char *)operator new(16 * v303);
        v305 = &v304[16 * v300];
        v306 = &v304[16 * v303];
        *(_QWORD *)v305 = v286;
        *((_QWORD *)v305 + 1) = v283;
        v297 = v305 + 16;
        if (v295 == v299)
        {
          v298 = v393;
          v294 = v395;
          *(_QWORD *)(v395 + 720) = v305;
          *(_QWORD *)(v395 + 728) = v297;
          *(_QWORD *)(v395 + 736) = v306;
          j = v427;
          if (!v295)
            goto LABEL_202;
        }
        else
        {
          do
          {
            v307 = *((_OWORD *)v295 - 1);
            v295 -= 16;
            *((_OWORD *)v305 - 1) = v307;
            v305 -= 16;
            *(_QWORD *)v295 = 0;
            *((_QWORD *)v295 + 1) = 0;
          }
          while (v295 != v299);
          v295 = *(char **)(v395 + 720);
          v308 = *(char **)(v395 + 728);
          *(_QWORD *)(v395 + 720) = v305;
          *(_QWORD *)(v395 + 728) = v297;
          *(_QWORD *)(v395 + 736) = v306;
          v298 = v393;
          for (j = v427; v308 != v295; v308 -= 16)
          {
            v312 = (std::__shared_weak_count *)*((_QWORD *)v308 - 1);
            if (v312)
            {
              v313 = (unint64_t *)&v312->__shared_owners_;
              do
                v314 = __ldaxr(v313);
              while (__stlxr(v314 - 1, v313));
              if (!v314)
              {
                ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                std::__shared_weak_count::__release_weak(v312);
              }
            }
          }
          v294 = v395;
          if (!v295)
            goto LABEL_202;
        }
        operator delete(v295);
LABEL_202:
        i = v397;
LABEL_203:
        *(_QWORD *)(v294 + 728) = v297;
        v310 = *(unint64_t **)v111;
        v309 = *(unint64_t **)(v111 + 8);
        if (*(unint64_t **)v111 != v309)
        {
          v311 = *(double *)&v435;
          while (2)
          {
            md::FlyoverTileBuilder::computeBounds((uint64_t)&v429, v310, v111, *(uint64_t *)&v431.f64[0]);
            if (v311 == 0.0)
              goto LABEL_214;
            v317 = *(double *)(*(_QWORD *)&v311 + 112);
            if (v317 != 0.0)
            {
              v318 = *(_QWORD *)(*(_QWORD *)&v311 + 80);
              v319 = (float64_t *)operator new(0x20uLL);
              *(_QWORD *)v319 = &off_1E42C6DE0;
              *((_QWORD *)v319 + 1) = ggl::Texture2D::onImplicitLoadComplete;
              v319[2] = 0.0;
              v319[3] = v311;
              v438 = (float32x4_t *)v319;
              v450.f64[0] = v317;
              v450.f64[1] = v311;
              LOBYTE(v451) = 0;
              BYTE4(v451) = 0;
              *(_QWORD *)&v452[4] = 0;
              *(_QWORD *)&v452[12] = v318;
              v320 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v319);
              v453.f64[1] = v321;
              v322 = v438;
              if (v438 == &v436)
              {
                v322 = &v436;
                v323 = 4;
                i = v397;
LABEL_221:
                (*(void (**)(__n128))(v322->i64[0] + 8 * v323))(v320);
              }
              else
              {
                i = v397;
                if (v438)
                {
                  v323 = 5;
                  goto LABEL_221;
                }
              }
              (*(void (**)(uint64_t, float64x2_t *, __n128))(*(_QWORD *)v396 + 24))(v396, &v450, v320);
              v315 = v453.f64[1];
              if (*(_BYTE **)&v453.f64[1] == &v452[24])
              {
                v315 = COERCE_DOUBLE(&v452[24]);
                v316 = 4;
                goto LABEL_212;
              }
              if (*(_QWORD *)&v453.f64[1])
              {
                v316 = 5;
LABEL_212:
                (*(void (**)(void))(**(_QWORD **)&v315 + 8 * v316))();
              }
            }
            md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::c3m::SubMesh const&,gm::Box<float,3> const&,std::vector<gdc::Resource::LoadMetadata> &&<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const::Texture2D> const&)#1}::operator()(&v432, (__int128 *)v310, (uint64_t)&v429, (uint64_t *)&v435);
LABEL_214:
            v310 += 3;
            if (v310 == v309)
              break;
            continue;
          }
        }
        v324 = (std::__shared_weak_count *)v430.i64[1];
        if (!v430.i64[1])
          goto LABEL_229;
        v325 = (unint64_t *)(v430.i64[1] + 8);
        do
          v326 = __ldaxr(v325);
        while (__stlxr(v326 - 1, v325));
        if (!v326)
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
          v327 = *(std::__shared_weak_count **)&v431.f64[1];
          if (*(_QWORD *)&v431.f64[1])
          {
LABEL_230:
            v328 = (unint64_t *)&v327->__shared_owners_;
            do
              v329 = __ldaxr(v328);
            while (__stlxr(v329 - 1, v328));
            if (!v329)
            {
              ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
              std::__shared_weak_count::__release_weak(v327);
            }
          }
        }
        else
        {
LABEL_229:
          v327 = *(std::__shared_weak_count **)&v431.f64[1];
          if (*(_QWORD *)&v431.f64[1])
            goto LABEL_230;
        }
        v4 = v395;
        if (!j)
          goto LABEL_244;
        v332 = (unint64_t *)&j->__shared_owners_;
        do
          v333 = __ldaxr(v332);
        while (__stlxr(v333 - 1, v332));
        if (!v333)
        {
          ((void (*)(std::__shared_weak_count *))j->__on_zero_shared)(j);
          std::__shared_weak_count::__release_weak(j);
          if (!v298)
            goto LABEL_98;
        }
        else
        {
LABEL_244:
          if (!v298)
            goto LABEL_98;
        }
        v334 = (unint64_t *)&v298->__shared_owners_;
        do
          v335 = __ldaxr(v334);
        while (__stlxr(v335 - 1, v334));
LABEL_297:
        if (!v335)
        {
          ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
          std::__shared_weak_count::__release_weak(v298);
        }
LABEL_98:
        v111 += 184;
        v110 = v392;
      }
      v386 = (std::__shared_weak_count *)*((_QWORD *)&v435 + 1);
      if (*((_QWORD *)&v435 + 1))
      {
        v387 = (unint64_t *)(*((_QWORD *)&v435 + 1) + 8);
        do
          v388 = __ldaxr(v387);
        while (__stlxr(v388 - 1, v387));
        if (!v388)
        {
          ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
          std::__shared_weak_count::__release_weak(v386);
        }
      }
      i += 2;
      if (i == v390)
        return;
    }
LABEL_10:
    v12 = 0;
LABEL_11:
    v13 = 0;
LABEL_12:
    v14 = v5;
    v15 = v6 - v7;
    if (v6 == v7)
      goto LABEL_17;
    goto LABEL_13;
  }
}

void sub_19F97C158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,std::__shared_weak_count *a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
      std::__shared_weak_count::__release_weak(a25);
    }
  }
  if (a23)
  {
    v67 = (unint64_t *)&a23->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  if (a24)
  {
    v69 = (unint64_t *)&a24->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  v71 = a64;
  if (a64)
  {
    v72 = (unint64_t *)&a64->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  _Unwind_Resume(a1);
}

void md::FlyoverTileData::FlyoverTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,std::vector<std::pair<geo::QuadTile,std::vector<gdc::Resource::LoadMetadata> &&<md::RasterTileResource>>> &&,std::unordered_map<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&,geo,std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::QuadTileHash,std::equal_to<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &&>,std::allocator<std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>><std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> && const,geo>>> &&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(std::vector<std::vector<gdc::Resource::LoadMetadata> &&<md::FlyoverDsmResource>,std::allocator<std::vector<std::shared_ptr<md::GEOFlyoverTileResource>> &&>> &::c3m::SubMesh const&,gm::Box<float,3> const&,std::vector<gdc::Resource::LoadMetadata> &&<std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const::Texture2D> const&)#1}::operator()(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 *v28;
  gdc::Registry *v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  _QWORD *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[60];
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[3];
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 728);
  v8 = *(_QWORD *)(v7 - 16);
  v63 = v8;
  v9 = *(std::__shared_weak_count **)(v7 - 8);
  v64 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = *a2;
    *((_QWORD *)&v54 + 1) = v9;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)&v54 + 1) = 0;
  }
  *(_QWORD *)&v54 = v8;
  v55 = v12;
  v56[0] = 3;
  *(_OWORD *)&v56[4] = *(_OWORD *)a3;
  *(_QWORD *)&v56[20] = *(_QWORD *)(a3 + 16);
  *(_WORD *)&v56[28] = 0;
  *(_OWORD *)&v56[32] = 0uLL;
  v14 = *(_QWORD *)(v6 + 752);
  if (v14 >= *(_QWORD *)(v6 + 760))
  {
    v17 = std::vector<md::Mesh>::__push_back_slow_path<md::Mesh>((void **)(v6 + 744), &v54);
    v18 = *(std::__shared_weak_count **)&v56[40];
    *(_QWORD *)(v6 + 752) = v17;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    *(_QWORD *)v14 = v8;
    *(_QWORD *)(v14 + 8) = v9;
    v54 = 0u;
    v15 = *(_OWORD *)&v56[14];
    v16 = *(_OWORD *)v56;
    *(_OWORD *)(v14 + 16) = v55;
    *(_OWORD *)(v14 + 32) = v16;
    *(_OWORD *)(v14 + 46) = v15;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)&v56[32] = 0u;
    *(_QWORD *)(v6 + 752) = v14 + 80;
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v64;
  if (v64)
  {
    v25 = (unint64_t *)&v64->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(_QWORD *)(v6 + 752);
  v29 = (gdc::Registry *)a1[1];
  v28 = (__int128 *)a1[2];
  *(_QWORD *)&v54 = v27 - 80;
  BYTE8(v54) = 0;
  BYTE8(v55) = 0;
  v56[0] = 0;
  *(_OWORD *)&v56[4] = xmmword_19FFB3470;
  *(_QWORD *)&v56[20] = 0x80000000800000;
  v30 = *v28;
  v31 = v28[1];
  v57 = v28[2];
  *(_OWORD *)&v56[44] = v31;
  *(_OWORD *)&v56[28] = v30;
  v32 = (uint64_t *)(v27 - 44);
  v33 = *(_QWORD *)v28;
  v64 = (std::__shared_weak_count *)*((unsigned int *)v28 + 2);
  v63 = v33;
  v34 = *(_QWORD *)((char *)v28 + 12);
  v66 = *((_DWORD *)v28 + 5);
  v65 = v34;
  v35 = *((_QWORD *)v28 + 3);
  v69 = *((_DWORD *)v28 + 8);
  v68 = v35;
  v36 = *(_QWORD *)((char *)v28 + 36);
  v72 = *((_DWORD *)v28 + 11);
  v71 = v36;
  v67 = 0;
  v70 = 0;
  v73 = 1065353216;
  v74 = xmmword_19FFB3470;
  v75 = 0x80000000800000;
  v76[0] = &off_1E42D8AB0;
  v76[1] = &v74;
  v76[2] = &v63;
  v77 = v76;
  v37.n128_u64[0] = (unint64_t)gm::Box<float,3>::forEachCorner(v32, (uint64_t)v76);
  v38 = v77;
  if (v77 == v76)
  {
    v39 = 4;
    v38 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_30;
    v39 = 5;
  }
  (*(void (**)(__n128))(*v38 + 8 * v39))(v37);
LABEL_30:
  *(_OWORD *)&v56[4] = v74;
  *(_QWORD *)&v56[20] = v75;
  v40 = (std::__shared_weak_count *)a4[1];
  v58 = *a4;
  v59 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  __p = 0;
  v61 = 0;
  v62 = 0;
  v43 = gdc::Registry::create(v29);
  v44 = (uint64_t *)gdc::Registry::storage<md::components::TexturedMeshInstance>((uint64_t)v29);
  gdc::ComponentStorageWrapper<md::components::TexturedMeshInstance>::emplace(v44, v43, (uint64_t)&v54);
  v45 = (char *)__p;
  if (__p)
  {
    v46 = v61;
    v47 = __p;
    if (v61 != __p)
    {
      do
      {
        v48 = (std::__shared_weak_count *)*((_QWORD *)v46 - 1);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v46 -= 16;
      }
      while (v46 != v45);
      v47 = __p;
    }
    v61 = v45;
    operator delete(v47);
  }
  v51 = v59;
  if (v59)
  {
    v52 = (unint64_t *)&v59->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_19F97C998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  md::Mesh::~Mesh((md::Mesh *)&a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_19F97C9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  md::components::TexturedMeshInstance::~TexturedMeshInstance((md::components::TexturedMeshInstance *)&a12);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a9);
  _Unwind_Resume(a1);
}

void md::components::TexturedMeshInstance::~TexturedMeshInstance(md::components::TexturedMeshInstance *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    v3 = *((_QWORD *)this + 17);
    v4 = (void *)*((_QWORD *)this + 16);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t md::StyleSettingsValueNode::value_as<int>(void *__src, size_t __n)
{
  void **v4;
  size_t v5;
  size_t v6;
  const char *v7;
  unsigned int v8;
  int v9;
  char *v11;
  void *__dst[2];
  int64_t v13;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__n >= 0x17)
  {
    v5 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v5 = __n | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)__n;
    v13 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v13) = __n;
  v4 = __dst;
  if (__n)
LABEL_8:
    memcpy(v4, __src, __n);
  *((_BYTE *)v4 + __n) = 0;
  v11 = 0;
  if (v13 >= 0)
    v7 = (const char *)__dst;
  else
    v7 = (const char *)__dst[0];
  v8 = strtol(v7, &v11, 10);
  v9 = *v11;
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  if (v9)
    return 0;
  else
    return v8 | 0x100000000;
}

void md::RenderLayer::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  std::string::value_type *v7;
  std::string::size_type v8;
  int v9;
  uint64_t v10;
  _QWORD v11[7];
  int v12;
  std::string v13;
  std::string v14;
  _DWORD v15[2];

  *((_BYTE *)&v14.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v14, "Render Layer ");
  std::to_string(&v13, *(unsigned __int8 *)(a1 + 34));
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v13;
  else
    v4 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    size = v13.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v14, (const std::string::value_type *)v4, size);
  v7 = (std::string::value_type *)v6->__r_.__value_.__r.__words[0];
  v8 = v6->__r_.__value_.__l.__size_;
  v15[0] = v6->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)((char *)&v6->__r_.__value_.__r.__words[2] + 3);
  v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_12:
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
LABEL_9:
  if ((v9 & 0x80000000) == 0)
  {
LABEL_10:
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_DWORD *)(a2 + 16) = v15[0];
    *(_DWORD *)(a2 + 19) = *(_DWORD *)((char *)v15 + 3);
    *(_BYTE *)(a2 + 23) = v9;
    goto LABEL_14;
  }
LABEL_13:
  std::string::__init_copy_ctor_external((std::string *)a2, v7, v8);
LABEL_14:
  *(_BYTE *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  *((_BYTE *)&v14.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v14, "Active");
  v10 = *(unsigned __int8 *)(a1 + 32);
  v12 = 0;
  memset(&v11[4], 0, 24);
  v11[0] = v10;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)&v14, (uint64_t)v11);
  if (v9 < 0)
    operator delete(v7);
}

void md::PolylineLabelPlacement::debugRoadNameForPosition(md::PolylineLabelPlacement *this@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  md::LabelLineResolvedPosition *v5;
  unsigned __int8 v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  size_t v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  const char *v38;

  v5 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v4 = *((_QWORD *)this + 6);
  if (!*(_BYTE *)(v4 + 120))
  {
    if ((*((_DWORD *)this + 22) == *(_DWORD *)(v4 + 252)
       && (v8 = (uint64_t *)*((_QWORD *)this + 9)) != 0
       && (*((__int16 *)this + 41) & 0x80000000) == 0
       || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::PolylineLabelPlacement *)((char *)this + 48), *((unsigned __int8 *)this + 212), a3), (v9 = *((_QWORD *)this + 6)) != 0)&& *((_DWORD *)this + 22) == *(_DWORD *)(v9 + 252)&& (v8 = (uint64_t *)*((_QWORD *)this + 9)) != 0)&& (*((__int16 *)this + 41) & 0x80000000) == 0&& (v10 = *v8) != 0&& !*(_BYTE *)(v10 + 32))
    {
      v11 = *(_QWORD *)(v10 + 16);
    }
    else
    {
      v11 = 0;
    }
    v38 = 0;
    if (geo::codec::featureGetNativeLabelCount(v11))
    {
      geo::codec::featureGetNativeLabel(v11, 0, &v38, 0);
      v12 = v38;
    }
    else
    {
      v12 = 0;
    }
    *((_BYTE *)&v33.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&v33, "RoadPosition name=");
    if (v12)
      v13 = v12;
    else
      v13 = "*** no name ***";
    v14 = strlen(v13);
    v15 = std::string::append(&v33, v13, v14);
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v34, " index=", 7uLL);
    v18 = v17->__r_.__value_.__r.__words[2];
    v19 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((*(_QWORD *)v5
       && *((_DWORD *)this + 22) == *(_DWORD *)(*(_QWORD *)v5 + 252)
       && (v20 = (uint64_t *)*((_QWORD *)this + 9)) != 0
       && (*((__int16 *)this + 41) & 0x80000000) == 0
       || (md::LabelLineResolvedPosition::moveOntoPathForZoom(v5, *((unsigned __int8 *)this + 212), *(double *)&v19),
           *(_QWORD *)v5)
       && *((_DWORD *)this + 22) == *(_DWORD *)(*(_QWORD *)v5 + 252)
       && (v20 = (uint64_t *)*((_QWORD *)this + 9)) != 0)
      && (*((__int16 *)this + 41) & 0x80000000) == 0
      && (v21 = *v20) != 0)
    {
      v22 = *(unsigned __int8 *)(v21 + 38);
    }
    else
    {
      v22 = 255;
    }
    std::to_string(&v32, v22);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v32;
    else
      v23 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    else
      size = v32.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v35, (const std::string::value_type *)v23, size);
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v36, " travelDir=", 0xBuLL);
    v28 = v27->__r_.__value_.__r.__words[2];
    v29 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (!*(_QWORD *)v5
      || *((_DWORD *)this + 22) != *(_DWORD *)(*(_QWORD *)v5 + 252)
      || !*((_QWORD *)this + 9)
      || *((__int16 *)this + 41) < 0)
    {
      md::LabelLineResolvedPosition::moveOntoPathForZoom(v5, *((unsigned __int8 *)this + 212), *(double *)&v29);
    }
    v30 = (char *)&loc_19F97D034 + 4 * byte_19FFB6E8C[md::LabelLinePosition::travelDirection(v5)];
    __asm { BR              X10 }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  {
    v31 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v31, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  a2[3] = mdm::Allocator::instance(void)::alloc;
}

void sub_19F97D344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  uint64_t v48;

  operator delete(v47);
  if (a14 < 0)
  {
    operator delete(a9);
    if (*(char *)(v48 - 89) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v48 - 112));
      if ((a47 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if (*(char *)(v48 - 89) < 0)
  {
    goto LABEL_3;
  }
  if ((a47 & 0x80000000) == 0)
  {
LABEL_4:
    if (a20 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a42);
  if (a20 < 0)
  {
LABEL_5:
    operator delete(__p);
    if (a40 < 0)
    {
LABEL_11:
      operator delete(a35);
      if ((a33 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_15;
    }
LABEL_14:
    if ((a33 & 0x80000000) == 0)
    {
LABEL_12:
      if (a26 < 0)
        goto LABEL_13;
      goto LABEL_16;
    }
LABEL_15:
    operator delete(a28);
    if (a26 < 0)
    {
LABEL_13:
      operator delete(a21);
      _Unwind_Resume(a1);
    }
LABEL_16:
    _Unwind_Resume(a1);
  }
LABEL_10:
  if (a40 < 0)
    goto LABEL_11;
  goto LABEL_14;
}

uint64_t md::PolylineLabelPlacement::secondaryMercatorPosition(uint64_t a1, double *a2, double a3)
{
  uint64_t v5;
  double v6;
  uint64_t v7;

  v5 = md::LabelPoint::mercatorPoint((md::LabelPoint *)(a1 + 152));
  v6 = *(double *)v5;
  *a2 = *(double *)v5;
  v7 = *(_QWORD *)(v5 + 8);
  *a2 = v6 + a3;
  *((_QWORD *)a2 + 1) = v7;
  return 1;
}

uint64_t md::PolylineLabelPlacement::positionInTraffic(md::LabelLineResolvedPosition *this, _QWORD *a2, double a3)
{
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  int v29;
  int v30;
  int v31;
  float v32;
  float v33;
  int v34;
  float v35;
  float v36;
  BOOL v37;

  v6 = (char *)this + 48;
  v5 = *((_QWORD *)this + 6);
  if (!v5 || *((_DWORD *)this + 22) != *(_DWORD *)(v5 + 252) || !*((_QWORD *)this + 9) || *((__int16 *)this + 41) < 0)
    md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)((char *)this + 48), *((unsigned __int8 *)this + 212), a3);
  if (!a2[5] || !*(_QWORD *)v6 || *((_DWORD *)this + 22) != *(_DWORD *)(*(_QWORD *)v6 + 252))
    return 0;
  result = 0;
  v8 = (uint64_t *)*((_QWORD *)this + 9);
  if (!v8)
    return result;
  v9 = *((__int16 *)this + 41);
  if (v9 < 0)
    return result;
  v10 = *v8;
  if (!v10)
    return 0;
  if (*(_BYTE *)(v10 + 32))
    return 0;
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 0;
  v12 = (int8x8_t)a2[1];
  if (!*(_QWORD *)&v12)
    return 0;
  v13 = 0x9DDFEA08EB382D69 * (((8 * v11) + 8) ^ HIDWORD(v11));
  v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v11) ^ (v13 >> 47) ^ v13);
  v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
  v16 = (uint8x8_t)vcnt_s8(v12);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = v15;
    if (v15 >= *(_QWORD *)&v12)
      v17 = v15 % *(_QWORD *)&v12;
  }
  else
  {
    v17 = v15 & (*(_QWORD *)&v12 - 1);
  }
  v18 = *(_QWORD **)(*a2 + 8 * v17);
  if (!v18)
    return 0;
  v19 = (_QWORD *)*v18;
  if (!v19)
    return 0;
  if (v16.u32[0] < 2uLL)
  {
    v20 = *(_QWORD *)&v12 - 1;
    while (1)
    {
      v22 = v19[1];
      if (v15 == v22)
      {
        if (v19[2] == v11)
          goto LABEL_37;
      }
      else if ((v22 & v20) != v17)
      {
        return 0;
      }
      result = 0;
      v19 = (_QWORD *)*v19;
      if (!v19)
        return result;
    }
  }
  while (1)
  {
    v21 = v19[1];
    if (v15 == v21)
      break;
    if (v21 >= *(_QWORD *)&v12)
      v21 %= *(_QWORD *)&v12;
    if (v21 != v17)
      return 0;
LABEL_26:
    result = 0;
    v19 = (_QWORD *)*v19;
    if (!v19)
      return result;
  }
  if (v19[2] != v11)
    goto LABEL_26;
LABEL_37:
  v23 = v19[3];
  v24 = *(unsigned __int16 *)(v10 + 44);
  if (v24 >= (v19[4] - v23) >> 5)
    return 0;
  v25 = (uint64_t *)(v23 + 32 * v24);
  v26 = *v25;
  v27 = v25[1];
  if (v26 == v27)
    return 0;
  v28 = *((float *)this + 21);
  while (1)
  {
    v29 = *(_DWORD *)(v26 + 16);
    v30 = *(_DWORD *)(v26 + 20);
    if (v29 <= v30)
      v31 = *(_DWORD *)(v26 + 20);
    else
      v31 = *(_DWORD *)(v26 + 16);
    v32 = *(float *)(v26 + 24);
    v33 = *(float *)(v26 + 28);
    if (v30 >= v29)
      v34 = *(_DWORD *)(v26 + 16);
    else
      v34 = *(_DWORD *)(v26 + 20);
    if (v30 >= v29)
    {
      v35 = fminf(v33, v32);
      v36 = fmaxf(v32, v33);
      if (v29 == v30)
      {
        v32 = v36;
      }
      else
      {
        v35 = *(float *)(v26 + 24);
        v32 = *(float *)(v26 + 28);
      }
      v33 = v35;
    }
    if (v34 < v9 || (v34 == v9 ? (v37 = v33 <= v28) : (v37 = 0), v37))
    {
      if (v31 > v9)
        break;
      if (v31 == v9 && v32 >= v28)
        break;
    }
    result = 0;
    v26 += 32;
    if (v26 == v27)
      return result;
  }
  return 1;
}

BOOL md::PolylineLabelPlacement::hasAnnotation(md::PolylineLabelPlacement *this, double a2)
{
  md::LabelLineResolvedPosition *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *((_QWORD *)this + 6);
  v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v4 = v5;
  if (!v5 || *((_DWORD *)this + 22) != *(_DWORD *)(v4 + 252) || !*((_QWORD *)this + 9) || *((__int16 *)this + 41) < 0)
  {
    md::LabelLineResolvedPosition::moveOntoPathForZoom(v3, *((unsigned __int8 *)this + 212), a2);
    v4 = *((_QWORD *)this + 6);
  }
  return !*(_BYTE *)(v4 + 120)
      && *((_DWORD *)this + 22) == *(_DWORD *)(v4 + 252)
      && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0
      && (*((__int16 *)this + 41) & 0x80000000) == 0
      && (v7 = *v6) != 0
      && !*(_BYTE *)(v7 + 32)
      && (v9 = *(_QWORD *)(v7 + 16)) != 0
      && *(_BYTE *)(v9 + 150) != 0;
}

BOOL md::PolylineLabelPlacement::hasText(md::PolylineLabelPlacement *this, double a2)
{
  md::LabelLineResolvedPosition *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *((_QWORD *)this + 6);
  v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v4 = v5;
  if ((v5
     && *((_DWORD *)this + 22) == *(_DWORD *)(v4 + 252)
     && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0
     && (*((__int16 *)this + 41) & 0x80000000) == 0
     || (md::LabelLineResolvedPosition::moveOntoPathForZoom(v3, *((unsigned __int8 *)this + 212), a2),
         (v7 = *((_QWORD *)this + 6)) != 0)
     && *((_DWORD *)this + 22) == *(_DWORD *)(v7 + 252)
     && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0)
    && (*((__int16 *)this + 41) & 0x80000000) == 0
    && (v8 = *v6) != 0)
  {
    return *(unsigned __int8 *)(v8 + 38) != 255;
  }
  else
  {
    return 0;
  }
}

uint64_t md::PolylineLabelPlacement::valid(md::PolylineLabelPlacement *this)
{
  return *((unsigned __int8 *)this + 214);
}

uint64_t md::PolylineLabelPlacement::isExtrapolated(md::PolylineLabelPlacement *this)
{
  return *((unsigned __int8 *)this + 215);
}

uint64_t md::PolylineLabelPlacement::geoFeature(md::PolylineLabelPlacement *this, double a2)
{
  md::LabelLineResolvedPosition *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *((_QWORD *)this + 6);
  v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v4 = v5;
  if ((v5
     && *((_DWORD *)this + 22) == *(_DWORD *)(v4 + 252)
     && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0
     && (*((__int16 *)this + 41) & 0x80000000) == 0
     || (md::LabelLineResolvedPosition::moveOntoPathForZoom(v3, *((unsigned __int8 *)this + 212), a2),
         (v7 = *((_QWORD *)this + 6)) != 0)
     && *((_DWORD *)this + 22) == *(_DWORD *)(v7 + 252)
     && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0)
    && (*((__int16 *)this + 41) & 0x80000000) == 0
    && (v8 = *v6) != 0
    && !*(_BYTE *)(v8 + 32))
  {
    return *(_QWORD *)(v8 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t md::PolylineLabelPlacement::geoTransitLink(md::PolylineLabelPlacement *this, double a2)
{
  md::LabelLineResolvedPosition *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *((_QWORD *)this + 6);
  v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v4 = v5;
  if ((v5
     && *((_DWORD *)this + 22) == *(_DWORD *)(v4 + 252)
     && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0
     && (*((__int16 *)this + 41) & 0x80000000) == 0
     || (md::LabelLineResolvedPosition::moveOntoPathForZoom(v3, *((unsigned __int8 *)this + 212), a2),
         (v7 = *((_QWORD *)this + 6)) != 0)
     && *((_DWORD *)this + 22) == *(_DWORD *)(v7 + 252)
     && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0)
    && (*((__int16 *)this + 41) & 0x80000000) == 0
    && (v8 = *v6) != 0
    && *(_BYTE *)(v8 + 32) == 2)
  {
    return *(_QWORD *)(v8 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t md::PolylineLabelPlacement::z(md::PolylineLabelPlacement *this)
{
  return *((unsigned __int8 *)this + 212);
}

void md::PolylineLabelPlacement::lineOffset(md::PolylineLabelPlacement *this, double a2)
{
  md::LabelLineResolvedPosition *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t *v11;
  double v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  md::LabelPoint *v26;
  const md::LabelPoint *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  BOOL v32;
  double v33;

  v5 = *((_QWORD *)this + 6);
  v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v4 = v5;
  if (!v5 || *((_DWORD *)this + 22) != *(_DWORD *)(v4 + 252) || !*((_QWORD *)this + 9) || *((__int16 *)this + 41) < 0)
    md::LabelLineResolvedPosition::moveOntoPathForZoom(v3, *((unsigned __int8 *)this + 212), a2);
  v6 = *((_QWORD *)this + 8);
  v7 = *((__int16 *)this + 40);
  v8 = *(_QWORD *)(v6 + 8);
  if (v7 < (*(_QWORD *)(v6 + 16) - v8) >> 4)
  {
    v9 = 0.0;
    if (!*((_WORD *)this + 40))
      goto LABEL_16;
    if (*((_WORD *)this + 40) == 1)
    {
      v10 = 0;
    }
    else
    {
      v10 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v11 = (uint64_t *)(v8 + 16);
      v12 = 0.0;
      v13 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v14 = 0.0;
      do
      {
        v15 = *(v11 - 2);
        v16 = *v11;
        v11 += 4;
        v12 = *(double *)(v15 + 8) + v12;
        v14 = *(double *)(v16 + 8) + v14;
        v13 -= 2;
      }
      while (v13);
      v9 = v14 + v12;
      if (v10 == v7)
      {
LABEL_16:
        v20 = (unsigned __int8 **)(v8 + 16 * v7);
        v21 = *v20;
        v22 = *((__int16 *)this + 41);
        if ((unint64_t)*((unsigned __int16 *)*v20 + 23) - 1 > v22)
        {
          v23 = 0;
          v24 = *((float *)this + 21);
          v25 = 0.0;
          do
          {
            v26 = (md::LabelPoint *)(*(uint64_t (**)(unsigned __int8 *, unint64_t))(*(_QWORD *)v21 + 24))(v21, v23);
            v27 = (const md::LabelPoint *)(*(uint64_t (**)(unsigned __int8 *, unint64_t))(*(_QWORD *)v21 + 24))(v21, v23 + 1);
            md::LabelPoint::vectorToPoint(v26, v27, v21[33]);
            v31 = sqrt(v28 * v28 + v29 * v29 + v30 * v30);
            v32 = v23 == v22;
            if (v23 >= v22)
              v33 = v24;
            else
              v33 = 1.0;
            v25 = v25 + v31 * v33;
            ++v23;
          }
          while (!v32);
        }
        return;
      }
    }
    v17 = v7 - v10;
    v18 = (uint64_t *)(v8 + 16 * v10);
    do
    {
      v19 = *v18;
      v18 += 2;
      v9 = *(double *)(v19 + 8) + v9;
      --v17;
    }
    while (v17);
    goto LABEL_16;
  }
}

void std::__shared_ptr_emplace<md::PolylineLabelPlacement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PolylineLabelPlacement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PolylineLabelPlacement::PolylineLabelPlacement(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, int a6, double a7, float a8)
{
  int v8;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v8 = a5;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = a3;
  *(_QWORD *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 18) = 0;
  v10 = -1;
  *(_DWORD *)(a1 + 20) = a6;
  *(_DWORD *)(a1 + 24) = -1;
  *(double *)(a1 + 32) = a7;
  *(float *)(a1 + 40) = a8;
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 45) = a4;
  *(_QWORD *)a1 = &off_1E429D948;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 56) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    LODWORD(v11) = *(_DWORD *)(a1 + 12);
    v10 = *(_DWORD *)(a1 + 24);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 96) = 0;
  v14 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 104) = v14;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 80);
  v15 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 147) = *(_DWORD *)(a2 + 99);
  *(_DWORD *)(a1 + 144) = v15;
  v16 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 152) = v16;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 128);
  v17 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 195) = *(_DWORD *)(a2 + 147);
  *(_DWORD *)(a1 + 192) = v17;
  v18 = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 200) = v18;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 12) = v11 | (1 << a5);
  if (v10 < (int)a5)
  {
    (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 176))(a1, a5, 1.0);
    *(_DWORD *)(a1 + 24) = v8;
  }
  return a1;
}

void sub_19F97DC80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::GraphTraversalQueueItem::~GraphTraversalQueueItem(md::GraphTraversalQueueItem *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

_QWORD *md::GraphTraversalContext::pushItem(_QWORD *a1, size_t __sz)
{
  size_t v2;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  void *v45;
  char *v46;
  char *v47;
  char *v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *result;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  _OWORD *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;

  v2 = __sz;
  v5 = (char *)a1[12];
  v4 = (char *)a1[13];
  v6 = (v4 - v5) >> 3;
  v7 = v4 - v5;
  v8 = v5;
  if (v4 == v5)
    v9 = 0;
  else
    v9 = 46 * v6 - 1;
  v10 = a1[15];
  if (v9 != a1[16] + v10)
    goto LABEL_88;
  v11 = v10 >= 0x2E;
  v12 = v10 - 46;
  if (v11)
  {
    a1[15] = v12;
    v13 = v5 + 8;
    v14 = *(_QWORD *)v5;
    a1[12] = v5 + 8;
    if (v4 != (char *)a1[14])
    {
LABEL_85:
      *(_QWORD *)v4 = v14;
      goto LABEL_86;
    }
    v15 = (char *)a1[11];
    if (v13 > v15)
    {
      v16 = (v13 - v15) >> 3;
      if (v16 >= -1)
        v17 = v16 + 1;
      else
        v17 = v16 + 2;
      v18 = v17 >> 1;
      v19 = -v18;
      v20 = &v13[-8 * v18];
      v21 = v4 - v13;
      if (v4 != v13)
      {
        memmove(&v13[-8 * v18], v13, v4 - v13);
        v4 = (char *)a1[12];
      }
      v22 = &v4[8 * v19];
      v4 = &v20[v21];
      a1[12] = v22;
      a1[13] = &v20[v21];
      goto LABEL_85;
    }
    v33 = (v4 - v15) >> 2;
    if (v4 == v15)
      v33 = 1;
    if (v33 >> 61)
      goto LABEL_119;
    v34 = v33 >> 2;
    v35 = 8 * v33;
    v36 = (char *)operator new(8 * v33);
    v37 = &v36[8 * v34];
    v39 = v4 - v13;
    v38 = v4 == v13;
    v4 = v37;
    if (!v38)
    {
      v4 = &v37[v39 & 0xFFFFFFFFFFFFFFF8];
      v40 = v39 - 8;
      if ((unint64_t)(v39 - 8) < 0x38)
      {
        v41 = &v36[8 * v34];
        goto LABEL_82;
      }
      v84 = &v36[8 * v34];
      v41 = v84;
      if ((unint64_t)(v84 - v13) < 0x20)
      {
        do
        {
LABEL_82:
          v91 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v41 = v91;
          v41 += 8;
        }
        while (v41 != v4);
        goto LABEL_83;
      }
      v85 = (v40 >> 3) + 1;
      v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      v41 = &v37[v86];
      v87 = (__int128 *)(v5 + 24);
      v88 = v84 + 16;
      v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v90 = *v87;
        *(v88 - 1) = *(v87 - 1);
        *v88 = v90;
        v87 += 2;
        v88 += 2;
        v89 -= 4;
      }
      while (v89);
      if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v13 += v86;
        goto LABEL_82;
      }
    }
LABEL_83:
    a1[11] = v36;
    a1[12] = v37;
    a1[13] = v4;
    a1[14] = &v36[v35];
    if (v15)
    {
      operator delete(v15);
      v4 = (char *)a1[13];
    }
    goto LABEL_85;
  }
  v23 = (char *)a1[14];
  v24 = (char *)a1[11];
  if (v6 >= (unint64_t)((v23 - v24) >> 3))
  {
    if (v23 == v24)
      v27 = 1;
    else
      v27 = (v23 - v24) >> 2;
    if (v27 >> 61)
      goto LABEL_119;
    v28 = (char *)operator new(8 * v27);
    v29 = operator new(0xFD0uLL);
    v30 = &v28[8 * v6];
    v31 = &v28[8 * v27];
    if (v6 == v27)
    {
      if (v7 < 1)
      {
        if (v4 == v5)
          v44 = 1;
        else
          v44 = v7 >> 2;
        if (v44 >> 61)
          goto LABEL_119;
        v45 = v29;
        v30 = (char *)operator new(8 * v44);
        v31 = &v30[8 * v44];
        operator delete(v28);
        v8 = (char *)a1[12];
        v4 = (char *)a1[13];
        v28 = v30;
        v29 = v45;
      }
      else
      {
        v32 = v6 + 2;
        if (v6 >= -1)
          v32 = v6 + 1;
        v30 -= 8 * (v32 >> 1);
      }
    }
    *(_QWORD *)v30 = v29;
    v46 = v30 + 8;
    if (v4 == v8)
    {
      v47 = v30;
      v48 = v30 + 8;
LABEL_42:
      v49 = (void *)a1[11];
      a1[11] = v28;
      a1[12] = v47;
      v4 = v48;
      a1[13] = v48;
      a1[14] = v31;
      v2 = __sz;
      if (v49)
      {
        operator delete(v49);
        v4 = (char *)a1[13];
      }
      goto LABEL_87;
    }
    while (v30 != v28)
    {
      v50 = v30;
      v48 = v46;
LABEL_45:
      v51 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v50 - 1) = v51;
      v47 = v50 - 8;
      v46 = v48;
      v30 = v47;
      if (v4 == (char *)a1[12])
        goto LABEL_42;
    }
    if (v46 < v31)
    {
      v52 = (v31 - v46) >> 3;
      if (v52 >= -1)
        v53 = v52 + 1;
      else
        v53 = v52 + 2;
      v48 = &v46[8 * (v53 >> 1)];
      v50 = &v30[8 * (v53 >> 1)];
      if (v46 == v30)
      {
        v28 = v46;
      }
      else
      {
        memmove(&v30[8 * (v53 >> 1)], v30, v46 - v30);
        v28 = v30;
      }
      goto LABEL_45;
    }
    if (v31 == v30)
      v54 = 1;
    else
      v54 = (v31 - v30) >> 2;
    if (v54 >> 61)
      goto LABEL_119;
    v55 = (char *)operator new(8 * v54);
    v28 = v55;
    v56 = (v54 + 3) >> 2;
    v50 = &v55[8 * v56];
    v48 = v50;
    v57 = v46 - v30;
    if (v46 != v30)
    {
      v48 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
      v58 = v57 - 8;
      v59 = &v55[8 * v56];
      v60 = v30;
      if (v58 >= 0x38)
      {
        v61 = 8 * v56;
        v59 = &v55[8 * v56];
        v60 = v30;
        if ((unint64_t)(v59 - v30) >= 0x20)
        {
          v62 = (v58 >> 3) + 1;
          v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = &v50[v63];
          v64 = (__int128 *)(v30 + 16);
          v65 = &v55[v61 + 16];
          v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *v64;
            *((_OWORD *)v65 - 1) = *(v64 - 1);
            *(_OWORD *)v65 = v67;
            v64 += 2;
            v65 += 32;
            v66 -= 4;
          }
          while (v66);
          if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_65;
          v60 = &v30[v63];
        }
      }
      do
      {
        v68 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v68;
        v59 += 8;
      }
      while (v59 != v48);
    }
LABEL_65:
    v31 = &v55[8 * v54];
    operator delete(v30);
    goto LABEL_45;
  }
  v25 = operator new(0xFD0uLL);
  v26 = v25;
  if (v23 == v4)
  {
    if (v5 != v24)
    {
      v42 = v2;
      v43 = v8;
      goto LABEL_96;
    }
    v69 = (v23 - v5) >> 2;
    if (v4 == v5)
      v69 = 1;
    if (v69 >> 61)
      goto LABEL_119;
    v70 = (v69 + 3) >> 2;
    v71 = 8 * v69;
    v72 = (char *)operator new(8 * v69);
    v43 = &v72[8 * v70];
    v73 = &v72[v71];
    v74 = v43;
    if (v4 != v5)
    {
      v74 = &v43[8 * v6];
      v75 = &v72[8 * v70];
      v76 = v5;
      if ((unint64_t)(v7 - 8) > 0x37)
      {
        v77 = &v72[8 * v70];
        v75 = v77;
        v76 = v5;
        if ((unint64_t)(v77 - v5) >= 0x20)
        {
          v78 = ((unint64_t)(v7 - 8) >> 3) + 1;
          v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v43[v79];
          v80 = (__int128 *)(v5 + 16);
          v81 = v77 + 16;
          v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v42 = v2;
            a1[11] = v72;
            a1[12] = v43;
            a1[13] = v74;
            a1[14] = v73;
LABEL_95:
            operator delete(v8);
            v43 = (char *)a1[12];
LABEL_96:
            *((_QWORD *)v43 - 1) = v26;
            v96 = (char *)a1[12];
            v97 = (char *)a1[13];
            a1[12] = v96 - 8;
            v98 = *((_QWORD *)v96 - 1);
            a1[12] = v96;
            if (v97 != (char *)a1[14])
            {
LABEL_118:
              *(_QWORD *)v97 = v98;
              v4 = (char *)(a1[13] + 8);
              a1[13] = v4;
              v2 = v42;
              goto LABEL_87;
            }
            v99 = (char *)a1[11];
            if (v96 > v99)
            {
              v100 = (v96 - v99) >> 3;
              if (v100 >= -1)
                v101 = v100 + 1;
              else
                v101 = v100 + 2;
              v102 = v101 >> 1;
              v103 = -v102;
              v104 = &v96[-8 * v102];
              v105 = v97 - v96;
              if (v97 != v96)
              {
                memmove(&v96[-8 * v102], v96, v97 - v96);
                v96 = (char *)a1[12];
              }
              v97 = &v104[v105];
              a1[12] = &v96[8 * v103];
              a1[13] = &v104[v105];
              goto LABEL_118;
            }
            v106 = (v97 - v99) >> 2;
            if (v97 == v99)
              v106 = 1;
            if (!(v106 >> 61))
            {
              v107 = v106 >> 2;
              v108 = 8 * v106;
              v109 = (char *)operator new(8 * v106);
              v110 = &v109[8 * v107];
              v111 = v97 - v96;
              v38 = v97 == v96;
              v97 = v110;
              if (v38)
                goto LABEL_116;
              v97 = &v110[v111 & 0xFFFFFFFFFFFFFFF8];
              v112 = v111 - 8;
              if ((unint64_t)(v111 - 8) >= 0x38)
              {
                v114 = &v109[8 * v107];
                v113 = v114;
                if ((unint64_t)(v114 - v96) >= 0x20)
                {
                  v115 = (v112 >> 3) + 1;
                  v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
                  v113 = &v110[v116];
                  v117 = (__int128 *)(v96 + 16);
                  v118 = v114 + 16;
                  v119 = v115 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v120 = *v117;
                    *(v118 - 1) = *(v117 - 1);
                    *v118 = v120;
                    v117 += 2;
                    v118 += 2;
                    v119 -= 4;
                  }
                  while (v119);
                  if (v115 == (v115 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_116:
                    a1[11] = v109;
                    a1[12] = v110;
                    a1[13] = v97;
                    a1[14] = &v109[v108];
                    if (v99)
                    {
                      operator delete(v99);
                      v97 = (char *)a1[13];
                    }
                    goto LABEL_118;
                  }
                  v96 += v116;
                }
              }
              else
              {
                v113 = &v109[8 * v107];
              }
              do
              {
                v121 = *(_QWORD *)v96;
                v96 += 8;
                *(_QWORD *)v113 = v121;
                v113 += 8;
              }
              while (v113 != v97);
              goto LABEL_116;
            }
LABEL_119:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v76 = &v5[v79];
        }
      }
      do
      {
        v95 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v75 = v95;
        v75 += 8;
      }
      while (v75 != v74);
    }
    v42 = v2;
    a1[11] = v72;
    a1[12] = v43;
    a1[13] = v74;
    a1[14] = v73;
    if (!v8)
      goto LABEL_96;
    goto LABEL_95;
  }
  *(_QWORD *)v4 = v25;
LABEL_86:
  v4 = (char *)(a1[13] + 8);
  a1[13] = v4;
LABEL_87:
  v8 = (char *)a1[12];
LABEL_88:
  if (v4 == v8)
  {
    v93 = 0;
  }
  else
  {
    v92 = a1[16] + a1[15];
    v93 = *(_QWORD *)&v8[8 * (v92 / 0x2E)] + 88 * (v92 % 0x2E);
  }
  *(_QWORD *)v93 = *(_QWORD *)v2;
  result = md::GraphTraversalPath::GraphTraversalPath((_QWORD *)(v93 + 8), v2 + 8);
  *(_BYTE *)(v93 + 80) = *(_BYTE *)(v2 + 80);
  ++a1[16];
  return result;
}

void sub_19F97E430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const*&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_34;
    if (prime < v10)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v10)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v28 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F97E750(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL md::GraphTraversalContext::hasVisited(int8x8_t *this, const MuninRoadEdge *a2)
{
  int8x8_t v2;
  const MuninRoadEdge **v3;
  const MuninRoadEdge **v4;
  int8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  if (this->i8[0])
  {
    v2 = this[17];
    if (v2)
    {
      v3 = *(const MuninRoadEdge ***)(*(_QWORD *)&v2 + 24);
      v4 = *(const MuninRoadEdge ***)(*(_QWORD *)&v2 + 32);
      if (v3 != v4)
      {
        while (*v3 != a2)
        {
          if (++v3 == v4)
          {
            v3 = v4;
            return v3 != v4;
          }
        }
      }
      return v3 != v4;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v6 = this[7];
    if (v6)
    {
      v7 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a2) + 8) ^ ((unint64_t)a2 >> 32));
      v8 = 0x9DDFEA08EB382D69 * (((unint64_t)a2 >> 32) ^ (v7 >> 47) ^ v7);
      v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      v10 = (uint8x8_t)vcnt_s8(v6);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = v9;
        if (v9 >= *(_QWORD *)&v6)
          v11 = v9 % *(_QWORD *)&v6;
      }
      else
      {
        v11 = v9 & (*(_QWORD *)&v6 - 1);
      }
      v12 = *(uint64_t ***)(*(_QWORD *)&this[6] + 8 * v11);
      if (v12)
      {
        v12 = (uint64_t **)*v12;
        if (v12)
        {
          if (v10.u32[0] < 2uLL)
          {
            v13 = *(_QWORD *)&v6 - 1;
            while (1)
            {
              v15 = v12[1];
              if ((uint64_t *)v9 == v15)
              {
                if (v12[2] == (uint64_t *)a2)
                  return v12 != 0;
              }
              else if (((unint64_t)v15 & v13) != v11)
              {
                goto LABEL_29;
              }
              v12 = (uint64_t **)*v12;
              if (!v12)
                return v12 != 0;
            }
          }
          do
          {
            v14 = (unint64_t)v12[1];
            if (v9 == v14)
            {
              if (v12[2] == (uint64_t *)a2)
                return v12 != 0;
            }
            else
            {
              if (v14 >= *(_QWORD *)&v6)
                v14 %= *(_QWORD *)&v6;
              if (v14 != v11)
                goto LABEL_29;
            }
            v12 = (uint64_t **)*v12;
          }
          while (v12);
        }
      }
    }
    else
    {
LABEL_29:
      v12 = 0;
    }
    return v12 != 0;
  }
}

void md::MuninAvailabilityDaVinciLayerDataSource::~MuninAvailabilityDaVinciLayerDataSource(md::MuninAvailabilityDaVinciLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::MuninAvailabilityDaVinciLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 30)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_15;
    }
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 32) != 1)
  {
LABEL_15:
    v8 = 0;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(_QWORD *)(v7 + 112);
  v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9)
  {
LABEL_16:
    v18 = v8;
    v19 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v18 = v8;
  v19 = v9;
  v12 = (unint64_t *)&v9->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_17:
  v15 = operator new(0x310uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_1E42DC7B0;
  *a3 = md::MuninAvailabilityData::MuninAvailabilityData((uint64_t)(v15 + 3), a1, (uint64_t *)(v18 + 144));
  a3[1] = (uint64_t)v15;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19F97EA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::MuninAvailabilityDaVinciLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

BOOL ggl::TransitNodeColorized::BasePipelineSetup::constantDataIsEnabled(ggl::TransitNodeColorized::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::TransitNodeColorized::BasePipelineSetup::textureIsEnabled(ggl::TransitNodeColorized::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t md::LabelManager::debugString(md::LabelManager *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  std::mutex *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  std::mutex *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  void *p_p;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char v84;
  size_t v85;
  unint64_t v86;
  const void **v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  md::LabelManager *v91;
  void *__p;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  _QWORD v97[2];
  _QWORD v98[3];
  uint64_t v99;
  unint64_t v100;
  void *v101[2];
  __int128 v102;
  int v103;
  uint64_t v104[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v104[0] = MEMORY[0x1E0DE4FE0] + 64;
  v96 = v9;
  *(_QWORD *)((char *)&v97[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v97[-1] + *(_QWORD *)(v96 - 24));
  std::ios_base::init(v11, v97);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v96 = v6 + 24;
  v104[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v97[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v101 = 0u;
  v102 = 0u;
  v103 = 16;
  if ((_DWORD)a3)
  {
    v13 = v96;
    *(_DWORD *)((char *)v97 + *(_QWORD *)(v96 - 24)) = *(_DWORD *)((_BYTE *)v97 + *(_QWORD *)(v96 - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v97[1] + *(_QWORD *)(v13 - 24)) = 2;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"LayoutZoom:", 11);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Loading Counts: image=", 22);
    atomic_load((unsigned int *)(*(_QWORD *)(a2 + 264) + 140));
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", textData=", 11);
    atomic_load((unsigned int *)(*(_QWORD *)(a2 + 272) + 56));
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", glyphImage=", 13);
    atomic_load((unsigned int *)(*(_QWORD *)(a2 + 280) + 64));
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Occlusions:(Labels,Graphics) unsubmitted=(", 42);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)") pending=(", 11);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)")\n", 2);
    if (*(_BYTE *)(a2 + 3076))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Scissor Rect: min=(", 19);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"), max=(", 8);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)")\n", 2);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"RouteTrafficFeaturesActive=", 27);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 48) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 48));
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Staging GlyphCache: hits=", 25);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)" misses=", 8);
    v28 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 16) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" hit%=", 6);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" size=", 6);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Atlas GlyphCache: hits=", 23);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)" misses=", 8);
    v32 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 16) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)" hit%=", 6);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)" size=", 6);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Atlas glyphs=", 13);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)" workingSize=", 13);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"ImageLoader[", 12);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"]: hits=", 8);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)" misses=", 8);
    v39 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v39 + *(_QWORD *)(*v39 - 24) + 16) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)" hit%=", 6);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)" size=", 6);
    v41 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)"\n", 1);
    (*(void (**)(_QWORD))(***(_QWORD ***)(a2 + 280) + 24))(**(_QWORD **)(a2 + 280));
    (*(void (**)(_QWORD))(***(_QWORD ***)(a2 + 280) + 32))(**(_QWORD **)(a2 + 280));
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"GlyphLoader: large-scale=", 25);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)", total=", 8);
    v43 = (_QWORD *)std::ostream::operator<<();
    v44 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)", %=", 4);
    *(_QWORD *)((char *)v44 + *(_QWORD *)(*v44 - 24) + 16) = 1;
    v45 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"\n", 1);
    (*(void (**)(_QWORD))(***(_QWORD ***)(a2 + 280) + 40))(**(_QWORD **)(a2 + 280));
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"GlyphLoader CTFont[", 19);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)"]: hits=", 8);
    v47 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)" misses=", 8);
    v48 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v48 + *(_QWORD *)(*v48 - 24) + 16) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)" hit%=", 6);
    v49 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)" size=", 6);
    v50 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n", 1);
    v51 = *(_QWORD *)(a2 + 304);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"GlyphSizes:", 11);
    v53 = *(_QWORD *)(v51 + 136);
    v52 = *(_QWORD *)(v51 + 144);
    if (v52 != v53)
    {
      v54 = 0;
      v55 = 0;
      v56 = 1;
      do
      {
        if (*(_DWORD *)(v53 + 4 * v55))
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)" ", 1);
          v57 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)"=", 1);
          std::ostream::operator<<();
          v53 = *(_QWORD *)(v51 + 136);
          v52 = *(_QWORD *)(v51 + 144);
        }
        v55 = v56++;
        v54 += 16;
      }
      while (v55 < (v52 - v53) >> 2);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"\n", 1);
    v12 = MEMORY[0x1E0DE4FB8];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"RoadPath Glyphs Placed: ", 24);
    v58 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Renderer: descs=", 16);
    v59 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)", items=", 8);
    v60 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)"(glyph=", 7);
    v61 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)",icon=", 6);
    v62 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)")", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"DevBuff:fl=", 11);
    v63 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)",by=", 4);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)"\n", 1);
    v65 = *(std::mutex **)(a2 + 336);
    std::mutex::lock(v65);
    std::mutex::unlock(v65);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Styles[Shared][", 15);
    v66 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)"]: hits=", 8);
    v67 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)" misses=", 8);
    v68 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v68 + *(_QWORD *)(*v68 - 24) + 16) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)" hit%=", 6);
    v69 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)" size=", 6);
    v70 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n", 1);
    v71 = *(std::mutex **)(a2 + 336);
    std::mutex::lock(v71);
    std::mutex::unlock(v71);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Styles[Layout][", 15);
    v72 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)"]: hits=", 8);
    v73 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)" misses=", 8);
    v74 = (_QWORD *)std::ostream::operator<<();
    *(_QWORD *)((char *)v74 + *(_QWORD *)(*v74 - 24) + 16) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)" hit%=", 6);
    v75 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)" size=", 6);
    v76 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v76, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"Scales:", 7);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)" content=", 9);
    v77 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v77, (uint64_t)" label=", 7);
    v78 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v78, (uint64_t)" resolved=", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)" shield=", 8);
    v79 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)" navShield=", 11);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)"\n", 1);
    md::LabelTextureAtlasStore::debugString((md::LabelTextureAtlasStore *)&__p, *(_QWORD *)(a2 + 256));
    v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
    if ((v95 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v95 & 0x80u) == 0)
      v81 = v95;
    else
      v81 = v94;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)p_p, v81);
    if ((char)v95 < 0)
      operator delete(__p);
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 240) + 280))(&__p, *(_QWORD *)(a2 + 240), a3);
  if ((v95 & 0x80u) == 0)
    v82 = &__p;
  else
    v82 = __p;
  if ((v95 & 0x80u) == 0)
    v83 = v95;
  else
    v83 = v94;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v96, (uint64_t)v82, v83);
  if ((char)v95 < 0)
  {
    operator delete(__p);
    v84 = v103;
    if ((v103 & 0x10) == 0)
      goto LABEL_25;
LABEL_28:
    v86 = *((_QWORD *)&v102 + 1);
    if (*((_QWORD *)&v102 + 1) < v100)
    {
      *((_QWORD *)&v102 + 1) = v100;
      v86 = v100;
    }
    v87 = (const void **)&v99;
    goto LABEL_32;
  }
  v84 = v103;
  if ((v103 & 0x10) != 0)
    goto LABEL_28;
LABEL_25:
  if ((v84 & 8) == 0)
  {
    v85 = 0;
    *((_BYTE *)this + 23) = 0;
    goto LABEL_40;
  }
  v87 = (const void **)v98;
  v86 = v98[2];
LABEL_32:
  v88 = *v87;
  v85 = v86 - (_QWORD)*v87;
  if (v85 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v85 >= 0x17)
  {
    v89 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v89 = v85 | 7;
    v90 = v89 + 1;
    v91 = (md::LabelManager *)operator new(v89 + 1);
    *((_QWORD *)this + 1) = v85;
    *((_QWORD *)this + 2) = v90 | 0x8000000000000000;
    *(_QWORD *)this = v91;
    this = v91;
    goto LABEL_39;
  }
  *((_BYTE *)this + 23) = v85;
  if (v85)
LABEL_39:
    memmove(this, v88, v85);
LABEL_40:
  *((_BYTE *)this + v85) = 0;
  v96 = *v8;
  *(_QWORD *)((char *)&v97[-1] + *(_QWORD *)(v96 - 24)) = v8[3];
  v97[0] = v12 + 16;
  if (SBYTE7(v102) < 0)
    operator delete(v101[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v104);
}

void sub_19F97F99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void md::FlyoverMetaData::~FlyoverMetaData(md::FlyoverMetaData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  md::FlyoverMetaData *v5;
  uint64_t v6;
  uint64_t v7;
  md::FlyoverMetaData *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  if (*((_QWORD *)this + 10))
  {
    v6 = *((_QWORD *)this + 8);
    v5 = (md::FlyoverMetaData *)*((_QWORD *)this + 9);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 10) = 0;
    if (v5 != (md::FlyoverMetaData *)((char *)this + 64))
    {
      do
      {
        v8 = (md::FlyoverMetaData *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != (md::FlyoverMetaData *)((char *)this + 64));
    }
  }
  v9 = (_QWORD *)*((_QWORD *)this + 5);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    operator delete(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void md::FlyoverMetaData::elevationBoundsForTile(md::FlyoverMetaData *this, const QuadTile *a2, uint64_t a3)
{
  std::__shared_weak_count *end;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::vector<unsigned int>::pointer v10;
  std::vector<unsigned int>::pointer v11;
  double v12;
  double v13;
  unsigned int *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BYTE v18[8];
  double v19;
  double v20;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v22;
  std::vector<unsigned int> __p;
  char v24;

  md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&__p, **(QuadTile ***)&a2->_type, a3);
  if (!v24)
  {
    begin = 0;
    v22 = 0;
    goto LABEL_16;
  }
  end = (std::__shared_weak_count *)__p.__end_;
  begin = __p.__begin_;
  v22 = __p.__end_;
  if (__p.__end_)
  {
    v7 = (unint64_t *)(__p.__end_ + 2);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
      std::__shared_weak_count::__release_weak(end);
      if (begin)
        goto LABEL_8;
LABEL_16:
      *(_BYTE *)this = 0;
      goto LABEL_17;
    }
  }
  if (!begin)
    goto LABEL_16;
LABEL_8:
  memset(&__p, 0, sizeof(__p));
  md::FlyoverMetaData::heightIndices(**(QuadTile ***)&a2->_type, a3, &__p);
  v10 = __p.__begin_;
  v11 = __p.__end_;
  if (__p.__begin_ != __p.__end_)
  {
    v12 = -20000.0;
    v13 = 20000.0;
    while (1)
    {
      md::FlyoverMetaData::elevationBoundsForHeightTile((md::FlyoverMetaData *)v18, **(QuadTile ***)&a2->_type, a3, *v10);
      if (!v18[0])
        break;
      v13 = fmin(v13, v19);
      v12 = fmax(v20, v12);
      if (++v10 == v11)
      {
        if (v12 < v13)
          break;
        *(_BYTE *)this = 1;
        *((double *)this + 1) = v13;
        *((double *)this + 2) = v12;
        v14 = __p.__begin_;
        if (__p.__begin_)
          goto LABEL_14;
        goto LABEL_17;
      }
    }
  }
  *(_BYTE *)this = 0;
  v14 = __p.__begin_;
  if (__p.__begin_)
  {
LABEL_14:
    __p.__end_ = v14;
    operator delete(v14);
  }
LABEL_17:
  v15 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v16 = (unint64_t *)(v22 + 2);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_19F97FCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void md::FlyoverMetaData::heightIndices(QuadTile *a1, uint64_t a2, std::vector<unsigned int> *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  char v17;

  md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v15, a1, a2);
  if (v17)
  {
    v5 = v16;
    v13 = v15;
    v14 = v16;
    if (!v16)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
LABEL_7:
      v9 = v13;
      if (!v13)
        goto LABEL_10;
      goto LABEL_8;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v9 = v13;
    if (v13)
    {
LABEL_8:
      v10 = (std::__shared_weak_count *)*(unsigned int *)(a2 + 8);
      v15 = *(unsigned __int8 *)(a2 + 1) | ((unint64_t)(~(-1 << *(_BYTE *)(a2 + 1))
                                                                           - *(_DWORD *)(a2 + 4)) << 32);
      v16 = v10;
      geo::c3mm::C3mmArea::getHeightIndices(v9, (unsigned int *)&v15, a3);
    }
  }
  else
  {
    v14 = 0;
  }
LABEL_10:
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19F97FE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::FlyoverMetaData::elevationBoundsForHeightTile(md::FlyoverMetaData *this, QuadTile *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _WORD *v11;
  unint64_t v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD v17[2];
  unint64_t v18;
  float32x2_t v19;
  std::__shared_weak_count *v20;
  float32x2_t v21;
  std::__shared_weak_count *v22;
  int v23;
  __int16 v24;
  char v25;

  md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v21, a2, a3);
  if (!v25)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_11;
  }
  v7 = v22;
  v19 = v21;
  v20 = v22;
  if (!v22)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_7:
    v11 = (_WORD *)v19;
    if (v19)
      goto LABEL_8;
LABEL_11:
    *(_BYTE *)this = 0;
    v14 = v20;
    if (!v20)
      return;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  v11 = (_WORD *)v19;
  if (!*(_QWORD *)&v19)
    goto LABEL_11;
LABEL_8:
  v12 = *(unsigned int *)(a3 + 8) | (unint64_t)(a4 << 32);
  LOBYTE(v17[0]) = *(_BYTE *)(a3 + 1);
  v17[1] = ~(-1 << *(_BYTE *)(a3 + 1)) - *(_DWORD *)(a3 + 4);
  v18 = v12;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  v24 = 0;
  if (geo::c3mm::C3mmArea::getEntry(v11, v17, (uint64_t)&v21) == -1)
  {
    *(float64x2_t *)((char *)this + 8) = vcvtq_f64_f32(v21);
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  *(_BYTE *)this = v13;
  v14 = v20;
  if (v20)
  {
LABEL_15:
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19F97FFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::FlyoverMetaData::tileType(md::FlyoverMetaData *this, const QuadTile *a2, uint64_t a3)
{
  char *v6;
  float *v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  char v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;
  unsigned __int8 v36[4];
  uint64_t v37;
  int v38;
  __int128 v39;
  int v40;

  *(_WORD *)v36 = *(_WORD *)&a2->_type;
  v37 = *(_QWORD *)&a2->_yIdx;
  v38 = a3;
  v6 = (char *)this + 64;
  v7 = (float *)((char *)this + 24);
  v8 = std::__hash_table<std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,std::__unordered_map_hasher<md::FlyoverMetaData::TileTypeCacheEntry,std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,md::FlyoverMetaData::TileTypeCacheEntryHash,std::equal_to<md::FlyoverMetaData::TileTypeCacheEntry>,true>,std::__unordered_map_equal<md::FlyoverMetaData::TileTypeCacheEntry,std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,std::equal_to<md::FlyoverMetaData::TileTypeCacheEntry>,md::FlyoverMetaData::TileTypeCacheEntryHash,true>,std::allocator<std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>>>::find<md::FlyoverMetaData::TileTypeCacheEntry>((_QWORD *)this + 3, v36);
  if (v8)
  {
    v9 = (char *)*((_QWORD *)this + 9);
    v10 = (uint64_t *)v8[6];
    if (v9 != (char *)v10)
    {
      v11 = (uint64_t *)v10[1];
      if (v11 != (uint64_t *)v9)
      {
        v12 = *v10;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)v10[1] = v12;
        v13 = *(_QWORD *)v9;
        *(_QWORD *)(v13 + 8) = v10;
        *v10 = v13;
        *(_QWORD *)v9 = v10;
        v10[1] = (uint64_t)v9;
        v9 = (char *)*((_QWORD *)this + 9);
      }
    }
    if (v9 != v6)
    {
      v14 = v9[48];
      v15 = 1;
      return v14 | (v15 << 8);
    }
  }
  md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v39, **(QuadTile ***)this, (uint64_t)a2);
  if (!(_BYTE)v40)
  {
    v35 = 0uLL;
    goto LABEL_33;
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  v35 = v39;
  if (!*((_QWORD *)&v39 + 1))
    goto LABEL_13;
  v17 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (v19)
  {
LABEL_13:
    v20 = (unsigned __int16 *)v35;
    if ((_QWORD)v35)
      goto LABEL_14;
LABEL_33:
    LOWORD(v39) = *(_WORD *)&a2->_type;
    *(_QWORD *)((char *)&v39 + 4) = *(_QWORD *)&a2->_yIdx;
    v40 = 0;
    geo::LRUPolicy<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash>::insert((uint64_t)v6, v7, (unsigned __int8 *)&v39, 2);
    while (*((_QWORD *)this + 10) > *((_QWORD *)this + 2))
      geo::Cache<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash,geo::LRUPolicy>::_pop((_QWORD *)this + 2);
    v15 = 1;
    v14 = 2;
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (!*((_QWORD *)&v35 + 1))
      return v14 | (v15 << 8);
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  v20 = (unsigned __int16 *)v35;
  if (!(_QWORD)v35)
    goto LABEL_33;
LABEL_14:
  v21 = a2->_xIdx | (unint64_t)(a3 << 32);
  v34[0] = a2->_level | ((unint64_t)(~(-1 << a2->_level) - a2->_yIdx) << 32);
  v34[1] = v21;
  v32 = 0;
  v33 = 0;
  v31 = 3;
  if (geo::c3mm::C3mmArea::getMeshTypeForKeyOrParent(v20, (unsigned int *)v34, &v31, &v32) != -1)
  {
    v14 = 0;
    v15 = 0;
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (!*((_QWORD *)&v35 + 1))
      return v14 | (v15 << 8);
    goto LABEL_44;
  }
  v22 = v32;
  if (v31 >= 4)
    v14 = 1;
  else
    v14 = 0x30201u >> (8 * v31);
  v23 = v33;
  v24 = (1 << v32) + ~HIDWORD(v32);
  LOBYTE(v39) = -1;
  BYTE1(v39) = v32;
  *(_QWORD *)((char *)&v39 + 4) = __PAIR64__(v33, v24);
  v40 = HIDWORD(v33);
  geo::LRUPolicy<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash>::insert((uint64_t)v6, v7, (unsigned __int8 *)&v39, v14 & 3);
  while (*((_QWORD *)this + 10) > *((_QWORD *)this + 2))
    geo::Cache<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash,geo::LRUPolicy>::_pop((_QWORD *)this + 2);
  if (a2->_type != 255
    || (a2->_level == v22 ? (v25 = v24 == a2->_yIdx) : (v25 = 0), v25 ? (v26 = v23 == a2->_xIdx) : (v26 = 0), !v26))
  {
    geo::LRUPolicy<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash>::insert((uint64_t)v6, v7, v36, 0);
    while (*((_QWORD *)this + 10) > *((_QWORD *)this + 2))
      geo::Cache<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash,geo::LRUPolicy>::_pop((_QWORD *)this + 2);
    v14 = 0;
  }
  v15 = 1;
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
LABEL_44:
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v14 | (v15 << 8);
}

void sub_19F9802D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,std::__unordered_map_hasher<md::FlyoverMetaData::TileTypeCacheEntry,std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,md::FlyoverMetaData::TileTypeCacheEntryHash,std::equal_to<md::FlyoverMetaData::TileTypeCacheEntry>,true>,std::__unordered_map_equal<md::FlyoverMetaData::TileTypeCacheEntry,std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,std::equal_to<md::FlyoverMetaData::TileTypeCacheEntry>,md::FlyoverMetaData::TileTypeCacheEntryHash,true>,std::allocator<std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>>>::find<md::FlyoverMetaData::TileTypeCacheEntry>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = *((int *)a2 + 1);
  v7 = *((int *)a2 + 2);
  v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v9 = *((unsigned int *)a2 + 6);
  v10 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ (2 * v9) ^ v8;
  v11 = (uint8x8_t)vcnt_s8(v2);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = v10;
    if (v10 >= *(_QWORD *)&v2)
      v12 = v10 % *(_QWORD *)&v2;
  }
  else
  {
    v12 = v10 & (*(_QWORD *)&v2 - 1);
  }
  v13 = *(uint64_t ***)(*a1 + 8 * v12);
  if (!v13)
    return 0;
  result = *v13;
  if (*v13)
  {
    if (v11.u32[0] < 2uLL)
    {
      v15 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v17 = result[1];
        if (v17 == v10)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
            && *((_DWORD *)result + 10) == (_DWORD)v9)
          {
            return result;
          }
        }
        else if ((v17 & v15) != v12)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v16 = result[1];
      if (v16 == v10)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
          && *((_DWORD *)result + 10) == (_DWORD)v9)
        {
          return result;
        }
      }
      else
      {
        if (v16 >= *(_QWORD *)&v2)
          v16 %= *(_QWORD *)&v2;
        if (v16 != v12)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void geo::LRUPolicy<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash>::insert(uint64_t a1, float *a2, unsigned __int8 *a3, char a4)
{
  unint64_t v4;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t **v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  size_t v43;
  size_t v44;
  size_t v45;
  _QWORD *i;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  size_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  void *__p;

  v9 = std::__hash_table<std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,std::__unordered_map_hasher<md::FlyoverMetaData::TileTypeCacheEntry,std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,md::FlyoverMetaData::TileTypeCacheEntryHash,std::equal_to<md::FlyoverMetaData::TileTypeCacheEntry>,true>,std::__unordered_map_equal<md::FlyoverMetaData::TileTypeCacheEntry,std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,std::equal_to<md::FlyoverMetaData::TileTypeCacheEntry>,md::FlyoverMetaData::TileTypeCacheEntryHash,true>,std::allocator<std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>>>::find<md::FlyoverMetaData::TileTypeCacheEntry>(a2, a3);
  if (v9)
  {
    v10 = v9;
    v11 = (uint64_t *)v9[6];
    v12 = *v11;
    *(_QWORD *)(v12 + 8) = v11[1];
    *(_QWORD *)v11[1] = v12;
    --*(_QWORD *)(a1 + 16);
    operator delete(v11);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a2, v10);
    if (__p)
      operator delete(__p);
  }
  v13 = (char *)operator new(0x38uLL);
  v14 = a3[1];
  v15 = *a3;
  v13[16] = v15;
  v13[17] = v14;
  v16 = *(_QWORD *)(a3 + 4);
  *(_QWORD *)(v13 + 20) = v16;
  v17 = *((unsigned int *)a3 + 6);
  *((_DWORD *)v13 + 10) = v17;
  v13[48] = a4;
  v18 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = v18;
  *v18 = v13;
  v19 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v19;
  v20 = a3[1];
  v21 = (v20
       + ((v15 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v15 - 0x61C8864680B583EBLL);
  v22 = ((v21 << 6) + (int)v16 + (v21 >> 2) - 0x61C8864680B583EBLL) ^ v21;
  v23 = ((v22 << 6) + SHIDWORD(v16) + (v22 >> 2) - 0x61C8864680B583EBLL) ^ (2 * v17);
  v24 = v23 ^ v22;
  v25 = *((_QWORD *)a2 + 1);
  v59 = v16;
  if (v25)
  {
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      v4 = v23 ^ v22;
      if (v24 >= v25)
        v4 = v24 % v25;
    }
    else
    {
      v4 = v24 & (v25 - 1);
    }
    v27 = *(uint64_t ***)(*(_QWORD *)a2 + 8 * v4);
    if (v27)
    {
      v28 = *v27;
      if (v28)
      {
        if (v26.u32[0] < 2uLL)
        {
          while (1)
          {
            v30 = v28[1];
            if (v30 == v24)
            {
              if (__PAIR64__(*((unsigned __int8 *)v28 + 17), *((unsigned __int8 *)v28 + 16)) == __PAIR64__(v20, v15)
                && *(uint64_t *)((char *)v28 + 20) == v16
                && *((_DWORD *)v28 + 10) == (_DWORD)v17)
              {
                return;
              }
            }
            else if ((v30 & (v25 - 1)) != v4)
            {
              goto LABEL_30;
            }
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_30;
          }
        }
        do
        {
          v29 = v28[1];
          if (v29 == v24)
          {
            if (__PAIR64__(*((unsigned __int8 *)v28 + 17), *((unsigned __int8 *)v28 + 16)) == __PAIR64__(v20, v15)
              && *(uint64_t *)((char *)v28 + 20) == v16
              && *((_DWORD *)v28 + 10) == (_DWORD)v17)
            {
              return;
            }
          }
          else
          {
            if (v29 >= v25)
              v29 %= v25;
            if (v29 != v4)
              break;
          }
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
  }
LABEL_30:
  v31 = operator new(0x38uLL);
  *v31 = 0;
  v31[1] = v24;
  *((_BYTE *)v31 + 16) = *a3;
  *((_BYTE *)v31 + 17) = v20;
  *(_QWORD *)((char *)v31 + 20) = v59;
  *((_DWORD *)v31 + 10) = v17;
  v31[6] = v13;
  v32 = (float)(unint64_t)(*((_QWORD *)a2 + 3) + 1);
  v33 = a2[8];
  if (!v25 || (float)(v33 * (float)v25) < v32)
  {
    v34 = 1;
    if (v25 >= 3)
      v34 = (v25 & (v25 - 1)) != 0;
    v35 = v34 | (2 * v25);
    v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v25 = *((_QWORD *)a2 + 1);
    }
    if (prime <= v25)
    {
      if (prime >= v25)
        goto LABEL_67;
      v49 = vcvtps_u32_f32((float)*((unint64_t *)a2 + 3) / a2[8]);
      if (v25 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (prime <= v49)
        prime = v49;
      if (prime >= v25)
      {
        v25 = *((_QWORD *)a2 + 1);
LABEL_67:
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v24 >= v25)
            v4 = v24 % v25;
          else
            v4 = v24;
        }
        else
        {
          v4 = (v25 - 1) & v24;
        }
        goto LABEL_80;
      }
      if (!prime)
      {
        v58 = *(_QWORD **)a2;
        *(_QWORD *)a2 = 0;
        if (v58)
          operator delete(v58);
        v25 = 0;
        *((_QWORD *)a2 + 1) = 0;
        goto LABEL_67;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v38 = operator new(8 * prime);
    v39 = *(_QWORD **)a2;
    *(_QWORD *)a2 = v38;
    if (v39)
      operator delete(v39);
    v40 = 0;
    *((_QWORD *)a2 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v40++) = 0;
    while (prime != v40);
    v42 = (uint64_t *)(a2 + 4);
    v41 = (_QWORD *)*((_QWORD *)a2 + 2);
    if (!v41)
    {
LABEL_66:
      v25 = prime;
      goto LABEL_67;
    }
    v43 = v41[1];
    v44 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v45 = v43 & v44;
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v45) = v42;
      for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
      {
        v47 = i[1] & v44;
        if (v47 == v45)
        {
          v41 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a2 + 8 * v47))
        {
          *v41 = *i;
          v48 = 8 * v47;
          *i = **(_QWORD **)(*(_QWORD *)a2 + v48);
          **(_QWORD **)(*(_QWORD *)a2 + v48) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v47) = v41;
          v41 = i;
          v45 = v47;
        }
      }
      goto LABEL_66;
    }
    if (v43 >= prime)
      v43 %= prime;
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v43) = v42;
    v52 = (_QWORD *)*v41;
    if (!*v41)
      goto LABEL_66;
    while (1)
    {
      v54 = v52[1];
      if (v54 >= prime)
        v54 %= prime;
      if (v54 != v43)
      {
        if (!*(_QWORD *)(*(_QWORD *)a2 + 8 * v54))
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v54) = v41;
          goto LABEL_71;
        }
        *v41 = *v52;
        v53 = 8 * v54;
        *v52 = **(_QWORD **)(*(_QWORD *)a2 + v53);
        **(_QWORD **)(*(_QWORD *)a2 + v53) = v52;
        v52 = v41;
      }
      v54 = v43;
LABEL_71:
      v41 = v52;
      v52 = (_QWORD *)*v52;
      v43 = v54;
      if (!v52)
        goto LABEL_66;
    }
  }
LABEL_80:
  v55 = *(_QWORD **)a2;
  v56 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v4);
  if (v56)
  {
    *v31 = *v56;
LABEL_88:
    *v56 = v31;
    goto LABEL_89;
  }
  *v31 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v31;
  v55[v4] = a2 + 4;
  if (*v31)
  {
    v57 = *(_QWORD *)(*v31 + 8);
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v57 >= v25)
        v57 %= v25;
    }
    else
    {
      v57 &= v25 - 1;
    }
    v56 = (_QWORD *)(*(_QWORD *)a2 + 8 * v57);
    goto LABEL_88;
  }
LABEL_89:
  ++*((_QWORD *)a2 + 3);
}

void sub_19F980A64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void geo::Cache<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash,geo::LRUPolicy>::_pop(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  __int16 v6[2];
  uint64_t v7;
  int v8;
  char v9;
  void *__p;

  v2 = (char *)a1[6];
  v6[0] = *((_WORD *)v2 + 8);
  v7 = *(_QWORD *)(v2 + 20);
  v8 = *((_DWORD *)v2 + 10);
  v9 = v2[48];
  v3 = *(_QWORD *)v2;
  *(_QWORD *)(v3 + 8) = *((_QWORD *)v2 + 1);
  **((_QWORD **)v2 + 1) = v3;
  --a1[8];
  operator delete(v2);
  v4 = a1 + 1;
  v5 = std::__hash_table<std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,std::__unordered_map_hasher<md::FlyoverMetaData::TileTypeCacheEntry,std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,md::FlyoverMetaData::TileTypeCacheEntryHash,std::equal_to<md::FlyoverMetaData::TileTypeCacheEntry>,true>,std::__unordered_map_equal<md::FlyoverMetaData::TileTypeCacheEntry,std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>,std::equal_to<md::FlyoverMetaData::TileTypeCacheEntry>,md::FlyoverMetaData::TileTypeCacheEntryHash,true>,std::allocator<std::__hash_value_type<md::FlyoverMetaData::TileTypeCacheEntry,std::__list_iterator<std::pair<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType>,void *>>>>::find<md::FlyoverMetaData::TileTypeCacheEntry>(v4, (unsigned __int8 *)v6);
  if (v5)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v4, v5);
    if (__p)
      operator delete(__p);
  }
}

void md::FlyoverMetaData::adjustedTile(md::FlyoverMetaData *this, const QuadTile *a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  int v27;

  md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v26, **(QuadTile ***)&a2->_type, a3);
  if (!(_BYTE)v27)
  {
    v25 = 0uLL;
    goto LABEL_16;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  v25 = v26;
  if (!*((_QWORD *)&v26 + 1))
    goto LABEL_7;
  v9 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (v11)
  {
LABEL_7:
    v12 = (unsigned __int16 *)v25;
    if ((_QWORD)v25)
      goto LABEL_8;
LABEL_16:
    LOWORD(v26) = *(_WORD *)a3;
    *(_QWORD *)((char *)&v26 + 4) = *(_QWORD *)(a3 + 4);
    v27 = 0;
    geo::LRUPolicy<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash>::insert((uint64_t)&a2[2]._hash, (float *)&a2[1]._type, (unsigned __int8 *)&v26, 2);
    while (*(_QWORD *)&a2[3]._xIdx > a2->_hash)
      geo::Cache<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash,geo::LRUPolicy>::_pop(&a2->_hash);
    *(_WORD *)this = *(_WORD *)a3;
    *(_QWORD *)((char *)this + 4) = *(_QWORD *)(a3 + 4);
    *((_BYTE *)this + 24) = 2;
LABEL_19:
    *((_BYTE *)this + 32) = 1;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (!*((_QWORD *)&v25 + 1))
      return;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v12 = (unsigned __int16 *)v25;
  if (!(_QWORD)v25)
    goto LABEL_16;
LABEL_8:
  v13 = *(unsigned int *)(a3 + 8);
  v24[0] = *(unsigned __int8 *)(a3 + 1) | ((unint64_t)(~(-1 << *(_BYTE *)(a3 + 1))
                                                                          - *(_DWORD *)(a3 + 4)) << 32);
  v24[1] = v13;
  v22 = 0;
  v23 = 0;
  v21 = 3;
  if (geo::c3mm::C3mmArea::getMeshTypeForKeyOrParent(v12, (unsigned int *)v24, &v21, &v22) == -1)
  {
    v14 = v22;
    if (v21 >= 4)
      v15 = 1;
    else
      v15 = 0x30201u >> (8 * v21);
    v16 = v23;
    v17 = (1 << v22) + ~HIDWORD(v22);
    LOBYTE(v26) = -1;
    BYTE1(v26) = v22;
    *(_QWORD *)((char *)&v26 + 4) = __PAIR64__(v23, v17);
    v27 = HIDWORD(v23);
    geo::LRUPolicy<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash>::insert((uint64_t)&a2[2]._hash, (float *)&a2[1]._type, (unsigned __int8 *)&v26, v15 & 3);
    while (*(_QWORD *)&a2[3]._xIdx > a2->_hash)
      geo::Cache<md::FlyoverMetaData::TileTypeCacheEntry,md::FlyoverTileType,md::FlyoverMetaData::TileTypeCacheEntryHash,geo::LRUPolicy>::_pop(&a2->_hash);
    *(_BYTE *)this = -1;
    *((_BYTE *)this + 1) = v14;
    *((_DWORD *)this + 1) = v17;
    *((_DWORD *)this + 2) = v16;
    *((_BYTE *)this + 24) = v15;
    goto LABEL_19;
  }
  if (a4)
    std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)&a2[3]._hash, (unsigned __int8 *)a3, a3);
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 32) = 0;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
LABEL_20:
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19F980D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F981130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void karo::Thread::callback(karo::Thread *this, void *a2)
{
  const char *v3;

  v3 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v3 = *(const char **)v3;
  pthread_setname_np(v3);
  pthread_set_qos_class_self_np(QOS_CLASS_USER_INITIATED, -1);
  pthread_set_fixedpriority_self();
  (*(void (**)(karo::Thread *))(*(_QWORD *)this + 16))(this);
  pthread_exit((char *)this + 8);
}

void md::DaVinciGroundTileResourceFetcher::~DaVinciGroundTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F98145C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F9815CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va);

  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

char *std::vector<geo::_retain_ptr<GEOAttribution * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<GEOAttribution * const {__strong}&,geo::memory_management_mode const&>(void **a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  char *v11;
  id *v12;
  id *v13;
  void *v14;
  id *v15;
  id *v16;
  id *v17;
  void (**v18)(id *);
  BOOL v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  v10 = a2;
  *(_QWORD *)v8 = &off_1E42B4B30;
  *((_QWORD *)v8 + 1) = v10;
  v11 = v8 + 24;
  v13 = (id *)*a1;
  v12 = (id *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12)
      return v11;
    goto LABEL_18;
  }
  do
  {
    *((_QWORD *)v8 - 3) = &off_1E42B4B30;
    v8 -= 24;
    *((_QWORD *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v12 - 2));
    v14 = *(v12 - 2);
    *(v12 - 2) = 0;

    v12 -= 3;
  }
  while (v12 != v13);
  v12 = (id *)*a1;
  v15 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v15 != v12)
  {
    v16 = v15 - 3;
    v17 = v15 - 3;
    do
    {
      v18 = (void (**)(id *))*v17;
      v17 -= 3;
      (*v18)(v16);
      v19 = v16 == v12;
      v16 = v17;
    }
    while (!v19);
  }
  if (v12)
LABEL_18:
    operator delete(v12);
  return v11;
}

uint64_t geo::_retain_ptr<GEOAttribution * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B30;

  return a1;
}

void geo::_retain_ptr<GEOAttribution * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B30;

  JUMPOUT(0x1A1AF4E00);
}

void altitude::GlobeCleanupLoader::~GlobeCleanupLoader(altitude::GlobeCleanupLoader *this)
{
  altitude::GlobeCleanupLoader::~GlobeCleanupLoader(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E42C54B0;
  *((_QWORD *)this + 5) = &unk_1E42C5540;
  v2 = (_QWORD *)((char *)this + 40);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 43));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 40));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 37));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 34));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 31));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 28));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 25));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 22));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 19));
  *(_QWORD *)this = off_1E42C39F0;
  *v2 = &unk_1E42C3A60;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)v2);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 12));
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void altitude::GlobeCleanupLoader::update(altitude::GlobeCleanupLoader *this, unsigned int a2)
{
  altitude::GlobeCleanupLoader *v2;
  int v4;
  _BYTE *v5;
  unsigned int v6;
  BOOL v7;
  NSObject *v8;
  int32x4_t *v9;
  unint64_t v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  float v16;
  uint32x4_t v17;
  float v18;
  float v19;
  uint32x4_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  size_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  altitude::GlobeTileComponent *v29;
  uint64_t v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  NSObject *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  size_t v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  altitude::GlobeTileComponent *v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  altitude::GlobeCleanupLoader *v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  size_t v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  char *v156;
  int64_t v157;
  unint64_t v158;
  unint64_t *v159;
  _QWORD *v160;
  void *v161;
  unint64_t v162;
  uint64_t v163;
  __int128 v164;
  _QWORD *v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _BYTE *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  __int128 *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t *v179;
  uint64_t *i;
  uint64_t v181;
  altitude::OverlayTileComponent *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  altitude::GlobeCleanupLoader *v186;
  unsigned int v187;
  size_t v188;
  char *v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  unint64_t v208;
  char *v209;
  unint64_t v210;
  char *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  BOOL v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  char *v272;
  int64_t v273;
  unint64_t v274;
  char *v275;
  _QWORD *v276;
  void *v277;
  unint64_t v278;
  uint64_t v279;
  __int128 v280;
  _QWORD *v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  _BYTE *v285;
  unint64_t *v286;
  unint64_t v287;
  char *v288;
  unint64_t v289;
  uint64_t v290;
  _OWORD *v291;
  char *v292;
  uint64_t v293;
  __int128 v294;
  char *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  NSObject *v305;
  unint64_t v306;
  unint64_t v307;
  unsigned int v308;
  size_t v309;
  unint64_t *v310;
  _QWORD *v311;
  _QWORD *v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t *v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  BOOL v344;
  unint64_t *v345;
  unint64_t v346;
  BOOL v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  BOOL v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t *v416;
  unint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t *v421;
  void *v422;
  unint64_t v423;
  uint64_t v424;
  __int128 v425;
  _QWORD *v426;
  _QWORD *v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t v430;
  _BYTE *v431;
  unint64_t *v432;
  unint64_t v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  _OWORD *v437;
  unint64_t *v438;
  uint64_t v439;
  __int128 v440;
  unint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  std::__shared_weak_count *v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t *v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  NSObject *v452;
  unint64_t v453;
  unint64_t v454;
  unsigned int v455;
  size_t v456;
  unint64_t *v457;
  _QWORD *v458;
  _QWORD *v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t *v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t *v478;
  _QWORD *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  BOOL v491;
  unint64_t *v492;
  unint64_t v493;
  BOOL v494;
  unint64_t *v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  BOOL v502;
  unint64_t *v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v552;
  uint64_t v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  unint64_t *v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  unint64_t *v563;
  unint64_t *v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unint64_t *v568;
  void *v569;
  unint64_t v570;
  uint64_t v571;
  __int128 v572;
  _QWORD *v573;
  _QWORD *v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  _BYTE *v578;
  unint64_t *v579;
  unint64_t v580;
  unint64_t *v581;
  unint64_t v582;
  uint64_t v583;
  _OWORD *v584;
  unint64_t *v585;
  uint64_t v586;
  __int128 v587;
  unint64_t *v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  uint64_t v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  _BOOL4 v596;
  uint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t *v602;
  unint64_t v603;
  uint64_t v604;
  NSObject *v605;
  unint64_t v606;
  unint64_t v607;
  unsigned int v608;
  size_t v609;
  _QWORD *v610;
  _QWORD *v611;
  _QWORD *v612;
  uint64_t *v613;
  uint64_t *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  void **v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  NSObject *v622;
  unint64_t v623;
  unsigned int v624;
  unsigned int v625;
  unsigned int v626;
  unint64_t v627;
  size_t v628;
  _QWORD *v629;
  unsigned int v630;
  _QWORD *v631;
  _QWORD *v632;
  uint64_t *v633;
  uint64_t *v634;
  uint64_t v635;
  _QWORD *v636;
  uint64_t v637;
  void **v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  NSObject *v645;
  unint64_t v646;
  unint64_t v647;
  unsigned int v648;
  size_t v649;
  char *v650;
  _QWORD *v651;
  _QWORD *v652;
  unint64_t v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t v666;
  unint64_t v667;
  unsigned int v668;
  uint64_t v669;
  int v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  _QWORD *v675;
  _QWORD *v676;
  altitude::Tile ***v677;
  altitude::Tile ***v678;
  altitude::Tile **v679;
  unint64_t v680;
  unint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  unint64_t v702;
  unint64_t v703;
  unint64_t v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  unint64_t v708;
  _QWORD *v709;
  uint64_t v710;
  unint64_t v711;
  unint64_t v712;
  unint64_t v713;
  unint64_t v714;
  unint64_t v715;
  unint64_t v716;
  unint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  unint64_t v721;
  unint64_t *v722;
  _QWORD *v723;
  _QWORD *v724;
  unsigned int v725;
  uint64_t v726;
  altitude::GlobeCleanupLoader *v727;
  uint64_t task_info_out;
  _BYTE v729[24];
  void *__p;
  __int128 v731;
  unint64_t v732;
  uint8_t buf[16];
  mach_msg_type_number_t task_info_outCnt[4];
  uint64_t v735;

  if (*(_BYTE *)(*((_QWORD *)this + 6) + 204))
    return;
  v2 = this;
  if (!*((_BYTE *)this + 80))
    return;
  v726 = *(unsigned int *)(*((_QWORD *)this + 4) + 88);
  *((_BYTE *)this + 422) = 0;
  v4 = *((_DWORD *)this + 106);
  if (v4)
  {
    *((_DWORD *)this + 106) = v4 - 1;
    *((_DWORD *)this + 107) = 0;
    v5 = (char *)this + 420;
    if (!*((_BYTE *)this + 420))
      goto LABEL_11;
  }
  else
  {
    v5 = (char *)this + 420;
    if (!*((_BYTE *)this + 420))
    {
LABEL_11:
      v7 = 0;
      goto LABEL_12;
    }
    v6 = *((_DWORD *)this + 107) + 1;
    *((_DWORD *)this + 107) = v6;
    if (v6 >= 0xF0)
    {
      *((_QWORD *)this + 54) = (unint64_t)((double)*((unint64_t *)this + 54) * 1.03);
      *((_DWORD *)this + 107) = 0;
    }
  }
  v7 = *((_BYTE *)this + 421) == 0;
LABEL_12:
  task_info_outCnt[0] = 40;
  if (task_info(*MEMORY[0x1E0C83DA0], 0x12u, (task_info_t)&task_info_out, task_info_outCnt))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v8 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_ERROR, "Failed to get memory usage!", buf, 2u);
    }
  }
  v9 = (int32x4_t *)((char *)v2 + 360);
  v10 = *(_QWORD *)&v729[4];
  *((_QWORD *)v2 + 55) = *(_QWORD *)&v729[4];
  v11 = *((float *)v2 + 104);
  if (v11 <= 10.0)
  {
    v14 = *((_QWORD *)v2 + 54);
    if (v14)
      v15 = v7;
    else
      v15 = 1;
    if ((v15 & 1) != 0 || v10 <= v14)
    {
      v13 = v726;
      if (*v5)
      {
        v18 = v11 * 1.01;
        v19 = fminf(v18, 10.0);
        *((float *)v2 + 104) = v19;
        *v9 = vdupq_n_s32((float)(v19 * 150.0));
        *((_DWORD *)v2 + 94) = (float)(v19 * 2000.0);
        v20 = vcvtq_u32_f32(vmulq_n_f32((float32x4_t)xmmword_19FFB4E10, v19));
        *(uint32x4_t *)((char *)v2 + 392) = v20;
        v12 = v20.i32[0];
      }
      else
      {
        v12 = *((_DWORD *)v2 + 98);
      }
    }
    else
    {
      v16 = v11 * 0.99;
      *((float *)v2 + 104) = v16;
      *v9 = vdupq_n_s32((float)(v16 * 150.0));
      *((_DWORD *)v2 + 94) = (float)(v16 * 2000.0);
      v17 = vcvtq_u32_f32(vmulq_n_f32((float32x4_t)xmmword_19FFB4E10, v16));
      *(uint32x4_t *)((char *)v2 + 392) = v17;
      v12 = v17.i32[0];
      v13 = v726;
    }
  }
  else
  {
    *((_DWORD *)v2 + 104) = 1092616192;
    *v9 = vdupq_n_s32(0x5DCu);
    *((_DWORD *)v2 + 94) = 20000;
    *(_OWORD *)((char *)v2 + 392) = xmmword_19FFB4E20;
    v12 = 1048576000;
    v13 = v726;
  }
  *((_WORD *)v2 + 210) = 0;
  v21 = *((unsigned int *)v2 + 95);
  v727 = v2;
  v725 = a2;
  if (v21 > v12)
  {
    *((_BYTE *)v2 + 420) = 1;
    v22 = (v21 - v12) / (v21 / *((_QWORD *)v2 + 23));
    v23 = *((_DWORD *)v2 + 28);
    v24 = v22 + 1 < v23 ? v22 + 1 : v23;
    if ((_DWORD)v24)
    {
      v732 = v24;
      v25 = 8 * v24;
      *(_QWORD *)v729 = operator new(v25);
      *(_QWORD *)&v729[8] = *(_QWORD *)v729;
      *(_QWORD *)&v729[16] = *(_QWORD *)v729 + v25;
      __p = operator new(v25);
      *(_QWORD *)&v731 = __p;
      *((_QWORD *)&v731 + 1) = (char *)__p + v25;
      altitude::GlobeCleanupLoader::fillRemoveList<altitude::TileGeometryPriorityLess>((uint64_t)v2, (_QWORD *)v2 + 21, &task_info_out, a2, v13);
      v26 = *(uint64_t **)v729;
      v27 = *(uint64_t **)&v729[8];
      if (*(_QWORD *)v729 != *(_QWORD *)&v729[8])
      {
        while (1)
        {
          v28 = *v26;
          v29 = *(altitude::GlobeTileComponent **)(*v26 + 328);
          if (!v29)
          {
            v30 = operator new();
            *(_DWORD *)(v30 + 8) = 0;
            *(_QWORD *)(v30 + 40) = 0;
            *(_QWORD *)(v30 + 32) = 0;
            *(_QWORD *)(v30 + 16) = 0;
            *(_QWORD *)(v30 + 24) = v30 + 32;
            *(_OWORD *)(v30 + 48) = 0u;
            *(_OWORD *)(v30 + 64) = 0u;
            *(_OWORD *)(v30 + 80) = 0u;
            v31 = (void **)(v30 + 80);
            *(_QWORD *)v30 = &off_1E42C5580;
            *(_QWORD *)(v30 + 208) = 0;
            *(_QWORD *)(v30 + 216) = 0;
            *(_OWORD *)(v30 + 96) = 0u;
            *(_OWORD *)(v30 + 112) = 0u;
            *(_OWORD *)(v30 + 128) = 0u;
            *(_OWORD *)(v30 + 144) = 0u;
            *(_OWORD *)(v30 + 160) = 0u;
            *(_OWORD *)(v30 + 176) = 0u;
            *(_OWORD *)(v30 + 185) = 0u;
            *(_DWORD *)(v30 + 224) = -1;
            *(_QWORD *)(v30 + 232) = 0;
            *(_OWORD *)(v30 + 248) = 0u;
            *(_OWORD *)(v30 + 264) = 0u;
            *(_DWORD *)(v30 + 279) = 0;
            *(_QWORD *)(v30 + 288) = 0x3FF0000000000000;
            *(_DWORD *)(v30 + 296) = 0;
            *(_WORD *)(v30 + 300) = 0;
            altitude::Tile::createTileName(task_info_outCnt, (unsigned int *)(v28 + 392), (uint64_t *)(*(_QWORD *)(v28 + 288) + 40), (uint64_t *)(*(_QWORD *)(v28 + 288) + 136));
            if (*(char *)(v30 + 103) < 0)
              operator delete(*v31);
            *(_OWORD *)v31 = *(_OWORD *)task_info_outCnt;
            *(_QWORD *)(v30 + 96) = v735;
            *(_QWORD *)(v28 + 328) = v30;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
            v29 = *(altitude::GlobeTileComponent **)(v28 + 328);
          }
          if (!*((_QWORD *)v29 + 15))
            break;
          if (altitude::GlobeTileComponent::destroyGeometryElement(v29))
          {
            v32 = (std::__shared_weak_count *)*((_QWORD *)v29 + 14);
            *((_QWORD *)v29 + 13) = 0;
            *((_QWORD *)v29 + 14) = 0;
            if (v32)
            {
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldaxr(p_shared_owners);
              while (__stlxr(v34 - 1, p_shared_owners));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            *((_BYTE *)v727 + 421) = 1;
          }
          if (++v26 == v27)
            goto LABEL_52;
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v35 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(task_info_outCnt[0]) = 0;
          _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_ERROR, "Tile without geometry in loaded geometry list!", (uint8_t *)task_info_outCnt, 2u);
        }
      }
LABEL_52:
      if (__p)
        operator delete(__p);
      v13 = v726;
      if (*(_QWORD *)v729)
        operator delete(*(void **)v729);
      v2 = v727;
    }
  }
  v36 = *((unsigned int *)v2 + 96);
  v37 = *((_DWORD *)v2 + 99);
  if (v36 > v37)
  {
    *((_BYTE *)v2 + 420) = 1;
    v38 = (v36 - v37) / (v36 / *((_QWORD *)v2 + 26));
    v39 = *((_DWORD *)v2 + 29);
    v40 = v38 + 1 < v39 ? v38 + 1 : v39;
    if ((_DWORD)v40)
    {
      v732 = v40;
      v41 = 8 * v40;
      *(_QWORD *)v729 = operator new(v41);
      *(_QWORD *)&v729[8] = *(_QWORD *)v729;
      *(_QWORD *)&v729[16] = *(_QWORD *)v729 + v41;
      __p = operator new(v41);
      *(_QWORD *)&v731 = __p;
      *((_QWORD *)&v731 + 1) = (char *)__p + v41;
      altitude::GlobeCleanupLoader::fillRemoveList<altitude::TileGeometryPriorityLess>((uint64_t)v2, (_QWORD *)v2 + 24, &task_info_out, a2, v13);
      v42 = *(uint64_t **)v729;
      v43 = *(uint64_t **)&v729[8];
      if (*(_QWORD *)v729 != *(_QWORD *)&v729[8])
      {
        while (1)
        {
          v45 = *v42;
          v46 = *(altitude::GlobeTileComponent **)(*v42 + 328);
          if (!v46)
          {
            v47 = operator new();
            *(_DWORD *)(v47 + 8) = 0;
            *(_QWORD *)(v47 + 40) = 0;
            *(_QWORD *)(v47 + 32) = 0;
            *(_QWORD *)(v47 + 16) = 0;
            *(_QWORD *)(v47 + 24) = v47 + 32;
            *(_OWORD *)(v47 + 48) = 0u;
            *(_OWORD *)(v47 + 64) = 0u;
            *(_OWORD *)(v47 + 80) = 0u;
            v48 = (void **)(v47 + 80);
            *(_QWORD *)v47 = &off_1E42C5580;
            *(_QWORD *)(v47 + 208) = 0;
            *(_QWORD *)(v47 + 216) = 0;
            *(_OWORD *)(v47 + 96) = 0u;
            *(_OWORD *)(v47 + 112) = 0u;
            *(_OWORD *)(v47 + 128) = 0u;
            *(_OWORD *)(v47 + 144) = 0u;
            *(_OWORD *)(v47 + 160) = 0u;
            *(_OWORD *)(v47 + 176) = 0u;
            *(_OWORD *)(v47 + 185) = 0u;
            *(_DWORD *)(v47 + 224) = -1;
            *(_QWORD *)(v47 + 232) = 0;
            *(_OWORD *)(v47 + 248) = 0u;
            *(_OWORD *)(v47 + 264) = 0u;
            *(_DWORD *)(v47 + 279) = 0;
            *(_QWORD *)(v47 + 288) = 0x3FF0000000000000;
            *(_DWORD *)(v47 + 296) = 0;
            *(_WORD *)(v47 + 300) = 0;
            altitude::Tile::createTileName(task_info_outCnt, (unsigned int *)(v45 + 392), (uint64_t *)(*(_QWORD *)(v45 + 288) + 40), (uint64_t *)(*(_QWORD *)(v45 + 288) + 136));
            if (*(char *)(v47 + 103) < 0)
              operator delete(*v48);
            *(_OWORD *)v48 = *(_OWORD *)task_info_outCnt;
            *(_QWORD *)(v47 + 96) = v735;
            *(_QWORD *)(v45 + 328) = v47;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
            v46 = *(altitude::GlobeTileComponent **)(v45 + 328);
          }
          if (*((_QWORD *)v46 + 19) == *((_QWORD *)v46 + 20))
            break;
          memset(task_info_outCnt, 0, sizeof(task_info_outCnt));
          v735 = 0;
          altitude::GlobeTileComponent::setHiresTextures(v46, (uint64_t **)task_info_outCnt);
          v49 = *(_QWORD *)task_info_outCnt;
          if (*(_QWORD *)task_info_outCnt)
          {
            v50 = *(_QWORD *)&task_info_outCnt[2];
            if (*(_QWORD *)&task_info_outCnt[2] == *(_QWORD *)task_info_outCnt)
            {
              *(_QWORD *)&task_info_outCnt[2] = *(_QWORD *)task_info_outCnt;
              v44 = *(void **)task_info_outCnt;
            }
            else
            {
              do
              {
                v51 = *(std::__shared_weak_count **)(v50 - 8);
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v50 -= 16;
              }
              while (v50 != v49);
              v44 = *(void **)task_info_outCnt;
              *(_QWORD *)&task_info_outCnt[2] = v49;
            }
            operator delete(v44);
          }
          *((_BYTE *)v727 + 421) = 1;
          if (++v42 == v43)
            goto LABEL_85;
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v54 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(task_info_outCnt[0]) = 0;
          _os_log_impl(&dword_19F029000, v54, OS_LOG_TYPE_ERROR, "Tile without hires textures in loaded hires textures list!", (uint8_t *)task_info_outCnt, 2u);
        }
      }
LABEL_85:
      if (__p)
        operator delete(__p);
      v13 = v726;
      v2 = v727;
      if (*(_QWORD *)v729)
        operator delete(*(void **)v729);
    }
  }
  v55 = (_QWORD *)*((_QWORD *)v2 + 27);
  v56 = (_QWORD *)((char *)v2 + 224);
  if (v55 == (_QWORD *)((char *)v2 + 224))
  {
    LODWORD(v57) = 0;
    v62 = 0;
  }
  else
  {
    v57 = 0;
    v58 = (_QWORD *)*((_QWORD *)v2 + 27);
    do
    {
      v59 = *(_QWORD *)(v58[4] + 360);
      if (v59)
        v57 += *(_QWORD *)(v59 + 152) + *(_QWORD *)(v59 + 160);
      v60 = (_QWORD *)v58[1];
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = (_QWORD *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v61 = (_QWORD *)v58[2];
          v266 = *v61 == (_QWORD)v58;
          v58 = v61;
        }
        while (!v266);
      }
      v58 = v61;
    }
    while (v61 != v56);
    v62 = 0;
    v63 = (_QWORD *)*((_QWORD *)v2 + 27);
    do
    {
      v64 = *(_QWORD *)(v63[4] + 360);
      if (v64)
      {
        v65 = *(_QWORD *)(v64 + 120);
        if (v65)
          LODWORD(v65) = 4 * *(_DWORD *)(v65 + 32) * *(_DWORD *)(v65 + 32);
        v66 = *(_QWORD *)(v64 + 136);
        if (v66)
          LODWORD(v66) = 4 * *(_DWORD *)(v66 + 32) * *(_DWORD *)(v66 + 32);
        v62 += v65 + v66;
      }
      v67 = (_QWORD *)v63[1];
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (_QWORD *)v63[2];
          v266 = *v68 == (_QWORD)v63;
          v63 = v68;
        }
        while (!v266);
      }
      v63 = v68;
    }
    while (v68 != v56);
  }
  v69 = (v57 + v62);
  v70 = v727;
  v71 = *((_DWORD *)v727 + 100);
  v72 = v69 >= v71;
  v73 = v69 - v71;
  if (v73 == 0 || !v72)
    goto LABEL_313;
  *((_BYTE *)v727 + 420) = 1;
  v74 = *((_QWORD *)v727 + 29);
  LODWORD(v75) = v74 ? v73 / (v69 / v74) + 1 : 0;
  v70 = v727;
  v76 = *((_DWORD *)v727 + 30);
  v75 = v75 >= v76 ? v76 : v75;
  if (!(_DWORD)v75)
    goto LABEL_313;
  v732 = v75;
  v77 = 8 * v75;
  v78 = (unint64_t *)operator new(v77);
  *(_QWORD *)v729 = v78;
  *(_QWORD *)&v729[8] = v78;
  *(_QWORD *)&v729[16] = &v78[v77 / 8];
  __p = operator new(v77);
  *(_QWORD *)&v731 = __p;
  *((_QWORD *)&v731 + 1) = (char *)__p + v77;
  if (v55 == v56)
    goto LABEL_296;
  v79 = a2;
  v710 = a2;
  while (2)
  {
    v80 = v55[4];
    if (*((_BYTE *)v727 + 408))
    {
      v81 = *(_QWORD *)(v80 + 368);
      v82 = *(_QWORD *)(v80 + 328);
      if (v82)
      {
        v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
        if (v81 <= v83)
          v81 = v83;
      }
      v84 = *(_QWORD *)(v80 + 336);
      if (v84)
      {
        v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 40))(v84);
        if (v81 <= v85)
          v81 = v85;
      }
      v86 = *(_QWORD *)(v80 + 344);
      if (v86)
      {
        v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 40))(v86);
        if (v81 <= v87)
          v81 = v87;
      }
      v88 = *(_QWORD *)(v80 + 352);
      if (v88)
      {
        v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 40))(v88);
        if (v81 <= v89)
          v81 = v89;
      }
      v90 = *(_QWORD *)(v80 + 360);
      if (v90)
      {
        v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
        if (v81 <= v91)
          v81 = v91;
      }
      v92 = v13 - v81;
      if (!*(_QWORD *)(v80 + 296))
      {
LABEL_265:
        v160 = (_QWORD *)v55[1];
        if (!v160)
          goto LABEL_288;
        goto LABEL_266;
      }
    }
    else
    {
      v92 = v79 - *(_QWORD *)(v80 + 376);
      if (!*(_QWORD *)(v80 + 296))
        goto LABEL_265;
    }
    v93 = *((unsigned int *)v727 + 34);
    if (v92 <= v93 || v79 - (unint64_t)*(unsigned int *)(v80 + 388) <= v93)
      goto LABEL_265;
    v94 = *(uint64_t **)v729;
    if (v78 == *(unint64_t **)v729)
    {
      v151 = v732;
      v156 = *(char **)v729;
      goto LABEL_251;
    }
    v722 = v78;
    v95 = ((uint64_t)v78 - *(_QWORD *)v729) >> 3;
    v96 = *(uint64_t **)v729;
    do
    {
      v97 = v95 >> 1;
      v98 = (unint64_t *)&v96[v95 >> 1];
      v99 = *v98;
      if (!(v80 | *v98))
        goto LABEL_152;
      if (v80 && !v99)
        goto LABEL_151;
      if (!v80 && v99)
        goto LABEL_152;
      v100 = *(_QWORD *)(v80 + 360);
      v101 = *(_QWORD *)(v99 + 360);
      if (v100)
      {
        if (!v101)
          goto LABEL_152;
        if (*(_QWORD *)(v100 + 88) || *(_QWORD *)(v100 + 104))
        {
LABEL_165:
          if (!*(_QWORD *)(v101 + 88) && !*(_QWORD *)(v101 + 104))
            goto LABEL_152;
        }
      }
      else
      {
        if (v101)
          goto LABEL_151;
        if (MEMORY[0x58] || MEMORY[0x68])
          goto LABEL_165;
      }
      if (!*(_QWORD *)(v100 + 88) && !*(_QWORD *)(v100 + 104) && (*(_QWORD *)(v101 + 88) || *(_QWORD *)(v101 + 104)))
        goto LABEL_151;
      v102 = *(_QWORD *)(v80 + 376);
      v103 = *(_QWORD *)(v99 + 376);
      if (v102 > v103)
        goto LABEL_151;
      if (v102 >= v103)
      {
        v104 = *(_DWORD *)(v80 + 384);
        v105 = *(_DWORD *)(v99 + 384);
        if (v104 > v105)
          goto LABEL_151;
        if (v104 >= v105)
        {
          v106 = *(_QWORD *)(v80 + 368);
          v107 = *(_QWORD *)(v80 + 328);
          if (v107)
          {
            v697 = *(_QWORD *)(v80 + 368);
            v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 40))(v107);
            v106 = v697;
            if (v697 <= v108)
              v106 = v108;
          }
          v109 = *(_QWORD *)(v80 + 336);
          if (v109)
          {
            v698 = v106;
            v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 40))(v109);
            v106 = v698;
            if (v698 <= v110)
              v106 = v110;
          }
          v111 = *(_QWORD *)(v80 + 344);
          if (v111)
          {
            v699 = v106;
            v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 40))(v111);
            v106 = v699;
            if (v699 <= v112)
              v106 = v112;
          }
          v113 = *(_QWORD *)(v80 + 352);
          if (v113)
          {
            v700 = v106;
            v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 40))(v113);
            v106 = v700;
            if (v700 <= v114)
              v106 = v114;
          }
          v115 = *(_QWORD *)(v80 + 360);
          if (v115)
          {
            v701 = v106;
            v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
            v106 = v701;
            if (v701 <= v116)
              v106 = v116;
          }
          v702 = v106;
          v117 = *(_QWORD *)(v99 + 368);
          v118 = *(_QWORD *)(v99 + 328);
          if (v118)
          {
            v680 = *(_QWORD *)(v99 + 368);
            v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 40))(v118);
            v117 = v680;
            if (v680 <= v119)
              v117 = v119;
          }
          v120 = *(_QWORD *)(v99 + 336);
          if (v120)
          {
            v681 = v117;
            v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 40))(v120);
            v117 = v681;
            if (v681 <= v121)
              v117 = v121;
          }
          v122 = *(_QWORD *)(v99 + 344);
          if (v122)
          {
            v682 = v117;
            v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 40))(v122);
            v117 = v682;
            if (v682 <= v123)
              v117 = v123;
          }
          v124 = *(_QWORD *)(v99 + 352);
          if (v124)
          {
            v683 = v117;
            v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
            v117 = v683;
            if (v683 <= v125)
              v117 = v125;
          }
          v126 = *(_QWORD *)(v99 + 360);
          if (v126)
          {
            v684 = v117;
            v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 40))(v126);
            v117 = v684;
            if (v684 <= v127)
              v117 = v127;
          }
          if (v702 > v117)
          {
LABEL_151:
            v96 = (uint64_t *)(v98 + 1);
            v97 = v95 + ~v97;
            goto LABEL_152;
          }
          v128 = *(_QWORD *)(v80 + 368);
          v129 = *(_QWORD *)(v80 + 328);
          if (v129)
          {
            v703 = *(_QWORD *)(v80 + 368);
            v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 40))(v129);
            v128 = v703;
            if (v703 <= v130)
              v128 = v130;
          }
          v131 = *(_QWORD *)(v80 + 336);
          if (v131)
          {
            v704 = v128;
            v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 40))(v131);
            v128 = v704;
            if (v704 <= v132)
              v128 = v132;
          }
          v133 = *(_QWORD *)(v80 + 344);
          if (v133)
          {
            v705 = v128;
            v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
            v128 = v705;
            if (v705 <= v134)
              v128 = v134;
          }
          v135 = *(_QWORD *)(v80 + 352);
          if (v135)
          {
            v706 = v128;
            v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 40))(v135);
            v128 = v706;
            if (v706 <= v136)
              v128 = v136;
          }
          v137 = *(_QWORD *)(v80 + 360);
          if (v137)
          {
            v707 = v128;
            v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 40))(v137);
            v128 = v707;
            if (v707 <= v138)
              v128 = v138;
          }
          v708 = v128;
          v139 = *(_QWORD *)(v99 + 368);
          v140 = *(_QWORD *)(v99 + 328);
          if (v140)
          {
            v685 = *(_QWORD *)(v99 + 368);
            v141 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 40))(v140);
            v139 = v685;
            if (v685 <= v141)
              v139 = v141;
          }
          v142 = *(_QWORD *)(v99 + 336);
          if (v142)
          {
            v686 = v139;
            v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 40))(v142);
            v139 = v686;
            if (v686 <= v143)
              v139 = v143;
          }
          v144 = *(_QWORD *)(v99 + 344);
          if (v144)
          {
            v687 = v139;
            v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 40))(v144);
            v139 = v687;
            if (v687 <= v145)
              v139 = v145;
          }
          v146 = *(_QWORD *)(v99 + 352);
          if (v146)
          {
            v688 = v139;
            v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 40))(v146);
            v139 = v688;
            if (v688 <= v147)
              v139 = v147;
          }
          v148 = *(_QWORD *)(v99 + 360);
          if (v148)
          {
            v689 = v139;
            v149 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 40))(v148);
            v139 = v689;
            if (v689 <= v149)
              v139 = v149;
          }
          if (v708 >= v139 && v80 > v99)
          {
            v97 = v95 + ~v97;
            v96 = (uint64_t *)(v98 + 1);
          }
        }
      }
LABEL_152:
      v95 = v97;
    }
    while (v97);
    v151 = v732;
    v78 = v722;
    if (v96 != (uint64_t *)v722)
    {
      v152 = ((char *)v722 - (char *)v94) >> 3;
      if (v732 >= v152 + 1)
        v153 = v152 + 1;
      else
        v153 = v732;
      v154 = (unint64_t *)__p;
      v78 = (unint64_t *)v731;
      v155 = (uint64_t)(v731 - (_QWORD)__p) >> 3;
      a2 = v725;
      v13 = v726;
      if (v153 <= v155)
      {
        if (v153 < v155)
        {
          v78 = (unint64_t *)((char *)__p + 8 * v153);
          *(_QWORD *)&v731 = v78;
        }
      }
      else
      {
        std::vector<altitude::TextureMap *>::__append((uint64_t)&__p, v153 - v155);
        v94 = *(uint64_t **)v729;
        v154 = (unint64_t *)__p;
        v78 = (unint64_t *)v731;
      }
      if (v154 == v78)
      {
        v161 = v78;
      }
      else
      {
        do
        {
          if (v94 == v96)
          {
            *v154++ = v80;
            if (v154 == (unint64_t *)v731)
              break;
          }
          v162 = *v94++;
          *v154++ = v162;
        }
        while (v154 != (unint64_t *)v731);
        v161 = __p;
        v94 = *(uint64_t **)v729;
        v78 = v154;
      }
      v163 = *((_QWORD *)&v731 + 1);
      v164 = *(_OWORD *)&v729[8];
      *(_QWORD *)v729 = v161;
      *(_QWORD *)&v729[8] = v78;
      v731 = v164;
      *(_QWORD *)&v729[16] = v163;
      __p = v94;
      goto LABEL_265;
    }
    v156 = (char *)v722;
    a2 = v725;
    v13 = v726;
LABEL_251:
    v157 = v156 - (char *)v94;
    v158 = (v156 - (char *)v94) >> 3;
    if (v158 >= v151)
    {
      v79 = v710;
      v160 = (_QWORD *)v55[1];
      if (!v160)
        goto LABEL_288;
      do
      {
LABEL_266:
        v165 = v160;
        v160 = (_QWORD *)*v160;
      }
      while (v160);
      goto LABEL_126;
    }
    if ((unint64_t)v78 < *(_QWORD *)&v729[16])
    {
      *v78 = v80;
      v159 = v78 + 1;
      v79 = v710;
      goto LABEL_287;
    }
    v166 = v158 + 1;
    if ((v158 + 1) >> 61)
      goto LABEL_1124;
    v167 = *(_QWORD *)&v729[16] - (_QWORD)v94;
    if ((uint64_t)(*(_QWORD *)&v729[16] - (_QWORD)v94) >> 2 > v166)
      v166 = v167 >> 2;
    if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
      v168 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v168 = v166;
    if (v168)
    {
      if (v168 >> 61)
        goto LABEL_1125;
      v169 = operator new(8 * v168);
    }
    else
    {
      v169 = 0;
    }
    v170 = (unint64_t *)&v169[8 * v158];
    *v170 = v80;
    v159 = v170 + 1;
    if (v78 == (unint64_t *)v94)
    {
      v79 = v710;
    }
    else
    {
      v171 = (char *)v78 - (char *)v94 - 8;
      if (v171 >= 0x58 && (unint64_t)((char *)v78 - v169 - v157) >= 0x20)
      {
        v174 = (v171 >> 3) + 1;
        v172 = (uint64_t *)&v78[-(v174 & 0x3FFFFFFFFFFFFFFCLL)];
        v175 = &v169[8 * v158 - 16];
        v176 = (__int128 *)(v78 - 2);
        v177 = v174 & 0x3FFFFFFFFFFFFFFCLL;
        v79 = v710;
        do
        {
          v178 = *v176;
          *(v175 - 1) = *(v176 - 1);
          *v175 = v178;
          v175 -= 2;
          v176 -= 2;
          v177 -= 4;
        }
        while (v177);
        v170 -= v174 & 0x3FFFFFFFFFFFFFFCLL;
        if (v174 != (v174 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_282;
      }
      else
      {
        v172 = (uint64_t *)v78;
        v79 = v710;
        do
        {
LABEL_282:
          v173 = *--v172;
          *--v170 = v173;
        }
        while (v172 != v94);
        v94 = *(uint64_t **)v729;
      }
    }
    *(_QWORD *)v729 = v170;
    *(_QWORD *)&v729[8] = v159;
    *(_QWORD *)&v729[16] = &v169[8 * v168];
    if (v94)
      operator delete(v94);
LABEL_287:
    *(_QWORD *)&v729[8] = v159;
    v78 = v159;
    v13 = v726;
    v160 = (_QWORD *)v55[1];
    if (v160)
      goto LABEL_266;
    do
    {
LABEL_288:
      v165 = (_QWORD *)v55[2];
      v266 = *v165 == (_QWORD)v55;
      v55 = v165;
    }
    while (!v266);
LABEL_126:
    v55 = v165;
    if (v165 != v56)
      continue;
    break;
  }
  v78 = *(unint64_t **)v729;
LABEL_296:
  v179 = *(uint64_t **)&v729[8];
  if (v78 != *(unint64_t **)&v729[8])
  {
    for (i = (uint64_t *)v78; i != v179; ++i)
    {
      v181 = *i;
      v182 = *(altitude::OverlayTileComponent **)(*i + 360);
      if (v182)
      {
        if (*((_QWORD *)v182 + 11))
          goto LABEL_306;
      }
      else
      {
        v183 = operator new();
        *(_DWORD *)(v183 + 8) = 4;
        *(_QWORD *)(v183 + 40) = 0;
        *(_QWORD *)(v183 + 32) = 0;
        *(_QWORD *)(v183 + 16) = 0;
        *(_QWORD *)(v183 + 24) = v183 + 32;
        *(_OWORD *)(v183 + 48) = 0u;
        *(_OWORD *)(v183 + 64) = 0u;
        *(_QWORD *)v183 = &off_1E42C5950;
        *(_BYTE *)(v183 + 80) = 1;
        *(_OWORD *)(v183 + 84) = 0u;
        *(_OWORD *)(v183 + 100) = 0u;
        *(_OWORD *)(v183 + 116) = 0u;
        *(_OWORD *)(v183 + 132) = 0u;
        *(_OWORD *)(v183 + 148) = 0u;
        *(_QWORD *)(v183 + 162) = 0;
        *(_QWORD *)(v181 + 360) = v183;
        altitude::TileComponent::onAttach(v183, v181);
        v182 = *(altitude::OverlayTileComponent **)(v181 + 360);
        if (*((_QWORD *)v182 + 11))
          goto LABEL_306;
      }
      if (*((_QWORD *)v182 + 13) || *((_QWORD *)v182 + 15) || *((_QWORD *)v182 + 17))
      {
LABEL_306:
        if (altitude::OverlayTileComponent::destroyOverlayElementsAndData(v182))
          *((_BYTE *)v727 + 421) = 1;
      }
    }
  }
  if (__p)
    operator delete(__p);
  v13 = v726;
  if (v78)
    operator delete(v78);
  v70 = v727;
LABEL_313:
  v184 = *((_QWORD *)v70 + 32);
  v185 = *((unsigned int *)v70 + 90);
  v186 = v70;
  if (v184 <= v185)
    goto LABEL_512;
  *((_BYTE *)v70 + 420) = 1;
  LODWORD(v184) = 2 * (v184 - v185);
  v187 = *((_DWORD *)v70 + 28);
  v184 = v184 >= v187 ? v187 : v184;
  if (!(_DWORD)v184)
    goto LABEL_512;
  v732 = v184;
  v188 = 8 * v184;
  v189 = (char *)operator new(v188);
  *(_QWORD *)v729 = v189;
  *(_QWORD *)&v729[8] = v189;
  *(_QWORD *)&v729[16] = &v189[v188];
  __p = operator new(v188);
  *(_QWORD *)&v731 = __p;
  *((_QWORD *)&v731 + 1) = (char *)__p + v188;
  v190 = (_QWORD *)*((_QWORD *)v186 + 30);
  v191 = (_QWORD *)((char *)v186 + 248);
  if (v190 != (_QWORD *)((char *)v186 + 248))
  {
    v192 = v725;
    v709 = (_QWORD *)((char *)v186 + 248);
    while (1)
    {
      v193 = v190[4];
      if (*((_BYTE *)v186 + 408))
      {
        v194 = *(_QWORD *)(v193 + 368);
        v195 = *(_QWORD *)(v193 + 328);
        if (v195)
        {
          v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 40))(v195);
          if (v194 <= v196)
            v194 = v196;
        }
        v197 = *(_QWORD *)(v193 + 336);
        if (v197)
        {
          v198 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 40))(v197);
          if (v194 <= v198)
            v194 = v198;
        }
        v199 = *(_QWORD *)(v193 + 344);
        if (v199)
        {
          v200 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v199 + 40))(v199);
          if (v194 <= v200)
            v194 = v200;
        }
        v201 = *(_QWORD *)(v193 + 352);
        if (v201)
        {
          v202 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 40))(v201);
          if (v194 <= v202)
            v194 = v202;
        }
        v203 = *(_QWORD *)(v193 + 360);
        if (v203)
        {
          v204 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 40))(v203);
          if (v194 <= v204)
            v194 = v204;
        }
        v205 = v13 - v194;
        if (!*(_QWORD *)(v193 + 296))
          goto LABEL_456;
      }
      else
      {
        v205 = v192 - *(_QWORD *)(v193 + 376);
        if (!*(_QWORD *)(v193 + 296))
          goto LABEL_456;
      }
      v206 = *((unsigned int *)v186 + 34);
      if (v205 <= v206 || v192 - (unint64_t)*(unsigned int *)(v193 + 388) <= v206)
        goto LABEL_456;
      v207 = *(char **)v729;
      if (v189 == *(char **)v729)
      {
        v267 = v732;
        v272 = *(char **)v729;
        goto LABEL_442;
      }
      v208 = (uint64_t)&v189[-*(_QWORD *)v729] >> 3;
      v209 = *(char **)v729;
      do
      {
        v210 = v208 >> 1;
        v211 = &v209[8 * (v208 >> 1)];
        v212 = *(_QWORD **)v211;
        if (v193 | *(_QWORD *)v211)
        {
          if (v193 && !v212)
            goto LABEL_345;
          if (v193 || !v212)
          {
            v213 = *(_QWORD **)(v193 + 336);
            v214 = v212[42];
            if (v213 && v214)
            {
              v215 = *(_QWORD *)(v214 + 88);
              if (v213[11])
              {
                if (!v215)
                  goto LABEL_346;
              }
              else if (v215)
              {
                goto LABEL_345;
              }
              v216 = *(_QWORD *)(v193 + 376);
              v217 = v212[47];
              if (v216 > v217)
                goto LABEL_345;
              if (v216 >= v217)
              {
                v218 = *(_QWORD *)(v193 + 368);
                v219 = *(_QWORD *)(v193 + 328);
                if (!v219)
                  goto LABEL_362;
                v690 = *(_QWORD *)(v193 + 368);
                v220 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 40))(v219);
                v218 = v690;
                if (v690 <= v220)
                  v218 = v220;
                v213 = *(_QWORD **)(v193 + 336);
                if (v213)
                {
LABEL_362:
                  v221 = v218;
                  v222 = (*(uint64_t (**)(_QWORD *))(*v213 + 40))(v213);
                  if (v221 <= v222)
                    v218 = v222;
                  else
                    v218 = v221;
                }
                v223 = *(_QWORD *)(v193 + 344);
                if (v223)
                {
                  v224 = v218;
                  v225 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 40))(v223);
                  if (v224 <= v225)
                    v218 = v225;
                  else
                    v218 = v224;
                }
                v226 = *(_QWORD *)(v193 + 352);
                if (v226)
                {
                  v227 = v218;
                  v228 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 40))(v226);
                  if (v227 <= v228)
                    v218 = v228;
                  else
                    v218 = v227;
                }
                v229 = *(_QWORD *)(v193 + 360);
                if (v229)
                {
                  v230 = v218;
                  v231 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v229 + 40))(v229);
                  if (v230 <= v231)
                    v218 = v231;
                  else
                    v218 = v230;
                }
                v191 = v709;
                v691 = v218;
                v232 = v212[46];
                v233 = v212[41];
                if (v233)
                {
                  v711 = v212[46];
                  v234 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v233 + 40))(v233);
                  v232 = v711;
                  if (v711 <= v234)
                    v232 = v234;
                }
                v235 = v212[42];
                if (v235)
                {
                  v712 = v232;
                  v236 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 40))(v235);
                  v232 = v712;
                  if (v712 <= v236)
                    v232 = v236;
                }
                v237 = v212[43];
                if (v237)
                {
                  v713 = v232;
                  v238 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v237 + 40))(v237);
                  v232 = v713;
                  if (v713 <= v238)
                    v232 = v238;
                }
                v239 = v212[44];
                if (v239)
                {
                  v714 = v232;
                  v240 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 40))(v239);
                  v232 = v714;
                  if (v714 <= v240)
                    v232 = v240;
                }
                v241 = v212[45];
                if (v241)
                {
                  v715 = v232;
                  v242 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v241 + 40))(v241);
                  v232 = v715;
                  if (v715 <= v242)
                    v232 = v242;
                }
                if (v691 > v232)
                  goto LABEL_345;
                v243 = *(_QWORD *)(v193 + 368);
                v244 = *(_QWORD *)(v193 + 328);
                if (v244)
                {
                  v716 = *(_QWORD *)(v193 + 368);
                  v245 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v244 + 40))(v244);
                  v243 = v716;
                  if (v716 <= v245)
                    v243 = v245;
                }
                v246 = *(_QWORD *)(v193 + 336);
                if (v246)
                {
                  v717 = v243;
                  v247 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v246 + 40))(v246);
                  v243 = v717;
                  if (v717 <= v247)
                    v243 = v247;
                }
                v248 = *(_QWORD *)(v193 + 344);
                if (v248)
                {
                  v718 = v243;
                  v249 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v248 + 40))(v248);
                  v243 = v718;
                  if (v718 <= v249)
                    v243 = v249;
                }
                v250 = *(_QWORD *)(v193 + 352);
                if (v250)
                {
                  v719 = v243;
                  v251 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v250 + 40))(v250);
                  v243 = v719;
                  if (v719 <= v251)
                    v243 = v251;
                }
                v252 = *(_QWORD *)(v193 + 360);
                if (v252)
                {
                  v720 = v243;
                  v253 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v252 + 40))(v252);
                  v243 = v720;
                  if (v720 <= v253)
                    v243 = v253;
                }
                v721 = v243;
                v254 = v212[46];
                v255 = v212[41];
                if (v255)
                {
                  v692 = v212[46];
                  v256 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
                  v254 = v692;
                  if (v692 <= v256)
                    v254 = v256;
                }
                v257 = v212[42];
                if (v257)
                {
                  v693 = v254;
                  v258 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v257 + 40))(v257);
                  v254 = v693;
                  if (v693 <= v258)
                    v254 = v258;
                }
                v259 = v212[43];
                if (v259)
                {
                  v694 = v254;
                  v260 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v259 + 40))(v259);
                  v254 = v694;
                  if (v694 <= v260)
                    v254 = v260;
                }
                v261 = v212[44];
                if (v261)
                {
                  v695 = v254;
                  v262 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v261 + 40))(v261);
                  v254 = v695;
                  if (v695 <= v262)
                    v254 = v262;
                }
                v263 = v212[45];
                if (v263)
                {
                  v696 = v254;
                  v264 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v263 + 40))(v263);
                  v254 = v696;
                  if (v696 <= v264)
                    v254 = v264;
                }
                if (v721 >= v254 && v193 > (unint64_t)v212)
                {
LABEL_345:
                  v209 = v211 + 8;
                  v210 = v208 + ~v210;
                }
              }
            }
            else
            {
              if (v214)
                v266 = v213 == 0;
              else
                v266 = 0;
              if (v266)
                goto LABEL_345;
            }
          }
        }
LABEL_346:
        v208 = v210;
      }
      while (v210);
      v267 = v732;
      if (v209 == v189)
      {
        v272 = v189;
        v13 = v726;
        v186 = v727;
LABEL_442:
        v273 = v272 - v207;
        v274 = (v272 - v207) >> 3;
        if (v274 >= v267)
        {
          v191 = v709;
          v192 = v725;
          v276 = (_QWORD *)v190[1];
          if (v276)
            goto LABEL_457;
          goto LABEL_479;
        }
        if ((unint64_t)v189 < *(_QWORD *)&v729[16])
        {
          *(_QWORD *)v189 = v193;
          v275 = v189 + 8;
          v191 = v709;
          v192 = v725;
          goto LABEL_478;
        }
        v282 = v274 + 1;
        if ((v274 + 1) >> 61)
          goto LABEL_1124;
        v283 = *(_QWORD *)&v729[16] - (_QWORD)v207;
        if ((uint64_t)(*(_QWORD *)&v729[16] - (_QWORD)v207) >> 2 > v282)
          v282 = v283 >> 2;
        if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v282;
        if (v284)
        {
          if (v284 >> 61)
            goto LABEL_1125;
          v285 = operator new(8 * v284);
        }
        else
        {
          v285 = 0;
        }
        v286 = (unint64_t *)&v285[8 * v274];
        *v286 = v193;
        v275 = (char *)(v286 + 1);
        if (v189 == v207)
        {
          v191 = v709;
          v192 = v725;
        }
        else
        {
          v287 = v189 - v207 - 8;
          if (v287 >= 0x58 && (unint64_t)(v189 - v285 - v273) >= 0x20)
          {
            v290 = (v287 >> 3) + 1;
            v288 = &v189[-8 * (v290 & 0x3FFFFFFFFFFFFFFCLL)];
            v291 = &v285[8 * v274 - 16];
            v292 = v189 - 16;
            v293 = v290 & 0x3FFFFFFFFFFFFFFCLL;
            v191 = v709;
            do
            {
              v294 = *(_OWORD *)v292;
              *(v291 - 1) = *((_OWORD *)v292 - 1);
              *v291 = v294;
              v291 -= 2;
              v292 -= 32;
              v293 -= 4;
            }
            while (v293);
            v286 -= v290 & 0x3FFFFFFFFFFFFFFCLL;
            v192 = v725;
            if (v290 != (v290 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_473;
          }
          else
          {
            v288 = v189;
            v191 = v709;
            v192 = v725;
            do
            {
LABEL_473:
              v289 = *((_QWORD *)v288 - 1);
              v288 -= 8;
              *--v286 = v289;
            }
            while (v288 != v207);
            v207 = *(char **)v729;
          }
        }
        *(_QWORD *)v729 = v286;
        *(_QWORD *)&v729[8] = v275;
        *(_QWORD *)&v729[16] = &v285[8 * v284];
        if (v207)
          operator delete(v207);
LABEL_478:
        *(_QWORD *)&v729[8] = v275;
        v189 = v275;
        v13 = v726;
        v276 = (_QWORD *)v190[1];
        if (v276)
          goto LABEL_457;
        goto LABEL_479;
      }
      v268 = (v189 - v207) >> 3;
      if (v732 >= v268 + 1)
        v269 = v268 + 1;
      else
        v269 = v732;
      v270 = (unint64_t *)__p;
      v189 = (char *)v731;
      v271 = (uint64_t)(v731 - (_QWORD)__p) >> 3;
      v13 = v726;
      if (v269 <= v271)
      {
        v192 = v725;
        if (v269 < v271)
        {
          v189 = (char *)__p + 8 * v269;
          *(_QWORD *)&v731 = v189;
        }
        v186 = v727;
        if (__p != v189)
          goto LABEL_452;
LABEL_450:
        v277 = v189;
      }
      else
      {
        std::vector<altitude::TextureMap *>::__append((uint64_t)&__p, v269 - v271);
        v207 = *(char **)v729;
        v270 = (unint64_t *)__p;
        v189 = (char *)v731;
        v186 = v727;
        v192 = v725;
        if (__p == (void *)v731)
          goto LABEL_450;
        do
        {
LABEL_452:
          if (v207 == v209)
          {
            *v270++ = v193;
            if (v270 == (unint64_t *)v731)
              break;
          }
          v278 = *(_QWORD *)v207;
          v207 += 8;
          *v270++ = v278;
        }
        while (v270 != (unint64_t *)v731);
        v277 = __p;
        v207 = *(char **)v729;
        v189 = (char *)v270;
      }
      v279 = *((_QWORD *)&v731 + 1);
      v280 = *(_OWORD *)&v729[8];
      *(_QWORD *)v729 = v277;
      *(_QWORD *)&v729[8] = v189;
      v731 = v280;
      *(_QWORD *)&v729[16] = v279;
      __p = v207;
LABEL_456:
      v276 = (_QWORD *)v190[1];
      if (v276)
      {
        do
        {
LABEL_457:
          v281 = v276;
          v276 = (_QWORD *)*v276;
        }
        while (v276);
        goto LABEL_320;
      }
      do
      {
LABEL_479:
        v281 = (_QWORD *)v190[2];
        v266 = *v281 == (_QWORD)v190;
        v190 = v281;
      }
      while (!v266);
LABEL_320:
      v190 = v281;
      if (v281 == v191)
      {
        v189 = *(char **)v729;
        break;
      }
    }
  }
  v295 = *(char **)&v729[8];
  if (v189 == *(char **)&v729[8])
    goto LABEL_507;
  while (2)
  {
    v296 = *(_QWORD *)v189;
    v297 = *(_QWORD **)(*(_QWORD *)v189 + 336);
    if (v297)
    {
      if (!v297[11])
        goto LABEL_494;
      goto LABEL_501;
    }
    v298 = operator new();
    *(_DWORD *)(v298 + 8) = 1;
    *(_QWORD *)(v298 + 40) = 0;
    *(_QWORD *)(v298 + 32) = 0;
    *(_QWORD *)(v298 + 16) = 0;
    *(_QWORD *)(v298 + 24) = v298 + 32;
    *(_OWORD *)(v298 + 48) = 0u;
    *(_OWORD *)(v298 + 64) = 0u;
    *(_QWORD *)v298 = &off_1E42C50F0;
    *(_DWORD *)(v298 + 80) = 2;
    *(_OWORD *)(v298 + 88) = 0u;
    *(_OWORD *)(v298 + 104) = 0u;
    *(_WORD *)(v298 + 120) = 257;
    *(_BYTE *)(v298 + 122) = 1;
    *(_DWORD *)(v298 + 124) = -1082130432;
    *(_QWORD *)(v296 + 336) = v298;
    altitude::TileComponent::onAttach(v298, v296);
    v297 = *(_QWORD **)(v296 + 336);
    if (v297[11])
      goto LABEL_501;
LABEL_494:
    v299 = v297[13];
    v300 = (std::__shared_weak_count *)v297[14];
    if (v300)
    {
      v301 = (unint64_t *)&v300->__shared_owners_;
      do
        v302 = __ldxr(v301);
      while (__stxr(v302 + 1, v301));
      do
        v303 = __ldaxr(v301);
      while (__stlxr(v303 - 1, v301));
      if (!v303)
      {
        ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
        std::__shared_weak_count::__release_weak(v300);
      }
    }
    if (v299)
    {
LABEL_501:
      v304 = *(_QWORD *)(v296 + 336);
      if (v304)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v304 + 8))(v304);
        *(_QWORD *)(v296 + 336) = 0;
        *((_BYTE *)v727 + 421) = 1;
      }
      v189 += 8;
      if (v189 == v295)
        goto LABEL_507;
      continue;
    }
    break;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v305 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    LOWORD(task_info_outCnt[0]) = 0;
    _os_log_impl(&dword_19F029000, v305, OS_LOG_TYPE_ERROR, "Tile without road in loaded road list!", (uint8_t *)task_info_outCnt, 2u);
  }
LABEL_507:
  if (__p)
    operator delete(__p);
  v186 = v727;
  a2 = v725;
  if (*(_QWORD *)v729)
    operator delete(*(void **)v729);
  v13 = v726;
LABEL_512:
  v306 = *((_QWORD *)v186 + 35);
  v307 = *((unsigned int *)v186 + 91);
  if (v306 <= v307)
    goto LABEL_742;
  *((_BYTE *)v186 + 420) = 1;
  LODWORD(v306) = 2 * (v306 - v307);
  v308 = *((_DWORD *)v186 + 28);
  v306 = v306 >= v308 ? v308 : v306;
  if (!(_DWORD)v306)
    goto LABEL_742;
  v732 = v306;
  v309 = 8 * v306;
  v310 = (unint64_t *)operator new(v309);
  *(_QWORD *)v729 = v310;
  *(_QWORD *)&v729[8] = v310;
  *(_QWORD *)&v729[16] = &v310[v309 / 8];
  __p = operator new(v309);
  *(_QWORD *)&v731 = __p;
  *((_QWORD *)&v731 + 1) = (char *)__p + v309;
  v311 = (_QWORD *)*((_QWORD *)v186 + 33);
  v312 = (_QWORD *)((char *)v186 + 272);
  if (v311 != (_QWORD *)((char *)v186 + 272))
  {
    v313 = v725;
    v723 = (_QWORD *)((char *)v186 + 272);
    while (1)
    {
      v314 = v311[4];
      if (*((_BYTE *)v186 + 408))
      {
        v315 = *(_QWORD *)(v314 + 368);
        v316 = *(_QWORD *)(v314 + 328);
        if (v316)
        {
          v317 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v316 + 40))(v316);
          if (v315 <= v317)
            v315 = v317;
        }
        v318 = *(_QWORD *)(v314 + 336);
        if (v318)
        {
          v319 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v318 + 40))(v318);
          if (v315 <= v319)
            v315 = v319;
        }
        v320 = *(_QWORD *)(v314 + 344);
        if (v320)
        {
          v321 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v320 + 40))(v320);
          if (v315 <= v321)
            v315 = v321;
        }
        v322 = *(_QWORD *)(v314 + 352);
        if (v322)
        {
          v323 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v322 + 40))(v322);
          if (v315 <= v323)
            v315 = v323;
        }
        v324 = *(_QWORD *)(v314 + 360);
        if (v324)
        {
          v325 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v324 + 40))(v324);
          if (v315 <= v325)
            v315 = v325;
        }
        v326 = v13 - v315;
        if (!*(_QWORD *)(v314 + 296))
          goto LABEL_687;
      }
      else
      {
        v326 = v313 - *(_QWORD *)(v314 + 376);
        if (!*(_QWORD *)(v314 + 296))
          goto LABEL_687;
      }
      v327 = *((unsigned int *)v186 + 34);
      if (v326 <= v327 || v313 - (unint64_t)*(unsigned int *)(v314 + 388) <= v327)
        goto LABEL_687;
      v328 = *(unint64_t **)v729;
      if (v310 == *(unint64_t **)v729)
      {
        v412 = *(_QWORD *)v729;
        v413 = v732;
        v328 = v310;
        goto LABEL_673;
      }
      v329 = ((uint64_t)v310 - *(_QWORD *)v729) >> 3;
      do
      {
        v330 = v329 >> 1;
        v331 = &v328[v329 >> 1];
        v332 = (_QWORD *)*v331;
        if (!(v314 | *v331))
          goto LABEL_544;
        if (v314 && !v332)
          goto LABEL_543;
        if (!v314 && v332)
          goto LABEL_544;
        v333 = *(_QWORD *)(v314 + 344);
        v334 = v332[43];
        if (!v333 || !v334)
        {
          if (v334)
            v347 = v333 == 0;
          else
            v347 = 0;
          if (v347)
            goto LABEL_543;
          goto LABEL_544;
        }
        v335 = *(_QWORD *)(v333 + 88);
        v336 = *(std::__shared_weak_count **)(v333 + 96);
        if (v336)
        {
          v337 = (unint64_t *)&v336->__shared_owners_;
          do
            v338 = __ldxr(v337);
          while (__stxr(v338 + 1, v337));
        }
        if (!v335)
        {
          v344 = 0;
LABEL_571:
          if (!v336)
            goto LABEL_577;
          goto LABEL_572;
        }
        v339 = v332[43];
        v340 = *(_QWORD *)(v339 + 88);
        v341 = *(std::__shared_weak_count **)(v339 + 96);
        if (v341)
        {
          v342 = (unint64_t *)&v341->__shared_owners_;
          do
            v343 = __ldxr(v342);
          while (__stxr(v343 + 1, v342));
          v344 = v340 == 0;
          v345 = (unint64_t *)&v341->__shared_owners_;
          do
            v346 = __ldaxr(v345);
          while (__stlxr(v346 - 1, v345));
          if (v346)
            goto LABEL_571;
          ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
          std::__shared_weak_count::__release_weak(v341);
          if (!v336)
            goto LABEL_577;
        }
        else
        {
          v344 = v340 == 0;
          if (!v336)
            goto LABEL_577;
        }
LABEL_572:
        v348 = (unint64_t *)&v336->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
          std::__shared_weak_count::__release_weak(v336);
        }
LABEL_577:
        if (!v344)
        {
          v350 = *(_QWORD *)(v314 + 344);
          v351 = *(_QWORD *)(v350 + 88);
          v352 = *(std::__shared_weak_count **)(v350 + 96);
          if (v352)
          {
            v353 = (unint64_t *)&v352->__shared_owners_;
            do
              v354 = __ldxr(v353);
            while (__stxr(v354 + 1, v353));
          }
          if (v351)
          {
            v355 = 0;
          }
          else
          {
            v405 = v332[43];
            v406 = *(_QWORD *)(v405 + 88);
            v407 = *(std::__shared_weak_count **)(v405 + 96);
            if (v407)
            {
              v408 = (unint64_t *)&v407->__shared_owners_;
              do
                v409 = __ldxr(v408);
              while (__stxr(v409 + 1, v408));
              v355 = v406 != 0;
              v410 = (unint64_t *)&v407->__shared_owners_;
              do
                v411 = __ldaxr(v410);
              while (__stlxr(v411 - 1, v410));
              if (!v411)
              {
                ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                std::__shared_weak_count::__release_weak(v407);
              }
            }
            else
            {
              v355 = v406 != 0;
            }
          }
          if (v352)
          {
            v356 = (unint64_t *)&v352->__shared_owners_;
            do
              v357 = __ldaxr(v356);
            while (__stlxr(v357 - 1, v356));
            if (!v357)
            {
              ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
              std::__shared_weak_count::__release_weak(v352);
            }
          }
          if (v355)
            goto LABEL_543;
          v358 = *(_QWORD *)(v314 + 376);
          v359 = v332[47];
          if (v358 > v359)
            goto LABEL_543;
          if (v358 >= v359)
          {
            v360 = *(_QWORD *)(v314 + 368);
            v361 = *(_QWORD *)(v314 + 328);
            if (v361)
            {
              v362 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v361 + 40))(v361);
              if (v360 <= v362)
                v360 = v362;
            }
            v363 = *(_QWORD *)(v314 + 336);
            if (v363)
            {
              v364 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v363 + 40))(v363);
              if (v360 <= v364)
                v360 = v364;
            }
            v365 = *(_QWORD *)(v314 + 344);
            if (v365)
            {
              v366 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v365 + 40))(v365);
              if (v360 <= v366)
                v360 = v366;
            }
            v367 = *(_QWORD *)(v314 + 352);
            if (v367)
            {
              v368 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v367 + 40))(v367);
              if (v360 <= v368)
                v360 = v368;
            }
            v369 = *(_QWORD *)(v314 + 360);
            if (v369)
            {
              v370 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v369 + 40))(v369);
              if (v360 <= v370)
                v360 = v370;
            }
            v371 = v332[46];
            v372 = v332[41];
            if (v372)
            {
              v373 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v372 + 40))(v372);
              if (v371 <= v373)
                v371 = v373;
            }
            v374 = v332[42];
            if (v374)
            {
              v375 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v374 + 40))(v374);
              if (v371 <= v375)
                v371 = v375;
            }
            v376 = v332[43];
            if (v376)
            {
              v377 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v376 + 40))(v376);
              if (v371 <= v377)
                v371 = v377;
            }
            v378 = v332[44];
            if (v378)
            {
              v379 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v378 + 40))(v378);
              if (v371 <= v379)
                v371 = v379;
            }
            v380 = v332[45];
            if (v380)
            {
              v381 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v380 + 40))(v380);
              if (v371 <= v381)
                v371 = v381;
            }
            if (v360 > v371)
              goto LABEL_543;
            v382 = *(_QWORD *)(v314 + 368);
            v383 = *(_QWORD *)(v314 + 328);
            if (v383)
            {
              v384 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v383 + 40))(v383);
              if (v382 <= v384)
                v382 = v384;
            }
            v385 = *(_QWORD *)(v314 + 336);
            if (v385)
            {
              v386 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v385 + 40))(v385);
              if (v382 <= v386)
                v382 = v386;
            }
            v387 = *(_QWORD *)(v314 + 344);
            if (v387)
            {
              v388 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v387 + 40))(v387);
              if (v382 <= v388)
                v382 = v388;
            }
            v389 = *(_QWORD *)(v314 + 352);
            if (v389)
            {
              v390 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v389 + 40))(v389);
              if (v382 <= v390)
                v382 = v390;
            }
            v391 = *(_QWORD *)(v314 + 360);
            if (v391)
            {
              v392 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v391 + 40))(v391);
              if (v382 <= v392)
                v382 = v392;
            }
            v393 = v332[46];
            v394 = v332[41];
            if (v394)
            {
              v395 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v394 + 40))(v394);
              if (v393 <= v395)
                v393 = v395;
            }
            v396 = v332[42];
            if (v396)
            {
              v397 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v396 + 40))(v396);
              if (v393 <= v397)
                v393 = v397;
            }
            v398 = v332[43];
            if (v398)
            {
              v399 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v398 + 40))(v398);
              if (v393 <= v399)
                v393 = v399;
            }
            v400 = v332[44];
            if (v400)
            {
              v401 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v400 + 40))(v400);
              if (v393 <= v401)
                v393 = v401;
            }
            v402 = v332[45];
            if (v402)
            {
              v403 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v402 + 40))(v402);
              if (v393 <= v403)
                v393 = v403;
            }
            if (v382 >= v393 && v314 > (unint64_t)v332)
            {
LABEL_543:
              v328 = v331 + 1;
              v330 = v329 + ~v330;
            }
          }
        }
LABEL_544:
        v329 = v330;
      }
      while (v330);
      v412 = *(_QWORD *)&v729[8];
      v310 = *(unint64_t **)v729;
      v413 = v732;
      if (v328 == *(unint64_t **)&v729[8])
      {
        v13 = v726;
        v186 = v727;
LABEL_673:
        v419 = v412 - (_QWORD)v310;
        v420 = (v412 - (uint64_t)v310) >> 3;
        if (v420 >= v413)
        {
          v310 = v328;
          goto LABEL_686;
        }
        if ((unint64_t)v328 < *(_QWORD *)&v729[16])
        {
          *v328 = v314;
          v421 = v328 + 1;
          v313 = v725;
          v312 = v723;
          goto LABEL_709;
        }
        v428 = v420 + 1;
        if ((v420 + 1) >> 61)
          goto LABEL_1124;
        v429 = *(_QWORD *)&v729[16] - (_QWORD)v310;
        if ((uint64_t)(*(_QWORD *)&v729[16] - (_QWORD)v310) >> 2 > v428)
          v428 = v429 >> 2;
        if ((unint64_t)v429 >= 0x7FFFFFFFFFFFFFF8)
          v430 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v430 = v428;
        if (v430)
        {
          if (v430 >> 61)
            goto LABEL_1125;
          v431 = operator new(8 * v430);
        }
        else
        {
          v431 = 0;
        }
        v432 = (unint64_t *)&v431[8 * v420];
        *v432 = v314;
        v421 = v432 + 1;
        if (v328 == v310)
        {
          v313 = v725;
          v312 = v723;
        }
        else
        {
          v433 = (char *)v328 - (char *)v310 - 8;
          if (v433 >= 0x58 && (unint64_t)((char *)v328 - v431 - v419) >= 0x20)
          {
            v436 = (v433 >> 3) + 1;
            v434 = &v328[-(v436 & 0x3FFFFFFFFFFFFFFCLL)];
            v437 = &v431[8 * v420 - 16];
            v438 = v328 - 2;
            v439 = v436 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v440 = *(_OWORD *)v438;
              *(v437 - 1) = *((_OWORD *)v438 - 1);
              *v437 = v440;
              v437 -= 2;
              v438 -= 4;
              v439 -= 4;
            }
            while (v439);
            v432 -= v436 & 0x3FFFFFFFFFFFFFFCLL;
            v313 = v725;
            v312 = v723;
            if (v436 != (v436 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_704;
          }
          else
          {
            v434 = v328;
            v313 = v725;
            v312 = v723;
            do
            {
LABEL_704:
              v435 = *--v434;
              *--v432 = v435;
            }
            while (v434 != v310);
            v310 = *(unint64_t **)v729;
          }
        }
        *(_QWORD *)v729 = v432;
        *(_QWORD *)&v729[8] = v421;
        *(_QWORD *)&v729[16] = &v431[8 * v430];
        if (v310)
          operator delete(v310);
LABEL_709:
        *(_QWORD *)&v729[8] = v421;
        v310 = v421;
        v13 = v726;
        v426 = (_QWORD *)v311[1];
        if (v426)
          goto LABEL_688;
        goto LABEL_710;
      }
      v414 = (uint64_t)(*(_QWORD *)&v729[8] - *(_QWORD *)v729) >> 3;
      if (v732 >= v414 + 1)
        v415 = v414 + 1;
      else
        v415 = v732;
      v416 = (unint64_t *)__p;
      v417 = (unint64_t *)v731;
      v418 = (uint64_t)(v731 - (_QWORD)__p) >> 3;
      v13 = v726;
      if (v415 <= v418)
      {
        if (v415 < v418)
        {
          v417 = (unint64_t *)((char *)__p + 8 * v415);
          *(_QWORD *)&v731 = v417;
        }
      }
      else
      {
        std::vector<altitude::TextureMap *>::__append((uint64_t)&__p, v415 - v418);
        v310 = *(unint64_t **)v729;
        v416 = (unint64_t *)__p;
        v417 = (unint64_t *)v731;
      }
      v186 = v727;
      if (v416 == v417)
      {
        v422 = v417;
      }
      else
      {
        do
        {
          if (v310 == v328)
          {
            *v416++ = v314;
            if (v416 == (unint64_t *)v731)
              break;
          }
          v423 = *v310++;
          *v416++ = v423;
        }
        while (v416 != (unint64_t *)v731);
        v422 = __p;
        v310 = *(unint64_t **)v729;
        v417 = v416;
      }
      v424 = *((_QWORD *)&v731 + 1);
      v425 = *(_OWORD *)&v729[8];
      *(_QWORD *)v729 = v422;
      *(_QWORD *)&v729[8] = v417;
      v731 = v425;
      *(_QWORD *)&v729[16] = v424;
      __p = v310;
      v310 = v417;
LABEL_686:
      v313 = v725;
      v312 = v723;
LABEL_687:
      v426 = (_QWORD *)v311[1];
      if (v426)
      {
        do
        {
LABEL_688:
          v427 = v426;
          v426 = (_QWORD *)*v426;
        }
        while (v426);
        goto LABEL_519;
      }
      do
      {
LABEL_710:
        v427 = (_QWORD *)v311[2];
        v266 = *v427 == (_QWORD)v311;
        v311 = v427;
      }
      while (!v266);
LABEL_519:
      v311 = v427;
      if (v427 == v312)
      {
        v310 = *(unint64_t **)v729;
        break;
      }
    }
  }
  v441 = *(unint64_t **)&v729[8];
  if (v310 == *(unint64_t **)&v729[8])
    goto LABEL_737;
  while (2)
  {
    v442 = *v310;
    v443 = *(_QWORD *)(*v310 + 344);
    if (v443)
    {
      v444 = *(_QWORD *)(v443 + 88);
      v445 = *(std::__shared_weak_count **)(v443 + 96);
      if (!v445)
        goto LABEL_730;
    }
    else
    {
      v446 = operator new();
      *(_DWORD *)(v446 + 8) = 2;
      *(_QWORD *)(v446 + 40) = 0;
      *(_QWORD *)(v446 + 32) = 0;
      *(_QWORD *)(v446 + 16) = 0;
      *(_QWORD *)(v446 + 24) = v446 + 32;
      *(_OWORD *)(v446 + 48) = 0u;
      *(_OWORD *)(v446 + 64) = 0u;
      *(_QWORD *)v446 = &off_1E42C59E0;
      *(_WORD *)(v446 + 80) = 257;
      *(_QWORD *)(v446 + 88) = 0;
      *(_QWORD *)(v446 + 96) = 0;
      *(_QWORD *)(v442 + 344) = v446;
      altitude::TileComponent::onAttach(v446, v442);
      v447 = *(_QWORD *)(v442 + 344);
      v444 = *(_QWORD *)(v447 + 88);
      v445 = *(std::__shared_weak_count **)(v447 + 96);
      if (!v445)
        goto LABEL_730;
    }
    v448 = (unint64_t *)&v445->__shared_owners_;
    do
      v449 = __ldxr(v448);
    while (__stxr(v449 + 1, v448));
    do
      v450 = __ldaxr(v448);
    while (__stlxr(v450 - 1, v448));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
      std::__shared_weak_count::__release_weak(v445);
    }
LABEL_730:
    if (v444)
    {
      v451 = *(_QWORD *)(v442 + 344);
      if (v451)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
        *(_QWORD *)(v442 + 344) = 0;
        *((_BYTE *)v727 + 421) = 1;
      }
      if (++v310 == v441)
        goto LABEL_737;
      continue;
    }
    break;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v452 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    LOWORD(task_info_outCnt[0]) = 0;
    _os_log_impl(&dword_19F029000, v452, OS_LOG_TYPE_ERROR, "Tile without traffic in loaded road list!", (uint8_t *)task_info_outCnt, 2u);
  }
LABEL_737:
  if (__p)
    operator delete(__p);
  v186 = v727;
  a2 = v725;
  if (*(_QWORD *)v729)
    operator delete(*(void **)v729);
  v13 = v726;
LABEL_742:
  v453 = *((_QWORD *)v186 + 38);
  v454 = *((unsigned int *)v186 + 92);
  if (v453 <= v454)
    goto LABEL_981;
  *((_BYTE *)v186 + 420) = 1;
  LODWORD(v453) = 2 * (v453 - v454);
  v455 = *((_DWORD *)v186 + 28);
  v453 = v453 >= v455 ? v455 : v453;
  if (!(_DWORD)v453)
    goto LABEL_981;
  v732 = v453;
  v456 = 8 * v453;
  v457 = (unint64_t *)operator new(v456);
  *(_QWORD *)v729 = v457;
  *(_QWORD *)&v729[8] = v457;
  *(_QWORD *)&v729[16] = &v457[v456 / 8];
  __p = operator new(v456);
  *(_QWORD *)&v731 = __p;
  *((_QWORD *)&v731 + 1) = (char *)__p + v456;
  v458 = (_QWORD *)*((_QWORD *)v186 + 36);
  v459 = (_QWORD *)((char *)v186 + 296);
  if (v458 != (_QWORD *)((char *)v186 + 296))
  {
    v460 = v725;
    v724 = (_QWORD *)((char *)v186 + 296);
    while (1)
    {
      v461 = v458[4];
      if (*((_BYTE *)v186 + 408))
      {
        v462 = *(_QWORD *)(v461 + 368);
        v463 = *(_QWORD *)(v461 + 328);
        if (v463)
        {
          v464 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v463 + 40))(v463);
          if (v462 <= v464)
            v462 = v464;
        }
        v465 = *(_QWORD *)(v461 + 336);
        if (v465)
        {
          v466 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v465 + 40))(v465);
          if (v462 <= v466)
            v462 = v466;
        }
        v467 = *(_QWORD *)(v461 + 344);
        if (v467)
        {
          v468 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v467 + 40))(v467);
          if (v462 <= v468)
            v462 = v468;
        }
        v469 = *(_QWORD *)(v461 + 352);
        if (v469)
        {
          v470 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v469 + 40))(v469);
          if (v462 <= v470)
            v462 = v470;
        }
        v471 = *(_QWORD *)(v461 + 360);
        if (v471)
        {
          v472 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v471 + 40))(v471);
          if (v462 <= v472)
            v462 = v472;
        }
        v473 = v13 - v462;
        if (!*(_QWORD *)(v461 + 296))
          goto LABEL_917;
      }
      else
      {
        v473 = v460 - *(_QWORD *)(v461 + 376);
        if (!*(_QWORD *)(v461 + 296))
          goto LABEL_917;
      }
      v474 = *((unsigned int *)v186 + 34);
      if (v473 <= v474 || v460 - (unint64_t)*(unsigned int *)(v461 + 388) <= v474)
        goto LABEL_917;
      v475 = *(unint64_t **)v729;
      if (v457 == *(unint64_t **)v729)
      {
        v559 = *(_QWORD *)v729;
        v560 = v732;
        v475 = v457;
        goto LABEL_903;
      }
      v476 = ((uint64_t)v457 - *(_QWORD *)v729) >> 3;
      do
      {
        v477 = v476 >> 1;
        v478 = &v475[v476 >> 1];
        v479 = (_QWORD *)*v478;
        if (!(v461 | *v478))
          goto LABEL_774;
        if (v461 && !v479)
          goto LABEL_773;
        if (!v461 && v479)
          goto LABEL_774;
        v480 = *(_QWORD *)(v461 + 352);
        v481 = v479[44];
        if (!v480 || !v481)
        {
          if (v481)
            v494 = v480 == 0;
          else
            v494 = 0;
          if (v494)
            goto LABEL_773;
          goto LABEL_774;
        }
        v482 = *(_QWORD *)(v480 + 88);
        v483 = *(std::__shared_weak_count **)(v480 + 96);
        if (v483)
        {
          v484 = (unint64_t *)&v483->__shared_owners_;
          do
            v485 = __ldxr(v484);
          while (__stxr(v485 + 1, v484));
        }
        if (!v482)
        {
          v491 = 0;
LABEL_801:
          if (!v483)
            goto LABEL_807;
          goto LABEL_802;
        }
        v486 = v479[44];
        v487 = *(_QWORD *)(v486 + 88);
        v488 = *(std::__shared_weak_count **)(v486 + 96);
        if (v488)
        {
          v489 = (unint64_t *)&v488->__shared_owners_;
          do
            v490 = __ldxr(v489);
          while (__stxr(v490 + 1, v489));
          v491 = v487 == 0;
          v492 = (unint64_t *)&v488->__shared_owners_;
          do
            v493 = __ldaxr(v492);
          while (__stlxr(v493 - 1, v492));
          if (v493)
            goto LABEL_801;
          ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
          std::__shared_weak_count::__release_weak(v488);
          if (!v483)
            goto LABEL_807;
        }
        else
        {
          v491 = v487 == 0;
          if (!v483)
            goto LABEL_807;
        }
LABEL_802:
        v495 = (unint64_t *)&v483->__shared_owners_;
        do
          v496 = __ldaxr(v495);
        while (__stlxr(v496 - 1, v495));
        if (!v496)
        {
          ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
          std::__shared_weak_count::__release_weak(v483);
        }
LABEL_807:
        if (!v491)
        {
          v497 = *(_QWORD *)(v461 + 352);
          v498 = *(_QWORD *)(v497 + 88);
          v499 = *(std::__shared_weak_count **)(v497 + 96);
          if (v499)
          {
            v500 = (unint64_t *)&v499->__shared_owners_;
            do
              v501 = __ldxr(v500);
            while (__stxr(v501 + 1, v500));
          }
          if (v498)
          {
            v502 = 0;
          }
          else
          {
            v552 = v479[44];
            v553 = *(_QWORD *)(v552 + 88);
            v554 = *(std::__shared_weak_count **)(v552 + 96);
            if (v554)
            {
              v555 = (unint64_t *)&v554->__shared_owners_;
              do
                v556 = __ldxr(v555);
              while (__stxr(v556 + 1, v555));
              v502 = v553 != 0;
              v557 = (unint64_t *)&v554->__shared_owners_;
              do
                v558 = __ldaxr(v557);
              while (__stlxr(v558 - 1, v557));
              if (!v558)
              {
                ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
                std::__shared_weak_count::__release_weak(v554);
              }
            }
            else
            {
              v502 = v553 != 0;
            }
          }
          if (v499)
          {
            v503 = (unint64_t *)&v499->__shared_owners_;
            do
              v504 = __ldaxr(v503);
            while (__stlxr(v504 - 1, v503));
            if (!v504)
            {
              ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
              std::__shared_weak_count::__release_weak(v499);
            }
          }
          if (v502)
            goto LABEL_773;
          v505 = *(_QWORD *)(v461 + 376);
          v506 = v479[47];
          if (v505 > v506)
            goto LABEL_773;
          if (v505 >= v506)
          {
            v507 = *(_QWORD *)(v461 + 368);
            v508 = *(_QWORD *)(v461 + 328);
            if (v508)
            {
              v509 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v508 + 40))(v508);
              if (v507 <= v509)
                v507 = v509;
            }
            v510 = *(_QWORD *)(v461 + 336);
            if (v510)
            {
              v511 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v510 + 40))(v510);
              if (v507 <= v511)
                v507 = v511;
            }
            v512 = *(_QWORD *)(v461 + 344);
            if (v512)
            {
              v513 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v512 + 40))(v512);
              if (v507 <= v513)
                v507 = v513;
            }
            v514 = *(_QWORD *)(v461 + 352);
            if (v514)
            {
              v515 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v514 + 40))(v514);
              if (v507 <= v515)
                v507 = v515;
            }
            v516 = *(_QWORD *)(v461 + 360);
            if (v516)
            {
              v517 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v516 + 40))(v516);
              if (v507 <= v517)
                v507 = v517;
            }
            v518 = v479[46];
            v519 = v479[41];
            if (v519)
            {
              v520 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v519 + 40))(v519);
              if (v518 <= v520)
                v518 = v520;
            }
            v521 = v479[42];
            if (v521)
            {
              v522 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v521 + 40))(v521);
              if (v518 <= v522)
                v518 = v522;
            }
            v523 = v479[43];
            if (v523)
            {
              v524 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v523 + 40))(v523);
              if (v518 <= v524)
                v518 = v524;
            }
            v525 = v479[44];
            if (v525)
            {
              v526 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v525 + 40))(v525);
              if (v518 <= v526)
                v518 = v526;
            }
            v527 = v479[45];
            if (v527)
            {
              v528 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v527 + 40))(v527);
              if (v518 <= v528)
                v518 = v528;
            }
            if (v507 > v518)
              goto LABEL_773;
            v529 = *(_QWORD *)(v461 + 368);
            v530 = *(_QWORD *)(v461 + 328);
            if (v530)
            {
              v531 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v530 + 40))(v530);
              if (v529 <= v531)
                v529 = v531;
            }
            v532 = *(_QWORD *)(v461 + 336);
            if (v532)
            {
              v533 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v532 + 40))(v532);
              if (v529 <= v533)
                v529 = v533;
            }
            v534 = *(_QWORD *)(v461 + 344);
            if (v534)
            {
              v535 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v534 + 40))(v534);
              if (v529 <= v535)
                v529 = v535;
            }
            v536 = *(_QWORD *)(v461 + 352);
            if (v536)
            {
              v537 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v536 + 40))(v536);
              if (v529 <= v537)
                v529 = v537;
            }
            v538 = *(_QWORD *)(v461 + 360);
            if (v538)
            {
              v539 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v538 + 40))(v538);
              if (v529 <= v539)
                v529 = v539;
            }
            v540 = v479[46];
            v541 = v479[41];
            if (v541)
            {
              v542 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v541 + 40))(v541);
              if (v540 <= v542)
                v540 = v542;
            }
            v543 = v479[42];
            if (v543)
            {
              v544 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v543 + 40))(v543);
              if (v540 <= v544)
                v540 = v544;
            }
            v545 = v479[43];
            if (v545)
            {
              v546 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v545 + 40))(v545);
              if (v540 <= v546)
                v540 = v546;
            }
            v547 = v479[44];
            if (v547)
            {
              v548 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v547 + 40))(v547);
              if (v540 <= v548)
                v540 = v548;
            }
            v549 = v479[45];
            if (v549)
            {
              v550 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v549 + 40))(v549);
              if (v540 <= v550)
                v540 = v550;
            }
            if (v529 >= v540 && v461 > (unint64_t)v479)
            {
LABEL_773:
              v475 = v478 + 1;
              v477 = v476 + ~v477;
            }
          }
        }
LABEL_774:
        v476 = v477;
      }
      while (v477);
      v559 = *(_QWORD *)&v729[8];
      v457 = *(unint64_t **)v729;
      v560 = v732;
      if (v475 == *(unint64_t **)&v729[8])
      {
        v13 = v726;
        v186 = v727;
LABEL_903:
        v566 = v559 - (_QWORD)v457;
        v567 = (v559 - (uint64_t)v457) >> 3;
        if (v567 >= v560)
        {
          v457 = v475;
          goto LABEL_916;
        }
        if ((unint64_t)v475 < *(_QWORD *)&v729[16])
        {
          *v475 = v461;
          v568 = v475 + 1;
          v460 = v725;
          v459 = v724;
          goto LABEL_939;
        }
        v575 = v567 + 1;
        if (!((v567 + 1) >> 61))
        {
          v576 = *(_QWORD *)&v729[16] - (_QWORD)v457;
          if ((uint64_t)(*(_QWORD *)&v729[16] - (_QWORD)v457) >> 2 > v575)
            v575 = v576 >> 2;
          if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFF8)
            v577 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v577 = v575;
          if (v577)
          {
            if (!(v577 >> 61))
            {
              v578 = operator new(8 * v577);
              goto LABEL_930;
            }
LABEL_1125:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v578 = 0;
LABEL_930:
          v579 = (unint64_t *)&v578[8 * v567];
          *v579 = v461;
          v568 = v579 + 1;
          if (v475 == v457)
          {
            v460 = v725;
            v459 = v724;
          }
          else
          {
            v580 = (char *)v475 - (char *)v457 - 8;
            if (v580 >= 0x58 && (unint64_t)((char *)v475 - v578 - v566) >= 0x20)
            {
              v583 = (v580 >> 3) + 1;
              v581 = &v475[-(v583 & 0x3FFFFFFFFFFFFFFCLL)];
              v584 = &v578[8 * v567 - 16];
              v585 = v475 - 2;
              v586 = v583 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v587 = *(_OWORD *)v585;
                *(v584 - 1) = *((_OWORD *)v585 - 1);
                *v584 = v587;
                v584 -= 2;
                v585 -= 4;
                v586 -= 4;
              }
              while (v586);
              v579 -= v583 & 0x3FFFFFFFFFFFFFFCLL;
              v460 = v725;
              v459 = v724;
              if (v583 != (v583 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_934;
            }
            else
            {
              v581 = v475;
              v460 = v725;
              v459 = v724;
              do
              {
LABEL_934:
                v582 = *--v581;
                *--v579 = v582;
              }
              while (v581 != v457);
              v457 = *(unint64_t **)v729;
            }
          }
          *(_QWORD *)v729 = v579;
          *(_QWORD *)&v729[8] = v568;
          *(_QWORD *)&v729[16] = &v578[8 * v577];
          if (v457)
            operator delete(v457);
LABEL_939:
          *(_QWORD *)&v729[8] = v568;
          v457 = v568;
          v13 = v726;
          v573 = (_QWORD *)v458[1];
          if (v573)
            goto LABEL_918;
          goto LABEL_940;
        }
LABEL_1124:
        abort();
      }
      v561 = (uint64_t)(*(_QWORD *)&v729[8] - *(_QWORD *)v729) >> 3;
      if (v732 >= v561 + 1)
        v562 = v561 + 1;
      else
        v562 = v732;
      v563 = (unint64_t *)__p;
      v564 = (unint64_t *)v731;
      v565 = (uint64_t)(v731 - (_QWORD)__p) >> 3;
      v13 = v726;
      if (v562 <= v565)
      {
        if (v562 < v565)
        {
          v564 = (unint64_t *)((char *)__p + 8 * v562);
          *(_QWORD *)&v731 = v564;
        }
      }
      else
      {
        std::vector<altitude::TextureMap *>::__append((uint64_t)&__p, v562 - v565);
        v457 = *(unint64_t **)v729;
        v563 = (unint64_t *)__p;
        v564 = (unint64_t *)v731;
      }
      v186 = v727;
      if (v563 == v564)
      {
        v569 = v564;
      }
      else
      {
        do
        {
          if (v457 == v475)
          {
            *v563++ = v461;
            if (v563 == (unint64_t *)v731)
              break;
          }
          v570 = *v457++;
          *v563++ = v570;
        }
        while (v563 != (unint64_t *)v731);
        v569 = __p;
        v457 = *(unint64_t **)v729;
        v564 = v563;
      }
      v571 = *((_QWORD *)&v731 + 1);
      v572 = *(_OWORD *)&v729[8];
      *(_QWORD *)v729 = v569;
      *(_QWORD *)&v729[8] = v564;
      v731 = v572;
      *(_QWORD *)&v729[16] = v571;
      __p = v457;
      v457 = v564;
LABEL_916:
      v460 = v725;
      v459 = v724;
LABEL_917:
      v573 = (_QWORD *)v458[1];
      if (v573)
      {
        do
        {
LABEL_918:
          v574 = v573;
          v573 = (_QWORD *)*v573;
        }
        while (v573);
        goto LABEL_749;
      }
      do
      {
LABEL_940:
        v574 = (_QWORD *)v458[2];
        v266 = *v574 == (_QWORD)v458;
        v458 = v574;
      }
      while (!v266);
LABEL_749:
      v458 = v574;
      if (v574 == v459)
      {
        v457 = *(unint64_t **)v729;
        break;
      }
    }
  }
  v588 = *(unint64_t **)&v729[8];
  if (v457 == *(unint64_t **)&v729[8])
    goto LABEL_977;
  while (2)
  {
    v589 = *v457;
    v590 = *(_QWORD **)(*v457 + 352);
    if (!v590)
    {
      v591 = operator new();
      *(_DWORD *)(v591 + 8) = 3;
      *(_QWORD *)(v591 + 40) = 0;
      *(_QWORD *)(v591 + 32) = 0;
      *(_QWORD *)(v591 + 16) = 0;
      *(_QWORD *)(v591 + 24) = v591 + 32;
      *(_OWORD *)(v591 + 48) = 0u;
      *(_OWORD *)(v591 + 64) = 0u;
      *(_QWORD *)v591 = &off_1E42C5FC8;
      *(_WORD *)(v591 + 80) = 257;
      *(_BYTE *)(v591 + 82) = 0;
      *(_OWORD *)(v591 + 88) = 0u;
      *(_OWORD *)(v591 + 104) = 0u;
      *(_QWORD *)(v589 + 352) = v591;
      altitude::TileComponent::onAttach(v591, v589);
      v590 = *(_QWORD **)(v589 + 352);
    }
    v592 = v590[11];
    v593 = (std::__shared_weak_count *)v590[12];
    if (v593)
    {
      v594 = (unint64_t *)&v593->__shared_owners_;
      do
        v595 = __ldxr(v594);
      while (__stxr(v595 + 1, v594));
    }
    if (v592)
    {
      v596 = 0;
      if (!v593)
        goto LABEL_970;
LABEL_966:
      v602 = (unint64_t *)&v593->__shared_owners_;
      do
        v603 = __ldaxr(v602);
      while (__stlxr(v603 - 1, v602));
      if (!v603)
      {
        ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
        std::__shared_weak_count::__release_weak(v593);
      }
    }
    else
    {
      v597 = v590[13];
      v598 = (std::__shared_weak_count *)v590[14];
      if (v598)
      {
        v599 = (unint64_t *)&v598->__shared_owners_;
        do
          v600 = __ldxr(v599);
        while (__stxr(v600 + 1, v599));
        do
          v601 = __ldaxr(v599);
        while (__stlxr(v601 - 1, v599));
        if (!v601)
        {
          ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
          std::__shared_weak_count::__release_weak(v598);
        }
      }
      v596 = v597 == 0;
      if (v593)
        goto LABEL_966;
    }
LABEL_970:
    if (!v596)
    {
      v604 = *(_QWORD *)(v589 + 352);
      if (v604)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v604 + 8))(v604);
        *(_QWORD *)(v589 + 352) = 0;
        *((_BYTE *)v727 + 421) = 1;
      }
      if (++v457 == v588)
        goto LABEL_977;
      continue;
    }
    break;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v605 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    LOWORD(task_info_outCnt[0]) = 0;
    _os_log_impl(&dword_19F029000, v605, OS_LOG_TYPE_ERROR, "Tile without label data in loaded LabelData list!", (uint8_t *)task_info_outCnt, 2u);
  }
LABEL_977:
  if (__p)
    operator delete(__p);
  v186 = v727;
  a2 = v725;
  if (*(_QWORD *)v729)
    operator delete(*(void **)v729);
LABEL_981:
  v606 = *((_QWORD *)v186 + 20);
  v607 = *((unsigned int *)v186 + 93);
  if (v606 > v607)
  {
    *((_BYTE *)v186 + 420) = 1;
    LODWORD(v606) = 2 * (v606 - v607);
    v608 = *((_DWORD *)v186 + 32);
    v606 = v606 >= v608 ? v608 : v606;
    if ((_DWORD)v606)
    {
      v732 = v606;
      v609 = 8 * v606;
      *(_QWORD *)v729 = operator new(v609);
      *(_QWORD *)&v729[8] = *(_QWORD *)v729;
      *(_QWORD *)&v729[16] = *(_QWORD *)v729 + v609;
      __p = operator new(v609);
      *(_QWORD *)&v731 = __p;
      *((_QWORD *)&v731 + 1) = (char *)__p + v609;
      v610 = (_QWORD *)*((_QWORD *)v186 + 18);
      if (v610 != (_QWORD *)((char *)v186 + 152))
      {
        do
        {
          if (v725 - *(_DWORD *)(v610[4] + 384) > *((_DWORD *)v727 + 34))
            geo::fixed_priority_queue<altitude::Tile *,altitude::TilePriorityLess>::push(&task_info_out, v610 + 4);
          v611 = (_QWORD *)v610[1];
          if (v611)
          {
            do
            {
              v612 = v611;
              v611 = (_QWORD *)*v611;
            }
            while (v611);
          }
          else
          {
            do
            {
              v612 = (_QWORD *)v610[2];
              v266 = *v612 == (_QWORD)v610;
              v610 = v612;
            }
            while (!v266);
          }
          v610 = v612;
        }
        while (v612 != (_QWORD *)((char *)v186 + 152));
        v613 = *(uint64_t **)v729;
        v614 = *(uint64_t **)&v729[8];
        if (*(_QWORD *)v729 != *(_QWORD *)&v729[8])
        {
          while (1)
          {
            v615 = *v613;
            v616 = *(_QWORD *)(*v613 + 328);
            if (!v616)
            {
              v617 = operator new();
              *(_DWORD *)(v617 + 8) = 0;
              *(_QWORD *)(v617 + 40) = 0;
              *(_QWORD *)(v617 + 32) = 0;
              *(_QWORD *)(v617 + 16) = 0;
              *(_QWORD *)(v617 + 24) = v617 + 32;
              *(_OWORD *)(v617 + 48) = 0u;
              *(_OWORD *)(v617 + 64) = 0u;
              *(_OWORD *)(v617 + 80) = 0u;
              v618 = (void **)(v617 + 80);
              *(_QWORD *)v617 = &off_1E42C5580;
              *(_QWORD *)(v617 + 208) = 0;
              *(_QWORD *)(v617 + 216) = 0;
              *(_OWORD *)(v617 + 96) = 0u;
              *(_OWORD *)(v617 + 112) = 0u;
              *(_OWORD *)(v617 + 128) = 0u;
              *(_OWORD *)(v617 + 144) = 0u;
              *(_OWORD *)(v617 + 160) = 0u;
              *(_OWORD *)(v617 + 176) = 0u;
              *(_OWORD *)(v617 + 185) = 0u;
              *(_DWORD *)(v617 + 224) = -1;
              *(_QWORD *)(v617 + 232) = 0;
              *(_OWORD *)(v617 + 248) = 0u;
              *(_OWORD *)(v617 + 264) = 0u;
              *(_DWORD *)(v617 + 279) = 0;
              *(_QWORD *)(v617 + 288) = 0x3FF0000000000000;
              *(_DWORD *)(v617 + 296) = 0;
              *(_WORD *)(v617 + 300) = 0;
              altitude::Tile::createTileName(task_info_outCnt, (unsigned int *)(v615 + 392), (uint64_t *)(*(_QWORD *)(v615 + 288) + 40), (uint64_t *)(*(_QWORD *)(v615 + 288) + 136));
              if (*(char *)(v617 + 103) < 0)
                operator delete(*v618);
              *(_OWORD *)v618 = *(_OWORD *)task_info_outCnt;
              *(_QWORD *)(v617 + 96) = v735;
              *(_QWORD *)(v615 + 328) = v617;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v617 + 16))(v617, v615);
              v616 = *(_QWORD *)(v615 + 328);
            }
            if (!*(_QWORD *)(v616 + 208))
              break;
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v616 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(v616 + 16) + 424), *(_QWORD *)(v616 + 16), v616);
            v619 = *(std::__shared_weak_count **)(v616 + 216);
            *(_QWORD *)(v616 + 208) = 0;
            *(_QWORD *)(v616 + 216) = 0;
            if (v619)
            {
              v620 = (unint64_t *)&v619->__shared_owners_;
              do
                v621 = __ldaxr(v620);
              while (__stlxr(v621 - 1, v620));
              if (!v621)
              {
                ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
                std::__shared_weak_count::__release_weak(v619);
              }
              if (*(_QWORD *)(v616 + 208))
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v616 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(v616 + 16) + 424), *(_QWORD *)(v616 + 16), v616);
            }
            *(_DWORD *)(v616 + 224) = -1;
            *((_BYTE *)v727 + 421) = 1;
            if (++v613 == v614)
              goto LABEL_1016;
          }
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v622 = GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          {
            LOWORD(task_info_outCnt[0]) = 0;
            _os_log_impl(&dword_19F029000, v622, OS_LOG_TYPE_ERROR, "Tile without fallback in loaded fallback list!", (uint8_t *)task_info_outCnt, 2u);
          }
        }
      }
LABEL_1016:
      if (__p)
        operator delete(__p);
      v186 = v727;
      if (*(_QWORD *)v729)
        operator delete(*(void **)v729);
      a2 = v725;
    }
  }
  v623 = *((unsigned int *)v186 + 97);
  v624 = *((_DWORD *)v186 + 101);
  if (v623 > v624)
  {
    *((_BYTE *)v186 + 420) = 1;
    v625 = (v623 - v624) / (v623 / *((_QWORD *)v186 + 41));
    v626 = *((_DWORD *)v186 + 33);
    v627 = v625 + 1 < v626 ? v625 + 1 : v626;
    if ((_DWORD)v627)
    {
      v732 = v627;
      v628 = 8 * v627;
      *(_QWORD *)v729 = operator new(v628);
      *(_QWORD *)&v729[8] = *(_QWORD *)v729;
      *(_QWORD *)&v729[16] = *(_QWORD *)v729 + v628;
      __p = operator new(v628);
      *(_QWORD *)&v731 = __p;
      *((_QWORD *)&v731 + 1) = (char *)__p + v628;
      v629 = (_QWORD *)*((_QWORD *)v186 + 39);
      if (v629 != (_QWORD *)((char *)v186 + 320))
      {
        do
        {
          *(_OWORD *)task_info_outCnt = *((_OWORD *)v629 + 2);
          v630 = *((_DWORD *)v727 + 34);
          if (a2 - *(_DWORD *)(*(_QWORD *)task_info_outCnt + 384) > v630
            && a2 - *(_DWORD *)(*(_QWORD *)task_info_outCnt + 388) > v630
            && *(_QWORD *)(*(_QWORD *)task_info_outCnt + 296))
          {
            geo::fixed_priority_queue<altitude::Tile *,altitude::TilePriorityLess>::push(&task_info_out, task_info_outCnt);
          }
          v631 = (_QWORD *)v629[1];
          if (v631)
          {
            do
            {
              v632 = v631;
              v631 = (_QWORD *)*v631;
            }
            while (v631);
          }
          else
          {
            do
            {
              v632 = (_QWORD *)v629[2];
              v266 = *v632 == (_QWORD)v629;
              v629 = v632;
            }
            while (!v266);
          }
          v629 = v632;
        }
        while (v632 != (_QWORD *)((char *)v186 + 320));
        v633 = *(uint64_t **)v729;
        v634 = *(uint64_t **)&v729[8];
        if (*(_QWORD *)v729 != *(_QWORD *)&v729[8])
        {
          while (1)
          {
            v635 = *v633;
            v636 = *(_QWORD **)(*v633 + 328);
            if (!v636)
            {
              v637 = operator new();
              *(_DWORD *)(v637 + 8) = 0;
              *(_QWORD *)(v637 + 40) = 0;
              *(_QWORD *)(v637 + 32) = 0;
              *(_QWORD *)(v637 + 16) = 0;
              *(_QWORD *)(v637 + 24) = v637 + 32;
              *(_OWORD *)(v637 + 48) = 0u;
              *(_OWORD *)(v637 + 64) = 0u;
              *(_OWORD *)(v637 + 80) = 0u;
              v638 = (void **)(v637 + 80);
              *(_QWORD *)v637 = &off_1E42C5580;
              *(_QWORD *)(v637 + 208) = 0;
              *(_QWORD *)(v637 + 216) = 0;
              *(_OWORD *)(v637 + 96) = 0u;
              *(_OWORD *)(v637 + 112) = 0u;
              *(_OWORD *)(v637 + 128) = 0u;
              *(_OWORD *)(v637 + 144) = 0u;
              *(_OWORD *)(v637 + 160) = 0u;
              *(_OWORD *)(v637 + 176) = 0u;
              *(_OWORD *)(v637 + 185) = 0u;
              *(_DWORD *)(v637 + 224) = -1;
              *(_QWORD *)(v637 + 232) = 0;
              *(_OWORD *)(v637 + 248) = 0u;
              *(_OWORD *)(v637 + 264) = 0u;
              *(_DWORD *)(v637 + 279) = 0;
              *(_QWORD *)(v637 + 288) = 0x3FF0000000000000;
              *(_DWORD *)(v637 + 296) = 0;
              *(_WORD *)(v637 + 300) = 0;
              altitude::Tile::createTileName(task_info_outCnt, (unsigned int *)(v635 + 392), (uint64_t *)(*(_QWORD *)(v635 + 288) + 40), (uint64_t *)(*(_QWORD *)(v635 + 288) + 136));
              if (*(char *)(v637 + 103) < 0)
                operator delete(*v638);
              *(_OWORD *)v638 = *(_OWORD *)task_info_outCnt;
              *(_QWORD *)(v637 + 96) = v735;
              *(_QWORD *)(v635 + 328) = v637;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v637 + 16))(v637, v635);
              v636 = *(_QWORD **)(v635 + 328);
            }
            if (!v636[17])
              break;
            (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(v636[2] + 424) + 24))(*(_QWORD *)(v636[2] + 424), v636[2], v636);
            v639 = (std::__shared_weak_count *)v636[18];
            v636[17] = 0;
            v636[18] = 0;
            if (v639)
            {
              v640 = (unint64_t *)&v639->__shared_owners_;
              do
                v641 = __ldaxr(v640);
              while (__stlxr(v641 - 1, v640));
              if (!v641)
              {
                ((void (*)(std::__shared_weak_count *))v639->__on_zero_shared)(v639);
                std::__shared_weak_count::__release_weak(v639);
              }
              if (v636[17])
                (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(v636[2] + 424) + 16))(*(_QWORD *)(v636[2] + 424), v636[2], v636);
            }
            v642 = (std::__shared_weak_count *)v636[14];
            v636[13] = 0;
            v636[14] = 0;
            if (v642)
            {
              v643 = (unint64_t *)&v642->__shared_owners_;
              do
                v644 = __ldaxr(v643);
              while (__stlxr(v644 - 1, v643));
              if (!v644)
              {
                ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                std::__shared_weak_count::__release_weak(v642);
              }
            }
            if (++v633 == v634)
              goto LABEL_1063;
          }
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v645 = GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
          {
            LOWORD(task_info_outCnt[0]) = 0;
            _os_log_impl(&dword_19F029000, v645, OS_LOG_TYPE_ERROR, "Tile without surface in loaded surface list!", (uint8_t *)task_info_outCnt, 2u);
          }
        }
      }
LABEL_1063:
      if (__p)
        operator delete(__p);
      if (*(_QWORD *)v729)
        operator delete(*(void **)v729);
      v186 = v727;
    }
  }
  v646 = *((_QWORD *)v186 + 44);
  v647 = *((unsigned int *)v186 + 94);
  if (v646 <= v647)
    return;
  *((_BYTE *)v186 + 420) = 1;
  LODWORD(v646) = 2 * (v646 - v647);
  v648 = *((_DWORD *)v186 + 31);
  v646 = v646 >= v648 ? v648 : v646;
  if (!(_DWORD)v646)
    return;
  v732 = v646;
  v649 = 8 * v646;
  v650 = (char *)operator new(v649);
  *(_QWORD *)v729 = v650;
  *(_QWORD *)&v729[8] = v650;
  *(_QWORD *)&v729[16] = &v650[v649];
  __p = operator new(v649);
  *(_QWORD *)&v731 = __p;
  *((_QWORD *)&v731 + 1) = (char *)__p + v649;
  v651 = (_QWORD *)*((_QWORD *)v186 + 42);
  if (v651 == (_QWORD *)((char *)v186 + 344))
    goto LABEL_1120;
  while (2)
  {
    v652 = (_QWORD *)v651[4];
    if ((unint64_t)a2 - v652[47] > *((unsigned int *)v186 + 34))
    {
      v653 = v652[46];
      v654 = v652[41];
      if (v654)
      {
        v655 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v654 + 40))(v654);
        if (v653 <= v655)
          v653 = v655;
      }
      v656 = v652[42];
      if (v656)
      {
        v657 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v656 + 40))(v656);
        if (v653 <= v657)
          v653 = v657;
      }
      v658 = v652[43];
      if (v658)
      {
        v659 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v658 + 40))(v658);
        if (v653 <= v659)
          v653 = v659;
      }
      v660 = v652[44];
      if (v660)
      {
        v661 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v660 + 40))(v660);
        if (v653 <= v661)
          v653 = v661;
      }
      v662 = v652[45];
      if (v662)
      {
        v663 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v662 + 40))(v662);
        if (v653 <= v663)
          v653 = v663;
      }
      if (a2 - v653 > *((unsigned int *)v186 + 34))
      {
        v664 = v652[38];
        v665 = v652[39] - v664;
        if (v665)
        {
          v666 = 0;
          v667 = v665 >> 5;
          v668 = 1;
          while (!*(_QWORD *)(v664 + 32 * v666))
          {
            v666 = v668++;
            if (v667 <= v666)
              goto LABEL_1097;
          }
          goto LABEL_1109;
        }
LABEL_1097:
        v669 = v652[41];
        if (v669)
        {
          v670 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v669 + 48))(v669) ^ 1;
          v671 = v652[42];
          if (v671)
            goto LABEL_1099;
        }
        else
        {
          v670 = 0;
          v671 = v652[42];
          if (v671)
LABEL_1099:
            v670 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v671 + 48))(v671) ^ 1;
        }
        v672 = v652[43];
        if (v672)
          v670 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v672 + 48))(v672) ^ 1;
        v673 = v652[44];
        if (v673)
          v670 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v673 + 48))(v673) ^ 1;
        v674 = v652[45];
        if (v674)
          v670 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v674 + 48))(v674) ^ 1;
        if (v670 && v652[37])
          geo::fixed_priority_queue<altitude::Tile *,altitude::TilePriorityLess>::push(&task_info_out, v651 + 4);
      }
    }
LABEL_1109:
    v675 = (_QWORD *)v651[1];
    if (v675)
    {
      do
      {
        v676 = v675;
        v675 = (_QWORD *)*v675;
      }
      while (v675);
    }
    else
    {
      do
      {
        v676 = (_QWORD *)v651[2];
        v266 = *v676 == (_QWORD)v651;
        v651 = v676;
      }
      while (!v266);
    }
    v651 = v676;
    if (v676 != (_QWORD *)((char *)v186 + 344))
      continue;
    break;
  }
  v650 = *(char **)v729;
  v677 = *(altitude::Tile ****)&v729[8];
  if (*(_QWORD *)v729 != *(_QWORD *)&v729[8])
  {
    v678 = *(altitude::Tile ****)v729;
    do
    {
      v679 = *v678++;
      altitude::Tile::removeChildTile(v679[37], (altitude::Tile *)v679);
    }
    while (v678 != v677);
  }
LABEL_1120:
  if (__p)
    operator delete(__p);
  if (v650)
    operator delete(v650);
}

uint64_t altitude::GlobeCleanupLoader::hasRequestsInProgress(altitude::GlobeCleanupLoader *this)
{
  return 0;
}

void altitude::GlobeCleanupLoader::clear(altitude::GlobeCleanupLoader *this)
{
  altitude::GlobeCleanupLoader *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = this;
  v2 = (_QWORD *)((char *)this + 152);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 19));
  *((_QWORD *)v1 + 18) = v2;
  *((_QWORD *)v1 + 20) = 0;
  *v2 = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v1 + 22));
  *((_QWORD *)v1 + 21) = (char *)v1 + 176;
  *((_QWORD *)v1 + 23) = 0;
  *((_QWORD *)v1 + 22) = 0;
  v3 = (_QWORD *)((char *)v1 + 200);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v1 + 25));
  v4 = (_QWORD *)*((_QWORD *)v1 + 28);
  v1 = (altitude::GlobeCleanupLoader *)((char *)v1 + 224);
  *((_QWORD *)v1 - 4) = v3;
  *v3 = 0;
  *((_QWORD *)v1 - 2) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v4);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v1 + 15));
  *((_QWORD *)v1 + 15) = 0;
  *((_QWORD *)v1 + 16) = 0;
  *((_QWORD *)v1 + 14) = (char *)v1 + 120;
}

void altitude::GlobeCleanupLoader::onTileComponentDataLoaded(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  _QWORD *v59;
  unint64_t v60;
  BOOL v61;
  _QWORD *v62;
  uint64_t **v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t **v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t **v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t **v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t **v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;

  switch(*(_DWORD *)(a3 + 8))
  {
    case 0:
      v6 = *(_QWORD *)(a3 + 136);
      if (!v6)
        goto LABEL_106;
      v7 = *(uint64_t **)(v6 + 48);
      v8 = *(uint64_t **)(v6 + 56);
      if (v7 == v8)
      {
        LODWORD(v9) = 0;
        v16 = *(uint64_t **)(a1 + 320);
        if (v16)
          goto LABEL_96;
LABEL_94:
        v74 = (uint64_t **)(a1 + 320);
        v75 = (uint64_t **)(a1 + 320);
LABEL_100:
        v77 = operator new(0x30uLL);
        v77[4] = a2;
        *((_DWORD *)v77 + 10) = v9;
        *v77 = 0;
        v77[1] = 0;
        v77[2] = v75;
        *v74 = v77;
        v78 = **(_QWORD **)(a1 + 312);
        if (v78)
        {
          *(_QWORD *)(a1 + 312) = v78;
          v79 = *v74;
        }
        else
        {
          v79 = v77;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 320), v79);
        ++*(_QWORD *)(a1 + 328);
        *(_DWORD *)(a1 + 388) += v9;
        goto LABEL_106;
      }
      v9 = 0;
      do
      {
        v10 = *v7++;
        v11 = *(_QWORD *)(v10 + 216);
        v12 = **(_QWORD ***)(v11 + 64);
        v13 = v12[6] - v12[5];
        v14 = *(_QWORD **)(v11 + 96);
        v15 = v14[6] - v14[5];
        v9 = v13 + v9 - v15 % v14[1] - v13 % v12[1] + v15;
      }
      while (v7 != v8);
      v16 = *(uint64_t **)(a1 + 320);
      if (!v16)
        goto LABEL_94;
      while (1)
      {
LABEL_96:
        while (1)
        {
          v75 = (uint64_t **)v16;
          v76 = v16[4];
          if (v76 <= a2)
            break;
          v16 = *v75;
          v74 = v75;
          if (!*v75)
            goto LABEL_100;
        }
        if (v76 >= a2)
          break;
        v16 = v75[1];
        if (!v16)
        {
          v74 = v75 + 1;
          goto LABEL_100;
        }
      }
LABEL_106:
      if (*(_QWORD *)(a3 + 208))
      {
        v81 = (uint64_t **)(a1 + 152);
        v80 = *(uint64_t **)(a1 + 152);
        if (v80)
        {
          while (1)
          {
            while (1)
            {
              v82 = (uint64_t **)v80;
              v83 = v80[4];
              if (v83 <= a2)
                break;
              v80 = *v82;
              v81 = v82;
              if (!*v82)
                goto LABEL_114;
            }
            if (v83 >= a2)
              break;
            v80 = v82[1];
            if (!v80)
            {
              v81 = v82 + 1;
              goto LABEL_114;
            }
          }
        }
        else
        {
          v82 = (uint64_t **)(a1 + 152);
LABEL_114:
          v84 = (uint64_t *)operator new(0x28uLL);
          v84[4] = a2;
          *v84 = 0;
          v84[1] = 0;
          v84[2] = (uint64_t)v82;
          *v81 = v84;
          v85 = **(_QWORD **)(a1 + 144);
          if (v85)
          {
            *(_QWORD *)(a1 + 144) = v85;
            v86 = *v81;
          }
          else
          {
            v86 = v84;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v86);
          ++*(_QWORD *)(a1 + 160);
        }
      }
      v87 = *(_QWORD *)(a3 + 120);
      if (v87)
      {
        v88 = *(uint64_t **)(v87 + 48);
        v89 = *(uint64_t **)(v87 + 56);
        if (v88 == v89)
        {
          LODWORD(v90) = 0;
        }
        else
        {
          v90 = 0;
          do
          {
            v96 = *v88;
            v97 = *(_QWORD *)(*v88 + 256);
            v98 = *(_QWORD *)(*v88 + 264);
            while (v97 != v98)
            {
              v99 = *(_QWORD *)(*(_QWORD *)v97 + 16);
              if (v99)
                v90 += ggl::pixelFormatPixelsSize(*(_DWORD *)(v99 + 68), *(unsigned int *)(v99 + 80), *(unsigned int *)(v99 + 84));
              v97 += 8;
            }
            v91 = *(_QWORD *)(v96 + 216);
            v92 = **(_QWORD ***)(v91 + 64);
            v93 = v92[6] - v92[5];
            v94 = *(_QWORD **)(v91 + 96);
            v95 = v94[6] - v94[5];
            v90 = v93 + v90 - v95 % v94[1] - v93 % v92[1] + v95;
            ++v88;
          }
          while (v88 != v89);
        }
        v101 = (uint64_t **)(a1 + 176);
        v100 = *(uint64_t **)(a1 + 176);
        if (v100)
        {
          while (1)
          {
            while (1)
            {
              v102 = (uint64_t **)v100;
              v103 = v100[4];
              if (v103 <= a2)
                break;
              v100 = *v102;
              v101 = v102;
              if (!*v102)
                goto LABEL_135;
            }
            if (v103 >= a2)
              break;
            v100 = v102[1];
            if (!v100)
            {
              v101 = v102 + 1;
              goto LABEL_135;
            }
          }
        }
        else
        {
          v102 = (uint64_t **)(a1 + 176);
LABEL_135:
          v104 = operator new(0x30uLL);
          v104[4] = a2;
          *((_DWORD *)v104 + 10) = v90;
          *v104 = 0;
          v104[1] = 0;
          v104[2] = v102;
          *v101 = v104;
          v105 = **(_QWORD **)(a1 + 168);
          if (v105)
          {
            *(_QWORD *)(a1 + 168) = v105;
            v106 = *v101;
          }
          else
          {
            v106 = v104;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 176), v106);
          ++*(_QWORD *)(a1 + 184);
          *(_DWORD *)(a1 + 380) += v90;
        }
      }
      v107 = *(_QWORD *)(a3 + 152);
      v108 = *(_QWORD *)(a3 + 160);
      if (v107 != v108)
      {
        v109 = 0;
        do
        {
          v110 = *(_QWORD *)(*(_QWORD *)v107 + 16);
          if (v110)
            v109 += ggl::pixelFormatPixelsSize(*(_DWORD *)(v110 + 68), *(unsigned int *)(v110 + 80), *(unsigned int *)(v110 + 84));
          v107 += 16;
        }
        while (v107 != v108);
        v112 = (uint64_t **)(a1 + 200);
        v111 = *(uint64_t **)(a1 + 200);
        if (v111)
        {
          while (1)
          {
            while (1)
            {
              v113 = (uint64_t **)v111;
              v114 = v111[4];
              if (v114 <= a2)
                break;
              v111 = *v113;
              v112 = v113;
              if (!*v113)
                goto LABEL_151;
            }
            if (v114 >= a2)
              break;
            v111 = v113[1];
            if (!v111)
            {
              v112 = v113 + 1;
              goto LABEL_151;
            }
          }
        }
        else
        {
          v113 = (uint64_t **)(a1 + 200);
LABEL_151:
          v115 = operator new(0x30uLL);
          v115[4] = a2;
          *((_DWORD *)v115 + 10) = v109;
          *v115 = 0;
          v115[1] = 0;
          v115[2] = v113;
          *v112 = v115;
          v116 = **(_QWORD **)(a1 + 192);
          if (v116)
          {
            *(_QWORD *)(a1 + 192) = v116;
            v117 = *v112;
          }
          else
          {
            v117 = v115;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 200), v117);
          ++*(_QWORD *)(a1 + 208);
          *(_DWORD *)(a1 + 384) += v109;
        }
      }
      *(_BYTE *)(a3 + 280) = 1;
      return;
    case 1:
      if (*(_QWORD *)(a3 + 88))
        goto LABEL_16;
      v18 = *(_QWORD *)(a3 + 104);
      v17 = *(std::__shared_weak_count **)(a3 + 112);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v18)
      {
LABEL_16:
        v23 = (uint64_t **)(a1 + 248);
        v22 = *(uint64_t **)(a1 + 248);
        if (v22)
        {
          while (1)
          {
            while (1)
            {
              v24 = (uint64_t **)v22;
              v25 = v22[4];
              if (v25 <= a2)
                break;
              v22 = *v24;
              v23 = v24;
              if (!*v24)
                goto LABEL_23;
            }
            if (v25 >= a2)
              break;
            v22 = v24[1];
            if (!v22)
            {
              v23 = v24 + 1;
              goto LABEL_23;
            }
          }
        }
        else
        {
          v24 = (uint64_t **)(a1 + 248);
LABEL_23:
          v26 = (uint64_t *)operator new(0x28uLL);
          v26[4] = a2;
          *v26 = 0;
          v26[1] = 0;
          v26[2] = (uint64_t)v24;
          *v23 = v26;
          v27 = **(_QWORD **)(a1 + 240);
          if (v27)
          {
            *(_QWORD *)(a1 + 240) = v27;
            v28 = *v23;
          }
          else
          {
            v28 = v26;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 248), v28);
          ++*(_QWORD *)(a1 + 256);
        }
      }
      return;
    case 2:
      v30 = *(_QWORD *)(a3 + 88);
      v29 = *(std::__shared_weak_count **)(a3 + 96);
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        v33 = (unint64_t *)&v29->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v30)
      {
        v35 = *(uint64_t **)(a1 + 272);
        if (v35)
        {
          while (1)
          {
            while (1)
            {
              v37 = (uint64_t **)v35;
              v38 = v35[4];
              if (v38 <= a2)
                break;
              v35 = *v37;
              v36 = v37;
              if (!*v37)
                goto LABEL_40;
            }
            if (v38 >= a2)
              break;
            v35 = v37[1];
            if (!v35)
            {
              v36 = v37 + 1;
              goto LABEL_40;
            }
          }
        }
        else
        {
          v36 = (uint64_t **)(a1 + 272);
          v37 = (uint64_t **)(a1 + 272);
LABEL_40:
          v39 = (uint64_t *)operator new(0x28uLL);
          v39[4] = a2;
          *v39 = 0;
          v39[1] = 0;
          v39[2] = (uint64_t)v37;
          *v36 = v39;
          v40 = **(_QWORD **)(a1 + 264);
          if (v40)
          {
            *(_QWORD *)(a1 + 264) = v40;
            v41 = *v36;
          }
          else
          {
            v41 = v39;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v41);
          ++*(_QWORD *)(a1 + 280);
        }
      }
      return;
    case 3:
      v42 = *(_QWORD *)(a3 + 88);
      v43 = *(std::__shared_weak_count **)(a3 + 96);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      if (v42)
      {
        v46 = 1;
      }
      else
      {
        v65 = *(_QWORD *)(a3 + 104);
        v66 = *(std::__shared_weak_count **)(a3 + 112);
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
          v46 = v65 != 0;
          v69 = (unint64_t *)&v66->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        else
        {
          v46 = v65 != 0;
        }
      }
      if (v43)
      {
        v47 = (unint64_t *)&v43->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v46)
      {
        v49 = *(uint64_t **)(a1 + 296);
        if (v49)
        {
          while (1)
          {
            while (1)
            {
              v51 = (uint64_t **)v49;
              v52 = v49[4];
              if (v52 <= a2)
                break;
              v49 = *v51;
              v50 = v51;
              if (!*v51)
                goto LABEL_60;
            }
            if (v52 >= a2)
              break;
            v49 = v51[1];
            if (!v49)
            {
              v50 = v51 + 1;
              goto LABEL_60;
            }
          }
        }
        else
        {
          v50 = (uint64_t **)(a1 + 296);
          v51 = (uint64_t **)(a1 + 296);
LABEL_60:
          v53 = (uint64_t *)operator new(0x28uLL);
          v53[4] = a2;
          *v53 = 0;
          v53[1] = 0;
          v53[2] = (uint64_t)v51;
          *v50 = v53;
          v54 = **(_QWORD **)(a1 + 288);
          if (v54)
          {
            *(_QWORD *)(a1 + 288) = v54;
            v55 = *v50;
          }
          else
          {
            v55 = v53;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 296), v55);
          ++*(_QWORD *)(a1 + 304);
        }
      }
      return;
    case 4:
      v57 = (uint64_t **)(a1 + 224);
      v56 = *(uint64_t **)(a1 + 224);
      if (v56)
      {
        v58 = (uint64_t **)(a1 + 224);
        v59 = *(_QWORD **)(a1 + 224);
        do
        {
          v60 = v59[4];
          v61 = v60 >= a2;
          if (v60 >= a2)
            v62 = v59;
          else
            v62 = v59 + 1;
          if (v61)
            v58 = (uint64_t **)v59;
          v59 = (_QWORD *)*v62;
        }
        while (*v62);
        if (v58 == v57 || (unint64_t)v58[4] > a2)
        {
          while (1)
          {
            while (1)
            {
              v63 = (uint64_t **)v56;
              v64 = v56[4];
              if (v64 <= a2)
                break;
              v56 = *v63;
              v57 = v63;
              if (!*v63)
                goto LABEL_87;
            }
            if (v64 >= a2)
              break;
            v56 = v63[1];
            if (!v56)
            {
              v57 = v63 + 1;
              goto LABEL_87;
            }
          }
        }
      }
      else
      {
        v63 = (uint64_t **)(a1 + 224);
LABEL_87:
        v71 = (uint64_t *)operator new(0x28uLL);
        v71[4] = a2;
        *v71 = 0;
        v71[1] = 0;
        v71[2] = (uint64_t)v63;
        *v57 = v71;
        v72 = **(_QWORD **)(a1 + 216);
        if (v72)
        {
          *(_QWORD *)(a1 + 216) = v72;
          v73 = *v57;
        }
        else
        {
          v73 = v71;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 224), v73);
        ++*(_QWORD *)(a1 + 232);
      }
      return;
    default:
      return;
  }
}

void altitude::GlobeCleanupLoader::onTileComponentDataRelease(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v4;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _BOOL4 v42;
  int v43;
  uint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  BOOL v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  BOOL v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  BOOL v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  BOOL v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  BOOL v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t *v106;
  _QWORD *v107;
  unint64_t v108;
  BOOL v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t *v120;

  switch(*(_DWORD *)(a3 + 8))
  {
    case 0:
      if (*(_QWORD *)(a3 + 136) == a4)
      {
        v51 = *(uint64_t **)(a1 + 320);
        if (v51)
        {
          v52 = (_QWORD *)(a1 + 320);
          v53 = *(_QWORD **)(a1 + 320);
          do
          {
            v54 = v53[4];
            v55 = v54 >= a2;
            if (v54 >= a2)
              v56 = v53;
            else
              v56 = v53 + 1;
            if (v55)
              v52 = v53;
            v53 = (_QWORD *)*v56;
          }
          while (*v56);
          if (v52 != (_QWORD *)(a1 + 320) && v52[4] <= a2)
          {
            *(_DWORD *)(a1 + 388) -= *((_DWORD *)v52 + 10);
            v57 = (_QWORD *)v52[1];
            if (v57)
            {
              do
              {
                v58 = v57;
                v57 = (_QWORD *)*v57;
              }
              while (v57);
            }
            else
            {
              v116 = v52;
              do
              {
                v58 = (_QWORD *)v116[2];
                v10 = *v58 == (_QWORD)v116;
                v116 = v58;
              }
              while (!v10);
            }
            if (*(_QWORD **)(a1 + 312) == v52)
              *(_QWORD *)(a1 + 312) = v58;
            --*(_QWORD *)(a1 + 328);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v51, v52);
            operator delete(v52);
          }
        }
      }
      if (*(_QWORD *)(a3 + 208) == a4)
      {
        v59 = *(uint64_t **)(a1 + 152);
        if (v59)
        {
          v60 = (uint64_t *)(a1 + 152);
          v61 = *(_QWORD **)(a1 + 152);
          do
          {
            v62 = v61[4];
            v63 = v62 >= a2;
            if (v62 >= a2)
              v64 = v61;
            else
              v64 = v61 + 1;
            if (v63)
              v60 = v61;
            v61 = (_QWORD *)*v64;
          }
          while (*v64);
          if (v60 != (uint64_t *)(a1 + 152) && v60[4] <= a2)
          {
            v65 = (uint64_t *)v60[1];
            if (v65)
            {
              do
              {
                v66 = v65;
                v65 = (uint64_t *)*v65;
              }
              while (v65);
            }
            else
            {
              v117 = v60;
              do
              {
                v66 = (uint64_t *)v117[2];
                v10 = *v66 == (_QWORD)v117;
                v117 = v66;
              }
              while (!v10);
            }
            if (*(uint64_t **)(a1 + 144) == v60)
              *(_QWORD *)(a1 + 144) = v66;
            --*(_QWORD *)(a1 + 160);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v59, v60);
            operator delete(v60);
          }
        }
      }
      if (*(_QWORD *)(a3 + 120) == a4)
      {
        v67 = *(uint64_t **)(a1 + 176);
        if (v67)
        {
          v68 = (_QWORD *)(a1 + 176);
          v69 = *(_QWORD **)(a1 + 176);
          do
          {
            v70 = v69[4];
            v71 = v70 >= a2;
            if (v70 >= a2)
              v72 = v69;
            else
              v72 = v69 + 1;
            if (v71)
              v68 = v69;
            v69 = (_QWORD *)*v72;
          }
          while (*v72);
          if (v68 != (_QWORD *)(a1 + 176) && v68[4] <= a2)
          {
            *(_DWORD *)(a1 + 380) -= *((_DWORD *)v68 + 10);
            v73 = (_QWORD *)v68[1];
            if (v73)
            {
              do
              {
                v74 = v73;
                v73 = (_QWORD *)*v73;
              }
              while (v73);
            }
            else
            {
              v118 = v68;
              do
              {
                v74 = (_QWORD *)v118[2];
                v10 = *v74 == (_QWORD)v118;
                v118 = v74;
              }
              while (!v10);
            }
            if (*(_QWORD **)(a1 + 168) == v68)
              *(_QWORD *)(a1 + 168) = v74;
            --*(_QWORD *)(a1 + 184);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v67, v68);
            operator delete(v68);
          }
        }
      }
      if (a3 + 152 == a4)
      {
        v75 = *(uint64_t **)(a1 + 200);
        if (v75)
        {
          v76 = (_QWORD *)(a1 + 200);
          v77 = *(_QWORD **)(a1 + 200);
          do
          {
            v78 = v77[4];
            v79 = v78 >= a2;
            if (v78 >= a2)
              v80 = v77;
            else
              v80 = v77 + 1;
            if (v79)
              v76 = v77;
            v77 = (_QWORD *)*v80;
          }
          while (*v80);
          if (v76 != (_QWORD *)(a1 + 200) && v76[4] <= a2)
          {
            *(_DWORD *)(a1 + 384) -= *((_DWORD *)v76 + 10);
            v81 = (_QWORD *)v76[1];
            if (v81)
            {
              do
              {
                v82 = v81;
                v81 = (_QWORD *)*v81;
              }
              while (v81);
            }
            else
            {
              v119 = v76;
              do
              {
                v82 = (_QWORD *)v119[2];
                v10 = *v82 == (_QWORD)v119;
                v119 = v82;
              }
              while (!v10);
            }
            if (*(_QWORD **)(a1 + 192) == v76)
              *(_QWORD *)(a1 + 192) = v82;
            --*(_QWORD *)(a1 + 208);
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v75, v76);
            operator delete(v76);
          }
        }
      }
      *(_BYTE *)(a3 + 280) = 1;
      return;
    case 1:
      v9 = *(_QWORD *)(a3 + 88);
      if (v9)
        v10 = v9 == a4;
      else
        v10 = 1;
      if (!v10)
        return;
      v11 = *(_QWORD *)(a3 + 104);
      v12 = *(std::__shared_weak_count **)(a3 + 112);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      if (!v11)
      {
        v19 = 1;
        goto LABEL_152;
      }
      v15 = *(_QWORD *)(a3 + 104);
      v16 = *(std::__shared_weak_count **)(a3 + 112);
      if (!v16)
      {
        v19 = v15 == a4;
        if (!v12)
          goto LABEL_156;
        goto LABEL_153;
      }
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = v15 == a4;
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (v20)
      {
LABEL_152:
        if (!v12)
          goto LABEL_156;
        goto LABEL_153;
      }
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v12)
        goto LABEL_156;
LABEL_153:
      v95 = (unint64_t *)&v12->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (v96)
      {
LABEL_156:
        if (!v19)
          return;
        goto LABEL_189;
      }
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v19)
        return;
LABEL_189:
      v27 = *(uint64_t **)(a1 + 248);
      if (v27)
      {
        v28 = (uint64_t *)(a1 + 248);
        v107 = *(_QWORD **)(a1 + 248);
        do
        {
          v108 = v107[4];
          v109 = v108 >= a2;
          if (v108 >= a2)
            v110 = v107;
          else
            v110 = v107 + 1;
          if (v109)
            v28 = v107;
          v107 = (_QWORD *)*v110;
        }
        while (*v110);
        if (v28 != (uint64_t *)(a1 + 248) && v28[4] <= a2)
        {
          v111 = (uint64_t *)v28[1];
          if (v111)
          {
            do
            {
              v112 = v111;
              v111 = (uint64_t *)*v111;
            }
            while (v111);
          }
          else
          {
            v120 = v28;
            do
            {
              v112 = (uint64_t *)v120[2];
              v10 = *v112 == (_QWORD)v120;
              v120 = v112;
            }
            while (!v10);
          }
          if (*(uint64_t **)(a1 + 240) == v28)
            *(_QWORD *)(a1 + 240) = v112;
          --*(_QWORD *)(a1 + 256);
          goto LABEL_252;
        }
      }
      return;
    case 2:
      v22 = *(_QWORD *)(a3 + 88);
      v21 = *(std::__shared_weak_count **)(a3 + 96);
      if (v21)
      {
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        v25 = (unint64_t *)&v21->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v22 == a4)
      {
        v27 = *(uint64_t **)(a1 + 272);
        if (v27)
        {
          v28 = (uint64_t *)(a1 + 272);
          v29 = *(_QWORD **)(a1 + 272);
          do
          {
            v30 = v29[4];
            v31 = v30 >= a2;
            if (v30 >= a2)
              v32 = v29;
            else
              v32 = v29 + 1;
            if (v31)
              v28 = v29;
            v29 = (_QWORD *)*v32;
          }
          while (*v32);
          if (v28 != (uint64_t *)(a1 + 272) && v28[4] <= a2)
          {
            v33 = (uint64_t *)v28[1];
            if (v33)
            {
              do
              {
                v34 = v33;
                v33 = (uint64_t *)*v33;
              }
              while (v33);
            }
            else
            {
              v115 = v28;
              do
              {
                v34 = (uint64_t *)v115[2];
                v10 = *v34 == (_QWORD)v115;
                v115 = v34;
              }
              while (!v10);
            }
            if (*(uint64_t **)(a1 + 264) == v28)
              *(_QWORD *)(a1 + 264) = v34;
            --*(_QWORD *)(a1 + 280);
            goto LABEL_252;
          }
        }
      }
      return;
    case 3:
      v36 = *(_QWORD *)(a3 + 88);
      v35 = *(std::__shared_weak_count **)(a3 + 96);
      if (v35)
      {
        v37 = (unint64_t *)&v35->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      if (v36)
      {
        v39 = *(_QWORD *)(a3 + 88);
        v4 = *(std::__shared_weak_count **)(a3 + 96);
        if (v4)
        {
          v40 = (unint64_t *)&v4->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        if (v39 != a4)
        {
          v42 = 0;
          goto LABEL_160;
        }
      }
      v83 = *(_QWORD *)(a3 + 104);
      v84 = *(std::__shared_weak_count **)(a3 + 112);
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      if (v83)
      {
        v87 = *(_QWORD *)(a3 + 104);
        v88 = *(std::__shared_weak_count **)(a3 + 112);
        if (!v88)
        {
          v42 = v87 == a4;
          if (!v84)
            goto LABEL_159;
LABEL_147:
          v93 = (unint64_t *)&v84->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
LABEL_159:
          if (!v36)
            goto LABEL_165;
LABEL_160:
          if (v4)
          {
            v97 = (unint64_t *)&v4->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
          }
          if (!v35)
            goto LABEL_169;
LABEL_165:
          v99 = (unint64_t *)&v35->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
            if (!v42)
              return;
          }
          else
          {
LABEL_169:
            if (!v42)
              return;
          }
          v27 = *(uint64_t **)(a1 + 296);
          if (v27)
          {
            v28 = (uint64_t *)(a1 + 296);
            v101 = *(_QWORD **)(a1 + 296);
            do
            {
              v102 = v101[4];
              v103 = v102 >= a2;
              if (v102 >= a2)
                v104 = v101;
              else
                v104 = v101 + 1;
              if (v103)
                v28 = v101;
              v101 = (_QWORD *)*v104;
            }
            while (*v104);
            if (v28 != (uint64_t *)(a1 + 296) && v28[4] <= a2)
            {
              v105 = (uint64_t *)v28[1];
              if (v105)
              {
                do
                {
                  v106 = v105;
                  v105 = (uint64_t *)*v105;
                }
                while (v105);
              }
              else
              {
                v114 = v28;
                do
                {
                  v106 = (uint64_t *)v114[2];
                  v10 = *v106 == (_QWORD)v114;
                  v114 = v106;
                }
                while (!v10);
              }
              if (*(uint64_t **)(a1 + 288) == v28)
                *(_QWORD *)(a1 + 288) = v106;
              --*(_QWORD *)(a1 + 304);
              goto LABEL_252;
            }
          }
          return;
        }
        v89 = (unint64_t *)&v88->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
        v42 = v87 == a4;
        v91 = (unint64_t *)&v88->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
          if (!v84)
            goto LABEL_159;
          goto LABEL_147;
        }
      }
      else
      {
        v42 = 1;
      }
      if (!v84)
        goto LABEL_159;
      goto LABEL_147;
    case 4:
      if (*(_QWORD *)(a3 + 88))
        v43 = (*(_QWORD *)(a3 + 120) != 0) + 1;
      else
        v43 = *(_QWORD *)(a3 + 120) != 0;
      if (*(_QWORD *)(a3 + 104))
        ++v43;
      if (*(_QWORD *)(a3 + 136))
        ++v43;
      if (v43 == 1)
      {
        v44 = (uint64_t *)(a1 + 224);
        v27 = *(uint64_t **)(a1 + 224);
        if (v27)
        {
          v28 = (uint64_t *)(a1 + 224);
          v45 = *(_QWORD **)(a1 + 224);
          do
          {
            v46 = v45[4];
            v47 = v46 >= a2;
            if (v46 >= a2)
              v48 = v45;
            else
              v48 = v45 + 1;
            if (v47)
              v28 = v45;
            v45 = (_QWORD *)*v48;
          }
          while (*v48);
          if (v28 != v44 && v28[4] <= a2)
          {
            v49 = (uint64_t *)v28[1];
            if (v49)
            {
              do
              {
                v50 = v49;
                v49 = (uint64_t *)*v49;
              }
              while (v49);
            }
            else
            {
              v113 = v28;
              do
              {
                v50 = (uint64_t *)v113[2];
                v10 = *v50 == (_QWORD)v113;
                v113 = v50;
              }
              while (!v10);
            }
            if (*(uint64_t **)(a1 + 216) == v28)
              *(_QWORD *)(a1 + 216) = v50;
            --*(_QWORD *)(a1 + 232);
LABEL_252:
            std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v27, v28);
            operator delete(v28);
          }
        }
      }
      return;
    default:
      return;
  }
}

uint64_t *altitude::GlobeCleanupLoader::onChildTileAdded(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v5 = (uint64_t *)result[43];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a3)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= a3)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(result + 43);
    v7 = (uint64_t **)(result + 43);
LABEL_8:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)v4[42];
    if (v10)
    {
      v4[42] = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[43], v11);
    ++v4[44];
  }
  return result;
}

void altitude::GlobeCleanupLoader::onChildTileRemoved(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)a1[43];
  if (v4)
  {
    v5 = a1 + 43;
    v6 = v4;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a3;
      if (v7 >= a3)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != a1 + 43 && v5[4] <= a3)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[42] == v5)
        a1[42] = v11;
      --a1[44];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v4, v5);
      operator delete(v5);
    }
  }
}

void `non-virtual thunk to'altitude::GlobeCleanupLoader::~GlobeCleanupLoader(altitude::GlobeCleanupLoader *this)
{
  altitude::GlobeCleanupLoader::~GlobeCleanupLoader((altitude::GlobeCleanupLoader *)((char *)this - 40));
}

{
  altitude::GlobeCleanupLoader::~GlobeCleanupLoader((altitude::GlobeCleanupLoader *)((char *)this - 40));
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'altitude::GlobeCleanupLoader::onTileComponentDataLoaded(uint64_t a1, unint64_t a2, uint64_t a3)
{
  altitude::GlobeCleanupLoader::onTileComponentDataLoaded(a1 - 40, a2, a3);
}

void `non-virtual thunk to'altitude::GlobeCleanupLoader::onTileComponentDataRelease(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  altitude::GlobeCleanupLoader::onTileComponentDataRelease(a1 - 40, a2, a3, a4);
}

uint64_t *`non-virtual thunk to'altitude::GlobeCleanupLoader::onChildTileAdded(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v5 = (uint64_t *)result[38];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a3)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= a3)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(result + 38);
    v7 = (uint64_t **)(result + 38);
LABEL_8:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)v4[37];
    if (v10)
    {
      v4[37] = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[38], v11);
    ++v4[39];
  }
  return result;
}

void `non-virtual thunk to'altitude::GlobeCleanupLoader::onChildTileRemoved(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)a1[38];
  if (v4)
  {
    v5 = a1 + 38;
    v6 = v4;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a3;
      if (v7 >= a3)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != a1 + 38 && v5[4] <= a3)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[37] == v5)
        a1[37] = v11;
      --a1[39];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v4, v5);
      operator delete(v5);
    }
  }
}

void altitude::GlobeCleanupLoader::fillRemoveList<altitude::TileGeometryPriorityLess>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t *v89;
  unint64_t v90;
  int64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  unint64_t v99;
  uint64_t v100;
  __int128 v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;

  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v7 = a5;
    v138 = (uint64_t)(a3 + 4);
    do
    {
      v10 = v6[4];
      if (*(_BYTE *)(a1 + 408))
      {
        v11 = *(_QWORD *)(v10 + 368);
        v12 = *(_QWORD *)(v10 + 328);
        if (v12)
        {
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
          if (v11 <= v13)
            v11 = v13;
        }
        v14 = *(_QWORD *)(v10 + 336);
        if (v14)
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
          if (v11 <= v15)
            v11 = v15;
        }
        v16 = *(_QWORD *)(v10 + 344);
        if (v16)
        {
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
          if (v11 <= v17)
            v11 = v17;
        }
        v18 = *(_QWORD *)(v10 + 352);
        if (v18)
        {
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          if (v11 <= v19)
            v11 = v19;
        }
        v20 = *(_QWORD *)(v10 + 360);
        if (v20)
        {
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
          if (v11 <= v21)
            v11 = v21;
        }
        v22 = v7 - v11;
        if (!*(_QWORD *)(v10 + 296))
          goto LABEL_141;
      }
      else
      {
        v22 = a4 - *(_QWORD *)(v10 + 376);
        if (!*(_QWORD *)(v10 + 296))
          goto LABEL_141;
      }
      v23 = *(unsigned int *)(a1 + 136);
      if (v22 <= v23 || a4 - (unint64_t)*(unsigned int *)(v10 + 388) <= v23)
        goto LABEL_141;
      v24 = (char *)a3[1];
      v25 = a3[2] - (_QWORD)v24;
      if (!v25)
      {
        v28 = a3[7];
        v27 = (char *)a3[1];
        v29 = v27;
        goto LABEL_120;
      }
      v26 = v25 >> 3;
      v27 = (char *)a3[1];
      do
      {
        v30 = v26 >> 1;
        v31 = &v27[8 * (v26 >> 1)];
        v32 = *(_QWORD *)v31;
        if (v10 | *(_QWORD *)v31)
        {
          if (v10 && !v32)
            goto LABEL_29;
          if (v10 || !v32)
          {
            v33 = *(_QWORD **)(v10 + 328);
            if (!v33)
              goto LABEL_29;
            v34 = *(_QWORD *)(v32 + 328);
            if (v34)
            {
              v35 = *(_QWORD *)(v34 + 120);
              if (v33[15])
              {
                if (!v35)
                  goto LABEL_30;
              }
              else if (v35)
              {
                goto LABEL_29;
              }
              v36 = *(_QWORD *)(v10 + 376);
              v37 = *(_QWORD *)(v32 + 376);
              if (v36 > v37)
                goto LABEL_29;
              if (v36 >= v37)
              {
                v38 = *(_DWORD *)(v10 + 384);
                v39 = *(_DWORD *)(v32 + 384);
                if (v38 > v39)
                  goto LABEL_29;
                if (v38 >= v39)
                {
                  v40 = *(_DWORD *)(v10 + 388);
                  v41 = *(_DWORD *)(v32 + 388);
                  if (v40 > v41)
                    goto LABEL_29;
                  if (v40 >= v41)
                  {
                    v125 = *(_QWORD *)(v10 + 368);
                    v42 = (*(uint64_t (**)(_QWORD *))(*v33 + 40))(v33);
                    v43 = v125;
                    if (v125 <= v42)
                      v43 = v42;
                    v44 = *(_QWORD *)(v10 + 336);
                    if (v44)
                    {
                      v126 = v43;
                      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
                      v43 = v126;
                      if (v126 <= v45)
                        v43 = v45;
                    }
                    v46 = *(_QWORD *)(v10 + 344);
                    if (v46)
                    {
                      v127 = v43;
                      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
                      v43 = v127;
                      if (v127 <= v47)
                        v43 = v47;
                    }
                    v48 = *(_QWORD *)(v10 + 352);
                    if (v48)
                    {
                      v128 = v43;
                      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
                      v43 = v128;
                      if (v128 <= v49)
                        v43 = v49;
                    }
                    v50 = *(_QWORD *)(v10 + 360);
                    if (v50)
                    {
                      v129 = v43;
                      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
                      v43 = v129;
                      if (v129 <= v51)
                        v43 = v51;
                    }
                    v130 = v43;
                    v52 = *(_QWORD *)(v32 + 368);
                    v53 = *(_QWORD *)(v32 + 328);
                    if (v53)
                    {
                      v115 = *(_QWORD *)(v32 + 368);
                      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
                      v52 = v115;
                      if (v115 <= v54)
                        v52 = v54;
                    }
                    v55 = *(_QWORD *)(v32 + 336);
                    if (v55)
                    {
                      v116 = v52;
                      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
                      v52 = v116;
                      if (v116 <= v56)
                        v52 = v56;
                    }
                    v57 = *(_QWORD *)(v32 + 344);
                    if (v57)
                    {
                      v117 = v52;
                      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
                      v52 = v117;
                      if (v117 <= v58)
                        v52 = v58;
                    }
                    v59 = *(_QWORD *)(v32 + 352);
                    if (v59)
                    {
                      v118 = v52;
                      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
                      v52 = v118;
                      if (v118 <= v60)
                        v52 = v60;
                    }
                    v61 = *(_QWORD *)(v32 + 360);
                    if (v61)
                    {
                      v119 = v52;
                      v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
                      v52 = v119;
                      if (v119 <= v62)
                        v52 = v62;
                    }
                    if (v130 > v52)
                    {
LABEL_29:
                      v27 = v31 + 8;
                      v30 = v26 + ~v30;
                      goto LABEL_30;
                    }
                    v63 = *(_QWORD *)(v10 + 368);
                    v64 = *(_QWORD *)(v10 + 328);
                    if (v64)
                    {
                      v131 = *(_QWORD *)(v10 + 368);
                      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
                      v63 = v131;
                      if (v131 <= v65)
                        v63 = v65;
                    }
                    v66 = *(_QWORD *)(v10 + 336);
                    if (v66)
                    {
                      v132 = v63;
                      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
                      v63 = v132;
                      if (v132 <= v67)
                        v63 = v67;
                    }
                    v68 = *(_QWORD *)(v10 + 344);
                    if (v68)
                    {
                      v133 = v63;
                      v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                      v63 = v133;
                      if (v133 <= v69)
                        v63 = v69;
                    }
                    v70 = *(_QWORD *)(v10 + 352);
                    if (v70)
                    {
                      v134 = v63;
                      v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
                      v63 = v134;
                      if (v134 <= v71)
                        v63 = v71;
                    }
                    v72 = *(_QWORD *)(v10 + 360);
                    if (v72)
                    {
                      v135 = v63;
                      v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 40))(v72);
                      v63 = v135;
                      if (v135 <= v73)
                        v63 = v73;
                    }
                    v136 = v63;
                    v74 = *(_QWORD *)(v32 + 368);
                    v75 = *(_QWORD *)(v32 + 328);
                    if (v75)
                    {
                      v120 = *(_QWORD *)(v32 + 368);
                      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
                      v74 = v120;
                      if (v120 <= v76)
                        v74 = v76;
                    }
                    v77 = *(_QWORD *)(v32 + 336);
                    if (v77)
                    {
                      v121 = v74;
                      v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 40))(v77);
                      v74 = v121;
                      if (v121 <= v78)
                        v74 = v78;
                    }
                    v79 = *(_QWORD *)(v32 + 344);
                    if (v79)
                    {
                      v122 = v74;
                      v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
                      v74 = v122;
                      if (v122 <= v80)
                        v74 = v80;
                    }
                    v81 = *(_QWORD *)(v32 + 352);
                    if (v81)
                    {
                      v123 = v74;
                      v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 40))(v81);
                      v74 = v123;
                      if (v123 <= v82)
                        v74 = v82;
                    }
                    v83 = *(_QWORD *)(v32 + 360);
                    if (v83)
                    {
                      v124 = v74;
                      v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
                      v74 = v124;
                      if (v124 <= v84)
                        v74 = v84;
                    }
                    if (v136 >= v74 && v10 > v32)
                    {
                      v30 = v26 + ~v30;
                      v27 = v31 + 8;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_30:
        v26 = v30;
      }
      while (v30);
      v24 = (char *)a3[1];
      v29 = (char *)a3[2];
      v28 = a3[7];
      if (v27 == v29)
      {
        v7 = a5;
LABEL_120:
        v91 = v29 - v24;
        v92 = (v29 - v24) >> 3;
        if (v92 >= v28)
          goto LABEL_141;
        v93 = a3[3];
        if ((unint64_t)v27 < v93)
        {
          *(_QWORD *)v27 = v10;
          v94 = v27 + 8;
          goto LABEL_154;
        }
        v96 = v92 + 1;
        if ((v92 + 1) >> 61)
          abort();
        v97 = v93 - (_QWORD)v24;
        if (v97 >> 2 > v96)
          v96 = v97 >> 2;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
          v96 = 0x1FFFFFFFFFFFFFFFLL;
        v137 = v96;
        if (v96)
        {
          if (v96 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v98 = operator new(8 * v96);
        }
        else
        {
          v98 = 0;
        }
        v104 = (unint64_t *)&v98[8 * v92];
        *v104 = v10;
        v94 = v104 + 1;
        if (v27 == v24)
        {
          v107 = v137;
        }
        else
        {
          v105 = v27 - v24 - 8;
          if (v105 >= 0x58 && (unint64_t)(v27 - v98 - v91) >= 0x20)
          {
            v110 = (v105 >> 3) + 1;
            v106 = &v27[-8 * (v110 & 0x3FFFFFFFFFFFFFFCLL)];
            v111 = &v98[8 * v92 - 16];
            v112 = v27 - 16;
            v113 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v114 = *(_OWORD *)v112;
              *(v111 - 1) = *((_OWORD *)v112 - 1);
              *v111 = v114;
              v111 -= 2;
              v112 -= 32;
              v113 -= 4;
            }
            while (v113);
            v104 -= v110 & 0x3FFFFFFFFFFFFFFCLL;
            v107 = v137;
            if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_149;
          }
          else
          {
            v106 = v27;
            v107 = v137;
            do
            {
LABEL_149:
              v108 = *((_QWORD *)v106 - 1);
              v106 -= 8;
              *--v104 = v108;
            }
            while (v106 != v24);
            v24 = (char *)a3[1];
          }
        }
        a3[1] = v104;
        a3[2] = v94;
        a3[3] = &v98[8 * v107];
        if (v24)
          operator delete(v24);
LABEL_154:
        a3[2] = v94;
        v7 = a5;
        v102 = (_QWORD *)v6[1];
        if (v102)
          goto LABEL_142;
        goto LABEL_155;
      }
      v86 = (v29 - v24) >> 3;
      if (v28 >= v86 + 1)
        v87 = v86 + 1;
      else
        v87 = a3[7];
      v88 = (unint64_t *)a3[4];
      v89 = (unint64_t *)a3[5];
      v90 = v89 - v88;
      v7 = a5;
      if (v87 <= v90)
      {
        if (v87 >= v90)
        {
          if (v88 == v89)
            goto LABEL_125;
          goto LABEL_137;
        }
        v89 = &v88[v87];
        a3[5] = v89;
        if (v88 != v89)
          goto LABEL_137;
LABEL_125:
        v95 = v89;
      }
      else
      {
        std::vector<altitude::TextureMap *>::__append(v138, v87 - v90);
        v24 = (char *)a3[1];
        v88 = (unint64_t *)a3[4];
        v89 = (unint64_t *)a3[5];
        if (v88 == v89)
          goto LABEL_125;
        do
        {
LABEL_137:
          if (v24 == v27)
          {
            *v88++ = v10;
            if (v88 == (unint64_t *)a3[5])
              break;
          }
          v99 = *(_QWORD *)v24;
          v24 += 8;
          *v88++ = v99;
        }
        while (v88 != (unint64_t *)a3[5]);
        v95 = (unint64_t *)a3[4];
        v24 = (char *)a3[1];
        v89 = v88;
      }
      v100 = a3[6];
      v101 = *((_OWORD *)a3 + 1);
      a3[1] = v95;
      a3[2] = v89;
      *(_OWORD *)(a3 + 5) = v101;
      a3[3] = v100;
      a3[4] = v24;
LABEL_141:
      v102 = (_QWORD *)v6[1];
      if (v102)
      {
        do
        {
LABEL_142:
          v103 = v102;
          v102 = (_QWORD *)*v102;
        }
        while (v102);
        goto LABEL_3;
      }
      do
      {
LABEL_155:
        v103 = (_QWORD *)v6[2];
        v109 = *v103 == (_QWORD)v6;
        v6 = v103;
      }
      while (!v109);
LABEL_3:
      v6 = v103;
    }
    while (v103 != v5);
  }
}

void geo::fixed_priority_queue<altitude::Tile *,altitude::TilePriorityLess>::push(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;

  v4 = (char *)a1[1];
  v5 = a1[2] - (_QWORD)v4;
  if (!v5)
  {
    v7 = (char *)a1[1];
    v61 = v7;
LABEL_92:
    v67 = v61 - v4;
    v68 = (v61 - v4) >> 3;
    if (v68 >= a1[7])
      return;
    v69 = a1[3];
    if ((unint64_t)v7 < v69)
    {
      *(_QWORD *)v7 = *a2;
      a1[2] = v7 + 8;
      return;
    }
    v71 = v68 + 1;
    if ((v68 + 1) >> 61)
      abort();
    v72 = v69 - (_QWORD)v4;
    if (v72 >> 2 > v71)
      v71 = v72 >> 2;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
      v73 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    if (v73)
    {
      if (v73 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v74 = operator new(8 * v73);
    }
    else
    {
      v74 = 0;
    }
    v78 = &v74[8 * v68];
    *v78 = *a2;
    v79 = v78 + 1;
    if (v7 == v4)
      goto LABEL_125;
    v80 = v7 - v4 - 8;
    if (v80 >= 0x58)
    {
      if ((unint64_t)(v7 - v74 - v67) >= 0x20)
      {
        v82 = (v80 >> 3) + 1;
        v81 = &v7[-8 * (v82 & 0x3FFFFFFFFFFFFFFCLL)];
        v83 = &v74[8 * v68 - 16];
        v84 = v7 - 16;
        v85 = v82 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v86 = *(_OWORD *)v84;
          *(v83 - 1) = *((_OWORD *)v84 - 1);
          *v83 = v86;
          v83 -= 2;
          v84 -= 32;
          v85 -= 4;
        }
        while (v85);
        v78 -= v82 & 0x3FFFFFFFFFFFFFFCLL;
        if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_125:
          a1[1] = v78;
          a1[2] = v79;
          a1[3] = &v74[8 * v73];
          if (v4)
            operator delete(v4);
          a1[2] = v79;
          return;
        }
      }
      else
      {
        v81 = v7;
      }
    }
    else
    {
      v81 = v7;
    }
    do
    {
      v87 = *((_QWORD *)v81 - 1);
      v81 -= 8;
      *--v78 = v87;
    }
    while (v81 != v4);
    v4 = (char *)a1[1];
    goto LABEL_125;
  }
  v6 = v5 >> 3;
  v7 = (char *)a1[1];
  do
  {
    v8 = v6 >> 1;
    v9 = &v7[8 * (v6 >> 1)];
    v10 = (_QWORD *)*a2;
    v11 = *(_QWORD **)v9;
    if (*a2 | *(_QWORD *)v9)
    {
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 0;
      if (v12)
        goto LABEL_3;
      if (v10 || v11 == 0)
      {
        v14 = v10[47];
        v15 = v11[47];
        if (v14 > v15)
          goto LABEL_3;
        if (v14 >= v15)
        {
          v16 = v10[46];
          v17 = v10[41];
          if (v17)
          {
            v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            if (v16 <= v18)
              v16 = v18;
          }
          v19 = v10[42];
          if (v19)
          {
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
            if (v16 <= v20)
              v16 = v20;
          }
          v21 = v10[43];
          if (v21)
          {
            v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
            if (v16 <= v22)
              v16 = v22;
          }
          v23 = v10[44];
          if (v23)
          {
            v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
            if (v16 <= v24)
              v16 = v24;
          }
          v25 = v10[45];
          if (v25)
          {
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
            if (v16 <= v26)
              v16 = v26;
          }
          v27 = v11[46];
          v28 = v11[41];
          if (v28)
          {
            v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
            if (v27 <= v29)
              v27 = v29;
          }
          v30 = v11[42];
          if (v30)
          {
            v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
            if (v27 <= v31)
              v27 = v31;
          }
          v32 = v11[43];
          if (v32)
          {
            v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
            if (v27 <= v33)
              v27 = v33;
          }
          v34 = v11[44];
          if (v34)
          {
            v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
            if (v27 <= v35)
              v27 = v35;
          }
          v36 = v11[45];
          if (v36)
          {
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
            if (v27 <= v37)
              v27 = v37;
          }
          if (v16 > v27)
          {
LABEL_3:
            v7 = v9 + 8;
            v8 = v6 + ~v8;
            goto LABEL_4;
          }
          v38 = v10[46];
          v39 = v10[41];
          if (v39)
          {
            v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
            if (v38 <= v40)
              v38 = v40;
          }
          v41 = v10[42];
          if (v41)
          {
            v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
            if (v38 <= v42)
              v38 = v42;
          }
          v43 = v10[43];
          if (v43)
          {
            v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
            if (v38 <= v44)
              v38 = v44;
          }
          v45 = v10[44];
          if (v45)
          {
            v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
            if (v38 <= v46)
              v38 = v46;
          }
          v47 = v10[45];
          if (v47)
          {
            v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
            if (v38 <= v48)
              v38 = v48;
          }
          v49 = v11[46];
          v50 = v11[41];
          if (v50)
          {
            v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
            if (v49 <= v51)
              v49 = v51;
          }
          v52 = v11[42];
          if (v52)
          {
            v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
            if (v49 <= v53)
              v49 = v53;
          }
          v54 = v11[43];
          if (v54)
          {
            v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
            if (v49 <= v55)
              v49 = v55;
          }
          v56 = v11[44];
          if (v56)
          {
            v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
            if (v49 <= v57)
              v49 = v57;
          }
          v58 = v11[45];
          if (v58)
          {
            v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
            if (v49 <= v59)
              v49 = v59;
          }
          if (v38 >= v49 && v10 > v11)
          {
            v8 = v6 + ~v8;
            v7 = v9 + 8;
          }
        }
      }
    }
LABEL_4:
    v6 = v8;
  }
  while (v8);
  v4 = (char *)a1[1];
  v61 = (char *)a1[2];
  if (v7 == v61)
    goto LABEL_92;
  v62 = (v61 - v4) >> 3;
  v63 = (_QWORD *)a1[4];
  if (a1[7] >= (unint64_t)(v62 + 1))
    v64 = v62 + 1;
  else
    v64 = a1[7];
  v65 = (_QWORD *)a1[5];
  v66 = v65 - v63;
  if (v64 <= v66)
  {
    if (v64 >= v66)
    {
      if (v63 == v65)
        goto LABEL_97;
      goto LABEL_110;
    }
    v65 = &v63[v64];
    a1[5] = v65;
    if (v63 != v65)
      goto LABEL_110;
LABEL_97:
    v70 = v65;
  }
  else
  {
    std::vector<altitude::TextureMap *>::__append((uint64_t)(a1 + 4), v64 - v66);
    v4 = (char *)a1[1];
    v63 = (_QWORD *)a1[4];
    v65 = (_QWORD *)a1[5];
    if (v63 == v65)
      goto LABEL_97;
    do
    {
LABEL_110:
      if (v4 == v7)
      {
        *v63++ = *a2;
        if (v63 == (_QWORD *)a1[5])
          break;
      }
      v75 = *(_QWORD *)v4;
      v4 += 8;
      *v63++ = v75;
    }
    while (v63 != (_QWORD *)a1[5]);
    v70 = (_QWORD *)a1[4];
    v4 = (char *)a1[1];
    v65 = v63;
  }
  v76 = a1[6];
  v77 = *((_OWORD *)a1 + 1);
  a1[1] = v70;
  a1[2] = v65;
  *(_OWORD *)(a1 + 5) = v77;
  a1[3] = v76;
  a1[4] = v4;
}

void altitude::GlobeCleanupLoader::pruneNodesAndGeometry(altitude::GlobeCleanupLoader *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  altitude::GlobeTileComponent *v17;
  uint64_t *v18;
  uint64_t *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t **v28;
  BOOL v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t **v47;
  uint64_t *v48;
  _BYTE *v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t *v77;
  uint64_t **v78;
  altitude::Tile *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  altitude::Tile *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t **v114;
  uint64_t **v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t **v120;
  uint64_t **v121;
  void *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t **v129;
  uint64_t **v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *i;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t **v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t **v142;
  uint64_t *v143;
  uint64_t **v144;
  uint64_t *v145;
  uint64_t v146;
  void *__p;
  uint64_t *v148;
  uint64_t v149;

  v2 = *(unsigned int *)(*((_QWORD *)this + 4) + 88);
  v145 = 0;
  v146 = 0;
  v144 = &v145;
  std::map<altitude::Tile *,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<altitude::Tile *,unsigned int>,std::__tree_node<std::__value_type<altitude::Tile *,unsigned int>,void *> *,long>>>((uint64_t *)&v144, *((_QWORD **)this + 21), (_QWORD *)this + 22);
  v3 = (uint64_t *)v144;
  if (v144 != &v145)
  {
    while (1)
    {
      v5 = v3[4];
      if (*((_BYTE *)this + 408))
      {
        v6 = *(_QWORD *)(v5 + 368);
        v7 = *(_QWORD *)(v5 + 328);
        if (v7)
        {
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          if (v6 <= v8)
            v6 = v8;
        }
        v9 = *(_QWORD *)(v5 + 336);
        if (v9)
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          if (v6 <= v10)
            v6 = v10;
        }
        v11 = *(_QWORD *)(v5 + 344);
        if (v11)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          if (v6 <= v12)
            v6 = v12;
        }
        v13 = *(_QWORD *)(v5 + 352);
        if (v13)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
          if (v6 <= v14)
            v6 = v14;
        }
        v15 = *(_QWORD *)(v5 + 360);
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          if (v6 <= v16)
            v6 = v16;
        }
      }
      else
      {
        v6 = *(_QWORD *)(v5 + 376);
      }
      v17 = *(altitude::GlobeTileComponent **)(v5 + 328);
      if (v6 != v2)
        break;
      if (*((_QWORD *)v17 + 19) == *((_QWORD *)v17 + 20))
        goto LABEL_42;
      __p = 0;
      v148 = 0;
      v149 = 0;
      altitude::GlobeTileComponent::setHiresTextures(v17, (uint64_t **)&__p);
      v18 = (uint64_t *)__p;
      if (!__p)
        goto LABEL_42;
      v19 = v148;
      v20 = __p;
      if (v148 != __p)
      {
        do
        {
          v21 = (std::__shared_weak_count *)*(v19 - 1);
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v19 -= 2;
        }
        while (v19 != v18);
        v20 = __p;
      }
      v148 = v18;
      operator delete(v20);
      v27 = (uint64_t *)v3[1];
      if (v27)
      {
        do
        {
LABEL_43:
          v28 = (uint64_t **)v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
        goto LABEL_4;
      }
      do
      {
LABEL_47:
        v28 = (uint64_t **)v3[2];
        v29 = *v28 == v3;
        v3 = (uint64_t *)v28;
      }
      while (!v29);
LABEL_4:
      v3 = (uint64_t *)v28;
      if (v28 == &v145)
        goto LABEL_2;
    }
    if (*(_QWORD *)(v5 + 296) || *((_QWORD *)v17 + 17) || *((_QWORD *)v17 + 26))
    {
      altitude::GlobeTileComponent::destroyGeometryElement(*(altitude::GlobeTileComponent **)(v5 + 328));
      v24 = (std::__shared_weak_count *)*((_QWORD *)v17 + 14);
      *((_QWORD *)v17 + 13) = 0;
      *((_QWORD *)v17 + 14) = 0;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
LABEL_42:
    v27 = (uint64_t *)v3[1];
    if (v27)
      goto LABEL_43;
    goto LABEL_47;
  }
LABEL_2:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v145);
  altitude::GlobeCleanupLoader::pruneOverlayElements(this, v2, v2);
  v148 = 0;
  v149 = 0;
  __p = &v148;
  std::set<altitude::Tile *>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::Tile *,std::__tree_node<altitude::Tile *,void *> *,long>>((uint64_t *)&__p, *((_QWORD **)this + 18), (_QWORD *)this + 19);
  v4 = (uint64_t *)__p;
  if (__p != &v148)
  {
    do
    {
      v30 = (_QWORD *)v4[4];
      v31 = v30[46];
      v32 = v30[41];
      if (v32)
      {
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
        if (v31 <= v33)
          v31 = v33;
      }
      v34 = v30[42];
      if (v34)
      {
        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
        if (v31 <= v35)
          v31 = v35;
      }
      v36 = v30[43];
      if (v36)
      {
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        if (v31 <= v37)
          v31 = v37;
      }
      v38 = v30[44];
      if (v38)
      {
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
        if (v31 <= v39)
          v31 = v39;
      }
      v40 = v30[45];
      if (v40)
      {
        v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
        if (v31 <= v41)
          v31 = v41;
      }
      if (v31 == v2)
        goto LABEL_76;
      if (v30[47] == v2)
        goto LABEL_76;
      v42 = v30[41];
      if (!*(_QWORD *)(v42 + 208))
        goto LABEL_76;
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v42 + 16) + 424) + 24))(*(_QWORD *)(*(_QWORD *)(v42 + 16) + 424), *(_QWORD *)(v42 + 16), v42);
      v43 = *(std::__shared_weak_count **)(v42 + 216);
      *(_QWORD *)(v42 + 208) = 0;
      *(_QWORD *)(v42 + 216) = 0;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
          if (!*(_QWORD *)(v42 + 208))
            goto LABEL_75;
LABEL_74:
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v42 + 16) + 424) + 16))(*(_QWORD *)(*(_QWORD *)(v42 + 16) + 424), *(_QWORD *)(v42 + 16), v42);
          goto LABEL_75;
        }
        if (*(_QWORD *)(v42 + 208))
          goto LABEL_74;
      }
LABEL_75:
      *(_DWORD *)(v42 + 224) = -1;
LABEL_76:
      v46 = (uint64_t *)v4[1];
      if (v46)
      {
        do
        {
          v47 = (uint64_t **)v46;
          v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (uint64_t **)v4[2];
          v29 = *v47 == v4;
          v4 = (uint64_t *)v47;
        }
        while (!v29);
      }
      v4 = (uint64_t *)v47;
    }
    while (v47 != &v148);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v148);
  v148 = 0;
  v149 = 0;
  __p = &v148;
  std::map<altitude::Tile *,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<altitude::Tile *,unsigned int>,std::__tree_node<std::__value_type<altitude::Tile *,unsigned int>,void *> *,long>>>((uint64_t *)&__p, *((_QWORD **)this + 39), (_QWORD *)this + 40);
  v48 = (uint64_t *)__p;
  if (__p != &v148)
  {
    do
    {
      v55 = (_QWORD *)v48[4];
      v56 = v55[46];
      v57 = v55[41];
      if (v57)
      {
        v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
        if (v56 <= v58)
          v56 = v58;
      }
      v59 = v55[42];
      if (v59)
      {
        v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
        if (v56 <= v60)
          v56 = v60;
      }
      v61 = v55[43];
      if (v61)
      {
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
        if (v56 <= v62)
          v56 = v62;
      }
      v63 = v55[44];
      if (v63)
      {
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
        if (v56 <= v64)
          v56 = v64;
      }
      v65 = v55[45];
      if (v65)
      {
        v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65);
        if (v56 <= v66)
          v56 = v66;
      }
      if (v56 == v2 || v55[47] == v2)
      {
LABEL_127:
        v75 = (uint64_t *)v48[1];
        if (!v75)
          goto LABEL_131;
        goto LABEL_128;
      }
      v67 = (_QWORD *)v55[41];
      v68 = v67[34];
      if (v68)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
        v67[34] = 0;
      }
      if (v67[17])
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(v67[2] + 424) + 24))(*(_QWORD *)(v67[2] + 424), v67[2], v67);
        v69 = (std::__shared_weak_count *)v67[18];
        v67[17] = 0;
        v67[18] = 0;
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
            if (!v67[17])
              goto LABEL_123;
LABEL_122:
            (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(v67[2] + 424) + 16))(*(_QWORD *)(v67[2] + 424), v67[2], v67);
            goto LABEL_123;
          }
          if (v67[17])
            goto LABEL_122;
        }
      }
LABEL_123:
      v72 = (std::__shared_weak_count *)v67[14];
      v67[13] = 0;
      v67[14] = 0;
      if (!v72)
        goto LABEL_127;
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (v74)
        goto LABEL_127;
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
      v75 = (uint64_t *)v48[1];
      if (!v75)
      {
        do
        {
LABEL_131:
          v76 = (uint64_t **)v48[2];
          v29 = *v76 == v48;
          v48 = (uint64_t *)v76;
        }
        while (!v29);
        goto LABEL_96;
      }
      do
      {
LABEL_128:
        v76 = (uint64_t **)v75;
        v75 = (uint64_t *)*v75;
      }
      while (v75);
LABEL_96:
      v48 = (uint64_t *)v76;
    }
    while (v76 != &v148);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v148);
  v49 = (_BYTE *)**((_QWORD **)this + 4);
  v50 = v49[434];
  v51 = v49[433];
  if (v49[432])
    v52 = v2;
  else
    v52 = v2 + 1;
  altitude::GlobeCleanupLoader::pruneRoadComponents(this, v52, v52);
  if (v50)
    v53 = v2;
  else
    v53 = v2 + 1;
  altitude::GlobeCleanupLoader::pruneTrafficComponents(this, v53, v53);
  if (v51)
    v54 = v2;
  else
    v54 = v2 + 1;
  altitude::GlobeCleanupLoader::pruneLabelDataComponents(this, v54, v54);
  v148 = 0;
  v149 = 0;
  __p = &v148;
  std::set<altitude::Tile *>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::Tile *,std::__tree_node<altitude::Tile *,void *> *,long>>((uint64_t *)&__p, *((_QWORD **)this + 42), (_QWORD *)this + 43);
  while (v149)
  {
    v145 = 0;
    v146 = 0;
    v144 = &v145;
    v77 = (uint64_t *)__p;
    v78 = &v145;
    if (__p == &v148)
      goto LABEL_212;
    do
    {
      v79 = (altitude::Tile *)v77[4];
      if (*((_QWORD *)v79 + 47) == v2)
        goto LABEL_205;
      v80 = *((_QWORD *)v79 + 46);
      v81 = *((_QWORD *)v79 + 41);
      if (v81)
      {
        v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 40))(v81);
        if (v80 <= v82)
          v80 = v82;
      }
      v83 = *((_QWORD *)v79 + 42);
      if (v83)
      {
        v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
        if (v80 <= v84)
          v80 = v84;
      }
      v85 = *((_QWORD *)v79 + 43);
      if (v85)
      {
        v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
        if (v80 <= v86)
          v80 = v86;
      }
      v87 = *((_QWORD *)v79 + 44);
      if (v87)
      {
        v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 40))(v87);
        if (v80 <= v88)
          v80 = v88;
      }
      v89 = *((_QWORD *)v79 + 45);
      if (v89)
      {
        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 40))(v89);
        if (v80 <= v90)
          v80 = v90;
      }
      if (v80 == v2)
        goto LABEL_205;
      v91 = *((_QWORD *)v79 + 38);
      v92 = *((_QWORD *)v79 + 39) - v91;
      if (!v92)
      {
LABEL_161:
        v96 = *((_QWORD *)v79 + 41);
        if (v96)
        {
          v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 48))(v96) ^ 1;
          v98 = *((_QWORD *)v79 + 42);
          if (v98)
            goto LABEL_163;
        }
        else
        {
          v97 = 0;
          v98 = *((_QWORD *)v79 + 42);
          if (v98)
LABEL_163:
            v97 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 48))(v98) ^ 1;
        }
        v99 = *((_QWORD *)v79 + 43);
        if (v99)
          v97 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 48))(v99) ^ 1;
        v100 = *((_QWORD *)v79 + 44);
        if (v100)
          v97 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 48))(v100) ^ 1;
        v101 = *((_QWORD *)v79 + 45);
        if (v101)
          v97 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 48))(v101) ^ 1;
        if (v97)
        {
          v102 = (altitude::Tile *)*((_QWORD *)v79 + 37);
          if (v102)
          {
            if (v145)
            {
              v103 = (uint64_t *)&v145;
              v104 = v145;
              do
              {
                v105 = v104;
                v106 = v103;
                v107 = v104[4];
                v108 = v104 + 1;
                if (v107 >= (unint64_t)v79)
                  v103 = v104;
                else
                  ++v104;
                v104 = (uint64_t *)*v104;
              }
              while (v104);
              if (v103 != (uint64_t *)&v145)
              {
                if (v107 < (unint64_t)v79)
                  v105 = v106;
                if ((unint64_t)v79 >= v105[4])
                {
                  v109 = v106 + 1;
                  if (v107 >= (unint64_t)v79)
                    v109 = v108;
                  v110 = (uint64_t *)*v109;
                  v111 = v103;
                  if (*v109)
                  {
                    do
                    {
                      v112 = (uint64_t **)v110;
                      v110 = (uint64_t *)*v110;
                    }
                    while (v110);
                  }
                  else
                  {
                    do
                    {
                      v112 = (uint64_t **)v111[2];
                      v29 = *v112 == v111;
                      v111 = (uint64_t *)v112;
                    }
                    while (!v29);
                  }
                  if (v144 == (uint64_t **)v103)
                    v144 = v112;
                  --v146;
                  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v145, v103);
                  operator delete(v103);
                  v102 = (altitude::Tile *)*((_QWORD *)v79 + 37);
                }
              }
            }
            altitude::Tile::removeChildTile(v102, v79);
            v113 = v145;
            v114 = &v145;
            v115 = &v145;
            if (v145)
            {
              while (1)
              {
                while (1)
                {
                  v115 = (uint64_t **)v113;
                  v116 = v113[4];
                  if ((unint64_t)v102 >= v116)
                    break;
                  v113 = *v115;
                  v114 = v115;
                  if (!*v115)
                    goto LABEL_199;
                }
                if (v116 >= (unint64_t)v102)
                  break;
                v113 = v115[1];
                if (!v113)
                {
                  v114 = v115 + 1;
                  goto LABEL_199;
                }
              }
            }
            else
            {
LABEL_199:
              v117 = (uint64_t *)operator new(0x28uLL);
              v117[4] = (uint64_t)v102;
              *v117 = 0;
              v117[1] = 0;
              v117[2] = (uint64_t)v115;
              *v114 = v117;
              if (*v144)
              {
                v144 = (uint64_t **)*v144;
                v118 = *v114;
              }
              else
              {
                v118 = v117;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v145, v118);
              ++v146;
            }
          }
        }
        goto LABEL_205;
      }
      v93 = 0;
      v94 = v92 >> 5;
      v95 = 1;
      while (!*(_QWORD *)(v91 + 32 * v93))
      {
        v93 = v95++;
        if (v94 <= v93)
          goto LABEL_161;
      }
LABEL_205:
      v119 = (uint64_t *)v77[1];
      if (v119)
      {
        do
        {
          v120 = (uint64_t **)v119;
          v119 = (uint64_t *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          v120 = (uint64_t **)v77[2];
          v29 = *v120 == v77;
          v77 = (uint64_t *)v120;
        }
        while (!v29);
      }
      v77 = (uint64_t *)v120;
    }
    while (v120 != &v148);
    v78 = v144;
    v121 = v144;
    if (v149)
    {
LABEL_212:
      v122 = __p;
      __p = &v148;
      v148[2] = 0;
      v148 = 0;
      v149 = 0;
      if (*((_QWORD *)v122 + 1))
        v123 = (uint64_t *)*((_QWORD *)v122 + 1);
      else
        v123 = (uint64_t *)v122;
      if (v123)
      {
        v124 = (uint64_t *)v123[2];
        if (v124)
        {
          v125 = (uint64_t *)*v124;
          if ((uint64_t *)*v124 == v123)
          {
            *v124 = 0;
            while (1)
            {
              v143 = (uint64_t *)v124[1];
              if (!v143)
                break;
              do
              {
                v124 = v143;
                v143 = (uint64_t *)*v143;
              }
              while (v143);
            }
          }
          else
          {
            for (v124[1] = 0; v125; v125 = (uint64_t *)v124[1])
            {
              do
              {
                v124 = v125;
                v125 = (uint64_t *)*v125;
              }
              while (v125);
            }
          }
        }
        if (v78 == &v145)
        {
          v126 = v123;
          v121 = &v145;
        }
        else
        {
          do
          {
            v126 = v124;
            v127 = v78[4];
            v123[4] = (uint64_t)v127;
            v128 = v148;
            v129 = &v148;
            v130 = &v148;
            if (v148)
            {
              do
              {
                while (1)
                {
                  v129 = (uint64_t **)v128;
                  if ((unint64_t)v127 >= v128[4])
                    break;
                  v128 = (uint64_t *)*v128;
                  v130 = v129;
                  if (!*v129)
                    goto LABEL_229;
                }
                v128 = (uint64_t *)v128[1];
              }
              while (v128);
              v130 = v129 + 1;
            }
LABEL_229:
            *v123 = 0;
            v123[1] = 0;
            v123[2] = (uint64_t)v129;
            *v130 = v123;
            if (*(_QWORD *)__p)
            {
              __p = *(void **)__p;
              v123 = *v130;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v148, v123);
            ++v149;
            if (v124)
            {
              v124 = (uint64_t *)v124[2];
              if (v124)
              {
                v132 = (uint64_t *)*v124;
                if ((uint64_t *)*v124 == v126)
                {
                  *v124 = 0;
                  while (1)
                  {
                    v133 = (uint64_t *)v124[1];
                    if (!v133)
                      break;
                    do
                    {
                      v124 = v133;
                      v133 = (uint64_t *)*v133;
                    }
                    while (v133);
                  }
                }
                else
                {
                  for (v124[1] = 0; v132; v132 = (uint64_t *)v124[1])
                  {
                    do
                    {
                      v124 = v132;
                      v132 = (uint64_t *)*v132;
                    }
                    while (v132);
                  }
                }
              }
            }
            else
            {
              v124 = 0;
            }
            v131 = v78[1];
            if (v131)
            {
              do
              {
                v121 = (uint64_t **)v131;
                v131 = (uint64_t *)*v131;
              }
              while (v131);
            }
            else
            {
              do
              {
                v121 = (uint64_t **)v78[2];
                v29 = *v121 == (uint64_t *)v78;
                v78 = v121;
              }
              while (!v29);
            }
            if (!v126)
              break;
            v78 = v121;
            v123 = v126;
          }
          while (v121 != &v145);
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v126);
        if (v124)
        {
          for (i = (uint64_t *)v124[2]; i; i = (uint64_t *)i[2])
            v124 = i;
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v124);
        }
      }
      else
      {
        v121 = v78;
      }
    }
    if (v121 != &v145)
    {
      do
      {
        v135 = (uint64_t *)operator new(0x28uLL);
        v136 = v135;
        v137 = v121[4];
        v135[4] = (uint64_t)v137;
        v138 = v148;
        v139 = &v148;
        v140 = &v148;
        if (v148)
        {
          do
          {
            while (1)
            {
              v139 = (uint64_t **)v138;
              if ((unint64_t)v137 >= v138[4])
                break;
              v138 = (uint64_t *)*v138;
              v140 = v139;
              if (!*v139)
                goto LABEL_267;
            }
            v138 = (uint64_t *)v138[1];
          }
          while (v138);
          v140 = v139 + 1;
        }
LABEL_267:
        *v135 = 0;
        v135[1] = 0;
        v135[2] = (uint64_t)v139;
        *v140 = v135;
        if (*(_QWORD *)__p)
        {
          __p = *(void **)__p;
          v136 = *v140;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v148, v136);
        ++v149;
        v141 = v121[1];
        if (v141)
        {
          do
          {
            v142 = (uint64_t **)v141;
            v141 = (uint64_t *)*v141;
          }
          while (v141);
        }
        else
        {
          do
          {
            v142 = (uint64_t **)v121[2];
            v29 = *v142 == (uint64_t *)v121;
            v121 = v142;
          }
          while (!v29);
        }
        v121 = v142;
      }
      while (v142 != &v145);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v145);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v148);
}

void altitude::GlobeCleanupLoader::pruneOverlayElements(altitude::GlobeCleanupLoader *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  altitude::OverlayTileComponent *v20;
  _QWORD *v21;
  _QWORD **v22;
  BOOL v23;
  _QWORD **v24;
  _QWORD *v25[2];

  v25[0] = 0;
  v25[1] = 0;
  v24 = v25;
  std::set<altitude::Tile *>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::Tile *,std::__tree_node<altitude::Tile *,void *> *,long>>((uint64_t *)&v24, *((_QWORD **)this + 27), (_QWORD *)this + 28);
  v6 = v24;
  if (v24 != v25)
  {
    do
    {
      v7 = (_QWORD *)v6[4];
      if (*((_BYTE *)this + 408))
      {
        v8 = v7[46];
        v9 = v7[41];
        if (v9)
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          if (v8 <= v10)
            v8 = v10;
        }
        v11 = v7[42];
        if (v11)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          if (v8 <= v12)
            v8 = v12;
        }
        v13 = v7[43];
        if (v13)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
          if (v8 <= v14)
            v8 = v14;
        }
        v15 = v7[44];
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          if (v8 <= v16)
            v8 = v16;
        }
        v17 = v7[45];
        if (v17)
        {
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          if (v8 <= v18)
            v8 = v18;
        }
      }
      else
      {
        v8 = v7[47];
      }
      if (*((_BYTE *)this + 408))
        v19 = a2;
      else
        v19 = a3;
      if (v8 != v19)
      {
        v20 = (altitude::OverlayTileComponent *)v7[45];
        if (v20)
          altitude::OverlayTileComponent::destroyOverlayElementsAndData(v20);
      }
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = (_QWORD **)v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD **)v6[2];
          v23 = *v22 == v6;
          v6 = v22;
        }
        while (!v23);
      }
      v6 = v22;
    }
    while (v22 != v25);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v25[0]);
}

void altitude::GlobeCleanupLoader::pruneRoadComponents(altitude::GlobeCleanupLoader *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD **v22;
  BOOL v23;
  _QWORD **v24;
  _QWORD *v25[2];

  v25[0] = 0;
  v25[1] = 0;
  v24 = v25;
  std::set<altitude::Tile *>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::Tile *,std::__tree_node<altitude::Tile *,void *> *,long>>((uint64_t *)&v24, *((_QWORD **)this + 30), (_QWORD *)this + 31);
  v6 = v24;
  if (v24 != v25)
  {
    do
    {
      v7 = (_QWORD *)v6[4];
      if (*((_BYTE *)this + 408))
      {
        v8 = v7[46];
        v9 = v7[41];
        if (v9)
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          if (v8 <= v10)
            v8 = v10;
        }
        v11 = v7[42];
        if (v11)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          if (v8 <= v12)
            v8 = v12;
        }
        v13 = v7[43];
        if (v13)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
          if (v8 <= v14)
            v8 = v14;
        }
        v15 = v7[44];
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          if (v8 <= v16)
            v8 = v16;
        }
        v17 = v7[45];
        if (v17)
        {
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          if (v8 <= v18)
            v8 = v18;
        }
      }
      else
      {
        v8 = v7[47];
      }
      if (*((_BYTE *)this + 408))
        v19 = a2;
      else
        v19 = a3;
      if (v8 != v19)
      {
        v20 = v7[42];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v7[42] = 0;
        }
      }
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = (_QWORD **)v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD **)v6[2];
          v23 = *v22 == v6;
          v6 = v22;
        }
        while (!v23);
      }
      v6 = v22;
    }
    while (v22 != v25);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v25[0]);
}

void altitude::GlobeCleanupLoader::pruneTrafficComponents(altitude::GlobeCleanupLoader *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD **v22;
  BOOL v23;
  _QWORD **v24;
  _QWORD *v25[2];

  v25[0] = 0;
  v25[1] = 0;
  v24 = v25;
  std::set<altitude::Tile *>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::Tile *,std::__tree_node<altitude::Tile *,void *> *,long>>((uint64_t *)&v24, *((_QWORD **)this + 33), (_QWORD *)this + 34);
  v6 = v24;
  if (v24 != v25)
  {
    do
    {
      v7 = (_QWORD *)v6[4];
      if (*((_BYTE *)this + 408))
      {
        v8 = v7[46];
        v9 = v7[41];
        if (v9)
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          if (v8 <= v10)
            v8 = v10;
        }
        v11 = v7[42];
        if (v11)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          if (v8 <= v12)
            v8 = v12;
        }
        v13 = v7[43];
        if (v13)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
          if (v8 <= v14)
            v8 = v14;
        }
        v15 = v7[44];
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          if (v8 <= v16)
            v8 = v16;
        }
        v17 = v7[45];
        if (v17)
        {
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          if (v8 <= v18)
            v8 = v18;
        }
      }
      else
      {
        v8 = v7[47];
      }
      if (*((_BYTE *)this + 408))
        v19 = a2;
      else
        v19 = a3;
      if (v8 != v19)
      {
        v20 = v7[43];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v7[43] = 0;
        }
      }
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = (_QWORD **)v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD **)v6[2];
          v23 = *v22 == v6;
          v6 = v22;
        }
        while (!v23);
      }
      v6 = v22;
    }
    while (v22 != v25);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v25[0]);
}

void altitude::GlobeCleanupLoader::pruneLabelDataComponents(altitude::GlobeCleanupLoader *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD **v22;
  BOOL v23;
  _QWORD **v24;
  _QWORD *v25[2];

  v25[0] = 0;
  v25[1] = 0;
  v24 = v25;
  std::set<altitude::Tile *>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::Tile *,std::__tree_node<altitude::Tile *,void *> *,long>>((uint64_t *)&v24, *((_QWORD **)this + 36), (_QWORD *)this + 37);
  v6 = v24;
  if (v24 != v25)
  {
    do
    {
      v7 = (_QWORD *)v6[4];
      if (*((_BYTE *)this + 408))
      {
        v8 = v7[46];
        v9 = v7[41];
        if (v9)
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          if (v8 <= v10)
            v8 = v10;
        }
        v11 = v7[42];
        if (v11)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          if (v8 <= v12)
            v8 = v12;
        }
        v13 = v7[43];
        if (v13)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
          if (v8 <= v14)
            v8 = v14;
        }
        v15 = v7[44];
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          if (v8 <= v16)
            v8 = v16;
        }
        v17 = v7[45];
        if (v17)
        {
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          if (v8 <= v18)
            v8 = v18;
        }
      }
      else
      {
        v8 = v7[47];
      }
      if (*((_BYTE *)this + 408))
        v19 = a2;
      else
        v19 = a3;
      if (v8 != v19)
      {
        v20 = v7[44];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v7[44] = 0;
        }
      }
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = (_QWORD **)v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD **)v6[2];
          v23 = *v22 == v6;
          v6 = v22;
        }
        while (!v23);
      }
      v6 = v22;
    }
    while (v22 != v25);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v25[0]);
}

uint64_t *std::set<altitude::Tile *>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::Tile *,std::__tree_node<altitude::Tile *,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v9 = (uint64_t *)v5[1];
        v10 = v6;
        if (v7)
        {
          do
          {
            v8 = v9;
            v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = v4[4];
        if (v8[4] >= v12)
          break;
      }
      v13 = (uint64_t **)v6;
      v14 = (uint64_t **)v6;
      if (!v7)
        goto LABEL_19;
      v13 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        v14 = (uint64_t **)v8;
LABEL_19:
        v16 = (uint64_t *)operator new(0x28uLL);
        v16[4] = v4[4];
        *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *v13 = v16;
        v17 = *(_QWORD *)*v5;
        if (v17)
        {
          *v5 = v17;
          v18 = *v13;
        }
        else
        {
          v18 = v16;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v18);
        ++v5[2];
      }
LABEL_23:
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v11 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v11);
      }
      v4 = v20;
      if (v20 == a3)
        return result;
    }
    v13 = (uint64_t **)v6;
    v14 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v7;
          v15 = v7[4];
          if (v12 >= v15)
            break;
          v7 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_19;
        }
        if (v15 >= v12)
          goto LABEL_23;
        v13 = v14 + 1;
        v7 = v14[1];
        if (!v7)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t *std::map<altitude::Tile *,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<altitude::Tile *,unsigned int>,std::__tree_node<std::__value_type<altitude::Tile *,unsigned int>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = v4 + 4;
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v10 = (uint64_t *)v5[1];
        v11 = v6;
        if (v8)
        {
          do
          {
            v9 = v10;
            v10 = (uint64_t *)v10[1];
          }
          while (v10);
        }
        else
        {
          do
          {
            v9 = (uint64_t *)v11[2];
            v12 = *v9 == (_QWORD)v11;
            v11 = v9;
          }
          while (v12);
        }
        v13 = *v7;
        if (v9[4] >= *v7)
          break;
      }
      v14 = (uint64_t **)v6;
      v15 = (uint64_t **)v6;
      if (!v8)
        goto LABEL_19;
      v14 = (uint64_t **)(v9 + 1);
      if (!v9[1])
      {
        v15 = (uint64_t **)v9;
LABEL_19:
        v17 = operator new(0x30uLL);
        v17[2] = *(_OWORD *)v7;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = v15;
        *v14 = (uint64_t *)v17;
        v18 = *(_QWORD *)*v5;
        if (v18)
        {
          *v5 = v18;
          v19 = *v14;
        }
        else
        {
          v19 = (uint64_t *)v17;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
        ++v5[2];
      }
LABEL_23:
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v12 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v12);
      }
      v4 = v21;
      if (v21 == a3)
        return result;
    }
    v14 = (uint64_t **)v6;
    v15 = (uint64_t **)v6;
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v8;
          v16 = v8[4];
          if (v13 >= v16)
            break;
          v8 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_19;
        }
        if (v16 >= v13)
          goto LABEL_23;
        v14 = v15 + 1;
        v8 = v15[1];
        if (!v8)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  return result;
}

void ggl::Blur::XPipelineState::~XPipelineState(ggl::Blur::XPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Blur::XPipelineSetup::~XPipelineSetup(ggl::Blur::XPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Blur::XPipelineSetup::constantDataIsEnabled(ggl::Blur::XPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Blur::XPipelineSetup::textureIsEnabled(ggl::Blur::XPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Blur::YPipelineState::~YPipelineState(ggl::Blur::YPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Blur::YPipelineSetup::~YPipelineSetup(ggl::Blur::YPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Blur::YPipelineSetup::constantDataIsEnabled(ggl::Blur::YPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Blur::YPipelineSetup::textureIsEnabled(ggl::Blur::YPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Blur::Downsample4XPipelineState::~Downsample4XPipelineState(ggl::Blur::Downsample4XPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Blur::Downsample4XPipelineSetup::~Downsample4XPipelineSetup(ggl::Blur::Downsample4XPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Blur::Downsample4XPipelineSetup::constantDataIsEnabled(ggl::Blur::Downsample4XPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Blur::Downsample4XPipelineSetup::textureIsEnabled(ggl::Blur::Downsample4XPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void sub_19F9895CC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1A1AF4E00](v2, 0x1000C40B98A05D4);

  _Unwind_Resume(a1);
}

void sub_19F989BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x1A1AF4E00](v4, 0x1000C40B98A05D4);

  _Unwind_Resume(a1);
}

void sub_19F98A0DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F98A0F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F98A3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::mun::MuninViewDataRequester::~MuninViewDataRequester(md::mun::MuninViewDataRequester *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::mun::MuninViewDataRequester::requestDataKeys(md::mun::MuninViewDataRequester *this, const gdc::SelectionContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  gdc::LayerDataCollector *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  unint64_t v18;
  char v19[8];
  void *v20;
  void *v21;
  char v22;
  QuadTile v23;
  uint64_t v24;
  char v25[32];
  unint64_t v26;
  char v27[96];
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 10);
  v3 = *((_QWORD *)a2 + 11);
  if (v2 != v3)
  {
    v5 = (gdc::LayerDataCollector *)*((_QWORD *)a2 + 1);
    do
    {
      md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)v27, *((_QWORD *)a2 + 9), *(_QWORD *)v2);
      if (v27[0])
      {
        v6 = *(_QWORD *)v2;
        v7 = *(unsigned __int8 *)(v2 + 8);
        v8 = *(unsigned __int8 *)(v2 + 9);
        v9 = *(unsigned __int8 *)(v2 + 10);
        *(_QWORD *)&v23._type = v25;
        *(_QWORD *)&v23._xIdx = v25;
        v23._hash = (unint64_t)v25;
        v24 = 32;
        v26 = 0;
        v10 = ((unint64_t)v31 << 32) | (v7 << 16) | v8;
        v18 = v32;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v23, v25, (char *)&v18, v19);
        v18 = v6;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v23, *(char **)&v23._xIdx, (char *)&v18, v19);
        v18 = v10;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v23, *(char **)&v23._xIdx, (char *)&v18, v19);
        v18 = v9;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v23, *(char **)&v23._xIdx, (char *)&v18, v19);
        v11 = *(unsigned __int8 **)&v23._type;
        v12 = *(_QWORD *)&v23._xIdx - *(_QWORD *)&v23._type;
        if (*(_QWORD *)&v23._xIdx == *(_QWORD *)&v23._type)
        {
          v13 = 0;
        }
        else
        {
          v13 = 0;
          if (v12 <= 1)
            v12 = 1;
          do
          {
            v14 = *v11++;
            v13 ^= (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL + v14;
            --v12;
          }
          while (v12);
        }
        v26 = v13;
        gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v18, 0, 0x24u, (uint64_t)&v23, -1073741827);
        if (*(_QWORD *)&v23._type != v23._hash)
          free(*(void **)&v23._type);
        *(_WORD *)&v23._type = 255;
        v23._yIdx = 0;
        v23._xIdx = 0;
        gdc::LayerDataCollector::addDataKey(v5, (const gdc::LayerDataRequestKey *)&v18, &v23);
        if (v22)
          v22 = 0;
        if (v20 != v21)
          free(v20);
        if (v27[0])
        {
          v15 = v28;
          v16 = v29;
          if (v28 != v29)
          {
            do
            {
              v17 = (void *)v15[31];
              if (v17 != (void *)v15[33])
                free(v17);
              v15 += 36;
            }
            while (v15 != v16);
            v15 = v28;
          }
          if (v15 != v30)
            free(v15);
        }
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void altitude::FlyoverNightRenderable::~FlyoverNightRenderable(altitude::FlyoverNightRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5C08;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5C08;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::FlyoverRenderableBase<altitude::FlyoverNightRenderableDesc>::~FlyoverRenderableBase(altitude::Renderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5C08;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C5C08;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  altitude::Renderable::~Renderable(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::construct_at[abi:nn180100]<ggl::CommonMesh::Pos4UVMesh,char const(&)[16],std::shared_ptr<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>> const&,std::shared_ptr<ggl::IndexData> const&,ggl::CommonMesh::Pos4UVMesh*>(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16[2];
  uint64_t v17;
  std::__shared_weak_count *v18;

  v17 = a3;
  v18 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a5[1];
  v16[0] = *a5;
  v16[1] = (uint64_t)v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(a1, a2, &v17, v16);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(a1, a2, &v17, v16);
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<ggl::FlyoverNight::FlyoverPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverNight::FlyoverPipelineSetup>,std::allocator<ggl::FlyoverNight::FlyoverPipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverNight::FlyoverPipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::FlyoverNight::FlyoverPipelineSetup>,std::allocator<ggl::FlyoverNight::FlyoverPipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t altitude::FlyoverNightRenderable::FlyoverNightRenderable(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, _DWORD *a9, _DWORD *a10)
{
  char v13;
  uint64_t v14;
  ggl::FlyoverNight::FlyoverPipelineSetup *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  uint64_t v69;
  int8x16_t v70;
  double v71;
  int8x16_t v72;
  double v73;
  double v74;
  int8x16_t v75;
  int8x16_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  _OWORD *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD *v91;
  unint64_t v92;
  _DWORD *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  __int128 v123;
  _OWORD v129[6];
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v13 = *(_BYTE *)(a7 + 96);
  v14 = operator new();
  *(_QWORD *)v14 = &off_1E42B59B0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = "";
  *(_DWORD *)(v14 + 40) = 0;
  *(_DWORD *)(v14 + 56) = 1065353216;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(int64x2_t *)(v14 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v14 + 112) = 0;
  v15 = (ggl::FlyoverNight::FlyoverPipelineSetup *)operator new();
  ggl::FlyoverNight::FlyoverPipelineSetup::FlyoverPipelineSetup(v15);
  v16 = (std::__shared_weak_count *)operator new();
  v17 = v16;
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7720;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = &off_1E42C3938;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFF00000002;
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 172) = -1;
  *(_BYTE *)(a1 + 180) = 1;
  *(_QWORD *)(a1 + 184) = v14;
  *(_QWORD *)(a1 + 192) = v15;
  *(_QWORD *)(a1 + 200) = v16;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v123 = _Q0;
  *(_OWORD *)(a1 + 232) = _Q0;
  v25 = a1 + 256;
  *(_QWORD *)(a1 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
  }
  *(_QWORD *)a1 = &off_1E42C5C08;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_BYTE *)(a1 + 312) = v13;
  v27 = *(_QWORD *)(a1 + 192);
  v28 = *(uint64_t **)(v27 + 64);
  v28[1] = 0;
  v29 = *a2;
  *v28 = *a2;
  v30 = *(_QWORD **)(v27 + 160);
  v31 = a2[1];
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (std::__shared_weak_count *)v30[1];
  *v30 = v29;
  v30[1] = v31;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v37->__shared_owners_ = 0;
  v38 = (unint64_t *)&v37->__shared_owners_;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
  v39 = ggl::BufferData::BufferData((uint64_t)&v37[1], qword_1EE550AB8, 2, 1, 6, 1);
  v37[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
  v37[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
  v40 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v40 + 16) = v39;
  *(_QWORD *)(v40 + 24) = 0;
  v41 = *(_QWORD *)(v27 + 160);
  do
    v42 = __ldxr(v38);
  while (__stxr(v42 + 1, v38));
  v43 = *(std::__shared_weak_count **)(v41 + 24);
  *(_QWORD *)(v41 + 16) = v39;
  *(_QWORD *)(v41 + 24) = v37;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  do
    v46 = __ldaxr(v38);
  while (__stlxr(v46 - 1, v38));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  v47 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v47->__shared_owners_ = 0;
  v48 = (unint64_t *)&v47->__shared_owners_;
  v47->__shared_weak_owners_ = 0;
  v47->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
  v49 = ggl::BufferData::BufferData((uint64_t)&v47[1], qword_1EE550C18, 2, 1, 6, 1);
  v47[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
  v47[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
  v50 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v50 + 32) = v49;
  *(_QWORD *)(v50 + 40) = 0;
  v51 = *(_QWORD *)(v27 + 160);
  do
    v52 = __ldxr(v48);
  while (__stxr(v52 + 1, v48));
  v53 = *(std::__shared_weak_count **)(v51 + 40);
  *(_QWORD *)(v51 + 32) = v49;
  *(_QWORD *)(v51 + 40) = v47;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v48);
  while (__stlxr(v56 - 1, v48));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  v57 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v57->__shared_owners_ = 0;
  v58 = (unint64_t *)&v57->__shared_owners_;
  v57->__shared_weak_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
  v59 = ggl::BufferData::BufferData((uint64_t)&v57[1], qword_1EE550B78, 2, 1, 6, 1);
  v57[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
  v57[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
  v60 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v60 + 48) = v59;
  *(_QWORD *)(v60 + 56) = 0;
  v61 = *(_QWORD *)(v27 + 160);
  do
    v62 = __ldxr(v58);
  while (__stxr(v62 + 1, v58));
  v63 = *(std::__shared_weak_count **)(v61 + 56);
  *(_QWORD *)(v61 + 48) = v59;
  *(_QWORD *)(v61 + 56) = v57;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  do
    v66 = __ldaxr(v58);
  while (__stlxr(v66 - 1, v58));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  v67 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v67->__shared_owners_ = 0;
  v68 = (unint64_t *)&v67->__shared_owners_;
  v67->__shared_weak_owners_ = 0;
  v67->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
  v69 = ggl::BufferData::BufferData((uint64_t)&v67[1], qword_1EE550BD8, 2, 1, 6, 1);
  v67[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
  v67[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
  v77 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v77 + 64) = v69;
  *(_QWORD *)(v77 + 72) = 0;
  v78 = *(_QWORD *)(v27 + 160);
  do
    v79 = __ldxr(v68);
  while (__stxr(v79 + 1, v68));
  v80 = *(std::__shared_weak_count **)(v78 + 72);
  *(_QWORD *)(v78 + 64) = v69;
  *(_QWORD *)(v78 + 72) = v67;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  do
    v83 = __ldaxr(v68);
  while (__stlxr(v83 - 1, v68));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  **(_QWORD **)(v27 + 96) = a2[32];
  altitude::util::computeLocalClipPlanes(a4, (uint64_t)v129, 1.04999995, v70, v71, v72, v73, v74, v75, v76);
  v84 = *(_QWORD *)(v27 + 64);
  v85 = *(_QWORD **)(v84 + 32);
  v86 = v85[1];
  v87 = (_OWORD *)v85[9];
  v88 = v129[1];
  *v87 = v129[0];
  v87[1] = v88;
  v89 = v129[3];
  v87[2] = v129[2];
  v87[3] = v89;
  v90 = v129[5];
  v87[4] = v129[4];
  v87[5] = v90;
  if (v85[8] > v86)
    v86 = v85[8];
  v85[7] = 0;
  v85[8] = v86;
  v91 = *(_QWORD **)(v84 + 64);
  v92 = v91[1];
  v93 = (_DWORD *)v91[9];
  *v93 = *a10;
  v93[1] = a10[1];
  v93[2] = *a9;
  v93[3] = a9[1];
  if (v91[8] > v92)
    v92 = v91[8];
  v91[7] = 0;
  v91[8] = v92;
  v94 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v94->__shared_owners_ = 0;
  v95 = (unint64_t *)&v94->__shared_owners_;
  v94->__shared_weak_owners_ = 0;
  v94->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE570;
  v96 = v94 + 1;
  std::construct_at[abi:nn180100]<ggl::CommonMesh::Pos4UVMesh,char const(&)[16],std::shared_ptr<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>> const&,std::shared_ptr<ggl::IndexData> const&,ggl::CommonMesh::Pos4UVMesh*>((uint64_t)&v94[1], (uint64_t)"/meshes/flyover", *(_QWORD *)a5, *(std::__shared_weak_count **)(a5 + 8), a6);
  do
    v97 = __ldxr(v95);
  while (__stxr(v97 + 1, v95));
  do
    v98 = __ldxr(v95);
  while (__stxr(v98 + 1, v95));
  v99 = *(std::__shared_weak_count **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = v96;
  *(_QWORD *)(a1 + 224) = v94;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = *(_QWORD *)(a1 + 184);
  if (v102)
    *(_QWORD *)(v102 + 64) = v96;
  do
    v103 = __ldaxr(v95);
  while (__stlxr(v103 - 1, v95));
  if (!v103)
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
  }
  if (*(_BYTE *)(a1 + 312))
    v104 = a2 + 31;
  else
    v104 = a2 + 30;
  *(_QWORD *)(a1 + 208) = *v104;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
  *(_OWORD *)(a1 + 232) = v123;
  *(_QWORD *)(a1 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 64) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 32) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) = *(_QWORD *)(a1 + 208);
  do
    v105 = __ldaxr(v95);
  while (__stlxr(v105 - 1, v95));
  if (!v105)
  {
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
  }
  *(_QWORD *)a1 = &off_1E42C5ED8;
  v106 = *(_QWORD **)(a1 + 256);
  v107 = *(_QWORD *)(a1 + 264) - (_QWORD)v106;
  if (v107 > 0xF)
  {
    if (v107 != 16)
      *(_QWORD *)(a1 + 264) = v106 + 2;
  }
  else
  {
    std::vector<altitude::TextureMap *>::__append(a1 + 256, 2 - (v107 >> 3));
    v106 = *(_QWORD **)v25;
  }
  *v106 = a7;
  *(_QWORD *)(*(_QWORD *)v25 + 8) = a8;
  v109 = a2[6];
  v108 = a2[7];
  if (v108)
  {
    v110 = (unint64_t *)(v108 + 8);
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v112 = *(std::__shared_weak_count **)(a1 + 288);
  *(_QWORD *)(a1 + 280) = v109;
  *(_QWORD *)(a1 + 288) = v108;
  if (v112)
  {
    v113 = (unint64_t *)&v112->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v116 = a2[8];
  v115 = a2[9];
  if (v115)
  {
    v117 = (unint64_t *)(v115 + 8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  v119 = *(std::__shared_weak_count **)(a1 + 304);
  *(_QWORD *)(a1 + 296) = v116;
  *(_QWORD *)(a1 + 304) = v115;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(a1 + 192), *(_QWORD *)(a1 + 280), *(std::__shared_weak_count **)(a1 + 288));
  return a1;
}

void altitude::FlyoverNightRenderable::setup(altitude::FlyoverNightRenderable *this, altitude::View *a2, uint64_t a3, float a4)
{
  ggl::PipelineSetup *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  _QWORD *v58;
  unint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  float32x4_t v83;
  float32x4_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98[16];
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107[7];
  float64x2_t v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  if (*((_BYTE *)this + 312))
  {
    v8 = (ggl::PipelineSetup *)*((_QWORD *)this + 24);
    v9 = *((_QWORD *)this + 37);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
LABEL_3:
    ggl::Flyover::FlyoverPipelineSetup::setState(v8, v9, v10);
    goto LABEL_4;
  }
  if (a4 < 1.0)
  {
    v8 = (ggl::PipelineSetup *)*((_QWORD *)this + 24);
    v9 = *((_QWORD *)this + 37);
    if (*((_QWORD *)v8 + 2) != v9)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
      goto LABEL_3;
    }
  }
  if (a4 >= 1.0)
  {
    v8 = (ggl::PipelineSetup *)*((_QWORD *)this + 24);
    v9 = *((_QWORD *)this + 35);
    if (*((_QWORD *)v8 + 2) != v9)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
      goto LABEL_3;
    }
  }
LABEL_4:
  v11 = *((double *)a2 + 10);
  v12 = *((double *)a2 + 11);
  v13 = *((double *)a2 + 12);
  v15 = *((double *)a2 + 8);
  v14 = *((double *)a2 + 9);
  v17 = *((double *)a2 + 6);
  v16 = *((double *)a2 + 7);
  v18 = -(v15 * v11 - v16 * v12) - (v15 * v11 - v16 * v12);
  v19 = -(v17 * v12 - v15 * v14) - (v17 * v12 - v15 * v14);
  v20 = -(v16 * v14 - v17 * v11) - (v16 * v14 - v17 * v11);
  v21 = -(v20 * v14 - (-(v16 - v18 * v12) - v19 * v13));
  v22 = -(v17 + v18 * v13 + v19 * v12 - v20 * v11);
  v23 = -(v15 + v18 * v11 + v20 * v13 - v19 * v14);
  v24 = v11 * -2.0;
  v25 = -(v11 * (v11 * -2.0));
  v26 = 1.0 - (v25 - v12 * (v12 * -2.0));
  v27 = v14 * -2.0;
  v28 = -(v11 * (v14 * -2.0));
  v29 = v12 * -2.0 * v13;
  v30 = v28 - v29;
  v31 = -(v12 * (v14 * -2.0));
  v32 = v13 * v24 - v12 * (v14 * -2.0);
  v33 = v29 + v28;
  v34 = v14 * -2.0 * v14 + 1.0;
  v35 = v34 - -(v12 * (v12 * -2.0));
  v36 = -(v12 * v24);
  v99.f64[0] = v26;
  v99.f64[1] = v33;
  v101.f64[0] = v30;
  v101.f64[1] = v35;
  v103.f64[0] = v32;
  v103.f64[1] = v36 - v13 * v27;
  v100.f64[0] = v31 - v13 * v24;
  v102 = (float64x2_t)COERCE_UNSIGNED_INT64(v13 * v27 + v36);
  v104.f64[0] = v34 - v25;
  v100.f64[1] = 0.0;
  v104.f64[1] = 0.0;
  v105.f64[0] = v22;
  v105.f64[1] = v21;
  v106.f64[0] = v23;
  v106.f64[1] = 1.0;
  v37 = (*(uint64_t (**)(altitude::FlyoverNightRenderable *))(*(_QWORD *)this + 24))(this);
  v127 = 0u;
  v129 = 0u;
  v131 = 0u;
  v130 = 0u;
  v128 = 0u;
  v126 = 0u;
  v125 = 0u;
  v132 = 0x3FF0000000000000;
  v38 = *((_QWORD *)this + 30);
  v124 = *((_QWORD *)this + 29);
  *(_QWORD *)&v127 = v38;
  *((_QWORD *)&v129 + 1) = *((_QWORD *)this + 31);
  v39 = *(double *)(v37 + 32);
  v40 = *(double *)(v37 + 40);
  v41 = *(double *)(v37 + 48);
  v42 = v39 + v39;
  v43 = (v39 + v39) * v39;
  v44 = (v40 + v40) * v40;
  v46 = *(_QWORD *)(v37 + 16);
  v45 = *(double *)(v37 + 24);
  v47 = v45 + v45;
  v48 = (v45 + v45) * v39;
  v49 = (v40 + v40) * v41;
  v50 = v48 - v49;
  v51 = v40 * (v45 + v45);
  v52 = v41 * v42;
  v53 = v49 + v48;
  v54 = v41 * v42 + v51;
  v55 = 1.0 - (v45 + v45) * v45;
  v56 = v42 * v40;
  v57 = v41 * v47;
  v109 = 1.0 - (v43 + v44);
  v110 = v53;
  v113 = v50;
  v114 = v55 - v44;
  v117 = v54;
  v118 = v56 - v57;
  v111 = v51 - v52;
  v115 = v57 + v56;
  v119 = v55 - v43;
  v112 = 0;
  v116 = 0;
  v120 = 0;
  v121 = *(_OWORD *)v37;
  v122 = v46;
  v123 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v98, &v109, (double *)&v124);
  gm::operator*<double,4,4,4>(v107[0].f64, v99.f64, v98);
  if (*((_BYTE *)this + 312) || a4 < 1.0)
    *(_QWORD *)(*((_QWORD *)this + 23) + 48) = (unint64_t)((v108.f64[0] + *((double *)a2 + 118) * -0.1)
                                                                  * 1.84467441e19
                                                                  / (*((double *)a2 + 118)
                                                                   * 1.6)
                                                                  + 1.84467441e19);
  v58 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 24) + 64) + 16);
  v59 = v58[1];
  if (v59)
    v60 = (float32x4_t *)v58[9];
  else
    v60 = 0;
  v61 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[2]), v107[3]);
  *v60 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[0]), v107[1]);
  v60[1] = v61;
  v62 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[6]), v108);
  v60[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107[4]), v107[5]);
  v60[3] = v62;
  v63 = (*(uint64_t (**)(altitude::FlyoverNightRenderable *))(*(_QWORD *)this + 24))(this);
  v127 = 0u;
  v129 = 0u;
  v131 = 0u;
  v130 = 0u;
  v128 = 0u;
  v126 = 0u;
  v125 = 0u;
  v132 = 0x3FF0000000000000;
  v64 = *((_QWORD *)this + 30);
  v124 = *((_QWORD *)this + 29);
  *(_QWORD *)&v127 = v64;
  *((_QWORD *)&v129 + 1) = *((_QWORD *)this + 31);
  v65 = *(double *)(v63 + 32);
  v66 = *(double *)(v63 + 40);
  v67 = *(double *)(v63 + 48);
  v68 = v65 + v65;
  v69 = (v65 + v65) * v65;
  v70 = (v66 + v66) * v66;
  v72 = *(_QWORD *)(v63 + 16);
  v71 = *(double *)(v63 + 24);
  v73 = (v71 + v71) * v65;
  v74 = (v66 + v66) * v67;
  v75 = v73 - v74;
  v76 = v66 * (v71 + v71);
  v77 = v67 * v68;
  v78 = v74 + v73;
  v79 = v67 * v68 + v76;
  v80 = 1.0 - (v71 + v71) * v71;
  v81 = v68 * v66;
  v82 = v67 * (v71 + v71);
  v109 = 1.0 - (v69 + v70);
  v110 = v78;
  v113 = v75;
  v114 = v80 - v70;
  v117 = v79;
  v118 = v81 - v82;
  v111 = v76 - v77;
  v115 = v82 + v81;
  v119 = v80 - v69;
  v112 = 0;
  v116 = 0;
  v120 = 0;
  v121 = *(_OWORD *)v63;
  v122 = v72;
  v123 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v99.f64, &v109, (double *)&v124);
  v83 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v101), v102);
  v60[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v99), v100);
  v60[5] = v83;
  v84 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v105), v106);
  v60[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v103), v104);
  v60[7] = v84;
  if (v59)
  {
    v85 = v58[8];
    if (v85 <= v59)
      v85 = v59;
    v58[7] = 0;
    v58[8] = v85;
  }
  v86 = *((_QWORD *)this + 24);
  v87 = *(_QWORD *)(*(_QWORD *)(v86 + 64) + 48);
  v88 = *(_QWORD *)(v87 + 8);
  **(float **)(v87 + 72) = a4;
  if (*(_QWORD *)(v87 + 64) > v88)
    v88 = *(_QWORD *)(v87 + 64);
  *(_QWORD *)(v87 + 56) = 0;
  *(_QWORD *)(v87 + 64) = v88;
  v89 = (char *)*((_QWORD *)this + 32);
  v90 = (char *)*((_QWORD *)this + 33);
  if (v89 != v90)
  {
    v91 = v90 - v89 - 8;
    v92 = (char *)*((_QWORD *)this + 32);
    if (v91 < 8)
      goto LABEL_25;
    v93 = (v91 >> 3) + 1;
    v94 = (uint64_t *)(v89 + 8);
    v95 = v93 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v96 = *v94;
      *(_QWORD *)(*(v94 - 1) + 88) = a3;
      *(_QWORD *)(v96 + 88) = a3;
      v94 += 2;
      v95 -= 2;
    }
    while (v95);
    if (v93 != (v93 & 0x3FFFFFFFFFFFFFFELL))
    {
      v92 = &v89[8 * (v93 & 0x3FFFFFFFFFFFFFFELL)];
      do
      {
LABEL_25:
        v97 = *(_QWORD *)v92;
        v92 += 8;
        *(_QWORD *)(v97 + 88) = a3;
      }
      while (v92 != v90);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v86 + 96) + 8) = *(_QWORD *)(*(_QWORD *)v89 + 16);
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 24) + 96) + 16) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 8)
                                                                             + 16);
}

void md::RealisticMapEngineConfiguration::~RealisticMapEngineConfiguration(md::RealisticMapEngineConfiguration *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E429CEB0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E429CEB0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RealisticMapEngineConfiguration::supportsAsyncRender(md::RealisticMapEngineConfiguration *this)
{
  return 0;
}

md::PassList *md::RealisticMapEngineConfiguration::createPassList@<X0>(md::FrameGraphResourceRegistry *a1@<X1>, md::PassList **a2@<X8>)
{
  md::PassList *v5;
  md::PassList *result;

  v5 = (md::PassList *)operator new();
  result = md::PassList::PassList(v5, a1);
  *(_QWORD *)v5 = &off_1E4293050;
  *((_QWORD *)v5 + 13) = 0;
  *a2 = v5;
  return result;
}

void sub_19F98BA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xA1C40BB20A84BLL);
  _Unwind_Resume(a1);
}

void md::RealisticMapEngineConfiguration::createRenderLayers(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void md::RealisticMapEngineConfiguration::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int8x8_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  uint8x8_t v19;
  int8x8_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t *v34;
  int8x8_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = 0x20A1ED17D78F322BLL;
  v5 = *(_QWORD *)(a3 + 864);
  v6 = *(int8x8_t **)(a2 + 1120);
  v7 = v6[2];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x20A1ED17D78F322BLL;
      if (*(_QWORD *)&v7 <= 0x20A1ED17D78F322BuLL)
        v9 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & 0x20A1ED17D78F322BLL;
    }
    v10 = *(_QWORD **)(*(_QWORD *)&v6[1] + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x20A1ED17D78F322BLL)
            {
              if (v11[2] == 0x20A1ED17D78F322BLL)
                goto LABEL_88;
            }
            else if ((v14 & v12) != v9)
            {
              goto LABEL_21;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_21;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == 0x20A1ED17D78F322BLL)
          {
            if (v11[2] == 0x20A1ED17D78F322BLL)
            {
LABEL_88:
              v15 = v11[5];
              goto LABEL_22;
            }
          }
          else
          {
            if (v13 >= *(_QWORD *)&v7)
              v13 %= *(_QWORD *)&v7;
            if (v13 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_21:
  v15 = 0;
LABEL_22:
  md::LabelsLogic::setWorldType(v15, 1u);
  v16 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 32);
  if (!v16)
    goto LABEL_67;
  v17 = *(int8x8_t **)(a2 + 1120);
  v18 = v17[2];
  if (!*(_QWORD *)&v18)
    goto LABEL_67;
  v19 = (uint8x8_t)vcnt_s8(v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    if (*(_QWORD *)&v18 <= 0x20A1ED17D78F322BuLL)
      v4 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v18;
  }
  else
  {
    v4 = (*(_QWORD *)&v18 - 1) & 0x20A1ED17D78F322BLL;
  }
  v20 = v17[1];
  v21 = *(_QWORD **)(*(_QWORD *)&v20 + 8 * v4);
  if (!v21 || (v22 = (_QWORD *)*v21) == 0)
  {
LABEL_43:
    v25 = 0;
    goto LABEL_44;
  }
  if (v19.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == 0x20A1ED17D78F322BLL)
      {
        if (v22[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_92;
      }
      else if ((v24 & (*(_QWORD *)&v18 - 1)) != v4)
      {
        goto LABEL_43;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v23 = v22[1];
    if (v23 == 0x20A1ED17D78F322BLL)
      break;
    if (v23 >= *(_QWORD *)&v18)
      v23 %= *(_QWORD *)&v18;
    if (v23 != v4)
      goto LABEL_43;
LABEL_33:
    v22 = (_QWORD *)*v22;
    if (!v22)
      goto LABEL_43;
  }
  if (v22[2] != 0x20A1ED17D78F322BLL)
    goto LABEL_33;
LABEL_92:
  v25 = v22[5];
LABEL_44:
  if (v19.u32[0] > 1uLL)
  {
    v26 = 0xBEC1A12372CEEC00;
    if (*(_QWORD *)&v18 <= 0xBEC1A12372CEEC00)
      v26 = 0xBEC1A12372CEEC00 % *(_QWORD *)&v18;
  }
  else
  {
    v26 = (*(_QWORD *)&v18 - 1) & 0xBEC1A12372CEEC00;
  }
  v27 = *(_QWORD **)(*(_QWORD *)&v20 + 8 * v26);
  if (!v27 || (v28 = (_QWORD *)*v27) == 0)
  {
LABEL_63:
    v32 = 0;
    if (v25)
      goto LABEL_64;
    goto LABEL_65;
  }
  if (v19.u32[0] < 2uLL)
  {
    v29 = *(_QWORD *)&v18 - 1;
    while (1)
    {
      v31 = v28[1];
      if (v31 == 0xBEC1A12372CEEC00)
      {
        if (v28[2] == 0xBEC1A12372CEEC00)
          goto LABEL_93;
      }
      else if ((v31 & v29) != v26)
      {
        goto LABEL_63;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_63;
    }
  }
  while (2)
  {
    v30 = v28[1];
    if (v30 != 0xBEC1A12372CEEC00)
    {
      if (v30 >= *(_QWORD *)&v18)
        v30 %= *(_QWORD *)&v18;
      if (v30 != v26)
        goto LABEL_63;
      goto LABEL_53;
    }
    if (v28[2] != 0xBEC1A12372CEEC00)
    {
LABEL_53:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_63;
      continue;
    }
    break;
  }
LABEL_93:
  v32 = v28[5];
  if (!v25)
    goto LABEL_65;
LABEL_64:
  v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)md::LabelsLogic::labelManagerForWorldType(v25, 1u) + 168) + 32);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 120))(v33, *(_QWORD *)(v16 + 320));
LABEL_65:
  if (v32)
    objc_msgSend(*(id *)(v32 + 296), "setRouteOverlayCache:", *(_QWORD *)(v16 + 320));
LABEL_67:
  v34 = *(int8x8_t **)(a2 + 1120);
  v35 = v34[2];
  if (v35)
  {
    v36 = (uint8x8_t)vcnt_s8(v35);
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.u32[0] > 1uLL)
    {
      v37 = 0x17767EADC5B287BLL;
      if (*(_QWORD *)&v35 <= 0x17767EADC5B287BuLL)
        v37 = 0x17767EADC5B287BuLL % *(_QWORD *)&v35;
    }
    else
    {
      v37 = (*(_QWORD *)&v35 - 1) & 0x17767EADC5B287BLL;
    }
    v38 = *(_QWORD **)(*(_QWORD *)&v34[1] + 8 * v37);
    if (v38)
    {
      v39 = (_QWORD *)*v38;
      if (v39)
      {
        if (v36.u32[0] < 2uLL)
        {
          v40 = *(_QWORD *)&v35 - 1;
          while (1)
          {
            v42 = v39[1];
            if (v42 == 0x17767EADC5B287BLL)
            {
              if (v39[2] == 0x17767EADC5B287BLL)
                goto LABEL_89;
            }
            else if ((v42 & v40) != v37)
            {
              return;
            }
            v39 = (_QWORD *)*v39;
            if (!v39)
              return;
          }
        }
        do
        {
          v41 = v39[1];
          if (v41 == 0x17767EADC5B287BLL)
          {
            if (v39[2] == 0x17767EADC5B287BLL)
            {
LABEL_89:
              v43 = v39[5];
              if (v43)
                *(_DWORD *)(v43 + 288) = 0;
              return;
            }
          }
          else
          {
            if (v41 >= *(_QWORD *)&v35)
              v41 %= *(_QWORD *)&v35;
            if (v41 != v37)
              return;
          }
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
    }
  }
}

void md::RealisticMapEngineConfiguration::didBecomeInactive(uint64_t a1, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  int8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(int8x8_t **)(a2 + 1120);
  v3 = v2[2];
  if (!*(_QWORD *)&v3)
    return;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v3 <= 0x20A1ED17D78F322BuLL)
      v5 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & 0x20A1ED17D78F322BLL;
  }
  v6 = v2[1];
  v7 = *(_QWORD **)(*(_QWORD *)&v6 + 8 * v5);
  if (!v7 || (v8 = (_QWORD *)*v7) == 0)
  {
LABEL_21:
    v11 = 0;
    goto LABEL_22;
  }
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0x20A1ED17D78F322BLL)
      {
        if (v8[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_46;
      }
      else if ((v10 & (*(_QWORD *)&v3 - 1)) != v5)
      {
        goto LABEL_21;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0x20A1ED17D78F322BLL)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      goto LABEL_21;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_21;
  }
  if (v8[2] != 0x20A1ED17D78F322BLL)
    goto LABEL_11;
LABEL_46:
  v11 = v8[5];
LABEL_22:
  if (v4.u32[0] > 1uLL)
  {
    v12 = 0xBEC1A12372CEEC00;
    if (*(_QWORD *)&v3 <= 0xBEC1A12372CEEC00)
      v12 = 0xBEC1A12372CEEC00 % *(_QWORD *)&v3;
  }
  else
  {
    v12 = (*(_QWORD *)&v3 - 1) & 0xBEC1A12372CEEC00;
  }
  v13 = *(_QWORD **)(*(_QWORD *)&v6 + 8 * v12);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
  {
LABEL_41:
    v18 = 0;
    if (v11)
      goto LABEL_42;
    goto LABEL_43;
  }
  if (v4.u32[0] < 2uLL)
  {
    v15 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v17 == 0xBEC1A12372CEEC00)
      {
        if (v14[2] == 0xBEC1A12372CEEC00)
          goto LABEL_47;
      }
      else if ((v17 & v15) != v12)
      {
        goto LABEL_41;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_41;
    }
  }
  while (2)
  {
    v16 = v14[1];
    if (v16 != 0xBEC1A12372CEEC00)
    {
      if (v16 >= *(_QWORD *)&v3)
        v16 %= *(_QWORD *)&v3;
      if (v16 != v12)
        goto LABEL_41;
      goto LABEL_31;
    }
    if (v14[2] != 0xBEC1A12372CEEC00)
    {
LABEL_31:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_41;
      continue;
    }
    break;
  }
LABEL_47:
  v18 = v14[5];
  if (!v11)
    goto LABEL_43;
LABEL_42:
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)md::LabelsLogic::labelManagerForWorldType(v11, 1u) + 168) + 32);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 120))(v19, 0);
LABEL_43:
  if (v18)
    objc_msgSend(*(id *)(v18 + 296), "setRouteOverlayCache:", 0);
}

uint64_t md::DebugConsoleMapRect::DebugConsoleMapRect(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  __int128 v8;
  float v9;
  float v10;
  float v11;
  float32_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  double v18;
  double v19;
  long double v20;
  long double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  double v27;
  long double v28;
  long double v29;
  long double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  long double v40;
  long double v41;
  long double v42;
  long double v43;
  long double v44;
  long double v45;
  long double v46;
  double v47;
  long double v48;
  long double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  __int128 v65;
  _OWORD v66[8];

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB2E30;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 112) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 192) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 252) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_DWORD *)(a1 + 220) = 1065353216;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_DWORD *)(a1 + 260) = 1065353216;
  LODWORD(v8) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  v9 = *(float *)(a3 + 4);
  *(float *)(a1 + 12) = v9;
  v10 = *(float *)(a3 + 8);
  *(float *)(a1 + 16) = v10;
  v11 = *(float *)(a3 + 12);
  *(float *)(a1 + 20) = v11;
  v12 = v11 - v9;
  *((float *)&v8 + 1) = v9;
  *((_QWORD *)&v8 + 1) = 0x3F80000000000000;
  v13 = (float32x4_t)vzip1q_s32((int32x4_t)COERCE_UNSIGNED_INT(v10 - *(float *)&v8), (int32x4_t)COERCE_UNSIGNED_INT(v10 - *(float *)&v8));
  v14 = (int8x16_t)vmulq_f32(v13, (float32x4_t)xmmword_19FFB34C0);
  v15 = vmlaq_f32((float32x4_t)vextq_s8(v14, v14, 8uLL), (float32x4_t)xmmword_19FFB3590, v13);
  v13.i32[0] = 0;
  v13.f32[1] = v12;
  v16 = (float32x4_t)vzip1q_s32((int32x4_t)v13.u64[0], (int32x4_t)v13.u64[0]);
  v17 = (int8x16_t)vmulq_f32(v16, (float32x4_t)xmmword_19FFB34C0);
  *(float32x4_t *)(a1 + 200) = v15;
  *(float32x4_t *)(a1 + 216) = vmlaq_f32((float32x4_t)vextq_s8(v17, v17, 8uLL), (float32x4_t)xmmword_19FFB3590, v16);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = v8;
  v18 = *a5;
  v19 = *a6;
  v20 = exp(a4[1] * 6.28318531 + -3.14159265);
  v21 = atan(v20) * 114.591559 + -90.0;
  v22 = cos(v21 * 0.034906585) * -559.82 + 111132.92;
  v23 = v22 + cos(v21 * 0.0698131701) * 1.175;
  v24 = v23 + cos(v21 * 0.104719755) * -0.0023;
  v25 = v21 * 0.00872664626;
  v26 = tan(v21 * 0.00872664626 + 0.78103484);
  v27 = log(v26);
  v28 = tan(v25 + 0.789761487);
  v29 = fabs((log(v28) - v27) * 0.159154943) / v24;
  v30 = v29 * v18;
  v31 = v29 * v19;
  v32 = v30 * 0.5;
  *(double *)(a1 + 56) = v18;
  *(double *)(a1 + 64) = v19;
  if (v30 < 0.0)
    v32 = 0.0;
  v33 = *a4;
  v34 = a4[1];
  v35 = *a4 - v32;
  if (v31 >= 0.0)
    v36 = v31 * 0.5;
  else
    v36 = 0.0;
  v37 = v34 - v36;
  *(double *)(a1 + 24) = v35;
  *(double *)(a1 + 32) = v34 - v36;
  *(double *)(a1 + 40) = v32 + v33;
  *(double *)(a1 + 48) = v36 + v34;
  v38 = v32 + v32;
  *(double *)&v39 = v36 + v36;
  v40 = exp((v34 - v36 + (v36 + v36) * 0.5) * 6.28318531 + -3.14159265);
  v41 = atan(v40) * 114.591559 + -90.0;
  v42 = cos(v41 * 0.034906585) * -559.82 + 111132.92;
  v43 = v42 + cos(v41 * 0.0698131701) * 1.175;
  v44 = v43 + cos(v41 * 0.104719755) * -0.0023;
  v45 = v41 * 0.00872664626;
  v46 = tan(v41 * 0.00872664626 + 0.78103484);
  v47 = log(v46);
  v48 = tan(v45 + 0.789761487);
  v49 = fabs((log(v48) - v47) * 0.159154943) / v44;
  *(long double *)(a1 + 56) = v38 / v49;
  *(long double *)(a1 + 64) = *(double *)&v39 / v49;
  v60 = 0;
  v62 = 0;
  v59 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = v38;
  v58 = v39;
  v61 = v38;
  v63 = v35;
  v64 = v37;
  v65 = xmmword_19FFB33A0;
  gm::Matrix<double,4,4>::inverted<int,void>((double *)v66, &v55);
  v50 = v66[1];
  *(_OWORD *)(a1 + 72) = v66[0];
  *(_OWORD *)(a1 + 88) = v50;
  v51 = v66[3];
  *(_OWORD *)(a1 + 104) = v66[2];
  *(_OWORD *)(a1 + 120) = v51;
  v52 = v66[5];
  *(_OWORD *)(a1 + 136) = v66[4];
  *(_OWORD *)(a1 + 152) = v52;
  v53 = v66[7];
  *(_OWORD *)(a1 + 168) = v66[6];
  *(_OWORD *)(a1 + 184) = v53;
  return a1;
}

void md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius(uint64_t a1, unsigned int a2, _BYTE *a3, int a4, double a5, double a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;
  double v16;
  float v17;
  float v18;
  float v20;
  BOOL v21;
  float *v22;
  float *v23;

  v6 = *(float *)(a1 + 16);
  v7 = *(float *)(a1 + 8);
  if (v6 >= v7)
  {
    v8 = *(float *)(a1 + 20);
    v9 = *(float *)(a1 + 12);
    if (v8 >= v9)
    {
      if (a2)
      {
        v10 = *(double *)(a1 + 168) + *(double *)(a1 + 72) * a5 + *(double *)(a1 + 104) * a6;
        v11 = *(double *)(a1 + 176) + *(double *)(a1 + 80) * a5 + *(double *)(a1 + 112) * a6;
        v12 = 1.0 / (*(double *)(a1 + 192) + *(double *)(a1 + 96) * a5 + *(double *)(a1 + 128) * a6);
        v13 = v12 * v10;
        v16 = v12 * v11;
        *(float *)&v13 = v13;
        *(float *)&v16 = v16;
        *(float *)&v10 = (float)(*(float *)(a1 + 248) + (float)(*(float *)(a1 + 200) * *(float *)&v13))
                       + (float)(*(float *)(a1 + 216) * *(float *)&v16);
        *(float *)&v11 = (float)(*(float *)(a1 + 252) + (float)(*(float *)(a1 + 204) * *(float *)&v13))
                       + (float)(*(float *)(a1 + 220) * *(float *)&v16);
        *(float *)&v16 = 1.0
                       / (float)((float)(*(float *)(a1 + 260) + (float)(*(float *)(a1 + 212) * *(float *)&v13))
                               + (float)(*(float *)(a1 + 228) * *(float *)&v16));
        v14 = *(float *)&v16 * *(float *)&v10;
        v15 = *(float *)&v16 * *(float *)&v11;
        *(float *)&v16 = (float)a2;
        v17 = fmaxf(v14 - v6, v7 - v14);
        v18 = fmaxf(v15 - v8, v9 - v15);
        if (v17 < (float)a2 && v18 < *(float *)&v16)
        {
          if (v17 <= 0.0
            || ((v20 = (float)(v17 * v17) + (float)(v18 * v18), v18 > 0.0)
              ? (v21 = v20 < (float)(*(float *)&v16 * *(float *)&v16))
              : (v21 = 1),
                v21))
          {
            v22 = *(float **)a1;
            *((_BYTE *)v22 + 96) = *a3;
            *((_BYTE *)v22 + 97) = a3[1];
            *((_BYTE *)v22 + 98) = a3[2];
            *((_BYTE *)v22 + 99) = a3[3];
            v23 = *(float **)a1;
            v23[2] = v14;
            v23[3] = v15;
            if (a4)
              ggl::DebugConsole::drawCircleWithFill((uint64_t)v23, v16);
            else
              ggl::DebugConsole::drawCircle((ggl::DebugConsole *)v23, *(float *)&v16);
          }
        }
      }
    }
  }
}

void md::DebugConsoleMapRect::drawPixelRect(uint64_t a1, float *a2, __int8 *a3, int a4)
{
  float32x2_t *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32x2_t *v30;
  unint64_t v31;
  float v32;
  float v33;
  uint64_t v34;

  if (*(float *)(a1 + 16) > *a2
    && *(float *)(a1 + 8) < a2[2]
    && *(float *)(a1 + 20) > a2[1]
    && *(float *)(a1 + 12) < a2[3])
  {
    v4 = *(float32x2_t **)a1;
    v4[12].i8[0] = *a3;
    v4[12].i8[1] = a3[1];
    v4[12].i8[2] = a3[2];
    v4[12].i8[3] = a3[3];
    if (a4)
    {
      v5 = a2[2];
      v6 = *a2;
      if (v5 >= *a2)
      {
        v8 = a2[3];
        v7 = a2[1];
        if (v8 >= v7)
        {
          v6 = v6 + 1.0;
          v5 = v5 + -1.0;
          v7 = v7 + 1.0;
          v8 = v8 + -1.0;
        }
      }
      else
      {
        v7 = a2[1];
        v8 = a2[3];
      }
      v22 = *(float *)(a1 + 16);
      if (v22 <= v6
        || (v23 = *(float *)(a1 + 8), v23 >= v5)
        || (v24 = *(float *)(a1 + 20), v24 <= v7)
        || (v25 = *(float *)(a1 + 12), v25 >= v8))
      {
        v28 = 3.4028e38;
        v29 = -3.4028e38;
        v27 = -3.4028e38;
        v26 = 3.4028e38;
      }
      else
      {
        v26 = fmaxf(v23, v6);
        v27 = fminf(v5, v22);
        v28 = fmaxf(v25, v7);
        v29 = fminf(v8, v24);
      }
      v31 = __PAIR64__(LODWORD(v29), LODWORD(v27));
      v30 = *(float32x2_t **)a1;
      v30[1].f32[0] = v26;
      v30[1].f32[1] = v28;
      ggl::DebugConsole::drawRectangleWithFill(v30, (float32x2_t *)&v31, v28);
    }
    else
    {
      v9 = *(float *)(a1 + 16);
      if (v9 <= *a2
        || (v10 = *(float *)(a1 + 8), v11 = a2[2], v10 >= v11)
        || (v12 = *(float *)(a1 + 20), v13 = a2[1], v12 <= v13)
        || (v14 = *(float *)(a1 + 12), v15 = a2[3], v14 >= v15))
      {
        v18 = 3.4028e38;
        v19 = -3.4028e38;
        v17 = -3.4028e38;
        v16 = 3.4028e38;
      }
      else
      {
        v16 = fmaxf(v10, *a2);
        v17 = fminf(v11, v9);
        v18 = fmaxf(v14, v13);
        v19 = fminf(v15, v12);
      }
      v31 = __PAIR64__(LODWORD(v19), LODWORD(v17));
      v20 = *(_QWORD *)a1;
      *(float *)(v20 + 8) = v16;
      *(float *)(v20 + 12) = v18;
      v34 = *(_QWORD *)(v20 + 8);
      v21 = v34;
      *(float *)(v20 + 8) = v17;
      *(float *)(v20 + 12) = v19;
      v32 = *(float *)&v21;
      v33 = v19;
      ggl::DebugConsole::drawLine(v20, &v32);
      ggl::DebugConsole::drawLine(v20, (float *)&v34);
      v32 = v17;
      v33 = *((float *)&v21 + 1);
      ggl::DebugConsole::drawLine(v20, &v32);
      ggl::DebugConsole::drawLine(v20, (float *)&v31);
    }
  }
}

void md::DebugConsoleMapRect::drawWorldSegment(uint64_t a1, double *a2, _BYTE *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _BYTE *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float v62[2];

  v3 = *a2;
  v4 = *(double *)(a1 + 24);
  if (*a2 >= v4)
  {
    v5 = *(double *)(a1 + 40);
    if (v3 < v5)
    {
      v6 = a2[1];
      v7 = *(double *)(a1 + 32);
      if (v6 >= v7)
      {
        v8 = *(double *)(a1 + 48);
        if (v6 < v8)
        {
          v9 = a2[2] + v3;
          if (v9 >= v4)
          {
            v10 = a2[3] + v6;
            v11 = v9 >= v5 || v10 < v7;
            if (!v11 && v10 < v8)
            {
              v15 = 0.0;
              v16 = 1.0;
              goto LABEL_26;
            }
          }
        }
      }
    }
  }
  v13 = a2[2];
  if (fabs(v13) >= 2.22044605e-16)
  {
    v17 = 1.0 / v13;
    v18 = v17 * (v4 - v3);
    v19 = (*(double *)(a1 + 40) - v3) * v17;
    v20 = fmin(v18, v19);
    v21 = fmax(v18, v19);
    v15 = fmax(v20, 0.0);
    v16 = fmin(v21, 1.0);
    if (v15 > v16)
      return;
LABEL_21:
    v22 = a2[3];
    if (fabs(v22) >= 2.22044605e-16)
    {
      v24 = 1.0 / v22;
      v25 = a2[1];
      v26 = (*(double *)(a1 + 32) - v25) * v24;
      v27 = (*(double *)(a1 + 48) - v25) * v24;
      v15 = fmax(v15, fmin(v26, v27));
      v16 = fmin(fmax(v26, v27), v16);
      if (v15 > v16)
        return;
    }
    else
    {
      v23 = a2[1];
      if (v23 < *(double *)(a1 + 32) || v23 > *(double *)(a1 + 48))
        return;
    }
LABEL_26:
    v28 = *(_BYTE **)a1;
    v28[96] = *a3;
    v28[97] = a3[1];
    v28[98] = a3[2];
    v28[99] = a3[3];
    v29 = *(_QWORD *)a1;
    v30 = a2[2];
    v31 = a2[3];
    v32 = a2[1];
    v33 = *a2 + v30 * v15;
    v34 = v32 + v31 * v15;
    v35 = *(double *)(a1 + 72);
    v36 = *(double *)(a1 + 80);
    v37 = *(double *)(a1 + 168);
    v38 = *(double *)(a1 + 176);
    v40 = *(double *)(a1 + 96);
    v39 = *(double *)(a1 + 104);
    v41 = v37 + v35 * v33 + v39 * v34;
    v42 = *(double *)(a1 + 112);
    v43 = v38 + v36 * v33 + v42 * v34;
    v44 = *(double *)(a1 + 128);
    v45 = *(double *)(a1 + 192);
    v46 = 1.0 / (v45 + v40 * v33 + v44 * v34);
    *(float *)&v41 = v46 * v41;
    *(float *)&v46 = v46 * v43;
    LODWORD(v43) = *(_DWORD *)(a1 + 200);
    v47 = *(float *)(a1 + 204);
    v48 = *(float *)(a1 + 248);
    v49 = *(float *)(a1 + 252);
    v51 = *(float *)(a1 + 212);
    v50 = *(float *)(a1 + 216);
    v52 = (float)(v48 + (float)(*(float *)&v43 * *(float *)&v41)) + (float)(v50 * *(float *)&v46);
    v53 = *(float *)(a1 + 220);
    v54 = (float)(v49 + (float)(v47 * *(float *)&v41)) + (float)(v53 * *(float *)&v46);
    v55 = *(float *)(a1 + 228);
    v56 = *(float *)(a1 + 260);
    *(float *)&v46 = 1.0 / (float)((float)(v56 + (float)(v51 * *(float *)&v41)) + (float)(v55 * *(float *)&v46));
    v57 = *a2 + v30 * v16;
    v58 = v32 + v31 * v16;
    v59 = v37 + v35 * v57 + v39 * v58;
    v60 = v38 + v36 * v57 + v42 * v58;
    v61 = 1.0 / (v45 + v40 * v57 + v44 * v58);
    *(float *)&v57 = v61 * v59;
    *(float *)&v61 = v61 * v60;
    *(float *)&v59 = (float)(v48 + (float)(*(float *)&v43 * *(float *)&v57)) + (float)(v50 * *(float *)&v61);
    *(float *)&v60 = (float)(v49 + (float)(v47 * *(float *)&v57)) + (float)(v53 * *(float *)&v61);
    *(float *)&v61 = 1.0 / (float)((float)(v56 + (float)(v51 * *(float *)&v57)) + (float)(v55 * *(float *)&v61));
    v62[0] = *(float *)&v61 * *(float *)&v59;
    v62[1] = *(float *)&v61 * *(float *)&v60;
    *(float *)(v29 + 8) = *(float *)&v46 * v52;
    *(float *)(v29 + 12) = *(float *)&v46 * v54;
    ggl::DebugConsole::drawLine(v29, v62);
    return;
  }
  if (v3 >= v4 && v3 <= *(double *)(a1 + 40))
  {
    v15 = 0.0;
    v16 = 1.0;
    goto LABEL_21;
  }
}

void md::DebugConsoleMapRect::drawWorldRect(uint64_t a1, double *a2, __int8 *a3, int a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  float v35[4];

  v4 = a2[2];
  if (v4 > *(double *)(a1 + 24))
  {
    v5 = *a2;
    if (*a2 < *(double *)(a1 + 40))
    {
      v6 = a2[3];
      if (v6 > *(double *)(a1 + 32))
      {
        v7 = a2[1];
        if (v7 < *(double *)(a1 + 48))
        {
          v8 = *(double *)(a1 + 72);
          v9 = *(double *)(a1 + 80);
          v10 = *(double *)(a1 + 168);
          v11 = *(double *)(a1 + 176);
          v13 = *(double *)(a1 + 96);
          v12 = *(double *)(a1 + 104);
          v14 = v10 + v8 * v5 + v12 * v7;
          v15 = *(double *)(a1 + 112);
          v16 = v11 + v9 * v5 + v15 * v7;
          v17 = *(double *)(a1 + 128);
          v18 = *(double *)(a1 + 192);
          v19 = 1.0 / (v18 + v13 * v5 + v17 * v7);
          *(float *)&v14 = v19 * v14;
          *(float *)&v19 = v19 * v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 200);
          v20 = *(float *)(a1 + 204);
          v21 = *(float *)(a1 + 248);
          v22 = *(float *)(a1 + 252);
          v24 = *(float *)(a1 + 212);
          v23 = *(float *)(a1 + 216);
          v25 = (float)(v21 + (float)(*(float *)&v16 * *(float *)&v14)) + (float)(v23 * *(float *)&v19);
          v26 = *(float *)(a1 + 220);
          v27 = (float)(v22 + (float)(v20 * *(float *)&v14)) + (float)(v26 * *(float *)&v19);
          v28 = *(float *)(a1 + 228);
          v29 = *(float *)(a1 + 260);
          *(float *)&v19 = 1.0 / (float)((float)(v29 + (float)(v24 * *(float *)&v14)) + (float)(v28 * *(float *)&v19));
          v30 = v10 + v8 * v4 + v6 * v12;
          v31 = v11 + v9 * v4 + v6 * v15;
          v32 = 1.0 / (v18 + v13 * v4 + v6 * v17);
          v33 = v32 * v30;
          *(float *)&v32 = v32 * v31;
          v34 = (float)(v21 + (float)(*(float *)&v16 * v33)) + (float)(v23 * *(float *)&v32);
          *(float *)&v30 = (float)(v22 + (float)(v20 * v33)) + (float)(v26 * *(float *)&v32);
          *(float *)&v32 = 1.0 / (float)((float)(v29 + (float)(v24 * v33)) + (float)(v28 * *(float *)&v32));
          v35[0] = *(float *)&v19 * v25;
          v35[1] = *(float *)&v19 * v27;
          v35[2] = *(float *)&v32 * v34;
          v35[3] = *(float *)&v32 * *(float *)&v30;
          md::DebugConsoleMapRect::drawPixelRect(a1, v35, a3, a4);
        }
      }
    }
  }
}

void md::DebugConsoleMapRect::drawWorldArrow(uint64_t a1, double *a2, _BYTE *a3, double a4, double a5, float a6, float a7)
{
  double v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __float2 v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25[2];
  float v26[2];
  float v27[2];
  float v28[2];

  v11 = 1.0 / (*(double *)(a1 + 192) + *(double *)(a1 + 96) * a4 + *(double *)(a1 + 128) * a5);
  v12 = v11 * (*(double *)(a1 + 168) + *(double *)(a1 + 72) * a4 + *(double *)(a1 + 104) * a5);
  v13 = v11 * (*(double *)(a1 + 176) + *(double *)(a1 + 80) * a4 + *(double *)(a1 + 112) * a5);
  v14 = (float)(*(float *)(a1 + 248) + (float)(*(float *)(a1 + 200) * v12)) + (float)(*(float *)(a1 + 216) * v13);
  v15 = (float)(*(float *)(a1 + 252) + (float)(*(float *)(a1 + 204) * v12)) + (float)(*(float *)(a1 + 220) * v13);
  v16 = 1.0
      / (float)((float)(*(float *)(a1 + 260) + (float)(*(float *)(a1 + 212) * v12)) + (float)(*(float *)(a1 + 228) * v13));
  md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius(a1, 5u, a3, 1, a4, a5);
  v17 = *a2;
  v18 = __sincosf_stret(v17);
  v19 = 1.0 / sqrtf((float)(v18.__cosval * v18.__cosval) + (float)(v18.__sinval * v18.__sinval));
  v23 = -(float)((float)((float)(a6 * 0.25) * (float)(v19 * v18.__cosval)) - (float)(v16 * v14));
  v24 = -(float)((float)((float)(v19 * v18.__sinval) * (float)(a6 * 0.25)) - (float)(v16 * v15));
  v20 = (float)(a7 * 0.5) * (float)(v19 * v18.__cosval);
  v21 = (float)(v19 * v18.__sinval) * (float)(a7 * 0.5);
  v25[0] = v23 - v21;
  v25[1] = v20 - (float)((float)((float)(v19 * v18.__sinval) * (float)(a6 * 0.25)) - (float)(v16 * v15));
  v26[0] = (float)((float)(a6 * 0.75) * (float)(v19 * v18.__cosval))
         - (float)((float)((float)(a6 * 0.25) * (float)(v19 * v18.__cosval)) - (float)(v16 * v14));
  v26[1] = (float)((float)(a6 * 0.75) * (float)(v19 * v18.__sinval))
         - (float)((float)((float)(v19 * v18.__sinval) * (float)(a6 * 0.25)) - (float)(v16 * v15));
  v27[0] = v21 - (float)((float)((float)(a6 * 0.25) * (float)(v19 * v18.__cosval)) - (float)(v16 * v14));
  v27[1] = v24 - v20;
  v28[0] = v23;
  v28[1] = v24;
  v22 = *(_QWORD *)a1;
  *(float *)(v22 + 8) = v23;
  *(float *)(v22 + 12) = v24;
  ggl::DebugConsole::drawLine(v22, v25);
  ggl::DebugConsole::drawLine(v22, v26);
  ggl::DebugConsole::drawLine(v22, v27);
  ggl::DebugConsole::drawLine(v22, v28);
}

void md::StandardGlobeLabelMapTile::~StandardGlobeLabelMapTile(md::StandardGlobeLabelMapTile *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A570;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelMapTile::~LabelMapTile(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A570;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A1AF4E00);
}

double md::StandardGlobeLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, double *a2)
{
  long double v2;
  long double v3;
  double v4;
  long double v5;
  double v6;
  __double2 v7;

  v2 = *a2 * 6.28318531;
  v3 = exp(a2[1] * 6.28318531 + -3.14159265);
  v4 = atan(v3);
  v5 = fmod(v2, 6.28318531);
  v6 = fmod(v5 + 6.28318531, 6.28318531) + -3.14159265;
  v7 = __sincos_stret(v4 * 2.0 + -1.57079633);
  return 6378137.0 / sqrt(v7.__sinval * v7.__sinval * -0.00669437999 + 1.0) * v7.__cosval * __sincos_stret(v6).__cosval;
}

float64x2_t md::StandardGlobeLabelMapTile::assignWorldPointToLabel(md::StandardGlobeLabelMapTile *this, md::Label *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  long double v8;
  long double v9;
  double v10;
  long double v11;
  double v12;
  __double2 v13;
  double v14;
  __double2 v15;
  float64_t v16;
  double v17;
  float64x2_t v18;
  float v19;
  BOOL v20;
  BOOL v21;
  double v22;
  double v23;
  double v24;
  float64x2_t result;

  v3 = (*(uint64_t (**)(_QWORD, char *, _QWORD, _QWORD))(**((_QWORD **)a2 + 1) + 120))(*((_QWORD *)a2 + 1), (char *)a2 + 48, *((unsigned __int8 *)this + 9), *((_QWORD *)this + 63));
  v4 = v3;
  if (*(_BYTE *)(v3 + 44))
  {
    v5 = *(double *)v3;
    v6 = *(double *)(v3 + 8);
    v7 = *(double *)(v3 + 16);
  }
  else
  {
    v8 = *(double *)(v3 + 24) * 6.28318531;
    v9 = exp(*(double *)(v3 + 32) * 6.28318531 + -3.14159265);
    v10 = atan(v9) * 2.0 + -1.57079633;
    v11 = fmod(v8, 6.28318531);
    v12 = fmod(v11 + 6.28318531, 6.28318531) + -3.14159265;
    v13 = __sincos_stret(v10);
    v14 = 6378137.0 / sqrt(v13.__sinval * v13.__sinval * -0.00669437999 + 1.0);
    v15 = __sincos_stret(v12);
    v5 = v14 * v13.__cosval * v15.__cosval;
    v6 = v14 * v13.__cosval * v15.__sinval;
    v7 = v13.__sinval * 0.99330562 * v14;
    *(double *)v4 = v5;
    *(double *)(v4 + 8) = v6;
    *(double *)(v4 + 16) = v7;
    *(_BYTE *)(v4 + 44) = 1;
  }
  v18.f64[0] = md::LabelPoint::geocentricNormal((md::LabelPoint *)v4);
  *((_QWORD *)a2 + 65) = *(_QWORD *)&v18.f64[0];
  v18.f64[1] = v16;
  v19 = *(float *)(v4 + 40);
  v20 = v19 == 3.4028e38;
  v21 = v19 != 3.4028e38;
  if (v19 == 3.4028e38)
    v19 = 0.0;
  v22 = v19;
  *((float *)a2 + 47) = v19;
  *((_BYTE *)a2 + 192) = v21;
  *((_BYTE *)a2 + 835) = v21;
  *((double *)a2 + 62) = v5;
  *((double *)a2 + 63) = v6;
  *((double *)a2 + 64) = v7;
  v23 = 0.0;
  if (!v20)
    v23 = v22;
  v24 = *((double *)a2 + 29) * v23;
  *((double *)a2 + 82) = v24;
  result = vmulq_n_f64(v18, v24);
  *((float64x2_t *)a2 + 34) = result;
  *((double *)a2 + 70) = v17 * v24;
  *((float64_t *)a2 + 66) = v16;
  *((double *)a2 + 67) = v17;
  return result;
}

void ta2::TextureAtlas::~TextureAtlas(ta2::TextureAtlas *this)
{
  ta2::TextureAtlas::~TextureAtlas(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  ta2::TextureAtlasRegion **v11;
  ta2::TextureAtlasRegion **v12;
  ta2::TextureAtlasRegion *v13;
  ta2::TextureAtlasPage *v14;
  uint64_t v15;
  uint64_t i;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  void **v24;
  void *v25;
  void **v26;
  void *v27;
  char *v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;

  *(_QWORD *)this = &off_1E42C2B40;
  v2 = *((_QWORD *)this + 37);
  v3 = *((_QWORD *)this + 38);
  while (v2 != v3)
  {
    v5 = *(const void **)v2;
    v4 = *(_QWORD *)(v2 + 8);
    v6 = v4 - *(_QWORD *)v2;
    if (v4 != *(_QWORD *)v2)
    {
      if (v6 < 0)
        abort();
      v7 = (char *)operator new(v4 - *(_QWORD *)v2);
      memcpy(v7, v5, v6);
      v8 = 0;
      v9 = 8 * (v6 >> 3);
      do
      {
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 64))(*((_QWORD *)this + 43), *(_QWORD *)&v7[v8]);
        v8 += 8;
      }
      while (v9 != v8);
      operator delete(v7);
    }
    v2 += 24;
  }
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 64))(*((_QWORD *)this + 43), *((_QWORD *)this + 36));
  v10 = *((_QWORD *)this + 34);
  std::mutex::lock((std::mutex *)v10);
  v11 = *(ta2::TextureAtlasRegion ***)(v10 + 64);
  v12 = *(ta2::TextureAtlasRegion ***)(v10 + 72);
  if (v11 != v12)
  {
    do
    {
      v13 = *v11;
      v14 = (ta2::TextureAtlasPage *)*((_QWORD *)*v11 + 3);
      if (v14)
        ta2::TextureAtlasPage::textureRegionWasFreed(v14, *v11);
      *((_BYTE *)v13 + 80) = 2;
      ++v11;
    }
    while (v11 != v12);
    v11 = *(ta2::TextureAtlasRegion ***)(v10 + 64);
  }
  *(_QWORD *)(v10 + 72) = v11;
  std::mutex::unlock((std::mutex *)v10);
  v15 = *((_QWORD *)this + 14);
  for (i = *((_QWORD *)this + 15); i != v15; i -= 16)
  {
    v17 = *(std::__shared_weak_count **)(i - 8);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  *((_QWORD *)this + 15) = v15;
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (void **)*((_QWORD *)this + 40);
  if (v23)
  {
    v24 = (void **)*((_QWORD *)this + 41);
    v25 = (void *)*((_QWORD *)this + 40);
    if (v24 != v23)
    {
      v26 = (void **)*((_QWORD *)this + 41);
      do
      {
        v29 = (char *)*(v26 - 3);
        v26 -= 3;
        v28 = v29;
        if (v29)
        {
          v30 = (char *)*(v24 - 2);
          v27 = v28;
          if (v30 != v28)
          {
            do
            {
              v31 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
              if (v31)
              {
                v32 = (unint64_t *)&v31->__shared_owners_;
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              v30 -= 16;
            }
            while (v30 != v28);
            v27 = *v26;
          }
          *(v24 - 2) = v28;
          operator delete(v27);
        }
        v24 = v26;
      }
      while (v26 != v23);
      v25 = (void *)*((_QWORD *)this + 40);
    }
    *((_QWORD *)this + 41) = v23;
    operator delete(v25);
  }
  v34 = *((_QWORD *)this + 37);
  if (v34)
  {
    v35 = *((_QWORD *)this + 38);
    v36 = (void *)*((_QWORD *)this + 37);
    if (v35 != v34)
    {
      v37 = *((_QWORD *)this + 38);
      do
      {
        v39 = *(void **)(v37 - 24);
        v37 -= 24;
        v38 = v39;
        if (v39)
        {
          *(_QWORD *)(v35 - 16) = v38;
          operator delete(v38);
        }
        v35 = v37;
      }
      while (v37 != v34);
      v36 = (void *)*((_QWORD *)this + 37);
    }
    *((_QWORD *)this + 38) = v34;
    operator delete(v36);
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = *((_QWORD *)this + 31);
  if (v43)
  {
    v44 = *((_QWORD *)this + 32);
    v45 = (void *)*((_QWORD *)this + 31);
    if (v44 != v43)
    {
      do
      {
        v46 = *(std::__shared_weak_count **)(v44 - 8);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v44 -= 16;
      }
      while (v44 != v43);
      v45 = (void *)*((_QWORD *)this + 31);
    }
    *((_QWORD *)this + 32) = v43;
    operator delete(v45);
  }
  v49 = *((_QWORD *)this + 28);
  if (v49)
  {
    v50 = *((_QWORD *)this + 29);
    v51 = (void *)*((_QWORD *)this + 28);
    if (v50 != v49)
    {
      do
      {
        v52 = *(std::__shared_weak_count **)(v50 - 8);
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v50 -= 16;
      }
      while (v50 != v49);
      v51 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v49;
    operator delete(v51);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 160));
  v55 = (void *)*((_QWORD *)this + 17);
  if (v55)
  {
    *((_QWORD *)this + 18) = v55;
    operator delete(v55);
  }
  v56 = *((_QWORD *)this + 14);
  if (v56)
  {
    v57 = *((_QWORD *)this + 15);
    v58 = (void *)*((_QWORD *)this + 14);
    if (v57 != v56)
    {
      do
      {
        v59 = *(std::__shared_weak_count **)(v57 - 8);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v57 -= 16;
      }
      while (v57 != v56);
      v58 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v56;
    operator delete(v58);
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v62)
    goto LABEL_97;
  v63 = (unint64_t *)&v62->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
  {
LABEL_97:
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
  std::__shared_weak_count::__release_weak(v62);
  if (*((char *)this + 31) < 0)
LABEL_98:
    operator delete(*((void **)this + 1));
}

void ta2::TextureAtlas::startFrame(ta2::TextureAtlas *this)
{
  ta2::TextureAtlas *v1;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  ta2::TextureAtlasRegion **v14;
  ta2::TextureAtlasRegion **v15;
  ta2::TextureAtlasRegion *v16;
  ta2::TextureAtlasPage *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x16_t **v44;
  int8x16_t **v45;
  int v46;
  int8x16_t **v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t v50;
  int64x2_t v51;
  __int32 v52;
  __int32 v53;
  __int32 v54;
  __int32 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 *v59;
  __int128 *v60;
  __int128 *v61;
  __int128 v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  __int128 *v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t i;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __int128 *v88;
  __int128 *v89;
  __int128 *v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  __int128 *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  __int128 *v99;
  __int128 *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  std::mutex *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  ta2::TextureAtlas *v128;
  char *v129;
  ta2::TextureAtlas *v130;
  unint64_t *v131;
  unint64_t *v132;
  int64_t v133;
  uint64_t v134;
  _QWORD *v135;
  __n128 *v136;
  unint64_t v137;
  __n128 *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  NSObject *v146;
  uint64_t *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  unint64_t v151;
  uint64_t v152;
  __n128 v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t k;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  float32x2_t *v161;
  unint64_t *v162;
  unint64_t v163;
  unsigned int v164;
  int v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  __n128 v177;
  unsigned int v178;
  __int32 v179;
  uint64_t (***v184)(_QWORD, _BYTE *);
  unsigned __int32 v185;
  ta2::TextureAtlasPage *v186;
  ta2::TextureAtlas *v187;
  uint64_t v188;
  void **v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  NSObject *v196;
  unint64_t v197;
  __int128 *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  __n128 *v202;
  uint64_t v203;
  char *v204;
  void **v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  void *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  char *v213;
  unint64_t v214;
  __n128 *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  char *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  __n128 *v244;
  __n128 *v245;
  NSObject *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t j;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  char *v253;
  char *v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  ta2::TextureAtlas *v259;
  uint64_t *v260;
  uint64_t *v261;
  ta2::TextureAtlas *v262;
  uint64_t v263;
  geo::SkylineBin *v264;
  geo::GuillotineBin *v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  unint64_t v269;
  unint64_t v270;
  unsigned int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unsigned int v276;
  unint64_t v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  unsigned int *v281;
  unsigned int v282;
  unint64_t v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int *v287;
  int v288;
  uint64_t v289;
  unsigned int v290;
  unsigned int *v291;
  uint64_t v292;
  unsigned int v293;
  BOOL v294;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int *v299;
  unsigned int v300;
  uint64_t v301;
  unsigned int v302;
  BOOL v303;
  BOOL v304;
  unint64_t PositionForNewNodeMinWaste;
  unint64_t v306;
  int v307;
  int v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int *v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  int *v318;
  int v319;
  uint64_t v320;
  unsigned int v321;
  unsigned int *v322;
  unsigned int v323;
  uint64_t v324;
  unsigned int v325;
  BOOL v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  ta2::TextureAtlasPage *v339;
  ta2::TextureAtlasPage *v340;
  unsigned int v341;
  int v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t *v355;
  _OWORD *v356;
  unint64_t v357;
  ta2::TextureAtlasPage **v358;
  ta2::TextureAtlasPage *v359;
  ta2::TextureAtlasPage *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  __int128 v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  NSObject *v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  char *v377;
  char *v378;
  ta2::TextureAtlasPage *v379;
  unint64_t *v380;
  unint64_t v381;
  ta2::TextureAtlasPage *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t *v385;
  _OWORD *v386;
  unint64_t *v387;
  __int128 v388;
  unint64_t *v389;
  unint64_t *v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  __n128 *v397;
  char *v398;
  char *v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  __n128 *v403;
  void *v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  char *v408;
  char *v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  char *v413;
  void *v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  void *v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  char *v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  char *v428;
  char *v429;
  int64_t v430;
  unint64_t v431;
  _BYTE *v432;
  _BYTE *v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  _BYTE *v441;
  char *v442;
  char *v443;
  unint64_t v444;
  uint64_t v445;
  _OWORD *v446;
  __int128 *v447;
  uint64_t v448;
  __int128 v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  unint64_t **v453;
  uint64_t *v454;
  uint64_t *v455;
  uint64_t *v457;
  __int128 v458;
  __int128 v459;
  __n128 v460;
  char *v461;
  void *__p[2];
  _QWORD *v463;
  void *v464;
  __n128 *v465;
  unint64_t v466;
  void *v467;
  char *v468;
  uint64_t v469;
  void *v470;
  __int128 v471;
  ta2::TextureAtlasPage *v472[2];
  unsigned int v473[2];
  unsigned int v474;
  _BYTE buf[24];
  __int128 v476;
  std::__shared_weak_count *v477;
  __int128 *v478;
  uint64_t v479;

  v1 = this;
  v479 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 36))
    goto LABEL_12;
  v3 = (std::__shared_weak_count_vtbl *)operator new[]();
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8E88;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v3;
  *(_OWORD *)&v3->~__shared_weak_count = 0u;
  *(_OWORD *)&v3->__on_zero_shared = 0u;
  *(_OWORD *)&v3->__on_zero_shared_weak = 0u;
  *(_OWORD *)&v3[1].~__shared_weak_count_0 = 0u;
  *(_OWORD *)&v3[1].__get_deleter = 0u;
  *(_OWORD *)&v3[2].~__shared_weak_count = 0u;
  *(_OWORD *)&v3[2].__on_zero_shared = 0u;
  *(_OWORD *)&v3[2].__on_zero_shared_weak = 0u;
  *(_OWORD *)&v3[3].~__shared_weak_count_0 = 0u;
  *(_OWORD *)&v3[3].__get_deleter = 0u;
  *(_OWORD *)&v3[4].~__shared_weak_count = 0u;
  *(_OWORD *)&v3[4].__on_zero_shared = 0u;
  *(_OWORD *)&v3[4].__on_zero_shared_weak = 0u;
  *(_OWORD *)&v3[5].~__shared_weak_count_0 = 0u;
  *(_OWORD *)&v3[5].__get_deleter = 0u;
  *(_OWORD *)&v3[6].~__shared_weak_count = 0u;
  *(_OWORD *)&v3[6].__on_zero_shared = 0u;
  *(_OWORD *)&v3[6].__on_zero_shared_weak = 0u;
  *(_OWORD *)&v3[7].~__shared_weak_count_0 = 0u;
  *(_OWORD *)&v3[7].__get_deleter = 0u;
  *(_OWORD *)&v3[8].~__shared_weak_count = 0u;
  *(_OWORD *)&v3[8].__on_zero_shared = 0u;
  *(_OWORD *)&v3[8].__on_zero_shared_weak = 0u;
  *(_OWORD *)&v3[9].~__shared_weak_count_0 = 0u;
  *(_OWORD *)&v3[9].__get_deleter = 0u;
  *(_OWORD *)&v3[10].~__shared_weak_count = 0u;
  *(_OWORD *)&v3[10].__on_zero_shared = 0u;
  *(_OWORD *)&v3[10].__on_zero_shared_weak = 0u;
  *(_OWORD *)&v3[11].~__shared_weak_count_0 = 0u;
  *(_OWORD *)&v3[11].__get_deleter = 0u;
  *(_OWORD *)&v3[12].~__shared_weak_count = 0u;
  *(_OWORD *)&v3[12].__on_zero_shared = 0u;
  v6 = *((_QWORD *)this + 43);
  *(_DWORD *)buf = 512;
  *(_WORD *)&buf[4] = 1;
  v7 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, buf);
  *((_QWORD *)this + 36) = v7;
  v8 = *((_QWORD *)this + 45);
  *(_QWORD *)buf = v3;
  *(_OWORD *)&buf[8] = xmmword_19FFB4E30;
  v9 = &v476;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  *(_QWORD *)&v476 = &off_1E42D83F0;
  *((_QWORD *)&v476 + 1) = v3;
  v477 = v4;
  v478 = &v476;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v7, buf);
  if (v478 == &v476)
  {
    v11 = 4;
  }
  else
  {
    if (!v478)
      goto LABEL_9;
    v11 = 5;
    v9 = v478;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v9 + 8 * v11))(v9);
  do
LABEL_9:
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  v1 = this;
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_12:
  v13 = *((_QWORD *)v1 + 34);
  std::mutex::lock((std::mutex *)v13);
  v14 = *(ta2::TextureAtlasRegion ***)(v13 + 64);
  v15 = *(ta2::TextureAtlasRegion ***)(v13 + 72);
  if (v14 != v15)
  {
    do
    {
      v16 = *v14;
      v17 = (ta2::TextureAtlasPage *)*((_QWORD *)*v14 + 3);
      if (v17)
        ta2::TextureAtlasPage::textureRegionWasFreed(v17, *v14);
      *((_BYTE *)v16 + 80) = 2;
      ++v14;
    }
    while (v14 != v15);
    v14 = *(ta2::TextureAtlasRegion ***)(v13 + 64);
  }
  *(_QWORD *)(v13 + 72) = v14;
  std::mutex::unlock((std::mutex *)v13);
  v18 = (uint64_t *)*((_QWORD *)this + 14);
  v453 = (unint64_t **)((char *)this + 112);
  v454 = (uint64_t *)*((_QWORD *)this + 15);
  if (v18 != v454)
  {
    do
    {
      v455 = v18;
      v19 = *v18;
      v21 = *(__int128 **)(*v18 + 368);
      v20 = *(__int128 **)(*v18 + 376);
      v22 = (__int128 *)((char *)v21 + 24);
      if ((__int128 *)((char *)v21 + 24) != v20)
      {
        v23 = *v21;
        *v21 = *(__int128 *)((char *)v21 + 24);
        *(__int128 *)((char *)v21 + 24) = v23;
        v24 = *((_QWORD *)v21 + 2);
        *((_QWORD *)v21 + 2) = *((_QWORD *)v21 + 5);
        *((_QWORD *)v21 + 5) = v24;
        if (v21 + 3 != v20)
        {
          v25 = v21 + 4;
          do
          {
            v26 = (__int128 *)(v25 - 2);
            v27 = *((_OWORD *)v25 - 1);
            v29 = *(v25 - 4);
            v28 = *(v25 - 3);
            *(v25 - 3) = *v25;
            *(v25 - 1) = v29;
            *v25 = v28;
            v30 = v25 + 3;
            v31 = (__int128 *)(v25 + 1);
            v34 = *(v25 - 5);
            v32 = (__int128 *)(v25 - 5);
            v33 = v34;
            if (v32 == v22)
              v22 = v26;
            *v32 = v27;
            *(_QWORD *)v26 = v33;
            v25 = v30;
          }
          while (v31 != v20);
          if (v26 != v22)
          {
            v35 = v22;
            while (1)
            {
              v36 = *(_QWORD *)v26;
              *(_QWORD *)v26 = *(_QWORD *)v35;
              *(_QWORD *)v35 = v36;
              v37 = *((_QWORD *)v26 + 1);
              *((_QWORD *)v26 + 1) = *((_QWORD *)v35 + 1);
              *((_QWORD *)v35 + 1) = v37;
              v38 = *((_QWORD *)v26 + 2);
              *((_QWORD *)v26 + 2) = *((_QWORD *)v35 + 2);
              *((_QWORD *)v35 + 2) = v38;
              v26 = (__int128 *)((char *)v26 + 24);
              v35 = (__int128 *)((char *)v35 + 24);
              v39 = v26 == v22;
              if (v35 == v20)
              {
                if (v26 == v22)
                  break;
                v35 = (__int128 *)((char *)v22 + 24);
                while (1)
                {
                  v40 = *(_QWORD *)v26;
                  *(_QWORD *)v26 = *(_QWORD *)v22;
                  *(_QWORD *)v22 = v40;
                  v41 = *((_QWORD *)v26 + 1);
                  *((_QWORD *)v26 + 1) = *((_QWORD *)v22 + 1);
                  *((_QWORD *)v22 + 1) = v41;
                  v42 = *((_QWORD *)v26 + 2);
                  *((_QWORD *)v26 + 2) = *((_QWORD *)v22 + 2);
                  *((_QWORD *)v22 + 2) = v42;
                  v26 = (__int128 *)((char *)v26 + 24);
                  v39 = v26 == v22;
                  if (v35 != v20)
                    break;
                  if (v26 == v22)
                    goto LABEL_36;
                }
              }
              if (v39)
                v22 = v35;
            }
          }
        }
      }
LABEL_36:
      v43 = *(_QWORD *)(v19 + 376);
      v44 = *(int8x16_t ***)(v43 - 24);
      v45 = *(int8x16_t ***)(v43 - 16);
      if (v44 != v45)
      {
        if (*(_BYTE *)(*(_QWORD *)v19 + 96))
        {
          do
          {
            v49 = *v44;
            if (*(_BYTE *)(*(_QWORD *)v19 + 96))
            {
              v50.i64[0] = 0xFFFFFFFF00000000;
              v50.i64[1] = 0xFFFFFFFF00000000;
              v51 = vaddq_s64((int64x2_t)vbslq_s8(v50, v49[2], (int8x16_t)vaddq_s64((int64x2_t)v49[2], (int64x2_t)xmmword_19FFB4E40)), (int64x2_t)xmmword_19FFB4E50);
              *(int64x2_t *)buf = v51;
              if (*(_BYTE *)(v19 + 80))
              {
                v52 = v51.i32[2];
                v53 = v51.i32[0];
                v54 = v51.i32[3];
                v55 = v51.i32[1];
                if (geo::GuillotineBin::erase((geo::GuillotineBin *)(v19 + 88), (__int128 *)buf))
                {
                  *(_DWORD *)(v19 + 40) += (v54 - v55) * (v53 - v52);
                }
                else
                {
                  geo::GuillotineBin::addFreeRegion(v19 + 88, (uint64_t)buf);
                  *(_DWORD *)(v19 + 40) += (v54 - v55) * (v53 - v52);
                  if (*(_BYTE *)(v19 + 53))
                    geo::GuillotineBin::mergeFreeList(v19 + 88);
                }
              }
              v49 = *v44;
            }
            *(_DWORD *)(v19 + 208) += (((unint64_t)(v49[2].i64[1] + 0x100000000) >> 32)
                                     - ((unint64_t)(v49[2].i64[0] - 0x100000000) >> 32))
                                    * (v49[2].i64[0] - v49[2].i64[1] - 2);
            v44 += 2;
          }
          while (v44 != v45);
          v43 = *(_QWORD *)(v19 + 376);
          v44 = *(int8x16_t ***)(v43 - 24);
          v45 = *(int8x16_t ***)(v43 - 16);
        }
        else
        {
          v46 = *(_DWORD *)(v19 + 208);
          v47 = *(int8x16_t ***)(v43 - 24);
          do
          {
            v48 = *v47;
            v47 += 2;
            v46 += (((unint64_t)(v48[2].i64[1] + 0x100000000) >> 32)
                  - ((unint64_t)(v48[2].i64[0] - 0x100000000) >> 32))
                 * (v48[2].i64[0] - v48[2].i64[1] - 2);
            *(_DWORD *)(v19 + 208) = v46;
          }
          while (v47 != v45);
        }
        while (v45 != v44)
        {
          v56 = (std::__shared_weak_count *)*(v45 - 1);
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v45 -= 2;
        }
      }
      *(_QWORD *)(v43 - 16) = v44;
      v18 = v455 + 2;
    }
    while (v455 + 2 != v454);
  }
  v60 = (__int128 *)*((_QWORD *)this + 40);
  v59 = (__int128 *)*((_QWORD *)this + 41);
  v61 = (__int128 *)((char *)v60 + 24);
  if ((__int128 *)((char *)v60 + 24) != v59)
  {
    v62 = *v60;
    *v60 = *(__int128 *)((char *)v60 + 24);
    *(__int128 *)((char *)v60 + 24) = v62;
    v63 = *((_QWORD *)v60 + 2);
    *((_QWORD *)v60 + 2) = *((_QWORD *)v60 + 5);
    *((_QWORD *)v60 + 5) = v63;
    if (v60 + 3 != v59)
    {
      v64 = v60 + 4;
      do
      {
        v65 = (__int128 *)(v64 - 2);
        v66 = *((_OWORD *)v64 - 1);
        v68 = *(v64 - 4);
        v67 = *(v64 - 3);
        *(v64 - 3) = *v64;
        *(v64 - 1) = v68;
        *v64 = v67;
        v69 = v64 + 3;
        v70 = (__int128 *)(v64 + 1);
        v73 = *(v64 - 5);
        v71 = (__int128 *)(v64 - 5);
        v72 = v73;
        if (v71 == v61)
          v61 = v65;
        *v71 = v66;
        *(_QWORD *)v65 = v72;
        v64 = v69;
      }
      while (v70 != v59);
      if (v65 != v61)
      {
        v74 = v61;
        while (1)
        {
          v75 = *(_QWORD *)v65;
          *(_QWORD *)v65 = *(_QWORD *)v74;
          *(_QWORD *)v74 = v75;
          v76 = *((_QWORD *)v65 + 1);
          *((_QWORD *)v65 + 1) = *((_QWORD *)v74 + 1);
          *((_QWORD *)v74 + 1) = v76;
          v77 = *((_QWORD *)v65 + 2);
          *((_QWORD *)v65 + 2) = *((_QWORD *)v74 + 2);
          *((_QWORD *)v74 + 2) = v77;
          v65 = (__int128 *)((char *)v65 + 24);
          v74 = (__int128 *)((char *)v74 + 24);
          v78 = v65 == v61;
          if (v74 == v59)
          {
            if (v65 == v61)
              break;
            v74 = (__int128 *)((char *)v61 + 24);
            while (1)
            {
              v79 = *(_QWORD *)v65;
              *(_QWORD *)v65 = *(_QWORD *)v61;
              *(_QWORD *)v61 = v79;
              v80 = *((_QWORD *)v65 + 1);
              *((_QWORD *)v65 + 1) = *((_QWORD *)v61 + 1);
              *((_QWORD *)v61 + 1) = v80;
              v81 = *((_QWORD *)v65 + 2);
              *((_QWORD *)v65 + 2) = *((_QWORD *)v61 + 2);
              *((_QWORD *)v61 + 2) = v81;
              v65 = (__int128 *)((char *)v65 + 24);
              v78 = v65 == v61;
              if (v74 != v59)
                break;
              if (v65 == v61)
                goto LABEL_72;
            }
          }
          if (v78)
            v61 = v74;
        }
      }
    }
  }
LABEL_72:
  v82 = *((_QWORD *)this + 41);
  v83 = *(_QWORD *)(v82 - 24);
  for (i = *(_QWORD *)(v82 - 16); i != v83; i -= 16)
  {
    v85 = *(std::__shared_weak_count **)(i - 8);
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  *(_QWORD *)(v82 - 16) = v83;
  v89 = (__int128 *)*((_QWORD *)this + 37);
  v88 = (__int128 *)*((_QWORD *)this + 38);
  v90 = (__int128 *)((char *)v89 + 24);
  if ((__int128 *)((char *)v89 + 24) != v88)
  {
    v91 = *v89;
    *v89 = *(__int128 *)((char *)v89 + 24);
    *(__int128 *)((char *)v89 + 24) = v91;
    v92 = *((_QWORD *)v89 + 2);
    *((_QWORD *)v89 + 2) = *((_QWORD *)v89 + 5);
    *((_QWORD *)v89 + 5) = v92;
    if (v89 + 3 != v88)
    {
      v93 = v89 + 4;
      do
      {
        v94 = (__int128 *)(v93 - 2);
        v95 = *((_OWORD *)v93 - 1);
        v97 = *(v93 - 4);
        v96 = *(v93 - 3);
        *(v93 - 3) = *v93;
        *(v93 - 1) = v97;
        *v93 = v96;
        v98 = v93 + 3;
        v99 = (__int128 *)(v93 + 1);
        v102 = *(v93 - 5);
        v100 = (__int128 *)(v93 - 5);
        v101 = v102;
        if (v100 == v90)
          v90 = v94;
        *v100 = v95;
        *(_QWORD *)v94 = v101;
        v93 = v98;
      }
      while (v99 != v88);
      if (v94 != v90)
      {
        v103 = v90;
        while (1)
        {
          v104 = *(_QWORD *)v94;
          *(_QWORD *)v94 = *(_QWORD *)v103;
          *(_QWORD *)v103 = v104;
          v105 = *((_QWORD *)v94 + 1);
          *((_QWORD *)v94 + 1) = *((_QWORD *)v103 + 1);
          *((_QWORD *)v103 + 1) = v105;
          v106 = *((_QWORD *)v94 + 2);
          *((_QWORD *)v94 + 2) = *((_QWORD *)v103 + 2);
          *((_QWORD *)v103 + 2) = v106;
          v94 = (__int128 *)((char *)v94 + 24);
          v103 = (__int128 *)((char *)v103 + 24);
          v107 = v94 == v90;
          if (v103 == v88)
          {
            if (v94 == v90)
              break;
            v103 = (__int128 *)((char *)v90 + 24);
            while (1)
            {
              v108 = *(_QWORD *)v94;
              *(_QWORD *)v94 = *(_QWORD *)v90;
              *(_QWORD *)v90 = v108;
              v109 = *((_QWORD *)v94 + 1);
              *((_QWORD *)v94 + 1) = *((_QWORD *)v90 + 1);
              *((_QWORD *)v90 + 1) = v109;
              v110 = *((_QWORD *)v94 + 2);
              *((_QWORD *)v94 + 2) = *((_QWORD *)v90 + 2);
              *((_QWORD *)v90 + 2) = v110;
              v94 = (__int128 *)((char *)v94 + 24);
              v107 = v94 == v90;
              if (v103 != v88)
                break;
              if (v94 == v90)
                goto LABEL_95;
            }
          }
          if (v107)
            v90 = v103;
        }
      }
    }
  }
LABEL_95:
  v111 = *((_QWORD *)this + 38);
  v112 = *(uint64_t **)(v111 - 24);
  v113 = *(uint64_t **)(v111 - 16);
  if (v112 != v113)
  {
    do
    {
      v114 = *v112++;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 43) + 64))(*((_QWORD *)this + 43), v114);
    }
    while (v112 != v113);
    v111 = *((_QWORD *)this + 38);
    v112 = *(uint64_t **)(v111 - 24);
  }
  *(_QWORD *)(v111 - 16) = v112;
  v115 = (std::mutex *)((char *)this + 160);
  if (*((_BYTE *)this + 72) != 1)
  {
    std::mutex::lock(v115);
    v470 = (void *)*((_QWORD *)this + 28);
    v129 = (char *)v470;
    v459 = *(_OWORD *)((char *)this + 232);
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    v471 = v459;
    *((_QWORD *)this + 30) = 0;
    std::mutex::unlock((std::mutex *)((char *)this + 160));
    v130 = this;
    if (v129 == (char *)v459 && *((_QWORD *)this + 31) == *((_QWORD *)this + 32))
      goto LABEL_492;
    v467 = 0;
    v468 = 0;
    v469 = 0;
    ta2::TextureAtlas::createRegionItems(&v470, (uint64_t)&v467);
    v464 = 0;
    v465 = 0;
    v466 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v463 = 0;
    v131 = (unint64_t *)*((_QWORD *)this + 14);
    v132 = (unint64_t *)*((_QWORD *)this + 15);
    v133 = (char *)v132 - (char *)v131;
    if (v132 == v131)
    {
      v136 = 0;
      v131 = (unint64_t *)*((_QWORD *)this + 15);
      if (!v132)
      {
LABEL_199:
        *((_OWORD *)v130 + 7) = *(_OWORD *)__p;
        v202 = (__n128 *)v464;
        *((_QWORD *)v130 + 16) = v463;
        __p[1] = 0;
        v463 = 0;
        __p[0] = 0;
        v203 = *((_QWORD *)v130 + 41);
        v205 = (void **)(v203 - 24);
        v204 = *(char **)(v203 - 24);
        v206 = v136 - v202;
        v207 = *(_QWORD *)(v203 - 8);
        if (v206 <= (v207 - (uint64_t)v204) >> 4)
        {
          v213 = *(char **)(v203 - 16);
          v214 = (v213 - v204) >> 4;
          if (v214 >= v206)
          {
            if (v202 != v136)
            {
              do
              {
                v224 = v202->n128_u64[0];
                v223 = v202->n128_u64[1];
                if (v223)
                {
                  v225 = (unint64_t *)(v223 + 8);
                  do
                    v226 = __ldxr(v225);
                  while (__stxr(v226 + 1, v225));
                }
                v227 = (std::__shared_weak_count *)*((_QWORD *)v204 + 1);
                *(_QWORD *)v204 = v224;
                *((_QWORD *)v204 + 1) = v223;
                if (v227)
                {
                  v228 = (unint64_t *)&v227->__shared_owners_;
                  do
                    v229 = __ldaxr(v228);
                  while (__stlxr(v229 - 1, v228));
                  if (!v229)
                  {
                    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                    std::__shared_weak_count::__release_weak(v227);
                  }
                }
                ++v202;
                v204 += 16;
              }
              while (v202 != v136);
              v213 = *(char **)(v203 - 16);
            }
            while (v213 != v204)
            {
              v241 = (std::__shared_weak_count *)*((_QWORD *)v213 - 1);
              if (v241)
              {
                v242 = (unint64_t *)&v241->__shared_owners_;
                do
                  v243 = __ldaxr(v242);
                while (__stlxr(v243 - 1, v242));
                if (!v243)
                {
                  ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                  std::__shared_weak_count::__release_weak(v241);
                }
              }
              v213 -= 16;
            }
            *(_QWORD *)(v203 - 16) = v204;
          }
          else
          {
            v215 = &v202[v214];
            if (v213 != v204)
            {
              do
              {
                v217 = v202->n128_u64[0];
                v216 = v202->n128_u64[1];
                if (v216)
                {
                  v218 = (unint64_t *)(v216 + 8);
                  do
                    v219 = __ldxr(v218);
                  while (__stxr(v219 + 1, v218));
                }
                v220 = (std::__shared_weak_count *)*((_QWORD *)v204 + 1);
                *(_QWORD *)v204 = v217;
                *((_QWORD *)v204 + 1) = v216;
                if (v220)
                {
                  v221 = (unint64_t *)&v220->__shared_owners_;
                  do
                    v222 = __ldaxr(v221);
                  while (__stlxr(v222 - 1, v221));
                  if (!v222)
                  {
                    ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                    std::__shared_weak_count::__release_weak(v220);
                  }
                }
                ++v202;
                v204 += 16;
              }
              while (v202 != v215);
              v204 = *(char **)(v203 - 16);
            }
            v237 = v204;
            if (v215 != v136)
            {
              v237 = v204;
              do
              {
                *(_QWORD *)v237 = v215->n128_u64[0];
                v238 = v215->n128_u64[1];
                *((_QWORD *)v237 + 1) = v238;
                if (v238)
                {
                  v239 = (unint64_t *)(v238 + 8);
                  do
                    v240 = __ldxr(v239);
                  while (__stxr(v240 + 1, v239));
                }
                ++v215;
                v237 += 16;
              }
              while (v215 != v136);
            }
            *(_QWORD *)(v203 - 16) = v237;
          }
        }
        else
        {
          if (v204)
          {
            v208 = *(char **)(v203 - 16);
            v209 = *(void **)(v203 - 24);
            if (v208 != v204)
            {
              do
              {
                v210 = (std::__shared_weak_count *)*((_QWORD *)v208 - 1);
                if (v210)
                {
                  v211 = (unint64_t *)&v210->__shared_owners_;
                  do
                    v212 = __ldaxr(v211);
                  while (__stlxr(v212 - 1, v211));
                  if (!v212)
                  {
                    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                    std::__shared_weak_count::__release_weak(v210);
                  }
                }
                v208 -= 16;
              }
              while (v208 != v204);
              v209 = *v205;
            }
            *(_QWORD *)(v203 - 16) = v204;
            operator delete(v209);
            v207 = 0;
            *v205 = 0;
            *(_QWORD *)(v203 - 16) = 0;
            *(_QWORD *)(v203 - 8) = 0;
          }
          if ((char *)v136 - (char *)v202 < 0)
            goto LABEL_560;
          v230 = v207 >> 3;
          if (v207 >> 3 <= v206)
            v230 = v136 - v202;
          _CF = (unint64_t)v207 >= 0x7FFFFFFFFFFFFFF0;
          v231 = 0xFFFFFFFFFFFFFFFLL;
          if (!_CF)
            v231 = v230;
          if (v231 >> 60)
            goto LABEL_560;
          v232 = 2 * v231;
          v233 = operator new(16 * v231);
          *(_QWORD *)(v203 - 24) = v233;
          *(_QWORD *)(v203 - 16) = v233;
          *(_QWORD *)(v203 - 8) = &v233[v232];
          while (v202 != v136)
          {
            *v233 = v202->n128_u64[0];
            v234 = v202->n128_u64[1];
            v233[1] = v234;
            if (v234)
            {
              v235 = (unint64_t *)(v234 + 8);
              do
                v236 = __ldxr(v235);
              while (__stxr(v236 + 1, v235));
            }
            ++v202;
            v233 += 2;
          }
          *(_QWORD *)(v203 - 16) = v233;
        }
        v244 = (__n128 *)v464;
        v245 = v465;
        if (v464 != v465)
        {
          if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1)
            dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_12980);
          v246 = GEOGetVectorKitTextureAtlasLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = (unint64_t)((char *)v245 - (char *)v244) >> 4;
            _os_log_impl(&dword_19F029000, v246, OS_LOG_TYPE_INFO, "repacking icon atlas cnt=%i", buf, 8u);
          }
          do
          {
            ta2::TextureAtlas::createRegionItems((_QWORD *)(v244->n128_u64[0] + 344), (uint64_t)&v467);
            v247 = v244->n128_u64[0];
            v248 = *(_QWORD *)(v244->n128_u64[0] + 344);
            for (j = *(_QWORD *)(v244->n128_u64[0] + 352); j != v248; j -= 16)
            {
              v250 = *(std::__shared_weak_count **)(j - 8);
              if (v250)
              {
                v251 = (unint64_t *)&v250->__shared_owners_;
                do
                  v252 = __ldaxr(v251);
                while (__stlxr(v252 - 1, v251));
                if (!v252)
                {
                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                  std::__shared_weak_count::__release_weak(v250);
                }
              }
            }
            *(_QWORD *)(v247 + 352) = v248;
            ++v244;
          }
          while (v244 != v245);
        }
        v253 = (char *)v467;
        v254 = v468;
        v255 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v468 - (_BYTE *)v467) >> 3));
        if (v468 == v467)
          v256 = 0;
        else
          v256 = v255;
        std::__introsort<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,false>((__int128 *)v467, (__int128 *)v468, v256, 1);
        v461 = v253;
        v130 = this;
        if (v254 != v253)
        {
LABEL_289:
          v259 = v130;
          v260 = (uint64_t *)*((_QWORD *)v130 + 14);
          v457 = (uint64_t *)*((_QWORD *)v259 + 15);
          if (v260 == v457)
          {
            v261 = v260;
            v262 = this;
            goto LABEL_379;
          }
          while (1)
          {
            v263 = *v260;
            v264 = (geo::SkylineBin *)(*v260 + 24);
            v265 = (geo::GuillotineBin *)(*v260 + 88);
            v267 = *(_QWORD *)(*(_QWORD *)v461 + 32);
            v266 = *(_QWORD *)(*(_QWORD *)v461 + 40);
            v268 = v266 - v267 + 2;
            v269 = (unint64_t)(v266 + 0x100000000) >> 32;
            v270 = (unint64_t)(v267 - 0x100000000) >> 32;
            v271 = v269 - v270;
            v272 = *(_DWORD *)(*v260 + 48);
            if (v272 == 1)
            {
              v473[0] = 0;
              v472[0] = 0;
              PositionForNewNodeMinWaste = geo::SkylineBin::findPositionForNewNodeMinWaste(v264, v268, (int)v269 - (int)v270, v473, &v474, (unint64_t *)v472, v257, v258);
              v307 = v306;
              *(_QWORD *)buf = PositionForNewNodeMinWaste;
              *(_QWORD *)&buf[8] = v306;
              if (v472[0] == (ta2::TextureAtlasPage *)-1)
              {
                *(_QWORD *)buf = 0;
                *(_QWORD *)&buf[8] = 0;
                if (*(_BYTE *)(v263 + 80))
                {
                  v311 = geo::GuillotineBin::insert(v265, v268, v271, *(unsigned __int8 *)(v263 + 53));
                  v309 = HIDWORD(v311);
                  *(_QWORD *)buf = v311;
                  v310 = HIDWORD(v312);
                  *(_QWORD *)&buf[8] = v312;
                  v308 = v311;
                  v307 = v312;
                }
                else
                {
                  LODWORD(v309) = 0;
                  LODWORD(v310) = 0;
                  v308 = 0;
                  v307 = 0;
                }
              }
              else
              {
                v308 = PositionForNewNodeMinWaste;
                v309 = HIDWORD(PositionForNewNodeMinWaste);
                v310 = HIDWORD(v306);
                geo::SkylineBin::addSkylineLevel((uint64_t)v264, (unint64_t)v472[0], (int *)buf);
              }
              if ((v307 - v308) * ((_DWORD)v310 - (_DWORD)v309))
                goto LABEL_373;
              goto LABEL_374;
            }
            if (!v272)
              break;
LABEL_375:
            if ((HIDWORD(v270) - HIDWORD(v269)) * ((_DWORD)v270 - (_DWORD)v269) == v271 * v268)
            {
              *(_DWORD *)(v263 + 208) += v271 * v268;
              *((_QWORD *)v461 + 4) = v269;
              *((_QWORD *)v461 + 5) = v270;
              *((_QWORD *)v461 + 7) = v263;
              v130 = this;
              goto LABEL_288;
            }
            if (!*(_DWORD *)(v263 + 212))
              *(_DWORD *)(v263 + 212) = (float)((float)*(unsigned int *)(v263 + 208) * 0.8);
            v260 += 2;
            if (v260 == v457)
            {
              v262 = this;
              v261 = (uint64_t *)*((_QWORD *)this + 14);
              v260 = (uint64_t *)*((_QWORD *)this + 15);
LABEL_379:
              _ZF = v261 == v260;
              v337 = 48;
              if (_ZF)
                v337 = 40;
              *(_QWORD *)v473 = *(_QWORD *)((char *)v262 + v337);
              v338 = operator new(0x1A0uLL);
              v339 = (ta2::TextureAtlasPage *)v338;
              v338[1] = 0;
              v338[2] = 0;
              *v338 = &off_1E42E5C38;
              v340 = (ta2::TextureAtlasPage *)(v338 + 3);
              v341 = *((_DWORD *)v262 + 25);
              v342 = *((unsigned __int8 *)v262 + 96);
              v343 = (std::__shared_weak_count *)*((_QWORD *)v262 + 44);
              *(_QWORD *)buf = *((_QWORD *)v262 + 43);
              *(_QWORD *)&buf[8] = v343;
              v130 = v262;
              if (v343)
              {
                v344 = (unint64_t *)&v343->__shared_owners_;
                do
                  v345 = __ldxr(v344);
                while (__stxr(v345 + 1, v344));
                ta2::TextureAtlasPage::TextureAtlasPage((uint64_t)(v338 + 3), (uint64_t)v130, (uint32x2_t *)v473, v341, v342 != 0, 0, buf);
                do
                  v351 = __ldaxr(v344);
                while (__stlxr(v351 - 1, v344));
                if (!v351)
                {
                  ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                  std::__shared_weak_count::__release_weak(v343);
                }
              }
              else
              {
                ta2::TextureAtlasPage::TextureAtlasPage((uint64_t)(v338 + 3), (uint64_t)v262, (uint32x2_t *)v473, v341, v342 != 0, 0, buf);
              }
              v472[0] = v340;
              v472[1] = v339;
              if (!ta2::TextureAtlasPage::reserveRegions((unint64_t)v340, (unint64_t)v461, 1uLL, v346, v347, v348, v349, v350))
              {
                if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1)
                  dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_12980);
                v370 = GEOGetVectorKitTextureAtlasLog(void)::log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_ERROR))
                {
                  v372 = *(_QWORD *)(*(_QWORD *)v461 + 32);
                  v371 = *(_QWORD *)(*(_QWORD *)v461 + 40);
                  *(_DWORD *)buf = 67110146;
                  *(_DWORD *)&buf[4] = v371 - v372 + 2;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = ((unint64_t)(v371 + 0x100000000) >> 32)
                                      - ((unint64_t)(v372 - 0x100000000) >> 32);
                  *(_WORD *)&buf[14] = 2080;
                  *(_QWORD *)&buf[16] = "false";
                  LOWORD(v476) = 2080;
                  *(_QWORD *)((char *)&v476 + 2) = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/TextureAtlas2.cpp";
                  WORD5(v476) = 1024;
                  HIDWORD(v476) = 407;
                  _os_log_impl(&dword_19F029000, v370, OS_LOG_TYPE_ERROR, "Failed to allocate(%i,%i) in a new page: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x28u);
                }
                goto LABEL_443;
              }
              v353 = (unint64_t *)*((_QWORD *)v130 + 14);
              v352 = *((_QWORD *)v130 + 15);
              v354 = *((_QWORD *)v130 + 16);
              if (v352 < v354)
              {
                if (v353 == (unint64_t *)v352)
                {
                  v379 = v472[1];
                  *(_OWORD *)v353 = *(_OWORD *)v472;
                  if (v379)
                  {
                    v380 = (unint64_t *)((char *)v379 + 8);
                    do
                      v381 = __ldxr(v380);
                    while (__stxr(v381 + 1, v380));
                  }
                  *((_QWORD *)v130 + 15) = v353 + 2;
                }
                else
                {
                  v355 = (unint64_t *)(v352 - 16);
                  v356 = (_OWORD *)*((_QWORD *)v130 + 15);
                  v357 = v352 - 16;
                  if (v352 >= 0x10)
                  {
                    do
                    {
                      *v356++ = *(_OWORD *)v357;
                      *(_QWORD *)v357 = 0;
                      *(_QWORD *)(v357 + 8) = 0;
                      v357 += 16;
                    }
                    while (v357 < v352);
                  }
                  *((_QWORD *)v130 + 15) = v356;
                  if ((unint64_t *)v352 != v353 + 2)
                  {
                    do
                    {
                      v366 = *((_OWORD *)v355 - 1);
                      v355 -= 2;
                      *v355 = 0;
                      v355[1] = 0;
                      v367 = *(std::__shared_weak_count **)(v352 - 8);
                      *(_OWORD *)(v352 - 16) = v366;
                      v352 -= 16;
                      if (v367)
                      {
                        v368 = (unint64_t *)&v367->__shared_owners_;
                        do
                          v369 = __ldaxr(v368);
                        while (__stlxr(v369 - 1, v368));
                        if (!v369)
                        {
                          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                          std::__shared_weak_count::__release_weak(v367);
                        }
                      }
                    }
                    while (v355 != v353);
                  }
                  v358 = v472;
                  if (v353 <= (unint64_t *)v472)
                    v358 = &v472[2 * (*((_QWORD *)v130 + 15) > (unint64_t)v472)];
                  v360 = *v358;
                  v359 = v358[1];
                  if (v359)
                  {
                    v361 = (unint64_t *)((char *)v359 + 8);
                    do
                      v362 = __ldxr(v361);
                    while (__stxr(v362 + 1, v361));
                  }
                  v363 = (std::__shared_weak_count *)v353[1];
                  *v353 = (unint64_t)v360;
                  v353[1] = (unint64_t)v359;
                  if (v363)
                  {
                    v364 = (unint64_t *)&v363->__shared_owners_;
                    do
                      v365 = __ldaxr(v364);
                    while (__stlxr(v365 - 1, v364));
                    if (!v365)
                    {
                      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                      std::__shared_weak_count::__release_weak(v363);
                    }
                  }
                }
                goto LABEL_442;
              }
              v373 = ((uint64_t)(v352 - (_QWORD)v353) >> 4) + 1;
              if (v373 >> 60)
                goto LABEL_560;
              v374 = v354 - (_QWORD)v353;
              if (v374 >> 3 > v373)
                v373 = v374 >> 3;
              _CF = (unint64_t)v374 >= 0x7FFFFFFFFFFFFFF0;
              v375 = 0xFFFFFFFFFFFFFFFLL;
              if (!_CF)
                v375 = v373;
              if (v375)
              {
                if (!(v375 >> 60))
                {
                  v376 = 16 * v375;
                  v377 = (char *)operator new(16 * v375);
                  v378 = &v377[v376];
                  goto LABEL_428;
                }
LABEL_561:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              v377 = (char *)operator new(0x10uLL);
              v378 = v377 + 16;
LABEL_428:
              v382 = v472[1];
              *(ta2::TextureAtlasPage **)v377 = v472[0];
              *((_QWORD *)v377 + 1) = v382;
              if (v382)
              {
                v383 = (unint64_t *)((char *)v382 + 8);
                do
                  v384 = __ldxr(v383);
                while (__stxr(v384 + 1, v383));
                v385 = *v453;
                v386 = v377 + 16;
                if (*v453 != v353)
                {
                  v387 = v353;
                  do
                  {
                    v388 = *((_OWORD *)v387 - 1);
                    v387 -= 2;
                    *((_OWORD *)v377 - 1) = v388;
                    v377 -= 16;
                    *v387 = 0;
                    v387[1] = 0;
                  }
                  while (v387 != v385);
                }
              }
              else
              {
                v386 = v377 + 16;
              }
              v389 = (unint64_t *)*((_QWORD *)v130 + 15);
              if (v389 != v353)
              {
                do
                {
                  *v386++ = *(_OWORD *)v353;
                  *v353 = 0;
                  v353[1] = 0;
                  v353 += 2;
                }
                while (v353 != v389);
                v353 = (unint64_t *)*((_QWORD *)v130 + 15);
              }
              v390 = (unint64_t *)*((_QWORD *)v130 + 14);
              *((_QWORD *)v130 + 14) = v377;
              *((_QWORD *)v130 + 15) = v386;
              *((_QWORD *)v130 + 16) = v378;
              if (v353 == v390)
              {
                if (!v353)
                  goto LABEL_442;
                goto LABEL_441;
              }
              do
              {
                v394 = (std::__shared_weak_count *)*(v353 - 1);
                if (v394)
                {
                  v395 = (unint64_t *)&v394->__shared_owners_;
                  do
                    v396 = __ldaxr(v395);
                  while (__stlxr(v396 - 1, v395));
                  if (!v396)
                  {
                    ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                    std::__shared_weak_count::__release_weak(v394);
                  }
                }
                v353 -= 2;
              }
              while (v353 != v390);
              v353 = v390;
              if (v390)
LABEL_441:
                operator delete(v353);
LABEL_442:
              ta2::TextureAtlas::clearPageEdges(v130, v472[0]);
LABEL_443:
              v391 = (std::__shared_weak_count *)v472[1];
              if (v472[1])
              {
                v392 = (unint64_t *)((char *)v472[1] + 8);
                do
                  v393 = __ldaxr(v392);
                while (__stlxr(v393 - 1, v392));
                if (!v393)
                {
                  ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                  std::__shared_weak_count::__release_weak(v391);
                }
              }
LABEL_288:
              v461 += 72;
              if (v461 == v254)
                goto LABEL_456;
              goto LABEL_289;
            }
          }
          v273 = *(_QWORD *)(v263 + 56);
          v274 = *(_QWORD *)(v263 + 64) - v273;
          if (!v274)
            goto LABEL_369;
          v275 = v274 / 12;
          if (v275 <= 1)
            v275 = 1;
          v276 = *(_DWORD *)(v263 + 32);
          if (*(_BYTE *)(v263 + 52))
          {
            v277 = 0;
            v278 = 0;
            LODWORD(v279) = 0;
            v280 = 0;
            v281 = (unsigned int *)(v273 + 8);
            v282 = -1;
            v283 = -1;
            v284 = -1;
            v285 = -1;
            while (1)
            {
              v287 = (int *)(v273 + 12 * v277);
              v288 = *v287;
              v289 = *v287 + v268;
              if (v289 > v276)
                goto LABEL_318;
              v290 = v287[1];
              if (v268)
              {
                v291 = v281;
                v257 = v268;
                while (1)
                {
                  if (v290 <= *(v291 - 1))
                    v290 = *(v291 - 1);
                  v292 = v290 + v271;
                  if (v292 > *(_DWORD *)(v263 + 36))
                    break;
                  v293 = *v291;
                  v291 += 3;
                  v258 = v293;
                  _CF = v257 >= v293;
                  v257 -= v293;
                  v294 = v257 != 0 && _CF;
                  if (!_CF)
                    v257 = 0;
                  if (!v294)
                  {
                    _ZF = (_DWORD)v292 == v282;
                    if (v292 >= v282)
                      goto LABEL_315;
                    goto LABEL_312;
                  }
                }
              }
              else
              {
                v292 = v290 + v271;
                _ZF = (_DWORD)v292 == v282;
                if (v292 < v282)
                {
LABEL_312:
                  v296 = *(_DWORD *)(v273 + 12 * v277 + 8);
LABEL_313:
                  v283 = v277;
                  v282 = v292;
                  v284 = v296;
                  v285 = v296;
                  LODWORD(v279) = v290;
                  v278 = *v287;
                  v280 = v289 | (v292 << 32);
                  goto LABEL_318;
                }
LABEL_315:
                if (_ZF)
                {
                  v296 = *(_DWORD *)(v273 + 12 * v277 + 8);
                  if (v296 < v285)
                    goto LABEL_313;
                }
              }
LABEL_318:
              v297 = v288 + v271;
              if (v297 <= v276)
              {
                v298 = v287[1];
                if (v271)
                {
                  v299 = v281;
                  v300 = v271;
                  while (1)
                  {
                    if (v298 <= *(v299 - 1))
                      v298 = *(v299 - 1);
                    v301 = v298 + v268;
                    if (v301 > *(_DWORD *)(v263 + 36))
                      goto LABEL_301;
                    v302 = *v299;
                    v299 += 3;
                    v257 = v302;
                    _CF = v300 >= v302;
                    v300 -= v302;
                    v303 = v300 != 0 && _CF;
                    if (!_CF)
                      v300 = 0;
                    if (!v303)
                    {
                      v304 = (_DWORD)v301 == v282;
                      if (v301 < v282)
                        goto LABEL_299;
                      goto LABEL_330;
                    }
                  }
                }
                v301 = v298 + v268;
                v304 = (_DWORD)v301 == v282;
                if (v301 < v282)
                {
LABEL_299:
                  v286 = *(_DWORD *)(v273 + 12 * v277 + 8);
                }
                else
                {
LABEL_330:
                  if (!v304)
                    goto LABEL_301;
                  v286 = *(_DWORD *)(v273 + 12 * v277 + 8);
                  v285 = v284;
                  if (v286 >= v284)
                    goto LABEL_301;
                }
                v283 = v277;
                v282 = v301;
                v284 = v286;
                v285 = v286;
                LODWORD(v279) = v298;
                v278 = v288;
                v280 = v297 | (v301 << 32);
              }
LABEL_301:
              ++v277;
              v281 += 3;
              if (v277 == v275)
                goto LABEL_367;
            }
          }
          v313 = 0;
          v278 = 0;
          LODWORD(v279) = 0;
          v280 = 0;
          if (v268)
          {
            v314 = (unsigned int *)(v273 + 8);
            v315 = -1;
            v283 = -1;
            v316 = -1;
            while (1)
            {
              v318 = (int *)(v273 + 12 * v313);
              v319 = *v318;
              v320 = *v318 + v268;
              if (v320 <= v276)
              {
                v321 = v318[1];
                v322 = v314;
                v323 = v268;
                do
                {
                  if (v321 <= *(v322 - 1))
                    v321 = *(v322 - 1);
                  v324 = v321 + v271;
                  if (v324 > *(_DWORD *)(v263 + 36))
                    goto LABEL_342;
                  v325 = *v322;
                  v322 += 3;
                  _CF = v323 >= v325;
                  v323 -= v325;
                  v326 = v323 != 0 && _CF;
                  if (!_CF)
                    v323 = 0;
                }
                while (v326);
                if (v324 < v315)
                {
                  v317 = *(_DWORD *)(v273 + 12 * v313 + 8);
LABEL_341:
                  v283 = v313;
                  v315 = v321 + v271;
                  v316 = v317;
                  LODWORD(v279) = v321;
                  v278 = v319;
                  v280 = v320 | (v324 << 32);
                  goto LABEL_342;
                }
                if ((_DWORD)v324 == v315)
                {
                  v317 = *(_DWORD *)(v273 + 12 * v313 + 8);
                  if (v317 < v316)
                    goto LABEL_341;
                }
              }
LABEL_342:
              ++v313;
              v314 += 3;
              if (v313 == v275)
                goto LABEL_367;
            }
          }
          v327 = (unsigned int *)(v273 + 8);
          v328 = -1;
          v283 = -1;
          v329 = -1;
          while (1)
          {
            v331 = *(v327 - 2);
            if (v331 <= v276)
            {
              v332 = *(v327 - 1);
              v333 = v332 + v271;
              if (v333 < v328)
              {
                v330 = *v327;
              }
              else
              {
                if ((_DWORD)v333 != v328)
                  goto LABEL_361;
                v330 = *v327;
                if (*v327 >= v329)
                  goto LABEL_361;
              }
              v283 = v313;
              v328 = v332 + v271;
              v329 = v330;
              LODWORD(v279) = *(v327 - 1);
              v278 = *(v327 - 2);
              v280 = v331 | (v333 << 32);
            }
LABEL_361:
            ++v313;
            v327 += 3;
            if (v275 == v313)
            {
LABEL_367:
              *(_DWORD *)buf = v278;
              buf[4] = v279;
              buf[5] = BYTE1(v279);
              buf[6] = BYTE2(v279);
              buf[7] = BYTE3(v279);
              *(_QWORD *)&buf[8] = v280;
              if (v283 != -1)
              {
                v334 = HIDWORD(v280);
                geo::SkylineBin::addSkylineLevel((uint64_t)v264, v283, (int *)buf);
                goto LABEL_372;
              }
LABEL_369:
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = 0;
              if (*(_BYTE *)(v263 + 80))
              {
                v335 = geo::GuillotineBin::insert(v265, v268, v271, *(unsigned __int8 *)(v263 + 53));
                v278 = v335;
                v279 = HIDWORD(v335);
                *(_QWORD *)buf = v335;
                v334 = HIDWORD(v336);
                *(_QWORD *)&buf[8] = v336;
                LODWORD(v280) = v336;
              }
              else
              {
                LODWORD(v279) = 0;
                LODWORD(v334) = 0;
                v278 = 0;
                LODWORD(v280) = 0;
              }
LABEL_372:
              if (((_DWORD)v280 - v278) * ((_DWORD)v334 - (_DWORD)v279))
LABEL_373:
                *(_DWORD *)(v263 + 40) += v271 * v268;
LABEL_374:
              v269 = *(_QWORD *)buf;
              v270 = *(_QWORD *)&buf[8];
              goto LABEL_375;
            }
          }
        }
LABEL_456:
        v397 = (__n128 *)v464;
        if (v464 == v465)
          ta2::TextureAtlas::createReloadRegionItems((__n128 **)v130 + 31, (uint64_t)&v467);
        std::vector<std::shared_ptr<ta2::TextureAtlasRegion>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<ta2::TextureAtlasRegion>*>,std::__wrap_iter<std::shared_ptr<ta2::TextureAtlasRegion>*>>((void **)v130 + 31, *((_QWORD *)v130 + 31), v470, (_QWORD *)v471, (uint64_t)(v471 - (_QWORD)v470) >> 4);
        ta2::TextureAtlas::loadRegions((uint64_t)v130, v467, v468);
        v398 = (char *)__p[0];
        if (__p[0])
        {
          v399 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v400 = (std::__shared_weak_count *)*((_QWORD *)v399 - 1);
              if (v400)
              {
                v401 = (unint64_t *)&v400->__shared_owners_;
                do
                  v402 = __ldaxr(v401);
                while (__stlxr(v402 - 1, v401));
                if (!v402)
                {
                  ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
                  std::__shared_weak_count::__release_weak(v400);
                }
              }
              v399 -= 16;
            }
            while (v399 != v398);
            v398 = (char *)__p[0];
            v397 = (__n128 *)v464;
          }
          operator delete(v398);
          v130 = this;
        }
        if (v397)
        {
          v403 = v465;
          v404 = v397;
          if (v465 != v397)
          {
            do
            {
              v405 = (std::__shared_weak_count *)v403[-1].n128_u64[1];
              if (v405)
              {
                v406 = (unint64_t *)&v405->__shared_owners_;
                do
                  v407 = __ldaxr(v406);
                while (__stlxr(v407 - 1, v406));
                if (!v407)
                {
                  ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                  std::__shared_weak_count::__release_weak(v405);
                }
              }
              --v403;
            }
            while (v403 != v397);
            v404 = v464;
          }
          v465 = v397;
          operator delete(v404);
        }
        v408 = (char *)v467;
        if (v467)
        {
          v409 = v468;
          if (v468 != v467)
          {
            do
            {
              v410 = (std::__shared_weak_count *)*((_QWORD *)v409 - 8);
              if (v410)
              {
                v411 = (unint64_t *)&v410->__shared_owners_;
                do
                  v412 = __ldaxr(v411);
                while (__stlxr(v412 - 1, v411));
                if (!v412)
                {
                  ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                  std::__shared_weak_count::__release_weak(v410);
                }
              }
              v409 -= 72;
            }
            while (v409 != v408);
            v408 = (char *)v467;
          }
          operator delete(v408);
        }
        v129 = (char *)v470;
LABEL_492:
        if (!v129)
          goto LABEL_533;
        v413 = (char *)v471;
        v414 = v129;
        if ((char *)v471 != v129)
        {
          do
          {
            v415 = (std::__shared_weak_count *)*((_QWORD *)v413 - 1);
            if (v415)
            {
              v416 = (unint64_t *)&v415->__shared_owners_;
              do
                v417 = __ldaxr(v416);
              while (__stlxr(v417 - 1, v416));
              if (!v417)
              {
                ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
                std::__shared_weak_count::__release_weak(v415);
              }
            }
            v413 -= 16;
          }
          while (v413 != v129);
          v414 = v470;
        }
        *(_QWORD *)&v471 = v129;
        goto LABEL_532;
      }
    }
    else
    {
      if (v133 < 0)
        goto LABEL_560;
      v134 = v133 >> 4;
      v135 = operator new(v133);
      v136 = 0;
      v137 = 0;
      __p[0] = v135;
      __p[1] = v135;
      v463 = &v135[2 * v134];
      do
      {
        v138 = (__n128 *)&v131[2 * v137];
        v139 = v138->n128_u64[0];
        if (*(_DWORD *)(v138->n128_u64[0] + 208) >= *(_DWORD *)(v138->n128_u64[0] + 212))
        {
          if (v135 >= v463)
          {
            v135 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)__p, *v138);
          }
          else
          {
            *v135 = v139;
            v143 = v131[2 * v137 + 1];
            v135[1] = v143;
            if (v143)
            {
              v144 = (unint64_t *)(v143 + 8);
              do
                v145 = __ldxr(v144);
              while (__stxr(v145 + 1, v144));
            }
            v135 += 2;
          }
          __p[1] = v135;
        }
        else if ((unint64_t)v136 >= v466)
        {
          v136 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v464, *v138);
          v465 = v136;
        }
        else
        {
          v136->n128_u64[0] = v139;
          v140 = v131[2 * v137 + 1];
          v136->n128_u64[1] = v140;
          if (v140)
          {
            v141 = (unint64_t *)(v140 + 8);
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
          }
          v465 = ++v136;
        }
        ++v137;
        v131 = (unint64_t *)*((_QWORD *)this + 14);
        v132 = (unint64_t *)*((_QWORD *)this + 15);
      }
      while (v137 < ((char *)v132 - (char *)v131) >> 4);
      v130 = this;
      if (!v131)
        goto LABEL_199;
    }
    if (v132 != v131)
    {
      do
      {
        v199 = (std::__shared_weak_count *)*(v132 - 1);
        if (v199)
        {
          v200 = (unint64_t *)&v199->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        v132 -= 2;
      }
      while (v132 != v131);
      v132 = *v453;
    }
    *((_QWORD *)v130 + 15) = v131;
    operator delete(v132);
    v136 = v465;
    goto LABEL_199;
  }
  std::mutex::lock(v115);
  v470 = (void *)*((_QWORD *)this + 28);
  v116 = (char *)v470;
  v458 = *(_OWORD *)((char *)this + 232);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  v471 = v458;
  *((_QWORD *)this + 30) = 0;
  std::mutex::unlock((std::mutex *)((char *)this + 160));
  v117 = (char *)v458;
  if (v116 != (char *)v458 || *((_QWORD *)this + 31) != *((_QWORD *)this + 32))
  {
    v467 = 0;
    v468 = 0;
    v469 = 0;
    ta2::TextureAtlas::createRegionItems(&v470, (uint64_t)&v467);
    v118 = *((_QWORD *)this + 14);
    if (v118 == *((_QWORD *)this + 15)
      || *(_DWORD *)(*(_QWORD *)v118 + 208) < *(_DWORD *)(*(_QWORD *)v118 + 212)
      || ((v119 = v467,
           v120 = 0x8E38E38E38E38E39 * ((v468 - (_BYTE *)v467) >> 3),
           v121 = 126 - 2 * __clz(v120),
           v468 != v467)
        ? (v122 = v121)
        : (v122 = 0),
          std::__introsort<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,false>((__int128 *)v467, (__int128 *)v468, v122, 1), !ta2::TextureAtlasPage::reserveRegions(**v453, (unint64_t)v119, v120, v123, v124, v125, v126, v127)))
    {
      if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_12980);
      v146 = GEOGetVectorKitTextureAtlasLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v146, OS_LOG_TYPE_INFO, "repacking glyph atlas", buf, 2u);
      }
      v147 = (uint64_t *)*((_QWORD *)this + 14);
      v148 = 2;
      if (v147 != *((uint64_t **)this + 15))
      {
        v149 = *v147;
        v150 = *(_DWORD *)(v149 + 208);
        ta2::TextureAtlas::createRegionItems((_QWORD *)(v149 + 344), (uint64_t)&v467);
        v151 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v468 - (_BYTE *)v467) >> 3));
        if (v468 == v467)
          v152 = 0;
        else
          v152 = v151;
        if (((float)((float)(v150 >> 12) * 1.25) + 127) >> 7 <= 2)
          v148 = 2;
        else
          v148 = ((float)((float)(v150 >> 12) * 1.25) + 127) >> 7;
        v153.n128_f64[0] = std::__introsort<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,false>((__int128 *)v467, (__int128 *)v468, v152, 1);
        v154 = **v453;
        v155 = *(_QWORD *)(v154 + 344);
        for (k = *(_QWORD *)(v154 + 352); k != v155; k -= 16)
        {
          v157 = *(std::__shared_weak_count **)(k - 8);
          if (v157)
          {
            v158 = (unint64_t *)&v157->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v157->__on_zero_shared)(v157, v153);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
        }
        *(_QWORD *)(v154 + 352) = v155;
      }
      LODWORD(v464) = v148 << 7;
      HIDWORD(v464) = 4096;
      v460 = 0u;
      do
      {
        v160 = operator new(0x1A0uLL);
        v161 = (float32x2_t *)v160;
        v160[1] = 0;
        v162 = v160 + 1;
        v160[2] = 0;
        *v160 = &off_1E42E5C38;
        v163 = (unint64_t)(v160 + 3);
        v164 = *((_DWORD *)this + 25);
        v165 = *((unsigned __int8 *)this + 96);
        v166 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
        *(_QWORD *)buf = *((_QWORD *)this + 43);
        *(_QWORD *)&buf[8] = v166;
        if (v166)
        {
          v167 = (unint64_t *)&v166->__shared_owners_;
          do
            v168 = __ldxr(v167);
          while (__stxr(v168 + 1, v167));
          ta2::TextureAtlasPage::TextureAtlasPage((uint64_t)(v160 + 3), (uint64_t)this, (uint32x2_t *)&v464, v164, v165 != 0, 1, buf);
          do
            v174 = __ldaxr(v167);
          while (__stlxr(v174 - 1, v167));
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        else
        {
          ta2::TextureAtlasPage::TextureAtlasPage((uint64_t)(v160 + 3), (uint64_t)this, (uint32x2_t *)&v464, v164, v165 != 0, 1, buf);
        }
        if (v460.n128_u64[1])
        {
          v175 = (unint64_t *)(v460.n128_u64[1] + 8);
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v460.n128_u64[1] + 16))(v460.n128_u64[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v460.n128_u64[1]);
          }
        }
        v177.n128_u64[0] = v163;
        v177.n128_u64[1] = (unint64_t)v161;
        v460 = v177;
        if (ta2::TextureAtlasPage::reserveRegions(v163, (unint64_t)v467, 0x8E38E38E38E38E39 * ((v468 - (_BYTE *)v467) >> 3), v169, v170, v171, v172, v173)&& !*(_QWORD *)&v161[28])
        {
          v178 = (*((_DWORD *)this + 26) + v161[8].i32[1] + 31) & 0xFFFFFFE0;
          if (v178 <= 0x1000)
          {
            v161[25].i32[1] = v178;
            v179 = v161[25].i32[0];
            __asm { FMOV            V1.2S, #1.0 }
            v161[26] = vdiv_f32(_D1, vcvt_f32_u32((uint32x2_t)__PAIR64__(v178, v179)));
            *(_DWORD *)buf = v179;
            *(_DWORD *)&buf[4] = v178;
            v184 = (uint64_t (***)(_QWORD, _BYTE *))v161[4];
            *(_DWORD *)&buf[8] = *(_DWORD *)(*(_QWORD *)&v161[3] + 32);
            *(_DWORD *)&buf[12] = 3;
            v161[28] = (float32x2_t)(**v184)(v184, buf);
            v185 = v161[25].u32[1];
            if (v161[8].i32[1] <= v185)
              v161[7].i32[1] = v185;
            v186 = (ta2::TextureAtlasPage *)v163;
            v187 = this;
            ta2::TextureAtlas::clearPageEdges(this, v186);
            v188 = *((_QWORD *)this + 41);
            v189 = (void **)(v188 - 24);
            v190 = *(_QWORD *)(v188 - 24);
            if (v190)
            {
              v191 = *(_QWORD *)(v188 - 16);
              v192 = *(void **)(v188 - 24);
              if (v191 != v190)
              {
                do
                {
                  v193 = *(std::__shared_weak_count **)(v191 - 8);
                  if (v193)
                  {
                    v194 = (unint64_t *)&v193->__shared_owners_;
                    do
                      v195 = __ldaxr(v194);
                    while (__stlxr(v195 - 1, v194));
                    if (!v195)
                    {
                      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                      std::__shared_weak_count::__release_weak(v193);
                    }
                  }
                  v191 -= 16;
                }
                while (v191 != v190);
                v192 = *v189;
                v187 = this;
              }
              *(_QWORD *)(v188 - 16) = v190;
              operator delete(v192);
              *v189 = 0;
              *(_QWORD *)(v188 - 16) = 0;
              *(_QWORD *)(v188 - 8) = 0;
            }
            *(_OWORD *)(v188 - 24) = *((_OWORD *)v187 + 7);
            *(_QWORD *)(v188 - 8) = *((_QWORD *)v187 + 16);
            *v453 = 0;
            *((_QWORD *)this + 15) = 0;
            *((_QWORD *)this + 16) = 0;
            *((_QWORD *)v187 + 15) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v453, v460);
            do
              v418 = __ldaxr(v162);
            while (__stlxr(v418 - 1, v162));
            if (!v418)
            {
              (*(void (**)(float32x2_t *))(*(_QWORD *)v161 + 16))(v161);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v161);
            }
            v116 = (char *)v470;
            v117 = (char *)v471;
            v128 = this;
            goto LABEL_510;
          }
        }
        LODWORD(v464) = (_DWORD)v464 + 128;
      }
      while (v464 <= 0x1000);
      if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_12980);
      v130 = this;
      v196 = GEOGetVectorKitTextureAtlasLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/TextureAtlas2.cpp";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v476) = 273;
        _os_log_impl(&dword_19F029000, v196, OS_LOG_TYPE_ERROR, "overflowed single page texture: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      do
        v197 = __ldaxr(v162);
      while (__stlxr(v197 - 1, v162));
      if (!v197)
      {
        (*(void (**)(float32x2_t *))(*(_QWORD *)v161 + 16))(v161);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v161);
      }
      v198 = (__int128 *)v467;
      if (v467)
        goto LABEL_511;
    }
    else
    {
      v128 = this;
      ta2::TextureAtlas::createReloadRegionItems((__n128 **)this + 31, (uint64_t)&v467);
LABEL_510:
      std::vector<std::shared_ptr<ta2::TextureAtlasRegion>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<ta2::TextureAtlasRegion>*>,std::__wrap_iter<std::shared_ptr<ta2::TextureAtlasRegion>*>>((void **)v128 + 31, *((_QWORD *)v128 + 31), v116, v117, (v117 - v116) >> 4);
      v198 = (__int128 *)v467;
      ta2::TextureAtlas::loadRegions((uint64_t)v128, v467, v468);
      v130 = v128;
      if (v198)
      {
LABEL_511:
        v419 = v468;
        v420 = v198;
        if (v468 != (char *)v198)
        {
          do
          {
            v421 = (std::__shared_weak_count *)*((_QWORD *)v419 - 8);
            if (v421)
            {
              v422 = (unint64_t *)&v421->__shared_owners_;
              do
                v423 = __ldaxr(v422);
              while (__stlxr(v423 - 1, v422));
              if (!v423)
              {
                ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                std::__shared_weak_count::__release_weak(v421);
              }
            }
            v419 -= 72;
          }
          while (v419 != (char *)v198);
          v420 = v467;
        }
        v468 = (char *)v198;
        operator delete(v420);
      }
    }
    v116 = (char *)v470;
    if (!v470)
      goto LABEL_533;
    goto LABEL_522;
  }
  v130 = this;
  if (v116)
  {
LABEL_522:
    v424 = (char *)v471;
    v414 = v116;
    if ((char *)v471 != v116)
    {
      do
      {
        v425 = (std::__shared_weak_count *)*((_QWORD *)v424 - 1);
        if (v425)
        {
          v426 = (unint64_t *)&v425->__shared_owners_;
          do
            v427 = __ldaxr(v426);
          while (__stlxr(v427 - 1, v426));
          if (!v427)
          {
            ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
            std::__shared_weak_count::__release_weak(v425);
          }
        }
        v424 -= 16;
      }
      while (v424 != v116);
      v414 = v470;
    }
    *(_QWORD *)&v471 = v116;
LABEL_532:
    operator delete(v414);
  }
LABEL_533:
  v428 = (char *)*((_QWORD *)v130 + 14);
  v429 = (char *)*((_QWORD *)v130 + 15);
  v430 = v429 - v428;
  v431 = (v429 - v428) >> 4;
  v432 = (_BYTE *)*((_QWORD *)v130 + 17);
  v433 = (_BYTE *)*((_QWORD *)v130 + 18);
  v434 = (v433 - v432) >> 3;
  v435 = v431 - v434;
  if (v431 > v434)
  {
    v436 = *((_QWORD *)v130 + 19);
    if (v435 <= (v436 - (uint64_t)v433) >> 3)
    {
      bzero(*((void **)v130 + 18), 8 * v435);
      *((_QWORD *)v130 + 18) = &v433[8 * v435];
LABEL_555:
      v428 = (char *)*((_QWORD *)v130 + 14);
      v429 = (char *)*((_QWORD *)v130 + 15);
      goto LABEL_556;
    }
    if ((v430 & 0x8000000000000000) == 0)
    {
      v437 = v436 - (_QWORD)v432;
      v438 = v437 >> 2;
      if (v437 >> 2 <= v431)
        v438 = v431;
      _CF = (unint64_t)v437 >= 0x7FFFFFFFFFFFFFF8;
      v439 = 0x1FFFFFFFFFFFFFFFLL;
      if (!_CF)
        v439 = v438;
      if (v439 >> 61)
        goto LABEL_561;
      v440 = 8 * v439;
      v441 = operator new(8 * v439);
      v442 = &v441[8 * v434];
      bzero(v442, 8 * v435);
      v443 = &v442[8 * v435];
      if (v433 == v432)
      {
        v432 = v433;
      }
      else
      {
        v444 = v433 - v432 - 8;
        if (v444 < 0x58)
          goto LABEL_564;
        if ((unint64_t)(v432 - v441) < 0x20)
          goto LABEL_564;
        v445 = (v444 >> 3) + 1;
        v446 = &v441[8 * v434 - 16];
        v447 = (__int128 *)(v433 - 16);
        v448 = v445 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v449 = *v447;
          *(v446 - 1) = *(v447 - 1);
          *v446 = v449;
          v446 -= 2;
          v447 -= 2;
          v448 -= 4;
        }
        while (v448);
        v442 -= 8 * (v445 & 0x3FFFFFFFFFFFFFFCLL);
        v433 -= 8 * (v445 & 0x3FFFFFFFFFFFFFFCLL);
        if (v445 != (v445 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_564:
          do
          {
            v450 = *((_QWORD *)v433 - 1);
            v433 -= 8;
            *((_QWORD *)v442 - 1) = v450;
            v442 -= 8;
          }
          while (v433 != v432);
          v432 = (_BYTE *)*((_QWORD *)this + 17);
        }
      }
      *((_QWORD *)this + 17) = v442;
      *((_QWORD *)this + 18) = v443;
      v130 = this;
      *((_QWORD *)this + 19) = &v441[v440];
      if (v432)
        operator delete(v432);
      goto LABEL_555;
    }
LABEL_560:
    abort();
  }
  if (v431 < v434)
    *((_QWORD *)v130 + 18) = &v432[8 * v431];
LABEL_556:
  if (v428 != v429)
  {
    v451 = 0;
    do
    {
      v452 = *(_QWORD *)v428;
      v428 += 16;
      *(_QWORD *)(*((_QWORD *)v130 + 17) + 8 * v451++) = *(_QWORD *)(v452 + 200);
    }
    while (v428 != v429);
  }
}

uint64_t ta2::TextureAtlas::textures(ta2::TextureAtlas *this)
{
  return (uint64_t)this + 136;
}

uint64_t ta2::TextureAtlas::debugString@<X0>(ta2::TextureAtlas *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  _OWORD *v18;
  _OWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  size_t v47;
  unint64_t v48;
  const void **v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *__dst;
  ta2::TextureAtlas *v56;
  uint64_t v57;
  _QWORD v58[2];
  _QWORD v59[3];
  uint64_t v60;
  unint64_t v61;
  void *__p[2];
  __int128 v63;
  int v64;
  uint64_t v65[20];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v65[0] = MEMORY[0x1E0DE4FE0] + 64;
  v57 = v6;
  *(_QWORD *)((char *)&v58[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v58[-1] + *(_QWORD *)(v57 - 24));
  std::ios_base::init(v8, v58);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v57 = v4 + 24;
  v65[0] = v5;
  std::streambuf::basic_streambuf();
  v58[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v63 = 0u;
  v64 = 16;
  v10 = *((_QWORD *)this + 14);
  v9 = *((_QWORD *)this + 15);
  v11 = v9 - v10;
  __dst = a2;
  if (v9 != v10)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      v12 = (char *)operator new(v9 - v10);
      v13 = &v12[16 * (v11 >> 4)];
      bzero(v12, v9 - v10);
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = &v12[v11];
      v56 = this;
      while (1)
      {
        v18 = (_OWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 24))(*((_QWORD *)this + 43), *(_QWORD *)(*(_QWORD *)v10 + 200));
        if (v18)
        {
          v19 = v18;
          if (v17 < v13)
          {
            *(_OWORD *)v17 = *v18;
            v17 += 16;
          }
          else
          {
            v20 = v15;
            v21 = v16;
            v22 = v9;
            v23 = v14;
            v24 = (v17 - v12) >> 4;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 60)
              break;
            if ((v13 - v12) >> 3 > v25)
              v25 = (v13 - v12) >> 3;
            if ((unint64_t)(v13 - v12) >= 0x7FFFFFFFFFFFFFF0)
              v26 = 0xFFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
            {
              if (v26 >> 60)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v27 = (char *)operator new(16 * v26);
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[16 * v24];
            *(_OWORD *)v28 = *v19;
            if (v17 == v12)
            {
              v30 = &v27[16 * v24];
              v14 = v23;
            }
            else
            {
              v29 = &v27[16 * v24];
              v14 = v23;
              do
              {
                v30 = v29 - 16;
                *((_OWORD *)v29 - 1) = *((_OWORD *)v17 - 1);
                v17 -= 16;
                v29 -= 16;
              }
              while (v17 != v12);
            }
            v13 = &v27[16 * v26];
            v17 = v28 + 16;
            v9 = v22;
            if (v12)
              operator delete(v12);
            v12 = v30;
            v16 = v21;
            v15 = v20;
            this = v56;
          }
          v14 += (uint64_t)(*(_QWORD *)(*(_QWORD *)v10 + 352) - *(_QWORD *)(*(_QWORD *)v10 + 344)) >> 4;
          v15 += *((_DWORD *)v17 - 3) * *((_DWORD *)v17 - 4);
          v16 += *(_DWORD *)(*(_QWORD *)v10 + 208);
        }
        v10 += 16;
        if (v10 == v9)
          goto LABEL_29;
      }
    }
LABEL_58:
    abort();
  }
  v12 = 0;
LABEL_29:
  v31 = v57;
  *(_DWORD *)((char *)v58 + *(_QWORD *)(v57 - 24)) = *(_DWORD *)((_BYTE *)v58 + *(_QWORD *)(v57 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v58[1] + *(_QWORD *)(v31 - 24)) = 0;
  v32 = *((char *)this + 31);
  if (v32 >= 0)
    v33 = (char *)this + 8;
  else
    v33 = (char *)*((_QWORD *)this + 1);
  if (v32 >= 0)
    v34 = *((unsigned __int8 *)this + 31);
  else
    v34 = *((_QWORD *)this + 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57, (uint64_t)v33, v34);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57, (uint64_t)"[T2](pages=", 11);
  v35 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)" txts=", 6);
  v36 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)" area=", 6);
  v37 = (_QWORD *)std::ostream::operator<<();
  v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"kB", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)" usage%=", 8);
  v39 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)") ", 2);
  if (*((_QWORD *)this + 15) != *((_QWORD *)this + 14))
  {
    v40 = 0;
    v41 = 0;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57, (uint64_t)"\n\t", 2);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57, (uint64_t)"pg:", 3);
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)" txts=", 6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57, (uint64_t)" area(", 6);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)"x", 1);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)")=", 2);
      v45 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"kB", 2);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57, (uint64_t)" usage%=", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57, (uint64_t)") ", 2);
      ++v41;
      v40 += 16;
    }
    while (v41 < (uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 4);
  }
  if ((v64 & 0x10) != 0)
  {
    v48 = *((_QWORD *)&v63 + 1);
    v46 = __dst;
    if (*((_QWORD *)&v63 + 1) < v61)
    {
      *((_QWORD *)&v63 + 1) = v61;
      v48 = v61;
    }
    v49 = (const void **)&v60;
  }
  else
  {
    v46 = __dst;
    if ((v64 & 8) == 0)
    {
      v47 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_53;
    }
    v49 = (const void **)v59;
    v48 = v59[2];
  }
  v50 = *v49;
  v47 = v48 - (_QWORD)*v49;
  if (v47 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_58;
  if (v47 >= 0x17)
  {
    v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v51 = v47 | 7;
    v52 = v51 + 1;
    v53 = operator new(v51 + 1);
    v46[1] = v47;
    v46[2] = v52 | 0x8000000000000000;
    *v46 = v53;
    v46 = v53;
    goto LABEL_52;
  }
  *((_BYTE *)v46 + 23) = v47;
  if (v47)
LABEL_52:
    memmove(v46, v50, v47);
LABEL_53:
  *((_BYTE *)v46 + v47) = 0;
  if (v12)
    operator delete(v12);
  v57 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v58[-1] + *(_QWORD *)(v57 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v58[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v63) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v65);
}

uint64_t ta2::TextureAtlas::debugDisplay(ta2::TextureAtlas *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 14);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 15) - v2) >> 4))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v2 + 16 * a2) + 200);
}

void ta2::TextureAtlasRegion::~TextureAtlasRegion(ta2::TextureAtlasRegion *this)
{
  ta2::TextureAtlasRegion::~TextureAtlasRegion(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E42C2B90;
  if (*((_BYTE *)this + 80) != 2)
  {
    if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_12980);
    v2 = GEOGetVectorKitTextureAtlasLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315650;
      v10 = "_state == State::Inactive";
      v11 = 2080;
      v12 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/TextureAtlas2.cpp";
      v13 = 1024;
      v14 = 683;
      _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_ERROR, "TextureAtlasRegion: Texture atlas region should be inactive before deleting: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v9, 0x1Cu);
    }
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void ta2::TextureAtlasRegion::free(ta2::TextureAtlasRegion *this)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  if (!*((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 80) = 1;
    v2 = *((_QWORD *)this + 1);
    std::mutex::lock((std::mutex *)v2);
    v4 = *(char **)(v2 + 72);
    v3 = *(_QWORD *)(v2 + 80);
    if ((unint64_t)v4 >= v3)
    {
      v6 = *(char **)(v2 + 64);
      v7 = (v4 - v6) >> 3;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61)
        abort();
      v9 = v3 - (_QWORD)v6;
      if (v9 >> 2 > v8)
        v8 = v9 >> 2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      if (v10)
      {
        if (v10 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v11 = operator new(8 * v10);
      }
      else
      {
        v11 = 0;
      }
      v12 = &v11[8 * v7];
      v13 = &v11[8 * v10];
      *v12 = this;
      v5 = v12 + 1;
      if (v4 == v6)
      {
        v6 = v4;
      }
      else
      {
        v14 = v4 - v6 - 8;
        if (v14 < 0x58)
          goto LABEL_30;
        if ((unint64_t)(v6 - v11) < 0x20)
          goto LABEL_30;
        v15 = (v14 >> 3) + 1;
        v16 = &v11[8 * v7 - 16];
        v17 = v4 - 16;
        v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *(_OWORD *)v17;
          *(v16 - 1) = *((_OWORD *)v17 - 1);
          *v16 = v19;
          v16 -= 2;
          v17 -= 32;
          v18 -= 4;
        }
        while (v18);
        v12 -= v15 & 0x3FFFFFFFFFFFFFFCLL;
        v4 -= 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
        if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            v20 = *((_QWORD *)v4 - 1);
            v4 -= 8;
            *--v12 = v20;
          }
          while (v4 != v6);
          v6 = *(char **)(v2 + 64);
        }
      }
      *(_QWORD *)(v2 + 64) = v12;
      *(_QWORD *)(v2 + 72) = v5;
      *(_QWORD *)(v2 + 80) = v13;
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v4 = this;
      v5 = v4 + 8;
    }
    *(_QWORD *)(v2 + 72) = v5;
    std::mutex::unlock((std::mutex *)v2);
  }
}

void std::__shared_ptr_emplace<ta2::TextureAtlasRegion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ta2::TextureAtlasRegion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ta2::TextureAtlasRegion>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double std::__introsort<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,false>(__int128 *a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  double result;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 *v107;
  BOOL v109;
  unint64_t v110;
  __int128 *v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  __int128 *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  int64_t v126;
  int64_t v127;
  unint64_t v128;
  int64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int64_t v146;
  __int128 *v147;
  BOOL v148;
  uint64_t v149;
  __int128 *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 *v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  __int128 *v160;
  __int128 v161;
  __int128 *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  __int128 v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  __int128 v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  __int128 *v189;
  __int128 *v190;
  uint64_t v191;
  __int128 *v192;
  uint64_t v193;
  uint64_t v194;
  __int128 *v195;
  __int128 *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  int v205;
  int v207;
  __int128 *v208;
  int v209;
  __int128 v210;
  int v211;
  __int128 v212;
  __int128 v213;
  __int128 *v214;
  int v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  int v221;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  int v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  int v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  char v253;
  char v254;
  char v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  char v264;
  char v265;
  char v266;
  char v267;
  char v268;
  char v269;
  char v270;
  char v271;

void std::vector<std::shared_ptr<ta2::TextureAtlasRegion>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<ta2::TextureAtlasRegion>*>,std::__wrap_iter<std::shared_ptr<ta2::TextureAtlasRegion>*>>(void **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  _OWORD *v39;
  _QWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  if (a5 < 1)
    return;
  v6 = a3;
  v9 = *a1;
  v8 = (unint64_t)a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = (unint64_t)*a1 + (v10 & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[2];
  if (a5 > (uint64_t)&v12[-v8] >> 4)
  {
    v13 = a5 + ((uint64_t)(v8 - (_QWORD)v9) >> 4);
    if (v13 >> 60)
      abort();
    v14 = v12 - (_BYTE *)v9;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v24 = &v16[16 * (v10 >> 4)];
    v25 = &v24[16 * a5];
    v26 = v24;
    do
    {
      v27 = v6[1];
      *(_QWORD *)v26 = *v6;
      *((_QWORD *)v26 + 1) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v26 += 16;
      v6 += 2;
    }
    while (v26 != v25);
    v30 = *a1;
    if (*a1 != (void *)v11)
    {
      v31 = (_QWORD *)v11;
      do
      {
        v32 = *((_OWORD *)v31 - 1);
        v31 -= 2;
        *((_OWORD *)v24 - 1) = v32;
        v24 -= 16;
        *v31 = 0;
        v31[1] = 0;
      }
      while (v31 != v30);
    }
    v33 = a1[1];
    if (v33 != (void *)v11)
    {
      do
      {
        *(_OWORD *)v25 = *(_OWORD *)v11;
        v25 += 16;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v11 += 16;
      }
      while ((void *)v11 != v33);
      v11 = (unint64_t)a1[1];
    }
    v34 = *a1;
    *a1 = v24;
    a1[1] = v25;
    a1[2] = &v16[16 * v15];
    while ((void *)v11 != v34)
    {
      v35 = *(std::__shared_weak_count **)(v11 - 8);
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v11 -= 16;
    }
    if (v34)
      operator delete(v34);
    return;
  }
  v17 = (uint64_t)(v8 - v11) >> 4;
  if (v17 >= a5)
  {
    v18 = &a3[2 * a5];
    v20 = a1[1];
LABEL_46:
    v38 = &v20[-2 * a5];
    v39 = v20;
    if ((unint64_t)v38 < v8)
    {
      v40 = &v20[-2 * a5];
      v39 = v20;
      do
      {
        *v39++ = *(_OWORD *)v40;
        *v40 = 0;
        v40[1] = 0;
        v40 += 2;
      }
      while ((unint64_t)v40 < v8);
    }
    a1[1] = v39;
    if (v20 != (_QWORD *)(v11 + 16 * a5))
    {
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 2;
        *v38 = 0;
        v38[1] = 0;
        v42 = (std::__shared_weak_count *)*(v20 - 1);
        *((_OWORD *)v20 - 1) = v41;
        v20 -= 2;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
      while (v38 != (_QWORD *)v11);
    }
    for (; v6 != v18; v11 += 16)
    {
      v46 = *v6;
      v45 = v6[1];
      if (v45)
      {
        v47 = (unint64_t *)(v45 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = *(std::__shared_weak_count **)(v11 + 8);
      *(_QWORD *)v11 = v46;
      *(_QWORD *)(v11 + 8) = v45;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v6 += 2;
    }
    return;
  }
  v18 = &a3[2 * v17];
  if (v18 == a4)
  {
    v20 = a1[1];
  }
  else
  {
    v19 = &a3[2 * v17];
    v20 = a1[1];
    do
    {
      v21 = v19[1];
      *v20 = *v19;
      v20[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v19 += 2;
      v20 += 2;
    }
    while (v19 != a4);
  }
  a1[1] = v20;
  if ((uint64_t)(v8 - v11) >= 1)
    goto LABEL_46;
}

void ta2::TextureAtlas::loadRegions(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  _OWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v3 = a3;
    for (i = a2; i != v3; i += 9)
    {
      v9 = i[7];
      if (!v9)
        continue;
      if (*((_DWORD *)i + 10) >= *((_DWORD *)i + 8) && *((_DWORD *)i + 11) >= *((_DWORD *)i + 9))
      {
        v14 = i[4];
        LODWORD(v11) = v14 + 1;
        LODWORD(v12) = HIDWORD(v14) + 1;
        v10 = (i[5] & 0xFFFFFFFF00000000 | (i[5] - 1)) - 0x100000000;
        if (*((_BYTE *)i + 64))
        {
LABEL_9:
          v13 = i[6];
          if (v13)
            goto LABEL_3;
          goto LABEL_42;
        }
      }
      else
      {
        v11 = i[4];
        v10 = i[5];
        v12 = HIDWORD(v11);
        if (*((_BYTE *)i + 64))
          goto LABEL_9;
      }
      v15 = *i;
      *(_QWORD *)(v15 + 24) = v9;
      *(_DWORD *)(v15 + 32) = v11;
      *(_DWORD *)(v15 + 36) = v12;
      *(_QWORD *)(v15 + 40) = v10;
      v16 = *(float *)(v9 + 184);
      v17 = *(float *)(v9 + 188);
      *(float *)(v15 + 48) = v16 * (float)v11;
      *(float *)(v15 + 52) = v17 * (float)v12;
      *(float *)(v15 + 56) = v16 * (float)v10;
      *(float *)(v15 + 60) = v17 * (float)HIDWORD(v10);
      v19 = *(char **)(v9 + 352);
      v18 = *(_QWORD *)(v9 + 360);
      if ((unint64_t)v19 >= v18)
      {
        v24 = *(char **)(v9 + 344);
        v25 = (v19 - v24) >> 4;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60)
          goto LABEL_87;
        v27 = v18 - (_QWORD)v24;
        if (v27 >> 3 > v26)
          v26 = v27 >> 3;
        v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
        v29 = 0xFFFFFFFFFFFFFFFLL;
        if (!v28)
          v29 = v26;
        if (v29 >> 60)
LABEL_88:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v30 = 16 * v29;
        v31 = (char *)operator new(16 * v29);
        v32 = &v31[16 * v25];
        v33 = *(_OWORD *)i;
        *(_OWORD *)v32 = *(_OWORD *)i;
        if (*((_QWORD *)&v33 + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          v3 = a3;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
          v24 = *(char **)(v9 + 344);
          v19 = *(char **)(v9 + 352);
        }
        else
        {
          v3 = a3;
        }
        v36 = &v31[v30];
        v23 = v32 + 16;
        if (v19 == v24)
        {
          *(_QWORD *)(v9 + 344) = v32;
          *(_QWORD *)(v9 + 352) = v23;
          *(_QWORD *)(v9 + 360) = v36;
        }
        else
        {
          do
          {
            v37 = *((_OWORD *)v19 - 1);
            v19 -= 16;
            *((_OWORD *)v32 - 1) = v37;
            v32 -= 16;
            *(_QWORD *)v19 = 0;
            *((_QWORD *)v19 + 1) = 0;
          }
          while (v19 != v24);
          v24 = *(char **)(v9 + 344);
          v38 = *(char **)(v9 + 352);
          *(_QWORD *)(v9 + 344) = v32;
          *(_QWORD *)(v9 + 352) = v23;
          *(_QWORD *)(v9 + 360) = v36;
          while (v38 != v24)
          {
            v39 = (std::__shared_weak_count *)*((_QWORD *)v38 - 1);
            if (v39)
            {
              p_shared_owners = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(p_shared_owners);
              while (__stlxr(v41 - 1, p_shared_owners));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v38 -= 16;
          }
        }
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v19 = *i;
        v20 = i[1];
        *((_QWORD *)v19 + 1) = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = v19 + 16;
      }
      *(_QWORD *)(v9 + 352) = v23;
      v13 = i[6];
      if (v13)
      {
LABEL_3:
        v5 = *(_QWORD *)(a1 + 360);
        v6 = *(_QWORD *)(v13 + 200);
        v7 = *(_QWORD *)(i[7] + 200);
        LODWORD(v104) = 0;
        HIDWORD(v104) = 0;
        v8 = (int32x2_t)i[3];
        *(_QWORD *)((char *)&v104 + 4) = i[2];
        *(int32x2_t *)&v105 = vsub_s32(v8, *(int32x2_t *)((char *)&v104 + 4));
        *((_QWORD *)&v105 + 1) = 1;
        v106 = i[4];
        LODWORD(v107) = 0;
        BYTE4(v107) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v5 + 16))(v5, v6, v7, &v104);
        continue;
      }
LABEL_42:
      v43 = *(_QWORD **)(*i + 64);
      v42 = *(std::__shared_weak_count **)(*i + 72);
      if (v42)
      {
        v44 = (unint64_t *)&v42->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      if (*((_BYTE *)i + 64))
      {
        v46 = *i;
        v47 = *(std::__shared_weak_count **)(*i + 72);
        *(_QWORD *)(v46 + 64) = 0;
        *(_QWORD *)(v46 + 72) = 0;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      v50 = v43[8];
      v51 = *(_QWORD *)(a1 + 344);
      LODWORD(v104) = v50;
      WORD2(v104) = 1;
      v52 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v51 + 16))(v51, &v104);
      v53 = *(_QWORD *)(a1 + 360);
      v104 = (unint64_t)(*(uint64_t (**)(_QWORD *, _QWORD))(*v43 + 16))(v43, 0);
      *(_QWORD *)&v105 = v50;
      if (v42)
      {
        v54 = (unint64_t *)&v42->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      *((_QWORD *)&v105 + 1) = &off_1E42D83A8;
      v106 = (unint64_t)v43;
      v107 = v42;
      v108 = (__int128 *)((char *)&v105 + 8);
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v53 + 48))(v53, v52, &v104);
      v56 = v108;
      if (v108 == (__int128 *)((char *)&v105 + 8))
      {
        v56 = (_QWORD *)&v105 + 1;
        v57 = 4;
        goto LABEL_58;
      }
      if (v108)
      {
        v57 = 5;
LABEL_58:
        (*(void (**)(void))(*v56 + 8 * v57))();
      }
      v58 = *(_QWORD *)(a1 + 360);
      v59 = *(_QWORD *)(i[7] + 200);
      v60 = (v10 - v11) * *(unsigned __int8 *)(a1 + 36);
      LODWORD(v104) = 0;
      *(_QWORD *)((char *)&v104 + 4) = __PAIR64__(v50, v60);
      HIDWORD(v104) = v10 - v11;
      LODWORD(v105) = HIDWORD(v10) - v12;
      *(_QWORD *)((char *)&v105 + 4) = 1;
      HIDWORD(v105) = v11;
      v106 = v12;
      LOBYTE(v107) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v58 + 32))(v58, v52, v59, &v104);
      v61 = *(_QWORD *)(a1 + 304);
      v63 = *(uint64_t **)(v61 - 16);
      v62 = *(_QWORD *)(v61 - 8);
      if ((unint64_t)v63 >= v62)
      {
        v65 = *(char **)(v61 - 24);
        v66 = ((char *)v63 - v65) >> 3;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61)
LABEL_87:
          abort();
        v68 = v62 - (_QWORD)v65;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 61)
            goto LABEL_88;
          v70 = (char *)operator new(8 * v69);
        }
        else
        {
          v70 = 0;
        }
        v71 = (uint64_t *)&v70[8 * v66];
        *v71 = v52;
        v64 = v71 + 1;
        if (v63 != (uint64_t *)v65)
        {
          v72 = (char *)(v63 - 1) - v65;
          if (v72 < 0x58)
            goto LABEL_91;
          if ((unint64_t)(v65 - v70) < 0x20)
            goto LABEL_91;
          v73 = (v72 >> 3) + 1;
          v74 = &v70[8 * v66 - 16];
          v75 = v63 - 2;
          v76 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v77 = *(_OWORD *)v75;
            *((_OWORD *)v74 - 1) = *((_OWORD *)v75 - 1);
            *(_OWORD *)v74 = v77;
            v74 -= 32;
            v75 -= 4;
            v76 -= 4;
          }
          while (v76);
          v71 -= v73 & 0x3FFFFFFFFFFFFFFCLL;
          v63 -= v73 & 0x3FFFFFFFFFFFFFFCLL;
          if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
              v78 = *--v63;
              *--v71 = v78;
            }
            while (v63 != (uint64_t *)v65);
          }
          v63 = *(uint64_t **)(v61 - 24);
        }
        *(_QWORD *)(v61 - 24) = v71;
        *(_QWORD *)(v61 - 16) = v64;
        *(_QWORD *)(v61 - 8) = &v70[8 * v69];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *v63 = v52;
        v64 = v63 + 1;
      }
      *(_QWORD *)(v61 - 16) = v64;
      v79 = *(_QWORD *)(*i + 32);
      v80 = *(_QWORD *)(*i + 40);
      v81 = (v79 - 1);
      v82 = (v79 & 0xFFFFFFFF00000000) - 0x100000000;
      v83 = (v80 - v79 + 2) | 0x100000000;
      v84 = v82 | v81;
      v85 = v81 | v80 & 0xFFFFFFFF00000000;
      v86 = (v80 - v82 + 0x100000000) & 0xFFFFFFFF00000000 | 1;
      v87 = v82 & 0xFFFFFFFF00000000 | v80;
      v88 = *(_QWORD *)(a1 + 360);
      v89 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      v90 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      v104 = 0uLL;
      *(_QWORD *)&v105 = v83;
      *((_QWORD *)&v105 + 1) = 1;
      v106 = v84;
      LODWORD(v107) = 0;
      BYTE4(v107) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v88 + 16))(v88, v89, v90, &v104);
      v91 = *(_QWORD *)(a1 + 360);
      v92 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      v93 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      v104 = 0uLL;
      *(_QWORD *)&v105 = v83;
      *((_QWORD *)&v105 + 1) = 1;
      v106 = v85;
      LODWORD(v107) = 0;
      BYTE4(v107) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v91 + 16))(v91, v92, v93, &v104);
      v94 = *(_QWORD *)(a1 + 360);
      v95 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      v96 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      v104 = 0uLL;
      *(_QWORD *)&v105 = v86;
      *((_QWORD *)&v105 + 1) = 1;
      v106 = v84;
      LODWORD(v107) = 0;
      BYTE4(v107) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v94 + 16))(v94, v95, v96, &v104);
      v97 = *(_QWORD *)(a1 + 360);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      v99 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 24))(*i);
      v104 = 0uLL;
      *(_QWORD *)&v105 = v86;
      *((_QWORD *)&v105 + 1) = 1;
      v106 = v87;
      LODWORD(v107) = 0;
      BYTE4(v107) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v97 + 16))(v97, v98, v99, &v104);
      v3 = a3;
      if (v42)
      {
        v100 = (unint64_t *)&v42->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
  }
}

_QWORD *std::__function::__func<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0,std::allocator<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42D83A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0,std::allocator<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42D83A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0,std::allocator<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D83A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0,std::allocator<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D83A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0,std::allocator<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0,std::allocator<ta2::TextureAtlas::loadRegions(std::vector<ta2::TextureAtlas::RegionItem> const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

char *std::vector<ta2::TextureAtlas::RegionItem>::__push_back_slow_path<ta2::TextureAtlas::RegionItem const&>(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v2 = *a1;
  v3 = a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    abort();
  if (0x1C71C71C71C71C72 * ((a1[2] - v2) >> 3) > v5)
    v5 = 0x1C71C71C71C71C72 * ((a1[2] - v2) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - v2) >> 3) >= 0x1C71C71C71C71C7)
    v8 = 0x38E38E38E38E38ELL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(72 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = &v9[72 * v4];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v2 = *a1;
    v3 = a1[1];
  }
  v14 = &v9[72 * v8];
  v15 = &v9[72 * v4];
  v16 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v15 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = *(_OWORD *)(a2 + 48);
  v15[64] = *(_BYTE *)(a2 + 64);
  v17 = v11 + 72;
  if (v3 == v2)
  {
    *a1 = v11;
    a1[1] = v17;
    a1[2] = v14;
  }
  else
  {
    do
    {
      v18 = *(_OWORD *)(v3 - 72);
      v3 -= 72;
      *(_OWORD *)(v11 - 72) = v18;
      v11 -= 72;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      v19 = *((_OWORD *)v3 + 1);
      v20 = *((_OWORD *)v3 + 2);
      v21 = *((_OWORD *)v3 + 3);
      v11[64] = v3[64];
      *((_OWORD *)v11 + 2) = v20;
      *((_OWORD *)v11 + 3) = v21;
      *((_OWORD *)v11 + 1) = v19;
    }
    while (v3 != v2);
    v2 = *a1;
    v22 = a1[1];
    *a1 = v11;
    a1[1] = v17;
    a1[2] = v14;
    while (v22 != v2)
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v22 - 8);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v22 -= 72;
    }
  }
  if (v2)
    operator delete(v2);
  return v17;
}

unint64_t geo::GuillotineBin::insert(geo::GuillotineBin *this, unsigned int a2, unsigned int a3, int a4)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  unint64_t v27;
  int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  _BOOL4 v34;
  BOOL v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  _DWORD *v63;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;

  v5 = (_DWORD *)*((_QWORD *)this + 7);
  v6 = *((_QWORD *)this + 8) - (_QWORD)v5;
  v63 = v5;
  if (!v6)
  {
    v65 = 0;
    v66 = 0;
    v11 = 0;
    v10 = 0;
    v67 = 0;
    goto LABEL_27;
  }
  v65 = 0;
  v66 = 0;
  v9 = 0;
  v67 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v6 >> 4;
  v13 = 0x7FFFFFFF;
  while (1)
  {
    v14 = v5[2] - *v5;
    if (v14 == a2)
    {
      v15 = v5[1];
      if (v5[3] - v15 == a3)
      {
        v66 = v15 + a3;
        v10 = v5[1];
        goto LABEL_26;
      }
    }
    v16 = *((unsigned __int8 *)this + 80);
    if (v14 == a3 && v16 != 0)
    {
      v18 = v5[1];
      if (v5[3] - v18 == a2)
        break;
    }
    if (v14 >= a2 && (v19 = v5[1], v5[3] - (int)v19 >= a3))
    {
      v21 = geo::GuillotineBin::scoreByHeuristic(*((unsigned __int8 *)this + 20), a2, a3, v5);
      if (v21 >= v13)
        goto LABEL_4;
      v11 = *v5;
      v67 = *v5 + a2;
      v22 = v19 + a3;
    }
    else
    {
      if (v14 < a3 || v16 == 0)
        goto LABEL_4;
      v19 = v5[1];
      if (v5[3] - (int)v19 < a2)
        goto LABEL_4;
      v21 = geo::GuillotineBin::scoreByHeuristic(*((unsigned __int8 *)this + 20), a3, a2, v5);
      if (v21 >= v13)
        goto LABEL_4;
      v11 = *v5;
      v67 = *v5 + a3;
      v22 = v19 + a2;
    }
    v65 = v9;
    v66 = v22;
    v10 = v19;
    v13 = v21;
LABEL_4:
    ++v9;
    v5 += 4;
    if (v9 >= v12)
      goto LABEL_27;
  }
  v66 = v18 + a2;
  v10 = v5[1];
  a2 = a3;
LABEL_26:
  v67 = *v5 + a2;
  v65 = v9;
  v11 = *v5;
LABEL_27:
  v23 = v11 | (unint64_t)(v10 << 32);
  v24 = v67 - v11;
  v25 = v66 - v10;
  v26 = (v66 - v10) * (v67 - v11);
  v27 = v67 | (unint64_t)(v66 << 32);
  if (v26)
  {
    v28 = &v63[4 * v65];
    v29 = v28[2] - *v28;
    v30 = v29 - v24;
    v31 = v28[3] - v28[1];
    v32 = v31 - v25;
    v33 = a4;
    switch(*((_BYTE *)this + 21))
    {
      case 0:
        v34 = v30 <= v32;
        break;
      case 1:
        v35 = v30 > v32;
        goto LABEL_36;
      case 2:
        v35 = v32 * v24 > v30 * v25;
        goto LABEL_36;
      case 3:
        v34 = v32 * v24 <= v30 * v25;
        break;
      case 4:
        v34 = v29 <= v31;
        break;
      case 5:
        v35 = v29 > v31;
LABEL_36:
        v34 = v35;
        break;
      default:
        v34 = 0;
        v33 = a4;
        break;
    }
    geo::GuillotineBin::splitFreeRectAlongAxis(this, v28, v67, v66, v34);
    v37 = *((_QWORD *)this + 7);
    v36 = (char *)*((_QWORD *)this + 8);
    v38 = (char *)(v37 + 16 * (int)v65);
    v39 = v38 + 16;
    if (v38 + 16 != v36)
    {
      v40 = v36 - v38 - 32;
      if (v40 < 0x70)
      {
        do
        {
LABEL_45:
          *(_DWORD *)v38 = *(_DWORD *)v39;
          *((_DWORD *)v38 + 1) = *((_DWORD *)v39 + 1);
          *((_DWORD *)v38 + 2) = *((_DWORD *)v39 + 2);
          *((_DWORD *)v38 + 3) = *((_DWORD *)v39 + 3);
          v38 += 16;
          v39 += 16;
        }
        while (v39 != v36);
      }
      else
      {
        v41 = (v40 >> 4) + 1;
        v42 = 16 * (v41 & 0x1FFFFFFFFFFFFFF8);
        v38 += v42;
        v43 = (__int128 *)(v37 + 16 * (int)v65 + 80);
        v44 = v41 & 0x1FFFFFFFFFFFFFF8;
        do
        {
          v46 = *(v43 - 4);
          v45 = *(v43 - 3);
          v47 = *(v43 - 1);
          v49 = *v43;
          v48 = v43[1];
          v51 = v43[2];
          v50 = v43[3];
          *(v43 - 3) = *(v43 - 2);
          *(v43 - 2) = v47;
          *(v43 - 5) = v46;
          *(v43 - 4) = v45;
          v43[1] = v51;
          v43[2] = v50;
          *(v43 - 1) = v49;
          *v43 = v48;
          v43 += 8;
          v44 -= 8;
        }
        while (v44);
        if (v41 != (v41 & 0x1FFFFFFFFFFFFFF8))
        {
          v39 += v42;
          goto LABEL_45;
        }
      }
    }
    *((_QWORD *)this + 8) = v38;
    if (v33)
      geo::GuillotineBin::mergeFreeList((uint64_t)this);
    v53 = (char *)*((_QWORD *)this + 5);
    v52 = *((_QWORD *)this + 6);
    if ((unint64_t)v53 >= v52)
    {
      v55 = (char *)*((_QWORD *)this + 4);
      v56 = (v53 - v55) >> 4;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 60)
        abort();
      v58 = v52 - (_QWORD)v55;
      if (v58 >> 3 > v57)
        v57 = v58 >> 3;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
        v59 = 0xFFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v60 = (char *)operator new(16 * v59);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[16 * v56];
      *(_QWORD *)v61 = v23;
      *((_QWORD *)v61 + 1) = v27;
      v54 = v61 + 16;
      if (v53 != v55)
      {
        do
        {
          *((_OWORD *)v61 - 1) = *((_OWORD *)v53 - 1);
          v61 -= 16;
          v53 -= 16;
        }
        while (v53 != v55);
        v53 = (char *)*((_QWORD *)this + 4);
      }
      *((_QWORD *)this + 4) = v61;
      *((_QWORD *)this + 5) = v54;
      *((_QWORD *)this + 6) = &v60[16 * v59];
      if (v53)
        operator delete(v53);
    }
    else
    {
      *(_QWORD *)v53 = v23;
      *((_QWORD *)v53 + 1) = v27;
      v54 = v53 + 16;
    }
    *((_QWORD *)this + 5) = v54;
    *((_DWORD *)this + 4) += v26;
    *((_DWORD *)this + 6) -= v26;
  }
  return v23;
}

unint64_t geo::SkylineBin::findPositionForNewNodeMinWaste(geo::SkylineBin *this, unsigned int a2, int a3, unsigned int *a4, unsigned int *a5, unint64_t *a6, unsigned int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  unsigned int v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int *v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;

  *a4 = 0x7FFFFFFF;
  *a5 = 0x7FFFFFFF;
  *a6 = -1;
  v8 = *((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 5);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    v11 = 0;
    v12 = v10 / 12;
    v13 = *((unsigned __int8 *)this + 28);
    if (v12 <= 1)
      v14 = 1;
    else
      v14 = v12;
    v15 = (unsigned int *)(v8 + 8);
    v16 = 0x7FFFFFFF;
    v17 = v12;
    do
    {
      v19 = (unsigned int *)(v8 + 12 * v11);
      v20 = *v19;
      v21 = *v19 + a2;
      if (v21 <= *((_DWORD *)this + 2))
      {
        v22 = v19[1];
        if (a2)
        {
          v23 = v15;
          v24 = a2;
          while (1)
          {
            v25 = *(v23 - 1);
            v22 = v22 <= v25 ? v25 : v22;
            if ((v22 + a3) > *((_DWORD *)this + 3))
              break;
            v26 = *v23;
            v23 += 3;
            v27 = v24 >= v26;
            v24 -= v26;
            v28 = v24 != 0 && v27;
            if (!v27)
              v24 = 0;
            if (!v28)
              goto LABEL_19;
          }
        }
        else
        {
LABEL_19:
          if (v12 <= v11)
          {
            v29 = 0;
            v34 = v16 == 0;
            if (v16)
              goto LABEL_27;
          }
          else
          {
            v29 = 0;
            v30 = v15;
            v31 = v17;
            do
            {
              v32 = *(v30 - 2);
              if (v32 >= v21)
                break;
              v33 = *v30 + v32;
              if (v33 <= v20)
                break;
              if (v33 >= v21)
                v33 = *v19 + a2;
              v29 += (v22 - *(v30 - 1)) * (v33 - v32);
              v30 += 3;
              --v31;
            }
            while (v31);
            v34 = v29 == v16;
            if (v29 < v16)
            {
LABEL_27:
              v35 = v22 + a3;
LABEL_32:
              *a4 = v35;
              *a5 = v29;
              v20 = *v19;
              *a6 = v11;
              v16 = v29;
              a7 = v20;
              a8 = v22;
              goto LABEL_33;
            }
          }
          if (v34)
          {
            v35 = v22 + a3;
            if ((int)v22 + a3 < *a4)
              goto LABEL_32;
          }
        }
      }
LABEL_33:
      if (!v13)
        goto LABEL_8;
      v36 = v20 + a3;
      if (v20 + a3 > *((_DWORD *)this + 2))
        goto LABEL_8;
      v37 = v19[1];
      if (a3)
      {
        v38 = v15;
        v39 = a3;
        do
        {
          v40 = *(v38 - 1);
          v37 = v37 <= v40 ? v40 : v37;
          if (v37 + a2 > *((_DWORD *)this + 3))
            goto LABEL_8;
          v41 = *v38;
          v38 += 3;
          v27 = v39 >= v41;
          v39 -= v41;
          v42 = v39 != 0 && v27;
          if (!v27)
            v39 = 0;
        }
        while (v42);
      }
      if (v12 <= v11)
      {
        v43 = 0;
      }
      else
      {
        v43 = 0;
        v44 = v15;
        v45 = v17;
        do
        {
          v46 = *(v44 - 2);
          if (v46 >= v36)
            break;
          v47 = *v44 + v46;
          if (v47 <= v20)
            break;
          if (v47 >= v36)
            v47 = v20 + a3;
          v43 += (v37 - *(v44 - 1)) * (v47 - v46);
          v44 += 3;
          --v45;
        }
        while (v45);
      }
      if (v43 < v16)
      {
        v18 = v37 + a2;
      }
      else
      {
        if (v43 != v16)
          goto LABEL_8;
        v18 = v37 + a2;
        if (v37 + a2 >= *a4)
          goto LABEL_8;
      }
      *a4 = v18;
      *a5 = v43;
      *a6 = v11;
      a7 = *v19;
      v16 = v43;
      a8 = v37;
LABEL_8:
      ++v11;
      v15 += 3;
      --v17;
    }
    while (v11 != v14);
  }
  return a7 | (unint64_t)(a8 << 32);
}

uint64_t ta2::TextureAtlasPage::TextureAtlasPage(uint64_t a1, uint64_t a2, uint32x2_t *a3, unsigned int a4, char a5, char a6, _QWORD *a7)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint32x2_t v18;
  float32x2_t v24;
  char *v25;
  uint64_t (***v26)(_QWORD, uint32x2_t *);
  uint32x2_t v28;
  int v29;
  int v30;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = *a7;
  v12 = a7[1];
  *(_QWORD *)(a1 + 16) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a3->i32[0];
  v16 = a3->i32[1];
  *(_QWORD *)(a1 + 24) = off_1E42B4798;
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 52) = 256;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = off_1E42B5630;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 116) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 108) = 512;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  v17 = operator new(0x10uLL);
  *v17 = 0;
  v17[1] = 0;
  *(_QWORD *)(a1 + 152) = v17 + 2;
  *(_QWORD *)(a1 + 160) = v17 + 2;
  *(_QWORD *)(a1 + 144) = v17;
  geo::SkylineBin::resize(a1 + 24, v15, v16, 1, 0);
  v18 = *a3;
  __asm { FMOV            V1.2S, #1.0 }
  v24 = vdiv_f32(_D1, vcvt_f32_u32(*a3));
  *(uint32x2_t *)(a1 + 176) = *a3;
  *(float32x2_t *)(a1 + 184) = v24;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 850045863;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 850045863;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  if (a4)
  {
    v25 = (char *)operator new(24 * a4);
    bzero(v25, 24 * ((24 * (unint64_t)a4 - 24) / 0x18) + 24);
    *(_QWORD *)(a1 + 368) = v25;
    *(_QWORD *)(a1 + 376) = &v25[24 * ((24 * (unint64_t)a4 - 24) / 0x18) + 24];
    *(_QWORD *)(a1 + 384) = &v25[24 * a4];
  }
  *(_BYTE *)(a1 + 53) = a5;
  if (*(_BYTE *)(a1 + 80))
    *(_BYTE *)(a1 + 116) = a5;
  if ((a6 & 1) == 0)
  {
    v28 = v18;
    v26 = *(uint64_t (****)(_QWORD, uint32x2_t *))(a1 + 8);
    v29 = *(_DWORD *)(*(_QWORD *)a1 + 32);
    v30 = 3;
    *(_QWORD *)(a1 + 200) = (**v26)(v26, &v28);
  }
  return a1;
}

void ta2::TextureAtlas::clearPageEdges(ta2::TextureAtlas *this, ta2::TextureAtlasPage *a2)
{
  unsigned int *v4;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _BYTE v22[24];
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 43) + 24))(*((_QWORD *)this + 43), *((_QWORD *)a2 + 25));
  if (!v4)
  {
    if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_12980);
    v5 = GEOGetVectorKitTextureAtlasLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      v21 = 136315650;
      *(_QWORD *)v22 = "textureDescriptor";
      *(_WORD *)&v22[8] = 2080;
      *(_QWORD *)&v22[10] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/TextureAtlas2.cpp";
      *(_WORD *)&v22[18] = 1024;
      *(_DWORD *)&v22[20] = 446;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "Using stale/invalid texture: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v21, 0x1Cu);
    }
  }
  v6 = *v4;
  if (*((_DWORD *)this + 15) >= v4[1])
    v7 = v4[1];
  else
    v7 = *((_DWORD *)this + 15);
  v8 = 0x200u / *((unsigned __int8 *)this + 36);
  if (v7)
  {
    v9 = 0;
    do
    {
      if (v7 >= v8)
        v10 = v8;
      else
        v10 = v7;
      v11 = *((_QWORD *)this + 45);
      v12 = *((_QWORD *)this + 36);
      v13 = *((_QWORD *)a2 + 25);
      v14 = *((unsigned __int8 *)this + 36);
      v21 = 0;
      *(_DWORD *)v22 = v14;
      *(_QWORD *)&v22[4] = 0x100000200;
      *(_DWORD *)&v22[12] = v10;
      *(_QWORD *)&v22[16] = 1;
      v23 = 0;
      v24 = v9;
      v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v11 + 32))(v11, v12, v13, &v21);
      v9 += v10;
      v7 -= v10;
    }
    while (v7);
  }
  if (*((_DWORD *)this + 14) < v6)
    v6 = *((_DWORD *)this + 14);
  if (v6)
  {
    v15 = 0;
    do
    {
      if (v6 >= v8)
        v16 = v8;
      else
        v16 = v6;
      v17 = *((_QWORD *)this + 45);
      v18 = *((_QWORD *)this + 36);
      v19 = *((_QWORD *)a2 + 25);
      v20 = *((unsigned __int8 *)this + 36) * v8;
      v21 = 0;
      *(_DWORD *)v22 = v20;
      *(_DWORD *)&v22[4] = 512;
      *(_DWORD *)&v22[8] = v16;
      *(_QWORD *)&v22[12] = 0x100000001;
      *(_DWORD *)&v22[20] = 0;
      v23 = v15;
      v24 = 0;
      v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v17 + 32))(v17, v18, v19, &v21);
      v15 += v16;
      v6 -= v16;
    }
    while (v6);
  }
}

unint64_t geo::SkylineBin::insertBottomLeft(geo::SkylineBin *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v48;
  unint64_t v49;

  v6 = *((_QWORD *)this + 4);
  v7 = *((_QWORD *)this + 5);
  v8 = v7 - v6;
  if (v7 == v6)
  {
    v48 = 0;
    v49 = 0;
    goto LABEL_46;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v8 / 12;
  v14 = *((unsigned __int8 *)this + 28);
  if (v13 <= 1)
    v13 = 1;
  v15 = *((_DWORD *)this + 2);
  v16 = (unsigned int *)(v6 + 8);
  v17 = -1;
  v18 = -1;
  v19 = -1;
  v20 = -1;
  do
  {
    v22 = (unsigned int *)(v6 + 12 * v9);
    v23 = *v22;
    v24 = *v22 + a2;
    if (v24 <= v15)
    {
      v25 = v22[1];
      if (a2)
      {
        v26 = v16;
        v27 = a2;
        while (1)
        {
          v28 = *(v26 - 1);
          v25 = v25 <= v28 ? v28 : v25;
          v29 = v25 + a3;
          if (v29 > *((_DWORD *)this + 3))
            break;
          v30 = *v26;
          v26 += 3;
          v31 = v27 >= v30;
          v27 -= v30;
          v32 = v27 != 0 && v31;
          if (!v31)
            v27 = 0;
          if (!v32)
          {
            v33 = (_DWORD)v29 == v18;
            if (v29 >= v18)
              goto LABEL_21;
            goto LABEL_19;
          }
        }
      }
      else
      {
        v29 = v25 + a3;
        v33 = (_DWORD)v29 == v18;
        if (v29 < v18)
        {
LABEL_19:
          v34 = *(_DWORD *)(v6 + 12 * v9 + 8);
LABEL_24:
          v18 = v29;
          v17 = v9;
          v19 = v34;
          v20 = v34;
          v11 = v25;
          v10 = *v22;
          v12 = v24 | (v29 << 32);
          goto LABEL_25;
        }
LABEL_21:
        if (v33)
        {
          v34 = *(_DWORD *)(v6 + 12 * v9 + 8);
          if (v34 < v20)
            goto LABEL_24;
        }
      }
    }
LABEL_25:
    if (v14)
    {
      v35 = v23 + a3;
      if (v35 <= v15)
      {
        v36 = v22[1];
        if (a3)
        {
          v37 = v16;
          v38 = a3;
          while (1)
          {
            v39 = *(v37 - 1);
            v36 = v36 <= v39 ? v39 : v36;
            v40 = v36 + a2;
            if (v40 > *((_DWORD *)this + 3))
              break;
            v41 = *v37;
            v37 += 3;
            v31 = v38 >= v41;
            v38 -= v41;
            v42 = v38 != 0 && v31;
            if (!v31)
              v38 = 0;
            if (!v42)
            {
              v43 = (_DWORD)v40 == v18;
              if (v40 < v18)
                goto LABEL_5;
              goto LABEL_39;
            }
          }
        }
        else
        {
          v40 = v36 + a2;
          v43 = (_DWORD)v40 == v18;
          if (v40 < v18)
          {
LABEL_5:
            v21 = *(_DWORD *)(v6 + 12 * v9 + 8);
LABEL_6:
            v18 = v40;
            v17 = v9;
            v19 = v21;
            v20 = v21;
            v11 = v36;
            v10 = v23;
            v12 = v35 | (v40 << 32);
            goto LABEL_7;
          }
LABEL_39:
          if (v43)
          {
            v21 = *(_DWORD *)(v6 + 12 * v9 + 8);
            v20 = v19;
            if (v21 < v19)
              goto LABEL_6;
          }
        }
      }
    }
LABEL_7:
    ++v9;
    v16 += 3;
  }
  while (v9 != v13);
  v48 = v10 | (v11 << 32);
  v49 = v12;
  if (v17 != -1)
  {
    v44 = HIDWORD(v12);
    geo::SkylineBin::addSkylineLevel((uint64_t)this, v17, (int *)&v48);
    goto LABEL_49;
  }
LABEL_46:
  v48 = 0;
  v49 = 0;
  if (*((_BYTE *)this + 56))
  {
    v45 = geo::GuillotineBin::insert((geo::SkylineBin *)((char *)this + 64), a2, a3, *((unsigned __int8 *)this + 29));
    v10 = v45;
    v11 = HIDWORD(v45);
    v48 = v45;
    v44 = HIDWORD(v46);
    v49 = v46;
    LODWORD(v12) = v46;
  }
  else
  {
    LODWORD(v11) = 0;
    LODWORD(v44) = 0;
    v10 = 0;
    LODWORD(v12) = 0;
  }
LABEL_49:
  if (((_DWORD)v44 - (_DWORD)v11) * ((_DWORD)v12 - v10))
    *((_DWORD *)this + 4) += a3 * a2;
  return v48;
}

unint64_t geo::SkylineBin::insertMinWaste(geo::SkylineBin *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  unint64_t PositionForNewNodeMinWaste;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v22 = 0;
  v20 = 0;
  PositionForNewNodeMinWaste = geo::SkylineBin::findPositionForNewNodeMinWaste(this, a2, a3, &v22, &v21, &v20, a7, a8);
  v13 = v12;
  v23 = PositionForNewNodeMinWaste;
  v24 = v12;
  if (v20 == -1)
  {
    v23 = 0;
    v24 = 0;
    if (*((_BYTE *)this + 56))
    {
      v17 = geo::GuillotineBin::insert((geo::SkylineBin *)((char *)this + 64), a2, a3, *((unsigned __int8 *)this + 29));
      v15 = HIDWORD(v17);
      v23 = v17;
      v16 = HIDWORD(v18);
      v24 = v18;
      v14 = v17;
      v13 = v18;
    }
    else
    {
      LODWORD(v15) = 0;
      LODWORD(v16) = 0;
      v14 = 0;
      v13 = 0;
    }
  }
  else
  {
    v14 = PositionForNewNodeMinWaste;
    v15 = HIDWORD(PositionForNewNodeMinWaste);
    v16 = HIDWORD(v12);
    geo::SkylineBin::addSkylineLevel((uint64_t)this, v20, (int *)&v23);
  }
  if (((_DWORD)v16 - (_DWORD)v15) * (v13 - v14))
    *((_DWORD *)this + 4) += a3 * a2;
  return v23;
}

void geo::GuillotineBin::resize(geo::GuillotineBin *this, int a2, int a3)
{
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  v6 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 8) = v6;
  v7 = *((_QWORD *)this + 9);
  if ((unint64_t)v6 >= v7)
  {
    v9 = v7 - (_QWORD)v6;
    v10 = v9 >> 3;
    if ((unint64_t)(v9 >> 3) <= 1)
      v10 = 1;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = 4 * v12;
    v14 = operator new(16 * v12);
    v15 = (char *)&v14[v13];
    *(_QWORD *)v14 = 0;
    v14[2] = a2;
    v14[3] = a3;
    v8 = v14 + 4;
    *((_QWORD *)this + 7) = v14;
    *((_QWORD *)this + 8) = v14 + 4;
    *((_QWORD *)this + 9) = v15;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = 0;
    v8 = v6 + 4;
    v6[2] = a2;
    v6[3] = a3;
  }
  *((_QWORD *)this + 8) = v8;
}

unint64_t geo::GuillotineBin::insert(geo::GuillotineBin *this, unsigned int a2, unsigned int a3)
{
  return geo::GuillotineBin::insert(this, a2, a3, 1);
}

uint64_t geo::GuillotineBin::insert(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  int v45;
  int v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  _BOOL4 v60;
  BOOL v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  int v84;
  unint64_t v85;
  int *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v104;

  v2 = a2[1] - *a2;
  if (!v2)
    return 1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = v2 >> 4;
LABEL_5:
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64) - v12;
  if (v13)
  {
    v14 = 0;
    v15 = 0x7FFFFFFF;
    while (1)
    {
      v17 = (int *)(v12 + 16 * v14);
      v18 = v17 + 3;
      v19 = v17[2];
      v20 = *v17;
      v21 = v19 - *v17;
      v22 = *v17 - v19;
      v23 = (_DWORD *)(*a2 + 8);
      v24 = v5;
      v5 = 0;
      while (1)
      {
        v25 = *v23 - *(v23 - 2);
        v26 = v23[1] - *(v23 - 1);
        if (v25 == v21 && v26 == *v18 - v17[1])
        {
          v6 = 0;
          v15 = 0x80000000;
          goto LABEL_85;
        }
        if (v26 == v21 && v25 == *v18 - v17[1])
          break;
        if (v25 <= v21 && (v27 = *v18, v28 = v17[1], v29 = *v18 - v28, v26 <= v29))
        {
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              v33 = v29 * v21 - v26 * v25;
              goto LABEL_52;
            case 1:
              v33 = v19 - v20 - v25;
              if (v33 < 0)
                v33 = -v33;
              v36 = v27 - v28 - v26;
              if (v36 < 0)
                v36 = -v36;
              if (v36 < v33)
                v33 = v36;
              goto LABEL_52;
            case 2:
              v33 = v19 - v20 - v25;
              if (v33 < 0)
                v33 = -v33;
              v37 = v27 - v28 - v26;
              if (v37 < 0)
                v37 = -v37;
              if (v33 <= v37)
                v33 = v37;
              goto LABEL_52;
            case 3:
              v33 = v26 * v25 + v29 * v22;
              goto LABEL_52;
            case 4:
              v34 = v19 - v20 - v25;
              if (v34 < 0)
                v34 = -v34;
              v35 = v27 - v28 - v26;
              if (v35 < 0)
                v35 = -v35;
              if (v35 < v34)
                v34 = v35;
              goto LABEL_51;
            case 5:
              v34 = v19 - v20 - v25;
              if (v34 < 0)
                v34 = -v34;
              v38 = v27 - v28 - v26;
              if (v38 < 0)
                v38 = -v38;
              if (v34 <= v38)
                v34 = v38;
LABEL_51:
              v33 = -v34;
LABEL_52:
              if (v33 >= v15)
                goto LABEL_11;
              v6 = 0;
              break;
            default:
              goto LABEL_11;
          }
        }
        else
        {
          if (v26 > v21)
            goto LABEL_11;
          v30 = *v18;
          v31 = v17[1];
          v32 = *v18 - v31;
          if (v25 > v32)
            goto LABEL_11;
          switch(*(_BYTE *)(a1 + 20))
          {
            case 0:
              v33 = v32 * v21 - v26 * v25;
              goto LABEL_81;
            case 1:
              v39 = v19 - v20 - v26;
              if (v39 < 0)
                v39 = -v39;
              v33 = v30 - v31 - v25;
              if (v33 < 0)
                v33 = -v33;
              if (v33 >= v39)
                v33 = v39;
              goto LABEL_81;
            case 2:
              v40 = v19 - v20 - v26;
              if (v40 < 0)
                v40 = -v40;
              v33 = v30 - v31 - v25;
              if (v33 < 0)
                v33 = -v33;
              if (v40 > v33)
                v33 = v40;
              goto LABEL_81;
            case 3:
              v33 = v26 * v25 + v32 * v22;
              goto LABEL_81;
            case 4:
              v41 = v19 - v20 - v26;
              if (v41 < 0)
                v41 = -v41;
              v42 = v30 - v31 - v25;
              if (v42 < 0)
                v42 = -v42;
              if (v42 >= v41)
                v42 = v41;
              goto LABEL_80;
            case 5:
              v43 = v19 - v20 - v26;
              if (v43 < 0)
                v43 = -v43;
              v42 = v30 - v31 - v25;
              if (v42 < 0)
                v42 = -v42;
              if (v43 > v42)
                v42 = v43;
LABEL_80:
              v33 = -v42;
LABEL_81:
              if (v33 >= v15)
                goto LABEL_11;
              v6 = 1;
              break;
            default:
              goto LABEL_11;
          }
        }
        v15 = v33;
        v24 = v5;
        v4 = v14;
LABEL_11:
        v23 += 4;
        if (v7 == ++v5)
        {
          v16 = v14;
          v5 = v24;
          goto LABEL_8;
        }
      }
      v15 = 0x80000000;
      v6 = 1;
LABEL_85:
      v16 = v13 >> 4;
      v4 = v14;
LABEL_8:
      v14 = v16 + 1;
      if (v16 + 1 >= (unint64_t)(v13 >> 4))
      {
        if (v15 == 0x7FFFFFFF)
          return 0;
        v44 = (int *)(v12 + 16 * v4);
        v46 = *v44;
        v45 = v44[1];
        v47 = (_DWORD *)(*a2 + 16 * v5);
        v48 = v47[2] - *v47;
        v49 = v48 + *v44;
        v50 = v47[3] + v45 - v47[1];
        v51 = v48 + v45;
        if ((v6 & 1) != 0)
          v52 = v46 - v45 + v50;
        else
          v52 = v49;
        if ((v6 & 1) != 0)
          v53 = v51;
        else
          v53 = v50;
        v54 = v52 - v46;
        v55 = v53 - v45;
        v101 = v53 - v45;
        v102 = v52 - v46;
        v56 = v44[2] - v46;
        v57 = v44[2] - v52;
        v58 = v44[3] - v45;
        v59 = v44[3] - v53;
        switch(*(_BYTE *)(a1 + 21))
        {
          case 0:
            v60 = v57 <= v59;
            break;
          case 1:
            v61 = v57 > v59;
            goto LABEL_101;
          case 2:
            v61 = v59 * v54 > v55 * v57;
            goto LABEL_101;
          case 3:
            v60 = v59 * v54 <= v55 * v57;
            break;
          case 4:
            v60 = v56 <= v58;
            break;
          case 5:
            v61 = v56 > v58;
LABEL_101:
            v60 = v61;
            break;
          default:
            v60 = 0;
            break;
        }
        v104 = v53;
        geo::GuillotineBin::splitFreeRectAlongAxis((_QWORD *)a1, v44, v52, v53, v60);
        v63 = *(_QWORD *)(a1 + 56);
        v62 = *(char **)(a1 + 64);
        v64 = (char *)(v63 + 16 * (int)v4);
        v65 = v64 + 16;
        if (v64 + 16 == v62)
        {
          v67 = v104;
        }
        else
        {
          v66 = v62 - v64 - 32;
          if (v66 >= 0x70)
          {
            v68 = (v66 >> 4) + 1;
            v69 = 16 * (v68 & 0x1FFFFFFFFFFFFFF8);
            v64 += v69;
            v70 = (__int128 *)(v63 + 16 * (int)v4 + 80);
            v71 = v68 & 0x1FFFFFFFFFFFFFF8;
            v67 = v104;
            do
            {
              v73 = *(v70 - 4);
              v72 = *(v70 - 3);
              v74 = *(v70 - 1);
              v76 = *v70;
              v75 = v70[1];
              v78 = v70[2];
              v77 = v70[3];
              *(v70 - 3) = *(v70 - 2);
              *(v70 - 2) = v74;
              *(v70 - 5) = v73;
              *(v70 - 4) = v72;
              v70[1] = v78;
              v70[2] = v77;
              *(v70 - 1) = v76;
              *v70 = v75;
              v70 += 8;
              v71 -= 8;
            }
            while (v71);
            if (v68 != (v68 & 0x1FFFFFFFFFFFFFF8))
            {
              v65 += v69;
              goto LABEL_112;
            }
          }
          else
          {
            v67 = v104;
            do
            {
LABEL_112:
              *(_DWORD *)v64 = *(_DWORD *)v65;
              *((_DWORD *)v64 + 1) = *((_DWORD *)v65 + 1);
              *((_DWORD *)v64 + 2) = *((_DWORD *)v65 + 2);
              *((_DWORD *)v64 + 3) = *((_DWORD *)v65 + 3);
              v64 += 16;
              v65 += 16;
            }
            while (v65 != v62);
          }
        }
        *(_QWORD *)(a1 + 64) = v64;
        v79 = *a2;
        v80 = (int *)(*a2 + 16 * v5);
        *v80 = v46;
        v80[1] = v45;
        v80[2] = v52;
        v80[3] = v67;
        v81 = 16 * (int)v5;
        v82 = v79 + 16 * (int)v7;
        v83 = *(_OWORD *)(v79 + v81);
        *(_OWORD *)(v79 + v81) = *(_OWORD *)(v82 - 16);
        *(_OWORD *)(v82 - 16) = v83;
        geo::GuillotineBin::mergeFreeList(a1);
        v84 = v46;
        v86 = *(int **)(a1 + 40);
        v85 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v86 < v85)
        {
          *v86 = v84;
          v86[1] = v45;
          v8 = v86 + 4;
          v86[2] = v52;
          v86[3] = v104;
          v9 = v101;
          v10 = v102;
        }
        else
        {
          v98 = v52;
          v99 = v84;
          v100 = v45;
          v87 = *(char **)(a1 + 32);
          v88 = ((char *)v86 - v87) >> 4;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 60)
            abort();
          v90 = v85 - (_QWORD)v87;
          if (v90 >> 3 > v89)
            v89 = v90 >> 3;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
            v89 = 0xFFFFFFFFFFFFFFFLL;
          v91 = v104;
          v97 = v89;
          if (v89)
          {
            if (v89 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v92 = (char *)operator new(16 * v89);
            v91 = v104;
          }
          else
          {
            v92 = 0;
          }
          v93 = &v92[16 * v88];
          *(_DWORD *)v93 = v99;
          *((_DWORD *)v93 + 1) = v100;
          *((_DWORD *)v93 + 2) = v98;
          *((_DWORD *)v93 + 3) = v91;
          v94 = v93;
          if (v86 == (int *)v87)
          {
            v95 = v97;
          }
          else
          {
            v95 = v97;
            do
            {
              *((_OWORD *)v94 - 1) = *((_OWORD *)v86 - 1);
              v94 -= 16;
              v86 -= 4;
            }
            while (v86 != (int *)v87);
            v86 = *(int **)(a1 + 32);
          }
          v8 = v93 + 16;
          *(_QWORD *)(a1 + 32) = v94;
          *(_QWORD *)(a1 + 40) = v93 + 16;
          *(_QWORD *)(a1 + 48) = &v92[16 * v95];
          v10 = v102;
          if (v86)
          {
            operator delete(v86);
            v10 = v102;
          }
          v9 = v101;
        }
        *(_QWORD *)(a1 + 40) = v8;
        v11 = v9 * v10;
        *(_DWORD *)(a1 + 16) += v11;
        *(_DWORD *)(a1 + 24) -= v11;
        if (!--v7)
          return 1;
        goto LABEL_5;
      }
    }
  }
  return 0;
}

BOOL geo::GuillotineBin::erase(geo::GuillotineBin *this, __int128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  char *v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v47;
  BOOL v49;
  BOOL v51;
  BOOL v53;
  BOOL v55;
  BOOL v57;
  BOOL v59;
  BOOL v61;
  BOOL v63;
  BOOL v65;
  BOOL v67;
  BOOL v69;
  BOOL v71;
  BOOL v73;
  BOOL v75;
  BOOL v77;
  BOOL v79;
  BOOL v81;
  BOOL v83;
  BOOL v85;
  BOOL v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  __int128 v109;

  v4 = (char *)*((_QWORD *)this + 4);
  v5 = (char *)*((_QWORD *)this + 5);
  v109 = *a2;
  v6 = (v5 - v4) >> 4;
  if (v5 == v4)
    goto LABEL_12;
  v7 = (char *)*((_QWORD *)this + 4);
  while (*(_OWORD *)v7 != v109)
  {
    v7 += 16;
    if (v7 == v5)
      goto LABEL_12;
  }
  if (v7 == v5)
  {
LABEL_12:
    v9 = (v5 - v4) >> 4;
    goto LABEL_13;
  }
  for (i = v7 + 16; i != v5; i += 16)
  {
    if (*(_OWORD *)i != v109)
    {
      *(_DWORD *)v7 = *(_DWORD *)i;
      *((_DWORD *)v7 + 1) = *((_DWORD *)i + 1);
      *((_DWORD *)v7 + 2) = *((_DWORD *)i + 2);
      *((_DWORD *)v7 + 3) = *((_DWORD *)i + 3);
      v7 += 16;
    }
  }
  v20 = v7 - v4;
  v21 = (char *)(v5 - v7);
  if (v5 == v7)
  {
    v9 = v20 >> 4;
    goto LABEL_13;
  }
  v22 = (unint64_t)&v4[v20 & 0xFFFFFFFFFFFFFFF0];
  v23 = &v21[v22];
  if (&v21[v22] != v5)
  {
    v24 = v20 & 0xFFFFFFFFFFFFFFF0;
    v25 = v5 - &v21[(_QWORD)v4 + (v20 & 0xFFFFFFFFFFFFFFF0)] - 16;
    if (v25 >= 0x470)
    {
      v29 = v24 + (v25 & 0xFFFFFFFFFFFFFFF0);
      v30 = (unint64_t)&v4[v29 | 4];
      v31 = (unint64_t)&v4[v24 | 4];
      v32 = (unint64_t)&v4[v29 | 8];
      v33 = (unint64_t)&v4[v24 | 8];
      v34 = (unint64_t)&v4[v29 | 0xC];
      v35 = (unint64_t)&v4[v24 | 0xC];
      v36 = (unint64_t)&v4[v29 + 16];
      v37 = &v21[v24 + (_QWORD)v4];
      v38 = &v37[v25 & 0xFFFFFFFFFFFFFFF0];
      v39 = (unint64_t)(v38 + 4);
      v40 = (unint64_t)(v37 + 4);
      v41 = (unint64_t)(v38 + 8);
      v42 = (unint64_t)(v37 + 8);
      v43 = (unint64_t)(v38 + 12);
      v44 = (unint64_t)(v37 + 12);
      v45 = (unint64_t)(v38 + 16);
      v47 = v22 < v34 && v33 < v30;
      v49 = v22 < v36 && v35 < v30;
      v107 = v49;
      v108 = v47;
      v51 = v22 < v39 && (unint64_t)v23 < v30;
      v53 = v22 < v41 && v40 < v30;
      v105 = v53;
      v106 = v51;
      v55 = v22 < v43 && v42 < v30;
      v57 = v22 < v45 && v44 < v30;
      v103 = v57;
      v104 = v55;
      v59 = v31 < v34 && v33 < v32;
      v61 = v31 < v36 && v35 < v32;
      v101 = v61;
      v102 = v59;
      v63 = v31 < v39 && (unint64_t)v23 < v32;
      v65 = v31 < v41 && v40 < v32;
      v99 = v65;
      v100 = v63;
      v67 = v31 < v43 && v42 < v32;
      v69 = v31 < v45 && v44 < v32;
      v71 = v33 < v36 && v35 < v34;
      v73 = v33 < v39 && (unint64_t)v23 < v34;
      v75 = v33 < v41 && v40 < v34;
      v77 = v33 < v43 && v42 < v34;
      v79 = v33 < v45 && v44 < v34;
      v81 = v35 < v39 && (unint64_t)v23 < v36;
      v83 = v35 < v41 && v40 < v36;
      v85 = v35 < v43 && v42 < v36;
      v87 = v35 < v45 && v44 < v36;
      if (v31 >= v30 || v22 >= v32)
      {
        if (v108)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v107)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v106)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v105)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v104)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v103)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v102)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v101)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v100)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v99)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v67)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v69)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v71)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v73)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v75)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v77)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v79)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v81)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v83)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v85)
        {
          v26 = (_DWORD *)v22;
        }
        else if (v87)
        {
          v26 = (_DWORD *)v22;
        }
        else
        {
          v89 = (v25 >> 4) + 1;
          v90 = 16 * (v89 & 0x1FFFFFFFFFFFFFF8);
          v26 = (_DWORD *)(v22 + v90);
          v91 = v89 & 0x1FFFFFFFFFFFFFF8;
          do
          {
            v93 = *(_OWORD *)&v21[v22];
            v92 = *(_OWORD *)&v21[v22 + 16];
            v94 = *(_OWORD *)&v21[v22 + 48];
            v96 = *(_OWORD *)&v21[v22 + 64];
            v95 = *(_OWORD *)&v21[v22 + 80];
            v98 = *(_OWORD *)&v21[v22 + 96];
            v97 = *(_OWORD *)&v21[v22 + 112];
            *(_OWORD *)(v22 + 32) = *(_OWORD *)&v21[v22 + 32];
            *(_OWORD *)(v22 + 48) = v94;
            *(_OWORD *)v22 = v93;
            *(_OWORD *)(v22 + 16) = v92;
            *(_OWORD *)(v22 + 96) = v98;
            *(_OWORD *)(v22 + 112) = v97;
            *(_OWORD *)(v22 + 64) = v96;
            *(_OWORD *)(v22 + 80) = v95;
            v22 += 128;
            v91 -= 8;
          }
          while (v91);
          if (v89 == (v89 & 0x1FFFFFFFFFFFFFF8))
            goto LABEL_219;
          v23 += v90;
        }
      }
      else
      {
        v26 = (_DWORD *)v22;
      }
    }
    else
    {
      v26 = (_DWORD *)v22;
    }
    do
    {
      *v26 = *(_DWORD *)v23;
      v26[1] = *((_DWORD *)v23 + 1);
      v26[2] = *((_DWORD *)v23 + 2);
      v26[3] = *((_DWORD *)v23 + 3);
      v26 += 4;
      v23 += 16;
    }
    while (v23 != v5);
LABEL_219:
    v22 = (unint64_t)v26;
  }
  *((_QWORD *)this + 5) = v22;
  v9 = (uint64_t)(v22 - (_QWORD)v4) >> 4;
LABEL_13:
  v10 = v6 - 1;
  if (v9 == v6 - 1)
  {
    v12 = (_OWORD *)*((_QWORD *)this + 8);
    v11 = *((_QWORD *)this + 9);
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_OWORD *)*((_QWORD *)this + 7);
      v15 = v12 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        abort();
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v27 = &v19[16 * v15];
      *(_OWORD *)v27 = *a2;
      v13 = v27 + 16;
      if (v12 != v14)
      {
        do
        {
          *((_OWORD *)v27 - 1) = *(v12 - 1);
          v27 -= 16;
          --v12;
        }
        while (v12 != v14);
        v12 = (_OWORD *)*((_QWORD *)this + 7);
      }
      *((_QWORD *)this + 7) = v27;
      *((_QWORD *)this + 8) = v13;
      *((_QWORD *)this + 9) = &v19[16 * v18];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v12 = *a2;
      v13 = v12 + 1;
    }
    *((_QWORD *)this + 8) = v13;
    *((_DWORD *)this + 4) += (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1)) * (*(_DWORD *)a2 - *((_DWORD *)a2 + 2));
    *((_DWORD *)this + 6) += (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1)) * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    if (*((_BYTE *)this + 28))
      geo::GuillotineBin::mergeFreeList((uint64_t)this);
  }
  return v9 == v10;
}

float geo::GuillotineBin::occupancy(geo::GuillotineBin *this)
{
  return (float)*((unsigned int *)this + 4) / (float)(*((_DWORD *)this + 3) * *((_DWORD *)this + 2));
}

uint64_t geo::GuillotineBin::mergeFreeList(uint64_t this)
{
  char *v1;
  char *v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  unint64_t v9;
  char *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v1 = *(char **)(this + 56);
  v2 = *(char **)(this + 64);
  if (v2 != v1)
  {
    v3 = 0;
    v4 = v1 + 80;
    while (1)
    {
      v6 = v3++;
      v5 = (v2 - v1) >> 4;
      if (v3 < v5)
        break;
LABEL_4:
      if (v3 >= v5)
        return this;
    }
    v7 = &v1[16 * v6];
    v8 = v7 + 8;
    v9 = v3;
    while (1)
    {
      v11 = (int *)&v1[16 * v9];
      v12 = v11[2];
      if (*v8 == v12)
      {
        v13 = *((_DWORD *)v7 + 1);
        if (*(_DWORD *)v7 == *v11)
        {
          v14 = v11[3];
          if (v13 == v14)
          {
            *((_DWORD *)v7 + 1) = v11[1];
            v15 = &v1[16 * (int)v9];
            v16 = v15 + 16;
            if (v15 + 16 == v2)
              goto LABEL_7;
            v17 = v2 - v15 - 32;
            v10 = &v1[16 * (int)v9];
            if (v17 >= 0x70)
            {
              v18 = (v17 >> 4) + 1;
              v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFF8);
              v10 = &v15[v19];
              v20 = (__int128 *)&v4[4 * (int)v9];
              v21 = v18 & 0x1FFFFFFFFFFFFFF8;
              do
              {
                v23 = *(v20 - 4);
                v22 = *(v20 - 3);
                v24 = *(v20 - 1);
                v26 = *v20;
                v25 = v20[1];
                v28 = v20[2];
                v27 = v20[3];
                *(v20 - 3) = *(v20 - 2);
                *(v20 - 2) = v24;
                *(v20 - 5) = v23;
                *(v20 - 4) = v22;
                v20[1] = v28;
                v20[2] = v27;
                *(v20 - 1) = v26;
                *v20 = v25;
                v20 += 8;
                v21 -= 8;
              }
              while (v21);
              if (v18 == (v18 & 0x1FFFFFFFFFFFFFF8))
                goto LABEL_8;
              v16 += v19;
            }
            do
            {
              *(_DWORD *)v10 = *(_DWORD *)v16;
              *((_DWORD *)v10 + 1) = *((_DWORD *)v16 + 1);
              *((_DWORD *)v10 + 2) = *((_DWORD *)v16 + 2);
              *((_DWORD *)v10 + 3) = *((_DWORD *)v16 + 3);
              v10 += 16;
              v16 += 16;
            }
            while (v16 != v2);
          }
          else
          {
            if (*((_DWORD *)v7 + 3) != v11[1])
              goto LABEL_9;
            *((_DWORD *)v7 + 3) = v14;
            v15 = &v1[16 * (int)v9];
            v58 = v15 + 16;
            if (v15 + 16 == v2)
              goto LABEL_7;
            v59 = v2 - v15 - 32;
            v10 = &v1[16 * (int)v9];
            if (v59 >= 0x70)
            {
              v60 = (v59 >> 4) + 1;
              v61 = 16 * (v60 & 0x1FFFFFFFFFFFFFF8);
              v10 = &v15[v61];
              v62 = (__int128 *)&v4[4 * (int)v9];
              v63 = v60 & 0x1FFFFFFFFFFFFFF8;
              do
              {
                v65 = *(v62 - 4);
                v64 = *(v62 - 3);
                v66 = *(v62 - 1);
                v68 = *v62;
                v67 = v62[1];
                v70 = v62[2];
                v69 = v62[3];
                *(v62 - 3) = *(v62 - 2);
                *(v62 - 2) = v66;
                *(v62 - 5) = v65;
                *(v62 - 4) = v64;
                v62[1] = v70;
                v62[2] = v69;
                *(v62 - 1) = v68;
                *v62 = v67;
                v62 += 8;
                v63 -= 8;
              }
              while (v63);
              if (v60 == (v60 & 0x1FFFFFFFFFFFFFF8))
                goto LABEL_8;
              v58 += v61;
            }
            do
            {
              *(_DWORD *)v10 = *(_DWORD *)v58;
              *((_DWORD *)v10 + 1) = *((_DWORD *)v58 + 1);
              *((_DWORD *)v10 + 2) = *((_DWORD *)v58 + 2);
              *((_DWORD *)v10 + 3) = *((_DWORD *)v58 + 3);
              v10 += 16;
              v58 += 16;
            }
            while (v58 != v2);
          }
          goto LABEL_8;
        }
      }
      else
      {
        v13 = *((_DWORD *)v7 + 1);
      }
      v29 = v11[1];
      if (v13 != v29 || *((_DWORD *)v7 + 3) - v13 != *(_DWORD *)&v1[16 * v9 + 12] - v29)
        goto LABEL_9;
      v31 = *v11;
      if (*(_DWORD *)v7 == v12)
      {
        *(_DWORD *)v7 = v31;
        v15 = &v1[16 * (int)v9];
        v32 = v15 + 16;
        if (v15 + 16 == v2)
          goto LABEL_7;
        v33 = v2 - v15 - 32;
        v10 = &v1[16 * (int)v9];
        if (v33 >= 0x70)
        {
          v34 = (v33 >> 4) + 1;
          v35 = 16 * (v34 & 0x1FFFFFFFFFFFFFF8);
          v10 = &v15[v35];
          v36 = (__int128 *)&v4[4 * (int)v9];
          v37 = v34 & 0x1FFFFFFFFFFFFFF8;
          do
          {
            v39 = *(v36 - 4);
            v38 = *(v36 - 3);
            v40 = *(v36 - 1);
            v42 = *v36;
            v41 = v36[1];
            v44 = v36[2];
            v43 = v36[3];
            *(v36 - 3) = *(v36 - 2);
            *(v36 - 2) = v40;
            *(v36 - 5) = v39;
            *(v36 - 4) = v38;
            v36[1] = v44;
            v36[2] = v43;
            *(v36 - 1) = v42;
            *v36 = v41;
            v36 += 8;
            v37 -= 8;
          }
          while (v37);
          if (v34 == (v34 & 0x1FFFFFFFFFFFFFF8))
            goto LABEL_8;
          v32 += v35;
        }
        do
        {
          *(_DWORD *)v10 = *(_DWORD *)v32;
          *((_DWORD *)v10 + 1) = *((_DWORD *)v32 + 1);
          *((_DWORD *)v10 + 2) = *((_DWORD *)v32 + 2);
          *((_DWORD *)v10 + 3) = *((_DWORD *)v32 + 3);
          v10 += 16;
          v32 += 16;
        }
        while (v32 != v2);
      }
      else
      {
        if (*v8 != v31)
          goto LABEL_9;
        *v8 = v12;
        v15 = &v1[16 * (int)v9];
        v45 = v15 + 16;
        if (v15 + 16 == v2)
        {
LABEL_7:
          v10 = v15;
          goto LABEL_8;
        }
        v46 = v2 - v15 - 32;
        v10 = &v1[16 * (int)v9];
        if (v46 >= 0x70)
        {
          v47 = (v46 >> 4) + 1;
          v48 = 16 * (v47 & 0x1FFFFFFFFFFFFFF8);
          v10 = &v15[v48];
          v49 = (__int128 *)&v4[4 * (int)v9];
          v50 = v47 & 0x1FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(v49 - 4);
            v51 = *(v49 - 3);
            v53 = *(v49 - 1);
            v55 = *v49;
            v54 = v49[1];
            v57 = v49[2];
            v56 = v49[3];
            *(v49 - 3) = *(v49 - 2);
            *(v49 - 2) = v53;
            *(v49 - 5) = v52;
            *(v49 - 4) = v51;
            v49[1] = v57;
            v49[2] = v56;
            *(v49 - 1) = v55;
            *v49 = v54;
            v49 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v47 == (v47 & 0x1FFFFFFFFFFFFFF8))
            goto LABEL_8;
          v45 += v48;
        }
        do
        {
          *(_DWORD *)v10 = *(_DWORD *)v45;
          *((_DWORD *)v10 + 1) = *((_DWORD *)v45 + 1);
          *((_DWORD *)v10 + 2) = *((_DWORD *)v45 + 2);
          *((_DWORD *)v10 + 3) = *((_DWORD *)v45 + 3);
          v10 += 16;
          v45 += 16;
        }
        while (v45 != v2);
      }
LABEL_8:
      v2 = v10;
      *(_QWORD *)(this + 64) = v10;
      --v9;
LABEL_9:
      if (++v9 >= (v2 - v1) >> 4)
      {
        v5 = (v2 - v1) >> 4;
        goto LABEL_4;
      }
    }
  }
  return this;
}

void geo::GuillotineBin::splitFreeRectAlongAxis(_QWORD *a1, int *a2, int a3, int a4, int a5)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  char *v37;
  char *v38;
  int v39;
  int v40;

  v8 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  if (a5)
    v11 = a4;
  else
    v11 = a2[3];
  if (a5)
    v12 = a2[2];
  else
    v12 = a3;
  if (v12 != v8 && v10 != a4)
  {
    v16 = (char *)a1[8];
    v15 = a1[9];
    if ((unint64_t)v16 >= v15)
    {
      v40 = v11;
      v18 = (char *)a1[7];
      v19 = (v16 - v18) >> 4;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
        goto LABEL_52;
      v21 = v15 - (_QWORD)v18;
      if (v21 >> 3 > v20)
        v20 = v21 >> 3;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v22 = 0xFFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        v39 = a2[1];
        if (v22 >> 60)
          goto LABEL_53;
        v23 = (char *)operator new(16 * v22);
        v7 = v39;
        v19 = (v16 - v18) >> 4;
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[16 * v19];
      *(_DWORD *)v24 = v8;
      *((_DWORD *)v24 + 1) = a4;
      *((_DWORD *)v24 + 2) = v12;
      *((_DWORD *)v24 + 3) = v10;
      v17 = v24 + 16;
      if (v16 != v18)
      {
        do
        {
          *((_OWORD *)v24 - 1) = *((_OWORD *)v16 - 1);
          v24 -= 16;
          v16 -= 16;
        }
        while (v16 != v18);
        v16 = (char *)a1[7];
      }
      a1[7] = v24;
      a1[8] = v17;
      a1[9] = &v23[16 * v22];
      v11 = v40;
      if (v16)
      {
        v25 = v16;
        v26 = v7;
        operator delete(v25);
        v7 = v26;
      }
    }
    else
    {
      *(_DWORD *)v16 = v8;
      *((_DWORD *)v16 + 1) = a4;
      v17 = v16 + 16;
      *((_DWORD *)v16 + 2) = v12;
      *((_DWORD *)v16 + 3) = v10;
    }
    a1[8] = v17;
  }
  if (v9 != a3 && v11 != v7)
  {
    v29 = (char *)a1[8];
    v28 = a1[9];
    if ((unint64_t)v29 < v28)
    {
      *(_DWORD *)v29 = a3;
      *((_DWORD *)v29 + 1) = v7;
      v30 = v29 + 16;
      *((_DWORD *)v29 + 2) = v9;
      *((_DWORD *)v29 + 3) = v11;
LABEL_50:
      a1[8] = v30;
      return;
    }
    v31 = (char *)a1[7];
    v32 = (v29 - v31) >> 4;
    v33 = v32 + 1;
    if (!((unint64_t)(v32 + 1) >> 60))
    {
      v34 = v28 - (_QWORD)v31;
      if (v34 >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (!v35)
      {
        v37 = 0;
        goto LABEL_45;
      }
      if (!(v35 >> 60))
      {
        v36 = v7;
        v37 = (char *)operator new(16 * v35);
        v7 = v36;
LABEL_45:
        v38 = &v37[16 * v32];
        *(_DWORD *)v38 = a3;
        *((_DWORD *)v38 + 1) = v7;
        *((_DWORD *)v38 + 2) = v9;
        *((_DWORD *)v38 + 3) = v11;
        v30 = v38 + 16;
        if (v29 != v31)
        {
          do
          {
            *((_OWORD *)v38 - 1) = *((_OWORD *)v29 - 1);
            v38 -= 16;
            v29 -= 16;
          }
          while (v29 != v31);
          v29 = (char *)a1[7];
        }
        a1[7] = v38;
        a1[8] = v30;
        a1[9] = &v37[16 * v35];
        if (v29)
          operator delete(v29);
        goto LABEL_50;
      }
LABEL_53:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_52:
    abort();
  }
}

void geo::SkylineBin::resize(geo::SkylineBin *this, int a2, int a3)
{
  geo::SkylineBin::resize((uint64_t)this, a2, a3, *((_BYTE *)this + 56), *((_DWORD *)this + 6));
}

uint64_t geo::SkylineBin::insert(geo::SkylineBin *this, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  unint64_t PositionForNewNodeMinWaste;
  unint64_t v58;
  uint64_t v59;
  int *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  _QWORD *v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78[2];
  int v79;
  int v80;
  int v81;
  unsigned int v82;

  v13 = a2[1] - *a2;
  if (!v13)
    return 1;
  v15 = v13 >> 4;
  v65 = a2;
  while (2)
  {
    v16 = 0;
    v66 = v15;
    if (v15 <= 1)
      v17 = 1;
    else
      v17 = v15;
    v18 = *((_DWORD *)this + 6);
    v75 = *a2;
    v19 = v82;
    v70 = v80;
    v71 = v81;
    v74 = -1;
    v68 = -1;
    v69 = -1;
    v76 = -1;
    while (2)
    {
      v77 = 0;
      *(_QWORD *)v78 = 0;
      if (v18 == 1)
      {
        v56 = v19;
        PositionForNewNodeMinWaste = geo::SkylineBin::findPositionForNewNodeMinWaste(this, *(_DWORD *)(v75 + 16 * v16 + 8) - *(_DWORD *)(v75 + 16 * v16), *(_DWORD *)(v75 + 16 * v16 + 12) - *(_DWORD *)(v75 + 16 * v16 + 4), v78, &v78[1], &v77, a7, a8);
        v19 = v56;
        v9 = PositionForNewNodeMinWaste;
        v10 = HIDWORD(PositionForNewNodeMinWaste);
        v8 = HIDWORD(v58);
        LODWORD(v11) = v58;
        if (HIDWORD(v58) > HIDWORD(PositionForNewNodeMinWaste))
          goto LABEL_56;
        goto LABEL_8;
      }
      if (v18)
        goto LABEL_55;
      v20 = (int *)(v75 + 16 * v16);
      v21 = v20[2];
      v22 = v20[3];
      v24 = *v20;
      v23 = v20[1];
      v78[0] = -1;
      v78[1] = -1;
      v77 = -1;
      v25 = *((_QWORD *)this + 4);
      v26 = *((_QWORD *)this + 5);
      v27 = v26 - v25;
      if (v26 == v25)
      {
        LODWORD(v11) = 0;
        LODWORD(v10) = 0;
        v9 = 0;
        v8 = 0;
        goto LABEL_8;
      }
      v67 = v12;
      v72 = v19;
      v28 = 0;
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 0;
      v29 = v21 - v24;
      v30 = v22 - v23;
      v31 = v27 / 12;
      if ((unint64_t)(v27 / 12) <= 1)
        v31 = 1;
      v32 = *((_DWORD *)this + 2);
      v33 = (unsigned int *)(v25 + 8);
      v34 = -1;
      v35 = -1;
      v36 = -1;
      v37 = -1;
      do
      {
        v38 = (int *)(v25 + 12 * v28);
        v39 = *v38;
        v40 = *v38 + v29;
        if (v40 <= v32)
        {
          v41 = v38[1];
          if (v29)
          {
            a8 = *((unsigned int *)this + 3);
            v42 = v33;
            v43 = v29;
            while (1)
            {
              if (v41 <= *(v42 - 1))
                v41 = *(v42 - 1);
              a7 = v41 + v30;
              if (a7 > a8)
                break;
              v44 = *v42;
              v42 += 3;
              v46 = v43 - v44;
              v45 = v43 > v44;
              if (v43 >= v44)
                v43 = v46;
              else
                v43 = 0;
              if (!v45)
              {
                v47 = (_DWORD)a7 == v37;
                if (a7 >= v37)
                  goto LABEL_31;
                goto LABEL_29;
              }
            }
          }
          else
          {
            a7 = v41 + v30;
            v47 = (_DWORD)a7 == v37;
            if (a7 < v37)
            {
LABEL_29:
              a8 = *(unsigned int *)(v25 + 12 * v28 + 8);
LABEL_34:
              v35 = a8;
              v34 = v28;
              v36 = a7;
              v37 = a7;
              LODWORD(v10) = v41;
              v9 = *v38;
              v11 = v40 | (a7 << 32);
              goto LABEL_35;
            }
LABEL_31:
            if (v47)
            {
              a8 = *(unsigned int *)(v25 + 12 * v28 + 8);
              if (a8 < v35)
                goto LABEL_34;
            }
          }
        }
LABEL_35:
        if (*((_BYTE *)this + 28))
        {
          v48 = (v39 + v30);
          if (v48 <= v32)
          {
            v49 = v38[1];
            if (v30)
            {
              LODWORD(a7) = *((_DWORD *)this + 3);
              a8 = (uint64_t)v33;
              v50 = v30;
              while (1)
              {
                if (v49 <= *(_DWORD *)(a8 - 4))
                  v49 = *(_DWORD *)(a8 - 4);
                v51 = v49 + v29;
                if (v51 > a7)
                  break;
                v52 = *(_DWORD *)a8;
                a8 += 12;
                v53 = v50 >= v52;
                v50 -= v52;
                v54 = v50 != 0 && v53;
                if (!v53)
                  v50 = 0;
                if (!v54)
                {
                  v55 = (_DWORD)v51 == v37;
                  if (v51 < v37)
                    goto LABEL_15;
                  goto LABEL_48;
                }
              }
            }
            else
            {
              v51 = v49 + v29;
              v55 = (_DWORD)v51 == v37;
              if (v51 < v37)
              {
LABEL_15:
                LODWORD(a7) = *(_DWORD *)(v25 + 12 * v28 + 8);
LABEL_16:
                v35 = a7;
                v34 = v28;
                v36 = v51;
                v37 = v51;
                LODWORD(v10) = v49;
                v9 = v39;
                v11 = v48 | (v51 << 32);
                goto LABEL_17;
              }
LABEL_48:
              if (v55)
              {
                LODWORD(a7) = *(_DWORD *)(v25 + 12 * v28 + 8);
                if (a7 < v35)
                  goto LABEL_16;
              }
            }
          }
        }
LABEL_17:
        ++v28;
        v33 += 3;
      }
      while (v28 != v31);
      v78[0] = v35;
      v78[1] = v36;
      v77 = v34;
      v19 = v72;
      v12 = v67;
      v8 = HIDWORD(v11);
LABEL_55:
      if (v8 > v10)
      {
LABEL_56:
        if (*(_QWORD *)v78 < __PAIR64__(v76, v74))
        {
          v19 = v8;
          v70 = v10;
          v71 = v11;
          v68 = v77;
          v69 = v16;
          v12 = v9;
          v76 = v78[1];
          v74 = v78[0];
        }
      }
LABEL_8:
      if (++v16 != v17)
        continue;
      break;
    }
    v79 = v12;
    v80 = v70;
    v81 = v71;
    v82 = v19;
    if (v69 != -1)
    {
      v73 = v19;
      geo::SkylineBin::addSkylineLevel((uint64_t)this, v68, &v79);
      a2 = v65;
      v59 = *v65;
      v60 = (int *)(*v65 + 16 * v69);
      *((_DWORD *)this + 4) += (v60[3] - v60[1]) * (v60[2] - *v60);
      *v60 = v12;
      v60[1] = v70;
      v60[2] = v71;
      v60[3] = v73;
      v61 = (__int128 *)(v59 + 16 * (int)v69);
      v62 = v65[1];
      v63 = *v61;
      *(_DWORD *)v61 = *(_DWORD *)(v62 - 16);
      *((_DWORD *)v61 + 1) = *(_DWORD *)(v62 - 12);
      *((_DWORD *)v61 + 2) = *(_DWORD *)(v62 - 8);
      *((_DWORD *)v61 + 3) = *(_DWORD *)(v62 - 4);
      *(_OWORD *)(v62 - 16) = v63;
      v15 = v66 - 1;
      if (v66 == 1)
        return 1;
      continue;
    }
    return 0;
  }
}

BOOL geo::SkylineBin::erase(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    v5 = a1 + 64;
    if (geo::GuillotineBin::erase((geo::GuillotineBin *)(a1 + 64), (__int128 *)a2))
    {
      *(_DWORD *)(a1 + 16) += (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4)) * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8));
    }
    else
    {
      geo::GuillotineBin::addFreeRegion(v5, a2);
      *(_DWORD *)(a1 + 16) += (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4)) * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8));
      if (*(_BYTE *)(a1 + 29))
        geo::GuillotineBin::mergeFreeList(v5);
    }
  }
  return v2 != 0;
}

float geo::SkylineBin::occupancy(geo::SkylineBin *this)
{
  return (float)*((unsigned int *)this + 4) / (float)(*((_DWORD *)this + 3) * *((_DWORD *)this + 2));
}

void std::__shared_ptr_emplace<ta2::TextureAtlasPage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ta2::TextureAtlasPage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::GuillotineBin::scoreByHeuristic(uint64_t result, int a2, int a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  switch((char)result)
  {
    case 0:
      result = ((a4[3] - a4[1]) * (a4[2] - *a4) - a3 * a2);
      break;
    case 1:
      v4 = a4[2] - (*a4 + a2);
      if (v4 < 0)
        v4 = *a4 + a2 - a4[2];
      v5 = a4[3] - (a4[1] + a3);
      if (v5 < 0)
        v5 = a4[1] + a3 - a4[3];
      if (v5 >= v4)
        result = v4;
      else
        result = v5;
      break;
    case 2:
      v6 = a4[2] - (*a4 + a2);
      if (v6 < 0)
        v6 = *a4 + a2 - a4[2];
      v7 = a4[3] - (a4[1] + a3);
      if (v7 < 0)
        v7 = a4[1] + a3 - a4[3];
      if (v6 <= v7)
        result = v7;
      else
        result = v6;
      break;
    case 3:
      result = (a3 * a2 + (a4[3] - a4[1]) * (*a4 - a4[2]));
      break;
    case 4:
      v8 = a4[2] - (*a4 + a2);
      if (v8 < 0)
        v8 = *a4 + a2 - a4[2];
      v9 = a4[3] - (a4[1] + a3);
      if (v9 < 0)
        v9 = a4[1] + a3 - a4[3];
      if (v9 < v8)
        v8 = v9;
      result = -v8;
      break;
    case 5:
      v10 = a4[2] - (*a4 + a2);
      if (v10 < 0)
        v10 = *a4 + a2 - a4[2];
      v11 = a4[3] - (a4[1] + a3);
      if (v11 < 0)
        v11 = a4[1] + a3 - a4[3];
      if (v10 <= v11)
        v10 = v11;
      result = -v10;
      break;
    default:
      return result;
  }
  return result;
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unsigned int v6;
  unsigned int v7;
  __n128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 *v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __n128 *v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __n128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __n128 result;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __n128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __n128 *v50;
  __n128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __n128 v60;
  unint64_t *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  unsigned __int8 v89;
  char v90;
  char v91;
  char v92;

  v6 = *(_DWORD *)(*(_QWORD *)a2 + 44) - *(_DWORD *)(*(_QWORD *)a2 + 36);
  v7 = *(_DWORD *)(*(_QWORD *)a3 + 44) - *(_DWORD *)(*(_QWORD *)a3 + 36);
  if (v6 <= *(_DWORD *)(*(_QWORD *)a1 + 44) - *(_DWORD *)(*(_QWORD *)a1 + 36))
  {
    if (v7 > v6)
    {
      v22 = *a2;
      v21 = a2[1];
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v23 = (__n128 *)(a2 + 3);
      v24 = a2[2];
      v86 = (__n128)a2[3];
      v90 = *((_BYTE *)a2 + 64);
      v25 = *a3;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v26 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      *a2 = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          v68 = v24;
          v77 = v21;
          v63 = v22;
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v22 = v63;
          v24 = v68;
          v21 = v77;
        }
      }
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a2 + 5) = *((_DWORD *)a3 + 5);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a2 + 7) = *((_DWORD *)a3 + 7);
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      *((_DWORD *)a2 + 9) = *((_DWORD *)a3 + 9);
      *((_DWORD *)a2 + 10) = *((_DWORD *)a3 + 10);
      *((_DWORD *)a2 + 11) = *((_DWORD *)a3 + 11);
      v29 = (__n128)a3[3];
      *((_BYTE *)a2 + 64) = *((_BYTE *)a3 + 64);
      *v23 = v29;
      v30 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
      *a3 = v22;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          v69 = v24;
          v78 = v21;
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
          v24 = v69;
          v21 = v78;
        }
      }
      a3[1] = v21;
      a3[2] = v24;
      result = v86;
      a3[3] = (__int128)v86;
      *((_BYTE *)a3 + 64) = v90;
      if (*(_DWORD *)(*(_QWORD *)a2 + 44) - *(_DWORD *)(*(_QWORD *)a2 + 36) > (*(_DWORD *)(*(_QWORD *)a1 + 44)
                                                                                                - *(_DWORD *)(*(_QWORD *)a1 + 36)))
      {
        v35 = *a1;
        v34 = a1[1];
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        v36 = a1[2];
        v87 = (__n128)a1[3];
        v91 = *((_BYTE *)a1 + 64);
        v37 = *a2;
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        v38 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
        *a1 = v37;
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            v70 = v36;
            v79 = v34;
            v64 = v35;
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
            v35 = v64;
            v36 = v70;
            v34 = v79;
          }
        }
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *((_DWORD *)a1 + 5) = *((_DWORD *)a2 + 5);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
        v41 = *v23;
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
        a1[3] = (__int128)v41;
        v42 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
        *a2 = v35;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            v71 = v36;
            v80 = v34;
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
            v36 = v71;
            v34 = v80;
          }
        }
        a2[1] = v34;
        a2[2] = v36;
        result = v87;
        *v23 = v87;
        *((_BYTE *)a2 + 64) = v91;
      }
    }
  }
  else
  {
    v8 = (__n128 *)(a1 + 3);
    if (v7 > v6)
    {
      v10 = *a1;
      v9 = a1[1];
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      v11 = a1[2];
      v85 = *v8;
      v89 = *((_BYTE *)a1 + 64);
      v12 = *a3;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
      *a1 = v12;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          v67 = v11;
          v76 = v9;
          v62 = v10;
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
          v10 = v62;
          v11 = v67;
          v9 = v76;
        }
      }
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a1 + 5) = *((_DWORD *)a3 + 5);
      *((_DWORD *)a1 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a1 + 7) = *((_DWORD *)a3 + 7);
      *((_DWORD *)a1 + 8) = *((_DWORD *)a3 + 8);
      *((_DWORD *)a1 + 9) = *((_DWORD *)a3 + 9);
      *((_DWORD *)a1 + 10) = *((_DWORD *)a3 + 10);
      *((_DWORD *)a1 + 11) = *((_DWORD *)a3 + 11);
      v16 = (__n128 *)(a3 + 3);
      v17 = (__n128)a3[3];
      v8[1].n128_u8[0] = *((_BYTE *)a3 + 64);
      *v8 = v17;
      v18 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
      *a3 = v10;
      if (!v18)
        goto LABEL_56;
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_54:
      if (!v20)
      {
        v75 = v11;
        v84 = v9;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        v11 = v75;
        v9 = v84;
      }
LABEL_56:
      a3[1] = v9;
      a3[2] = v11;
      result = v85;
      *v16 = v85;
      v16[1].n128_u8[0] = v89;
      return result;
    }
    v45 = *a1;
    v9 = a1[1];
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v11 = a1[2];
    v88 = *v8;
    v92 = *((_BYTE *)a1 + 64);
    v46 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v47 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    *a1 = v46;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        v72 = v11;
        v81 = v9;
        v65 = v45;
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v45 = v65;
        v11 = v72;
        v9 = v81;
      }
    }
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a1 + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
    v50 = (__n128 *)(a2 + 3);
    v51 = (__n128)a2[3];
    *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    *v8 = v51;
    v52 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    *a2 = v45;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        v73 = v11;
        v82 = v9;
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
        v11 = v73;
        v9 = v82;
      }
    }
    a2[1] = v9;
    a2[2] = v11;
    result = v88;
    *v50 = v88;
    *((_BYTE *)a2 + 64) = v92;
    if (*(_DWORD *)(*(_QWORD *)a3 + 44) - *(_DWORD *)(*(_QWORD *)a3 + 36) > (*(_DWORD *)(*(_QWORD *)a2 + 44)
                                                                                              - *(_DWORD *)(*(_QWORD *)a2 + 36)))
    {
      v55 = *a2;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v85 = *v50;
      v89 = *((_BYTE *)a2 + 64);
      v56 = *a3;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v57 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      *a2 = v56;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          v74 = v11;
          v83 = v9;
          v66 = v55;
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
          v55 = v66;
          v11 = v74;
          v9 = v83;
        }
      }
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a2 + 5) = *((_DWORD *)a3 + 5);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a2 + 7) = *((_DWORD *)a3 + 7);
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      *((_DWORD *)a2 + 9) = *((_DWORD *)a3 + 9);
      *((_DWORD *)a2 + 10) = *((_DWORD *)a3 + 10);
      *((_DWORD *)a2 + 11) = *((_DWORD *)a3 + 11);
      v16 = (__n128 *)(a3 + 3);
      v60 = (__n128)a3[3];
      *((_BYTE *)a2 + 64) = *((_BYTE *)a3 + 64);
      *v50 = v60;
      v18 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
      *a3 = v55;
      if (!v18)
        goto LABEL_56;
      v61 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v61);
      while (__stlxr(v20 - 1, v61));
      goto LABEL_54;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __n128 *v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __n128 *v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __n128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  char v62;
  char v63;
  char v64;

  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3).n128_u64[0];
  if (*(_DWORD *)(*(_QWORD *)a4 + 44) - *(_DWORD *)(*(_QWORD *)a4 + 36) > (*(_DWORD *)(*(_QWORD *)a3 + 44)
                                                                                            - *(_DWORD *)(*(_QWORD *)a3 + 36)))
  {
    v10 = *(_OWORD *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v11 = (__n128 *)(a3 + 48);
    v12 = *(_OWORD *)(a3 + 32);
    v59 = *(__n128 *)(a3 + 48);
    v62 = *(_BYTE *)(a3 + 64);
    v13 = *a4;
    *(_QWORD *)a4 = 0;
    *((_QWORD *)a4 + 1) = 0;
    v14 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        v47 = v12;
        v53 = v9;
        v44 = v10;
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v10 = v44;
        v12 = v47;
        v9 = v53;
      }
    }
    *(_DWORD *)(a3 + 16) = *((_DWORD *)a4 + 4);
    *(_DWORD *)(a3 + 20) = *((_DWORD *)a4 + 5);
    *(_DWORD *)(a3 + 24) = *((_DWORD *)a4 + 6);
    *(_DWORD *)(a3 + 28) = *((_DWORD *)a4 + 7);
    *(_DWORD *)(a3 + 32) = *((_DWORD *)a4 + 8);
    *(_DWORD *)(a3 + 36) = *((_DWORD *)a4 + 9);
    *(_DWORD *)(a3 + 40) = *((_DWORD *)a4 + 10);
    *(_DWORD *)(a3 + 44) = *((_DWORD *)a4 + 11);
    v17 = (__n128)a4[3];
    *(_BYTE *)(a3 + 64) = *((_BYTE *)a4 + 64);
    *v11 = v17;
    v18 = (std::__shared_weak_count *)*((_QWORD *)a4 + 1);
    *a4 = v10;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        v48 = v12;
        v54 = v9;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        v12 = v48;
        v9 = v54;
      }
    }
    a4[1] = v9;
    a4[2] = v12;
    result = v59;
    a4[3] = (__int128)v59;
    *((_BYTE *)a4 + 64) = v62;
    if (*(_DWORD *)(*(_QWORD *)a3 + 44) - *(_DWORD *)(*(_QWORD *)a3 + 36) > (*(_DWORD *)(*(_QWORD *)a2 + 44)
                                                                                              - *(_DWORD *)(*(_QWORD *)a2 + 36)))
    {
      v22 = *(_OWORD *)a2;
      v21 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v23 = (__n128 *)(a2 + 48);
      v24 = *(_OWORD *)(a2 + 32);
      v60 = *(__n128 *)(a2 + 48);
      v63 = *(_BYTE *)(a2 + 64);
      v25 = *(_OWORD *)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v26 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          v49 = v24;
          v55 = v21;
          v45 = v22;
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v22 = v45;
          v24 = v49;
          v21 = v55;
        }
      }
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
      v29 = *v11;
      *(_BYTE *)(a2 + 64) = *(_BYTE *)(a3 + 64);
      *v23 = v29;
      v30 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v22;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          v50 = v24;
          v56 = v21;
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
          v24 = v50;
          v21 = v56;
        }
      }
      *(_OWORD *)(a3 + 16) = v21;
      *(_OWORD *)(a3 + 32) = v24;
      result = v60;
      *v11 = v60;
      *(_BYTE *)(a3 + 64) = v63;
      if (*(_DWORD *)(*(_QWORD *)a2 + 44) - *(_DWORD *)(*(_QWORD *)a2 + 36) > (*(_DWORD *)(*(_QWORD *)a1 + 44)
                                                                                                - *(_DWORD *)(*(_QWORD *)a1 + 36)))
      {
        v34 = *(_OWORD *)a1;
        v33 = *(_OWORD *)(a1 + 16);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v35 = *(_OWORD *)(a1 + 32);
        v61 = *(__n128 *)(a1 + 48);
        v64 = *(_BYTE *)(a1 + 64);
        v36 = *(_OWORD *)a2;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        v37 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v36;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            v51 = v35;
            v57 = v33;
            v46 = v34;
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
            v34 = v46;
            v35 = v51;
            v33 = v57;
          }
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
        v40 = *v23;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(__n128 *)(a1 + 48) = v40;
        v41 = *(std::__shared_weak_count **)(a2 + 8);
        *(_OWORD *)a2 = v34;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            v52 = v35;
            v58 = v33;
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
            v35 = v52;
            v33 = v58;
          }
        }
        *(_OWORD *)(a2 + 16) = v33;
        *(_OWORD *)(a2 + 32) = v35;
        result = v61;
        *v23 = v61;
        *(_BYTE *)(a2 + 64) = v64;
      }
    }
  }
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __n128 *v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __n128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __n128 *v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __n128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __n128 *v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __n128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  char v82;
  char v83;
  char v84;
  char v85;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1, a2, a3, (__int128 *)a4).n128_u64[0];
  if (*(_DWORD *)(*(_QWORD *)a5 + 44) - *(_DWORD *)(*(_QWORD *)a5 + 36) > (*(_DWORD *)(*(_QWORD *)a4 + 44)
                                                                                            - *(_DWORD *)(*(_QWORD *)a4 + 36)))
  {
    v12 = *(_OWORD *)a4;
    v11 = *(_OWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v13 = (__n128 *)(a4 + 48);
    v14 = *(_OWORD *)(a4 + 32);
    v78 = *(__n128 *)(a4 + 48);
    v82 = *(_BYTE *)(a4 + 64);
    v15 = *a5;
    *(_QWORD *)a5 = 0;
    *((_QWORD *)a5 + 1) = 0;
    v16 = *(std::__shared_weak_count **)(a4 + 8);
    *(_OWORD *)a4 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        v62 = v14;
        v70 = v11;
        v58 = v12;
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        v12 = v58;
        v14 = v62;
        v11 = v70;
      }
    }
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a5 + 4);
    *(_DWORD *)(a4 + 20) = *((_DWORD *)a5 + 5);
    *(_DWORD *)(a4 + 24) = *((_DWORD *)a5 + 6);
    *(_DWORD *)(a4 + 28) = *((_DWORD *)a5 + 7);
    *(_DWORD *)(a4 + 32) = *((_DWORD *)a5 + 8);
    *(_DWORD *)(a4 + 36) = *((_DWORD *)a5 + 9);
    *(_DWORD *)(a4 + 40) = *((_DWORD *)a5 + 10);
    *(_DWORD *)(a4 + 44) = *((_DWORD *)a5 + 11);
    v19 = (__n128)a5[3];
    *(_BYTE *)(a4 + 64) = *((_BYTE *)a5 + 64);
    *v13 = v19;
    v20 = (std::__shared_weak_count *)*((_QWORD *)a5 + 1);
    *a5 = v12;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        v63 = v14;
        v71 = v11;
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v14 = v63;
        v11 = v71;
      }
    }
    a5[1] = v11;
    a5[2] = v14;
    result = v78;
    a5[3] = (__int128)v78;
    *((_BYTE *)a5 + 64) = v82;
    if (*(_DWORD *)(*(_QWORD *)a4 + 44) - *(_DWORD *)(*(_QWORD *)a4 + 36) > (*(_DWORD *)(*(_QWORD *)a3 + 44)
                                                                                              - *(_DWORD *)(*(_QWORD *)a3 + 36)))
    {
      v24 = *(_OWORD *)a3;
      v23 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v25 = (__n128 *)(a3 + 48);
      v26 = *(_OWORD *)(a3 + 32);
      v79 = *(__n128 *)(a3 + 48);
      v83 = *(_BYTE *)(a3 + 64);
      v27 = *(_OWORD *)a4;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v28 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v27;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          v64 = v26;
          v72 = v23;
          v59 = v24;
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          v24 = v59;
          v26 = v64;
          v23 = v72;
        }
      }
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(_DWORD *)(a3 + 20) = *(_DWORD *)(a4 + 20);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
      *(_DWORD *)(a3 + 36) = *(_DWORD *)(a4 + 36);
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
      *(_DWORD *)(a3 + 44) = *(_DWORD *)(a4 + 44);
      v31 = *v13;
      *(_BYTE *)(a3 + 64) = *(_BYTE *)(a4 + 64);
      *v25 = v31;
      v32 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v24;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          v65 = v26;
          v73 = v23;
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          v26 = v65;
          v23 = v73;
        }
      }
      *(_OWORD *)(a4 + 16) = v23;
      *(_OWORD *)(a4 + 32) = v26;
      result = v79;
      *v13 = v79;
      *(_BYTE *)(a4 + 64) = v83;
      if (*(_DWORD *)(*(_QWORD *)a3 + 44) - *(_DWORD *)(*(_QWORD *)a3 + 36) > (*(_DWORD *)(*(_QWORD *)a2 + 44)
                                                                                                - *(_DWORD *)(*(_QWORD *)a2 + 36)))
      {
        v36 = *(_OWORD *)a2;
        v35 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        v37 = (__n128 *)(a2 + 48);
        v38 = *(_OWORD *)(a2 + 32);
        v80 = *(__n128 *)(a2 + 48);
        v84 = *(_BYTE *)(a2 + 64);
        v39 = *(_OWORD *)a3;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        v40 = *(std::__shared_weak_count **)(a2 + 8);
        *(_OWORD *)a2 = v39;
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            v66 = v38;
            v74 = v35;
            v60 = v36;
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            v36 = v60;
            v38 = v66;
            v35 = v74;
          }
        }
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(a3 + 20);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
        *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
        *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
        v43 = *v25;
        *(_BYTE *)(a2 + 64) = *(_BYTE *)(a3 + 64);
        *v37 = v43;
        v44 = *(std::__shared_weak_count **)(a3 + 8);
        *(_OWORD *)a3 = v36;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            v67 = v38;
            v75 = v35;
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            v38 = v67;
            v35 = v75;
          }
        }
        *(_OWORD *)(a3 + 16) = v35;
        *(_OWORD *)(a3 + 32) = v38;
        result = v80;
        *v25 = v80;
        *(_BYTE *)(a3 + 64) = v84;
        if (*(_DWORD *)(*(_QWORD *)a2 + 44) - *(_DWORD *)(*(_QWORD *)a2 + 36) > (*(_DWORD *)(*(_QWORD *)a1 + 44)
                                                                                                  - *(_DWORD *)(*(_QWORD *)a1 + 36)))
        {
          v48 = *(_OWORD *)a1;
          v47 = *(_OWORD *)(a1 + 16);
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v49 = *(_OWORD *)(a1 + 32);
          v81 = *(__n128 *)(a1 + 48);
          v85 = *(_BYTE *)(a1 + 64);
          v50 = *(_OWORD *)a2;
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          v51 = *(std::__shared_weak_count **)(a1 + 8);
          *(_OWORD *)a1 = v50;
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              v68 = v49;
              v76 = v47;
              v61 = v48;
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
              v48 = v61;
              v49 = v68;
              v47 = v76;
            }
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
          v54 = *v37;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
          *(__n128 *)(a1 + 48) = v54;
          v55 = *(std::__shared_weak_count **)(a2 + 8);
          *(_OWORD *)a2 = v48;
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              v69 = v49;
              v77 = v47;
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
              v49 = v69;
              v47 = v77;
            }
          }
          *(_OWORD *)(a2 + 16) = v47;
          *(_OWORD *)(a2 + 32) = v49;
          result = v81;
          *v37 = v81;
          *(_BYTE *)(a2 + 64) = v85;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(__int128 *a1, __int128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;

  v4 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(*((_QWORD *)a2 - 9) + 44) - *(_DWORD *)(*((_QWORD *)a2 - 9) + 36) > (*(_DWORD *)(*(_QWORD *)a1 + 44) - *(_DWORD *)(*(_QWORD *)a1 + 36)))
      {
        v7 = *a1;
        v6 = a1[1];
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        v8 = a1[2];
        v40 = a1[3];
        v42 = *((_BYTE *)a1 + 64);
        v9 = *(__int128 *)((char *)a2 - 72);
        *((_QWORD *)a2 - 9) = 0;
        *((_QWORD *)a2 - 8) = 0;
        v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
        *a1 = v9;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            v34 = v8;
            v37 = v6;
            v33 = v7;
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
            v7 = v33;
            v8 = v34;
            v6 = v37;
          }
        }
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 - 14);
        *((_DWORD *)a1 + 5) = *((_DWORD *)a2 - 13);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 - 12);
        *((_DWORD *)a1 + 7) = *((_DWORD *)a2 - 11);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 - 10);
        *((_DWORD *)a1 + 9) = *((_DWORD *)a2 - 9);
        *((_DWORD *)a1 + 10) = *((_DWORD *)a2 - 8);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a2 - 7);
        v13 = *(__int128 *)((char *)a2 - 24);
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 - 8);
        a1[3] = v13;
        v14 = (std::__shared_weak_count *)*((_QWORD *)a2 - 8);
        *(__int128 *)((char *)a2 - 72) = v7;
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            v35 = v8;
            v38 = v6;
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
            v8 = v35;
            v6 = v38;
          }
        }
        *(__int128 *)((char *)a2 - 56) = v6;
        *(__int128 *)((char *)a2 - 40) = v8;
        *(__int128 *)((char *)a2 - 24) = v40;
        *((_BYTE *)a2 - 8) = v42;
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1, (__int128 *)((char *)a1 + 72), (__int128 *)((char *)a2 - 72));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((uint64_t)a1, (uint64_t)a1 + 72, (uint64_t)(a1 + 9), (__int128 *)((char *)a2 - 72));
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,0>((uint64_t)a1, (uint64_t)a1 + 72, (uint64_t)(a1 + 9), (uint64_t)a1 + 216, (__int128 *)((char *)a2 - 72));
      return 1;
    default:
      v17 = a1 + 9;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1, (__int128 *)((char *)a1 + 72), a1 + 9);
      v18 = (__int128 *)((char *)a1 + 216);
      if ((__int128 *)((char *)a1 + 216) == a2)
        return 1;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = *(_QWORD *)v18;
    if (*(_DWORD *)(*(_QWORD *)v18 + 44) - *(_DWORD *)(*(_QWORD *)v18 + 36) > (*(_DWORD *)(*(_QWORD *)v17 + 44)
                                                                                                - *(_DWORD *)(*(_QWORD *)v17 + 36)))
    {
      v21 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v36 = v18[2];
      v39 = v18[1];
      v41 = v18[3];
      v43 = *((_BYTE *)v18 + 64);
      v22 = *(_QWORD *)v17;
      v23 = v18;
      while (1)
      {
        v24 = v17;
        v25 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        v26 = (std::__shared_weak_count *)*((_QWORD *)v23 + 1);
        *(_QWORD *)v23 = v22;
        *((_QWORD *)v23 + 1) = v25;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *((_DWORD *)v23 + 4) = *((_DWORD *)v24 + 4);
        *((_DWORD *)v23 + 5) = *((_DWORD *)v24 + 5);
        *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
        *((_DWORD *)v23 + 7) = *((_DWORD *)v24 + 7);
        *((_DWORD *)v23 + 8) = *((_DWORD *)v24 + 8);
        *((_DWORD *)v23 + 9) = *((_DWORD *)v24 + 9);
        *((_DWORD *)v23 + 10) = *((_DWORD *)v24 + 10);
        *((_DWORD *)v23 + 11) = *((_DWORD *)v24 + 11);
        v23[3] = v24[3];
        *((_BYTE *)v23 + 64) = *((_BYTE *)v24 + 64);
        if (v24 == a1)
          break;
        v17 = (__int128 *)((char *)v24 - 72);
        v22 = *((_QWORD *)v24 - 9);
        v23 = v24;
        if (*(_DWORD *)(v20 + 44) - *(_DWORD *)(v20 + 36) <= (*(_DWORD *)(v22 + 44)
                                                                           - *(_DWORD *)(v22 + 36)))
        {
          v29 = v24;
          goto LABEL_29;
        }
      }
      v29 = a1;
LABEL_29:
      v30 = (std::__shared_weak_count *)*((_QWORD *)v29 + 1);
      *(_QWORD *)v29 = v20;
      *((_QWORD *)v29 + 1) = v21;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v29[1] = v39;
      v29[2] = v36;
      v24[3] = v41;
      *((_BYTE *)v24 + 64) = v43;
      if (++v19 == 8)
        return (__int128 *)((char *)v18 + 72) == a2;
    }
    v17 = v18;
    v18 = (__int128 *)((char *)v18 + 72);
    if (v18 == a2)
      return 1;
  }
}

void ta2::TextureAtlasPage::textureRegionWasFreed(ta2::TextureAtlasPage *this, ta2::TextureAtlasRegion *a2)
{
  __n128 *v3;
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v4 = (__n128 *)*((_QWORD *)this + 43);
  v3 = (__n128 *)*((_QWORD *)this + 44);
  if (v4 != v3)
  {
    while ((ta2::TextureAtlasRegion *)v4->n128_u64[0] != a2)
    {
      if (++v4 == v3)
        return;
    }
  }
  if (v4 != v3)
  {
    v5 = *((_QWORD *)this + 47);
    v6 = *(__n128 **)(v5 - 16);
    if ((unint64_t)v6 >= *(_QWORD *)(v5 - 8))
    {
      v10 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v5 - 24, *v4);
    }
    else
    {
      v7 = v4->n128_u64[1];
      v6->n128_u64[0] = v4->n128_u64[0];
      v6->n128_u64[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = v6 + 1;
    }
    *(_QWORD *)(v5 - 16) = v10;
    v11 = v4 + 1;
    v12 = (__n128 *)*((_QWORD *)this + 44);
    if (&v4[1] != v12)
    {
      do
      {
        v13 = *v11;
        v11->n128_u64[0] = 0;
        v11->n128_u64[1] = 0;
        v14 = (std::__shared_weak_count *)v4->n128_u64[1];
        *v4 = v13;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, ta2::TextureAtlasRegion *))v14->__on_zero_shared)(v14, a2);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        ++v11;
        ++v4;
      }
      while (v11 != v12);
      v11 = (__n128 *)*((_QWORD *)this + 44);
    }
    while (v11 != v4)
    {
      v17 = (std::__shared_weak_count *)v11[-1].n128_u64[1];
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *, ta2::TextureAtlasRegion *))v17->__on_zero_shared)(v17, a2);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      --v11;
    }
    *((_QWORD *)this + 44) = v4;
  }
}

_QWORD *std::__function::__func<ta2::TextureAtlas::prepareClearBuffer(void)::$_0,std::allocator<ta2::TextureAtlas::prepareClearBuffer(void)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42D83F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<ta2::TextureAtlas::prepareClearBuffer(void)::$_0,std::allocator<ta2::TextureAtlas::prepareClearBuffer(void)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42D83F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ta2::TextureAtlas::prepareClearBuffer(void)::$_0,std::allocator<ta2::TextureAtlas::prepareClearBuffer(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42D83F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<ta2::TextureAtlas::prepareClearBuffer(void)::$_0,std::allocator<ta2::TextureAtlas::prepareClearBuffer(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D83F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<ta2::TextureAtlas::prepareClearBuffer(void)::$_0,std::allocator<ta2::TextureAtlas::prepareClearBuffer(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<ta2::TextureAtlas::prepareClearBuffer(void)::$_0,std::allocator<ta2::TextureAtlas::prepareClearBuffer(void)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ta2::TextureAtlasRegionBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ta2::TextureAtlasRegionBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ta2::TextureAtlasRegionBuffer>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t ta2::TextureAtlas::TextureAtlas(uint64_t a1, __int128 *a2, char a3, unsigned int a4, uint32x2_t *a5, uint32x2_t *a6, int a7, _QWORD *a8, uint64_t a9)
{
  std::string *v16;
  __int128 v17;
  uint32x2_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float32x2_t v23;
  char *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void **v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  void **v44;
  void **v45;
  void *v46;
  char *v47;
  char *v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void **v53;
  void **v54;
  void *v55;
  char *v56;
  char *v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;

  *(_QWORD *)a1 = &off_1E42C2B40;
  v16 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v17 = *a2;
    v16->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  *(_DWORD *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 36) = byte_1A001A928[a4];
  v18 = vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vneg_s32(vclz_s32(vadd_s32((int32x2_t)vmin_u32(*a5, (uint32x2_t)0x100000001000), (int32x2_t)-1))), (int8x8_t)0x1F0000001FLL));
  *(uint32x2_t *)(a1 + 40) = v18;
  *(uint32x2_t *)(a1 + 48) = vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vneg_s32(vclz_s32(vadd_s32((int32x2_t)vmin_u32(*a6, (uint32x2_t)0x100000001000), (int32x2_t)-1))), (int8x8_t)0x1F0000001FLL));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if (a7)
    v19 = 0;
  else
    v19 = 256;
  *(_DWORD *)(a1 + 100) = 1;
  *(_DWORD *)(a1 + 104) = v19;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 160) = 850045863;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v20 = a8[1];
  *(_QWORD *)(a1 + 344) = *a8;
  *(_QWORD *)(a1 + 352) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v18 = *(uint32x2_t *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 360) = a9;
  v23 = vcvt_f32_u32(v18);
  if (*(_QWORD *)(a1 + 48))
    v23 = vminnm_f32(vcvt_f32_u32(*(uint32x2_t *)(a1 + 48)), v23);
  *(uint32x2_t *)(a1 + 56) = vcvt_u32_f32(v23);
  *(uint32x2_t *)(a1 + 64) = vcvt_u32_f32(vmul_f32(v23, (float32x2_t)0x3F0000003F000000));
  v24 = (char *)operator new(0x58uLL);
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = &off_1E42DED18;
  *((_QWORD *)v24 + 5) = 0;
  *((_QWORD *)v24 + 6) = 0;
  *((_QWORD *)v24 + 4) = 0;
  *((_DWORD *)v24 + 14) = 0;
  *(_QWORD *)&v25 = 0x100000001;
  *((_QWORD *)&v25 + 1) = 0x100000001;
  *(_OWORD *)(v24 + 60) = v25;
  *(_QWORD *)(v24 + 76) = 0x100000001;
  *((_DWORD *)v24 + 21) = 0;
  v26 = *(std::__shared_weak_count **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v24;
  *((_QWORD *)v24 + 3) = &off_1E42B63B0;
  *(_QWORD *)(a1 + 80) = v24 + 24;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(_DWORD *)(a1 + 100) = 4;
  v30 = *(_QWORD **)(a1 + 320);
  v29 = *(void ***)(a1 + 328);
  v31 = (char *)((char *)v29 - (char *)v30);
  v32 = 0xAAAAAAAAAAAAAAABLL * (v29 - (void **)v30);
  if (v32 > 3)
  {
    if (v31 != (char *)96)
    {
      v53 = (void **)(v30 + 12);
      if (v29 != v30 + 12)
      {
        v54 = *(void ***)(a1 + 328);
        do
        {
          v57 = (char *)*(v54 - 3);
          v54 -= 3;
          v56 = v57;
          if (v57)
          {
            v58 = (char *)*(v29 - 2);
            v55 = v56;
            if (v58 != v56)
            {
              do
              {
                v59 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
                if (v59)
                {
                  v60 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                v58 -= 16;
              }
              while (v58 != v56);
              v55 = *v54;
            }
            *(v29 - 2) = v56;
            operator delete(v55);
          }
          v29 = v54;
        }
        while (v54 != v53);
      }
      *(_QWORD *)(a1 + 328) = v53;
    }
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 336);
    if (0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v29) >> 3) >= 4 - v32)
    {
      bzero(*(void **)(a1 + 328), 24 * ((72 - (uint64_t)v31) / 0x18uLL) + 24);
      *(_QWORD *)(a1 + 328) = &v29[3 * ((72 - (uint64_t)v31) / 0x18uLL) + 3];
    }
    else
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v30) >> 3);
      v35 = 0x5555555555555556 * ((v33 - (uint64_t)v30) >> 3);
      if (v35 <= 4)
        v35 = 4;
      if (v34 >= 0x555555555555555)
        v36 = 0xAAAAAAAAAAAAAAALL;
      else
        v36 = v35;
      if (v36 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_93;
      v37 = 24 * v36;
      v38 = (char *)operator new(24 * v36);
      v39 = &v38[8 * (v29 - (void **)v30)];
      v40 = &v38[v37];
      bzero(v39, 24 * ((72 - (uint64_t)v31) / 0x18uLL) + 24);
      v41 = &v39[24 * ((72 - (uint64_t)v31) / 0x18uLL) + 24];
      if (v29 == v30)
      {
        *(_QWORD *)(a1 + 320) = v39;
        *(_QWORD *)(a1 + 328) = v41;
        *(_QWORD *)(a1 + 336) = v40;
      }
      else
      {
        do
        {
          v42 = v39;
          *((_QWORD *)v39 - 2) = 0;
          *((_QWORD *)v39 - 1) = 0;
          v43 = *(_OWORD *)(v29 - 3);
          v29 -= 3;
          *(_OWORD *)(v39 - 24) = v43;
          v39 -= 24;
          *((_QWORD *)v42 - 1) = v29[2];
          *v29 = 0;
          v29[1] = 0;
          v29[2] = 0;
        }
        while (v29 != v30);
        v29 = *(void ***)(a1 + 320);
        v44 = *(void ***)(a1 + 328);
        *(_QWORD *)(a1 + 320) = v39;
        *(_QWORD *)(a1 + 328) = v41;
        *(_QWORD *)(a1 + 336) = v40;
        if (v44 != v29)
        {
          v45 = v44;
          do
          {
            v48 = (char *)*(v45 - 3);
            v45 -= 3;
            v47 = v48;
            if (v48)
            {
              v49 = (char *)*(v44 - 2);
              v46 = v47;
              if (v49 != v47)
              {
                do
                {
                  v50 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
                  if (v50)
                  {
                    v51 = (unint64_t *)&v50->__shared_owners_;
                    do
                      v52 = __ldaxr(v51);
                    while (__stlxr(v52 - 1, v51));
                    if (!v52)
                    {
                      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                      std::__shared_weak_count::__release_weak(v50);
                    }
                  }
                  v49 -= 16;
                }
                while (v49 != v47);
                v46 = *v45;
              }
              *(v44 - 2) = v47;
              operator delete(v46);
            }
            v44 = v45;
          }
          while (v45 != v29);
        }
      }
      if (v29)
        operator delete(v29);
    }
  }
  v62 = *(unsigned int *)(a1 + 100);
  v64 = *(_QWORD **)(a1 + 296);
  v63 = *(_QWORD **)(a1 + 304);
  v65 = 0xAAAAAAAAAAAAAAABLL * (v63 - v64);
  v66 = v62 - v65;
  if (v62 > v65)
  {
    v67 = *(_QWORD *)(a1 + 312);
    if (0xAAAAAAAAAAAAAAABLL * ((v67 - (uint64_t)v63) >> 3) >= v66)
    {
      bzero(*(void **)(a1 + 304), 24 * ((24 * v66 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 304) = &v63[3 * ((24 * v66 - 24) / 0x18) + 3];
      goto LABEL_87;
    }
    v68 = 0xAAAAAAAAAAAAAAABLL * ((v67 - (uint64_t)v64) >> 3);
    v69 = 0x5555555555555556 * ((v67 - (uint64_t)v64) >> 3);
    if (v69 > v62)
      v62 = v69;
    if (v68 >= 0x555555555555555)
      v62 = 0xAAAAAAAAAAAAAAALL;
    if (v62 <= 0xAAAAAAAAAAAAAAALL)
    {
      v70 = 24 * v62;
      v71 = (char *)operator new(24 * v62);
      v72 = &v71[8 * (v63 - v64)];
      v73 = &v71[v70];
      bzero(v72, 24 * ((24 * v66 - 24) / 0x18) + 24);
      v74 = &v72[24 * ((24 * v66 - 24) / 0x18) + 24];
      if (v63 == v64)
      {
        *(_QWORD *)(a1 + 296) = v72;
        *(_QWORD *)(a1 + 304) = v74;
        *(_QWORD *)(a1 + 312) = v73;
      }
      else
      {
        do
        {
          v75 = v72;
          *((_QWORD *)v72 - 2) = 0;
          *((_QWORD *)v72 - 1) = 0;
          v76 = *(_OWORD *)(v63 - 3);
          v63 -= 3;
          *(_OWORD *)(v72 - 24) = v76;
          v72 -= 24;
          *((_QWORD *)v75 - 1) = v63[2];
          *v63 = 0;
          v63[1] = 0;
          v63[2] = 0;
        }
        while (v63 != v64);
        v63 = *(_QWORD **)(a1 + 296);
        v77 = *(_QWORD **)(a1 + 304);
        *(_QWORD *)(a1 + 296) = v72;
        *(_QWORD *)(a1 + 304) = v74;
        *(_QWORD *)(a1 + 312) = v73;
        if (v77 != v63)
        {
          v78 = v77;
          do
          {
            v80 = (void *)*(v78 - 3);
            v78 -= 3;
            v79 = v80;
            if (v80)
            {
              *(v77 - 2) = v79;
              operator delete(v79);
            }
            v77 = v78;
          }
          while (v78 != v63);
        }
      }
      if (v63)
        operator delete(v63);
      goto LABEL_87;
    }
LABEL_93:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v62 < v65)
  {
    v81 = &v64[3 * v62];
    if (v63 != v81)
    {
      v82 = *(_QWORD **)(a1 + 304);
      do
      {
        v84 = (void *)*(v82 - 3);
        v82 -= 3;
        v83 = v84;
        if (v84)
        {
          *(v63 - 2) = v83;
          operator delete(v83);
        }
        v63 = v82;
      }
      while (v82 != v81);
    }
    *(_QWORD *)(a1 + 304) = v81;
  }
LABEL_87:
  v85 = operator new(0x70uLL);
  v85[1] = 0;
  v85[2] = 0;
  *v85 = &off_1E42E5CA8;
  *((_OWORD *)v85 + 2) = 0u;
  *((_OWORD *)v85 + 3) = 0u;
  *((_OWORD *)v85 + 4) = 0u;
  *((_OWORD *)v85 + 5) = 0u;
  *((_OWORD *)v85 + 6) = 0u;
  v86 = *(std::__shared_weak_count **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v85;
  v85[3] = 850045863;
  *(_QWORD *)(a1 + 272) = v85 + 3;
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::__emplace_unique_key_args<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>,std::tuple<>>(float *a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD **v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v53;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *((_QWORD *)a1 + 1);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = v14[1];
            if (v19 == v10)
            {
              v20 = *((unsigned __int8 *)v14 + 39);
              if ((v20 & 0x80u) == 0)
                v21 = *((unsigned __int8 *)v14 + 39);
              else
                v21 = v14[3];
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v7, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v22 = 0;
                  while (*((unsigned __int8 *)v14 + v22 + 16) == *((unsigned __int8 *)v7 + v22))
                  {
                    if (v20 == ++v22)
                      return v14;
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v14 + 39);
            else
              v17 = v14[3];
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v7, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v18 = 0;
                while (*((unsigned __int8 *)v14 + v18 + 16) == *((unsigned __int8 *)v7 + v18))
                {
                  if (v16 == ++v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v23 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 64, 8);
  *v23 = 0;
  v23[1] = v10;
  v24 = (_QWORD **)(v23 + 2);
  v25 = *a3;
  v23[5] = *((_QWORD *)*a3 + 3);
  if (*((char *)v25 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v24, *(void **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    v23[4] = *((_QWORD *)v25 + 2);
    *(_OWORD *)v24 = v26;
  }
  v23[6] = 0;
  v23[7] = 0;
  v27 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v28 = a1[12];
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v29 = 1;
    if (v11 >= 3)
      v29 = (v11 & (v11 - 1)) != 0;
    v30 = v29 | (2 * v11);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *((_QWORD *)a1 + 1);
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_88;
      v44 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v11 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime >= v11)
      {
        v11 = *((_QWORD *)a1 + 1);
LABEL_88:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_101;
      }
      if (!prime)
      {
        v53 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v53)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v53, 8 * *((_QWORD *)a1 + 1));
        v11 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_88;
      }
    }
    v33 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v34 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v33;
    if (v34)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v34, 8 * *((_QWORD *)a1 + 1));
    v35 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35++) = 0;
    while (prime != v35);
    v37 = (uint64_t *)(a1 + 6);
    v36 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v36)
    {
LABEL_87:
      v11 = prime;
      goto LABEL_88;
    }
    v38 = v36[1];
    v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v40 = v38 & v39;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v37;
      for (i = (_QWORD *)*v36; *v36; i = (_QWORD *)*v36)
      {
        v42 = i[1] & v39;
        if (v42 == v40)
        {
          v36 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v36 = *i;
          v43 = 8 * v42;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v36;
          v36 = i;
          v40 = v42;
        }
      }
      goto LABEL_87;
    }
    if (v38 >= prime)
      v38 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v37;
    v47 = (_QWORD *)*v36;
    if (!*v36)
      goto LABEL_87;
    while (1)
    {
      v49 = v47[1];
      if (v49 >= prime)
        v49 %= prime;
      if (v49 != v38)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v49))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v36;
          goto LABEL_92;
        }
        *v36 = *v47;
        v48 = 8 * v49;
        *v47 = **(_QWORD **)(*(_QWORD *)a1 + v48);
        **(_QWORD **)(*(_QWORD *)a1 + v48) = v47;
        v47 = v36;
      }
      v49 = v38;
LABEL_92:
      v36 = v47;
      v47 = (_QWORD *)*v47;
      v38 = v49;
      if (!v47)
        goto LABEL_87;
    }
  }
LABEL_101:
  v50 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v50)
  {
    *v23 = *v50;
    *v50 = v23;
  }
  else
  {
    *v23 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v23;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
    if (*v23)
    {
      v51 = *(_QWORD *)(*v23 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v51 >= v11)
          v51 %= v11;
      }
      else
      {
        v51 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = v23;
    }
  }
  v14 = v23;
  ++*((_QWORD *)a1 + 5);
  return v14;
}

void sub_19F9973C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 56);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 40) + 40))(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32) & 0x7FFFFFFFFFFFFFFFLL);
    }
LABEL_9:
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 64);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::MuninRoadLabelDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninRoadLabelDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninRoadLabelDedupingGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::MuninRoadLabelPool::clear(md::MuninRoadLabelPool *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t result;
  int32x2_t *v9;
  char *v10;
  char *v11;
  BOOL v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 1);
  v4 = (char *)this + 16;
  if (v3 != (char *)this + 16)
  {
    do
    {
      v9 = (int32x2_t *)*((_QWORD *)v3 + 4);
      v9[37].i8[7] = 0;
      if (v9[37].i8[6])
        v9[37].i8[6] = 0;
      md::MuninRoadLabel::setActive(v9, 0);
      v10 = (char *)*((_QWORD *)v3 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v3 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v3;
          v3 = v11;
        }
        while (!v12);
      }
      v3 = v11;
    }
    while (v11 != v4);
  }
  if (*((_QWORD *)this + 10))
  {
    v5 = (uint64_t *)*((_QWORD *)this + 8);
    if (v5)
    {
      do
      {
        v13 = (uint64_t *)*v5;
        v14 = (std::__shared_weak_count *)v5[7];
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (*((char *)v5 + 39) < 0)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[5] + 40))(v5[5], v5[2], v5[4] & 0x7FFFFFFFFFFFFFFFLL);
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v5, 64);
        v5 = v13;
      }
      while (v13);
    }
    *((_QWORD *)this + 8) = 0;
    v6 = *((_QWORD *)this + 6);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  result = std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)v2, *((_QWORD **)this + 2));
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 96) = 0;
  return result;
}

void md::RouteLineDataRequester::~RouteLineDataRequester(md::RouteLineDataRequester *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VSSprite::PipelineState::~PipelineState(ggl::VSSprite::PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VSSprite::PipelineSetup::~PipelineSetup(ggl::VSSprite::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VSSprite::PipelineSetup::constantDataIsEnabled(ggl::VSSprite::PipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::VSSprite::PipelineSetup::textureIsEnabled(ggl::VSSprite::PipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

float md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::writeVertex(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  BOOL v21;
  float v22;
  int v23;
  float v24;
  float v25;
  float32x4_t v26;
  uint64_t v27;
  float result;

  v3 = a3 + 24;
  v4 = 0.0;
  v5 = fmaxf(*(float *)(a3 + 8), 0.0);
  if (v5 >= 1.0)
    v6 = 65535.0;
  else
    v6 = v5 * 65535.0;
  v7 = fmaxf(*(float *)(a3 + 12), 0.0);
  if (v7 >= 1.0)
    v8 = 65535.0;
  else
    v8 = v7 * 65535.0;
  v9 = *a2;
  *(_WORD *)v9 = (int)v6;
  *(_WORD *)(v9 + 2) = (int)v8;
  v10.i64[0] = *(_QWORD *)(a3 + 16);
  v10.i64[1] = *(_QWORD *)(a3 + 40);
  v11.i64[0] = 0xBF000000BF000000;
  v11.i64[1] = 0xBF000000BF000000;
  v12.i64[0] = 0xBF000000BF000000;
  v12.i64[1] = 0xBF000000BF000000;
  *(int16x4_t *)(v9 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v12, (float32x4_t)xmmword_19FFB2FA0, v10)));
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v13 + 96))
    v14 = 1.0;
  else
    v14 = 0.0;
  *(float *)(v9 + 12) = v14;
  v15 = *(_DWORD *)(v13 + 100) == 1;
  v16 = 16;
  if (v15)
    v17 = 24;
  else
    v17 = 16;
  if (v15)
    v18 = a3 + 24;
  else
    v18 = a3 + 16;
  v19 = (int)(float)((float)(*(float *)(v18 + 4) * 8191.9) + -0.5);
  *(_WORD *)(v9 + 16) = (int)(float)((float)(*(float *)(a3 + v17) * 8191.9) + -0.5);
  *(_WORD *)(v9 + 18) = v19;
  *a2 = v9 + 20;
  v20 = fmaxf(*(float *)(a3 + 8), 0.0);
  v21 = v20 < 1.0;
  v22 = v20 * 65535.0;
  if (!v21)
    v22 = 65535.0;
  v23 = (int)v22;
  v24 = fmaxf(*(float *)(a3 + 12), 0.0);
  if (v24 >= 1.0)
    v25 = 65535.0;
  else
    v25 = v24 * 65535.0;
  *(_WORD *)(v9 + 20) = v23;
  *(_WORD *)(v9 + 22) = (int)v25;
  v26 = *(float32x4_t *)(a3 + 24);
  v26.i64[1] = *(_QWORD *)(a3 + 48);
  *(int16x4_t *)(v9 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v11, (float32x4_t)xmmword_19FFB2FA0, v26)));
  v27 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v27 + 96))
    v4 = 1.0;
  *(float *)(v9 + 32) = v4;
  if (*(_DWORD *)(v27 + 100) == 1)
    v16 = 24;
  else
    v3 = a3 + 16;
  result = (float)(*(float *)(v3 + 4) * 8191.9) + -0.5;
  *(_WORD *)(v9 + 36) = (int)(float)((float)(*(float *)(a3 + v16) * 8191.9) + -0.5);
  *(_WORD *)(v9 + 38) = (int)result;
  *a2 = v9 + 40;
  return result;
}

void std::__shared_ptr_emplace<ggl::OptimizedTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::OptimizedTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::OptimizedTraffic::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::TrafficGlow::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TrafficGlow::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEB20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::TrafficGlow::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::SolidTraffic::BaseMaskedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SolidTraffic::BaseMaskedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::SolidTraffic::BaseMaskedPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::SolidTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SolidTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::SolidTraffic::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::TrafficSharedPipelineStates::~TrafficSharedPipelineStates(md::TrafficSharedPipelineStates *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v2 + 104));
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40AD78EA61);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v9)
      goto LABEL_18;
  }
  else
  {
LABEL_12:
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v9)
      goto LABEL_18;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v12)
    goto LABEL_22;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v15)
      return;
  }
  else
  {
LABEL_22:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v15)
      return;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

uint64_t md::TrafficMeshStyle::setup(int *a1, uint64_t a2, std::__shared_weak_count *a3, int a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  BOOL v16;
  unsigned int v17;
  float v18;
  int v19;
  unint64_t v20;
  float *v21;
  float v22;
  BOOL v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float *v30;
  float v31;
  BOOL v32;
  unsigned int v33;
  float v34;
  int v35;
  unint64_t v36;
  float *v37;
  float v38;
  BOOL v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  BOOL v49;
  unsigned int v50;
  float v51;
  int v52;
  int v53;
  unint64_t v54;
  float *v55;
  float v56;
  BOOL v57;
  unsigned int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  int v63;
  uint64_t v64;
  float *v65;
  float v66;
  BOOL v67;
  unsigned int v68;
  float v69;
  unint64_t v71;
  float *v72;
  float v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  _QWORD v79[2];
  uint64_t v80;
  std::__shared_weak_count *v81;
  _QWORD v82[2];
  unsigned __int8 v83;
  char v84;

  v79[0] = a2;
  v79[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v80 = a2;
    v81 = a3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v80 = a2;
    v81 = 0;
  }
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0;
  if (!a2)
  {
    v10 = 0;
    v83 = 0;
    if (a3)
      goto LABEL_10;
LABEL_16:
    if (!v10)
      goto LABEL_14;
LABEL_17:
    if (md::trafficVisibleAtSpeed((uint64_t)&v80, 0))
    {
      v13 = *(_QWORD *)(v80 + 24);
      v14 = *(float **)v13;
      if (*(_QWORD *)v13
        && (v15 = *v14, LODWORD(v14) = *v14 == 1.0, *(_BYTE *)(v13 + 10))
        && (v15 != 0.0 ? (v16 = v15 == 1.0) : (v16 = 1), !v16)
        || (v17 = *(unsigned __int8 *)(v13 + v14 + 11), v15 = 0.0, v17 == 2))
      {
        LOBYTE(v79[0]) = 1;
        v84 = 1;
        v18 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v13, 0x2Eu, 0, 0, v79);
        if ((float)(v18
                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v13, 0x2Eu, 0, 1u, &v84)- v18)* v15)) > 0.0)
        {
LABEL_27:
          v19 = 0;
          goto LABEL_45;
        }
      }
      else if (*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v80 + 24), 0x2Eu, 0, v17, 0) > 0.0)
      {
        goto LABEL_27;
      }
      v20 = *(_QWORD *)(v80 + 24);
      v21 = *(float **)v20;
      if (*(_QWORD *)v20
        && (v22 = *v21, LODWORD(v21) = *v21 == 1.0, *(_BYTE *)(v20 + 10))
        && (v22 != 0.0 ? (v23 = v22 == 1.0) : (v23 = 1), !v23)
        || (v24 = *(unsigned __int8 *)(v20 + v21 + 11), v22 = 0.0, v24 == 2))
      {
        LOBYTE(v79[0]) = 1;
        v84 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x2Fu, 0, (BOOL *)v79, 0.0);
        v26 = v25;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x2Fu, 1u, (BOOL *)&v84, 0.0);
        v28 = v26 + (float)((float)(v27 - v26) * v22);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v80 + 24), 0x2Fu, v24, 0, 0.0);
      }
      if (v28 <= 0.0)
        v19 = 1;
      else
        v19 = 2;
    }
    else
    {
      v19 = 5;
    }
LABEL_45:
    *a1 = v19;
    if (!v83)
    {
      a1[1] = 5;
      goto LABEL_85;
    }
    if (md::trafficVisibleAtSpeed((uint64_t)&v80, 1))
    {
      v29 = *(_QWORD *)(v80 + 24);
      v30 = *(float **)v29;
      if (*(_QWORD *)v29
        && (v31 = *v30, LODWORD(v30) = *v30 == 1.0, *(_BYTE *)(v29 + 10))
        && (v31 != 0.0 ? (v32 = v31 == 1.0) : (v32 = 1), !v32)
        || (v33 = *(unsigned __int8 *)(v29 + v30 + 11), v31 = 0.0, v33 == 2))
      {
        LOBYTE(v79[0]) = 1;
        v84 = 1;
        v34 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v29, 0x39u, 0, 0, v79);
        if ((float)(v34
                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v29, 0x39u, 0, 1u, &v84)- v34)* v31)) > 0.0)
        {
LABEL_56:
          v35 = 0;
          goto LABEL_73;
        }
      }
      else if (*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v80 + 24), 0x39u, 0, v33, 0) > 0.0)
      {
        goto LABEL_56;
      }
      v36 = *(_QWORD *)(v80 + 24);
      v37 = *(float **)v36;
      if (*(_QWORD *)v36
        && (v38 = *v37, LODWORD(v37) = *v37 == 1.0, *(_BYTE *)(v36 + 10))
        && (v38 != 0.0 ? (v39 = v38 == 1.0) : (v39 = 1), !v39)
        || (v40 = *(unsigned __int8 *)(v36 + v37 + 11), v38 = 0.0, v40 == 2))
      {
        LOBYTE(v79[0]) = 1;
        v84 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v36, 0x3Au, 0, (BOOL *)v79, 0.0);
        v42 = v41;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v36, 0x3Au, 1u, (BOOL *)&v84, 0.0);
        v44 = v42 + (float)((float)(v43 - v42) * v38);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v80 + 24), 0x3Au, v40, 0, 0.0);
      }
      if (v44 <= 0.0)
        v35 = 1;
      else
        v35 = 2;
    }
    else
    {
      v35 = 5;
    }
LABEL_73:
    v45 = v83;
    a1[1] = v35;
    if (v45)
    {
      if (!md::trafficVisibleAtSpeed((uint64_t)&v80, 2))
      {
        v52 = 5;
        goto LABEL_101;
      }
      v46 = *(_QWORD *)(v80 + 24);
      v47 = *(float **)v46;
      if (*(_QWORD *)v46
        && (v48 = *v47, LODWORD(v47) = *v47 == 1.0, *(_BYTE *)(v46 + 10))
        && (v48 != 0.0 ? (v49 = v48 == 1.0) : (v49 = 1), !v49)
        || (v50 = *(unsigned __int8 *)(v46 + v47 + 11), v48 = 0.0, v50 == 2))
      {
        LOBYTE(v79[0]) = 1;
        v84 = 1;
        v51 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v46, 0x44u, 0, 0, v79);
        if ((float)(v51
                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v46, 0x44u, 0, 1u, &v84)- v51)* v48)) > 0.0)
        {
LABEL_84:
          v52 = 0;
          goto LABEL_101;
        }
      }
      else if (*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v80 + 24), 0x44u, 0, v50, 0) > 0.0)
      {
        goto LABEL_84;
      }
      v54 = *(_QWORD *)(v80 + 24);
      v55 = *(float **)v54;
      if (*(_QWORD *)v54
        && (v56 = *v55, LODWORD(v55) = *v55 == 1.0, *(_BYTE *)(v54 + 10))
        && (v56 != 0.0 ? (v57 = v56 == 1.0) : (v57 = 1), !v57)
        || (v58 = *(unsigned __int8 *)(v54 + v55 + 11), v56 = 0.0, v58 == 2))
      {
        LOBYTE(v79[0]) = 1;
        v84 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v54, 0x45u, 0, (BOOL *)v79, 0.0);
        v60 = v59;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v54, 0x45u, 1u, (BOOL *)&v84, 0.0);
        v62 = v60 + (float)((float)(v61 - v60) * v56);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v80 + 24), 0x45u, v58, 0, 0.0);
      }
      if (v62 <= 0.0)
        v52 = 1;
      else
        v52 = 2;
LABEL_101:
      v63 = v83;
      a1[2] = v52;
      if (!v63 || (md::trafficVisibleAtSpeed((uint64_t)&v80, 3) | a4) != 1)
      {
        v53 = 5;
        goto LABEL_114;
      }
      v64 = *(_QWORD *)(v80 + 24);
      v65 = *(float **)v64;
      if (*(_QWORD *)v64
        && (v66 = *v65, LODWORD(v65) = *v65 == 1.0, *(_BYTE *)(v64 + 10))
        && (v66 != 0.0 ? (v67 = v66 == 1.0) : (v67 = 1), !v67)
        || (v68 = *(unsigned __int8 *)(v64 + v65 + 11), v66 = 0.0, v68 == 2))
      {
        LOBYTE(v79[0]) = 1;
        v84 = 1;
        v69 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v64, 0x4Fu, 0, 0, v79);
        if ((float)(v69
                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v64, 0x4Fu, 0, 1u, &v84)- v69)* v66)) > 0.0)
        {
LABEL_112:
          v53 = 0;
          goto LABEL_114;
        }
      }
      else if (*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v80 + 24), 0x4Fu, 0, v68, 0) > 0.0)
      {
        goto LABEL_112;
      }
      v71 = *(_QWORD *)(v80 + 24);
      v72 = *(float **)v71;
      if (*(_QWORD *)v71 && (v73 = *v72, LODWORD(v72) = *v72 == 1.0, *(_BYTE *)(v71 + 10)) && v73 != 0.0 && v73 != 1.0
        || (v74 = *(unsigned __int8 *)(v71 + v72 + 11), v73 = 0.0, v74 == 2))
      {
        LOBYTE(v79[0]) = 1;
        v84 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v71, 0x50u, 0, (BOOL *)v79, 0.0);
        v76 = v75;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v71, 0x50u, 1u, (BOOL *)&v84, 0.0);
        v78 = v76 + (float)((float)(v77 - v76) * v73);
      }
      else
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v80 + 24), 0x50u, v74, 0, 0.0);
      }
      if (v78 <= 0.0)
        v53 = 1;
      else
        v53 = 2;
      goto LABEL_114;
    }
LABEL_85:
    v53 = 5;
    a1[2] = 5;
LABEL_114:
    a1[3] = v53;
    return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v80);
  }
  v10 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 48))(a2, v82);
  v83 = v10;
  if (!a3)
    goto LABEL_16;
LABEL_10:
  v11 = (unint64_t *)&a3->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
    if (!v83)
      goto LABEL_14;
    goto LABEL_17;
  }
  if (v83)
    goto LABEL_17;
LABEL_14:
  memset_pattern16(a1, &unk_19FFB6380, 0x10uLL);
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v80);
}

void sub_19F99843C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F9984C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t md::trafficSecondaryWidthForSpeedAtZ(unint64_t result, int a2, float a3)
{
  unint64_t v3;
  float v4;
  float *v5;
  float v6;
  BOOL v7;
  unsigned int v8;
  char *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  float *v13;
  float v14;
  BOOL v15;
  unint64_t v16;
  float *v17;
  float v18;
  BOOL v19;
  unint64_t v20;
  float *v21;
  float v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  switch(a2)
  {
    case 0:
      v3 = *(_QWORD *)(result + 24);
      v4 = fminf(fmaxf(a3, 0.0), 23.0);
      v5 = *(float **)v3;
      if (*(_QWORD *)v3
        && (v6 = *v5, LODWORD(v5) = *v5 == 1.0, *(_BYTE *)(v3 + 10))
        && (v6 != 0.0 ? (v7 = v6 == 1.0) : (v7 = 1), !v7)
        || (v8 = *(unsigned __int8 *)(v3 + v5 + 11), v8 == 2))
      {
        v27 = 1;
        v26 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v3, 0x2Fu, 0, (BOOL *)&v27, v4);
        v9 = &v26;
        v10 = v3;
        v11 = 47;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, v11, 1u, (BOOL *)v9, v4);
      }
      v24 = *(_QWORD *)(result + 24);
      v25 = 47;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v24, v25, v8, 0, v4);
    case 1:
      v12 = *(_QWORD *)(result + 24);
      v4 = fminf(fmaxf(a3, 0.0), 23.0);
      v13 = *(float **)v12;
      if (*(_QWORD *)v12
        && (v14 = *v13, LODWORD(v13) = *v13 == 1.0, *(_BYTE *)(v12 + 10))
        && (v14 != 0.0 ? (v15 = v14 == 1.0) : (v15 = 1), !v15)
        || (v8 = *(unsigned __int8 *)(v12 + v13 + 11), v8 == 2))
      {
        v29 = 1;
        v28 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v12, 0x3Au, 0, (BOOL *)&v29, v4);
        v9 = &v28;
        v10 = v12;
        v11 = 58;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, v11, 1u, (BOOL *)v9, v4);
      }
      v24 = *(_QWORD *)(result + 24);
      v25 = 58;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v24, v25, v8, 0, v4);
    case 2:
      v16 = *(_QWORD *)(result + 24);
      v4 = fminf(fmaxf(a3, 0.0), 23.0);
      v17 = *(float **)v16;
      if (*(_QWORD *)v16
        && (v18 = *v17, LODWORD(v17) = *v17 == 1.0, *(_BYTE *)(v16 + 10))
        && (v18 != 0.0 ? (v19 = v18 == 1.0) : (v19 = 1), !v19)
        || (v8 = *(unsigned __int8 *)(v16 + v17 + 11), v8 == 2))
      {
        v31 = 1;
        v30 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v16, 0x45u, 0, (BOOL *)&v31, v4);
        v9 = &v30;
        v10 = v16;
        v11 = 69;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, v11, 1u, (BOOL *)v9, v4);
      }
      v24 = *(_QWORD *)(result + 24);
      v25 = 69;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v24, v25, v8, 0, v4);
    case 3:
      v20 = *(_QWORD *)(result + 24);
      v4 = fminf(fmaxf(a3, 0.0), 23.0);
      v21 = *(float **)v20;
      if (*(_QWORD *)v20
        && (v22 = *v21, LODWORD(v21) = *v21 == 1.0, *(_BYTE *)(v20 + 10))
        && (v22 != 0.0 ? (v23 = v22 == 1.0) : (v23 = 1), !v23)
        || (v8 = *(unsigned __int8 *)(v20 + v21 + 11), v8 == 2))
      {
        v33 = 1;
        v32 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x50u, 0, (BOOL *)&v33, v4);
        v9 = &v32;
        v10 = v20;
        v11 = 80;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, v11, 1u, (BOOL *)v9, v4);
      }
      else
      {
        v24 = *(_QWORD *)(result + 24);
        v25 = 80;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v24, v25, v8, 0, v4);
      }
    default:
      return result;
  }
}

void md::TrafficMeshStyle::overrideSetup(int *__b, uint64_t a2, int a3, int a4)
{
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (*(_BYTE *)(a2 + 32))
  {
    v8 = md::trafficVisibleAtSpeed(a2, 0);
    v9 = *(unsigned __int8 *)(a2 + 32);
    v10 = 5;
    if (v8)
      v11 = a4;
    else
      v11 = 5;
    *__b = v11;
    if (v9)
    {
      if (md::trafficVisibleAtSpeed(a2, 1))
        v12 = a4;
      else
        v12 = 5;
      v13 = *(unsigned __int8 *)(a2 + 32);
      __b[1] = v12;
      if (v13)
      {
        if (md::trafficVisibleAtSpeed(a2, 2))
          v14 = a4;
        else
          v14 = 5;
        v15 = *(unsigned __int8 *)(a2 + 32);
        __b[2] = v14;
        if (v15)
        {
          if (md::trafficVisibleAtSpeed(a2, 3) | a3)
            v10 = a4;
          else
            v10 = 5;
        }
      }
      else
      {
        __b[2] = 5;
      }
    }
    else
    {
      __b[1] = 5;
      __b[2] = 5;
    }
    __b[3] = v10;
  }
  else
  {
    memset_pattern16(__b, &unk_19FFB6380, 0x10uLL);
  }
}

unint64_t md::TrafficBatchKey::hash(md::TrafficBatchKey *this)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t i;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)this;
  v4 = *(unsigned int **)(*(_QWORD *)this + 240);
  v3 = *(unsigned int **)(*(_QWORD *)this + 248);
  for (i = ((char *)v3 - (char *)v4) >> 3; v4 != v3; v4 += 2)
  {
    v6 = ((i << 6) - 0x61C8864680B583EBLL + (i >> 2) + *v4) ^ i;
    i = (*((unsigned __int16 *)v4 + 2) - 0x61C8864680B583EBLL + (v6 << 6) + (v6 >> 2)) ^ v6;
  }
  v7 = *(unsigned __int16 *)(v2 + 282);
  if (*(_WORD *)(v2 + 282))
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(v2 + 272);
    v12 = v11 + *(unsigned __int16 *)(v2 + 280);
    do
    {
      if (v10 < v7)
      {
        v9 = (unsigned int *)(v11 + 4 * v10);
        v1 = (unsigned __int16 *)(v12 + 2 * v10);
      }
      v8 ^= (*v1
           - 0x61C8864680B583EBLL
           + ((((v8 << 6) - 0x61C8864680B583EBLL + (v8 >> 2) + *v9) ^ v8) << 6)
           + ((((v8 << 6) - 0x61C8864680B583EBLL + (v8 >> 2) + *v9) ^ v8) >> 2)) ^ ((v8 << 6)
                                                                                  - 0x61C8864680B583EBLL
                                                                                  + (v8 >> 2)
                                                                                  + *v9);
      v13 = v10 + 1;
      if (v10 + 1 < v7)
        ++v10;
      else
        v10 = v7;
    }
    while (v13 < v7);
  }
  else
  {
    v8 = 0;
  }
  v14 = v8 ^ i ^ (2 * *((unsigned __int8 *)this + 20));
  v15 = 2 * *((unsigned int *)this + 4);
  if (*((float *)this + 4) == 0.0)
    v15 = 0;
  return (4 * *((unsigned int *)this + 6)) ^ (v14 >> 1) ^ v15;
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF188;
  v2 = *(_QWORD **)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 104);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 224);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 224);
  *(_QWORD *)(a1 + 232) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 224);
  }
  free(v21);
  v24 = *(void **)(a1 + 200);
  if (v24)
  {
    *(_QWORD *)(a1 + 208) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 176);
    v27 = *(_QWORD *)(a1 + 168);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 176);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v27, *(_QWORD *)(a1 + 184) - v27);
  }
  v31 = *(void **)(a1 + 144);
  if (v31)
  {
    *(_QWORD *)(a1 + 152) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::OptimizedTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::OptimizedTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OptimizedTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E19F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OptimizedTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E19F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OptimizedTraffic::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::PilledTrafficBatch::~PilledTrafficBatch(md::PilledTrafficBatch *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42956A8;
  v2 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E428C740;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42956A8;
  v2 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E428C740;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C740;
  v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C740;
  v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PilledTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL md::setupSharedStylingParameters(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, int a5, __n128 a6)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BOOL8 v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[2];
  char v20;

  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v17 = a3;
    v18 = a4;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v17 = a3;
    v18 = 0;
  }
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  if (a3)
  {
    v20 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 48))(a3, v19);
    if (!a4)
      goto LABEL_16;
  }
  else
  {
    v20 = 0;
    if (!a4)
      goto LABEL_16;
  }
  v13 = (unint64_t *)&a4->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
  }
LABEL_16:
  v15 = md::setupSharedStylingParameters(a1, a2, (uint64_t)&v17, a5, a6);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v17);
  return v15;
}

void sub_19F999184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  v16 = a15;
  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = a13;
  if (a13)
  {
    v20 = (unint64_t *)&a13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19F999208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL md::setupSharedStylingParameters(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __n128 a5)
{
  float v5;
  uint16x4_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  float v18;
  float v19;
  __int128 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unint64_t v32;
  unsigned int v33;
  float *v34;
  float v35;
  _BOOL4 v36;
  unint64_t v42;
  unsigned int v43;
  float *v44;
  float v45;
  _BOOL4 v46;
  unint64_t v48;
  unsigned int v49;
  float *v50;
  float v51;
  _BOOL4 v52;
  unint64_t v54;
  unsigned int v55;
  float *v56;
  float v57;
  _BOOL4 v58;
  unsigned int v60;
  float v61;
  float v62;
  _BOOL4 v63;
  unsigned int v65;
  float v66;
  float v67;
  _BOOL4 v68;
  unsigned int v70;
  float v71;
  float v72;
  _BOOL4 v73;
  unsigned int v75;
  float v76;
  float v77;
  _BOOL4 v78;
  _BOOL4 v80;
  _BOOL4 v82;
  _BOOL4 v84;
  _BOOL4 v86;
  unsigned int v88;
  float v89;
  float v90;
  float v91;
  unsigned int v92;
  float v93;
  float v94;
  float v95;
  unsigned int v96;
  float v97;
  float v98;
  float v99;
  unsigned int v100;
  float v101;
  float v102;
  float v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  unint64_t v113;
  float *v114;
  float v115;
  _BOOL4 v116;
  unsigned int v118;
  float v119;
  float v120;
  _BOOL4 v121;
  _BOOL4 v122;
  unsigned int v123;
  float v124;
  float v125;
  float v126;
  unsigned int v127;
  float v128;
  float *v129;
  float v130;
  _BOOL4 v131;
  unsigned int v133;
  _BOOL4 v134;
  _BOOL4 v135;
  float v136;
  float v137;
  float *v138;
  float v139;
  _BOOL4 v140;
  unsigned int v142;
  _BOOL4 v143;
  _BOOL4 v144;
  float v145;
  float v146;
  float *v147;
  float v148;
  _BOOL4 v149;
  unsigned int v151;
  _BOOL4 v152;
  _BOOL4 v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v162;
  float v163;
  float v164;
  float v165;
  float32x4_t v166;
  uint16x4_t v167[2];
  unint64_t v168;
  std::__shared_weak_count *v169;
  _QWORD v170[2];
  unsigned __int8 v171;
  char v172;

  v10 = *(uint16x4_t *)(a1 + 112);
  v11 = *(std::__shared_weak_count **)(a1 + 120);
  v167[0] = v10;
  v167[1] = (uint16x4_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v169 = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  else
  {
    v169 = 0;
  }
  v170[0] = 0;
  v170[1] = 0;
  v168 = (unint64_t)v10;
  v171 = 0;
  if (v10)
    v10.i32[0] = (*(uint64_t (**)(uint16x4_t, _QWORD *))(**(_QWORD **)&v10 + 48))(v10, v170);
  v171 = v10.i8[0];
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v10.i32[0] = v171;
  }
  if (v10.i32[0])
  {
    v17 = *(unsigned __int8 *)(a1 + 12);
    v18 = (float)(char)v17;
    switch(a4)
    {
      case 0:
        v19 = fminf(fmaxf(v18, 0.0), 23.0);
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v167, *(_QWORD *)(v168 + 24), 0x2Bu, 2u, v19);
        v166 = (float32x4_t)vdupq_n_s32(0x37800080u);
        *(float32x4_t *)(a2 + 20) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v167[0])), v166);
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v167, *(_QWORD *)(v168 + 24), 0x2Cu, 2u, v19);
        goto LABEL_25;
      case 1:
        v21 = fminf(fmaxf(v18, 0.0), 23.0);
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v167, *(_QWORD *)(v168 + 24), 0x36u, 2u, v21);
        v166 = (float32x4_t)vdupq_n_s32(0x37800080u);
        *(float32x4_t *)(a2 + 20) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v167[0])), v166);
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v167, *(_QWORD *)(v168 + 24), 0x37u, 2u, v21);
        goto LABEL_25;
      case 2:
        v22 = fminf(fmaxf(v18, 0.0), 23.0);
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v167, *(_QWORD *)(v168 + 24), 0x41u, 2u, v22);
        v166 = (float32x4_t)vdupq_n_s32(0x37800080u);
        *(float32x4_t *)(a2 + 20) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v167[0])), v166);
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v167, *(_QWORD *)(v168 + 24), 0x42u, 2u, v22);
        goto LABEL_25;
      case 3:
        v23 = fminf(fmaxf(v18, 0.0), 23.0);
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v167, *(_QWORD *)(v168 + 24), 0x4Cu, 2u, v23);
        v166 = (float32x4_t)vdupq_n_s32(0x37800080u);
        *(float32x4_t *)(a2 + 20) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v167[0])), v166);
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v167, *(_QWORD *)(v168 + 24), 0x4Du, 2u, v23);
LABEL_25:
        a5 = (__n128)vmulq_f32(vcvtq_f32_u32(vmovl_u16(v167[0])), v166);
        break;
      default:
        break;
    }
    *(__n128 *)(a2 + 36) = a5;
    md::trafficWidthForSpeedAtZ((unint64_t)&v168, a4, v18);
    v25 = v24;
    md::trafficSecondaryWidthForSpeedAtZ(v168, a4, v18);
    v27 = v26;
    md::trafficMinWidthForSpeedAtZ((unint64_t)&v168, a4, v18);
    v29 = v28;
    md::trafficMaxWidthForSpeedAtZ((unint64_t)&v168, a4, v18);
    v31 = v30;
    switch(a4)
    {
      case 0:
        v32 = *(_QWORD *)(v168 + 24);
        if (v17 >= 0x17)
          v33 = 23;
        else
          v33 = v17;
        v34 = *(float **)v32;
        if (*(_QWORD *)v32)
        {
          v35 = *v34;
          v36 = *v34 == 1.0;
          if (*(_BYTE *)(v32 + 10))
          {
            if (v35 != 0.0 && v35 != 1.0)
            {
LABEL_76:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v168 + 24), 0x32u, v33, 0) & 1) != 0)
              {
LABEL_79:
                v61 = fminf(fmaxf(v18, 0.0), 23.0);
                if (v34)
                {
                  v62 = *v34;
                  v63 = *v34 == 1.0;
                  if (*(_BYTE *)(v32 + 10))
                  {
                    if (v62 != 0.0 && v62 != 1.0)
                      goto LABEL_160;
                  }
                }
                else
                {
                  v63 = 0;
                }
                v88 = *(unsigned __int8 *)(v32 + v63 + 11);
                v62 = 0.0;
                if (v88 == 2)
                {
LABEL_160:
                  v167[0].i8[0] = 1;
                  v172 = 1;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v32, 0x32u, 0, (BOOL *)v167, v61);
                  v90 = v89;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v32, 0x32u, 1u, (BOOL *)&v172, v61);
LABEL_177:
                  v5 = v90 + (float)((float)(v91 - v90) * v62);
                  goto LABEL_192;
                }
                v104 = 50;
LABEL_191:
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v32, v104, v88, 0, v61);
                v5 = v112;
LABEL_192:
                v113 = *(_QWORD *)(v168 + 24);
                v114 = *(float **)v113;
                if (*(_QWORD *)v113)
                {
                  v115 = *v114;
                  v116 = *v114 == 1.0;
                  if (*(_BYTE *)(v113 + 10))
                  {
                    if (v115 != 0.0 && v115 != 1.0)
                      goto LABEL_202;
                  }
                }
                else
                {
                  v116 = 0;
                }
                v118 = *(unsigned __int8 *)(v113 + v116 + 11);
                if (v118 != 2)
                {
LABEL_204:
                  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v113, 0x34u, v33, v118))
                    goto LABEL_205;
                  v119 = fminf(fmaxf(v18, 0.0), 23.0);
                  if (v114)
                  {
                    v120 = *v114;
                    v122 = *v114 == 1.0;
                    if (*(_BYTE *)(v113 + 10) && v120 != 0.0 && v120 != 1.0)
                      goto LABEL_317;
                  }
                  else
                  {
                    v122 = 0;
                  }
                  v123 = *(unsigned __int8 *)(v113 + v122 + 11);
                  v120 = 0.0;
                  if (v123 == 2)
                  {
LABEL_317:
                    v167[0].i8[0] = 1;
                    v172 = 1;
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x117u, 0, (BOOL *)v167, v119);
                    v125 = v155;
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x117u, 1u, (BOOL *)&v172, v119);
                    goto LABEL_318;
                  }
                  v127 = 279;
LABEL_323:
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, v127, v123, 0, v119);
                  v18 = v156;
                  goto LABEL_324;
                }
LABEL_202:
                if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v168 + 24), 0x34u, v33, 0) & 1) != 0)
                {
LABEL_205:
                  v119 = fminf(fmaxf(v18, 0.0), 23.0);
                  if (v114)
                  {
                    v120 = *v114;
                    v121 = *v114 == 1.0;
                    if (*(_BYTE *)(v113 + 10) && v120 != 0.0 && v120 != 1.0)
                      goto LABEL_217;
                  }
                  else
                  {
                    v121 = 0;
                  }
                  v123 = *(unsigned __int8 *)(v113 + v121 + 11);
                  v120 = 0.0;
                  if (v123 == 2)
                  {
LABEL_217:
                    v167[0].i8[0] = 1;
                    v172 = 1;
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x34u, 0, (BOOL *)v167, v119);
                    v125 = v124;
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x34u, 1u, (BOOL *)&v172, v119);
                    goto LABEL_318;
                  }
                  v127 = 52;
                  goto LABEL_323;
                }
                v118 = 1;
                goto LABEL_204;
              }
              v60 = 1;
LABEL_78:
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v32, 0x32u, v33, v60))
                goto LABEL_79;
              v61 = fminf(fmaxf(v18, 0.0), 23.0);
              if (v34)
              {
                v62 = *v34;
                v80 = *v34 == 1.0;
                if (*(_BYTE *)(v32 + 10))
                {
                  if (v62 != 0.0 && v62 != 1.0)
                    goto LABEL_176;
                }
              }
              else
              {
                v80 = 0;
              }
              v88 = *(unsigned __int8 *)(v32 + v80 + 11);
              v62 = 0.0;
              if (v88 != 2)
              {
                v104 = 271;
                goto LABEL_191;
              }
LABEL_176:
              v167[0].i8[0] = 1;
              v172 = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v32, 0x10Fu, 0, (BOOL *)v167, v61);
              v90 = v108;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v32, 0x10Fu, 1u, (BOOL *)&v172, v61);
              goto LABEL_177;
            }
          }
        }
        else
        {
          v36 = 0;
        }
        v60 = *(unsigned __int8 *)(v32 + v36 + 11);
        if (v60 != 2)
          goto LABEL_78;
        goto LABEL_76;
      case 1:
        v42 = *(_QWORD *)(v168 + 24);
        if (v17 >= 0x17)
          v43 = 23;
        else
          v43 = v17;
        v44 = *(float **)v42;
        if (*(_QWORD *)v42)
        {
          v45 = *v44;
          v46 = *v44 == 1.0;
          if (*(_BYTE *)(v42 + 10))
          {
            if (v45 != 0.0 && v45 != 1.0)
            {
LABEL_89:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v168 + 24), 0x3Du, v43, 0) & 1) != 0)
              {
LABEL_92:
                v66 = fminf(fmaxf(v18, 0.0), 23.0);
                if (v44)
                {
                  v67 = *v44;
                  v68 = *v44 == 1.0;
                  if (*(_BYTE *)(v42 + 10))
                  {
                    if (v67 != 0.0 && v67 != 1.0)
                      goto LABEL_163;
                  }
                }
                else
                {
                  v68 = 0;
                }
                v92 = *(unsigned __int8 *)(v42 + v68 + 11);
                v67 = 0.0;
                if (v92 == 2)
                {
LABEL_163:
                  v167[0].i8[0] = 1;
                  v172 = 1;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v42, 0x3Du, 0, (BOOL *)v167, v66);
                  v94 = v93;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v42, 0x3Du, 1u, (BOOL *)&v172, v66);
LABEL_181:
                  v5 = v94 + (float)((float)(v95 - v94) * v67);
                  goto LABEL_224;
                }
                v105 = 61;
LABEL_223:
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v42, v105, v92, 0, v66);
                v5 = v128;
LABEL_224:
                v113 = *(_QWORD *)(v168 + 24);
                v129 = *(float **)v113;
                if (*(_QWORD *)v113)
                {
                  v130 = *v129;
                  v131 = *v129 == 1.0;
                  if (*(_BYTE *)(v113 + 10))
                  {
                    if (v130 != 0.0 && v130 != 1.0)
                    {
LABEL_234:
                      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v168 + 24), 0x3Fu, v43, 0) & 1) != 0)goto LABEL_237;
                      v133 = 1;
LABEL_236:
                      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v113, 0x3Fu, v43, v133))
                      {
                        v119 = fminf(fmaxf(v18, 0.0), 23.0);
                        if (v129)
                        {
                          v120 = *v129;
                          v135 = *v129 == 1.0;
                          if (*(_BYTE *)(v113 + 10) && v120 != 0.0 && v120 != 1.0)
                            goto LABEL_317;
                        }
                        else
                        {
                          v135 = 0;
                        }
                        v123 = *(unsigned __int8 *)(v113 + v135 + 11);
                        v120 = 0.0;
                        if (v123 == 2)
                          goto LABEL_317;
                        v127 = 279;
                        goto LABEL_323;
                      }
LABEL_237:
                      v119 = fminf(fmaxf(v18, 0.0), 23.0);
                      if (v129)
                      {
                        v120 = *v129;
                        v134 = *v129 == 1.0;
                        if (*(_BYTE *)(v113 + 10) && v120 != 0.0 && v120 != 1.0)
                        {
LABEL_249:
                          v167[0].i8[0] = 1;
                          v172 = 1;
                          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x3Fu, 0, (BOOL *)v167, v119);
                          v125 = v136;
                          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x3Fu, 1u, (BOOL *)&v172, v119);
LABEL_318:
                          v18 = v125 + (float)((float)(v126 - v125) * v120);
                          goto LABEL_324;
                        }
                      }
                      else
                      {
                        v134 = 0;
                      }
                      v123 = *(unsigned __int8 *)(v113 + v134 + 11);
                      v120 = 0.0;
                      if (v123 != 2)
                      {
                        v127 = 63;
                        goto LABEL_323;
                      }
                      goto LABEL_249;
                    }
                  }
                }
                else
                {
                  v131 = 0;
                }
                v133 = *(unsigned __int8 *)(v113 + v131 + 11);
                if (v133 != 2)
                  goto LABEL_236;
                goto LABEL_234;
              }
              v65 = 1;
LABEL_91:
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v42, 0x3Du, v43, v65))
                goto LABEL_92;
              v66 = fminf(fmaxf(v18, 0.0), 23.0);
              if (v44)
              {
                v67 = *v44;
                v82 = *v44 == 1.0;
                if (*(_BYTE *)(v42 + 10))
                {
                  if (v67 != 0.0 && v67 != 1.0)
                    goto LABEL_180;
                }
              }
              else
              {
                v82 = 0;
              }
              v92 = *(unsigned __int8 *)(v42 + v82 + 11);
              v67 = 0.0;
              if (v92 != 2)
              {
                v105 = 271;
                goto LABEL_223;
              }
LABEL_180:
              v167[0].i8[0] = 1;
              v172 = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v42, 0x10Fu, 0, (BOOL *)v167, v66);
              v94 = v109;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v42, 0x10Fu, 1u, (BOOL *)&v172, v66);
              goto LABEL_181;
            }
          }
        }
        else
        {
          v46 = 0;
        }
        v65 = *(unsigned __int8 *)(v42 + v46 + 11);
        if (v65 != 2)
          goto LABEL_91;
        goto LABEL_89;
      case 2:
        v48 = *(_QWORD *)(v168 + 24);
        if (v17 >= 0x17)
          v49 = 23;
        else
          v49 = v17;
        v50 = *(float **)v48;
        if (*(_QWORD *)v48)
        {
          v51 = *v50;
          v52 = *v50 == 1.0;
          if (*(_BYTE *)(v48 + 10))
          {
            if (v51 != 0.0 && v51 != 1.0)
            {
LABEL_102:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v168 + 24), 0x48u, v49, 0) & 1) != 0)
              {
LABEL_105:
                v71 = fminf(fmaxf(v18, 0.0), 23.0);
                if (v50)
                {
                  v72 = *v50;
                  v73 = *v50 == 1.0;
                  if (*(_BYTE *)(v48 + 10))
                  {
                    if (v72 != 0.0 && v72 != 1.0)
                      goto LABEL_166;
                  }
                }
                else
                {
                  v73 = 0;
                }
                v96 = *(unsigned __int8 *)(v48 + v73 + 11);
                v72 = 0.0;
                if (v96 == 2)
                {
LABEL_166:
                  v167[0].i8[0] = 1;
                  v172 = 1;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v48, 0x48u, 0, (BOOL *)v167, v71);
                  v98 = v97;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v48, 0x48u, 1u, (BOOL *)&v172, v71);
LABEL_185:
                  v5 = v98 + (float)((float)(v99 - v98) * v72);
                  goto LABEL_256;
                }
                v106 = 72;
LABEL_255:
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v48, v106, v96, 0, v71);
                v5 = v137;
LABEL_256:
                v113 = *(_QWORD *)(v168 + 24);
                v138 = *(float **)v113;
                if (*(_QWORD *)v113)
                {
                  v139 = *v138;
                  v140 = *v138 == 1.0;
                  if (*(_BYTE *)(v113 + 10))
                  {
                    if (v139 != 0.0 && v139 != 1.0)
                    {
LABEL_266:
                      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v168 + 24), 0x4Au, v49, 0) & 1) != 0)goto LABEL_269;
                      v142 = 1;
LABEL_268:
                      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v113, 0x4Au, v49, v142))
                      {
                        v119 = fminf(fmaxf(v18, 0.0), 23.0);
                        if (v138)
                        {
                          v120 = *v138;
                          v144 = *v138 == 1.0;
                          if (*(_BYTE *)(v113 + 10) && v120 != 0.0 && v120 != 1.0)
                            goto LABEL_317;
                        }
                        else
                        {
                          v144 = 0;
                        }
                        v123 = *(unsigned __int8 *)(v113 + v144 + 11);
                        v120 = 0.0;
                        if (v123 == 2)
                          goto LABEL_317;
                        v127 = 279;
                        goto LABEL_323;
                      }
LABEL_269:
                      v119 = fminf(fmaxf(v18, 0.0), 23.0);
                      if (v138)
                      {
                        v120 = *v138;
                        v143 = *v138 == 1.0;
                        if (*(_BYTE *)(v113 + 10) && v120 != 0.0 && v120 != 1.0)
                        {
LABEL_281:
                          v167[0].i8[0] = 1;
                          v172 = 1;
                          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x4Au, 0, (BOOL *)v167, v119);
                          v125 = v145;
                          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x4Au, 1u, (BOOL *)&v172, v119);
                          goto LABEL_318;
                        }
                      }
                      else
                      {
                        v143 = 0;
                      }
                      v123 = *(unsigned __int8 *)(v113 + v143 + 11);
                      v120 = 0.0;
                      if (v123 != 2)
                      {
                        v127 = 74;
                        goto LABEL_323;
                      }
                      goto LABEL_281;
                    }
                  }
                }
                else
                {
                  v140 = 0;
                }
                v142 = *(unsigned __int8 *)(v113 + v140 + 11);
                if (v142 != 2)
                  goto LABEL_268;
                goto LABEL_266;
              }
              v70 = 1;
LABEL_104:
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v48, 0x48u, v49, v70))
                goto LABEL_105;
              v71 = fminf(fmaxf(v18, 0.0), 23.0);
              if (v50)
              {
                v72 = *v50;
                v84 = *v50 == 1.0;
                if (*(_BYTE *)(v48 + 10))
                {
                  if (v72 != 0.0 && v72 != 1.0)
                    goto LABEL_184;
                }
              }
              else
              {
                v84 = 0;
              }
              v96 = *(unsigned __int8 *)(v48 + v84 + 11);
              v72 = 0.0;
              if (v96 != 2)
              {
                v106 = 271;
                goto LABEL_255;
              }
LABEL_184:
              v167[0].i8[0] = 1;
              v172 = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v48, 0x10Fu, 0, (BOOL *)v167, v71);
              v98 = v110;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v48, 0x10Fu, 1u, (BOOL *)&v172, v71);
              goto LABEL_185;
            }
          }
        }
        else
        {
          v52 = 0;
        }
        v70 = *(unsigned __int8 *)(v48 + v52 + 11);
        if (v70 != 2)
          goto LABEL_104;
        goto LABEL_102;
      case 3:
        v54 = *(_QWORD *)(v168 + 24);
        if (v17 >= 0x17)
          v55 = 23;
        else
          v55 = v17;
        v56 = *(float **)v54;
        if (*(_QWORD *)v54)
        {
          v57 = *v56;
          v58 = *v56 == 1.0;
          if (*(_BYTE *)(v54 + 10))
          {
            if (v57 != 0.0 && v57 != 1.0)
            {
LABEL_115:
              if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v168 + 24), 0x53u, v55, 0) & 1) != 0)
              {
LABEL_118:
                v76 = fminf(fmaxf(v18, 0.0), 23.0);
                if (v56)
                {
                  v77 = *v56;
                  v78 = *v56 == 1.0;
                  if (*(_BYTE *)(v54 + 10))
                  {
                    if (v77 != 0.0 && v77 != 1.0)
                      goto LABEL_169;
                  }
                }
                else
                {
                  v78 = 0;
                }
                v100 = *(unsigned __int8 *)(v54 + v78 + 11);
                v77 = 0.0;
                if (v100 == 2)
                {
LABEL_169:
                  v167[0].i8[0] = 1;
                  v172 = 1;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v54, 0x53u, 0, (BOOL *)v167, v76);
                  v102 = v101;
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v54, 0x53u, 1u, (BOOL *)&v172, v76);
LABEL_189:
                  v5 = v102 + (float)((float)(v103 - v102) * v77);
                  goto LABEL_288;
                }
                v107 = 83;
LABEL_287:
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v54, v107, v100, 0, v76);
                v5 = v146;
LABEL_288:
                v113 = *(_QWORD *)(v168 + 24);
                v147 = *(float **)v113;
                if (*(_QWORD *)v113)
                {
                  v148 = *v147;
                  v149 = *v147 == 1.0;
                  if (*(_BYTE *)(v113 + 10))
                  {
                    if (v148 != 0.0 && v148 != 1.0)
                    {
LABEL_298:
                      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v168 + 24), 0x55u, v55, 0) & 1) != 0)goto LABEL_301;
                      v151 = 1;
LABEL_300:
                      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v113, 0x55u, v55, v151))
                      {
                        v119 = fminf(fmaxf(v18, 0.0), 23.0);
                        if (v147)
                        {
                          v120 = *v147;
                          v153 = *v147 == 1.0;
                          if (*(_BYTE *)(v113 + 10) && v120 != 0.0 && v120 != 1.0)
                            goto LABEL_317;
                        }
                        else
                        {
                          v153 = 0;
                        }
                        v123 = *(unsigned __int8 *)(v113 + v153 + 11);
                        v120 = 0.0;
                        if (v123 == 2)
                          goto LABEL_317;
                        v127 = 279;
                        goto LABEL_323;
                      }
LABEL_301:
                      v119 = fminf(fmaxf(v18, 0.0), 23.0);
                      if (v147)
                      {
                        v120 = *v147;
                        v152 = *v147 == 1.0;
                        if (*(_BYTE *)(v113 + 10) && v120 != 0.0 && v120 != 1.0)
                        {
LABEL_313:
                          v167[0].i8[0] = 1;
                          v172 = 1;
                          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x55u, 0, (BOOL *)v167, v119);
                          v125 = v154;
                          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v113, 0x55u, 1u, (BOOL *)&v172, v119);
                          goto LABEL_318;
                        }
                      }
                      else
                      {
                        v152 = 0;
                      }
                      v123 = *(unsigned __int8 *)(v113 + v152 + 11);
                      v120 = 0.0;
                      if (v123 != 2)
                      {
                        v127 = 85;
                        goto LABEL_323;
                      }
                      goto LABEL_313;
                    }
                  }
                }
                else
                {
                  v149 = 0;
                }
                v151 = *(unsigned __int8 *)(v113 + v149 + 11);
                if (v151 != 2)
                  goto LABEL_300;
                goto LABEL_298;
              }
              v75 = 1;
LABEL_117:
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v54, 0x53u, v55, v75))
                goto LABEL_118;
              v76 = fminf(fmaxf(v18, 0.0), 23.0);
              if (v56)
              {
                v77 = *v56;
                v86 = *v56 == 1.0;
                if (*(_BYTE *)(v54 + 10))
                {
                  if (v77 != 0.0 && v77 != 1.0)
                    goto LABEL_188;
                }
              }
              else
              {
                v86 = 0;
              }
              v100 = *(unsigned __int8 *)(v54 + v86 + 11);
              v77 = 0.0;
              if (v100 != 2)
              {
                v107 = 271;
                goto LABEL_287;
              }
LABEL_188:
              v167[0].i8[0] = 1;
              v172 = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v54, 0x10Fu, 0, (BOOL *)v167, v76);
              v102 = v111;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v54, 0x10Fu, 1u, (BOOL *)&v172, v76);
              goto LABEL_189;
            }
          }
        }
        else
        {
          v58 = 0;
        }
        v75 = *(unsigned __int8 *)(v54 + v58 + 11);
        if (v75 != 2)
          goto LABEL_117;
        goto LABEL_115;
      default:
        goto LABEL_324;
    }
  }
  if (a4 == 3)
  {
    v20 = xmmword_19FFB4E80;
  }
  else if (a4 == 2)
  {
    v20 = xmmword_19FFB4E70;
  }
  else
  {
    v20 = xmmword_19FFB4E60;
  }
  *(_DWORD *)(a2 + 28) = DWORD2(v20);
  *(_QWORD *)(a2 + 20) = v20;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a2 + 32) = _Q0;
  *(_DWORD *)(a2 + 48) = 1065353216;
  v5 = 1.0;
  v29 = 4.0;
  v25 = 0.375;
  v31 = 3.4028e38;
  v27 = 0.1;
  v18 = 3.4028e38;
LABEL_324:
  v157 = 0.0;
  v158 = fmaxf(15.0 - *(float *)(a1 + 8), 0.0);
  if (v158 <= 4.0)
    v159 = (float)(v158 * -0.25) + 1.0;
  else
    v159 = 0.0;
  *(float *)a2 = v159;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v168);
  v160 = *(float *)(a1 + 152);
  if (v160 <= 0.0)
  {
    LODWORD(v168) = 0;
    if (*(_BYTE *)(a3 + 32))
    {
      v167[0].i32[0] = 0;
      md::getRoadWidths(a3, (float *)&v168, (float *)v167, &v172, *(float *)(a1 + 8));
      v157 = *(float *)&v168;
    }
    v162 = fminf(fmaxf(v157 * v25, v29), v31);
    v163 = fmaxf((float)(v162 + v157) * 0.16667, (float)(v162 * 0.5) + 0.5);
    v164 = fmaxf(v5, v157 * v27);
    v165 = fminf(v18, v164);
    if (v18 > 0.0)
      v164 = v165;
    *(float *)(a2 + 4) = v162;
    *(float *)(a2 + 8) = v164;
    *(float *)(a2 + 12) = v163;
    return v162 >= *(float *)(a1 + 60);
  }
  else
  {
    *(_DWORD *)(a2 + 12) = 0;
    *(float *)(a2 + 4) = v160 * v25;
    *(float *)(a2 + 8) = v160 * v27;
    return 1;
  }
}

void sub_19F99A5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t md::trafficMinWidthForSpeedAtZ(unint64_t result, int a2, float a3)
{
  unint64_t v4;
  unsigned int v5;
  float *v6;
  float v7;
  _BOOL4 v8;
  unsigned int v10;
  float v11;
  _BOOL4 v12;
  unsigned int v14;
  float v15;
  _BOOL4 v16;
  unsigned int v18;
  float v19;
  _BOOL4 v20;
  unsigned int v22;
  float v23;
  float v24;
  _BOOL4 v25;
  unsigned int v27;
  float v28;
  _BOOL4 v29;
  unsigned int v31;
  float v32;
  _BOOL4 v33;
  unsigned int v35;
  float v36;
  _BOOL4 v37;
  float v39;
  _BOOL4 v40;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  char v47;
  char v48;

  switch(a2)
  {
    case 0:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v5 = 23;
      else
        v5 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v7 = *v6;
        v8 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v7 != 0.0 && v7 != 1.0)
            goto LABEL_48;
        }
      }
      else
      {
        v8 = 0;
      }
      v22 = *(unsigned __int8 *)(v4 + v8 + 11);
      if (v22 != 2)
        goto LABEL_50;
LABEL_48:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x31u, v5, 0) & 1) != 0)goto LABEL_51;
      v22 = 1;
LABEL_50:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x31u, v5, v22))
        goto LABEL_98;
LABEL_51:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v24 = *v6;
        v25 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v24 != 0.0 && v24 != 1.0)
            goto LABEL_112;
        }
      }
      else
      {
        v25 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v25 + 11);
      if (v42 == 2)
      {
LABEL_112:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x31u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 49;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 49;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 1:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v10 = 23;
      else
        v10 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v11 = *v6;
        v12 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v11 != 0.0 && v11 != 1.0)
            goto LABEL_61;
        }
      }
      else
      {
        v12 = 0;
      }
      v27 = *(unsigned __int8 *)(v4 + v12 + 11);
      if (v27 != 2)
        goto LABEL_63;
LABEL_61:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x3Cu, v10, 0) & 1) != 0)goto LABEL_64;
      v27 = 1;
LABEL_63:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x3Cu, v10, v27))
        goto LABEL_98;
LABEL_64:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v28 = *v6;
        v29 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v28 != 0.0 && v28 != 1.0)
            goto LABEL_115;
        }
      }
      else
      {
        v29 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v29 + 11);
      if (v42 == 2)
      {
LABEL_115:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x3Cu, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 60;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 60;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 2:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v14 = 23;
      else
        v14 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v15 = *v6;
        v16 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v15 != 0.0 && v15 != 1.0)
            goto LABEL_74;
        }
      }
      else
      {
        v16 = 0;
      }
      v31 = *(unsigned __int8 *)(v4 + v16 + 11);
      if (v31 != 2)
        goto LABEL_76;
LABEL_74:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x47u, v14, 0) & 1) != 0)goto LABEL_77;
      v31 = 1;
LABEL_76:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x47u, v14, v31))
        goto LABEL_98;
LABEL_77:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v32 = *v6;
        v33 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v32 != 0.0 && v32 != 1.0)
            goto LABEL_118;
        }
      }
      else
      {
        v33 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v33 + 11);
      if (v42 == 2)
      {
LABEL_118:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x47u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 71;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 71;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 3:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v18 = 23;
      else
        v18 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v19 = *v6;
        v20 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v19 != 0.0 && v19 != 1.0)
            goto LABEL_87;
        }
      }
      else
      {
        v20 = 0;
      }
      v35 = *(unsigned __int8 *)(v4 + v20 + 11);
      if (v35 != 2)
        goto LABEL_89;
LABEL_87:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x52u, v18, 0) & 1) != 0)goto LABEL_90;
      v35 = 1;
LABEL_89:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x52u, v18, v35))
      {
LABEL_98:
        v23 = fminf(fmaxf(a3, 0.0), 23.0);
        if (v6)
        {
          v39 = *v6;
          v40 = *v6 == 1.0;
          if (*(_BYTE *)(v4 + 10))
          {
            if (v39 != 0.0 && v39 != 1.0)
            {
LABEL_108:
              v48 = 1;
              v47 = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x10Eu, 0, (BOOL *)&v48, v23);
              v43 = v4;
              v44 = 270;
              return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
            }
          }
        }
        else
        {
          v40 = 0;
        }
        v42 = *(unsigned __int8 *)(v4 + v40 + 11);
        if (v42 != 2)
        {
          v45 = v4;
          v46 = 270;
          return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
        }
        goto LABEL_108;
      }
LABEL_90:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v36 = *v6;
        v37 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v36 != 0.0 && v36 != 1.0)
            goto LABEL_121;
        }
      }
      else
      {
        v37 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v37 + 11);
      if (v42 == 2)
      {
LABEL_121:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x52u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 82;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 82;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    default:
      return result;
  }
}

unint64_t md::trafficMaxWidthForSpeedAtZ(unint64_t result, int a2, float a3)
{
  unint64_t v4;
  unsigned int v5;
  float *v6;
  float v7;
  _BOOL4 v8;
  unsigned int v10;
  float v11;
  _BOOL4 v12;
  unsigned int v14;
  float v15;
  _BOOL4 v16;
  unsigned int v18;
  float v19;
  _BOOL4 v20;
  unsigned int v22;
  float v23;
  float v24;
  _BOOL4 v25;
  unsigned int v27;
  float v28;
  _BOOL4 v29;
  unsigned int v31;
  float v32;
  _BOOL4 v33;
  unsigned int v35;
  float v36;
  _BOOL4 v37;
  float v39;
  _BOOL4 v40;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  char v47;
  char v48;

  switch(a2)
  {
    case 0:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v5 = 23;
      else
        v5 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v7 = *v6;
        v8 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v7 != 0.0 && v7 != 1.0)
            goto LABEL_48;
        }
      }
      else
      {
        v8 = 0;
      }
      v22 = *(unsigned __int8 *)(v4 + v8 + 11);
      if (v22 != 2)
        goto LABEL_50;
LABEL_48:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x33u, v5, 0) & 1) != 0)goto LABEL_51;
      v22 = 1;
LABEL_50:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x33u, v5, v22))
        goto LABEL_98;
LABEL_51:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v24 = *v6;
        v25 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v24 != 0.0 && v24 != 1.0)
            goto LABEL_112;
        }
      }
      else
      {
        v25 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v25 + 11);
      if (v42 == 2)
      {
LABEL_112:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x33u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 51;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 51;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 1:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v10 = 23;
      else
        v10 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v11 = *v6;
        v12 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v11 != 0.0 && v11 != 1.0)
            goto LABEL_61;
        }
      }
      else
      {
        v12 = 0;
      }
      v27 = *(unsigned __int8 *)(v4 + v12 + 11);
      if (v27 != 2)
        goto LABEL_63;
LABEL_61:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x3Eu, v10, 0) & 1) != 0)goto LABEL_64;
      v27 = 1;
LABEL_63:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x3Eu, v10, v27))
        goto LABEL_98;
LABEL_64:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v28 = *v6;
        v29 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v28 != 0.0 && v28 != 1.0)
            goto LABEL_115;
        }
      }
      else
      {
        v29 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v29 + 11);
      if (v42 == 2)
      {
LABEL_115:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x3Eu, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 62;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 62;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 2:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v14 = 23;
      else
        v14 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v15 = *v6;
        v16 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v15 != 0.0 && v15 != 1.0)
            goto LABEL_74;
        }
      }
      else
      {
        v16 = 0;
      }
      v31 = *(unsigned __int8 *)(v4 + v16 + 11);
      if (v31 != 2)
        goto LABEL_76;
LABEL_74:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x49u, v14, 0) & 1) != 0)goto LABEL_77;
      v31 = 1;
LABEL_76:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x49u, v14, v31))
        goto LABEL_98;
LABEL_77:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v32 = *v6;
        v33 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v32 != 0.0 && v32 != 1.0)
            goto LABEL_118;
        }
      }
      else
      {
        v33 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v33 + 11);
      if (v42 == 2)
      {
LABEL_118:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x49u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 73;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 73;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    case 3:
      v4 = *(_QWORD *)(*(_QWORD *)result + 24);
      if ((int)a3 >= 0x17)
        v18 = 23;
      else
        v18 = (int)a3;
      v6 = *(float **)v4;
      if (*(_QWORD *)v4)
      {
        v19 = *v6;
        v20 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v19 != 0.0 && v19 != 1.0)
            goto LABEL_87;
        }
      }
      else
      {
        v20 = 0;
      }
      v35 = *(unsigned __int8 *)(v4 + v20 + 11);
      if (v35 != 2)
        goto LABEL_89;
LABEL_87:
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)result + 24), 0x54u, v18, 0) & 1) != 0)goto LABEL_90;
      v35 = 1;
LABEL_89:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v4, 0x54u, v18, v35))
      {
LABEL_98:
        v23 = fminf(fmaxf(a3, 0.0), 23.0);
        if (v6)
        {
          v39 = *v6;
          v40 = *v6 == 1.0;
          if (*(_BYTE *)(v4 + 10))
          {
            if (v39 != 0.0 && v39 != 1.0)
            {
LABEL_108:
              v48 = 1;
              v47 = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x116u, 0, (BOOL *)&v48, v23);
              v43 = v4;
              v44 = 278;
              return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
            }
          }
        }
        else
        {
          v40 = 0;
        }
        v42 = *(unsigned __int8 *)(v4 + v40 + 11);
        if (v42 != 2)
        {
          v45 = v4;
          v46 = 278;
          return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
        }
        goto LABEL_108;
      }
LABEL_90:
      v23 = fminf(fmaxf(a3, 0.0), 23.0);
      if (v6)
      {
        v36 = *v6;
        v37 = *v6 == 1.0;
        if (*(_BYTE *)(v4 + 10))
        {
          if (v36 != 0.0 && v36 != 1.0)
            goto LABEL_121;
        }
      }
      else
      {
        v37 = 0;
      }
      v42 = *(unsigned __int8 *)(v4 + v37 + 11);
      if (v42 == 2)
      {
LABEL_121:
        v48 = 1;
        v47 = 1;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v4, 0x54u, 0, (BOOL *)&v48, v23);
        v43 = v4;
        v44 = 84;
        return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v43, v44, 1u, (BOOL *)&v47, v23);
      }
      v45 = v4;
      v46 = 84;
      return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v45, v46, v42, 0, v23);
    default:
      return result;
  }
}

void md::PilledTrafficLayer::setSharedResources(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;

  a1[19] = a2;
  v2 = a1[1];
  v3 = a1[2];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 152);
    v5 = *(_QWORD **)(*(_QWORD *)v2 + 312);
    v7 = *(_QWORD *)(v4 + 48);
    v6 = *(std::__shared_weak_count **)(v4 + 56);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    if (v7 && **(_QWORD **)(v7 + 40) == v5[1])
    {
      v13 = v5[2];
      if (v13)
        v14 = v13 == v7;
      else
        v14 = 1;
      if (!v14)
        ggl::PipelineSetup::resetData((uint64_t)v5);
      if (v6)
      {
        v15 = (unint64_t *)&v6->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v10 = (std::__shared_weak_count *)v5[3];
      v5[2] = v7;
      v5[3] = v6;
      if (!v10)
        goto LABEL_25;
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v17);
      while (__stlxr(v12 - 1, v17));
    }
    else
    {
      v10 = (std::__shared_weak_count *)v5[3];
      v5[2] = 0;
      v5[3] = 0;
      if (!v10)
        goto LABEL_25;
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
    }
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v6)
        goto LABEL_2;
      goto LABEL_26;
    }
LABEL_25:
    if (!v6)
      goto LABEL_2;
LABEL_26:
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
LABEL_2:
    v2 += 8;
  }
}

void md::PilledTrafficLayer::layout(md::PilledTrafficLayer *this, const md::TrafficContext *a2)
{
  float v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int8x8_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  float *v26;
  double v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t *v41;
  float v42;
  float v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t v47;
  float v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  float v53;
  int v54;
  int v55;
  __int128 *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  float *v66;
  float v67;
  BOOL v68;
  unsigned int v69;
  float v70;
  uint64_t v71;
  unsigned int v72;
  float *v73;
  float v74;
  BOOL v75;
  unsigned int v76;
  float v77;
  uint64_t v78;
  unsigned int v79;
  float *v80;
  float v81;
  BOOL v82;
  unsigned int v83;
  float v84;
  uint64_t v85;
  unsigned int v86;
  float *v87;
  float v88;
  BOOL v89;
  unsigned int v90;
  float v91;
  uint64_t v92;
  unsigned int v93;
  float *v94;
  float v95;
  BOOL v96;
  unsigned int v97;
  float v98;
  int *v99;
  uint64_t v100;
  unsigned int v101;
  float *v102;
  BOOL v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  float *v107;
  BOOL v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  float *v112;
  BOOL v113;
  unsigned int v114;
  int *v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  int v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  float v130;
  __int128 v131;
  unint64_t v132;
  unint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int128 **v136;
  float v137;
  int v138;
  __int128 v139;
  __int128 v140;
  char v141;
  _QWORD v142[2];
  __int128 *v143;
  std::__shared_weak_count *v144;
  _QWORD v145[2];
  unsigned __int8 v146;
  _BYTE v147[9];

  v5 = (_QWORD *)*((_QWORD *)this + 19);
  if (*((_BYTE *)a2 + 162))
  {
    v6 = v5 + 13;
    v7 = v5 + 14;
  }
  else
  {
    v6 = v5 + 9;
    if (*((_BYTE *)a2 + 56))
      v6 = v5 + 11;
    v8 = v5 + 10;
    v7 = v5 + 12;
    if (!*((_BYTE *)a2 + 56))
      v7 = v8;
  }
  if (*((_BYTE *)a2 + 160))
    v9 = v7;
  else
    v9 = v6;
  *((_QWORD *)this + 7) = *v9;
  v10 = *(_QWORD **)(*(_QWORD *)a2 + 8);
  v11 = (int8x8_t)v10[1];
  if (!*(_QWORD *)&v11)
    goto LABEL_38;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v11 <= 0x1AF456233693CD46uLL)
      v13 = 0x1AF456233693CD46uLL % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & 0x1AF456233693CD46;
  }
  v14 = *(_QWORD **)(*v10 + 8 * v13);
  if (!v14)
    goto LABEL_38;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_38;
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x1AF456233693CD46)
      {
        if (v15[2] == 0x1AF456233693CD46)
          goto LABEL_31;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_38;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_38;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x1AF456233693CD46)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_38;
LABEL_20:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_38;
  }
  if (v15[2] != 0x1AF456233693CD46)
    goto LABEL_20;
LABEL_31:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) != 0x1AF456233693CD46)
  {
LABEL_38:
    v19 = 0;
    if (MEMORY[0xEC0])
      goto LABEL_39;
LABEL_33:
    if ((*(_QWORD *)&v11 & (*(_QWORD *)&v11 - 1)) != 0)
    {
      v28 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v11 <= 0x8BD499FBD96FBB9ELL)
        v28 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v11;
      v20 = *(_QWORD **)(*v10 + 8 * v28);
      do
      {
        do
          v20 = (_QWORD *)*v20;
        while (v20[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v20[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v20 = *(_QWORD **)(*v10 + 8 * ((*(_QWORD *)&v11 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v20 = (_QWORD *)*v20;
        while (v20[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v20[2] != 0x8BD499FBD96FBB9ELL);
    }
    v29 = 0.0;
    if (**(_BYTE **)(v20[5] + 32) && *((_BYTE *)this + 104))
      v29 = *(double *)(v19 + 24) * 0.0000000249532021 * (double)(1 << *((_BYTE *)this + 81));
    v30 = *((_QWORD *)this + 14);
    if ((*(_BYTE *)(v30 + 16) & 2) == 0)
    {
      v31 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v31 != -1)
      {
        v136 = &v143;
        *(_QWORD *)&v131 = &v136;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v26 = *(float **)(v30 + 72);
    v27 = v29;
    goto LABEL_57;
  }
  v19 = *(_QWORD *)(v18 + 32);
  if (!*(_BYTE *)(v19 + 3776))
    goto LABEL_33;
LABEL_39:
  v21 = *((_QWORD *)this + 9);
  if (!v21)
  {
    v24 = *((_QWORD *)this + 14);
    if ((*(_BYTE *)(v24 + 16) & 2) == 0)
    {
      v25 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v25 != -1)
      {
        v136 = &v143;
        *(_QWORD *)&v131 = &v136;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v26 = *(float **)(v24 + 72);
    v27 = 0.0;
LABEL_57:
    v22 = ggl::CullingGrid::intersectedCellsForView(v26, v27);
    goto LABEL_58;
  }
  v22 = gdc::GlobeTileGrid::intersectWithFrustum(v21, (const double *)(v19 + 984), *(double *)(v19 + 24));
LABEL_58:
  v32 = (uint64_t *)*((_QWORD *)this + 1);
  v33 = (uint64_t *)*((_QWORD *)this + 2);
  if (v32 != v33)
  {
    do
    {
      v35 = *v32;
      v36 = *(uint64_t **)(*v32 + 248);
      v37 = *(uint64_t **)(*v32 + 256);
      if (v36 == v37)
      {
        v34 = 0;
      }
      else
      {
        v34 = 0;
        do
        {
          v38 = *v36++;
          v39 = (*(_DWORD *)(v38 + 96) & v22) != 0;
          v34 |= v39;
          *(_BYTE *)(v38 + 48) = v39;
        }
        while (v36 != v37);
      }
      *(_BYTE *)(v35 + 136) = v34 & 1;
      *(_BYTE *)(v35 + 272) = v34 & 1;
      ++v32;
    }
    while (v32 != v33);
    v41 = (uint64_t *)*((_QWORD *)this + 1);
    v40 = (uint64_t *)*((_QWORD *)this + 2);
    if (v41 != v40)
    {
      v42 = 1.0;
      v43 = 0.5;
      do
      {
        v44 = *v41;
        if (*(_BYTE *)(*v41 + 272))
        {
          v141 = 0;
          v45 = md::setupSharedStylingParameters((uint64_t)a2, (uint64_t)&v136, *(_QWORD *)(v44 + 280), *(std::__shared_weak_count **)(v44 + 288), *(unsigned __int8 *)(v44 + 300), v23);
          *(_BYTE *)(v44 + 272) = v45;
          if (v45)
          {
            v46 = **(_QWORD **)(*(_QWORD *)(v44 + 312) + 64);
            if ((*(_BYTE *)(v46 + 16) & 2) == 0)
            {
              v47 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
              if (v47 != -1)
              {
                *(_QWORD *)&v131 = v142;
                v143 = &v131;
                std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v143, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              }
            }
            v48 = *(float *)(*(_QWORD *)(v46 + 72) + 64);
            v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 312) + 64) + 32);
            v131 = 0uLL;
            v50 = *(_QWORD *)(v49 + 8);
            *(_QWORD *)&v51 = 0;
            *((_QWORD *)&v51 + 1) = v49;
            v52 = *(_QWORD *)(v49 + 72);
            v131 = v51;
            v132 = 0;
            v133 = v50;
            v135 = v52;
            v134 = 1;
            if (*((_BYTE *)a2 + 161))
              v53 = v42;
            else
              v53 = 0.0;
            v54 = *(unsigned __int8 *)(v44 + 300);
            v55 = (int)v136;
            *(_DWORD *)(v52 + 80) = v138;
            *(_DWORD *)(v52 + 68) = v55;
            v56 = (__int128 *)*((_QWORD *)a2 + 14);
            v57 = (std::__shared_weak_count *)*((_QWORD *)a2 + 15);
            v142[0] = v56;
            v142[1] = v57;
            if (v57)
            {
              p_shared_owners = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldxr(p_shared_owners);
              while (__stxr(v59 + 1, p_shared_owners));
              v144 = v57;
              do
                v60 = __ldxr(p_shared_owners);
              while (__stxr(v60 + 1, p_shared_owners));
            }
            else
            {
              v144 = 0;
            }
            v143 = v56;
            v145[0] = 0;
            v145[1] = 0;
            v146 = 0;
            if (v56)
              LODWORD(v56) = (*(uint64_t (**)(__int128 *, _QWORD *))(*(_QWORD *)v56 + 48))(v56, v145);
            v146 = v56;
            if (v57)
            {
              v61 = (unint64_t *)&v57->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
              LODWORD(v56) = v146;
            }
            v130 = v48;
            if ((_DWORD)v56)
            {
              v63 = *((unsigned __int8 *)a2 + 12);
              switch(v54)
              {
                case 0:
                  v64 = *((_QWORD *)v143 + 3);
                  if (v63 >= 0x17)
                    v65 = 23;
                  else
                    v65 = *((unsigned __int8 *)a2 + 12);
                  v66 = *(float **)v64;
                  if (*(_QWORD *)v64
                    && (v67 = *v66, LODWORD(v66) = *v66 == v42, *(_BYTE *)(v64 + 10))
                    && (v67 != 0.0 ? (v68 = v67 == v42) : (v68 = 1), !v68)
                    || (v69 = *(unsigned __int8 *)(v64 + v66 + 11), v67 = 0.0, v69 == 2))
                  {
                    LOBYTE(v142[0]) = 1;
                    v147[0] = 1;
                    v70 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v64, 0x2Du, v65, 0, v142);
                    v48 = v70
                        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v64, 0x2Du, v65, 1u, v147)- v70)* v67);
                  }
                  else
                  {
                    v48 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v143 + 3), 0x2Du, v65, v69, 0);
                  }
                  v92 = *((_QWORD *)v143 + 3);
                  if (*((unsigned __int8 *)a2 + 12) >= 0x17u)
                    v93 = 23;
                  else
                    v93 = *((unsigned __int8 *)a2 + 12);
                  v94 = *(float **)v92;
                  if (*(_QWORD *)v92
                    && (v95 = *v94, LODWORD(v94) = *v94 == v42, *(_BYTE *)(v92 + 10))
                    && (v95 != 0.0 ? (v96 = v95 == v42) : (v96 = 1), !v96)
                    || (v97 = *(unsigned __int8 *)(v92 + v94 + 11), v95 = 0.0, v97 == 2))
                  {
                    LOBYTE(v142[0]) = 1;
                    v147[0] = 1;
                    v98 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v92, 0x2Eu, v93, 0, v142);
                    v99 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v92, 0x2Eu, v93, 1u, v147);
                    goto LABEL_202;
                  }
                  v115 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v143 + 3), 0x2Eu, v93, v97, 0);
                  goto LABEL_207;
                case 1:
                  v71 = *((_QWORD *)v143 + 3);
                  if (v63 >= 0x17)
                    v72 = 23;
                  else
                    v72 = *((unsigned __int8 *)a2 + 12);
                  v73 = *(float **)v71;
                  if (*(_QWORD *)v71
                    && (v74 = *v73, LODWORD(v73) = *v73 == v42, *(_BYTE *)(v71 + 10))
                    && (v74 != 0.0 ? (v75 = v74 == v42) : (v75 = 1), !v75)
                    || (v76 = *(unsigned __int8 *)(v71 + v73 + 11), v74 = 0.0, v76 == 2))
                  {
                    LOBYTE(v142[0]) = 1;
                    v147[0] = 1;
                    v77 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v71, 0x38u, v72, 0, v142);
                    v48 = v77
                        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v71, 0x38u, v72, 1u, v147)- v77)* v74);
                  }
                  else
                  {
                    v48 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v143 + 3), 0x38u, v72, v76, 0);
                  }
                  v100 = *((_QWORD *)v143 + 3);
                  if (*((unsigned __int8 *)a2 + 12) >= 0x17u)
                    v101 = 23;
                  else
                    v101 = *((unsigned __int8 *)a2 + 12);
                  v102 = *(float **)v100;
                  if (*(_QWORD *)v100
                    && (v95 = *v102, LODWORD(v102) = *v102 == v42, *(_BYTE *)(v100 + 10))
                    && (v95 != 0.0 ? (v103 = v95 == v42) : (v103 = 1), !v103)
                    || (v104 = *(unsigned __int8 *)(v100 + v102 + 11), v95 = 0.0, v104 == 2))
                  {
                    LOBYTE(v142[0]) = 1;
                    v147[0] = 1;
                    v98 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v100, 0x39u, v101, 0, v142);
                    v99 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v100, 0x39u, v101, 1u, v147);
                    goto LABEL_202;
                  }
                  v115 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v143 + 3), 0x39u, v101, v104, 0);
                  goto LABEL_207;
                case 2:
                  v78 = *((_QWORD *)v143 + 3);
                  if (v63 >= 0x17)
                    v79 = 23;
                  else
                    v79 = *((unsigned __int8 *)a2 + 12);
                  v80 = *(float **)v78;
                  if (*(_QWORD *)v78
                    && (v81 = *v80, LODWORD(v80) = *v80 == v42, *(_BYTE *)(v78 + 10))
                    && (v81 != 0.0 ? (v82 = v81 == v42) : (v82 = 1), !v82)
                    || (v83 = *(unsigned __int8 *)(v78 + v80 + 11), v81 = 0.0, v83 == 2))
                  {
                    LOBYTE(v142[0]) = 1;
                    v147[0] = 1;
                    v84 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v78, 0x43u, v79, 0, v142);
                    v48 = v84
                        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v78, 0x43u, v79, 1u, v147)- v84)* v81);
                  }
                  else
                  {
                    v48 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v143 + 3), 0x43u, v79, v83, 0);
                  }
                  v105 = *((_QWORD *)v143 + 3);
                  if (*((unsigned __int8 *)a2 + 12) >= 0x17u)
                    v106 = 23;
                  else
                    v106 = *((unsigned __int8 *)a2 + 12);
                  v107 = *(float **)v105;
                  if (*(_QWORD *)v105
                    && (v95 = *v107, LODWORD(v107) = *v107 == v42, *(_BYTE *)(v105 + 10))
                    && (v95 != 0.0 ? (v108 = v95 == v42) : (v108 = 1), !v108)
                    || (v109 = *(unsigned __int8 *)(v105 + v107 + 11), v95 = 0.0, v109 == 2))
                  {
                    LOBYTE(v142[0]) = 1;
                    v147[0] = 1;
                    v98 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v105, 0x44u, v106, 0, v142);
                    v99 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v105, 0x44u, v106, 1u, v147);
                    goto LABEL_202;
                  }
                  v115 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v143 + 3), 0x44u, v106, v109, 0);
                  goto LABEL_207;
                case 3:
                  v85 = *((_QWORD *)v143 + 3);
                  if (v63 >= 0x17)
                    v86 = 23;
                  else
                    v86 = *((unsigned __int8 *)a2 + 12);
                  v87 = *(float **)v85;
                  if (*(_QWORD *)v85
                    && (v88 = *v87, LODWORD(v87) = *v87 == v42, *(_BYTE *)(v85 + 10))
                    && (v88 != 0.0 ? (v89 = v88 == v42) : (v89 = 1), !v89)
                    || (v90 = *(unsigned __int8 *)(v85 + v87 + 11), v88 = 0.0, v90 == 2))
                  {
                    LOBYTE(v142[0]) = 1;
                    v147[0] = 1;
                    v91 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x4Eu, v86, 0, v142);
                    v48 = v91
                        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v85, 0x4Eu, v86, 1u, v147)- v91)* v88);
                  }
                  else
                  {
                    v48 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v143 + 3), 0x4Eu, v86, v90, 0);
                  }
                  v110 = *((_QWORD *)v143 + 3);
                  if (*((unsigned __int8 *)a2 + 12) >= 0x17u)
                    v111 = 23;
                  else
                    v111 = *((unsigned __int8 *)a2 + 12);
                  v112 = *(float **)v110;
                  if (*(_QWORD *)v110
                    && (v95 = *v112, LODWORD(v112) = *v112 == v42, *(_BYTE *)(v110 + 10))
                    && (v95 != 0.0 ? (v113 = v95 == v42) : (v113 = 1), !v113)
                    || (v114 = *(unsigned __int8 *)(v110 + v112 + 11), v95 = 0.0, v114 == 2))
                  {
                    LOBYTE(v142[0]) = 1;
                    v147[0] = 1;
                    v98 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v110, 0x4Fu, v111, 0, v142);
                    v99 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v110, 0x4Fu, v111, 1u, v147);
LABEL_202:
                    v2 = v98 + (float)((float)(*(float *)v99 - v98) * v95);
                  }
                  else
                  {
                    v115 = gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*((_QWORD *)v143 + 3), 0x4Fu, v111, v114, 0);
LABEL_207:
                    v2 = *(float *)v115;
                  }
                  break;
                default:
                  break;
              }
            }
            else
            {
              if ((v54 & 0xFE) == 2)
                v48 = 0.6;
              else
                v48 = 1.5;
              if ((v54 & 0xFE) == 2)
                v2 = v43;
              else
                v2 = 0.2;
            }
            gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v143);
            *(_OWORD *)(v52 + 16) = v139;
            *(_OWORD *)(v52 + 48) = v140;
            v116 = *((float *)&v136 + 1);
            v117 = v137;
            v118 = *((float *)&v136 + 1) + (float)(v137 * 2.0);
            *(float *)v52 = v118 * 0.5;
            v119 = logf(v116 * v130);
            v23.n128_f32[0] = expf(floorf(v119 * 4.0) * 0.25);
            *(_DWORD *)(v52 + 72) = 0;
            *(_DWORD *)(v52 + 64) = *(_DWORD *)(v44 + 296);
            v120 = (float)(v2 + v48) + 1.0;
            v121 = 0.5 / v120;
            *(float *)(v52 + 84) = v23.n128_f32[0] * v120;
            *(float *)(v52 + 88) = 0.5 / v120;
            v43 = 0.5;
            *(float *)(v52 + 92) = (float)((float)(v2 * 0.5) + 0.5) / v120;
            *(float *)(v52 + 96) = v120 / (float)(v118 / v116);
            v23.n128_f32[0] = (float)(v118 / v116) * (float)(0.5 / v120);
            v122 = *((float *)a2 + 5) * v117;
            *(float *)(v52 + 112) = v121;
            *(_DWORD *)(v52 + 116) = v23.n128_u32[0];
            *(_DWORD *)(v52 + 120) = 1065353216;
            *(float *)(v52 + 124) = v122;
            *(float *)(v52 + 76) = v53;
            if (v135)
            {
              v124 = v132;
              v123 = v133;
              if (v133 != v132)
              {
                v125 = (_QWORD *)*((_QWORD *)&v131 + 1);
                v126 = v134;
                v127 = HIBYTE(v134);
                if ((_QWORD)v131 && *(_BYTE *)(*((_QWORD *)&v131 + 1) + 17) != 2)
                  (*(void (**)(void))(*(_QWORD *)v131 + 64))();
                if (v126 && !v127)
                {
                  v128 = v125[7];
                  v129 = v125[8];
                  if (v129 == v128)
                    v128 = v125[10] - v125[9];
                  if (v124 < v128)
                    v128 = v124;
                  if (v129 <= v123)
                    v129 = v123;
                  if (v129 == v128)
                    v129 = v128 + v125[10] - v125[9];
                  v125[7] = v128;
                  v125[8] = v129;
                }
              }
            }
            *(_DWORD *)(v44 + 56) = *((unsigned __int8 *)a2 + 57);
            *(_QWORD *)(v44 + 64) = *((_QWORD *)a2 + 18);
            v42 = 1.0;
          }
        }
        ++v41;
      }
      while (v41 != v40);
    }
  }
}

void sub_19F99BFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  v32 = a31;
  if (a31)
  {
    p_shared_owners = (unint64_t *)&a31->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = a29;
  if (a29)
  {
    v36 = (unint64_t *)&a29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a11);
  _Unwind_Resume(a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF168;
  v2 = *(_QWORD **)(a1 + 376);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 384);
    v4 = *(void **)(a1 + 376);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 104);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 376);
    }
    *(_QWORD *)(a1 + 384) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 352);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 352);
  *(_QWORD *)(a1 + 360) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 352);
  }
  free(v21);
  v24 = *(void **)(a1 + 328);
  if (v24)
  {
    *(_QWORD *)(a1 + 336) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 296);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 304);
    v27 = *(_QWORD *)(a1 + 296);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 304);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 296);
    }
    *(_QWORD *)(a1 + 304) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 320) + 40))(*(_QWORD *)(a1 + 320), v27, *(_QWORD *)(a1 + 312) - v27);
  }
  v31 = *(void **)(a1 + 272);
  if (v31)
  {
    *(_QWORD *)(a1 + 280) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::TrafficGlow::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TrafficGlow::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TrafficGlow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E10C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TrafficGlow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E10C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TrafficGlow::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::TrafficBase::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TrafficBase::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TrafficBase::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TrafficBase::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TrafficBase::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::SolidTrafficBatch::~SolidTrafficBatch(md::SolidTrafficBatch *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42935C8;
  v2 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E428C720;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E42935C8;
  v2 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E428C720;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C720;
  v2 = (std::__shared_weak_count *)a1[52];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C720;
  v2 = (std::__shared_weak_count *)a1[52];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::SolidTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::SolidTrafficLayer::setSharedResources(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;

  a1[20] = a2;
  v2 = (uint64_t *)a1[1];
  v3 = (uint64_t *)a1[2];
  while (v2 != v3)
  {
    v4 = *v2;
    v5 = *(_QWORD *)(*(_QWORD *)(*v2 + 8) + 160);
    ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(*v2 + 440), *(_QWORD *)v5, *(std::__shared_weak_count **)(v5 + 8));
    **(_QWORD **)(*(_QWORD *)(v4 + 440) + 96) = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 16);
    v6 = *(_QWORD **)(v4 + 448);
    v8 = *(_QWORD *)(v5 + 32);
    v7 = *(std::__shared_weak_count **)(v5 + 40);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v8 && **(_QWORD **)(v8 + 40) == v6[1])
    {
      v14 = v6[2];
      if (v14)
        v15 = v14 == v8;
      else
        v15 = 1;
      if (!v15)
        ggl::PipelineSetup::resetData((uint64_t)v6);
      if (v7)
      {
        v16 = (unint64_t *)&v7->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v11 = (std::__shared_weak_count *)v6[3];
      v6[2] = v8;
      v6[3] = v7;
      if (!v11)
        goto LABEL_25;
      v18 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v18);
      while (__stlxr(v13 - 1, v18));
    }
    else
    {
      v11 = (std::__shared_weak_count *)v6[3];
      v6[2] = 0;
      v6[3] = 0;
      if (!v11)
        goto LABEL_25;
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
    }
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v7)
        goto LABEL_2;
      goto LABEL_26;
    }
LABEL_25:
    if (!v7)
      goto LABEL_2;
LABEL_26:
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_2:
    ++v2;
  }
}

uint64_t md::SolidTrafficLayer::layout(md::SolidTrafficLayer *this, const md::TrafficContext *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int8x8_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  float *v26;
  double v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _BYTE *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  unsigned int v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  float v67;
  int v68;
  float v69;
  float v70;
  _QWORD v71[2];
  _QWORD *v72;
  std::__shared_weak_count *v73;
  _QWORD v74[2];
  unsigned __int8 v75;
  _QWORD *v76;
  float v77;
  int v78;
  __int128 v79;
  __int128 v80;
  char v81;

  v4 = (uint64_t *)*((_QWORD *)this + 20);
  if (*((_BYTE *)a2 + 162))
  {
    v5 = v4 + 13;
    v6 = v4 + 14;
  }
  else
  {
    v5 = v4 + 9;
    if (*((_BYTE *)a2 + 56))
      v5 = v4 + 11;
    v7 = v4 + 10;
    v6 = v4 + 12;
    if (!*((_BYTE *)a2 + 56))
      v6 = v7;
  }
  if (*((_BYTE *)a2 + 160))
    v8 = v6;
  else
    v8 = v5;
  v9 = *v8;
  *((_QWORD *)this + 7) = v9;
  *((_QWORD *)this + 8) = v9;
  v10 = *(_QWORD **)(*(_QWORD *)a2 + 8);
  v11 = (int8x8_t)v10[1];
  if (!*(_QWORD *)&v11)
    goto LABEL_38;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v11 <= 0x1AF456233693CD46uLL)
      v13 = 0x1AF456233693CD46uLL % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & 0x1AF456233693CD46;
  }
  v14 = *(_QWORD **)(*v10 + 8 * v13);
  if (!v14)
    goto LABEL_38;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_38;
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x1AF456233693CD46)
      {
        if (v15[2] == 0x1AF456233693CD46)
          goto LABEL_31;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_38;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_38;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x1AF456233693CD46)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_38;
LABEL_20:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_38;
  }
  if (v15[2] != 0x1AF456233693CD46)
    goto LABEL_20;
LABEL_31:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) != 0x1AF456233693CD46)
  {
LABEL_38:
    v19 = 0;
    if (MEMORY[0xEC0])
      goto LABEL_39;
LABEL_33:
    if ((*(_QWORD *)&v11 & (*(_QWORD *)&v11 - 1)) != 0)
    {
      v28 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v11 <= 0x8BD499FBD96FBB9ELL)
        v28 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v11;
      v20 = *(_QWORD **)(*v10 + 8 * v28);
      do
      {
        do
          v20 = (_QWORD *)*v20;
        while (v20[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v20[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v20 = *(_QWORD **)(*v10 + 8 * ((*(_QWORD *)&v11 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v20 = (_QWORD *)*v20;
        while (v20[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v20[2] != 0x8BD499FBD96FBB9ELL);
    }
    v29 = 0.0;
    if (**(_BYTE **)(v20[5] + 32) && *((_BYTE *)this + 112))
      v29 = *(double *)(v19 + 24) * 0.0000000249532021 * (double)(1 << *((_BYTE *)this + 89));
    v30 = *((_QWORD *)this + 15);
    if ((*(_BYTE *)(v30 + 16) & 2) == 0)
    {
      v31 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v31 != -1)
      {
        v76 = v71;
        v72 = &v76;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v26 = *(float **)(v30 + 72);
    v27 = v29;
    goto LABEL_57;
  }
  v19 = *(_QWORD *)(v18 + 32);
  if (!*(_BYTE *)(v19 + 3776))
    goto LABEL_33;
LABEL_39:
  v21 = *((_QWORD *)this + 10);
  if (!v21)
  {
    v24 = *((_QWORD *)this + 15);
    if ((*(_BYTE *)(v24 + 16) & 2) == 0)
    {
      v25 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v25 != -1)
      {
        v76 = v71;
        v72 = &v76;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v26 = *(float **)(v24 + 72);
    v27 = 0.0;
LABEL_57:
    result = ggl::CullingGrid::intersectedCellsForView(v26, v27);
    goto LABEL_58;
  }
  result = gdc::GlobeTileGrid::intersectWithFrustum(v21, (const double *)(v19 + 984), *(double *)(v19 + 24));
LABEL_58:
  v32 = *((_QWORD *)this + 1);
  v33 = *((_QWORD *)this + 2);
  if (v32 != v33)
  {
    do
    {
      v35 = *(_BYTE **)v32;
      v36 = *(uint64_t **)(*(_QWORD *)v32 + 376);
      v37 = *(uint64_t **)(*(_QWORD *)v32 + 384);
      if (v36 == v37)
      {
        v34 = 0;
      }
      else
      {
        v34 = 0;
        do
        {
          v38 = *v36++;
          v39 = (*(_DWORD *)(v38 + 96) & result) != 0;
          v34 |= v39;
          *(_BYTE *)(v38 + 48) = v39;
        }
        while (v36 != v37);
      }
      v35[136] = v34 & 1;
      v35[264] = v34 & 1;
      v35[400] = v34 & 1;
      v32 += 8;
    }
    while (v32 != v33);
    v40 = (uint64_t *)*((_QWORD *)this + 1);
    v41 = (uint64_t *)*((_QWORD *)this + 2);
    if (v40 != v41)
    {
      while (2)
      {
        v44 = *v40;
        if (!*(_BYTE *)(*v40 + 400))
          goto LABEL_71;
        v81 = 0;
        result = md::setupSharedStylingParameters((uint64_t)a2, (uint64_t)&v76, *(_QWORD *)(v44 + 408), *(std::__shared_weak_count **)(v44 + 416), *(unsigned __int8 *)(v44 + 428), v23);
        *(_BYTE *)(v44 + 400) = result;
        if (!(_DWORD)result)
          goto LABEL_71;
        v45 = *(_QWORD *)(v44 + 440);
        v46 = *((float *)a2 + 17);
        v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) + 160) + 128);
        v48 = *(_DWORD *)v47;
        *(_QWORD *)(v44 + 176) = v45;
        v49 = *(_QWORD **)(*(_QWORD *)(v45 + 64) + 32);
        v50 = v49[1];
        v51 = v49[9];
        v52 = v78;
        *(_DWORD *)(v51 + 24) = (_DWORD)v76;
        *(_DWORD *)(v51 + 28) = v52;
        *(_OWORD *)v51 = v79;
        v23.n128_f32[0] = v46 * (float)v48;
        *(float *)(v51 + 16) = (float)(*((float *)&v76 + 1) * 0.5) * *(float *)(v47 + 8);
        *(_DWORD *)(v51 + 20) = v23.n128_u32[0];
        *(_DWORD *)(v51 + 32) = 0;
        v53 = v49[8];
        if (v53 <= v50)
          v53 = v50;
        v49[7] = 0;
        v49[8] = v53;
        *(_BYTE *)(v44 + 136) = 0;
        if (*((_DWORD *)a2 + *(unsigned __int8 *)(v44 + 428) + 32) == 2)
        {
          v54 = *((_QWORD *)a2 + 14);
          v55 = (std::__shared_weak_count *)*((_QWORD *)a2 + 15);
          v71[0] = v54;
          v71[1] = v55;
          if (v55)
          {
            p_shared_owners = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(p_shared_owners);
            while (__stxr(v57 + 1, p_shared_owners));
            v73 = v55;
            do
              v58 = __ldxr(p_shared_owners);
            while (__stxr(v58 + 1, p_shared_owners));
          }
          else
          {
            v73 = 0;
          }
          v72 = (_QWORD *)v54;
          v74[0] = 0;
          v74[1] = 0;
          v75 = 0;
          if (v54)
            LODWORD(v54) = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v54 + 48))(v54, v74);
          v75 = v54;
          if (v55)
          {
            v59 = (unint64_t *)&v55->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            LODWORD(v54) = v75;
          }
          if ((_DWORD)v54)
          {
            v23.n128_u8[0] = *((_BYTE *)a2 + 12);
            md::trafficSecondaryWidthForSpeedAtZ((unint64_t)v72, *(unsigned __int8 *)(v44 + 428), (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v23.n128_u64[0])).i32[0]);
            v62 = v61;
            result = gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v72);
            *(_BYTE *)(v44 + 136) = v62 > 0.0;
            if (v62 > 0.0)
            {
              v63 = *(_QWORD *)(v44 + 448);
              *(_QWORD *)(v44 + 48) = v63;
              v64 = *(_QWORD **)(*(_QWORD *)(v63 + 64) + 32);
              v65 = v64[1];
              v66 = v64[9];
              v67 = *((float *)&v76 + 1);
              v69 = v77;
              v68 = v78;
              *(_DWORD *)(v66 + 36) = (_DWORD)v76;
              *(_DWORD *)(v66 + 40) = v68;
              v70 = v67 + (float)(v69 * 2.0);
              *(_OWORD *)(v66 + 16) = v80;
              *(float *)v66 = v70 * 0.5;
              v23.n128_f32[0] = 1.0 / (float)(1.0 - (float)(v67 / v70));
              *(_DWORD *)(v66 + 44) = v23.n128_u32[0];
              if (v64[8] > v65)
                v65 = v64[8];
              v64[7] = 0;
              v64[8] = v65;
              v42 = *((unsigned __int8 *)a2 + 57);
              v43 = *((_QWORD *)a2 + 18);
              *(_DWORD *)(v44 + 56) = v42;
              *(_QWORD *)(v44 + 64) = v43;
              if (!*(_BYTE *)(v44 + 264))
              {
LABEL_71:
                if (++v40 == v41)
                  return result;
                continue;
              }
LABEL_70:
              *(_DWORD *)(v44 + 184) = v42;
              *(_QWORD *)(v44 + 192) = v43 | 1;
              goto LABEL_71;
            }
          }
          else
          {
            result = gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v72);
            *(_BYTE *)(v44 + 136) = 0;
          }
        }
        break;
      }
      v42 = *((unsigned __int8 *)a2 + 57);
      v43 = *((_QWORD *)a2 + 18);
      if (!*(_BYTE *)(v44 + 264))
        goto LABEL_71;
      goto LABEL_70;
    }
  }
  return result;
}

void sub_19F99D08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F99D0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF148;
  v2 = *(_QWORD **)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 104);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 224);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 224);
  *(_QWORD *)(a1 + 232) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 224);
  }
  free(v21);
  v24 = *(void **)(a1 + 200);
  if (v24)
  {
    *(_QWORD *)(a1 + 208) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 176);
    v27 = *(_QWORD *)(a1 + 168);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 176);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v27, *(_QWORD *)(a1 + 184) - v27);
  }
  v31 = *(void **)(a1 + 144);
  if (v31)
  {
    *(_QWORD *)(a1 + 152) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::CasedTrafficBatch::~CasedTrafficBatch(md::CasedTrafficBatch *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E4292410;
  v2 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E428C700;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E4292410;
  v2 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E428C700;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C700;
  v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E428C700;
  v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::Ribbons::RibbonBatch<md::Ribbons::CasedTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  void (***v11)(_QWORD, uint64_t);
  void (***v12)(_QWORD, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t v18;
  void (***v19)(void);
  void (**v20)(void);
  _QWORD **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v33;

  *(_QWORD *)a1 = &off_1E42AF1A8;
  v2 = *(_QWORD **)(a1 + 248);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = (void (***)(_QWORD, uint64_t))*--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  (**v11)(v11, v5);
                  {
                    v33 = v2;
                    v14 = operator new();
                    *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v14 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v14 = &off_1E42B5668;
                    *(_QWORD *)(v14 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v14 + 72) = 0u;
                    *(_OWORD *)(v14 + 88) = 0u;
                    *(_OWORD *)(v14 + 104) = 0u;
                    *(_OWORD *)(v14 + 120) = 0u;
                    *(_OWORD *)(v14 + 136) = 0u;
                    *(_OWORD *)(v14 + 152) = 0u;
                    *(_OWORD *)(v14 + 168) = 0u;
                    *(_OWORD *)(v14 + 184) = 0u;
                    *(_OWORD *)(v14 + 200) = 0u;
                    *(_OWORD *)(v14 + 216) = 0u;
                    *(_OWORD *)(v14 + 232) = 0u;
                    *(_QWORD *)(v14 + 248) = 0;
                    *(_OWORD *)(v14 + 56) = 0u;
                    v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
                    if ((_DWORD)v15)
                      geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
                    zone = malloc_create_zone(0, 0);
                    *(_QWORD *)(v14 + 48) = zone;
                    malloc_set_zone_name(zone, "VectorKitLabels");
                    *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v14;
                    v2 = v33;
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v11, 128);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4010FC18DELL);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  v17 = *(_QWORD **)(a1 + 224);
  do
  {
    if (v17[1])
    {
      v18 = 0;
      v19 = (void (***)(void))(v17 + 2);
      do
      {
        v20 = *v19;
        v19 += 15;
        (*v20)();
        ++v18;
      }
      while (v18 < v17[1]);
    }
    v17[1] = 0;
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  v21 = *(_QWORD ***)(a1 + 224);
  *(_QWORD *)(a1 + 232) = v21;
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      free(v22);
      v22 = v23;
    }
    while (v23);
    v21 = *(_QWORD ***)(a1 + 224);
  }
  free(v21);
  v24 = *(void **)(a1 + 200);
  if (v24)
  {
    *(_QWORD *)(a1 + 208) = v24;
    operator delete(v24);
  }
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 176);
    v27 = *(_QWORD *)(a1 + 168);
    if (v26 != v25)
    {
      v28 = *(_QWORD *)(a1 + 176);
      do
      {
        v30 = *(void **)(v28 - 24);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *(_QWORD *)(v26 - 16) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = *(_QWORD *)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v25;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), v27, *(_QWORD *)(a1 + 184) - v27);
  }
  v31 = *(void **)(a1 + 144);
  if (v31)
  {
    *(_QWORD *)(a1 + 152) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E14B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E14B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::DaVinciTrafficBatch::~DaVinciTrafficBatch(md::DaVinciTrafficBatch *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E4297060;
  v2 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E428C760;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E4297060;
  v2 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E428C760;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C760;
  v2 = (std::__shared_weak_count *)a1[38];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[36];
    if (!v5)
      return md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[36];
    if (!v5)
      return md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C760;
  v2 = (std::__shared_weak_count *)a1[38];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[36];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[36];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonBatch<md::Ribbons::DaVinciTrafficRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DaVinciTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinciTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinciTraffic::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::DaVinciTrafficLayer::layout(md::DaVinciTrafficLayer *this, const md::TrafficContext *a2)
{
  const md::TrafficContext *v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int8x8_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  float v20;
  long double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  __double2 v26;
  float v27;
  float v28;
  float v29;
  BOOL v30;
  float v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  unint64_t v44;
  float *v45;
  double v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t *v59;
  __n128 v60;
  uint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _BOOL4 v76;
  unsigned int v77;
  float v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  float *v82;
  float v83;
  _BOOL4 v84;
  unsigned int v86;
  float v87;
  _BOOL4 v88;
  unsigned int v90;
  float v91;
  _BOOL4 v92;
  unsigned int v94;
  float v95;
  _BOOL4 v96;
  unsigned int v98;
  float v99;
  unint64_t v100;
  unsigned int v101;
  float *v102;
  float v103;
  _BOOL4 v104;
  unsigned int v106;
  int hasValueForKeyAtZAtEnd;
  float v108;
  float v109;
  float v110;
  _BOOL4 v111;
  unsigned int v113;
  float v114;
  float v115;
  float v116;
  float v117;
  unint64_t v118;
  unsigned int v119;
  float *v120;
  float v121;
  _BOOL4 v122;
  unsigned int v124;
  int v125;
  float v126;
  float v127;
  float v128;
  _BOOL4 v129;
  unsigned int v131;
  float v132;
  float v133;
  float v134;
  uint64_t v135;
  BOOL v136;
  int v137;
  void *v138;
  char v139;
  int v140;
  unint64_t v141;
  uint64_t v142;
  int8x16_t v143;
  int16x8_t v144;
  int32x4_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int16x8_t v148;
  int32x4_t v149;
  int8x16_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int32x4_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t **v161;
  uint64_t **v162;
  unint64_t v163;
  _QWORD *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  __int128 v168;
  unsigned __int8 v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  __int128 v174;
  char v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 v178;
  unint64_t *v179;
  unint64_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int16x8_t v184;
  int32x4_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int16x8_t v188;
  int32x4_t v189;
  int8x16_t v190;
  int32x4_t v191;
  int8x16_t v192;
  int32x4_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int16x8_t v200;
  int32x4_t v201;
  int8x16_t v202;
  int16x8_t v203;
  int32x4_t v204;
  int8x16_t v205;
  int32x4_t v206;
  int8x16_t v207;
  int32x4_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int16x8_t v222;
  int32x4_t v223;
  int8x16_t v224;
  int16x8_t v225;
  int32x4_t v226;
  int8x16_t v227;
  int32x4_t v228;
  int8x16_t v229;
  int32x4_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int16x8_t v237;
  int32x4_t v238;
  int8x16_t v239;
  int16x8_t v240;
  int32x4_t v241;
  int8x16_t v242;
  int32x4_t v243;
  int8x16_t v244;
  int32x4_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  unint64_t v250;
  uint64_t *v251;
  uint64_t **v252;
  unint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  ggl::PipelineSetup *v256;
  uint64_t *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  BOOL v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  unsigned int v286;
  float v287;
  _QWORD *v288;
  unint64_t v289;
  float32x4_t *v290;
  float v291;
  float v292;
  float v293;
  uint64_t v297;
  unsigned int v298;
  float *v299;
  float v300;
  BOOL v301;
  unsigned int v302;
  ggl::DaVinciTrafficShader *v304;
  unsigned __int8 v305;
  unsigned __int8 v306;
  unsigned __int8 v307;
  unsigned __int8 v308;
  unsigned __int8 v309;
  unsigned __int8 v310;
  const md::TrafficContext *v311;
  char v312;
  char v313;
  char v314;
  ggl::PipelineSetup *v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  uint64_t *v323;
  _QWORD *v324;
  std::__shared_weak_count *v325;
  float v326;
  float32x4_t v327;
  char v328;
  float32x4_t v329;
  _QWORD *v330;
  std::__shared_weak_count *v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  _QWORD **v335;
  std::__shared_weak_count *v336;
  _QWORD v337[2];
  unsigned __int8 v338;
  __int128 v339;
  __int128 v340;
  _BYTE v341[28];

  v2 = a2;
  v4 = (uint64_t *)*((_QWORD *)this + 19);
  if (*((_BYTE *)a2 + 162))
  {
    v5 = v4 + 13;
    v6 = v4 + 14;
  }
  else
  {
    v5 = v4 + 9;
    if (*((_BYTE *)a2 + 56))
      v5 = v4 + 11;
    v7 = v4 + 10;
    v6 = v4 + 12;
    if (!*((_BYTE *)a2 + 56))
      v6 = v7;
  }
  if (*((_BYTE *)a2 + 160))
    v8 = v6;
  else
    v8 = v5;
  v9 = *v8;
  *((_QWORD *)this + 7) = *v8;
  v10 = *(_QWORD **)(*(_QWORD *)a2 + 8);
  v11 = (int8x8_t)v10[1];
  if (!*((_BYTE *)a2 + 104))
    goto LABEL_40;
  if (!*(_QWORD *)&v11)
    goto LABEL_35;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v11 <= 0x1AF456233693CD46uLL)
      v13 = 0x1AF456233693CD46uLL % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & 0x1AF456233693CD46;
  }
  v14 = *(_QWORD **)(*v10 + 8 * v13);
  if (!v14)
    goto LABEL_35;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_35;
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x1AF456233693CD46)
      {
        if (v15[2] == 0x1AF456233693CD46)
          goto LABEL_32;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_35;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x1AF456233693CD46)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_35;
LABEL_21:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_35;
  }
  if (v15[2] != 0x1AF456233693CD46)
    goto LABEL_21;
LABEL_32:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) != 0x1AF456233693CD46)
  {
LABEL_35:
    v19 = 0;
    if (v9)
      goto LABEL_36;
    goto LABEL_40;
  }
  v19 = *(double **)(v18 + 32);
  if (!v9)
    goto LABEL_40;
LABEL_36:
  v20 = *((float *)a2 + 16);
  v21 = v19[64];
  v22 = sqrt(v19[62] * v19[62] + v19[63] * v19[63]);
  v23 = atan2(v21, v22 * 0.996647189);
  v24 = __sincos_stret(v23);
  v25 = atan2(v21 + v24.__sinval * v24.__sinval * 42841.3115 * v24.__sinval, v22 + v24.__cosval * v24.__cosval * -42697.6727 * v24.__cosval);
  v26 = __sincos_stret(v25);
  v27 = v22 / v26.__cosval + -6378137.0 / sqrt(v26.__sinval * v26.__sinval * -0.00669437999 + 1.0);
  v28 = fmaxf(fminf(fmaxf((float)(v27 * 0.00021053) + -0.10526, 0.0), 1.0) * fminf(fmaxf(v20, 0.2), 1.0), 0.0);
  v29 = (float)(v28 * -200000.0) + -5000.0;
  v30 = v28 <= 1.0;
  v31 = -205000.0;
  if (v30)
    v31 = v29;
  *(float *)(v9 + 40) = v31;
LABEL_40:
  if (!*(_QWORD *)&v11)
    goto LABEL_68;
  v32 = (uint8x8_t)vcnt_s8(v11);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    v33 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v11 <= 0x1AF456233693CD46uLL)
      v33 = 0x1AF456233693CD46uLL % *(_QWORD *)&v11;
  }
  else
  {
    v33 = (*(_QWORD *)&v11 - 1) & 0x1AF456233693CD46;
  }
  v34 = *(_QWORD **)(*v10 + 8 * v33);
  if (!v34)
    goto LABEL_68;
  v35 = (_QWORD *)*v34;
  if (!v35)
    goto LABEL_68;
  if (v32.u32[0] < 2uLL)
  {
    while (1)
    {
      v37 = v35[1];
      if (v37 == 0x1AF456233693CD46)
      {
        if (v35[2] == 0x1AF456233693CD46)
          goto LABEL_61;
      }
      else if ((v37 & (*(_QWORD *)&v11 - 1)) != v33)
      {
        goto LABEL_68;
      }
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_68;
    }
  }
  while (1)
  {
    v36 = v35[1];
    if (v36 == 0x1AF456233693CD46)
      break;
    if (v36 >= *(_QWORD *)&v11)
      v36 %= *(_QWORD *)&v11;
    if (v36 != v33)
      goto LABEL_68;
LABEL_50:
    v35 = (_QWORD *)*v35;
    if (!v35)
      goto LABEL_68;
  }
  if (v35[2] != 0x1AF456233693CD46)
    goto LABEL_50;
LABEL_61:
  v38 = v35[5];
  if (*(_QWORD *)(v38 + 8) != 0x1AF456233693CD46)
  {
LABEL_68:
    v39 = 0;
    if (MEMORY[0xEC0])
      goto LABEL_69;
LABEL_63:
    if ((*(_QWORD *)&v11 & (*(_QWORD *)&v11 - 1)) != 0)
    {
      v47 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v11 <= 0x8BD499FBD96FBB9ELL)
        v47 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v11;
      v40 = *(_QWORD **)(*v10 + 8 * v47);
      do
      {
        do
          v40 = (_QWORD *)*v40;
        while (v40[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v40[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v40 = *(_QWORD **)(*v10 + 8 * ((*(_QWORD *)&v11 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v40 = (_QWORD *)*v40;
        while (v40[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v40[2] != 0x8BD499FBD96FBB9ELL);
    }
    v48 = 0.0;
    if (**(_BYTE **)(v40[5] + 32) && *((_BYTE *)this + 104))
      v48 = *(double *)(v39 + 24) * 0.0000000249532021 * (double)(1 << *((_BYTE *)this + 81));
    v49 = *((_QWORD *)this + 14);
    if ((*(_BYTE *)(v49 + 16) & 2) == 0)
    {
      v50 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v50 != -1)
      {
        v324 = &v330;
        v335 = &v324;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v335, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v45 = *(float **)(v49 + 72);
    v46 = v48;
    goto LABEL_87;
  }
  v39 = *(_QWORD *)(v38 + 32);
  if (!*(_BYTE *)(v39 + 3776))
    goto LABEL_63;
LABEL_69:
  v41 = *((_QWORD *)this + 9);
  if (!v41)
  {
    v43 = *((_QWORD *)this + 14);
    if ((*(_BYTE *)(v43 + 16) & 2) == 0)
    {
      v44 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v44 != -1)
      {
        v324 = &v330;
        v335 = &v324;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v335, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v45 = *(float **)(v43 + 72);
    v46 = 0.0;
LABEL_87:
    result = ggl::CullingGrid::intersectedCellsForView(v45, v46);
    goto LABEL_88;
  }
  result = gdc::GlobeTileGrid::intersectWithFrustum(v41, (const double *)(v39 + 984), *(double *)(v39 + 24));
LABEL_88:
  v51 = (uint64_t *)*((_QWORD *)this + 1);
  v52 = (uint64_t *)*((_QWORD *)this + 2);
  if (v51 != v52)
  {
    do
    {
      v54 = *v51;
      v55 = *(uint64_t **)(*v51 + 248);
      v56 = *(uint64_t **)(*v51 + 256);
      if (v55 == v56)
      {
        v53 = 0;
      }
      else
      {
        v53 = 0;
        do
        {
          v57 = *v55++;
          v58 = (*(_DWORD *)(v57 + 96) & result) != 0;
          v53 |= v58;
          *(_BYTE *)(v57 + 48) = v58;
        }
        while (v55 != v56);
      }
      *(_BYTE *)(v54 + 136) = v53 & 1;
      *(_BYTE *)(v54 + 272) = v53 & 1;
      ++v51;
    }
    while (v51 != v52);
    v59 = (uint64_t *)*((_QWORD *)this + 1);
    v323 = (uint64_t *)*((_QWORD *)this + 2);
    if (v59 != v323)
    {
      v320 = (float32x4_t)vdupq_n_s32(0x37800080u);
      v60 = (__n128)xmmword_19FFB2DB0;
      v311 = v2;
      while (1)
      {
        v61 = *v59;
        if (!*(_BYTE *)(*v59 + 272))
          goto LABEL_101;
        v62 = *(_QWORD **)(v61 + 296);
        v63 = *(std::__shared_weak_count **)(v61 + 304);
        v324 = v62;
        v325 = v63;
        if (v63)
        {
          p_shared_owners = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldxr(p_shared_owners);
          while (__stxr(v65 + 1, p_shared_owners));
          v336 = v63;
          do
            v66 = __ldxr(p_shared_owners);
          while (__stxr(v66 + 1, p_shared_owners));
        }
        else
        {
          v336 = 0;
        }
        v335 = (_QWORD **)v62;
        v337[0] = 0;
        v337[1] = 0;
        v338 = 0;
        if (v62)
          LODWORD(v62) = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v62 + 48))(v62, v337);
        v338 = v62;
        if (v63)
        {
          v67 = (unint64_t *)&v63->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
          LODWORD(v62) = v338;
        }
        if (!(_DWORD)v62)
        {
          *(_BYTE *)(v61 + 136) = 0;
          *(_BYTE *)(v61 + 272) = 0;
          goto LABEL_100;
        }
        v69 = *(_QWORD **)(v61 + 280);
        v70 = *(std::__shared_weak_count **)(v61 + 288);
        v324 = v69;
        v325 = v70;
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
          v331 = v70;
          do
            v73 = __ldxr(v71);
          while (__stxr(v73 + 1, v71));
        }
        else
        {
          v331 = 0;
        }
        v330 = v69;
        v332 = 0;
        v333 = 0;
        v334 = 0;
        if (v69)
          LOBYTE(v69) = (*(uint64_t (**)(_QWORD *))(*v69 + 48))(v69);
        v334 = (char)v69;
        if (v70)
        {
          v74 = (unint64_t *)&v70->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v328 = 0;
        v76 = md::setupSharedStylingParameters((uint64_t)v2, (uint64_t)&v324, (uint64_t)&v330, *(unsigned __int8 *)(v61 + 312), v60);
        v77 = *((unsigned __int8 *)v2 + 12);
        v78 = (float)(char)v77;
        v79 = *(unsigned __int8 *)(v61 + 312);
        v80 = (uint64_t)v335[3];
        v81 = v77 >= 0x17 ? 23 : *((unsigned __int8 *)v2 + 12);
        v82 = *(float **)v80;
        if (!*(_QWORD *)v80)
          break;
        v83 = *v82;
        v84 = *v82 == 1.0;
        if (!*(_BYTE *)(v80 + 10))
          goto LABEL_146;
        if (v83 == 0.0 || v83 == 1.0)
          goto LABEL_146;
LABEL_147:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd((uint64_t)v335[3], 0x1ACu, v81, 0) & 1) != 0)
          goto LABEL_189;
        v86 = 1;
LABEL_149:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v80, 0x1ACu, v81, v86) & 1) != 0)
          goto LABEL_189;
        if (!v82)
        {
          v88 = 0;
LABEL_159:
          v90 = *(unsigned __int8 *)(v80 + v88 + 11);
          if (v90 != 2)
            goto LABEL_162;
          goto LABEL_160;
        }
        v87 = *v82;
        v88 = *v82 == 1.0;
        if (!*(_BYTE *)(v80 + 10))
          goto LABEL_159;
        if (v87 == 0.0 || v87 == 1.0)
          goto LABEL_159;
LABEL_160:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v80, 0x1ADu, v81, 0) & 1) != 0)
          goto LABEL_189;
        v90 = 1;
LABEL_162:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v80, 0x1ADu, v81, v90) & 1) != 0)
          goto LABEL_189;
        if (!v82)
        {
          v92 = 0;
LABEL_172:
          v94 = *(unsigned __int8 *)(v80 + v92 + 11);
          if (v94 != 2)
            goto LABEL_175;
          goto LABEL_173;
        }
        v91 = *v82;
        v92 = *v82 == 1.0;
        if (!*(_BYTE *)(v80 + 10))
          goto LABEL_172;
        if (v91 == 0.0 || v91 == 1.0)
          goto LABEL_172;
LABEL_173:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v80, 0x1AEu, v81, 0) & 1) != 0)
          goto LABEL_189;
        v94 = 1;
LABEL_175:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v80, 0x1AEu, v81, v94) & 1) != 0)
          goto LABEL_189;
        if (v82)
        {
          v95 = *v82;
          v96 = *v82 == 1.0;
          if (*(_BYTE *)(v80 + 10))
          {
            if (v95 != 0.0 && v95 != 1.0)
              goto LABEL_186;
          }
        }
        else
        {
          v96 = 0;
        }
        v98 = *(unsigned __int8 *)(v80 + v96 + 11);
        if (v98 != 2)
          goto LABEL_188;
LABEL_186:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v80, 0x1AFu, v81, 0) & 1) == 0)
        {
          v98 = 1;
LABEL_188:
          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v80, 0x1AFu, v81, v98))
            goto LABEL_196;
        }
LABEL_189:
        switch(v79)
        {
          case 0:
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v339, v80, 0x1ACu, 2u, fminf(fmaxf(v78, 0.0), 23.0));
            goto LABEL_194;
          case 1:
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v339, v80, 0x1ADu, 2u, fminf(fmaxf(v78, 0.0), 23.0));
            goto LABEL_194;
          case 2:
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v339, v80, 0x1AEu, 2u, fminf(fmaxf(v78, 0.0), 23.0));
            goto LABEL_194;
          case 3:
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v339, v80, 0x1AFu, 2u, fminf(fmaxf(v78, 0.0), 23.0));
LABEL_194:
            v321 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v339)), v320);
            break;
          default:
            break;
        }
        v328 = 1;
        v329 = v321;
LABEL_196:
        switch(v79)
        {
          case 0:
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v339, (uint64_t)v335[3], 0x2Bu, 2u, fminf(fmaxf(v78, 0.0), 23.0));
            goto LABEL_201;
          case 1:
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v339, (uint64_t)v335[3], 0x36u, 2u, fminf(fmaxf(v78, 0.0), 23.0));
            goto LABEL_201;
          case 2:
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v339, (uint64_t)v335[3], 0x41u, 2u, fminf(fmaxf(v78, 0.0), 23.0));
            goto LABEL_201;
          case 3:
            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v339, (uint64_t)v335[3], 0x4Cu, 2u, fminf(fmaxf(v78, 0.0), 23.0));
LABEL_201:
            v322 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v339)), v320);
            break;
          default:
            break;
        }
        v99 = *((float *)v2 + 2);
        v327 = v322;
        v100 = (unint64_t)v335[3];
        if ((int)v99 >= 0x17)
          v101 = 23;
        else
          v101 = (int)v99;
        v102 = *(float **)v100;
        if (!*(_QWORD *)v100)
        {
          v104 = 0;
LABEL_214:
          v106 = *(unsigned __int8 *)(v100 + v104 + 11);
          if (v106 != 2)
            goto LABEL_217;
          goto LABEL_215;
        }
        v103 = *v102;
        v104 = *v102 == 1.0;
        if (!*(_BYTE *)(v100 + 10))
          goto LABEL_214;
        if (v103 == 0.0 || v103 == 1.0)
          goto LABEL_214;
LABEL_215:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd((uint64_t)v335[3], 0x5Eu, v101, 0) & 1) != 0)
          goto LABEL_218;
        v106 = 1;
LABEL_217:
        hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v100, 0x5Eu, v101, v106);
        v108 = 4.0;
        if (!hasValueForKeyAtZAtEnd)
          goto LABEL_230;
LABEL_218:
        v109 = fminf(fmaxf(v99, 0.0), 23.0);
        if (v102)
        {
          v110 = *v102;
          v111 = *v102 == 1.0;
          if (*(_BYTE *)(v100 + 10))
          {
            if (v110 != 0.0 && v110 != 1.0)
            {
LABEL_228:
              LOBYTE(v339) = 1;
              v341[0] = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v100, 0x5Eu, 0, (BOOL *)&v339, v109);
              v115 = v114;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v100, 0x5Eu, 1u, v341, v109);
              v108 = v115 + (float)((float)(v116 - v115) * v110);
              goto LABEL_230;
            }
          }
        }
        else
        {
          v111 = 0;
        }
        v113 = *(unsigned __int8 *)(v100 + v111 + 11);
        v110 = 0.0;
        if (v113 == 2)
          goto LABEL_228;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v100, 0x5Eu, v113, 0, v109);
LABEL_230:
        v117 = *((float *)v2 + 2);
        *((float *)&v324 + 1) = v108;
        v118 = (unint64_t)v335[3];
        if ((int)v117 >= 0x17)
          v119 = 23;
        else
          v119 = (int)v117;
        v120 = *(float **)v118;
        if (!*(_QWORD *)v118)
        {
          v122 = 0;
LABEL_242:
          v124 = *(unsigned __int8 *)(v118 + v122 + 11);
          if (v124 != 2)
            goto LABEL_245;
          goto LABEL_243;
        }
        v121 = *v120;
        v122 = *v120 == 1.0;
        if (!*(_BYTE *)(v118 + 10))
          goto LABEL_242;
        if (v121 == 0.0 || v121 == 1.0)
          goto LABEL_242;
LABEL_243:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd((uint64_t)v335[3], 0x1BAu, v119, 0) & 1) != 0)
          goto LABEL_246;
        v124 = 1;
LABEL_245:
        v125 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v118, 0x1BAu, v119, v124);
        v126 = 1.0;
        if (!v125)
          goto LABEL_258;
LABEL_246:
        v127 = fminf(fmaxf(v117, 0.0), 23.0);
        if (v120)
        {
          v128 = *v120;
          v129 = *v120 == 1.0;
          if (*(_BYTE *)(v118 + 10))
          {
            if (v128 != 0.0 && v128 != 1.0)
            {
LABEL_256:
              LOBYTE(v339) = 1;
              v341[0] = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v118, 0x1BAu, 0, (BOOL *)&v339, v127);
              v133 = v132;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v118, 0x1BAu, 1u, v341, v127);
              v126 = v133 + (float)((float)(v134 - v133) * v128);
              goto LABEL_258;
            }
          }
        }
        else
        {
          v129 = 0;
        }
        v131 = *(unsigned __int8 *)(v118 + v129 + 11);
        v128 = 0.0;
        if (v131 == 2)
          goto LABEL_256;
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v118, 0x1BAu, v131, 0, v127);
LABEL_258:
        v326 = v126;
        *(_BYTE *)(v61 + 136) = v76;
        *(_BYTE *)(v61 + 272) = v76;
        if (v76)
        {
          v135 = *(_QWORD *)(*(_QWORD *)(v61 + 8) + 152);
          if (*((_BYTE *)v2 + 76))
            v136 = v328 == 0;
          else
            v136 = 1;
          v137 = !v136;
          v318 = *((_QWORD *)v2 + 10);
          v319 = *((_QWORD *)v2 + 12);
          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v138 = (void *)objc_claimAutoreleasedReturnValue();
          v139 = objc_msgSend(v138, "enableTileClippingDebug");

          if (v318)
            v140 = v137;
          else
            v140 = 0;
          v315 = *(ggl::PipelineSetup **)(v61 + 328);
          WORD1(v141) = 0;
          v312 = *((_BYTE *)v2 + 88);
          v313 = *(_BYTE *)(v135 + 136);
          LOBYTE(v141) = v313;
          BYTE1(v141) = v312;
          v317 = v140;
          BYTE4(v141) = v140;
          v314 = *((_BYTE *)v2 + 165);
          BYTE5(v141) = v319 != 0;
          BYTE6(v141) = v139;
          HIBYTE(v141) = v314;
          v142 = *(_QWORD *)(v135 + 64);
          v143 = vceqzq_s8((int8x16_t)v141);
          v144 = vmovl_s8(*(int8x8_t *)v143.i8);
          v145 = vmovl_high_s16(v144);
          v146.i64[0] = v145.u32[2];
          v146.i64[1] = v145.u32[3];
          v147 = v146;
          v148 = vmovl_high_s8(v143);
          v149 = vmovl_high_s16(v148);
          v146.i64[0] = v149.u32[2];
          v146.i64[1] = v149.u32[3];
          v150 = v146;
          v151 = vmovl_s16(*(int16x4_t *)v144.i8);
          v146.i64[0] = v151.u32[2];
          v146.i64[1] = v151.u32[3];
          v152 = v146;
          v153 = vmovl_s16(*(int16x4_t *)v148.i8);
          v146.i64[0] = v153.u32[2];
          v146.i64[1] = v153.u32[3];
          v154 = v146;
          v146.i64[0] = v145.u32[0];
          v146.i64[1] = v145.u32[1];
          v155 = v146;
          v146.i64[0] = v149.u32[0];
          v146.i64[1] = v149.u32[1];
          v156 = v146;
          v146.i64[0] = v151.u32[0];
          v146.i64[1] = v151.u32[1];
          v157 = v146;
          v146.i64[0] = v153.u32[0];
          v146.i64[1] = v153.u32[1];
          v158 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v157), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v146)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v155), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v156))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v152), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v154)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v147), vbicq_s8((int8x16_t)xmmword_19FFB3080, v150)))));
          v159 = v158;
          v161 = (uint64_t **)(v142 + 104);
          v160 = *(_QWORD **)(v142 + 104);
          v316 = v137;
          if (!v160)
            goto LABEL_279;
          v162 = (uint64_t **)(v142 + 104);
          do
          {
            v163 = v160[4];
            _CF = v163 >= v158;
            if (v163 >= v158)
              v165 = v160;
            else
              v165 = v160 + 1;
            if (_CF)
              v162 = (uint64_t **)v160;
            v160 = (_QWORD *)*v165;
          }
          while (*v165);
          if (v162 == v161 || v158 < (unint64_t)v162[4])
          {
LABEL_279:
            v166 = (std::__shared_weak_count *)operator new(0x198uLL);
            v166->__shared_owners_ = 0;
            v167 = (unint64_t *)&v166->__shared_owners_;
            v166->__shared_weak_owners_ = 0;
            v166->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF108;
            v168 = *(_OWORD *)(v142 + 32);
            v339 = *(_OWORD *)(v142 + 16);
            v340 = v168;
            if ((v169 & 1) == 0)
            {
              if ((_DWORD)v304)
              {
                if ((v305 & 1) == 0)
                {
                  if ((_DWORD)v304)
                  {
                    if ((v308 & 1) == 0
                    {
                      if ((v310 & 1) == 0
                      {
                        ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinciTraffic::defaultVboReflection;
                      }
                      ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::attributesReflection(void)::r;
                      *(_QWORD *)algn_1EE585290 = 1;
                    }
                    ggl::DaVinciTraffic::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinciTraffic::DefaultVbo>::typedReflection(void)::r;
                    unk_1EE585210 = &ggl::DaVinciTraffic::pipelineDataBasePipelineDeviceStructs(void)::ref;
                    qword_1EE585218 = 0;
                    if ((v309 & 1) == 0
                    {
                      ggl::DaVinciTraffic::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
                      *(_QWORD *)algn_1EE585258 = ggl::Tile::Transform::reflection(void)::reflection;
                      qword_1EE585260 = (uint64_t)ggl::Tile::Clipping::reflection(void)::reflection;
                      unk_1EE585268 = ggl::DaVinciTraffic::Style::reflection(void)::reflection;
                    }
                    qword_1EE585220 = (uint64_t)&ggl::DaVinciTraffic::pipelineDataBasePipelineConstantStructs(void)::ref;
                    unk_1EE585228 = xmmword_19FFB2F50;
                  }
                }
                ggl::DaVinciTraffic::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinciTraffic::BasePipelineSetup::typedReflection(void)::ref;
                ggl::DaVinciTrafficShader::typedReflection(v304);
                qword_1EE576968 = (uint64_t)&ggl::DaVinciTrafficShader::typedReflection(void)::ref;
                if ((v306 & 1) == 0
                {
                  ggl::DaVinciTraffic::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
                  *(_QWORD *)algn_1EE576A78 = 0;
                  qword_1EE576A80 = (uint64_t)"";
                  dword_1EE576A88 = 0;
                  qword_1EE576A90 = (uint64_t)&ggl::DaVinciTraffic::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
                  unk_1EE576A98 = 6;
                }
                qword_1EE576970 = (uint64_t)&ggl::DaVinciTraffic::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
                *(_QWORD *)algn_1EE576978 = 1;
                qword_1EE576980 = 0;
                unk_1EE576988 = 2;
                qword_1EE576990 = (uint64_t)&ggl::DaVinciTraffic::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
                unk_1EE576998 = 0;
                if ((v307 & 1) == 0
                {
                  ggl::DaVinciTraffic::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
                  *(_QWORD *)algn_1EE5769B8 = 0;
                  qword_1EE5769C0 = (uint64_t)"view";
                  dword_1EE5769C8 = 3;
                  qword_1EE5769D0 = (uint64_t)&ggl::DaVinciTraffic::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
                  unk_1EE5769D8 = xmmword_19FFB35A0;
                  qword_1EE5769E8 = 1;
                  qword_1EE5769F0 = (uint64_t)"transform";
                  dword_1EE5769F8 = 3;
                  qword_1EE576A00 = (uint64_t)&ggl::DaVinciTraffic::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
                  unk_1EE576A08 = xmmword_19FFB3660;
                  qword_1EE576A18 = 2;
                  qword_1EE576A20 = (uint64_t)"tileClipping";
                  dword_1EE576A28 = 3;
                  qword_1EE576A30 = (uint64_t)&ggl::DaVinciTraffic::pipelineStateBasePipelineConstantTileClippingBinding(void)::reflection;
                  unk_1EE576A38 = xmmword_19FFB3000;
                  qword_1EE576A48 = 3;
                  unk_1EE576A50 = "style";
                  dword_1EE576A58 = 3;
                  qword_1EE576A60 = (uint64_t)&ggl::DaVinciTraffic::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
                  unk_1EE576A68 = 7;
                }
                qword_1EE5769A0 = (uint64_t)&ggl::DaVinciTraffic::pipelineStateBasePipelineConstantStructBinding(void)::ref;
                *(_QWORD *)algn_1EE5769A8 = 4;
              }
            }
            v170 = *(std::__shared_weak_count_vtbl **)v142;
            v171 = *(std::__shared_weak_count **)(v142 + 8);
            if (v171)
            {
              v172 = (unint64_t *)&v171->__shared_owners_;
              do
                v173 = __ldxr(v172);
              while (__stxr(v173 + 1, v172));
            }
            *(_OWORD *)v341 = *(_OWORD *)(v142 + 48);
            *(_OWORD *)&v341[12] = *(_OWORD *)(v142 + 60);
            v174 = *(_OWORD *)(v142 + 76);
            v175 = *(_BYTE *)(v142 + 92);
            LODWORD(v166[2].__shared_owners_) = 0;
            v166[1].__shared_weak_owners_ = 0;
            v166[2].__vftable = 0;
            v166[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
            v166[1].__shared_owners_ = 0;
            v166[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinciTraffic::BasePipelineState::typedReflection(void)::ref;
            v166[3].__vftable = v170;
            v166[3].__shared_owners_ = (uint64_t)v171;
            if (v171)
            {
              v176 = (unint64_t *)&v171->__shared_owners_;
              do
                v177 = __ldxr(v176);
              while (__stxr(v177 + 1, v176));
            }
            LOBYTE(v166[5].__shared_weak_owners_) = 0;
            *(_OWORD *)((char *)&v166[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
            *(uint64_t *)((char *)&v166[6].__shared_owners_ + 4) = 0;
            *(std::__shared_weak_count_vtbl **)((char *)&v166[7].__vftable + 4) = 0;
            *(uint64_t *)((char *)&v166[6].__shared_weak_owners_ + 4) = 0;
            LOBYTE(v166[7].__shared_weak_owners_) = 0;
            *(_OWORD *)((char *)&v166[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
            *(uint64_t *)((char *)&v166[8].__shared_owners_ + 4) = 0;
            *(std::__shared_weak_count_vtbl **)((char *)&v166[9].__vftable + 4) = 0;
            *(uint64_t *)((char *)&v166[8].__shared_weak_owners_ + 4) = 0;
            LOBYTE(v166[9].__shared_weak_owners_) = 0;
            *(_OWORD *)((char *)&v166[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
            *(uint64_t *)((char *)&v166[10].__shared_owners_ + 4) = 0;
            *(std::__shared_weak_count_vtbl **)((char *)&v166[11].__vftable + 4) = 0;
            *(uint64_t *)((char *)&v166[10].__shared_weak_owners_ + 4) = 0;
            v178 = v340;
            *(_OWORD *)&v166[11].__shared_weak_owners_ = v339;
            *(_OWORD *)&v166[12].__shared_owners_ = v178;
            LOBYTE(v166[13].__vftable) = 0;
            v166[16].__vftable = 0;
            *(_OWORD *)&v166[14].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v166[15].__shared_owners_ = 0u;
            *(_OWORD *)&v166[13].__shared_owners_ = 0u;
            v166[14].std::__shared_count = 0u;
            v166[16].__shared_owners_ = 0x100000001;
            LOBYTE(v166[16].__shared_weak_owners_) = 0;
            *(std::__shared_count *)((char *)&v166[4].std::__shared_count + 4) = *(std::__shared_count *)&v341[12];
            *(_OWORD *)&v166[3].__shared_weak_owners_ = *(_OWORD *)v341;
            *(_OWORD *)((char *)&v166[4].__shared_weak_owners_ + 4) = v174;
            BYTE4(v166[5].__shared_owners_) = v175;
            if (v171)
            {
              v179 = (unint64_t *)&v171->__shared_owners_;
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (!v180)
              {
                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                std::__shared_weak_count::__release_weak(v171);
              }
            }
            LOBYTE(v166[13].__shared_weak_owners_) = v313;
            BYTE1(v166[13].__shared_weak_owners_) = v312;
            BYTE5(v166[13].__shared_weak_owners_) = v319 != 0;
            BYTE6(v166[13].__shared_weak_owners_) = v139;
            *(_WORD *)((char *)&v166[13].__shared_weak_owners_ + 7) = 0;
            BYTE2(v166[14].__vftable) = v314;
            WORD1(v166[13].__shared_weak_owners_) = 0;
            BYTE4(v166[13].__shared_weak_owners_) = v317;
            BYTE1(v166[14].__vftable) = 0;
            BYTE3(v166[14].__vftable) = 0;
            BYTE6(v166[14].__shared_weak_owners_) = 0;
            v181 = (int8x16_t)v166[15].std::__shared_count;
            v182 = *(int8x16_t *)&v166[15].__shared_weak_owners_;
            v183 = vceqzq_s8(*(int8x16_t *)&v166[13].__shared_weak_owners_);
            v184 = vmovl_high_s8(v183);
            v185 = vmovl_s16(*(int16x4_t *)v184.i8);
            v186.i64[0] = v185.u32[0];
            v186.i64[1] = v185.u32[1];
            v187 = v186;
            v188 = vmovl_s8(*(int8x8_t *)v183.i8);
            v189 = vmovl_s16(*(int16x4_t *)v188.i8);
            v186.i64[0] = v189.u32[0];
            v186.i64[1] = v189.u32[1];
            v190 = v186;
            v191 = vmovl_high_s16(v184);
            v186.i64[0] = v191.u32[0];
            v186.i64[1] = v191.u32[1];
            v192 = v186;
            v193 = vmovl_high_s16(v188);
            v186.i64[0] = v193.u32[0];
            v186.i64[1] = v193.u32[1];
            v194 = v186;
            v186.i64[0] = v185.u32[2];
            v186.i64[1] = v185.u32[3];
            v195 = v186;
            v186.i64[0] = v189.u32[2];
            v186.i64[1] = v189.u32[3];
            v196 = v186;
            v186.i64[0] = v191.u32[2];
            v186.i64[1] = v191.u32[3];
            v197 = v186;
            v186.i64[0] = v193.u32[2];
            v186.i64[1] = v193.u32[3];
            v198 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v186);
            v199 = vceqzq_s8(*(int8x16_t *)&v166[14].__shared_owners_);
            v166[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6A28;
            v200 = vmovl_high_s8(v199);
            v201 = vmovl_s16(*(int16x4_t *)v200.i8);
            v186.i64[0] = v201.u32[0];
            v186.i64[1] = v201.u32[1];
            v202 = v186;
            v203 = vmovl_s8(*(int8x8_t *)v199.i8);
            v204 = vmovl_s16(*(int16x4_t *)v203.i8);
            v186.i64[0] = v204.u32[0];
            v186.i64[1] = v204.u32[1];
            v205 = v186;
            v206 = vmovl_high_s16(v200);
            v186.i64[0] = v206.u32[0];
            v186.i64[1] = v206.u32[1];
            v207 = v186;
            v208 = vmovl_high_s16(v203);
            v186.i64[0] = v208.u32[0];
            v186.i64[1] = v208.u32[1];
            v209 = v186;
            v186.i64[0] = v201.u32[2];
            v186.i64[1] = v201.u32[3];
            v210 = v186;
            v186.i64[0] = v204.u32[2];
            v186.i64[1] = v204.u32[3];
            v211 = v186;
            v186.i64[0] = v206.u32[2];
            v186.i64[1] = v206.u32[3];
            v212 = v186;
            v186.i64[0] = v208.u32[2];
            v186.i64[1] = v208.u32[3];
            v213 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v202), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v187));
            v214 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v205), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v190));
            v215 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v207), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v192));
            v216 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v209), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v194));
            v217 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v210), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v195));
            v218 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v211), vbicq_s8((int8x16_t)xmmword_19FFB3090, v196));
            v219 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30F0, v212), vbicq_s8((int8x16_t)xmmword_19FFB3080, v197));
            v220 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v186), v198);
            v221 = vceqzq_s8(v181);
            v222 = vmovl_s8(*(int8x8_t *)v221.i8);
            v223 = vmovl_high_s16(v222);
            v186.i64[0] = v223.i32[2];
            v186.i64[1] = v223.i32[3];
            v224 = v186;
            v225 = vmovl_high_s8(v221);
            v226 = vmovl_high_s16(v225);
            v186.i64[0] = v226.i32[2];
            v186.i64[1] = v226.i32[3];
            v227 = v186;
            v228 = vmovl_s16(*(int16x4_t *)v222.i8);
            v186.i64[0] = v228.i32[2];
            v186.i64[1] = v228.i32[3];
            v229 = v186;
            v230 = vmovl_s16(*(int16x4_t *)v225.i8);
            v186.i64[0] = v230.i32[2];
            v186.i64[1] = v230.i32[3];
            v231 = v186;
            v186.i64[0] = v223.i32[0];
            v186.i64[1] = v223.i32[1];
            v232 = v186;
            v186.i64[0] = v226.i32[0];
            v186.i64[1] = v226.i32[1];
            v233 = v186;
            v186.i64[0] = v228.i32[0];
            v186.i64[1] = v228.i32[1];
            v234 = v186;
            v186.i64[0] = v230.i32[0];
            v186.i64[1] = v230.i32[1];
            v235 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v186);
            v236 = vceqzq_s8(v182);
            v237 = vmovl_high_s8(v236);
            v238 = vmovl_s16(*(int16x4_t *)v237.i8);
            v186.i64[0] = v238.i32[0];
            v186.i64[1] = v238.i32[1];
            v239 = v186;
            v240 = vmovl_s8(*(int8x8_t *)v236.i8);
            v241 = vmovl_s16(*(int16x4_t *)v240.i8);
            v186.i64[0] = v241.i32[0];
            v186.i64[1] = v241.i32[1];
            v242 = v186;
            v243 = vmovl_high_s16(v237);
            v186.i64[0] = v243.i32[0];
            v186.i64[1] = v243.i32[1];
            v244 = v186;
            v245 = vmovl_high_s16(v240);
            v186.i64[0] = v245.i32[0];
            v186.i64[1] = v245.i32[1];
            v246 = v186;
            v186.i64[0] = v238.i32[2];
            v186.i64[1] = v238.i32[3];
            v247 = v186;
            v186.i64[0] = v241.i32[2];
            v186.i64[1] = v241.i32[3];
            v248 = v186;
            v186.i64[0] = v243.i32[2];
            v186.i64[1] = v243.i32[3];
            v249 = v186;
            v186.i64[0] = v245.i32[2];
            v186.i64[1] = v245.i32[3];
            v166[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v242), vbicq_s8((int8x16_t)xmmword_19FFB3170, v234)), v214), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v239), v235), v213)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v246), vbicq_s8((int8x16_t)xmmword_19FFB3190, v232)), v216),
                                                           vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v244), vbicq_s8((int8x16_t)xmmword_19FFB3180, v233)), v215))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v248), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v229)), v218), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v247), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v231)), v217)), vorrq_s8(vorrq_s8(vorrq_s8(
                                                               vbicq_s8((int8x16_t)xmmword_19FFB31E0, v186),
                                                               vbicq_s8((int8x16_t)xmmword_19FFB31D0, v224)),
                                                             v220),
                                                           vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v249), vbicq_s8((int8x16_t)xmmword_19FFB31C0, v227)), v219)))));
            LOBYTE(v166[13].__vftable) = 1;
            *(_QWORD *)v341 = v166 + 1;
            *(_QWORD *)&v341[8] = v166;
            *(_QWORD *)&v339 = v159;
            *((_QWORD *)&v339 + 1) = v166 + 1;
            *(_QWORD *)&v340 = v166;
            do
              v250 = __ldxr(v167);
            while (__stxr(v250 + 1, v167));
            v251 = *v161;
            v252 = (uint64_t **)(v142 + 104);
            v2 = v311;
            if (*v161)
            {
              while (1)
              {
                while (1)
                {
                  v252 = (uint64_t **)v251;
                  v253 = v251[4];
                  if (v159 >= v253)
                    break;
                  v251 = *v252;
                  v161 = v252;
                  if (!*v252)
                    goto LABEL_300;
                }
                if (v253 >= v159)
                  break;
                v251 = v252[1];
                if (!v251)
                {
                  v161 = v252 + 1;
                  goto LABEL_300;
                }
              }
              v256 = v315;
            }
            else
            {
LABEL_300:
              v254 = (uint64_t *)operator new(0x38uLL);
              v254[4] = v159;
              v254[5] = (uint64_t)&v166[1];
              v254[6] = (uint64_t)v166;
              *((_QWORD *)&v339 + 1) = 0;
              *(_QWORD *)&v340 = 0;
              *v254 = 0;
              v254[1] = 0;
              v254[2] = (uint64_t)v252;
              *v161 = v254;
              v255 = **(_QWORD **)(v142 + 96);
              if (v255)
              {
                *(_QWORD *)(v142 + 96) = v255;
                v254 = *v161;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v142 + 104), v254);
              ++*(_QWORD *)(v142 + 112);
              v166 = (std::__shared_weak_count *)v340;
              v256 = v315;
              if (!(_QWORD)v340)
              {
LABEL_313:
                v257 = *(uint64_t **)v341;
                v258 = *(std::__shared_weak_count **)&v341[8];
                v261 = *(_QWORD *)&v341[8] == 0;
                if (*(_QWORD *)&v341[8])
                  goto LABEL_314;
                goto LABEL_316;
              }
            }
            v262 = (unint64_t *)&v166->__shared_owners_;
            do
              v263 = __ldaxr(v262);
            while (__stlxr(v263 - 1, v262));
            if (!v263)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
            goto LABEL_313;
          }
          v257 = v162[5];
          v258 = (std::__shared_weak_count *)v162[6];
          *(_QWORD *)v341 = v257;
          *(_QWORD *)&v341[8] = v258;
          if (v258)
          {
            v259 = (unint64_t *)&v258->__shared_owners_;
            v256 = v315;
            do
              v260 = __ldxr(v259);
            while (__stxr(v260 + 1, v259));
            v261 = v258 == 0;
LABEL_314:
            v264 = (unint64_t *)&v258->__shared_owners_;
            do
              v265 = __ldxr(v264);
            while (__stxr(v265 + 1, v264));
LABEL_316:
            if (v257)
            {
LABEL_317:
              if (*(_QWORD *)v257[5] != *((_QWORD *)v256 + 1))
                goto LABEL_318;
              v269 = (uint64_t *)*((_QWORD *)v256 + 2);
              if (v269 && v269 != v257)
                ggl::PipelineSetup::resetData((uint64_t)v256);
              if (!v261)
              {
                v270 = (unint64_t *)&v258->__shared_owners_;
                do
                  v271 = __ldxr(v270);
                while (__stxr(v271 + 1, v270));
              }
              v266 = (std::__shared_weak_count *)*((_QWORD *)v256 + 3);
              *((_QWORD *)v256 + 2) = v257;
              *((_QWORD *)v256 + 3) = v258;
              if (!v266)
                goto LABEL_332;
              v272 = (unint64_t *)&v266->__shared_owners_;
              do
                v268 = __ldaxr(v272);
              while (__stlxr(v268 - 1, v272));
LABEL_331:
              if (v268)
                goto LABEL_332;
              ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
              std::__shared_weak_count::__release_weak(v266);
              if (v261)
                goto LABEL_338;
LABEL_333:
              v273 = (unint64_t *)&v258->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                std::__shared_weak_count::__release_weak(v258);
              }
              goto LABEL_338;
            }
          }
          else
          {
            v261 = 1;
            v256 = v315;
            if (v257)
              goto LABEL_317;
          }
LABEL_318:
          v266 = (std::__shared_weak_count *)*((_QWORD *)v256 + 3);
          *((_QWORD *)v256 + 2) = 0;
          *((_QWORD *)v256 + 3) = 0;
          if (v266)
          {
            v267 = (unint64_t *)&v266->__shared_owners_;
            do
              v268 = __ldaxr(v267);
            while (__stlxr(v268 - 1, v267));
            goto LABEL_331;
          }
LABEL_332:
          if (!v261)
            goto LABEL_333;
LABEL_338:
          v275 = *(std::__shared_weak_count **)&v341[8];
          if (*(_QWORD *)&v341[8])
          {
            v276 = (unint64_t *)(*(_QWORD *)&v341[8] + 8);
            do
              v277 = __ldaxr(v276);
            while (__stlxr(v277 - 1, v276));
            if (!v277)
            {
              ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
              std::__shared_weak_count::__release_weak(v275);
            }
          }
          v278 = v318;
          if (!v317)
            v278 = 0;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 328) + 96) + 8) = v278;
          v279 = *(_QWORD *)(v61 + 328);
          v280 = *(_QWORD *)(v279 + 64);
          *(_QWORD *)(v280 + 32) = v319;
          *(_QWORD *)(v280 + 40) = 0;
          v281 = *(_QWORD *)(v279 + 160);
          v282 = *(std::__shared_weak_count **)(v281 + 40);
          *(_QWORD *)(v281 + 32) = 0;
          *(_QWORD *)(v281 + 40) = 0;
          if (v282)
          {
            v283 = (unint64_t *)&v282->__shared_owners_;
            do
              v284 = __ldaxr(v283);
            while (__stlxr(v284 - 1, v283));
            if (!v284)
            {
              ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
              std::__shared_weak_count::__release_weak(v282);
            }
          }
          v285 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 8) + 152) + 128);
          v286 = *(_DWORD *)v285;
          v287 = *((float *)v2 + 17);
          v288 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v61 + 328) + 64) + 48);
          v289 = v288[1];
          if (v289)
          {
            v290 = (float32x4_t *)v288[9];
            if (v316)
              goto LABEL_352;
          }
          else
          {
            v290 = 0;
            if (v316)
LABEL_352:
              v290[1] = v329;
          }
          v291 = v287 * (float)v286;
          v293 = *((float *)&v324 + 1);
          v292 = *(float *)&v324;
          if (!*(_BYTE *)(v61 + 320))
            v292 = 0.0;
          v290[2].f32[2] = v292;
          _S1 = (float)(v326 + (float)(*(float *)(v285 + 8) * v293)) * 0.5;
          __asm { FCVT            H1, S1 }
          v290[2].i16[6] = LOWORD(_S1);
          *v290 = v327;
          v290[2].f32[0] = (float)(v293 * 0.5) * *(float *)(v285 + 8);
          v290[2].f32[1] = v291;
          if (*((_BYTE *)v2 + 163))
          {
            v290[2].i16[7] = 0;
            if (v289)
              goto LABEL_357;
          }
          else
          {
            _S0 = fminf(fmaxf((float)(*((float *)v2 + 39) * 0.14286) + -1.7143, 0.0), 1.0);
            __asm { FCVT            H0, S0 }
            v290[2].i32[2] = 0;
            v290[2].i16[7] = LOWORD(_S0);
            if (v289)
            {
LABEL_357:
              if (v288[8] > v289)
                v289 = v288[8];
              v288[7] = 0;
              v288[8] = v289;
            }
          }
          if (*(_BYTE *)(v61 + 136))
          {
            *(_DWORD *)(v61 + 56) = *((unsigned __int8 *)v2 + 57);
            if (*((_BYTE *)v2 + 164))
            {
              md::RoadBatch::setRenderOrdersForStrokeAndFill(1, 0, 0, 0, 0, v61 + 16, *(_DWORD *)(v61 + 316), 1, &v330, (uint64_t)v2, ~*(_BYTE *)(v61 + 312));
            }
            else
            {
              if (v334)
              {
                v297 = v330[3];
                if ((int)*((float *)v2 + 39) >= 0x17)
                  v298 = 23;
                else
                  v298 = (int)*((float *)v2 + 39);
                v299 = *(float **)v297;
                if (*(_QWORD *)v297
                  && (v300 = *v299, LODWORD(v299) = *v299 == 1.0, *(_BYTE *)(v297 + 10))
                  && (v300 != 0.0 ? (v301 = v300 == 1.0) : (v301 = 1), !v301)
                  || (v302 = *(unsigned __int8 *)(v297 + v299 + 11), v302 == 2))
                {
                  LOBYTE(v339) = 1;
                  v341[0] = 1;
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v297, 0x6Au, v298, 0, &v339);
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v297, 0x6Au, v298, 1u, v341);
                }
                else
                {
                  gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v330[3], 0x6Au, v298, v302, 0);
                }
              }
              *(_QWORD *)(v61 + 64) = (*(unsigned __int8 *)(v61 + 312) ^ 0xFFFFFFFFLL) + *((_QWORD *)v2 + 18);
            }
          }
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v330);
LABEL_100:
        result = gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v335);
LABEL_101:
        if (++v59 == v323)
          return result;
      }
      v84 = 0;
LABEL_146:
      v86 = *(unsigned __int8 *)(v80 + v84 + 11);
      if (v86 != 2)
        goto LABEL_149;
      goto LABEL_147;
    }
  }
  return result;
}

void sub_19F99FB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a57);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t karo::Job::cancel(karo::Job *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  pthread_mutex_t ***v7;
  uint64_t result;

  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 2u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  pthread_mutex_lock(*((pthread_mutex_t **)this + 7));
  v3 = *((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 5);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = v3 + 32 * v4;
      if (*(_BYTE *)(v6 + 25))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8));
        v3 = *((_QWORD *)this + 4);
        v2 = *((_QWORD *)this + 5);
      }
      v4 = v5++;
    }
    while (v4 < (v2 - v3) >> 5);
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 7));
LABEL_7:
  pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
  while (1)
  {
    v7 = (pthread_mutex_t ***)*((_QWORD *)this + 8);
    if (v7 == *((pthread_mutex_t ****)this + 9))
      break;
    if ((karo::Job::setUnblockedBy(this, *v7, 0) & 1) == 0)
    {
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
      usleep(0x3E8u);
      goto LABEL_7;
    }
  }
  result = pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
  atomic_load((unint64_t *)this + 3);
  return result;
}

uint64_t karo::Job::setPriority(uint64_t this, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;

  v2 = atomic_load((unsigned int *)(this + 16));
  if (v2 != (_DWORD)a2)
  {
    v4 = this;
    pthread_mutex_lock(*(pthread_mutex_t **)(this + 56));
    v6 = *(_QWORD *)(v4 + 32);
    v5 = *(_QWORD *)(v4 + 40);
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = v6 + 32 * v7;
        if (*(_BYTE *)(v9 + 24))
        {
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 8) + 24))(*(_QWORD *)(v9 + 8), a2);
          v6 = *(_QWORD *)(v4 + 32);
          v5 = *(_QWORD *)(v4 + 40);
        }
        v7 = v8++;
      }
      while (v7 < (v5 - v6) >> 5);
    }
    this = pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 56));
    v10 = atomic_load((unint64_t *)(v4 + 24));
    atomic_store(a2, (unsigned int *)(v4 + 16));
    if (v10)
      atomic_store(1u, (unsigned __int8 *)(v10 + 96));
  }
  return this;
}

uint64_t karo::Job::setUnblockedBy(karo::Job *this, pthread_mutex_t **a2, int a3)
{
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pthread_mutex_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v5 = (pthread_mutex_t *)*((_QWORD *)this + 11);
  if (a3)
  {
    pthread_mutex_lock(v5);
    pthread_mutex_lock(a2[15]);
    goto LABEL_3;
  }
  if (!pthread_mutex_trylock(v5))
  {
    if (pthread_mutex_trylock(a2[15]))
    {
      v11 = 0;
LABEL_64:
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
      return v11;
    }
LABEL_3:
    v6 = *((_QWORD *)this + 8);
    v7 = *((_QWORD *)this + 9) - v6;
    v8 = v7 >> 3;
    v9 = (v7 >> 3);
    if ((v7 & 0x7FFFFFFF8) == 0)
      goto LABEL_14;
    v10 = 0;
    while (*(pthread_mutex_t ***)(v6 + 8 * v10) != a2)
    {
      if (v9 == ++v10)
        goto LABEL_14;
    }
    v9 = (v8 - 1);
    *(_QWORD *)(v6 + 8 * v10) = *(_QWORD *)(v6 + 8 * v9);
    v6 = *((_QWORD *)this + 8);
    v8 = (*((_QWORD *)this + 9) - v6) >> 3;
    if (v9 > v8)
    {
      std::vector<altitude::TextureMap *>::__append((uint64_t)this + 64, v9 - v8);
    }
    else
    {
LABEL_14:
      if (v8 > v9)
        *((_QWORD *)this + 9) = v6 + 8 * v9;
    }
    v12 = a2[12];
    v13 = (char *)a2[13] - (char *)v12;
    v14 = v13 >> 3;
    v15 = (v13 >> 3);
    if ((v13 & 0x7FFFFFFF8) == 0)
      goto LABEL_23;
    v16 = 0;
    while (*((karo::Job **)&v12->__sig + v16) != this)
    {
      if (v15 == ++v16)
        goto LABEL_23;
    }
    v15 = (v14 - 1);
    *(&v12->__sig + v16) = *(&v12->__sig + v15);
    v12 = a2[12];
    v14 = ((char *)a2[13] - (char *)v12) >> 3;
    if (v15 > v14)
    {
      std::vector<altitude::TextureMap *>::__append((uint64_t)(a2 + 12), v15 - v14);
    }
    else
    {
LABEL_23:
      if (v14 > v15)
        a2[13] = (pthread_mutex_t *)((char *)v12 + 8 * v15);
    }
    v17 = atomic_load((unint64_t *)this + 3);
    if (v17 && *((_QWORD *)this + 8) == *((_QWORD *)this + 9))
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(v17 + 16));
      v18 = *(_QWORD **)(v17 + 112);
      if (!v18)
        goto LABEL_38;
      v19 = *((_DWORD *)this + 5);
      v20 = (uint64_t *)(v17 + 112);
      do
      {
        v21 = *(_DWORD *)(v18[4] + 20);
        v22 = v21 >= v19;
        if (v21 >= v19)
          v23 = v18;
        else
          v23 = v18 + 1;
        if (v22)
          v20 = v18;
        v18 = (_QWORD *)*v23;
      }
      while (*v23);
      if (v20 == (uint64_t *)(v17 + 112) || v19 < *(_DWORD *)(v20[4] + 20))
LABEL_38:
        v20 = (uint64_t *)(v17 + 112);
      v24 = v20[6];
      v25 = atomic_load((unsigned int *)(v20[5] + 16));
      v43 = v25;
      v26 = v20[5];
      v44 = v26;
      v45 = (std::__shared_weak_count *)v24;
      if (v24)
      {
        v27 = (unint64_t *)(v24 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(_QWORD *)(v17 + 80);
      if (v29 >= *(_QWORD *)(v17 + 88))
      {
        v30 = std::vector<karo::JobManager::QueueElement>::__push_back_slow_path<karo::JobManager::QueueElement>((char **)(v17 + 72), (uint64_t)&v43);
        v31 = v45;
        *(_QWORD *)(v17 + 80) = v30;
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
      else
      {
        *(_DWORD *)v29 = v25;
        *(_QWORD *)(v29 + 8) = v26;
        *(_QWORD *)(v29 + 16) = v24;
        *(_QWORD *)(v17 + 80) = v29 + 24;
      }
      v34 = (uint64_t *)v20[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        v36 = v20;
        do
        {
          v35 = (uint64_t *)v36[2];
          v37 = *v35 == (_QWORD)v36;
          v36 = v35;
        }
        while (!v37);
      }
      if (*(uint64_t **)(v17 + 104) == v20)
        *(_QWORD *)(v17 + 104) = v35;
      v38 = *(uint64_t **)(v17 + 112);
      --*(_QWORD *)(v17 + 120);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v38, v20);
      v39 = (std::__shared_weak_count *)v20[6];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      operator delete(v20);
      atomic_store(1u, (unsigned __int8 *)(v17 + 96));
      pthread_cond_signal(*(pthread_cond_t **)(v17 + 24));
      pthread_mutex_unlock(*(pthread_mutex_t **)(v17 + 16));
    }
    pthread_mutex_unlock(a2[15]);
    v11 = 1;
    goto LABEL_64;
  }
  return 0;
}

uint64_t karo::Job::Job(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v3;
  pthread_mutex_t *v4;
  pthread_mutex_t *v5;
  pthread_mutex_t *v6;
  pthread_cond_t *v7;
  pthread_mutex_t *v8;
  pthread_mutexattr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E42C3498;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  v3 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v3, &v10);
  pthread_mutexattr_destroy(&v10);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  v4 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v4, &v10);
  pthread_mutexattr_destroy(&v10);
  *(_QWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  v5 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v5, &v10);
  pthread_mutexattr_destroy(&v10);
  *(_QWORD *)(a1 + 120) = v5;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  v6 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v6, &v10);
  pthread_mutexattr_destroy(&v10);
  *(_QWORD *)(a1 + 136) = v6;
  v7 = (pthread_cond_t *)operator new();
  *(_QWORD *)(a1 + 144) = v7;
  pthread_cond_init(v7, 0);
  *(_QWORD *)(a1 + 152) = 0;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_settype(&v10, 2);
  v8 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v8, &v10);
  pthread_mutexattr_destroy(&v10);
  *(_QWORD *)(a1 + 152) = v8;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void karo::Job::~Job(karo::Job *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  *(_QWORD *)this = off_1E42C3498;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 7));
  v2 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (unsigned int *)(*(_QWORD *)(v2 + 32 * v3 + 8) + 128);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      v2 = *((_QWORD *)this + 4);
      v3 = ++v4;
    }
    while (v4 < (unint64_t)((*((_QWORD *)this + 5) - v2) >> 5));
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 7));
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 19));
  v7 = *((_QWORD *)this + 19);
  if (v7)
    MEMORY[0x1A1AF4E00](v7, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 19) = 0;
  pthread_cond_destroy(*((pthread_cond_t **)this + 18));
  v8 = *((_QWORD *)this + 18);
  if (v8)
    MEMORY[0x1A1AF4E00](v8, 0x1000C40EED21634);
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 17));
  v9 = *((_QWORD *)this + 17);
  if (v9)
    MEMORY[0x1A1AF4E00](v9, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 17) = 0;
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 15));
  v10 = *((_QWORD *)this + 15);
  if (v10)
    MEMORY[0x1A1AF4E00](v10, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 15) = 0;
  v11 = (void *)*((_QWORD *)this + 12);
  if (v11)
  {
    *((_QWORD *)this + 13) = v11;
    operator delete(v11);
  }
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 11));
  v12 = *((_QWORD *)this + 11);
  if (v12)
    MEMORY[0x1A1AF4E00](v12, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 11) = 0;
  v13 = (void *)*((_QWORD *)this + 8);
  if (v13)
  {
    *((_QWORD *)this + 9) = v13;
    operator delete(v13);
  }
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 7));
  v14 = *((_QWORD *)this + 7);
  if (v14)
    MEMORY[0x1A1AF4E00](v14, 0x1000C40FA0F61DDLL);
  *((_QWORD *)this + 7) = 0;
  v15 = *((_QWORD *)this + 4);
  if (v15)
  {
    v16 = *((_QWORD *)this + 5);
    v17 = (void *)*((_QWORD *)this + 4);
    if (v16 != v15)
    {
      do
      {
        v18 = *(std::__shared_weak_count **)(v16 - 16);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v16 -= 32;
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v15;
    operator delete(v17);
  }
}

uint64_t karo::Job::step(karo::Job *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  karo::Job **v8;
  pthread_mutex_t ***v9;

  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v2 & 2) == 0)
    (*(void (**)(karo::Job *))(*(_QWORD *)this + 32))(this);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v3 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v3 & 2) != 0)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
    v4 = *((_QWORD *)this + 8);
    v5 = *((_QWORD *)this + 9);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
    if (v4 == v5)
    {
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      *((_DWORD *)this + 40) |= 1u;
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    }
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v6 = *((_DWORD *)this + 40);
  result = pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v6 & 1) != 0)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 15));
    while (1)
    {
      v8 = (karo::Job **)*((_QWORD *)this + 12);
      if (v8 == *((karo::Job ***)this + 13))
        break;
      karo::Job::setUnblockedBy(*v8, (pthread_mutex_t **)this, 1);
    }
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 15));
    pthread_cond_signal(*((pthread_cond_t **)this + 18));
LABEL_11:
    pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
    while (1)
    {
      v9 = (pthread_mutex_t ***)*((_QWORD *)this + 8);
      if (v9 == *((pthread_mutex_t ****)this + 9))
        return pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
      if ((karo::Job::setUnblockedBy(this, *v9, 0) & 1) == 0)
      {
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
        usleep(0x3E8u);
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t karo::Job::addBlockingSubJob(uint64_t *a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  int *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int *v34;
  int *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  char *v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t **v90;
  unsigned int v91;
  uint64_t **v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  __int128 v105;

  if (!atomic_load((unsigned int *)(*a2 + 16)))
  {
    v9 = *a2;
    v10 = atomic_load((unsigned int *)a1 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v10);
  }
  pthread_mutex_lock((pthread_mutex_t *)a1[7]);
  if (a3 == -1)
  {
    v13 = *(_OWORD *)a2;
    v14 = a2[1];
    v15 = *a2;
    v16 = -1;
    if (!v14)
      goto LABEL_12;
    goto LABEL_10;
  }
  v11 = (_DWORD *)a1[4];
  v12 = (_DWORD *)a1[5];
  if (v11 != v12)
  {
    while (*v11 != a3)
    {
      v11 += 8;
      if (v11 == v12)
        goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_7:
  v13 = *(_OWORD *)a2;
  v14 = a2[1];
  v15 = *a2;
  v16 = a3;
  if (v14)
  {
LABEL_10:
    v17 = (unint64_t *)(v14 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
LABEL_12:
  if (a4)
    v19 = 257;
  else
    v19 = 1;
  v21 = (int *)a1[5];
  v20 = a1[6];
  if ((unint64_t)v21 >= v20)
  {
    v23 = (char *)a1[4];
    v24 = ((char *)v21 - v23) >> 5;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 59)
      goto LABEL_120;
    v105 = v13;
    v26 = v20 - (_QWORD)v23;
    v27 = (uint64_t)(v20 - (_QWORD)v23) >> 4;
    if (v27 > v25)
      v25 = v27;
    if (v26 >= 0x7FFFFFFFFFFFFFE0)
      v25 = 0x7FFFFFFFFFFFFFFLL;
    if (v25 >> 59)
      goto LABEL_121;
    v28 = 32 * v25;
    v29 = (char *)operator new(32 * v25);
    v30 = &v29[32 * v24];
    *(_DWORD *)v30 = v16;
    v31 = &v29[v28];
    *(_OWORD *)(v30 + 8) = v105;
    *((_WORD *)v30 + 12) = v19;
    v22 = v30 + 32;
    if (v21 == (int *)v23)
    {
      a1[4] = (uint64_t)v30;
      a1[5] = (uint64_t)v22;
      a1[6] = (uint64_t)v31;
    }
    else
    {
      v32 = 0;
      do
      {
        v33 = &v30[v32 * 4];
        v34 = &v21[v32];
        *((_DWORD *)v33 - 8) = v21[v32 - 8];
        *(_OWORD *)(v33 - 24) = *(_OWORD *)&v21[v32 - 6];
        *((_QWORD *)v34 - 3) = 0;
        *((_QWORD *)v34 - 2) = 0;
        *((_WORD *)v33 - 4) = v21[v32 - 2];
        v32 -= 8;
      }
      while (&v21[v32] != (int *)v23);
      v21 = (int *)a1[4];
      v35 = (int *)a1[5];
      a1[4] = (uint64_t)&v30[v32 * 4];
      a1[5] = (uint64_t)v22;
      a1[6] = (uint64_t)v31;
      while (v35 != v21)
      {
        v36 = (std::__shared_weak_count *)*((_QWORD *)v35 - 2);
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(p_shared_owners);
          while (__stlxr(v38 - 1, p_shared_owners));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v35 -= 8;
      }
    }
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v21 = a3;
    *((_QWORD *)v21 + 1) = v15;
    *((_QWORD *)v21 + 2) = v14;
    v22 = v21 + 8;
    *((_WORD *)v21 + 12) = v19;
  }
  a1[5] = (uint64_t)v22;
  v39 = (unsigned int *)(*a2 + 128);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 + 1, v39));
LABEL_39:
  pthread_mutex_unlock((pthread_mutex_t *)a1[7]);
  v41 = *a2;
  pthread_mutex_lock((pthread_mutex_t *)a1[11]);
  pthread_mutex_lock(*(pthread_mutex_t **)(v41 + 120));
  pthread_mutex_lock(*(pthread_mutex_t **)(v41 + 152));
  v42 = *(_DWORD *)(v41 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v41 + 152));
  if ((v42 & 1) != 0)
    goto LABEL_119;
  pthread_mutex_lock((pthread_mutex_t *)a1[19]);
  v43 = *((_DWORD *)a1 + 40);
  pthread_mutex_unlock((pthread_mutex_t *)a1[19]);
  if ((v43 & 2) != 0)
    goto LABEL_119;
  v44 = (char *)a1[8];
  v45 = (char *)a1[9];
  v46 = a1[10];
  if ((unint64_t)v45 < v46)
  {
    *(_QWORD *)v45 = v41;
    v47 = v45 + 8;
    goto LABEL_65;
  }
  v48 = (char *)(v45 - v44);
  v49 = (v45 - v44) >> 3;
  v50 = v49 + 1;
  if ((unint64_t)(v49 + 1) >> 61)
    goto LABEL_120;
  v51 = v46 - (_QWORD)v44;
  if (v51 >> 2 > v50)
    v50 = v51 >> 2;
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
    v52 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 >> 61)
      goto LABEL_121;
    v53 = (char *)operator new(8 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[8 * v49];
  v55 = &v53[8 * v52];
  *(_QWORD *)v54 = v41;
  v47 = v54 + 8;
  if (v44 == v45)
  {
    v57 = v44;
    goto LABEL_63;
  }
  if ((unint64_t)(v48 - 8) >= 0x58)
  {
    v56 = v45;
    if ((unint64_t)(v44 - v53) >= 0x20)
    {
      v58 = ((unint64_t)(v48 - 8) >> 3) + 1;
      v56 = &v45[-8 * (v58 & 0x3FFFFFFFFFFFFFFCLL)];
      v59 = &v53[8 * v49 - 16];
      v60 = v45 - 16;
      v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *(_OWORD *)v60;
        *((_OWORD *)v59 - 1) = *((_OWORD *)v60 - 1);
        *(_OWORD *)v59 = v62;
        v59 -= 32;
        v60 -= 32;
        v61 -= 4;
      }
      while (v61);
      v54 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v57 = v44;
      if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_63;
    }
  }
  else
  {
    v56 = v45;
  }
  do
  {
    v63 = *((_QWORD *)v56 - 1);
    v56 -= 8;
    *((_QWORD *)v54 - 1) = v63;
    v54 -= 8;
  }
  while (v56 != v44);
  v57 = (char *)a1[8];
LABEL_63:
  a1[8] = (uint64_t)v54;
  a1[9] = (uint64_t)v47;
  a1[10] = (uint64_t)v55;
  if (v57)
    operator delete(v57);
LABEL_65:
  a1[9] = (uint64_t)v47;
  v65 = *(char **)(v41 + 104);
  v64 = *(_QWORD *)(v41 + 112);
  if ((unint64_t)v65 < v64)
  {
    *(_QWORD *)v65 = a1;
    v66 = v65 + 8;
    goto LABEL_87;
  }
  v67 = *(char **)(v41 + 96);
  v68 = (v65 - v67) >> 3;
  v69 = v68 + 1;
  if ((unint64_t)(v68 + 1) >> 61)
LABEL_120:
    abort();
  v70 = v64 - (_QWORD)v67;
  if (v70 >> 2 > v69)
    v69 = v70 >> 2;
  if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
    v71 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v71 = v69;
  if (!v71)
  {
    v72 = 0;
    goto LABEL_77;
  }
  if (v71 >> 61)
LABEL_121:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v72 = (char *)operator new(8 * v71);
LABEL_77:
  v73 = &v72[8 * v68];
  v74 = &v72[8 * v71];
  *(_QWORD *)v73 = a1;
  v66 = v73 + 8;
  if (v65 != v67)
  {
    v75 = v65 - v67 - 8;
    if (v75 < 0x58)
      goto LABEL_124;
    if ((unint64_t)(v67 - v72) < 0x20)
      goto LABEL_124;
    v76 = (v75 >> 3) + 1;
    v77 = &v72[8 * v68 - 16];
    v78 = (__int128 *)(v65 - 16);
    v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v80 = *v78;
      *((_OWORD *)v77 - 1) = *(v78 - 1);
      *(_OWORD *)v77 = v80;
      v77 -= 32;
      v78 -= 2;
      v79 -= 4;
    }
    while (v79);
    v73 -= 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
    v65 -= 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
    if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_124:
      do
      {
        v81 = *((_QWORD *)v65 - 1);
        v65 -= 8;
        *((_QWORD *)v73 - 1) = v81;
        v73 -= 8;
      }
      while (v65 != v67);
    }
    v65 = *(char **)(v41 + 96);
  }
  *(_QWORD *)(v41 + 96) = v73;
  *(_QWORD *)(v41 + 104) = v66;
  *(_QWORD *)(v41 + 112) = v74;
  if (v65)
    operator delete(v65);
LABEL_87:
  *(_QWORD *)(v41 + 104) = v66;
  v82 = atomic_load((unint64_t *)a1 + 3);
  if (v82)
    v83 = v44 == v45;
  else
    v83 = 0;
  if (v83)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(v82 + 16));
    v84 = *(_QWORD *)(v82 + 72);
    LODWORD(v85) = -1431655765 * ((unint64_t)(*(_QWORD *)(v82 + 80) - v84) >> 3);
    while (1)
    {
      v85 = (v85 - 1);
      if ((int)v85 < 0)
        break;
      v86 = v84 + 24 * v85;
      v88 = *(uint64_t **)(v86 + 8);
      v87 = (uint64_t **)(v86 + 8);
      if (v88 == a1)
      {
        v90 = (uint64_t **)(v82 + 112);
        v89 = *(uint64_t **)(v82 + 112);
        if (v89)
        {
          v91 = *((_DWORD *)a1 + 5);
          while (1)
          {
            while (1)
            {
              v92 = (uint64_t **)v89;
              v93 = *(_DWORD *)(v89[4] + 20);
              if (v91 >= v93)
                break;
              v89 = *v92;
              v90 = v92;
              if (!*v92)
                goto LABEL_103;
            }
            if (v93 >= v91)
              break;
            v89 = v92[1];
            if (!v89)
            {
              v90 = v92 + 1;
              goto LABEL_103;
            }
          }
          v97 = a1;
        }
        else
        {
          v92 = (uint64_t **)(v82 + 112);
LABEL_103:
          v94 = (uint64_t *)v92;
          v92 = (uint64_t **)operator new(0x38uLL);
          v92[5] = 0;
          v92[6] = 0;
          v92[4] = a1;
          *v92 = 0;
          v92[1] = 0;
          v92[2] = v94;
          *v90 = (uint64_t *)v92;
          v95 = **(_QWORD **)(v82 + 104);
          v96 = (uint64_t *)v92;
          if (v95)
          {
            *(_QWORD *)(v82 + 104) = v95;
            v96 = *v90;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v82 + 112), v96);
          ++*(_QWORD *)(v82 + 120);
          v97 = *v87;
        }
        v98 = *(_QWORD *)(v84 + 24 * v85 + 16);
        if (v98)
        {
          v99 = (unint64_t *)(v98 + 8);
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
        }
        v101 = (std::__shared_weak_count *)v92[6];
        v92[5] = v97;
        v92[6] = (uint64_t *)v98;
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v82 + 80) - *(_QWORD *)(v82 + 72)) >> 3) - 1 != v85)
          atomic_store(1u, (unsigned __int8 *)(v82 + 96));
        karo::util::replaceIndexWithLast<karo::JobManager::QueueElement>((uint64_t *)(v82 + 72), v85);
        break;
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v82 + 16));
  }
LABEL_119:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v41 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)a1[11]);
}

char *karo::Job::getSubJob(pthread_mutex_t **this, int a2)
{
  pthread_mutex_t *v4;
  pthread_mutex_t *v5;
  unsigned __int8 v6;
  char *opaque;

  pthread_mutex_lock(this[7]);
  v4 = this[4];
  v5 = this[5];
  if (v4 == v5)
  {
LABEL_4:
    {
      opaque = (char *)&karo::Job::getSubJobconst::nulljob;
    }
    else
    {
      opaque = (char *)&karo::Job::getSubJobconst::nulljob;
      __cxa_atexit((void (*)(void *))std::shared_ptr<karo::Job>::~shared_ptr[abi:nn180100], &karo::Job::getSubJobconst::nulljob, &dword_19F029000);
    }
  }
  else
  {
    while (LODWORD(v4->__sig) != a2)
    {
      v4 = (pthread_mutex_t *)((char *)v4 + 32);
      if (v4 == v5)
        goto LABEL_4;
    }
    opaque = v4->__opaque;
  }
  pthread_mutex_unlock(this[7]);
  return opaque;
}

uint64_t karo::Job::removeSubJob(pthread_mutex_t **this, int a2)
{
  pthread_mutex_t *v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pthread_mutex_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  pthread_mutex_t *v24;
  pthread_mutex_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *i;

  pthread_mutex_lock(this[7]);
  v5 = this[4];
  v4 = this[5];
  v6 = (char *)v4 - (char *)v5;
  if (v4 != v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = v6 >> 5;
    while (*((_DWORD *)&v5->__sig + 8 * v7) != a2)
    {
      v7 = ++v8;
      if (v9 <= v8)
        return pthread_mutex_unlock(this[7]);
    }
    v10 = (unsigned int *)(*(_QWORD *)&v5->__opaque[32 * v7] + 128);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    v12 = this[4];
    v13 = (((char *)this[5] - (char *)v12) >> 5) - 1;
    v14 = (char *)v12 + 32 * v13;
    v15 = v8;
    v16 = (char *)v12 + 32 * v8;
    *(_DWORD *)v16 = *(_DWORD *)v14;
    v18 = *((_QWORD *)v14 + 1);
    v17 = *((_QWORD *)v14 + 2);
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    *((_QWORD *)v16 + 1) = v18;
    v21 = (std::__shared_weak_count *)*((_QWORD *)v16 + 2);
    *((_QWORD *)v16 + 2) = v17;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    *(_WORD *)&v12->__opaque[32 * v15 + 16] = *(_WORD *)&v12->__opaque[32 * v13 + 16];
    v24 = this[5];
    if (v24 == this[4])
    {
      if ((char *)this[6] - (char *)v24 == -32)
      {
        for (i = &v24->__opaque[17]; ; i += 32)
        {
          *(_DWORD *)(i - 25) = -1;
          *(_QWORD *)(i - 9) = 0;
          *(_QWORD *)(i - 17) = 0;
          *(_WORD *)(i - 1) = 1;
        }
      }
      abort();
    }
    v25 = (pthread_mutex_t *)((char *)v24 - 32);
    while (v24 != v25)
    {
      v26 = *(std::__shared_weak_count **)&v24[-1].__opaque[40];
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v24 = (pthread_mutex_t *)((char *)v24 - 32);
    }
    this[5] = v25;
  }
  return pthread_mutex_unlock(this[7]);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineSetupToApply>(gdc::Entity,md::ls::PipelineSetupToApply &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineSetupToApply>(gdc::Entity,md::ls::PipelineSetupToApply &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineSetupToApply>(gdc::Entity,md::ls::PipelineSetupToApply &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineSetupToApply>(gdc::Entity,md::ls::PipelineSetupToApply &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PipelineSetupToApply>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_1,std::allocator<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_1>,void ()(md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_1,std::allocator<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_1>,void ()(md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427B610;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_1,std::allocator<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_1>,void ()(md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B610;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_1,std::allocator<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_1>,void ()(md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&)>::operator()(uint64_t a1, unsigned __int8 *a2, char *a3))()
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***result)();
  uint64_t v7;
  char v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t (***v11)();
  uint64_t (**v12)();
  __int128 v13;
  uint64_t (***v14)();
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  md::VKMRenderResourcesStore::createPipelineStateItem(**(_QWORD **)(a1 + 8), a2, *a3, 0);
  v3 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v9 = &off_1E427DE00;
  *(_QWORD *)&v10 = v4;
  *((_QWORD *)&v10 + 1) = v3;
  v11 = &v9;
  v14 = &v12;
  v12 = &off_1E427DE00;
  v13 = v10;
  v15 = 0;
  ecs2::Runtime::queueCommand(v5, (uint64_t)&v12);
  if (v15 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v15])(&v8, &v12);
  v15 = -1;
  result = v11;
  if (v11 == &v9)
  {
    v7 = 4;
    result = &v9;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
  }
  return (uint64_t (***)())(*result)[v7]();
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineState>(gdc::Entity,md::ls::PipelineState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineState>(gdc::Entity,md::ls::PipelineState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427DE00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineState>(gdc::Entity,md::ls::PipelineState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DE00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineState>(gdc::Entity,md::ls::PipelineState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PipelineState>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_0,std::allocator<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_0>,void ()(md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_0,std::allocator<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_0>,void ()(md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427B5C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_0,std::allocator<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_0>,void ()(md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B5C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_0,std::allocator<md::ita::CreatePipelineStates::operator()(ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>)::$_0>,void ()(md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&)>::operator()(uint64_t a1, unsigned __int8 *a2, char *a3))()
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***result)();
  uint64_t v7;
  char v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t (***v11)();
  uint64_t (**v12)();
  __int128 v13;
  uint64_t (***v14)();
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  md::VKMRenderResourcesStore::createPipelineStateItem(**(_QWORD **)(a1 + 8), a2, *a3, 1);
  v3 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v9 = &off_1E427DE00;
  *(_QWORD *)&v10 = v4;
  *((_QWORD *)&v10 + 1) = v3;
  v11 = &v9;
  v14 = &v12;
  v12 = &off_1E427DE00;
  v13 = v10;
  v15 = 0;
  ecs2::Runtime::queueCommand(v5, (uint64_t)&v12);
  if (v15 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v15])(&v8, &v12);
  v15 = -1;
  result = v11;
  if (v11 == &v9)
  {
    v7 = 4;
    result = &v9;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
  }
  return (uint64_t (***)())(*result)[v7]();
}

void std::__function::__func<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_1,std::allocator<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_1>,void ()(md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_1,std::allocator<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_1>,void ()(md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427B4A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_1,std::allocator<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_1>,void ()(md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B4A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_1,std::allocator<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_1>,void ()(md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5))()
{
  unint64_t v5;
  uint64_t RenderItem;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (***result)();
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  _QWORD **v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t prime;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t *v49;
  char v50;
  uint64_t (**v51)();
  __int128 v52;
  uint64_t (***v53)();
  uint64_t (**v54)();
  __int128 v55;
  uint64_t (***v56)();
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  RenderItem = md::VKMRenderResourcesStore::getRenderItem(**(int8x8_t ***)(a1 + 8), *a5, a5[1]);
  v10 = **(_QWORD **)(a1 + 8);
  v11 = *a2;
  v12 = *a2;
  v13 = *(_QWORD *)(v10 + 400);
  if (v12 < (*(_QWORD *)(v10 + 408) - v13) >> 3
    && (v14 = *(_QWORD *)(v13 + 8 * v12)) != 0
    && HIDWORD(v11) == HIDWORD(v14)
    && ((v15 = *(_QWORD *)(v10 + 424), v5 = v15 + 16 * v14, v5 != *(_QWORD *)(v10 + 432))
      ? (v16 = v15 == 0)
      : (v16 = 1),
        !v16))
  {
    v29 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v10 + 296, v11, a2);
    ++v29[3];
    v30 = *(_QWORD *)v5;
    v10 = **(_QWORD **)(a1 + 8);
  }
  else
  {
    v30 = 0;
  }
  v17 = *a3;
  v18 = *a3;
  v19 = *(_QWORD *)(v10 + 752);
  if (v18 >= (*(_QWORD *)(v10 + 760) - v19) >> 3)
    goto LABEL_18;
  v20 = *(_QWORD *)(v19 + 8 * v18);
  if (!v20)
    goto LABEL_19;
  if (HIDWORD(v17) != HIDWORD(v20)
    || ((v21 = *(_QWORD *)(v10 + 776), v22 = (uint64_t *)(v21 + 8 * v20), v22 != *(uint64_t **)(v10 + 784))
      ? (v23 = v21 == 0)
      : (v23 = 1),
        v23))
  {
LABEL_18:
    v20 = 0;
    goto LABEL_19;
  }
  v31 = *(_QWORD *)(v10 + 696);
  v49 = (uint64_t *)(v10 + 688);
  if (v31)
  {
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v5 = v17;
      if (v17 >= v31)
        v5 = v17 % v31;
    }
    else
    {
      v5 = (v31 - 1) & v17;
    }
    v33 = *(_QWORD ***)(*(_QWORD *)(v10 + 688) + 8 * v5);
    if (v33)
    {
      v34 = *v33;
      if (*v33)
      {
        if (v32.u32[0] < 2uLL)
        {
          while (1)
          {
            v36 = v34[1];
            if (v36 == v17)
            {
              if (v34[2] == v17)
                goto LABEL_86;
            }
            else if ((v36 & (v31 - 1)) != v5)
            {
              goto LABEL_48;
            }
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_48;
          }
        }
        do
        {
          v35 = v34[1];
          if (v35 == v17)
          {
            if (v34[2] == v17)
              goto LABEL_86;
          }
          else
          {
            if (v35 >= v31)
              v35 %= v31;
            if (v35 != v5)
              break;
          }
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
    }
  }
LABEL_48:
  v34 = operator new(0x30uLL);
  *v34 = 0;
  v34[1] = v17;
  v34[2] = v17;
  v34[3] = 0;
  v34[4] = 0;
  v34[5] = 0;
  v37 = (float)(unint64_t)(*(_QWORD *)(v10 + 712) + 1);
  v38 = *(float *)(v10 + 720);
  if (!v31 || (float)(v38 * (float)v31) < v37)
  {
    v39 = 1;
    if (v31 >= 3)
      v39 = (v31 & (v31 - 1)) != 0;
    v40 = v39 | (2 * v31);
    v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41)
      prime = v41;
    else
      prime = v40;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v31 = *(_QWORD *)(v10 + 696);
    }
    if (prime > v31)
      goto LABEL_60;
    if (prime < v31)
    {
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(v10 + 712) / *(float *)(v10 + 720));
      if (v31 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime < v31)
LABEL_60:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v49, prime);
    }
    v31 = *(_QWORD *)(v10 + 696);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v17 >= v31)
        v5 = v17 % v31;
      else
        v5 = v17;
    }
    else
    {
      v5 = (v31 - 1) & v17;
    }
  }
  v46 = *v49;
  v47 = *(_QWORD **)(*v49 + 8 * v5);
  if (v47)
  {
    *v34 = *v47;
  }
  else
  {
    *v34 = *(_QWORD *)(v10 + 704);
    *(_QWORD *)(v10 + 704) = v34;
    *(_QWORD *)(v46 + 8 * v5) = v10 + 704;
    if (!*v34)
      goto LABEL_85;
    v48 = *(_QWORD *)(*v34 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v48 >= v31)
        v48 %= v31;
    }
    else
    {
      v48 &= v31 - 1;
    }
    v47 = (_QWORD *)(*v49 + 8 * v48);
  }
  *v47 = v34;
LABEL_85:
  ++*(_QWORD *)(v10 + 712);
LABEL_86:
  ++v34[3];
  v20 = *v22;
LABEL_19:
  *(_QWORD *)(RenderItem + 24) = v20;
  *(_QWORD *)(RenderItem + 32) = v30;
  v24 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v51 = &off_1E427DDB8;
  *(_QWORD *)&v52 = v25;
  *((_QWORD *)&v52 + 1) = v24;
  v53 = &v51;
  v56 = &v54;
  v54 = &off_1E427DDB8;
  v55 = v52;
  v57 = 0;
  ecs2::Runtime::queueCommand(v26, (uint64_t)&v54);
  if (v57 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v57])(&v50, &v54);
  v57 = -1;
  result = v53;
  if (v53 == &v51)
  {
    v28 = 4;
    result = &v51;
  }
  else
  {
    if (!v53)
      return result;
    v28 = 5;
  }
  return (uint64_t (***)())(*result)[v28]();
}

void sub_19F9A1D34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineSetup>(gdc::Entity,md::ls::PipelineSetup &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineSetup>(gdc::Entity,md::ls::PipelineSetup &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427DDB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineSetup>(gdc::Entity,md::ls::PipelineSetup &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DDB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PipelineSetup>(gdc::Entity,md::ls::PipelineSetup &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PipelineSetup>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_0,std::allocator<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_0>,void ()(md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_0,std::allocator<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_0>,void ()(md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B460;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_0,std::allocator<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_0>,void ()(md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B460;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_0,std::allocator<md::ita::TransferPipelines::operator()(ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>,ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>)::$_0>,void ()(md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&)>::operator()(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  uint8x8_t v32;
  _QWORD **v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t prime;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;

  v7 = **(_QWORD **)(a1 + 8);
  v8 = *a2;
  v9 = *(_QWORD *)(v7 + 400);
  if (v8 < (unint64_t)((*(_QWORD *)(v7 + 408) - v9) >> 3)
    && (v10 = *(_QWORD *)(v9 + 8 * v8)) != 0
    && HIDWORD(v8) == HIDWORD(v10)
    && ((v11 = *(_QWORD *)(v7 + 424), v12 = (_QWORD **)(v11 + 16 * v10), v12 != *(_QWORD ***)(v7 + 432))
      ? (v13 = v11 == 0)
      : (v13 = 1),
        !v13))
  {
    v28 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v7 + 296, v8, a2);
    ++v28[3];
    v29 = *v12;
    v7 = **(_QWORD **)(a1 + 8);
  }
  else
  {
    v29 = 0;
  }
  v14 = *a4;
  v15 = *a4;
  v16 = *(_QWORD *)(v7 + 576);
  if (v15 >= (*(_QWORD *)(v7 + 584) - v16) >> 3
    || (v17 = *(_QWORD *)(v16 + 8 * v15)) == 0
    || HIDWORD(v14) != HIDWORD(v17)
    || ((v18 = *(_QWORD *)(v7 + 600), v19 = (uint64_t *)(v18 + 16 * v17), v19 != *(uint64_t **)(v7 + 608))
      ? (v20 = v18 == 0)
      : (v20 = 1),
        v20))
  {
    v21 = 0;
LABEL_19:
    v22 = (std::__shared_weak_count *)v29[3];
    v29[2] = 0;
    v29[3] = 0;
    if (!v22)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    goto LABEL_22;
  }
  v30 = (uint64_t *)(v7 + 472);
  v31 = *(_QWORD *)(v7 + 480);
  if (v31)
  {
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v4 = v14;
      if (v14 >= v31)
        v4 = v14 % v31;
    }
    else
    {
      v4 = (v31 - 1) & v14;
    }
    v33 = *(_QWORD ***)(*v30 + 8 * v4);
    if (v33)
    {
      v34 = *v33;
      if (*v33)
      {
        if (v32.u32[0] < 2uLL)
        {
          while (1)
          {
            v36 = v34[1];
            if (v36 == v14)
            {
              if (v34[2] == v14)
                goto LABEL_89;
            }
            else if ((v36 & (v31 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_51;
          }
        }
        do
        {
          v35 = v34[1];
          if (v35 == v14)
          {
            if (v34[2] == v14)
              goto LABEL_89;
          }
          else
          {
            if (v35 >= v31)
              v35 %= v31;
            if (v35 != v4)
              break;
          }
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
    }
  }
LABEL_51:
  v34 = operator new(0x30uLL);
  *v34 = 0;
  v34[1] = v14;
  v34[2] = v14;
  v34[3] = 0;
  v34[4] = 0;
  v34[5] = 0;
  v37 = (float)(unint64_t)(*(_QWORD *)(v7 + 496) + 1);
  v38 = *(float *)(v7 + 504);
  if (!v31 || (float)(v38 * (float)v31) < v37)
  {
    v39 = 1;
    if (v31 >= 3)
      v39 = (v31 & (v31 - 1)) != 0;
    v40 = v39 | (2 * v31);
    v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41)
      prime = v41;
    else
      prime = v40;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v31 = *(_QWORD *)(v7 + 480);
    }
    if (prime > v31)
      goto LABEL_63;
    if (prime < v31)
    {
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 496) / *(float *)(v7 + 504));
      if (v31 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime < v31)
LABEL_63:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v7 + 472, prime);
    }
    v31 = *(_QWORD *)(v7 + 480);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v14 >= v31)
        v4 = v14 % v31;
      else
        v4 = v14;
    }
    else
    {
      v4 = (v31 - 1) & v14;
    }
  }
  v46 = *v30;
  v47 = *(_QWORD **)(*v30 + 8 * v4);
  if (v47)
  {
    *v34 = *v47;
LABEL_87:
    *v47 = v34;
    goto LABEL_88;
  }
  *v34 = *(_QWORD *)(v7 + 488);
  *(_QWORD *)(v7 + 488) = v34;
  *(_QWORD *)(v46 + 8 * v4) = v7 + 488;
  if (*v34)
  {
    v48 = *(_QWORD *)(*v34 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v48 >= v31)
        v48 %= v31;
    }
    else
    {
      v48 &= v31 - 1;
    }
    v47 = (_QWORD *)(*v30 + 8 * v48);
    goto LABEL_87;
  }
LABEL_88:
  ++*(_QWORD *)(v7 + 496);
LABEL_89:
  ++v34[3];
  v49 = *v19;
  v21 = (std::__shared_weak_count *)v19[1];
  if (v21)
  {
    v50 = (unint64_t *)&v21->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  if (!v49 || **(_QWORD **)(v49 + 40) != v29[1])
    goto LABEL_19;
  v52 = v29[2];
  if (v52 && v52 != v49)
    ggl::PipelineSetup::resetData((uint64_t)v29);
  if (v21)
  {
    v53 = (unint64_t *)&v21->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v22 = (std::__shared_weak_count *)v29[3];
  v29[2] = v49;
  v29[3] = v21;
  if (v22)
  {
    v55 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v55);
    while (__stlxr(v24 - 1, v55));
LABEL_22:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_24:
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_19F9A2500(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataIDSetToUse>(gdc::Entity,md::ls::DataIDSetToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataIDSetToUse>(gdc::Entity,md::ls::DataIDSetToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427DED8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataIDSetToUse>(gdc::Entity,md::ls::DataIDSetToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427DED8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataIDSetToUse>(gdc::Entity,md::ls::DataIDSetToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::DataIDSetToUse>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void ggl::DaVinci::DecalPipelineState::~DecalPipelineState(ggl::DaVinci::DecalPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::DecalPipelineSetup::~DecalPipelineSetup(ggl::DaVinci::DecalPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::DecalPipelineSetup::constantDataIsEnabled(ggl::DaVinci::DecalPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 4:
    case 5:
    case 7:
      return result;
    case 2:
    case 6:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 309);
      goto LABEL_6;
    case 3:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 335);
      goto LABEL_6;
    case 8:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 315);
LABEL_6:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::DaVinci::DecalPipelineSetup::textureIsEnabled(ggl::DaVinci::DecalPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 3:
      return result;
    case 1:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 309);
      goto LABEL_5;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 315);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t std::deque<std::function<void ()(void)>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
    goto LABEL_14;
  }
  v4 = (_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = &v2[v5 >> 7];
  v7 = (uint64_t)*v6;
  v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
  v9 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
     + 32 * ((*(_QWORD *)(a1 + 40) + v5) & 0x7F);
  if (v8 != v9)
  {
    while (1)
    {
      v10 = *(_QWORD **)(v8 + 24);
      if (v10 == (_QWORD *)v8)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_9:
        (*(void (**)(void))(*v10 + 8 * v11))();
        v7 = (uint64_t)*v6;
      }
      v8 += 32;
      if (v8 - v7 == 4096)
      {
        v12 = (uint64_t)v6[1];
        ++v6;
        v7 = v12;
        v8 = v12;
      }
      if (v8 == v9)
      {
        v2 = *(void ***)(a1 + 8);
        v3 = *(void ***)(a1 + 16);
        goto LABEL_14;
      }
    }
    v10 = (_QWORD *)v8;
    v11 = 4;
    goto LABEL_9;
  }
LABEL_14:
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 64;
    goto LABEL_20;
  }
  if (v14 == 2)
  {
    v15 = 128;
LABEL_20:
    *(_QWORD *)(a1 + 32) = v15;
  }
  if (v2 != v3)
  {
    do
    {
      v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    v18 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v17 != v18)
      *(_QWORD *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__function::__func<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0,std::allocator<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42CBC78;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0,std::allocator<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42CBC78;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0,std::allocator<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E42CBC78;
  v2[1] = v3;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (v4 == a1 + 16)
    {
      v2[5] = v2 + 2;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  v2[5] = v4;
  return v2;
}

void sub_19F9A2D04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0,std::allocator<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBC78;
  a2[1] = v3;
  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    if (v4 == result + 16)
    {
      a2[5] = a2 + 2;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 40));
      a2[5] = result;
    }
  }
  else
  {
    a2[5] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0,std::allocator<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0,std::allocator<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0,std::allocator<md::InplaceRunLoop::sync(std::function<void ()(void)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    std::promise<void>::set_value(*(std::promise<void> **)(a1 + 8));
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __Block_byref_object_copy__13186(v3, v4);
  }
}

uint64_t __Block_byref_object_copy__13186(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 88);
  if (v2)
  {
    if (v2 == a2 + 64)
    {
      *(_QWORD *)(result + 88) = result + 64;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 88) + 24))(*(_QWORD *)(a2 + 88), result + 64);
    }
    else
    {
      *(_QWORD *)(result + 88) = v2;
      *(_QWORD *)(a2 + 88) = 0;
    }
  }
  else
  {
    *(_QWORD *)(result + 88) = 0;
  }
  return result;
}

_QWORD *__Block_byref_object_dispose__13187(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 64);
  result = *(_QWORD **)(a1 + 88);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42CEDB0;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42CEDB0;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E42CEDB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    if (v3 == a1 + 24)
    {
      *((_QWORD *)v2 + 6) = v2 + 24;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      return v2;
    }
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  *((_QWORD *)v2 + 6) = v3;
  return v2;
}

void sub_19F9A3068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a2 = &off_1E42CEDB0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 48);
  if (v3)
  {
    if (v3 == result + 24)
    {
      *(_QWORD *)(a2 + 48) = a2 + 24;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 48) + 24))(*(_QWORD *)(result + 48));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 48));
      *(_QWORD *)(a2 + 48) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
  }
  return result;
}

_QWORD *std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

intptr_t std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 48);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x19F9A31D0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = *(unsigned __int8 **)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  return dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 16));
}

void std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_2,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_2,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E42CEE40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_2,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E42CEE40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_2,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 296);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SyncWait", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_1,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_1,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEDF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_1,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEDF8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_1,std::allocator<md::HomeQueueScheduler::syncWait(unsigned int,std::function<void ()(void)>)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(v1 + 296);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SyncWait", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_2,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_2,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CED68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_2,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CED68;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_2,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 8))
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    JUMPOUT(0x19F9A34A8);
  }
  std::mutex::unlock(*(std::mutex **)v1);
  *(_BYTE *)(v1 + 8) = 0;
}

void std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_1,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_1,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E42CED20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_1,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E42CED20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_1,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  const char *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v3 = (id)GEOGetVectorKitPerformanceLog_log;
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 296);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    v6 = **(const char ***)(a1 + 16);
    if (!v6)
      v6 = "";
    v7 = 136315138;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_END, v5, "WaitForSynchronization", "SyncPoint:%s", (uint8_t *)&v7, 0xCu);
  }

}

void std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_0,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_0,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CECD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_0,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CECD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_0,std::allocator<md::HomeQueueScheduler::waitForSynchronization(char const*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  const char *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v3 = (id)GEOGetVectorKitPerformanceLog_log;
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 296);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    v6 = **(const char ***)(a1 + 16);
    if (!v6)
      v6 = "";
    v7 = 136315138;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "WaitForSynchronization", "SyncPoint:%s", (uint8_t *)&v7, 0xCu);
  }

}

void md::ARGeoSessionLocationProvider::~ARGeoSessionLocationProvider(md::ARGeoSessionLocationProvider *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::ARGeoSessionLocationProvider::update(uint64_t a1, md::LayoutContext *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  double v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  md::LayoutContext::frameState(a2);
  v7 = *(_QWORD *)(v6 + 72);
  *(float64x2_t *)(a1 + 24) = vmulq_f64(*(float64x2_t *)(v6 + 56), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  *(_QWORD *)(a1 + 40) = v7;
  objc_msgSend(v5, "location");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    objc_msgSend(v5, "location");
  else
    objc_msgSend(v5, "rawLocation");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v9, "coordinate");
    v11 = v10;
    objc_msgSend(v9, "coordinate");
    v13 = v12;
    objc_msgSend(v9, "altitude");
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v14;
  }
  objc_msgSend(v5, "geoTrackingStatus");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "state");

  if (v16 == 3)
    objc_msgSend(v5, "heading");
  else
    objc_msgSend(v5, "rawHeading");
  v18 = 360.0 - v17;
  if (!*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 1;
  *(double *)(a1 + 48) = v18;
  if (GEOGetVectorKitARGeoSessionLocationProviderLog(void)::onceToken[0] != -1)
    dispatch_once(GEOGetVectorKitARGeoSessionLocationProviderLog(void)::onceToken, &__block_literal_global_13232);
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitARGeoSessionLocationProviderLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v19 = (id)GEOGetVectorKitARGeoSessionLocationProviderLog(void)::log;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(v5, "timestamp");
      v21 = v20;
      if (*(_BYTE *)(a1 + 56))
      {
        std::to_string(&v31, *(double *)(a1 + 48));
        v22 = (std::string *)v31.__r_.__value_.__r.__words[0];
        v23 = "YES";
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v31;
        v24 = *(_QWORD *)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        if (!v9)
          v23 = "NO";
        v26 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 134219266;
        v33 = v21;
        v34 = 2080;
        v35 = (const char *)v22;
        v36 = 2080;
        v37 = v23;
        v38 = 2048;
        v39 = v24;
        v40 = 2048;
        v41 = v25;
        v42 = 2048;
        v43 = v26;
        _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_DEBUG, "frame:%f heading:%s isCoordinateFromAR:%s coordinate:%f,%f,%f", buf, 0x3Eu);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
      }
      else
      {
        v27 = "YES";
        v28 = *(_QWORD *)(a1 + 24);
        v29 = *(_QWORD *)(a1 + 32);
        v30 = *(_QWORD *)(a1 + 40);
        if (!v9)
          v27 = "NO";
        *(_DWORD *)buf = 134219266;
        v33 = v20;
        v34 = 2080;
        v35 = "NONE";
        v36 = 2080;
        v37 = v27;
        v38 = 2048;
        v39 = v28;
        v40 = 2048;
        v41 = v29;
        v42 = 2048;
        v43 = v30;
        _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_DEBUG, "frame:%f heading:%s isCoordinateFromAR:%s coordinate:%f,%f,%f", buf, 0x3Eu);
      }
    }

  }
}

void sub_19F9A3AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t md::ARGeoSessionLocationProvider::location(md::ARGeoSessionLocationProvider *this)
{
  return (uint64_t)this + 24;
}

uint64_t md::ARGeoSessionLocationProvider::heading(md::ARGeoSessionLocationProvider *this)
{
  return (uint64_t)this + 48;
}

void ___ZL46GEOGetVectorKitARGeoSessionLocationProviderLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "ARGeoSessionLocationProvider");
  v1 = (void *)GEOGetVectorKitARGeoSessionLocationProviderLog(void)::log;
  GEOGetVectorKitARGeoSessionLocationProviderLog(void)::log = (uint64_t)v0;

}

void md::ARExternalAssetDataRequestLogic::~ARExternalAssetDataRequestLogic(md::ARExternalAssetDataRequestLogic *this)
{
  md::ARExternalAssetDataRequestLogic::~ARExternalAssetDataRequestLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  void *v3;
  gdc::LayerDataCollector *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42A81A0;
  v2 = (_QWORD *)*((_QWORD *)this + 19);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    operator delete(v3);
  v4 = (gdc::LayerDataCollector *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v4);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::ARExternalAssetDataRequestLogic,md::ARExternalAssetDataRequestContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARExternalAssetDataRequestContext]";
  v4[3] = 37;
  v4[4] = result;
  *v4 = &off_1E42B1608;
  v4[1] = 0x18488114F1AD890;
  *a2 = v4;
  return result;
}

void sub_19F9A3C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARExternalAssetDataRequestLogic,md::ARExternalAssetDataRequestContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x18488114F1AD890)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::LayerDataLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARExternalAssetDataRequestLogic,md::ARExternalAssetDataRequestContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x18488114F1AD890)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::LayerDataLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARExternalAssetDataRequestLogic,md::ARExternalAssetDataRequestContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x18488114F1AD890)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::LayerDataLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARExternalAssetDataRequestLogic,md::ARExternalAssetDataRequestContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x18488114F1AD890)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::LayerDataLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARExternalAssetDataRequestLogic,md::ARExternalAssetDataRequestContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(a3 + 8) == 0x18488114F1AD890 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::LayerDataLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ARExternalAssetDataRequestLogic,md::ARExternalAssetDataRequestContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARExternalAssetDataRequestLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, _QWORD *a3)
{
  gdc::LayerDataCollector *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  gdc::LayerDataManager *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t i;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t j;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t *v113;
  char *v114;
  unint64_t *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t *v124;
  unint64_t *v125;
  _QWORD *v126;
  unsigned __int8 *v127;
  size_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  size_t v137;
  void *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  char *v143;
  uint64_t *v144;
  char *v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 *v150;
  _OWORD *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  BOOL v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  BOOL v211;
  uint64_t v212;
  uint64_t v213;
  size_t *v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  size_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  BOOL v230;
  unsigned __int8 *v231;
  void *v232;
  uint64_t v233;
  void *v234;
  unint64_t v235;
  uint64_t v236;
  _OWORD *v237;
  char *v238;
  uint64_t *v239;
  char *v240;
  unint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  __int128 *v245;
  _OWORD *v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  gdc::LayerDataManager **v250;
  void *v251;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char v262[32];
  unint64_t v263;
  void *v264;
  char *v265;
  void *v266;
  unint64_t v267;
  _QWORD v268[8];
  char v269;
  uint64_t v270;
  uint64_t v271;
  QuadTile v272;
  uint64_t *v273;
  void **v274;

  if (*(_BYTE *)(*a3 + 64) != 2 || *(_BYTE *)(*a3 + 16) != 3)
    return;
  v250 = (gdc::LayerDataManager **)a3[1];
  gdc::LayerDataCollector::clear(*(gdc::LayerDataCollector **)(a1 + 128));
  v4 = *(gdc::LayerDataCollector **)(a1 + 128);
  v256 = a1;
  v5 = (_QWORD *)gdc::Registry::storage<arComponents::AssetDataReference>(*(_QWORD *)(a1 + 120));
  v6 = v5[7];
  v7 = v5[8];
  if (v6 != v7)
  {
    v8 = (void **)v5[10];
    do
    {
      v9 = *v8;
      v258 = v262;
      v259 = v262;
      v260 = v262;
      v261 = 32;
      v263 = 0;
      v264 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v258, v262, (char *)&v264, (char *)&v265);
      v264 = 0;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v258, v259, (char *)&v264, (char *)&v265);
      v10 = (unsigned __int8 *)v258;
      v11 = v259 - (_BYTE *)v258;
      if (v259 == v258)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        if (v11 <= 1)
          v11 = 1;
        do
        {
          v13 = *v10++;
          v12 ^= (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL + v13;
          --v11;
        }
        while (v11);
      }
      v263 = v12;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v264, 0, 0x37u, (uint64_t)&v258, -1073741827);
      if (v258 != v260)
        free(v258);
      *(_WORD *)&v272._type = 255;
      *(_QWORD *)&v272._yIdx = 0;
      gdc::LayerDataCollector::addDataKey(v4, (const gdc::LayerDataRequestKey *)&v264, &v272);
      if (v269)
        v269 = 0;
      if (v266 != (void *)v268[0])
        free(v266);
      v8 += 5;
      v6 += 8;
    }
    while (v6 != v7);
  }
  v14 = 0;
  v15 = 0xCBF29CE484222325;
  v16 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)&v272._type = *(_QWORD *)(a1 + 128);
  v264 = v268;
  v265 = (char *)v268;
  v266 = v268;
  v267 = 4;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_779[v14++ + 38]);
  while (v14 != 124);
  v254 = v16;
  v18 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(v16, v17);
  v19 = v18;
  v21 = (uint64_t *)v18[7];
  v20 = (uint64_t *)v18[8];
  v22 = (char *)v20 - (char *)v21;
  if (v20 != v21)
  {
    if ((v23 = *((unsigned int *)v21 + 1), v24 = v18[4], v25 = (v18[5] - v24) >> 3, v23 >> 7 >= v25)
      || (v26 = *(_QWORD *)(v24 + 8 * (v23 >> 7))) == 0
      || (v27 = *(unsigned __int16 *)(v26 + 2 * (v23 & 0x7F)), v27 >= v22 >> 3)
      || ((v28 = &v21[v27], v28 != v20) ? (v29 = *((_DWORD *)v28 + 1) == (_DWORD)v23) : (v29 = 0), !v29))
    {
      v30 = v21 + 1;
      if (v21 + 1 == v20)
      {
LABEL_74:
        v37 = v265;
        goto LABEL_75;
      }
      v31 = v22 >> 3;
      while (1)
      {
        v32 = *((unsigned int *)v30 + 1);
        if (v32 >> 7 < v25)
        {
          v33 = *(_QWORD *)(v24 + 8 * (v32 >> 7));
          if (v33)
          {
            v34 = *(unsigned __int16 *)(v33 + 2 * (v32 & 0x7F));
            if (v31 > v34)
            {
              v35 = &v21[v34];
              if (v35 != v20 && *((_DWORD *)v35 + 1) == (_DWORD)v32)
                break;
            }
          }
        }
        if (++v30 == v20)
          goto LABEL_74;
      }
      v21 = v30;
    }
  }
  v37 = v265;
  if (v20 != v21)
  {
    while (1)
    {
      v38 = *v21;
      v39 = v264;
      v40 = (v37 - (_BYTE *)v264) >> 3;
      if (v267 < v40 + 1)
        break;
LABEL_62:
      *(_QWORD *)v37 = v38;
      v37 = v265 + 8;
      v265 += 8;
      v58 = (uint64_t *)v19[8];
      v59 = v21 + 1;
      if (v21 + 1 != v58)
      {
        v60 = v19[4];
        v61 = v19[7];
        while (1)
        {
          v62 = *((unsigned int *)v59 + 1);
          if (v62 >> 7 < (v19[5] - v60) >> 3)
          {
            v63 = *(_QWORD *)(v60 + 8 * (v62 >> 7));
            if (v63)
            {
              v64 = *(unsigned __int16 *)(v63 + 2 * (v62 & 0x7F));
              if (((uint64_t)v58 - v61) >> 3 > v64)
              {
                v65 = v61 + 8 * v64;
                if ((uint64_t *)v65 != v58 && *(_DWORD *)(v65 + 4) == (_DWORD)v62)
                  break;
              }
            }
          }
          if (++v59 == v58)
            goto LABEL_42;
        }
        v58 = v59;
      }
LABEL_42:
      v21 = v58;
      if (v20 == v58)
        goto LABEL_75;
    }
    v41 = v266;
    v42 = (1 << -(char)__clz(v267 + 1));
    if (v267 >= 0xFFFFFFFFFFFFFFFELL)
      v43 = 1;
    else
      v43 = v42;
    if (v43 <= v40 + 1)
      v44 = v40 + 1;
    else
      v44 = v43;
    v45 = malloc_type_malloc(8 * v44, 0x100004000313F17uLL);
    v46 = (char *)v45;
    v47 = (uint64_t *)v264;
    v48 = v265;
    if (v264 != v265)
    {
      v49 = v265 - (_BYTE *)v264 - 8;
      if (v49 < 0x18)
      {
        v50 = v45;
      }
      else
      {
        v50 = v45;
        if ((unint64_t)((char *)v45 - (_BYTE *)v264) >= 0x20)
        {
          v51 = (v49 >> 3) + 1;
          v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
          v50 = (_QWORD *)((char *)v45 + v52);
          v53 = (__int128 *)((char *)v264 + 16);
          v54 = v45 + 1;
          v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            *v54 = v56;
            v53 += 2;
            v54 += 2;
            v55 -= 4;
          }
          while (v55);
          if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_59;
          v47 = (uint64_t *)((char *)v47 + v52);
        }
      }
      do
      {
        v57 = *v47++;
        *v50++ = v57;
      }
      while (v47 != (uint64_t *)v48);
    }
LABEL_59:
    if (v39 != v41)
      free(v264);
    v37 = &v46[8 * v40];
    v264 = v46;
    v265 = v37;
    v267 = v44;
    goto LABEL_62;
  }
LABEL_75:
  v67 = (unint64_t *)v264;
  if (v264 != v37)
  {
    do
      gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::updateRequestStatus(v254, *v67++, 3);
    while (v67 != (unint64_t *)v37);
  }
  v68 = (_QWORD *)gdc::Registry::storage<arComponents::ExternalAssetRequestData>(v254);
  v69 = 0;
  v70 = 0xCBF29CE484222325;
  do
    v70 = 0x100000001B3 * (v70 ^ aStdStringViewG_656[v69++ + 38]);
  while (v69 != 122);
  v71 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(v254, v70);
  v72 = (_QWORD *)v71;
  v73 = v71 + 32;
  v75 = v68[7];
  v74 = v68[8];
  if (*(_QWORD *)(v71 + 64) - *(_QWORD *)(v71 + 56) >= (unint64_t)(v74 - v75))
    v76 = v68 + 4;
  else
    v76 = (_QWORD *)(v71 + 32);
  if (v68 + 4 == v76)
  {
    v258 = &v272;
    if (v75 != v74)
    {
      v155 = (uint64_t *)v68[10];
      do
      {
        v156 = *(unsigned int *)(v75 + 4);
        v157 = v72[4];
        if (v156 >> 7 < (v72[5] - v157) >> 3)
        {
          v158 = *(_QWORD *)(v157 + 8 * (v156 >> 7));
          if (v158)
          {
            v159 = *(unsigned __int16 *)(v158 + 2 * (v156 & 0x7F));
            v161 = v72[7];
            v160 = v72[8];
            if (v159 < (v160 - v161) >> 3)
            {
              v162 = v161 + 8 * v159;
              if (v162 != v160 && *(_DWORD *)(v162 + 4) == (_DWORD)v156)
                processPendingAssetIDs(gdc::Registry *,gdc::LayerDataCollector *)::$_0::operator()((gdc::LayerDataCollector ***)&v258, *v155);
            }
          }
        }
        ++v155;
        v75 += 8;
      }
      while (v75 != v74);
    }
  }
  if ((_QWORD *)v73 == v76)
  {
    v258 = &v272;
    v164 = (unint64_t *)v72[7];
    v165 = (uint64_t *)v72[8];
    while (v164 != (unint64_t *)v165)
    {
      v167 = *((unsigned int *)v164 + 1);
      v168 = v68[4];
      v169 = (v68[5] - v168) >> 3;
      if (v167 >> 7 < v169)
      {
        v170 = *(_QWORD *)(v168 + 8 * (v167 >> 7));
        if (v170)
        {
          v171 = *(unsigned __int16 *)(v170 + 2 * (v167 & 0x7F));
          v173 = v68[7];
          v172 = v68[8];
          v174 = (v172 - v173) >> 3;
          if (v174 > v171)
          {
            v175 = v173 + 8 * v171;
            if (v175 != v172 && *(_DWORD *)(v175 + 4) == (_DWORD)v167)
            {
              v177 = *v164;
              v178 = *v164 >> 39;
              if (v178 < v169
                && (v179 = *(_QWORD *)(v168 + 8 * v178)) != 0
                && (v180 = *(unsigned __int16 *)(v179 + 2 * (HIDWORD(v177) & 0x7F)), v174 > v180)
                && ((v181 = HIDWORD(v177), v182 = v173 + 8 * v180, v182 != v172)
                  ? (v183 = *(_DWORD *)(v182 + 4) == (_DWORD)v181)
                  : (v183 = 0),
                    v183))
              {
                v166 = (uint64_t *)(v68[10] + 8 * v180);
              }
              else
              {
                v166 = (uint64_t *)v68[11];
              }
              processPendingAssetIDs(gdc::Registry *,gdc::LayerDataCollector *)::$_0::operator()((gdc::LayerDataCollector ***)&v258, *v166);
            }
          }
        }
      }
      ++v164;
    }
  }
  if (v264 != v266)
    free(v264);
  v77 = *v250;
  md::LayoutContext::frameState(a2);
  gdc::LayerDataManager::createDataRequests(v77, *(gdc::LayerDataCollector **)(v256 + 128), (uint64_t)(*(double *)(v78 + 88) * 1000.0));
  gdc::LayerDataManager::getData(v77, *(gdc::LayerDataCollector **)(v256 + 128));
  v79 = *(_QWORD *)(v256 + 128);
  if (*(_QWORD *)(v256 + 160))
  {
    v80 = *(_QWORD **)(v256 + 152);
    while (v80)
    {
      v85 = v80;
      v80 = (_QWORD *)*v80;
      v86 = (std::__shared_weak_count *)v85[4];
      if (v86)
      {
        p_shared_owners = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(p_shared_owners);
        while (__stlxr(v88 - 1, p_shared_owners));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      operator delete(v85);
    }
    *(_QWORD *)(v256 + 152) = 0;
    v81 = *(_QWORD *)(v256 + 144);
    if (v81)
    {
      for (i = 0; i != v81; ++i)
        *(_QWORD *)(*(_QWORD *)(v256 + 136) + 8 * i) = 0;
    }
    *(_QWORD *)(v256 + 160) = 0;
  }
  v83 = *(_QWORD *)(v79 + 24);
  v84 = *(_QWORD *)(v79 + 32);
  if (v83 != v84)
  {
    while (*(_WORD *)v83 != 55)
    {
      v83 += 32;
      if (v83 == v84)
        goto LABEL_124;
    }
  }
  if (v83 != v84)
  {
    v89 = *(_QWORD *)(v83 + 8);
    v90 = *(_QWORD *)(v83 + 16);
    while (v89 != v90)
    {
      if (*(_DWORD *)(v89 + 128) == 3)
      {
        v91 = *(char **)(v89 + 112);
        v92 = *(std::__shared_weak_count **)(v89 + 120);
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          v95 = (void *)*((_QWORD *)v91 + 21);
          do
            v96 = __ldxr(v93);
          while (__stxr(v96 + 1, v93));
          v97 = v92;
        }
        else
        {
          v97 = 0;
          v95 = (void *)*((_QWORD *)v91 + 21);
        }
        v264 = v95;
        v265 = v91;
        v266 = v97;
        std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::AssetData>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::shared_ptr<md::AssetData>>>(v256 + 136, (unint64_t)v95, (uint64_t)&v264);
        v98 = (std::__shared_weak_count *)v266;
        if (v266)
        {
          v99 = (unint64_t *)((char *)v266 + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        if (v92)
        {
          v101 = (unint64_t *)&v92->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      v89 += 144;
    }
  }
LABEL_124:
  v103 = *(_QWORD *)(v256 + 120);
  v270 = 0;
  v271 = v103;
  v264 = v268;
  v265 = (char *)v268;
  v266 = v268;
  v267 = 4;
  v258 = v262;
  v259 = v262;
  v260 = v262;
  v261 = 4;
  v104 = (_QWORD *)gdc::Registry::storage<arComponents::ExternalAssetRequestData>(v103);
  for (j = 0; j != 122; ++j)
    v15 = 0x100000001B3 * (v15 ^ aStdStringViewG_656[j + 38]);
  v106 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(v103, v15);
  v107 = (_QWORD *)v106;
  v108 = v106 + 32;
  v110 = v104[7];
  v109 = v104[8];
  if (*(_QWORD *)(v106 + 64) - *(_QWORD *)(v106 + 56) >= (unint64_t)(v109 - v110))
    v111 = v104 + 4;
  else
    v111 = (_QWORD *)(v106 + 32);
  if (v104 + 4 == v111)
  {
    *(_QWORD *)&v272._type = &v270;
    *(_QWORD *)&v272._xIdx = v256 + 136;
    v272._hash = (unint64_t)&v264;
    v273 = &v271;
    v274 = &v258;
    if (v110 != v109)
    {
      v184 = (unint64_t *)v104[10];
      do
      {
        v185 = *(unsigned int *)(v110 + 4);
        v186 = v107[4];
        if (v185 >> 7 < (v107[5] - v186) >> 3)
        {
          v187 = *(_QWORD *)(v186 + 8 * (v185 >> 7));
          if (v187)
          {
            v188 = *(unsigned __int16 *)(v187 + 2 * (v185 & 0x7F));
            v190 = v107[7];
            v189 = v107[8];
            if (v188 < (v189 - v190) >> 3)
            {
              v191 = v190 + 8 * v188;
              if (v191 != v189 && *(_DWORD *)(v191 + 4) == (_DWORD)v185)
                assignDataToComponentUsingAssetMap(gdc::Registry *,std::unordered_map<unsigned long long,std::shared_ptr<md::AssetData>> &)::$_0::operator()((uint64_t **)&v272, *(_QWORD *)v110, *v184);
            }
          }
        }
        ++v184;
        v110 += 8;
      }
      while (v110 != v109);
    }
  }
  if ((_QWORD *)v108 == v111)
  {
    *(_QWORD *)&v272._type = &v270;
    *(_QWORD *)&v272._xIdx = v256 + 136;
    v272._hash = (unint64_t)&v264;
    v273 = &v271;
    v274 = &v258;
    v193 = v107[7];
    v194 = v107[8];
    while (v193 != v194)
    {
      v196 = *(unsigned int *)(v193 + 4);
      v197 = v104[4];
      v198 = (v104[5] - v197) >> 3;
      if (v196 >> 7 < v198)
      {
        v199 = *(_QWORD *)(v197 + 8 * (v196 >> 7));
        if (v199)
        {
          v200 = *(unsigned __int16 *)(v199 + 2 * (v196 & 0x7F));
          v202 = v104[7];
          v201 = v104[8];
          v203 = (v201 - v202) >> 3;
          if (v203 > v200)
          {
            v204 = v202 + 8 * v200;
            if (v204 != v201 && *(_DWORD *)(v204 + 4) == (_DWORD)v196)
            {
              v206 = *(_QWORD *)v193;
              v207 = *(_QWORD *)v193 >> 39;
              if (v207 < v198
                && (v208 = *(_QWORD *)(v197 + 8 * v207)) != 0
                && (v209 = *(unsigned __int16 *)(v208 + 2 * (HIDWORD(v206) & 0x7F)), v203 > v209)
                && ((v210 = v202 + 8 * v209, v210 != v201)
                  ? (v211 = *(_DWORD *)(v210 + 4) == HIDWORD(v206))
                  : (v211 = 0),
                    v211))
              {
                v195 = (unint64_t *)(v104[10] + 8 * v209);
              }
              else
              {
                v195 = (unint64_t *)v104[11];
              }
              assignDataToComponentUsingAssetMap(gdc::Registry *,std::unordered_map<unsigned long long,std::shared_ptr<md::AssetData>> &)::$_0::operator()((uint64_t **)&v272, v206, *v195);
            }
          }
        }
      }
      v193 += 8;
    }
  }
  v112 = (unint64_t *)v264;
  v113 = (unint64_t *)v265;
  if (v264 != v265)
  {
    do
      gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::updateRequestStatus(v271, *v112++, 1);
    while (v112 != v113);
  }
  v115 = (unint64_t *)v258;
  v114 = v259;
  if (v258 != v259)
  {
    do
      gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::updateRequestStatus(v271, *v115++, 4);
    while (v115 != (unint64_t *)v114);
    v115 = (unint64_t *)v258;
  }
  if (v115 != (unint64_t *)v260)
    free(v115);
  if (v264 != v266)
    free(v264);
  v116 = *(_QWORD *)(v256 + 120);
  v264 = v268;
  v265 = (char *)v268;
  v266 = v268;
  v267 = 4;
  v117 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(v116);
  v118 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>(v116);
  v119 = (_QWORD *)v118;
  v121 = v117[7];
  v120 = v117[8];
  if (*(_QWORD *)(v118 + 64) - *(_QWORD *)(v118 + 56) >= (unint64_t)(v120 - v121))
    v122 = v117 + 4;
  else
    v122 = (_QWORD *)(v118 + 32);
  v255 = v122;
  v257 = v118 + 32;
  if (v117 + 4 == v122 && v121 != v120)
  {
    v127 = (unsigned __int8 *)v117[10];
    while (1)
    {
      v129 = *(unsigned int *)(v121 + 4);
      v130 = v119[4];
      if (v129 >> 7 >= (v119[5] - v130) >> 3)
        goto LABEL_157;
      v131 = *(_QWORD *)(v130 + 8 * (v129 >> 7));
      if (!v131)
        goto LABEL_157;
      v132 = *(unsigned __int16 *)(v131 + 2 * (v129 & 0x7F));
      v134 = v119[7];
      v133 = v119[8];
      if (v132 >= (v133 - v134) >> 3)
        goto LABEL_157;
      v135 = v134 + 8 * v132;
      if (v135 == v133 || *(_DWORD *)(v135 + 4) != (_DWORD)v129)
        goto LABEL_157;
      v137 = *(_QWORD *)v121;
      gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(v116, *(_QWORD *)v121, *v127);
      v138 = v264;
      v128 = (size_t *)v265;
      v139 = ((v265 - (_BYTE *)v264) >> 3) + 1;
      if (v267 < v139)
        break;
LABEL_156:
      *v128 = v137;
      v265 += 8;
LABEL_157:
      ++v127;
      v121 += 8;
      if (v121 == v120)
        goto LABEL_148;
    }
    v251 = v266;
    v253 = (v265 - (_BYTE *)v264) >> 3;
    v140 = (1 << -(char)__clz(v267 + 1));
    if (v267 >= 0xFFFFFFFFFFFFFFFELL)
      v140 = 1;
    if (v140 <= v139)
      v141 = ((v265 - (_BYTE *)v264) >> 3) + 1;
    else
      v141 = v140;
    v142 = malloc_type_malloc(8 * v141, 0x100004000313F17uLL);
    v143 = (char *)v142;
    v144 = (uint64_t *)v264;
    v145 = v265;
    if (v264 != v265)
    {
      v146 = v265 - (_BYTE *)v264 - 8;
      if (v146 < 0x18)
      {
        v147 = v142;
      }
      else
      {
        v147 = v142;
        if ((unint64_t)((char *)v142 - (_BYTE *)v264) >= 0x20)
        {
          v148 = (v146 >> 3) + 1;
          v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
          v147 = (_QWORD *)((char *)v142 + v149);
          v150 = (__int128 *)((char *)v264 + 16);
          v151 = v142 + 1;
          v152 = v148 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v153 = *v150;
            *(v151 - 1) = *(v150 - 1);
            *v151 = v153;
            v150 += 2;
            v151 += 2;
            v152 -= 4;
          }
          while (v152);
          if (v148 == (v148 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_181;
          v144 = (uint64_t *)((char *)v144 + v149);
        }
      }
      do
      {
        v154 = *v144++;
        *v147++ = v154;
      }
      while (v144 != (uint64_t *)v145);
    }
LABEL_181:
    if (v138 != v251)
      free(v264);
    v128 = (size_t *)&v143[8 * v253];
    v264 = v143;
    v265 = (char *)v128;
    v267 = v141;
    goto LABEL_156;
  }
LABEL_148:
  if ((_QWORD *)v257 == v255)
  {
    v212 = v119[7];
    v213 = v119[8];
    while (1)
    {
      if (v212 == v213)
        goto LABEL_149;
      v215 = *(unsigned int *)(v212 + 4);
      v216 = v117[4];
      v217 = (v117[5] - v216) >> 3;
      if (v215 >> 7 < v217)
      {
        v218 = *(_QWORD *)(v216 + 8 * (v215 >> 7));
        if (v218)
        {
          v219 = *(unsigned __int16 *)(v218 + 2 * (v215 & 0x7F));
          v221 = v117[7];
          v220 = v117[8];
          v222 = (v220 - v221) >> 3;
          if (v222 > v219)
          {
            v223 = v221 + 8 * v219;
            if (v223 != v220 && *(_DWORD *)(v223 + 4) == (_DWORD)v215)
              break;
          }
        }
      }
LABEL_254:
      v212 += 8;
    }
    v225 = *(_QWORD *)v212;
    v226 = *(_QWORD *)v212 >> 39;
    if (v226 < v217
      && (v227 = *(_QWORD *)(v216 + 8 * v226)) != 0
      && (v228 = *(unsigned __int16 *)(v227 + 2 * (HIDWORD(v225) & 0x7F)), v222 > v228)
      && ((v229 = v221 + 8 * v228, v229 != v220) ? (v230 = *(_DWORD *)(v229 + 4) == HIDWORD(v225)) : (v230 = 0), v230))
    {
      v231 = (unsigned __int8 *)(v117[10] + v228);
    }
    else
    {
      v231 = (unsigned __int8 *)v117[11];
    }
    gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(v116, *(_QWORD *)v212, *v231);
    v232 = v264;
    v214 = (size_t *)v265;
    v233 = (v265 - (_BYTE *)v264) >> 3;
    if (v267 >= v233 + 1)
    {
LABEL_253:
      *v214 = v225;
      v265 += 8;
      goto LABEL_254;
    }
    v234 = v266;
    v235 = (1 << -(char)__clz(v267 + 1));
    if (v267 >= 0xFFFFFFFFFFFFFFFELL)
      v235 = 1;
    if (v235 <= v233 + 1)
      v236 = v233 + 1;
    else
      v236 = v235;
    v237 = malloc_type_malloc(8 * v236, 0x100004000313F17uLL);
    v238 = (char *)v237;
    v239 = (uint64_t *)v264;
    v240 = v265;
    if (v264 != v265)
    {
      v241 = v265 - (_BYTE *)v264 - 8;
      if (v241 < 0x18)
      {
        v242 = v237;
      }
      else
      {
        v242 = v237;
        if ((unint64_t)((char *)v237 - (_BYTE *)v264) >= 0x20)
        {
          v243 = (v241 >> 3) + 1;
          v244 = 8 * (v243 & 0x3FFFFFFFFFFFFFFCLL);
          v242 = (_QWORD *)((char *)v237 + v244);
          v245 = (__int128 *)((char *)v264 + 16);
          v246 = v237 + 1;
          v247 = v243 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v248 = *v245;
            *(v246 - 1) = *(v245 - 1);
            *v246 = v248;
            v245 += 2;
            v246 += 2;
            v247 -= 4;
          }
          while (v247);
          if (v243 == (v243 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_288;
          v239 = (uint64_t *)((char *)v239 + v244);
        }
      }
      do
      {
        v249 = *v239++;
        *v242++ = v249;
      }
      while (v239 != (uint64_t *)v240);
    }
LABEL_288:
    if (v232 != v234)
      free(v264);
    v214 = (size_t *)&v238[8 * v233];
    v264 = v238;
    v265 = (char *)v214;
    v267 = v236;
    goto LABEL_253;
  }
LABEL_149:
  v124 = (unint64_t *)v264;
  v125 = (unint64_t *)v265;
  if (v264 != v265)
  {
    do
    {
      v126 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>(v116);
      gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>::remove(v126, *v124++);
    }
    while (v124 != v125);
    v124 = (unint64_t *)v264;
  }
  if (v124 != v266)
    free(v124);
}

void sub_19F9A4E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25)
{
  if (a14 != a16)
    free(a14);
  if (a23 != a25)
    free(a23);
  _Unwind_Resume(exception_object);
}

void md::Logic<md::ARExternalAssetDataRequestLogic,md::ARExternalAssetDataRequestContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_779[v16++ + 38]);
  while (v16 != 124);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<gdc::component::DataRequestStatus::Initiated>]";
  *(_QWORD *)(v14 + 24) = 124;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4158;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 124; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_779[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<gdc::component::DataRequestStatus::Initiated>]";
  v22[2] = 124;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F9A5254(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::ExternalAssetRequestData>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6195BF5ED04FDED0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6195BF5ED04FDED0;
      if (*(_QWORD *)&v3 <= 0x6195BF5ED04FDED0uLL)
        v5 = 0x6195BF5ED04FDED0uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6195BF5ED04FDED0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6195BF5ED04FDED0)
            {
              if (v7[2] == 0x6195BF5ED04FDED0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6195BF5ED04FDED0)
          {
            if (v7[2] == 0x6195BF5ED04FDED0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::ExternalAssetRequestData]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2268;
  *(_QWORD *)(v11 + 8) = 0x6195BF5ED04FDED0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6195BF5ED04FDED0uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6195BF5ED04FDED0;
  v15[1] = "arComponents::ExternalAssetRequestData]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6195BF5ED04FDED0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F9A547C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_656[v16++ + 38]);
  while (v16 != 122);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<gdc::component::DataRequestStatus::Pending>]";
  *(_QWORD *)(v14 + 24) = 122;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4188;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 122; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_656[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<gdc::component::DataRequestStatus::Pending>]";
  v22[2] = 122;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F9A56E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::updateRequestStatus(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE *v15;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  _QWORD *i;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  size_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  size_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  size_t v70;
  char *v71;
  char *v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;

  v6 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(a1);
  v7 = v6[4];
  if (a2 >> 39 < (v6[5] - v7) >> 3)
  {
    v8 = *(_QWORD *)(v7 + 8 * (a2 >> 39));
    if (v8)
    {
      v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
      v11 = v6[7];
      v10 = v6[8];
      if (v9 < (v10 - v11) >> 3)
      {
        v12 = v11 + 8 * v9;
        if (v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2))
        {
          v14 = v6[10];
          v15 = (_BYTE *)(v14 + v9);
          if (v14 + v9 != v6[11] && v14 != 0)
          {
            v17 = *v15;
            if (v17 != a3)
            {
              gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::_removeStatusTag(a1, a2, v17);
              switch(a3)
              {
                case 1:
                  v18 = 0;
                  v19 = 0xCBF29CE484222325;
                  do
                    v19 = 0x100000001B3 * (v19 ^ aStdStringViewG_657[v18++ + 38]);
                  while (v18 != 121);
                  v20 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>(a1, v19);
                  v85 = a2;
                  v21 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v20 + 4, (uint64_t)&v85);
                  if ((v22 & 1) != 0)
                  {
                    v46 = (_BYTE *)v20[11];
                    v45 = v20[12];
                    if ((unint64_t)v46 >= v45)
                    {
                      v54 = (char *)v20[10];
                      v55 = v46 - v54;
                      v56 = v46 - v54 + 1;
                      if (v56 < 0)
                        goto LABEL_104;
                      v57 = v45 - (_QWORD)v54;
                      if (2 * v57 > v56)
                        v56 = 2 * v57;
                      if (v57 >= 0x3FFFFFFFFFFFFFFFLL)
                        v58 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v58 = v56;
                      if (v58)
                        v59 = (char *)operator new(v58);
                      else
                        v59 = 0;
                      v76 = &v59[v58];
                      v47 = (uint64_t)&v59[v55 + 1];
                      v77 = (char *)(v54 - v46);
                      if (v54 == v46)
                        v77 = 0;
                      v20[10] = (uint64_t)&v59[v55 + (_QWORD)v77];
                      v20[11] = v47;
                      v20[12] = (uint64_t)v76;
                      if (v54)
                        operator delete(v54);
                    }
                    else
                    {
                      v47 = (uint64_t)(v46 + 1);
                    }
                    v20[11] = v47;
                    v23 = v20[31];
                  }
                  else
                  {
                    v23 = v20[31];
                    if (v20[10] + (((uint64_t)v21 - v20[7]) >> 3) != v20[11])
                    {
                      v24 = (_QWORD *)v20[16];
                      if (v24)
                      {
                        while (1)
                        {
                          v87 = &v85;
                          v88 = 1;
                          v86 = v23;
                          v25 = v24[6];
                          if (!v25)
                            break;
                          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v25 + 48))(v25, &v86, &v87);
                          v24 = (_QWORD *)*v24;
                          if (!v24)
                            goto LABEL_101;
                        }
LABEL_103:
                        std::__throw_bad_function_call[abi:nn180100]();
LABEL_104:
                        abort();
                      }
                      goto LABEL_101;
                    }
                  }
                  v78 = (_QWORD *)v20[22];
                  if (v78)
                  {
                    while (1)
                    {
                      v87 = &v85;
                      v88 = 1;
                      v86 = v23;
                      v79 = v78[6];
                      if (!v79)
                        goto LABEL_103;
                      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v79 + 48))(v79, &v86, &v87);
                      v78 = (_QWORD *)*v78;
                      if (!v78)
                        goto LABEL_101;
                    }
                  }
                  goto LABEL_101;
                case 2:
                  v26 = 0;
                  v27 = 0xCBF29CE484222325;
                  do
                    v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_779[v26++ + 38]);
                  while (v26 != 124);
                  v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(a1, v27);
                  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v28, a2);
                  goto LABEL_101;
                case 3:
                  v29 = 0;
                  v30 = 0xCBF29CE484222325;
                  do
                    v30 = 0x100000001B3 * (v30 ^ aStdStringViewG_656[v29++ + 38]);
                  while (v29 != 122);
                  v31 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(a1, v30);
                  v85 = a2;
                  v32 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v31 + 4, (uint64_t)&v85);
                  if ((v33 & 1) != 0)
                  {
                    v49 = (_BYTE *)v31[11];
                    v48 = v31[12];
                    if ((unint64_t)v49 >= v48)
                    {
                      v60 = (char *)v31[10];
                      v61 = v49 - v60;
                      v62 = v49 - v60 + 1;
                      if (v62 < 0)
                        goto LABEL_104;
                      v63 = v48 - (_QWORD)v60;
                      if (2 * v63 > v62)
                        v62 = 2 * v63;
                      if (v63 >= 0x3FFFFFFFFFFFFFFFLL)
                        v64 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v64 = v62;
                      if (v64)
                        v65 = (char *)operator new(v64);
                      else
                        v65 = 0;
                      v72 = &v65[v64];
                      v50 = (uint64_t)&v65[v61 + 1];
                      v73 = (char *)(v60 - v49);
                      if (v60 == v49)
                        v73 = 0;
                      v31[10] = (uint64_t)&v65[v61 + (_QWORD)v73];
                      v31[11] = v50;
                      v31[12] = (uint64_t)v72;
                      if (v60)
                        operator delete(v60);
                    }
                    else
                    {
                      v50 = (uint64_t)(v49 + 1);
                    }
                    v31[11] = v50;
                    v34 = v31[31];
                  }
                  else
                  {
                    v34 = v31[31];
                    if (v31[10] + (((uint64_t)v32 - v31[7]) >> 3) != v31[11])
                    {
                      v35 = (_QWORD *)v31[16];
                      if (v35)
                      {
                        while (1)
                        {
                          v87 = &v85;
                          v88 = 1;
                          v86 = v34;
                          v36 = v35[6];
                          if (!v36)
                            goto LABEL_103;
                          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v36 + 48))(v36, &v86, &v87);
                          v35 = (_QWORD *)*v35;
                          if (!v35)
                            goto LABEL_101;
                        }
                      }
                      goto LABEL_101;
                    }
                  }
                  v74 = (_QWORD *)v31[22];
                  if (v74)
                  {
                    while (1)
                    {
                      v87 = &v85;
                      v88 = 1;
                      v86 = v34;
                      v75 = v74[6];
                      if (!v75)
                        goto LABEL_103;
                      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v75 + 48))(v75, &v86, &v87);
                      v74 = (_QWORD *)*v74;
                      if (!v74)
                        goto LABEL_101;
                    }
                  }
                  goto LABEL_101;
                case 4:
                  v37 = 0;
                  v38 = 0xCBF29CE484222325;
                  do
                    v38 = 0x100000001B3 * (v38 ^ aStdStringViewG_658[v37++ + 38]);
                  while (v37 != 124);
                  v39 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(a1, v38);
                  v85 = a2;
                  v40 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v39 + 4, (uint64_t)&v85);
                  if ((v41 & 1) != 0)
                  {
                    v52 = (_BYTE *)v39[11];
                    v51 = v39[12];
                    if ((unint64_t)v52 >= v51)
                    {
                      v66 = (char *)v39[10];
                      v67 = v52 - v66;
                      v68 = v52 - v66 + 1;
                      if (v68 < 0)
                        goto LABEL_104;
                      v69 = v51 - (_QWORD)v66;
                      if (2 * v69 > v68)
                        v68 = 2 * v69;
                      if (v69 >= 0x3FFFFFFFFFFFFFFFLL)
                        v70 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v70 = v68;
                      if (v70)
                        v71 = (char *)operator new(v70);
                      else
                        v71 = 0;
                      v80 = &v71[v70];
                      v53 = (uint64_t)&v71[v67 + 1];
                      v81 = (char *)(v66 - v52);
                      if (v66 == v52)
                        v81 = 0;
                      v39[10] = (uint64_t)&v71[v67 + (_QWORD)v81];
                      v39[11] = v53;
                      v39[12] = (uint64_t)v80;
                      if (v66)
                        operator delete(v66);
                    }
                    else
                    {
                      v53 = (uint64_t)(v52 + 1);
                    }
                    v39[11] = v53;
                    v42 = v39[31];
                  }
                  else
                  {
                    v42 = v39[31];
                    if (v39[10] + (((uint64_t)v40 - v39[7]) >> 3) != v39[11])
                    {
                      for (i = (_QWORD *)v39[16]; i; i = (_QWORD *)*i)
                      {
                        v87 = &v85;
                        v88 = 1;
                        v86 = v42;
                        v44 = i[6];
                        if (!v44)
                          goto LABEL_103;
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v44 + 48))(v44, &v86, &v87);
                      }
LABEL_101:
                      *v15 = a3;
                      v84 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>(a1);
                      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v84, a2);
                      return;
                    }
                  }
                  v82 = (_QWORD *)v39[22];
                  if (v82)
                  {
                    while (1)
                    {
                      v87 = &v85;
                      v88 = 1;
                      v86 = v42;
                      v83 = v82[6];
                      if (!v83)
                        goto LABEL_103;
                      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v83 + 48))(v83, &v86, &v87);
                      v82 = (_QWORD *)*v82;
                      if (!v82)
                        goto LABEL_101;
                    }
                  }
                  goto LABEL_101;
                default:
                  goto LABEL_101;
              }
            }
          }
        }
      }
    }
  }
}

void processPendingAssetIDs(gdc::Registry *,gdc::LayerDataCollector *)::$_0::operator()(gdc::LayerDataCollector ***a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  gdc::LayerDataCollector *v7;
  void *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char v12[32];
  unint64_t v13;
  uint64_t v14;
  char v15[8];
  void *v16;
  void *v17;
  char v18;
  QuadTile v19;

  v8 = v12;
  v9 = v12;
  v10 = v12;
  v11 = 32;
  v13 = 0;
  v14 = a2;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v8, v12, (char *)&v14, v15);
  v14 = 0;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v8, v9, (char *)&v14, v15);
  v3 = (unsigned __int8 *)v8;
  v4 = v9 - (_BYTE *)v8;
  if (v9 == v8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      v6 = *v3++;
      v5 ^= (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL + v6;
      --v4;
    }
    while (v4);
  }
  v13 = v5;
  gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v14, 0, 0x37u, (uint64_t)&v8, -1073741827);
  if (v8 != v10)
    free(v8);
  v7 = **a1;
  *(_WORD *)&v19._type = 255;
  *(_QWORD *)&v19._yIdx = 0;
  gdc::LayerDataCollector::addDataKey(v7, (const gdc::LayerDataRequestKey *)&v14, &v19);
  if (v18)
    v18 = 0;
  if (v16 != v17)
    free(v16);
}

void assignDataToComponentUsingAssetMap(gdc::Registry *,std::unordered_map<unsigned long long,std::shared_ptr<md::AssetData>> &)::$_0::operator()(uint64_t **a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  _OWORD *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  char v66;
  char v67;

  v5 = a1[1];
  v6 = (int8x8_t)v5[1];
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a3;
      if (*(_QWORD *)&v6 <= a3)
        v8 = a3 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & a3;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v9 = (_QWORD *)*v9;
      if (v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a3)
            {
              if (v9[2] == a3)
                goto LABEL_22;
            }
            else if ((v12 & v10) != v8)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a3)
          {
            if (v9[2] == a3)
              break;
          }
          else
          {
            if (v11 >= *(_QWORD *)&v6)
              v11 %= *(_QWORD *)&v6;
            if (v11 != v8)
              goto LABEL_21;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  else
  {
LABEL_21:
    v9 = 0;
  }
LABEL_22:
  **a1 = (uint64_t)v9;
  v13 = **a1;
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(_QWORD *)(v14 + 184);
    if (*(_QWORD *)(v14 + 192) - v15 == 80)
    {
      v16 = *a1[3];
      *(_QWORD *)&v64 = a3;
      *((_QWORD *)&v64 + 1) = v14;
      v17 = *(std::__shared_weak_count **)(v13 + 32);
      v65 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      v66 = 0;
      v67 = 0;
      v20 = (uint64_t *)gdc::Registry::storage<arComponents::AssetDataReference>(v16);
      gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::emplace(v20, a2, (uint64_t)&v64);
      v21 = v65;
      if (v65)
      {
        v22 = (unint64_t *)&v65->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = *a1[3];
      v64 = *(_OWORD *)(v15 + 36);
      v65 = *(std::__shared_weak_count **)(v15 + 52);
      v25 = (uint64_t *)gdc::Registry::storage<arComponents::Boundary>(v24);
      gdc::ComponentStorageWrapper<arComponents::Boundary>::emplace(v25, a2, &v64);
      v26 = *a1[3];
      *(_QWORD *)&v64 = v15;
      v27 = (uint64_t *)gdc::Registry::storage<arComponents::MeshDataComponent>(v26);
      gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v27, a2, &v64);
      v28 = a1[4];
      v30 = v28 + 1;
      v29 = (uint64_t *)v28[1];
      v31 = (char *)*v28;
      v32 = ((uint64_t)v29 - *v28) >> 3;
      v33 = v28[3];
      if (v33 >= v32 + 1)
        goto LABEL_66;
      v34 = (char *)v28[2];
      v35 = (1 << -(char)__clz(v33 + 1));
      if (v33 >= 0xFFFFFFFFFFFFFFFELL)
        v35 = 1;
      if (v35 <= v32 + 1)
        v36 = v32 + 1;
      else
        v36 = v35;
      v37 = (char *)malloc_type_malloc(8 * v36, 0x100004000313F17uLL);
      v38 = v37;
      v39 = (uint64_t *)*v28;
      v40 = (char *)v28[1];
      if ((char *)*v28 == v40)
        goto LABEL_63;
      v41 = v40 - (char *)v39 - 8;
      if (v41 < 0x18)
      {
        v42 = v37;
        do
        {
LABEL_62:
          v63 = *v39++;
          *(_QWORD *)v42 = v63;
          v42 += 8;
        }
        while (v39 != (uint64_t *)v40);
        goto LABEL_63;
      }
      v42 = v37;
      if ((unint64_t)(v37 - (char *)v39) < 0x20)
        goto LABEL_62;
      v43 = (v41 >> 3) + 1;
      v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      v42 = &v37[v44];
      v45 = (__int128 *)(v39 + 2);
      v46 = v37 + 16;
      v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = *v45;
        *(v46 - 1) = *(v45 - 1);
        *v46 = v48;
        v45 += 2;
        v46 += 2;
        v47 -= 4;
      }
      while (v47);
      if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v39 = (uint64_t *)((char *)v39 + v44);
        goto LABEL_62;
      }
    }
    else
    {
      v28 = a1[2];
      v30 = v28 + 1;
      v29 = (uint64_t *)v28[1];
      v31 = (char *)*v28;
      v32 = ((uint64_t)v29 - *v28) >> 3;
      v49 = v28[3];
      if (v49 >= v32 + 1)
      {
LABEL_66:
        *v29 = a2;
        *v30 += 8;
        return;
      }
      v34 = (char *)v28[2];
      v50 = (1 << -(char)__clz(v49 + 1));
      if (v49 >= 0xFFFFFFFFFFFFFFFELL)
        v50 = 1;
      if (v50 <= v32 + 1)
        v36 = v32 + 1;
      else
        v36 = v50;
      v51 = (char *)malloc_type_malloc(8 * v36, 0x100004000313F17uLL);
      v38 = v51;
      v52 = (uint64_t *)*v28;
      v53 = (char *)v28[1];
      if ((char *)*v28 != v53)
      {
        v54 = v53 - (char *)v52 - 8;
        if (v54 < 0x18)
        {
          v55 = v51;
        }
        else
        {
          v55 = v51;
          if ((unint64_t)(v51 - (char *)v52) >= 0x20)
          {
            v56 = (v54 >> 3) + 1;
            v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
            v55 = &v51[v57];
            v58 = (__int128 *)(v52 + 2);
            v59 = v51 + 16;
            v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v61 = *v58;
              *(v59 - 1) = *(v58 - 1);
              *v59 = v61;
              v58 += 2;
              v59 += 2;
              v60 -= 4;
            }
            while (v60);
            if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_63;
            v52 = (uint64_t *)((char *)v52 + v57);
          }
        }
        do
        {
          v62 = *v52++;
          *(_QWORD *)v55 = v62;
          v55 += 8;
        }
        while (v52 != (uint64_t *)v53);
      }
    }
LABEL_63:
    if (v31 != v34)
      free((void *)*v28);
    v29 = (uint64_t *)&v38[8 * v32];
    *v28 = (uint64_t)v38;
    v28[1] = (uint64_t)v29;
    v28[3] = v36;
    goto LABEL_66;
  }
}

void sub_19F9A6238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::components::Material::~Material((md::components::Material *)&a9);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8EC220D18D2A89D2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8EC220D18D2A89D2;
      if (*(_QWORD *)&v3 <= 0x8EC220D18D2A89D2)
        v5 = 0x8EC220D18D2A89D2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8EC220D18D2A89D2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8EC220D18D2A89D2)
            {
              if (v7[2] == 0x8EC220D18D2A89D2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8EC220D18D2A89D2)
          {
            if (v7[2] == 0x8EC220D18D2A89D2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>]";
  *(_QWORD *)(v11 + 24) = 67;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B41E8;
  *(_QWORD *)(v11 + 8) = 0x8EC220D18D2A89D2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8EC220D18D2A89D2, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8EC220D18D2A89D2;
  v15[1] = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>]";
  v15[2] = 67;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8EC220D18D2A89D2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F9A6458(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1191E9FBDD885ABFLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1191E9FBDD885ABFLL;
      if (*(_QWORD *)&v3 <= 0x1191E9FBDD885ABFuLL)
        v5 = 0x1191E9FBDD885ABFuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1191E9FBDD885ABFLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1191E9FBDD885ABFLL)
            {
              if (v7[2] == 0x1191E9FBDD885ABFLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1191E9FBDD885ABFLL)
          {
            if (v7[2] == 0x1191E9FBDD885ABFLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange]";
  *(_QWORD *)(v11 + 24) = 78;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B40F8;
  *(_QWORD *)(v11 + 8) = 0x1191E9FBDD885ABFLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1191E9FBDD885ABFuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1191E9FBDD885ABFLL;
  v15[1] = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange]";
  v15[2] = 78;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1191E9FBDD885ABFLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F9A6680(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>();
}

void gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(uint64_t a1, size_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t **v19;
  unint64_t *v21;
  unint64_t *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v33;
  unint64_t *v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t i;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  uint64_t v58;
  _QWORD v59[2];

  v6 = 0;
  v7 = 0xCBF29CE484222325;
  v8 = 0xCBF29CE484222325;
  do
    v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_782[v6++ + 38]);
  while (v6 != 118);
  v9 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v8);
  v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    v11 = *(_QWORD *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      v14 = v9[7];
      v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        v15 = HIDWORD(a2);
        v16 = v14 + 8 * v12;
        if (v16 != v13 && *(_DWORD *)(v16 + 4) == HIDWORD(a2))
        {
          v18 = v9[10];
          v19 = (unint64_t **)(v18 + 24 * v12);
          if (v19 != (unint64_t **)v9[11] && v18 != 0)
          {
            v21 = *v19;
            v22 = v19[1];
            if (*v19 != v22)
            {
LABEL_16:
              v23 = *(unsigned __int16 *)(a1 + 40);
              v24 = *(_QWORD *)(a1 + 48);
              v25 = (*(_QWORD *)(a1 + 56) - v24) >> 3;
              while (1)
              {
                v26 = *v21;
                v27 = HIDWORD(*v21);
                if (v23 != (unsigned __int16)*v21 || v25 <= v27)
                  break;
                v29 = (unsigned __int16 *)(v24 + 8 * v27);
                if (*v29 != v23 || v29[1] != WORD1(v26) || *((_DWORD *)v29 + 1) != (_DWORD)v27)
                  break;
                if (++v21 == v22)
                  goto LABEL_39;
              }
              while (--v22 != v21)
              {
                v30 = *v22;
                v31 = HIDWORD(*v22);
                if (v23 == (unsigned __int16)*v22 && v25 > v31)
                {
                  v33 = (unsigned __int16 *)(v24 + 8 * v31);
                  if (*v33 == v23 && v33[1] == WORD1(v30) && *((_DWORD *)v33 + 1) == (_DWORD)v31)
                  {
                    *v21++ = v30;
                    *v22 = v26;
                    if (v21 != v22)
                      goto LABEL_16;
                    goto LABEL_39;
                  }
                }
              }
            }
            v22 = v21;
LABEL_39:
            v34 = *v19;
            v35 = v22;
            if (*v19 != v22)
            {
              do
              {
                v36 = 0;
                v37 = *v34;
                v38 = 0xCBF29CE484222325;
                do
                  v38 = 0x100000001B3 * (v38 ^ aStdStringViewG_783[v36++ + 38]);
                while (v36 != 114);
                v39 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v38);
                v40 = v39[4];
                if (v37 >> 39 < (v39[5] - v40) >> 3
                  && (v41 = *(_QWORD *)(v40 + 8 * (v37 >> 39))) != 0
                  && (v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v37) & 0x7F)),
                      v44 = v39[7],
                      v43 = v39[8],
                      v42 < (v43 - v44) >> 3)
                  && ((v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == HIDWORD(v37)) : (v46 = 0), v46))
                {
                  v47 = v39[11];
                  v48 = v39[10] + 12 * v42;
                }
                else
                {
                  v47 = v39[11];
                  v48 = v47;
                }
                if (v48 == v47)
                  v48 = 0;
                v49 = *(unsigned __int8 *)(v48 + 8);
                *(_BYTE *)(v48 + 8) = a3;
                gdc::component::DataRequestObserver::updateStatusCounts(a1, v37, a2, v49, a3);
                ++v34;
              }
              while (v34 != v22);
              v15 = HIDWORD(a2);
              v35 = *v19;
            }
            if (v22 == v35)
            {
              for (i = 0; i != 118; ++i)
                v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_782[i + 38]);
              v51 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v7);
              v57 = a2;
              if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v51 + 4, v15))
              {
                v52 = (_QWORD *)v51[28];
                if (v52)
                {
                  v53 = v51[31];
                  while (1)
                  {
                    v59[0] = &v57;
                    v59[1] = 1;
                    v58 = v53;
                    v54 = v52[6];
                    if (!v54)
                      break;
                    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v54 + 48))(v54, &v58, v59);
                    v52 = (_QWORD *)*v52;
                    if (!v52)
                      return;
                  }
                  std::__throw_bad_function_call[abi:nn180100]();
                  gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(v55, v56);
                }
              }
            }
            else if (v22 != v19[1])
            {
              v19[1] = v22;
            }
          }
        }
      }
    }
  }
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_782[v16++ + 38]);
  while (v16 != 118);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>]";
  *(_QWORD *)(v14 + 24) = 118;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4338;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 118; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_782[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>]";
  v22[2] = 118;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F9A6D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_783[v16++ + 38]);
  while (v16 != 114);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>]";
  *(_QWORD *)(v14 + 24) = 114;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B43F8;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 114; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_783[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>]";
  v22[2] = 114;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F9A6FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 12 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_BYTE *)(v15 - 4);
  *(_QWORD *)v14 = *(_QWORD *)(v15 - 12);
  *(_BYTE *)(v14 + 8) = v16;
  a1[11] -= 12;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::DidChange>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::_removeStatusTag(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  switch(a3)
  {
    case 1:
      v4 = 0;
      v5 = 0xCBF29CE484222325;
      do
        v5 = 0x100000001B3 * (v5 ^ aStdStringViewG_657[v4++ + 38]);
      while (v4 != 121);
      v6 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>(result, v5);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(v6, a2);
      break;
    case 2:
      v7 = 0;
      v8 = 0xCBF29CE484222325;
      do
        v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_779[v7++ + 38]);
      while (v7 != 124);
      v9 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(result, v8);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(v9, a2);
      break;
    case 3:
      v10 = 0;
      v11 = 0xCBF29CE484222325;
      do
        v11 = 0x100000001B3 * (v11 ^ aStdStringViewG_656[v10++ + 38]);
      while (v10 != 122);
      v12 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(result, v11);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(v12, a2);
      break;
    case 4:
      v13 = 0;
      v14 = 0xCBF29CE484222325;
      do
        v14 = 0x100000001B3 * (v14 ^ aStdStringViewG_658[v13++ + 38]);
      while (v13 != 124);
      v15 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(result, v14);
      result = gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(v15, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_657[v16++ + 38]);
  while (v16 != 121);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<gdc::component::DataRequestStatus::Failed>]";
  *(_QWORD *)(v14 + 24) = 121;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B4128;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 121; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_657[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<gdc::component::DataRequestStatus::Failed>]";
  v22[2] = 121;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F9A7844(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t i;
  _QWORD v22[3];
  unint64_t v23;

  v23 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = *(int8x8_t *)(a1 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (*(_QWORD *)&v5 <= a2)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == a2)
            {
              if (v9[2] == a2)
                return v9[3];
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == a2)
          {
            if (v9[2] == a2)
              return v9[3];
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = 0xCBF29CE484222325;
  v14 = operator new();
  v15 = v14;
  v16 = 0;
  v17 = 0xCBF29CE484222325;
  do
    v17 = 0x100000001B3 * (v17 ^ aStdStringViewG_658[v16++ + 38]);
  while (v16 != 124);
  *(_QWORD *)(v14 + 16) = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<gdc::component::DataRequestStatus::Completed>]";
  *(_QWORD *)(v14 + 24) = 124;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B41B8;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 248) = a1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, a2, &v23);
  v19 = v18[3];
  v18[3] = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  for (i = 0; i != 124; ++i)
    v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_658[i + 38]);
  v22[0] = v13;
  v22[1] = "gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<gdc::component::DataRequestStatus::Completed>]";
  v22[2] = 124;
  gdc::Registry::_registerStorageDataSignals(a1, a2, (uint64_t)v22, (uint64_t *)(v15 + 104));
  return v15;
}

void sub_19F9A7AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove();
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v17 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    v18 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v18, v19);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::ExternalAssetRequestData>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ExternalAssetRequestData>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::ExternalAssetRequestData>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<arComponents::ExternalAssetRequestData>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::LayerDataLogicContext>(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x37F8C546A65FE3EELL;
    if (a2 <= 0x37F8C546A65FE3EELL)
      v3 = 0x37F8C546A65FE3EELL % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x37F8C546A65FE3EELL;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x37F8C546A65FE3EELL)
      {
        if (v6[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x37F8C546A65FE3EELL)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x37F8C546A65FE3EELL)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x7851AF310F49C988;
    if (a2 <= 0x7851AF310F49C988)
      v11 = 0x7851AF310F49C988 % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x7851AF310F49C988;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x7851AF310F49C988)
      {
        if (v13[2] == 0x7851AF310F49C988)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x7851AF310F49C988)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x7851AF310F49C988)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x7851AF310F49C988)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::ARExternalAssetDataRequestContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1608;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARExternalAssetDataRequestContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1608;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARExternalAssetDataRequestContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__assign_external(_QWORD *__dst, void *__src, unint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (a3 > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= a3 - v8)
      {
        v9 = (_QWORD *)*__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)__dst[3] + 16))(__dst[3], 2 * v11, 2);
          memmove(v7, __src, 2 * a3);
          if (v8 != 10)
            (*(void (**)(_QWORD, _QWORD *, unint64_t))(*(_QWORD *)__dst[3] + 40))(__dst[3], v9, 2 * (v8 + 1));
          __dst[2] = v11 | 0x8000000000000000;
          *__dst = v7;
LABEL_23:
          __dst[1] = a3;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (a3 > 2 * v8)
          v12 = a3;
        v13 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
        if ((v12 | 3) != 0xB)
          v13 = v12 | 3;
        if (v12 >= 0xB)
          v11 = v13 + 1;
        else
          v11 = 11;
        goto LABEL_15;
      }
LABEL_25:
      abort();
    }
    v6 = HIBYTE(v10);
    v7 = (_QWORD *)*__dst;
  }
  else
  {
    v7 = __dst;
    if (a3 > 0xA)
    {
      if (a3 - 0x7FFFFFFFFFFFFFF7 >= 0x8000000000000013)
      {
        v8 = 10;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (a3)
  {
    memmove(v7, __src, 2 * a3);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = a3 & 0x7F;
LABEL_24:
  *((_WORD *)v7 + a3) = 0;
  return __dst;
}

uint64_t std::wstring_convert<std::codecvt_utf8_utf16<char16_t,1114111ul,(std::codecvt_mode)0>,char16_t,geo::StdAllocator<char16_t,mdm::Allocator>,geo::StdAllocator<char,mdm::Allocator>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 55) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), 2 * *(_QWORD *)(a1 + 48));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_7:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(_QWORD *)a1, *(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_7;
  return a1;
}

void **std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::append(void **a1, unint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  _OWORD *v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (!a2)
    return a1;
  v4 = *((char *)a1 + 23);
  if (v4 < 0)
  {
    v5 = (unint64_t)a1[1];
    v8 = (unint64_t)a1[2];
    v6 = (v8 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v7 = HIBYTE(v8);
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
    v6 = 10;
    LOBYTE(v7) = *((_BYTE *)a1 + 23);
  }
  if (v6 - v5 >= a2)
  {
    v15 = a1;
    if ((v7 & 0x80) != 0)
      v15 = *a1;
  }
  else
  {
    v9 = v5 + a2;
    if (0x7FFFFFFFFFFFFFF7 - v6 < v5 + a2 - v6)
      abort();
    v10 = a1;
    if (v4 < 0)
      v10 = *a1;
    if (v9 <= 2 * v6)
      v9 = 2 * v6;
    v11 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v9 | 3) != 0xB)
      v11 = v9 | 3;
    if (v9 >= 0xB)
      v12 = v11 + 1;
    else
      v12 = 11;
    if (v6 <= 0x3FFFFFFFFFFFFFF2)
      v13 = v12;
    else
      v13 = 0x7FFFFFFFFFFFFFF7;
    v14 = (_WORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 2 * v13, 2);
    v15 = v14;
    if (v5)
      memmove(v14, v10, 2 * v5);
    if (v6 != 10)
      (*(void (**)(void *, _WORD *, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v10, 2 * (v6 + 1));
    a1[1] = (void *)v5;
    a1[2] = (void *)(v13 | 0x8000000000000000);
    *a1 = v15;
  }
  v16 = &v15[v5];
  if (a2 < 0x10)
  {
    v17 = &v15[v5];
    v18 = a2;
    goto LABEL_32;
  }
  v17 = (_WORD *)v16 + (a2 & 0xFFFFFFFFFFFFFFF0);
  v19 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    *v16 = 0uLL;
    v16[1] = 0uLL;
    v16 += 2;
    v19 -= 16;
  }
  while (v19);
  if ((a2 & 0xFFFFFFFFFFFFFFF0) != a2)
  {
    v18 = a2 & 0xF;
    do
    {
LABEL_32:
      *v17++ = 0;
      --v18;
    }
    while (v18);
  }
  v20 = v5 + a2;
  if (*((char *)a1 + 23) < 0)
    a1[1] = (void *)v20;
  else
    *((_BYTE *)a1 + 23) = v20 & 0x7F;
  v15[v20] = 0;
  return a1;
}

void std::__throw_range_error[abi:nn180100]()
{
  std::__libcpp_verbose_abort("range_error was thrown in -fno-exceptions mode with message \"%s\"", "wstring_convert: from_bytes error");
  std::codecvt_utf8_utf16<char16_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:nn180100]();
}

void std::codecvt_utf8_utf16<char16_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:nn180100]()
{
  MEMORY[0x1A1AF4C80]();
  JUMPOUT(0x1A1AF4E00);
}

char *md::TextDataStringInfo::TextDataStringInfo(char *__dst, __int128 *a2, __int128 *a3, int a4)
{
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  const char **v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char **v18;
  char v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  char *v43;
  _BYTE *v44;
  int v45;
  __int128 *p_dsta;
  unsigned int v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _OWORD *v67;
  __int128 *v68;
  unint64_t v69;
  __int128 v70;
  char *v71;
  unint64_t v72;
  char *v73;
  __int16 v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  char *v84;
  __int16 v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  _BYTE *v98;
  unint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  __int128 *v112;
  unint64_t v113;
  __int128 v114;
  char v115;
  uint64_t v116;
  uint64_t v118;
  geo::read_write_lock *v119;
  const char *v120;
  malloc_zone_t *v121;
  uint64_t v122;
  geo::read_write_lock *v123;
  const char *v124;
  malloc_zone_t *v125;
  uint64_t v126;
  geo::read_write_lock *v127;
  const char *v128;
  malloc_zone_t *v129;
  uint64_t v130;
  geo::read_write_lock *v131;
  const char *v132;
  malloc_zone_t *v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  malloc_zone_t *zone;
  uint64_t v138;
  geo::read_write_lock *v139;
  const char *v140;
  malloc_zone_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  __int128 __dsta;
  uint64_t v150;
  uint64_t v151;

  if (a2)
  {
    v151 = *((_QWORD *)a2 + 3);
    if (*((char *)a2 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dsta, *(void **)a2, *((_QWORD *)a2 + 1));
      if (a3)
      {
LABEL_4:
        v148 = *((_QWORD *)a3 + 3);
        if (*((char *)a3 + 23) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v146, *(void **)a3, *((_QWORD *)a3 + 1));
        }
        else
        {
          v146 = *a3;
          v147 = *((_QWORD *)a3 + 2);
        }
        goto LABEL_13;
      }
    }
    else
    {
      __dsta = *a2;
      v150 = *((_QWORD *)a2 + 2);
      if (a3)
        goto LABEL_4;
    }
  }
  else
  {
    {
      v134 = operator new();
      *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v134 + 24) = "VectorKitLabels";
      *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v134 = &off_1E42B5668;
      *(_QWORD *)(v134 + 8) = "VectorKitLabels";
      *(_OWORD *)(v134 + 72) = 0u;
      *(_OWORD *)(v134 + 88) = 0u;
      *(_OWORD *)(v134 + 104) = 0u;
      *(_OWORD *)(v134 + 120) = 0u;
      *(_OWORD *)(v134 + 136) = 0u;
      *(_OWORD *)(v134 + 152) = 0u;
      *(_OWORD *)(v134 + 168) = 0u;
      *(_OWORD *)(v134 + 184) = 0u;
      *(_OWORD *)(v134 + 200) = 0u;
      *(_OWORD *)(v134 + 216) = 0u;
      *(_OWORD *)(v134 + 232) = 0u;
      *(_QWORD *)(v134 + 248) = 0;
      *(_OWORD *)(v134 + 56) = 0u;
      v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
      if ((_DWORD)v135)
        geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v134 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v134;
    }
    v151 = mdm::Allocator::instance(void)::alloc;
    HIBYTE(v150) = 0;
    LOBYTE(__dsta) = 0;
    if (a3)
      goto LABEL_4;
  }
  {
    v138 = operator new();
    *(_QWORD *)(v138 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v138 + 24) = "VectorKitLabels";
    *(_OWORD *)(v138 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v138 = &off_1E42B5668;
    *(_QWORD *)(v138 + 8) = "VectorKitLabels";
    *(_OWORD *)(v138 + 72) = 0u;
    *(_OWORD *)(v138 + 88) = 0u;
    *(_OWORD *)(v138 + 104) = 0u;
    *(_OWORD *)(v138 + 120) = 0u;
    *(_OWORD *)(v138 + 136) = 0u;
    *(_OWORD *)(v138 + 152) = 0u;
    *(_OWORD *)(v138 + 168) = 0u;
    *(_OWORD *)(v138 + 184) = 0u;
    *(_OWORD *)(v138 + 200) = 0u;
    *(_OWORD *)(v138 + 216) = 0u;
    *(_OWORD *)(v138 + 232) = 0u;
    *(_QWORD *)(v138 + 248) = 0;
    *(_OWORD *)(v138 + 56) = 0u;
    v139 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v138 + 56), 0);
    if ((_DWORD)v139)
      geo::read_write_lock::logFailure(v139, (uint64_t)"initialization", v140);
    v141 = malloc_create_zone(0, 0);
    *(_QWORD *)(v138 + 48) = v141;
    malloc_set_zone_name(v141, "VectorKitLabels");
    *(_QWORD *)(v138 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v138;
  }
  v148 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v147) = 0;
  LOBYTE(v146) = 0;
LABEL_13:
  v9 = v151;
  *((_QWORD *)__dst + 3) = v151;
  v10 = SHIBYTE(v150);
  if (SHIBYTE(v150) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)__dst, (void *)__dsta, *((unint64_t *)&__dsta + 1));
  }
  else
  {
    *(_OWORD *)__dst = __dsta;
    *((_QWORD *)__dst + 2) = v150;
  }
  v11 = (const char **)(__dst + 32);
  v12 = v148;
  *((_QWORD *)__dst + 7) = v148;
  if (SHIBYTE(v147) < 0)
  {
    v16 = v146;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)__dst + 4, (void *)v146, *((unint64_t *)&v146 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v16, v147 & 0x7FFFFFFFFFFFFFFFLL);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  *(_OWORD *)v11 = v146;
  *((_QWORD *)__dst + 6) = v147;
  if (v10 < 0)
LABEL_18:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 40))(v9, __dsta, v150 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_19:
  *((_QWORD *)__dst + 8) = 0;
  *((_QWORD *)__dst + 9) = 0;
  *((_QWORD *)__dst + 10) = 0;
  {
    v118 = operator new();
    *(_QWORD *)(v118 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v118 + 24) = "VectorKitLabels";
    *(_OWORD *)(v118 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v118 = &off_1E42B5668;
    *(_QWORD *)(v118 + 8) = "VectorKitLabels";
    *(_OWORD *)(v118 + 72) = 0u;
    *(_OWORD *)(v118 + 88) = 0u;
    *(_OWORD *)(v118 + 104) = 0u;
    *(_OWORD *)(v118 + 120) = 0u;
    *(_OWORD *)(v118 + 136) = 0u;
    *(_OWORD *)(v118 + 152) = 0u;
    *(_OWORD *)(v118 + 168) = 0u;
    *(_OWORD *)(v118 + 184) = 0u;
    *(_OWORD *)(v118 + 200) = 0u;
    *(_OWORD *)(v118 + 216) = 0u;
    *(_OWORD *)(v118 + 232) = 0u;
    *(_QWORD *)(v118 + 248) = 0;
    *(_OWORD *)(v118 + 56) = 0u;
    v119 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v118 + 56), 0);
    if ((_DWORD)v119)
      geo::read_write_lock::logFailure(v119, (uint64_t)"initialization", v120);
    v121 = malloc_create_zone(0, 0);
    *(_QWORD *)(v118 + 48) = v121;
    malloc_set_zone_name(v121, "VectorKitLabels");
    *(_QWORD *)(v118 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v118;
  }
  v14 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)__dst + 12) = 0;
  *((_QWORD *)__dst + 11) = v14;
  *((_QWORD *)__dst + 13) = 0;
  *((_QWORD *)__dst + 14) = 0;
  v142 = (uint64_t *)(__dst + 96);
  {
    v122 = operator new();
    *(_QWORD *)(v122 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v122 + 24) = "VectorKitLabels";
    *(_OWORD *)(v122 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v122 = &off_1E42B5668;
    *(_QWORD *)(v122 + 8) = "VectorKitLabels";
    *(_OWORD *)(v122 + 72) = 0u;
    *(_OWORD *)(v122 + 88) = 0u;
    *(_OWORD *)(v122 + 104) = 0u;
    *(_OWORD *)(v122 + 120) = 0u;
    *(_OWORD *)(v122 + 136) = 0u;
    *(_OWORD *)(v122 + 152) = 0u;
    *(_OWORD *)(v122 + 168) = 0u;
    *(_OWORD *)(v122 + 184) = 0u;
    *(_OWORD *)(v122 + 200) = 0u;
    *(_OWORD *)(v122 + 216) = 0u;
    *(_OWORD *)(v122 + 232) = 0u;
    *(_QWORD *)(v122 + 248) = 0;
    *(_OWORD *)(v122 + 56) = 0u;
    v123 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v122 + 56), 0);
    if ((_DWORD)v123)
      geo::read_write_lock::logFailure(v123, (uint64_t)"initialization", v124);
    v125 = malloc_create_zone(0, 0);
    *(_QWORD *)(v122 + 48) = v125;
    malloc_set_zone_name(v125, "VectorKitLabels");
    *(_QWORD *)(v122 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v122;
  }
  *((_QWORD *)__dst + 15) = mdm::Allocator::instance(void)::alloc;
  *((_DWORD *)__dst + 32) = 0x1000000;
  __dst[132] = 0;
  if ((__dst[55] & 0x80000000) == 0)
  {
    if (__dst[55])
    {
      if (strncasecmp(__dst + 32, "zh-hans", 7uLL))
      {
        if (strncasecmp(__dst + 32, "zh-tw", 5uLL))
        {
          if (strncasecmp(__dst + 32, "ja", 2uLL))
          {
            if (strncasecmp(__dst + 32, "de", 2uLL))
            {
              if (strncasecmp(__dst + 32, "hi", 2uLL))
              {
                if (strncasecmp(__dst + 32, "ar", 2uLL))
                {
                  if (strncasecmp(__dst + 32, "fa", 2uLL))
                  {
                    if (strncasecmp(__dst + 32, "ur", 2uLL))
                    {
                      v15 = __dst + 32;
                      goto LABEL_44;
                    }
LABEL_58:
                    v18 = &off_1E42F0E50;
                    goto LABEL_59;
                  }
LABEL_57:
                  v18 = &off_1E42F0E40;
                  goto LABEL_59;
                }
LABEL_56:
                v18 = &off_1E42F0E30;
                goto LABEL_59;
              }
LABEL_55:
              v18 = &off_1E42F0E20;
              goto LABEL_59;
            }
LABEL_54:
            v18 = &off_1E42F0E10;
            goto LABEL_59;
          }
LABEL_53:
          v18 = &off_1E42F0E00;
          goto LABEL_59;
        }
LABEL_50:
        v18 = &off_1E42F0DF0;
        goto LABEL_59;
      }
LABEL_49:
      v18 = &md::TextDataStringInfo::TextDataStringInfo(std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const*,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const*,gss::Country)::localeTraits;
      goto LABEL_59;
    }
LABEL_46:
    if (a4 == 10)
    {
      v19 = 2;
    }
    else
    {
      if (a4 != 4)
        goto LABEL_60;
      v19 = 1;
    }
    __dst[128] = v19;
    goto LABEL_60;
  }
  if (!*((_QWORD *)__dst + 5))
    goto LABEL_46;
  v17 = *v11;
  if (!strncasecmp(*v11, "zh-hans", 7uLL))
    goto LABEL_49;
  if (!strncasecmp(v17, "zh-tw", 5uLL))
    goto LABEL_50;
  if (!strncasecmp(v17, "ja", 2uLL))
    goto LABEL_53;
  if (!strncasecmp(v17, "de", 2uLL))
    goto LABEL_54;
  if (!strncasecmp(v17, "hi", 2uLL))
    goto LABEL_55;
  if (!strncasecmp(v17, "ar", 2uLL))
    goto LABEL_56;
  if (!strncasecmp(v17, "fa", 2uLL))
    goto LABEL_57;
  if (!strncasecmp(v17, "ur", 2uLL))
    goto LABEL_58;
  v15 = v17;
LABEL_44:
  if (!strncasecmp(v15, "th", 2uLL))
  {
    v18 = &off_1E42F0E60;
LABEL_59:
    *((_WORD *)__dst + 64) = *((_WORD *)v18 + 4);
    *(_WORD *)(__dst + 131) = *((_WORD *)v18 + 5);
  }
LABEL_60:
  __dsta = 0uLL;
  v150 = 0;
  {
    v126 = operator new();
    *(_QWORD *)(v126 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v126 + 24) = "VectorKitLabels";
    *(_OWORD *)(v126 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v126 = &off_1E42B5668;
    *(_QWORD *)(v126 + 8) = "VectorKitLabels";
    *(_OWORD *)(v126 + 72) = 0u;
    *(_OWORD *)(v126 + 88) = 0u;
    *(_OWORD *)(v126 + 104) = 0u;
    *(_OWORD *)(v126 + 120) = 0u;
    *(_OWORD *)(v126 + 136) = 0u;
    *(_OWORD *)(v126 + 152) = 0u;
    *(_OWORD *)(v126 + 168) = 0u;
    *(_OWORD *)(v126 + 184) = 0u;
    *(_OWORD *)(v126 + 200) = 0u;
    *(_OWORD *)(v126 + 216) = 0u;
    *(_OWORD *)(v126 + 232) = 0u;
    *(_QWORD *)(v126 + 248) = 0;
    *(_OWORD *)(v126 + 56) = 0u;
    v127 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v126 + 56), 0);
    if ((_DWORD)v127)
      geo::read_write_lock::logFailure(v127, (uint64_t)"initialization", v128);
    v129 = malloc_create_zone(0, 0);
    *(_QWORD *)(v126 + 48) = v129;
    malloc_set_zone_name(v129, "VectorKitLabels");
    *(_QWORD *)(v126 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v126;
  }
  v151 = mdm::Allocator::instance(void)::alloc;
  if ((md::TextDataStringInfo::widenText((unint64_t)__dst, (unsigned __int16 *)&__dsta) & 1) != 0)
  {
    if (v150 >= 0)
      v21 = HIBYTE(v150);
    else
      v21 = *((_QWORD *)&__dsta + 1);
    v143 = v21;
    {
      v130 = operator new();
      *(_QWORD *)(v130 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v130 + 24) = "VectorKitLabels";
      *(_OWORD *)(v130 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v130 = &off_1E42B5668;
      *(_QWORD *)(v130 + 8) = "VectorKitLabels";
      *(_OWORD *)(v130 + 72) = 0u;
      *(_OWORD *)(v130 + 88) = 0u;
      *(_OWORD *)(v130 + 104) = 0u;
      *(_OWORD *)(v130 + 120) = 0u;
      *(_OWORD *)(v130 + 136) = 0u;
      *(_OWORD *)(v130 + 152) = 0u;
      *(_OWORD *)(v130 + 168) = 0u;
      *(_OWORD *)(v130 + 184) = 0u;
      *(_OWORD *)(v130 + 200) = 0u;
      *(_OWORD *)(v130 + 216) = 0u;
      *(_OWORD *)(v130 + 232) = 0u;
      *(_QWORD *)(v130 + 248) = 0;
      *(_OWORD *)(v130 + 56) = 0u;
      v131 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v130 + 56), 0);
      if ((_DWORD)v131)
        geo::read_write_lock::logFailure(v131, (uint64_t)"initialization", v132);
      v133 = malloc_create_zone(0, 0);
      *(_QWORD *)(v130 + 48) = v133;
      malloc_set_zone_name(v133, "VectorKitLabels");
      *(_QWORD *)(v130 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v130;
    }
    v144 = mdm::Allocator::instance(void)::alloc;
    if (v21)
    {
      if (v21 < 0)
        abort();
      v23 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 2 * v21, 2);
      v24 = &v23[2 * v21];
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
    v25 = *((_QWORD *)__dst + 14);
    if (v25 != *((_QWORD *)__dst + 12))
    {
LABEL_83:
      if (v21)
      {
        v39 = 0;
        v145 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = v23;
        while (1)
        {
          p_dsta = &__dsta;
          if (v150 < 0)
            p_dsta = (__int128 *)__dsta;
          v47 = *((unsigned __int16 *)p_dsta + v39);
          if ((v47 & 0xFFFFFFFD) == 8)
          {
            if (!(v40 & 1 | ((v41 & 1) == 0)))
            {
              v48 = (_BYTE *)*((_QWORD *)__dst + 13);
              v49 = *((_QWORD *)__dst + 14);
              if ((unint64_t)v48 < v49)
              {
                if (v48)
                  *v48 = v42;
                v44 = v48 + 1;
                goto LABEL_86;
              }
              v50 = &v48[-*v142];
              v51 = (unint64_t)(v50 + 1);
              if ((uint64_t)(v50 + 1) < 0)
                abort();
              v52 = v49 - *v142;
              if (2 * v52 > v51)
                v51 = 2 * v52;
              if (v52 >= 0x3FFFFFFFFFFFFFFFLL)
                v53 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v53 = v51;
              if (v53)
              {
                v54 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)__dst + 15) + 16))(*((_QWORD *)__dst + 15), v53, 1);
                v50 += v54;
                v55 = v54 + v53;
                if (v54)
                  *v50 = v42;
              }
              else
              {
                v55 = 0;
              }
              v64 = *((_QWORD *)__dst + 12);
              v63 = *((_QWORD *)__dst + 13);
              v65 = v63 - v64;
              if (v63 != v64)
              {
                if (v65 < 0x20)
                {
                  v66 = v50;
                }
                else
                {
                  v66 = v50;
                  if ((unint64_t)(v63 - (_QWORD)v50) >= 0x20)
                  {
                    v67 = v50 - 16;
                    v68 = (__int128 *)(v63 - 16);
                    v69 = v65 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v70 = *v68;
                      *(v67 - 1) = *(v68 - 1);
                      *v67 = v70;
                      v67 -= 2;
                      v68 -= 2;
                      v69 -= 32;
                    }
                    while (v69);
                    v66 = &v50[-(v65 & 0xFFFFFFFFFFFFFFE0)];
                    v63 -= v65 & 0xFFFFFFFFFFFFFFE0;
                    if (v65 == (v65 & 0xFFFFFFFFFFFFFFE0))
                    {
LABEL_183:
                      v63 = *v142;
                      goto LABEL_184;
                    }
                  }
                }
                do
                {
                  v96 = *(_BYTE *)--v63;
                  *--v66 = v96;
                }
                while (v63 != v64);
                goto LABEL_183;
              }
              v66 = v50;
LABEL_184:
              v44 = v50 + 1;
              *((_QWORD *)__dst + 12) = v66;
              *((_QWORD *)__dst + 13) = v50 + 1;
              v97 = *((_QWORD *)__dst + 14);
              *((_QWORD *)__dst + 14) = v55;
              if (v63)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)__dst + 15) + 40))(*((_QWORD *)__dst + 15), v63, v97 - v63);
              v21 = v143;
LABEL_86:
              *((_QWORD *)__dst + 13) = v44;
              v42 &= ~1u;
              v40 = 1;
            }
            v45 = v42 ^ 2;
            if (v47 != 8)
              v45 = v42;
            if (v47 == 10)
              v42 |= v41 & 1;
            else
              v42 = v45;
            v145 = 1;
            goto LABEL_93;
          }
          if ((v40 & 1) != 0)
          {
            if (v43 >= v24)
            {
              v56 = v43 - v23;
              if (v43 - v23 <= -3)
                abort();
              v57 = v56 >> 1;
              v58 = v24 - v23;
              if (v24 - v23 <= (unint64_t)((v56 >> 1) + 1))
                v59 = v57 + 1;
              else
                v59 = v24 - v23;
              if (v58 >= 0x7FFFFFFFFFFFFFFELL)
                v60 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v60 = v59;
              if (v60)
              {
                v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v144 + 16))(v144, 2 * v60, 2);
                v62 = (char *)(v61 + 2 * v57);
                v24 = (char *)(v61 + 2 * v60);
                if (v61)
                  *(_WORD *)v62 = 30;
              }
              else
              {
                v24 = 0;
                v62 = (char *)(2 * v57);
              }
              v21 = v143;
              v71 = v62;
              if (v43 != v23)
              {
                v72 = v43 - v23 - 2;
                if (v72 < 0x4E
                  || &v62[-(v72 & 0xFFFFFFFFFFFFFFFELL) - 2] > v62 - 2
                  || &v43[-(v72 & 0xFFFFFFFFFFFFFFFELL) - 2] > v43 - 2
                  || (unint64_t)(v43 - v62) < 0x20)
                {
                  v73 = v43;
                  v71 = v62;
                }
                else
                {
                  v91 = (v72 >> 1) + 1;
                  v73 = &v43[-2 * (v91 & 0xFFFFFFFFFFFFFFF0)];
                  v92 = v62 - 16;
                  v93 = v43 - 16;
                  v94 = v91 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v95 = *(_OWORD *)v93;
                    *((_OWORD *)v92 - 1) = *((_OWORD *)v93 - 1);
                    *(_OWORD *)v92 = v95;
                    v92 -= 32;
                    v93 -= 32;
                    v94 -= 16;
                  }
                  while (v94);
                  v71 = &v62[-2 * (v91 & 0xFFFFFFFFFFFFFFF0)];
                  if (v91 == (v91 & 0xFFFFFFFFFFFFFFF0))
                    goto LABEL_141;
                }
                do
                {
                  v74 = *((_WORD *)v73 - 1);
                  v73 -= 2;
                  *((_WORD *)v71 - 1) = v74;
                  v71 -= 2;
                }
                while (v73 != v23);
              }
LABEL_141:
              v43 = v62 + 2;
              if (v23)
                (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v144 + 40))(v144, v23, v58);
              v23 = v71;
              if (__dst[130])
                goto LABEL_144;
LABEL_107:
              if (__dst[128])
                __dst[130] = v47 > 0x7F;
              goto LABEL_144;
            }
            if (v43)
              *(_WORD *)v43 = 30;
            v43 += 2;
          }
          if (!__dst[130])
            goto LABEL_107;
LABEL_144:
          if (v43 >= v24)
          {
            v75 = v43 - v23;
            if (v43 - v23 <= -3)
              abort();
            v76 = v75 >> 1;
            v77 = v24 - v23;
            if (v24 - v23 <= (unint64_t)((v75 >> 1) + 1))
              v78 = v76 + 1;
            else
              v78 = v24 - v23;
            if (v77 >= 0x7FFFFFFFFFFFFFFELL)
              v79 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v79 = v78;
            if (v79)
            {
              v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v144 + 16))(v144, 2 * v79, 2);
              v81 = (char *)(v80 + 2 * v76);
              v24 = (char *)(v80 + 2 * v79);
              if (v80)
                *(_WORD *)v81 = v47;
            }
            else
            {
              v24 = 0;
              v81 = (char *)(2 * v76);
            }
            v21 = v143;
            v82 = v81;
            if (v43 == v23)
              goto LABEL_163;
            v83 = v43 - v23 - 2;
            if (v83 < 0x4E
              || &v81[-(v83 & 0xFFFFFFFFFFFFFFFELL) - 2] > v81 - 2
              || &v43[-(v83 & 0xFFFFFFFFFFFFFFFELL) - 2] > v43 - 2
              || (unint64_t)(v43 - v81) < 0x20)
            {
              v84 = v43;
              v82 = v81;
            }
            else
            {
              v86 = (v83 >> 1) + 1;
              v84 = &v43[-2 * (v86 & 0xFFFFFFFFFFFFFFF0)];
              v87 = v81 - 16;
              v88 = v43 - 16;
              v89 = v86 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v90 = *(_OWORD *)v88;
                *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
                *(_OWORD *)v87 = v90;
                v87 -= 32;
                v88 -= 32;
                v89 -= 16;
              }
              while (v89);
              v82 = &v81[-2 * (v86 & 0xFFFFFFFFFFFFFFF0)];
              if (v86 == (v86 & 0xFFFFFFFFFFFFFFF0))
                goto LABEL_163;
            }
            do
            {
              v85 = *((_WORD *)v84 - 1);
              v84 -= 2;
              *((_WORD *)v82 - 1) = v85;
              v82 -= 2;
            }
            while (v84 != v23);
LABEL_163:
            v43 = v81 + 2;
            if (v23)
              (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v144 + 40))(v144, v23, v77);
            v40 = 0;
            v41 = 1;
            v23 = v82;
            goto LABEL_93;
          }
          if (v43)
            *(_WORD *)v43 = v47;
          v40 = 0;
          v43 += 2;
          v41 = 1;
LABEL_93:
          if (++v39 == v21)
            goto LABEL_188;
        }
      }
      LOBYTE(v42) = 0;
      v145 = 0;
      v43 = v23;
LABEL_188:
      v98 = (_BYTE *)*((_QWORD *)__dst + 13);
      v99 = *((_QWORD *)__dst + 14);
      if ((unint64_t)v98 < v99)
      {
        if (v98)
          *v98 = v42;
        v100 = v98 + 1;
LABEL_215:
        *((_QWORD *)__dst + 13) = v100;
        if ((v145 & 1) != 0)
          std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__assign_external((_QWORD *)__dst + 8, v23, (v43 - v23) >> 1);
        if (v23)
          (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v144 + 40))(v144, v23, v24 - v23);
        goto LABEL_219;
      }
      v101 = &v98[-*v142];
      v102 = (unint64_t)(v101 + 1);
      if ((uint64_t)(v101 + 1) < 0)
        abort();
      v103 = v99 - *v142;
      if (2 * v103 > v102)
        v102 = 2 * v103;
      if (v103 >= 0x3FFFFFFFFFFFFFFFLL)
        v104 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v104 = v102;
      if (v104)
      {
        v105 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)__dst + 15) + 16))(*((_QWORD *)__dst + 15), v104, 1);
        v101 += v105;
        v106 = v105 + v104;
        if (v105)
          *v101 = v42;
      }
      else
      {
        v106 = 0;
      }
      v100 = v101 + 1;
      v108 = *((_QWORD *)__dst + 12);
      v107 = *((_QWORD *)__dst + 13);
      v109 = v107 - v108;
      if (v107 == v108)
      {
LABEL_213:
        *((_QWORD *)__dst + 12) = v101;
        *((_QWORD *)__dst + 13) = v100;
        v116 = *((_QWORD *)__dst + 14);
        *((_QWORD *)__dst + 14) = v106;
        if (v107)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)__dst + 15) + 40))(*((_QWORD *)__dst + 15), v107, v116 - v107);
        goto LABEL_215;
      }
      if (v109 < 0x20)
      {
        v110 = *((_QWORD *)__dst + 13);
      }
      else if ((unint64_t)(v107 - (_QWORD)v101) < 0x20)
      {
        v110 = *((_QWORD *)__dst + 13);
      }
      else
      {
        v110 = v107 - (v109 & 0xFFFFFFFFFFFFFFE0);
        v111 = v101 - 16;
        v112 = (__int128 *)(v107 - 16);
        v113 = v109 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v114 = *v112;
          *(v111 - 1) = *(v112 - 1);
          *v111 = v114;
          v111 -= 2;
          v112 -= 2;
          v113 -= 32;
        }
        while (v113);
        v101 -= v109 & 0xFFFFFFFFFFFFFFE0;
        if (v109 == (v109 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_212;
      }
      do
      {
        v115 = *(_BYTE *)--v110;
        *--v101 = v115;
      }
      while (v110 != v108);
LABEL_212:
      v107 = *v142;
      goto LABEL_213;
    }
    v26 = *((_QWORD *)__dst + 13);
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)__dst + 15) + 16))(*((_QWORD *)__dst + 15), 1, 1);
    v28 = v27 + v26 - v25;
    v30 = *((_QWORD *)__dst + 12);
    v29 = *((_QWORD *)__dst + 13);
    v31 = v29 - v30;
    if (v29 == v30)
    {
      v32 = v27 + v26 - v25;
      goto LABEL_81;
    }
    if (v31 >= 0x20)
    {
      v32 = v27 + v26 - v25;
      if ((unint64_t)(v25 - v26 - v27 + v29) >= 0x20)
      {
        v33 = (__int128 *)(v29 - 16);
        v34 = (_OWORD *)(v26 - v25 + v27 - 16);
        v35 = v31 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *v34 = v36;
          v33 -= 2;
          v34 -= 2;
          v35 -= 32;
        }
        while (v35);
        v32 = v28 - (v31 & 0xFFFFFFFFFFFFFFE0);
        v29 -= v31 & 0xFFFFFFFFFFFFFFE0;
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_80;
      }
    }
    else
    {
      v32 = v27 + v26 - v25;
    }
    do
    {
      v37 = *(_BYTE *)--v29;
      *(_BYTE *)--v32 = v37;
    }
    while (v29 != v30);
LABEL_80:
    v29 = *v142;
LABEL_81:
    *((_QWORD *)__dst + 12) = v32;
    *((_QWORD *)__dst + 13) = v28;
    v38 = *((_QWORD *)__dst + 14);
    *((_QWORD *)__dst + 14) = v27 + 1;
    if (v29)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)__dst + 15) + 40))(*((_QWORD *)__dst + 15), v29, v38 - v29);
    goto LABEL_83;
  }
LABEL_219:
  if (SHIBYTE(v150) < 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v151 + 40))(v151, __dsta, 2 * v150);
  return __dst;
}

void sub_19F9A9B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
    (*(void (**)(void))(*(_QWORD *)a25 + 40))();
  _Unwind_Resume(exception_object);
}

_QWORD **std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__assign_no_alias<true>(_QWORD **__dst, void *__src, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 > 0xA)
  {
    if (a3 - 0x7FFFFFFFFFFFFFF7 < 0x8000000000000013)
      abort();
    v7 = 20;
    if (a3 > 0x14)
      v7 = a3;
    v8 = (v7 | 3) + 1;
    v6 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*__dst[3] + 16))(__dst[3], 2 * v8, 2);
    memmove(v6, __src, 2 * a3);
    __dst[1] = (_QWORD *)a3;
    __dst[2] = (_QWORD *)(v8 | 0x8000000000000000);
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
    v6 = __dst;
    if (a3)
    {
      memmove(__dst, __src, 2 * a3);
      v6 = __dst;
    }
  }
  *((_WORD *)v6 + a3) = 0;
  return __dst;
}

uint64_t **std::set<unsigned short>::set[abi:nn180100]<unsigned short *>(uint64_t **a1, _WORD *a2, _WORD *a3)
{
  uint64_t *v4;
  _WORD *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  _WORD *v16;
  uint64_t *v17;
  unsigned int v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    v8 = a1 + 1;
    while (1)
    {
      v9 = v4;
      if (v8 == (uint64_t **)v4)
        goto LABEL_9;
      v10 = v7;
      v11 = v4;
      if (v7)
      {
        do
        {
          v9 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = (unsigned __int16)*v6;
      if (*((unsigned __int16 *)v9 + 13) < v13)
      {
LABEL_9:
        v14 = v7 ? v9 : v4;
        v15 = v7 ? v9 + 1 : v4;
      }
      else
      {
        v14 = v4;
        v15 = v4;
        if (v7)
        {
          v15 = v4;
          while (1)
          {
            while (1)
            {
              v14 = v7;
              v18 = *((unsigned __int16 *)v7 + 13);
              if (v13 >= v18)
                break;
              v7 = (uint64_t *)*v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v18 >= v13)
              break;
            v15 = v14 + 1;
            v7 = (uint64_t *)v14[1];
            if (!v7)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = operator new(0x20uLL);
        v16[13] = *v6;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v14;
        *v15 = (uint64_t)v16;
        v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          v16 = (_WORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v6 == a3)
        break;
      v8 = (uint64_t **)*a1;
      v7 = a1[1];
    }
  }
  return a1;
}

void sub_19F9A9EF4(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void sub_19F9A9F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_19F9AA030(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_19F9AA0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::DottedRouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DottedRouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DottedRouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DottedRouteLine::BaseMesh::~BaseMesh(ggl::DottedRouteLine::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DottedRouteLine::BaseMesh::~BaseMesh(ggl::DottedRouteLine::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DottedRouteLine::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DottedRouteLine::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DottedRouteLine::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DottedRouteLine::BasePipelineSetup::~BasePipelineSetup(ggl::DottedRouteLine::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DottedRouteLine::BasePipelineSetup::constantDataIsEnabled(ggl::DottedRouteLine::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::DottedRouteLine::BasePipelineSetup::textureIsEnabled(ggl::DottedRouteLine::BasePipelineSetup *this)
{
  return 0;
}

void md::OverlaysLogic::~OverlaysLogic(md::OverlaysLogic *this)
{
  md::OverlaysLogic::~OverlaysLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  md::OverlaysLogic *v6;
  uint64_t v7;
  uint64_t v8;
  md::OverlaysLogic *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E428E4A8;
  v2 = *((_QWORD *)this + 93);
  if (v2)
  {
    v33[0] = &off_1E42CB960;
    v34 = v33;
    geo::TaskQueue::barrierSync(v2, v33);
    v3 = v34;
    if (v34 == v33)
    {
      v4 = 4;
      v3 = v33;
    }
    else
    {
      if (!v34)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_7:
  if (*((_QWORD *)this + 15))
  {
    MapsFeature_RemoveBlockListener();
    v5 = (void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;

  }
  if (*((_QWORD *)this + 120))
  {
    v6 = (md::OverlaysLogic *)*((_QWORD *)this + 119);
    v7 = *((_QWORD *)this + 118);
    v8 = *(_QWORD *)v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    *((_QWORD *)this + 120) = 0;
    if (v6 != (md::OverlaysLogic *)((char *)this + 944))
    {
      do
      {
        v9 = (md::OverlaysLogic *)*((_QWORD *)v6 + 1);
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlaysLogic *)((char *)v6 + 16));
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != (md::OverlaysLogic *)((char *)this + 944));
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 117);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 840);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 760);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (char *)*((_QWORD *)this + 86);
  if (v16)
  {
    do
    {
      v17 = *(char **)v16;
      v32 = (void **)(v16 + 24);
      std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100](&v32);
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = (void *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v18)
    operator delete(v18);
  std::array<std::array<std::unique_ptr<std::unordered_map<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,std::allocator<std::pair<md::SurfaceKey const,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>>,2ul>,2ul>::~array((uint64_t *)this + 80);
  v19 = (_QWORD *)*((_QWORD *)this + 77);
  while (v19)
  {
    v28 = v19;
    v19 = (_QWORD *)*v19;
    v29 = (std::__shared_weak_count *)v28[4];
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    operator delete(v28);
  }
  v20 = (void *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v20)
    operator delete(v20);
  v21 = (void *)*((_QWORD *)this + 72);
  if (v21)
  {
    *((_QWORD *)this + 73) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 69);
  if (v22)
  {
    *((_QWORD *)this + 70) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 66);
  if (v23)
  {
    *((_QWORD *)this + 67) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 63);
  if (v24)
  {
    *((_QWORD *)this + 64) = v24;
    operator delete(v24);
  }
  std::array<std::array<std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>,2ul>,2ul>::~array((uint64_t)this + 344);
  std::array<std::unordered_map<geo::QuadTile,std::shared_ptr<md::OverlayTileData>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::shared_ptr<md::OverlayTileData>>>>,2ul>::~array((uint64_t)this + 264);
  std::array<std::unordered_map<geo::QuadTile,std::shared_ptr<md::OverlayTileData>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::shared_ptr<md::OverlayTileData>>>>,2ul>::~array((uint64_t)this + 184);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 21));
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::OverlaysLogic::prune(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  v2 = *(_QWORD **)(a1 + 688);
  if (a2)
  {
    for (; v2; v2 = (_QWORD *)*v2)
    {
      v3 = v2[3];
      v4 = v2[4];
      while (v3 != v4)
      {
        v5 = *(_QWORD *)(v3 + 24);
        if (!v5)
          return;
        do
        {
          v7 = *(uint64_t **)(v3 + 16);
          v6 = *(_QWORD *)(v3 + 24);
          v8 = *v7;
          *(_QWORD *)(v8 + 8) = v7[1];
          *(_QWORD *)v7[1] = v8;
          *(_QWORD *)(v3 + 24) = v6 - 1;
          v9 = (std::__shared_weak_count *)v7[3];
          if (v9)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          --v5;
          operator delete(v7);
        }
        while (v5);
        v3 += 32;
      }
    }
  }
  else
  {
    for (; v2; v2 = (_QWORD *)*v2)
    {
      v12 = v2[3];
      v13 = v2[4];
      while (v12 != v13)
      {
        v14 = *(_QWORD *)(v12 + 24);
        if (v14 < 0xB)
          return;
        v15 = v14 - 10;
        do
        {
          v17 = *(uint64_t **)(v12 + 16);
          v16 = *(_QWORD *)(v12 + 24);
          v18 = *v17;
          *(_QWORD *)(v18 + 8) = v17[1];
          *(_QWORD *)v17[1] = v18;
          *(_QWORD *)(v12 + 24) = v16 - 1;
          v19 = (std::__shared_weak_count *)v17[3];
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          --v15;
          operator delete(v17);
        }
        while (v15);
        v12 += 32;
      }
    }
  }
}

void md::OverlaysLogic::didBecomeInactive(md::OverlaysLogic *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  uint64_t v12;
  uint64_t j;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 93);
  if (v2)
  {
    v22[0] = &off_1E42CB600;
    v23 = v22;
    geo::TaskQueue::barrierSync(v2, v22);
    v3 = v23;
    if (v23 == v22)
    {
      v4 = 4;
      v3 = v22;
      goto LABEL_6;
    }
    if (v23)
    {
      v4 = 5;
LABEL_6:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  md::OverlayContainer::flushCommandQueue(*((md::OverlayContainer **)this + 89));
  v20[0] = &off_1E42CB648;
  v20[1] = this;
  v21 = v20;
  std::__hash_table<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,std::__unordered_map_hasher<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyHash,md::SurfaceKeyEqual,true>,std::__unordered_map_equal<md::SurfaceKey,std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>,md::SurfaceKeyEqual,md::SurfaceKeyHash,true>,std::allocator<std::__hash_value_type<md::SurfaceKey,std::unordered_map<unsigned long,std::shared_ptr<ggl::IOSurfaceTexture>>>>>::clear(*((_QWORD **)this + 80));
  v18 = 1;
  v19 = 0;
  if (!v21
    || ((*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v21 + 48))(v21, &v19, &v18),
        v18 = 0,
        v19 = 1,
        !v21)
    || ((*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v21 + 48))(v21, &v19, &v18),
        v18 = 1,
        v19 = 1,
        !v21))
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v21 + 48))(v21, &v19, &v18);
  v5 = v21;
  if (v21 == v20)
  {
    v6 = 4;
    v5 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  if (*((_QWORD *)this + 87))
  {
    v7 = (void **)*((_QWORD *)this + 86);
    if (v7)
    {
      do
      {
        v8 = (void **)*v7;
        v19 = (uint64_t)(v7 + 3);
        std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v19);
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *((_QWORD *)this + 86) = 0;
    v9 = *((_QWORD *)this + 85);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(*((_QWORD *)this + 84) + 8 * i) = 0;
    }
    *((_QWORD *)this + 87) = 0;
  }
  if (*((_QWORD *)this + 78))
  {
    v11 = (_QWORD *)*((_QWORD *)this + 77);
    while (v11)
    {
      v14 = v11;
      v11 = (_QWORD *)*v11;
      v15 = (std::__shared_weak_count *)v14[4];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      operator delete(v14);
    }
    *((_QWORD *)this + 77) = 0;
    v12 = *((_QWORD *)this + 76);
    if (v12)
    {
      for (j = 0; j != v12; ++j)
        *(_QWORD *)(*((_QWORD *)this + 75) + 8 * j) = 0;
    }
    *((_QWORD *)this + 78) = 0;
  }
}

void sub_19F9AA8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];

  if (*(_QWORD *)(a3 + 8) == 0xADE8F13E6C18D970 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic14runAfterLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__0NS_9allocatorISM_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13OverlaysLogic14runAfterLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CB3C0;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2md13OverlaysLogic14runAfterLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB3C0;
}

void _ZNSt3__110__function6__funcIZN2md13OverlaysLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextENS2_16ElevationContextENS2_13CameraContextENS2_22PendingRegistryContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15OverlaysContextEE3__1NS_9allocatorISM_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "OverlaysLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::vector<std::pair<unsigned char,std::list<std::shared_ptr<ggl::IOSurfaceTexture>>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((_QWORD *)v4 - 1))
        {
          v6 = *((_QWORD *)v4 - 3);
          v7 = (uint64_t *)*((_QWORD *)v4 - 2);
          v8 = *v7;
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
          **(_QWORD **)(v6 + 8) = v8;
          *((_QWORD *)v4 - 1) = 0;
          if (v7 != (uint64_t *)(v4 - 24))
          {
            do
            {
              v9 = (char *)v7[1];
              v10 = (std::__shared_weak_count *)v7[3];
              if (v10)
              {
                p_shared_owners = (unint64_t *)&v10->__shared_owners_;
                do
                  v12 = __ldaxr(p_shared_owners);
                while (__stlxr(v12 - 1, p_shared_owners));
                if (!v12)
                {
                  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                  std::__shared_weak_count::__release_weak(v10);
                }
              }
              operator delete(v7);
              v7 = (uint64_t *)v9;
            }
            while (v9 != v4 - 24);
          }
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,unsigned int,unsigned int>(uint64_t a1, unsigned int a2, int a3, int a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (*((_DWORD *)v12 + 4) == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (*((_DWORD *)v12 + 4) == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v8;
  *((_DWORD *)v15 + 4) = a3;
  *((_DWORD *)v15 + 5) = a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v8 = v4;
  }
  else
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_35;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v8 %= v9;
    }
    else
    {
      v8 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v26)
  {
    *v15 = *v26;
LABEL_58:
    *v26 = v15;
    goto LABEL_59;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v8) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F9AAF94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,md::OverlaysContext::KeyframeAnimationParameters>>>::__emplace_unique_key_args<unsigned int,unsigned int,md::OverlaysContext::KeyframeAnimationParameters>(float *a1, unsigned int a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;

  v8 = a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (*((_DWORD *)v12 + 4) == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (*((_DWORD *)v12 + 4) == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (char *)operator new(0x30uLL);
  v16 = v15;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  *((_DWORD *)v15 + 4) = a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  v15[40] = *(_BYTE *)(a4 + 16);
  v15[42] = 0;
  if (*(_BYTE *)(a4 + 18))
  {
    *((_WORD *)v15 + 22) = *(_WORD *)(a4 + 20);
    v15[42] = 1;
  }
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    v8 = v4;
    goto LABEL_74;
  }
  v19 = 1;
  if (v9 >= 3)
    v19 = (v9 & (v9 - 1)) != 0;
  v20 = v19 | (2 * v9);
  v21 = vcvtps_u32_f32(v17 / v18);
  if (v20 <= v21)
    prime = v21;
  else
    prime = v20;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = *((_QWORD *)a1 + 1);
  }
  if (prime > v9)
  {
LABEL_37:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (uint64_t *)(a1 + 4);
    v26 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v26)
      goto LABEL_61;
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
        {
          *v26 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
          **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
          v26 = i;
          v30 = v32;
        }
      }
LABEL_61:
      v9 = prime;
      goto LABEL_62;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
    v37 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_61;
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 != v28)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
          goto LABEL_66;
        }
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
        **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
        v37 = v26;
      }
      v39 = v28;
LABEL_66:
      v26 = v37;
      v37 = (_QWORD *)*v37;
      v28 = v39;
      if (!v37)
        goto LABEL_61;
    }
  }
  if (prime >= v9)
    goto LABEL_62;
  v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v9 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
  {
    v34 = std::__next_prime(v34);
  }
  else
  {
    v36 = 1 << -(char)__clz(v34 - 1);
    if (v34 >= 2)
      v34 = v36;
  }
  if (prime <= v34)
    prime = v34;
  if (prime < v9)
  {
    if (!prime)
    {
      v43 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v43)
        operator delete(v43);
      v9 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_62;
    }
    goto LABEL_37;
  }
  v9 = *((_QWORD *)a1 + 1);
LABEL_62:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
      v8 %= v9;
  }
  else
  {
    v8 = ((_DWORD)v9 - 1) & v8;
  }
LABEL_74:
  v40 = *(_QWORD **)a1;
  v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v41)
  {
    *(_QWORD *)v16 = *v41;
LABEL_82:
    *v41 = v16;
    goto LABEL_83;
  }
  *(_QWORD *)v16 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v16;
  v40[v8] = a1 + 4;
  if (*(_QWORD *)v16)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9)
        v42 %= v9;
    }
    else
    {
      v42 &= v9 - 1;
    }
    v41 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_82;
  }
LABEL_83:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F9AB424(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::OverlaysLogic::updateOverlays(md::OverlaysLogic *this, const md::LayoutContext *a2)
{
  md::OverlaysLogic *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  unsigned int v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *i;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *j;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *k;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *m;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  unsigned int v124;
  uint64_t *v125;
  uint64_t *v126;
  unsigned int v127;
  BOOL v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int16 *v138;
  unsigned __int16 *v139;
  uint64_t *v140;
  uint64_t **v141;
  unsigned int v142;
  uint64_t *v143;
  uint64_t *v144;
  unsigned int v145;
  BOOL v146;
  uint64_t **v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  _QWORD *v151;
  const md::LayoutContext *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  int8x8_t v157;
  uint8x8_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  unsigned __int8 v175;
  _WORD *v176;
  _WORD *v177;
  uint64_t *v178;
  _WORD *v179;
  _QWORD *v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  unsigned __int8 v187;
  unsigned __int16 *v188;
  unsigned __int16 *v189;
  unsigned __int16 *v190;
  uint64_t *v191;
  uint64_t *v192;
  _QWORD *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  int8x8_t v200;
  uint8x8_t v201;
  unint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  char v212;
  unint64_t v213;
  _QWORD *n;
  uint64_t v215;
  unint64_t v216;
  _BYTE *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  size_t v223;
  char *v224;
  char *v225;
  char *v226;
  _QWORD *ii;
  uint64_t v228;
  uint64_t *v229;
  uint64_t *v230;
  uint64_t *v231;
  void *v232;
  char *v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  gdc::Registry *v251;
  std::__shared_weak_count *v252;
  uint64_t v253;
  unint64_t *p_shared_owners;
  unint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  _QWORD *v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __int128 v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  __int128 v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  uint64_t v276;
  __int128 v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  __int128 v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  __int128 v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *jj;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char *v321;
  _QWORD *v322;
  char *v323;
  uint64_t v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  char *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  char *v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  char *v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  char *v340;
  unint64_t *v341;
  unint64_t v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  __int128 v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  char *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  unint64_t *v364;
  uint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  char *v368;
  unint64_t *v369;
  uint64_t v370;
  __int128 v371;
  unint64_t v372;
  char *v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t (**v380)();
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  BOOL v401;
  uint64_t v402;
  uint64_t v404;
  uint64_t *v405;
  _QWORD *v406;
  char v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void *v411;
  uint64_t v412;
  _QWORD *mm;
  uint64_t v414;
  unint64_t v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  char *v422;
  char *v423;
  char *v424;
  char *v425;
  __int128 v426;
  _QWORD *v427;
  _QWORD *v428;
  void *v429;
  void *v430;
  _QWORD *nn;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  BOOL v440;
  _QWORD *v441;
  unint64_t *v442;
  uint64_t *v443;
  _QWORD *v444;
  unint64_t v445;
  _QWORD *v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _BYTE *v454;
  _BYTE *v455;
  _BYTE *v456;
  _QWORD *v457;
  _QWORD *v458;
  unint64_t v459;
  _QWORD *v460;
  _QWORD *v461;
  int8x8_t v462;
  uint8x8_t v463;
  uint64_t v464;
  _QWORD *v465;
  _QWORD *v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned __int8 *v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  BOOL v475;
  unsigned int v476;
  NSObject *v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  BOOL v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  _QWORD *v491;
  void *v492;
  _QWORD *v493;
  unint64_t *v494;
  unsigned __int8 **v495;
  _QWORD *v496;
  unint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  _BYTE *v506;
  _BYTE *v507;
  _BYTE *v508;
  _QWORD *v509;
  _QWORD *v510;
  unint64_t v511;
  _QWORD *v512;
  _QWORD *v513;
  int8x8_t v514;
  uint8x8_t v515;
  uint64_t v516;
  _QWORD *v517;
  _QWORD *v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unsigned __int8 *v523;
  uint64_t v524;
  unsigned int v525;
  unsigned int v526;
  BOOL v527;
  unsigned int v528;
  NSObject *v529;
  _QWORD *v530;
  _QWORD *v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  uint64_t v540;
  uint64_t v541;
  _QWORD *v542;
  _QWORD *v543;
  void *v544;
  _QWORD *v545;
  unint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  _QWORD *v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  BOOL v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  _QWORD *v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  BOOL v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  _QWORD *v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  BOOL v580;
  unint64_t v581;
  unint64_t v582;
  _QWORD *CanDisable;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  BOOL v590;
  unint64_t v591;
  unint64_t v592;
  BOOL v594;
  uint64_t v595;
  int8x8_t *v596;
  int8x8_t v597;
  unint64_t v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  uint8x8_t v602;
  unint64_t v603;
  _QWORD *v604;
  _QWORD *v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  char *v610;
  char *v611;
  _QWORD *v612;
  char *v613;
  uint64_t v614;
  char *v615;
  int64_t v616;
  uint64_t v617;
  unint64_t v618;
  unint64_t v619;
  char *v620;
  char *v621;
  char *v622;
  unint64_t v623;
  char *v624;
  uint64_t v625;
  uint64_t v626;
  char *v627;
  char *v628;
  uint64_t v629;
  __int128 v630;
  uint64_t *v631;
  uint64_t *v632;
  BOOL v633;
  uint64_t v634;
  int8x8_t v635;
  uint8x8_t v636;
  unint64_t v637;
  _QWORD *v638;
  _QWORD *v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  _QWORD *v646;
  char v647;
  BOOL *v648;
  unint64_t v649;
  _QWORD *v650;
  uint64_t v651;
  unint64_t v652;
  BOOL *v653;
  uint64_t v654;
  BOOL *v655;
  unint64_t v656;
  uint64_t v657;
  unint64_t v658;
  size_t v659;
  size_t v660;
  char *v661;
  char *v662;
  uint64_t v663;
  char *v664;
  BOOL *v665;
  unint64_t v666;
  __int128 v667;
  uint64_t v668;
  BOOL *v669;
  char *v670;
  BOOL *v671;
  uint64_t v672;
  char *v673;
  char v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t v677;
  int8x8_t v678;
  uint8x8_t v679;
  unint64_t v680;
  _QWORD *v681;
  _QWORD *v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  _QWORD *v689;
  char v690;
  unint64_t v691;
  _QWORD *v692;
  uint64_t v693;
  unint64_t v694;
  _BYTE *v695;
  uint64_t v696;
  char *v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  size_t v701;
  char *v702;
  char *v703;
  char *v704;
  _QWORD *kk;
  uint64_t v706;
  _QWORD *v707;
  unint64_t v708;
  _QWORD *v709;
  int8x8_t v710;
  uint8x8_t v711;
  uint64_t v712;
  _QWORD *v713;
  unint64_t v714;
  unint64_t v715;
  unint64_t v716;
  unint64_t v717;
  unint64_t v718;
  _QWORD *v719;
  _QWORD *v720;
  uint64_t v721;
  unint64_t v722;
  _QWORD *v723;
  int8x8_t v724;
  uint8x8_t v725;
  uint64_t v726;
  _QWORD *v727;
  _QWORD *v728;
  uint64_t v729;
  unint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unsigned __int8 *v733;
  uint64_t v734;
  unsigned int v735;
  unsigned int v736;
  char v737;
  int v738;
  int v739;
  NSObject *v740;
  _QWORD *v741;
  _QWORD *v742;
  BOOL v743;
  _BYTE *v744;
  _QWORD *v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  BOOL v752;
  uint64_t v753;
  uint64_t v754;
  _QWORD *v755;
  void *v756;
  void *__p;
  _DWORD *v758;
  _QWORD *v759;
  uint64_t *v760;
  unint64_t *v761;
  _DWORD *v762;
  _BYTE *v763;
  uint64_t *v764;
  unint64_t v765;
  uint64_t *v766;
  int8x8_t *v767;
  uint64_t v768;
  unint64_t *v769;
  uint64_t v770;
  unint64_t v771;
  unint64_t v772;
  char *v773;
  char *v774;
  uint64_t v775;
  unint64_t *v776;
  unint64_t *v777;
  BOOL v778;
  _QWORD *v779;
  uint64_t v780;
  uint64_t *v781;
  char *v782;
  unint64_t v783;
  unint64_t v784;
  unint64_t v785;
  _QWORD *v786;
  const md::LayoutContext *v787;
  uint64_t *v788;
  std::__shared_weak_count *v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t *v800;
  uint64_t *v801;
  _QWORD v802[3];
  _QWORD *v803;
  unint64_t v804;
  uint64_t v805;
  uint64_t v806;
  unint64_t *v807;
  uint64_t *v808;
  _BYTE buf[24];
  _BYTE *v810;
  _BYTE *v811;
  _QWORD v812[3];
  _QWORD *v813;
  uint64_t v814[3];
  uint64_t *v815;
  uint64_t v816[3];
  uint64_t *v817;
  uint64_t v818[3];
  uint64_t *v819;
  _QWORD v820[3];
  _QWORD *v821;
  _QWORD v822[3];
  _QWORD *v823;
  _QWORD v824[3];
  _QWORD *v825;
  _QWORD v826[3];
  _QWORD *v827;
  _BYTE v828[40];
  __int128 v829;
  __int128 v830;
  __int128 v831;
  _QWORD *v832;
  char v833;
  uint64_t v834;

  v3 = this;
  v834 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 17);
  v812[0] = &off_1E42CB6D8;
  v813 = v812;
  v810 = buf;
  *(_QWORD *)buf = &off_1E42CB6D8;
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(v828, v4 + 432, (uint64_t)buf, *(_QWORD *)(v4 + 432));
  v5 = v810;
  if (v810 == buf)
  {
    v6 = 4;
    v5 = buf;
  }
  else
  {
    if (!v810)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v813;
  if (v813 == v812)
  {
    v8 = 4;
    v7 = v812;
  }
  else
  {
    if (!v813)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  v9 = *(_QWORD *)v828;
  v10 = v829;
  if (!(_QWORD)v829)
  {
LABEL_14:
    v807 = (unint64_t *)v10;
    goto LABEL_16;
  }
  if ((_BYTE *)v829 != &v828[16])
  {
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v829 + 16))(v829);
    goto LABEL_14;
  }
  v807 = &v804;
  (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v829 + 24))(v829, &v804);
LABEL_16:
  v787 = a2;
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(buf, v9, (uint64_t)&v804, **(_QWORD **)v828);
  v11 = v807;
  if (v807 == &v804)
  {
    v12 = 4;
    v11 = &v804;
  }
  else
  {
    if (!v807)
      goto LABEL_21;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
  v13 = *(_QWORD *)v828;
  v14 = v829;
  if (!(_QWORD)v829)
  {
LABEL_24:
    v800 = (uint64_t *)v14;
    goto LABEL_26;
  }
  if ((_BYTE *)v829 != &v828[16])
  {
    v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v829 + 16))(v829);
    goto LABEL_24;
  }
  v800 = &v797;
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)&v828[16] + 24))(&v828[16], &v797);
LABEL_26:
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v804, v13, (uint64_t)&v797, *(_QWORD *)(*(_QWORD *)v828 + 8));
  v15 = v800;
  if (v800 == &v797)
  {
    v16 = 4;
    v15 = &v797;
  }
  else
  {
    if (!v800)
      goto LABEL_31;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_31:
  v17 = *(uint64_t **)&buf[8];
  v768 = (uint64_t)v3;
  if (v805 != *(_QWORD *)&buf[8])
  {
    v18 = (uint64_t **)((char *)v3 + 168);
    do
    {
      v792 = 0;
      v19 = *v17;
      v792 = v19;
      v20 = *(unsigned __int16 *)(v19 + 40);
      v21 = *v18;
      v22 = v18;
      v23 = v18;
      if (*v18)
      {
        while (1)
        {
          while (1)
          {
            v23 = (uint64_t **)v21;
            v24 = *((unsigned __int16 *)v21 + 16);
            if (v20 >= v24)
              break;
            v21 = *v23;
            v22 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v20)
            break;
          v21 = v23[1];
          if (!v21)
          {
            v22 = v23 + 1;
            goto LABEL_41;
          }
        }
        v28 = v19;
        v25 = v23;
        v3 = (md::OverlaysLogic *)v768;
      }
      else
      {
LABEL_41:
        v25 = operator new(0x30uLL);
        v25[16] = v20;
        *((_QWORD *)v25 + 5) = 0;
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v25 + 1) = 0;
        *((_QWORD *)v25 + 2) = v23;
        *v22 = (uint64_t *)v25;
        v3 = (md::OverlaysLogic *)v768;
        v26 = **(_QWORD **)(v768 + 160);
        v27 = (uint64_t *)v25;
        if (v26)
        {
          *(_QWORD *)(v768 + 160) = v26;
          v27 = *v22;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v768 + 168), v27);
        ++*(_QWORD *)(v768 + 176);
        v28 = v792;
      }
      *((_QWORD *)v25 + 5) = v19;
      if (*((_BYTE *)v3 + 922))
      {
        v822[0] = &off_1E42CB720;
        v822[1] = &v792;
        v823 = v822;
        v29 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)24>>(v28);
        if (!v823)
        {
          v825 = 0;
          goto LABEL_56;
        }
        if (v823 == v822)
        {
          v825 = v824;
          (*(void (**)(uint64_t, _QWORD *))(v822[0] + 24))((uint64_t)v822, v824);
          v30 = v825;
          if (!v825)
            goto LABEL_56;
        }
        else
        {
          v30 = (_QWORD *)(*(uint64_t (**)(void))(*v823 + 16))();
          v825 = v30;
          if (!v30)
          {
LABEL_56:
            v827 = 0;
            goto LABEL_57;
          }
        }
        if (v30 == v824)
        {
          v827 = v826;
          (*(void (**)(_QWORD *, _QWORD *))(v824[0] + 24))(v824, v826);
          v30 = v827;
          if (v827)
            goto LABEL_63;
LABEL_57:
          v800 = 0;
        }
        else
        {
          v827 = v30;
          v825 = 0;
LABEL_63:
          if (v30 == v826)
          {
            v800 = &v797;
            (*(void (**)(_QWORD *, uint64_t *))(v826[0] + 24))(v826, &v797);
          }
          else
          {
            v800 = v30;
            v827 = 0;
          }
        }
        v33 = *(_QWORD **)(v29 + 56);
        for (i = *(_QWORD **)(v29 + 64); v33 != i; ++v33)
        {
          v820[0] = *v33;
          if (!v800)
            goto LABEL_1287;
          (*(void (**)(uint64_t *, _QWORD *))(*v800 + 48))(v800, v820);
        }
        v34 = v800;
        if (v800 == &v797)
        {
          v34 = &v797;
          v35 = 4;
LABEL_75:
          (*(void (**)(void))(*v34 + 8 * v35))();
        }
        else if (v800)
        {
          v35 = 5;
          goto LABEL_75;
        }
        v36 = v827;
        if (v827 == v826)
        {
          v36 = v826;
          v37 = 4;
LABEL_80:
          (*(void (**)(void))(*v36 + 8 * v37))();
        }
        else if (v827)
        {
          v37 = 5;
          goto LABEL_80;
        }
        v38 = v825;
        if (v825 == v824)
        {
          v38 = v824;
          v39 = 4;
LABEL_85:
          (*(void (**)(void))(*v38 + 8 * v39))();
        }
        else if (v825)
        {
          v39 = 5;
          goto LABEL_85;
        }
        v40 = v823;
        if (v823 == v822)
        {
          v40 = v822;
          v41 = 4;
LABEL_90:
          (*(void (**)(void))(*v40 + 8 * v41))();
        }
        else if (v823)
        {
          v41 = 5;
          goto LABEL_90;
        }
        v42 = v792;
        v820[0] = &off_1E42CB768;
        v820[1] = &v792;
        v821 = v820;
        v818[0] = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>(v792);
        if (!v821)
        {
          v827 = 0;
          v800 = 0;
          goto LABEL_100;
        }
        if (v821 == v820)
        {
          v827 = v826;
          (*(void (**)(uint64_t, _QWORD *))(v820[0] + 24))((uint64_t)v820, v826);
          v43 = v827;
          if (v827)
            goto LABEL_94;
        }
        else
        {
          v43 = (_QWORD *)(*(uint64_t (**)(void))(*v821 + 16))();
          v827 = v43;
          if (v43)
          {
LABEL_94:
            if (v43 == v826)
            {
              v800 = &v797;
              (*(void (**)(_QWORD *, uint64_t *))(v826[0] + 24))(v826, &v797);
            }
            else
            {
              v800 = v43;
              v827 = 0;
            }
LABEL_100:
            gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>,std::function<void ()(gdc::Entity)>>(v818, &v797);
            v44 = v800;
            if (v800 == &v797)
            {
              v44 = &v797;
              v45 = 4;
LABEL_104:
              (*(void (**)(void))(*v44 + 8 * v45))();
            }
            else if (v800)
            {
              v45 = 5;
              goto LABEL_104;
            }
            v816[0] = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>(v42);
            if (!v821)
            {
              v825 = 0;
              v800 = 0;
              goto LABEL_114;
            }
            if (v821 == v820)
            {
              v825 = v824;
              (*(void (**)(uint64_t, _QWORD *))(v820[0] + 24))((uint64_t)v820, v824);
              v46 = v825;
              if (v825)
                goto LABEL_108;
            }
            else
            {
              v46 = (_QWORD *)(*(uint64_t (**)(void))(*v821 + 16))();
              v825 = v46;
              if (v46)
              {
LABEL_108:
                if (v46 == v824)
                {
                  v800 = &v797;
                  (*(void (**)(_QWORD *, uint64_t *))(v824[0] + 24))(v824, &v797);
                }
                else
                {
                  v800 = v46;
                  v825 = 0;
                }
LABEL_114:
                gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>,std::function<void ()(gdc::Entity)>>(v816, &v797);
                v47 = v800;
                if (v800 == &v797)
                {
                  v47 = &v797;
                  v48 = 4;
LABEL_118:
                  (*(void (**)(void))(*v47 + 8 * v48))();
                }
                else if (v800)
                {
                  v48 = 5;
                  goto LABEL_118;
                }
                v814[0] = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>(v42);
                if (!v821)
                {
                  v823 = 0;
                  v800 = 0;
                  goto LABEL_128;
                }
                if (v821 == v820)
                {
                  v823 = v822;
                  (*(void (**)(uint64_t, _QWORD *))(v820[0] + 24))((uint64_t)v820, v822);
                  v49 = v823;
                  if (v823)
                    goto LABEL_122;
                }
                else
                {
                  v49 = (_QWORD *)(*(uint64_t (**)(void))(*v821 + 16))();
                  v823 = v49;
                  if (v49)
                  {
LABEL_122:
                    if (v49 == v822)
                    {
                      v800 = &v797;
                      (*(void (**)(uint64_t, _QWORD *))(v822[0] + 24))((uint64_t)v822, &v797);
                    }
                    else
                    {
                      v800 = v49;
                      v823 = 0;
                    }
LABEL_128:
                    gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>,std::function<void ()(gdc::Entity)>>(v814, &v797);
                    v50 = v800;
                    if (v800 == &v797)
                    {
                      v50 = &v797;
                      v51 = 4;
LABEL_132:
                      (*(void (**)(void))(*v50 + 8 * v51))();
                    }
                    else if (v800)
                    {
                      v51 = 5;
                      goto LABEL_132;
                    }
                    v52 = v823;
                    if (v823 == v822)
                    {
                      v52 = v822;
                      v53 = 4;
LABEL_137:
                      (*(void (**)(void))(*v52 + 8 * v53))();
                    }
                    else if (v823)
                    {
                      v53 = 5;
                      goto LABEL_137;
                    }
                    v54 = v825;
                    if (v825 == v824)
                    {
                      v54 = v824;
                      v55 = 4;
LABEL_142:
                      (*(void (**)(void))(*v54 + 8 * v55))();
                    }
                    else if (v825)
                    {
                      v55 = 5;
                      goto LABEL_142;
                    }
                    v56 = v827;
                    if (v827 == v826)
                    {
                      v56 = v826;
                      v57 = 4;
LABEL_147:
                      (*(void (**)(void))(*v56 + 8 * v57))();
                    }
                    else if (v827)
                    {
                      v57 = 5;
                      goto LABEL_147;
                    }
                    v58 = v821;
                    if (v821 == v820)
                    {
                      v58 = v820;
LABEL_299:
                      v103 = 4;
                      goto LABEL_300;
                    }
                    goto LABEL_296;
                  }
                }
                v800 = 0;
                goto LABEL_128;
              }
            }
            v800 = 0;
            goto LABEL_114;
          }
        }
        v800 = 0;
        goto LABEL_100;
      }
      v802[0] = &off_1E42CB7B0;
      v802[1] = &v792;
      v803 = v802;
      v795 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>(v28);
      if (!v803)
      {
        v825 = 0;
        v800 = 0;
        goto LABEL_151;
      }
      if (v803 == v802)
      {
        v825 = v824;
        (*(void (**)(_QWORD *, _QWORD *))(v802[0] + 24))(v802, v824);
        v31 = v825;
        if (!v825)
        {
LABEL_66:
          v800 = 0;
          goto LABEL_151;
        }
      }
      else
      {
        v31 = (_QWORD *)(*(uint64_t (**)(void))(*v803 + 16))();
        v825 = v31;
        if (!v31)
          goto LABEL_66;
      }
      if (v31 == v824)
      {
        v800 = &v797;
        (*(void (**)(_QWORD *, uint64_t *))(v824[0] + 24))(v824, &v797);
      }
      else
      {
        v800 = v31;
        v825 = 0;
      }
LABEL_151:
      gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)3>,std::function<void ()(gdc::Entity)>>(&v795, &v797);
      v59 = v800;
      if (v800 == &v797)
      {
        v59 = &v797;
        v60 = 4;
      }
      else
      {
        if (!v800)
          goto LABEL_156;
        v60 = 5;
      }
      (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_156:
      v794 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>(v28);
      if (!v803)
      {
        v823 = 0;
        v800 = 0;
        goto LABEL_165;
      }
      if (v803 == v802)
      {
        v823 = v822;
        (*(void (**)(_QWORD *, _QWORD *))(v802[0] + 24))(v802, v822);
        v61 = v823;
        if (!v823)
        {
LABEL_163:
          v800 = 0;
          goto LABEL_165;
        }
      }
      else
      {
        v61 = (_QWORD *)(*(uint64_t (**)(void))(*v803 + 16))();
        v823 = v61;
        if (!v61)
          goto LABEL_163;
      }
      if (v61 == v822)
      {
        v800 = &v797;
        (*(void (**)(_QWORD *, uint64_t *))(v822[0] + 24))(v822, &v797);
      }
      else
      {
        v800 = v61;
        v823 = 0;
      }
LABEL_165:
      gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)21>,std::function<void ()(gdc::Entity)>>(&v794, &v797);
      v62 = v800;
      if (v800 == &v797)
      {
        v62 = &v797;
        v63 = 4;
      }
      else
      {
        if (!v800)
          goto LABEL_170;
        v63 = 5;
      }
      (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_170:
      v793 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>(v28);
      if (!v803)
      {
        v821 = 0;
        v800 = 0;
        goto LABEL_179;
      }
      if (v803 == v802)
      {
        v821 = v820;
        (*(void (**)(_QWORD *, _QWORD *))(v802[0] + 24))(v802, v820);
        v64 = v821;
        if (!v821)
        {
LABEL_177:
          v800 = 0;
          goto LABEL_179;
        }
      }
      else
      {
        v64 = (_QWORD *)(*(uint64_t (**)(void))(*v803 + 16))();
        v821 = v64;
        if (!v64)
          goto LABEL_177;
      }
      if (v64 == v820)
      {
        v800 = &v797;
        (*(void (**)(_QWORD *, uint64_t *))(v820[0] + 24))(v820, &v797);
      }
      else
      {
        v800 = v64;
        v821 = 0;
      }
LABEL_179:
      gdc::RegistryView<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>::each<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>,std::function<void ()(gdc::Entity)>>(&v793, &v797);
      v65 = v800;
      if (v800 == &v797)
      {
        v65 = &v797;
        v66 = 4;
      }
      else
      {
        if (!v800)
          goto LABEL_184;
        v66 = 5;
      }
      (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_184:
      v67 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)0>>(v28);
      if (!v803)
      {
        v819 = 0;
LABEL_189:
        v827 = 0;
LABEL_190:
        v800 = 0;
        goto LABEL_198;
      }
      if (v803 == v802)
      {
        v819 = v818;
        (*(void (**)(_QWORD *, uint64_t *))(v802[0] + 24))(v802, v818);
        v68 = v819;
        if (!v819)
          goto LABEL_189;
      }
      else
      {
        v68 = (uint64_t *)(*(uint64_t (**)(void))(*v803 + 16))();
        v819 = v68;
        if (!v68)
          goto LABEL_189;
      }
      if (v68 == v818)
      {
        v827 = v826;
        (*(void (**)(uint64_t *, _QWORD *))(v818[0] + 24))(v818, v826);
        v68 = v827;
        if (!v827)
          goto LABEL_190;
      }
      else
      {
        v827 = v68;
        v819 = 0;
      }
      if (v68 == v826)
      {
        v800 = &v797;
        (*(void (**)(_QWORD *, uint64_t *))(v826[0] + 24))(v826, &v797);
      }
      else
      {
        v800 = v68;
        v827 = 0;
      }
LABEL_198:
      v69 = *(uint64_t **)(v67 + 56);
      for (j = *(uint64_t **)(v67 + 64); v69 != j; ++v69)
      {
        v816[0] = *v69;
        if (!v800)
          goto LABEL_1287;
        (*(void (**)(uint64_t *, uint64_t *))(*v800 + 48))(v800, v816);
      }
      v71 = v800;
      if (v800 == &v797)
      {
        v71 = &v797;
        v72 = 4;
      }
      else
      {
        if (!v800)
          goto LABEL_206;
        v72 = 5;
      }
      (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_206:
      v73 = v827;
      if (v827 == v826)
      {
        v73 = v826;
        v74 = 4;
      }
      else
      {
        if (!v827)
          goto LABEL_211;
        v74 = 5;
      }
      (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_211:
      v75 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)2>>(v28);
      if (!v803)
      {
        v817 = 0;
LABEL_216:
        v827 = 0;
LABEL_217:
        v800 = 0;
        goto LABEL_225;
      }
      if (v803 == v802)
      {
        v817 = v816;
        (*(void (**)(_QWORD *, uint64_t *))(v802[0] + 24))(v802, v816);
        v76 = v817;
        if (!v817)
          goto LABEL_216;
      }
      else
      {
        v76 = (uint64_t *)(*(uint64_t (**)(void))(*v803 + 16))();
        v817 = v76;
        if (!v76)
          goto LABEL_216;
      }
      if (v76 == v816)
      {
        v827 = v826;
        (*(void (**)(uint64_t *, _QWORD *))(v816[0] + 24))(v816, v826);
        v76 = v827;
        if (!v827)
          goto LABEL_217;
      }
      else
      {
        v827 = v76;
        v817 = 0;
      }
      if (v76 == v826)
      {
        v800 = &v797;
        (*(void (**)(_QWORD *, uint64_t *))(v826[0] + 24))(v826, &v797);
      }
      else
      {
        v800 = v76;
        v827 = 0;
      }
LABEL_225:
      v77 = *(uint64_t **)(v75 + 56);
      for (k = *(uint64_t **)(v75 + 64); v77 != k; ++v77)
      {
        v814[0] = *v77;
        if (!v800)
          goto LABEL_1287;
        (*(void (**)(uint64_t *, uint64_t *))(*v800 + 48))(v800, v814);
      }
      v79 = v800;
      if (v800 == &v797)
      {
        v79 = &v797;
        v80 = 4;
      }
      else
      {
        if (!v800)
          goto LABEL_233;
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_233:
      v81 = v827;
      if (v827 == v826)
      {
        v81 = v826;
        v82 = 4;
      }
      else
      {
        if (!v827)
          goto LABEL_238;
        v82 = 5;
      }
      (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_238:
      v83 = gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)20>>(v28);
      if (!v803)
      {
        v815 = 0;
LABEL_243:
        v827 = 0;
LABEL_244:
        v800 = 0;
        goto LABEL_252;
      }
      if (v803 == v802)
      {
        v815 = v814;
        (*(void (**)(_QWORD *, uint64_t *))(v802[0] + 24))(v802, v814);
        v84 = v815;
        if (!v815)
          goto LABEL_243;
      }
      else
      {
        v84 = (uint64_t *)(*(uint64_t (**)(void))(*v803 + 16))();
        v815 = v84;
        if (!v84)
          goto LABEL_243;
      }
      if (v84 == v814)
      {
        v827 = v826;
        (*(void (**)(uint64_t *, _QWORD *))(v814[0] + 24))(v814, v826);
        v84 = v827;
        if (!v827)
          goto LABEL_244;
      }
      else
      {
        v827 = v84;
        v815 = 0;
      }
      if (v84 == v826)
      {
        v800 = &v797;
        (*(void (**)(_QWORD *, uint64_t *))(v826[0] + 24))(v826, &v797);
      }
      else
      {
        v800 = v84;
        v827 = 0;
      }
LABEL_252:
      v86 = *(uint64_t **)(v83 + 56);
      for (m = *(uint64_t **)(v83 + 64); v86 != m; ++v86)
      {
        v796 = *v86;
        if (!v800)
          goto LABEL_1287;
        (*(void (**)(uint64_t *, uint64_t *))(*v800 + 48))(v800, &v796);
      }
      v87 = v800;
      if (v800 == &v797)
      {
        v87 = &v797;
        v88 = 4;
      }
      else
      {
        if (!v800)
          goto LABEL_260;
        v88 = 5;
      }
      (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_260:
      v89 = v827;
      if (v827 == v826)
      {
        v89 = v826;
        v90 = 4;
      }
      else
      {
        if (!v827)
          goto LABEL_265;
        v90 = 5;
      }
      (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_265:
      v91 = v815;
      if (v815 == v814)
      {
        v91 = v814;
        v92 = 4;
      }
      else
      {
        if (!v815)
          goto LABEL_270;
        v92 = 5;
      }
      (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_270:
      v93 = v817;
      if (v817 == v816)
      {
        v93 = v816;
        v94 = 4;
      }
      else
      {
        if (!v817)
          goto LABEL_275;
        v94 = 5;
      }
      (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_275:
      v95 = v819;
      if (v819 == v818)
      {
        v95 = v818;
        v96 = 4;
      }
      else
      {
        if (!v819)
          goto LABEL_280;
        v96 = 5;
      }
      (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_280:
      v97 = v821;
      if (v821 == v820)
      {
        v97 = v820;
        v98 = 4;
      }
      else
      {
        if (!v821)
          goto LABEL_285;
        v98 = 5;
      }
      (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_285:
      v99 = v823;
      if (v823 == v822)
      {
        v99 = v822;
        v100 = 4;
      }
      else
      {
        if (!v823)
          goto LABEL_290;
        v100 = 5;
      }
      (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_290:
      v101 = v825;
      if (v825 == v824)
      {
        v101 = v824;
        v102 = 4;
      }
      else
      {
        if (!v825)
          goto LABEL_295;
        v102 = 5;
      }
      (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_295:
      v58 = v803;
      if (v803 == v802)
      {
        v58 = v802;
        goto LABEL_299;
      }
LABEL_296:
      if (!v58)
        goto LABEL_301;
      v103 = 5;
LABEL_300:
      (*(void (**)(void))(*v58 + 8 * v103))();
LABEL_301:
      while (1)
      {
        v17 = (uint64_t *)(*(_QWORD *)&buf[8] + 8);
        *(_QWORD *)&buf[8] = v17;
        if (v17 == *(uint64_t **)(*(_QWORD *)buf + 8))
          break;
        if (!v811)
          goto LABEL_1287;
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v811 + 48))(v811))
        {
          v17 = *(uint64_t **)&buf[8];
          break;
        }
      }
    }
    while ((uint64_t *)v805 != v17);
  }
  v104 = v808;
  if (v808 == &v806)
  {
    v105 = 4;
    v104 = &v806;
  }
  else
  {
    if (!v808)
      goto LABEL_310;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_310:
  v106 = v811;
  if (v811 == &buf[16])
  {
    v107 = 4;
    v106 = &buf[16];
  }
  else
  {
    if (!v811)
      goto LABEL_315;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_315:
  v108 = *((_QWORD *)v3 + 17);
  v824[0] = &off_1E42CB6D8;
  v825 = v824;
  v807 = &v804;
  v804 = (unint64_t)&off_1E42CB6D8;
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(buf, v108 + 408, (uint64_t)&v804, *(_QWORD *)(v108 + 408));
  v109 = v807;
  if (v807 == &v804)
  {
    v110 = 4;
    v109 = &v804;
  }
  else
  {
    if (!v807)
      goto LABEL_320;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_320:
  v111 = v825;
  if (v825 == v824)
  {
    v112 = 4;
    v111 = v824;
  }
  else
  {
    if (!v825)
      goto LABEL_325;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_325:
  v113 = *(_QWORD *)buf;
  v114 = (uint64_t)v811;
  if (!v811)
  {
LABEL_328:
    v800 = (uint64_t *)v114;
    goto LABEL_330;
  }
  if (v811 != &buf[16])
  {
    v114 = (*(uint64_t (**)(void))(*(_QWORD *)v811 + 16))();
    goto LABEL_328;
  }
  v800 = &v797;
  (*(void (**)(void))(*(_QWORD *)v811 + 24))();
LABEL_330:
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v804, v113, (uint64_t)&v797, **(_QWORD **)buf);
  v115 = v800;
  if (v800 == &v797)
  {
    v116 = 4;
    v115 = &v797;
  }
  else
  {
    if (!v800)
      goto LABEL_335;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_335:
  v117 = *(_QWORD *)buf;
  v118 = (uint64_t)v811;
  if (!v811)
  {
LABEL_338:
    v827 = (_QWORD *)v118;
    goto LABEL_340;
  }
  if (v811 != &buf[16])
  {
    v118 = (*(uint64_t (**)(void))(*(_QWORD *)v811 + 16))();
    goto LABEL_338;
  }
  v827 = v826;
  (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)&buf[16] + 24))(&buf[16], v826);
LABEL_340:
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&v797, v117, (uint64_t)v826, *(_QWORD *)(*(_QWORD *)buf + 8));
  v119 = v827;
  if (v827 == v826)
  {
    v120 = 4;
    v119 = v826;
  }
  else
  {
    if (!v827)
      goto LABEL_345;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_345:
  v121 = v805;
  if (v798 != v805)
  {
    v122 = (uint64_t **)((char *)v3 + 168);
    do
    {
      v123 = *v122;
      if (*v122)
      {
        v124 = *(unsigned __int16 *)(*(_QWORD *)v121 + 40);
        v125 = (uint64_t *)((char *)v3 + 168);
        v126 = *v122;
        do
        {
          v127 = *((unsigned __int16 *)v126 + 16);
          v128 = v127 >= v124;
          if (v127 >= v124)
            v129 = (uint64_t **)v126;
          else
            v129 = (uint64_t **)(v126 + 1);
          if (v128)
            v125 = v126;
          v126 = *v129;
        }
        while (*v129);
        if (v125 != (uint64_t *)v122 && v124 >= *((unsigned __int16 *)v125 + 16))
        {
          v130 = (uint64_t *)v125[1];
          v131 = v125;
          if (v130)
          {
            do
            {
              v132 = v130;
              v130 = (uint64_t *)*v130;
            }
            while (v130);
          }
          else
          {
            do
            {
              v132 = (uint64_t *)v131[2];
              v401 = *v132 == (_QWORD)v131;
              v131 = v132;
            }
            while (!v401);
          }
          if (*((uint64_t **)v3 + 20) == v125)
            *((_QWORD *)v3 + 20) = v132;
          --*((_QWORD *)v3 + 22);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v123, v125);
          operator delete(v125);
        }
      }
      while (1)
      {
        v121 = v805 + 8;
        v805 = v121;
        if (v121 == *(_QWORD *)(v804 + 8))
          break;
        if (!v808)
          goto LABEL_1287;
        if ((*(unsigned int (**)(uint64_t *))(*v808 + 48))(v808))
        {
          v121 = v805;
          break;
        }
      }
    }
    while (v798 != v121);
  }
  v133 = v801;
  if (v801 == &v799)
  {
    v134 = 4;
    v133 = &v799;
  }
  else
  {
    if (!v801)
      goto LABEL_376;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_376:
  v135 = v808;
  if (v808 == &v806)
  {
    v136 = 4;
    v135 = &v806;
    goto LABEL_380;
  }
  if (v808)
  {
    v136 = 5;
LABEL_380:
    (*(void (**)(void))(*v135 + 8 * v136))();
  }
  v137 = *((_QWORD *)v3 + 17);
  v138 = *(unsigned __int16 **)(v137 + 456);
  v139 = *(unsigned __int16 **)(v137 + 464);
  if (v138 != v139)
  {
    v141 = (uint64_t **)((char *)v3 + 168);
    v140 = (uint64_t *)*((_QWORD *)v3 + 21);
    if (v140)
    {
LABEL_383:
      v142 = *v138;
      v143 = (uint64_t *)((char *)v3 + 168);
      v144 = v140;
      do
      {
        v145 = *((unsigned __int16 *)v144 + 16);
        v146 = v145 >= v142;
        if (v145 >= v142)
          v147 = (uint64_t **)v144;
        else
          v147 = (uint64_t **)(v144 + 1);
        if (v146)
          v143 = v144;
        v144 = *v147;
      }
      while (*v147);
      if (v143 != (uint64_t *)v141 && v142 >= *((unsigned __int16 *)v143 + 16))
      {
        v148 = (uint64_t *)v143[1];
        v149 = v143;
        if (v148)
        {
          do
          {
            v150 = v148;
            v148 = (uint64_t *)*v148;
          }
          while (v148);
        }
        else
        {
          do
          {
            v150 = (uint64_t *)v149[2];
            v401 = *v150 == (_QWORD)v149;
            v149 = v150;
          }
          while (!v401);
        }
        if (*((uint64_t **)v3 + 20) == v143)
          *((_QWORD *)v3 + 20) = v150;
        --*((_QWORD *)v3 + 22);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v140, v143);
        operator delete(v143);
      }
      while (++v138 != v139)
      {
        v140 = *v141;
        if (*v141)
          goto LABEL_383;
      }
    }
  }
  v151 = v811;
  if (v811 == &buf[16])
  {
    v153 = 4;
    v151 = &buf[16];
    v152 = v787;
  }
  else
  {
    v152 = v787;
    if (!v811)
      goto LABEL_409;
    v153 = 5;
  }
  (*(void (**)(void))(*v151 + 8 * v153))();
LABEL_409:
  v154 = (_QWORD *)v829;
  if ((_BYTE *)v829 == &v828[16])
  {
    v155 = 4;
    v154 = &v828[16];
  }
  else
  {
    if (!(_QWORD)v829)
      goto LABEL_414;
    v155 = 5;
  }
  (*(void (**)(void))(*v154 + 8 * v155))();
LABEL_414:
  v156 = (_QWORD *)*((_QWORD *)v152 + 1);
  v157 = (int8x8_t)v156[1];
  if (!*(_QWORD *)&v157)
    goto LABEL_437;
  v158 = (uint8x8_t)vcnt_s8(v157);
  v158.i16[0] = vaddlv_u8(v158);
  if (v158.u32[0] > 1uLL)
  {
    v159 = 0x9F2276D081C2CB20;
    if (*(_QWORD *)&v157 <= 0x9F2276D081C2CB20)
      v159 = 0x9F2276D081C2CB20 % *(_QWORD *)&v157;
  }
  else
  {
    v159 = (*(_QWORD *)&v157 - 1) & 0x9F2276D081C2CB20;
  }
  v160 = *(_QWORD **)(*v156 + 8 * v159);
  if (!v160)
    goto LABEL_437;
  v161 = (_QWORD *)*v160;
  if (!v161)
    goto LABEL_437;
  if (v158.u32[0] < 2uLL)
  {
    v162 = *(_QWORD *)&v157 - 1;
    while (1)
    {
      v164 = v161[1];
      if (v164 == 0x9F2276D081C2CB20)
      {
        if (v161[2] == 0x9F2276D081C2CB20)
          goto LABEL_435;
      }
      else if ((v164 & v162) != v159)
      {
        goto LABEL_437;
      }
      v161 = (_QWORD *)*v161;
      if (!v161)
        goto LABEL_437;
    }
  }
  while (1)
  {
    v163 = v161[1];
    if (v163 == 0x9F2276D081C2CB20)
      break;
    if (v163 >= *(_QWORD *)&v157)
      v163 %= *(_QWORD *)&v157;
    if (v163 != v159)
      goto LABEL_437;
LABEL_424:
    v161 = (_QWORD *)*v161;
    if (!v161)
      goto LABEL_437;
  }
  if (v161[2] != 0x9F2276D081C2CB20)
    goto LABEL_424;
LABEL_435:
  v165 = v161[5];
  if (*(_QWORD *)(v165 + 8) != 0x9F2276D081C2CB20)
  {
LABEL_437:
    v760 = 0;
    goto LABEL_438;
  }
  v760 = *(uint64_t **)(v165 + 32);
LABEL_438:
  v166 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(*((_QWORD *)v3 + 19));
  v167 = v166;
  if (v166[29])
  {
    v168 = (_QWORD *)v166[28];
    if (v168)
    {
      v169 = v166[31];
      v170 = v166[7];
      v171 = (v166[8] - v170) >> 3;
      do
      {
        *(_QWORD *)v828 = v170;
        *(_QWORD *)&v828[8] = v171;
        *(_QWORD *)buf = v169;
        v172 = v168[6];
        if (!v172)
          goto LABEL_1287;
        (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v172 + 48))(v172, buf, v828);
        v168 = (_QWORD *)*v168;
      }
      while (v168);
    }
  }
  v167[8] = v167[7];
  v167[11] = v167[10];
  v173 = operator new(0x20uLL);
  *v173 = &off_1E42CB690;
  v173[1] = v768;
  v173[2] = v760;
  v810 = v173;
  *(_QWORD *)v828 = 0;
  v804 = 0;
  v174 = *v760;
  if ((v175 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v176 = *(_WORD **)(v174 + 48);
  v177 = *(_WORD **)(v174 + 56);
  v178 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v176 != v177)
  {
    v179 = *(_WORD **)(v174 + 48);
    while (*v179 != 11)
    {
      v179 += 16;
      if (v179 == v177)
        goto LABEL_455;
    }
    if (v179 == v177)
    {
      v178 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v176 != 11)
      {
        v176 += 16;
        if (v176 == v177)
        {
          v176 = *(_WORD **)(v174 + 56);
          break;
        }
      }
      v178 = (uint64_t *)(v176 + 4);
    }
  }
LABEL_455:
  md::OverlaysLogic::updateVisibilityForOverlayTiles(v768, v178, v768 + 184, (_QWORD *)(v768 + 344), (unsigned __int8 **)(v768 + 504));
  *(_QWORD *)v828 = 0;
  v804 = 1;
  if (!v810)
    goto LABEL_1287;
  (*(void (**)(_BYTE *, _BYTE *, unint64_t *))(*(_QWORD *)v810 + 48))(v810, v828, &v804);
  *(_QWORD *)v828 = 1;
  v804 = 0;
  if (!v810)
    goto LABEL_1287;
  (*(void (**)(_BYTE *, _BYTE *, unint64_t *))(*(_QWORD *)v810 + 48))(v810, v828, &v804);
  *(_QWORD *)v828 = 1;
  v804 = 1;
  if (!v810)
    goto LABEL_1287;
  (*(void (**)(_BYTE *, _BYTE *, unint64_t *))(*(_QWORD *)v810 + 48))(v810, v828, &v804);
  v180 = v810;
  if (v810 == buf)
  {
    v181 = 4;
    v180 = buf;
LABEL_462:
    (*(void (**)(void))(*v180 + 8 * v181))();
  }
  else if (v810)
  {
    v181 = 5;
    goto LABEL_462;
  }
  if (*(_BYTE *)(v768 + 856))
  {
    v182 = operator new(4uLL);
    *v182 = 3735610;
    v183 = v182 + 1;
  }
  else
  {
    v182 = operator new(2uLL);
    *(_WORD *)v182 = 58;
    v183 = (_DWORD *)((char *)v182 + 2);
  }
  __p = v182;
  v758 = v183;
  v184 = v768;
  while (2)
  {
    v762 = v182;
    v185 = *(unsigned __int16 *)v182;
    v186 = *v760;
    if ((v187 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v188 = *(unsigned __int16 **)(v186 + 48);
    v189 = *(unsigned __int16 **)(v186 + 56);
    if (v188 == v189)
      goto LABEL_480;
    v190 = *(unsigned __int16 **)(v186 + 48);
    while (*v190 != v185)
    {
      v190 += 16;
      if (v190 == v189)
        goto LABEL_480;
    }
    if (v190 == v189)
    {
LABEL_480:
      v191 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      if (!*(_BYTE *)(v184 + 128))
        goto LABEL_467;
      goto LABEL_481;
    }
    while (*v188 != v185)
    {
      v188 += 16;
      if (v188 == v189)
      {
        v188 = *(unsigned __int16 **)(v186 + 56);
        break;
      }
    }
    v191 = (uint64_t *)(v188 + 4);
    if (*(_BYTE *)(v184 + 128))
    {
LABEL_481:
      v192 = (uint64_t *)*v191;
      v764 = v191 + 1;
      if ((uint64_t *)*v191 == v191 + 1)
        goto LABEL_467;
      while (1)
      {
        v766 = v192;
        v193 = (_QWORD *)v192[4];
        v194 = (uint64_t *)v193[92];
        v195 = (uint64_t *)v193[91];
        v196 = (char *)v194 - (char *)v195;
        if (v194 != v195)
          goto LABEL_485;
        v232 = (void *)v193[92];
        v233 = (char *)v193[94];
        v774 = (char *)v193[95];
        v234 = 0xCCCCCCCCCCCCCCCDLL * ((v774 - v233) >> 5);
        if (v234 > (uint64_t)(v193[93] - (_QWORD)v195) >> 3)
        {
          if (v234 >> 61)
LABEL_1283:
            abort();
          v235 = (char *)operator new(0x6666666666666668 * ((v774 - v233) >> 5));
          v236 = &v235[8 * (v196 >> 3)];
          v193[91] = v236;
          v193[92] = v236;
          v193[93] = &v235[0x6666666666666668 * ((v774 - v233) >> 5)];
          if (v232)
          {
            operator delete(v232);
            v233 = (char *)v193[94];
            v774 = (char *)v193[95];
          }
        }
        if (v233 != v774)
          break;
        v194 = (uint64_t *)v193[92];
LABEL_485:
        v197 = (uint64_t *)v193[91];
        if (v197 != v194)
        {
          v198 = *(_QWORD *)(v768 + 152);
          v781 = v194;
          v788 = (uint64_t *)(v198 + 120);
          while (1)
          {
            v199 = *v197;
            v804 = 0x9956BFA43F1B46A6;
            v200 = *(int8x8_t *)(v198 + 128);
            if (v200)
            {
              v201 = (uint8x8_t)vcnt_s8(v200);
              v201.i16[0] = vaddlv_u8(v201);
              if (v201.u32[0] > 1uLL)
              {
                v202 = 0x9956BFA43F1B46A6;
                if (*(_QWORD *)&v200 <= 0x9956BFA43F1B46A6)
                  v202 = 0x9956BFA43F1B46A6 % *(_QWORD *)&v200;
              }
              else
              {
                v202 = (*(_QWORD *)&v200 - 1) & 0x9956BFA43F1B46A6;
              }
              v203 = *(_QWORD **)(*v788 + 8 * v202);
              if (v203)
              {
                v204 = (_QWORD *)*v203;
                if (v204)
                {
                  if (v201.u32[0] < 2uLL)
                  {
                    v205 = *(_QWORD *)&v200 - 1;
                    while (1)
                    {
                      v207 = v204[1];
                      if (v207 == 0x9956BFA43F1B46A6)
                      {
                        if (v204[2] == 0x9956BFA43F1B46A6)
                          goto LABEL_537;
                      }
                      else if ((v207 & v205) != v202)
                      {
                        goto LABEL_508;
                      }
                      v204 = (_QWORD *)*v204;
                      if (!v204)
                        goto LABEL_508;
                    }
                  }
                  do
                  {
                    v206 = v204[1];
                    if (v206 == 0x9956BFA43F1B46A6)
                    {
                      if (v204[2] == 0x9956BFA43F1B46A6)
                      {
LABEL_537:
                        v208 = v204[3];
                        goto LABEL_511;
                      }
                    }
                    else
                    {
                      if (v206 >= *(_QWORD *)&v200)
                        v206 %= *(_QWORD *)&v200;
                      if (v206 != v202)
                        break;
                    }
                    v204 = (_QWORD *)*v204;
                  }
                  while (v204);
                }
              }
            }
LABEL_508:
            v208 = operator new();
            *(_QWORD *)(v208 + 16) = "md::overlayComponents::TileIsInView]";
            *(_QWORD *)(v208 + 24) = 35;
            *(_OWORD *)(v208 + 32) = 0u;
            *(_OWORD *)(v208 + 48) = 0u;
            *(_OWORD *)(v208 + 64) = 0u;
            *(_OWORD *)(v208 + 80) = 0u;
            *(_OWORD *)(v208 + 96) = 0u;
            *(_OWORD *)(v208 + 112) = 0u;
            *(_OWORD *)(v208 + 128) = 0u;
            *(_DWORD *)(v208 + 144) = 1065353216;
            *(_OWORD *)(v208 + 152) = 0u;
            *(_OWORD *)(v208 + 168) = 0u;
            *(_QWORD *)(v208 + 184) = 0;
            *(_DWORD *)(v208 + 192) = 1065353216;
            *(_OWORD *)(v208 + 200) = 0u;
            *(_OWORD *)(v208 + 216) = 0u;
            *(_QWORD *)(v208 + 232) = 0;
            *(_DWORD *)(v208 + 240) = 1065353216;
            *(_QWORD *)v208 = &off_1E42B36A8;
            *(_QWORD *)(v208 + 8) = 0x9956BFA43F1B46A6;
            *(_QWORD *)(v208 + 248) = v198;
            v209 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v788, 0x9956BFA43F1B46A6, &v804);
            v210 = v209[3];
            v209[3] = v208;
            if (v210)
              (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
            *(_QWORD *)v828 = 0x9956BFA43F1B46A6;
            *(_QWORD *)&v828[8] = "md::overlayComponents::TileIsInView]";
            *(_QWORD *)&v828[16] = 35;
            gdc::Registry::_registerStorageDataSignals(v198, 0x9956BFA43F1B46A6, (uint64_t)v828, (uint64_t *)(v208 + 104));
LABEL_511:
            v797 = v199;
            v211 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v208 + 32), (uint64_t)&v797);
            if ((v212 & 1) != 0)
              break;
            v213 = *(_QWORD *)(v208 + 248);
            if (*(_QWORD *)(v208 + 80) + (((uint64_t)v211 - *(_QWORD *)(v208 + 56)) >> 3) == *(_QWORD *)(v208 + 88))
              goto LABEL_533;
            for (n = *(_QWORD **)(v208 + 128); n; n = (_QWORD *)*n)
            {
              *(_QWORD *)v828 = &v797;
              *(_QWORD *)&v828[8] = 1;
              v804 = v213;
              v215 = n[6];
              if (!v215)
                goto LABEL_1287;
              (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v215 + 48))(v215, &v804, v828);
            }
LABEL_487:
            if (++v197 == v781)
              goto LABEL_538;
          }
          v217 = *(_BYTE **)(v208 + 88);
          v216 = *(_QWORD *)(v208 + 96);
          if ((unint64_t)v217 >= v216)
          {
            v219 = *(char **)(v208 + 80);
            v220 = v217 - v219;
            v221 = v217 - v219 + 1;
            if (v221 < 0)
              goto LABEL_1283;
            v222 = v216 - (_QWORD)v219;
            if (2 * v222 > v221)
              v221 = 2 * v222;
            if (v222 >= 0x3FFFFFFFFFFFFFFFLL)
              v223 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v223 = v221;
            if (v223)
              v224 = (char *)operator new(v223);
            else
              v224 = 0;
            v225 = &v224[v223];
            v218 = (uint64_t)&v224[v220 + 1];
            v226 = (char *)(v219 - v217);
            if (v219 == v217)
              v226 = 0;
            *(_QWORD *)(v208 + 80) = &v224[v220 + (_QWORD)v226];
            *(_QWORD *)(v208 + 88) = v218;
            *(_QWORD *)(v208 + 96) = v225;
            if (v219)
              operator delete(v219);
          }
          else
          {
            v218 = (uint64_t)(v217 + 1);
          }
          *(_QWORD *)(v208 + 88) = v218;
          v213 = *(_QWORD *)(v208 + 248);
LABEL_533:
          for (ii = *(_QWORD **)(v208 + 176); ii; ii = (_QWORD *)*ii)
          {
            *(_QWORD *)v828 = &v797;
            *(_QWORD *)&v828[8] = 1;
            v804 = v213;
            v228 = ii[6];
            if (!v228)
              goto LABEL_1287;
            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v228 + 48))(v228, &v804, v828);
          }
          goto LABEL_487;
        }
LABEL_538:
        v229 = v766;
        v230 = (uint64_t *)v766[1];
        if (v230)
        {
          do
          {
            v231 = v230;
            v230 = (uint64_t *)*v230;
          }
          while (v230);
        }
        else
        {
          do
          {
            v231 = (uint64_t *)v229[2];
            v401 = *v231 == (_QWORD)v229;
            v229 = v231;
          }
          while (!v401);
        }
        v192 = v231;
        v184 = v768;
        if (v231 == v764)
          goto LABEL_467;
      }
      v779 = v193;
      while (1)
      {
        v238 = *((_QWORD *)v233 + 6);
        v239 = operator new();
        v240 = v239;
        *(_QWORD *)v239 = *(_QWORD *)v238;
        v241 = *(_QWORD *)(v238 + 8);
        *(_QWORD *)(v239 + 8) = v241;
        if (v241)
        {
          v242 = (unint64_t *)(v241 + 8);
          do
            v243 = __ldxr(v242);
          while (__stxr(v243 + 1, v242));
        }
        v244 = *(_OWORD *)(v238 + 16);
        v245 = *(_OWORD *)(v238 + 32);
        *(_OWORD *)(v239 + 46) = *(_OWORD *)(v238 + 46);
        *(_OWORD *)(v239 + 16) = v244;
        *(_OWORD *)(v239 + 32) = v245;
        *(_QWORD *)(v239 + 64) = *(_QWORD *)(v238 + 64);
        v246 = *(_QWORD *)(v238 + 72);
        *(_QWORD *)(v239 + 72) = v246;
        if (v246)
        {
          v247 = (unint64_t *)(v246 + 8);
          do
            v248 = __ldxr(v247);
          while (__stxr(v248 + 1, v247));
        }
        v249 = *((_QWORD *)v233 + 7);
        v250 = (_QWORD *)operator new();
        ggl::Mesh::Mesh((uint64_t)v250, v249);
        *v250 = &off_1E42BAF50;
        v250[2] = &unk_1E42BAF70;
        v251 = (gdc::Registry *)v193[90];
        v253 = *((_QWORD *)v233 + 13);
        v252 = (std::__shared_weak_count *)*((_QWORD *)v233 + 14);
        if (v252)
        {
          p_shared_owners = (unint64_t *)&v252->__shared_owners_;
          do
            v255 = __ldxr(p_shared_owners);
          while (__stxr(v255 + 1, p_shared_owners));
        }
        v789 = v252;
        *(_QWORD *)v828 = 0;
        *(_QWORD *)&v828[8] = v240;
        v256 = (_QWORD *)operator new();
        *v256 = &off_1E42E7448;
        v256[1] = 0;
        v256[2] = 0;
        v256[3] = v240;
        *(_QWORD *)&v828[16] = v256;
        *(_QWORD *)&v828[24] = v250;
        v257 = (_QWORD *)operator new();
        *v257 = &off_1E42E7BB8;
        v257[1] = 0;
        v257[2] = 0;
        v257[3] = v250;
        v829 = 0u;
        v830 = 0u;
        *(_QWORD *)&v828[32] = v257;
        *(_QWORD *)&v831 = v253;
        *((_QWORD *)&v831 + 1) = v789;
        if (v789)
        {
          v258 = (unint64_t *)&v789->__shared_owners_;
          do
            v259 = __ldxr(v258);
          while (__stxr(v259 + 1, v258));
        }
        v832 = v193;
        v833 = 0;
        v260 = gdc::Registry::create(v251);
        v261 = (uint64_t *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>((uint64_t)v251);
        v826[0] = v260;
        v262 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v261 + 4, (uint64_t)v826);
        v782 = v233;
        if ((v263 & 1) != 0)
          break;
        v264 = v261[10];
        v265 = ((uint64_t)v262 - v261[7]) >> 3;
        v266 = v264 + 104 * v265;
        *(_QWORD *)v266 = *(_QWORD *)v828;
        v267 = *(_OWORD *)&v828[8];
        *(_QWORD *)&v828[8] = 0;
        *(_QWORD *)&v828[16] = 0;
        v268 = *(std::__shared_weak_count **)(v266 + 16);
        *(_OWORD *)(v266 + 8) = v267;
        if (v268)
        {
          v269 = (unint64_t *)&v268->__shared_owners_;
          do
            v270 = __ldaxr(v269);
          while (__stlxr(v270 - 1, v269));
          if (!v270)
          {
            ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
            std::__shared_weak_count::__release_weak(v268);
          }
        }
        v271 = v264 + 104 * v265;
        v272 = *(_OWORD *)&v828[24];
        *(_QWORD *)&v828[24] = 0;
        *(_QWORD *)&v828[32] = 0;
        v273 = *(std::__shared_weak_count **)(v271 + 32);
        *(_OWORD *)(v271 + 24) = v272;
        if (v273)
        {
          v274 = (unint64_t *)&v273->__shared_owners_;
          do
            v275 = __ldaxr(v274);
          while (__stlxr(v275 - 1, v274));
          if (!v275)
          {
            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
            std::__shared_weak_count::__release_weak(v273);
          }
        }
        v276 = v264 + 104 * v265;
        v277 = v829;
        v829 = 0uLL;
        v278 = *(std::__shared_weak_count **)(v276 + 48);
        *(_OWORD *)(v276 + 40) = v277;
        if (v278)
        {
          v279 = (unint64_t *)&v278->__shared_owners_;
          do
            v280 = __ldaxr(v279);
          while (__stlxr(v280 - 1, v279));
          if (!v280)
          {
            ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
            std::__shared_weak_count::__release_weak(v278);
          }
        }
        v281 = v264 + 104 * v265;
        v282 = v830;
        v830 = 0uLL;
        v283 = *(std::__shared_weak_count **)(v281 + 64);
        *(_OWORD *)(v281 + 56) = v282;
        if (v283)
        {
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
        }
        v286 = v264 + 104 * v265;
        v287 = v831;
        v831 = 0uLL;
        v288 = *(std::__shared_weak_count **)(v286 + 80);
        *(_OWORD *)(v286 + 72) = v287;
        if (v288)
        {
          v289 = (unint64_t *)&v288->__shared_owners_;
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
        v291 = v260;
        v292 = v264 + 104 * v265;
        v293 = v832;
        *(_BYTE *)(v292 + 96) = v833;
        *(_QWORD *)(v292 + 88) = v293;
        v294 = v261[31];
        if (v266 != v261[11])
        {
          for (jj = (_QWORD *)v261[16]; jj; jj = (_QWORD *)*jj)
          {
            v804 = (unint64_t)v826;
            v805 = 1;
            v797 = v294;
            v296 = jj[6];
            if (!v296)
              goto LABEL_1287;
            (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v296 + 48))(v296, &v797, &v804);
          }
          goto LABEL_649;
        }
        v322 = (_QWORD *)v261[22];
        if (!v322)
          goto LABEL_649;
        do
        {
LABEL_647:
          v804 = (unint64_t)v826;
          v805 = 1;
          v797 = v294;
          v353 = v322[6];
          if (!v353)
            goto LABEL_1287;
          (*(void (**)(uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v353 + 48))(v353, &v797, &v804);
          v322 = (_QWORD *)*v322;
        }
        while (v322);
LABEL_649:
        md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)v828);
        v193 = v779;
        if (v789)
        {
          v354 = (unint64_t *)&v789->__shared_owners_;
          do
            v355 = __ldaxr(v354);
          while (__stlxr(v355 - 1, v354));
          if (!v355)
          {
            ((void (*)(std::__shared_weak_count *))v789->__on_zero_shared)(v789);
            std::__shared_weak_count::__release_weak(v789);
          }
        }
        v356 = (unint64_t *)v779[92];
        v357 = v779[93];
        if ((unint64_t)v356 < v357)
        {
          *v356 = v291;
          v194 = (uint64_t *)(v356 + 1);
          v237 = v782;
        }
        else
        {
          v358 = (char *)v779[91];
          v359 = ((char *)v356 - v358) >> 3;
          v360 = v359 + 1;
          if ((unint64_t)(v359 + 1) >> 61)
            abort();
          v361 = v357 - (_QWORD)v358;
          if (v361 >> 2 > v360)
            v360 = v361 >> 2;
          if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFF8)
            v362 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v362 = v360;
          if (v362)
          {
            if (v362 >> 61)
LABEL_1285:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v363 = (char *)operator new(8 * v362);
          }
          else
          {
            v363 = 0;
          }
          v364 = (unint64_t *)&v363[8 * v359];
          *v364 = v291;
          v365 = (uint64_t *)(v364 + 1);
          if (v356 == (unint64_t *)v358)
          {
            v193 = v779;
            v237 = v782;
          }
          else
          {
            v366 = (char *)(v356 - 1) - v358;
            v237 = v782;
            if (v366 < 0x58)
              goto LABEL_1306;
            if ((unint64_t)(v358 - v363) < 0x20)
              goto LABEL_1306;
            v367 = (v366 >> 3) + 1;
            v368 = &v363[8 * v359 - 16];
            v369 = v356 - 2;
            v370 = v367 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v371 = *(_OWORD *)v369;
              *((_OWORD *)v368 - 1) = *((_OWORD *)v369 - 1);
              *(_OWORD *)v368 = v371;
              v368 -= 32;
              v369 -= 4;
              v370 -= 4;
            }
            while (v370);
            v364 -= v367 & 0x3FFFFFFFFFFFFFFCLL;
            v356 -= v367 & 0x3FFFFFFFFFFFFFFCLL;
            if (v367 != (v367 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1306:
              do
              {
                v372 = *--v356;
                *--v364 = v372;
              }
              while (v356 != (unint64_t *)v358);
            }
            v193 = v779;
            v356 = (unint64_t *)v779[91];
          }
          v193[91] = v364;
          v373 = &v363[8 * v362];
          v194 = v365;
          v193[92] = v365;
          v193[93] = v373;
          if (v356)
            operator delete(v356);
        }
        v193[92] = v194;
        v233 = v237 + 160;
        if (v233 == v774)
          goto LABEL_485;
      }
      v297 = v261[11];
      v298 = v261[12];
      if (v297 < v298)
      {
        *(_OWORD *)v297 = *(_OWORD *)v828;
        v299 = *(_QWORD *)&v828[16];
        *(_QWORD *)(v297 + 16) = *(_QWORD *)&v828[16];
        if (v299)
        {
          v300 = (unint64_t *)(v299 + 8);
          do
            v301 = __ldxr(v300);
          while (__stxr(v301 + 1, v300));
        }
        *(_QWORD *)(v297 + 24) = *(_QWORD *)&v828[24];
        v302 = *(_QWORD *)&v828[32];
        *(_QWORD *)(v297 + 32) = *(_QWORD *)&v828[32];
        if (v302)
        {
          v303 = (unint64_t *)(v302 + 8);
          do
            v304 = __ldxr(v303);
          while (__stxr(v304 + 1, v303));
        }
        *(_QWORD *)(v297 + 40) = v829;
        v305 = *((_QWORD *)&v829 + 1);
        *(_QWORD *)(v297 + 48) = *((_QWORD *)&v829 + 1);
        if (v305)
        {
          v306 = (unint64_t *)(v305 + 8);
          do
            v307 = __ldxr(v306);
          while (__stxr(v307 + 1, v306));
        }
        *(_QWORD *)(v297 + 56) = v830;
        v308 = *((_QWORD *)&v830 + 1);
        *(_QWORD *)(v297 + 64) = *((_QWORD *)&v830 + 1);
        if (v308)
        {
          v309 = (unint64_t *)(v308 + 8);
          do
            v310 = __ldxr(v309);
          while (__stxr(v310 + 1, v309));
        }
        v291 = v260;
        *(_QWORD *)(v297 + 72) = v831;
        v311 = *((_QWORD *)&v831 + 1);
        *(_QWORD *)(v297 + 80) = *((_QWORD *)&v831 + 1);
        if (v311)
        {
          v312 = (unint64_t *)(v311 + 8);
          do
            v313 = __ldxr(v312);
          while (__stxr(v313 + 1, v312));
        }
        v314 = v832;
        *(_BYTE *)(v297 + 96) = v833;
        *(_QWORD *)(v297 + 88) = v314;
        v315 = v297 + 104;
        goto LABEL_646;
      }
      v316 = v261[10];
      v317 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v297 - v316) >> 3);
      v318 = v317 + 1;
      if ((unint64_t)(v317 + 1) > 0x276276276276276)
        abort();
      v319 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v298 - v316) >> 3);
      if (2 * v319 > v318)
        v318 = 2 * v319;
      if (v319 >= 0x13B13B13B13B13BLL)
        v320 = 0x276276276276276;
      else
        v320 = v318;
      if (v320)
      {
        if (v320 > 0x276276276276276)
          goto LABEL_1285;
        v321 = (char *)operator new(104 * v320);
      }
      else
      {
        v321 = 0;
      }
      v323 = &v321[104 * v317];
      *(_OWORD *)v323 = *(_OWORD *)v828;
      v324 = *(_QWORD *)&v828[16];
      *((_QWORD *)v323 + 2) = *(_QWORD *)&v828[16];
      if (v324)
      {
        v325 = (unint64_t *)(v324 + 8);
        do
          v326 = __ldxr(v325);
        while (__stxr(v326 + 1, v325));
      }
      v327 = *(_QWORD *)&v828[32];
      v328 = &v321[104 * v317];
      *((_QWORD *)v328 + 3) = *(_QWORD *)&v828[24];
      *((_QWORD *)v328 + 4) = v327;
      if (v327)
      {
        v329 = (unint64_t *)(v327 + 8);
        do
          v330 = __ldxr(v329);
        while (__stxr(v330 + 1, v329));
      }
      v331 = *((_QWORD *)&v829 + 1);
      v332 = &v321[104 * v317];
      *((_QWORD *)v332 + 5) = v829;
      *((_QWORD *)v332 + 6) = v331;
      if (v331)
      {
        v333 = (unint64_t *)(v331 + 8);
        do
          v334 = __ldxr(v333);
        while (__stxr(v334 + 1, v333));
      }
      v335 = *((_QWORD *)&v830 + 1);
      v336 = &v321[104 * v317];
      *((_QWORD *)v336 + 7) = v830;
      *((_QWORD *)v336 + 8) = v335;
      if (v335)
      {
        v337 = (unint64_t *)(v335 + 8);
        do
          v338 = __ldxr(v337);
        while (__stxr(v338 + 1, v337));
      }
      v339 = *((_QWORD *)&v831 + 1);
      v340 = &v321[104 * v317];
      *((_QWORD *)v340 + 9) = v831;
      *((_QWORD *)v340 + 10) = v339;
      if (v339)
      {
        v341 = (unint64_t *)(v339 + 8);
        do
          v342 = __ldxr(v341);
        while (__stxr(v342 + 1, v341));
      }
      v343 = &v321[104 * v320];
      v344 = &v321[104 * v317];
      *((_QWORD *)v344 + 11) = v832;
      v344[96] = v833;
      v315 = (uint64_t)(v323 + 104);
      v345 = (char *)v261[10];
      v346 = (char *)v261[11];
      if (v346 == v345)
      {
        v261[10] = (uint64_t)v323;
        v261[11] = v315;
        v261[12] = (uint64_t)v343;
        v291 = v260;
        if (!v346)
          goto LABEL_646;
      }
      else
      {
        v347 = 0;
        do
        {
          v348 = &v323[v347];
          v349 = &v346[v347];
          *(_OWORD *)(v348 - 104) = *(_OWORD *)&v346[v347 - 104];
          *((_QWORD *)v348 - 11) = *(_QWORD *)&v346[v347 - 88];
          *((_QWORD *)v349 - 12) = 0;
          *((_QWORD *)v349 - 11) = 0;
          *((_OWORD *)v348 - 5) = *(_OWORD *)&v346[v347 - 80];
          v350 = *(_OWORD *)&v346[v347 - 64];
          *((_QWORD *)v349 - 10) = 0;
          *((_QWORD *)v349 - 9) = 0;
          *((_OWORD *)v348 - 4) = v350;
          *((_QWORD *)v349 - 8) = 0;
          *((_QWORD *)v349 - 7) = 0;
          *((_OWORD *)v348 - 3) = *(_OWORD *)&v346[v347 - 48];
          *((_QWORD *)v349 - 6) = 0;
          *((_QWORD *)v349 - 5) = 0;
          *((_OWORD *)v348 - 2) = *(_OWORD *)&v346[v347 - 32];
          *((_QWORD *)v349 - 4) = 0;
          *((_QWORD *)v349 - 3) = 0;
          v351 = *(_QWORD *)&v346[v347 - 16];
          *(v348 - 8) = v346[v347 - 8];
          *((_QWORD *)v348 - 2) = v351;
          v347 -= 104;
        }
        while (&v346[v347] != v345);
        v346 = (char *)v261[10];
        v352 = (char *)v261[11];
        v261[10] = (uint64_t)&v323[v347];
        v261[11] = v315;
        v261[12] = (uint64_t)v343;
        while (v352 != v346)
          md::overlayComponents::VectorOverlay::~VectorOverlay((md::overlayComponents::VectorOverlay *)(v352 - 104));
        v291 = v260;
        if (!v346)
        {
LABEL_646:
          v261[11] = v315;
          v294 = v261[31];
          v322 = (_QWORD *)v261[22];
          if (!v322)
            goto LABEL_649;
          goto LABEL_647;
        }
      }
      operator delete(v346);
      goto LABEL_646;
    }
LABEL_467:
    v182 = (_DWORD *)((char *)v762 + 2);
    if ((_DWORD *)((char *)v762 + 2) != v758)
      continue;
    break;
  }
  operator delete(__p);
  LOBYTE(v824[0]) = 0;
  *(_QWORD *)v828 = &off_1E42CB840;
  *(_QWORD *)&v828[8] = v184;
  *(_QWORD *)&v828[16] = v824;
  *(_QWORD *)&v828[24] = v828;
  v797 = 0;
  v826[0] = 0;
  v374 = *(_QWORD **)(v184 + 200);
  if (v374)
  {
    do
    {
      md::OverlayTileData::resetNonTileOverlays((md::OverlayTileData *)&v804, v374[5]);
      v375 = v806;
      **(_BYTE **)&v828[16] |= v806 != 0;
      if (v375)
      {
        v377 = v804;
        v376 = (_QWORD *)v805;
        v378 = *(_QWORD *)v805;
        *(_QWORD *)(v378 + 8) = *(_QWORD *)(v804 + 8);
        **(_QWORD **)(v377 + 8) = v378;
        v379 = *(_QWORD *)(v184 + 944);
        *(_QWORD *)(v379 + 8) = v376;
        *v376 = v379;
        *(_QWORD *)(v184 + 944) = v377;
        *(_QWORD *)(v377 + 8) = v184 + 944;
        *(_QWORD *)(v184 + 960) += v375;
      }
      v374 = (_QWORD *)*v374;
    }
    while (v374);
    v797 = 0;
    v826[0] = 1;
    if (!*(_QWORD *)&v828[24])
      goto LABEL_1287;
    v380 = **(uint64_t (****)())&v828[24];
  }
  else
  {
    v797 = 0;
    v826[0] = 1;
    v380 = &off_1E42CB840;
  }
  v380[6]();
  v797 = 1;
  v826[0] = 0;
  if (!*(_QWORD *)&v828[24])
    goto LABEL_1287;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)&v828[24] + 48))(*(_QWORD *)&v828[24], &v797, v826);
  v797 = 1;
  v826[0] = 1;
  if (!*(_QWORD *)&v828[24])
    goto LABEL_1287;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)&v828[24] + 48))(*(_QWORD *)&v828[24], &v797, v826);
  v381 = *(_QWORD **)&v828[24];
  if (*(_BYTE **)&v828[24] == v828)
  {
    v382 = 4;
    v381 = v828;
LABEL_695:
    (*(void (**)(void))(*v381 + 8 * v382))();
  }
  else if (*(_QWORD *)&v828[24])
  {
    v382 = 5;
    goto LABEL_695;
  }
  if (LOBYTE(v824[0]))
  {
    v383 = **(_QWORD **)(v184 + 928);
    if (v383)
    {
      LOBYTE(v804) = 8;
      md::MapEngine::setNeedsTick(v383, &v804);
    }
  }
  if (!*(_BYTE *)(v184 + 921))
  {
    v384 = *(_QWORD *)(v184 + 152);
    v386 = *(_QWORD *)(v384 + 48);
    v385 = *(_QWORD *)(v384 + 56);
    if (v385 == v386)
      goto LABEL_767;
    v387 = 0;
    v780 = *(_QWORD *)(v184 + 152);
    while (1)
    {
      v390 = v386 + 8 * v387;
      if (*(_DWORD *)(v390 + 4) == -1)
        goto LABEL_708;
      v391 = *(_QWORD *)v390;
      v392 = *(_QWORD *)(v184 + 152);
      v393 = (_QWORD *)gdc::Registry::storage<std::vector<gdc::Registry*>>(v392);
      v394 = v391 >> 39;
      v395 = v393[4];
      if (v391 >> 39 >= (v393[5] - v395) >> 3)
        break;
      v396 = *(_QWORD *)(v395 + 8 * v394);
      if (!v396)
        break;
      v397 = *(unsigned __int16 *)(v396 + 2 * (HIDWORD(v391) & 0x7F));
      v399 = v393[7];
      v398 = v393[8];
      if (v397 >= (v398 - v399) >> 3)
        break;
      v400 = v399 + 8 * v397;
      v401 = v400 != v398 && *(_DWORD *)(v400 + 4) == HIDWORD(v391);
      if (!v401)
        break;
      v402 = v393[10];
      v389 = (_QWORD *)(v402 + 24 * v397);
      if (v389 == (_QWORD *)v393[11] || v402 == 0)
        break;
LABEL_707:
      v389[1] = *v389;
      v386 = *(_QWORD *)(v384 + 48);
      v385 = *(_QWORD *)(v384 + 56);
LABEL_708:
      if (++v387 >= (unint64_t)((v385 - v386) >> 3))
      {
        v384 = *(_QWORD *)(v184 + 152);
LABEL_767:
        v441 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>(v384);
        v442 = (unint64_t *)v441[7];
        v776 = (unint64_t *)v441[8];
        if (v442 != v776)
        {
          v443 = (uint64_t *)v441[10];
          v444 = (_QWORD *)(v768 + 168);
          while (1)
          {
            v445 = *v442;
            memset(v828, 0, 32);
            *(_DWORD *)&v828[32] = 1065353216;
            v446 = (_QWORD *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*(_QWORD *)(v768 + 152));
            v447 = v446[4];
            v784 = v445 >> 39;
            if (v445 >> 39 >= (v446[5] - v447) >> 3)
              goto LABEL_777;
            v448 = *(_QWORD *)(v447 + 8 * (v445 >> 39));
            if (!v448)
              goto LABEL_777;
            v449 = *(unsigned __int16 *)(v448 + 2 * (HIDWORD(v445) & 0x7F));
            v451 = v446[7];
            v450 = v446[8];
            if (v449 >= (v450 - v451) >> 3)
              goto LABEL_777;
            v452 = v451 + 8 * v449;
            if (v452 != v450 && *(_DWORD *)(v452 + 4) == HIDWORD(v445))
            {
              v454 = (_BYTE *)v446[11];
              v455 = (_BYTE *)(v446[10] + 40 * v449);
            }
            else
            {
LABEL_777:
              v454 = (_BYTE *)v446[11];
              v455 = v454;
            }
            v456 = v455 == v454 ? 0 : v455;
            v457 = *(_QWORD **)(v768 + 160);
            if (v457 != v444)
              break;
LABEL_782:
            if (v456)
            {
              if (*(_QWORD *)&v828[24] == *((_QWORD *)v456 + 3))
              {
                v458 = &v828[16];
                do
                {
                  v458 = (_QWORD *)*v458;
                  if (!v458)
                    goto LABEL_847;
                  v459 = v458[2];
                  v460 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v456, v459);
                }
                while (v460 && v459 == v460[2]);
              }
              if (v456 == v828)
              {
                v455 = v828;
              }
              else
              {
                *((_DWORD *)v456 + 8) = *(_DWORD *)&v828[32];
                std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<gdc::Registry *,void *> *>>(v456, *(_QWORD **)&v828[16]);
              }
            }
            else
            {
              gdc::Registry::_add<std::unordered_set<gdc::Registry*>,std::unordered_set<gdc::Registry*>&>(*(_QWORD *)(v768 + 152), v445, (uint64_t)v828);
              v480 = (_QWORD *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*(_QWORD *)(v768 + 152));
              v481 = v480[4];
              if (v784 < (v480[5] - v481) >> 3
                && (v482 = *(_QWORD *)(v481 + 8 * v784)) != 0
                && (v483 = *(unsigned __int16 *)(v482 + 2 * (HIDWORD(v445) & 0x7F)),
                    v485 = v480[7],
                    v484 = v480[8],
                    v483 < (v484 - v485) >> 3)
                && ((v486 = v485 + 8 * v483, v486 != v484)
                  ? (v487 = *(_DWORD *)(v486 + 4) == HIDWORD(v445))
                  : (v487 = 0),
                    v487))
              {
                v488 = v480[11];
                v489 = v480[10] + 40 * v483;
              }
              else
              {
                v488 = v480[11];
                v489 = v488;
              }
              if (v489 == v488)
                v455 = 0;
              else
                v455 = (_BYTE *)v489;
            }
            md::OverlaysLogic::updateFoundationAssociation(v768, v445, (uint64_t)v455);
LABEL_847:
            v490 = *(_QWORD **)&v828[16];
            if (*(_QWORD *)&v828[16])
            {
              do
              {
                v491 = (_QWORD *)*v490;
                operator delete(v490);
                v490 = v491;
              }
              while (v491);
            }
            v492 = *(void **)v828;
            *(_QWORD *)v828 = 0;
            if (v492)
              operator delete(v492);
            ++v443;
            if (++v442 == v776)
              goto LABEL_853;
          }
LABEL_791:
          v461 = (_QWORD *)v457[5];
          v462 = (int8x8_t)v461[1];
          if (!*(_QWORD *)&v462)
            goto LABEL_819;
          v463 = (uint8x8_t)vcnt_s8(v462);
          v463.i16[0] = vaddlv_u8(v463);
          if (v463.u32[0] > 1uLL)
          {
            v464 = 0x64A448A5CD5D38DBLL;
            if (*(_QWORD *)&v462 <= 0x64A448A5CD5D38DBuLL)
              v464 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v462;
          }
          else
          {
            v464 = (*(_QWORD *)&v462 - 1) & 0x64A448A5CD5D38DBLL;
          }
          v465 = *(_QWORD **)(*v461 + 8 * v464);
          if (!v465 || (v466 = (_QWORD *)*v465) == 0)
          {
LABEL_819:
            if (GEOGetVectorKitOverlaysLogicLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitOverlaysLogicLog(void)::onceToken, &__block_literal_global_18_13304);
            v477 = GEOGetVectorKitOverlaysLogicLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitOverlaysLogicLog(void)::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "transformData";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/OverlaysLogic.mm";
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v810) = 450;
              _os_log_impl(&dword_19F029000, v477, OS_LOG_TYPE_ERROR, "Invalid SharedTransformData.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
            goto LABEL_823;
          }
          if (v463.u32[0] < 2uLL)
          {
            v467 = *(_QWORD *)&v462 - 1;
            while (1)
            {
              v469 = v466[1];
              if (v469 == 0x64A448A5CD5D38DBLL)
              {
                if (v466[2] == 0x64A448A5CD5D38DBLL)
                  goto LABEL_812;
              }
              else if ((v469 & v467) != v464)
              {
                goto LABEL_819;
              }
              v466 = (_QWORD *)*v466;
              if (!v466)
                goto LABEL_819;
            }
          }
          while (1)
          {
            v468 = v466[1];
            if (v468 == 0x64A448A5CD5D38DBLL)
            {
              if (v466[2] == 0x64A448A5CD5D38DBLL)
              {
LABEL_812:
                v470 = v466[5];
                if (*(_QWORD *)(v470 + 8) != 0x64A448A5CD5D38DBLL)
                  goto LABEL_819;
                v471 = *(unsigned __int8 **)(v470 + 32);
                if (!v471)
                  goto LABEL_819;
                v472 = *v443;
                if (*v471 == *(unsigned __int8 *)(*v443 + 32))
                {
                  v473 = v471[1];
                  v474 = *(unsigned __int8 *)(v472 + 33);
                  v475 = v474 >= v473;
                  v476 = v474 - v473;
                  if (v476)
                  {
                    if (v476 == 0
                      || !v475
                      || *((_DWORD *)v471 + 1) != *(int *)(v472 + 36) >> v476
                      || *((_DWORD *)v471 + 2) != *(int *)(v472 + 40) >> v476)
                    {
                      goto LABEL_823;
                    }
                  }
                  else if (*((_DWORD *)v471 + 1) != *(_DWORD *)(v472 + 36)
                         || *((_DWORD *)v471 + 2) != *(_DWORD *)(v472 + 40))
                  {
                    goto LABEL_823;
                  }
                  std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__emplace_unique_key_args<gdc::Registry *,gdc::Registry * const&>((uint64_t)v828, (unint64_t)v461, v457[5]);
                }
LABEL_823:
                v478 = (_QWORD *)v457[1];
                if (v478)
                {
                  do
                  {
                    v479 = v478;
                    v478 = (_QWORD *)*v478;
                  }
                  while (v478);
                }
                else
                {
                  do
                  {
                    v479 = (_QWORD *)v457[2];
                    v401 = *v479 == (_QWORD)v457;
                    v457 = v479;
                  }
                  while (!v401);
                }
                v457 = v479;
                if (v479 == v444)
                  goto LABEL_782;
                goto LABEL_791;
              }
            }
            else
            {
              if (v468 >= *(_QWORD *)&v462)
                v468 %= *(_QWORD *)&v462;
              if (v468 != v464)
                goto LABEL_819;
            }
            v466 = (_QWORD *)*v466;
            if (!v466)
              goto LABEL_819;
          }
        }
LABEL_853:
        v493 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>(*(_QWORD *)(v768 + 152));
        v494 = (unint64_t *)v493[7];
        v777 = (unint64_t *)v493[8];
        if (v494 != v777)
        {
          v495 = (unsigned __int8 **)v493[10];
          v496 = (_QWORD *)(v768 + 168);
          while (1)
          {
            v497 = *v494;
            memset(v828, 0, 32);
            *(_DWORD *)&v828[32] = 1065353216;
            v498 = (_QWORD *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*(_QWORD *)(v768 + 152));
            v499 = v498[4];
            v785 = v497 >> 39;
            if (v497 >> 39 >= (v498[5] - v499) >> 3)
              goto LABEL_863;
            v500 = *(_QWORD *)(v499 + 8 * (v497 >> 39));
            if (!v500)
              goto LABEL_863;
            v501 = *(unsigned __int16 *)(v500 + 2 * (HIDWORD(v497) & 0x7F));
            v503 = v498[7];
            v502 = v498[8];
            if (v501 >= (v502 - v503) >> 3)
              goto LABEL_863;
            v504 = v503 + 8 * v501;
            if (v504 != v502 && *(_DWORD *)(v504 + 4) == HIDWORD(v497))
            {
              v506 = (_BYTE *)v498[11];
              v507 = (_BYTE *)(v498[10] + 40 * v501);
            }
            else
            {
LABEL_863:
              v506 = (_BYTE *)v498[11];
              v507 = v506;
            }
            v508 = v507 == v506 ? 0 : v507;
            v509 = *(_QWORD **)(v768 + 160);
            if (v509 != v496)
              break;
LABEL_868:
            if (v508)
            {
              if (*(_QWORD *)&v828[24] == *((_QWORD *)v508 + 3))
              {
                v510 = &v828[16];
                do
                {
                  v510 = (_QWORD *)*v510;
                  if (!v510)
                    goto LABEL_933;
                  v511 = v510[2];
                  v512 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v508, v511);
                }
                while (v512 && v511 == v512[2]);
              }
              if (v508 == v828)
              {
                v507 = v828;
              }
              else
              {
                *((_DWORD *)v508 + 8) = *(_DWORD *)&v828[32];
                std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<gdc::Registry *,void *> *>>(v508, *(_QWORD **)&v828[16]);
              }
            }
            else
            {
              gdc::Registry::_add<std::unordered_set<gdc::Registry*>,std::unordered_set<gdc::Registry*>&>(*(_QWORD *)(v768 + 152), v497, (uint64_t)v828);
              v532 = (_QWORD *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*(_QWORD *)(v768 + 152));
              v533 = v532[4];
              if (v785 < (v532[5] - v533) >> 3
                && (v534 = *(_QWORD *)(v533 + 8 * v785)) != 0
                && (v535 = *(unsigned __int16 *)(v534 + 2 * (HIDWORD(v497) & 0x7F)),
                    v537 = v532[7],
                    v536 = v532[8],
                    v535 < (v536 - v537) >> 3)
                && ((v538 = v537 + 8 * v535, v538 != v536)
                  ? (v539 = *(_DWORD *)(v538 + 4) == HIDWORD(v497))
                  : (v539 = 0),
                    v539))
              {
                v540 = v532[11];
                v541 = v532[10] + 40 * v535;
              }
              else
              {
                v540 = v532[11];
                v541 = v540;
              }
              if (v541 == v540)
                v507 = 0;
              else
                v507 = (_BYTE *)v541;
            }
            md::OverlaysLogic::updateFoundationAssociation(v768, v497, (uint64_t)v507);
LABEL_933:
            v542 = *(_QWORD **)&v828[16];
            if (*(_QWORD *)&v828[16])
            {
              do
              {
                v543 = (_QWORD *)*v542;
                operator delete(v542);
                v542 = v543;
              }
              while (v543);
            }
            v544 = *(void **)v828;
            *(_QWORD *)v828 = 0;
            if (v544)
              operator delete(v544);
            ++v495;
            if (++v494 == v777)
              goto LABEL_939;
          }
LABEL_877:
          v513 = (_QWORD *)v509[5];
          v514 = (int8x8_t)v513[1];
          if (!*(_QWORD *)&v514)
            goto LABEL_905;
          v515 = (uint8x8_t)vcnt_s8(v514);
          v515.i16[0] = vaddlv_u8(v515);
          if (v515.u32[0] > 1uLL)
          {
            v516 = 0x64A448A5CD5D38DBLL;
            if (*(_QWORD *)&v514 <= 0x64A448A5CD5D38DBuLL)
              v516 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v514;
          }
          else
          {
            v516 = (*(_QWORD *)&v514 - 1) & 0x64A448A5CD5D38DBLL;
          }
          v517 = *(_QWORD **)(*v513 + 8 * v516);
          if (!v517 || (v518 = (_QWORD *)*v517) == 0)
          {
LABEL_905:
            if (GEOGetVectorKitOverlaysLogicLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitOverlaysLogicLog(void)::onceToken, &__block_literal_global_18_13304);
            v529 = GEOGetVectorKitOverlaysLogicLog(void)::log;
            if (os_log_type_enabled((os_log_t)GEOGetVectorKitOverlaysLogicLog(void)::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "transformData";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/OverlaysLogic.mm";
              *(_WORD *)&buf[22] = 1024;
              LODWORD(v810) = 450;
              _os_log_impl(&dword_19F029000, v529, OS_LOG_TYPE_ERROR, "Invalid SharedTransformData.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
            goto LABEL_909;
          }
          if (v515.u32[0] < 2uLL)
          {
            v519 = *(_QWORD *)&v514 - 1;
            while (1)
            {
              v521 = v518[1];
              if (v521 == 0x64A448A5CD5D38DBLL)
              {
                if (v518[2] == 0x64A448A5CD5D38DBLL)
                  goto LABEL_898;
              }
              else if ((v521 & v519) != v516)
              {
                goto LABEL_905;
              }
              v518 = (_QWORD *)*v518;
              if (!v518)
                goto LABEL_905;
            }
          }
          while (1)
          {
            v520 = v518[1];
            if (v520 == 0x64A448A5CD5D38DBLL)
            {
              if (v518[2] == 0x64A448A5CD5D38DBLL)
              {
LABEL_898:
                v522 = v518[5];
                if (*(_QWORD *)(v522 + 8) != 0x64A448A5CD5D38DBLL)
                  goto LABEL_905;
                v523 = *(unsigned __int8 **)(v522 + 32);
                if (!v523)
                  goto LABEL_905;
                v524 = (uint64_t)*v495;
                if (*v523 == **v495)
                {
                  v525 = v523[1];
                  v526 = *(unsigned __int8 *)(v524 + 1);
                  v527 = v526 >= v525;
                  v528 = v526 - v525;
                  if (v528)
                  {
                    if (v528 == 0
                      || !v527
                      || *((_DWORD *)v523 + 1) != *(int *)(v524 + 4) >> v528
                      || *((_DWORD *)v523 + 2) != *(int *)(v524 + 8) >> v528)
                    {
                      goto LABEL_909;
                    }
                  }
                  else if (*((_DWORD *)v523 + 1) != *(_DWORD *)(v524 + 4)
                         || *((_DWORD *)v523 + 2) != *(_DWORD *)(v524 + 8))
                  {
                    goto LABEL_909;
                  }
                  std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__emplace_unique_key_args<gdc::Registry *,gdc::Registry * const&>((uint64_t)v828, (unint64_t)v513, v509[5]);
                }
LABEL_909:
                v530 = (_QWORD *)v509[1];
                if (v530)
                {
                  do
                  {
                    v531 = v530;
                    v530 = (_QWORD *)*v530;
                  }
                  while (v530);
                }
                else
                {
                  do
                  {
                    v531 = (_QWORD *)v509[2];
                    v401 = *v531 == (_QWORD)v509;
                    v509 = v531;
                  }
                  while (!v401);
                }
                v509 = v531;
                if (v531 == v496)
                  goto LABEL_868;
                goto LABEL_877;
              }
            }
            else
            {
              if (v520 >= *(_QWORD *)&v514)
                v520 %= *(_QWORD *)&v514;
              if (v520 != v516)
                goto LABEL_905;
            }
            v518 = (_QWORD *)*v518;
            if (!v518)
              goto LABEL_905;
          }
        }
LABEL_939:
        v545 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>(*(_QWORD *)(v768 + 152));
        v546 = (unint64_t *)v545[7];
        v761 = (unint64_t *)v545[8];
        v547 = v768;
        if (v546 == v761)
          return;
        v548 = v545[10];
        v759 = (_QWORD *)(v768 + 168);
        while (2)
        {
          v549 = *v546;
          memset(v828, 0, 32);
          *(_DWORD *)&v828[32] = 1065353216;
          v550 = (_QWORD *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*(_QWORD *)(v547 + 152));
          v765 = HIDWORD(v549);
          v551 = v549 >> 39;
          v552 = v550[4];
          if (v549 >> 39 < (v550[5] - v552) >> 3
            && (v553 = *(_QWORD *)(v552 + 8 * v551)) != 0
            && (v554 = *(unsigned __int16 *)(v553 + 2 * (HIDWORD(v549) & 0x7F)),
                v556 = v550[7],
                v555 = v550[8],
                v554 < (v555 - v556) >> 3)
            && ((v557 = v556 + 8 * v554, v557 != v555) ? (v558 = *(_DWORD *)(v557 + 4) == HIDWORD(v549)) : (v558 = 0),
                v558))
          {
            v559 = v550[11];
            v560 = v550[10] + 40 * v554;
          }
          else
          {
            v559 = v550[11];
            v560 = v559;
          }
          v763 = (_BYTE *)v560;
          if (v560 == v559)
            v561 = 0;
          else
            v561 = v560;
          v562 = (_QWORD *)gdc::Registry::storage<std::unordered_map<gdc::Registry*,std::vector<gdc::Entity>>>(*(_QWORD *)(v547 + 152));
          v563 = v562[4];
          v769 = v546;
          if (v551 < (v562[5] - v563) >> 3
            && (v564 = *(_QWORD *)(v563 + 8 * v551)) != 0
            && (v565 = *(unsigned __int16 *)(v564 + 2 * (HIDWORD(v549) & 0x7F)),
                v567 = v562[7],
                v566 = v562[8],
                v565 < (v566 - v567) >> 3)
            && ((v568 = v567 + 8 * v565, v568 != v566) ? (v569 = *(_DWORD *)(v568 + 4) == HIDWORD(v549)) : (v569 = 0),
                v569))
          {
            v570 = v562[11];
            v571 = v562[10] + 40 * v565;
          }
          else
          {
            v570 = v562[11];
            v571 = v570;
          }
          if (v571 == v570)
            v572 = 0;
          else
            v572 = v571;
          v573 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::TileIsInView>(*(_QWORD *)(v547 + 152));
          v574 = v573[4];
          v772 = v549 >> 39;
          if (v551 < (v573[5] - v574) >> 3
            && (v575 = *(_QWORD *)(v574 + 8 * v551)) != 0
            && (v576 = *(unsigned __int16 *)(v575 + 2 * (HIDWORD(v549) & 0x7F)),
                v578 = v573[7],
                v577 = v573[8],
                v576 < (v577 - v578) >> 3)
            && ((v579 = v578 + 8 * v576, v579 != v577) ? (v580 = *(_DWORD *)(v579 + 4) == HIDWORD(v549)) : (v580 = 0),
                v580))
          {
            v581 = v573[11];
            v582 = v573[10] + v576;
          }
          else
          {
            v581 = v573[11];
            v582 = v581;
          }
          CanDisable = (_QWORD *)gdc::Registry::storage<md::overlayComponents::CanDisableDraping>(*(_QWORD *)(v547 + 152));
          v767 = (int8x8_t *)v561;
          v584 = CanDisable[4];
          v770 = v548;
          v771 = v549;
          if (v772 < (CanDisable[5] - v584) >> 3
            && (v585 = *(_QWORD *)(v584 + 8 * v772)) != 0
            && (v586 = *(unsigned __int16 *)(v585 + 2 * (HIDWORD(v549) & 0x7F)),
                v588 = CanDisable[7],
                v587 = CanDisable[8],
                v586 < (v587 - v588) >> 3)
            && ((v589 = v588 + 8 * v586, v589 != v587) ? (v590 = *(_DWORD *)(v589 + 4) == HIDWORD(v549)) : (v590 = 0),
                v590))
          {
            v591 = CanDisable[11];
            v592 = CanDisable[10] + v586;
          }
          else
          {
            v591 = CanDisable[11];
            v592 = v591;
          }
          v594 = v592 == v591 || v592 == 0;
          v778 = v594;
          if (v582 != v581)
          {
            if (v582)
            {
              if (v572)
              {
                if (*(_QWORD *)(v572 + 24))
                {
                  v595 = gdc::Registry::getOrAdd<gdc::components::RegistryBridgeMap<gdc::Entity>>(*(_QWORD *)(v547 + 152), v549);
                  v786 = *(_QWORD **)(v572 + 16);
                  if (v786)
                  {
                    v596 = (int8x8_t *)v595;
                    v775 = v595;
                    do
                    {
                      v597 = v596[2];
                      if (!*(_QWORD *)&v597)
                        goto LABEL_994;
                      v598 = v786[2];
                      v599 = HIDWORD(v598);
                      v791 = v598;
                      v600 = 0x9DDFEA08EB382D69 * (((8 * v598) + 8) ^ HIDWORD(v598));
                      v601 = 0x9DDFEA08EB382D69
                           * ((0x9DDFEA08EB382D69 * (v599 ^ (v600 >> 47) ^ v600)) ^ ((0x9DDFEA08EB382D69
                                                                                      * (v599 ^ (v600 >> 47) ^ v600)) >> 47));
                      v602 = (uint8x8_t)vcnt_s8(v597);
                      v602.i16[0] = vaddlv_u8(v602);
                      if (v602.u32[0] > 1uLL)
                      {
                        v603 = v601;
                        if (v601 >= *(_QWORD *)&v597)
                          v603 = v601 % *(_QWORD *)&v597;
                      }
                      else
                      {
                        v603 = v601 & (*(_QWORD *)&v597 - 1);
                      }
                      v604 = *(_QWORD **)(*(_QWORD *)&v596[1] + 8 * v603);
                      if (!v604)
                        goto LABEL_994;
                      v605 = (_QWORD *)*v604;
                      if (!*v604)
                        goto LABEL_994;
                      if (v602.u32[0] < 2uLL)
                      {
                        v606 = *(_QWORD *)&v597 - 1;
                        while (1)
                        {
                          v608 = v605[1];
                          if (v601 == v608)
                          {
                            if (v605[2] == v791)
                              goto LABEL_1016;
                          }
                          else if ((v608 & v606) != v603)
                          {
                            goto LABEL_994;
                          }
                          v605 = (_QWORD *)*v605;
                          if (!v605)
                            goto LABEL_994;
                        }
                      }
                      while (1)
                      {
                        v607 = v605[1];
                        if (v601 == v607)
                          break;
                        if (v607 >= *(_QWORD *)&v597)
                          v607 %= *(_QWORD *)&v597;
                        if (v607 != v603)
                          goto LABEL_994;
LABEL_1005:
                        v605 = (_QWORD *)*v605;
                        if (!v605)
                          goto LABEL_994;
                      }
                      if (v605[2] != v791)
                        goto LABEL_1005;
LABEL_1016:
                      v609 = v605[6];
                      if (!v609)
                      {
                        v611 = 0;
                        v610 = 0;
                        v612 = (_QWORD *)v605[5];
                        if (v612)
                          goto LABEL_1019;
LABEL_1171:
                        v596 = (int8x8_t *)v775;
                        if (v610)
                          goto LABEL_993;
                        goto LABEL_994;
                      }
                      if (v609 >> 61)
                        abort();
                      v610 = (char *)operator new(8 * v609);
                      v611 = &v610[8 * v609];
                      v612 = (_QWORD *)v605[5];
                      if (!v612)
                        goto LABEL_1171;
LABEL_1019:
                      v613 = v610;
                      do
                      {
                        while (1)
                        {
                          v614 = v612[3];
                          if (v613 >= v611)
                            break;
                          *(_QWORD *)v613 = *(_QWORD *)(v614 + 16);
                          v613 += 8;
                          v612 = (_QWORD *)*v612;
                          if (!v612)
                            goto LABEL_1050;
                        }
                        v615 = v613;
                        v616 = v613 - v610;
                        v617 = (v613 - v610) >> 3;
                        v618 = v617 + 1;
                        if ((unint64_t)(v617 + 1) >> 61)
                          abort();
                        if ((v611 - v610) >> 2 > v618)
                          v618 = (v611 - v610) >> 2;
                        if ((unint64_t)(v611 - v610) >= 0x7FFFFFFFFFFFFFF8)
                          v619 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v619 = v618;
                        if (v619)
                        {
                          if (v619 >> 61)
                            goto LABEL_1285;
                          v620 = (char *)operator new(8 * v619);
                        }
                        else
                        {
                          v620 = 0;
                        }
                        v621 = &v620[8 * v617];
                        *(_QWORD *)v621 = *(_QWORD *)(v614 + 16);
                        v622 = v621 + 8;
                        if (v615 != v610)
                        {
                          v623 = v615 - 8 - v610;
                          if (v623 < 0x168)
                          {
                            v624 = v615;
                            goto LABEL_1035;
                          }
                          if (&v620[v616 - 8 - (v623 & 0xFFFFFFFFFFFFFFF8)] > &v620[v616 - 8])
                          {
                            v624 = v615;
                            do
                            {
LABEL_1035:
                              v625 = *((_QWORD *)v624 - 1);
                              v624 -= 8;
                              *((_QWORD *)v621 - 1) = v625;
                              v621 -= 8;
                            }
                            while (v624 != v610);
                            goto LABEL_1036;
                          }
                          if (&v615[-(v623 & 0xFFFFFFFFFFFFFFF8) - 8] > v615 - 8)
                          {
                            v624 = v615;
                            goto LABEL_1035;
                          }
                          if ((unint64_t)(v615 - &v620[v616]) < 0x20)
                          {
                            v624 = v615;
                            goto LABEL_1035;
                          }
                          v626 = (v623 >> 3) + 1;
                          v624 = &v615[-8 * (v626 & 0x3FFFFFFFFFFFFFFCLL)];
                          v627 = &v620[8 * v617 - 16];
                          v628 = v615 - 16;
                          v629 = v626 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v630 = *(_OWORD *)v628;
                            *((_OWORD *)v627 - 1) = *((_OWORD *)v628 - 1);
                            *(_OWORD *)v627 = v630;
                            v627 -= 32;
                            v628 -= 32;
                            v629 -= 4;
                          }
                          while (v629);
                          v621 -= 8 * (v626 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v626 != (v626 & 0x3FFFFFFFFFFFFFFCLL))
                            goto LABEL_1035;
                        }
LABEL_1036:
                        v611 = &v620[8 * v619];
                        if (v610)
                          operator delete(v610);
                        v610 = v621;
                        v613 = v622;
                        v612 = (_QWORD *)*v612;
                      }
                      while (v612);
LABEL_1050:
                      v596 = (int8x8_t *)v775;
                      if (v610 != v613)
                      {
                        v773 = v613;
                        v631 = (uint64_t *)(v791 + 120);
                        v632 = (uint64_t *)v610;
                        while (1)
                        {
                          v633 = v778 || *(_BYTE *)(v768 + 920) != 0;
                          v634 = *v632;
                          v804 = 0xF44C196EC679B51CLL;
                          v635 = *(int8x8_t *)(v791 + 128);
                          if (v635)
                          {
                            v636 = (uint8x8_t)vcnt_s8(v635);
                            v636.i16[0] = vaddlv_u8(v636);
                            if (v636.u32[0] > 1uLL)
                            {
                              v637 = 0xF44C196EC679B51CLL;
                              if (*(_QWORD *)&v635 <= 0xF44C196EC679B51CLL)
                                v637 = 0xF44C196EC679B51CLL % *(_QWORD *)&v635;
                            }
                            else
                            {
                              v637 = (*(_QWORD *)&v635 - 1) & 0xF44C196EC679B51CLL;
                            }
                            v638 = *(_QWORD **)(*v631 + 8 * v637);
                            if (v638)
                            {
                              v639 = (_QWORD *)*v638;
                              if (v639)
                              {
                                if (v636.u32[0] < 2uLL)
                                {
                                  v640 = *(_QWORD *)&v635 - 1;
                                  while (1)
                                  {
                                    v642 = v639[1];
                                    if (v642 == 0xF44C196EC679B51CLL)
                                    {
                                      if (v639[2] == 0xF44C196EC679B51CLL)
                                        goto LABEL_1101;
                                    }
                                    else if ((v642 & v640) != v637)
                                    {
                                      goto LABEL_1076;
                                    }
                                    v639 = (_QWORD *)*v639;
                                    if (!v639)
                                      goto LABEL_1076;
                                  }
                                }
                                do
                                {
                                  v641 = v639[1];
                                  if (v641 == 0xF44C196EC679B51CLL)
                                  {
                                    if (v639[2] == 0xF44C196EC679B51CLL)
                                    {
LABEL_1101:
                                      v643 = v639[3];
                                      goto LABEL_1079;
                                    }
                                  }
                                  else
                                  {
                                    if (v641 >= *(_QWORD *)&v635)
                                      v641 %= *(_QWORD *)&v635;
                                    if (v641 != v637)
                                      break;
                                  }
                                  v639 = (_QWORD *)*v639;
                                }
                                while (v639);
                              }
                            }
                          }
LABEL_1076:
                          v643 = operator new();
                          *(_QWORD *)(v643 + 16) = "md::components::Visibility]";
                          *(_QWORD *)(v643 + 24) = 26;
                          *(_OWORD *)(v643 + 32) = 0u;
                          *(_OWORD *)(v643 + 48) = 0u;
                          *(_OWORD *)(v643 + 64) = 0u;
                          *(_OWORD *)(v643 + 80) = 0u;
                          *(_OWORD *)(v643 + 96) = 0u;
                          *(_OWORD *)(v643 + 112) = 0u;
                          *(_OWORD *)(v643 + 128) = 0u;
                          *(_DWORD *)(v643 + 144) = 1065353216;
                          *(_OWORD *)(v643 + 152) = 0u;
                          *(_OWORD *)(v643 + 168) = 0u;
                          *(_QWORD *)(v643 + 184) = 0;
                          *(_DWORD *)(v643 + 192) = 1065353216;
                          *(_OWORD *)(v643 + 200) = 0u;
                          *(_OWORD *)(v643 + 216) = 0u;
                          *(_QWORD *)(v643 + 232) = 0;
                          *(_DWORD *)(v643 + 240) = 1065353216;
                          *(_QWORD *)v643 = &off_1E42B2E68;
                          *(_QWORD *)(v643 + 8) = 0xF44C196EC679B51CLL;
                          *(_QWORD *)(v643 + 248) = v791;
                          v644 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v631, 0xF44C196EC679B51CLL, &v804);
                          v645 = v644[3];
                          v644[3] = v643;
                          if (v645)
                            (*(void (**)(uint64_t))(*(_QWORD *)v645 + 8))(v645);
                          *(_QWORD *)buf = 0xF44C196EC679B51CLL;
                          *(_QWORD *)&buf[8] = "md::components::Visibility]";
                          *(_QWORD *)&buf[16] = 26;
                          gdc::Registry::_registerStorageDataSignals(v791, 0xF44C196EC679B51CLL, (uint64_t)buf, (uint64_t *)(v643 + 104));
LABEL_1079:
                          v797 = v634;
                          v646 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v643 + 32), (uint64_t)&v797);
                          if ((v647 & 1) != 0)
                            break;
                          v648 = (BOOL *)(*(_QWORD *)(v643 + 80) + (((uint64_t)v646 - *(_QWORD *)(v643 + 56)) >> 3));
                          *v648 = v633;
                          v649 = *(_QWORD *)(v643 + 248);
                          if (v648 != *(BOOL **)(v643 + 88))
                          {
                            v650 = *(_QWORD **)(v643 + 128);
                            if (v650)
                            {
                              while (1)
                              {
                                *(_QWORD *)buf = &v797;
                                *(_QWORD *)&buf[8] = 1;
                                v804 = v649;
                                v651 = v650[6];
                                if (!v651)
                                  goto LABEL_1287;
                                (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v651 + 48))(v651, &v804, buf);
                                v650 = (_QWORD *)*v650;
                                if (!v650)
                                  goto LABEL_1120;
                              }
                            }
                            goto LABEL_1120;
                          }
LABEL_1117:
                          v675 = *(_QWORD **)(v643 + 176);
                          if (v675)
                          {
                            while (1)
                            {
                              *(_QWORD *)buf = &v797;
                              *(_QWORD *)&buf[8] = 1;
                              v804 = v649;
                              v676 = v675[6];
                              if (!v676)
                                break;
                              (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v676 + 48))(v676, &v804, buf);
                              v675 = (_QWORD *)*v675;
                              if (!v675)
                                goto LABEL_1120;
                            }
LABEL_1287:
                            std::__throw_bad_function_call[abi:nn180100]();
                            __break(1u);
                          }
LABEL_1120:
                          v677 = *v632;
                          v804 = 0xA58E035ED185DBF8;
                          v678 = *(int8x8_t *)(v791 + 128);
                          if (v678)
                          {
                            v679 = (uint8x8_t)vcnt_s8(v678);
                            v679.i16[0] = vaddlv_u8(v679);
                            if (v679.u32[0] > 1uLL)
                            {
                              v680 = 0xA58E035ED185DBF8;
                              if (*(_QWORD *)&v678 <= 0xA58E035ED185DBF8)
                                v680 = 0xA58E035ED185DBF8 % *(_QWORD *)&v678;
                            }
                            else
                            {
                              v680 = (*(_QWORD *)&v678 - 1) & 0xA58E035ED185DBF8;
                            }
                            v681 = *(_QWORD **)(*v631 + 8 * v680);
                            if (v681)
                            {
                              v682 = (_QWORD *)*v681;
                              if (v682)
                              {
                                if (v679.u32[0] < 2uLL)
                                {
                                  v683 = *(_QWORD *)&v678 - 1;
                                  while (1)
                                  {
                                    v685 = v682[1];
                                    if (v685 == 0xA58E035ED185DBF8)
                                    {
                                      if (v682[2] == 0xA58E035ED185DBF8)
                                        goto LABEL_1169;
                                    }
                                    else if ((v685 & v683) != v680)
                                    {
                                      goto LABEL_1140;
                                    }
                                    v682 = (_QWORD *)*v682;
                                    if (!v682)
                                      goto LABEL_1140;
                                  }
                                }
                                do
                                {
                                  v684 = v682[1];
                                  if (v684 == 0xA58E035ED185DBF8)
                                  {
                                    if (v682[2] == 0xA58E035ED185DBF8)
                                    {
LABEL_1169:
                                      v686 = v682[3];
                                      goto LABEL_1143;
                                    }
                                  }
                                  else
                                  {
                                    if (v684 >= *(_QWORD *)&v678)
                                      v684 %= *(_QWORD *)&v678;
                                    if (v684 != v680)
                                      break;
                                  }
                                  v682 = (_QWORD *)*v682;
                                }
                                while (v682);
                              }
                            }
                          }
LABEL_1140:
                          v686 = operator new();
                          *(_QWORD *)(v686 + 16) = "md::components::VisibilityChanged]";
                          *(_QWORD *)(v686 + 24) = 33;
                          *(_OWORD *)(v686 + 32) = 0u;
                          *(_OWORD *)(v686 + 48) = 0u;
                          *(_OWORD *)(v686 + 64) = 0u;
                          *(_OWORD *)(v686 + 80) = 0u;
                          *(_OWORD *)(v686 + 96) = 0u;
                          *(_OWORD *)(v686 + 112) = 0u;
                          *(_OWORD *)(v686 + 128) = 0u;
                          *(_DWORD *)(v686 + 144) = 1065353216;
                          *(_OWORD *)(v686 + 152) = 0u;
                          *(_OWORD *)(v686 + 168) = 0u;
                          *(_QWORD *)(v686 + 184) = 0;
                          *(_DWORD *)(v686 + 192) = 1065353216;
                          *(_OWORD *)(v686 + 200) = 0u;
                          *(_OWORD *)(v686 + 216) = 0u;
                          *(_QWORD *)(v686 + 232) = 0;
                          *(_DWORD *)(v686 + 240) = 1065353216;
                          *(_QWORD *)(v686 + 8) = 0xA58E035ED185DBF8;
                          *(_QWORD *)v686 = &off_1E42B3138;
                          *(_QWORD *)(v686 + 248) = v791;
                          v687 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v631, 0xA58E035ED185DBF8, &v804);
                          v688 = v687[3];
                          v687[3] = v686;
                          if (v688)
                            (*(void (**)(uint64_t))(*(_QWORD *)v688 + 8))(v688);
                          *(_QWORD *)buf = 0xA58E035ED185DBF8;
                          *(_QWORD *)&buf[8] = "md::components::VisibilityChanged]";
                          *(_QWORD *)&buf[16] = 33;
                          gdc::Registry::_registerStorageDataSignals(v791, 0xA58E035ED185DBF8, (uint64_t)buf, (uint64_t *)(v686 + 104));
LABEL_1143:
                          v797 = v677;
                          v689 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v686 + 32), (uint64_t)&v797);
                          if ((v690 & 1) != 0)
                          {
                            v695 = *(_BYTE **)(v686 + 88);
                            v694 = *(_QWORD *)(v686 + 96);
                            if ((unint64_t)v695 >= v694)
                            {
                              v697 = *(char **)(v686 + 80);
                              v698 = v695 - v697;
                              v699 = v695 - v697 + 1;
                              if (v699 < 0)
                                abort();
                              v700 = v694 - (_QWORD)v697;
                              if (2 * v700 > v699)
                                v699 = 2 * v700;
                              if (v700 >= 0x3FFFFFFFFFFFFFFFLL)
                                v701 = 0x7FFFFFFFFFFFFFFFLL;
                              else
                                v701 = v699;
                              if (v701)
                                v702 = (char *)operator new(v701);
                              else
                                v702 = 0;
                              v703 = &v702[v701];
                              v696 = (uint64_t)&v702[v698 + 1];
                              v704 = (char *)(v697 - v695);
                              if (v697 == v695)
                                v704 = 0;
                              *(_QWORD *)(v686 + 80) = &v702[v698 + (_QWORD)v704];
                              *(_QWORD *)(v686 + 88) = v696;
                              *(_QWORD *)(v686 + 96) = v703;
                              if (v697)
                                operator delete(v697);
                            }
                            else
                            {
                              v696 = (uint64_t)(v695 + 1);
                            }
                            *(_QWORD *)(v686 + 88) = v696;
                            v691 = *(_QWORD *)(v686 + 248);
                          }
                          else
                          {
                            v691 = *(_QWORD *)(v686 + 248);
                            if (*(_QWORD *)(v686 + 80) + (((uint64_t)v689 - *(_QWORD *)(v686 + 56)) >> 3) != *(_QWORD *)(v686 + 88))
                            {
                              v692 = *(_QWORD **)(v686 + 128);
                              if (v692)
                              {
                                while (1)
                                {
                                  *(_QWORD *)buf = &v797;
                                  *(_QWORD *)&buf[8] = 1;
                                  v804 = v691;
                                  v693 = v692[6];
                                  if (!v693)
                                    goto LABEL_1287;
                                  (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v693 + 48))(v693, &v804, buf);
                                  v692 = (_QWORD *)*v692;
                                  if (!v692)
                                    goto LABEL_1052;
                                }
                              }
                              goto LABEL_1052;
                            }
                          }
                          for (kk = *(_QWORD **)(v686 + 176); kk; kk = (_QWORD *)*kk)
                          {
                            *(_QWORD *)buf = &v797;
                            *(_QWORD *)&buf[8] = 1;
                            v804 = v691;
                            v706 = kk[6];
                            if (!v706)
                              goto LABEL_1287;
                            (*(void (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)v706 + 48))(v706, &v804, buf);
                          }
LABEL_1052:
                          ++v632;
                          v596 = (int8x8_t *)v775;
                          if (v632 == (uint64_t *)v773)
                            goto LABEL_992;
                        }
                        v653 = *(BOOL **)(v643 + 88);
                        v652 = *(_QWORD *)(v643 + 96);
                        if ((unint64_t)v653 < v652)
                        {
                          *v653 = v633;
                          v654 = (uint64_t)(v653 + 1);
LABEL_1116:
                          *(_QWORD *)(v643 + 88) = v654;
                          v649 = *(_QWORD *)(v643 + 248);
                          goto LABEL_1117;
                        }
                        v655 = *(BOOL **)(v643 + 80);
                        v656 = v653 - v655;
                        v657 = v653 - v655 + 1;
                        if (v657 < 0)
                          abort();
                        v658 = v652 - (_QWORD)v655;
                        if (2 * v658 > v657)
                          v657 = 2 * v658;
                        if (v658 >= 0x3FFFFFFFFFFFFFFFLL)
                          v659 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v659 = v657;
                        if (v659)
                        {
                          v660 = v659;
                          v661 = (char *)operator new(v659);
                          v659 = v660;
                        }
                        else
                        {
                          v661 = 0;
                        }
                        v662 = &v661[v656];
                        v661[v656] = v633;
                        v654 = (uint64_t)&v661[v656 + 1];
                        if (v653 == v655)
                          goto LABEL_1114;
                        if (v656 >= 8 && (unint64_t)(v655 - (BOOL *)v661) >= 0x20)
                        {
                          if (v656 < 0x20)
                          {
                            v663 = 0;
LABEL_1106:
                            v668 = v663 - (v656 & 0xFFFFFFFFFFFFFFF8);
                            v669 = &v653[-v663];
                            v670 = &v661[&v653[-v663] - v655 - 8];
                            v671 = v669 - 8;
                            do
                            {
                              v672 = *(_QWORD *)v671;
                              v671 -= 8;
                              *(_QWORD *)v670 = v672;
                              v670 -= 8;
                              v668 += 8;
                            }
                            while (v668);
                            if (v656 != (v656 & 0xFFFFFFFFFFFFFFF8))
                            {
                              v662 -= v656 & 0xFFFFFFFFFFFFFFF8;
                              v653 -= v656 & 0xFFFFFFFFFFFFFFF8;
                              goto LABEL_1111;
                            }
LABEL_1113:
                            v662 = v661;
LABEL_1114:
                            *(_QWORD *)(v643 + 80) = v662;
                            *(_QWORD *)(v643 + 88) = v654;
                            *(_QWORD *)(v643 + 96) = &v661[v659];
                            if (v655)
                              operator delete(v655);
                            goto LABEL_1116;
                          }
                          v663 = v656 & 0xFFFFFFFFFFFFFFE0;
                          v664 = &v661[v656 - 16];
                          v665 = v653 - 16;
                          v666 = v656 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v667 = *(_OWORD *)v665;
                            *((_OWORD *)v664 - 1) = *((_OWORD *)v665 - 1);
                            *(_OWORD *)v664 = v667;
                            v664 -= 32;
                            v665 -= 32;
                            v666 -= 32;
                          }
                          while (v666);
                          if (v656 == v663)
                            goto LABEL_1113;
                          if ((v656 & 0x18) != 0)
                            goto LABEL_1106;
                          v662 -= v663;
                          v653 -= v663;
                        }
LABEL_1111:
                        v673 = v662 - 1;
                        do
                        {
                          v674 = *--v653;
                          *v673-- = v674;
                        }
                        while (v653 != v655);
                        goto LABEL_1113;
                      }
LABEL_992:
                      v547 = v768;
                      if (v610)
LABEL_993:
                        operator delete(v610);
LABEL_994:
                      v786 = (_QWORD *)*v786;
                    }
                    while (v786);
                  }
                }
              }
            }
          }
          v707 = *(_QWORD **)(v547 + 160);
          if (v707 != v759)
          {
LABEL_1202:
            v723 = (_QWORD *)v707[5];
            v724 = (int8x8_t)v723[1];
            if (!*(_QWORD *)&v724)
              goto LABEL_1230;
            v725 = (uint8x8_t)vcnt_s8(v724);
            v725.i16[0] = vaddlv_u8(v725);
            if (v725.u32[0] > 1uLL)
            {
              v726 = 0x64A448A5CD5D38DBLL;
              if (*(_QWORD *)&v724 <= 0x64A448A5CD5D38DBuLL)
                v726 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v724;
            }
            else
            {
              v726 = (*(_QWORD *)&v724 - 1) & 0x64A448A5CD5D38DBLL;
            }
            v727 = *(_QWORD **)(*v723 + 8 * v726);
            if (!v727 || (v728 = (_QWORD *)*v727) == 0)
            {
LABEL_1230:
              if (GEOGetVectorKitOverlaysLogicLog(void)::onceToken != -1)
                dispatch_once(&GEOGetVectorKitOverlaysLogicLog(void)::onceToken, &__block_literal_global_18_13304);
              v740 = (id)GEOGetVectorKitOverlaysLogicLog(void)::log;
              if (os_log_type_enabled(v740, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "transformData";
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/Overlays/OverlaysLogic.mm";
                *(_WORD *)&buf[22] = 1024;
                LODWORD(v810) = 503;
                _os_log_impl(&dword_19F029000, v740, OS_LOG_TYPE_ERROR, "Invalid SharedTransformData.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
              }

              goto LABEL_1235;
            }
            if (v725.u32[0] < 2uLL)
            {
              v729 = *(_QWORD *)&v724 - 1;
              while (1)
              {
                v731 = v728[1];
                if (v731 == 0x64A448A5CD5D38DBLL)
                {
                  if (v728[2] == 0x64A448A5CD5D38DBLL)
                    goto LABEL_1223;
                }
                else if ((v731 & v729) != v726)
                {
                  goto LABEL_1230;
                }
                v728 = (_QWORD *)*v728;
                if (!v728)
                  goto LABEL_1230;
              }
            }
            while (1)
            {
              v730 = v728[1];
              if (v730 == 0x64A448A5CD5D38DBLL)
              {
                if (v728[2] == 0x64A448A5CD5D38DBLL)
                {
LABEL_1223:
                  v732 = v728[5];
                  if (*(_QWORD *)(v732 + 8) != 0x64A448A5CD5D38DBLL)
                    goto LABEL_1230;
                  v733 = *(unsigned __int8 **)(v732 + 32);
                  if (!v733)
                    goto LABEL_1230;
                  v734 = *(_QWORD *)(v770 + 88);
                  if (*v733 != *(unsigned __int8 *)(v734 + 168))
                    goto LABEL_1235;
                  v735 = v733[1];
                  v736 = *(unsigned __int8 *)(v734 + 169);
                  v737 = v735 - v736;
                  if (v735 == v736)
                  {
                    v738 = *((_DWORD *)v733 + 1);
                    v739 = *(_DWORD *)(v734 + 172);
                    if (v738 == v739)
                    {
                      v739 = *((_DWORD *)v733 + 1);
                      if (*((_DWORD *)v733 + 2) == *(_DWORD *)(v734 + 176))
                        goto LABEL_1256;
                    }
LABEL_1244:
                    if (v736 >= v735)
                    {
                      v743 = v735 == v736 && v739 == v738;
                      if (v743 && *(_DWORD *)(v734 + 176) == *((_DWORD *)v733 + 2))
                        goto LABEL_1256;
                      goto LABEL_1235;
                    }
LABEL_1254:
                    if (v739 == v738 >> v737 && *(_DWORD *)(v734 + 176) == *((int *)v733 + 2) >> v737)
                      goto LABEL_1256;
                    goto LABEL_1235;
                  }
                  if (v735 >= v736)
                  {
                    if (v736 >= v735)
                      goto LABEL_1235;
                    v738 = *((_DWORD *)v733 + 1);
                    v739 = *(_DWORD *)(v734 + 172);
                    goto LABEL_1254;
                  }
                  v739 = *(_DWORD *)(v734 + 172);
                  v738 = *((_DWORD *)v733 + 1);
                  if (v738 != v739 >> (v736 - v735))
                    goto LABEL_1244;
                  v738 = v739 >> (v736 - v735);
                  if (*((_DWORD *)v733 + 2) != *(int *)(v734 + 176) >> (v736 - v735))
                    goto LABEL_1244;
LABEL_1256:
                  std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__emplace_unique_key_args<gdc::Registry *,gdc::Registry * const&>((uint64_t)v828, (unint64_t)v723, v707[5]);
LABEL_1235:
                  v741 = (_QWORD *)v707[1];
                  if (v741)
                  {
                    do
                    {
                      v742 = v741;
                      v741 = (_QWORD *)*v741;
                    }
                    while (v741);
                  }
                  else
                  {
                    do
                    {
                      v742 = (_QWORD *)v707[2];
                      v401 = *v742 == (_QWORD)v707;
                      v707 = v742;
                    }
                    while (!v401);
                  }
                  v707 = v742;
                  v547 = v768;
                  if (v742 == v759)
                    break;
                  goto LABEL_1202;
                }
              }
              else
              {
                if (v730 >= *(_QWORD *)&v724)
                  v730 %= *(_QWORD *)&v724;
                if (v730 != v726)
                  goto LABEL_1230;
              }
              v728 = (_QWORD *)*v728;
              if (!v728)
                goto LABEL_1230;
            }
          }
          if (v767)
          {
            v708 = v771;
            if (*(_QWORD *)&v828[24] != *(_QWORD *)&v767[3])
              goto LABEL_1257;
            v709 = *(_QWORD **)&v828[16];
            if (*(_QWORD *)&v828[16])
            {
              v710 = v767[1];
              if (v710)
              {
                v711 = (uint8x8_t)vcnt_s8(v710);
                v711.i16[0] = vaddlv_u8(v711);
                v712 = *(_QWORD *)&v710 - 1;
                v713 = *(_QWORD **)&v828[16];
                while (1)
                {
                  v714 = v713[2];
                  v715 = 0x9DDFEA08EB382D69 * (((8 * v714) + 8) ^ HIDWORD(v714));
                  v716 = 0x9DDFEA08EB382D69 * (HIDWORD(v714) ^ (v715 >> 47) ^ v715);
                  v717 = 0x9DDFEA08EB382D69 * (v716 ^ (v716 >> 47));
                  if (v711.u32[0] > 1uLL)
                  {
                    v718 = v717;
                    if (v717 >= *(_QWORD *)&v710)
                      v718 = v717 % *(_QWORD *)&v710;
                  }
                  else
                  {
                    v718 = v717 & v712;
                  }
                  v719 = *(_QWORD **)(*(_QWORD *)v767 + 8 * v718);
                  if (!v719)
                    break;
                  v720 = (_QWORD *)*v719;
                  if (!v720)
                    break;
                  if (v711.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v721 = v720[1];
                      if (v717 == v721)
                      {
                        if (v720[2] == v714)
                          goto LABEL_1199;
                      }
                      else if ((v721 & v712) != v718)
                      {
                        goto LABEL_1257;
                      }
                      v720 = (_QWORD *)*v720;
                      if (!v720)
                        goto LABEL_1257;
                    }
                  }
                  while (1)
                  {
                    v722 = v720[1];
                    if (v717 == v722)
                      break;
                    if (v722 >= *(_QWORD *)&v710)
                      v722 %= *(_QWORD *)&v710;
                    if (v722 != v718)
                      goto LABEL_1257;
LABEL_1193:
                    v720 = (_QWORD *)*v720;
                    if (!v720)
                      goto LABEL_1257;
                  }
                  if (v720[2] != v714)
                    goto LABEL_1193;
LABEL_1199:
                  v713 = (_QWORD *)*v713;
                  if (!v713)
                    goto LABEL_1272;
                }
              }
LABEL_1257:
              if (v767 == (int8x8_t *)v828)
              {
                v744 = v828;
              }
              else
              {
                v767[4].i32[0] = *(_DWORD *)&v828[32];
                std::__hash_table<gdc::Registry *,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,std::allocator<gdc::Registry *>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<gdc::Registry *,void *> *>>(v767, *(_QWORD **)&v828[16]);
                v744 = v763;
              }
LABEL_1271:
              md::OverlaysLogic::updateFoundationAssociation(v547, v708, (uint64_t)v744);
              v709 = *(_QWORD **)&v828[16];
LABEL_1272:
              if (v709)
              {
                do
                {
                  v755 = (_QWORD *)*v709;
                  operator delete(v709);
                  v709 = v755;
                }
                while (v755);
              }
            }
            v756 = *(void **)v828;
            *(_QWORD *)v828 = 0;
            if (v756)
              operator delete(v756);
            v548 = v770 + 104;
            v546 = v769 + 1;
            if (v769 + 1 == v761)
              return;
            continue;
          }
          break;
        }
        v708 = v771;
        gdc::Registry::_add<std::unordered_set<gdc::Registry*>,std::unordered_set<gdc::Registry*>&>(*(_QWORD *)(v547 + 152), v771, (uint64_t)v828);
        v745 = (_QWORD *)gdc::Registry::storage<std::unordered_set<gdc::Registry*>>(*(_QWORD *)(v547 + 152));
        v746 = v745[4];
        if (v772 < (v745[5] - v746) >> 3
          && (v747 = *(_QWORD *)(v746 + 8 * v772)) != 0
          && (v748 = *(unsigned __int16 *)(v747 + 2 * (HIDWORD(v771) & 0x7F)),
              v750 = v745[7],
              v749 = v745[8],
              v748 < (v749 - v750) >> 3)
          && ((v751 = v750 + 8 * v748, v751 != v749) ? (v752 = *(_DWORD *)(v751 + 4) == (_DWORD)v765) : (v752 = 0), v752))
        {
          v753 = v745[11];
          v754 = v745[10] + 40 * v748;
        }
        else
        {
          v753 = v745[11];
          v754 = v753;
        }
        if (v754 == v753)
          v744 = 0;
        else
          v744 = (_BYTE *)v754;
        goto LABEL_1271;
      }
    }
    v783 = HIDWORD(v391);
    v404 = v392;
    v405 = (uint64_t *)gdc::Registry::storage<std::vector<gdc::Registry*>>(v392);
    v790 = v391;
    v804 = v391;
    v406 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v405 + 4, (uint64_t)&v804);
    if ((v407 & 1) != 0)
    {
      v416 = (_QWORD *)v405[11];
      v415 = v405[12];
      if ((unint64_t)v416 >= v415)
      {
        v418 = (_QWORD *)v405[10];
        v419 = 0xAAAAAAAAAAAAAAABLL * (v416 - v418) + 1;
        if (v419 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v420 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v415 - (_QWORD)v418) >> 3);
        if (2 * v420 > v419)
          v419 = 2 * v420;
        if (v420 >= 0x555555555555555)
          v421 = 0xAAAAAAAAAAAAAAALL;
        else
          v421 = v419;
        if (v421)
        {
          if (v421 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1285;
          v422 = (char *)operator new(24 * v421);
        }
        else
        {
          v422 = 0;
        }
        v423 = &v422[8 * (v416 - v418)];
        v424 = &v422[24 * v421];
        *(_QWORD *)v423 = 0;
        *((_QWORD *)v423 + 1) = 0;
        *((_QWORD *)v423 + 2) = 0;
        v417 = v423 + 24;
        if (v416 == v418)
        {
          v405[10] = (uint64_t)v423;
          v405[11] = (uint64_t)v417;
          v405[12] = (uint64_t)v424;
        }
        else
        {
          do
          {
            v425 = v423;
            *((_QWORD *)v423 - 2) = 0;
            *((_QWORD *)v423 - 1) = 0;
            v426 = *(_OWORD *)(v416 - 3);
            v416 -= 3;
            *(_OWORD *)(v423 - 24) = v426;
            v423 -= 24;
            *((_QWORD *)v425 - 1) = v416[2];
            *v416 = 0;
            v416[1] = 0;
            v416[2] = 0;
          }
          while (v416 != v418);
          v416 = (_QWORD *)v405[10];
          v427 = (_QWORD *)v405[11];
          v405[10] = (uint64_t)v423;
          v405[11] = (uint64_t)v417;
          v405[12] = (uint64_t)v424;
          if (v427 != v416)
          {
            v428 = v427;
            do
            {
              v430 = (void *)*(v428 - 3);
              v428 -= 3;
              v429 = v430;
              if (v430)
              {
                *(v427 - 2) = v429;
                operator delete(v429);
              }
              v427 = v428;
            }
            while (v428 != v416);
          }
        }
        if (v416)
          operator delete(v416);
      }
      else
      {
        *v416 = 0;
        v416[1] = 0;
        v416[2] = 0;
        v417 = v416 + 3;
        v405[11] = (uint64_t)(v416 + 3);
      }
      v405[11] = (uint64_t)v417;
      v412 = v405[31];
    }
    else
    {
      v408 = v405[10];
      v409 = ((uint64_t)v406 - v405[7]) >> 3;
      v410 = v408 + 24 * v409;
      v411 = *(void **)v410;
      if (*(_QWORD *)v410)
      {
        *(_QWORD *)(v408 + 24 * v409 + 8) = v411;
        operator delete(v411);
        *(_QWORD *)v410 = 0;
        *(_QWORD *)(v410 + 8) = 0;
        *(_QWORD *)(v410 + 16) = 0;
      }
      *(_QWORD *)v410 = 0;
      *(_QWORD *)(v410 + 8) = 0;
      *(_QWORD *)(v410 + 16) = 0;
      v412 = v405[31];
      if (v410 != v405[11])
      {
        for (mm = (_QWORD *)v405[16]; mm; mm = (_QWORD *)*mm)
        {
          *(_QWORD *)v828 = &v804;
          *(_QWORD *)&v828[8] = 1;
          *(_QWORD *)buf = v412;
          v414 = mm[6];
          if (!v414)
            goto LABEL_1287;
          (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v414 + 48))(v414, buf, v828);
        }
LABEL_757:
        v433 = (_QWORD *)gdc::Registry::storage<std::vector<gdc::Registry*>>(v404);
        v434 = v433[4];
        if (v394 < (v433[5] - v434) >> 3
          && (v435 = *(_QWORD *)(v434 + 8 * v394)) != 0
          && (v436 = *(unsigned __int16 *)(v435 + 2 * (HIDWORD(v790) & 0x7F)),
              v438 = v433[7],
              v437 = v433[8],
              v436 < (v437 - v438) >> 3)
          && ((v439 = v438 + 8 * v436, v439 != v437) ? (v440 = *(_DWORD *)(v439 + 4) == (_DWORD)v783) : (v440 = 0), v440))
        {
          v388 = (_QWORD *)v433[11];
          v389 = (_QWORD *)(v433[10] + 24 * v436);
        }
        else
        {
          v388 = (_QWORD *)v433[11];
          v389 = v388;
        }
        v384 = v780;
        if (v389 == v388)
          v389 = 0;
        v184 = v768;
        goto LABEL_707;
      }
    }
    for (nn = (_QWORD *)v405[22]; nn; nn = (_QWORD *)*nn)
    {
      *(_QWORD *)v828 = &v804;
      *(_QWORD *)&v828[8] = 1;
      *(_QWORD *)buf = v412;
      v432 = nn[6];
      if (!v432)
        goto LABEL_1287;
      (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v432 + 48))(v432, buf, v828);
    }
    goto LABEL_757;
  }
}

