void md::SingleGEOResourceLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned __int8 *v8;
  int32x2_t *v9;
  __int32 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14[4];
  int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _BYTE v19[4];
  int32x2_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a2 != a3)
  {
    v21 = v3;
    v22 = v4;
    v6 = a2;
    do
    {
      v8 = (unsigned __int8 *)*v6;
      v9 = *(int32x2_t **)(*v6 + 16);
      v10 = v9[1].i32[0];
      v19[0] = v9[1].i32[1];
      v19[1] = v10;
      v20 = vrev64_s32(*v9);
      v11 = *v8;
      v12 = *((_QWORD *)v8 + 14);
      v14[0] = 0;
      if (v8[96])
      {
        v15 = *((_DWORD *)v8 + 25);
        v14[0] = 1;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *, uint64_t, char *))(*(_QWORD *)a1 + 144))(&v16, a1, v11, v19, v12, v14);
      if (v14[0])
        v14[0] = 0;
      v13 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request(v13, (uint64_t)&v16, 0);
      if (v17 != v18)
        free(v17);
    }
    while (v6 != a3);
  }
}

void std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  int v11;
  int v12;
  uint64_t *v13;
  const void *v14;
  size_t v15;
  unint64_t v16;
  uint64_t *v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  const void *v22;
  size_t v23;
  int v24;
  _QWORD *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  const void *v39;
  uint64_t *v40;
  uint64_t *v41;

  v6 = *((_QWORD *)a2 + 13);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *((_QWORD *)a2 + 13);
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *a2;
        v12 = *((unsigned __int16 *)a2 + 4);
        v13 = (uint64_t *)*((_QWORD *)a2 + 10);
        v14 = (const void *)*((_QWORD *)a2 + 2);
        v15 = *((_QWORD *)a2 + 3) - (_QWORD)v14;
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v10[1];
            if (v20 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                v21 = v10[4];
                if ((char *)v10[5] - (char *)v21 == v15)
                {
                  v39 = v14;
                  v41 = v13;
                  v22 = v14;
                  v23 = v15;
                  v24 = memcmp(v21, v22, v15);
                  v15 = v23;
                  v14 = v39;
                  v13 = v41;
                  if (!v24)
                    return;
                }
              }
            }
            else if (((unint64_t)v20 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = (unint64_t)v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              v17 = v10[4];
              if ((char *)v10[5] - (char *)v17 == v15)
              {
                v18 = v15;
                v40 = v13;
                v19 = memcmp(v17, v14, v15);
                v15 = v18;
                v13 = v40;
                if (!v19)
                  return;
              }
            }
          }
          else
          {
            if (v16 >= v7)
              v16 %= v7;
            if (v16 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  v25 = operator new(0x90uLL);
  *v25 = 0;
  v25[1] = v6;
  *((_BYTE *)v25 + 16) = *(_BYTE *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v25 + 3), a3 + 8);
  *((_BYTE *)v25 + 112) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *((_DWORD *)v25 + 29) = *(_DWORD *)(a3 + 100);
    *((_BYTE *)v25 + 112) = 1;
  }
  v25[15] = *(_QWORD *)(a3 + 104);
  *((_OWORD *)v25 + 8) = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v7 || (float)(v27 * (float)v7) < v26)
  {
    v28 = 1;
    if (v7 >= 3)
      v28 = (v7 & (v7 - 1)) != 0;
    v29 = v28 | (2 * v7);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_55;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_55:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v36 = *(_QWORD *)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *v25 = *v37;
LABEL_69:
    *v37 = v25;
    goto LABEL_70;
  }
  *v25 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v25;
  *(_QWORD *)(v36 + 8 * v3) = a1 + 16;
  if (*v25)
  {
    v38 = *(_QWORD *)(*v25 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
}

void md::TileAdjustmentHelpers::getFallbackDataForTile(int64x2_t *a1, __int16 a2, char *a3, const gdc::LayerDataRequestKey *a4, uint64_t a5, uint64_t a6)
{
  char *v9;
  int v11;
  char v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int32x2_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  int64x2_t v38;
  int64x2_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t v52;
  _WORD *v53;
  char *v54;
  _BYTE *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *i;
  __int16 v62;
  char *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  int v70;
  char *v71;
  int v72;
  int v73;
  int v74;
  char v75;
  unint64_t v76;
  char *v77;
  int v78;
  char v79;
  int v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  char v87;
  _WORD v88[2];
  unint64_t v89;
  _WORD v90[5];

  v9 = a3;
  v90[0] = a2;
  v11 = a3[1];
  if ((char)v11 <= 6)
    v12 = 6;
  else
    v12 = a3[1];
  v13 = (char *)a1->i64[0];
  a1->i64[1] = (uint64_t)v13;
  v14 = a1[1].u64[0];
  if ((unint64_t)v13 >= v14)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= 1)
      v17 = 1;
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    if (v18 > 0xAAAAAAAAAAAAAAALL)
LABEL_98:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = v13;
    v20 = 24 * v18;
    v13 = (char *)operator new(24 * v18);
    v21 = &v13[v20];
    *v13 = *v9;
    v13[1] = v11;
    *(_QWORD *)(v13 + 4) = *(_QWORD *)(v9 + 4);
    v15 = v13 + 24;
    a1->i64[0] = (uint64_t)v13;
    a1->i64[1] = (uint64_t)(v13 + 24);
    a1[1].i64[0] = (uint64_t)v21;
    if (v19)
    {
      operator delete(v19);
      v13 = (char *)a1->i64[0];
      a1->i64[1] = (uint64_t)v15;
      v22 = v15;
      if (v15 == v13)
        return;
      goto LABEL_16;
    }
  }
  else
  {
    *v13 = *a3;
    v13[1] = v11;
    *(_QWORD *)(v13 + 4) = *(_QWORD *)(a3 + 4);
    v15 = v13 + 24;
  }
  v22 = v15;
  a1->i64[1] = (uint64_t)v15;
LABEL_16:
  v23 = (char)(v12 - 5);
  v24 = (char)(v11 + 3);
  v25 = v11;
  v71 = v9;
  v69 = v24;
  v70 = v23;
  while (1)
  {
    if (v23 >= (char)v11 && v24 <= (char)v25)
      return;
    v26 = (char)(v11 - 2) <= v23 ? v23 : (char)(v11 - 2);
    if (v26 < (char)v11)
      break;
LABEL_45:
    v34 = (char)(v25 + 1);
    if (v24 < v34)
      v34 = v24;
    v73 = v34;
    if (v34 > (char)v25)
    {
      v72 = v11;
      v35 = (void *)a1[1].i64[1];
      v36 = a1[2].i64[1];
      v37 = (unint64_t)v22;
      while (1)
      {
        v75 = v25;
        a1[2].i64[0] = (uint64_t)v35;
        v40 = 0xAAAAAAAAAAAAAAACLL * ((uint64_t)(v37 - (_QWORD)v13) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v36 - (uint64_t)v35) >> 3) < v40)
        {
          if (v40 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v41 = v13;
          v42 = (char *)operator new(32 * ((uint64_t)(v37 - (_QWORD)v13) >> 3));
          a1[1].i64[1] = (uint64_t)v42;
          a1[2].i64[0] = (uint64_t)v42;
          a1[2].i64[1] = (uint64_t)&v42[24 * v40];
          v13 = v41;
          if (v35)
          {
            operator delete(v35);
            v13 = (char *)a1->i64[0];
            v37 = a1->u64[1];
          }
        }
        v76 = v37;
        if (v13 == (char *)v37)
        {
          v38 = vdupq_n_s64(v37);
          goto LABEL_50;
        }
        while (2)
        {
          v43 = 0;
          v77 = v13;
          v44 = *v13;
          v45 = v13[1] + 1;
          v46 = 2 * *((_DWORD *)v13 + 1);
          v47 = 2 * *((_DWORD *)v13 + 2);
          v79 = *v13;
          v80 = v47;
          v48 = v46;
          v78 = v46;
          do
          {
            LOBYTE(v88[0]) = v44;
            HIBYTE(v88[0]) = v45;
            v89 = __PAIR64__(v47, v48);
            LOBYTE(v81) = 0;
            v49 = *(_QWORD *)(a5 + 24);
            if (!v49)
              goto LABEL_97;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _WORD *, _WORD *))(*(_QWORD *)v49 + 48))(&v83, v49, &v81, v90, v88);
            gdc::LayerDataStore::get((gdc::LayerDataStore *)&v81, a4, (unsigned __int8 *)&v83);
            if (v81)
            {
              gdc::FallbackCollector::addFallbackNode(a6, (uint64_t)v88, (uint64_t)&v84, &v81);
              v50 = v82;
              if (!v82)
                goto LABEL_81;
            }
            else
            {
              v51 = v45;
              v53 = (_WORD *)a1[2].i64[0];
              v52 = a1[2].u64[1];
              if ((unint64_t)v53 >= v52)
              {
                v55 = (_BYTE *)a1[1].i64[1];
                v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v53 - v55) >> 3) + 1;
                if (v56 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)v55) >> 3);
                if (2 * v57 > v56)
                  v56 = 2 * v57;
                if (v57 >= 0x555555555555555)
                  v58 = 0xAAAAAAAAAAAAAAALL;
                else
                  v58 = v56;
                if (v58 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_98;
                v59 = (char *)operator new(24 * v58);
                v60 = &v59[8 * (((char *)v53 - v55) >> 3)];
                *(_WORD *)v60 = v88[0];
                *(_QWORD *)(v60 + 4) = v89;
                for (i = v60; v53 != (_WORD *)v55; *(_QWORD *)(i + 4) = *(_QWORD *)(v53 + 2))
                {
                  v62 = *(v53 - 12);
                  v53 -= 12;
                  *((_WORD *)i - 12) = v62;
                  i -= 24;
                }
                v63 = &v59[24 * v58];
                v54 = v60 + 24;
                a1[1].i64[1] = (uint64_t)i;
                a1[2].i64[0] = (uint64_t)(v60 + 24);
                a1[2].i64[1] = (uint64_t)v63;
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *v53 = v88[0];
                *(_QWORD *)(v53 + 2) = v89;
                v54 = (char *)(v53 + 12);
              }
              v45 = v51;
              a1[2].i64[0] = (uint64_t)v54;
              v46 = v78;
              v44 = v79;
              v50 = v82;
              if (!v82)
              {
LABEL_81:
                if (!v87)
                  goto LABEL_83;
LABEL_82:
                v87 = 0;
                goto LABEL_83;
              }
            }
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            do
              v65 = __ldaxr(p_shared_owners);
            while (__stlxr(v65 - 1, p_shared_owners));
            if (v65)
              goto LABEL_81;
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
            if (v87)
              goto LABEL_82;
LABEL_83:
            if (v85 != v86)
              free(v85);
            v48 = v46 + ((unint64_t)++v43 >> 1);
            v47 = v43 & 1 | v80;
          }
          while (v43 != 4);
          v13 = v77 + 24;
          if (v77 + 24 != (char *)v76)
            continue;
          break;
        }
        v38 = *a1;
LABEL_50:
        v36 = a1[1].i64[0];
        v13 = (char *)a1[1].i64[1];
        a1->i64[0] = (uint64_t)v13;
        v39 = a1[2];
        *(int64x2_t *)((char *)a1 + 24) = v38;
        *(int64x2_t *)((char *)a1 + 8) = v39;
        a1[2].i64[1] = v36;
        v25 = (char)(v75 + 1);
        v37 = v39.i64[0];
        v35 = (void *)v38.i64[0];
        if (v25 >= (char)v73)
        {
          v22 = (char *)v39.i64[0];
          v11 = v72;
          v25 = v73;
          v9 = v71;
          v24 = v69;
          v23 = v70;
          break;
        }
      }
    }
    if (v22 == v13)
      return;
  }
  v74 = v25;
  while (1)
  {
    v27 = v9[1];
    if (v9[1])
    {
      v28 = (v27 - v11 + 1);
      if (v27 < v28)
        v28 = v9[1];
      LOBYTE(v27) = v27 - v28;
      v29 = vshl_s32(*(int32x2_t *)(v9 + 4), vneg_s32(vdup_n_s32(v28)));
    }
    else
    {
      v29 = *(int32x2_t *)(v9 + 4);
    }
    LOBYTE(v88[0]) = *v9;
    HIBYTE(v88[0]) = v27;
    v89 = (unint64_t)v29;
    LOBYTE(v81) = 0;
    v30 = *(_QWORD *)(a5 + 24);
    if (!v30)
    {
LABEL_97:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_98;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _WORD *, _WORD *))(*(_QWORD *)v30 + 48))(&v83, v30, &v81, v90, v88);
    gdc::LayerDataStore::get((gdc::LayerDataStore *)&v81, a4, (unsigned __int8 *)&v83);
    if (v81)
      break;
    v31 = v82;
    if (v82)
    {
      v32 = (unint64_t *)&v82->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        if (!v87)
          goto LABEL_40;
LABEL_39:
        v87 = 0;
        goto LABEL_40;
      }
    }
    if (v87)
      goto LABEL_39;
LABEL_40:
    if (v85 != v86)
      free(v85);
    v11 = (char)(v11 - 1);
    if (v11 <= (char)v26)
    {
      v13 = (char *)a1->i64[0];
      v22 = (char *)a1->i64[1];
      v25 = v74;
      goto LABEL_45;
    }
  }
  gdc::FallbackCollector::addFallbackNode(a6, (uint64_t)v88, (uint64_t)&v84, &v81);
  v66 = v82;
  if (v82)
  {
    v67 = (unint64_t *)&v82->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v87)
    v87 = 0;
  if (v85 != v86)
    free(v85);
}

void sub_19F06CDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  if (a22 != a24)
    free(a22);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<gdc::LayerDataRequestKey (*)(gdc::RequestType,unsigned short,geo::QuadTile const&),std::allocator<gdc::LayerDataRequestKey (*)(gdc::RequestType,unsigned short,geo::QuadTile const&)>,gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::operator()(uint64_t a1, unsigned __int8 *a2, unsigned __int16 *a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1 + 8))(*a2, *a3, a4);
}

unsigned __int8 *md::TileAdjustmentHelpers::dataKeyForTile@<X0>(unsigned __int8 a1@<W0>, __int16 a2@<W1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X8>)
{
  int v4;
  int32x2_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = vrev64_s32(*(int32x2_t *)(a3 + 4));
  v4 = *a3;
  v7 = a3[1];
  v8 = v4;
  return gdc::LayerDataRequestKey::LayerDataRequestKey(a4, a1, a2, (int *)&v6, 4);
}

unsigned __int8 *gdc::LayerDataRequestKey::LayerDataRequestKey(unsigned __int8 *a1, unsigned __int8 a2, __int16 a3, int *a4, uint64_t a5)
{
  void **v6;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v17;
  uint64_t v18;

  *a1 = a2;
  *((_WORD *)a1 + 4) = a3;
  *((_QWORD *)a1 + 2) = a1 + 48;
  v6 = (void **)(a1 + 16);
  *((_QWORD *)a1 + 3) = a1 + 48;
  *((_QWORD *)a1 + 4) = a1 + 48;
  *((_QWORD *)a1 + 5) = 32;
  *((_QWORD *)a1 + 10) = 0;
  if (!a5)
    goto LABEL_9;
  v8 = 4 * a5;
  do
  {
    v9 = *a4++;
    v17 = v9;
    geo::small_vector_base<unsigned char>::insert<unsigned char *>(v6, *((char **)a1 + 3), (char *)&v17, (char *)&v18);
    v8 -= 4;
  }
  while (v8);
  v11 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
  v10 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  v12 = v10 - v11;
  if (v10 == v11)
  {
LABEL_9:
    v13 = 0;
  }
  else
  {
    v13 = 0;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      v14 = *v11++;
      v13 ^= (v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + v14;
      --v12;
    }
    while (v12);
  }
  v15 = (v13
       - 0x61C8864680B583EBLL
       + ((*((unsigned __int16 *)a1 + 4) - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)*((unsigned __int16 *)a1 + 4) - 0x61C8864680B583EBLL) >> 2)) ^ (*((unsigned __int16 *)a1 + 4)
                                                                                           - 0x61C8864680B583EBLL);
  *((_QWORD *)a1 + 10) = v13;
  *((_QWORD *)a1 + 11) = v15;
  a1[96] = 0;
  *((_QWORD *)a1 + 13) = (v15
                        - 0x61C8864680B583EBLL
                        + ((*a1 - 0x61C8864680B583EBLL) << 6)
                        + (((unint64_t)*a1 - 0x61C8864680B583EBLL) >> 2)) ^ (*a1 - 0x61C8864680B583EBLL);
  return a1;
}

void geo::small_vector_base<unsigned char>::insert<unsigned char *>(void **a1, char *a2, char *a3, char *a4)
{
  char *v5;
  char *v6;
  char *v8;
  char *v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 *v45;
  _OWORD *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  char v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  __int128 *v59;
  unint64_t v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  char v67;
  char v68;
  unint64_t v69;
  char *v70;
  __int128 *v71;
  _OWORD *v72;
  unint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  char v80;
  char *v81;

  v5 = a3;
  v6 = a2;
  v9 = (char *)*a1;
  v8 = (char *)a1[1];
  v10 = a2 - (_BYTE *)*a1;
  v11 = a4 - a3;
  if (v8 == a2)
  {
    v24 = (unint64_t)a1[3];
    if (v11 <= v24 - v10)
      goto LABEL_74;
    v25 = (char *)a1[2];
    v26 = (1 << -(char)__clz(v24 + 1));
    if (v24 >= 0xFFFFFFFFFFFFFFFELL)
      v27 = 1;
    else
      v27 = v26;
    if (v27 <= v10 + v11)
      v28 = v10 + v11;
    else
      v28 = v27;
    v29 = (char *)malloc_type_malloc(v28, 0x100004077774924uLL);
    v30 = v29;
    v31 = (char *)*a1;
    v32 = (char *)a1[1];
    if (*a1 == v32)
    {
LABEL_71:
      if (v9 != v25)
        free(*a1);
      v6 = &v30[v10];
      *a1 = v30;
      a1[1] = &v30[v10];
      a1[3] = (void *)v28;
LABEL_74:
      if (v5 == a4)
      {
LABEL_92:
        a1[1] = &v6[v11];
        return;
      }
      if (v11 < 8)
      {
        v70 = v6;
        goto LABEL_90;
      }
      if ((unint64_t)(v6 - v5) < 0x20)
      {
        v70 = v6;
        goto LABEL_90;
      }
      if (v11 >= 0x20)
      {
        v69 = v11 & 0xFFFFFFFFFFFFFFE0;
        v71 = (__int128 *)(v5 + 16);
        v72 = v6 + 16;
        v73 = v11 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v74 = *v71;
          *(v72 - 1) = *(v71 - 1);
          *v72 = v74;
          v71 += 2;
          v72 += 2;
          v73 -= 32;
        }
        while (v73);
        if (v11 == v69)
          goto LABEL_91;
        if ((v11 & 0x18) == 0)
        {
          v5 += v69;
          v70 = &v6[v69];
          goto LABEL_90;
        }
      }
      else
      {
        v69 = 0;
      }
      v75 = v11 & 0xFFFFFFFFFFFFFFF8;
      v70 = &v6[v11 & 0xFFFFFFFFFFFFFFF8];
      v76 = v69 - (v11 & 0xFFFFFFFFFFFFFFF8);
      v77 = (uint64_t *)&v5[v69];
      v78 = &v6[v69];
      do
      {
        v79 = *v77++;
        *(_QWORD *)v78 = v79;
        v78 += 8;
        v76 += 8;
      }
      while (v76);
      if (v11 == v75)
        goto LABEL_91;
      v5 += v75;
      do
      {
LABEL_90:
        v80 = *v5++;
        *v70++ = v80;
      }
      while (v5 != a4);
LABEL_91:
      v6 = (char *)a1[1];
      goto LABEL_92;
    }
    v33 = v32 - v31;
    if ((unint64_t)(v32 - v31) < 8)
    {
      v34 = v29;
    }
    else
    {
      v34 = v29;
      if ((unint64_t)(v29 - v31) >= 0x20)
      {
        if (v33 < 0x20)
        {
          v35 = 0;
LABEL_40:
          v49 = v33 & 0xFFFFFFFFFFFFFFF8;
          v34 = &v29[v33 & 0xFFFFFFFFFFFFFFF8];
          v50 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
          v51 = (uint64_t *)&v31[v35];
          v52 = &v29[v35];
          do
          {
            v53 = *v51++;
            *(_QWORD *)v52 = v53;
            v52 += 8;
            v50 += 8;
          }
          while (v50);
          if (v33 == v49)
            goto LABEL_71;
          v31 += v49;
          goto LABEL_70;
        }
        v35 = v33 & 0xFFFFFFFFFFFFFFE0;
        v45 = (__int128 *)(v31 + 16);
        v46 = v29 + 16;
        v47 = v33 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v48 = *v45;
          *(v46 - 1) = *(v45 - 1);
          *v46 = v48;
          v45 += 2;
          v46 += 2;
          v47 -= 32;
        }
        while (v47);
        if (v33 == v35)
          goto LABEL_71;
        if ((v33 & 0x18) != 0)
          goto LABEL_40;
        v31 += v35;
        v34 = &v29[v35];
      }
    }
    do
    {
LABEL_70:
      v68 = *v31++;
      *v34++ = v68;
    }
    while (v31 != v32);
    goto LABEL_71;
  }
  v12 = v8 - v9;
  v13 = v8 - v9 + v11;
  v14 = (unint64_t)a1[3];
  if (v14 >= v13)
  {
    v18 = (char *)*a1;
    goto LABEL_49;
  }
  v81 = (char *)a1[2];
  v15 = (1 << -(char)__clz(v14 + 1));
  if (v14 >= 0xFFFFFFFFFFFFFFFELL)
    v15 = 1;
  if (v15 <= v13)
    v16 = v13;
  else
    v16 = v15;
  v17 = malloc_type_malloc(v16, 0x100004077774924uLL);
  v18 = (char *)v17;
  v19 = (char *)*a1;
  v20 = (char *)a1[1];
  if (*a1 != v20)
  {
    v21 = v20 - v19;
    if ((unint64_t)(v20 - v19) < 8)
    {
      v22 = v17;
    }
    else
    {
      v22 = v17;
      if ((unint64_t)((char *)v17 - v19) >= 0x20)
      {
        if (v21 < 0x20)
        {
          v23 = 0;
LABEL_31:
          v40 = v21 & 0xFFFFFFFFFFFFFFF8;
          v22 = (char *)v17 + (v21 & 0xFFFFFFFFFFFFFFF8);
          v41 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
          v42 = (uint64_t *)&v19[v23];
          v43 = (_QWORD *)((char *)v17 + v23);
          do
          {
            v44 = *v42++;
            *v43++ = v44;
            v41 += 8;
          }
          while (v41);
          if (v21 == v40)
            goto LABEL_46;
          v19 += v40;
          goto LABEL_45;
        }
        v23 = v21 & 0xFFFFFFFFFFFFFFE0;
        v36 = (__int128 *)(v19 + 16);
        v37 = v17 + 1;
        v38 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v21 == v23)
          goto LABEL_46;
        if ((v21 & 0x18) != 0)
          goto LABEL_31;
        v19 += v23;
        v22 = (char *)v17 + v23;
      }
    }
    do
    {
LABEL_45:
      v54 = *v19++;
      *v22++ = v54;
    }
    while (v19 != v20);
  }
LABEL_46:
  if (v9 != v81)
    free(*a1);
  *a1 = v18;
  v8 = &v18[v12];
  a1[3] = (void *)v16;
LABEL_49:
  v55 = &v18[v10];
  a1[1] = &v8[v11];
  if (v8 != &v18[v10])
    memmove(&v18[v10 + v11], &v18[v10], v8 - &v18[v10]);
  if (v5 != a4)
  {
    if (v11 < 8)
    {
      v56 = v5;
      goto LABEL_67;
    }
    if ((char *)(&v6[(_QWORD)v18] - &v5[(_QWORD)v9]) < (char *)0x20)
    {
      v56 = v5;
      goto LABEL_67;
    }
    if (v11 >= 0x20)
    {
      v57 = v11 & 0xFFFFFFFFFFFFFFE0;
      v58 = &v18[v10 + 16];
      v59 = (__int128 *)(v5 + 16);
      v60 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v61 = *v59;
        *((_OWORD *)v58 - 1) = *(v59 - 1);
        *(_OWORD *)v58 = v61;
        v58 += 32;
        v59 += 2;
        v60 -= 32;
      }
      while (v60);
      if (v11 == v57)
        return;
      if ((v11 & 0x18) == 0)
      {
        v55 += v57;
        v56 = &v5[v57];
        do
        {
LABEL_67:
          v67 = *v56++;
          *v55++ = v67;
        }
        while (v56 != a4);
        return;
      }
    }
    else
    {
      v57 = 0;
    }
    v62 = v11 & 0xFFFFFFFFFFFFFFF8;
    v56 = &v5[v11 & 0xFFFFFFFFFFFFFFF8];
    v63 = v57 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v64 = &v18[&v6[v57] - v9];
    v65 = (uint64_t *)&v5[v57];
    do
    {
      v66 = *v65++;
      *(_QWORD *)v64 = v66;
      v64 += 8;
      v63 += 8;
    }
    while (v63);
    if (v11 != v62)
    {
      v55 += v62;
      goto LABEL_67;
    }
  }
}

void md::DaVinciGroundLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int32x2_t *v6;
  __int32 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  _BYTE *v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  NSObject *v44;
  std::string *p_p;
  std::string *v46;
  char *v47;
  _BYTE *v48;
  char *v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  _BYTE *v68;
  __int128 *v69;
  _OWORD *v70;
  unint64_t v71;
  __int128 v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  _BYTE *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  BOOL v100;
  unint64_t v101;
  uint64_t v102;
  __int128 *v103;
  _OWORD *v104;
  unint64_t v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  __int128 *v112;
  _OWORD *v113;
  unint64_t v114;
  __int128 v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  uint64_t v120;
  char v121;
  char *v122;
  char v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char v131;
  char *v132;
  char *v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  __int128 v139;
  unint64_t v140;
  char v141;
  char *v142;
  void *v143;
  void *v144;
  char *v146;
  uint64_t v147;
  void *v148;
  char *v149;
  _BYTE *v150;
  uint64_t v151;
  _BYTE v152[32];
  uint64_t v153;
  __int128 v154;
  unsigned __int16 v155;
  uint64_t v156;
  void *v157;
  void *v158;
  char v159;
  int v160;
  uint64_t v161;
  char v162[4];
  int v163;
  uint64_t v164;
  void *v165;
  char *v166;
  void *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  _BYTE v171[24];
  char v172;
  unsigned __int8 v173;
  int32x2_t v174;
  std::string __p;
  uint64_t v176;
  char v177;
  int v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _BYTE v182[32];
  uint64_t v183;
  __int128 v184;
  std::string v185;
  uint8_t buf[4];
  std::string *v187;
  __int16 v188;
  std::string *v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    return;
  v3 = a3;
  v4 = a2;
  while (2)
  {
    v6 = *(int32x2_t **)(*v4 + 16);
    v7 = v6[1].i32[0];
    v172 = v6[1].i32[1];
    v173 = v7;
    v174 = vrev64_s32(*v6);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, char *))(**(_QWORD **)(a1 + 24) + 16))(&v170, *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 584), &v172);
    if (!(_BYTE)v170)
      goto LABEL_3;
    v8 = *v4;
    v9 = *(unsigned __int8 *)*v4;
    v10 = *(_QWORD *)(*v4 + 112);
    v162[0] = 0;
    if (*(_BYTE *)(v8 + 96))
    {
      v163 = *(_DWORD *)(v8 + 100);
      v162[0] = 1;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *, uint64_t, char *))(*(_QWORD *)a1 + 144))(&v164, a1, v9, v171, v10, v162);
    if (v162[0])
      v162[0] = 0;
    gdc::LayerDataRequest::request(*v4, (uint64_t)&v164, 0);
    if (v171[1] >= v173)
      goto LABEL_202;
    v11 = *v4;
    LOBYTE(v155) = *(_BYTE *)*v4;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v156, v11 + 8);
    v159 = 0;
    if (*(_BYTE *)(v11 + 96))
    {
      v160 = *(_DWORD *)(v11 + 100);
      v159 = 1;
    }
    v161 = *(_QWORD *)(v11 + 104);
    v12 = (char *)v165;
    v13 = v152;
    v147 = v164;
    v148 = v152;
    v149 = v152;
    v150 = v152;
    v151 = 32;
    v14 = v166;
    v15 = v166 - (_BYTE *)v165;
    if ((unint64_t)(v166 - (_BYTE *)v165) >= 0x21)
    {
      if (v15 <= 0x40)
        v16 = 64;
      else
        v16 = v166 - (_BYTE *)v165;
      v13 = malloc_type_malloc(v16, 0x100004077774924uLL);
      v17 = (char *)v148;
      v18 = v149;
      if (v148 == v149)
        goto LABEL_32;
      v19 = v149 - (_BYTE *)v148;
      if ((unint64_t)(v149 - (_BYTE *)v148) < 8)
      {
        v20 = v13;
        goto LABEL_31;
      }
      v20 = v13;
      if ((unint64_t)(v13 - (_BYTE *)v148) < 0x20)
        goto LABEL_31;
      if (v19 >= 0x20)
      {
        v21 = v19 & 0xFFFFFFFFFFFFFFE0;
        v22 = (__int128 *)((char *)v148 + 16);
        v23 = v13 + 16;
        v24 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v19 == v21)
          goto LABEL_32;
        if ((v19 & 0x18) == 0)
        {
          v17 += v21;
          v20 = &v13[v21];
          goto LABEL_31;
        }
      }
      else
      {
        v21 = 0;
      }
      v26 = v19 & 0xFFFFFFFFFFFFFFF8;
      v20 = &v13[v19 & 0xFFFFFFFFFFFFFFF8];
      v27 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
      v28 = (uint64_t *)&v17[v21];
      v29 = &v13[v21];
      do
      {
        v30 = *v28++;
        *v29++ = v30;
        v27 += 8;
      }
      while (v27);
      if (v19 == v26)
        goto LABEL_32;
      v17 += v26;
      do
      {
LABEL_31:
        v31 = *v17++;
        *v20++ = v31;
      }
      while (v17 != v18);
LABEL_32:
      v148 = v13;
      v149 = v13;
      v151 = v16;
    }
    if (v12 == v14)
      goto LABEL_51;
    if (v15 < 8)
    {
      v33 = v13;
      goto LABEL_49;
    }
    if ((unint64_t)(v13 - v12) < 0x20)
    {
      v33 = v13;
      goto LABEL_49;
    }
    if (v15 >= 0x20)
    {
      v32 = v15 & 0xFFFFFFFFFFFFFFE0;
      v34 = (__int128 *)(v12 + 16);
      v35 = v13 + 16;
      v36 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v37 = *v34;
        *(v35 - 1) = *(v34 - 1);
        *v35 = v37;
        v34 += 2;
        v35 += 2;
        v36 -= 32;
      }
      while (v36);
      if (v15 == v32)
        goto LABEL_50;
      if ((v15 & 0x18) == 0)
      {
        v12 += v32;
        v33 = &v13[v32];
        goto LABEL_49;
      }
    }
    else
    {
      v32 = 0;
    }
    v38 = v15 & 0xFFFFFFFFFFFFFFF8;
    v33 = &v13[v15 & 0xFFFFFFFFFFFFFFF8];
    v39 = v32 - (v15 & 0xFFFFFFFFFFFFFFF8);
    v40 = (uint64_t *)&v12[v32];
    v41 = &v13[v32];
    do
    {
      v42 = *v40++;
      *v41++ = v42;
      v39 += 8;
    }
    while (v39);
    if (v15 == v38)
      goto LABEL_50;
    v12 += v38;
    do
    {
LABEL_49:
      v43 = *v12++;
      *v33++ = v43;
    }
    while (v12 != v14);
LABEL_50:
    v13 = v149;
LABEL_51:
    v149 = &v13[v15];
    v153 = v168;
    v154 = v169;
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v44 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
    {
      gdc::LayerDataRequestKey::keysInt32Str(&__p, &v155);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      gdc::ResourceKey::keysInt32Str(&v185, (unsigned __int8 *)&v147);
      v46 = &v185;
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v46 = (std::string *)v185.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v187 = p_p;
      v188 = 2080;
      v189 = v46;
      _os_log_impl(&dword_19F029000, v44, OS_LOG_TYPE_DEBUG, "extending key: %s (resource:%s) ", buf, 0x16u);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v185.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_61;
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_61;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_61:
    gdc::ResourceStatusContainer::incrementResourceReference(*(gdc::ResourceStatusContainer **)(a1 + 272), (const gdc::ResourceKey *)&v147);
    __p.__r_.__value_.__s.__data_[0] = v155;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v156);
    v177 = 0;
    if (v159)
    {
      v178 = v160;
      v177 = 1;
    }
    v47 = (char *)v148;
    *(_QWORD *)&v179 = v161;
    *((_QWORD *)&v179 + 1) = v147;
    v48 = v182;
    *(_QWORD *)&v180 = v182;
    *((_QWORD *)&v180 + 1) = v182;
    *(_QWORD *)&v181 = v182;
    *((_QWORD *)&v181 + 1) = 32;
    v49 = v149;
    v50 = v149 - (_BYTE *)v148;
    if ((unint64_t)(v149 - (_BYTE *)v148) >= 0x21)
    {
      if (v50 <= 0x40)
        v51 = 64;
      else
        v51 = v149 - (_BYTE *)v148;
      v48 = malloc_type_malloc(v51, 0x100004077774924uLL);
      v53 = (char *)*((_QWORD *)&v180 + 1);
      v52 = (char *)v180;
      if ((_QWORD)v180 == *((_QWORD *)&v180 + 1))
        goto LABEL_85;
      v54 = *((_QWORD *)&v180 + 1) - v180;
      if (*((_QWORD *)&v180 + 1) - (_QWORD)v180 < 8uLL)
      {
        v55 = v48;
        goto LABEL_84;
      }
      v55 = v48;
      if ((unint64_t)&v48[-v180] < 0x20)
        goto LABEL_84;
      if (v54 >= 0x20)
      {
        v56 = v54 & 0xFFFFFFFFFFFFFFE0;
        v57 = (__int128 *)(v180 + 16);
        v58 = v48 + 16;
        v59 = v54 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 32;
        }
        while (v59);
        if (v54 == v56)
          goto LABEL_85;
        if ((v54 & 0x18) == 0)
        {
          v52 += v56;
          v55 = &v48[v56];
          goto LABEL_84;
        }
      }
      else
      {
        v56 = 0;
      }
      v61 = v54 & 0xFFFFFFFFFFFFFFF8;
      v55 = &v48[v54 & 0xFFFFFFFFFFFFFFF8];
      v62 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
      v63 = (uint64_t *)&v52[v56];
      v64 = &v48[v56];
      do
      {
        v65 = *v63++;
        *v64++ = v65;
        v62 += 8;
      }
      while (v62);
      if (v54 == v61)
        goto LABEL_85;
      v52 += v61;
      do
      {
LABEL_84:
        v66 = *v52++;
        *v55++ = v66;
      }
      while (v52 != v53);
LABEL_85:
      *(_QWORD *)&v180 = v48;
      *((_QWORD *)&v180 + 1) = v48;
      *((_QWORD *)&v181 + 1) = v51;
    }
    if (v47 == v49)
      goto LABEL_104;
    if (v50 < 8)
    {
      v68 = v48;
      goto LABEL_102;
    }
    if ((unint64_t)(v48 - v47) < 0x20)
    {
      v68 = v48;
      goto LABEL_102;
    }
    if (v50 >= 0x20)
    {
      v67 = v50 & 0xFFFFFFFFFFFFFFE0;
      v69 = (__int128 *)(v47 + 16);
      v70 = v48 + 16;
      v71 = v50 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v72 = *v69;
        *(v70 - 1) = *(v69 - 1);
        *v70 = v72;
        v69 += 2;
        v70 += 2;
        v71 -= 32;
      }
      while (v71);
      if (v50 == v67)
        goto LABEL_103;
      if ((v50 & 0x18) == 0)
      {
        v47 += v67;
        v68 = &v48[v67];
        goto LABEL_102;
      }
    }
    else
    {
      v67 = 0;
    }
    v73 = v50 & 0xFFFFFFFFFFFFFFF8;
    v68 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
    v74 = v67 - (v50 & 0xFFFFFFFFFFFFFFF8);
    v75 = (uint64_t *)&v47[v67];
    v76 = &v48[v67];
    do
    {
      v77 = *v75++;
      *v76++ = v77;
      v74 += 8;
    }
    while (v74);
    if (v50 == v73)
      goto LABEL_103;
    v47 += v73;
    do
    {
LABEL_102:
      v78 = *v47++;
      *v68++ = v78;
    }
    while (v47 != v49);
LABEL_103:
    v48 = (_BYTE *)*((_QWORD *)&v180 + 1);
LABEL_104:
    *((_QWORD *)&v180 + 1) = &v48[v50];
    v183 = v153;
    v184 = v154;
    v80 = *(_QWORD *)(a1 + 256);
    v79 = *(_QWORD *)(a1 + 264);
    if (v80 < v79)
    {
      *(_BYTE *)v80 = __p.__r_.__value_.__s.__data_[0];
      gdc::LayerDataKey::LayerDataKey(v80 + 8, (uint64_t)&__p.__r_.__value_.__l.__size_);
      *(_BYTE *)(v80 + 96) = 0;
      if (v177)
      {
        *(_DWORD *)(v80 + 100) = v178;
        *(_BYTE *)(v80 + 96) = 1;
      }
      *(_OWORD *)(v80 + 104) = v179;
      v81 = (_BYTE *)(v80 + 152);
      *(_QWORD *)(v80 + 120) = v80 + 152;
      *(_QWORD *)(v80 + 128) = v80 + 152;
      *(_QWORD *)(v80 + 136) = v80 + 152;
      *(_QWORD *)(v80 + 144) = *((_QWORD *)&v181 + 1);
      v82 = (char *)v180;
      if ((_QWORD)v180 != (_QWORD)v181)
      {
        *(_OWORD *)(v80 + 120) = v180;
        v180 = 0u;
        v181 = 0u;
LABEL_151:
        *(_QWORD *)(v80 + 184) = v183;
        *(_OWORD *)(v80 + 192) = v184;
        v122 = (char *)(v80 + 208);
        goto LABEL_190;
      }
      *(_QWORD *)(v80 + 128) = &v81[*((_QWORD *)&v180 + 1) - v180];
      v89 = (char *)*((_QWORD *)&v180 + 1);
      if (v82 == *((char **)&v180 + 1))
        goto LABEL_151;
      v90 = *((_QWORD *)&v180 + 1) - (_QWORD)v82;
      if (*((_QWORD *)&v180 + 1) - (_QWORD)v82 >= 8uLL && v80 - (unint64_t)v82 + 152 >= 0x20)
      {
        if (v90 < 0x20)
        {
          v91 = 0;
LABEL_137:
          v107 = v90 & 0xFFFFFFFFFFFFFFF8;
          v81 += v90 & 0xFFFFFFFFFFFFFFF8;
          v108 = v91 - (v90 & 0xFFFFFFFFFFFFFFF8);
          v109 = (uint64_t *)&v82[v91];
          v110 = (_QWORD *)(v80 + v91 + 152);
          do
          {
            v111 = *v109++;
            *v110++ = v111;
            v108 += 8;
          }
          while (v108);
          if (v90 == v107)
            goto LABEL_151;
          v82 += v107;
          goto LABEL_150;
        }
        v91 = v90 & 0xFFFFFFFFFFFFFFE0;
        v103 = (__int128 *)(v82 + 16);
        v104 = (_OWORD *)(v80 + 168);
        v105 = v90 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v106 = *v103;
          *(v104 - 1) = *(v103 - 1);
          *v104 = v106;
          v103 += 2;
          v104 += 2;
          v105 -= 32;
        }
        while (v105);
        if (v90 == v91)
          goto LABEL_151;
        if ((v90 & 0x18) != 0)
          goto LABEL_137;
        v82 += v91;
        v81 += v91;
      }
      do
      {
LABEL_150:
        v121 = *v82++;
        *v81++ = v121;
      }
      while (v82 != v89);
      goto LABEL_151;
    }
    v83 = *(_QWORD *)(a1 + 248);
    v84 = v80 - v83;
    v85 = 0x4EC4EC4EC4EC4EC5 * (v84 >> 4) + 1;
    if (v85 > 0x13B13B13B13B13BLL)
      abort();
    v86 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v79 - v83) >> 4);
    if (2 * v86 > v85)
      v85 = 2 * v86;
    if (v86 >= 0x9D89D89D89D89DLL)
      v87 = 0x13B13B13B13B13BLL;
    else
      v87 = v85;
    if (v87)
    {
      if (v87 > 0x13B13B13B13B13BLL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v88 = operator new(208 * v87);
    }
    else
    {
      v88 = 0;
    }
    v92 = &v88[16 * (v84 >> 4)];
    *v92 = __p.__r_.__value_.__s.__data_[0];
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v92 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
    v92[96] = 0;
    if (v177)
    {
      *((_DWORD *)v92 + 25) = v178;
      v92[96] = 1;
    }
    *(_OWORD *)(v92 + 104) = v179;
    v93 = &v88[16 * (v84 >> 4)];
    v94 = v93 + 152;
    *((_QWORD *)v93 + 15) = v93 + 152;
    v95 = v93 + 120;
    v96 = v95 + 1;
    v97 = *((_QWORD *)&v181 + 1);
    v95[2] = v94;
    v95[3] = v97;
    v98 = (char *)v180;
    if ((_QWORD)v180 == (_QWORD)v181)
    {
      v99 = (char *)*((_QWORD *)&v180 + 1);
      v101 = *((_QWORD *)&v180 + 1) - v180;
      v100 = *((_QWORD *)&v180 + 1) == (_QWORD)v180;
      *v96 = &v94[*((_QWORD *)&v180 + 1) - v180];
      if (v100)
        goto LABEL_154;
      if (v101 >= 8 && (unint64_t)(&v88[v84] - v98 + 152) >= 0x20)
      {
        if (v101 < 0x20)
        {
          v102 = 0;
LABEL_145:
          v116 = v101 & 0xFFFFFFFFFFFFFFF8;
          v94 += v101 & 0xFFFFFFFFFFFFFFF8;
          v117 = v102 - (v101 & 0xFFFFFFFFFFFFFFF8);
          v118 = (uint64_t *)&v98[v102];
          v119 = &v88[16 * (v84 >> 4) + 152 + v102];
          do
          {
            v120 = *v118++;
            *v119++ = v120;
            v117 += 8;
          }
          while (v117);
          if (v101 == v116)
            goto LABEL_154;
          v98 += v116;
          goto LABEL_153;
        }
        v102 = v101 & 0xFFFFFFFFFFFFFFE0;
        v112 = (__int128 *)(v98 + 16);
        v113 = &v88[16 * (v84 >> 4) + 168];
        v114 = v101 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v115 = *v112;
          *(v113 - 1) = *(v112 - 1);
          *v113 = v115;
          v112 += 2;
          v113 += 2;
          v114 -= 32;
        }
        while (v114);
        if (v101 == v102)
          goto LABEL_154;
        if ((v101 & 0x18) != 0)
          goto LABEL_145;
        v98 += v102;
        v94 += v102;
      }
      do
      {
LABEL_153:
        v123 = *v98++;
        *v94++ = v123;
      }
      while (v98 != v99);
      goto LABEL_154;
    }
    *v95 = v180;
    *v96 = *((_QWORD *)&v180 + 1);
    v180 = 0u;
    v181 = 0u;
LABEL_154:
    v124 = &v88[16 * (v84 >> 4)];
    *((_QWORD *)v124 + 23) = v183;
    *((_OWORD *)v124 + 12) = v184;
    v122 = v92 + 208;
    v125 = *(char **)(a1 + 248);
    v126 = *(char **)(a1 + 256);
    if (v126 == v125)
    {
      *(_QWORD *)(a1 + 248) = v92;
      *(_QWORD *)(a1 + 256) = v122;
      *(_QWORD *)(a1 + 264) = &v88[208 * v87];
      goto LABEL_187;
    }
    v146 = &v88[208 * v87];
    v127 = 0;
    v128 = (uint64_t)&v88[v84 - 56];
    v129 = *(char **)(a1 + 256);
    do
    {
      v130 = v92;
      v131 = *(v129 - 208);
      v129 -= 208;
      *(v92 - 208) = v131;
      v92 -= 208;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v92 + 8), (uint64_t)(v129 + 8));
      v92[96] = 0;
      if (v129[96])
      {
        *((_DWORD *)v130 - 27) = *((_DWORD *)v126 - 27);
        *(v130 - 112) = 1;
      }
      *((_QWORD *)v130 - 13) = *((_QWORD *)v126 - 13);
      v132 = v130 - 56;
      *((_QWORD *)v130 - 12) = *((_QWORD *)v126 - 12);
      *((_QWORD *)v130 - 11) = v130 - 56;
      v133 = (char *)*((_QWORD *)v126 - 11);
      *((_QWORD *)v130 - 10) = v130 - 56;
      *((_QWORD *)v130 - 9) = v130 - 56;
      *((_QWORD *)v130 - 8) = *((_QWORD *)v126 - 8);
      if (v133 != *((char **)v126 - 9))
      {
        *((_QWORD *)v130 - 11) = v133;
        *((_QWORD *)v130 - 10) = *((_QWORD *)v126 - 10);
        *(_OWORD *)(v126 - 88) = 0u;
        *(_OWORD *)(v126 - 72) = 0u;
        goto LABEL_157;
      }
      *((_QWORD *)v130 - 10) = &v132[*((_QWORD *)v126 - 10) - (_QWORD)v133];
      v134 = (char *)*((_QWORD *)v126 - 10);
      if (v133 != v134)
      {
        v135 = v134 - v133;
        if ((unint64_t)(v134 - v133) < 8 || (unint64_t)(v128 - 208 * v127 - (_QWORD)v133) < 0x20)
          goto LABEL_175;
        if (v135 >= 0x20)
        {
          v137 = 0;
          v136 = v135 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v138 = &v130[v137];
            v139 = *(_OWORD *)&v133[v137 + 16];
            *(_OWORD *)(v138 - 56) = *(_OWORD *)&v133[v137];
            *(_OWORD *)(v138 - 40) = v139;
            v137 += 32;
          }
          while (v136 != v137);
          if (v135 == v136)
            goto LABEL_157;
          if ((v135 & 0x18) == 0)
          {
            v133 += v136;
            v132 += v136;
            do
            {
LABEL_175:
              v141 = *v133++;
              *v132++ = v141;
            }
            while (v133 != v134);
            goto LABEL_157;
          }
        }
        else
        {
          v136 = 0;
        }
        v140 = v135 & 0xFFFFFFFFFFFFFFF8;
        v132 += v135 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          *(_QWORD *)&v130[v136 - 56] = *(_QWORD *)&v133[v136];
          v136 += 8;
        }
        while (v140 != v136);
        if (v135 != v140)
        {
          v133 += v140;
          goto LABEL_175;
        }
      }
LABEL_157:
      *((_QWORD *)v130 - 3) = *((_QWORD *)v126 - 3);
      *((_OWORD *)v130 - 1) = *((_OWORD *)v126 - 1);
      ++v127;
      v126 = v129;
    }
    while (v129 != v125);
    v126 = *(char **)(a1 + 248);
    v142 = *(char **)(a1 + 256);
    *(_QWORD *)(a1 + 248) = v92;
    *(_QWORD *)(a1 + 256) = v122;
    *(_QWORD *)(a1 + 264) = v146;
    if (v142 == v126)
    {
LABEL_187:
      v3 = a3;
      goto LABEL_188;
    }
    v3 = a3;
    do
    {
      v143 = (void *)*((_QWORD *)v142 - 11);
      if (v143 != *((void **)v142 - 9))
        free(v143);
      if (*(v142 - 112))
        *(v142 - 112) = 0;
      v144 = (void *)*((_QWORD *)v142 - 24);
      if (v144 != *((void **)v142 - 22))
        free(v144);
      v142 -= 208;
    }
    while (v142 != v126);
LABEL_188:
    if (v126)
      operator delete(v126);
LABEL_190:
    *(_QWORD *)(a1 + 256) = v122;
    if ((_QWORD)v180 != (_QWORD)v181)
      free((void *)v180);
    if (v177)
      v177 = 0;
    if (__p.__r_.__value_.__r.__words[2] != v176)
      free((void *)__p.__r_.__value_.__r.__words[2]);
    if (v148 != v150)
      free(v148);
    if (v159)
      v159 = 0;
    if (v157 != v158)
      free(v157);
LABEL_202:
    if (v165 != v167)
      free(v165);
LABEL_3:
    v4 += 2;
    if (v4 != v3)
      continue;
    break;
  }
}

void sub_19F06E1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,void *a54)
{
  if (a38 != a40)
    free(a38);
  if (a52 != a54)
  {
    free(a52);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::LabelLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::DaVinciMaterialLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  uint64_t v3;
  uint64_t v4;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char *v14;
  _BYTE v15[2];
  __int16 v16;
  unsigned int v17;
  void *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22[32];
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  uint64_t v35;

  if (a2 != a3)
  {
    v34 = v3;
    v35 = v4;
    v6 = a2;
    do
    {
      v7 = *v6;
      v25 = **v6;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v26, (uint64_t)(v7 + 8));
      v29 = 0;
      if (v7[96])
      {
        v30 = *((_DWORD *)v7 + 25);
        v29 = 1;
      }
      v31 = *((_QWORD *)v7 + 13);
      v8 = *(_QWORD *)v27;
      v9 = *((_QWORD *)*v6 + 14);
      v15[0] = **v6;
      v16 = 36;
      v17 = 0x80000000;
      v18 = v22;
      v19 = v22;
      v20 = v22;
      v21 = 32;
      v23 = 0;
      v32 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v18, v22, (char *)&v32, v33);
      v10 = (unsigned __int8 *)v18;
      v11 = v19 - (_BYTE *)v18;
      if (v19 == v18)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        if (v11 <= 1)
          v11 = 1;
        do
        {
          v13 = *v10++;
          v12 ^= (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL + v13;
          --v11;
        }
        while (v11);
      }
      v23 = v12;
      v24 = v9;
      v14 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request((uint64_t)v14, (uint64_t)v15, 1);
      if (v18 != v20)
        free(v18);
      if (v29)
        v29 = 0;
      if (v27 != v28)
        free(v27);
    }
    while (v6 != a3);
  }
}

void md::DaVinciAssetLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  uint64_t v3;
  uint64_t v4;
  char **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char *v14;
  _BYTE v15[2];
  __int16 v16;
  unsigned int v17;
  void *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22[32];
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  uint64_t v35;

  if (a2 != a3)
  {
    v34 = v3;
    v35 = v4;
    v6 = a2;
    do
    {
      v7 = *v6;
      v25 = **v6;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v26, (uint64_t)(v7 + 8));
      v29 = 0;
      if (v7[96])
      {
        v30 = *((_DWORD *)v7 + 25);
        v29 = 1;
      }
      v31 = *((_QWORD *)v7 + 13);
      v8 = *(_QWORD *)v27;
      v9 = *((_QWORD *)*v6 + 14);
      v15[0] = **v6;
      v16 = 28;
      v17 = 0x80000000;
      v18 = v22;
      v19 = v22;
      v20 = v22;
      v21 = 32;
      v23 = 0;
      v32 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v18, v22, (char *)&v32, v33);
      v32 = 0;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v18, v19, (char *)&v32, v33);
      v10 = (unsigned __int8 *)v18;
      v11 = v19 - (_BYTE *)v18;
      if (v19 == v18)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        if (v11 <= 1)
          v11 = 1;
        do
        {
          v13 = *v10++;
          v12 ^= (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL + v13;
          --v11;
        }
        while (v11);
      }
      v23 = v12;
      v24 = v9;
      v14 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request((uint64_t)v14, (uint64_t)v15, 1);
      if (v18 != v20)
        free(v18);
      if (v29)
        v29 = 0;
      if (v27 != v28)
        free(v27);
    }
    while (v6 != a3);
  }
}

void md::RoadLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::SelectedDaVinciPolygonLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v3;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[8];
  void *v15;
  void *v16;
  _QWORD v17[3];

  if (*(_QWORD *)(a1 + 832))
    v3 = a2 == a3;
  else
    v3 = 1;
  if (!v3)
  {
    v5 = a2;
    do
    {
      v7 = *(_QWORD **)(a1 + 824);
      if (v7)
      {
        v8 = *(uint64_t **)(*v5 + 16);
        v9 = *v8;
        v10 = *((unsigned __int8 *)v8 + 8);
        do
        {
          v11 = v7[2];
          v17[0] = v9;
          v17[2] = v11;
          v17[1] = v10;
          v12 = *v5;
          if (*(_BYTE *)(*v5 + 96))
            v13 = *(_DWORD *)(v12 + 100);
          else
            v13 = 2147483646;
          gdc::ResourceKey::ResourceKey((uint64_t)v14, *(_WORD *)(a1 + 584), (uint64_t)v17, 0x18uLL, *(_QWORD *)(v12 + 112), v13);
          gdc::LayerDataRequest::request(*v5, (uint64_t)v14, 0);
          if (v15 != v16)
            free(v15);
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      v5 += 2;
    }
    while (v5 != a3);
  }
}

void md::SelectedDaVinciRoadsLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v3;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[8];
  void *v15;
  void *v16;
  _QWORD v17[3];

  if (*(_QWORD *)(a1 + 856))
    v3 = a2 == a3;
  else
    v3 = 1;
  if (!v3)
  {
    v5 = a2;
    do
    {
      v7 = *(_QWORD **)(a1 + 848);
      if (v7)
      {
        v8 = *(uint64_t **)(*v5 + 16);
        v9 = *v8;
        v10 = *((unsigned __int8 *)v8 + 8);
        do
        {
          v11 = v7[2];
          v17[0] = v9;
          v17[2] = v11;
          v17[1] = v10;
          v12 = *v5;
          if (*(_BYTE *)(*v5 + 96))
            v13 = *(_DWORD *)(v12 + 100);
          else
            v13 = 2147483646;
          gdc::ResourceKey::ResourceKey((uint64_t)v14, *(_WORD *)(a1 + 584), (uint64_t)v17, 0x18uLL, *(_QWORD *)(v12 + 112), v13);
          gdc::LayerDataRequest::request(*v5, (uint64_t)v14, 0);
          if (v15 != v16)
            free(v15);
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      v5 += 2;
    }
    while (v5 != a3);
  }
}

void md::DaVinciCenterLineRoadsLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::DaVinciGroundLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::AttributesLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::DaVinciElevationRasterLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::ElevatedStrokeLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::PolygonLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::SelectedPolygonLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v3;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[8];
  void *v15;
  void *v16;
  _QWORD v17[3];

  if (*(_QWORD *)(a1 + 832))
    v3 = a2 == a3;
  else
    v3 = 1;
  if (!v3)
  {
    v5 = a2;
    do
    {
      v7 = *(_QWORD **)(a1 + 824);
      if (v7)
      {
        v8 = *(uint64_t **)(*v5 + 16);
        v9 = *v8;
        v10 = *((unsigned __int8 *)v8 + 8);
        do
        {
          v11 = v7[2];
          v17[0] = v9;
          v17[2] = v11;
          v17[1] = v10;
          v12 = *v5;
          if (*(_BYTE *)(*v5 + 96))
            v13 = *(_DWORD *)(v12 + 100);
          else
            v13 = 2147483646;
          gdc::ResourceKey::ResourceKey((uint64_t)v14, *(_WORD *)(a1 + 584), (uint64_t)v17, 0x18uLL, *(_QWORD *)(v12 + 112), v13);
          gdc::LayerDataRequest::request(*v5, (uint64_t)v14, 0);
          if (v15 != v16)
            free(v15);
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      v5 += 2;
    }
    while (v5 != a3);
  }
}

void md::SelectedRoadLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v3;
  uint64_t *i;
  int v6;
  unint64_t *v7;
  int v8;
  int v9;
  _QWORD *j;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v24;
  _BYTE v25[2];
  __int16 v26;
  int v27;
  void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32[32];
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  if (*(_QWORD *)(a1 + 832))
    v3 = a2 == a3;
  else
    v3 = 1;
  if (!v3)
  {
    for (i = a2; i != a3; i += 2)
    {
      v6 = *(_WORD *)(a1 + 32) == 68 && *(_BYTE *)(a1 + 850) != 0;
      v7 = *(unint64_t **)(*i + 16);
      v8 = *((unsigned __int8 *)v7 + 8);
      v24 = *v7;
      v9 = *((unsigned __int8 *)v7 + 12);
      for (j = *(_QWORD **)(a1 + 824); j; j = (_QWORD *)*j)
      {
        v13 = j[2];
        v35 = v24;
        v36 = v13;
        DWORD2(v35) = v8;
        v14 = *i;
        if (*(_BYTE *)(*i + 96))
          v15 = *(_DWORD *)(v14 + 100);
        else
          v15 = 2147483646;
        gdc::ResourceKey::ResourceKey((uint64_t)v25, *(_WORD *)(a1 + 584), (uint64_t)&v35, 0x18uLL, *(_QWORD *)(v14 + 112), v15);
        gdc::LayerDataRequest::request(*i, (uint64_t)v25, v6);
        if (v28 != v30)
          free(v28);
      }
      if ((v6 & 1) != 0)
      {
        if (!*(_BYTE *)(a1 + 850))
        {
          v22 = std::__throw_bad_optional_access[abi:nn180100]();
          md::RouteLineLayerDataSource::constructRequests(v22);
          return;
        }
        v11 = *i;
        if (*(_BYTE *)(*i + 96))
          v12 = *(_DWORD *)(v11 + 100);
        else
          v12 = 2147483646;
        v16 = *(_WORD *)(a1 + 848);
        v17 = *(_QWORD *)(v11 + 112);
        v25[0] = *(_BYTE *)v11;
        v26 = v16;
        v27 = v12;
        v28 = v32;
        v29 = v32;
        v30 = v32;
        v31 = 32;
        v33 = 0;
        LODWORD(v35) = v24;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v28, v32, (char *)&v35, (char *)&v35 + 4);
        LODWORD(v35) = HIDWORD(v24);
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v28, v29, (char *)&v35, (char *)&v35 + 4);
        LODWORD(v35) = v8;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v28, v29, (char *)&v35, (char *)&v35 + 4);
        LODWORD(v35) = v9;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v28, v29, (char *)&v35, (char *)&v35 + 4);
        v18 = (unsigned __int8 *)v28;
        v19 = v29 - (_BYTE *)v28;
        if (v29 == v28)
        {
          v20 = 0;
        }
        else
        {
          v20 = 0;
          if (v19 <= 1)
            v19 = 1;
          do
          {
            v21 = *v18++;
            v20 ^= (v20 << 6) + (v20 >> 2) - 0x61C8864680B583EBLL + v21;
            --v19;
          }
          while (v19);
        }
        v33 = v20;
        v34 = v17;
        gdc::LayerDataRequest::request(*i, (uint64_t)v25, 0);
        if (v28 != v30)
          free(v28);
      }
    }
  }
}

void md::RouteLineLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v3;
  uint64_t *i;
  int32x2_t *v6;
  unsigned int v7;
  int32x2_t v8;
  __int32 v9;
  __int32 v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  BOOL v15;
  unint64_t j;
  int v17;
  int v18;
  int32x2_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  char v33[2];
  __int16 v34;
  int v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  char v39[32];
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;

  if (*(_QWORD *)(a1 + 24))
    v3 = a2 == a3;
  else
    v3 = 1;
  if (!v3)
  {
    for (i = a2; i != a3; i += 2)
    {
      v6 = *(int32x2_t **)(*i + 16);
      v7 = v6[1].u8[0];
      v8 = *v6;
      v9 = v6[1].i32[1];
      v10 = v6[2].i32[0];
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(&v42, *(_QWORD *)(a1 + 24), (unsigned __int16)v10);
      v11 = HIDWORD(v42);
      v12 = *(_QWORD *)(a1 + 24);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v12 + 24))(&v48, v12, (unsigned __int16)v10);
      if ((_DWORD)v11)
      {
        if (v11 <= 0x1FF)
        {
          v13 = 0;
          v14 = v11;
          do
          {
            ++v13;
            v11 = 2 * v14;
            v15 = v14 >= 0x100;
            v14 *= 2;
          }
          while (!v15);
          if (v11 < 0x201)
            goto LABEL_19;
LABEL_17:
          for (j = 512; j < v11; j *= 2)
            --v13;
          goto LABEL_19;
        }
        v13 = 0;
        if (v11 >= 0x201)
          goto LABEL_17;
      }
      else
      {
        v13 = 0;
      }
LABEL_19:
      if ((_BYTE)v48)
      {
        v17 = v13 + v7;
        if (SHIDWORD(v48) > v17)
          v17 = HIDWORD(v48);
        if (v49 < v17)
          v17 = v49;
        v18 = v7 - v17;
        if (v18 >= 0)
        {
          v19 = vrev64_s32(v8);
          if (v7)
          {
            v20 = v7 >= v18 ? v18 : v7;
            v21 = v7 - v20;
            v19 = vshl_s32(v19, vneg_s32(vdup_n_s32(v20)));
          }
          else
          {
            v21 = 0;
          }
          v33[0] = 1;
          LOBYTE(v36) = v9;
          BYTE1(v36) = v21;
          *(int32x2_t *)((char *)&v36 + 4) = v19;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, __int128 *))(*(_QWORD *)v12 + 16))(&v43, v12, (unsigned __int16)v10, &v36);
          if ((_BYTE)v43)
          {
            v22 = *i;
            if (*(_BYTE *)(*i + 96))
              v23 = *(_DWORD *)(v22 + 100);
            else
              v23 = 2147483646;
            v24 = *(_QWORD *)(v22 + 112);
            v31 = v46;
            v25 = v45;
            v26 = v44;
            v33[0] = *(_BYTE *)v22;
            v34 = v10;
            v35 = v23;
            *(_QWORD *)&v36 = v39;
            *((_QWORD *)&v36 + 1) = v39;
            v37 = v39;
            v38 = 32;
            v40 = 0;
            LODWORD(v48) = v47;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v36, v39, (char *)&v48, (char *)&v48 + 4);
            LODWORD(v48) = v31;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v36, *((char **)&v36 + 1), (char *)&v48, (char *)&v48 + 4);
            LODWORD(v48) = v25;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v36, *((char **)&v36 + 1), (char *)&v48, (char *)&v48 + 4);
            LODWORD(v48) = v26;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v36, *((char **)&v36 + 1), (char *)&v48, (char *)&v48 + 4);
            v27 = (unsigned __int8 *)v36;
            v28 = *((_QWORD *)&v36 + 1) - v36;
            if (*((_QWORD *)&v36 + 1) == (_QWORD)v36)
            {
              v29 = 0;
            }
            else
            {
              v29 = 0;
              if (v28 <= 1)
                v28 = 1;
              do
              {
                v30 = *v27++;
                v29 ^= (v29 << 6) + (v29 >> 2) - 0x61C8864680B583EBLL + v30;
                --v28;
              }
              while (v28);
            }
            v40 = v29;
            v41 = v24;
            gdc::LayerDataRequest::request(*i, (uint64_t)v33, 0);
            if ((char *)v36 != v37)
              free((void *)v36);
          }
        }
      }
    }
  }
}

void md::DaVinciMetaLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = -4;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::VenueLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_3 &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(int8x16_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, int32x4_t a7)
{
  uint64_t v11;
  uint64_t *v12;
  float *v13;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  float *v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  float *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t j;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *__src;
  float32x4_t v68;

  if (a4 == 3)
  {
    v12 = &a1->i64[1];
    v13 = *(float **)a3;
    md::DaVinciGroundRenderLayer::adjustedMeshBounds(&v68, *(md::MeshRenderable **)(**(_QWORD **)(a3 + 8) + 8 * a1->i64[1]), **(const md::DaVinciGroundRenderable ***)(a3 + 16), **(unsigned __int8 **)(a3 + 24), a7);
    if (!geo::Intersect::encloses<float>(v13, v68.f32))
    {
      v28 = a1->i64[1];
      a1->i64[1] = *a2;
      *a2 = v28;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return v12;
    }
    v11 = a1->i64[0];
    a1->i64[0] = a1->i64[1];
    a1->i64[1] = v11;
    a1->i64[1] = *a2;
    goto LABEL_6;
  }
  if (a4 == 2)
  {
    v11 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_6:
    *a2 = v11;
    return (uint64_t *)a2;
  }
  v16 = a5;
  if (a6 >= a4)
  {
    v22 = &a1->i64[1];
    *(_QWORD *)a5 = a1->i64[0];
    v23 = a5 + 8;
    if (&a1->u64[1] == a2)
    {
      a1->i64[0] = *a2;
      v12 = (uint64_t *)a2;
    }
    else
    {
      v24 = (uint64_t *)a1;
      do
      {
        v25 = *(float **)a3;
        md::DaVinciGroundRenderLayer::adjustedMeshBounds(&v68, *(md::MeshRenderable **)(**(_QWORD **)(a3 + 8) + 8 * *v22), **(const md::DaVinciGroundRenderable ***)(a3 + 16), **(unsigned __int8 **)(a3 + 24), a7);
        v26 = geo::Intersect::encloses<float>(v25, v68.f32);
        v27 = *v22;
        if (v26)
        {
          *v24++ = v27;
        }
        else
        {
          *(_QWORD *)v23 = v27;
          v23 += 8;
        }
        ++v22;
      }
      while (v22 != (uint64_t *)a2);
      *v24 = *a2;
      v12 = v24 + 1;
      if (v23 <= v16)
        return v12;
    }
    v39 = v16 + 8;
    if (v23 > v16 + 8)
      v39 = v23;
    v40 = (unint64_t)&v39[~(unint64_t)v16];
    if (v40 < 0x18)
    {
      v41 = v12;
    }
    else
    {
      v41 = v12;
      if ((unint64_t)((char *)v12 - v16) >= 0x20)
      {
        v42 = 0;
        v43 = (v40 >> 3) + 1;
        v44 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        v45 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v46 = &v12[v42];
          v47 = *(_OWORD *)&v16[v42 * 8 + 16];
          *(_OWORD *)v46 = *(_OWORD *)&v16[v42 * 8];
          *((_OWORD *)v46 + 1) = v47;
          v42 += 4;
          v45 -= 4;
        }
        while (v45);
        if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          return v12;
        v41 = &v12[v44];
        v16 += v44 * 8;
      }
    }
    do
    {
      v48 = *(_QWORD *)v16;
      v16 += 8;
      *v41++ = v48;
    }
    while (v16 < v23);
    return v12;
  }
  if (a4 >= 0)
    v17 = a4;
  else
    v17 = a4 + 1;
  v18 = v17 >> 1;
  v19 = v17 >> 1;
  v66 = v18;
  __src = &a1->i64[v19];
  for (i = v19 * 8 - 8; ; i -= 8)
  {
    v21 = *(float **)a3;
    md::DaVinciGroundRenderLayer::adjustedMeshBounds(&v68, *(md::MeshRenderable **)(**(_QWORD **)(a3 + 8) + 8 * *(uint64_t *)((char *)a1->i64 + i)), **(const md::DaVinciGroundRenderable ***)(a3 + 16), **(unsigned __int8 **)(a3 + 24), a7);
    if (geo::Intersect::encloses<float>(v21, v68.f32))
    {
      v29 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_3 &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(a1, &a1->i8[i], a3, v18, v16, a6);
      goto LABEL_27;
    }
    if (!i)
      break;
    --v18;
  }
  v29 = (uint64_t *)a1;
LABEL_27:
  v12 = (uint64_t *)(a2 + 1);
  v30 = __src;
  for (j = a4 - v66; ; --j)
  {
    v32 = *(float **)a3;
    md::DaVinciGroundRenderLayer::adjustedMeshBounds(&v68, *(md::MeshRenderable **)(**(_QWORD **)(a3 + 8) + 8 * *v30), **(const md::DaVinciGroundRenderable ***)(a3 + 16), **(unsigned __int8 **)(a3 + 24), a7);
    if (!geo::Intersect::encloses<float>(v32, v68.f32))
      break;
    if (++v30 == (uint64_t *)a2)
      goto LABEL_32;
  }
  v12 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::DaVinciGroundRenderLayer::layout(md::LayoutContext const&)::$_3 &,std::__wrap_iter<unsigned long *>,long,std::pair<unsigned long *,long>>(v30, a2, a3, j, v16, a6);
LABEL_32:
  if (v29 != __src)
  {
    if (__src == v12)
    {
      return v29;
    }
    else if (v29 + 1 == __src)
    {
      v49 = *v29;
      v50 = (char *)v12 - (char *)__src;
      memmove(v29, __src, v50);
      v12 = (uint64_t *)((char *)v29 + v50);
      *v12 = v49;
    }
    else if (__src + 1 == v12)
    {
      v51 = v12 - 1;
      v52 = *(v12 - 1);
      v12 = v29 + 1;
      if (v51 != v29)
        memmove(v29 + 1, v29, (char *)v51 - (char *)v29);
      *v29 = v52;
    }
    else
    {
      v33 = __src - v29;
      v34 = v12 - __src;
      if (v33 == v34)
      {
        v35 = v29 + 1;
        v36 = (uint64_t)&a1->i64[v66 + 1];
        do
        {
          v37 = *(v35 - 1);
          *(v35 - 1) = *(_QWORD *)(v36 - 8);
          *(_QWORD *)(v36 - 8) = v37;
          if (v35 == __src)
            break;
          ++v35;
          v38 = v36 == (_QWORD)v12;
          v36 += 8;
        }
        while (!v38);
        return __src;
      }
      else
      {
        v53 = v12 - __src;
        v54 = __src - v29;
        do
        {
          v55 = v54;
          v54 = v53;
          v53 = v55 % v53;
        }
        while (v53);
        if (v54)
        {
          v56 = &v29[v54];
          do
          {
            v58 = *--v56;
            v57 = v58;
            v59 = &v56[v33];
            v60 = v56;
            do
            {
              v61 = v59;
              *v60 = *v59;
              v62 = v12 - v59;
              v63 = __OFSUB__(v33, v62);
              v65 = v33 - v62;
              v64 = (v65 < 0) ^ v63;
              v59 = &v29[v65];
              if (v64)
                v59 = &v61[v33];
              v60 = v61;
            }
            while (v59 != v56);
            *v61 = v57;
          }
          while (v56 != v29);
        }
        return &v29[v34];
      }
    }
  }
  return v12;
}

float md::GeometryLogic::adjustedMeshBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float result;
  char v12;
  char **v13;
  char *v14;

  if ((*(_BYTE *)(a3 + 16) & 2) == 0)
  {
    v6 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v6 != -1)
    {
      v14 = &v12;
      v13 = &v14;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v7 = *(float **)(a3 + 72);
  v8 = (float)(v7[86] * v7[85]) * v7[87];
  v9 = v7[10];
  v10 = v9 + (float)(*(float *)(a2 + 8) * v8);
  result = v9 + (float)(*(float *)(a2 + 20) * v8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(float *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t geo::Intersect::encloses<float>(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v6 = *a1;
  v5 = a1[1];
  if (*a1 >= 0.0)
    v7 = a2[3];
  else
    v7 = *a2;
  if (v5 >= 0.0)
    v8 = a2[4];
  else
    v8 = a2[1];
  v9 = a1[2];
  v10 = a1[3];
  if (v9 >= 0.0)
    v11 = a2[5];
  else
    v11 = a2[2];
  if ((float)((float)((float)(v10 + (float)(v7 * v6)) + (float)(v5 * v8)) + (float)(v9 * v11)) < 0.0)
    return 0;
  v13 = a1[4];
  v12 = a1[5];
  v14 = v13 >= 0.0 ? a2[3] : *a2;
  v15 = v12 >= 0.0 ? a2[4] : a2[1];
  v16 = a1[6];
  v17 = a1[7];
  v18 = v16 >= 0.0 ? a2[5] : a2[2];
  if ((float)((float)((float)(v17 + (float)(v14 * v13)) + (float)(v12 * v15)) + (float)(v16 * v18)) < 0.0)
    return 0;
  v20 = a1[8];
  v19 = a1[9];
  v21 = v20 >= 0.0 ? a2[3] : *a2;
  v22 = v19 >= 0.0 ? a2[4] : a2[1];
  v23 = a1[10];
  v24 = a1[11];
  v25 = v23 >= 0.0 ? a2[5] : a2[2];
  if ((float)((float)((float)(v24 + (float)(v21 * v20)) + (float)(v19 * v22)) + (float)(v23 * v25)) < 0.0)
    return 0;
  v27 = a1[12];
  v26 = a1[13];
  v28 = v27 >= 0.0 ? a2[3] : *a2;
  v29 = v26 >= 0.0 ? a2[4] : a2[1];
  v31 = a1[14];
  v30 = a1[15];
  v32 = v31 >= 0.0 ? a2[5] : a2[2];
  if ((float)((float)((float)(v30 + (float)(v28 * v27)) + (float)(v26 * v29)) + (float)(v31 * v32)) < 0.0)
    return 0;
  v34 = a1[16];
  v33 = a1[17];
  v35 = v34 >= 0.0 ? a2[3] : *a2;
  v36 = v33 >= 0.0 ? a2[4] : a2[1];
  v37 = a1[18];
  v38 = v37 >= 0.0 ? a2[5] : a2[2];
  if ((float)((float)((float)(a1[19] + (float)(v35 * v34)) + (float)(v33 * v36)) + (float)(v37 * v38)) < 0.0)
    return 0;
  v39 = a1[20];
  v40 = a1[21];
  v41 = v39 >= 0.0 ? a2[3] : *a2;
  v42 = v40 >= 0.0 ? a2[4] : a2[1];
  v43 = a1[22];
  v44 = v43 >= 0.0 ? a2[5] : a2[2];
  if ((float)((float)((float)(a1[23] + (float)(v41 * v39)) + (float)(v40 * v42)) + (float)(v43 * v44)) < 0.0)
    return 0;
  if (v6 <= 0.0)
    v45 = a2[3];
  else
    v45 = *a2;
  v46 = v10 + (float)(v45 * v6);
  if (v5 <= 0.0)
    v47 = a2[4];
  else
    v47 = a2[1];
  v48 = v46 + (float)(v47 * v5);
  if (v9 <= 0.0)
    v49 = a2[5];
  else
    v49 = a2[2];
  v50 = (float)(v48 + (float)(v49 * v9)) >= 0.0;
  if (v13 <= 0.0)
    v51 = a2[3];
  else
    v51 = *a2;
  v52 = v17 + (float)(v51 * v13);
  if (v12 <= 0.0)
    v53 = a2[4];
  else
    v53 = a2[1];
  v54 = v52 + (float)(v53 * v12);
  if (v16 <= 0.0)
    v55 = a2[5];
  else
    v55 = a2[2];
  if ((float)(v54 + (float)(v55 * v16)) >= 0.0)
    ++v50;
  if (v20 <= 0.0)
    v56 = a2[3];
  else
    v56 = *a2;
  v57 = v24 + (float)(v56 * v20);
  if (v19 <= 0.0)
    v58 = a2[4];
  else
    v58 = a2[1];
  v59 = v57 + (float)(v58 * v19);
  if (v23 <= 0.0)
    v60 = a2[5];
  else
    v60 = a2[2];
  if ((float)(v59 + (float)(v60 * v23)) >= 0.0)
    ++v50;
  if (v27 <= 0.0)
    v61 = a2[3];
  else
    v61 = *a2;
  v62 = v30 + (float)(v61 * v27);
  if (v26 <= 0.0)
    v63 = a2[4];
  else
    v63 = a2[1];
  v64 = v62 + (float)(v63 * v26);
  if (v31 <= 0.0)
    v65 = a2[5];
  else
    v65 = a2[2];
  if ((float)(v64 + (float)(v65 * v31)) >= 0.0)
    ++v50;
  if (v34 <= 0.0)
    v66 = a2[3];
  else
    v66 = *a2;
  v67 = a1[19] + (float)(v66 * v34);
  if (v33 <= 0.0)
    v68 = a2[4];
  else
    v68 = a2[1];
  v69 = v67 + (float)(v68 * v33);
  if (v37 <= 0.0)
    v70 = a2[5];
  else
    v70 = a2[2];
  if ((float)(v69 + (float)(v70 * v37)) >= 0.0)
    ++v50;
  if (v39 <= 0.0)
    v2 = a2[3];
  if (v40 <= 0.0)
    v3 = a2[4];
  if (v43 <= 0.0)
    v4 = a2[5];
  if ((float)((float)((float)(a1[23] + (float)(v2 * v39)) + (float)(v3 * v40)) + (float)(v4 * v43)) >= 0.0)
    ++v50;
  if (v50 == 6)
    return 1;
  else
    return 2;
}

void md::DaVinciGroundRenderLayer::adjustedMeshBounds(float32x4_t *this, md::MeshRenderable *a2, const md::DaVinciGroundRenderable *a3, int a4, int32x4_t a5)
{
  VKDebugSettings *v8;
  SEL v9;

  if (*((unsigned __int8 *)a3 + 24) == 255)
  {
    if (a4)
    {
      if (!*((_BYTE *)a2 + 124))
      {
        *(_OWORD *)((char *)a2 + 100) = xmmword_19FFB3470;
        *(_QWORD *)((char *)a2 + 116) = 0x80000000800000;
        *((_BYTE *)a2 + 124) = 1;
        if (!*((_BYTE *)a2 + 140))
          *((_BYTE *)a2 + 140) = 1;
        *((_DWORD *)a2 + 34) = 0;
        *((_QWORD *)a2 + 16) = 0;
        md::GeometryLogic::calculateGeocentricBounds((float32_t *)a2 + 19, *((_QWORD *)a3 + 29), (uint64_t)a2 + 100, (uint64_t)a2 + 128);
        if (!*((_BYTE *)a2 + 124))
          goto LABEL_11;
      }
      if (*((_BYTE *)a2 + 140))
      {
        md::GeometryLogic::scaleGeocentricBoundsWithNormal(this, (float32x2_t *)((char *)a2 + 76), (uint64_t)a2 + 100, (uint64_t)a2 + 128, *((_QWORD *)a3 + 29), a5);
      }
      else
      {
LABEL_11:
        v8 = (VKDebugSettings *)std::__throw_bad_optional_access[abi:nn180100]();
        -[VKDebugSettings daVinciTemperatureGroundTintingEnabled](v8, v9);
      }
    }
    else
    {
      md::GeometryLogic::adjustedMeshBounds((uint64_t)this, (uint64_t)a2 + 76, *((_QWORD *)a3 + 29));
    }
  }
  else
  {
    *this = *(float32x4_t *)((char *)a2 + 76);
    this[1].i64[0] = *(_QWORD *)((char *)a2 + 92);
  }
}

void gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(uint64_t a1, unsigned int a2, int a3)
{
  unsigned __int16 *v3;
  pthread_rwlock_t *v7;
  geo::read_write_lock *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  unsigned int v21;
  gss::Allocator *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  _DWORD *v34;
  unsigned int v35;
  __int16 v36;
  unsigned __int16 v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  gss::Allocator *v41;
  uint64_t v42;
  gss::Allocator *v43;
  __int16 v44;
  unsigned __int16 v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  gss::Allocator *v49;
  uint64_t v50;
  float v51;
  unint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  geo::read_write_lock *v65;
  const char *v66;
  pthread_rwlock_t *v67;

  v7 = (pthread_rwlock_t *)(a1 + 16);
  v67 = (pthread_rwlock_t *)(a1 + 16);
  v8 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"write lock", v9);
  v10 = *(unsigned __int16 *)(a1 + 226);
  if (!*(_WORD *)(a1 + 226))
    goto LABEL_24;
  v11 = *(_QWORD *)(a1 + 216);
  if (*(_BYTE *)(a1 + 231))
  {
    if (v10 >= 0x1E)
    {
      v16 = *(_DWORD **)(a1 + 216);
      v17 = *(unsigned __int16 *)(a1 + 226);
      do
      {
        v18 = v17 >> 1;
        v19 = &v16[v17 >> 1];
        v21 = *v19;
        v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (v21 < a2)
          v16 = v20;
        else
          v17 = v18;
      }
      while (v17);
      if (v16 == (_DWORD *)(v11 + 4 * v10))
        goto LABEL_24;
      if (*v16 != a2)
        goto LABEL_24;
      v12 = ((unint64_t)v16 - v11) >> 2;
      if ((_DWORD)v10 == (unsigned __int16)v12)
        goto LABEL_24;
    }
    else
    {
      v12 = 0;
      while (1)
      {
        v13 = *(_DWORD *)(v11 + 4 * v12);
        if (v13 >= a2)
          break;
        if (v10 == ++v12)
          goto LABEL_24;
      }
      if (v13 != a2)
        LOWORD(v12) = *(_WORD *)(a1 + 226);
      if ((_DWORD)v10 == (unsigned __int16)v12)
        goto LABEL_24;
    }
  }
  else
  {
    v14 = 4 * v10;
    v15 = *(_DWORD **)(a1 + 216);
    while (*v15 != a2)
    {
      ++v15;
      v14 -= 4;
      if (!v14)
      {
        v15 = (_DWORD *)(v11 + 4 * v10);
        break;
      }
    }
    v12 = ((unint64_t)v15 - v11) >> 2;
    if ((_DWORD)v10 == (unsigned __int16)v12)
      goto LABEL_24;
  }
  if (v10 > (unsigned __int16)v12)
    v3 = (unsigned __int16 *)(v11 + *(unsigned __int16 *)(a1 + 224) + 2 * (unsigned __int16)v12);
  if (*v3 == a3)
  {
    v23 = 0;
    v24 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242))
      goto LABEL_68;
    goto LABEL_27;
  }
LABEL_24:
  v22 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 216), a2);
  *(_WORD *)v22 = a3;
  if (*(_BYTE *)(a1 + 230) || *(_BYTE *)(a1 + 231))
  {
    v23 = 1;
    v24 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242))
      goto LABEL_68;
  }
  else
  {
    v36 = *(_WORD *)(a1 + 228);
    v37 = (4 * v36) | 2;
    v38 = gss::Allocator::instance(v22);
    v39 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v38 + 16))(v38, (unsigned __int16)(v37 + 2 * v36) & 0xFFFE, 1);
    v40 = v39;
    if (*(_QWORD *)(a1 + 216))
    {
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 216, v39, (_DWORD *)((char *)v39 + v37), 1);
      v42 = gss::Allocator::instance(v41);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v42 + 40))(v42, *(_QWORD *)(a1 + 216), *(unsigned __int16 *)(a1 + 228));
    }
    *(_WORD *)(a1 + 228) = v36;
    *(_QWORD *)(a1 + 216) = v40;
    v23 = 1;
    *(_WORD *)(a1 + 224) = v37;
    v24 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242))
      goto LABEL_68;
  }
LABEL_27:
  v25 = *(_QWORD *)(a1 + 232);
  if (!*(_BYTE *)(a1 + 247))
  {
    v28 = 4 * v24;
    v29 = *(_DWORD **)(a1 + 232);
    while (*v29 != a2)
    {
      ++v29;
      v28 -= 4;
      if (!v28)
      {
        v29 = (_DWORD *)(v25 + 4 * v24);
        break;
      }
    }
    v26 = ((unint64_t)v29 - v25) >> 2;
    if ((_DWORD)v24 == (unsigned __int16)v26)
      goto LABEL_68;
    goto LABEL_63;
  }
  if (v24 >= 0x1E)
  {
    v30 = *(_DWORD **)(a1 + 232);
    v31 = v24;
    do
    {
      v32 = v31 >> 1;
      v33 = &v30[v31 >> 1];
      v35 = *v33;
      v34 = v33 + 1;
      v31 += ~(v31 >> 1);
      if (v35 < a2)
        v30 = v34;
      else
        v31 = v32;
    }
    while (v31);
    if (v30 != (_DWORD *)(v25 + 4 * v24) && *v30 == a2)
    {
      v26 = ((unint64_t)v30 - v25) >> 2;
      if ((_DWORD)v24 != (unsigned __int16)v26)
        goto LABEL_63;
    }
LABEL_68:
    v43 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 232), a2);
    *(_WORD *)v43 = a3;
    if (!*(_BYTE *)(a1 + 246) && !*(_BYTE *)(a1 + 247))
    {
      v44 = *(_WORD *)(a1 + 244);
      v45 = (4 * v44) | 2;
      v46 = gss::Allocator::instance(v43);
      v47 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 16))(v46, (unsigned __int16)(v45 + 2 * v44) & 0xFFFE, 1);
      v48 = v47;
      if (*(_QWORD *)(a1 + 232))
      {
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 232, v47, (_DWORD *)((char *)v47 + v45), 1);
        v50 = gss::Allocator::instance(v49);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v50 + 40))(v50, *(_QWORD *)(a1 + 232), *(unsigned __int16 *)(a1 + 244));
      }
      *(_WORD *)(a1 + 244) = v44;
      *(_QWORD *)(a1 + 232) = v48;
      *(_WORD *)(a1 + 240) = v45;
    }
LABEL_73:
    v51 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
    if (v51 <= 0.0)
    {
      v52 = *(unsigned __int16 *)(a1 + 242);
      if ((_DWORD)v52 == *(unsigned __int16 *)(a1 + 226))
      {
        if (!*(_WORD *)(a1 + 242))
          goto LABEL_84;
        v53 = *(_DWORD **)(a1 + 232);
        v54 = *(_DWORD **)(a1 + 216);
        if (*v53 == *v54)
        {
          v55 = *(unsigned __int16 *)(a1 + 224);
          v56 = *(unsigned __int16 *)(a1 + 240);
          if (*(unsigned __int16 *)((char *)v53 + v56) == *(unsigned __int16 *)((char *)v54 + v55))
          {
            v57 = 0;
            v58 = v53 + 1;
            v59 = v54 + 1;
            v60 = (uint64_t)v53 + v56 + 2;
            v61 = (uint64_t)v54 + v55 + 2;
            while (v52 - 1 != v57)
            {
              v62 = v57++;
              if (v58[v62] != v59[v62])
                goto LABEL_91;
              if (*(unsigned __int16 *)(v60 + 2 * v62) != *(unsigned __int16 *)(v61 + 2 * v62))
              {
                v57 = v62 + 1;
                goto LABEL_91;
              }
            }
            v57 = *(unsigned __int16 *)(a1 + 242);
LABEL_91:
            LOBYTE(v52) = v57 < v52;
            goto LABEL_84;
          }
        }
      }
    }
    LOBYTE(v52) = 1;
LABEL_84:
    atomic_store(v52, (unsigned __int8 *)(a1 + 254));
    v63 = (unsigned int *)(a1 + 248);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 + 1, v63));
    v7 = v67;
    goto LABEL_87;
  }
  v26 = 0;
  while (1)
  {
    v27 = *(_DWORD *)(v25 + 4 * v26);
    if (v27 >= a2)
      break;
    if (v24 == ++v26)
      goto LABEL_68;
  }
  if (v27 != a2)
    LOWORD(v26) = v24;
  if ((_DWORD)v24 == (unsigned __int16)v26)
    goto LABEL_68;
LABEL_63:
  if (v24 > (unsigned __int16)v26)
    v3 = (unsigned __int16 *)(v25 + *(unsigned __int16 *)(a1 + 240) + 2 * (unsigned __int16)v26);
  if (*v3 != a3)
    goto LABEL_68;
  if (v23)
    goto LABEL_73;
LABEL_87:
  v65 = (geo::read_write_lock *)pthread_rwlock_unlock(v7);
  if ((_DWORD)v65)
    geo::read_write_lock::logFailure(v65, (uint64_t)"unlock", v66);
}

void sub_19F070A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t gms::LinearResolver::matchAttributes(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 == v7)
    return 0xFFFFFFFFLL;
  if (*(_WORD *)(a2 + 10))
  {
    v8 = *(char **)a2;
    v9 = *(unsigned __int16 *)(a2 + 10);
    v10 = *(_QWORD *)a2 + 4 * v9;
    v11 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8);
    v12 = *(unsigned __int8 *)(a2 + 15);
    if (*(_BYTE *)(a2 + 15))
    {
      v13 = 0;
      v14 = 0;
      v15 = 0xFFFFFFFFLL;
      v16 = *(_QWORD *)(a1 + 8);
      while (1)
      {
        result = -1431655765 * ((unint64_t)(v16 - v7) >> 3);
        a2 &= 0xFFFFFFFFFFFFFF00;
        v19 = *(unsigned __int16 *)(v16 + 10);
        if (!*(_WORD *)(v16 + 10))
          break;
        LODWORD(v17) = 0;
        v20 = 0;
        do
        {
          if (v20 < v19)
          {
            a2 = *(_QWORD *)v16 + 4 * v20;
            a3 = (unsigned __int16 *)(*(_QWORD *)v16 + *(unsigned __int16 *)(v16 + 8) + 2 * v20);
          }
          v21 = *(_DWORD *)a2;
          v22 = v8;
          v23 = v9;
          if (v9 >= 0x1E)
          {
            do
            {
              v26 = v23 >> 1;
              v27 = &v22[4 * (v23 >> 1)];
              v29 = *(_DWORD *)v27;
              v28 = v27 + 4;
              v23 += ~(v23 >> 1);
              if (v29 < v21)
                v22 = v28;
              else
                v23 = v26;
            }
            while (v23);
            if (v22 == (char *)v10)
              goto LABEL_5;
            if (*(_DWORD *)v22 != v21)
              goto LABEL_5;
            v30 = (unint64_t)(v22 - v8) >> 2;
            if ((_DWORD)v9 == (unsigned __int16)v30)
              goto LABEL_5;
          }
          else
          {
            v24 = 0;
            while (1)
            {
              v25 = *(_DWORD *)&v8[4 * v24];
              if (v25 >= v21)
                break;
              if (v9 == ++v24)
                goto LABEL_5;
            }
            if (v25 == v21)
              LOWORD(v30) = v24;
            else
              LOWORD(v30) = v9;
            if ((_DWORD)v9 == (unsigned __int16)v30)
              goto LABEL_5;
          }
          if (v9 > (unsigned __int16)v30)
            v5 = (unsigned __int16 *)(v11 + 2 * (unsigned __int16)v30);
          if (*v5 != *a3)
            goto LABEL_5;
          v17 = (v17 + 1);
          v31 = v20 + 1;
          if (v20 + 1 < v19)
            ++v20;
          else
            v20 = *(unsigned __int16 *)(v16 + 10);
        }
        while (v31 < v19);
        if (v17 <= v14)
          goto LABEL_38;
        v13 = *(_DWORD *)(v16 + 16);
LABEL_6:
        v16 += 24;
        v15 = result;
        v14 = v17;
        if (v16 == v6)
          return result;
      }
      LOBYTE(v17) = 0;
LABEL_38:
      if (v17 == v14)
      {
        if (*(_DWORD *)(v16 + 16) <= v13)
        {
          result = v15;
        }
        else
        {
          v13 = *(_DWORD *)(v16 + 16);
          result = result;
        }
        v17 = v14;
      }
      else
      {
LABEL_5:
        v17 = v14;
        result = v15;
      }
      goto LABEL_6;
    }
    v34 = 0;
    v35 = 0xFFFFFFFFLL;
    v36 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      result = -1431655765 * ((unint64_t)(v36 - v7) >> 3);
      a4 &= 0xFFFFFFFFFFFFFF00;
      v37 = *(unsigned __int16 *)(v36 + 10);
      if (*(_WORD *)(v36 + 10))
      {
        v38 = 0;
        v39 = 0;
        while (1)
        {
          if (v39 < v37)
          {
            a4 = *(_QWORD *)v36 + 4 * v39;
            a5 = (unsigned __int16 *)(*(_QWORD *)v36 + *(unsigned __int16 *)(v36 + 8) + 2 * v39);
          }
          v40 = 4 * v9;
          v41 = v8;
          while (*(_DWORD *)v41 != *(_DWORD *)a4)
          {
            v41 += 4;
            v40 -= 4;
            if (!v40)
            {
              v41 = (char *)v10;
              break;
            }
          }
          v42 = v41 - v8;
          if ((_DWORD)v9 == (unsigned __int16)(v42 >> 2))
            break;
          v43 = v42 >> 2;
          if (v9 > (unsigned __int16)v43)
            a2 = v11 + 2 * (unsigned __int16)v43;
          if (*(unsigned __int16 *)a2 != *a5)
            break;
          ++v38;
          v44 = v39 + 1;
          if (v39 + 1 < v37)
            ++v39;
          else
            v39 = *(unsigned __int16 *)(v36 + 10);
          if (v44 >= v37)
          {
            if (v38 <= v34)
              goto LABEL_73;
            v12 = *(_DWORD *)(v36 + 16);
            v34 = v38;
            goto LABEL_53;
          }
        }
      }
      else
      {
        v38 = 0;
LABEL_73:
        if (v38 == v34)
        {
          if (*(_DWORD *)(v36 + 16) <= v12)
          {
            result = v35;
          }
          else
          {
            v12 = *(_DWORD *)(v36 + 16);
            result = result;
          }
          goto LABEL_53;
        }
      }
      result = v35;
LABEL_53:
      v36 += 24;
      v35 = result;
      if (v36 == v6)
        return result;
    }
  }
  v32 = 0;
  v33 = 0;
  result = 0xFFFFFFFFLL;
  do
  {
    if (!*(_WORD *)(v7 + v32 + 10))
    {
      if (*(_DWORD *)(v7 + v32 + 16) <= v33)
      {
        result = result;
      }
      else
      {
        v33 = *(_DWORD *)(v7 + v32 + 16);
        result = -1431655765 * (v32 >> 3);
      }
    }
    v32 += 24;
  }
  while (v7 + v32 != v6);
  return result;
}

void md::LabelFeatureStyler::styleLabelFeatures(unsigned int *a1, char **a2, unsigned int a3, int a4, uint64_t a5)
{
  unsigned int v7;
  NSObject *v8;
  _BOOL4 v9;
  const char *v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  const double *v44;
  BOOL v45;
  float64x2_t v46;
  float64x2_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  __int128 *v58;
  _OWORD *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unsigned __int8 v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  _QWORD *v81;
  id v82;
  id v83;
  NSObject *v84;
  id v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  NSObject *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unsigned int v116;
  char *v117;
  _QWORD v118[8];
  unsigned int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t (**v135)();
  id v136;
  _QWORD v137[3];
  _QWORD v138[3];
  _QWORD *v139;
  uint8_t buf[8];
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t);
  void *v143;
  id v144;
  _BYTE v145[24];
  _BYTE *v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  if (*a2 == a2[1])
    return;
  v7 = atomic_load(a1 + 2);
  v116 = v7;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v8 = (id)GEOGetVectorKitPerformanceLog_log;
  v9 = os_signpost_enabled(v8);
  v112 = a5;
  if (a4)
  {
    if (!v9)
      goto LABEL_10;
    *(_WORD *)buf = 0;
    v10 = "LabelsTileDecodeStyleFeatures";
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    *(_WORD *)buf = 0;
    v10 = "LabelsStyleFeatures";
  }
  _os_signpost_emit_with_name_impl(&dword_19F029000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, v10, (const char *)&unk_1A0189141, buf, 2u);
LABEL_10:

  v131 = 0;
  v132 = 0;
  v133 = 0;
  {
    v108 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v108, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v134 = mdm::Allocator::instance(void)::alloc;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v13 = v131;
  if (v12 > (uint64_t)(v133 - (_QWORD)v131) >> 4)
  {
    if (v12 >> 60)
      abort();
    v14 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 0xAAAAAAAAAAAAAAB0 * ((a2[1] - *a2) >> 3), 8);
    v131 = (uint64_t *)(v14 + (char *)v132 - (char *)v131);
    v132 = (uint64_t *)(v14 + (char *)v132 - (char *)v13);
    v133 = v14 + 16 * v12;
  }
  v111 = a4;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  {
    v109 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v109, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v130 = mdm::Allocator::instance(void)::alloc;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v16 <= (v129 - (uint64_t)v127) >> 3)
  {
    v18 = (unint64_t)v127;
  }
  else
  {
    if (v16 >> 61)
      abort();
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 0x5555555555555558 * ((a2[1] - *a2) >> 3), 8);
    v18 = v17 + ((v128 - v127) & 0xFFFFFFFFFFFFFFF8);
    v127 = (char *)v18;
    v128 = (char *)v18;
    v129 = v17 + 8 * v16;
  }
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 336);
  std::mutex::lock((std::mutex *)(v19 + 64));
  v20 = *(std::__shared_weak_count **)(v19 + 192);
  v125 = *(_QWORD *)(v19 + 184);
  v126 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  std::mutex::unlock((std::mutex *)(v19 + 64));
  v24 = *a2;
  v23 = a2[1];
  v117 = v23;
  while (v24 != v23)
  {
    *((_QWORD *)v24 + 1) = ((char *)v132 - (char *)v131) >> 4;
    (*(void (**)(_QWORD, uint64_t **, uint64_t *))(**(_QWORD **)v24 + 568))(*(_QWORD *)v24, &v131, &v125);
    v26 = ((char *)v132 - (char *)v131) >> 4;
    v27 = *((_QWORD *)v24 + 1);
    v28 = v26 - v27;
    *((_QWORD *)v24 + 2) = v26 - v27;
    if (v26 == v27)
      goto LABEL_23;
    v29 = v128;
    v30 = (unint64_t)&v128[-v18];
    v31 = (uint64_t)&v128[-v18] >> 3;
    v32 = (char *)(v18 + ((unint64_t)&v128[-v18] & 0xFFFFFFFFFFFFFFF8));
    if (v28 <= (v129 - (uint64_t)v128) >> 3)
    {
      v37 = (v128 - v32) >> 3;
      if (v28 <= v37)
      {
        v39 = v128;
        v37 = v26 - v27;
        goto LABEL_43;
      }
      v38 = 0;
      v39 = &v128[8 * (v28 - v37)];
      do
      {
        if (&v29[v38])
          *(_QWORD *)&v29[v38] = *(_QWORD *)v24;
        v38 += 8;
      }
      while (8 * v26 - 8 * v27 - 8 * v37 != v38);
      v128 = v39;
      if (v29 != v32)
      {
LABEL_43:
        v40 = &v39[-8 * v28];
        v41 = v39;
        while (v40 < v29)
        {
          if (v41)
            *(_QWORD *)v41 = *(_QWORD *)v40;
          v40 += 8;
          v41 += 8;
        }
        v42 = &v32[8 * v28];
        v128 = v41;
        if (v39 != v42)
          memmove(&v39[-8 * ((v39 - v42) >> 3)], v32, v39 - v42);
        if (v41 <= v24)
          v43 = 0;
        else
          v43 = v28;
        if (v32 > v24)
          v43 = 0;
        v44 = (const double *)&v24[8 * v43];
        if (v37 >= 0xA
          && (v32 < (char *)v44 + 8
            ? (v45 = (unint64_t)v44 >= v18 + (v30 & 0xFFFFFFFFFFFFFFF8) + 8 * v37)
            : (v45 = 1),
              v45))
        {
          v32 += 8 * (v37 & 0xFFFFFFFFFFFFFFFCLL);
          v46 = vld1q_dup_f64(v44);
          v47 = (float64x2_t *)(v18 + 8 * v31 + 16);
          v48 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v47[-1] = v46;
            *v47 = v46;
            v47 += 2;
            v48 -= 4;
          }
          while (v48);
          if (v37 != (v37 & 0xFFFFFFFFFFFFFFFCLL))
          {
            v37 &= 3u;
            goto LABEL_65;
          }
        }
        else
        {
          do
          {
LABEL_65:
            *(double *)v32 = *v44;
            v32 += 8;
            --v37;
          }
          while (v37);
        }
      }
LABEL_23:
      v25 = (_QWORD *)v18;
      goto LABEL_24;
    }
    v33 = v31 + v28;
    if ((v31 + v28) >> 61)
      abort();
    v34 = v129 - v18;
    if ((uint64_t)(v129 - v18) >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v130 + 16))(v130, 8 * v35, 8);
    else
      v36 = 0;
    v49 = v31;
    v25 = (_QWORD *)(v36 + 8 * v31);
    v50 = (char *)&v25[v28];
    v51 = 8 * v26 - 8 * v27;
    v52 = v25;
    do
    {
      if (v52)
        *v52 = *(_QWORD *)v24;
      ++v52;
      v51 -= 8;
    }
    while (v51);
    v53 = v127;
    if (v127 != v32)
    {
      v54 = (v30 & 0xFFFFFFFFFFFFFFF8) + v18;
      v55 = v54 - (_QWORD)v127 - 8;
      if (v55 >= 0x68)
      {
        v56 = v32;
        if (v54 - ((v30 & 0xFFFFFFFFFFFFFFF8) + v36) >= 0x20)
        {
          v57 = (v55 >> 3) + 1;
          v56 = &v32[-8 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
          v58 = (__int128 *)(v18 + 8 * v49 - 16);
          v59 = (_OWORD *)(v36 + 8 * v49 - 16);
          v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *v58;
            *(v59 - 1) = *(v58 - 1);
            *v59 = v61;
            v58 -= 2;
            v59 -= 2;
            v60 -= 4;
          }
          while (v60);
          v25 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
          if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_81;
        }
      }
      else
      {
        v56 = v32;
      }
      do
      {
        v62 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *--v25 = v62;
      }
      while (v56 != v53);
      v29 = v128;
    }
LABEL_81:
    if (v29 != v32)
    {
      v63 = (v30 & 0xFFFFFFFFFFFFFFF8) + v18;
      v64 = (unint64_t)&v29[-v63 - 8];
      if (v64 < 0x68)
        goto LABEL_166;
      if ((v30 & 0xFFFFFFFFFFFFFFF8) + v36 + 8 * v28 - v63 < 0x20)
        goto LABEL_166;
      v65 = (v64 >> 3) + 1;
      v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
      v32 += v66;
      v67 = (__int128 *)(v18 + 8 * v49 + 16);
      v68 = (_OWORD *)(v36 + 8 * v26 + 8 * v49 - 8 * v27 + 16);
      v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v70 = *v67;
        *(v68 - 1) = *(v67 - 1);
        *v68 = v70;
        v67 += 2;
        v68 += 2;
        v69 -= 4;
      }
      while (v69);
      v50 += v66;
      if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_166:
        do
        {
          v71 = *(_QWORD *)v32;
          v32 += 8;
          *(_QWORD *)v50 = v71;
          v50 += 8;
        }
        while (v32 != v29);
      }
    }
    v72 = v127;
    v73 = v129;
    v127 = (char *)v25;
    v128 = v50;
    v129 = v36 + 8 * v35;
    if (v72)
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v130 + 40))(v130, v72, v73 - (_QWORD)v72);
LABEL_24:
    v24 += 24;
    v18 = (unint64_t)v25;
    v23 = v117;
  }
  v121 = 0;
  v122 = 0;
  v123 = 0;
  {
    v110 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v110, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v124 = mdm::Allocator::instance(void)::alloc;
  std::vector<std::shared_ptr<md::LabelStyle>,geo::StdAllocator<std::shared_ptr<md::LabelStyle>,mdm::Allocator>>::reserve((uint64_t)&v121, ((char *)v132 - (char *)v131) >> 4);
  md::LabelStyleCache::requestStyles(*(_QWORD *)(*(_QWORD *)a1 + 336), &v131, (uint64_t)&v121, &v127);
  v76 = *a2;
  v75 = a2[1];
  if (v112 && (v77 = 0xAAAAAAAAAAAAAAABLL * ((v75 - v76) >> 3), v77 > 0x14))
  {
    v78 = MEMORY[0x1E0C809B0];
    v118[0] = MEMORY[0x1E0C809B0];
    v118[1] = 3221225472;
    v118[2] = ___ZN2md18LabelFeatureStyler18styleLabelFeaturesERNSt3__16vectorINS_22LabelFeatureStylerItemEN3geo12StdAllocatorIS3_N3mdm9AllocatorEEEEEbbPNS4_9TaskQueueE_block_invoke;
    v118[3] = &__block_descriptor_69_e8_v16__0Q8l;
    v118[4] = v77;
    v118[5] = a2;
    v118[6] = &v131;
    v118[7] = &v121;
    v120 = a3;
    v119 = v116;
    v79 = v118;
    v137[0] = &off_1E42B55F0;
    v80 = (void *)objc_msgSend(v79, "copy");
    v137[1] = v80;

    geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(&v135, (uint64_t)v137);
    v139 = 0;
    v81 = operator new(0x20uLL);
    *v81 = &off_1E42D5ED0;
    v81[1] = &off_1E42B55F0;
    v81[2] = MEMORY[0x1A1AF5730](v136);
    v82 = v136;
    v136 = 0;

    v139 = v81;
    if (*(_BYTE *)(v112 + 58))
      v83 = *(id *)(v112 + 72);
    else
      v83 = 0;
    v84 = *(id *)(v112 + 16);
    *(_QWORD *)buf = v78;
    v141 = 3321888768;
    v142 = ___ZN3geo9TaskQueue5applyEmNSt3__18functionIFvmEEE_block_invoke;
    v143 = &unk_1E42E9D20;
    v85 = v83;
    v144 = v85;
    v86 = v145;
    v87 = (uint64_t)v139;
    if (v139)
    {
      if (v139 != v138)
      {
        v87 = (*(uint64_t (**)(void))(*v139 + 16))();
        goto LABEL_102;
      }
      v146 = v145;
      (*(void (**)(_QWORD *, _BYTE *))(v138[0] + 24))(v138, v145);
    }
    else
    {
LABEL_102:
      v146 = (_BYTE *)v87;
    }
    dispatch_apply((v77 + 19) / 0x14, v84, buf);

    if (v146 == v145)
    {
      v88 = 4;
LABEL_108:
      (*(void (**)(_QWORD *))(*v86 + 8 * v88))(v86);
    }
    else if (v146)
    {
      v88 = 5;
      v86 = v146;
      goto LABEL_108;
    }

    v89 = v139;
    if (v139 == v138)
    {
      v90 = 4;
      v89 = v138;
LABEL_113:
      (*(void (**)(void))(*v89 + 8 * v90))();
    }
    else if (v139)
    {
      v90 = 5;
      goto LABEL_113;
    }
    v135 = &off_1E42B55F0;

  }
  else
  {
    for (; v76 != v75; v76 += 24)
      (*(void (**)(_QWORD, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)v76 + 576))(*(_QWORD *)v76, &v131[2 * *((_QWORD *)v76 + 1)], v121 + 16 * *((_QWORD *)v76 + 1), *((_QWORD *)v76 + 2), a3, v116, 0);
  }
  if (v111)
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v91 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v91))
    {
      *(_WORD *)buf = 0;
      v92 = "LabelsTileDecodeStyleFeatures";
      goto LABEL_124;
    }
  }
  else
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v91 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v91))
    {
      *(_WORD *)buf = 0;
      v92 = "LabelsStyleFeatures";
LABEL_124:
      _os_signpost_emit_with_name_impl(&dword_19F029000, v91, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v92, (const char *)&unk_1A0189141, buf, 2u);
    }
  }

  v93 = v121;
  if (v121)
  {
    v94 = v122;
    v95 = v121;
    if (v122 != v121)
    {
      do
      {
        v96 = *(std::__shared_weak_count **)(v94 - 8);
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v96->__on_zero_shared)(v96, v95);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v94 -= 16;
      }
      while (v94 != v93);
      v95 = v121;
    }
    v122 = v93;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v124 + 40))(v124, v95, v123 - v95);
  }
  v99 = v126;
  if (v126)
  {
    v100 = (unint64_t *)&v126->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (v127)
  {
    v128 = v127;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v130 + 40))(v130, v127, v129 - (_QWORD)v127);
  }
  v102 = v131;
  if (v131)
  {
    v103 = v132;
    v104 = v131;
    if (v132 != v131)
    {
      do
      {
        v105 = (std::__shared_weak_count *)*(v103 - 1);
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t *))v105->__on_zero_shared)(v105, v104);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v103 -= 2;
      }
      while (v103 != v102);
      v104 = v131;
    }
    v132 = v102;
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v134 + 40))(v134, v104, v133 - (_QWORD)v104);
  }
}

void sub_19F071B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v46;
  uint64_t v47;

  v46 = *(_QWORD **)(v44 - 184);
  if (v46 == (_QWORD *)(v44 - 208))
  {
    v47 = 4;
    v46 = (_QWORD *)(v44 - 208);
  }
  else
  {
    if (!v46)
      goto LABEL_6;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_6:

  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a25);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a31)
  {
    a32 = a31;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a34 + 40))(a34, a31, a33 - a31);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a35);
  _Unwind_Resume(a1);
}

void md::LineLabelFeature::populateStyleQueries(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17[3];
  uint64_t v18;

  v16 = 0;
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1)
    && (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v16 = v6;
  }
  else
  {
    v6 = 0;
  }
  md::createFeatureAttributeSet((gss::Allocator *)v17, a1 + 52);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v15, a3, v17, (_QWORD *)v6);
  if (v17[0])
  {
    v17[1] = v17[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 40))(v18, v17[0], v17[2] - v17[0]);
  }
  v9 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v15);
  }
  else
  {
    if (v9)
    {
      *v9 = v15;
      v15 = 0uLL;
    }
    v10 = v9 + 1;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v16;
  if (v16)
  {
    if (*(char *)(v16 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), *(_QWORD *)v16, *(_QWORD *)(v16 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v14, 0x1032C402ED93987);
  }
}

void sub_19F071E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t md::LineLabelFeature::publicLocale(md::LineLabelFeature *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 48);
  v3 = *((_QWORD *)this + 49) - v2;
  v4 = v2 + (a2 << 6) + 32;
  if (a2 >= v3 >> 6)
    return 0;
  else
    return v4;
}

void md::LabelStyleCache::styleQueryForFeatureAttributes(unint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *__src)
{
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  gss::Allocator *v30;
  uint64_t v31;
  __int16 v32;
  _QWORD v33[2];
  void *__dst[2];
  unint64_t v35;
  _BYTE v36[15];
  char v37;

  v5 = *a2;
  if (!*a2)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v6 = __src;
  memset(v36, 0, sizeof(v36));
  v37 = 1;
  if (__src)
  {
    if (*((char *)__src + 23) < 0)
    {
      if (!__src[1])
        goto LABEL_40;
    }
    else if (!*((_BYTE *)__src + 23))
    {
      goto LABEL_40;
    }
    v10 = *(_QWORD *)(v5 + 16);
    v9 = *(std::__shared_weak_count **)(v5 + 24);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          goto LABEL_40;
LABEL_14:
        if (*((char *)v6 + 23) < 0)
        {
          v14 = v6[1];
          if (v14 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          v6 = (_QWORD *)*v6;
          if (v14 < 0x17)
          {
LABEL_16:
            HIBYTE(v35) = v14;
            v15 = __dst;
            if (!v14)
              goto LABEL_26;
            goto LABEL_25;
          }
        }
        else
        {
          v14 = *((unsigned __int8 *)v6 + 23);
          if (v14 < 0x17)
            goto LABEL_16;
        }
        v16 = (v14 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v16 = v14 | 7;
        v17 = v16 + 1;
        v15 = (void **)operator new(v16 + 1);
        __dst[1] = (void *)v14;
        v35 = v17 | 0x8000000000000000;
        __dst[0] = v15;
LABEL_25:
        memmove(v15, v6, v14);
LABEL_26:
        *((_BYTE *)v15 + v14) = 0;
        v18 = *(_QWORD *)(*a2 + 16);
        v19 = *(std::__shared_weak_count **)(*a2 + 24);
        v33[0] = v18;
        v33[1] = v19;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = *(_QWORD **)(v18 + 88);
        if (v22
          && (v23 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>(v22, (uint64_t)__dst)) != 0)
        {
          v24 = *((_DWORD *)v23 + 10);
        }
        else
        {
          LOWORD(v24) = -1;
        }
        *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v36, 0x10006u) = v24;
        if (v19)
        {
          v25 = (unint64_t *)&v19->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (SHIBYTE(v35) < 0)
          operator delete(__dst[0]);
        goto LABEL_40;
      }
    }
    if (v10)
      goto LABEL_14;
  }
LABEL_40:
  LOWORD(__dst[0]) = 0;
  if (gss::FeatureAttributeSet::getValueForAttributeKey(a3, 65557, __dst))
  {
    v27 = LOBYTE(__dst[0]);
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v36, 0x10015u) = v27;
  }
  LOWORD(v33[0]) = 0;
  if (gss::FeatureAttributeSet::getValueForAttributeKey(a3, 65538, v33))
  {
    v28 = LOBYTE(v33[0]);
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v36, 0x10002u) = v28;
  }
  v32 = 0;
  if (gss::FeatureAttributeSet::getValueForAttributeKey(a3, 93, &v32))
  {
    v29 = v32;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v36, 0x5Du) = v29;
  }
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(a1, *a2, (gss::FeatureAttributeSet *)a3, (gss::QueryOverrides *)v36);
  if (!v36[14])
  {
    if (*(_QWORD *)v36)
    {
      v31 = gss::Allocator::instance(v30);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v31 + 40))(v31, *(_QWORD *)v36, *(unsigned __int16 *)&v36[12]);
    }
  }
}

void sub_19F072184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a18);
  _Unwind_Resume(a1);
}

uint64_t geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;

  v4 = *((unsigned __int16 *)a1 + 5);
  if (!*((_WORD *)a1 + 5))
    goto LABEL_28;
  v5 = *a1;
  if (*((_BYTE *)a1 + 15))
  {
    if (v4 >= 0x1E)
    {
      v11 = (_DWORD *)*a1;
      v12 = *((unsigned __int16 *)a1 + 5);
      do
      {
        v13 = v12 >> 1;
        v14 = &v11[v12 >> 1];
        v16 = *v14;
        v15 = v14 + 1;
        v12 += ~(v12 >> 1);
        if (v16 < a2)
          v11 = v15;
        else
          v12 = v13;
      }
      while (v12);
      if (v11 == (_DWORD *)(v5 + 4 * v4))
        goto LABEL_28;
      if (*v11 != a2)
        goto LABEL_28;
      v10 = ((unint64_t)v11 - v5) >> 2;
      if ((_DWORD)v4 == (unsigned __int16)v10)
        goto LABEL_28;
    }
    else
    {
      v6 = 0;
      while (1)
      {
        v7 = *(_DWORD *)(v5 + 4 * v6);
        if (v7 >= a2)
          break;
        if (v4 == ++v6)
          goto LABEL_28;
      }
      if (v7 == a2)
        LOWORD(v10) = v6;
      else
        LOWORD(v10) = *((_WORD *)a1 + 5);
      if ((_DWORD)v4 == (unsigned __int16)v10)
        goto LABEL_28;
    }
  }
  else
  {
    v8 = 4 * v4;
    v9 = (_DWORD *)*a1;
    while (*v9 != a2)
    {
      ++v9;
      v8 -= 4;
      if (!v8)
      {
        v9 = (_DWORD *)(v5 + 4 * v4);
        break;
      }
    }
    v10 = ((unint64_t)v9 - v5) >> 2;
    if ((_DWORD)v4 == (unsigned __int16)v10)
    {
LABEL_28:
      if (*((_BYTE *)a1 + 14))
        goto LABEL_67;
      if (*((_WORD *)a1 + 5))
      {
        v18 = *a1;
        if (*((_BYTE *)a1 + 15))
        {
          if (v4 >= 0x1E)
          {
            v24 = (_DWORD *)*a1;
            v25 = *((unsigned __int16 *)a1 + 5);
            do
            {
              v26 = v25 >> 1;
              v27 = &v24[v25 >> 1];
              v29 = *v27;
              v28 = v27 + 1;
              v25 += ~(v25 >> 1);
              if (v29 < a2)
                v24 = v28;
              else
                v25 = v26;
            }
            while (v25);
            if (v24 == (_DWORD *)(v18 + 4 * v4) || *v24 != a2)
            {
LABEL_54:
              if ((_DWORD)v4 == *((unsigned __int16 *)a1 + 6))
              {
                if ((_DWORD)v4 == 0xFFFF)
                {
                  LOWORD(v4) = -1;
                  goto LABEL_67;
                }
                v30 = 2 * (v4 & 0x7FFF);
                if (v30 <= 4)
                  v31 = 4;
                else
                  v31 = v30;
                v32 = (8 * (v31 >> 1)) | 2;
                v33 = gss::Allocator::instance((gss::Allocator *)a1);
                v34 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v33 + 16))(v33, (unsigned __int16)(v32 + 2 * v31) & 0xFFFE, 1);
                v35 = v34;
                if (*a1)
                {
                  if (*((_WORD *)a1 + 5))
                  {
                    v34 = memmove(v34, (const void *)*a1, 4 * *((unsigned __int16 *)a1 + 5));
                    if (*((_WORD *)a1 + 5))
                      v34 = memmove((char *)v35 + v32, (const void *)(*a1 + *((unsigned __int16 *)a1 + 4)), 2 * *((unsigned __int16 *)a1 + 5));
                  }
                  v36 = gss::Allocator::instance((gss::Allocator *)v34);
                  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 40))(v36, *a1, *((unsigned __int16 *)a1 + 6));
                }
                *((_WORD *)a1 + 6) = v31;
                *a1 = v35;
                *((_WORD *)a1 + 4) = v32;
                LODWORD(v4) = *((unsigned __int16 *)a1 + 5);
              }
              else
              {
                v35 = (_DWORD *)*a1;
                v32 = *((_WORD *)a1 + 4);
              }
              v35[v4] = a2;
              *(_WORD *)((char *)v35 + 2 * v4 + v32) = 0;
              LOWORD(v4) = *((_WORD *)a1 + 5) + 1;
              *((_WORD *)a1 + 5) = v4;
              *((_BYTE *)a1 + 15) = 0;
LABEL_67:
              v17 = (unsigned __int16)v4 - 1;
              return *a1 + *((unsigned __int16 *)a1 + 4) + 2 * v17;
            }
            v21 = ((unint64_t)v24 - v18) >> 2;
          }
          else
          {
            v19 = 0;
            while (1)
            {
              v20 = *(_DWORD *)(v18 + 4 * v19);
              if (v20 >= a2)
                break;
              if (v4 == ++v19)
                goto LABEL_54;
            }
            if (v20 == a2)
              LOWORD(v21) = v19;
            else
              LOWORD(v21) = *((_WORD *)a1 + 5);
          }
        }
        else
        {
          v22 = 4 * v4;
          v23 = (_DWORD *)*a1;
          while (*v23 != a2)
          {
            ++v23;
            v22 -= 4;
            if (!v22)
            {
              v23 = (_DWORD *)(v18 + 4 * v4);
              break;
            }
          }
          v21 = ((unint64_t)v23 - v18) >> 2;
        }
      }
      else
      {
        LOWORD(v21) = 0;
      }
      if ((_DWORD)v4 != (unsigned __int16)v21)
        goto LABEL_67;
      goto LABEL_54;
    }
  }
  v17 = (unsigned __int16)v10;
  return *a1 + *((unsigned __int16 *)a1 + 4) + 2 * v17;
}

void gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(unint64_t *a1, uint64_t a2, gss::FeatureAttributeSet *a3, gss::QueryOverrides *a4)
{
  pthread_rwlock_t *v6;
  geo::read_write_lock *v7;
  const char *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t ***v21;
  uint64_t **v22;
  unsigned __int16 *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned int *v27;
  unint64_t v29;
  uint64_t *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  geo::read_write_lock *v40;
  const char *v41;
  std::__shared_weak_count *v42;
  gss::Allocator *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  geo::read_write_lock *v54;
  const char *v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unsigned int *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t ***v67;
  uint64_t **v68;
  unsigned __int16 *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  unsigned int *v73;
  unint64_t v75;
  uint64_t *v76;
  unsigned __int16 *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  float v84;
  float v85;
  _BOOL8 v86;
  unint64_t v87;
  unint64_t v88;
  size_t prime;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  size_t v95;
  size_t v96;
  size_t v97;
  _QWORD *i;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  size_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  geo::read_write_lock *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unsigned int *v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  unsigned __int16 v134;
  unsigned __int16 v135;
  unsigned __int16 v136;
  char v137;
  __int128 v138;
  char v139;

  gss::StyleKey::StyleKey((gss::StyleKey *)&v129, a3, a4);
  v6 = (pthread_rwlock_t *)(a2 + 120);
  v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 120));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  v10 = ((char *)v130 - (char *)v129) >> 3;
  if (v130 != v129)
  {
    v11 = v129;
    do
    {
      v12 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v11) ^ v10;
      v10 = (*((unsigned __int16 *)v11 + 2) - 0x61C8864680B583EBLL + (v12 << 6) + (v12 >> 2)) ^ v12;
      v11 += 2;
    }
    while (v11 != v130);
  }
  if (v135)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      if (v15 < v135)
      {
        v14 = &v133[v15];
        v9 = (unsigned __int16 *)((char *)v133 + 2 * v15 + v134);
      }
      v13 ^= (*v9
            - 0x61C8864680B583EBLL
            + ((((v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + *v14) ^ v13) << 6)
            + ((((v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + *v14) ^ v13) >> 2)) ^ ((v13 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v13 >> 2)
                                                                                       + *v14);
      v16 = v15 + 1;
      if (v15 + 1 < v135)
        ++v15;
      else
        v15 = v135;
    }
    while (v16 < v135);
    v17 = *(int8x8_t *)(a2 + 40);
    if (!*(_QWORD *)&v17)
      goto LABEL_58;
  }
  else
  {
    v13 = 0;
    v17 = *(int8x8_t *)(a2 + 40);
    if (!*(_QWORD *)&v17)
      goto LABEL_58;
  }
  v18 = v13 ^ v10;
  v19 = (uint8x8_t)vcnt_s8(v17);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    v20 = v18;
    if (v18 >= *(_QWORD *)&v17)
      v20 = v18 % *(_QWORD *)&v17;
  }
  else
  {
    v20 = (*(_QWORD *)&v17 - 1) & v18;
  }
  v21 = *(uint64_t ****)(*(_QWORD *)(a2 + 32) + 8 * v20);
  if (!v21)
    goto LABEL_58;
  v22 = *v21;
  if (!*v21)
    goto LABEL_58;
  v23 = (unsigned __int16 *)((char *)v133 + v134);
  while (1)
  {
    v24 = (unint64_t)v22[1];
    if (v24 != v18)
    {
      if (v19.u32[0] <= 1uLL)
      {
        v24 &= *(_QWORD *)&v17 - 1;
      }
      else if (v24 >= *(_QWORD *)&v17)
      {
        v24 %= *(_QWORD *)&v17;
      }
      if (v24 != v20)
        goto LABEL_58;
      goto LABEL_26;
    }
    v26 = v22[2];
    v25 = v22[3];
    if ((char *)v25 - (char *)v26 == (char *)v130 - (char *)v129)
    {
      if (v26 != v25)
      {
        v27 = v129;
        while (*(_DWORD *)v26 == *v27 && *((unsigned __int16 *)v26 + 2) == *((unsigned __int16 *)v27 + 2))
        {
          ++v26;
          v27 += 2;
          if (v26 == v25)
            goto LABEL_37;
        }
        goto LABEL_26;
      }
LABEL_37:
      v29 = *((unsigned __int16 *)v22 + 29);
      if ((_DWORD)v29 == v135)
      {
        if (!v135)
          goto LABEL_51;
        v30 = v22[6];
        if (*(_DWORD *)v30 == *v133)
        {
          v31 = (unsigned __int16 *)((char *)v30 + *((unsigned __int16 *)v22 + 28));
          if (*v31 == *v23)
            break;
        }
      }
    }
LABEL_26:
    v22 = (uint64_t **)*v22;
    if (!v22)
      goto LABEL_58;
  }
  v32 = 1;
  while (v29 != v32)
  {
    v33 = v32;
    if (*((_DWORD *)v30 + v32) == v133[v32])
    {
      ++v32;
      if (v31[v33] == v23[v33])
        continue;
    }
    if (v33 < v29)
      goto LABEL_26;
    break;
  }
  if (v22)
  {
LABEL_51:
    *a1 = 0;
    a1[1] = 0;
    v34 = (std::__shared_weak_count *)v22[9];
    if (v34)
    {
      v35 = std::__shared_weak_count::lock(v34);
      a1[1] = (unint64_t)v35;
      if (v35)
      {
        v36 = (unint64_t)v22[8];
        *a1 = v36;
        if (v36)
          goto LABEL_183;
        v37 = v35;
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
  }
LABEL_58:
  v40 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 120));
  if ((_DWORD)v40)
    geo::read_write_lock::logFailure(v40, (uint64_t)"unlock", v41);
  v42 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)&v138 = *(_QWORD *)a2;
  if (!v42 || (v43 = (gss::Allocator *)std::__shared_weak_count::lock(v42), (*((_QWORD *)&v138 + 1) = v43) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
    return;
  }
  v44 = gss::Allocator::instance(v43);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, 352, 8);
  *(_OWORD *)(v45 + 8) = 0u;
  *(_QWORD *)v45 = &off_1E42E5A40;
  *(_QWORD *)(v45 + 24) = v44;
  v46 = v45 + 32;
  v47 = v138;
  v138 = 0u;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  gss::StylesheetQuery<gss::PropertyID>::StylesheetQuery(v45 + 32, v47, *((std::__shared_weak_count **)&v47 + 1), (uint64_t)&v129, (uint64_t)&v133);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  *a1 = v46;
  a1[1] = v45;
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 120));
  if ((_DWORD)v54)
    geo::read_write_lock::logFailure(v54, (uint64_t)"write lock", v55);
  v57 = ((char *)v130 - (char *)v129) >> 3;
  if (v130 != v129)
  {
    v58 = v129;
    do
    {
      v59 = ((v57 << 6) - 0x61C8864680B583EBLL + (v57 >> 2) + *v58) ^ v57;
      v57 = (*((unsigned __int16 *)v58 + 2) - 0x61C8864680B583EBLL + (v59 << 6) + (v59 >> 2)) ^ v59;
      v58 += 2;
    }
    while (v58 != v130);
  }
  if (v135)
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    do
    {
      if (v62 < v135)
      {
        v61 = &v133[v62];
        v56 = (unsigned __int16 *)((char *)v133 + 2 * v62 + v134);
      }
      v60 ^= (*v56
            - 0x61C8864680B583EBLL
            + ((((v60 << 6) - 0x61C8864680B583EBLL + (v60 >> 2) + *v61) ^ v60) << 6)
            + ((((v60 << 6) - 0x61C8864680B583EBLL + (v60 >> 2) + *v61) ^ v60) >> 2)) ^ ((v60 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v60 >> 2)
                                                                                       + *v61);
      v63 = v62 + 1;
      if (v62 + 1 < v135)
        ++v62;
      else
        v62 = v135;
    }
    while (v63 < v135);
  }
  else
  {
    v60 = 0;
  }
  v64 = v60 ^ v57;
  v65 = *(_QWORD *)(a2 + 40);
  if (!v65)
    goto LABEL_122;
  v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
  v66.i16[0] = vaddlv_u8(v66);
  if (v66.u32[0] > 1uLL)
  {
    v46 = v60 ^ v57;
    if (v64 >= v65)
      v46 = v64 % v65;
  }
  else
  {
    v46 = (v65 - 1) & v64;
  }
  v67 = *(uint64_t ****)(*(_QWORD *)(a2 + 32) + 8 * v46);
  if (!v67 || (v68 = *v67) == 0)
  {
LABEL_122:
    v80 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 16))(*(_QWORD *)(a2 + 64), 80, 8);
    *(_QWORD *)&v138 = v80;
    *((_QWORD *)&v138 + 1) = a2 + 64;
    v139 = 0;
    *v80 = 0;
    v80[1] = v64;
    gss::StyleKey::StyleKey((gss::StyleKey *)(v80 + 2), (const gss::FeatureAttributeSet *)&v129, (const gss::QueryOverrides *)&v133);
    v80[8] = *a1;
    v81 = a1[1];
    v80[9] = v81;
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 16);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v139 = 1;
    v84 = (float)(unint64_t)(*(_QWORD *)(a2 + 72) + 1);
    v85 = *(float *)(a2 + 80);
    if (v65 && (float)(v85 * (float)v65) >= v84)
      goto LABEL_174;
    v86 = 1;
    if (v65 >= 3)
      v86 = (v65 & (v65 - 1)) != 0;
    v87 = v86 | (2 * v65);
    v88 = vcvtps_u32_f32(v84 / v85);
    if (v87 <= v88)
      prime = v88;
    else
      prime = v87;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v65 = *(_QWORD *)(a2 + 40);
    if (prime <= v65)
    {
      if (prime >= v65)
        goto LABEL_161;
      v102 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 72) / *(float *)(a2 + 80));
      if (v65 < 3 || (v103 = (uint8x8_t)vcnt_s8((int8x8_t)v65), v103.i16[0] = vaddlv_u8(v103), v103.u32[0] > 1uLL))
      {
        v102 = std::__next_prime(v102);
      }
      else
      {
        v104 = 1 << -(char)__clz(v102 - 1);
        if (v102 >= 2)
          v102 = v104;
      }
      if (prime <= v102)
        prime = v102;
      if (prime >= v65)
      {
        v65 = *(_QWORD *)(a2 + 40);
LABEL_161:
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v64 >= v65)
            v46 = v64 % v65;
          else
            v46 = v64;
        }
        else
        {
          v46 = (v65 - 1) & v64;
        }
LABEL_174:
        v109 = *(_QWORD **)(*(_QWORD *)(a2 + 32) + 8 * v46);
        if (v109)
        {
          v110 = v138;
          *(_QWORD *)v138 = *v109;
          *v109 = v110;
        }
        else
        {
          v111 = v138;
          *(_QWORD *)v138 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a2 + 56) = v111;
          *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v46) = a2 + 56;
          if (*(_QWORD *)v111)
          {
            v112 = *(_QWORD *)(*(_QWORD *)v111 + 8);
            if ((v65 & (v65 - 1)) != 0)
            {
              if (v112 >= v65)
                v112 %= v65;
            }
            else
            {
              v112 &= v65 - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v112) = v111;
          }
        }
        ++*(_QWORD *)(a2 + 72);
        goto LABEL_183;
      }
      if (!prime)
      {
        v116 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = 0;
        if (v116)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), v116, 8 * *(_QWORD *)(a2 + 40));
        v65 = 0;
        *(_QWORD *)(a2 + 40) = 0;
        goto LABEL_161;
      }
    }
    v90 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a2 + 48) + 16))(*(_QWORD *)(a2 + 48), 8 * prime, 8);
    v91 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v90;
    if (v91)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), v91, 8 * *(_QWORD *)(a2 + 40));
    v92 = 0;
    *(_QWORD *)(a2 + 40) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v92++) = 0;
    while (prime != v92);
    v94 = a2 + 56;
    v93 = *(_QWORD **)(a2 + 56);
    if (!v93)
    {
LABEL_160:
      v65 = prime;
      goto LABEL_161;
    }
    v95 = v93[1];
    v96 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v97 = v95 & v96;
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v97) = v94;
      for (i = (_QWORD *)*v93; *v93; i = (_QWORD *)*v93)
      {
        v99 = i[1] & v96;
        if (v99 == v97)
        {
          v93 = i;
        }
        else
        {
          v100 = *(_QWORD *)(a2 + 32);
          if (*(_QWORD *)(v100 + 8 * v99))
          {
            *v93 = *i;
            v101 = 8 * v99;
            *i = **(_QWORD **)(*(_QWORD *)(a2 + 32) + v101);
            **(_QWORD **)(*(_QWORD *)(a2 + 32) + v101) = i;
          }
          else
          {
            *(_QWORD *)(v100 + 8 * v99) = v93;
            v93 = i;
            v97 = v99;
          }
        }
      }
      goto LABEL_160;
    }
    if (v95 >= prime)
      v95 %= prime;
    *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v95) = v94;
    v105 = (_QWORD *)*v93;
    if (!*v93)
      goto LABEL_160;
    while (1)
    {
      v107 = v105[1];
      if (v107 >= prime)
        v107 %= prime;
      if (v107 != v95)
      {
        v108 = *(_QWORD *)(a2 + 32);
        if (!*(_QWORD *)(v108 + 8 * v107))
        {
          *(_QWORD *)(v108 + 8 * v107) = v93;
          goto LABEL_165;
        }
        *v93 = *v105;
        v106 = 8 * v107;
        *v105 = **(_QWORD **)(*(_QWORD *)(a2 + 32) + v106);
        **(_QWORD **)(*(_QWORD *)(a2 + 32) + v106) = v105;
        v105 = v93;
      }
      v107 = v95;
LABEL_165:
      v93 = v105;
      v105 = (_QWORD *)*v105;
      v95 = v107;
      if (!v105)
        goto LABEL_160;
    }
  }
  v69 = (unsigned __int16 *)((char *)v133 + v134);
  while (1)
  {
    v70 = (unint64_t)v68[1];
    if (v70 != v64)
    {
      if (v66.u32[0] <= 1uLL)
      {
        v70 &= v65 - 1;
      }
      else if (v70 >= v65)
      {
        v70 %= v65;
      }
      if (v70 != v46)
        goto LABEL_122;
      goto LABEL_98;
    }
    v72 = v68[2];
    v71 = v68[3];
    if ((char *)v71 - (char *)v72 == (char *)v130 - (char *)v129)
    {
      if (v72 != v71)
      {
        v73 = v129;
        while (*(_DWORD *)v72 == *v73 && *((unsigned __int16 *)v72 + 2) == *((unsigned __int16 *)v73 + 2))
        {
          ++v72;
          v73 += 2;
          if (v72 == v71)
            goto LABEL_109;
        }
        goto LABEL_98;
      }
LABEL_109:
      v75 = *((unsigned __int16 *)v68 + 29);
      if ((_DWORD)v75 == v135)
      {
        if (!v135)
          break;
        v76 = v68[6];
        if (*(_DWORD *)v76 == *v133)
        {
          v77 = (unsigned __int16 *)((char *)v76 + *((unsigned __int16 *)v68 + 28));
          if (*v77 == *v69)
          {
            v78 = 1;
            do
            {
              if (v75 == v78)
                goto LABEL_200;
              v79 = v78;
              if (*((_DWORD *)v76 + v78) != v133[v78])
                break;
              ++v78;
            }
            while (v77[v79] == v69[v79]);
            if (v79 >= v75)
              break;
          }
        }
      }
    }
LABEL_98:
    v68 = (uint64_t **)*v68;
    if (!v68)
      goto LABEL_122;
  }
LABEL_200:
  v117 = (std::__shared_weak_count *)v68[9];
  if (!v117 || (v118 = std::__shared_weak_count::lock(v117)) == 0)
  {
    v120 = 0;
    v124 = *a1;
    v123 = a1[1];
    if (!v123)
      goto LABEL_210;
    goto LABEL_208;
  }
  v119 = (unint64_t)v68[8];
  if (v119)
  {
    v120 = (std::__shared_weak_count *)a1[1];
    *a1 = v119;
    a1[1] = (unint64_t)v118;
    if (v120)
    {
      v121 = (unint64_t *)&v120->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      goto LABEL_215;
    }
    goto LABEL_216;
  }
  v120 = v118;
  v124 = *a1;
  v123 = a1[1];
  if (v123)
  {
LABEL_208:
    v125 = (unint64_t *)(v123 + 16);
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
LABEL_210:
  v127 = (std::__shared_weak_count *)v68[9];
  v68[8] = (uint64_t *)v124;
  v68[9] = (uint64_t *)v123;
  if (v127)
    std::__shared_weak_count::__release_weak(v127);
  if (!v120)
    goto LABEL_216;
  v128 = (unint64_t *)&v120->__shared_owners_;
  do
    v122 = __ldaxr(v128);
  while (__stlxr(v122 - 1, v128));
LABEL_215:
  if (!v122)
  {
    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
    std::__shared_weak_count::__release_weak(v120);
    v6 = (pthread_rwlock_t *)(a2 + 120);
  }
  else
  {
LABEL_216:
    v6 = (pthread_rwlock_t *)(a2 + 120);
  }
LABEL_183:
  v113 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if ((_DWORD)v113)
    geo::read_write_lock::logFailure(v113, (uint64_t)"unlock", v114);
  if (!v137 && v133)
  {
    v115 = gss::Allocator::instance(v113);
    (*(void (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v115 + 40))(v115, v133, v136);
    v133 = 0;
  }
  if (v129)
  {
    v130 = v129;
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v132 + 40))(v132, v129, v131 - (_QWORD)v129);
  }
}

void sub_19F073018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  pthread_rwlock_t *v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, pthread_rwlock_t *);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,gss::Allocator>>>::reset[abi:nn180100]((uint64_t)va2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  gss::StyleKey::~StyleKey((gss::StyleKey *)va1);
  _Unwind_Resume(a1);
}

uint64_t geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::shrink_to_fit(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  gss::Allocator *v7;
  uint64_t v8;

  if (!*(_BYTE *)(result + 14))
  {
    v1 = result;
    v2 = *(unsigned __int16 *)(result + 10);
    v3 = *(unsigned __int8 *)(result + 15);
    if (v2 != *(unsigned __int16 *)(result + 12) || !*(_BYTE *)(result + 15))
    {
      v4 = (4 * v2) | 2;
      v5 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 16))(v5, (unsigned __int16)(v4 + 2 * v2) & 0xFFFE, 1);
      v6 = result;
      if (*(_QWORD *)v1)
      {
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1, (_DWORD *)result, (_WORD *)(result + v4), v3 == 0);
        v8 = gss::Allocator::instance(v7);
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)v1, *(unsigned __int16 *)(v1 + 12));
      }
      *(_WORD *)(v1 + 12) = v2;
      *(_QWORD *)v1 = v6;
      *(_WORD *)(v1 + 8) = v4;
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>(_QWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (uint64_t *)a2;
  else
    v4 = *(uint64_t **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v19 = v12[1];
            if (v19 == v8)
            {
              v20 = *((unsigned __int8 *)v12 + 39);
              if ((v20 & 0x80u) == 0)
                v21 = *((unsigned __int8 *)v12 + 39);
              else
                v21 = v12[3];
              if (v21 == v5)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v4, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v22 = 0;
                  while (*((unsigned __int8 *)v12 + v22 + 16) == *((unsigned __int8 *)v4 + v22))
                  {
                    if (v20 == ++v22)
                      return v12;
                  }
                }
              }
            }
            else if ((v19 & v13) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v15 = v12[1];
          if (v15 == v8)
          {
            v16 = *((unsigned __int8 *)v12 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v12 + 39);
            else
              v17 = v12[3];
            if (v17 == v5)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v4, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v18 = 0;
                while (*((unsigned __int8 *)v12 + v18 + 16) == *((unsigned __int8 *)v4 + v18))
                {
                  if (v16 == ++v18)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v7)
              v15 %= *(_QWORD *)&v7;
            if (v15 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t md::LineLabelFeature::setStyle(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6)
{
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  md::SharedDeviceResources *v21;
  uint64_t result;

  md::LabelFeature::setStyle(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD **)(a1 + 272);
  v8 = *(_QWORD **)(a1 + 280);
  while (v7 != v8)
  {
    v9 = (std::__shared_weak_count *)v7[3];
    v7[2] = 0;
    v7[3] = 0;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)v7[5];
    v7[4] = 0;
    v7[5] = 0;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)v7[7];
    v7[6] = 0;
    v7[7] = 0;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)v7[9];
    v7[8] = 0;
    v7[9] = 0;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v7 += 10;
  }
  *(_DWORD *)(a1 + 304) = -1;
  v21 = *(md::SharedDeviceResources **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v21)
  {
    md::SharedDeviceResources::~SharedDeviceResources(v21);
    MEMORY[0x1A1AF4E00]();
  }
  result = std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy(a1 + 320, *(_QWORD **)(a1 + 328));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 433) = 1;
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::destroy(v3, a2[1]);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 136);
  }
  return result;
}

void gss::BaseRenderStyle<gss::PropertyID>::resolveConditionalStyles(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;
  _WORD *v9;
  _BYTE *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  BOOL v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  _OWORD *v53;
  int v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  _OWORD *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  _QWORD *v67;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  _WORD *v73;
  int v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _OWORD *v78;
  int v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  void **v92;

  v4 = *(_QWORD *)(a1 + 16 * a3 + 16);
  if (v4)
  {
    v89 = a3;
    v91 = a1 + 16 * a3;
    v5 = (unint64_t *)(v91 + 48);
    v92 = (void **)(v91 + 48);
    if (*(_WORD *)(v4 + 64))
    {
      v7 = *(uint64_t **)(v4 + 56);
      v8 = &v7[2 * *(unsigned __int16 *)(v4 + 64)];
      v9 = (_WORD *)(v91 + 56);
      v10 = (_BYTE *)(v91 + 60);
      v11 = (_WORD *)(v91 + 58);
      while (1)
      {
        v12 = *v7;
        if (*(_WORD *)(*v7 + 136))
        {
          v13 = *(unsigned __int16 *)(a2 + 10);
          if (*(_WORD *)(a2 + 10))
          {
            v14 = *(_QWORD *)(v12 + 128);
            v15 = v14 + 24 * *(unsigned __int16 *)(*v7 + 136);
            v16 = *(_QWORD *)a2;
            v17 = (unsigned __int16 *)(*(_QWORD *)a2 + 4 * *(unsigned __int16 *)(a2 + 10));
            v18 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8);
            v19 = (unsigned __int16 *)*(unsigned __int8 *)(a2 + 15);
            if (*(_BYTE *)(a2 + 15))
            {
              if (v13 >= 0x1E)
              {
                while (1)
                {
                  v35 = *(_DWORD *)v14;
                  v3 = *(_QWORD *)a2;
                  v36 = *(unsigned __int16 *)(a2 + 10);
                  do
                  {
                    v37 = v36 >> 1;
                    v38 = (unsigned int *)(v3 + 4 * (v36 >> 1));
                    v40 = *v38;
                    v39 = v38 + 1;
                    v36 += ~(v36 >> 1);
                    if (v40 < v35)
                      v3 = (uint64_t)v39;
                    else
                      v36 = v37;
                  }
                  while (v36);
                  if ((unsigned __int16 *)v3 == v17)
                    break;
                  if (*(_DWORD *)v3 != v35)
                    break;
                  v3 -= v16;
                  v41 = (unsigned __int16)(v3 >> 2);
                  if ((_DWORD)v13 == v41)
                    break;
                  v42 = (unint64_t)v3 >> 2;
                  v43 = *(_QWORD *)(v14 + 8);
                  v44 = *(unsigned __int16 *)(v14 + 16);
                  v45 = (unsigned __int16 *)(v18 + 2 * (unsigned __int16)v42);
                  if (v13 > v41)
                    v19 = v45;
                  if (*(_WORD *)(v14 + 16))
                  {
                    v46 = 4 * v44;
                    v47 = *(_DWORD **)(v14 + 8);
                    while (*v47 != *v19)
                    {
                      ++v47;
                      v46 -= 4;
                      if (!v46)
                      {
                        v47 = (_DWORD *)(v43 + 4 * v44);
                        break;
                      }
                    }
                  }
                  else
                  {
                    v47 = *(_DWORD **)(v14 + 8);
                  }
                  v3 = (uint64_t)v47 - v43;
                  if (v44 == v3 >> 2)
                    break;
                  v14 += 24;
                  if (v14 == v15)
                    goto LABEL_62;
                }
              }
              else
              {
                while (1)
                {
                  v20 = 0;
                  v21 = *(_DWORD *)v14;
                  while (1)
                  {
                    v3 = *(unsigned int *)(v16 + 4 * v20);
                    if (v3 >= v21)
                      break;
                    if (v13 == ++v20)
                      goto LABEL_7;
                  }
                  if ((_DWORD)v3 != v21)
                    break;
                  v22 = *(_QWORD *)(v14 + 8);
                  v3 = *(unsigned __int16 *)(v14 + 16);
                  if (v13 > (unsigned __int16)v20)
                    v17 = (unsigned __int16 *)(v18 + 2 * (unsigned __int16)v20);
                  if (*(_WORD *)(v14 + 16))
                  {
                    v23 = 4 * v3;
                    v24 = *(_DWORD **)(v14 + 8);
                    while (*v24 != *v17)
                    {
                      ++v24;
                      v23 -= 4;
                      if (!v23)
                      {
                        v24 = (_DWORD *)(v22 + 4 * v3);
                        break;
                      }
                    }
                  }
                  else
                  {
                    v24 = *(_DWORD **)(v14 + 8);
                  }
                  if (v3 == ((uint64_t)v24 - v22) >> 2)
                    break;
                  v14 += 24;
                  if (v14 == v15)
                    goto LABEL_62;
                }
              }
            }
            else
            {
              while (1)
              {
                v25 = 4 * v13;
                v26 = *(_DWORD **)a2;
                while (*v26 != *(_DWORD *)v14)
                {
                  ++v26;
                  v25 -= 4;
                  if (!v25)
                  {
                    v26 = (_DWORD *)(*(_QWORD *)a2 + 4 * *(unsigned __int16 *)(a2 + 10));
                    break;
                  }
                }
                v27 = (unint64_t)v26 - v16;
                v28 = (unsigned __int16)(v27 >> 2);
                if ((_DWORD)v13 == v28)
                  break;
                v29 = v27 >> 2;
                v30 = *(_QWORD *)(v14 + 8);
                v31 = *(unsigned __int16 *)(v14 + 16);
                v32 = v18 + 2 * (unsigned __int16)v29;
                if (v13 > v28)
                  v3 = v32;
                if (*(_WORD *)(v14 + 16))
                {
                  v33 = 4 * v31;
                  v34 = *(_DWORD **)(v14 + 8);
                  while (*v34 != *(unsigned __int16 *)v3)
                  {
                    ++v34;
                    v33 -= 4;
                    if (!v33)
                    {
                      v34 = (_DWORD *)(v30 + 4 * v31);
                      break;
                    }
                  }
                }
                else
                {
                  v34 = *(_DWORD **)(v14 + 8);
                }
                if (v31 == ((uint64_t)v34 - v30) >> 2)
                  break;
                v14 += 24;
                if (v14 == v15)
                  goto LABEL_62;
              }
            }
          }
          goto LABEL_7;
        }
LABEL_62:
        v48 = (unsigned __int16)*v9;
        v49 = v48 != 0xFFFF && *v10 == 0;
        if (v49 && v48 >= (unsigned __int16)*v11)
          break;
LABEL_6:
        *(_QWORD *)(*v5 + 8 * v48) = v12;
        *v9 = v48 + 1;
LABEL_7:
        v7 += 2;
        if (v7 == v8)
          goto LABEL_78;
      }
      v50 = v10;
      v51 = (char *)operator new(8 * (v48 + 1));
      v5 = (unint64_t *)(v91 + 48);
      v52 = v51;
      v53 = *v92;
      if (!*v92)
      {
LABEL_5:
        *v11 = v48 + 1;
        *v5 = (unint64_t)v52;
        v10 = v50;
        goto LABEL_6;
      }
      if ((_DWORD)v48)
      {
        v54 = v48;
        v55 = v52;
        v56 = (uint64_t *)*v92;
        if (v48 >= 4)
        {
          v54 = v48;
          v55 = v52;
          v56 = (uint64_t *)*v92;
          if ((unint64_t)(v52 - (char *)v53) >= 0x20)
          {
            v57 = (unsigned __int16)v48 & 0xFFFC;
            v58 = 8 * v57;
            v55 = &v52[8 * v57];
            v59 = v53 + 1;
            v60 = v52 + 16;
            v61 = v57;
            do
            {
              v62 = *v59;
              *(v60 - 1) = *(v59 - 1);
              *v60 = v62;
              v59 += 2;
              v60 += 2;
              v61 -= 4;
            }
            while (v61);
            if (v57 == v48)
              goto LABEL_4;
            v54 = v48 - v57;
            v56 = (uint64_t *)((char *)v53 + v58);
          }
        }
        do
        {
          v63 = *v56++;
          *(_QWORD *)v55 = v63;
          v55 += 8;
          --v54;
        }
        while ((_WORD)v54);
      }
LABEL_4:
      operator delete(v53);
      *(_BYTE *)(v91 + 60) = 0;
      *(_DWORD *)v9 = 0;
      v5 = (unint64_t *)(v91 + 48);
      goto LABEL_5;
    }
LABEL_78:
    v64 = *v5;
    v66 = (_DWORD *)(v91 + 56);
    v65 = *(unsigned __int16 *)(v91 + 56);
    v67 = (_QWORD *)(*v5 + 8 * v65 - 8);
    if (*(_WORD *)(v91 + 56) && (unint64_t)v67 > v64)
    {
      v69 = v64 + 8;
      do
      {
        v70 = *(_QWORD *)(v69 - 8);
        *(_QWORD *)(v69 - 8) = *v67;
        *v67-- = v70;
        v71 = v69 >= (unint64_t)v67;
        v69 += 8;
      }
      while (!v71);
    }
    v72 = a1 + 16 * v89;
    if (!*(_BYTE *)(v72 + 60))
    {
      v74 = *(unsigned __int16 *)(v72 + 58);
      v73 = (_WORD *)(v72 + 58);
      if ((_DWORD)v65 != v74)
      {
        v75 = (char *)operator new(8 * v65);
        v76 = (_QWORD *)(v91 + 48);
        v77 = v75;
        v78 = *v92;
        if (!*v92)
        {
LABEL_98:
          *v73 = v65;
          *v76 = v77;
          return;
        }
        if ((_DWORD)v65)
        {
          v79 = v65;
          v80 = v77;
          v81 = (uint64_t *)*v92;
          if (v65 >= 4)
          {
            v79 = v65;
            v80 = v77;
            v81 = (uint64_t *)*v92;
            if ((unint64_t)(v77 - (char *)v78) >= 0x20)
            {
              v82 = (unsigned __int16)v65 & 0xFFFC;
              v83 = 8 * v82;
              v80 = &v77[8 * v82];
              v84 = v78 + 1;
              v85 = v77 + 16;
              v86 = v82;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == v65)
                goto LABEL_97;
              v79 = v65 - v82;
              v81 = (uint64_t *)((char *)v78 + v83);
            }
          }
          do
          {
            v88 = *v81++;
            *(_QWORD *)v80 = v88;
            v80 += 8;
            --v79;
          }
          while ((_WORD)v79);
        }
LABEL_97:
        operator delete(v78);
        *v66 = 0;
        *(_BYTE *)(v91 + 60) = 0;
        *(_WORD *)v66 = v65;
        v76 = (_QWORD *)(v91 + 48);
        goto LABEL_98;
      }
    }
  }
}

void gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::matchAttributes(_QWORD *a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7)
{
  _DWORD *v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  __int16 *v28;
  __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  __int16 *v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  _DWORD *v51;
  NSObject *v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  _BYTE buf[22];
  __int16 v63;
  int v64;
  uint64_t v65;

  v11 = a2;
  v65 = *MEMORY[0x1E0C80C00];
  v13 = *a2;
  if (*a2 == 0x7FFFFFFF)
  {
LABEL_2:
    if (gss::MatchingGraphEndChain::matches((uint64_t *)(*a7 + 16 * *((unsigned __int16 *)v11 + 3)), a3))
    {
      v14 = *((unsigned __int16 *)v11 + 2);
      v15 = *a6;
      v16 = *(_QWORD *)(*a6 + 16 * v14);
      if (v16)
      {
        *a4 = *(_QWORD *)(v16 + 112);
        v17 = *(_QWORD *)(v15 + 16 * v14 + 8);
        *a1 = v16;
        a1[1] = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        return;
      }
      GEOGetGeoCSSStyleSheetLog();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v63 = 1024;
        v64 = 378;
        _os_log_impl(&dword_19F029000, v52, OS_LOG_TYPE_ERROR, "endchain with no style: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }

    }
LABEL_63:
    *a4 = 0;
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v21 = *a5;
  v22 = *(unsigned __int16 *)(a3 + 10);
  v23 = *(char **)a3;
  v24 = *(unsigned __int8 *)(a3 + 15);
  v25 = *(_QWORD *)a3 + 4 * v22;
  while (1)
  {
    v26 = (unsigned __int16 *)*((_QWORD *)v11 + 1);
    v27 = *((unsigned __int16 *)v11 + 8);
    v28 = (__int16 *)&v26[2 * v27];
    if (!*((_WORD *)v11 + 8))
      goto LABEL_19;
    v29 = (__int16 *)*((_QWORD *)v11 + 1);
    v30 = *((unsigned __int16 *)v11 + 8);
    do
    {
      v31 = v30 >> 1;
      v32 = &v29[2 * (v30 >> 1)];
      v34 = (unsigned __int16)*v32;
      v33 = (unsigned __int16 *)(v32 + 2);
      v30 += ~(v30 >> 1);
      if (v34 == 0xFFFF)
        v30 = v31;
      else
        v29 = (__int16 *)v33;
    }
    while (v30);
    if (v29 != v28 && *v29 == -1)
    {
      v11 = (_DWORD *)(v21 + 24 * (unsigned __int16)v29[1]);
      if (!(_DWORD)v22)
        goto LABEL_9;
    }
    else
    {
LABEL_19:
      v11 = 0;
      if (!(_DWORD)v22)
        goto LABEL_9;
    }
    v35 = 4 * v22;
    v36 = *(char **)a3;
    if (v24)
    {
      v37 = *(char **)a3;
      v38 = *(unsigned __int16 *)(a3 + 10);
      if (v22 >= 0x1E)
      {
        do
        {
          v41 = v38 >> 1;
          v42 = &v37[4 * (v38 >> 1)];
          v44 = *(_DWORD *)v42;
          v43 = v42 + 4;
          v38 += ~(v38 >> 1);
          if (v44 < v13)
            v37 = v43;
          else
            v38 = v41;
        }
        while (v38);
        if (v37 == (char *)v25)
          goto LABEL_9;
        if (*(_DWORD *)v37 != v13)
          goto LABEL_9;
        v45 = (unint64_t)(v37 - v23) >> 2;
        if ((_DWORD)v22 == (unsigned __int16)v45)
          goto LABEL_9;
      }
      else
      {
        v39 = 0;
        while (1)
        {
          v40 = *(_DWORD *)&v23[4 * v39];
          if (v40 >= v13)
            break;
          if (v22 == ++v39)
            goto LABEL_9;
        }
        if (v40 == v13)
          LOWORD(v45) = v39;
        else
          LOWORD(v45) = v22;
        if ((_DWORD)v22 == (unsigned __int16)v45)
          goto LABEL_9;
      }
    }
    else
    {
      while (*(_DWORD *)v36 != v13)
      {
        v36 += 4;
        v35 -= 4;
        if (!v35)
        {
          v36 = (char *)(*(_QWORD *)a3 + 4 * v22);
          break;
        }
      }
      v45 = (unint64_t)(v36 - v23) >> 2;
      if ((_DWORD)v22 == (unsigned __int16)v45)
      {
LABEL_9:
        if (!v11)
          goto LABEL_63;
        goto LABEL_10;
      }
    }
    if (!(_DWORD)v27)
      break;
    v46 = *(unsigned __int16 *)(*(_QWORD *)a3 + *(unsigned __int16 *)(a3 + 8) + 2 * (unsigned __int16)v45);
    do
    {
      v47 = v27 >> 1;
      v48 = &v26[2 * (v27 >> 1)];
      v50 = *v48;
      v49 = v48 + 2;
      v27 += ~(v27 >> 1);
      if (v50 < v46)
        v26 = v49;
      else
        v27 = v47;
    }
    while (v27);
    if (v26 == (unsigned __int16 *)v28 || *v26 != v46)
      break;
    v51 = (_DWORD *)(v21 + 24 * v26[1]);
    if (v11)
      goto LABEL_57;
LABEL_54:
    v11 = v51;
    if (!v51)
      goto LABEL_63;
LABEL_10:
    v13 = *v11;
    if (*v11 == 0x7FFFFFFF)
      goto LABEL_2;
  }
  v51 = 0;
  if (!v11)
    goto LABEL_54;
LABEL_57:
  if (!v51)
    goto LABEL_10;
  v61 = 0;
  gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::matchAttributes(buf, v51, a3, (char *)&v61 + 4, a5, a6, a7);
  gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::matchAttributes(&v60, v11, a3, &v61, a5, a6, a7);
  if (HIDWORD(v61) >= v61)
  {
    v53 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v54 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    *a4 = HIDWORD(v61);
    *(_OWORD *)a1 = v53;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    *a4 = v61;
    *(_OWORD *)a1 = v60;
  }
  v57 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_19F073E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gss::MatchingGraphEndChain::matches(uint64_t *a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unsigned int v19;
  __int32 *v20;
  size_t v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;

  if (!*((_WORD *)a1 + 4))
    return 1;
  v4 = (int *)*a1;
  v5 = *a1 + 24 * *((unsigned __int16 *)a1 + 4);
  while (1)
  {
    v6 = *(unsigned __int16 *)(a2 + 10);
    if (*(_WORD *)(a2 + 10))
    {
      v7 = *v4;
      v8 = *(char **)a2;
      if (*(_BYTE *)(a2 + 15))
      {
        if (v6 >= 0x1E)
        {
          v14 = *(char **)a2;
          v15 = *(unsigned __int16 *)(a2 + 10);
          do
          {
            v16 = v15 >> 1;
            v17 = &v14[4 * (v15 >> 1)];
            v19 = *(_DWORD *)v17;
            v18 = v17 + 4;
            v15 += ~(v15 >> 1);
            if (v19 < v7)
              v14 = v18;
            else
              v15 = v16;
          }
          while (v15);
          if (v14 == &v8[4 * v6] || *(_DWORD *)v14 != v7)
            return 0;
          v11 = (unint64_t)(v14 - v8) >> 2;
        }
        else
        {
          v9 = 0;
          while (1)
          {
            v10 = *(_DWORD *)&v8[4 * v9];
            if (v10 >= v7)
              break;
            if (v6 == ++v9)
              return 0;
          }
          LOWORD(v11) = v10 == v7 ? v9 : *(_WORD *)(a2 + 10);
        }
      }
      else
      {
        v12 = 4 * v6;
        v13 = *(char **)a2;
        while (*(_DWORD *)v13 != v7)
        {
          v13 += 4;
          v12 -= 4;
          if (!v12)
          {
            v13 = &v8[4 * v6];
            break;
          }
        }
        v11 = (unint64_t)(v13 - v8) >> 2;
      }
    }
    else
    {
      LOWORD(v11) = 0;
    }
    if ((_DWORD)v6 == (unsigned __int16)v11)
      return 0;
    v20 = (__int32 *)*((_QWORD *)v4 + 1);
    v21 = *((unsigned __int16 *)v4 + 8);
    v22 = &v20[v21];
    if (v6 > (unsigned __int16)v11)
      v2 = (unsigned __int16 *)(*(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v11);
    v23 = wmemchr(v20, *v2, v21);
    v24 = v23 ? v23 : v22;
    if (v24 == (__int32 *)(*((_QWORD *)v4 + 1) + 4 * *((unsigned __int16 *)v4 + 8)))
      return 0;
    v4 += 6;
    if (v4 == (int *)v5)
      return 1;
  }
}

uint64_t gss::StylesheetQuery<gss::PropertyID>::StylesheetQuery(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5)
{
  unint64_t *p_shared_owners;
  unint64_t v10;
  gss::Allocator *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (gss::Allocator *)gss::Queryable<gss::PropertyID>::Queryable(a1, v15);
  if (a3)
  {
    v12 = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_1E42C28D0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = gss::Allocator::instance(v11);
  if (a1 + 240 != a4)
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)(a1 + 240), *(_QWORD *)a4, *(_QWORD **)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 279) = 0;
  *(_BYTE *)(a1 + 287) = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)(a1 + 272), a5);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  return a1;
}

void sub_19F0740D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 248) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 264) + 40))(*(_QWORD *)(v1 + 264), v4, *(_QWORD *)(v1 + 256) - v4);
  }
  gss::Queryable<gss::PropertyID>::~Queryable(v1);
  _Unwind_Resume(a1);
}

void sub_19F074110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t gss::Queryable<gss::PropertyID>::Queryable(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v5 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = &off_1E42C2A28;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(a1 + 32), 0);
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"initialization", v9);
  v10 = *a2;
  if (!*a2)
  {
    v19 = 0;
    goto LABEL_27;
  }
  v11 = *(_QWORD *)(v10 + 520);
  v12 = *(std::__shared_weak_count **)(v10 + 528);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v11)
  {
    v19 = 0;
    goto LABEL_21;
  }
  v15 = *(_QWORD *)(*a2 + 520);
  v16 = *(std::__shared_weak_count **)(*a2 + 528);
  if (!v16)
  {
    v19 = *(_DWORD *)(v15 + 248) - 1;
    if (!v12)
      goto LABEL_27;
    goto LABEL_22;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v19 = *(_DWORD *)(v15 + 248) - 1;
  do
    v20 = __ldaxr(v17);
  while (__stlxr(v20 - 1, v17));
  if (v20)
  {
LABEL_21:
    if (!v12)
      goto LABEL_27;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!v12)
    goto LABEL_27;
LABEL_22:
  v21 = (unint64_t *)&v12->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_27:
  *(_DWORD *)(a1 + 232) = v19;
  return a1;
}

void sub_19F07429C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v4 = *v2;
  *v2 = 0;
  if (!v4)
  {
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5)
      _Unwind_Resume(exception_object);
    std::__shared_weak_count::__release_weak(v5);
    _Unwind_Resume(exception_object);
  }
  std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
}

pthread_rwlock_t *geo::read_write_lock::read_write_lock(pthread_rwlock_t *this)
{
  geo::read_write_lock *v2;
  const char *v3;

  *(_QWORD *)&this->__opaque[184] = 0;
  *(_OWORD *)&this->__opaque[152] = 0u;
  *(_OWORD *)&this->__opaque[168] = 0u;
  *(_OWORD *)&this->__opaque[120] = 0u;
  *(_OWORD *)&this->__opaque[136] = 0u;
  *(_OWORD *)&this->__opaque[88] = 0u;
  *(_OWORD *)&this->__opaque[104] = 0u;
  *(_OWORD *)&this->__opaque[56] = 0u;
  *(_OWORD *)&this->__opaque[72] = 0u;
  *(_OWORD *)&this->__opaque[24] = 0u;
  *(_OWORD *)&this->__opaque[40] = 0u;
  *(_OWORD *)&this->__sig = 0u;
  *(_OWORD *)&this->__opaque[8] = 0u;
  v2 = (geo::read_write_lock *)pthread_rwlock_init(this, 0);
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"initialization", v3);
  return this;
}

void md::PointLabelFeature::populateStyleQueries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t v23;

  v21 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1)
    && (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v21 = v6;
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 584))(&v18, a1, 0);
  md::createFeatureAttributeSet((gss::Allocator *)v22, &v18);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v20, a3, v22, (_QWORD *)v6);
  if (v22[0])
  {
    v22[1] = v22[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 40))(v23, v22[0], v22[2] - v22[0]);
  }
  v9 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v9 >= *(_QWORD *)(a2 + 16))
  {
    v10 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v20);
  }
  else
  {
    if (v9)
    {
      *v9 = v20;
      v20 = 0uLL;
    }
    v10 = v9 + 1;
  }
  *(_QWORD *)(a2 + 8) = v10;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    if (*(char *)(v21 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), *(_QWORD *)v21, *(_QWORD *)(v21 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v17, 0x1032C402ED93987);
  }
}

void sub_19F074534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100](&a14);
  _Unwind_Resume(a1);
}

void md::PointLabelFeature::styleAttributes(_QWORD *a1@<X0>, void ***a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  const FeatureStyleAttributes *v6;
  char *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int8 v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  {
    v25 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v25, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v29 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(_QWORD *, uint64_t *))(*a1 + 544))(a1, &v26);
  v5 = v26;
  if (v26 == v27)
  {
    v22 = a1[83];
    *a2 = (void **)a1[82];
    a2[1] = (void **)v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v6 = (const FeatureStyleAttributes *)a1[82];
    v7 = (char *)operator new(0x40uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E42DAB40;
    v8 = (void **)(v7 + 24);
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v7 + 24), v6);
    v9 = v26;
    if (((v27 - v26) & 0x7FFFFFFF8) != 0)
    {
      v10 = 0;
      v11 = 0;
      v12 = ((unint64_t)(v27 - v26) >> 3);
      v13 = v7[57];
      while (1)
      {
        v14 = v13;
        v15 = *v8;
        if (v13)
          break;
LABEL_5:
        v15[v14] = *(_QWORD *)(v9 + 8 * v10);
        v13 = v7[57] + 1;
        v7[57] = v13;
        ++v10;
        v11 = 1;
        if (v10 == v12)
        {
          v15 = *v8;
          v14 = v13;
LABEL_26:
          qsort(v15, v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_27;
        }
      }
      if (v13 > 0x1Fu)
      {
        do
        {
          v19 = 0;
          v20 = (int *)v15;
          while (1)
          {
            v21 = *v20;
            v20 += 2;
            if (v21 == *(_DWORD *)(v9 + 8 * v10))
              break;
            if (v14 == ++v19)
              goto LABEL_16;
          }
          HIDWORD(v15[v19]) = *(_DWORD *)(v9 + 8 * v10 + 4);
LABEL_16:
          ++v10;
        }
        while (v10 != v12);
      }
      else
      {
        do
        {
          v16 = 0;
          v17 = (int *)v15;
          while (1)
          {
            v18 = *v17;
            v17 += 2;
            if (v18 == *(_DWORD *)(v9 + 8 * v10))
              break;
            if (v14 == ++v16)
              goto LABEL_5;
          }
          HIDWORD(v15[v16]) = *(_DWORD *)(v9 + 8 * v10++ + 4);
        }
        while (v10 != v12);
      }
      if ((v11 & 1) != 0)
        goto LABEL_26;
    }
LABEL_27:
    *a2 = v8;
    a2[1] = (void **)v7;
    v5 = v26;
  }
  if (v5)
  {
    v27 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, v5, v28 - v5);
  }
}

void sub_19F07480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a11)
  {
    a12 = a11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 - a11);
  }
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::populateAdditionalStyleAttributes(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  md::PointLabelFeatureBase::populateAdditionalStyleAttributes((uint64_t)a1, (uint64_t *)a2);
  result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 360))(a1);
  v5 = result;
  v6 = *(uint64_t **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v6 < v7)
  {
    if (v6)
    {
      v8 = 65601;
      if ((_DWORD)result)
        v8 = 0x100010041;
      *v6 = v8;
    }
    v9 = v6 + 1;
    goto LABEL_31;
  }
  v10 = ((uint64_t)v6 - *(_QWORD *)a2) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    goto LABEL_58;
  v12 = v7 - *(_QWORD *)a2;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  if (v11)
  {
    v13 = 8 * v11;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 8 * v11, 4);
    v14 = (uint64_t *)(result + 8 * v10);
    v11 = result + v13;
    if (result)
    {
      v15 = 65601;
      if (v5)
        v15 = 0x100010041;
      *v14 = v15;
    }
  }
  else
  {
    v14 = (uint64_t *)(8 * v10);
  }
  v9 = v14 + 1;
  v17 = *(_QWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  if (v16 != *(_QWORD *)a2)
  {
    v18 = v16 - *(_QWORD *)a2 - 8;
    if (v18 < 0x38)
    {
      v20 = *(_QWORD *)(a2 + 8);
    }
    else if ((unint64_t)(v16 - (_QWORD)v14) < 0x20)
    {
      v20 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v19 = (v18 >> 3) + 1;
      v20 = v16 - 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v21 = v14 - 2;
      v22 = (__int128 *)(v16 - 16);
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *((_OWORD *)v21 - 1) = *(v22 - 1);
        *(_OWORD *)v21 = v24;
        v21 -= 4;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      v14 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_28;
    }
    do
    {
      v25 = *(_QWORD *)(v20 - 8);
      v20 -= 8;
      *--v14 = v25;
    }
    while (v20 != v17);
LABEL_28:
    v16 = *(_QWORD *)a2;
  }
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v9;
  v26 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v11;
  if (v16)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v16, v26 - v16);
LABEL_31:
  *(_QWORD *)(a2 + 8) = v9;
  if (!a1[655])
    return result;
  v27 = a1[654];
  v28 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v9 >= v28)
  {
    v30 = ((uint64_t)v9 - *(_QWORD *)a2) >> 3;
    if (!((unint64_t)(v30 + 1) >> 61))
    {
      v31 = v28 - *(_QWORD *)a2;
      v32 = v31 >> 2;
      if (v31 >> 2 <= (unint64_t)(v30 + 1))
        v32 = v30 + 1;
      v33 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
      v34 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v33)
        v34 = v32;
      if (v34)
      {
        v35 = 8 * v34;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), 8 * v34, 4);
        v36 = (uint64_t *)(result + 8 * v30);
        v34 = result + v35;
        if (result)
          *v36 = (v27 << 32) | 0x1007D;
      }
      else
      {
        v36 = (uint64_t *)(8 * v30);
      }
      v29 = v36 + 1;
      v38 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(a2 + 8);
      if (v37 == *(_QWORD *)a2)
        goto LABEL_54;
      v39 = v37 - *(_QWORD *)a2 - 8;
      if (v39 < 0x38)
      {
        v41 = *(_QWORD *)(a2 + 8);
      }
      else if ((unint64_t)(v37 - (_QWORD)v36) < 0x20)
      {
        v41 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        v40 = (v39 >> 3) + 1;
        v41 = v37 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v42 = v36 - 2;
        v43 = (__int128 *)(v37 - 16);
        v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = *v43;
          *((_OWORD *)v42 - 1) = *(v43 - 1);
          *(_OWORD *)v42 = v45;
          v42 -= 4;
          v43 -= 2;
          v44 -= 4;
        }
        while (v44);
        v36 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_53;
      }
      do
      {
        v46 = *(_QWORD *)(v41 - 8);
        v41 -= 8;
        *--v36 = v46;
      }
      while (v41 != v38);
LABEL_53:
      v37 = *(_QWORD *)a2;
LABEL_54:
      *(_QWORD *)a2 = v36;
      *(_QWORD *)(a2 + 8) = v29;
      v47 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v34;
      if (v37)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24), v37, v47 - v37);
      goto LABEL_56;
    }
LABEL_58:
    abort();
  }
  *v9 = (v27 << 32) | 0x1007D;
  v29 = v9 + 1;
LABEL_56:
  *(_QWORD *)(a2 + 8) = v29;
  return result;
}

uint64_t md::PointLabelFeatureBase::populateAdditionalStyleAttributes(uint64_t result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;

  v3 = (_BYTE *)result;
  if (!*(_BYTE *)(result + 241))
  {
    v4 = *(unsigned __int8 *)(result + 140);
    v5 = (_QWORD *)a2[1];
    v6 = a2[2];
    if ((unint64_t)v5 < v6)
    {
      if (v5)
        *v5 = ((v4 << 32) | 0x10022) + 3;
      v7 = v5 + 1;
      goto LABEL_28;
    }
    v8 = ((uint64_t)v5 - *a2) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      goto LABEL_164;
    v10 = v6 - *a2;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    if (v9)
    {
      v11 = 8 * v9;
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v9, 4);
      v12 = (_QWORD *)(result + 8 * v8);
      v9 = result + v11;
      if (result)
        *v12 = ((v4 << 32) | 0x10022) + 3;
    }
    else
    {
      v12 = (_QWORD *)(8 * v8);
    }
    v7 = v12 + 1;
    v14 = *a2;
    v13 = a2[1];
    if (v13 == *a2)
    {
LABEL_26:
      *a2 = (uint64_t)v12;
      a2[1] = (uint64_t)v7;
      v23 = a2[2];
      a2[2] = v9;
      if (v13)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v13, v23 - v13);
LABEL_28:
      a2[1] = (uint64_t)v7;
      if (!v3[141])
        goto LABEL_54;
      v24 = a2[2];
      if ((unint64_t)v7 < v24)
      {
        *v7 = 0x100010056;
        v25 = v7 + 1;
LABEL_53:
        a2[1] = (uint64_t)v25;
        goto LABEL_54;
      }
      v26 = ((uint64_t)v7 - *a2) >> 3;
      if ((unint64_t)(v26 + 1) >> 61)
        goto LABEL_164;
      v27 = v24 - *a2;
      v28 = v27 >> 2;
      if (v27 >> 2 <= (unint64_t)(v26 + 1))
        v28 = v26 + 1;
      v29 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8;
      v30 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v29)
        v30 = v28;
      if (v30)
      {
        v31 = 8 * v30;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v30, 4);
        v32 = (_QWORD *)(result + 8 * v26);
        v30 = result + v31;
        if (result)
          *v32 = 0x100010056;
      }
      else
      {
        v32 = (_QWORD *)(8 * v26);
      }
      v25 = v32 + 1;
      v34 = *a2;
      v33 = a2[1];
      if (v33 == *a2)
      {
LABEL_51:
        *a2 = (uint64_t)v32;
        a2[1] = (uint64_t)v25;
        v43 = a2[2];
        a2[2] = v30;
        if (v33)
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v33, v43 - v33);
        goto LABEL_53;
      }
      v35 = v33 - *a2 - 8;
      if (v35 < 0x38)
      {
        v37 = a2[1];
      }
      else if ((unint64_t)(v33 - (_QWORD)v32) < 0x20)
      {
        v37 = a2[1];
      }
      else
      {
        v36 = (v35 >> 3) + 1;
        v37 = v33 - 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v38 = v32 - 2;
        v39 = (__int128 *)(v33 - 16);
        v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v41 = *v39;
          *(v38 - 1) = *(v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 2;
          v40 -= 4;
        }
        while (v40);
        v32 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
        if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_50;
      }
      do
      {
        v42 = *(_QWORD *)(v37 - 8);
        v37 -= 8;
        *--v32 = v42;
      }
      while (v37 != v34);
LABEL_50:
      v33 = *a2;
      goto LABEL_51;
    }
    v15 = v13 - *a2 - 8;
    if (v15 < 0x38)
    {
      v17 = a2[1];
    }
    else if ((unint64_t)(v13 - (_QWORD)v12) < 0x20)
    {
      v17 = a2[1];
    }
    else
    {
      v16 = (v15 >> 3) + 1;
      v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = v12 - 2;
      v19 = (__int128 *)(v13 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_25;
    }
    do
    {
      v22 = *(_QWORD *)(v17 - 8);
      v17 -= 8;
      *--v12 = v22;
    }
    while (v17 != v14);
LABEL_25:
    v13 = *a2;
    goto LABEL_26;
  }
LABEL_54:
  if (!v3[240])
  {
    v44 = (_QWORD *)a2[1];
    v45 = a2[2];
    if ((unint64_t)v44 < v45)
    {
      if (v44)
        *v44 = 65572;
      v46 = v44 + 1;
      goto LABEL_83;
    }
    v47 = ((uint64_t)v44 - *a2) >> 3;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      goto LABEL_164;
    v49 = v45 - *a2;
    if (v49 >> 2 > v48)
      v48 = v49 >> 2;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    if (v48)
    {
      v50 = 8 * v48;
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v48, 4);
      v51 = (_QWORD *)(result + 8 * v47);
      v48 = result + v50;
      if (result)
        *v51 = 65572;
    }
    else
    {
      v51 = (_QWORD *)(8 * v47);
    }
    v46 = v51 + 1;
    v53 = *a2;
    v52 = a2[1];
    if (v52 == *a2)
    {
LABEL_81:
      *a2 = (uint64_t)v51;
      a2[1] = (uint64_t)v46;
      v62 = a2[2];
      a2[2] = v48;
      if (v52)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v52, v62 - v52);
LABEL_83:
      a2[1] = (uint64_t)v46;
      v63 = a2[2];
      if ((unint64_t)v46 < v63)
      {
        *v46 = 65570;
        v64 = v46 + 1;
        goto LABEL_107;
      }
      v65 = ((uint64_t)v46 - *a2) >> 3;
      if ((unint64_t)(v65 + 1) >> 61)
        goto LABEL_164;
      v66 = v63 - *a2;
      v67 = v66 >> 2;
      if (v66 >> 2 <= (unint64_t)(v65 + 1))
        v67 = v65 + 1;
      v29 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8;
      v68 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v29)
        v68 = v67;
      if (v68)
      {
        v69 = 8 * v68;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v68, 4);
        v70 = (_QWORD *)(result + 8 * v65);
        v68 = result + v69;
        if (result)
          *v70 = 65570;
      }
      else
      {
        v70 = (_QWORD *)(8 * v65);
      }
      v64 = v70 + 1;
      v72 = *a2;
      v71 = a2[1];
      if (v71 == *a2)
      {
LABEL_105:
        *a2 = (uint64_t)v70;
        a2[1] = (uint64_t)v64;
        v81 = a2[2];
        a2[2] = v68;
        if (v71)
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v71, v81 - v71);
LABEL_107:
        a2[1] = (uint64_t)v64;
        if (!v3[142])
          goto LABEL_135;
LABEL_108:
        v82 = (_QWORD *)a2[1];
        v83 = a2[2];
        if ((unint64_t)v82 < v83)
        {
          if (v82)
            *v82 = 0x100010043;
          v84 = v82 + 1;
LABEL_134:
          a2[1] = (uint64_t)v84;
          goto LABEL_135;
        }
        v85 = ((uint64_t)v82 - *a2) >> 3;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61)
          goto LABEL_164;
        v87 = v83 - *a2;
        if (v87 >> 2 > v86)
          v86 = v87 >> 2;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        if (v86)
        {
          v88 = 8 * v86;
          result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v86, 4);
          v89 = (_QWORD *)(result + 8 * v85);
          v86 = result + v88;
          if (result)
            *v89 = 0x100010043;
        }
        else
        {
          v89 = (_QWORD *)(8 * v85);
        }
        v84 = v89 + 1;
        v91 = *a2;
        v90 = a2[1];
        if (v90 == *a2)
        {
LABEL_132:
          *a2 = (uint64_t)v89;
          a2[1] = (uint64_t)v84;
          v100 = a2[2];
          a2[2] = v86;
          if (v90)
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v90, v100 - v90);
          goto LABEL_134;
        }
        v92 = v90 - *a2 - 8;
        if (v92 < 0x38)
        {
          v94 = a2[1];
        }
        else if ((unint64_t)(v90 - (_QWORD)v89) < 0x20)
        {
          v94 = a2[1];
        }
        else
        {
          v93 = (v92 >> 3) + 1;
          v94 = v90 - 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v95 = v89 - 2;
          v96 = (__int128 *)(v90 - 16);
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v96;
            *(v95 - 1) = *(v96 - 1);
            *v95 = v98;
            v95 -= 2;
            v96 -= 2;
            v97 -= 4;
          }
          while (v97);
          v89 -= v93 & 0x3FFFFFFFFFFFFFFCLL;
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_131;
        }
        do
        {
          v99 = *(_QWORD *)(v94 - 8);
          v94 -= 8;
          *--v89 = v99;
        }
        while (v94 != v91);
LABEL_131:
        v90 = *a2;
        goto LABEL_132;
      }
      v73 = v71 - *a2 - 8;
      if (v73 < 0x38)
      {
        v75 = a2[1];
      }
      else if ((unint64_t)(v71 - (_QWORD)v70) < 0x20)
      {
        v75 = a2[1];
      }
      else
      {
        v74 = (v73 >> 3) + 1;
        v75 = v71 - 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        v76 = v70 - 2;
        v77 = (__int128 *)(v71 - 16);
        v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 2;
          v78 -= 4;
        }
        while (v78);
        v70 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_104;
      }
      do
      {
        v80 = *(_QWORD *)(v75 - 8);
        v75 -= 8;
        *--v70 = v80;
      }
      while (v75 != v72);
LABEL_104:
      v71 = *a2;
      goto LABEL_105;
    }
    v54 = v52 - *a2 - 8;
    if (v54 < 0x38)
    {
      v56 = a2[1];
    }
    else if ((unint64_t)(v52 - (_QWORD)v51) < 0x20)
    {
      v56 = a2[1];
    }
    else
    {
      v55 = (v54 >> 3) + 1;
      v56 = v52 - 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      v57 = v51 - 2;
      v58 = (__int128 *)(v52 - 16);
      v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60 = *v58;
        *(v57 - 1) = *(v58 - 1);
        *v57 = v60;
        v57 -= 2;
        v58 -= 2;
        v59 -= 4;
      }
      while (v59);
      v51 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
      if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_80;
    }
    do
    {
      v61 = *(_QWORD *)(v56 - 8);
      v56 -= 8;
      *--v51 = v61;
    }
    while (v56 != v53);
LABEL_80:
    v52 = *a2;
    goto LABEL_81;
  }
  if (v3[142])
    goto LABEL_108;
LABEL_135:
  v101 = (char)v3[244];
  if ((_DWORD)v101 == -1)
    return result;
  v102 = (_QWORD *)a2[1];
  v103 = a2[2];
  if ((unint64_t)v102 >= v103)
  {
    v105 = ((uint64_t)v102 - *a2) >> 3;
    v106 = v105 + 1;
    if (!((unint64_t)(v105 + 1) >> 61))
    {
      v107 = v103 - *a2;
      if (v107 >> 2 > v106)
        v106 = v107 >> 2;
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
        v106 = 0x1FFFFFFFFFFFFFFFLL;
      if (v106)
      {
        v108 = 8 * v106;
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v106, 4);
        v109 = (_QWORD *)(result + 8 * v105);
        v106 = result + v108;
        if (result)
          *v109 = ((v101 << 32) | 0x10022) + 55;
      }
      else
      {
        v109 = (_QWORD *)(8 * v105);
      }
      v104 = v109 + 1;
      v111 = *a2;
      v110 = a2[1];
      if (v110 == *a2)
        goto LABEL_160;
      v112 = v110 - *a2 - 8;
      if (v112 < 0x38)
      {
        v114 = a2[1];
      }
      else if ((unint64_t)(v110 - (_QWORD)v109) < 0x20)
      {
        v114 = a2[1];
      }
      else
      {
        v113 = (v112 >> 3) + 1;
        v114 = v110 - 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
        v115 = v109 - 2;
        v116 = (__int128 *)(v110 - 16);
        v117 = v113 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v118 = *v116;
          *(v115 - 1) = *(v116 - 1);
          *v115 = v118;
          v115 -= 2;
          v116 -= 2;
          v117 -= 4;
        }
        while (v117);
        v109 -= v113 & 0x3FFFFFFFFFFFFFFCLL;
        if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_159;
      }
      do
      {
        v119 = *(_QWORD *)(v114 - 8);
        v114 -= 8;
        *--v109 = v119;
      }
      while (v114 != v111);
LABEL_159:
      v110 = *a2;
LABEL_160:
      *a2 = (uint64_t)v109;
      a2[1] = (uint64_t)v104;
      v120 = a2[2];
      a2[2] = v106;
      if (v110)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v110, v120 - v110);
      goto LABEL_162;
    }
LABEL_164:
    abort();
  }
  if (v102)
    *v102 = ((v101 << 32) | 0x10022) + 55;
  v104 = v102 + 1;
LABEL_162:
  a2[1] = (uint64_t)v104;
  return result;
}

uint64_t std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::PropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 352);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,geo::StdAllocator<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,mdm::Allocator>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v40;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *(_QWORD *)(v14 + 8);
            if (v19 == v10)
            {
              v20 = *(unsigned __int8 *)(v14 + 39);
              if ((v20 & 0x80u) == 0)
                v21 = *(unsigned __int8 *)(v14 + 39);
              else
                v21 = *(_QWORD *)(v14 + 24);
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)(v14 + 16), v7, *(_QWORD *)(v14 + 24)))
                    return v14;
                }
                else
                {
                  if (!*(_BYTE *)(v14 + 39))
                    return v14;
                  v22 = 0;
                  while (*(unsigned __int8 *)(v14 + v22 + 16) == *((unsigned __int8 *)v7 + v22))
                  {
                    if (v20 == ++v22)
                      return v14;
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = *(_QWORD *)v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15 == v10)
          {
            v16 = *(unsigned __int8 *)(v14 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *(unsigned __int8 *)(v14 + 39);
            else
              v17 = *(_QWORD *)(v14 + 24);
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v14 + 16), v7, *(_QWORD *)(v14 + 24)))
                  return v14;
              }
              else
              {
                if (!*(_BYTE *)(v14 + 39))
                  return v14;
                v18 = 0;
                while (*(unsigned __int8 *)(v14 + v18 + 16) == *((unsigned __int8 *)v7 + v18))
                {
                  if (v16 == ++v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = *(_QWORD *)v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v23 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 176, 8);
  v40 = v23;
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = v10;
  v24 = (std::string *)(v23 + 16);
  v25 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    *(_QWORD *)(v23 + 32) = *((_QWORD *)v25 + 2);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
  }
  *(_QWORD *)(v23 + 168) = 0;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v28 = *(float *)(a1 + 48);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v29 = 1;
    if (v11 >= 3)
      v29 = (v11 & (v11 - 1)) != 0;
    v30 = v29 | (2 * v11);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_64;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_64:
        std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v37 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v40 = *v37;
    *v37 = v40;
  }
  else
  {
    *(_QWORD *)v40 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v40;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
    if (*(_QWORD *)v40)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v40 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v38 >= v11)
          v38 %= v11;
      }
      else
      {
        v38 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v40;
    }
  }
  v14 = v40;
  ++*(_QWORD *)(a1 + 40);
  return v14;
}

void sub_19F075878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v21, a1);
  v5 = operator new();
  v6 = v21;
  v7 = v22;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v23;
  v8 = v24;
  *(_QWORD *)(v5 + 16) = v23;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v25;
  if (v8)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *(_QWORD *)(v6 + 8 * v10) = v5 + 16;
    v23 = 0;
    v24 = 0;
  }
  v11 = v26;
  v12 = v27;
  v13 = v28;
  v14 = v29;
  *(_QWORD *)(v5 + 56) = v28;
  v26 = 0;
  v27 = 0;
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 48) = v12;
  *(_QWORD *)(v5 + 64) = v14;
  *(_DWORD *)(v5 + 72) = v30;
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v5 + 56;
    v28 = 0;
    v29 = 0;
  }
  v16 = v31;
  v17 = v32;
  v19 = v33;
  v18 = v34;
  *(_QWORD *)(v5 + 96) = v33;
  v31 = 0;
  v32 = 0;
  *(_QWORD *)(v5 + 80) = v16;
  *(_QWORD *)(v5 + 88) = v17;
  *(_QWORD *)(v5 + 104) = v18;
  *(_DWORD *)(v5 + 112) = v35;
  if (v18)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v20 >= v17)
        v20 %= v17;
    }
    else
    {
      v20 &= v17 - 1;
    }
    *(_QWORD *)(v16 + 8 * v20) = v5 + 96;
    v33 = 0;
    v34 = 0;
  }
  v4[2] = "md::NonTiledAssetContext]";
  v4[3] = 24;
  v4[4] = v5;
  *v4 = &off_1E42B1040;
  v4[1] = 0x932EE29454ABDC4ELL;
  *a2 = v4;
  md::NonTiledAssetContext::~NonTiledAssetContext((md::NonTiledAssetContext *)&v21);
}

void sub_19F075A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  md::NonTiledAssetContext::~NonTiledAssetContext((md::NonTiledAssetContext *)va);
  MEMORY[0x1A1AF4E00](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::NonTiledAssetLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 + 120 != a4)
  {
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 152);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)a4, *(char **)(a1 + 136));
  }
  if (a4 + 40 != a1 + 160)
  {
    *(_DWORD *)(a4 + 72) = *(_DWORD *)(a1 + 192);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)(a4 + 40), *(char **)(a1 + 176));
  }
  if (a4 + 80 != a1 + 200)
  {
    *(_DWORD *)(a4 + 112) = *(_DWORD *)(a1 + 232);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)(a4 + 80), *(char **)(a1 + 216));
  }
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t i;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  void *v14;
  size_t v15;
  char *v16;
  void **v17;
  char v18;
  __int128 v19;
  char *v20;

  v4 = a1[1];
  if (!v4)
    goto LABEL_5;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      if (v6 != a2)
      {
        v17 = (void **)(v6 + 16);
        v18 = a2[39];
        if (v6[39] < 0)
        {
          if (v18 >= 0)
            v14 = a2 + 16;
          else
            v14 = (void *)*((_QWORD *)a2 + 2);
          if (v18 >= 0)
            v15 = a2[39];
          else
            v15 = *((_QWORD *)a2 + 3);
          std::string::__assign_no_alias<false>(v17, v14, v15);
        }
        else if (a2[39] < 0)
        {
          std::string::__assign_no_alias<true>(v17, *((void **)a2 + 2), *((_QWORD *)a2 + 3));
        }
        else
        {
          v19 = *((_OWORD *)a2 + 1);
          *((_QWORD *)v6 + 4) = *((_QWORD *)a2 + 4);
          *(_OWORD *)v17 = v19;
        }
      }
      *((_QWORD *)v6 + 5) = *((_QWORD *)a2 + 5);
      v16 = *(char **)v6;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = *(char **)a2;
      v6 = v16;
      if (!v16)
        goto LABEL_5;
    }
    do
    {
      v20 = *(char **)v6;
      if (v6[39] < 0)
        operator delete(*((void **)v6 + 2));
      operator delete(v6);
      v6 = v20;
    }
    while (v20);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      v7 = (char *)operator new(0x30uLL);
      v8 = (uint64_t)v7;
      v9 = (uint64_t *)(v7 + 16);
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      if (a2[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v10 = *((_OWORD *)a2 + 1);
        *((_QWORD *)v7 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)v9 = v10;
      }
      *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 5);
      v11 = *(char *)(v8 + 39);
      if (v11 >= 0)
        v12 = v9;
      else
        v12 = *(uint64_t **)(v8 + 16);
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v8 + 39);
      else
        v13 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 8) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v12, v13);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi((uint64_t)a1, v8);
      a2 = *(char **)a2;
    }
  }
}

void sub_19F075C98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t prime;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t **v20;
  size_t v21;
  uint8x8_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t *v27;
  size_t v28;
  uint64_t *v29;
  size_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  const void *v41;
  uint64_t *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint8x8_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  char v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void **v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  char v72;
  BOOL v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  _BOOL4 v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const void **v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  char v91;
  int v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  size_t v96;
  unint64_t v97;

  v2 = (_QWORD *)a2;
  v4 = (_QWORD *)(a2 + 16);
  v5 = *(char *)(a2 + 39);
  if (v5 >= 0)
    v6 = (uint64_t *)(a2 + 16);
  else
    v6 = *(uint64_t **)(a2 + 16);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 39);
  else
    v7 = *(_QWORD *)(a2 + 24);
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v6, v7);
  *(v4 - 1) = v8;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v11 = *(float *)(a1 + 32);
  v97 = v8;
  v95 = v2;
  if (!v9 || (float)(v11 * (float)v9) < v10)
  {
    v93 = v4;
    v12 = 1;
    if (v9 >= 3)
      v12 = (v9 & (v9 - 1)) != 0;
    v13 = v12 | (2 * v9);
    v14 = vcvtps_u32_f32(v10 / v11);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    if (v15 == 1)
    {
      v15 = 2;
    }
    else if ((v15 & (v15 - 1)) != 0)
    {
      prime = std::__next_prime(v15);
      v8 = v97;
      v15 = prime;
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (v15 > v9)
      goto LABEL_19;
    if (v15 >= v9)
      goto LABEL_101;
    v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
      v8 = v97;
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (v15 <= v24)
      v15 = v24;
    if (v15 >= v9)
    {
      v9 = *(_QWORD *)(a1 + 8);
LABEL_101:
      v4 = v93;
    }
    else
    {
      if (v15)
      {
LABEL_19:
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v17 = operator new(8 * v15);
        v18 = *(void **)a1;
        *(_QWORD *)a1 = v17;
        if (v18)
          operator delete(v18);
        v19 = 0;
        *(_QWORD *)(a1 + 8) = v15;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19++) = 0;
        while (v15 != v19);
        v20 = *(uint64_t ***)(a1 + 16);
        v8 = v97;
        if (!v20)
          goto LABEL_90;
        v21 = (size_t)v20[1];
        v22 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v22.i16[0] = vaddlv_u8(v22);
        v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          if (v21 >= v15)
            v21 %= v15;
        }
        else
        {
          v21 &= v15 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a1 + 16;
        v27 = *v20;
        if (!*v20)
        {
LABEL_90:
          v9 = v15;
          goto LABEL_101;
        }
        v94 = v22.u32[0];
        while (1)
        {
          v28 = v27[1];
          if (v23 > 1)
          {
            if (v28 >= v15)
              v28 %= v15;
          }
          else
          {
            v28 &= v15 - 1;
          }
          if (v28 == v21)
          {
            v20 = (uint64_t **)v27;
          }
          else
          {
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
            {
              v29 = (uint64_t *)*v27;
              v96 = v21;
              if (*v27)
              {
                v30 = v27[3];
                if (*((char *)v27 + 39) >= 0)
                  v31 = *((unsigned __int8 *)v27 + 39);
                else
                  v31 = v27[3];
                if ((*((_BYTE *)v27 + 39) & 0x80) == 0)
                {
                  if (*((_BYTE *)v27 + 39))
                  {
                    v32 = (uint64_t *)*v27;
                    v33 = v27;
LABEL_52:
                    v29 = v32;
                    v34 = *((unsigned __int8 *)v32 + 39);
                    v35 = (char)v34;
                    if ((v34 & 0x80u) != 0)
                      v34 = v29[3];
                    if (v31 == v34)
                    {
                      if (v35 >= 0)
                        v36 = (unsigned __int8 *)(v29 + 2);
                      else
                        v36 = (unsigned __int8 *)v29[2];
                      v37 = (unsigned __int8 *)(v27 + 2);
                      v38 = *((unsigned __int8 *)v27 + 39);
                      while (*v37 == *v36)
                      {
                        ++v37;
                        ++v36;
                        if (!--v38)
                        {
                          v32 = (uint64_t *)*v29;
                          v33 = v29;
                          v29 = 0;
                          if (v32)
                            goto LABEL_52;
                          goto LABEL_78;
                        }
                      }
                    }
                  }
                  else
                  {
                    v48 = *((unsigned __int8 *)v29 + 39);
                    if ((v48 & 0x80u) != 0)
                      v48 = v29[3];
                    v33 = v27;
                    if (v48 == *((unsigned __int8 *)v27 + 39))
                    {
                      do
                      {
                        v33 = v29;
                        v29 = (uint64_t *)*v29;
                        if (!v29)
                          break;
                        v49 = *((unsigned __int8 *)v29 + 39);
                        if ((v49 & 0x80u) != 0)
                          v49 = v29[3];
                      }
                      while (v31 == v49);
                    }
                  }
                  goto LABEL_78;
                }
                v39 = *((char *)v29 + 39) < 0;
                v40 = *((unsigned __int8 *)v29 + 39);
                if ((v40 & 0x80u) != 0)
                  v40 = v29[3];
                if (v31 == v40)
                {
                  v41 = (const void *)v27[2];
                  v33 = v27;
                  while (1)
                  {
                    v42 = v29;
                    v45 = (const void *)v29[2];
                    v43 = v29 + 2;
                    v44 = v45;
                    if (v39)
                      v46 = v44;
                    else
                      v46 = v43;
                    if (memcmp(v41, v46, v30))
                    {
                      v29 = v42;
                      goto LABEL_89;
                    }
                    v29 = (uint64_t *)*v42;
                    if (!*v42)
                      break;
                    v39 = *((char *)v29 + 39) < 0;
                    v47 = *((unsigned __int8 *)v29 + 39);
                    if ((v47 & 0x80u) != 0)
                      v47 = v29[3];
                    v33 = v42;
                    v8 = v97;
                    if (v31 != v47)
                      goto LABEL_78;
                  }
                  v33 = v42;
LABEL_89:
                  v8 = v97;
                  goto LABEL_78;
                }
              }
              v33 = v27;
LABEL_78:
              *v20 = v29;
              *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
              v21 = v96;
              v23 = v94;
              goto LABEL_38;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v20;
            v20 = (uint64_t **)v27;
            v21 = v28;
          }
LABEL_38:
          v27 = *v20;
          if (!*v20)
          {
            v9 = v15;
            v2 = v95;
            goto LABEL_101;
          }
        }
      }
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      v4 = v93;
      if (v50)
      {
        operator delete(v50);
        v8 = v97;
      }
      v9 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  v51 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v51.i16[0] = vaddlv_u8(v51);
  v52 = v51.u32[0];
  if (v51.u32[0] > 1uLL)
  {
    v53 = v8;
    if (v9 <= v8)
      v53 = v8 % v9;
  }
  else
  {
    v53 = (v9 - 1) & v8;
  }
  v54 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v53);
  if (v54)
  {
    v55 = *((_BYTE *)v2 + 39);
    if (v55 >= 0)
      v56 = *((unsigned __int8 *)v2 + 39);
    else
      v56 = v2[3];
    if (v55 < 0)
      v4 = (_QWORD *)v2[2];
    if (v51.u32[0] >= 2uLL)
    {
      v77 = 0;
      do
      {
        v60 = v54;
        v54 = (uint64_t *)*v54;
        if (!v54)
          break;
        v80 = v54[1];
        v81 = v80;
        if (v80 >= v9)
          v81 = v80 % v9;
        if (v81 != v53)
          break;
        if (v80 == v8
          && ((v82 = *((unsigned __int8 *)v54 + 39), (v82 & 0x80u) == 0)
            ? (v83 = *((unsigned __int8 *)v54 + 39))
            : (v83 = v54[3]),
              v83 == v56))
        {
          v84 = (const void **)(v54 + 2);
          if ((v82 & 0x80) != 0)
          {
            v92 = memcmp(*v84, v4, v54[3]);
            v8 = v97;
            v78 = v92 == 0;
          }
          else if (*((_BYTE *)v54 + 39))
          {
            v85 = v82 - 1;
            v86 = (unsigned __int8 *)v4;
            do
            {
              v88 = *(unsigned __int8 *)v84;
              v84 = (const void **)((char *)v84 + 1);
              v87 = v88;
              v90 = *v86++;
              v89 = v90;
              v71 = v85-- != 0;
              v91 = v71;
              v73 = v87 == v89;
              v78 = v87 == v89;
            }
            while (v73 && (v91 & 1) != 0);
          }
          else
          {
            v78 = 1;
          }
        }
        else
        {
          v78 = 0;
        }
        v79 = v77 & !v78;
        v77 |= v78;
      }
      while (v79 != 1);
    }
    else
    {
      v57 = 0;
      do
      {
        v60 = v54;
        v54 = (uint64_t *)*v54;
        if (!v54)
          break;
        v61 = v54[1];
        if ((v61 & (v9 - 1)) != v53)
          break;
        if (v61 == v8
          && ((v62 = *((unsigned __int8 *)v54 + 39), (v62 & 0x80u) == 0)
            ? (v63 = *((unsigned __int8 *)v54 + 39))
            : (v63 = v54[3]),
              v63 == v56))
        {
          v64 = (const void **)(v54 + 2);
          if ((v62 & 0x80) != 0)
          {
            v74 = memcmp(*v64, v4, v54[3]);
            v8 = v97;
            v58 = v74 == 0;
          }
          else if (*((_BYTE *)v54 + 39))
          {
            v65 = v62 - 1;
            v66 = (unsigned __int8 *)v4;
            do
            {
              v68 = *(unsigned __int8 *)v64;
              v64 = (const void **)((char *)v64 + 1);
              v67 = v68;
              v70 = *v66++;
              v69 = v70;
              v71 = v65-- != 0;
              v72 = v71;
              v73 = v67 == v69;
              v58 = v67 == v69;
            }
            while (v73 && (v72 & 1) != 0);
          }
          else
          {
            v58 = 1;
          }
        }
        else
        {
          v58 = 0;
        }
        v59 = v57 & !v58;
        v57 |= v58;
      }
      while ((v59 & 1) == 0);
    }
  }
  else
  {
    v60 = 0;
  }
  v75 = v95[1];
  if (v52 > 1)
  {
    if (v75 >= v9)
      v75 %= v9;
  }
  else
  {
    v75 &= v9 - 1;
  }
  if (!v60)
  {
    *v95 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v95;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v75) = a1 + 16;
    if (!*v95)
      goto LABEL_178;
    v76 = *(_QWORD *)(*v95 + 8);
    if (v52 > 1)
    {
      if (v76 >= v9)
        v76 %= v9;
    }
    else
    {
      v76 &= v9 - 1;
    }
LABEL_177:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v76) = v95;
    goto LABEL_178;
  }
  *v95 = *v60;
  *v60 = v95;
  if (*v95)
  {
    v76 = *(_QWORD *)(*v95 + 8);
    if (v52 > 1)
    {
      if (v76 >= v9)
        v76 %= v9;
    }
    else
    {
      v76 &= v9 - 1;
    }
    if (v76 != v75)
      goto LABEL_177;
  }
LABEL_178:
  ++*(_QWORD *)(a1 + 24);
}

double md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  return result;
}

BOOL grl::codec::IconMapPack::decodeRegionMapping(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  int v5;
  const char *v6;
  const char *v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  std::string::size_type v27;
  std::string::size_type v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  std::string::size_type v35;
  _DWORD *v36;
  std::string::size_type v37;
  _DWORD *v38;
  int v39;
  std::string::size_type size;
  uint64_t v41;
  __n128 v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  int v47;
  unint64_t v48;
  _DWORD *v49;
  unint64_t v50;
  int v51;
  std::string::size_type v52;
  std::string::size_type v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  std::string::size_type v60;
  _DWORD *v61;
  std::string::size_type v62;
  _DWORD *v63;
  int v64;
  std::string::size_type v65;
  uint64_t v66;
  __n128 v67;
  char v68;
  int v69;
  size_t v70;
  unsigned int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  const char *v81;
  const char *v82;
  int v83;
  int v84;
  int v85;
  _DWORD *v86;
  std::string *__str;
  _DWORD *v88;
  _DWORD *v89;
  std::string __p;
  char v91;
  unsigned int v92;
  std::string __dst;

  v4 = a3 - (_QWORD)a2;
  if ((unint64_t)(a3 - (_QWORD)a2) < 4)
  {
    v5 = 435;
    v6 = "defaultRegionCount.has_value()";
    v7 = "Count could not be read";
LABEL_61:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v7, v6, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", v5);
    return 0;
  }
  v8 = a1;
  v9 = *a2;
  v88 = a2;
  if (*a2)
  {
    v10 = 0;
    v11 = a1 + 34;
    v12 = 4;
    while (1)
    {
      v13 = v12;
      v12 += 4;
      if (v12 > v4)
        break;
      v14 = *(_DWORD *)((char *)a2 + v13);
      v15 = *v11;
      v16 = v8 + 34;
      v3 = v8 + 34;
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            v3 = (uint64_t *)v15;
            v17 = *(_DWORD *)(v15 + 28);
            if (v17 <= v14)
              break;
            v15 = *v3;
            v16 = v3;
            if (!*v3)
              goto LABEL_13;
          }
          if (v17 >= v14)
            break;
          v15 = v3[1];
          if (!v15)
          {
            v16 = v3 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[35] + 16))(v8[35], 32, 8);
        *(_DWORD *)(v18 + 28) = v14;
        *(_QWORD *)v18 = 0;
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 16) = v3;
        *v16 = v18;
        v19 = *(_QWORD *)v8[33];
        if (v19)
        {
          v8[33] = v19;
          v20 = (uint64_t *)*v16;
        }
        else
        {
          v20 = (uint64_t *)v18;
        }
        a1 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v8[34], v20);
        ++v8[36];
        a2 = v88;
      }
      if (++v10 == v9)
      {
        v21 = v13 + 8;
        goto LABEL_20;
      }
    }
    v5 = 439;
    v6 = "regionName.has_value()";
    v7 = "Region could not be read";
    goto LABEL_61;
  }
  v21 = 8;
LABEL_20:
  if (v21 > v4)
  {
    v5 = 444;
    v6 = "numberOfIconIDToRegions.has_value()";
    v7 = "Number of Regions to Icon ID could not be read";
    goto LABEL_61;
  }
  __str = (std::string *)(a2 - 1);
  v84 = *(_DWORD *)((char *)a2 + v21 - 4);
  if (v84)
  {
    LODWORD(v3) = 0;
    while (1)
    {
      if (v21 + 4 > v4)
      {
        v91 = 0;
        v80 = 448;
        v81 = "iconID.has_value()";
        v82 = "Icon ID could not be read";
        goto LABEL_131;
      }
      v92 = *(_DWORD *)((char *)a2 + v21);
      v91 = 1;
      v21 += 8;
      if (v21 > v4)
        break;
      v22 = *(unsigned int *)((char *)&__str->__r_.__value_.__l.__data_ + v21);
      v89 = 0;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      __p.__r_.__value_.__r.__words[2] = grl::Allocator::instance((grl::Allocator *)a1);
      std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::reserve((uint64_t)&v89, v22);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = v88;
        while (1)
        {
          v25 = v21 + 4;
          if (v21 + 4 > v4)
            break;
          v26 = *(_DWORD *)((char *)v24 + v21);
          v27 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] >= __p.__r_.__value_.__l.__size_)
          {
            v29 = (uint64_t)(__p.__r_.__value_.__r.__words[0] - (_QWORD)v89) >> 2;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62)
LABEL_134:
              abort();
            v31 = __p.__r_.__value_.__l.__size_ - (_QWORD)v89;
            if ((uint64_t)(__p.__r_.__value_.__l.__size_ - (_QWORD)v89) >> 1 > v30)
              v30 = v31 >> 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
              v32 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (*(uint64_t (**)(std::string::size_type, uint64_t, uint64_t))(*(_QWORD *)__p.__r_.__value_.__r.__words[2]
                                                                                        + 16))(__p.__r_.__value_.__r.__words[2], 4 * v32, 4);
              v34 = (_DWORD *)(v33 + 4 * v29);
              v35 = v33 + 4 * v32;
              if (v33)
                *v34 = v26;
            }
            else
            {
              v35 = 0;
              v34 = (_DWORD *)(4 * v29);
            }
            v36 = v89;
            v37 = __p.__r_.__value_.__r.__words[0];
            v38 = v34;
            if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v89)
            {
              v38 = v34;
              do
              {
                v39 = *(_DWORD *)(v37 - 4);
                v37 -= 4;
                *--v38 = v39;
              }
              while ((_DWORD *)v37 != v36);
            }
            v28 = (std::string::size_type)(v34 + 1);
            v89 = v38;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 1);
            size = __p.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__l.__size_ = v35;
            if (v36)
              (*(void (**)(std::string::size_type, _DWORD *, std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2]
                                                                                               + 40))(__p.__r_.__value_.__r.__words[2], v36, size - (_QWORD)v36);
            v24 = v88;
          }
          else
          {
            if (__p.__r_.__value_.__r.__words[0])
              *(_DWORD *)__p.__r_.__value_.__l.__data_ = v26;
            v28 = v27 + 4;
          }
          __p.__r_.__value_.__r.__words[0] = v28;
          ++v23;
          v21 = v25;
          if (v23 == (_DWORD)v22)
            goto LABEL_52;
        }
        a1 = (uint64_t *)printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Region ID could not be read", "regionID.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 457);
        v43 = 0;
      }
      else
      {
        v25 = v21;
LABEL_52:
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
        v41 = std::__tree<std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,grl::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v8 + 41, v92, &__dst);
        v42 = std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::__move_assign((uint64_t *)(v41 + 40), (__n128 *)&v89);
        v43 = 1;
        v21 = v25;
      }
      if (v89)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        a1 = (uint64_t *)(*(uint64_t (**)(std::string::size_type, _DWORD *, std::string::size_type, __n128))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 40))(__p.__r_.__value_.__r.__words[2], v89, __p.__r_.__value_.__l.__size_ - (_QWORD)v89, v42);
      }
      if ((v43 & 1) == 0)
        return 0;
      LODWORD(v3) = (_DWORD)v3 + 1;
      a2 = v88;
      if ((_DWORD)v3 == v84)
        goto LABEL_58;
    }
    v80 = 451;
    goto LABEL_130;
  }
LABEL_58:
  v44 = v21 + 4;
  if (v21 + 4 > v4)
  {
    v5 = 465;
    v6 = "numberOfCountryCodeToRegions.has_value()";
    v7 = "Number of Regions to Country Code could not be read";
    goto LABEL_61;
  }
  v85 = *(_DWORD *)((char *)a2 + v21);
  if (v85)
  {
    v47 = 0;
    while (1)
    {
      if (v44 + 4 > v4)
      {
        v91 = 0;
        v80 = 469;
        v81 = "countryCode.has_value()";
        v82 = "Country Code could not be read";
        goto LABEL_131;
      }
      v92 = *(_DWORD *)((char *)a2 + v44);
      v91 = 1;
      v44 += 8;
      if (v44 > v4)
        break;
      v48 = *(unsigned int *)((char *)&__str->__r_.__value_.__l.__data_ + v44);
      v89 = 0;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      __p.__r_.__value_.__r.__words[2] = grl::Allocator::instance((grl::Allocator *)a1);
      std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::reserve((uint64_t)&v89, v48);
      if ((_DWORD)v48)
      {
        LODWORD(v3) = 0;
        v49 = v88;
        while (1)
        {
          v50 = v44 + 4;
          if (v44 + 4 > v4)
            break;
          v51 = *(_DWORD *)((char *)v49 + v44);
          v52 = __p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] >= __p.__r_.__value_.__l.__size_)
          {
            v54 = (uint64_t)(__p.__r_.__value_.__r.__words[0] - (_QWORD)v89) >> 2;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62)
              goto LABEL_134;
            v56 = __p.__r_.__value_.__l.__size_ - (_QWORD)v89;
            if ((uint64_t)(__p.__r_.__value_.__l.__size_ - (_QWORD)v89) >> 1 > v55)
              v55 = v56 >> 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
              v57 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v58 = (*(uint64_t (**)(std::string::size_type, uint64_t, uint64_t))(*(_QWORD *)__p.__r_.__value_.__r.__words[2]
                                                                                        + 16))(__p.__r_.__value_.__r.__words[2], 4 * v57, 4);
              v59 = (_DWORD *)(v58 + 4 * v54);
              v60 = v58 + 4 * v57;
              if (v58)
                *v59 = v51;
            }
            else
            {
              v60 = 0;
              v59 = (_DWORD *)(4 * v54);
            }
            v61 = v89;
            v62 = __p.__r_.__value_.__r.__words[0];
            v63 = v59;
            if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v89)
            {
              v63 = v59;
              do
              {
                v64 = *(_DWORD *)(v62 - 4);
                v62 -= 4;
                *--v63 = v64;
              }
              while ((_DWORD *)v62 != v61);
            }
            v53 = (std::string::size_type)(v59 + 1);
            v89 = v63;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v59 + 1);
            v65 = __p.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__l.__size_ = v60;
            if (v61)
              (*(void (**)(std::string::size_type, _DWORD *, std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2]
                                                                                               + 40))(__p.__r_.__value_.__r.__words[2], v61, v65 - (_QWORD)v61);
            v49 = v88;
          }
          else
          {
            if (__p.__r_.__value_.__r.__words[0])
              *(_DWORD *)__p.__r_.__value_.__l.__data_ = v51;
            v53 = v52 + 4;
          }
          __p.__r_.__value_.__r.__words[0] = v53;
          LODWORD(v3) = (_DWORD)v3 + 1;
          v44 = v50;
          if ((_DWORD)v3 == (_DWORD)v48)
            goto LABEL_94;
        }
        a1 = (uint64_t *)printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Region ID could not be read", "regionID.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 478);
        v68 = 0;
      }
      else
      {
        v50 = v44;
LABEL_94:
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
        v66 = std::__tree<std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,grl::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v8 + 45, v92, &__dst);
        v67 = std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::__move_assign((uint64_t *)(v66 + 40), (__n128 *)&v89);
        v68 = 1;
        v44 = v50;
      }
      if (v89)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        a1 = (uint64_t *)(*(uint64_t (**)(std::string::size_type, _DWORD *, std::string::size_type, __n128))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 40))(__p.__r_.__value_.__r.__words[2], v89, __p.__r_.__value_.__l.__size_ - (_QWORD)v89, v67);
      }
      if ((v68 & 1) == 0)
        return 0;
      ++v47;
      a2 = v88;
      if (v47 == v85)
        goto LABEL_100;
    }
    v80 = 472;
LABEL_130:
    v81 = "numberOfRegions.has_value()";
    v82 = "Number of Regions could not be read";
LABEL_131:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v82, v81, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", v80);
    return 0;
  }
LABEL_100:
  if (v44 + 4 <= v4)
  {
    LODWORD(v3) = *(_DWORD *)((char *)a2 + v44);
    if (!(_DWORD)v3)
      return 1;
    v44 += 4;
  }
  v45 = 0;
  v69 = 0;
  v86 = a2 + 1;
  v83 = (int)v3;
  while (v4 >= v44 + 4)
  {
    if (v4 == v44 + 4)
    {
LABEL_109:
      LOBYTE(v89) = 0;
      printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Region Name could not be read", "regionName.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 493);
      v72 = 0;
      v44 += 4;
    }
    else
    {
      v70 = 0;
      v71 = *(_DWORD *)((char *)a2 + v44);
      while (*((_BYTE *)v86 + v44 + v70))
      {
        if (v4 - (v44 + 4) == ++v70)
          goto LABEL_109;
      }
      std::string::basic_string[abi:nn180100](&__dst, (char *)a2 + v44 + 4, v70);
      LOBYTE(v89) = 1;
      __p = __dst;
      v73 = (uint64_t)(v8 + 38);
      while (1)
      {
        v74 = *(_QWORD *)v73;
        v75 = (uint64_t **)v73;
        if (!*(_QWORD *)v73)
          break;
        while (1)
        {
          v73 = v74;
          v76 = *(_DWORD *)(v74 + 32);
          if (v76 > v71)
            break;
          if (v76 >= v71)
            goto LABEL_119;
          v74 = *(_QWORD *)(v73 + 8);
          if (!v74)
          {
            v75 = (uint64_t **)(v73 + 8);
            goto LABEL_116;
          }
        }
      }
LABEL_116:
      v77 = v73;
      v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[39] + 16))(v8[39], 64, 8);
      *(_DWORD *)(v73 + 32) = v71;
      *(_QWORD *)(v73 + 48) = 0;
      *(_QWORD *)(v73 + 56) = 0;
      *(_QWORD *)(v73 + 40) = 0;
      *(_QWORD *)v73 = 0;
      *(_QWORD *)(v73 + 8) = 0;
      *(_QWORD *)(v73 + 16) = v77;
      *v75 = (uint64_t *)v73;
      v78 = *(_QWORD *)v8[37];
      v79 = (uint64_t *)v73;
      if (v78)
      {
        v8[37] = v78;
        v79 = *v75;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v8[38], v79);
      ++v8[40];
LABEL_119:
      v44 += v70 + 5;
      std::string::operator=((std::string *)(v73 + 40), &__p);
      v72 = 1;
      LODWORD(v3) = v83;
    }
    if ((_BYTE)v89 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    a2 = v88;
    if ((v72 & 1) != 0)
    {
      v45 = ++v69 >= v3;
      if (v69 != (_DWORD)v3)
        continue;
    }
    return v45;
  }
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Region ID could not be read", "region.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 490);
  return v45;
}

uint64_t grl::Allocator::instance(grl::Allocator *this)
{
  unsigned __int8 v1;
  float *v2;
  int v4;
  uint64_t v5;

  v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v1 & 1) == 0)
  {
    v2 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v4)
    {
      v5 = operator new();
      grl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v5, "GRL", 0x7D73703A00000003, 0, 0);
      v2 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  return *((_QWORD *)v2 + 384);
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2)
  {
    if (a2 >> 62)
      abort();
    v3 = result;
    v4 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * a2, 4);
    v5 = *(_QWORD *)v3;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = result + (v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6 != *(_QWORD *)v3)
    {
      v7 = result + (v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v8 = *(_DWORD *)(v6 - 4);
        v6 -= 4;
        *(_DWORD *)(v7 - 4) = v8;
        v7 -= 4;
      }
      while (v6 != v5);
    }
    *(_QWORD *)v3 = v7;
    *(_QWORD *)(v3 + 8) = result + (v4 & 0xFFFFFFFFFFFFFFFCLL);
    v9 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 4 * a2;
    if (v5)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v5, v9 - v5);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,grl::Allocator>>>,grl::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD **a3)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (uint64_t)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2)
          break;
        v5 = *(_QWORD *)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = *(_QWORD *)(v7 + 8);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 72, 8);
    *(_DWORD *)(v7 + 32) = **a3;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 64) = grl::Allocator::instance((grl::Allocator *)v7);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[3] = (uint64_t *)((char *)a1[3] + 1);
  }
  return v7;
}

uint64_t grl::codec::IconMapPack::decodeIconIDMapping(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t **v21;
  uint64_t *i;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  char v39;
  unsigned int v41;
  int v42;
  uint64_t v43;
  size_t v44;
  int v45;
  unint64_t v46;
  grl::Allocator *v47;
  unint64_t v48;
  char *p_p;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t **v62;
  uint64_t *m;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  _BOOL8 v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  _QWORD *v78;
  grl::Allocator *v79;
  BOOL v80;
  unint64_t v81;
  unsigned int v82;
  size_t v83;
  int v84;
  unint64_t v85;
  grl::Allocator *v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  uint64_t *v92;
  uint64_t j;
  unint64_t v94;
  grl::Allocator *v95;
  float v96;
  float v97;
  _BOOL8 v98;
  unint64_t v99;
  unint64_t v100;
  size_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t k;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t *v115;
  unsigned int v116;
  char v117;
  int v118;
  unint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unint64_t v130;
  int v131[2];
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  int v136;
  uint64_t v137;
  __int128 __p;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  _BYTE __dst[24];
  uint64_t v144;

  v3 = a3 - (_QWORD)a2;
  if ((unint64_t)(a3 - (_QWORD)a2) < 4)
  {
    v4 = 356;
    v5 = "mapCount.has_value()";
LABEL_56:
    v38 = "Map Count could not be read";
    goto LABEL_57;
  }
  v6 = (unint64_t)a2;
  v7 = a1;
  v8 = *a2;
  v129 = a2 - 1;
  v130 = a1 + 40;
  std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>(a1 + 40, vcvtps_u32_f32((float)*a2 / *(float *)(a1 + 88)));
  v125 = v8;
  if (v8)
  {
    v9 = 0;
    v121 = (uint64_t *)(v7 + 64);
    v123 = v3;
    v10 = 4;
    v11 = (_QWORD *)v130;
    v124 = v6;
    while (1)
    {
      if (v10 + 4 > v3)
      {
        v4 = 361;
        v5 = "key.has_value()";
        v38 = "Key could not be read";
        goto LABEL_57;
      }
      v12 = v10;
      v13 = v10 + 8;
      if (v10 + 8 > v3)
      {
        v4 = 364;
        v5 = "value.has_value()";
        v38 = "Value could not be read";
        goto LABEL_57;
      }
      v10 += 12;
      if (v12 + 12 > v3)
      {
        v4 = 367;
        goto LABEL_88;
      }
      v14 = *(unsigned int *)(v6 + v12);
      v15 = *(unsigned int *)((char *)v129 + v13);
      v16 = v129[(unint64_t)v10 / 4];
      v17 = ((v14 - 0x61C8864680B583EBLL) << 6)
          - 0x61C8864680B583EBLL
          + ((unint64_t)(v14 - 0x61C8864680B583EBLL) >> 2)
          + v15;
      v18 = v17 ^ (v14 - 0x61C8864680B583EBLL);
      v19 = *(_QWORD *)(v7 + 48);
      if (v19)
      {
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          v3 = v17 ^ (v14 - 0x61C8864680B583EBLL);
          if (v18 >= v19)
            v3 = v18 % v19;
        }
        else
        {
          v3 = (v19 - 1) & v18;
        }
        v21 = *(uint64_t ***)(*v11 + 8 * v3);
        if (v21)
        {
          for (i = *v21; i; i = (uint64_t *)*i)
          {
            v23 = i[1];
            if (v23 == v18)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v14 && *((_DWORD *)i + 5) == (_DWORD)v15)
                goto LABEL_51;
            }
            else
            {
              if (v20.u32[0] > 1uLL)
              {
                if (v23 >= v19)
                  v23 %= v19;
              }
              else
              {
                v23 &= v19 - 1;
              }
              if (v23 != v3)
                break;
            }
          }
        }
      }
      v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 72) + 16))(*(_QWORD *)(v7 + 72), 32, 8);
      v26 = v7;
      v27 = v25;
      v11 = (_QWORD *)v130;
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v27 + 8) = v18;
      *(_QWORD *)(v27 + 16) = v14 | (v15 << 32);
      *(_DWORD *)(v27 + 24) = v16;
      v28 = (float)(unint64_t)(*(_QWORD *)(v26 + 80) + 1);
      v29 = v26;
      v30 = *(float *)(v26 + 88);
      if (!v19 || (float)(v30 * (float)v19) < v28)
      {
        v31 = (v19 & (v19 - 1)) != 0;
        if (v19 < 3)
          v31 = 1;
        v32 = v31 | (2 * v19);
        v33 = vcvtps_u32_f32(v28 / v30);
        if (v32 <= v33)
          v34 = v33;
        else
          v34 = v32;
        std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>(v130, v34);
        v19 = *(_QWORD *)(v29 + 48);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v18 >= v19)
            v3 = v18 % v19;
          else
            v3 = v18;
        }
        else
        {
          v3 = (v19 - 1) & v18;
        }
        v11 = (_QWORD *)v130;
      }
      v35 = *(uint64_t **)(*v11 + 8 * v3);
      if (v35)
      {
        *(_QWORD *)v27 = *v35;
      }
      else
      {
        *(_QWORD *)v27 = *v121;
        *v121 = v27;
        *(_QWORD *)(*v11 + 8 * v3) = v121;
        if (!*(_QWORD *)v27)
          goto LABEL_50;
        v36 = *(_QWORD *)(*(_QWORD *)v27 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v36 >= v19)
            v36 %= v19;
        }
        else
        {
          v36 &= v19 - 1;
        }
        v35 = (uint64_t *)(*v11 + 8 * v36);
      }
      *v35 = v27;
LABEL_50:
      v7 = v29;
      ++*(_QWORD *)(v29 + 80);
LABEL_51:
      ++v9;
      v3 = v123;
      v6 = v124;
      if (v9 == v125)
      {
        v37 = v12 + 16;
        goto LABEL_54;
      }
    }
  }
  v37 = 8;
LABEL_54:
  if (v37 > v3)
  {
    v4 = 373;
    v5 = "nameMapCount.has_value()";
    goto LABEL_56;
  }
  v41 = *(_DWORD *)(v6 + v37 - 4);
  *(_QWORD *)v131 = v7;
  v126 = v7 + 96;
  std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>(v7 + 96, vcvtps_u32_f32((float)v41 / *(float *)(v7 + 144)));
  if (v41)
  {
    v42 = 0;
    v43 = v6 - a3;
    do
    {
      if (v3 == v37)
      {
LABEL_66:
        LOBYTE(v137) = 0;
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Name could not be read", "name.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 378);
        v45 = 1;
      }
      else
      {
        v44 = 0;
        while (*(_BYTE *)(v6 + v37 + v44))
        {
          ++v44;
          if (!(v43 + v37 + v44))
            goto LABEL_66;
        }
        v46 = v6 + v37;
        v47 = (grl::Allocator *)std::string::basic_string[abi:nn180100](__dst, (void *)(v6 + v37), v44);
        v48 = v37 + v44;
        LOBYTE(v137) = 1;
        __p = *(_OWORD *)__dst;
        v139 = *(_QWORD *)&__dst[16];
        v37 += v44 + 5;
        if (v37 <= v3)
        {
          DWORD1(v132) = *(_DWORD *)(v46 + v44 + 1);
          LOBYTE(v132) = 1;
          if (v139 >= 0)
            p_p = (char *)&__p;
          else
            p_p = (char *)__p;
          if (v139 >= 0)
            v50 = HIBYTE(v139);
          else
            v50 = *((_QWORD *)&__p + 1);
          v144 = grl::Allocator::instance(v47);
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>::__init_with_size[abi:nn180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((uint64_t)__dst, p_p, &p_p[v50], v50);
          std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::__emplace_unique_key_args<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>&,unsigned int &>(v126, (uint64_t)__dst, (__int128 *)__dst, (_DWORD *)&v132 + 1);
          if ((__dst[23] & 0x80000000) != 0)
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v144 + 40))(v144, *(_QWORD *)__dst, *(_QWORD *)&__dst[16] & 0x7FFFFFFFFFFFFFFFLL);
          v45 = 0;
          v43 = v6 - a3;
        }
        else
        {
          v37 = v48 + 1;
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Identifier could not be read", "identifer.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 381);
          v45 = 1;
        }
      }
      if ((_BYTE)v137 && SHIBYTE(v139) < 0)
        operator delete((void *)__p);
      if (v45)
        goto LABEL_58;
      ++v42;
    }
    while (v42 != v41);
  }
  v51 = v37 + 4;
  if (v37 + 4 > v3)
  {
    v4 = 387;
    v5 = "dataMapCount.has_value()";
    v38 = "Data Count could not be read";
    goto LABEL_57;
  }
  v52 = *(_DWORD *)(v6 + v37);
  v53 = *(_QWORD *)v131;
  v54 = (_QWORD *)(*(_QWORD *)v131 + 152);
  std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>(*(_QWORD *)v131 + 152, vcvtps_u32_f32((float)v52 / *(float *)(*(_QWORD *)v131 + 200)));
  v127 = v52;
  if (!v52)
  {
LABEL_132:
    v76 = v51 + 4;
    if (v51 + 4 > v3)
    {
      v4 = 401;
      v5 = "textDataMapCount.has_value()";
      v38 = "Text Data Count could not be read";
      goto LABEL_57;
    }
    v77 = *(_DWORD *)(v6 + v51);
    v78 = (_QWORD *)(*(_QWORD *)v131 + 208);
    v79 = (grl::Allocator *)std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>(*(_QWORD *)v131 + 208, vcvtps_u32_f32((float)v77 / *(float *)(*(_QWORD *)v131 + 256)));
    v116 = v77;
    if (!v77)
    {
      v39 = 1;
      return v39 & 1;
    }
    v80 = 0;
    v81 = 0;
    v115 = (uint64_t *)(*(_QWORD *)v131 + 232);
    v128 = v6 - a3;
    while (1)
    {
      if (v76 + 4 > v3)
      {
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Data ID could not be read", "dataID.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 406);
        v39 = v80;
        return v39 & 1;
      }
      v117 = v80;
      if (v76 + 8 > v3)
      {
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Text Map Count could not be read", "textMapCount.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 409);
LABEL_220:
        v39 = v117;
        return v39 & 1;
      }
      v118 = v81;
      v120 = *(unsigned int *)(v6 + v76);
      v82 = *(unsigned int *)((char *)v129 + v76 + 8);
      v137 = 0;
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = grl::Allocator::instance(v79);
      v139 = 0;
      v140 = grl::Allocator::instance(*((grl::Allocator **)&__p + 1));
      v141 = 0;
      v142 = 1065353216;
      std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>((unint64_t)&v137, (unint64_t)(float)v82);
      if (v82)
      {
        LODWORD(v81) = 0;
        v76 += 8;
        while (v3 != v76)
        {
          v83 = 0;
          while (*(_BYTE *)(v6 + v76 + v83))
          {
            ++v83;
            if (!(v128 + v76 + v83))
              goto LABEL_144;
          }
          v85 = v6 + v76;
          v86 = (grl::Allocator *)std::string::basic_string[abi:nn180100](&v132, (void *)(v6 + v76), v83);
          v87 = v76 + v83;
          __dst[0] = 1;
          *(_OWORD *)&__dst[8] = v132;
          v144 = v133;
          v76 += v83 + 5;
          if (v76 > v3)
          {
            v76 = v87 + 1;
            printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Identifier could not be read", "identifier.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 418);
            goto LABEL_145;
          }
          v136 = *(_DWORD *)(v85 + v83 + 1);
          v135 = 1;
          if (v144 >= 0)
            v88 = &__dst[8];
          else
            v88 = *(char **)&__dst[8];
          if (v144 >= 0)
            v89 = HIBYTE(v144);
          else
            v89 = *(_QWORD *)&__dst[16];
          v134 = grl::Allocator::instance(v86);
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>::__init_with_size[abi:nn180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((uint64_t)&v132, v88, &v88[v89], v89);
          std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::__emplace_unique_key_args<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>&,unsigned int &>((unint64_t)&v137, (uint64_t)&v132, &v132, &v136);
          if (SHIBYTE(v133) < 0)
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v134 + 40))(v134, v132, v133 & 0x7FFFFFFFFFFFFFFFLL);
          v84 = 0;
LABEL_146:
          if (__dst[0] && SHIBYTE(v144) < 0)
            operator delete(*(void **)&__dst[8]);
          if (v84)
          {
            std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::~__hash_table((uint64_t)&v137);
            goto LABEL_220;
          }
          v81 = (v81 + 1);
          if ((_DWORD)v81 == v82)
            goto LABEL_164;
        }
LABEL_144:
        __dst[0] = 0;
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Text could not be read", "text.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", 415);
LABEL_145:
        v84 = 1;
        goto LABEL_146;
      }
      v76 += 8;
LABEL_164:
      v90 = *(_QWORD *)(*(_QWORD *)v131 + 216);
      if (v90)
      {
        v91 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
        v91.i16[0] = vaddlv_u8(v91);
        if (v91.u32[0] > 1uLL)
        {
          v81 = v120;
          if (v90 <= v120)
            v81 = v120 % v90;
        }
        else
        {
          v81 = ((_DWORD)v90 - 1) & v120;
        }
        v92 = *(uint64_t **)(*v78 + 8 * v81);
        if (v92)
        {
          for (j = *v92; j; j = *(_QWORD *)j)
          {
            v94 = *(_QWORD *)(j + 8);
            if (v94 == v120)
            {
              if (*(_DWORD *)(j + 16) == (_DWORD)v120)
              {
                v114 = v118;
                goto LABEL_202;
              }
            }
            else
            {
              if (v91.u32[0] > 1uLL)
              {
                if (v94 >= v90)
                  v94 %= v90;
              }
              else
              {
                v94 &= v90 - 1;
              }
              if (v94 != v81)
                break;
            }
          }
        }
      }
      j = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v131 + 240) + 16))(*(_QWORD *)(*(_QWORD *)v131 + 240), 80, 8);
      *(_QWORD *)j = 0;
      *(_QWORD *)(j + 8) = v120;
      *(_DWORD *)(j + 16) = v120;
      *(_QWORD *)(j + 24) = 0;
      *(_QWORD *)(j + 32) = 0;
      v95 = (grl::Allocator *)grl::Allocator::instance((grl::Allocator *)j);
      *(_QWORD *)(j + 40) = v95;
      *(_QWORD *)(j + 48) = 0;
      *(_QWORD *)(j + 56) = grl::Allocator::instance(v95);
      *(_QWORD *)(j + 64) = 0;
      *(_DWORD *)(j + 72) = 1065353216;
      v96 = (float)(unint64_t)(*(_QWORD *)(*(_QWORD *)v131 + 248) + 1);
      v97 = *(float *)(*(_QWORD *)v131 + 256);
      if (!v90 || (float)(v97 * (float)v90) < v96)
      {
        v98 = (v90 & (v90 - 1)) != 0;
        if (v90 < 3)
          v98 = 1;
        v99 = v98 | (2 * v90);
        v100 = vcvtps_u32_f32(v96 / v97);
        if (v99 <= v100)
          v101 = v100;
        else
          v101 = v99;
        std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>((unint64_t)v78, v101);
        v90 = *(_QWORD *)(*(_QWORD *)v131 + 216);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v90 <= v120)
            v81 = v120 % v90;
          else
            v81 = v120;
        }
        else
        {
          v81 = ((_DWORD)v90 - 1) & v120;
        }
      }
      v102 = *(uint64_t **)(*v78 + 8 * v81);
      if (v102)
      {
        *(_QWORD *)j = *v102;
        v114 = v118;
      }
      else
      {
        *(_QWORD *)j = *v115;
        *v115 = j;
        *(_QWORD *)(*v78 + 8 * v81) = v115;
        v114 = v118;
        if (!*(_QWORD *)j)
          goto LABEL_201;
        v103 = *(_QWORD *)(*(_QWORD *)j + 8);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v103 >= v90)
            v103 %= v90;
        }
        else
        {
          v103 &= v90 - 1;
        }
        v102 = (uint64_t *)(*v78 + 8 * v103);
      }
      *v102 = j;
LABEL_201:
      ++*(_QWORD *)(*(_QWORD *)v131 + 248);
LABEL_202:
      v104 = (uint64_t *)(j + 24);
      if (*(_QWORD *)(j + 64))
      {
        std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::__deallocate_node(j + 24, *(uint64_t **)(j + 48));
        *(_QWORD *)(j + 48) = 0;
        v105 = *(_QWORD *)(j + 32);
        if (v105)
        {
          for (k = 0; k != v105; ++k)
            *(_QWORD *)(*v104 + 8 * k) = 0;
        }
        *(_QWORD *)(j + 64) = 0;
      }
      v107 = v137;
      v137 = 0;
      v108 = *v104;
      *v104 = v107;
      if (v108)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(j + 40) + 40))(*(_QWORD *)(j + 40), v108, 8 * *(_QWORD *)(j + 32));
      v109 = __p;
      v110 = v139;
      *(_QWORD *)(j + 48) = v139;
      v111 = j + 48;
      *(_QWORD *)(v111 - 16) = v109;
      *(_QWORD *)&__p = 0;
      v112 = v141;
      *(_QWORD *)(v111 + 16) = v141;
      *(_DWORD *)(v111 + 24) = v142;
      if (v112)
      {
        v113 = *(_QWORD *)(v110 + 8);
        if ((v109 & (v109 - 1)) != 0)
        {
          if (v113 >= v109)
            v113 %= v109;
        }
        else
        {
          v113 &= v109 - 1;
        }
        *(_QWORD *)(*v104 + 8 * v113) = v111;
        v139 = 0;
        v141 = 0;
      }
      v79 = (grl::Allocator *)std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::~__hash_table((uint64_t)&v137);
      v81 = (v114 + 1);
      v39 = 1;
      v80 = v81 >= v116;
      if ((_DWORD)v81 == v116)
        return v39 & 1;
    }
  }
  v55 = 0;
  v122 = (uint64_t *)(*(_QWORD *)v131 + 176);
  while (1)
  {
    if (v51 + 4 > v3)
    {
      v4 = 392;
      v5 = "dataID.has_value()";
      v38 = "Data ID could not be read";
      goto LABEL_57;
    }
    if (v51 + 8 > v3)
      break;
    v56 = v3;
    v57 = v6;
    v58 = *(unsigned int *)(v6 + v51);
    v51 += 8;
    v59 = *(unsigned int *)((char *)v129 + v51);
    v60 = *(_QWORD *)(v53 + 160);
    if (v60)
    {
      v61 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
      v61.i16[0] = vaddlv_u8(v61);
      if (v61.u32[0] > 1uLL)
      {
        v6 = v58;
        if (v60 <= v58)
          v6 = v58 % v60;
      }
      else
      {
        v6 = ((_DWORD)v60 - 1) & v58;
      }
      v62 = *(uint64_t ***)(*v54 + 8 * v6);
      if (v62)
      {
        for (m = *v62; m; m = (uint64_t *)*m)
        {
          v64 = m[1];
          if (v64 == v58)
          {
            if (*((_DWORD *)m + 4) == (_DWORD)v58)
              goto LABEL_131;
          }
          else
          {
            if (v61.u32[0] > 1uLL)
            {
              if (v64 >= v60)
                v64 %= v60;
            }
            else
            {
              v64 &= v60 - 1;
            }
            if (v64 != v6)
              break;
          }
        }
      }
    }
    v65 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 184) + 16))(*(_QWORD *)(v53 + 184), 24, 8);
    v66 = v53;
    v67 = v65;
    *(_QWORD *)v65 = 0;
    *(_QWORD *)(v65 + 8) = v58;
    *(_DWORD *)(v65 + 16) = v58;
    *(_DWORD *)(v65 + 20) = v59;
    v68 = (float)(unint64_t)(*(_QWORD *)(v66 + 192) + 1);
    v69 = *(float *)(v66 + 200);
    if (!v60 || (float)(v69 * (float)v60) < v68)
    {
      v70 = (v60 & (v60 - 1)) != 0;
      if (v60 < 3)
        v70 = 1;
      v71 = v70 | (2 * v60);
      v72 = vcvtps_u32_f32(v68 / v69);
      if (v71 <= v72)
        v73 = v72;
      else
        v73 = v71;
      std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>((unint64_t)v54, v73);
      v60 = *(_QWORD *)(*(_QWORD *)v131 + 160);
      if ((v60 & (v60 - 1)) != 0)
      {
        if (v60 <= v58)
          v6 = v58 % v60;
        else
          v6 = v58;
      }
      else
      {
        v6 = ((_DWORD)v60 - 1) & v58;
      }
    }
    v74 = *(uint64_t **)(*v54 + 8 * v6);
    if (v74)
    {
      *(_QWORD *)v67 = *v74;
    }
    else
    {
      *(_QWORD *)v67 = *v122;
      *v122 = v67;
      *(_QWORD *)(*v54 + 8 * v6) = v122;
      if (!*(_QWORD *)v67)
        goto LABEL_130;
      v75 = *(_QWORD *)(*(_QWORD *)v67 + 8);
      if ((v60 & (v60 - 1)) != 0)
      {
        if (v75 >= v60)
          v75 %= v60;
      }
      else
      {
        v75 &= v60 - 1;
      }
      v74 = (uint64_t *)(*v54 + 8 * v75);
    }
    *v74 = v67;
LABEL_130:
    v53 = *(_QWORD *)v131;
    ++*(_QWORD *)(*(_QWORD *)v131 + 192);
LABEL_131:
    ++v55;
    v6 = v57;
    v3 = v56;
    if (v55 == v127)
      goto LABEL_132;
  }
  v4 = 395;
LABEL_88:
  v5 = "identifer.has_value()";
  v38 = "Identifier could not be read";
LABEL_57:
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v38, v5, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconMapPack.cpp", v4);
LABEL_58:
  v39 = 0;
  return v39 & 1;
}

unint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::__emplace_unique_key_args<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>&,unsigned int &>(unint64_t a1, uint64_t a2, __int128 *a3, _DWORD *a4)
{
  unint64_t v4;
  unsigned __int8 *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  unint64_t v18;
  unint64_t result;
  uint64_t v20;
  __int128 v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t *v28;
  unint64_t v29;
  char v30;

  v7 = (unsigned __int8 *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v30, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v16 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v16)
    {
      for (i = *v16; i; i = *(unsigned __int8 **)i)
      {
        v18 = *((_QWORD *)i + 1);
        if (v18 == v12)
        {
          result = std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>::operator()[abi:nn180100](a1 + 48, i + 16, v7);
          if ((result & 1) != 0)
            return result;
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v4)
            break;
        }
      }
    }
  }
  v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 56, 8);
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = v12;
  result = v20 + 16;
  *(_QWORD *)(v20 + 40) = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    result = (unint64_t)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)result, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v21 = *a3;
    *(_QWORD *)(v20 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)result = v21;
  }
  *(_DWORD *)(v20 + 48) = *a4;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v23 = *(float *)(a1 + 48);
  if (!v13 || (float)(v23 * (float)v13) < v22)
  {
    v24 = 1;
    if (v13 >= 3)
      v24 = (v13 & (v13 - 1)) != 0;
    v25 = v24 | (2 * v13);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    result = std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>(a1, v27);
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v4 = v12 % v13;
      else
        v4 = v12;
    }
    else
    {
      v4 = (v13 - 1) & v12;
    }
  }
  v28 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)v20 = *v28;
LABEL_44:
    *v28 = v20;
    goto LABEL_45;
  }
  *(_QWORD *)v20 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 24;
  if (*(_QWORD *)v20)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v20 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v29 >= v13)
        v29 %= v13;
    }
    else
    {
      v29 &= v13 - 1;
    }
    v28 = (uint64_t *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 40);
  return result;
}

unint64_t std::__hash_table<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::__unordered_map_hasher<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::hash<grl::codec::IconMapKeyValue>,std::equal_to<grl::codec::IconMapKeyValue>,true>,std::__unordered_map_equal<grl::codec::IconMapKeyValue,std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,std::equal_to<grl::codec::IconMapKeyValue>,std::hash<grl::codec::IconMapKeyValue>,true>,geo::StdAllocator<std::__hash_value_type<grl::codec::IconMapKeyValue,unsigned int>,grl::Allocator>>::__rehash<true>(unint64_t result, size_t __n)
{
  unint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;

  v2 = result;
  if (__n == 1)
  {
    v3 = 2;
  }
  else
  {
    v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      result = std::__next_prime(__n);
      v3 = result;
    }
  }
  v4 = *(int8x8_t *)(v2 + 8);
  if (v3 <= *(_QWORD *)&v4)
  {
    if (v3 >= *(_QWORD *)&v4)
      return result;
    result = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 40) / *(float *)(v2 + 48));
    if (*(_QWORD *)&v4 < 3uLL || (v10 = (uint8x8_t)vcnt_s8(v4), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      result = std::__next_prime(result);
    }
    else
    {
      v11 = 1 << -(char)__clz(result - 1);
      if (result >= 2)
        result = v11;
    }
    if (v3 <= result)
      v3 = result;
    if (v3 >= *(_QWORD *)&v4)
      return result;
    if (!v3)
    {
      v14 = *(_QWORD *)v2;
      *(_QWORD *)v2 = 0;
      if (v14)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 16) + 40))(*(_QWORD *)(v2 + 16), v14, 8 * *(_QWORD *)(v2 + 8));
      *(_QWORD *)(v2 + 8) = 0;
      return result;
    }
  }
  result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v2 + 16) + 16))(*(_QWORD *)(v2 + 16), 8 * v3, 8);
  v5 = *(_QWORD *)v2;
  *(_QWORD *)v2 = result;
  if (v5)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 16) + 40))(*(_QWORD *)(v2 + 16), v5, 8 * *(_QWORD *)(v2 + 8));
  v6 = 0;
  *(_QWORD *)(v2 + 8) = v3;
  do
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v6++) = 0;
  while (v3 != v6);
  v7 = *(_QWORD **)(v2 + 24);
  if (v7)
  {
    v8 = v7[1];
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= v3)
        v8 %= v3;
    }
    else
    {
      v8 &= v3 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v8) = v2 + 24;
    v12 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v13 = v12[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v13 >= v3)
            v13 %= v3;
        }
        else
        {
          v13 &= v3 - 1;
        }
        if (v13 != v8)
        {
          if (!*(_QWORD *)(*(_QWORD *)v2 + 8 * v13))
          {
            *(_QWORD *)(*(_QWORD *)v2 + 8 * v13) = v7;
            goto LABEL_30;
          }
          *v7 = *v12;
          *v12 = **(_QWORD **)(*(_QWORD *)v2 + 8 * v13);
          **(_QWORD **)(*(_QWORD *)v2 + 8 * v13) = v12;
          v12 = v7;
        }
        v13 = v8;
LABEL_30:
        v7 = v12;
        v12 = (_QWORD *)*v12;
        v8 = v13;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::__deallocate_node(a1, *(uint64_t **)(a1 + 24));
  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v2, 8 * *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::__deallocate_node(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = (uint64_t *)*v2;
      if (*((char *)v2 + 39) < 0)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[5] + 40))(v2[5], v2[2], v2[4] & 0x7FFFFFFFFFFFFFFFLL);
      result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v3 + 32) + 40))(*(_QWORD *)(v3 + 32), v2, 56);
      v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t geo::MallocZoneAllocator::MallocZoneAllocator(uint64_t a1, const char *a2, uint64_t a3, vm_size_t a4, unsigned int a5)
{
  malloc_zone_t *zone;

  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E42B56C0;
  *(_QWORD *)(a1 + 8) = a2;
  geo::read_write_lock::read_write_lock((pthread_rwlock_t *)(a1 + 56));
  zone = malloc_create_zone(a4, a5);
  *(_QWORD *)(a1 + 48) = zone;
  malloc_set_zone_name(zone, a2);
  *(_QWORD *)(a1 + 256) = os_log_create("com.apple.VectorKit", "Memory");
  return a1;
}

void sub_19F078354(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  geo::read_write_lock::~read_write_lock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LineLabelFeature::LineLabelFeature(uint64_t a1, char a2, char a3)
{
  __int128 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *zone;
  int v38;
  uint64_t v39;
  geo::read_write_lock *v40;
  const char *v41;
  malloc_zone_t *v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  geo::read_write_lock *v46;
  const char *v47;
  malloc_zone_t *v48;
  uint64_t v49;
  geo::read_write_lock *v50;
  const char *v51;
  malloc_zone_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_QWORD *)a1 = off_1E428CC00;
  *(_QWORD *)(a1 + 8) = 850045863;
  v6 = 0uLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  if ((v7 & 1) == 0)
  {
    v6 = 0uLL;
    if (v31)
    {
      v32 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v32, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v6 = 0uLL;
    }
  }
  *(_QWORD *)(a1 + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 128) = 0x100000000;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 168) = v6;
  {
    v33 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(a1 + 184) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)a1 = off_1E4291C80;
  {
    v34 = operator new();
    *(_QWORD *)(v34 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v34 + 24) = "VectorKitLabels";
    *(_OWORD *)(v34 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v34 = &off_1E42B5668;
    *(_QWORD *)(v34 + 8) = "VectorKitLabels";
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 232) = 0u;
    *(_QWORD *)(v34 + 248) = 0;
    *(_OWORD *)(v34 + 56) = 0u;
    v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
    if ((_DWORD)v35)
      geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v34 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v34;
  }
  v10 = mdm::Allocator::instance(void)::alloc;
  v11 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 328, 8);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB128;
  v11[1].__shared_owners_ = 0;
  v13 = &v11[1].__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v11[1].__shared_weak_owners_ = 0;
  v11[2].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v11[5].__shared_owners_ = 0;
  v11[5].__shared_weak_owners_ = 0;
  v11[5].__vftable = 0;
  *(_OWORD *)&v11[2].__shared_owners_ = 0u;
  v11[3].std::__shared_count = 0u;
  *(_OWORD *)&v11[3].__shared_weak_owners_ = 0u;
  *(std::__shared_count *)((char *)&v11[4].std::__shared_count + 1) = 0u;
  if ((v14 & 1) == 0)
  {
    v13 = &v11[1].__shared_owners_;
    if (v38)
    {
      v39 = operator new();
      *(_QWORD *)(v39 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v39 + 24) = "VectorKitLabels";
      *(_OWORD *)(v39 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v39 = &off_1E42B5668;
      *(_QWORD *)(v39 + 8) = "VectorKitLabels";
      *(_OWORD *)(v39 + 72) = 0u;
      *(_OWORD *)(v39 + 88) = 0u;
      *(_OWORD *)(v39 + 104) = 0u;
      *(_OWORD *)(v39 + 120) = 0u;
      *(_OWORD *)(v39 + 136) = 0u;
      *(_OWORD *)(v39 + 152) = 0u;
      *(_OWORD *)(v39 + 168) = 0u;
      *(_OWORD *)(v39 + 184) = 0u;
      *(_OWORD *)(v39 + 200) = 0u;
      *(_OWORD *)(v39 + 216) = 0u;
      *(_OWORD *)(v39 + 232) = 0u;
      *(_QWORD *)(v39 + 248) = 0;
      *(_OWORD *)(v39 + 56) = 0u;
      v40 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v39 + 56), 0);
      if ((_DWORD)v40)
        geo::read_write_lock::logFailure(v40, (uint64_t)"initialization", v41);
      v42 = malloc_create_zone(0, 0);
      *(_QWORD *)(v39 + 48) = v42;
      malloc_set_zone_name(v42, "VectorKitLabels");
      *(_QWORD *)(v39 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v39;
      v13 = &v11[1].__shared_owners_;
    }
  }
  v11[6].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
  LOBYTE(v11[6].__shared_owners_) = a3;
  BYTE1(v11[6].__shared_owners_) = a2;
  BYTE2(v11[6].__shared_owners_) = 0;
  v11[7].__vftable = 0;
  v11[7].__shared_owners_ = 0;
  v11[6].__shared_weak_owners_ = 0;
  if ((v15 & 1) == 0)
  {
    v43 = v13;
    v13 = v43;
    if (v44)
    {
      v45 = operator new();
      *(_QWORD *)(v45 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v45 + 24) = "VectorKitLabels";
      *(_OWORD *)(v45 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v45 = &off_1E42B5668;
      *(_QWORD *)(v45 + 8) = "VectorKitLabels";
      *(_OWORD *)(v45 + 72) = 0u;
      *(_OWORD *)(v45 + 88) = 0u;
      *(_OWORD *)(v45 + 104) = 0u;
      *(_OWORD *)(v45 + 120) = 0u;
      *(_OWORD *)(v45 + 136) = 0u;
      *(_OWORD *)(v45 + 152) = 0u;
      *(_OWORD *)(v45 + 168) = 0u;
      *(_OWORD *)(v45 + 184) = 0u;
      *(_OWORD *)(v45 + 200) = 0u;
      *(_OWORD *)(v45 + 216) = 0u;
      *(_OWORD *)(v45 + 232) = 0u;
      *(_QWORD *)(v45 + 248) = 0;
      *(_OWORD *)(v45 + 56) = 0u;
      v46 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v45 + 56), 0);
      if ((_DWORD)v46)
        geo::read_write_lock::logFailure(v46, (uint64_t)"initialization", v47);
      v48 = malloc_create_zone(0, 0);
      *(_QWORD *)(v45 + 48) = v48;
      malloc_set_zone_name(v48, "VectorKitLabels");
      *(_QWORD *)(v45 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v45;
      v13 = v43;
    }
  }
  v11[7].__shared_weak_owners_ = mdm::Allocator::instance(void)::alloc;
  v11[8].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  HIDWORD(v11[11].__shared_weak_owners_) = 0;
  *(_OWORD *)&v11[8].__shared_owners_ = 0u;
  v11[9].std::__shared_count = 0u;
  *(_OWORD *)&v11[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v11[10].__shared_owners_ = 0u;
  LOBYTE(v11[11].__shared_weak_owners_) = 0;
  v11[11].std::__shared_count = 0u;
  v11[12].std::__shared_count = (std::__shared_count)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)&v11[12].__shared_weak_owners_ = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  LOWORD(v11[13].__shared_owners_) = 0;
  BYTE2(v11[13].__shared_owners_) = 0;
  if (BYTE1(v11[6].__shared_owners_) == 3)
    LOBYTE(v11[13].__shared_owners_) = 1;
  if (LOBYTE(v11[6].__shared_owners_) == 6)
    BYTE1(v11[13].__shared_owners_) = 1;
  atomic_store(0xFEu, (unsigned __int8 *)&v11[10].__shared_weak_owners_);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[10].__shared_weak_owners_ + 1);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[10].__shared_weak_owners_ + 2);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[10].__shared_weak_owners_ + 3);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[10].__shared_weak_owners_ + 4);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[10].__shared_weak_owners_ + 5);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[10].__shared_weak_owners_ + 6);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[10].__shared_weak_owners_ + 7);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11]);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__vftable + 1);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__vftable + 2);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__vftable + 3);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__vftable + 4);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__vftable + 5);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__vftable + 6);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__vftable + 7);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__shared_owners_);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__shared_owners_ + 1);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__shared_owners_ + 2);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__shared_owners_ + 3);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__shared_owners_ + 4);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__shared_owners_ + 5);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__shared_owners_ + 6);
  atomic_store(0xFEu, (unsigned __int8 *)&v11[11].__shared_owners_ + 7);
  *(_QWORD *)(a1 + 192) = v13;
  *(_QWORD *)(a1 + 200) = v11;
  shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_23;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v11[1].__shared_owners_ = (uint64_t)&v11[1].__shared_owners_;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v11[1].__shared_owners_ = (uint64_t)&v11[1].__shared_owners_;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_23:
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  {
    v49 = operator new();
    *(_QWORD *)(v49 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v49 + 24) = "VectorKitLabels";
    *(_OWORD *)(v49 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v49 = &off_1E42B5668;
    *(_QWORD *)(v49 + 8) = "VectorKitLabels";
    *(_OWORD *)(v49 + 72) = 0u;
    *(_OWORD *)(v49 + 88) = 0u;
    *(_OWORD *)(v49 + 104) = 0u;
    *(_OWORD *)(v49 + 120) = 0u;
    *(_OWORD *)(v49 + 136) = 0u;
    *(_OWORD *)(v49 + 152) = 0u;
    *(_OWORD *)(v49 + 168) = 0u;
    *(_OWORD *)(v49 + 184) = 0u;
    *(_OWORD *)(v49 + 200) = 0u;
    *(_OWORD *)(v49 + 216) = 0u;
    *(_OWORD *)(v49 + 232) = 0u;
    *(_QWORD *)(v49 + 248) = 0;
    *(_OWORD *)(v49 + 56) = 0u;
    v50 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v49 + 56), 0);
    if ((_DWORD)v50)
      geo::read_write_lock::logFailure(v50, (uint64_t)"initialization", v51);
    v52 = malloc_create_zone(0, 0);
    *(_QWORD *)(v49 + 48) = v52;
    malloc_set_zone_name(v52, "VectorKitLabels");
    *(_QWORD *)(v49 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v49;
  }
  *(_QWORD *)(a1 + 240) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 256) = 1;
  *(_BYTE *)(a1 + 264) = a3;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  {
    v53 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(a1 + 296) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(a1 + 304) = -1;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  {
    v54 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v54, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(a1 + 336) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  {
    v55 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(a1 + 376) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  {
    v56 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v56, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v29 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = v29;
  *(_WORD *)(a1 + 432) = 0;
  return a1;
}

void sub_19F078D30(_Unwind_Exception *a1)
{
  md::LabelFeature *v1;

  md::LabelFeature::~LabelFeature(v1);
  _Unwind_Resume(a1);
}

void md::LabelFeature::setStyle(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6)
{
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t i;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unsigned __int8 v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  int v105;
  float v106;
  unsigned int v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  char v115;

  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD **)(a1 + 104);
  v13 = ((uint64_t)v12 - v11) >> 4;
  v14 = a4 - v13;
  if (a4 > v13)
  {
    v15 = *(_QWORD *)(a1 + 112);
    if (v14 <= (v15 - (uint64_t)v12) >> 4)
    {
      v28 = &v12[2 * v14];
      v29 = 16 * a4 - 16 * v13;
      do
      {
        if (v12)
        {
          *v12 = 0;
          v12[1] = 0;
        }
        v12 += 2;
        v29 -= 16;
      }
      while (v29);
      *(_QWORD *)(a1 + 104) = v28;
    }
    else
    {
      if (a4 >> 60)
        abort();
      v16 = v15 - v11;
      v17 = v16 >> 3;
      if (v16 >> 3 <= a4)
        v17 = a4;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      v19 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120), 16 * v18, 8);
      v20 = (_QWORD *)(v19 + 16 * v13);
      v21 = v19 + 16 * a4;
      v22 = 16 * a4 - 16 * v13;
      v23 = v20;
      do
      {
        if (v23)
        {
          *v23 = 0;
          v23[1] = 0;
        }
        v23 += 2;
        v22 -= 16;
      }
      while (v22);
      v50 = v19 + 16 * v18;
      v51 = *(_QWORD **)(a1 + 96);
      v52 = *(_QWORD **)(a1 + 104);
      if (v52 == v51)
      {
        *(_QWORD *)(a1 + 96) = v20;
        *(_QWORD *)(a1 + 104) = v21;
        v55 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v50;
      }
      else
      {
        do
        {
          v53 = *((_OWORD *)v52 - 1);
          v52 -= 2;
          *((_OWORD *)v20 - 1) = v53;
          v20 -= 2;
          *v52 = 0;
          v52[1] = 0;
        }
        while (v52 != v51);
        v52 = *(_QWORD **)(a1 + 96);
        v54 = *(_QWORD **)(a1 + 104);
        *(_QWORD *)(a1 + 96) = v20;
        *(_QWORD *)(a1 + 104) = v21;
        v55 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v50;
        while (v54 != v52)
        {
          v56 = (std::__shared_weak_count *)*(v54 - 1);
          if (v56)
          {
            p_shared_owners = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldaxr(p_shared_owners);
            while (__stlxr(v58 - 1, p_shared_owners));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v54 -= 2;
        }
      }
      if (v52)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120), v52, v55 - (_QWORD)v52);
    }
LABEL_74:
    v59 = 0;
    do
    {
      v60 = *(_QWORD *)(a1 + 96);
      v61 = *(_OWORD *)(a3 + 16 * v59);
      v62 = *(_QWORD *)(a3 + 16 * v59 + 8);
      if (v62)
      {
        v63 = (unint64_t *)(v62 + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = v60 + 16 * v59;
      v66 = *(std::__shared_weak_count **)(v65 + 8);
      *(_OWORD *)v65 = v61;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      ++v59;
    }
    while (v59 != a4);
    goto LABEL_28;
  }
  if (a4 < v13)
  {
    v24 = (_QWORD *)(v11 + 16 * a4);
    while (v12 != v24)
    {
      v25 = (std::__shared_weak_count *)*(v12 - 1);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v12 -= 2;
    }
    *(_QWORD *)(a1 + 104) = v24;
  }
  if (a4)
    goto LABEL_74;
LABEL_28:
  if (*(_DWORD *)(a1 + 128) == a6)
  {
    v30 = *(_DWORD *)(a1 + 132);
    if ((v30 + 1) > 1)
      v31 = v30 + 1;
    else
      v31 = 1;
  }
  else
  {
    v31 = 1;
    *(_DWORD *)(a1 + 128) = a6;
  }
  *(_DWORD *)(a1 + 132) = v31;
  v32 = *(uint64_t **)(a1 + 96);
  if (v32 == *(uint64_t **)(a1 + 104) || (v33 = *v32) == 0)
  {
    v47 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    std::vector<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100](a1 + 160, *(_QWORD *)(a1 + 160));
    md::LabelFeature::updateTextVector((md::LabelFeature *)a1);
    *(_BYTE *)(a1 + 136) = 0;
    *(_BYTE *)(a1 + 138) = 0;
    return;
  }
  v34 = v32[1];
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(std::__shared_weak_count **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)(a1 + 88) = v34;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1))
    return;
  v40 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 472))(a1, 0);
  if (!v40)
    goto LABEL_85;
  if (*(char *)(v40 + 23) < 0)
  {
    if (*(_QWORD *)(v40 + 8))
      goto LABEL_47;
LABEL_85:
    LOBYTE(v69) = 0;
    goto LABEL_101;
  }
  if (!*(_BYTE *)(v40 + 23))
    goto LABEL_85;
LABEL_47:
  v41 = *(uint64_t **)(a1 + 80);
  v42 = *v41;
  v43 = (std::__shared_weak_count *)v41[1];
  v108 = *v41;
  v109 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v111 = v43;
    do
      v46 = __ldxr(v44);
    while (__stxr(v46 + 1, v44));
  }
  else
  {
    v111 = 0;
  }
  v112 = 0;
  v113 = 0;
  v110 = v42;
  v114 = 0;
  if (v42)
    LODWORD(v42) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v112);
  v114 = v42;
  if (v43)
  {
    v70 = (unint64_t *)&v43->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    LODWORD(v42) = v114;
  }
  if ((_DWORD)v42)
  {
    v72 = *(_QWORD *)(v110 + 24);
    v73 = *(unsigned __int8 *)(v72 + 12);
    if (v73 == 2)
    {
      LOBYTE(v108) = 1;
      v115 = 1;
      v74 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v72, 0x7Du, 0, &v108);
      gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v72, 0x7Du, 1u, &v115);
      v69 = *v74;
    }
    else
    {
      v69 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(*(_QWORD *)(v110 + 24), 0x7Du, v73, 0);
    }
  }
  else
  {
    LOBYTE(v69) = 0;
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v110);
LABEL_101:
  *(_BYTE *)(a1 + 138) = v69;
  v75 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 472))(a1, 0);
  v76 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
  if (v75)
    v77 = v76 == 0;
  else
    v77 = 1;
  if (!v77)
  {
    if (*(char *)(v75 + 23) < 0)
    {
      if (!*(_QWORD *)(v75 + 8))
        return;
    }
    else if (!*(_BYTE *)(v75 + 23))
    {
      return;
    }
    v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
    v79 = *(_QWORD *)(a1 + 160);
    v80 = *(_QWORD *)(a1 + 168);
    if (v78 != 0x6DB6DB6DB6DB6DB7 * ((v80 - v79) >> 3) || a5 != 0)
    {
      if (v79 != v80)
      {
        for (i = *(_QWORD *)(a1 + 160); i != v80; i += 56)
        {
          v83 = *(char **)(i + 24);
          v84 = *(char **)(i + 32);
          if (v83 != v84)
          {
            v85 = v84 - v83 - 16;
            if (v85 > 0xF)
            {
              v86 = (v85 >> 4) + 1;
              v87 = (uint64_t *)(v83 + 16);
              v88 = v86 & 0x1FFFFFFFFFFFFFFELL;
              do
              {
                v89 = *(v87 - 2);
                v90 = *v87;
                v87 += 4;
                *(_BYTE *)(v89 + 120) = 0;
                *(_BYTE *)(v90 + 120) = 0;
                v88 -= 2;
              }
              while (v88);
              if (v86 == (v86 & 0x1FFFFFFFFFFFFFFELL))
                continue;
              v83 += 16 * (v86 & 0x1FFFFFFFFFFFFFFELL);
            }
            do
            {
              v91 = *(_QWORD *)v83;
              v83 += 16;
              *(_BYTE *)(v91 + 120) = 0;
            }
            while (v83 != v84);
          }
        }
      }
      std::vector<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator>>::__base_destruct_at_end[abi:nn180100](a1 + 160, v79);
      md::LabelFeature::updateTextVector((md::LabelFeature *)a1);
    }
    v92 = *(uint64_t **)(a1 + 80);
    v93 = *v92;
    if (*v92)
    {
      v94 = (std::__shared_weak_count *)v92[1];
      v108 = *v92;
      v109 = v94;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
        v111 = v94;
        do
          v97 = __ldxr(v95);
        while (__stxr(v97 + 1, v95));
      }
      else
      {
        v111 = 0;
      }
      v112 = 0;
      v113 = 0;
      v110 = v93;
      v114 = 0;
      v99 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v93 + 48))(v93, &v112);
      v114 = v99;
      if (v94)
      {
        v100 = (unint64_t *)&v94->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
        v99 = v114;
      }
      if (v99)
      {
        v98 = 0;
        do
        {
          v103 = *(_QWORD *)(v110 + 24);
          v104 = *(unsigned __int8 *)(v103 + 12);
          if (v104 == 2)
          {
            LOBYTE(v108) = 1;
            v115 = 1;
            v105 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v103, 0x5Bu, v98, 0, &v108);
            gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v103, 0x5Bu, v98, 1, &v115);
            if (v105)
              goto LABEL_149;
          }
          else if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v110 + 24), 0x5Bu, v98, v104, 0))
          {
            goto LABEL_149;
          }
          v102 = v98++;
        }
        while (v102 < 0x17);
      }
      v98 = -4;
LABEL_149:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v110);
    }
    else
    {
      v98 = 0;
    }
    *(_BYTE *)(a1 + 137) = v98;
    if (!*(_BYTE *)(a1 + 140))
    {
      v77 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) == 254.0;
      v106 = 0.0;
      if (!v77)
        v106 = (*(float (**)(uint64_t, float))(*(_QWORD *)a1 + 240))(a1, 0.0);
      v107 = (int)fminf(fmaxf(v106, 0.0), 252.0);
      if (*(unsigned __int8 *)(a1 + 137) <= v107)
        v98 = v107;
      else
        v98 = *(_BYTE *)(a1 + 137);
    }
    *(_BYTE *)(a1 + 136) = v98;
  }
}

void sub_19F079538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F079618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::LineLabelFeature::publicName(md::LineLabelFeature *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 48);
  v3 = *((_QWORD *)this + 49) - v2;
  v4 = v2 + (a2 << 6);
  if (a2 >= v3 >> 6)
    return 0;
  else
    return v4;
}

void md::LabelFeature::updateTextVector(md::LabelFeature *this)
{
  unsigned __int8 **v2;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  int v7;
  int *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  __int128 *v35;
  __int128 *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v2 = (unsigned __int8 **)((char *)this + 160);
  v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3);
  if (v3 == (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 488))(this))
    return;
  (*(void (**)(uint64_t *__return_ptr, md::LabelFeature *, _QWORD))(*(_QWORD *)this + 584))(&v40, this, 0);
  if (v40)
  {
    v4 = *(unsigned __int8 *)(v40 + 33);
    if (*(_BYTE *)(v40 + 33))
    {
      v5 = *(_DWORD **)v40;
      if (**(_DWORD **)v40 == 4)
      {
        v6 = 0;
LABEL_6:
        v7 = v5[2 * v6 + 1];
        goto LABEL_12;
      }
      v6 = 0;
      v8 = v5 + 2;
      while (v4 - 1 != v6)
      {
        v9 = *v8;
        v8 += 2;
        ++v6;
        if (v9 == 4)
        {
          if (v6 < v4)
            goto LABEL_6;
          break;
        }
      }
    }
  }
  LOWORD(v7) = -1;
LABEL_12:
  v10 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 488))(this);
  v11 = v10;
  v12 = *((_QWORD *)this + 20);
  if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 22) - v12) >> 3) < v10)
  {
    if (v10 >= 0x492492492492493)
      abort();
    v13 = *((_QWORD *)this + 21);
    v14 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 23) + 16))(*((_QWORD *)this + 23), 56 * v10, 8);
    v15 = v14 + v13 - v12;
    v16 = v14 + 56 * v11;
    v17 = *((_QWORD *)this + 20);
    v18 = *((_QWORD *)this + 21);
    if (v18 == v17)
    {
      *((_QWORD *)this + 20) = v15;
      *((_QWORD *)this + 21) = v15;
      v23 = *((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = v16;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = v15 + v19;
        v21 = v18 + v19;
        *(_BYTE *)(v20 - 56) = *(_BYTE *)(v18 + v19 - 56);
        *(_OWORD *)(v20 - 48) = *(_OWORD *)(v18 + v19 - 48);
        *(_QWORD *)(v21 - 48) = 0;
        *(_QWORD *)(v21 - 40) = 0;
        *(_QWORD *)(v20 - 32) = 0;
        *(_QWORD *)(v20 - 24) = 0;
        *(_QWORD *)(v20 - 16) = 0;
        *(_QWORD *)(v20 - 8) = *(_QWORD *)(v18 + v19 - 8);
        *(_OWORD *)(v20 - 32) = *(_OWORD *)(v18 + v19 - 32);
        *(_QWORD *)(v20 - 16) = *(_QWORD *)(v18 + v19 - 16);
        *(_QWORD *)(v21 - 32) = 0;
        *(_QWORD *)(v21 - 24) = 0;
        *(_QWORD *)(v21 - 16) = 0;
        v19 -= 56;
      }
      while (v18 + v19 != v17);
      v18 = *((_QWORD *)this + 20);
      v22 = *((_QWORD *)this + 21);
      *((_QWORD *)this + 20) = v15 + v19;
      *((_QWORD *)this + 21) = v15;
      v23 = *((_QWORD *)this + 22);
      *((_QWORD *)this + 22) = v16;
      while (v22 != v18)
      {
        v24 = *(_QWORD *)(v22 - 32);
        if (v24)
        {
          v25 = *(_QWORD *)(v22 - 24);
          v26 = *(_QWORD *)(v22 - 32);
          if (v25 != v24)
          {
            do
            {
              v27 = *(std::__shared_weak_count **)(v25 - 8);
              if (v27)
              {
                p_shared_owners = (unint64_t *)&v27->__shared_owners_;
                do
                  v29 = __ldaxr(p_shared_owners);
                while (__stlxr(v29 - 1, p_shared_owners));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v27->__on_zero_shared)(v27, v26);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
              v25 -= 16;
            }
            while (v25 != v24);
            v26 = *(_QWORD *)(v22 - 32);
          }
          *(_QWORD *)(v22 - 24) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 - 8) + 40))(*(_QWORD *)(v22 - 8), v26, *(_QWORD *)(v22 - 16) - v26);
        }
        v30 = *(std::__shared_weak_count **)(v22 - 40);
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v22 -= 56;
      }
    }
    if (v18)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v18, v23 - v18);
  }
  v33 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3);
  v34 = (unsigned __int16)v7;
  while (v33 < (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)this + 488))(this))
  {
    v35 = (__int128 *)(*(uint64_t (**)(md::LabelFeature *, unint64_t))(*(_QWORD *)this + 472))(this, v33);
    v36 = (__int128 *)(*(uint64_t (**)(md::LabelFeature *, unint64_t))(*(_QWORD *)this + 480))(this, v33);
    md::TextDataStore::addString(v2, v35, v36, v34);
    ++v33;
  }
  v37 = v41;
  if (v41)
  {
    v38 = (unint64_t *)&v41->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_19F0799E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::LineLabelFeature::publicNameCount(md::LineLabelFeature *this)
{
  return (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 6;
}

uint64_t md::PointLabelFeature::publicNameCount(md::PointLabelFeature *this)
{
  return (uint64_t)(*((_QWORD *)this + 69) - *((_QWORD *)this + 68)) >> 6;
}

uint64_t md::TextDataStore::addString(unsigned __int8 **a1, __int128 *a2, __int128 *a3, int a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 **v35;
  unsigned __int8 *v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[8];
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 __dst;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 **v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  _QWORD *v75;

  if (a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      if (*((_QWORD *)a2 + 1))
      {
        v67 = *((_QWORD *)a2 + 3);
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
        if (a3)
        {
LABEL_5:
          v70 = *((_QWORD *)a3 + 3);
          if (*((char *)a3 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v68, *(void **)a3, *((_QWORD *)a3 + 1));
          }
          else
          {
            v68 = *a3;
            v69 = *((_QWORD *)a3 + 2);
          }
          goto LABEL_13;
        }
LABEL_9:
        {
          v57 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v57, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v70 = mdm::Allocator::instance(void)::alloc;
        HIBYTE(v69) = 0;
        LOBYTE(v68) = 0;
LABEL_13:
        v11 = *a1;
        v12 = a1[1];
        if (*a1 == v12)
        {
          v12 = *a1;
LABEL_19:
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 3)) <= 0x63)
          {
            v63 = 0;
            v61 = 0u;
            v62 = 0u;
            {
              v58 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v58, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v64 = mdm::Allocator::instance(void)::alloc;
            v60[0] = -73 * ((*((_DWORD *)a1 + 2) - *(_DWORD *)a1) >> 3);
            {
              v59 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v59, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v16 = mdm::Allocator::instance(void)::alloc;
            v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 168, 8);
            *(_QWORD *)v17 = &off_1E4289FF0;
            *(_QWORD *)(v17 + 8) = 0;
            *(_QWORD *)(v17 + 16) = 0;
            *(_QWORD *)(v17 + 24) = v16;
            v18 = md::TextDataStringInfo::TextDataStringInfo((char *)(v17 + 32), a2, a3, a4);
            v19 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
            *(_QWORD *)&v61 = v18;
            *((_QWORD *)&v61 + 1) = v17;
            if (v19)
            {
              p_shared_owners = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldaxr(p_shared_owners);
              while (__stlxr(v21 - 1, p_shared_owners));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            v23 = (unsigned __int8 **)a1[1];
            v22 = (unsigned __int8 **)a1[2];
            if (v23 >= v22)
            {
              v25 = 0x6DB6DB6DB6DB6DB7 * (((char *)v23 - (char *)*a1) >> 3);
              if ((unint64_t)(v25 + 1) > 0x492492492492492)
                abort();
              v26 = 0x6DB6DB6DB6DB6DB7 * (((char *)v22 - (char *)*a1) >> 3);
              v27 = 2 * v26;
              if (2 * v26 <= v25 + 1)
                v27 = v25 + 1;
              if (v26 >= 0x249249249249249)
                v28 = 0x492492492492492;
              else
                v28 = v27;
              v75 = a1 + 3;
              if (v28)
                v29 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 56 * v28, 8);
              else
                v29 = 0;
              v71 = (unsigned __int8 **)v29;
              v72 = (unsigned __int8 *)(v29 + 56 * v25);
              v73 = v72;
              v74 = v29 + 56 * v28;
              geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::construct<md::TextDataEntry,md::TextDataEntry const&>(v72, (uint64_t)v60);
              v30 = v72;
              v24 = (unsigned __int8 **)(v73 + 56);
              v31 = *a1;
              v32 = (unsigned __int8 **)a1[1];
              if (v32 == (unsigned __int8 **)*a1)
              {
                v36 = a1[1];
              }
              else
              {
                v33 = 0;
                do
                {
                  v34 = &v30[v33 * 8];
                  v35 = &v32[v33];
                  *(v34 - 56) = v32[v33 - 7];
                  *((_OWORD *)v34 - 3) = *(_OWORD *)&v32[v33 - 6];
                  *(v35 - 6) = 0;
                  *(v35 - 5) = 0;
                  *((_QWORD *)v34 - 4) = 0;
                  *((_QWORD *)v34 - 3) = 0;
                  *((_QWORD *)v34 - 2) = 0;
                  *((_QWORD *)v34 - 1) = v32[v33 - 1];
                  *((_OWORD *)v34 - 2) = *(_OWORD *)&v32[v33 - 4];
                  *((_QWORD *)v34 - 2) = v32[v33 - 2];
                  *(v35 - 4) = 0;
                  *(v35 - 3) = 0;
                  *(v35 - 2) = 0;
                  v33 -= 7;
                }
                while (&v32[v33] != (unsigned __int8 **)v31);
                v30 += v33 * 8;
                v36 = *a1;
                v32 = (unsigned __int8 **)a1[1];
              }
              *a1 = v30;
              a1[1] = (unsigned __int8 *)v24;
              v37 = (unsigned __int8 **)a1[2];
              a1[2] = (unsigned __int8 *)v74;
              v74 = (uint64_t)v37;
              v71 = (unsigned __int8 **)v36;
              v72 = v36;
              if (v32 != (unsigned __int8 **)v36)
              {
                do
                {
                  v73 = (unsigned __int8 *)(v32 - 7);
                  v38 = *(v32 - 4);
                  if (v38)
                  {
                    v39 = *(v32 - 3);
                    v40 = (uint64_t)*(v32 - 4);
                    if (v39 != v38)
                    {
                      do
                      {
                        v41 = (std::__shared_weak_count *)*((_QWORD *)v39 - 1);
                        if (v41)
                        {
                          v42 = (unint64_t *)&v41->__shared_owners_;
                          do
                            v43 = __ldaxr(v42);
                          while (__stlxr(v43 - 1, v42));
                          if (!v43)
                          {
                            ((void (*)(std::__shared_weak_count *, uint64_t))v41->__on_zero_shared)(v41, v40);
                            std::__shared_weak_count::__release_weak(v41);
                          }
                        }
                        v39 -= 16;
                      }
                      while (v39 != v38);
                      v40 = (uint64_t)*(v32 - 4);
                    }
                    *(v32 - 3) = v38;
                    (*(void (**)(_QWORD, uint64_t, unsigned __int8 *))(*(_QWORD *)*(v32 - 1) + 40))(*(v32 - 1), v40, &(*(v32 - 2))[-v40]);
                  }
                  v44 = (std::__shared_weak_count *)*(v32 - 5);
                  if (v44)
                  {
                    v45 = (unint64_t *)&v44->__shared_owners_;
                    do
                      v46 = __ldaxr(v45);
                    while (__stlxr(v46 - 1, v45));
                    if (!v46)
                    {
                      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                      std::__shared_weak_count::__release_weak(v44);
                    }
                  }
                  v32 = (unsigned __int8 **)v73;
                }
                while (v73 != v36);
                v32 = v71;
              }
              if (v32)
                (*(void (**)(_QWORD, unsigned __int8 **, uint64_t))(*(_QWORD *)*v75 + 40))(*v75, v32, v74 - (_QWORD)v32);
            }
            else
            {
              geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::construct<md::TextDataEntry,md::TextDataEntry const&>(a1[1], (uint64_t)v60);
              v24 = v23 + 7;
              a1[1] = (unsigned __int8 *)(v23 + 7);
            }
            a1[1] = (unsigned __int8 *)v24;
            v10 = v60[0];
            v47 = v62;
            if ((_QWORD)v62)
            {
              v48 = *((_QWORD *)&v62 + 1);
              v49 = v62;
              if (*((_QWORD *)&v62 + 1) != (_QWORD)v62)
              {
                do
                {
                  v50 = *(std::__shared_weak_count **)(v48 - 8);
                  if (v50)
                  {
                    v51 = (unint64_t *)&v50->__shared_owners_;
                    do
                      v52 = __ldaxr(v51);
                    while (__stlxr(v52 - 1, v51));
                    if (!v52)
                    {
                      ((void (*)(std::__shared_weak_count *, uint64_t))v50->__on_zero_shared)(v50, v49);
                      std::__shared_weak_count::__release_weak(v50);
                    }
                  }
                  v48 -= 16;
                }
                while (v48 != v47);
                v49 = v62;
              }
              *((_QWORD *)&v62 + 1) = v47;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 40))(v64, v49, v63 - v49);
            }
            v53 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
            if (*((_QWORD *)&v61 + 1))
            {
              v54 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
          }
          else
          {
            v10 = 255;
          }
        }
        else
        {
          v13 = (unsigned __int8 **)*a1;
          while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v13[1], (unsigned __int8 *)&__dst) & 1) == 0)
          {
            v13 += 7;
            if (v13 == (unsigned __int8 **)v12)
              goto LABEL_19;
          }
          v10 = *(unsigned __int8 *)v13;
        }
        if (SHIBYTE(v69) < 0)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v70 + 40))(v70, v68, v69 & 0x7FFFFFFFFFFFFFFFLL);
          if ((SHIBYTE(v66) & 0x80000000) == 0)
            return v10;
        }
        else if ((SHIBYTE(v66) & 0x80000000) == 0)
        {
          return v10;
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v67 + 40))(v67, __dst, v66 & 0x7FFFFFFFFFFFFFFFLL);
        return v10;
      }
    }
    else if (*((_BYTE *)a2 + 23))
    {
      __dst = *a2;
      v8 = *((_QWORD *)a2 + 3);
      v66 = *((_QWORD *)a2 + 2);
      v67 = v8;
      if (a3)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  return 255;
}

void sub_19F07A0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::__split_buffer<md::TextDataEntry,geo::StdAllocator<md::TextDataEntry,mdm::Allocator> &>::~__split_buffer(v2 - 104);
  md::TextDataEntry::~TextDataEntry((md::TextDataEntry *)va);
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t mdm::Allocator::instance(mdm::Allocator *this)
{
  unsigned __int8 v1;
  float *v2;
  int v4;
  uint64_t v5;

  v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v1 & 1) == 0)
  {
    v2 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v4)
    {
      v5 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v5, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v2 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  return *((_QWORD *)v2 + 299);
}

uint64_t md::LineLabelFeature::textIndexForText(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD **v10;
  __int128 v11;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v6 = (unsigned __int8 *)a1[48];
    v5 = a1[49];
    if (v6 == (unsigned __int8 *)v5)
    {
      v7 = 0;
      v5 = a1[48];
LABEL_11:
      if (v5 >= a1[50])
      {
        v9 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(a1 + 48, (__int128 *)a2);
      }
      else
      {
        if (v5)
        {
          *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
          if (*(char *)(a2 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v5, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            v8 = *(_OWORD *)a2;
            *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
            *(_OWORD *)v5 = v8;
          }
          v10 = (_QWORD **)(v5 + 32);
          *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 56);
          if (*(char *)(a2 + 55) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v10, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
          }
          else
          {
            v11 = *(_OWORD *)(a2 + 32);
            *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
            *(_OWORD *)v10 = v11;
          }
        }
        v9 = v5 + 64;
        a1[49] = v5 + 64;
      }
      a1[49] = v9;
    }
    else
    {
      v7 = 0;
      while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v6, (unsigned __int8 *)a2) & 1) == 0)
      {
        ++v7;
        v6 += 64;
        if (v6 == (unsigned __int8 *)v5)
        {
          if (v7 <= 0x64u)
            goto LABEL_11;
          return -1;
        }
      }
    }
  }
  else
  {
    return -1;
  }
  return v7;
}

void sub_19F07A31C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), *(_QWORD *)v2, *(_QWORD *)(v2 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  *(_QWORD *)(v1 + 392) = v2;
  _Unwind_Resume(exception_object);
}

_QWORD *geo::codec::vectorTileGetLocalizedLabelForNativeLabel(_QWORD *result, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t __key;

  if (!a2)
    goto LABEL_20;
  v6 = (_QWORD *)*result;
  if (!*result)
    goto LABEL_20;
  v7 = v6[107];
  v8 = v6[108];
  if (v7 <= a2)
  {
    v9 = v8 >= a2;
    v10 = v8 == a2;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  if (v10 || !v9)
    goto LABEL_20;
  v11 = a2 - v7;
  v12 = (const void *)v6[135];
  v13 = v6[136];
  __key = v11;
  result = bsearch(&__key, v12, (v13 - (uint64_t)v12) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
  if (!result)
    goto LABEL_18;
  v14 = result[1];
  if (v14 == -1)
    goto LABEL_18;
  v15 = v6 + 127;
  v16 = 127;
  if ((result[3] & 1) == 0)
  {
    v16 = 113;
    v15 = v6 + 113;
  }
  v17 = v6[v16];
  if (v14 >= v15[1] - v17)
  {
LABEL_18:
    if (a4)
      *a4 = 0;
    goto LABEL_20;
  }
  if (a4)
    *a4 = result[2];
  if (!v17)
  {
LABEL_20:
    if (a3)
      *a3 = 0;
    if (a4)
      *a4 = 0;
    return result;
  }
  if (a3)
    *a3 = v17 + v14;
  return result;
}

uint64_t md::TextDataStringInfo::widenText(unint64_t a1, unsigned __int16 *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  __int16 *v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  __int128 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  unint64_t v36;
  __int128 *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _WORD *v47;
  __int128 *v48;
  unint64_t v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int16 *v55;
  _OWORD *v56;
  __int128 *v57;
  unint64_t v58;
  __int128 v59;
  __int16 v60;
  char v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __int128 *v67;
  unint64_t v68;
  uint64_t v69;
  _WORD *v70;
  _WORD *v71;
  __int128 *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _WORD *v77;
  __int16 *v78;
  unint64_t v79;
  unint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  unint64_t v83;
  __int128 v84;
  __int16 v85;
  int64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unsigned __int16 *v90;
  unsigned __int16 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  int64_t v99;
  uint64_t v100;
  unsigned __int16 *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 __src;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __n128 v119;
  __n128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  _OWORD v126[8];
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  {
    v95 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v95, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v5 = mdm::Allocator::instance(void)::alloc;
  {
    v96 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v96, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v7 = mdm::Allocator::instance(void)::alloc;
  v103 = mdm::Allocator::instance(void)::alloc;
  v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 32, 2);
  v101 = (unsigned __int16 *)v8;
  v102 = xmmword_19FFB4E90;
  *(_OWORD *)v8 = *(_OWORD *)"U";
  *(_OWORD *)(v8 + 14) = *(_OWORD *)L"ertError";
  *((_WORD *)v8 + 15) = 0;
  v110 = 0x65766E6F43667455;
  v111 = xmmword_19FFB4EA0;
  v112 = v5;
  v115 = v7;
  std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__src, v8, 0xFuLL);
  v124 = 0u;
  v123 = 0u;
  v122 = 0u;
  v121 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v9 = operator new();
  *(_OWORD *)(v9 + 8) = xmmword_19FFB4EB0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)v9 = off_1E42DA9D0;
  v10 = *(_BYTE *)(a1 + 23);
  if (v10 >= 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_QWORD *)(a1 + 8);
  v116 = v9;
  v125 = 0;
  v13 = 2 * v12;
  {
    v97 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v97, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v15 = 0x7FFFFFFFFFFFFFF7;
  v100 = mdm::Allocator::instance(void)::alloc;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v13 >= 0xB)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v13 | 3) != 0xB)
      v16 = v13 | 3;
    v17 = v16 + 1;
    v18 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))();
    *((_QWORD *)&v98 + 1) = 2 * v12;
    v99 = v17 | 0x8000000000000000;
    *(_QWORD *)&v98 = v18;
    bzero(v18, 4 * v12);
    *((_WORD *)v18 + 2 * v12) = 0;
    if (!v12)
      goto LABEL_159;
  }
  else
  {
    HIBYTE(v99) = 2 * v12;
    if (!v12)
    {
      LOWORD(v98) = 0;
      goto LABEL_159;
    }
    bzero(&v98, 4 * v12);
    *((_WORD *)&v98 + 2 * v12) = 0;
  }
  if (SHIBYTE(v99) < 0)
  {
    v19 = *((_QWORD *)&v98 + 1);
    v20 = (v99 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (*((_QWORD *)&v98 + 1) >= v20)
    {
      v21 = (__int128 *)v98;
      *((_QWORD *)&v98 + 1) = (v99 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      goto LABEL_24;
    }
  }
  else
  {
    v19 = HIBYTE(v99);
    v20 = 10;
    if (HIBYTE(v99) > 9u)
    {
      HIBYTE(v99) = 10;
      v21 = &v98;
LABEL_24:
      *((_WORD *)v21 + v20) = 0;
      goto LABEL_25;
    }
  }
  std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::append((void **)&v98, v20 - v19);
LABEL_25:
  v22 = (__int16 *)(v11 + v12);
  v126[4] = v121;
  v126[5] = v122;
  v126[6] = v123;
  v126[7] = v124;
  v126[0] = v117;
  v126[1] = v118;
  v23 = v119;
  v24 = v120;
  v25 = HIBYTE(v99);
  if (v99 >= 0)
    v26 = (char *)&v98;
  else
    v26 = (char *)v98;
  if (v99 < 0)
    v25 = *((_QWORD *)&v98 + 1);
  v27 = &v26[2 * v25];
  v126[2] = v119;
  v126[3] = v120;
  while (1)
  {
    v31 = (*(uint64_t (**)(uint64_t, _OWORD *, unint64_t, __int16 *, unint64_t *, char *, char *, uint64_t *, __n128, __n128))(*(_QWORD *)v116 + 32))(v116, v126, v11, v22, &v105, v26, v27, &v104, v23, v24);
    v125 += v105 - v11;
    if (v105 == v11)
      goto LABEL_50;
    if (v31 != 1)
      break;
    if (SHIBYTE(v99) < 0)
    {
      v32 = *((_QWORD *)&v98 + 1);
      v34 = (__int128 *)v98;
      v33 = v104 - v98;
      if (*((_QWORD *)&v98 + 1) >= (unint64_t)(v104 - v98))
      {
        *((_QWORD *)&v98 + 1) = v104 - v98;
        goto LABEL_44;
      }
    }
    else
    {
      v32 = HIBYTE(v99);
      v33 = v104 - (_QWORD)&v98;
      if (v104 - (uint64_t)&v98 <= (unint64_t)HIBYTE(v99))
      {
        HIBYTE(v99) = v33 & 0x7F;
        v34 = &v98;
LABEL_44:
        *((_WORD *)v34 + v33) = 0;
        goto LABEL_32;
      }
    }
    std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::append((void **)&v98, v33 - v32);
LABEL_32:
    v28 = HIBYTE(v99);
    v29 = HIBYTE(v99);
    v30 = (__int128 *)v98;
    if (v99 >= 0)
      v30 = &v98;
    v26 = (char *)v30 + v33;
    if (v99 < 0)
      v28 = *((_QWORD *)&v98 + 1);
    v27 = (char *)v30 + 2 * v28;
    v11 = v105;
    if (v105 >= (unint64_t)v22)
      goto LABEL_51;
  }
  if (!v31)
  {
    if (SHIBYTE(v99) < 0)
    {
      v39 = *((_QWORD *)&v98 + 1);
      v40 = (v104 - (uint64_t)v98) >> 1;
      if (*((_QWORD *)&v98 + 1) >= v40)
      {
        *((_QWORD *)&v98 + 1) = (v104 - (uint64_t)v98) >> 1;
        *(_WORD *)(v98 + 2 * v40) = 0;
        goto LABEL_159;
      }
    }
    else
    {
      v39 = HIBYTE(v99);
      v40 = (v104 - (uint64_t)&v98) >> 1;
      if (v40 <= HIBYTE(v99))
      {
        HIBYTE(v99) = (v104 - (_QWORD)&v98) >> 1;
        *((_WORD *)&v98 + v40) = 0;
        goto LABEL_159;
      }
    }
    std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::append((void **)&v98, v40 - v39);
    goto LABEL_159;
  }
  if (v31 != 3)
  {
LABEL_50:
    v29 = HIBYTE(v99);
LABEL_51:
    if (v29 < 0)
    {
      (*(void (**)(uint64_t, _QWORD, int64_t))(*(_QWORD *)v100 + 40))(v100, v98, 2 * v99);
      v38 = SHIBYTE(v114);
      if ((SHIBYTE(v114) & 0x80000000) == 0)
      {
LABEL_53:
        if (v38)
        {
          v98 = __src;
          v99 = v114;
          v100 = v115;
          goto LABEL_159;
        }
        goto LABEL_194;
      }
    }
    else
    {
      v38 = SHIBYTE(v114);
      if ((SHIBYTE(v114) & 0x80000000) == 0)
        goto LABEL_53;
    }
    if (*((_QWORD *)&__src + 1))
    {
      v100 = v115;
      std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v98, (void *)__src, *((unint64_t *)&__src + 1));
      goto LABEL_159;
    }
LABEL_194:
    std::__throw_range_error[abi:nn180100]();
  }
  if (SHIBYTE(v99) < 0)
  {
    v35 = *((_QWORD *)&v98 + 1);
    v37 = (__int128 *)v98;
    v36 = (uint64_t)&v26[-v98] >> 1;
    if (*((_QWORD *)&v98 + 1) < v36)
      goto LABEL_62;
    *((_QWORD *)&v98 + 1) = (uint64_t)&v26[-v98] >> 1;
LABEL_66:
    *((_WORD *)v37 + v36) = 0;
  }
  else
  {
    v35 = HIBYTE(v99);
    v36 = (v26 - (char *)&v98) >> 1;
    if (v36 <= HIBYTE(v99))
    {
      HIBYTE(v99) = (v26 - (char *)&v98) >> 1;
      v37 = &v98;
      goto LABEL_66;
    }
LABEL_62:
    std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::append((void **)&v98, v36 - v35);
  }
  v41 = (uint64_t)v22 - v11;
  if (SHIBYTE(v99) < 0)
  {
    if (v22 != (__int16 *)v11)
    {
      v42 = *((_QWORD *)&v98 + 1);
      v44 = (v99 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v43 = (__int128 *)v98;
      v45 = HIBYTE(v99);
      goto LABEL_72;
    }
    goto LABEL_159;
  }
  if (v22 == (__int16 *)v11)
    goto LABEL_159;
  v42 = HIBYTE(v99);
  v43 = &v98;
  v44 = 10;
  LOBYTE(v45) = HIBYTE(v99);
LABEL_72:
  v46 = v41 >> 1;
  if ((unint64_t)v43 > v11 || (unint64_t)v43 + 2 * v42 + 2 <= v11)
  {
    if (v44 - v42 >= v46)
    {
      if ((v45 & 0x80) != 0)
        v50 = (__int128 *)v98;
      else
        v50 = &v98;
    }
    else
    {
      if (0x7FFFFFFFFFFFFFF7 - v44 < v46 + v42 - v44)
LABEL_195:
        abort();
      if (v99 >= 0)
        v48 = &v98;
      else
        v48 = (__int128 *)v98;
      if (v44 < 0x3FFFFFFFFFFFFFF3)
      {
        v49 = 2 * v44;
        if (v46 + v42 > 2 * v44)
          v49 = v46 + v42;
        if (v49 >= 0xB)
        {
          v74 = (v49 & 0xFFFFFFFFFFFFFFFCLL) + 4;
          v75 = v49 | 3;
          if (v75 == 11)
            v75 = v74;
          v15 = v75 + 1;
        }
        else
        {
          v15 = 11;
        }
      }
      v76 = (__int128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, 2 * v15, 2);
      v50 = v76;
      if (v42)
        memmove(v76, v48, 2 * v42);
      if (v44 != 10)
        (*(void (**)(uint64_t, __int128 *, unint64_t))(*(_QWORD *)v100 + 40))(v100, v48, 2 * (v44 + 1));
      *((_QWORD *)&v98 + 1) = v42;
      v99 = v15 | 0x8000000000000000;
      *(_QWORD *)&v98 = v50;
    }
    v77 = (_WORD *)v50 + v42;
    if ((unint64_t)(v41 - 2) >= 0x1E)
    {
      if ((unint64_t)v50 + 2 * v42 - v11 >= 0x20)
      {
        v79 = ((unint64_t)(v41 - 2) >> 1) + 1;
        v80 = 2 * (v79 & 0xFFFFFFFFFFFFFFF0);
        v78 = (__int16 *)(v11 + v80);
        v81 = (__int128 *)((char *)v50 + 2 * v42 + 16);
        v82 = (__int128 *)(v11 + 16);
        v83 = v79 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v84 = *v82;
          *(v81 - 1) = *(v82 - 1);
          *v81 = v84;
          v81 += 2;
          v82 += 2;
          v83 -= 16;
        }
        while (v83);
        v77 = (_WORD *)((char *)v77 + v80);
        if (v79 == (v79 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_152;
      }
      else
      {
        v78 = (__int16 *)v11;
      }
    }
    else
    {
      v78 = (__int16 *)v11;
    }
    do
    {
      v85 = *v78++;
      *v77++ = v85;
    }
    while (v78 != v22);
LABEL_152:
    *v77 = 0;
    if (SHIBYTE(v99) < 0)
      *((_QWORD *)&v98 + 1) = v46 + v42;
    else
      HIBYTE(v99) = (v46 + v42) & 0x7F;
    goto LABEL_159;
  }
  v109 = v100;
  if (v41 < 0)
    goto LABEL_195;
  if ((unint64_t)v41 > 0x15)
  {
    v51 = (v46 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v46 | 3) != 0xB)
      v51 = v46 | 3;
    v52 = v51 + 1;
    v47 = (_WORD *)(*(uint64_t (**)(void))(*(_QWORD *)v100 + 16))();
    v107 = v41 >> 1;
    v108 = v52 | 0x8000000000000000;
    v106 = v47;
  }
  else
  {
    HIBYTE(v108) = (unint64_t)v41 >> 1;
    v47 = &v106;
  }
  if ((unint64_t)(v41 - 2) < 0x1E)
  {
    v55 = (__int16 *)v11;
  }
  else if ((unint64_t)v47 - v11 < 0x20)
  {
    v55 = (__int16 *)v11;
  }
  else
  {
    v53 = ((unint64_t)(v41 - 2) >> 1) + 1;
    v54 = 2 * (v53 & 0xFFFFFFFFFFFFFFF0);
    v55 = (__int16 *)(v11 + v54);
    v56 = v47 + 8;
    v57 = (__int128 *)(v11 + 16);
    v58 = v53 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v59 = *v57;
      *(v56 - 1) = *(v57 - 1);
      *v56 = v59;
      v56 += 2;
      v57 += 2;
      v58 -= 16;
    }
    while (v58);
    v47 = (_WORD *)((char *)v47 + v54);
    if (v53 == (v53 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_102;
  }
  do
  {
    v60 = *v55++;
    *v47++ = v60;
  }
  while (v55 != v22);
LABEL_102:
  *v47 = 0;
  v61 = HIBYTE(v108);
  if (v108 >= 0)
    v62 = &v106;
  else
    v62 = v106;
  if (v108 >= 0)
    v63 = HIBYTE(v108);
  else
    v63 = v107;
  if (SHIBYTE(v99) < 0)
  {
    v64 = *((_QWORD *)&v98 + 1);
    v65 = (v99 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v66 = HIBYTE(v99);
  }
  else
  {
    v64 = HIBYTE(v99);
    v65 = 10;
    LOBYTE(v66) = HIBYTE(v99);
  }
  if (v65 - v64 >= v63)
  {
    if (v63)
    {
      if (v99 >= 0)
        v72 = &v98;
      else
        v72 = (__int128 *)v98;
      memmove((char *)v72 + 2 * v64, v62, 2 * v63);
      v73 = v64 + v63;
      if (SHIBYTE(v99) < 0)
        *((_QWORD *)&v98 + 1) = v64 + v63;
      else
        HIBYTE(v99) = v73 & 0x7F;
      *((_WORD *)v72 + v73) = 0;
    }
  }
  else
  {
    if (0x7FFFFFFFFFFFFFF6 - v65 < v63 - v65 + v64)
      abort();
    if ((v66 & 0x80u) == 0)
      v67 = &v98;
    else
      v67 = (__int128 *)v98;
    if (v65 < 0x3FFFFFFFFFFFFFF3)
    {
      v68 = v63 + v64;
      if (v63 + v64 <= 2 * v65)
        v68 = 2 * v65;
      v69 = (v68 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v68 | 3) != 0xB)
        v69 = v68 | 3;
      if (v68 >= 0xB)
        v15 = v69 + 1;
      else
        v15 = 11;
    }
    v70 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, 2 * v15, 2);
    v71 = v70;
    if (v64)
      memmove(v70, v67, 2 * v64);
    memmove(&v71[v64], v62, 2 * v63);
    if (v65 != 10)
      (*(void (**)(uint64_t, __int128 *, unint64_t))(*(_QWORD *)v100 + 40))(v100, v67, 2 * (v65 + 1));
    *(_QWORD *)&v98 = v71;
    *((_QWORD *)&v98 + 1) = v63 + v64;
    v99 = v15 | 0x8000000000000000;
    v71[v63 + v64] = 0;
    v61 = HIBYTE(v108);
  }
  if (v61 < 0)
    (*(void (**)(uint64_t, _QWORD *, int64_t))(*(_QWORD *)v109 + 40))(v109, v106, 2 * v108);
LABEL_159:
  if (*((char *)a2 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)a2 + 3) + 40))(*((_QWORD *)a2 + 3), *(_QWORD *)a2, 2 * *((_QWORD *)a2 + 2));
  *(_OWORD *)a2 = v98;
  v86 = v99;
  *((_QWORD *)a2 + 2) = v99;
  v87 = HIBYTE(v86);
  if (v86 < 0)
    v87 = *((_QWORD *)a2 + 1);
  v88 = HIBYTE(v102);
  v89 = SHIBYTE(v102);
  if (v102 < 0)
    v88 = v102;
  if (v87 != v88)
  {
LABEL_176:
    v92 = 1;
    v93 = v116;
    if (!v116)
      goto LABEL_178;
    goto LABEL_177;
  }
  if (v87)
  {
    v90 = *(unsigned __int16 **)a2;
    if (v86 >= 0)
      v90 = a2;
    v91 = v101;
    if (v102 >= 0)
      v91 = (unsigned __int16 *)&v101;
    while (*v91 == *v90)
    {
      ++v90;
      ++v91;
      if (!--v87)
        goto LABEL_173;
    }
    goto LABEL_176;
  }
LABEL_173:
  v92 = 0;
  if ((SHIBYTE(v86) & 0x80000000) == 0)
  {
    *a2 = 0;
    *((_BYTE *)a2 + 23) = 0;
    v93 = v116;
    if (!v116)
      goto LABEL_178;
LABEL_177:
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
    goto LABEL_178;
  }
  **(_WORD **)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v93 = v116;
  if (v116)
    goto LABEL_177;
LABEL_178:
  if (SHIBYTE(v114) < 0)
  {
    (*(void (**)(uint64_t, _QWORD, int64_t))(*(_QWORD *)v115 + 40))(v115, __src, 2 * v114);
    if (SHIBYTE(v111) < 0)
      goto LABEL_183;
LABEL_180:
    if (v89 < 0)
LABEL_184:
      (*(void (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)v103 + 40))(v103, v101, 2 * *((_QWORD *)&v102 + 1));
  }
  else
  {
    if ((SHIBYTE(v111) & 0x80000000) == 0)
      goto LABEL_180;
LABEL_183:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v112 + 40))(v112, v110, *((_QWORD *)&v111 + 1) & 0x7FFFFFFFFFFFFFFFLL);
    if (v89 < 0)
      goto LABEL_184;
  }
  return v92;
}

void sub_19F07B020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  if (SHIBYTE(a14) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a15 + 40))(a15, a12, 2 * a14);
  if (SHIBYTE(a4) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, a2, 2 * a4);
  std::wstring_convert<std::codecvt_utf8_utf16<char16_t,1114111ul,(std::codecvt_mode)0>,char16_t,geo::StdAllocator<char16_t,mdm::Allocator>,geo::StdAllocator<char,mdm::Allocator>>::~wstring_convert((uint64_t)va);
  if (SHIBYTE(a8) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a9 + 40))(a9, a6, 2 * a8);
  _Unwind_Resume(a1);
}

void *std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__init_copy_ctor_external(_QWORD **__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = __dst;
  if (a3 > 0xA)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB)
      v6 = a3 | 3;
    v7 = v6 + 1;
    v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*__dst[3] + 16))(__dst[3], 2 * (v6 + 1), 2);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = (_QWORD *)v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
  }
  return memmove(v5, __src, 2 * a3 + 2);
}

_QWORD *geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::construct<md::TextDataEntry,md::TextDataEntry const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (result)
  {
    v2 = result;
    *(_BYTE *)result = *(_BYTE *)a2;
    v3 = *(_QWORD *)(a2 + 16);
    result[1] = *(_QWORD *)(a2 + 8);
    result[2] = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    result[3] = 0;
    result[4] = 0;
    result = *(_QWORD **)(a2 + 48);
    v2[5] = 0;
    v2[6] = result;
    v6 = *(char **)(a2 + 24);
    v7 = *(char **)(a2 + 32);
    v8 = v7 - v6;
    if (v7 != v6)
    {
      if (v8 < 0)
        abort();
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, int64_t, uint64_t))(*result + 16))(result, v7 - v6, 8);
      v2[3] = result;
      v2[4] = result;
      v2[5] = &result[2 * (v8 >> 4)];
      do
      {
        if (result)
        {
          v9 = *((_QWORD *)v6 + 1);
          *result = *(_QWORD *)v6;
          result[1] = v9;
          if (v9)
          {
            v10 = (unint64_t *)(v9 + 8);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
        }
        v6 += 16;
        result += 2;
      }
      while (v6 != v7);
      v2[4] = result;
    }
  }
  return result;
}

void sub_19F07B280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 ***v10;
  unsigned __int16 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned __int16 ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned __int16 *v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned int v59;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,unsigned int>(a2);
  }
  v5 = result + 16 * a3;
  v6 = *(unsigned __int16 *)(v5 + 56);
  if (!*(_WORD *)(v5 + 56))
  {
LABEL_31:
    v24 = *(unsigned __int16 ****)(v4 + 72);
    if (v24)
    {
      v11 = *v24;
      v25 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        LOWORD(v33) = 0;
        goto LABEL_66;
      }
      v26 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
      {
        v34 = 2 * v25;
        v35 = *v11;
        while (*v35 != a2)
        {
          ++v35;
          v34 -= 2;
          if (!v34)
          {
            v35 = (unsigned __int16 *)(v26 + 2 * v25);
            break;
          }
        }
        v33 = ((unint64_t)v35 - v26) >> 1;
LABEL_66:
        if ((_DWORD)v25 != (unsigned __int16)v33)
        {
          v42 = *((unsigned __int16 *)v11 + 21);
          if (!*((_WORD *)v11 + 21))
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          v30 = v11[4];
          if (*((_BYTE *)v11 + 47))
          {
            if (v42 >= 0x1E)
            {
              v54 = v11[4];
              v55 = *((unsigned __int16 *)v11 + 21);
              do
              {
                v56 = v55 >> 1;
                v57 = &v54[v55 >> 1];
                v59 = *v57;
                v58 = v57 + 1;
                v55 += ~(v55 >> 1);
                if (v59 < a2)
                  v54 = v58;
                else
                  v55 = v56;
              }
              while (v55);
              if (v54 == &v30[v42] || *v54 != a2)
                return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              v31 = (unint64_t)((char *)v54 - (char *)v30) >> 1;
            }
            else
            {
              v31 = 0;
              result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
              while (1)
              {
                v43 = v30[v31];
                if (v43 >= a2)
                  break;
                if (v42 == ++v31)
                  return result;
              }
              if (v43 != a2)
                LOWORD(v31) = *((_WORD *)v11 + 21);
            }
          }
          else
          {
            v46 = 2 * v42;
            v47 = v11[4];
            while (*v47 != a2)
            {
              ++v47;
              v46 -= 2;
              if (!v46)
              {
                v47 = &v30[v42];
                break;
              }
            }
            v31 = (unint64_t)((char *)v47 - (char *)v30) >> 1;
          }
          if ((_DWORD)v42 == (unsigned __int16)v31)
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          if (v42 <= (unsigned __int16)v31)
            return result;
          return (uint64_t)&v30[2 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 20);
        }
        goto LABEL_67;
      }
      if (v25 < 0x1E)
      {
        v27 = 0;
        while (1)
        {
          v28 = *(unsigned __int16 *)(v26 + 2 * v27);
          if (v28 >= a2)
            break;
          if (v25 == ++v27)
            goto LABEL_67;
        }
        if (v28 == a2)
          LOWORD(v33) = v27;
        else
          LOWORD(v33) = *((_WORD *)v11 + 5);
        goto LABEL_66;
      }
      v36 = *v11;
      v37 = *((unsigned __int16 *)v11 + 5);
      do
      {
        v38 = v37 >> 1;
        v39 = &v36[v37 >> 1];
        v41 = *v39;
        v40 = v39 + 1;
        v37 += ~(v37 >> 1);
        if (v41 < a2)
          v36 = v40;
        else
          v37 = v38;
      }
      while (v37);
      if (v36 != (unsigned __int16 *)(v26 + 2 * v25) && *v36 == a2)
      {
        v33 = ((unint64_t)v36 - v26) >> 1;
        goto LABEL_66;
      }
    }
LABEL_67:
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,unsigned int>(a2);
  }
  v7 = *(_QWORD *)(v5 + 48);
  v8 = v7 + 8 * v6;
  while (1)
  {
    v10 = *(unsigned __int16 ****)(*(_QWORD *)v7 + 72);
    if (v10)
    {
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (*((_WORD *)v11 + 5))
      {
        v13 = (uint64_t)*v11;
        if (*((_BYTE *)v11 + 15))
        {
          if (v12 >= 0x1E)
          {
            v18 = *v11;
            v19 = *((unsigned __int16 *)v11 + 5);
            do
            {
              v20 = v19 >> 1;
              v21 = &v18[v19 >> 1];
              v23 = *v21;
              v22 = v21 + 1;
              result = v23;
              v19 += ~(v19 >> 1);
              if (v23 < a2)
                v18 = v22;
              else
                v19 = v20;
            }
            while (v19);
            if (v18 == (unsigned __int16 *)(v13 + 2 * v12) || *v18 != a2)
              goto LABEL_6;
            v9 = ((unint64_t)v18 - v13) >> 1;
          }
          else
          {
            v14 = 0;
            while (1)
            {
              v15 = *(unsigned __int16 *)(v13 + 2 * v14);
              if (v15 >= a2)
                break;
              if (v12 == ++v14)
                goto LABEL_6;
            }
            LOWORD(v9) = v15 == a2 ? v14 : *((_WORD *)v11 + 5);
          }
        }
        else
        {
          v16 = 2 * v12;
          v17 = *v11;
          while (*v17 != a2)
          {
            ++v17;
            v16 -= 2;
            if (!v16)
            {
              v17 = (unsigned __int16 *)(v13 + 2 * v12);
              break;
            }
          }
          v9 = ((unint64_t)v17 - v13) >> 1;
        }
      }
      else
      {
        LOWORD(v9) = 0;
      }
      if ((_DWORD)v12 != (unsigned __int16)v9)
        break;
    }
LABEL_6:
    v7 += 8;
    if (v7 == v8)
      goto LABEL_31;
  }
  v29 = *((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21))
    return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v30 = v11[4];
  if (!*((_BYTE *)v11 + 47))
  {
    v44 = 2 * v29;
    v45 = v11[4];
    while (*v45 != a2)
    {
      ++v45;
      v44 -= 2;
      if (!v44)
      {
        v45 = &v30[v29];
        break;
      }
    }
    v31 = (unint64_t)((char *)v45 - (char *)v30) >> 1;
LABEL_105:
    if (v29 <= (unsigned __int16)v31)
      return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    return (uint64_t)&v30[2 * (unsigned __int16)v31] + *((unsigned __int16 *)v11 + 20);
  }
  if (v29 < 0x1E)
  {
    v31 = 0;
    result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      v32 = v30[v31];
      if (v32 >= a2)
        break;
      if (v29 == ++v31)
        return result;
    }
    if (v32 != a2)
      LOWORD(v31) = *((_WORD *)v11 + 21);
    goto LABEL_105;
  }
  v48 = v11[4];
  v49 = *((unsigned __int16 *)v11 + 21);
  do
  {
    v50 = v49 >> 1;
    v51 = &v48[v49 >> 1];
    v53 = *v51;
    v52 = v51 + 1;
    v49 += ~(v49 >> 1);
    if (v53 < a2)
      v48 = v52;
    else
      v49 = v50;
  }
  while (v49);
  if (v48 != &v30[v29] && *v48 == a2)
  {
    v31 = (unint64_t)((char *)v48 - (char *)v30) >> 1;
    goto LABEL_105;
  }
  return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

void md::LabelFeature::styleAttributes(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20[0] = &off_1E4289C68;
  v20[1] = &v17;
  v21 = v20;
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v20);
  std::mutex::unlock(v4);
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
  v8 = v17;
  v9 = v18;
  if (v17 == v18)
  {
    *a2 = 0;
    a2[1] = 0;
    v13 = v8;
    if (!v8)
      return;
  }
  else
  {
    v10 = v17[1];
    *a2 = *v17;
    a2[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v9 = v18;
    }
    v13 = v8;
    if (v9 != v8)
    {
      do
      {
        v14 = (std::__shared_weak_count *)*(v9 - 1);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v9 -= 2;
      }
      while (v9 != v8);
      v13 = v17;
    }
  }
  v18 = v8;
  operator delete(v13);
}

void sub_19F07B828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::mutex *v15;
  char *v17;
  uint64_t v18;

  std::mutex::unlock(v15);
  v17 = a15;
  if (a15 == &a12)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::publicLocale(md::PointLabelFeature *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 68);
  v3 = *((_QWORD *)this + 69) - v2;
  v4 = v2 + (a2 << 6) + 32;
  if (a2 >= v3 >> 6)
    return 0;
  else
    return v4;
}

uint64_t md::PointLabelFeature::publicName(md::PointLabelFeature *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 68);
  v3 = *((_QWORD *)this + 69) - v2;
  v4 = v2 + (a2 << 6);
  if (a2 >= v3 >> 6)
    return 0;
  else
    return v4;
}

void md::SingleGEOResourceDataRequester::requestDataKeys(md::SingleGEOResourceDataRequester *this, gdc::LayerDataCollector **a2, char a3)
{
  uint64_t v4;
  const gdc::SelectionContext *v6;
  gdc::LayerDataCollector *v7;
  int v8;
  char *v9;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *i;
  const QuadTile *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 v21;
  BOOL v22;
  unsigned __int8 v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  signed int v32;
  signed int v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  unsigned int v38;
  const gdc::SelectionContext *v39;
  int v40;
  unsigned int v41;
  uint64_t *v42;
  void *v43[2];
  void *v44;
  void *v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  void *v49;
  void *v50;
  char v51;
  _QWORD v52[3];
  unsigned __int8 v53[4];
  int v54;
  int v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v6 = (const gdc::SelectionContext *)a2;
    v7 = a2[1];
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(&v61, v4, *((unsigned __int16 *)this + 12));
    if ((_BYTE)v61)
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(&v59, *((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
      if ((_BYTE)v59)
      {
        v8 = 0;
        v9 = (char *)&v59 + 4;
        if (*((_BYTE *)this + 28))
          v9 = (char *)this + 32;
        v10 = (unsigned int *)&v60;
        if (*((_BYTE *)this + 36))
          v10 = (unsigned int *)((char *)this + 40);
        v11 = (unsigned int *)*((_QWORD *)v6 + 8);
        v12 = *v11;
        if ((_DWORD)v12)
        {
          v13 = HIDWORD(v61);
          if (HIDWORD(v61))
          {
            if (HIDWORD(v61) >= v12)
            {
              v8 = 0;
            }
            else
            {
              v8 = 0;
              do
              {
                ++v8;
                v13 *= 2;
              }
              while (v13 < v12);
            }
            while (v13 > v12)
            {
              --v8;
              v12 *= 2;
            }
          }
        }
        v14 = *(_DWORD *)v9;
        v41 = *v10;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        i = (uint64_t *)*((_QWORD *)v11 + 3);
        if (i)
        {
          v40 = -v8 & ~(-v8 >> 31);
          v39 = v6;
          v38 = v14;
          do
          {
            v16 = (const QuadTile *)(i + 2);
            v17 = *((unsigned __int8 *)i + 17);
            v18 = 1 << v17;
            v19 = *((_DWORD *)i + 6);
            v20 = (*((_DWORD *)i + 5) % v18 + v18) % v18;
            v53[0] = *((_BYTE *)i + 16);
            v53[1] = v17;
            v54 = v20;
            v55 = (v19 % v18 + v18) % v18;
            if (v17)
            {
              v21 = v17 - 1;
              if (v40 < (int)v17 - 1)
                v21 = v40;
              v22 = v17 >= v21;
              v23 = v17 - v21;
              if (!v22)
                v23 = 0;
            }
            else
            {
              v23 = 0;
            }
            if (v14 <= v23 && v41 >= v23)
            {
              v57 = v56;
              v24 = **((unsigned int **)v6 + 8);
              (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(v43, *((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
              v25 = 0;
              v42 = i;
              if ((_DWORD)v24)
              {
                v26 = HIDWORD(v43[0]);
                if (HIDWORD(v43[0]))
                {
                  if (HIDWORD(v43[0]) >= v24)
                  {
                    v25 = 0;
                  }
                  else
                  {
                    v25 = 0;
                    do
                    {
                      ++v25;
                      v26 *= 2;
                    }
                    while (v26 < v24);
                  }
                  while (v26 > v24)
                  {
                    --v25;
                    v24 *= 2;
                  }
                }
              }
              v27 = *((_WORD *)this + 12);
              v28 = *((_QWORD *)this + 1);
              v29 = *((unsigned __int8 *)this + 46);
              v30 = *((unsigned __int16 *)this + 22);
              (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v28 + 24))(&v47, v28, v27);
              if ((_BYTE)v47)
              {
                v31 = v30 | (v29 << 16);
                if (v31 >= 0x10000)
                {
                  v32 = v30;
                  if (HIDWORD(v47) < v30)
                    v32 = HIDWORD(v47);
                  v33 = BYTE1(v30);
                  if (BYTE1(v30) <= v48)
                    v33 = v48;
                }
                else
                {
                  v32 = HIDWORD(v47);
                  v33 = v48;
                }
                if (v32 <= v25 + (int)v17)
                  v32 = v25 + v17;
                if (v33 < v32)
                  v32 = v33;
                md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(v17 - v32, v27, v28, v53, v31, (uint64_t *)&v56);
              }
              v34 = v56;
              v35 = v57;
              v6 = v39;
              v14 = v38;
              for (i = v42; v34 != v35; v34 += 24)
              {
                (*(void (**)(_QWORD *__return_ptr, md::SingleGEOResourceDataRequester *, char *))(*(_QWORD *)this + 80))(v52, this, v34);
                if ((a3 & 1) != 0)
                  v36 = 1;
                else
                  v36 = *((_DWORD *)this + 4);
                gdc::Tiled::mapDataKeyFromTile((unsigned __int8 *)&v47, 0, (unsigned __int8 *)v52, *((_WORD *)this + 11), v36);
                gdc::LayerDataCollector::addDataKey(v7, (const gdc::LayerDataRequestKey *)&v47, v16);
                if (*((_BYTE *)this + 20))
                {
                  if ((a3 & 1) != 0)
                    v37 = 1;
                  else
                    v37 = *((_DWORD *)this + 4);
                  gdc::Tiled::mapDataKeyFromTile((unsigned __int8 *)v43, 1u, (unsigned __int8 *)v52, *((_WORD *)this + 11), v37);
                  gdc::LayerDataCollector::addDataKey(v7, (const gdc::LayerDataRequestKey *)v43, v16);
                  if (v46)
                    v46 = 0;
                  if (v44 != v45)
                    free(v44);
                }
                if (v51)
                  v51 = 0;
                if (v49 != v50)
                  free(v49);
              }
            }
            i = (uint64_t *)*i;
          }
          while (i);
          if (v56)
          {
            v57 = v56;
            operator delete(v56);
          }
        }
      }
    }
  }
}

void sub_19F07BC98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void gdc::LayerDataCollector::addDataKey(gdc::LayerDataCollector *this, const gdc::LayerDataRequestKey *a2, const QuadTile *a3)
{
  char *v6;
  uint64_t **v7;
  unsigned __int16 v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  const QuadTile *v44;
  char v45[8];
  uint64_t v46;
  void *v47;
  void *v48;
  char v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unsigned __int8 v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  v6 = (char *)this + 48;
  v7 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 6, (unsigned __int8 *)a2);
  if (v7)
  {
    v54 = (unint64_t)v7[16];
    goto LABEL_53;
  }
  v8 = *((_WORD *)a2 + 4);
  v9 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)this + 3, v8);
  v54 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)v9 + 1) - *(_QWORD *)v9) >> 4);
  v10 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)this + 3, v8);
  v11 = v10;
  v13 = *((_QWORD *)v10 + 1);
  v12 = *((_QWORD *)v10 + 2);
  if (v13 >= v12)
  {
    v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v13 - *(_QWORD *)v10) >> 4);
    v18 = v17 + 1;
    if (v17 + 1 > 0x1C71C71C71C71C7)
      abort();
    v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - *(_QWORD *)v10) >> 4);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0xE38E38E38E38E3)
      v20 = 0x1C71C71C71C71C7;
    else
      v20 = v18;
    v43 = v6;
    v44 = a3;
    if (v20)
    {
      if (v20 > 0x1C71C71C71C71C7)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (char *)operator new(144 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[144 * v17];
    v55 = *(_BYTE *)a2;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v56, (uint64_t)a2 + 8);
    v59 = 0;
    if (*((_BYTE *)a2 + 96))
    {
      v60 = *((_DWORD *)a2 + 25);
      v59 = 1;
    }
    v61 = *((_QWORD *)a2 + 13);
    *v22 = v55;
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v22 + 8), (uint64_t)&v56);
    v22[96] = 0;
    v23 = v59;
    if (v59)
    {
      *((_DWORD *)v22 + 25) = v60;
      v22[96] = 1;
    }
    *((_QWORD *)v22 + 13) = v61;
    v24 = &v21[144 * v17];
    *((_QWORD *)v24 + 14) = 0;
    *((_QWORD *)v24 + 15) = 0;
    *((_DWORD *)v24 + 32) = 1;
    v24[132] = 0;
    *((_QWORD *)v24 + 17) = 0;
    if (v23)
      v59 = 0;
    if (v57 != v58)
      free(v57);
    v25 = &v21[144 * v20];
    v16 = v22 + 144;
    v27 = *(char **)v11;
    v26 = (char *)*((_QWORD *)v11 + 1);
    if (v26 == *(char **)v11)
    {
      *(_QWORD *)v11 = v22;
      *((_QWORD *)v11 + 1) = v16;
      *((_QWORD *)v11 + 2) = v25;
LABEL_50:
      v6 = v43;
      a3 = v44;
      if (v26)
        operator delete(v26);
      goto LABEL_52;
    }
    v41 = v25;
    v42 = v22 + 144;
    v28 = 0;
    do
    {
      v29 = &v22[v28];
      v30 = &v26[v28];
      v22[v28 - 144] = v26[v28 - 144];
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v22[v28 - 136], (uint64_t)&v26[v28 - 136]);
      v22[v28 - 48] = 0;
      if (v26[v28 - 48])
      {
        *((_DWORD *)v29 - 11) = *((_DWORD *)v30 - 11);
        *(v29 - 48) = 1;
      }
      *((_QWORD *)v29 - 5) = *((_QWORD *)v30 - 5);
      *((_OWORD *)v29 - 2) = *((_OWORD *)v30 - 2);
      *((_QWORD *)v30 - 4) = 0;
      *((_QWORD *)v30 - 3) = 0;
      *((_OWORD *)v29 - 1) = *((_OWORD *)v30 - 1);
      v28 -= 144;
    }
    while (&v26[v28] != v27);
    v31 = &v22[v28];
    v26 = *(char **)v11;
    v32 = (char *)*((_QWORD *)v11 + 1);
    v16 = v42;
    *(_QWORD *)v11 = v31;
    *((_QWORD *)v11 + 1) = v42;
    *((_QWORD *)v11 + 2) = v41;
    while (1)
    {
      if (v32 == v26)
        goto LABEL_50;
      v33 = (std::__shared_weak_count *)*((_QWORD *)v32 - 3);
      if (!v33)
        break;
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (v35)
        break;
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if (*(v32 - 48))
        goto LABEL_44;
LABEL_45:
      v36 = (void *)*((_QWORD *)v32 - 16);
      if (v36 != *((void **)v32 - 14))
        free(v36);
      v32 -= 144;
    }
    if (!*(v32 - 48))
      goto LABEL_45;
LABEL_44:
    *(v32 - 48) = 0;
    goto LABEL_45;
  }
  v55 = *(_BYTE *)a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v56, (uint64_t)a2 + 8);
  v59 = 0;
  if (*((_BYTE *)a2 + 96))
  {
    v60 = *((_DWORD *)a2 + 25);
    v59 = 1;
  }
  v61 = *((_QWORD *)a2 + 13);
  *(_BYTE *)v13 = v55;
  gdc::LayerDataKey::LayerDataKey(v13 + 8, (uint64_t)&v56);
  *(_BYTE *)(v13 + 96) = 0;
  v14 = v59;
  if (v59)
  {
    *(_DWORD *)(v13 + 100) = v60;
    *(_BYTE *)(v13 + 96) = 1;
  }
  v15 = v61;
  *(_QWORD *)(v13 + 112) = 0;
  *(_QWORD *)(v13 + 120) = 0;
  *(_QWORD *)(v13 + 104) = v15;
  *(_DWORD *)(v13 + 128) = 1;
  *(_BYTE *)(v13 + 132) = 0;
  *(_QWORD *)(v13 + 136) = 0;
  if (v14)
    v59 = 0;
  if (v57 != v58)
    free(v57);
  v16 = (char *)(v13 + 144);
LABEL_52:
  *((_QWORD *)v11 + 1) = v16;
  std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&,unsigned long &>((uint64_t)v6, (unsigned __int8 *)a2, (uint64_t)a2, (uint64_t *)&v54);
LABEL_53:
  v45[0] = *(_BYTE *)a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v46, (uint64_t)a2 + 8);
  v49 = 0;
  if (*((_BYTE *)a2 + 96))
  {
    v50 = *((_DWORD *)a2 + 25);
    v49 = 1;
  }
  v51 = *((_QWORD *)a2 + 13);
  v52 = *(_WORD *)&a3->_type;
  v53 = *(_QWORD *)&a3->_yIdx;
  v37 = *((_QWORD *)this + 1);
  if (v37 >= *((_QWORD *)this + 2))
  {
    v40 = std::vector<gdc::LayerDataIndex>::__emplace_back_slow_path<gdc::LayerKeyPair &,unsigned long &>((void **)this, v45, (uint64_t *)&v54);
  }
  else
  {
    v55 = v45[0];
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v56, (uint64_t)&v46);
    v59 = 0;
    if (v49)
    {
      v60 = v50;
      v59 = 1;
    }
    v61 = v51;
    v62 = v52;
    v63 = v53;
    v38 = v54;
    *(_BYTE *)v37 = v55;
    gdc::LayerDataKey::LayerDataKey(v37 + 8, (uint64_t)&v56);
    *(_BYTE *)(v37 + 96) = 0;
    v39 = v59;
    if (v59)
    {
      *(_DWORD *)(v37 + 100) = v60;
      *(_BYTE *)(v37 + 96) = 1;
    }
    *(_QWORD *)(v37 + 104) = v61;
    *(_WORD *)(v37 + 112) = v62;
    *(_QWORD *)(v37 + 116) = v63;
    *(_QWORD *)(v37 + 136) = v38;
    if (v39)
      v59 = 0;
    if (v57 != v58)
      free(v57);
    v40 = (char *)(v37 + 144);
  }
  *((_QWORD *)this + 1) = v40;
  if (v49)
    v49 = 0;
  if (v47 != v48)
    free(v47);
}

unsigned __int16 *geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](unsigned __int16 **a1, unsigned __int16 a2)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a1;
  if (*a1 != v5)
  {
    v6 = *a1;
    while (*v6 != a2)
    {
      v6 += 16;
      if (v6 == v5)
        goto LABEL_7;
    }
  }
  if (v6 == v5)
  {
LABEL_7:
    v6 = *a1;
    if (v4 != v5)
    {
      v6 = *a1;
      while (*v6 != a2)
      {
        v6 += 16;
        if (v6 == v5)
          goto LABEL_13;
      }
    }
    if (v6 == v5)
    {
LABEL_13:
      v7 = a1[2];
      if (v5 < v7)
      {
        *v5 = a2;
        *((_QWORD *)v5 + 2) = 0;
        *((_QWORD *)v5 + 3) = 0;
        v8 = v5 + 16;
        *((_QWORD *)v5 + 1) = 0;
LABEL_50:
        a1[1] = v8;
        v6 = v8 - 16;
        return v6 + 4;
      }
      v9 = ((char *)v5 - (char *)v4) >> 5;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 59)
        abort();
      v11 = (char *)v7 - (char *)v4;
      if (v11 >> 4 > v10)
        v10 = v11 >> 4;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = (char *)operator new(32 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[32 * v9];
      *(_WORD *)v14 = a2;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = 0;
      v15 = (unsigned __int16 *)&v13[32 * v12];
      *((_QWORD *)v14 + 1) = 0;
      v8 = (unsigned __int16 *)(v14 + 32);
      if (v4 == v5)
      {
        *a1 = (unsigned __int16 *)v14;
        a1[1] = v8;
        a1[2] = v15;
LABEL_48:
        if (v4)
          operator delete(v4);
        goto LABEL_50;
      }
      v16 = 0;
      do
      {
        v17 = &v14[v16 * 2];
        v18 = &v5[v16];
        *((_WORD *)v17 - 16) = v5[v16 - 16];
        *((_QWORD *)v17 - 2) = 0;
        *((_QWORD *)v17 - 1) = 0;
        *(_OWORD *)(v17 - 24) = *(_OWORD *)&v5[v16 - 12];
        *((_QWORD *)v17 - 1) = *(_QWORD *)&v5[v16 - 4];
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        v16 -= 16;
      }
      while (&v5[v16] != v4);
      v4 = *a1;
      v19 = a1[1];
      *a1 = (unsigned __int16 *)&v14[v16 * 2];
      a1[1] = v8;
      a1[2] = v15;
      while (1)
      {
        if (v19 == v4)
          goto LABEL_48;
        v21 = *((_QWORD *)v19 - 3);
        if (v21)
          break;
LABEL_31:
        v19 -= 16;
      }
      v22 = *((_QWORD *)v19 - 2);
      v20 = (void *)*((_QWORD *)v19 - 3);
      if (v22 == v21)
      {
LABEL_30:
        *((_QWORD *)v19 - 2) = v21;
        operator delete(v20);
        goto LABEL_31;
      }
      while (1)
      {
        v23 = *(std::__shared_weak_count **)(v22 - 24);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
            break;
        }
        if (*(_BYTE *)(v22 - 48))
          goto LABEL_42;
LABEL_43:
        v26 = *(void **)(v22 - 128);
        if (v26 != *(void **)(v22 - 112))
          free(v26);
        v22 -= 144;
        if (v22 == v21)
        {
          v20 = (void *)*((_QWORD *)v19 - 3);
          goto LABEL_30;
        }
      }
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (!*(_BYTE *)(v22 - 48))
        goto LABEL_43;
LABEL_42:
      *(_BYTE *)(v22 - 48) = 0;
      goto LABEL_43;
    }
  }
  return v6 + 4;
}

uint64_t gdc::ResourceManager::tileSize@<X0>(uint64_t this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;

  v3 = *(unsigned __int16 **)(this + 32);
  v4 = *(unsigned __int16 **)(this + 40);
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      v3 += 8;
      if (v3 == v4)
        goto LABEL_7;
    }
  }
  if (v3 != v4)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 1) + 72))(*((_QWORD *)v3 + 1));
LABEL_7:
  *a3 = 0;
  return this;
}

void *md::TiledGEOResourceFetcher::tileSize@<X0>(md::TiledGEOResourceFetcher *this@<X0>, uint64_t a2@<X8>)
{
  void *result;
  unsigned int v5;
  unint64_t v6;

  result = (void *)*((_QWORD *)this + 76);
  if (result)
  {
    v5 = 1;
    if (objc_msgSend(result, "scale") == 2)
    {
      if (*((float *)this + 2) > 1.0)
        v5 = 2;
      else
        v5 = 1;
    }
    result = (void *)objc_msgSend(*((id *)this + 76), "size");
    v6 = 0x20001000080uLL >> (16 * result);
    if (result >= 3)
      LOWORD(v6) = 0;
    *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = (v6 & 0x380) / v5;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,unsigned long>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&,unsigned long &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  int v13;
  int v14;
  uint64_t *v15;
  const void *v16;
  size_t v17;
  unint64_t v18;
  uint64_t *v19;
  size_t v20;
  int v21;
  uint64_t *v22;
  uint64_t *v23;
  const void *v24;
  size_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  const void *v42;
  uint64_t *v43;
  uint64_t *v44;

  v5 = a4;
  v8 = *((_QWORD *)a2 + 13);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *((_QWORD *)a2 + 13);
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = *a2;
        v14 = *((unsigned __int16 *)a2 + 4);
        v15 = (uint64_t *)*((_QWORD *)a2 + 10);
        v16 = (const void *)*((_QWORD *)a2 + 2);
        v17 = *((_QWORD *)a2 + 3) - (_QWORD)v16;
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v12[1];
            if (v22 == (uint64_t *)v8)
            {
              if (*((unsigned __int8 *)v12 + 16) == v13 && *((unsigned __int16 *)v12 + 12) == v14 && v12[12] == v15)
              {
                v23 = v12[4];
                if ((char *)v12[5] - (char *)v23 == v17)
                {
                  v42 = v16;
                  v44 = v15;
                  v24 = v16;
                  v25 = v17;
                  v26 = memcmp(v23, v24, v17);
                  v17 = v25;
                  v16 = v42;
                  v15 = v44;
                  if (!v26)
                    return;
                }
              }
            }
            else if (((unint64_t)v22 & (v9 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v12 = (uint64_t **)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        while (1)
        {
          v18 = (unint64_t)v12[1];
          if (v18 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v13 && *((unsigned __int16 *)v12 + 12) == v14 && v12[12] == v15)
            {
              v19 = v12[4];
              if ((char *)v12[5] - (char *)v19 == v17)
              {
                v20 = v17;
                v43 = v15;
                v21 = memcmp(v19, v16, v17);
                v17 = v20;
                v15 = v43;
                if (!v21)
                  return;
              }
            }
          }
          else
          {
            if (v18 >= v9)
              v18 %= v9;
            if (v18 != v4)
            {
LABEL_31:
              v5 = a4;
              break;
            }
          }
          v12 = (uint64_t **)*v12;
          if (!v12)
            goto LABEL_31;
        }
      }
    }
  }
  v27 = operator new(0x88uLL);
  *v27 = 0;
  v27[1] = v8;
  *((_BYTE *)v27 + 16) = *(_BYTE *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v27 + 3), a3 + 8);
  *((_BYTE *)v27 + 112) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *((_DWORD *)v27 + 29) = *(_DWORD *)(a3 + 100);
    *((_BYTE *)v27 + 112) = 1;
  }
  v28 = *v5;
  v27[15] = *(_QWORD *)(a3 + 104);
  v27[16] = v28;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v9 || (float)(v30 * (float)v9) < v29)
  {
    v31 = 1;
    if (v9 >= 3)
      v31 = (v9 & (v9 - 1)) != 0;
    v32 = v31 | (2 * v9);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_56;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_56:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v39 = *(_QWORD *)a1;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v40)
  {
    *v27 = *v40;
LABEL_70:
    *v40 = v27;
    goto LABEL_71;
  }
  *v27 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v27;
  *(_QWORD *)(v39 + 8 * v4) = a1 + 16;
  if (*v27)
  {
    v41 = *(_QWORD *)(*v27 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9)
        v41 %= v9;
    }
    else
    {
      v41 &= v9 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_70;
  }
LABEL_71:
  ++*(_QWORD *)(a1 + 24);
}

double md::SingleGEOResourceDataRequester::resolveTile@<D0>(const QuadTile *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  *(_WORD *)a2 = *(_WORD *)&a1->_type;
  result = *(double *)&a1->_yIdx;
  *(double *)(a2 + 4) = result;
  return result;
}

uint64_t gdc::ResourceManager::downloadZoomRange@<X0>(uint64_t this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;

  v3 = *(unsigned __int16 **)(this + 32);
  v4 = *(unsigned __int16 **)(this + 40);
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      v3 += 8;
      if (v3 == v4)
        goto LABEL_7;
    }
  }
  if (v3 != v4)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 1) + 64))(*((_QWORD *)v3 + 1));
LABEL_7:
  *a3 = 0;
  return this;
}

uint64_t md::TiledGEOResourceFetcher::downloadZoomRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(this + 592))
  {
    *(_QWORD *)(a2 + 4) = *(_QWORD *)(this + 596);
    *(_BYTE *)a2 = 1;
  }
  return this;
}

void md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(int a1, __int16 a2, uint64_t a3, unsigned __int8 *a4, int a5, uint64_t *a6)
{
  char v7;
  unsigned int v8;
  unsigned int v9;
  int32x2_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  char v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  __int128 v38;
  unsigned __int8 *v39;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  __int16 v47;
  __int16 *v48;
  uint64_t *v49;
  __int16 v50;
  char v51;

  v7 = a1;
  v50 = a5;
  v51 = BYTE2(a5);
  v46 = a3;
  v47 = a2;
  v48 = &v50;
  v49 = a6;
  if (a1 < 0)
  {
    v11 = -(char)a1;
    v12 = a4[1];
    v13 = *((_DWORD *)a4 + 1);
    v14 = *a4;
    v15 = v12 - a1;
    v16 = v13 << v11;
    v42 = *((_DWORD *)a4 + 2);
    v17 = v42 << v11;
    if (v11 <= 0x1E)
      v18 = *a4;
    else
      v18 = -1;
    if (v11 <= 0x1E)
      v19 = v12 - a1;
    else
      v19 = 0;
    if (v11 <= 0x1E)
      v20 = v13 << v11;
    else
      v20 = 0;
    if (v11 <= 0x1E)
      v21 = v42 << v11;
    else
      v21 = 0;
    v22 = 1 << v11;
    v41 = v22 << v11;
    if (v22 << v11)
    {
      v43 = v18;
      v44 = v19;
      v45 = __PAIR64__(v21, v20);
      md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(int,unsigned short,gdc::ResourceManifestInformer const*,geo::QuadTile const&,std::optional<gm::Range<unsigned char>>,std::vector<geo::QuadTile> &)::$_0::operator()(&v46, &v43);
      if (v14 != *a4 || v12 != a4[1] || v13 != *((_DWORD *)a4 + 1) || v42 != *((_DWORD *)a4 + 2) || v41 != 1)
      {
        v23 = v7 != 0;
        LODWORD(v24) = v7 == 0;
        v25 = 1;
        v26 = 2;
        do
        {
          do
          {
            v27 = v26;
            v43 = v14;
            v44 = v15;
            LODWORD(v45) = v16 + v24;
            HIDWORD(v45) = v17 + v23;
            md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(int,unsigned short,gdc::ResourceManifestInformer const*,geo::QuadTile const&,std::optional<gm::Range<unsigned char>>,std::vector<geo::QuadTile> &)::$_0::operator()(&v46, &v43);
            ++v25;
            v24 = v27 / v22;
            v23 = v25 - v27 / v22 * v22;
            v26 = v27 + 1;
          }
          while (v14 != *a4);
        }
        while (v12 != a4[1] || v13 != *((_DWORD *)a4 + 1) || v42 != *((_DWORD *)a4 + 2) || v41 != v27);
      }
    }
  }
  else
  {
    v8 = a4[1];
    if (a4[1])
    {
      v9 = a1;
      if (v8 < a1)
        v9 = a4[1];
      LOBYTE(v8) = v8 - v9;
      v10 = vshl_s32(*(int32x2_t *)(a4 + 4), vneg_s32(vdup_n_s32(v9)));
    }
    else
    {
      v10 = *(int32x2_t *)(a4 + 4);
    }
    v43 = *a4;
    v44 = v8;
    v45 = (unint64_t)v10;
    md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(int,unsigned short,gdc::ResourceManifestInformer const*,geo::QuadTile const&,std::optional<gm::Range<unsigned char>>,std::vector<geo::QuadTile> &)::$_0::operator()(&v46, &v43);
  }
  v28 = a6[1];
  v29 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a6) >> 3));
  if (v28 == *a6)
    v30 = 0;
  else
    v30 = v29;
  std::__introsort<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *,false>(*a6, v28, v30, 1);
  v32 = (unsigned __int8 *)*a6;
  v31 = (unsigned __int8 *)a6[1];
  if ((unsigned __int8 *)*a6 != v31)
  {
    v33 = v32 + 24;
    if (v32 + 24 != v31)
    {
      v34 = *v32;
      while (1)
      {
        v35 = v34;
        v36 = v33 - 24;
        v34 = *v33;
        if (__PAIR64__(*(v33 - 23), v35) == __PAIR64__(v33[1], v34)
          && *((_DWORD *)v33 - 5) == *((_DWORD *)v33 + 1)
          && *((_DWORD *)v33 - 4) == *((_DWORD *)v33 + 2))
        {
          break;
        }
        v33 += 24;
        if (v33 == v31)
          return;
      }
      if (v36 != v31)
      {
        v37 = v33 + 24;
        if (v36 + 48 != v31)
        {
          do
          {
            if (*v36 != *v37
              || v36[1] != v37[1]
              || *((_DWORD *)v36 + 1) != *((_DWORD *)v37 + 1)
              || *((_DWORD *)v36 + 2) != *((_DWORD *)v37 + 2))
            {
              v38 = *(_OWORD *)v37;
              *((_QWORD *)v36 + 5) = *((_QWORD *)v37 + 2);
              *(_OWORD *)(v36 + 24) = v38;
              v36 += 24;
            }
            v37 += 24;
          }
          while (v37 != v31);
          v31 = (unsigned __int8 *)a6[1];
        }
        v39 = v36 + 24;
        if (v39 != v31)
          a6[1] = (uint64_t)v39;
      }
    }
  }
}

void md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(int,unsigned short,gdc::ResourceManifestInformer const*,geo::QuadTile const&,std::optional<gm::Range<unsigned char>>,std::vector<geo::QuadTile> &)::$_0::operator()(_QWORD *a1, char *a2)
{
  unsigned __int16 *v4;
  char **v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  unsigned int v13;
  char v14;
  unint64_t v16;
  char *v17;
  char *i;
  unsigned int v19;
  char v20;
  int32x2_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  uint64_t v44;
  char v45;
  unsigned __int8 v46;
  uint64_t v47;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, char *))(*(_QWORD *)*a1 + 16))(&v44, *a1, *((unsigned __int16 *)a1 + 4), a2);
  if ((_BYTE)v44)
  {
    v4 = (unsigned __int16 *)a1[2];
    v5 = (char **)a1[3];
    v6 = *v4;
    v7 = v6 | (*((unsigned __int8 *)v4 + 2) << 16);
    v8 = a2[1];
    v9 = v6 >> 8;
    v10 = (v7 & 0xFF0000) != 0;
    v11 = v8 >= v7;
    if (v9 >= v8)
      v9 = a2[1];
    v12 = v10 && v11;
    if (v12)
      v13 = v9;
    else
      v13 = 0;
    v14 = v46;
    if (v12 == 1 && v13 > v46)
    {
      if (a2[1])
      {
        v19 = (v8 - v13);
        if (v8 < v19)
          v19 = a2[1];
        v20 = v8 - v19;
        v21 = vshl_s32(*(int32x2_t *)(a2 + 4), vneg_s32(vdup_n_s32(v19)));
      }
      else
      {
        v20 = 0;
        v21 = *(int32x2_t *)(a2 + 4);
      }
      v32 = *a2;
      v34 = v5[1];
      v33 = (unint64_t)v5[2];
      if ((unint64_t)v34 < v33)
      {
        *v34 = v32;
        v34[1] = v20;
        i = v34 + 24;
        *(int32x2_t *)(v34 + 4) = v21;
        goto LABEL_42;
      }
      v22 = *v5;
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v34 - *v5) >> 3);
      v36 = v35 + 1;
      if (v35 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v22) >> 3);
        if (2 * v37 > v36)
          v36 = 2 * v37;
        if (v37 >= 0x555555555555555)
          v38 = 0xAAAAAAAAAAAAAAALL;
        else
          v38 = v36;
        if (v38 <= 0xAAAAAAAAAAAAAAALL)
        {
          v39 = 24 * v38;
          v40 = (char *)operator new(24 * v38);
          v41 = &v40[24 * v35];
          *v41 = v32;
          v42 = &v40[v39];
          v41[1] = v20;
          *(int32x2_t *)(v41 + 4) = v21;
          for (i = v41 + 24; v34 != v22; *(_QWORD *)(v41 + 4) = *(_QWORD *)(v34 + 4))
          {
            v43 = *((_WORD *)v34 - 12);
            v34 -= 24;
            *((_WORD *)v41 - 12) = v43;
            v41 -= 24;
          }
          *v5 = v41;
          v5[1] = i;
          v5[2] = v42;
          if (!v22)
            goto LABEL_42;
LABEL_41:
          operator delete(v22);
          goto LABEL_42;
        }
LABEL_45:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
    }
    else
    {
      v17 = v5[1];
      v16 = (unint64_t)v5[2];
      if ((unint64_t)v17 < v16)
      {
        *v17 = v45;
        v17[1] = v14;
        *(_QWORD *)(v17 + 4) = v47;
        i = v17 + 24;
LABEL_42:
        v5[1] = i;
        return;
      }
      v22 = *v5;
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *v5) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v22) >> 3);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v24;
        if (v26 <= 0xAAAAAAAAAAAAAAALL)
        {
          v27 = 24 * v26;
          v28 = (char *)operator new(24 * v26);
          v29 = &v28[24 * v23];
          v30 = &v28[v27];
          *v29 = v45;
          v29[1] = v14;
          *(_QWORD *)(v29 + 4) = v47;
          for (i = v29 + 24; v17 != v22; *(_QWORD *)(v29 + 4) = *(_QWORD *)(v17 + 4))
          {
            v31 = *((_WORD *)v17 - 12);
            v17 -= 24;
            *((_WORD *)v29 - 12) = v31;
            v29 -= 24;
          }
          *v5 = v29;
          v5[1] = i;
          v5[2] = v30;
          if (!v22)
            goto LABEL_42;
          goto LABEL_41;
        }
        goto LABEL_45;
      }
    }
    abort();
  }
}

uint64_t gdc::ResourceManager::resourceTileForTile@<X0>(uint64_t this@<X0>, const QuadTile *a2@<X2>, int a3@<W1>, _BYTE *a4@<X8>)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;

  v4 = *(unsigned __int16 **)(this + 32);
  v5 = *(unsigned __int16 **)(this + 40);
  if (v4 != v5)
  {
    while (*v4 != a3)
    {
      v4 += 8;
      if (v4 == v5)
        goto LABEL_7;
    }
  }
  if (v4 != v5)
    return (*(uint64_t (**)(_QWORD, const QuadTile *))(**((_QWORD **)v4 + 1) + 56))(*((_QWORD *)v4 + 1), a2);
LABEL_7:
  *a4 = 0;
  return this;
}

uint64_t md::TiledGEOResourceFetcher::resourceTileForTile@<X0>(uint64_t this@<X0>, const QuadTile *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int level;
  int xIdx;
  int yIdx;
  unsigned __int8 type;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;

  if (!*(_QWORD *)(this + 608) || !*(_BYTE *)(this + 592))
    goto LABEL_33;
  level = a2->_level;
  yIdx = a2->_yIdx;
  xIdx = a2->_xIdx;
  type = a2->_type;
  if ((int)(level - *(_DWORD *)(this + 600)) >= 1)
  {
    if (!a2->_level)
      goto LABEL_33;
    v7 = (level - *(_BYTE *)(this + 600));
    if (level < v7)
      LOBYTE(v7) = a2->_level;
    LOBYTE(level) = level - v7;
    yIdx >>= v7;
    xIdx >>= v7;
  }
  if ((_BYTE)level)
  {
    while (*(_DWORD *)(this + 596) <= level)
    {
      v8 = *(unsigned int **)(this + 568);
      v9 = *(unsigned int **)(this + 576);
      if (v8 != v9)
      {
        v10 = v8 + 2;
        while (1)
        {
          v11 = *(v10 - 2);
          v12 = v10 - 2;
          if (v11 <= level && *(v10 - 1) >= level)
          {
            v14 = (level - v11);
            if (level < v14)
              LOBYTE(v14) = level;
            v15 = xIdx >> v14;
            v16 = yIdx >> v14;
            v17 = v15 < *v10 || v15 > v10[2];
            v18 = !v17 && v16 >= v10[1];
            if (v18 && v16 <= v10[3])
              break;
          }
          v10 += 6;
          if (v12 + 6 == v9)
            goto LABEL_10;
        }
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 8) = type;
        *(_BYTE *)(a3 + 9) = level;
        *(_DWORD *)(a3 + 12) = yIdx;
        *(_DWORD *)(a3 + 16) = xIdx;
        return this;
      }
LABEL_10:
      LOBYTE(level) = level - 1;
      yIdx >>= 1;
      xIdx >>= 1;
      if (!(_BYTE)level)
        break;
    }
  }
LABEL_33:
  *(_BYTE *)a3 = 0;
  return this;
}

uint64_t md::DaVinciGroundTileResourceFetcher::downloadZoomRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(this + 618))
  {
    if (*(_BYTE *)(this + 592))
    {
      LODWORD(v2) = *(_DWORD *)(this + 600);
      if (v2 >= 0xB)
        v2 = 11;
      else
        v2 = v2;
      v3 = *(unsigned int *)(this + 596) | (unint64_t)(v2 << 32);
    }
    else
    {
      v3 = 0xB00000000;
    }
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 4) = v3;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    if (*(_BYTE *)(this + 592))
    {
      *(_QWORD *)(a2 + 4) = *(_QWORD *)(this + 596);
      *(_BYTE *)a2 = 1;
    }
  }
  return this;
}

void std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *,false>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  const void *v21;
  size_t v22;
  const void *v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  const void *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  const void *v41;
  BOOL v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *j;
  unsigned int v49;
  int v50;
  BOOL v51;
  int v52;
  unsigned int v53;
  const void *v54;
  BOOL v55;
  unsigned __int8 *v57;
  unsigned __int8 v58;
  unsigned int v59;
  signed int v60;
  signed int v61;
  unsigned int v62;
  int v63;
  BOOL v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  int v68;
  BOOL v69;
  int v70;
  unsigned int v71;
  const void *v72;
  BOOL v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  const void *v80;
  unsigned int v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  const void *v87;
  BOOL v88;
  unint64_t v89;
  BOOL v90;
  unsigned int v91;
  int v92;
  BOOL v93;
  int v94;
  unsigned int v95;
  const void *v96;
  _BOOL4 v97;
  __int128 v98;
  void *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unint64_t v103;
  size_t v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unint64_t v107;
  unsigned __int8 *v108;
  unint64_t v109;
  __int128 *v110;
  _OWORD *v111;
  unint64_t v112;
  __int128 v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned __int8 v119;
  unint64_t v120;
  unsigned __int8 *v121;
  __int128 *v122;
  _OWORD *v123;
  unint64_t v124;
  __int128 v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  unsigned __int8 *v129;
  uint64_t v130;
  unsigned __int8 v131;
  int v132;
  __int128 v133;
  BOOL v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  const void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  const void *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  const void *v149;
  uint64_t v150;
  BOOL v151;
  unsigned int v152;
  int v153;
  BOOL v154;
  int v155;
  unsigned int v156;
  const void *v157;
  unint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  const void *v162;
  unsigned __int8 *i;
  unsigned int v164;
  BOOL v165;
  int v166;
  BOOL v167;
  int v168;
  unsigned int v169;
  const void *v170;
  unsigned int v171;
  int v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  const void *v176;
  uint64_t v177;
  unsigned __int8 *v178;
  unsigned int v179;
  int v180;
  int v181;
  unsigned int v182;
  const void *v183;
  unint64_t v184;
  BOOL v185;
  unsigned int v186;
  int v187;
  BOOL v188;
  int v189;
  unsigned int v190;
  const void *v191;
  uint64_t v192;
  __int128 v193;
  void *v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  uint64_t v197;
  unint64_t v198;
  size_t v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  unint64_t v202;
  unsigned __int8 *v203;
  unint64_t v204;
  __int128 *v205;
  _OWORD *v206;
  unint64_t v207;
  __int128 v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t *v211;
  unsigned __int8 *v212;
  uint64_t v213;
  unsigned __int8 v214;
  unint64_t v215;
  unsigned __int8 *v216;
  __int128 *v217;
  _OWORD *v218;
  unint64_t v219;
  __int128 v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t *v223;
  unsigned __int8 *v224;
  uint64_t v225;
  unsigned __int8 v226;
  int v227;
  __int128 v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  int v232;
  BOOL v233;
  int v234;
  int v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  unsigned int v239;
  unsigned int v240;
  BOOL v241;
  int v242;
  int v243;
  BOOL v244;
  int v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  const void *v249;
  size_t v250;
  const void *v251;
  unsigned __int8 *v252;
  unsigned __int8 *v253;
  void *v254;
  char *v255;
  char *v256;
  char *v257;
  unint64_t v258;
  size_t v259;
  char *v260;
  char *v261;
  unint64_t v262;
  char *v263;
  uint64_t v264;
  __int128 *v265;
  _OWORD *v266;
  unint64_t v267;
  __int128 v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  char *v272;
  uint64_t v273;
  char v274;
  unint64_t v275;
  char *v276;
  __int128 *v277;
  _OWORD *v278;
  unint64_t v279;
  __int128 v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t *v283;
  char *v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  unsigned int v288;
  BOOL v289;
  int v290;
  BOOL v291;
  int v292;
  unsigned int v293;
  const void *v294;
  unsigned __int8 *v295;
  void *v296;
  char *v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  size_t v301;
  char *v302;
  char *v303;
  unint64_t v304;
  char *v305;
  unint64_t v306;
  __int128 *v307;
  _OWORD *v308;
  unint64_t v309;
  __int128 v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t *v313;
  char *v314;
  uint64_t v315;
  char v316;
  unint64_t v317;
  char *v318;
  __int128 *v319;
  _OWORD *v320;
  unint64_t v321;
  __int128 v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t *v325;
  char *v326;
  uint64_t v327;
  char v328;
  _OWORD *v329;
  int v330;
  __int128 v331;
  __int128 v332;
  int64_t v333;
  int64_t v334;
  int64_t v335;
  uint64_t v336;
  unsigned __int8 *v337;
  unsigned int v338;
  unsigned int v339;
  BOOL v340;
  int v341;
  int v342;
  BOOL v343;
  int v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  const void *v348;
  size_t v349;
  const void *v350;
  unsigned __int8 *v351;
  unsigned int v352;
  unsigned int v353;
  BOOL v354;
  int v355;
  int v356;
  BOOL v357;
  int v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  const void *v362;
  size_t v363;
  const void *v364;
  unsigned __int8 *v365;
  __int128 v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  BOOL v371;
  int v372;
  int v373;
  BOOL v374;
  int v375;
  int v376;
  unsigned int v377;
  unsigned int v378;
  const void *v379;
  size_t v380;
  const void *v381;
  unsigned int v382;
  BOOL v383;
  int v384;
  BOOL v385;
  int v386;
  unsigned int v387;
  const void *v388;
  size_t v389;
  void *v390;
  char *v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  size_t v395;
  char *v396;
  char *v397;
  unint64_t v398;
  char *v399;
  unint64_t v400;
  __int128 *v401;
  _OWORD *v402;
  unint64_t v403;
  __int128 v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t *v407;
  char *v408;
  uint64_t v409;
  char v410;
  unint64_t v411;
  char *v412;
  __int128 *v413;
  _OWORD *v414;
  unint64_t v415;
  __int128 v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t *v419;
  char *v420;
  uint64_t v421;
  char v422;
  int v423;
  __int128 v424;
  int64_t v425;
  unsigned __int8 *v426;
  uint64_t v427;
  uint64_t v428;
  unsigned __int8 *v429;
  __int128 v430;
  unsigned __int8 *v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  unsigned int v435;
  BOOL v436;
  int v437;
  int v438;
  BOOL v439;
  int v440;
  int v441;
  unsigned int v442;
  unsigned int v443;
  const void *v444;
  size_t v445;
  const void *v446;
  void *v447;
  char *v448;
  char *v449;
  char *v450;
  unint64_t v451;
  size_t v452;
  char *v453;
  char *v454;
  unint64_t v455;
  char *v456;
  uint64_t v457;
  __int128 *v458;
  _OWORD *v459;
  unint64_t v460;
  __int128 v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  char *v465;
  uint64_t v466;
  char v467;
  uint64_t v468;
  char *v469;
  __int128 *v470;
  _OWORD *v471;
  unint64_t v472;
  __int128 v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t *v476;
  char *v477;
  uint64_t v478;
  char v479;
  int v480;
  _OWORD *v481;
  __int128 v482;
  unsigned __int8 *v483;
  void *v484;
  char *v485;
  char *v486;
  char *v487;
  unint64_t v488;
  size_t v489;
  char *v490;
  char *v491;
  unint64_t v492;
  char *v493;
  unint64_t v494;
  void *v495;
  char *v496;
  char *v497;
  char *v498;
  unint64_t v499;
  size_t v500;
  char *v501;
  char *v502;
  unint64_t v503;
  char *v504;
  uint64_t v505;
  __int128 *v506;
  _OWORD *v507;
  unint64_t v508;
  __int128 v509;
  unint64_t v510;
  unint64_t v511;
  uint64_t *v512;
  char *v513;
  uint64_t v514;
  __int128 *v515;
  _OWORD *v516;
  unint64_t v517;
  __int128 v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t *v521;
  char *v522;
  uint64_t v523;
  char v524;
  unint64_t v525;
  char *v526;
  __int128 *v527;
  _OWORD *v528;
  unint64_t v529;
  __int128 v530;
  unint64_t v531;
  unint64_t v532;
  uint64_t *v533;
  char *v534;
  uint64_t v535;
  char v536;
  int v537;
  unsigned __int8 *v538;
  __int128 v539;
  uint64_t v540;
  unint64_t v541;
  unsigned __int8 *v542;
  unsigned int v543;
  unsigned int v544;
  BOOL v545;
  int v546;
  int v547;
  BOOL v548;
  int v549;
  int v550;
  unsigned int v551;
  unsigned int v552;
  const void *v553;
  size_t v554;
  const void *v555;
  unsigned __int8 *v556;
  void *v557;
  char *v558;
  char *v559;
  char *v560;
  unint64_t v561;
  size_t v562;
  char *v563;
  char *v564;
  unint64_t v565;
  char *v566;
  unint64_t v567;
  __int128 *v568;
  _OWORD *v569;
  unint64_t v570;
  __int128 v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t *v574;
  char *v575;
  uint64_t v576;
  char v577;
  unint64_t v578;
  char *v579;
  __int128 *v580;
  _OWORD *v581;
  unint64_t v582;
  __int128 v583;
  unint64_t v584;
  unint64_t v585;
  uint64_t *v586;
  char *v587;
  uint64_t v588;
  char v589;
  int v590;
  __int128 v591;
  unsigned int v592;
  BOOL v593;
  int v594;
  BOOL v595;
  int v596;
  unsigned int v597;
  const void *v598;
  size_t v599;
  void *v600;
  char *v601;
  char *v602;
  uint64_t v603;
  unint64_t v604;
  size_t v605;
  char *v606;
  char *v607;
  unint64_t v608;
  char *v609;
  unint64_t v610;
  __int128 *v611;
  _OWORD *v612;
  unint64_t v613;
  __int128 v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t *v617;
  char *v618;
  uint64_t v619;
  char v620;
  uint64_t v621;
  char *v622;
  __int128 *v623;
  _OWORD *v624;
  unint64_t v625;
  __int128 v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t *v629;
  char *v630;
  uint64_t v631;
  char v632;
  int v633;
  __int128 v634;
  char v635;
  unint64_t v636;
  char *v637;
  __int128 *v638;
  _OWORD *v639;
  unint64_t v640;
  __int128 v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t *v644;
  char *v645;
  uint64_t v646;
  char v647;
  _OWORD *v648;
  int v649;
  __int128 v650;
  __int128 v651;
  unsigned __int8 *v652;
  unsigned __int8 *v653;
  unsigned int v654;
  unsigned int v655;
  BOOL v656;
  int v657;
  int v658;
  BOOL v659;
  int v660;
  int v661;
  unsigned int v662;
  unsigned int v663;
  const void *v664;
  size_t v665;
  const void *v666;
  unsigned __int8 *v667;
  unsigned __int8 *v668;
  unsigned __int8 *v669;
  void *v670;
  char *v671;
  char *v672;
  char *v673;
  unint64_t v674;
  size_t v675;
  char *v676;
  char *v677;
  unint64_t v678;
  char *v679;
  uint64_t v680;
  __int128 *v681;
  _OWORD *v682;
  unint64_t v683;
  __int128 v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t *v687;
  char *v688;
  uint64_t v689;
  char v690;
  unint64_t v691;
  char *v692;
  __int128 *v693;
  _OWORD *v694;
  unint64_t v695;
  __int128 v696;
  unint64_t v697;
  unint64_t v698;
  uint64_t *v699;
  char *v700;
  uint64_t v701;
  char v702;
  unsigned int v703;
  BOOL v704;
  int v705;
  BOOL v706;
  int v707;
  unsigned int v708;
  const void *v709;
  void *v710;
  char *v711;
  uint64_t v712;
  char *v713;
  unint64_t v714;
  size_t v715;
  char *v716;
  char *v717;
  unint64_t v718;
  char *v719;
  unint64_t v720;
  __int128 *v721;
  _OWORD *v722;
  unint64_t v723;
  __int128 v724;
  unint64_t v725;
  unint64_t v726;
  uint64_t *v727;
  char *v728;
  uint64_t v729;
  char v730;
  unint64_t v731;
  char *v732;
  __int128 *v733;
  _OWORD *v734;
  unint64_t v735;
  __int128 v736;
  unint64_t v737;
  unint64_t v738;
  uint64_t *v739;
  char *v740;
  uint64_t v741;
  char v742;
  _OWORD *v743;
  int v744;
  __int128 v745;
  __int128 v746;
  unsigned __int8 *v747;
  unsigned __int8 *v748;
  unsigned __int8 *v749;
  unsigned __int8 *v750;
  unsigned __int8 *v752;
  unsigned __int8 *v753;
  unsigned __int8 *v755;
  size_t __n;
  size_t __na;
  size_t __nb;
  unint64_t v759;
  unsigned __int8 *v760;
  uint64_t v761;
  unsigned int v762;
  unsigned int v763;
  unsigned int v764;
  unsigned int v765;
  size_t v766;
  size_t v767;
  size_t v768;
  unsigned int v769;
  size_t v770;
  size_t v771;
  unsigned __int8 v772;
  __int16 v773;
  void *v774;
  char *v775;
  void *v776;
  __int128 v777;
  char v778;
  int v779;
  uint64_t v780;
  __int128 v781;
  uint64_t v782;
  uint64_t v783;
  unsigned __int8 v784[8];
  unsigned __int16 v785;
  void *v786;
  uint64_t v787;
  void *v788;
  __int128 v789;
  unsigned __int8 v790;
  int v791;
  uint64_t v792;
  __int128 v793;
  uint64_t v794;
  uint64_t v795;

BOOL gdc::LayerDataRequestKey::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  const void *v7;
  size_t v8;
  const void *v9;

  v2 = *((unsigned __int16 *)a1 + 4);
  v3 = *((unsigned __int16 *)a2 + 4);
  v4 = v2 >= v3;
  if (v2 == v3)
  {
    if (*((_QWORD *)a1 + 10) != *((_QWORD *)a2 + 10))
      return gdc::GenericKey::operator<(*((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3));
    v7 = (const void *)*((_QWORD *)a1 + 2);
    v8 = *((_QWORD *)a1 + 3) - (_QWORD)v7;
    v9 = (const void *)*((_QWORD *)a2 + 2);
    if (v8 != *((_QWORD *)a2 + 3) - (_QWORD)v9 || memcmp(v7, v9, v8))
      return gdc::GenericKey::operator<(*((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 3));
    v4 = *a1 >= *a2;
  }
  return !v4;
}

BOOL gdc::GenericKey::operator<(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2 - a1;
  if (a2 - a1 < (unint64_t)(a4 - a3))
    return 1;
  v5 = 0;
  if (a2 - a1 > (unint64_t)(a4 - a3) || v4 < 4)
    return v5;
  v7 = v4 >> 2;
  if (v7 <= 1)
    v7 = 1;
  v8 = 0;
  if ((a1 & 3) != 0)
  {
    if ((a3 & 3) != 0)
    {
      while (1)
      {
        v9 = *(_DWORD *)(a1 + (v8 & 0x3FC));
        v10 = *(_DWORD *)(a3 + (v8 & 0x3FC));
        if (v9 != v10)
          break;
        LOWORD(v8) = v8 + 4;
        if (!--v7)
          return 0;
      }
    }
    else
    {
      while (1)
      {
        v11 = 4 * v8;
        v9 = *(_DWORD *)(a1 + v11);
        v10 = *(_DWORD *)(a3 + v11);
        if (v9 != v10)
          break;
        v5 = 0;
        if (v7 == ++v8)
          return v5;
      }
    }
  }
  else if ((a3 & 3) != 0)
  {
    while (1)
    {
      v12 = 4 * v8;
      v9 = *(_DWORD *)(a1 + v12);
      v10 = *(_DWORD *)(a3 + v12);
      if (v9 != v10)
        break;
      v5 = 0;
      if (v7 == ++v8)
        return v5;
    }
  }
  else
  {
    while (1)
    {
      v13 = 4 * v8;
      v9 = *(_DWORD *)(a1 + v13);
      v10 = *(_DWORD *)(a3 + v13);
      if (v9 != v10)
        break;
      v5 = 0;
      if (v7 == ++v8)
        return v5;
    }
  }
  return v9 < v10;
}

void md::RegionalResourceSetFetcher::tileSize(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 512;
}

double md::RegionalResourceSetFetcher::resourceTileForTile@<D0>(const QuadTile *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v3;
  double result;

  v3 = *(_WORD *)&a1->_type;
  *(_BYTE *)a2 = 1;
  *(_WORD *)(a2 + 8) = v3;
  result = *(double *)&a1->_yIdx;
  *(double *)(a2 + 12) = result;
  return result;
}

void std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_26:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

void md::MaterialRenderable::~MaterialRenderable(md::MaterialRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  *(_QWORD *)this = &off_1E4294DD0;
  if (*((_BYTE *)this + 368))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v11)
    goto LABEL_21;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v14)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (!v14)
      goto LABEL_27;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_27:
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (!v17)
    goto LABEL_31;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v20)
      goto LABEL_37;
  }
  else
  {
LABEL_31:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
    if (!v20)
      goto LABEL_37;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_37:
  *(_QWORD *)this = &off_1E428F838;
  if (*((_BYTE *)this + 176))
  {
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

{
  md::MaterialRenderable::~MaterialRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciGroundTileData::_buildAssetRequests(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, float32x2_t *a5, double a6, double a7, double a8, int8x16_t a9, double a10, int32x4_t a11, int32x4_t a12, int32x4_t a13)
{
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x2_t *v16;
  int v17;
  unsigned __int16 v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t **v24;
  unint64_t v25;
  int v26;
  char v27;
  uint64_t *v28;
  uint64_t **v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  float32x2_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t *v61;
  unint64_t v62;
  int8x8_t v63;
  uint8x8_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char v74;
  int v75;
  _QWORD *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *i;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  _WORD *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t v98;
  int8x8_t v99;
  uint8x8_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  _QWORD *v111;
  char v112;
  _BYTE *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  size_t v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  __int128 *v129;
  char *v130;
  unint64_t v131;
  __int128 v132;
  uint64_t v133;
  _BYTE *v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  char *v138;
  char v139;
  uint64_t v140;
  uint64_t **v141;
  int v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  __int8 v150;
  __int16 v151;
  uint64_t *v152;
  uint64_t *v153;
  __int16 *v154;
  _QWORD *v155;
  _WORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  float32x4_t v162;
  float32x2_t v163;
  float v164;
  float v165;
  __int16 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int16 v170;
  char v171;
  int v172;
  __int16 v173;
  unint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD v178[2];

  if (a4)
  {
    v16 = a5;
    v17 = 0;
    v18 = 0;
    v150 = a5[8].i8[0];
    v141 = (uint64_t **)(a1 + 1152);
    v145 = a2;
    do
    {
      v19 = v18;
      v157 = a2 + 48 * v18;
      if (*(_BYTE *)(v157 + 45))
      {
        v20 = v158 & 0xFFFFFFFFFFFFFF00;
        v146 = v19;
        v21 = a2 + 48 * v19;
        v22 = *(_QWORD *)(v21 + 16);
        v23 = v22 != 0;
        if (v22)
          v20 = *(_QWORD *)(v21 + 16);
        v158 = v20;
        v144 = v17;
        v24 = v141;
        v25 = *(_QWORD *)(a3 + 8 * (unsigned __int16)v17);
        v26 = *(unsigned __int8 *)(v21 + 44);
        if (*(_BYTE *)(v21 + 44))
          v27 = *(_BYTE *)(v21 + 44);
        else
          v27 = 2;
        while (1)
        {
          v28 = *v24;
          v29 = v24;
          if (!*v24)
            break;
          while (1)
          {
            v24 = (uint64_t **)v28;
            v30 = v28[4];
            if (v25 < v30)
              break;
            if (v30 >= v25)
              goto LABEL_20;
            v28 = v24[1];
            if (!v28)
            {
              v29 = v24 + 1;
              goto LABEL_16;
            }
          }
        }
LABEL_16:
        v31 = operator new(0x30uLL);
        v31[4] = v25;
        *((_BYTE *)v31 + 40) = v27;
        *v31 = 0;
        v31[1] = 0;
        v31[2] = v24;
        *v29 = v31;
        v32 = **(_QWORD **)(a1 + 1144);
        if (v32)
        {
          *(_QWORD *)(a1 + 1144) = v32;
          v33 = *v29;
        }
        else
        {
          v33 = v31;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1152), v33);
        ++*(_QWORD *)(a1 + 1160);
LABEL_20:
        v159 = v159 & 0xFFFFFFFFFFFFFF00 | v23;
        v156 = (_WORD *)(v145 + 48 * v146 + 42);
        v34 = a1;
        if (*v156)
        {
          v35 = 0;
          v36 = v145 + 48 * v146;
          v155 = (_QWORD *)(v36 + 8);
          v154 = (__int16 *)(v36 + 40);
          v152 = (uint64_t *)(v36 + 24);
          v153 = (uint64_t *)(v36 + 32);
          v151 = v26 | ((v26 != 0) << 8);
          while (1)
          {
            v37 = *(_QWORD *)v157 + 48 * v35;
            a12.i64[0] = *(_QWORD *)v37;
            a11.i64[0] = *(_QWORD *)(v37 + 16);
            v38 = (float32x4_t)vzip1q_s32(a11, vdupq_lane_s32(*(int32x2_t *)a11.i8, 1));
            a13.i64[0] = *(_QWORD *)(v37 + 32);
            v39 = *(float *)(v37 + 8);
            a9.i32[0] = *(_DWORD *)(v37 + 12);
            v41 = *(float *)(v37 + 40);
            v40 = *(float *)(v37 + 44);
            v42.f32[0] = v39;
            v42.i32[1] = *(_DWORD *)(v37 + 24);
            v43 = a9;
            v43.i32[1] = *(_DWORD *)(v37 + 28);
            if (v16[8].i8[0])
            {
              v44 = (float32x4_t)vzip1q_s32(a12, vdupq_lane_s32(*(int32x2_t *)a12.i8, 1));
              v45 = (float32x4_t)vzip1q_s32(a13, vdupq_lane_s32(*(int32x2_t *)a13.i8, 1));
              *(float32x2_t *)v13.i8 = *v16;
              v46 = vmul_n_f32(*v16, *(float *)a12.i32);
              *(float32x2_t *)a12.i8 = v16[2];
              v47 = vmla_n_f32(v46, *(float32x2_t *)a12.i8, *(float *)a11.i32);
              *(float32x2_t *)a11.i8 = v16[4];
              v48 = vmla_n_f32(v47, *(float32x2_t *)a11.i8, *(float *)a13.i32);
              v49 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v16, v39), *(float32x2_t *)a12.i8, v42, 1), *(float32x2_t *)a11.i8, v41);
              v50 = vmla_n_f32(vmla_lane_f32(vmla_n_f32(v16[6], *v16, *(float *)a9.i32), *(float32x2_t *)a12.i8, *(float32x2_t *)v43.i8, 1), *(float32x2_t *)a11.i8, v40);
              v43.i32[0] = v16[1].i32[0];
              v14.i32[0] = v16[3].i32[0];
              v15.i32[0] = v16[5].i32[0];
              v51 = (float32x4_t)vextq_s8(vextq_s8(v43, v43, 4uLL), v13, 0xCuLL);
              v51.i32[3] = v51.i32[0];
              v52 = (float32x4_t)vextq_s8(vextq_s8(v14, v14, 4uLL), (int8x16_t)a12, 0xCuLL);
              v52.i32[3] = v52.i32[0];
              v53 = vmlaq_f32(vmulq_f32(v51, v44), v38, v52);
              v54 = (float32x4_t)vextq_s8(vextq_s8(v15, v15, 4uLL), (int8x16_t)a11, 0xCuLL);
              v54.i32[3] = v54.i32[0];
              v164 = (float)((float)(*(float *)v43.i32 * v39) + (float)(*(float *)v14.i32 * *(float *)(v37 + 24)))
                   + (float)(*(float *)v15.i32 * v41);
              v165 = (float)((float)(v16[7].f32[0] + (float)(*(float *)v43.i32 * *(float *)a9.i32))
                           + (float)(*(float *)v14.i32 * *(float *)(v37 + 28)))
                   + (float)(*(float *)v15.i32 * v40);
              v162 = vmlaq_f32(v53, v45, v54);
              v163 = v49;
              *(float32x2_t *)v43.i8 = v50;
            }
            else
            {
              v163 = v42;
              v164 = *(float *)(v37 + 40);
              v165 = *(float *)(v37 + 44);
              v55.i64[0] = __PAIR64__(a12.u32[1], a13.u32[0]);
              v55.i64[1] = __PAIR64__(a13.u32[1], v38.u32[1]);
              v162 = v55;
              v48 = (float32x2_t)vzip1_s32(*(int32x2_t *)a12.i8, *(int32x2_t *)a11.i8);
            }
            v160 = v35;
            v56 = *(unsigned __int8 *)(*v155 + v35);
            v57 = floorf(*(float *)v43.i32 + *(float *)v43.i32);
            if (v57 >= 1.0)
              v58 = 1.0;
            else
              v58 = v57;
            v169 = v43.i64[0];
            v59 = floorf(*(float *)&v43.i32[1] + *(float *)&v43.i32[1]);
            if (v59 >= 1.0)
              v60 = 2.0;
            else
              v60 = v59 + v59;
            v61 = *(uint64_t **)(v34 + 1320);
            v166 = *v154;
            v167 = *v153;
            v168 = *v152;
            v62 = gdc::Registry::create((gdc::Registry *)v61);
            v178[0] = 0xD7CF92E7713C257ALL;
            v63 = (int8x8_t)v61[16];
            v161 = v61 + 15;
            if (v63)
            {
              v64 = (uint8x8_t)vcnt_s8(v63);
              v64.i16[0] = vaddlv_u8(v64);
              if (v64.u32[0] > 1uLL)
              {
                v65 = 0xD7CF92E7713C257ALL;
                if (*(_QWORD *)&v63 <= 0xD7CF92E7713C257ALL)
                  v65 = 0xD7CF92E7713C257ALL % *(_QWORD *)&v63;
              }
              else
              {
                v65 = (*(_QWORD *)&v63 - 1) & 0xD7CF92E7713C257ALL;
              }
              v66 = *(_QWORD **)(v61[15] + 8 * v65);
              if (v66)
              {
                v67 = (_QWORD *)*v66;
                if (v67)
                {
                  if (v64.u32[0] < 2uLL)
                  {
                    v68 = *(_QWORD *)&v63 - 1;
                    while (1)
                    {
                      v70 = v67[1];
                      if (v70 == 0xD7CF92E7713C257ALL)
                      {
                        if (v67[2] == 0xD7CF92E7713C257ALL)
                          goto LABEL_131;
                      }
                      else if ((v70 & v68) != v65)
                      {
                        goto LABEL_52;
                      }
                      v67 = (_QWORD *)*v67;
                      if (!v67)
                        goto LABEL_52;
                    }
                  }
                  do
                  {
                    v69 = v67[1];
                    if (v69 == 0xD7CF92E7713C257ALL)
                    {
                      if (v67[2] == 0xD7CF92E7713C257ALL)
                      {
LABEL_131:
                        v71 = v67[3];
                        goto LABEL_55;
                      }
                    }
                    else
                    {
                      if (v69 >= *(_QWORD *)&v63)
                        v69 %= *(_QWORD *)&v63;
                      if (v69 != v65)
                        break;
                    }
                    v67 = (_QWORD *)*v67;
                  }
                  while (v67);
                }
              }
            }
LABEL_52:
            v71 = operator new();
            *(_QWORD *)(v71 + 16) = "md::components::ReferencedAssetInstance]";
            *(_QWORD *)(v71 + 24) = 39;
            *(_OWORD *)(v71 + 32) = 0u;
            *(_OWORD *)(v71 + 48) = 0u;
            *(_OWORD *)(v71 + 64) = 0u;
            *(_OWORD *)(v71 + 80) = 0u;
            *(_OWORD *)(v71 + 96) = 0u;
            *(_OWORD *)(v71 + 112) = 0u;
            *(_OWORD *)(v71 + 128) = 0u;
            *(_DWORD *)(v71 + 144) = 1065353216;
            *(_OWORD *)(v71 + 152) = 0u;
            *(_OWORD *)(v71 + 168) = 0u;
            *(_QWORD *)(v71 + 184) = 0;
            *(_DWORD *)(v71 + 192) = 1065353216;
            *(_OWORD *)(v71 + 200) = 0u;
            *(_OWORD *)(v71 + 216) = 0u;
            *(_QWORD *)(v71 + 232) = 0;
            *(_DWORD *)(v71 + 240) = 1065353216;
            *(_QWORD *)v71 = &off_1E42B3348;
            *(_QWORD *)(v71 + 8) = 0xD7CF92E7713C257ALL;
            *(_QWORD *)(v71 + 248) = v61;
            v72 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v61 + 15, 0xD7CF92E7713C257ALL, v178);
            v73 = v72[3];
            v72[3] = v71;
            if (v73)
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
            v175 = (unint64_t *)0xD7CF92E7713C257ALL;
            v176 = (uint64_t)"md::components::ReferencedAssetInstance]";
            v177 = 39;
            gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0xD7CF92E7713C257ALL, (uint64_t)&v175, (uint64_t *)(v71 + 104));
LABEL_55:
            v74 = v56 & 1;
            v75 = (v56 >> 1) & 1;
            v174 = v62;
            v76 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v71 + 32), (uint64_t)&v174);
            if ((v77 & 1) != 0)
              break;
            v78 = *(_QWORD *)(v71 + 80) + 96 * (((uint64_t)v76 - *(_QWORD *)(v71 + 56)) >> 3);
            *(_WORD *)v78 = v166;
            *(_WORD *)(v78 + 6) = v173;
            *(_DWORD *)(v78 + 2) = v172;
            *(_QWORD *)(v78 + 8) = v167;
            *(_QWORD *)(v78 + 16) = v168;
            *(float32x2_t *)(v78 + 24) = v48;
            *(float32x4_t *)(v78 + 32) = v162;
            *(float32x2_t *)(v78 + 48) = v163;
            *(float *)(v78 + 56) = v164;
            *(_QWORD *)(v78 + 60) = v169;
            *(float *)(v78 + 68) = v165;
            *(_QWORD *)(v78 + 72) = v158;
            *(_QWORD *)(v78 + 80) = v159;
            *(_WORD *)(v78 + 88) = v151;
            *(_BYTE *)(v78 + 90) = v74;
            *(_BYTE *)(v78 + 91) = v150;
            *(_BYTE *)(v78 + 92) = (v56 & 2) != 0;
            v79 = *(_QWORD *)(v71 + 248);
            v80 = v62;
            if (v78 == *(_QWORD *)(v71 + 88))
              goto LABEL_80;
            for (i = *(_QWORD **)(v71 + 128); i; i = (_QWORD *)*i)
            {
              v175 = &v174;
              v176 = 1;
              v178[0] = v79;
              v82 = i[6];
              if (!v82)
                goto LABEL_153;
              (*(void (**)(uint64_t, _QWORD *, unint64_t **))(*(_QWORD *)v82 + 48))(v82, v178, &v175);
            }
LABEL_83:
            v178[0] = 0x8AD11DEF4A920028;
            v99 = (int8x8_t)v61[16];
            if (v99)
            {
              v100 = (uint8x8_t)vcnt_s8(v99);
              v100.i16[0] = vaddlv_u8(v100);
              if (v100.u32[0] > 1uLL)
              {
                v101 = 0x8AD11DEF4A920028;
                if (*(_QWORD *)&v99 <= 0x8AD11DEF4A920028)
                  v101 = 0x8AD11DEF4A920028 % *(_QWORD *)&v99;
              }
              else
              {
                v101 = (*(_QWORD *)&v99 - 1) & 0x8AD11DEF4A920028;
              }
              v102 = *(_QWORD **)(*v161 + 8 * v101);
              if (v102)
              {
                v103 = (_QWORD *)*v102;
                if (v103)
                {
                  if (v100.u32[0] < 2uLL)
                  {
                    v104 = *(_QWORD *)&v99 - 1;
                    while (1)
                    {
                      v106 = v103[1];
                      if (v106 == 0x8AD11DEF4A920028)
                      {
                        if (v103[2] == 0x8AD11DEF4A920028)
                          goto LABEL_132;
                      }
                      else if ((v106 & v104) != v101)
                      {
                        goto LABEL_103;
                      }
                      v103 = (_QWORD *)*v103;
                      if (!v103)
                        goto LABEL_103;
                    }
                  }
                  do
                  {
                    v105 = v103[1];
                    if (v105 == 0x8AD11DEF4A920028)
                    {
                      if (v103[2] == 0x8AD11DEF4A920028)
                      {
LABEL_132:
                        v107 = v103[3];
                        goto LABEL_106;
                      }
                    }
                    else
                    {
                      if (v105 >= *(_QWORD *)&v99)
                        v105 %= *(_QWORD *)&v99;
                      if (v105 != v101)
                        break;
                    }
                    v103 = (_QWORD *)*v103;
                  }
                  while (v103);
                }
              }
            }
LABEL_103:
            v107 = operator new();
            *(_QWORD *)(v107 + 16) = "md::components::SubtileZone]";
            *(_QWORD *)(v107 + 24) = 27;
            *(_OWORD *)(v107 + 32) = 0u;
            *(_OWORD *)(v107 + 48) = 0u;
            *(_OWORD *)(v107 + 64) = 0u;
            *(_OWORD *)(v107 + 80) = 0u;
            *(_OWORD *)(v107 + 96) = 0u;
            *(_OWORD *)(v107 + 112) = 0u;
            *(_OWORD *)(v107 + 128) = 0u;
            *(_DWORD *)(v107 + 144) = 1065353216;
            *(_OWORD *)(v107 + 152) = 0u;
            *(_OWORD *)(v107 + 168) = 0u;
            *(_QWORD *)(v107 + 184) = 0;
            *(_DWORD *)(v107 + 192) = 1065353216;
            *(_OWORD *)(v107 + 200) = 0u;
            *(_OWORD *)(v107 + 216) = 0u;
            *(_QWORD *)(v107 + 232) = 0;
            *(_DWORD *)(v107 + 240) = 1065353216;
            *(_QWORD *)v107 = &off_1E42B2EF8;
            *(_QWORD *)(v107 + 8) = 0x8AD11DEF4A920028;
            *(_QWORD *)(v107 + 248) = v61;
            v108 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v161, 0x8AD11DEF4A920028, v178);
            v109 = v108[3];
            v108[3] = v107;
            if (v109)
              (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
            v175 = (unint64_t *)0x8AD11DEF4A920028;
            v176 = (uint64_t)"md::components::SubtileZone]";
            v177 = 27;
            gdc::Registry::_registerStorageDataSignals((uint64_t)v61, 0x8AD11DEF4A920028, (uint64_t)&v175, (uint64_t *)(v107 + 104));
LABEL_106:
            v110 = (int)(float)(v60 + v58);
            v174 = v80;
            v111 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v107 + 32), (uint64_t)&v174);
            if ((v112 & 1) == 0)
            {
              v113 = (_BYTE *)(*(_QWORD *)(v107 + 80) + (((uint64_t)v111 - *(_QWORD *)(v107 + 56)) >> 3));
              *v113 = v110;
              v114 = *(_QWORD *)(v107 + 248);
              if (v113 == *(_BYTE **)(v107 + 88))
              {
                v126 = *(_QWORD **)(v107 + 176);
                if (v126)
                  goto LABEL_149;
              }
              else
              {
                v115 = *(_QWORD **)(v107 + 128);
                if (v115)
                {
                  while (1)
                  {
                    v175 = &v174;
                    v176 = 1;
                    v178[0] = v114;
                    v116 = v115[6];
                    if (!v116)
                      break;
                    (*(void (**)(uint64_t, _QWORD *, unint64_t **))(*(_QWORD *)v116 + 48))(v116, v178, &v175);
                    v115 = (_QWORD *)*v115;
                    if (!v115)
                      goto LABEL_22;
                  }
LABEL_153:
                  std::__throw_bad_function_call[abi:nn180100]();
LABEL_154:
                  abort();
                }
              }
              goto LABEL_22;
            }
            v118 = *(_BYTE **)(v107 + 88);
            v117 = *(_QWORD *)(v107 + 96);
            if ((unint64_t)v118 < v117)
            {
              *v118 = v110;
              v119 = (uint64_t)(v118 + 1);
              goto LABEL_148;
            }
            v120 = *(_BYTE **)(v107 + 80);
            v121 = v118 - v120;
            v122 = v118 - v120 + 1;
            if (v122 < 0)
              goto LABEL_154;
            v123 = v117 - (_QWORD)v120;
            if (2 * v123 > v122)
              v122 = 2 * v123;
            if (v123 >= 0x3FFFFFFFFFFFFFFFLL)
              v124 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v124 = v122;
            if (v124)
              v125 = (char *)operator new(v124);
            else
              v125 = 0;
            v127 = &v125[v121];
            v125[v121] = v110;
            v119 = (uint64_t)&v125[v121 + 1];
            if (v118 != v120)
            {
              if (v121 >= 8 && (unint64_t)(v120 - v125) >= 0x20)
              {
                if (v121 < 0x20)
                {
                  v128 = 0;
LABEL_137:
                  v133 = v128 - (v121 & 0xFFFFFFFFFFFFFFF8);
                  v134 = &v118[-v128];
                  v135 = &v125[&v118[-v128] - v120 - 8];
                  v136 = (uint64_t *)(v134 - 8);
                  do
                  {
                    v137 = *v136--;
                    *(_QWORD *)v135 = v137;
                    v135 -= 8;
                    v133 += 8;
                  }
                  while (v133);
                  if (v121 != (v121 & 0xFFFFFFFFFFFFFFF8))
                  {
                    v127 -= v121 & 0xFFFFFFFFFFFFFFF8;
                    v118 -= v121 & 0xFFFFFFFFFFFFFFF8;
                    goto LABEL_142;
                  }
LABEL_144:
                  v118 = *(_BYTE **)(v107 + 80);
                  v127 = v125;
                  goto LABEL_145;
                }
                v128 = v121 & 0xFFFFFFFFFFFFFFE0;
                v129 = (__int128 *)(v118 - 16);
                v130 = &v125[v121 - 16];
                v131 = v121 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v132 = *v129;
                  *((_OWORD *)v130 - 1) = *(v129 - 1);
                  *(_OWORD *)v130 = v132;
                  v129 -= 2;
                  v130 -= 32;
                  v131 -= 32;
                }
                while (v131);
                if (v121 == v128)
                  goto LABEL_144;
                if ((v121 & 0x18) != 0)
                  goto LABEL_137;
                v127 -= v128;
                v118 -= v128;
              }
LABEL_142:
              v138 = v127 - 1;
              do
              {
                v139 = *--v118;
                *v138-- = v139;
              }
              while (v118 != v120);
              goto LABEL_144;
            }
LABEL_145:
            *(_QWORD *)(v107 + 80) = v127;
            *(_QWORD *)(v107 + 88) = v119;
            *(_QWORD *)(v107 + 96) = &v125[v124];
            v16 = a5;
            if (v118)
              operator delete(v118);
            v34 = a1;
LABEL_148:
            *(_QWORD *)(v107 + 88) = v119;
            v114 = *(_QWORD *)(v107 + 248);
            v126 = *(_QWORD **)(v107 + 176);
            if (v126)
            {
LABEL_149:
              do
              {
                v175 = &v174;
                v176 = 1;
                v178[0] = v114;
                v140 = v126[6];
                if (!v140)
                  goto LABEL_153;
                (*(void (**)(uint64_t, _QWORD *, unint64_t **))(*(_QWORD *)v140 + 48))(v140, v178, &v175);
                v126 = (_QWORD *)*v126;
              }
              while (v126);
            }
LABEL_22:
            v35 = v160 + 1;
            if (v160 + 1 >= (unint64_t)(unsigned __int16)*v156)
              goto LABEL_3;
          }
          v84 = *(char **)(v71 + 88);
          v83 = *(_QWORD *)(v71 + 96);
          if ((unint64_t)v84 >= v83)
          {
            v86 = *(char **)(v71 + 80);
            v87 = 0xAAAAAAAAAAAAAAABLL * ((v84 - v86) >> 5) + 1;
            if (v87 > 0x2AAAAAAAAAAAAAALL)
              goto LABEL_154;
            v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (_QWORD)v86) >> 5);
            if (2 * v88 > v87)
              v87 = 2 * v88;
            if (v88 >= 0x155555555555555)
              v89 = 0x2AAAAAAAAAAAAAALL;
            else
              v89 = v87;
            v147 = v89;
            if (v89)
            {
              if (v89 > 0x2AAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v90 = (char *)operator new(96 * v89);
            }
            else
            {
              v90 = 0;
            }
            v91 = &v90[32 * ((v84 - v86) >> 5)];
            *(_WORD *)v91 = v166;
            *(_DWORD *)(v91 + 2) = v172;
            *((_WORD *)v91 + 3) = v173;
            *((_QWORD *)v91 + 1) = v167;
            *((_QWORD *)v91 + 2) = v168;
            *((float32x2_t *)v91 + 3) = v48;
            *((float32x4_t *)v91 + 2) = v162;
            *((float32x2_t *)v91 + 6) = v163;
            *((float *)v91 + 14) = v164;
            *(_QWORD *)(v91 + 60) = v169;
            *((float *)v91 + 17) = v165;
            *((_QWORD *)v91 + 9) = v158;
            *((_QWORD *)v91 + 10) = v159;
            *((_WORD *)v91 + 44) = v151;
            v91[90] = v74;
            v91[91] = v150;
            v91[92] = v75;
            v91[95] = v171;
            *(_WORD *)(v91 + 93) = v170;
            v92 = v91;
            if (v84 != v86)
            {
              do
              {
                v93 = *((_OWORD *)v84 - 5);
                *((_OWORD *)v92 - 6) = *((_OWORD *)v84 - 6);
                *((_OWORD *)v92 - 5) = v93;
                v94 = *((_OWORD *)v84 - 4);
                v95 = *((_OWORD *)v84 - 3);
                v96 = *((_OWORD *)v84 - 1);
                *((_OWORD *)v92 - 2) = *((_OWORD *)v84 - 2);
                *((_OWORD *)v92 - 1) = v96;
                *((_OWORD *)v92 - 4) = v94;
                *((_OWORD *)v92 - 3) = v95;
                v92 -= 96;
                v84 -= 96;
              }
              while (v84 != v86);
              v84 = *(char **)(v71 + 80);
            }
            v16 = a5;
            v85 = v91 + 96;
            *(_QWORD *)(v71 + 80) = v92;
            *(_QWORD *)(v71 + 88) = v91 + 96;
            *(_QWORD *)(v71 + 96) = &v90[96 * v147];
            if (v84)
              operator delete(v84);
            v34 = a1;
          }
          else
          {
            *(_WORD *)v84 = v166;
            *(_DWORD *)(v84 + 2) = v172;
            *((_WORD *)v84 + 3) = v173;
            *((_QWORD *)v84 + 1) = v167;
            *((_QWORD *)v84 + 2) = v168;
            *((float32x2_t *)v84 + 3) = v48;
            *((float32x4_t *)v84 + 2) = v162;
            *((float32x2_t *)v84 + 6) = v163;
            *((float *)v84 + 14) = v164;
            *(_QWORD *)(v84 + 60) = v169;
            *((float *)v84 + 17) = v165;
            *((_QWORD *)v84 + 9) = v158;
            *((_QWORD *)v84 + 10) = v159;
            *((_WORD *)v84 + 44) = v151;
            v84[90] = v74;
            v84[91] = v150;
            v84[92] = v75;
            v84[95] = v171;
            v85 = v84 + 96;
            *(_WORD *)(v84 + 93) = v170;
          }
          v80 = v62;
          *(_QWORD *)(v71 + 88) = v85;
          v79 = *(_QWORD *)(v71 + 248);
LABEL_80:
          v97 = *(_QWORD **)(v71 + 176);
          if (v97)
          {
            while (1)
            {
              v175 = &v174;
              v176 = 1;
              v178[0] = v79;
              v98 = v97[6];
              if (!v98)
                goto LABEL_153;
              (*(void (**)(uint64_t, _QWORD *, unint64_t **))(*(_QWORD *)v98 + 48))(v98, v178, &v175);
              v97 = (_QWORD *)*v97;
              if (!v97)
                goto LABEL_83;
            }
          }
          goto LABEL_83;
        }
LABEL_3:
        a2 = v145;
        v17 = v144 + 1;
        LOWORD(v19) = v146;
      }
      v18 = v19 + 1;
    }
    while (a4 > (unsigned __int16)(v19 + 1));
  }
}

void sub_19F081B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t gdc::Registry::create(gdc::Registry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v60;
  gdc::Registry *v61;
  _QWORD v62[2];

  v60 = 0xFFFFFFFF00000000;
  v2 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 9) != v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    *((_QWORD *)this + 10) = v2 - 4;
    v4 = 8 * v3;
    v5 = *((_QWORD *)this + 6) + 8 * v3;
    v6 = *(unsigned __int16 *)(v5 + 2);
    if (v6 == 65534)
      v7 = 0;
    else
      v7 = v6 + 1;
    *(_QWORD *)v5 = (v3 << 32) | ((unint64_t)v7 << 16) | *((unsigned __int16 *)this + 20);
    v8 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v3);
    v60 = v8;
    v9 = (_QWORD *)operator new();
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    v10 = *((_QWORD *)this + 12);
    v11 = *(_QWORD *)(v10 + v4);
    *(_QWORD *)(v10 + v4) = v9;
    if (v11)
    {
      v12 = *(void **)v11;
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)(v11 + 8) = v12;
        operator delete(v12);
      }
      MEMORY[0x1A1AF4E00](v11, 0x20C40960023A9);
    }
    v13 = (_QWORD *)*((_QWORD *)this + 29);
    if (!v13)
      return v8;
LABEL_64:
    while (1)
    {
      v62[0] = &v60;
      v62[1] = 1;
      v61 = this;
      v58 = v13[6];
      if (!v58)
        break;
      (*(void (**)(uint64_t, gdc::Registry **, _QWORD *))(*(_QWORD *)v58 + 48))(v58, &v61, v62);
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v60;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_69:
    abort();
  }
  v14 = (char *)*((_QWORD *)this + 6);
  v15 = (char *)*((_QWORD *)this + 7);
  v16 = v15 - v14;
  v17 = *((_QWORD *)this + 8);
  if ((unint64_t)v15 >= v17)
  {
    v19 = v16 >> 3;
    v20 = (v16 >> 3) + 1;
    if (v20 >> 61)
      goto LABEL_69;
    v21 = v17 - (_QWORD)v14;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        goto LABEL_70;
      v23 = operator new(8 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[8 * v19];
    *(_WORD *)v24 = *((_WORD *)this + 20);
    v25 = &v23[8 * v22];
    *((_WORD *)v24 + 1) = 0;
    *((_DWORD *)v24 + 1) = (unint64_t)v16 >> 3;
    v18 = v24 + 8;
    if (v15 == v14)
    {
      v14 = v15;
    }
    else
    {
      v26 = v15 - v14 - 8;
      if (v26 < 0x58)
        goto LABEL_73;
      if ((unint64_t)(v15 - &v23[v16 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_73;
      v27 = (v26 >> 3) + 1;
      v28 = &v23[8 * v19 - 16];
      v29 = v15 - 16;
      v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 4;
      }
      while (v30);
      v24 -= 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v15 -= 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_73:
        do
        {
          v32 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v24 - 1) = v32;
          v24 -= 8;
        }
        while (v15 != v14);
        v14 = (char *)*((_QWORD *)this + 6);
      }
    }
    *((_QWORD *)this + 6) = v24;
    *((_QWORD *)this + 7) = v18;
    *((_QWORD *)this + 8) = v25;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_DWORD *)v15 = *((unsigned __int16 *)this + 20);
    *((_DWORD *)v15 + 1) = (unint64_t)v16 >> 3;
    v18 = v15 + 8;
  }
  *((_QWORD *)this + 7) = v18;
  v8 = *((_QWORD *)v18 - 1);
  v60 = v8;
  v33 = (_QWORD *)operator new();
  v34 = v33;
  v33[1] = 0;
  v33[2] = 0;
  *v33 = 0;
  v36 = (char *)*((_QWORD *)this + 13);
  v35 = *((_QWORD *)this + 14);
  if ((unint64_t)v36 < v35)
  {
    *(_QWORD *)v36 = v33;
    v37 = v36 + 8;
    goto LABEL_63;
  }
  v38 = (char *)*((_QWORD *)this + 12);
  v39 = (v36 - v38) >> 3;
  v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 61)
    goto LABEL_69;
  v41 = v35 - (_QWORD)v38;
  if (v41 >> 2 > v40)
    v40 = v41 >> 2;
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
    v42 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v42 = v40;
  if (!v42)
  {
    v43 = 0;
    goto LABEL_46;
  }
  if (v42 >> 61)
LABEL_70:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v43 = (char *)operator new(8 * v42);
LABEL_46:
  v44 = &v43[8 * v39];
  v45 = &v43[8 * v42];
  *(_QWORD *)v44 = v34;
  v37 = v44 + 8;
  if (v36 == v38)
  {
    *((_QWORD *)this + 12) = v44;
    *((_QWORD *)this + 13) = v37;
    *((_QWORD *)this + 14) = v45;
  }
  else
  {
    v46 = v36 - v38 - 8;
    if (v46 <= 0x77
      || &v36[-(v46 & 0xFFFFFFFFFFFFFFF8) - 8] < v44 && &v43[v36 - v38 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8] < v36)
    {
      goto LABEL_74;
    }
    v47 = (v46 >> 3) + 1;
    v48 = &v43[8 * v39 - 16];
    v49 = v36 - 32;
    v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *(_OWORD *)v49;
      v51 = *((_OWORD *)v49 + 1);
      *(_OWORD *)v49 = 0uLL;
      *((_OWORD *)v49 + 1) = 0uLL;
      v49 -= 32;
      *((_OWORD *)v48 - 1) = v52;
      *(_OWORD *)v48 = v51;
      v48 -= 32;
      v50 -= 4;
    }
    while (v50);
    v44 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v36 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_74:
      do
      {
        v53 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v44 - 1) = v53;
        v44 -= 8;
      }
      while (v36 != v38);
    }
    v36 = (char *)*((_QWORD *)this + 12);
    v54 = (char *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 12) = v44;
    *((_QWORD *)this + 13) = v37;
    *((_QWORD *)this + 14) = v45;
    while (v54 != v36)
    {
      v56 = *((_QWORD *)v54 - 1);
      v54 -= 8;
      v55 = v56;
      *(_QWORD *)v54 = 0;
      if (v56)
      {
        v57 = *(void **)v55;
        if (*(_QWORD *)v55)
        {
          *(_QWORD *)(v55 + 8) = v57;
          operator delete(v57);
        }
        MEMORY[0x1A1AF4E00](v55, 0x20C40960023A9);
      }
    }
  }
  if (v36)
    operator delete(v36);
LABEL_63:
  *((_QWORD *)this + 13) = v37;
  v13 = (_QWORD *)*((_QWORD *)this + 29);
  if (v13)
    goto LABEL_64;
  return v8;
}

void buildMaterialKey(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _BYTE *v27;
  _BYTE *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v51;
  _BYTE *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  BOOL v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  int8x8_t v95;
  uint8x8_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  BOOL v104;
  _QWORD *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  int8x8_t v173;
  uint8x8_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  BOOL v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  BOOL v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  int *v225;
  uint64_t v226;
  char *v227;
  _QWORD *v228;
  char *v229;
  char *v230;
  BOOL v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  uint64_t v235;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  char v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  unint64_t *v251;
  unint64_t v252;
  _BYTE *v253;
  unint64_t v254;
  uint64_t *v255;
  char *v256;
  char v257;
  char v258;
  uint64_t v259;
  int v260;
  char v261;
  __int16 v262;
  __int16 v263;
  BOOL v264;
  uint64_t v265;
  char v266;
  char v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  std::__shared_weak_count *v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  BOOL v284;
  _QWORD *v285;
  _QWORD *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  uint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  unint64_t v293;
  BOOL v294;
  _QWORD *v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  char v311;
  char *v312;
  char v313;
  uint64_t v314;
  __int16 v315;
  __int16 v316;
  char v317;
  char v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  char v322;
  char *v323;
  char v324;
  uint64_t v325;
  __int16 v326;
  __int16 v327;
  char v328;
  char v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  char v333;
  char *v334;
  char v335;
  uint64_t v336;
  __int16 v337;
  __int16 v338;
  char v339;
  char v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  __int128 v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  __int128 v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  _OWORD *v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  __int128 v391;
  __int128 v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  unint64_t *v402;
  unint64_t v403;
  unint64_t *p_shared_owners;
  unint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t *v408;
  unint64_t v409;
  _QWORD *v410;
  _QWORD *v411;
  unint64_t *v412;
  unint64_t v413;
  unint64_t *v414;
  unint64_t v415;
  __int128 v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  __int128 v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  __int128 v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  __int128 v437;
  __int128 v438;
  unint64_t v439;
  uint64_t v440;
  int *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  char *v446;
  _QWORD *v447;
  uint64_t v448;
  char *v449;
  unint64_t v450;
  char *v451;
  char v452;
  char *v453;
  BOOL v454;
  BOOL v455;
  unsigned __int8 *v456;
  BOOL v457;
  char v458;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  _BYTE v469[14];
  __int128 v470;
  uint64_t v471;
  __int128 v472;
  __int16 v473;
  char v474;
  __int128 v475;
  unsigned __int8 v476;
  uint64_t v477;
  __int128 v478;
  char v479;
  __int128 v480;
  __int128 v481;
  unsigned __int8 v482;
  __int16 v483;
  BOOL v484;
  char v485;
  __int128 v486;
  char v487;
  __int128 v488;
  __int128 v489;
  char v490;
  __int128 v491;
  char v492;
  __int128 v493;
  __int128 v494;
  char v495;
  __int128 v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  _QWORD v501[2];
  _QWORD v502[5];

  v502[2] = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)gdc::Registry::storage<md::components::Decal>(a1);
  v9 = a2 >> 39;
  v10 = v8[4];
  if (a2 >> 39 < (v8[5] - v10) >> 3
    && (v11 = *(_QWORD *)(v10 + 8 * v9)) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F)), v14 = v8[7], v13 = v8[8], v12 < (v13 - v14) >> 3)
    && ((v15 = v14 + 8 * v12, v15 != v13) ? (v16 = *(_DWORD *)(v15 + 4) == HIDWORD(a2)) : (v16 = 0), v16))
  {
    v17 = v8[11];
    v18 = v8[10] + 4 * v12;
  }
  else
  {
    v17 = v8[11];
    v18 = v17;
  }
  v19 = (_QWORD *)gdc::Registry::storage<md::components::Visibility>(a1);
  v20 = v19[4];
  if (v9 < (v19[5] - v20) >> 3
    && (v21 = *(_QWORD *)(v20 + 8 * v9)) != 0
    && (v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(a2) & 0x7F)), v24 = v19[7], v23 = v19[8], v22 < (v23 - v24) >> 3)
    && ((v25 = v24 + 8 * v22, v25 != v23) ? (v26 = *(_DWORD *)(v25 + 4) == HIDWORD(a2)) : (v26 = 0), v26))
  {
    v27 = (_BYTE *)v19[11];
    v28 = (_BYTE *)(v19[10] + v22);
  }
  else
  {
    v27 = (_BYTE *)v19[11];
    v28 = v27;
  }
  v29 = (_QWORD *)gdc::Registry::storage<md::components::Collapsible>(a1);
  v30 = v29[4];
  if (v9 < (v29[5] - v30) >> 3
    && (v31 = *(_QWORD *)(v30 + 8 * v9)) != 0
    && (v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(a2) & 0x7F)), v34 = v29[7], v33 = v29[8], v32 < (v33 - v34) >> 3)
    && ((v35 = v34 + 8 * v32, v35 != v33) ? (v36 = *(_DWORD *)(v35 + 4) == HIDWORD(a2)) : (v36 = 0), v36))
  {
    v37 = v29[11];
    v38 = v29[10] + v32;
  }
  else
  {
    v37 = v29[11];
    v38 = v37;
  }
  v39 = (_QWORD *)gdc::Registry::storage<md::components::IntersectionWithTileEdges>(a1);
  v40 = v39[4];
  if (v9 < (v39[5] - v40) >> 3
    && (v41 = *(_QWORD *)(v40 + 8 * v9)) != 0
    && (v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(a2) & 0x7F)), v44 = v39[7], v43 = v39[8], v42 < (v43 - v44) >> 3)
    && ((v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == HIDWORD(a2)) : (v46 = 0), v46))
  {
    v47 = v39[11];
    v48 = v39[10] + 16 * v42;
  }
  else
  {
    v47 = v39[11];
    v48 = v47;
  }
  if (v48 == v47)
    v48 = 0;
  v456 = (unsigned __int8 *)v48;
  v49 = 1;
  if (v28 != v27 && v28)
    v49 = *v28 != 0;
  v457 = v49;
  v51 = v38 != v37 && v38 != 0;
  v455 = v51;
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 232) = 0;
  if (a4[1])
  {
    if (v18 != v17 && v18)
    {
      v52 = *(_BYTE **)a3;
      if (*(_BYTE *)(*(_QWORD *)a3 + 60) && v52[32] == 3)
        a2 = 0;
      v53 = *a4;
      v54 = a3[32];
      v55 = *(_QWORD *)v52;
      v56 = *(uint64_t **)(*(_QWORD *)v52 + 64);
      v57 = *(_QWORD **)(*(_QWORD *)v52 + 120);
      if (!v57)
        goto LABEL_55;
      v58 = *(_QWORD **)(*(_QWORD *)v52 + 120);
      do
      {
        v59 = v58;
        v58 = (_QWORD *)*v58;
      }
      while (v58);
      if (v59 == (_QWORD *)(*(_QWORD *)v52 + 120) || v59[4])
      {
LABEL_55:
        v60 = 0;
        v61 = 0;
        v491 = 0uLL;
      }
      else
      {
        v410 = *(_QWORD **)(*(_QWORD *)v52 + 120);
        while (v410[4])
        {
          v410 = (_QWORD *)*v410;
          if (!v410)
            abort();
        }
        v61 = v410[5];
        v60 = v410[6];
        *(_QWORD *)&v491 = v61;
        *((_QWORD *)&v491 + 1) = v60;
        if (v60)
        {
          v412 = (unint64_t *)(v60 + 8);
          do
            v413 = __ldxr(v412);
          while (__stxr(v413 + 1, v412));
          v55 = *(_QWORD *)v52;
          v57 = *(_QWORD **)(*(_QWORD *)v52 + 120);
        }
      }
      if (!v57)
        goto LABEL_97;
      v62 = (_QWORD *)(v55 + 120);
      v63 = v57;
      do
      {
        v64 = v63[4];
        v65 = v64 == 0;
        if (v64)
          v66 = v63;
        else
          v66 = v63 + 1;
        if (!v65)
          v62 = v63;
        v63 = (_QWORD *)*v66;
      }
      while (*v66);
      if (v62 == (_QWORD *)(v55 + 120) || v62[4] > 1uLL)
      {
LABEL_97:
        v98 = 0;
        v99 = 0;
        v486 = 0uLL;
      }
      else
      {
        v67 = v57;
        while (1)
        {
          while (1)
          {
            v68 = v67[4];
            if (v68 < 2)
              break;
            v67 = (_QWORD *)*v67;
            if (!v67)
              goto LABEL_71;
          }
          if (v68)
            break;
          v67 = (_QWORD *)v67[1];
          if (!v67)
LABEL_71:
            abort();
        }
        v99 = v67[5];
        v98 = v67[6];
        *(_QWORD *)&v486 = v99;
        *((_QWORD *)&v486 + 1) = v98;
        if (v98)
        {
          v402 = (unint64_t *)(v98 + 8);
          do
            v403 = __ldxr(v402);
          while (__stxr(v403 + 1, v402));
          v55 = *(_QWORD *)v52;
          v57 = *(_QWORD **)(*(_QWORD *)v52 + 120);
        }
      }
      if (!v57)
        goto LABEL_109;
      v100 = (_QWORD *)(v55 + 120);
      v101 = (_QWORD *)(v55 + 120);
      v102 = v57;
      do
      {
        v103 = v102[4];
        v104 = v103 >= 2;
        if (v103 >= 2)
          v105 = v102;
        else
          v105 = v102 + 1;
        if (v104)
          v101 = v102;
        v102 = (_QWORD *)*v105;
      }
      while (*v105);
      if (v101 != v100 && v101[4] <= 2uLL)
      {
        while (1)
        {
          while (1)
          {
            v133 = v57[4];
            if (v133 < 3)
              break;
            v57 = (_QWORD *)*v57;
            if (!v57)
              goto LABEL_154;
          }
          if (v133 == 2)
            break;
          v57 = (_QWORD *)v57[1];
          if (!v57)
LABEL_154:
            abort();
        }
        v106 = v57[5];
        v107 = (std::__shared_weak_count *)v57[6];
        if (v107)
        {
          p_shared_owners = (unint64_t *)&v107->__shared_owners_;
          do
            v405 = __ldxr(p_shared_owners);
          while (__stxr(v405 + 1, p_shared_owners));
        }
      }
      else
      {
LABEL_109:
        v106 = 0;
        v107 = 0;
      }
      v108 = v52[32];
      v110 = *v56;
      v109 = v56[1];
      *(_QWORD *)&v465 = v110;
      *((_QWORD *)&v465 + 1) = v109;
      if (v109)
      {
        v111 = (unint64_t *)(v109 + 8);
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      *(_QWORD *)&v466 = v61;
      *((_QWORD *)&v466 + 1) = v60;
      if (v60)
      {
        v113 = (unint64_t *)(v60 + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      *(_QWORD *)&v467 = v99;
      *((_QWORD *)&v467 + 1) = v98;
      if (v98)
      {
        v115 = (unint64_t *)(v98 + 8);
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      *(_QWORD *)&v468 = v106;
      *((_QWORD *)&v468 + 1) = v107;
      if (v107)
      {
        v117 = (unint64_t *)&v107->__shared_owners_;
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
      }
      *(_QWORD *)v469 = a2;
      v469[8] = v457;
      v469[9] = v108;
      v469[10] = v54;
      *(_WORD *)&v469[11] = 0;
      v469[13] = 0;
      if (v107)
      {
        v119 = (unint64_t *)&v107->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      if (*((_QWORD *)&v486 + 1))
      {
        v121 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v486 + 1) + 16))(*((_QWORD *)&v486 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v486 + 1));
        }
      }
      if (*((_QWORD *)&v491 + 1))
      {
        v123 = (unint64_t *)(*((_QWORD *)&v491 + 1) + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v491 + 1) + 16))(*((_QWORD *)&v491 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v491 + 1));
        }
      }
      v125 = a4[2];
      *(_QWORD *)&v470 = a4[1];
      *((_QWORD *)&v470 + 1) = v125;
      if (v125)
      {
        v126 = (unint64_t *)(v125 + 8);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
      }
      v471 = v53;
      LOBYTE(v472) = 1;
      if (*(_BYTE *)(a5 + 232))
      {
        v128 = *(unsigned int *)(a5 + 224);
        if ((_DWORD)v128 != -1)
        {
          if ((_DWORD)v128 == 2)
          {
            md::BaseRenderBatchKey<ggl::VertexData>::operator=(a5, &v465);
            v129 = v470;
            v470 = 0uLL;
            v130 = *(std::__shared_weak_count **)(a5 + 88);
            *(_OWORD *)(a5 + 80) = v129;
            if (v130)
            {
              v131 = (unint64_t *)&v130->__shared_owners_;
              do
                v132 = __ldaxr(v131);
              while (__stlxr(v132 - 1, v131));
              if (!v132)
              {
                ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                std::__shared_weak_count::__release_weak(v130);
              }
            }
            *(_QWORD *)(a5 + 96) = v471;
            if (!(_BYTE)v472)
              return;
LABEL_482:
            md::MaterialDecalRenderBatchKey::~MaterialDecalRenderBatchKey((md::MaterialDecalRenderBatchKey *)&v465);
            return;
          }
          (*(&off_1E42F43B8 + v128))((int)&v491, (md::MaterialRenderBatchKey *)a5);
        }
        v381 = v465;
        v382 = v466;
        v465 = 0uLL;
        *(_OWORD *)a5 = v381;
        *(_OWORD *)(a5 + 16) = v382;
        v466 = 0uLL;
        v383 = v467;
        v384 = v468;
        v467 = 0uLL;
        *(_OWORD *)(a5 + 32) = v383;
        *(_OWORD *)(a5 + 48) = v384;
        v468 = 0uLL;
        v385 = *(_QWORD *)v469;
        *(_QWORD *)(a5 + 70) = *(_QWORD *)&v469[6];
        *(_QWORD *)(a5 + 64) = v385;
        *(_OWORD *)(a5 + 80) = v470;
        v470 = 0uLL;
        *(_QWORD *)(a5 + 96) = v53;
        *(_DWORD *)(a5 + 224) = 2;
        goto LABEL_482;
      }
      v134 = v465;
      v135 = v466;
      v465 = 0uLL;
      *(_OWORD *)a5 = v134;
      *(_OWORD *)(a5 + 16) = v135;
      v466 = 0uLL;
      v136 = v467;
      v137 = v468;
      v467 = 0uLL;
      *(_OWORD *)(a5 + 32) = v136;
      *(_OWORD *)(a5 + 48) = v137;
      v468 = 0uLL;
      v138 = *(_QWORD *)v469;
      *(_QWORD *)(a5 + 70) = *(_QWORD *)&v469[6];
      *(_QWORD *)(a5 + 64) = v138;
      *(_OWORD *)(a5 + 80) = v470;
      v470 = 0uLL;
      *(_QWORD *)(a5 + 96) = v53;
      *(_DWORD *)(a5 + 224) = 2;
      *(_BYTE *)(a5 + 232) = 1;
      goto LABEL_482;
    }
    v69 = (_QWORD *)gdc::Registry::storage<md::components::IntendedSceneLayer>(a1);
    v70 = v69[4];
    if (v9 < (v69[5] - v70) >> 3
      && (v71 = *(_QWORD *)(v70 + 8 * v9)) != 0
      && (v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(a2) & 0x7F)), v74 = v69[7],
                                                                       v73 = v69[8],
                                                                       v72 < (v73 - v74) >> 3)
      && ((v75 = v74 + 8 * v72, v75 != v73) ? (v76 = *(_DWORD *)(v75 + 4) == HIDWORD(a2)) : (v76 = 0), v76))
    {
      v451 = (char *)v69[11];
      v77 = (char *)(v69[10] + v72);
    }
    else
    {
      v77 = (char *)v69[11];
      v451 = v77;
    }
    v453 = v77;
    v78 = (_QWORD *)gdc::Registry::storage<md::components::MarketMask>(a1);
    v79 = v78[4];
    if (v9 < (v78[5] - v79) >> 3
      && (v80 = *(_QWORD *)(v79 + 8 * v9)) != 0
      && (v81 = *(unsigned __int16 *)(v80 + 2 * (HIDWORD(a2) & 0x7F)), v83 = v78[7],
                                                                       v82 = v78[8],
                                                                       v81 < (v82 - v83) >> 3)
      && (v84 = v83 + 8 * v81, v84 != v82)
      && *(_DWORD *)(v84 + 4) == HIDWORD(a2))
    {
      v450 = v78[11];
      v85 = v78[10] + v81;
    }
    else
    {
      v85 = v78[11];
      v450 = v85;
    }
    v449 = (char *)v85;
    v86 = (_QWORD *)gdc::Registry::storage<md::components::GeneratedTexture>(a1);
    v87 = v86[4];
    if (v9 < (v86[5] - v87) >> 3
      && (v88 = *(_QWORD *)(v87 + 8 * v9)) != 0
      && (v89 = *(unsigned __int16 *)(v88 + 2 * (HIDWORD(a2) & 0x7F)), v91 = v86[7],
                                                                       v90 = v86[8],
                                                                       v89 < (v90 - v91) >> 3)
      && (v92 = v91 + 8 * v89, v92 != v90)
      && *(_DWORD *)(v92 + 4) == HIDWORD(a2))
    {
      v448 = v86[11];
      v93 = v86[10] + 16 * v89;
    }
    else
    {
      v93 = v86[11];
      v448 = v93;
    }
    v447 = (_QWORD *)v93;
    *(_QWORD *)&v491 = 0xBF279C46863538CCLL;
    v94 = (_QWORD *)(a1 + 120);
    v95 = *(int8x8_t *)(a1 + 128);
    if (v95)
    {
      v96 = (uint8x8_t)vcnt_s8(v95);
      v96.i16[0] = vaddlv_u8(v96);
      if (v96.u32[0] > 1uLL)
      {
        v97 = 0xBF279C46863538CCLL;
        if (*(_QWORD *)&v95 <= 0xBF279C46863538CCLL)
          v97 = 0xBF279C46863538CCLL % *(_QWORD *)&v95;
      }
      else
      {
        v97 = (*(_QWORD *)&v95 - 1) & 0xBF279C46863538CCLL;
      }
      v139 = *(_QWORD **)(*v94 + 8 * v97);
      if (v139)
      {
        v140 = (_QWORD *)*v139;
        if (v140)
        {
          if (v96.u32[0] < 2uLL)
          {
            v141 = *(_QWORD *)&v95 - 1;
            while (1)
            {
              v143 = v140[1];
              if (v143 == 0xBF279C46863538CCLL)
              {
                if (v140[2] == 0xBF279C46863538CCLL)
                  goto LABEL_549;
              }
              else if ((v143 & v141) != v97)
              {
                goto LABEL_173;
              }
              v140 = (_QWORD *)*v140;
              if (!v140)
                goto LABEL_173;
            }
          }
          do
          {
            v142 = v140[1];
            if (v142 == 0xBF279C46863538CCLL)
            {
              if (v140[2] == 0xBF279C46863538CCLL)
              {
LABEL_549:
                v144 = v140[3];
                goto LABEL_176;
              }
            }
            else
            {
              if (v142 >= *(_QWORD *)&v95)
                v142 %= *(_QWORD *)&v95;
              if (v142 != v97)
                break;
            }
            v140 = (_QWORD *)*v140;
          }
          while (v140);
        }
      }
    }
LABEL_173:
    v144 = operator new();
    *(_QWORD *)(v144 + 16) = "md::components::MaterialRaster]";
    *(_QWORD *)(v144 + 24) = 30;
    *(_OWORD *)(v144 + 32) = 0u;
    *(_OWORD *)(v144 + 48) = 0u;
    *(_OWORD *)(v144 + 64) = 0u;
    *(_OWORD *)(v144 + 80) = 0u;
    *(_OWORD *)(v144 + 96) = 0u;
    *(_OWORD *)(v144 + 112) = 0u;
    *(_OWORD *)(v144 + 128) = 0u;
    *(_DWORD *)(v144 + 144) = 1065353216;
    *(_OWORD *)(v144 + 152) = 0u;
    *(_OWORD *)(v144 + 168) = 0u;
    *(_QWORD *)(v144 + 184) = 0;
    *(_DWORD *)(v144 + 192) = 1065353216;
    *(_OWORD *)(v144 + 200) = 0u;
    *(_OWORD *)(v144 + 216) = 0u;
    *(_QWORD *)(v144 + 232) = 0;
    *(_DWORD *)(v144 + 240) = 1065353216;
    *(_QWORD *)v144 = &off_1E42B2FE8;
    *(_QWORD *)(v144 + 8) = 0xBF279C46863538CCLL;
    *(_QWORD *)(v144 + 248) = a1;
    v145 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(a1 + 120), 0xBF279C46863538CCLL, &v491);
    v146 = v145[3];
    v145[3] = v144;
    if (v146)
      (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
    *(_QWORD *)&v465 = 0xBF279C46863538CCLL;
    *((_QWORD *)&v465 + 1) = "md::components::MaterialRaster]";
    *(_QWORD *)&v466 = 30;
    gdc::Registry::_registerStorageDataSignals(a1, 0xBF279C46863538CCLL, (uint64_t)&v465, (uint64_t *)(v144 + 104));
LABEL_176:
    v147 = *(_QWORD *)(v144 + 32);
    if (v9 < (*(_QWORD *)(v144 + 40) - v147) >> 3
      && (v148 = *(_QWORD *)(v147 + 8 * v9)) != 0
      && (v149 = *(unsigned __int16 *)(v148 + 2 * (HIDWORD(a2) & 0x7F)),
          v151 = *(_QWORD *)(v144 + 56),
          v150 = *(_QWORD *)(v144 + 64),
          v149 < (v150 - v151) >> 3)
      && ((v152 = v151 + 8 * v149, v152 != v150) ? (v153 = *(_DWORD *)(v152 + 4) == HIDWORD(a2)) : (v153 = 0), v153))
    {
      v446 = *(char **)(v144 + 88);
      v154 = *(_QWORD *)(v144 + 80) + v149;
    }
    else
    {
      v154 = *(_QWORD *)(v144 + 88);
      v446 = (char *)v154;
    }
    v445 = (char *)v154;
    v155 = (_QWORD *)gdc::Registry::storage<md::components::AlbedoTint>(a1);
    v156 = v155[4];
    if (v9 < (v155[5] - v156) >> 3
      && (v157 = *(_QWORD *)(v156 + 8 * v9)) != 0
      && (v158 = *(unsigned __int16 *)(v157 + 2 * (HIDWORD(a2) & 0x7F)),
          v160 = v155[7],
          v159 = v155[8],
          v158 < (v159 - v160) >> 3)
      && ((v161 = v160 + 8 * v158, v161 != v159) ? (v162 = *(_DWORD *)(v161 + 4) == HIDWORD(a2)) : (v162 = 0), v162))
    {
      v444 = v155[11];
      v163 = v155[10] + 16 * v158;
    }
    else
    {
      v163 = v155[11];
      v444 = v163;
    }
    v443 = v163;
    v164 = (_QWORD *)gdc::Registry::storage<md::components::PositionScaleFactor>(a1);
    v165 = v164[4];
    if (v9 < (v164[5] - v165) >> 3
      && (v166 = *(_QWORD *)(v165 + 8 * v9)) != 0
      && (v167 = *(unsigned __int16 *)(v166 + 2 * (HIDWORD(a2) & 0x7F)),
          v169 = v164[7],
          v168 = v164[8],
          v167 < (v168 - v169) >> 3)
      && ((v170 = v169 + 8 * v167, v170 != v168) ? (v171 = *(_DWORD *)(v170 + 4) == HIDWORD(a2)) : (v171 = 0), v171))
    {
      v442 = v164[11];
      v172 = v164[10] + 4 * v167;
    }
    else
    {
      v172 = v164[11];
      v442 = v172;
    }
    v441 = (int *)v172;
    *(_QWORD *)&v491 = 0x24CEDFE393EA39F1;
    v173 = *(int8x8_t *)(a1 + 128);
    if (v173)
    {
      v174 = (uint8x8_t)vcnt_s8(v173);
      v174.i16[0] = vaddlv_u8(v174);
      if (v174.u32[0] > 1uLL)
      {
        v175 = 0x24CEDFE393EA39F1;
        if (*(_QWORD *)&v173 <= 0x24CEDFE393EA39F1uLL)
          v175 = 0x24CEDFE393EA39F1uLL % *(_QWORD *)&v173;
      }
      else
      {
        v175 = (*(_QWORD *)&v173 - 1) & 0x24CEDFE393EA39F1;
      }
      v176 = *(_QWORD **)(*v94 + 8 * v175);
      if (v176)
      {
        v177 = (_QWORD *)*v176;
        if (v177)
        {
          if (v174.u32[0] < 2uLL)
          {
            v178 = *(_QWORD *)&v173 - 1;
            while (1)
            {
              v180 = v177[1];
              if (v180 == 0x24CEDFE393EA39F1)
              {
                if (v177[2] == 0x24CEDFE393EA39F1)
                  goto LABEL_550;
              }
              else if ((v180 & v178) != v175)
              {
                goto LABEL_220;
              }
              v177 = (_QWORD *)*v177;
              if (!v177)
                goto LABEL_220;
            }
          }
          do
          {
            v179 = v177[1];
            if (v179 == 0x24CEDFE393EA39F1)
            {
              if (v177[2] == 0x24CEDFE393EA39F1)
              {
LABEL_550:
                v181 = v177[3];
                goto LABEL_223;
              }
            }
            else
            {
              if (v179 >= *(_QWORD *)&v173)
                v179 %= *(_QWORD *)&v173;
              if (v179 != v175)
                break;
            }
            v177 = (_QWORD *)*v177;
          }
          while (v177);
        }
      }
    }
LABEL_220:
    v181 = operator new();
    *(_QWORD *)(v181 + 16) = "md::components::HideWhenCollapsed]";
    *(_QWORD *)(v181 + 24) = 33;
    *(_OWORD *)(v181 + 32) = 0u;
    *(_OWORD *)(v181 + 48) = 0u;
    *(_OWORD *)(v181 + 64) = 0u;
    *(_OWORD *)(v181 + 80) = 0u;
    *(_OWORD *)(v181 + 96) = 0u;
    *(_OWORD *)(v181 + 112) = 0u;
    *(_OWORD *)(v181 + 128) = 0u;
    *(_DWORD *)(v181 + 144) = 1065353216;
    *(_OWORD *)(v181 + 152) = 0u;
    *(_OWORD *)(v181 + 168) = 0u;
    *(_QWORD *)(v181 + 184) = 0;
    *(_DWORD *)(v181 + 192) = 1065353216;
    *(_OWORD *)(v181 + 200) = 0u;
    *(_OWORD *)(v181 + 216) = 0u;
    *(_QWORD *)(v181 + 232) = 0;
    *(_DWORD *)(v181 + 240) = 1065353216;
    *(_QWORD *)v181 = &off_1E42B3108;
    *(_QWORD *)(v181 + 8) = 0x24CEDFE393EA39F1;
    *(_QWORD *)(v181 + 248) = a1;
    v182 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(a1 + 120), 0x24CEDFE393EA39F1uLL, &v491);
    v183 = v182[3];
    v182[3] = v181;
    if (v183)
      (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
    *(_QWORD *)&v465 = 0x24CEDFE393EA39F1;
    *((_QWORD *)&v465 + 1) = "md::components::HideWhenCollapsed]";
    *(_QWORD *)&v466 = 33;
    gdc::Registry::_registerStorageDataSignals(a1, 0x24CEDFE393EA39F1, (uint64_t)&v465, (uint64_t *)(v181 + 104));
LABEL_223:
    v184 = *(_QWORD *)(v181 + 32);
    if (v9 < (*(_QWORD *)(v181 + 40) - v184) >> 3
      && (v185 = *(_QWORD *)(v184 + 8 * v9)) != 0
      && (v186 = *(unsigned __int16 *)(v185 + 2 * (HIDWORD(a2) & 0x7F)),
          v188 = *(_QWORD *)(v181 + 56),
          v187 = *(_QWORD *)(v181 + 64),
          v186 < (v187 - v188) >> 3)
      && ((v189 = v188 + 8 * v186, v189 != v187) ? (v190 = *(_DWORD *)(v189 + 4) == HIDWORD(a2)) : (v190 = 0), v190))
    {
      v191 = *(_QWORD *)(v181 + 88);
      v192 = *(_QWORD *)(v181 + 80) + v186;
    }
    else
    {
      v191 = *(_QWORD *)(v181 + 88);
      v192 = v191;
    }
    v193 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::DrapedRasterOverlay>(a1);
    v194 = v193[4];
    if (v9 < (v193[5] - v194) >> 3
      && (v195 = *(_QWORD *)(v194 + 8 * v9)) != 0
      && (v196 = *(unsigned __int16 *)(v195 + 2 * (HIDWORD(a2) & 0x7F)),
          v198 = v193[7],
          v197 = v193[8],
          v196 < (v197 - v198) >> 3)
      && ((v199 = v198 + 8 * v196, v199 != v197) ? (v200 = *(_DWORD *)(v199 + 4) == HIDWORD(a2)) : (v200 = 0), v200))
    {
      v201 = v193[11];
      v202 = v193[10] + 48 * v196;
    }
    else
    {
      v201 = v193[11];
      v202 = v201;
    }
    v203 = (_QWORD *)gdc::Registry::storage<md::components::CustomRenderState>(a1);
    v204 = v203[4];
    if (v9 < (v203[5] - v204) >> 3
      && (v205 = *(_QWORD *)(v204 + 8 * v9)) != 0
      && (v206 = *(unsigned __int16 *)(v205 + 2 * (HIDWORD(a2) & 0x7F)),
          v208 = v203[7],
          v207 = v203[8],
          v206 < (v207 - v208) >> 3)
      && ((v209 = v208 + 8 * v206, v209 != v207) ? (v210 = *(_DWORD *)(v209 + 4) == HIDWORD(a2)) : (v210 = 0), v210))
    {
      v211 = v203[11];
      v212 = v203[10] + 24 * v206;
    }
    else
    {
      v211 = v203[11];
      v212 = v211;
    }
    v213 = (_QWORD *)gdc::Registry::storage<md::components::SubtileZone>(a1);
    v214 = v213[4];
    v439 = a2;
    if (v9 < (v213[5] - v214) >> 3
      && (v215 = *(_QWORD *)(v214 + 8 * v9)) != 0
      && (v216 = *(unsigned __int16 *)(v215 + 2 * (HIDWORD(a2) & 0x7F)),
          v218 = v213[7],
          v217 = v213[8],
          v216 < (v217 - v218) >> 3)
      && ((v219 = v218 + 8 * v216, v219 != v217) ? (v220 = *(_DWORD *)(v219 + 4) == HIDWORD(a2)) : (v220 = 0), v220))
    {
      v221 = (char *)v213[11];
      v222 = (char *)(v213[10] + v216);
    }
    else
    {
      v221 = (char *)v213[11];
      v222 = v221;
    }
    v458 = 0;
    if (v212 == v211)
      v223 = 0;
    else
      v223 = v212;
    v440 = v223;
    if (v202 == v201)
      v224 = 0;
    else
      v224 = v202;
    if (v441 == (int *)v442)
      v225 = 0;
    else
      v225 = v441;
    if (v443 == v444)
      v226 = 0;
    else
      v226 = v443;
    if (v445 == v446)
      v227 = 0;
    else
      v227 = v445;
    if (v447 == (_QWORD *)v448)
      v228 = 0;
    else
      v228 = v447;
    if (v449 == (char *)v450)
      v229 = 0;
    else
      v229 = v449;
    if (v222 == v221)
      v230 = 0;
    else
      v230 = v222;
    if (v453 != v451 && v453)
      v458 = *v453;
    v232 = v192 != v191 && v192 != 0;
    v454 = v232;
    if (v230)
      v452 = *v230;
    else
      v452 = 0;
    LOBYTE(v486) = 0;
    v490 = 0;
    if (!v224)
      goto LABEL_305;
    v233 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v233->__shared_owners_ = 0;
    v234 = (unint64_t *)&v233->__shared_owners_;
    v233->__shared_weak_owners_ = 0;
    v233->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E28D0;
    v235 = ggl::BufferData::BufferData((uint64_t)&v233[1], qword_1EE567A08, 2, 1, 6, 1);
    v233[9].__shared_owners_ = (uint64_t)ggl::DaVinci::RasterOverlay::reflection(void)::reflection;
    v233[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9B90;
    shared_owners = v233[1].__shared_owners_;
    v237 = v233[4].__vftable;
    LODWORD(v237->~__shared_weak_count_0) = *(_DWORD *)(v224 + 16);
    HIDWORD(v237->~__shared_weak_count_0) = *(_DWORD *)(v224 + 20);
    LODWORD(v237->~__shared_weak_count) = *(_DWORD *)(v224 + 24);
    if (v233[3].__shared_weak_owners_ > shared_owners)
      shared_owners = v233[3].__shared_weak_owners_;
    v233[3].__shared_owners_ = 0;
    v233[3].__shared_weak_owners_ = shared_owners;
    v239 = *(_QWORD *)v224;
    v238 = *(_QWORD *)(v224 + 8);
    if (v238)
    {
      v240 = (unint64_t *)(v238 + 8);
      do
        v241 = __ldxr(v240);
      while (__stxr(v241 + 1, v240));
    }
    v242 = *(_BYTE *)(v224 + 28);
    do
      v243 = __ldxr(v234);
    while (__stxr(v243 + 1, v234));
    v245 = *(_QWORD *)(v224 + 32);
    v244 = *(_QWORD *)(v224 + 40);
    if (v244)
    {
      v246 = (unint64_t *)(v244 + 8);
      do
        v247 = __ldxr(v246);
      while (__stxr(v247 + 1, v246));
    }
    *(_QWORD *)&v486 = v239;
    *((_QWORD *)&v486 + 1) = v238;
    v487 = v242;
    *(_QWORD *)&v488 = v235;
    *((_QWORD *)&v488 + 1) = v233;
    *(_QWORD *)&v489 = v245;
    *((_QWORD *)&v489 + 1) = v244;
    v490 = 1;
    do
      v248 = __ldaxr(v234);
    while (__stlxr(v248 - 1, v234));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
      if (v228)
      {
LABEL_306:
        v249 = v228[1];
        *(_QWORD *)&v464 = *v228;
        *((_QWORD *)&v464 + 1) = v249;
        v250 = (char *)v226;
        if (v249)
        {
          v251 = (unint64_t *)(v249 + 8);
          do
            v252 = __ldxr(v251);
          while (__stxr(v252 + 1, v251));
        }
LABEL_316:
        v253 = *(_BYTE **)a3;
        v254 = v439;
        *(_QWORD *)&v491 = v439;
        if (v456)
        {
          if (v253[60])
          {
            v255 = (uint64_t *)&v491;
            if (v253[32] == 3)
              v255 = (uint64_t *)(v456 + 8);
            v254 = *v255;
          }
        }
        else if (v253[60] && v253[32] == 3)
        {
          v254 = 0;
        }
        if (v229)
          v256 = v229;
        else
          v256 = (char *)&md::kMarketMaskDefault;
        if (v227)
        {
          v257 = *v227;
          if (v250)
            goto LABEL_329;
        }
        else
        {
          v257 = 0;
          if (v250)
          {
LABEL_329:
            v258 = *v250;
            v501[0] = *(_QWORD *)(v250 + 1);
            *(_QWORD *)((char *)v501 + 7) = *((_QWORD *)v250 + 1);
            v259 = v440;
            if (v225)
              goto LABEL_330;
            goto LABEL_335;
          }
        }
        v258 = 0;
        v259 = v440;
        if (v225)
        {
LABEL_330:
          v260 = *v225;
          v261 = 1;
          if (v456)
            goto LABEL_331;
          goto LABEL_336;
        }
LABEL_335:
        v261 = 0;
        v260 = 0;
        if (v456)
        {
LABEL_331:
          v262 = *v456;
          v263 = 1;
          if (v259)
          {
LABEL_332:
            v264 = *(_BYTE *)(v259 + 16) != 0;
            goto LABEL_338;
          }
LABEL_337:
          v264 = 0;
LABEL_338:
          v265 = *a4;
          v496 = v464;
          if (v250)
          {
            v502[0] = v501[0];
            *(_QWORD *)((char *)v502 + 7) = *(_QWORD *)((char *)v501 + 7);
          }
          else
          {
            v258 = 0;
          }
          v266 = a3[32];
          v267 = *v256;
          LOBYTE(v491) = 0;
          v495 = 0;
          if (v490)
          {
            v491 = v486;
            if (*((_QWORD *)&v486 + 1))
            {
              v268 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
              do
                v269 = __ldxr(v268);
              while (__stxr(v269 + 1, v268));
            }
            v492 = v487;
            v493 = v488;
            if (*((_QWORD *)&v488 + 1))
            {
              v270 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
              do
                v271 = __ldxr(v270);
              while (__stxr(v271 + 1, v270));
            }
            v494 = v489;
            if (*((_QWORD *)&v489 + 1))
            {
              v272 = (unint64_t *)(*((_QWORD *)&v489 + 1) + 8);
              do
                v273 = __ldxr(v272);
              while (__stxr(v273 + 1, v272));
            }
            v495 = 1;
          }
          v274 = *(_QWORD *)v253;
          v275 = *(uint64_t **)(*(_QWORD *)v253 + 64);
          v276 = *(_QWORD **)(*(_QWORD *)v253 + 120);
          if (!v276)
            goto LABEL_357;
          v277 = *(_QWORD **)(*(_QWORD *)v253 + 120);
          do
          {
            v278 = v277;
            v277 = (_QWORD *)*v277;
          }
          while (v277);
          if (v278 == (_QWORD *)(*(_QWORD *)v253 + 120) || v278[4])
          {
LABEL_357:
            v279 = 0;
            v280 = 0;
            v499 = 0;
            v500 = 0;
          }
          else
          {
            v411 = *(_QWORD **)(*(_QWORD *)v253 + 120);
            while (v411[4])
            {
              v411 = (_QWORD *)*v411;
              if (!v411)
                abort();
            }
            v280 = v411[5];
            v279 = (std::__shared_weak_count *)v411[6];
            v499 = v280;
            v500 = v279;
            if (v279)
            {
              v414 = (unint64_t *)&v279->__shared_owners_;
              do
                v415 = __ldxr(v414);
              while (__stxr(v415 + 1, v414));
              v274 = *(_QWORD *)v253;
              v276 = *(_QWORD **)(*(_QWORD *)v253 + 120);
            }
          }
          if (!v276)
            goto LABEL_374;
          v281 = (_QWORD *)(v274 + 120);
          v282 = v276;
          do
          {
            v283 = v282[4];
            v284 = v283 == 0;
            if (v283)
              v285 = v282;
            else
              v285 = v282 + 1;
            if (!v284)
              v281 = v282;
            v282 = (_QWORD *)*v285;
          }
          while (*v285);
          if (v281 == (_QWORD *)(v274 + 120) || v281[4] > 1uLL)
          {
LABEL_374:
            v288 = 0;
            v289 = 0;
            v497 = 0;
            v498 = 0;
          }
          else
          {
            v286 = v276;
            while (1)
            {
              while (1)
              {
                v287 = v286[4];
                if (v287 < 2)
                  break;
                v286 = (_QWORD *)*v286;
                if (!v286)
                  goto LABEL_373;
              }
              if (v287)
                break;
              v286 = (_QWORD *)v286[1];
              if (!v286)
LABEL_373:
                abort();
            }
            v289 = v286[5];
            v288 = (std::__shared_weak_count *)v286[6];
            v497 = v289;
            v498 = v288;
            if (v288)
            {
              v406 = (unint64_t *)&v288->__shared_owners_;
              do
                v407 = __ldxr(v406);
              while (__stxr(v407 + 1, v406));
              v274 = *(_QWORD *)v253;
              v276 = *(_QWORD **)(*(_QWORD *)v253 + 120);
            }
          }
          if (!v276)
            goto LABEL_386;
          v290 = (_QWORD *)(v274 + 120);
          v291 = (_QWORD *)(v274 + 120);
          v292 = v276;
          do
          {
            v293 = v292[4];
            v294 = v293 >= 2;
            if (v293 >= 2)
              v295 = v292;
            else
              v295 = v292 + 1;
            if (v294)
              v291 = v292;
            v292 = (_QWORD *)*v295;
          }
          while (*v295);
          if (v291 != v290 && v291[4] <= 2uLL)
          {
            while (1)
            {
              while (1)
              {
                v354 = v276[4];
                if (v354 < 3)
                  break;
                v276 = (_QWORD *)*v276;
                if (!v276)
                  goto LABEL_440;
              }
              if (v354 == 2)
                break;
              v276 = (_QWORD *)v276[1];
              if (!v276)
LABEL_440:
                abort();
            }
            v296 = v276[5];
            v297 = (std::__shared_weak_count *)v276[6];
            if (v297)
            {
              v408 = (unint64_t *)&v297->__shared_owners_;
              do
                v409 = __ldxr(v408);
              while (__stxr(v409 + 1, v408));
            }
          }
          else
          {
LABEL_386:
            v296 = 0;
            v297 = 0;
          }
          v298 = v253[32];
          v300 = *v275;
          v299 = v275[1];
          *(_QWORD *)&v465 = v300;
          *((_QWORD *)&v465 + 1) = v299;
          if (v299)
          {
            v301 = (unint64_t *)(v299 + 8);
            do
              v302 = __ldxr(v301);
            while (__stxr(v302 + 1, v301));
          }
          *(_QWORD *)&v466 = v280;
          *((_QWORD *)&v466 + 1) = v279;
          if (v279)
          {
            v303 = (unint64_t *)&v279->__shared_owners_;
            do
              v304 = __ldxr(v303);
            while (__stxr(v304 + 1, v303));
          }
          *(_QWORD *)&v467 = v289;
          *((_QWORD *)&v467 + 1) = v288;
          if (v288)
          {
            v305 = (unint64_t *)&v288->__shared_owners_;
            do
              v306 = __ldxr(v305);
            while (__stxr(v306 + 1, v305));
          }
          *(_QWORD *)&v468 = v296;
          *((_QWORD *)&v468 + 1) = v297;
          if (v297)
          {
            v307 = (unint64_t *)&v297->__shared_owners_;
            do
              v308 = __ldxr(v307);
            while (__stxr(v308 + 1, v307));
          }
          *(_QWORD *)v469 = v254;
          v469[8] = v457;
          v469[9] = v298;
          v469[10] = v266;
          v469[11] = v455;
          v469[12] = v454;
          v469[13] = v452;
          if (v297)
          {
            v309 = (unint64_t *)&v297->__shared_owners_;
            do
              v310 = __ldaxr(v309);
            while (__stlxr(v310 - 1, v309));
            if (!v310)
            {
              v311 = v257;
              v460 = a5;
              v312 = v250;
              v313 = v267;
              v314 = v265;
              v315 = v263;
              v316 = v262;
              v317 = v258;
              v318 = v261;
              ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
              std::__shared_weak_count::__release_weak(v297);
              v261 = v318;
              v258 = v317;
              v262 = v316;
              v263 = v315;
              v265 = v314;
              v267 = v313;
              v250 = v312;
              a5 = v460;
              v257 = v311;
            }
          }
          v319 = v498;
          if (v498)
          {
            v320 = (unint64_t *)&v498->__shared_owners_;
            do
              v321 = __ldaxr(v320);
            while (__stlxr(v321 - 1, v320));
            if (!v321)
            {
              v322 = v257;
              v461 = a5;
              v323 = v250;
              v324 = v267;
              v325 = v265;
              v326 = v263;
              v327 = v262;
              v328 = v258;
              v329 = v261;
              ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
              std::__shared_weak_count::__release_weak(v319);
              v261 = v329;
              v258 = v328;
              v262 = v327;
              v263 = v326;
              v265 = v325;
              v267 = v324;
              v250 = v323;
              a5 = v461;
              v257 = v322;
            }
          }
          v330 = v500;
          if (v500)
          {
            v331 = (unint64_t *)&v500->__shared_owners_;
            do
              v332 = __ldaxr(v331);
            while (__stlxr(v332 - 1, v331));
            if (!v332)
            {
              v333 = v257;
              v462 = a5;
              v334 = v250;
              v335 = v267;
              v336 = v265;
              v337 = v263;
              v338 = v262;
              v339 = v258;
              v340 = v261;
              ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
              std::__shared_weak_count::__release_weak(v330);
              v261 = v340;
              v258 = v339;
              v262 = v338;
              v263 = v337;
              v265 = v336;
              v267 = v335;
              v250 = v334;
              a5 = v462;
              v257 = v333;
            }
          }
          v341 = a4[2];
          *(_QWORD *)&v470 = a4[1];
          *((_QWORD *)&v470 + 1) = v341;
          if (v341)
          {
            v342 = (unint64_t *)(v341 + 8);
            do
              v343 = __ldxr(v342);
            while (__stxr(v343 + 1, v342));
          }
          v471 = v265;
          v472 = v496;
          if (*((_QWORD *)&v496 + 1))
          {
            v344 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v345 = __ldxr(v344);
            while (__stxr(v345 + 1, v344));
          }
          LOBYTE(v473) = v458;
          HIBYTE(v473) = v267;
          v474 = v257;
          LOBYTE(v475) = 0;
          v476 = 0;
          if (v250)
          {
            LOBYTE(v475) = v258;
            *(_QWORD *)((char *)&v475 + 1) = v502[0];
            *((_QWORD *)&v475 + 1) = *(_QWORD *)((char *)v502 + 7);
            v476 = 1;
          }
          LODWORD(v477) = v260;
          BYTE4(v477) = v261;
          LOBYTE(v478) = 0;
          v482 = 0;
          if (v495)
          {
            v478 = v491;
            if (*((_QWORD *)&v491 + 1))
            {
              v346 = (unint64_t *)(*((_QWORD *)&v491 + 1) + 8);
              do
                v347 = __ldxr(v346);
              while (__stxr(v347 + 1, v346));
            }
            v479 = v492;
            v480 = v493;
            if (*((_QWORD *)&v493 + 1))
            {
              v348 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
              do
                v349 = __ldxr(v348);
              while (__stxr(v349 + 1, v348));
            }
            v350 = (std::__shared_weak_count *)*((_QWORD *)&v494 + 1);
            v481 = v494;
            if (*((_QWORD *)&v494 + 1))
            {
              v351 = (unint64_t *)(*((_QWORD *)&v494 + 1) + 8);
              do
                v352 = __ldxr(v351);
              while (__stxr(v352 + 1, v351));
              v482 = 1;
              v483 = v262 | (v263 << 8);
              v484 = v264;
              do
                v353 = __ldaxr(v351);
              while (__stlxr(v353 - 1, v351));
              if (!v353)
              {
                ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                std::__shared_weak_count::__release_weak(v350);
              }
            }
            else
            {
              v482 = 1;
              v483 = v262 | (v263 << 8);
              v484 = v264;
            }
            v355 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
            if (*((_QWORD *)&v493 + 1))
            {
              v356 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
              do
                v357 = __ldaxr(v356);
              while (__stlxr(v357 - 1, v356));
              if (!v357)
              {
                ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                std::__shared_weak_count::__release_weak(v355);
              }
            }
            v358 = (std::__shared_weak_count *)*((_QWORD *)&v491 + 1);
            if (*((_QWORD *)&v491 + 1))
            {
              v359 = (unint64_t *)(*((_QWORD *)&v491 + 1) + 8);
              do
                v360 = __ldaxr(v359);
              while (__stlxr(v360 - 1, v359));
              if (!v360)
              {
                ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                std::__shared_weak_count::__release_weak(v358);
              }
            }
          }
          else
          {
            v483 = v262 | (v263 << 8);
            v484 = v264;
          }
          v361 = (std::__shared_weak_count *)*((_QWORD *)&v496 + 1);
          if (*((_QWORD *)&v496 + 1))
          {
            v362 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
            do
              v363 = __ldaxr(v362);
            while (__stlxr(v363 - 1, v362));
            if (!v363)
            {
              ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
              std::__shared_weak_count::__release_weak(v361);
            }
          }
          v485 = 1;
          if (*(_BYTE *)(a5 + 232))
          {
            v364 = *(unsigned int *)(a5 + 224);
            if ((_DWORD)v364 != -1)
            {
              if (!(_DWORD)v364)
              {
                md::BaseRenderBatchKey<ggl::VertexData>::operator=(a5, &v465);
                v365 = v470;
                v470 = 0uLL;
                v366 = *(std::__shared_weak_count **)(a5 + 88);
                *(_OWORD *)(a5 + 80) = v365;
                if (v366)
                {
                  v367 = (unint64_t *)&v366->__shared_owners_;
                  do
                    v368 = __ldaxr(v367);
                  while (__stlxr(v368 - 1, v367));
                  if (!v368)
                  {
                    ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                    std::__shared_weak_count::__release_weak(v366);
                  }
                }
                *(_QWORD *)(a5 + 96) = v471;
                v369 = v472;
                v472 = 0uLL;
                v370 = *(std::__shared_weak_count **)(a5 + 112);
                *(_OWORD *)(a5 + 104) = v369;
                if (v370)
                {
                  v371 = (unint64_t *)&v370->__shared_owners_;
                  do
                    v372 = __ldaxr(v371);
                  while (__stlxr(v372 - 1, v371));
                  if (!v372)
                  {
                    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                    std::__shared_weak_count::__release_weak(v370);
                  }
                }
                *(_WORD *)(a5 + 120) = v473;
                *(_BYTE *)(a5 + 122) = v474;
                v373 = (_OWORD *)(a5 + 124);
                if (*(unsigned __int8 *)(a5 + 140) == v476)
                {
                  if (*(_BYTE *)(a5 + 140))
                    *v373 = v475;
                }
                else if (*(_BYTE *)(a5 + 140))
                {
                  *(_BYTE *)(a5 + 140) = 0;
                }
                else
                {
                  *v373 = v475;
                  *(_BYTE *)(a5 + 140) = 1;
                }
                *(_DWORD *)(a5 + 144) = v477;
                *(_BYTE *)(a5 + 148) = BYTE4(v477);
                if (*(unsigned __int8 *)(a5 + 208) == v482)
                {
                  if (*(_BYTE *)(a5 + 208))
                  {
                    v416 = v478;
                    v478 = 0uLL;
                    v417 = *(std::__shared_weak_count **)(a5 + 160);
                    *(_OWORD *)(a5 + 152) = v416;
                    if (v417)
                    {
                      v418 = (unint64_t *)&v417->__shared_owners_;
                      do
                        v419 = __ldaxr(v418);
                      while (__stlxr(v419 - 1, v418));
                      if (!v419)
                      {
                        ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                        std::__shared_weak_count::__release_weak(v417);
                      }
                    }
                    *(_BYTE *)(a5 + 168) = v479;
                    v420 = v480;
                    v480 = 0uLL;
                    v421 = *(std::__shared_weak_count **)(a5 + 184);
                    *(_OWORD *)(a5 + 176) = v420;
                    if (v421)
                    {
                      v422 = (unint64_t *)&v421->__shared_owners_;
                      do
                        v423 = __ldaxr(v422);
                      while (__stlxr(v423 - 1, v422));
                      if (!v423)
                      {
                        ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                        std::__shared_weak_count::__release_weak(v421);
                      }
                    }
                    v424 = v481;
                    v481 = 0uLL;
                    v425 = *(std::__shared_weak_count **)(a5 + 200);
                    *(_OWORD *)(a5 + 192) = v424;
                    if (v425)
                    {
                      v426 = (unint64_t *)&v425->__shared_owners_;
                      do
                        v427 = __ldaxr(v426);
                      while (__stlxr(v427 - 1, v426));
                      if (!v427)
                      {
                        ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
                        std::__shared_weak_count::__release_weak(v425);
                      }
                    }
                  }
                }
                else if (*(_BYTE *)(a5 + 208))
                {
                  v428 = *(std::__shared_weak_count **)(a5 + 200);
                  if (v428)
                  {
                    v429 = (unint64_t *)&v428->__shared_owners_;
                    do
                      v430 = __ldaxr(v429);
                    while (__stlxr(v430 - 1, v429));
                    if (!v430)
                    {
                      ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
                      std::__shared_weak_count::__release_weak(v428);
                    }
                  }
                  v431 = *(std::__shared_weak_count **)(a5 + 184);
                  if (v431)
                  {
                    v432 = (unint64_t *)&v431->__shared_owners_;
                    do
                      v433 = __ldaxr(v432);
                    while (__stlxr(v433 - 1, v432));
                    if (!v433)
                    {
                      ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
                      std::__shared_weak_count::__release_weak(v431);
                    }
                  }
                  v434 = *(std::__shared_weak_count **)(a5 + 160);
                  if (v434)
                  {
                    v435 = (unint64_t *)&v434->__shared_owners_;
                    do
                      v436 = __ldaxr(v435);
                    while (__stlxr(v436 - 1, v435));
                    if (!v436)
                    {
                      ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
                      std::__shared_weak_count::__release_weak(v434);
                    }
                  }
                  *(_BYTE *)(a5 + 208) = 0;
                }
                else
                {
                  *(_OWORD *)(a5 + 152) = v478;
                  v478 = 0uLL;
                  *(_BYTE *)(a5 + 168) = v479;
                  v437 = v480;
                  v438 = v481;
                  v480 = 0uLL;
                  *(_OWORD *)(a5 + 176) = v437;
                  *(_OWORD *)(a5 + 192) = v438;
                  v481 = 0uLL;
                  *(_BYTE *)(a5 + 208) = 1;
                }
                *(_WORD *)(a5 + 216) = v483;
                *(_BYTE *)(a5 + 218) = v484;
                if (!v485)
                  goto LABEL_490;
                goto LABEL_489;
              }
              (*(&off_1E42F43B8 + v364))((int)&v491, (md::MaterialRenderBatchKey *)a5);
            }
            *(_DWORD *)(a5 + 224) = -1;
            v386 = v465;
            v387 = v466;
            v465 = 0uLL;
            *(_OWORD *)a5 = v386;
            *(_OWORD *)(a5 + 16) = v387;
            v466 = 0uLL;
            v388 = v467;
            v389 = v468;
            v467 = 0uLL;
            *(_OWORD *)(a5 + 32) = v388;
            *(_OWORD *)(a5 + 48) = v389;
            v468 = 0uLL;
            v390 = *(_QWORD *)v469;
            *(_QWORD *)(a5 + 70) = *(_QWORD *)&v469[6];
            *(_QWORD *)(a5 + 64) = v390;
            *(_OWORD *)(a5 + 80) = v470;
            v470 = 0uLL;
            *(_QWORD *)(a5 + 96) = v471;
            *(_OWORD *)(a5 + 104) = v472;
            v472 = 0uLL;
            LOWORD(v390) = v473;
            *(_BYTE *)(a5 + 122) = v474;
            *(_WORD *)(a5 + 120) = v390;
            *(_BYTE *)(a5 + 124) = 0;
            *(_BYTE *)(a5 + 140) = 0;
            if (v476)
            {
              *(_OWORD *)(a5 + 124) = v475;
              *(_BYTE *)(a5 + 140) = 1;
            }
            *(_QWORD *)(a5 + 144) = v477;
            *(_BYTE *)(a5 + 152) = 0;
            *(_BYTE *)(a5 + 208) = 0;
            if (v482)
            {
              *(_OWORD *)(a5 + 152) = v478;
              v478 = 0uLL;
              *(_BYTE *)(a5 + 168) = v479;
              v391 = v480;
              v392 = v481;
              v480 = 0uLL;
              *(_OWORD *)(a5 + 176) = v391;
              *(_OWORD *)(a5 + 192) = v392;
              v481 = 0uLL;
              *(_BYTE *)(a5 + 208) = 1;
            }
            *(_WORD *)(a5 + 216) = v483;
            *(_BYTE *)(a5 + 218) = v484;
            *(_DWORD *)(a5 + 224) = 0;
            if (!v485)
              goto LABEL_490;
          }
          else
          {
            v374 = v465;
            v375 = v466;
            v465 = 0uLL;
            *(_OWORD *)a5 = v374;
            *(_OWORD *)(a5 + 16) = v375;
            v466 = 0uLL;
            v376 = v467;
            v377 = v468;
            v467 = 0uLL;
            *(_OWORD *)(a5 + 32) = v376;
            *(_OWORD *)(a5 + 48) = v377;
            v468 = 0uLL;
            v378 = *(_QWORD *)v469;
            *(_QWORD *)(a5 + 70) = *(_QWORD *)&v469[6];
            *(_QWORD *)(a5 + 64) = v378;
            *(_OWORD *)(a5 + 80) = v470;
            v470 = 0uLL;
            *(_QWORD *)(a5 + 96) = v471;
            *(_OWORD *)(a5 + 104) = v472;
            v472 = 0uLL;
            LOWORD(v378) = v473;
            *(_BYTE *)(a5 + 122) = v474;
            *(_WORD *)(a5 + 120) = v378;
            *(_BYTE *)(a5 + 124) = 0;
            *(_BYTE *)(a5 + 140) = 0;
            if (v476)
            {
              *(_OWORD *)(a5 + 124) = v475;
              *(_BYTE *)(a5 + 140) = 1;
            }
            *(_QWORD *)(a5 + 144) = v477;
            *(_BYTE *)(a5 + 152) = 0;
            *(_BYTE *)(a5 + 208) = 0;
            if (v482)
            {
              *(_OWORD *)(a5 + 152) = v478;
              v478 = 0uLL;
              *(_BYTE *)(a5 + 168) = v479;
              v379 = v480;
              v380 = v481;
              v480 = 0uLL;
              *(_OWORD *)(a5 + 176) = v379;
              *(_OWORD *)(a5 + 192) = v380;
              v481 = 0uLL;
              *(_BYTE *)(a5 + 208) = 1;
            }
            *(_WORD *)(a5 + 216) = v483;
            *(_BYTE *)(a5 + 218) = v484;
            *(_DWORD *)(a5 + 224) = 0;
            *(_BYTE *)(a5 + 232) = 1;
            if (!v485)
              goto LABEL_490;
          }
LABEL_489:
          md::MaterialRenderBatchKey::~MaterialRenderBatchKey((md::MaterialRenderBatchKey *)&v465);
LABEL_490:
          if (v490)
          {
            v393 = (std::__shared_weak_count *)*((_QWORD *)&v489 + 1);
            if (*((_QWORD *)&v489 + 1))
            {
              v394 = (unint64_t *)(*((_QWORD *)&v489 + 1) + 8);
              do
                v395 = __ldaxr(v394);
              while (__stlxr(v395 - 1, v394));
              if (!v395)
              {
                ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
                std::__shared_weak_count::__release_weak(v393);
              }
            }
            v396 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
            if (*((_QWORD *)&v488 + 1))
            {
              v397 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
              do
                v398 = __ldaxr(v397);
              while (__stlxr(v398 - 1, v397));
              if (!v398)
              {
                ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                std::__shared_weak_count::__release_weak(v396);
              }
            }
            v399 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
            if (*((_QWORD *)&v486 + 1))
            {
              v400 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
              do
                v401 = __ldaxr(v400);
              while (__stlxr(v401 - 1, v400));
              if (!v401)
              {
                ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                std::__shared_weak_count::__release_weak(v399);
              }
            }
          }
          return;
        }
LABEL_336:
        v262 = 0;
        v263 = 0;
        if (v259)
          goto LABEL_332;
        goto LABEL_337;
      }
    }
    else
    {
LABEL_305:
      if (v228)
        goto LABEL_306;
    }
    v464 = 0uLL;
    v250 = (char *)v226;
    goto LABEL_316;
  }
}

void sub_19F083E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  uint64_t v63;

  std::optional<md::RasterOverlayRenderPatch>::~optional((uint64_t)&a61);
  if (*(_BYTE *)(v61 + 232))
  {
    v63 = *(unsigned int *)(v61 + 224);
    if ((_DWORD)v63 != -1)
      (*(&off_1E42F43B8 + v63))((int)&a61, (md::MaterialRenderBatchKey *)v61);
    *(_DWORD *)(v61 + 224) = -1;
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::GeneratedTexture>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x275245E41E832F30;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x275245E41E832F30;
      if (*(_QWORD *)&v3 <= 0x275245E41E832F30uLL)
        v5 = 0x275245E41E832F30uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x275245E41E832F30;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x275245E41E832F30)
            {
              if (v7[2] == 0x275245E41E832F30)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x275245E41E832F30)
          {
            if (v7[2] == 0x275245E41E832F30)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::GeneratedTexture]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3078;
  *(_QWORD *)(v11 + 8) = 0x275245E41E832F30;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x275245E41E832F30uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x275245E41E832F30;
  v15[1] = "md::components::GeneratedTexture]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x275245E41E832F30, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F084114(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::IntendedSceneLayer>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8217BEFF5E3814C6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8217BEFF5E3814C6;
      if (*(_QWORD *)&v3 <= 0x8217BEFF5E3814C6)
        v5 = 0x8217BEFF5E3814C6 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8217BEFF5E3814C6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8217BEFF5E3814C6)
            {
              if (v7[2] == 0x8217BEFF5E3814C6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8217BEFF5E3814C6)
          {
            if (v7[2] == 0x8217BEFF5E3814C6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::IntendedSceneLayer]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3168;
  *(_QWORD *)(v11 + 8) = 0x8217BEFF5E3814C6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8217BEFF5E3814C6, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8217BEFF5E3814C6;
  v15[1] = "md::components::IntendedSceneLayer]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8217BEFF5E3814C6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F08433C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::PositionScaleFactor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3E97B8EB1BFDB5F4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3E97B8EB1BFDB5F4;
      if (*(_QWORD *)&v3 <= 0x3E97B8EB1BFDB5F4uLL)
        v5 = 0x3E97B8EB1BFDB5F4uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3E97B8EB1BFDB5F4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3E97B8EB1BFDB5F4)
            {
              if (v7[2] == 0x3E97B8EB1BFDB5F4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3E97B8EB1BFDB5F4)
          {
            if (v7[2] == 0x3E97B8EB1BFDB5F4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::PositionScaleFactor]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B31F8;
  *(_QWORD *)(v11 + 8) = 0x3E97B8EB1BFDB5F4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3E97B8EB1BFDB5F4uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3E97B8EB1BFDB5F4;
  v15[1] = "md::components::PositionScaleFactor]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3E97B8EB1BFDB5F4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F084564(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::SubtileZone>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8AD11DEF4A920028;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8AD11DEF4A920028;
      if (*(_QWORD *)&v3 <= 0x8AD11DEF4A920028)
        v5 = 0x8AD11DEF4A920028 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8AD11DEF4A920028;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8AD11DEF4A920028)
            {
              if (v7[2] == 0x8AD11DEF4A920028)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8AD11DEF4A920028)
          {
            if (v7[2] == 0x8AD11DEF4A920028)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::SubtileZone]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2EF8;
  *(_QWORD *)(v11 + 8) = 0x8AD11DEF4A920028;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8AD11DEF4A920028, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8AD11DEF4A920028;
  v15[1] = "md::components::SubtileZone]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8AD11DEF4A920028, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F08478C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::CustomRenderState>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x95242007408D7C0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x95242007408D7C0;
      if (*(_QWORD *)&v3 <= 0x95242007408D7C0uLL)
        v5 = 0x95242007408D7C0uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x95242007408D7C0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x95242007408D7C0)
            {
              if (v7[2] == 0x95242007408D7C0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x95242007408D7C0)
          {
            if (v7[2] == 0x95242007408D7C0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::CustomRenderState]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B30A8;
  *(_QWORD *)(v11 + 8) = 0x95242007408D7C0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x95242007408D7C0uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x95242007408D7C0;
  v15[1] = "md::components::CustomRenderState]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0x95242007408D7C0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F0849B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Collapsible>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3FD9D9EF0A6A9A58;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3FD9D9EF0A6A9A58;
      if (*(_QWORD *)&v3 <= 0x3FD9D9EF0A6A9A58uLL)
        v5 = 0x3FD9D9EF0A6A9A58uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3FD9D9EF0A6A9A58;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3FD9D9EF0A6A9A58)
            {
              if (v7[2] == 0x3FD9D9EF0A6A9A58)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3FD9D9EF0A6A9A58)
          {
            if (v7[2] == 0x3FD9D9EF0A6A9A58)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::Collapsible]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2EC8;
  *(_QWORD *)(v11 + 8) = 0x3FD9D9EF0A6A9A58;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3FD9D9EF0A6A9A58uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3FD9D9EF0A6A9A58;
  v15[1] = "md::components::Collapsible]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3FD9D9EF0A6A9A58, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F084BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::DrapedRasterOverlay>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1866018A21896929;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1866018A21896929;
      if (*(_QWORD *)&v3 <= 0x1866018A21896929uLL)
        v5 = 0x1866018A21896929uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1866018A21896929;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1866018A21896929)
            {
              if (v7[2] == 0x1866018A21896929)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1866018A21896929)
          {
            if (v7[2] == 0x1866018A21896929)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::DrapedRasterOverlay]";
  *(_QWORD *)(v11 + 24) = 42;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3918;
  *(_QWORD *)(v11 + 8) = 0x1866018A21896929;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1866018A21896929uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1866018A21896929;
  v15[1] = "md::overlayComponents::DrapedRasterOverlay]";
  v15[2] = 42;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1866018A21896929, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F084E04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Decal>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x43A96E24B5C6AF5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x43A96E24B5C6AF5;
      if (*(_QWORD *)&v3 <= 0x43A96E24B5C6AF5uLL)
        v5 = 0x43A96E24B5C6AF5uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x43A96E24B5C6AF5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x43A96E24B5C6AF5)
            {
              if (v7[2] == 0x43A96E24B5C6AF5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x43A96E24B5C6AF5)
          {
            if (v7[2] == 0x43A96E24B5C6AF5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::Decal]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3468;
  *(_QWORD *)(v11 + 8) = 0x43A96E24B5C6AF5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x43A96E24B5C6AF5uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x43A96E24B5C6AF5;
  v15[1] = "md::components::Decal]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x43A96E24B5C6AF5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F08502C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::IntersectionWithTileEdges>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x17A57C92AE39566DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x17A57C92AE39566DLL;
      if (*(_QWORD *)&v3 <= 0x17A57C92AE39566DuLL)
        v5 = 0x17A57C92AE39566DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x17A57C92AE39566DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x17A57C92AE39566DLL)
            {
              if (v7[2] == 0x17A57C92AE39566DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x17A57C92AE39566DLL)
          {
            if (v7[2] == 0x17A57C92AE39566DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::IntersectionWithTileEdges]";
  *(_QWORD *)(v11 + 24) = 41;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B33D8;
  *(_QWORD *)(v11 + 8) = 0x17A57C92AE39566DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x17A57C92AE39566DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x17A57C92AE39566DLL;
  v15[1] = "md::components::IntersectionWithTileEdges]";
  v15[2] = 41;
  gdc::Registry::_registerStorageDataSignals(a1, 0x17A57C92AE39566DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F085254(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::MarketMask>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1049843FF67503A0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1049843FF67503A0;
      if (*(_QWORD *)&v3 <= 0x1049843FF67503A0uLL)
        v5 = 0x1049843FF67503A0uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1049843FF67503A0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1049843FF67503A0)
            {
              if (v7[2] == 0x1049843FF67503A0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1049843FF67503A0)
          {
            if (v7[2] == 0x1049843FF67503A0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::MarketMask]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2E38;
  *(_QWORD *)(v11 + 8) = 0x1049843FF67503A0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1049843FF67503A0uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1049843FF67503A0;
  v15[1] = "md::components::MarketMask]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1049843FF67503A0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F08547C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::AlbedoTint>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBD729E76E3A79E70;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBD729E76E3A79E70;
      if (*(_QWORD *)&v3 <= 0xBD729E76E3A79E70)
        v5 = 0xBD729E76E3A79E70 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBD729E76E3A79E70;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBD729E76E3A79E70)
            {
              if (v7[2] == 0xBD729E76E3A79E70)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBD729E76E3A79E70)
          {
            if (v7[2] == 0xBD729E76E3A79E70)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::AlbedoTint]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2E08;
  *(_QWORD *)(v11 + 8) = 0xBD729E76E3A79E70;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBD729E76E3A79E70, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBD729E76E3A79E70;
  v15[1] = "md::components::AlbedoTint]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBD729E76E3A79E70, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F0856A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::ReferencedAssetInstance>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v35 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v35);
  if ((v6 & 1) != 0)
  {
    v14 = (char *)a1[11];
    v13 = a1[12];
    if ((unint64_t)v14 >= v13)
    {
      v20 = (char *)a1[10];
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v20) >> 5) + 1;
      if (v21 > 0x2AAAAAAAAAAAAAALL)
        goto LABEL_30;
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v20) >> 5);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x155555555555555)
        v23 = 0x2AAAAAAAAAAAAAALL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 > 0x2AAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v24 = (char *)operator new(96 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = a3[3];
      v26 = &v24[32 * ((v14 - v20) >> 5)];
      *((_OWORD *)v26 + 2) = a3[2];
      *((_OWORD *)v26 + 3) = v25;
      v27 = a3[5];
      *((_OWORD *)v26 + 4) = a3[4];
      *((_OWORD *)v26 + 5) = v27;
      v28 = a3[1];
      *(_OWORD *)v26 = *a3;
      *((_OWORD *)v26 + 1) = v28;
      v19 = v26 + 96;
      if (v14 != v20)
      {
        do
        {
          v29 = *((_OWORD *)v14 - 5);
          *((_OWORD *)v26 - 6) = *((_OWORD *)v14 - 6);
          *((_OWORD *)v26 - 5) = v29;
          v30 = *((_OWORD *)v14 - 4);
          v31 = *((_OWORD *)v14 - 3);
          v32 = *((_OWORD *)v14 - 1);
          *((_OWORD *)v26 - 2) = *((_OWORD *)v14 - 2);
          *((_OWORD *)v26 - 1) = v32;
          *((_OWORD *)v26 - 4) = v30;
          *((_OWORD *)v26 - 3) = v31;
          v26 -= 96;
          v14 -= 96;
        }
        while (v14 != v20);
        v14 = (char *)a1[10];
      }
      a1[10] = (uint64_t)v26;
      a1[11] = (uint64_t)v19;
      a1[12] = (uint64_t)&v24[96 * v23];
      if (v14)
        operator delete(v14);
    }
    else
    {
      v15 = a3[1];
      *(_OWORD *)v14 = *a3;
      *((_OWORD *)v14 + 1) = v15;
      v16 = a3[2];
      v17 = a3[3];
      v18 = a3[5];
      *((_OWORD *)v14 + 4) = a3[4];
      *((_OWORD *)v14 + 5) = v18;
      *((_OWORD *)v14 + 2) = v16;
      *((_OWORD *)v14 + 3) = v17;
      v19 = v14 + 96;
    }
    a1[11] = (uint64_t)v19;
    v10 = a1[31];
  }
  else
  {
    v7 = a1[10] + 96 * (((uint64_t)v5 - a1[7]) >> 3);
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a3 + 6);
    *(_DWORD *)(v7 + 28) = *((_DWORD *)a3 + 7);
    *(_DWORD *)(v7 + 32) = *((_DWORD *)a3 + 8);
    *(_DWORD *)(v7 + 36) = *((_DWORD *)a3 + 9);
    *(_DWORD *)(v7 + 40) = *((_DWORD *)a3 + 10);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)a3 + 11);
    *(_DWORD *)(v7 + 48) = *((_DWORD *)a3 + 12);
    *(_DWORD *)(v7 + 52) = *((_DWORD *)a3 + 13);
    *(_DWORD *)(v7 + 56) = *((_DWORD *)a3 + 14);
    *(_DWORD *)(v7 + 60) = *((_DWORD *)a3 + 15);
    *(_DWORD *)(v7 + 64) = *((_DWORD *)a3 + 16);
    *(_DWORD *)(v7 + 68) = *((_DWORD *)a3 + 17);
    v9 = *(__int128 *)((char *)a3 + 72);
    *(_QWORD *)(v7 + 85) = *(_QWORD *)((char *)a3 + 85);
    *(_OWORD *)(v7 + 72) = v9;
    v10 = a1[31];
    if (v7 != a1[11])
    {
      v11 = (_QWORD *)a1[16];
      if (v11)
      {
        while (1)
        {
          v37 = &v35;
          v38 = 1;
          v36 = v10;
          v12 = v11[6];
          if (!v12)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v12 + 48))(v12, &v36, &v37);
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v33 = (_QWORD *)a1[22];
  if (v33)
  {
    while (1)
    {
      v37 = &v35;
      v38 = 1;
      v36 = v10;
      v34 = v33[6];
      if (!v34)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v34 + 48))(v34, &v36, &v37);
      v33 = (_QWORD *)*v33;
      if (!v33)
        return;
    }
    goto LABEL_29;
  }
}

uint64_t md::MaterialRenderable::MaterialRenderable(uint64_t this, const md::MaterialRenderable *a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;

  *(_QWORD *)this = &off_1E428F838;
  v2 = *(_OWORD *)((char *)a2 + 8);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(this + 8) = v2;
  v3 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(this + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(this + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(this + 80) = v7;
  *(_OWORD *)(this + 48) = v6;
  v8 = *((_OWORD *)a2 + 6);
  v9 = *((_OWORD *)a2 + 7);
  v10 = *((_OWORD *)a2 + 8);
  *(_QWORD *)(this + 142) = *(_QWORD *)((char *)a2 + 142);
  *(_OWORD *)(this + 112) = v9;
  *(_OWORD *)(this + 128) = v10;
  *(_OWORD *)(this + 96) = v8;
  *(_BYTE *)(this + 152) = 0;
  *(_BYTE *)(this + 176) = 0;
  if (*((_BYTE *)a2 + 176))
  {
    v11 = *((_QWORD *)a2 + 20);
    *(_QWORD *)(this + 152) = *((_QWORD *)a2 + 19);
    *(_QWORD *)(this + 160) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_BYTE *)(this + 168) = *((_BYTE *)a2 + 168);
    *(_BYTE *)(this + 176) = 1;
  }
  *(_QWORD *)(this + 184) = *((_QWORD *)a2 + 23);
  *(_WORD *)(this + 192) = 0;
  if (*((_BYTE *)a2 + 193))
  {
    *(_BYTE *)(this + 192) = *((_BYTE *)a2 + 192);
    *(_BYTE *)(this + 193) = 1;
  }
  v14 = *(_OWORD *)((char *)a2 + 196);
  *(_OWORD *)(this + 208) = *((_OWORD *)a2 + 13);
  *(_OWORD *)(this + 196) = v14;
  *(_QWORD *)this = &off_1E4294DD0;
  v15 = *((_QWORD *)a2 + 29);
  *(_QWORD *)(this + 224) = *((_QWORD *)a2 + 28);
  *(_QWORD *)(this + 232) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *((_QWORD *)a2 + 30);
  *(_BYTE *)(this + 248) = *((_BYTE *)a2 + 248);
  *(_QWORD *)(this + 240) = v18;
  v19 = *((_QWORD *)a2 + 33);
  *(_QWORD *)(this + 256) = *((_QWORD *)a2 + 32);
  *(_QWORD *)(this + 264) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_BYTE *)(this + 272) = *((_BYTE *)a2 + 272);
  v22 = *((_QWORD *)a2 + 36);
  *(_QWORD *)(this + 280) = *((_QWORD *)a2 + 35);
  *(_QWORD *)(this + 288) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *((_QWORD *)a2 + 38);
  *(_QWORD *)(this + 296) = *((_QWORD *)a2 + 37);
  *(_QWORD *)(this + 304) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(_BYTE *)(this + 312) = 0;
  *(_BYTE *)(this + 368) = 0;
  if (*((_BYTE *)a2 + 368))
  {
    v28 = *((_QWORD *)a2 + 40);
    *(_QWORD *)(this + 312) = *((_QWORD *)a2 + 39);
    *(_QWORD *)(this + 320) = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    *(_BYTE *)(this + 328) = *((_BYTE *)a2 + 328);
    v31 = *((_QWORD *)a2 + 43);
    *(_QWORD *)(this + 336) = *((_QWORD *)a2 + 42);
    *(_QWORD *)(this + 344) = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = *((_QWORD *)a2 + 45);
    *(_QWORD *)(this + 352) = *((_QWORD *)a2 + 44);
    *(_QWORD *)(this + 360) = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    *(_BYTE *)(this + 368) = 1;
  }
  *(_WORD *)(this + 376) = *((_WORD *)a2 + 188);
  *(_BYTE *)(this + 380) = 0;
  *(_BYTE *)(this + 396) = 0;
  if (*((_BYTE *)a2 + 396))
  {
    *(_OWORD *)(this + 380) = *(_OWORD *)((char *)a2 + 380);
    *(_BYTE *)(this + 396) = 1;
  }
  *(_BYTE *)(this + 400) = *((_BYTE *)a2 + 400);
  return this;
}

void md::MeshRenderable::~MeshRenderable(md::MeshRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428F838;
  if (*((_BYTE *)this + 176))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428F838;
  if (*((_BYTE *)this + 176))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428F838;
  if (*((_BYTE *)this + 176))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t __copy_helper_block_8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64), a1 + 40);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 64) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

_QWORD *ggl::MetalResourceAccessor::endAccess(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const ggl::Buffer *v16;
  id *v17;

  if (a6)
  {
    v7 = *(unsigned __int8 *)(a3 + 16);
    v8 = ~v7 & 6;
    v9 = v7 & 1;
    v10 = v8 && a7 == 1;
    if (!v10 || v9 == 0)
    {
      v13 = *(_QWORD *)(a3 + 40);
      v14 = v13 + a4;
      v15 = v13 + a5;
      v16 = *(const ggl::Buffer **)(a3 + 24);
      if (a6 == 3 || (v17 = (id *)*((_QWORD *)v16 + 3)) == 0)
        v17 = (id *)ggl::MetalResourceManager::newBuffer(*(ggl::MetalResourceManager **)(result[1] + 80), v16);
      return memcpy((void *)(objc_msgSend(v17[4], "contents") + v14), a2, v15 - v14);
    }
  }
  return result;
}

uint64_t *ggl::BufferMemory::operator=(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;

  if (a1[5])
  {
    v5 = a1[2];
    v4 = a1[3];
    if (v4 != v5)
    {
      v6 = *a1;
      v7 = a1[1];
      v8 = *((unsigned __int8 *)a1 + 32);
      v9 = *((unsigned __int8 *)a1 + 33);
      if (*a1 && *(_BYTE *)(v7 + 17) != 2)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      if (v8 && !v9)
      {
        v11 = *(_QWORD *)(v7 + 56);
        v10 = *(_QWORD *)(v7 + 64);
        if (v10 == v11)
          v11 = *(_QWORD *)(v7 + 80) - *(_QWORD *)(v7 + 72);
        if (v5 < v11)
          v11 = v5;
        if (v10 <= v4)
          v10 = v4;
        if (v10 == v11)
          v10 = v11 + *(_QWORD *)(v7 + 80) - *(_QWORD *)(v7 + 72);
        *(_QWORD *)(v7 + 56) = v11;
        *(_QWORD *)(v7 + 64) = v10;
      }
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  a1[5] = *(_QWORD *)(a2 + 40);
  *((_WORD *)a1 + 16) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

uint64_t ggl::MetalResourceAccessor::beginAccess(uint64_t a1, std::mutex *this, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v18;
  const ggl::Buffer *v19;
  id *v20;

  ggl::BufferData::prepareBufferForDevice(this, *(ggl::Device **)(a1 + 8), a6 == 1);
  v12 = this->__m_.__opaque[8];
  v13 = ~v12 & 6;
  v14 = v12 & 1;
  if (v13)
    v15 = a6 == 1;
  else
    v15 = 0;
  if (!v15 || v14 == 0)
  {
    if (a4 == a3)
      return 0;
    else
      return *(_QWORD *)this[1].__m_.__opaque + a3;
  }
  else
  {
    v18 = *(_QWORD *)&this->__m_.__opaque[32] + a3;
    v19 = *(const ggl::Buffer **)&this->__m_.__opaque[16];
    if (a5 == 3 || (v20 = (id *)*((_QWORD *)v19 + 3)) == 0)
      v20 = (id *)ggl::MetalResourceManager::newBuffer(*(ggl::MetalResourceManager **)(*(_QWORD *)(a1 + 8) + 80), v19);
    return objc_msgSend(v20[4], "contents") + v18;
  }
}

void ggl::BufferData::prepareBufferForDevice(std::mutex *this, ggl::Device *a2, char a3)
{
  std::mutex *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;

  v6 = this + 2;
  std::mutex::lock(this + 2);
  if (*(_QWORD *)&this->__m_.__opaque[16])
    goto LABEL_2;
  v7 = *((_DWORD *)a2 + 24);
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    if (!v7)
    {
      if (this->__m_.__opaque[10])
        v8 = 3;
      else
        v8 = 1;
      *(_DWORD *)&this[1].__m_.__opaque[40] = v8;
      goto LABEL_14;
    }
    v8 = 0;
  }
  *(_DWORD *)&this[1].__m_.__opaque[40] = v8;
  if (v7 != 1)
  {
    if (v7)
      goto LABEL_23;
LABEL_14:
    v9 = 4;
    switch(this->__m_.__opaque[9])
    {
      case 0:
        v9 = 16;
        if (*((_BYTE *)a2 + 23))
          v9 = 1;
        if (v8 < 2)
          goto LABEL_23;
        goto LABEL_19;
      case 1:
        goto LABEL_18;
      case 2:
      case 3:
        v9 = 16;
        if (v8 < 2)
          goto LABEL_23;
        goto LABEL_19;
      default:
        break;
    }
  }
  v9 = 0;
LABEL_18:
  if (v8 >= 2)
  {
LABEL_19:
    v10 = (*(_QWORD *)&this->__m_.__opaque[40] + v9 + ~*(_QWORD *)&this->__m_.__opaque[32]) & -v9;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *(_QWORD *)&this->__m_.__opaque[40] - *(_QWORD *)&this->__m_.__opaque[32];
LABEL_24:
  *(_QWORD *)&this[1].__m_.__opaque[48] = v10;
  {
    v20 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "GeoGL", 0xA3D02C1100000005);
  }
  v12 = ggl::Allocator::instance(void)::alloc;
  v13 = *(_QWORD *)&this[1].__m_.__opaque[48] * *(unsigned int *)&this[1].__m_.__opaque[40];
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 80, 8);
  *(_QWORD *)v14 = &off_1E42E47A8;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v12;
  v15 = this->__m_.__opaque[9];
  v16 = this->__m_.__opaque[10];
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_DWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 56) = 0;
  *(_BYTE *)(v14 + 68) = 0;
  *(_BYTE *)(v14 + 69) = v15;
  *(_WORD *)(v14 + 70) = v16;
  *(_QWORD *)(v14 + 72) = v13;
  v17 = *(std::__shared_weak_count **)&this->__m_.__opaque[24];
  *(_QWORD *)&this->__m_.__opaque[24] = v14;
  *(_QWORD *)(v14 + 32) = &off_1E42BC138;
  *(_QWORD *)&this->__m_.__opaque[16] = v14 + 32;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_2:
  std::mutex::unlock(v6);
}

uint64_t ggl::PipelineSetup::resetData(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = (_QWORD *)this;
  v2 = *(_QWORD **)(this + 32);
  v3 = *(_QWORD *)(this + 40) - (_QWORD)v2;
  if (v3)
  {
    v4 = v3 >> 4;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      if (*v2)
        *v2 = 0;
      v2 += 2;
      --v4;
    }
    while (v4);
  }
  if (*(_QWORD *)(this + 72) != *(_QWORD *)(this + 64))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD *, unint64_t))(*v1 + 16))(v1, v6);
      v7 = v1[8];
      if ((this & 1) == 0 && *(_QWORD *)(v7 + v5))
        *(_QWORD *)(v7 + v5) = 0;
      ++v6;
      v5 += 16;
    }
    while (v6 < (v1[9] - v7) >> 4);
  }
  if (v1[13] != v1[12])
  {
    v8 = 0;
    do
    {
      this = (*(uint64_t (**)(_QWORD *, unint64_t))(*v1 + 24))(v1, v8);
      v9 = v1[12];
      if ((this & 1) == 0)
      {
        if (*(_QWORD *)(v9 + 8 * v8))
        {
          *(_QWORD *)(v9 + 8 * v8) = 0;
          v9 = v1[12];
        }
      }
      ++v8;
    }
    while (v8 < (v1[13] - v9) >> 3);
  }
  return this;
}

void ggl::MetalRenderItemEncoder::encode(uint64_t a1, uint64_t a2)
{
  id v4;
  _QWORD *v5;
  const ggl::PipelineState *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  id v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  _QWORD **v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  id *v41;
  id v42;
  double v43;
  double v44;
  double v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int32x2_t v59;
  double v60;
  uint64x2_t v61;
  uint64_t v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int32x2_t v87;
  _DWORD *v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _DWORD *v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  _DWORD *v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  _DWORD *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int32x2_t v130;
  __int128 v131;
  uint64_t v132;
  unsigned int v133;
  _DWORD *v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  _DWORD *v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  int32x2_t v157;
  _DWORD *v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  _DWORD *v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int *v168;
  uint64_t v169;
  uint64_t v170;
  _DWORD *v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  _DWORD *v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  _DWORD *v179;
  uint64_t v180;
  _DWORD *v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  _DWORD *v185;
  uint64_t v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int32x2_t *v195;
  int32x2_t *v196;
  int32x2_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned __int8 *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  BOOL v241;
  int v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  void *v252;
  id v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unsigned __int8 *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  NSObject *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int64x2_t v273;
  int64x2_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  __int16 *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  id v286;
  uint64_t v287;
  uint64_t v288;
  unsigned __int8 *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  const ggl::Texture *v293;
  uint64_t v294;
  uint64_t v295;
  ggl::MetalResourceManager *v296;
  unint64_t v297;
  uint64_t v298;
  const char *v299;
  NSObject *v300;
  const char *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t SamplerStateResource;
  id *v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  id v309;
  uint64_t v310;
  uint64_t v311;
  BOOL v312;
  char v313;
  unint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t v317;
  _QWORD *v318;
  void *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  _QWORD *v323;
  unsigned __int8 *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  const char *v332;
  NSObject *v333;
  const char *v334;
  unint64_t *v335;
  unint64_t v336;
  void *v337;
  id v338;
  uint64_t v339;
  unint64_t v340;
  _QWORD *v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unsigned __int8 *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  NSObject *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int64x2_t v357;
  int64x2_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  const char *v363;
  NSObject *v364;
  const char *v365;
  unint64_t *v366;
  unint64_t v367;
  __int16 *v368;
  uint64_t v369;
  unint64_t v370;
  void *v371;
  id v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  unint64_t v377;
  unsigned __int8 *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  const ggl::Texture *v382;
  ggl::MetalTextureResource *v383;
  uint64_t v384;
  int v385;
  ggl::MetalTextureResource *v386;
  unint64_t v387;
  uint64_t v388;
  const char *v389;
  NSObject *v390;
  const char *v391;
  unint64_t *v392;
  unint64_t v393;
  uint64_t v394;
  id *v395;
  unint64_t v396;
  uint64_t v397;
  ggl::MetalTextureResource *v398;
  id v399;
  uint64_t v400;
  uint64_t v401;
  BOOL v402;
  char v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  const char *v414;
  NSObject *v415;
  const char *v416;
  unint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  char v421;
  uint64_t v422;
  uint64_t i;
  uint64_t v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  ggl::MetalResourceManager *v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  _QWORD *v434;
  unsigned __int8 *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  float *v453;
  const float *v454;
  uint64_t v455;
  const float *v456;
  float32x4_t v457;
  float *v458;
  float32x4_t v459;
  uint64_t v460;
  void *v461;
  uint64_t v462;
  ggl::Device *v463;
  unint64_t v464;
  id v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  ggl::MetalResourceManager *v469;
  ggl::MetalResourceManager *v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _QWORD *v476;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  id v481;
  _QWORD v482[2];
  uint64_t v483;
  uint64_t v484;
  _QWORD v485[2];
  double v486;
  double v487;
  __int128 v488;
  _BYTE buf[32];
  __int16 v490;
  int v491;
  __int16 *v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  _QWORD v501[4];
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  uint8_t v508[4];
  const char *v509;
  __int16 v510;
  const char *v511;
  __int16 v512;
  const char *v513;
  __int16 v514;
  int v515;
  uint64_t v516;
  float32x4x2_t v517;
  float32x4x2_t v518;

  v516 = *MEMORY[0x1E0C80C00];
  v463 = *(ggl::Device **)a1;
  v469 = *(ggl::MetalResourceManager **)(*(_QWORD *)a1 + 80);
  v4 = *(id *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 64);
  v475 = a2;
  v480 = *(_QWORD **)(a2 + 32);
  v481 = v4;
  v6 = (const ggl::PipelineState *)v480[2];
  v7 = *((_QWORD *)v6 + 3);
  if (!v7)
  {
    v7 = ggl::MetalResourceManager::newPipelineState(v469, v6);
    if (!v7)
      goto LABEL_798;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (unint64_t *)(v7 + 16);
  v10 = atomic_load((unint64_t *)(v7 + 16));
  if (v10 < v8)
  {
    do
    {
      v19 = __ldaxr(v9);
      if (v19 == v10)
      {
        if (!__stlxr(v8, v9))
          break;
      }
      else
      {
        __clrex();
      }
      v10 = v19;
    }
    while (v19 < v8);
  }
  v478 = v5;
  v11 = *(void **)(v7 + 32);
  v12 = v11;
  v479 = (_QWORD *)a1;
  v13 = *(id **)(a1 + 48);
  v461 = v12;
  if (*v13 != v12)
  {
    objc_storeStrong(v13, v11);
    objc_msgSend(v481, "setRenderPipelineState:", **(_QWORD **)(a1 + 48));
  }
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(v14 + 24);
  if (!v15)
  {
    v16 = objc_alloc_init(MEMORY[0x1E0CC6A88]);
    v17 = v16;
    if (*(_BYTE *)(v14 + 36))
    {
      v18 = 7;
    }
    else if (*(unsigned __int8 *)(v14 + 37) - 1 < 7)
    {
      v18 = (*(_BYTE *)(v14 + 37) - 1) + 1;
    }
    else
    {
      v18 = 0;
    }
    objc_msgSend(v16, "setDepthCompareFunction:", v18);
    objc_msgSend(v17, "setDepthWriteEnabled:", *(_BYTE *)(v14 + 38) == 0);
    v20 = objc_alloc_init(MEMORY[0x1E0CC6B98]);
    v21 = v20;
    if (*(unsigned __int8 *)(v14 + 50) - 1 > 2)
      v22 = 0;
    else
      v22 = qword_1A0083170[(*(_BYTE *)(v14 + 50) - 1)];
    objc_msgSend(v20, "setStencilFailureOperation:", v22);
    if (*(unsigned __int8 *)(v14 + 51) - 1 > 2)
      v23 = 0;
    else
      v23 = qword_1A0083170[(*(_BYTE *)(v14 + 51) - 1)];
    objc_msgSend(v21, "setDepthFailureOperation:", v23);
    if (*(unsigned __int8 *)(v14 + 52) - 1 > 2)
      v24 = 0;
    else
      v24 = qword_1A0083170[(*(_BYTE *)(v14 + 52) - 1)];
    objc_msgSend(v21, "setDepthStencilPassOperation:", v24);
    if (*(_BYTE *)(v14 + 48))
    {
      v25 = 7;
    }
    else if (*(unsigned __int8 *)(v14 + 49) - 1 >= 7)
    {
      v25 = 0;
    }
    else
    {
      v25 = qword_1A0083188[(*(_BYTE *)(v14 + 49) - 1)];
    }
    objc_msgSend(v21, "setStencilCompareFunction:", v25);
    objc_msgSend(v21, "setReadMask:", *(unsigned __int8 *)(v14 + 53));
    objc_msgSend(v21, "setWriteMask:", *(unsigned __int8 *)(v14 + 54));
    objc_msgSend(v17, "setFrontFaceStencil:", v21);
    objc_msgSend(v17, "setBackFaceStencil:", v21);
    v26 = (void *)objc_msgSend(*(id *)(*((_QWORD *)v469 + 32) + 104), "newDepthStencilStateWithDescriptor:", v17);
    v28 = (_QWORD **)&unk_1ECE44000;
    if ((v27 & 1) == 0)
      goto LABEL_804;
    while (1)
    {
      v15 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v28[495] + 16))(v28[495], 40, 8);
      *(_QWORD *)v15 = 0;
      *(_WORD *)(v15 + 8) = 1793;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      objc_storeStrong((id *)(v15 + 32), v26);
      v29 = (std::__shared_weak_count *)*((_QWORD *)v469 + 2);
      if (v29)
      {
        v28 = (_QWORD **)*((_QWORD *)v469 + 1);
        v30 = std::__shared_weak_count::lock(v29);
        if (v30)
          break;
      }
      std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_804:
      {
        v460 = operator new();
        v28[495] = (_QWORD *)geo::MallocZoneAllocator::MallocZoneAllocator(v460, "GeoGL", 0xA3D02C1100000005);
      }
    }
    v31 = *(std::__shared_weak_count **)(v14 + 16);
    *(_QWORD *)(v14 + 8) = v28;
    *(_QWORD *)(v14 + 16) = v30;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    *(_QWORD *)(v14 + 24) = v15;
    ++*(_DWORD *)(v14 + 32);
    ggl::ResourceManager::_addResourceStat((uint64_t)v469, "DepthStencilState", 0x38AB5BF400000011uLL, 0);

  }
  v34 = v479[5];
  v35 = (unint64_t *)(v15 + 16);
  v36 = atomic_load((unint64_t *)(v15 + 16));
  if (v36 < v34)
  {
    do
    {
      v56 = __ldaxr(v35);
      if (v56 == v36)
      {
        if (!__stlxr(v34, v35))
          break;
      }
      else
      {
        __clrex();
      }
      v36 = v56;
    }
    while (v56 < v34);
  }
  v37 = *(void **)(v15 + 32);
  v38 = v37;
  v39 = v479;
  v40 = v479[6];
  v42 = *(id *)(v40 + 8);
  v41 = (id *)(v40 + 8);
  if (v42 != v38)
  {
    objc_storeStrong(v41, v37);
    v39 = v479;
    objc_msgSend(v481, "setDepthStencilState:", *(_QWORD *)(v479[6] + 8));
  }

  if (*(_QWORD *)(v39[6] + 16) == v14)
    goto LABEL_380;
  if (!*(_BYTE *)(v14 + 48) && !*(_BYTE *)(v14 + 208))
    objc_msgSend(v481, "setStencilReferenceValue:", *(unsigned __int8 *)(v14 + 55));
  LODWORD(v43) = *(_DWORD *)(v14 + 40);
  LODWORD(v44) = *(_DWORD *)(v14 + 44);
  LODWORD(v45) = 0;
  objc_msgSend(v481, "setDepthBias:slopeScale:clamp:", v43, v44, v45);
  v47 = (_QWORD *)v479[2];
  v48 = *(unsigned __int8 *)(v14 + 188);
  if (!*(_BYTE *)(v14 + 188))
  {
    v485[0] = 0;
    v485[1] = 0;
    v98 = (_DWORD *)v47[42];
    if (v98)
    {
      LODWORD(v46) = v98[9];
      v486 = (double)v46;
      LODWORD(v98) = v98[10];
      goto LABEL_179;
    }
    v99 = v47[11];
    if (v99)
    {
      v100 = v47 + 12;
    }
    else
    {
      v99 = v47[35];
      if (!v99)
        goto LABEL_168;
      v100 = v47 + 36;
    }
    v101 = 80;
    if (*(_DWORD *)(v99 + 56) == 3)
      v101 = 196;
    v102 = *(_DWORD *)(v99 + v101);
    v103 = v102 >> *v100;
    if (v103 <= 1)
      v103 = 1;
    if (v102)
      LODWORD(v99) = v103;
    else
      LODWORD(v99) = 0;
LABEL_168:
    v486 = (double)v99;
    v98 = (_DWORD *)v47[11];
    if (v98)
    {
      v104 = v47 + 12;
    }
    else
    {
      v98 = (_DWORD *)v47[35];
      if (!v98)
        goto LABEL_179;
      v104 = v47 + 36;
    }
    v105 = 21;
    if (v98[14] == 3)
      v105 = 49;
    v106 = v98[v105];
    v107 = v106 >> *v104;
    if (v107 <= 1)
      v107 = 1;
    if (v106)
      LODWORD(v98) = v107;
    else
      LODWORD(v98) = 0;
LABEL_179:
    v487 = (double)v98;
    v488 = xmmword_19FFB33A0;
    objc_msgSend(v481, "setViewport:", v485);
    v108 = (_DWORD *)v47[42];
    if (v108)
    {
      LODWORD(v109) = v108[9];
      LODWORD(v108) = v108[10];
LABEL_203:
      v501[0] = 0;
      LOBYTE(v501[1]) = v109;
      BYTE1(v501[1]) = BYTE1(v109);
      BYTE2(v501[1]) = BYTE2(v109);
      BYTE3(v501[1]) = BYTE3(v109);
      BYTE4(v501[1]) = (_BYTE)v108;
      BYTE5(v501[1]) = BYTE1(v108);
      BYTE6(v501[1]) = BYTE2(v108);
      HIBYTE(v501[1]) = BYTE3(v108);
      v118 = v479[8];
      if (!*(_QWORD *)(v118 + 32) && *(_QWORD *)(v118 + 40) == v501[1])
      {
        *(_QWORD *)(v118 + 32) = 0;
        *(_DWORD *)(v118 + 40) = v109;
        *(_DWORD *)(v118 + 44) = (_DWORD)v108;
      }
      goto LABEL_206;
    }
    v109 = v47[11];
    if (v109)
    {
      v110 = v47 + 12;
    }
    else
    {
      v109 = v47[35];
      if (!v109)
        goto LABEL_192;
      v110 = v47 + 36;
    }
    v111 = 80;
    if (*(_DWORD *)(v109 + 56) == 3)
      v111 = 196;
    v112 = *(_DWORD *)(v109 + v111);
    v113 = v112 >> *v110;
    if (v113 <= 1)
      v113 = 1;
    if (v112)
      LODWORD(v109) = v113;
    else
      LODWORD(v109) = 0;
LABEL_192:
    v108 = (_DWORD *)v47[11];
    if (v108)
    {
      v114 = v47 + 12;
    }
    else
    {
      v108 = (_DWORD *)v47[35];
      if (!v108)
        goto LABEL_203;
      v114 = v47 + 36;
    }
    v115 = 21;
    if (v108[14] == 3)
      v115 = 49;
    v116 = v108[v115];
    v117 = v116 >> *v114;
    if (v117 <= 1)
      v117 = 1;
    if (v116)
      LODWORD(v108) = v117;
    else
      LODWORD(v108) = 0;
    goto LABEL_203;
  }
  v49 = 0;
  v50 = 0;
  v51 = v479[8];
  v52 = v47[42];
  v53 = (double *)&v501[2];
  v54 = v52;
  v55 = v52;
  do
  {
    v493 = *(_OWORD *)(v14 + 124 + v49);
    LODWORD(v62) = DWORD2(v493);
    v63 = v493;
    if (v493 != 0)
    {
      if (v55)
      {
        if (*(_DWORD *)(v55 + 36) < DWORD2(v493))
          goto LABEL_100;
        v76 = *(_DWORD *)(v55 + 40);
      }
      else
      {
        v71 = v47[11];
        v72 = v47 + 12;
        if (v71 || (v71 = v47[35], v72 = v47 + 36, v71))
        {
          if (*(_DWORD *)(v71 + 56) == 3)
            v73 = 196;
          else
            v73 = 80;
          v74 = *(_DWORD *)(v71 + v73);
          v75 = v74 >> *v72;
          if (v75 <= 1)
            v75 = 1;
          if (v74)
            LODWORD(v71) = v75;
          else
            LODWORD(v71) = 0;
        }
        if (v71 < DWORD2(v493))
          goto LABEL_99;
        v92 = v47[11];
        v93 = v47 + 12;
        if (v92 || (v92 = v47[35], v93 = v47 + 36, v92))
        {
          if (*(_DWORD *)(v92 + 56) == 3)
            v94 = 196;
          else
            v94 = 84;
          v95 = *(_DWORD *)(v92 + v94);
          v96 = v95 >> *v93;
          if (v96 <= 1)
            v96 = 1;
          if (v95)
            v76 = v96;
          else
            v76 = 0;
        }
        else
        {
          v76 = 0;
        }
      }
      v64 = (_DWORD *)HIDWORD(*((_QWORD *)&v493 + 1));
      v77 = DWORD1(v493);
      if (v76 >= HIDWORD(v493) && v493 < DWORD2(v493) && DWORD1(v493) < HIDWORD(v493))
      {
        v87 = (int32x2_t)v493;
        goto LABEL_113;
      }
LABEL_99:
      if (!v55)
      {
        v62 = v47[11];
        v88 = v47 + 12;
        if (v62 || (v62 = v47[35], v88 = v47 + 36, v62))
        {
          if (*(_DWORD *)(v62 + 56) == 3)
            v89 = 196;
          else
            v89 = 80;
          v90 = *(_DWORD *)(v62 + v89);
          v91 = v90 >> *v88;
          if (v91 <= 1)
            v91 = 1;
          if (v90)
            LODWORD(v62) = v91;
          else
            LODWORD(v62) = 0;
        }
        goto LABEL_101;
      }
LABEL_100:
      LODWORD(v62) = *(_DWORD *)(v55 + 36);
LABEL_101:
      if (v55)
      {
        LODWORD(v64) = *(_DWORD *)(v55 + 40);
        goto LABEL_112;
      }
      v70 = v47[11];
      v64 = v47 + 12;
      if (v70)
        goto LABEL_105;
      v70 = v47[35];
      v64 = v47 + 36;
      if (v70)
        goto LABEL_105;
LABEL_148:
      v55 = 0;
      LODWORD(v64) = 0;
      goto LABEL_112;
    }
    if (v54)
    {
      LODWORD(v62) = *(_DWORD *)(v54 + 36);
      if (!v52)
        goto LABEL_75;
    }
    else
    {
      v65 = v47[11];
      v66 = v47 + 12;
      if (!v65)
      {
        v65 = v47[35];
        v66 = v47 + 36;
        if (!v65)
        {
          LODWORD(v62) = 0;
          if (!v52)
            goto LABEL_75;
          goto LABEL_60;
        }
      }
      if (*(_DWORD *)(v65 + 56) == 3)
        v67 = 196;
      else
        v67 = 80;
      v68 = *(_DWORD *)(v65 + v67);
      v69 = v68 >> *v66;
      if (v69 <= 1)
        v69 = 1;
      if (v68)
        LODWORD(v62) = v69;
      else
        LODWORD(v62) = 0;
      if (!v52)
      {
LABEL_75:
        v70 = v47[11];
        v64 = v47 + 12;
        if (v70 || (v70 = v47[35], v64 = v47 + 36, v70))
        {
          v54 = 0;
LABEL_105:
          v55 = 0;
          if (*(_DWORD *)(v70 + 56) == 3)
            v80 = 196;
          else
            v80 = 84;
          v81 = *(_DWORD *)(v70 + v80);
          LODWORD(v64) = v81 >> *v64;
          if (v64 <= 1)
            LODWORD(v64) = 1;
          if (!v81)
            LODWORD(v64) = 0;
          goto LABEL_112;
        }
        v54 = 0;
        goto LABEL_148;
      }
    }
LABEL_60:
    LODWORD(v64) = *(_DWORD *)(v52 + 40);
    v54 = v52;
    v55 = v52;
LABEL_112:
    v63 = 0;
    LODWORD(v77) = 0;
    v87 = 0;
    *(_QWORD *)&v493 = 0;
    *((_QWORD *)&v493 + 1) = __PAIR64__(v64, v62);
LABEL_113:
    v82 = v51 + v49;
    if (*(_OWORD *)(v51 + v49 + 32) == v493)
    {
      *(_DWORD *)(v82 + 32) = v63;
      v57 = v51 + v49;
      *(_DWORD *)(v57 + 36) = v77;
      *(_DWORD *)(v82 + 40) = v62;
      *(_DWORD *)(v57 + 44) = (_DWORD)v64;
      buf[v50] = 0;
      if (v52)
        goto LABEL_55;
    }
    else
    {
      buf[v50] = 1;
      if (v52)
      {
LABEL_55:
        LODWORD(v58) = *(_DWORD *)(v52 + 40);
        goto LABEL_56;
      }
    }
    v58 = v47[11];
    v83 = v47 + 12;
    if (v58 || (v58 = v47[35], v83 = v47 + 36, v58))
    {
      if (*(_DWORD *)(v58 + 56) == 3)
        v84 = 196;
      else
        v84 = 84;
      v85 = *(_DWORD *)(v58 + v84);
      v86 = v85 >> *v83;
      if (v86 <= 1)
        v86 = 1;
      if (v85)
        LODWORD(v58) = v86;
      else
        LODWORD(v58) = 0;
    }
LABEL_56:
    v59 = vsub_s32(*(int32x2_t *)((char *)&v493 + 8), v87);
    v60 = (double)(v58 - HIDWORD(v493));
    v61.i64[0] = v59.u32[0];
    v61.i64[1] = v59.u32[1];
    *(v53 - 2) = (double)v63;
    *(v53 - 1) = v60;
    *(float64x2_t *)v53 = vcvtq_f64_u64(v61);
    *((_OWORD *)v53 + 1) = xmmword_19FFB33A0;
    v53 += 6;
    ++v50;
    v49 += 16;
  }
  while (16 * v48 != v49);
  v97 = 0;
  while (buf[v97])
  {
    if (v48 == ++v97)
      goto LABEL_206;
  }
  objc_msgSend(v481, "setViewports:count:", v501);
LABEL_206:
  v119 = *(unsigned __int8 *)(v14 + 188);
  if (!*(_BYTE *)(v14 + 188))
  {
    v482[0] = 0;
    v482[1] = 0;
    v168 = (unsigned int *)v47[42];
    if (v168)
    {
      v169 = v168[9];
      LODWORD(v168) = v168[10];
      v483 = v169;
      goto LABEL_333;
    }
    v170 = v47[11];
    if (v170)
    {
      v171 = v47 + 12;
    }
    else
    {
      v170 = v47[35];
      if (!v170)
        goto LABEL_322;
      v171 = v47 + 36;
    }
    v172 = 80;
    if (*(_DWORD *)(v170 + 56) == 3)
      v172 = 196;
    v173 = *(_DWORD *)(v170 + v172);
    v174 = v173 >> *v171;
    if (v174 <= 1)
      v174 = 1;
    if (v173)
      LODWORD(v170) = v174;
    else
      LODWORD(v170) = 0;
LABEL_322:
    v483 = v170;
    v168 = (unsigned int *)v47[11];
    if (v168)
    {
      v175 = v47 + 12;
    }
    else
    {
      v168 = (unsigned int *)v47[35];
      if (!v168)
        goto LABEL_333;
      v175 = v47 + 36;
    }
    v176 = 21;
    if (v168[14] == 3)
      v176 = 49;
    v177 = v168[v176];
    v178 = v177 >> *v175;
    if (v178 <= 1)
      v178 = 1;
    if (v177)
      LODWORD(v168) = v178;
    else
      LODWORD(v168) = 0;
LABEL_333:
    v484 = v168;
    objc_msgSend(v481, "setScissorRect:", v482);
    v179 = (_DWORD *)v47[42];
    if (v179)
    {
      LODWORD(v180) = v179[9];
      LODWORD(v179) = v179[10];
LABEL_357:
      v501[0] = 0;
      LOBYTE(v501[1]) = v180;
      BYTE1(v501[1]) = BYTE1(v180);
      BYTE2(v501[1]) = BYTE2(v180);
      BYTE3(v501[1]) = BYTE3(v180);
      BYTE4(v501[1]) = (_BYTE)v179;
      BYTE5(v501[1]) = BYTE1(v179);
      BYTE6(v501[1]) = BYTE2(v179);
      HIBYTE(v501[1]) = BYTE3(v179);
      v189 = v479[8];
      if (!*(_QWORD *)(v189 + 96) && *(_QWORD *)(v189 + 104) == v501[1])
      {
        *(_QWORD *)(v189 + 96) = 0;
        *(_DWORD *)(v189 + 104) = v180;
        *(_DWORD *)(v189 + 108) = (_DWORD)v179;
      }
      goto LABEL_360;
    }
    v180 = v47[11];
    if (v180)
    {
      v181 = v47 + 12;
    }
    else
    {
      v180 = v47[35];
      if (!v180)
        goto LABEL_346;
      v181 = v47 + 36;
    }
    v182 = 80;
    if (*(_DWORD *)(v180 + 56) == 3)
      v182 = 196;
    v183 = *(_DWORD *)(v180 + v182);
    v184 = v183 >> *v181;
    if (v184 <= 1)
      v184 = 1;
    if (v183)
      LODWORD(v180) = v184;
    else
      LODWORD(v180) = 0;
LABEL_346:
    v179 = (_DWORD *)v47[11];
    if (v179)
    {
      v185 = v47 + 12;
    }
    else
    {
      v179 = (_DWORD *)v47[35];
      if (!v179)
        goto LABEL_357;
      v185 = v47 + 36;
    }
    v186 = 21;
    if (v179[14] == 3)
      v186 = 49;
    v187 = v179[v186];
    v188 = v187 >> *v185;
    if (v188 <= 1)
      v188 = 1;
    if (v187)
      LODWORD(v179) = v188;
    else
      LODWORD(v179) = 0;
    goto LABEL_357;
  }
  v120 = 0;
  v121 = 0;
  v122 = v479[8];
  v123 = v47[42];
  v124 = &v501[2];
  v125 = v123;
  v126 = v123;
  do
  {
    v493 = *(_OWORD *)(v14 + 60 + v120);
    LODWORD(v132) = DWORD2(v493);
    v133 = v493;
    if (v493 != 0)
    {
      if (v126)
      {
        if (*(_DWORD *)(v126 + 36) < DWORD2(v493))
          goto LABEL_254;
        v146 = *(_DWORD *)(v126 + 40);
      }
      else
      {
        v141 = v47[11];
        v142 = v47 + 12;
        if (v141 || (v141 = v47[35], v142 = v47 + 36, v141))
        {
          if (*(_DWORD *)(v141 + 56) == 3)
            v143 = 196;
          else
            v143 = 80;
          v144 = *(_DWORD *)(v141 + v143);
          v145 = v144 >> *v142;
          if (v145 <= 1)
            v145 = 1;
          if (v144)
            LODWORD(v141) = v145;
          else
            LODWORD(v141) = 0;
        }
        if (v141 < DWORD2(v493))
          goto LABEL_253;
        v162 = v47[11];
        v163 = v47 + 12;
        if (v162 || (v162 = v47[35], v163 = v47 + 36, v162))
        {
          if (*(_DWORD *)(v162 + 56) == 3)
            v164 = 196;
          else
            v164 = 84;
          v165 = *(_DWORD *)(v162 + v164);
          v166 = v165 >> *v163;
          if (v166 <= 1)
            v166 = 1;
          if (v165)
            v146 = v166;
          else
            v146 = 0;
        }
        else
        {
          v146 = 0;
        }
      }
      v134 = (_DWORD *)HIDWORD(*((_QWORD *)&v493 + 1));
      v147 = DWORD1(v493);
      if (v146 >= HIDWORD(v493) && v493 < DWORD2(v493) && DWORD1(v493) < HIDWORD(v493))
      {
        v157 = (int32x2_t)v493;
        goto LABEL_267;
      }
LABEL_253:
      if (!v126)
      {
        v132 = v47[11];
        v158 = v47 + 12;
        if (v132 || (v132 = v47[35], v158 = v47 + 36, v132))
        {
          if (*(_DWORD *)(v132 + 56) == 3)
            v159 = 196;
          else
            v159 = 80;
          v160 = *(_DWORD *)(v132 + v159);
          v161 = v160 >> *v158;
          if (v161 <= 1)
            v161 = 1;
          if (v160)
            LODWORD(v132) = v161;
          else
            LODWORD(v132) = 0;
        }
        goto LABEL_255;
      }
LABEL_254:
      LODWORD(v132) = *(_DWORD *)(v126 + 36);
LABEL_255:
      if (v126)
      {
        LODWORD(v134) = *(_DWORD *)(v126 + 40);
        goto LABEL_266;
      }
      v140 = v47[11];
      v134 = v47 + 12;
      if (v140)
        goto LABEL_259;
      v140 = v47[35];
      v134 = v47 + 36;
      if (v140)
        goto LABEL_259;
LABEL_302:
      v126 = 0;
      LODWORD(v134) = 0;
      goto LABEL_266;
    }
    if (v125)
    {
      LODWORD(v132) = *(_DWORD *)(v125 + 36);
      if (!v123)
        goto LABEL_229;
    }
    else
    {
      v135 = v47[11];
      v136 = v47 + 12;
      if (!v135)
      {
        v135 = v47[35];
        v136 = v47 + 36;
        if (!v135)
        {
          LODWORD(v132) = 0;
          if (!v123)
            goto LABEL_229;
          goto LABEL_214;
        }
      }
      if (*(_DWORD *)(v135 + 56) == 3)
        v137 = 196;
      else
        v137 = 80;
      v138 = *(_DWORD *)(v135 + v137);
      v139 = v138 >> *v136;
      if (v139 <= 1)
        v139 = 1;
      if (v138)
        LODWORD(v132) = v139;
      else
        LODWORD(v132) = 0;
      if (!v123)
      {
LABEL_229:
        v140 = v47[11];
        v134 = v47 + 12;
        if (v140 || (v140 = v47[35], v134 = v47 + 36, v140))
        {
          v125 = 0;
LABEL_259:
          v126 = 0;
          if (*(_DWORD *)(v140 + 56) == 3)
            v150 = 196;
          else
            v150 = 84;
          v151 = *(_DWORD *)(v140 + v150);
          LODWORD(v134) = v151 >> *v134;
          if (v134 <= 1)
            LODWORD(v134) = 1;
          if (!v151)
            LODWORD(v134) = 0;
          goto LABEL_266;
        }
        v125 = 0;
        goto LABEL_302;
      }
    }
LABEL_214:
    LODWORD(v134) = *(_DWORD *)(v123 + 40);
    v125 = v123;
    v126 = v123;
LABEL_266:
    v133 = 0;
    LODWORD(v147) = 0;
    v157 = 0;
    *(_QWORD *)&v493 = 0;
    *((_QWORD *)&v493 + 1) = __PAIR64__(v134, v132);
LABEL_267:
    v152 = v122 + v120;
    if (*(_OWORD *)(v122 + v120 + 96) == v493)
    {
      *(_DWORD *)(v152 + 96) = v133;
      v127 = v122 + v120;
      *(_DWORD *)(v127 + 100) = v147;
      *(_DWORD *)(v152 + 104) = v132;
      *(_DWORD *)(v127 + 108) = (_DWORD)v134;
      buf[v121] = 0;
      if (v123)
        goto LABEL_209;
    }
    else
    {
      buf[v121] = 1;
      if (v123)
      {
LABEL_209:
        LODWORD(v128) = *(_DWORD *)(v123 + 40);
        goto LABEL_210;
      }
    }
    v128 = v47[11];
    v153 = v47 + 12;
    if (v128 || (v128 = v47[35], v153 = v47 + 36, v128))
    {
      if (*(_DWORD *)(v128 + 56) == 3)
        v154 = 196;
      else
        v154 = 84;
      v155 = *(_DWORD *)(v128 + v154);
      v156 = v155 >> *v153;
      if (v156 <= 1)
        v156 = 1;
      if (v155)
        LODWORD(v128) = v156;
      else
        LODWORD(v128) = 0;
    }
LABEL_210:
    v129 = (v128 - HIDWORD(v493));
    v130 = vsub_s32(*(int32x2_t *)((char *)&v493 + 8), v157);
    *(_QWORD *)&v131 = v130.u32[0];
    *((_QWORD *)&v131 + 1) = v130.u32[1];
    *((_QWORD *)v124 - 2) = v133;
    *((_QWORD *)v124 - 1) = v129;
    *v124 = v131;
    v124 += 2;
    ++v121;
    v120 += 16;
  }
  while (16 * v119 != v120);
  v167 = 0;
  while (buf[v167])
  {
    if (v119 == ++v167)
      goto LABEL_360;
  }
  objc_msgSend(v481, "setScissorRects:count:", v501);
LABEL_360:
  v190 = *(unsigned __int8 *)(v14 + 56);
  if (v190 <= 2)
    objc_msgSend(v481, "setCullMode:", qword_1A007F0B8[v190]);
  if (!*(_BYTE *)(v14 + 57) || *(_BYTE *)(v14 + 57) == 1)
    objc_msgSend(v481, "setTriangleFillMode:");
  if (!*(_BYTE *)(v14 + 39) || *(_BYTE *)(v14 + 39) == 1)
    objc_msgSend(v481, "setDepthClipMode:");
  if (*((_BYTE *)v463 + 22))
  {
    v191 = *(unsigned __int8 *)(v14 + 189);
    if (*(_BYTE *)(v14 + 189))
    {
      if (v191 <= 7
        || (unint64_t)v501 < v14 + 192 + 8 * v191 && v14 + 192 < (unint64_t)&v501[v191])
      {
        v192 = 0;
        goto LABEL_374;
      }
      v192 = v191 & 0xF8;
      v453 = (float *)&v502;
      v454 = (const float *)(v14 + 224);
      v455 = v192;
      do
      {
        v456 = v454 - 8;
        v517 = vld2q_f32(v456);
        v518 = vld2q_f32(v454);
        v457 = v517.val[0];
        v458 = v453 - 8;
        vst2q_f32(v458, *(float32x4x2_t *)((char *)&v517 + 16));
        v459 = v518.val[0];
        vst2q_f32(v453, *(float32x4x2_t *)((char *)&v518 + 16));
        v453 += 16;
        v454 += 16;
        v455 -= 8;
      }
      while (v455);
      if (v192 != v191)
      {
LABEL_374:
        v193 = v191 - v192;
        v194 = 8 * v192;
        v195 = (int32x2_t *)&v501[v192];
        v196 = (int32x2_t *)(v194 + v14 + 192);
        do
        {
          v197 = *v196++;
          *v195++ = vrev64_s32(v197);
          --v193;
        }
        while (v193);
      }
    }
    else
    {
      v191 = 0;
      v501[0] = 0;
    }
    objc_msgSend(v481, "setVertexAmplificationCount:viewMappings:", v191, v501);
  }
  *(_QWORD *)(v479[6] + 16) = v14;
LABEL_380:
  if (!*(_BYTE *)(v14 + 48) && *(_BYTE *)(v14 + 208))
    objc_msgSend(v481, "setStencilReferenceValue:", *(unsigned int *)(v475 + 40));
  v198 = *(_QWORD *)(v475 + 64);
  if (v198)
    *(_QWORD *)(*(_QWORD *)(v475 + 32) + 224) = v198;
  v199 = v480[28];
  v200 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v480[2] + 40) + 8) + 8);
  v468 = v199;
  if (v199)
  {
    v506 = 0u;
    v507 = 0u;
    v504 = 0u;
    v505 = 0u;
    v502 = 0u;
    v503 = 0u;
    memset(v501, 0, sizeof(v501));
    v499 = 0u;
    v500 = 0u;
    v497 = 0u;
    v498 = 0u;
    v495 = 0u;
    v496 = 0u;
    v493 = 0u;
    v494 = 0u;
    v201 = *(_QWORD *)(v199 + 64);
    v202 = *(_QWORD *)(v199 + 72);
    if (v201 == v202)
    {
      v203 = 0;
      v205 = 0;
    }
    else
    {
      v203 = 0;
      v204 = 0;
      v205 = 0;
      do
      {
        v206 = *(_QWORD **)v201;
        v207 = *(_DWORD *)(*(_QWORD *)v201 + 112);
        if (v207 >= 2 && !v206[13])
          v206[13] = v479[7];
        v208 = v206[3];
        if (v207 <= 1)
          v209 = 0;
        else
          v209 = v479[3];
        v210 = v206[5] + v209 * v206[15];
        v211 = *(_QWORD *)(v208 + 24);
        v212 = v478[20];
        v213 = *(_QWORD *)(v212 + 8 * v203);
        if (v213)
          v214 = v213 == v211;
        else
          v214 = 0;
        if (v214)
        {
          v222 = v478[1];
          if (*(_QWORD *)(v222 + 8 * v203) != v210)
          {
            *(_QWORD *)(v222 + 8 * v203) = v210;
            v223 = v479[5];
            v224 = (unint64_t *)(v211 + 16);
            v225 = atomic_load(v224);
            if (v225 < v223)
            {
              do
              {
                v226 = __ldaxr(v224);
                if (v226 == v225)
                {
                  if (!__stlxr(v223, v224))
                    break;
                }
                else
                {
                  __clrex();
                }
                v225 = v226;
              }
              while (v226 < v223);
            }
            objc_msgSend(v481, "setVertexBufferOffset:atIndex:");
          }
        }
        else
        {
          v215 = 8 * v203;
          *(_QWORD *)(v212 + v215) = v211;
          *(_QWORD *)(v478[1] + v215) = v210;
          if (v204 >= 0x10)
          {
            objc_msgSend(v481, "setVertexBuffers:offsets:withRange:", v501, &v493, v203, v204);
            v203 += v204;
            v204 = 0;
          }
          v216 = *(_QWORD *)(v208 + 24);
          v217 = v479[5];
          v218 = (unint64_t *)(v216 + 16);
          v219 = atomic_load((unint64_t *)(v216 + 16));
          if (v219 < v217)
          {
            do
            {
              v221 = __ldaxr(v218);
              if (v221 == v219)
              {
                if (!__stlxr(v217, v218))
                  break;
              }
              else
              {
                __clrex();
              }
              v219 = v221;
            }
            while (v221 < v217);
          }
          objc_storeStrong((id *)&v501[v203 + v204], *(id *)(v216 + 32));
          v220 = v479[3];
          if (*(_DWORD *)(*(_QWORD *)v201 + 112) <= 1u)
            v220 = 0;
          *((_QWORD *)&v493 + v203 + v204++) = *(_QWORD *)(*(_QWORD *)v201 + 40)
                                             + v220 * *(_QWORD *)(*(_QWORD *)v201 + 120);
        }
        ++v205;
        v201 += 16;
      }
      while (v201 != v202);
      if (v204 == 1)
        objc_msgSend(v481, "setVertexBuffers:offsets:withRange:", v501, &v493, v203, 1);
    }

    v227 = v203 + v205;
  }
  else
  {
    v227 = 0;
  }
  v506 = 0u;
  v507 = 0u;
  v504 = 0u;
  v505 = 0u;
  v502 = 0u;
  v503 = 0u;
  memset(v501, 0, sizeof(v501));
  v499 = 0u;
  v500 = 0u;
  v497 = 0u;
  v498 = 0u;
  v495 = 0u;
  v496 = 0u;
  v493 = 0u;
  v494 = 0u;
  if (!v200[7])
    goto LABEL_464;
  v228 = 0;
  v229 = 0;
  v230 = v227;
  while (2)
  {
    v231 = (unsigned __int8 *)(v200[6] + 2 * v229);
    v232 = *(_QWORD *)(v480[4] + 16 * *v231);
    if (v232)
    {
      v233 = v227;
      v234 = *(_QWORD *)(v232 + 24);
      if (!v234)
        goto LABEL_426;
      v235 = *(_QWORD *)(v232 + 40);
      if (*(_DWORD *)(v232 + 112) < 2u)
        v236 = *(_QWORD *)(v232 + 8) * v235;
      else
        v236 = v235 + v479[3] * *(_QWORD *)(v232 + 120);
      v237 = v231[1];
      v238 = *(_QWORD *)(v234 + 24);
      v239 = v478[20];
      v240 = *(_QWORD *)(v239 + 8 * v237);
      if (v240)
        v241 = v240 == v238;
      else
        v241 = 0;
      v242 = v241;
      if (!v241)
        *(_QWORD *)(v239 + 8 * v237) = v238;
      if (v228)
      {
        if (v228 > 0xF || v230 + v228 != v237)
        {
          objc_msgSend(v481, "setVertexBuffers:offsets:withRange:", v501, &v493, v230, v228);
          v228 = 0;
          goto LABEL_445;
        }
      }
      else
      {
LABEL_445:
        v230 = v237;
      }
      v243 = v478[1];
      if (v242)
      {
        if (*(_QWORD *)(v243 + 8 * v237) != v236)
        {
          *(_QWORD *)(v243 + 8 * v237) = v236;
          v244 = v479[5];
          v245 = (unint64_t *)(*(_QWORD *)(v234 + 24) + 16);
          v246 = atomic_load(v245);
          v227 = v233;
          if (v246 < v244)
          {
            do
            {
              v247 = __ldaxr(v245);
              if (v247 == v246)
              {
                if (!__stlxr(v244, v245))
                  break;
              }
              else
              {
                __clrex();
              }
              v246 = v247;
            }
            while (v247 < v244);
          }
          objc_msgSend(v481, "setVertexBufferOffset:atIndex:", v236, v237);
          goto LABEL_427;
        }
LABEL_426:
        v227 = v233;
        goto LABEL_427;
      }
      *(_QWORD *)(v243 + 8 * v237) = v236;
      v248 = *(_QWORD *)(v234 + 24);
      v249 = v479[5];
      v250 = (unint64_t *)(v248 + 16);
      v251 = atomic_load((unint64_t *)(v248 + 16));
      v227 = v233;
      if (v251 < v249)
      {
        do
        {
          v254 = __ldaxr(v250);
          if (v254 == v251)
          {
            if (!__stlxr(v249, v250))
              break;
          }
          else
          {
            __clrex();
          }
          v251 = v254;
        }
        while (v254 < v249);
      }
      v252 = *(void **)(v248 + 32);
      v253 = v252;
      objc_storeStrong((id *)&v501[v228], v252);
      *((_QWORD *)&v493 + v228) = v236;

      ++v228;
    }
LABEL_427:
    if ((unint64_t)++v229 < v200[7])
      continue;
    break;
  }
  if (v228)
    objc_msgSend(v481, "setVertexBuffers:offsets:withRange:", v501, &v493, v230, v228);
LABEL_464:

  v506 = 0u;
  v507 = 0u;
  v504 = 0u;
  v505 = 0u;
  v502 = 0u;
  v503 = 0u;
  memset(v501, 0, sizeof(v501));
  v499 = 0u;
  v500 = 0u;
  v497 = 0u;
  v498 = 0u;
  v495 = 0u;
  v496 = 0u;
  v493 = 0u;
  v494 = 0u;
  if (!v200[5])
  {
    v473 = 0;
    goto LABEL_521;
  }
  v473 = 0;
  v255 = 0;
  v256 = 0;
  while (2)
  {
    v257 = (unsigned __int8 *)(v200[4] + 2 * v256);
    v258 = *v257;
    v259 = v257[1];
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v480 + 16))(v480, v258))
    {
      v260 = 16 * v258;
      v261 = *(_QWORD *)(v480[8] + 16 * v258);
      if (v261)
      {
        v262 = v261 + 24;
      }
      else
      {
        if (GEOGetGeoGLDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
        v263 = (id)GEOGetGeoGLDefaultLog_log;
        if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
        {
          v264 = **(_QWORD **)(*(_QWORD *)(v480[1] + 24) + 8 * v258);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v264;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "false";
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalRenderItemEncoder.mm";
          v490 = 1024;
          v491 = 487;
          _os_log_impl(&dword_19F029000, v263, OS_LOG_TYPE_ERROR, "You must bind constant data for every one you use in your shader:%s: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
        }

        v262 = 24;
      }
      v265 = v227;
      v266 = *(_QWORD *)v262;
      if (v266)
        v267 = *(_QWORD *)(v266 + 24);
      else
        v267 = 0;
      v268 = 1 << v258;
      if ((v473 & v268) != 0)
      {
        if (!v267)
          goto LABEL_466;
        goto LABEL_508;
      }
      v269 = *(_QWORD *)(v480[8] + v260);
      v270 = v479[3];
      v271 = v479[4];
      if (!*(_QWORD *)(v269 + 24))
        ggl::BufferData::prepareBufferForDevice(*(std::mutex **)(v480[8] + v260), v463, 0);
      if (*(_BYTE *)(v269 + 18) == 1 && *(_QWORD *)(v269 + 192) != v271 && *(_DWORD *)(v269 + 112))
      {
        *(_QWORD *)(v269 + 192) = v271;
        *(_OWORD *)(v269 + 56) = *(_OWORD *)(v269 + 40);
      }
      if (*(_DWORD *)(v269 + 112) <= 1u)
        v272 = 0;
      else
        v272 = v270;
      v273 = *(int64x2_t *)(v269 + 56);
      v274 = vaddq_s64(vdupq_n_s64(v272 * *(_QWORD *)(v269 + 120)), v273);
      *(_QWORD *)(v269 + 56) = 0;
      *(_QWORD *)(v269 + 64) = 0;
      v275 = *(_QWORD *)(v269 + 24);
      *(_QWORD *)buf = *(_QWORD *)(v269 + 72) + v273.i64[0];
      *(_QWORD *)&buf[8] = v275;
      *(int64x2_t *)&buf[16] = v274;
      v492 = 0;
      v261 = *(_QWORD *)(v480[8] + v260);
      v276 = *(_QWORD *)(v261 + 24);
      if (*(_DWORD *)(v261 + 112) >= 2u && !*(_QWORD *)(v261 + 104))
        *(_QWORD *)(v261 + 104) = v479[7];
      if ((vmovn_s64(vceqq_s64(v274, vdupq_laneq_s64(v274, 1))).u32[0] & 1) == 0)
        ggl::MetalResourceManager::upload(v469, (uint64_t)buf, v261);
      v267 = *(_QWORD *)(v276 + 24);
      v277 = v479[5];
      v278 = (unint64_t *)(v267 + 16);
      v279 = atomic_load((unint64_t *)(v267 + 16));
      if (v279 < v277)
      {
        do
        {
          v282 = __ldaxr(v278);
          if (v282 == v279)
          {
            if (!__stlxr(v277, v278))
              break;
          }
          else
          {
            __clrex();
          }
          v279 = v282;
        }
        while (v282 < v277);
      }
      v280 = v492;
      if (v492 == &v490)
      {
        v280 = &v490;
        v281 = 4;
LABEL_506:
        (*(void (**)(void))(*(_QWORD *)v280 + 8 * v281))();
      }
      else if (v492)
      {
        v281 = 5;
        goto LABEL_506;
      }
      v473 |= v268;
      if (!v267)
        goto LABEL_466;
LABEL_508:
      v283 = v478[20];
      v284 = *(_QWORD *)(v283 + 8 * v259);
      if (v284 && v284 == v267)
      {
LABEL_466:
        v227 = v265;
      }
      else
      {
        *(_QWORD *)(v283 + 8 * v259) = v267;
        v285 = *(void **)(v267 + 32);
        v286 = v285;
        if (v255)
        {
          if (v255 <= 0xF && v265 + v255 == v259)
          {
            v259 = v265;
          }
          else
          {
            objc_msgSend(v481, "setVertexBuffers:offsets:withRange:", v501, &v493, v265, v255);
            v255 = 0;
          }
        }
        objc_storeStrong((id *)&v501[v255], v285);
        v287 = v479[3];
        if (*(_DWORD *)(v261 + 112) <= 1u)
          v287 = 0;
        *((_QWORD *)&v493 + v255) = *(_QWORD *)(v261 + 40) + v287 * *(_QWORD *)(v261 + 120);

        ++v255;
        v227 = v259;
      }
    }
    if ((unint64_t)++v256 < v200[5])
      continue;
    break;
  }
  if (v255)
    objc_msgSend(v481, "setVertexBuffers:offsets:withRange:", v501, &v493, v227, v255);
LABEL_521:

  if (v200[9])
  {
    v471 = 0;
    v288 = 0;
    while (1)
    {
      v289 = (unsigned __int8 *)(v200[8] + 2 * v288);
      v290 = *v289;
      v291 = v289[1];
      v292 = *(unsigned __int8 *)(v200[10] + 2 * v288 + 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v480 + 24))(v480, v290))
      {
        if (*(_QWORD *)(v480[12] + 8 * v290))
          v293 = *(const ggl::Texture **)(v480[12] + 8 * v290);
        else
          v293 = (const ggl::Texture *)v479[9];
        v294 = *((_QWORD *)v293 + 3);
        v295 = 1 << v290;
        if ((v471 & (1 << v290)) != 0)
        {
          v296 = v469;
          if (!v294)
            goto LABEL_523;
        }
        else
        {
          v297 = v479[5];
          v298 = *((_QWORD *)v293 + 3);
          v296 = v469;
          if (v294 == 3735927469)
          {
            v299 = *(const char **)(v475 + 16);
            if (GEOGetGeoGLDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
            v300 = (id)GEOGetGeoGLDefaultLog_log;
            if (os_log_type_enabled(v300, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v501[0]) = 136315906;
              v301 = "";
              if (v299)
                v301 = v299;
              *(_QWORD *)((char *)v501 + 4) = v301;
              WORD2(v501[1]) = 2080;
              *(_QWORD *)((char *)&v501[1] + 6) = "!dataHolder->isStale()";
              HIWORD(v501[2]) = 2080;
              v501[3] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalRenderItemEncoder.mm";
              LOWORD(v502) = 1024;
              *(_DWORD *)((char *)&v502 + 2) = 61;
              _os_log_impl(&dword_19F029000, v300, OS_LOG_TYPE_ERROR, "Marking stale resource as used by gpu - %s: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)v501, 0x26u);
            }

            v298 = *((_QWORD *)v293 + 3);
            v296 = v469;
          }
          v302 = (unint64_t *)(v298 + 16);
          v303 = atomic_load(v302);
          if (v303 < v297)
          {
            do
            {
              v306 = __ldaxr(v302);
              if (v306 == v303)
              {
                if (!__stlxr(v297, v302))
                  break;
              }
              else
              {
                __clrex();
              }
              v303 = v306;
            }
            while (v306 < v297);
          }
          v471 |= v295;
          if (!v294)
            goto LABEL_523;
        }
        SamplerStateResource = ggl::MetalResourceManager::getSamplerStateResource(v296, v293);
        if (SamplerStateResource)
        {
          if (*(_BYTE *)(v294 + 120) == 1)
          {
            v305 = (id *)(*(_QWORD *)(v294 + 32) + 8 * *(unsigned int *)(v294 + 64));
LABEL_551:
            v293 = (const ggl::Texture *)*v305;
          }
          else if (!*(_BYTE *)(v294 + 120))
          {
            v305 = *(id **)(v294 + 32);
            goto LABEL_551;
          }
          v307 = v478[26];
          v308 = *(_QWORD *)(v307 + 8 * v291);
          if (!v308 || v308 != v294)
          {
            *(_QWORD *)(v307 + 8 * v291) = v294;
            objc_msgSend(v481, "setVertexTexture:atIndex:", v293, v291);
          }
          v309 = *(id *)(SamplerStateResource + 32);
          v310 = v478[32];
          v311 = *(_QWORD *)(v310 + 8 * v292);
          if (v311)
            v312 = v311 == SamplerStateResource;
          else
            v312 = 0;
          v313 = v312;
          if (!v312)
            *(_QWORD *)(v310 + 8 * v292) = SamplerStateResource;
          v314 = v479[5];
          v315 = (unint64_t *)(SamplerStateResource + 16);
          v316 = atomic_load((unint64_t *)(SamplerStateResource + 16));
          if (v316 < v314)
          {
            do
            {
              v317 = __ldaxr(v315);
              if (v317 == v316)
              {
                if (!__stlxr(v314, v315))
                  break;
              }
              else
              {
                __clrex();
              }
              v316 = v317;
            }
            while (v317 < v314);
          }
          if ((v313 & 1) == 0)
            objc_msgSend(v481, "setVertexSamplerState:atIndex:", v309, v292);

        }
      }
LABEL_523:
      if ((unint64_t)++v288 >= v200[9])
        goto LABEL_573;
    }
  }
  v471 = 0;
LABEL_573:
  v318 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v480[2] + 40) + 8) + 24);
  v506 = 0u;
  v507 = 0u;
  v504 = 0u;
  v505 = 0u;
  v502 = 0u;
  v503 = 0u;
  memset(v501, 0, sizeof(v501));
  v499 = 0u;
  v500 = 0u;
  v497 = 0u;
  v498 = 0u;
  v495 = 0u;
  v496 = 0u;
  v493 = 0u;
  v494 = 0u;
  v476 = v318;
  v319 = (void *)v318[7];
  if (!v319)
    goto LABEL_598;
  v320 = 0;
  v321 = 0;
  v322 = 0;
  v323 = v476;
  while (2)
  {
    v324 = (unsigned __int8 *)(v323[6] + 2 * v322);
    v325 = *v324;
    v326 = v324[1];
    if (v321)
    {
      if (v321 > 0xF || v320 + v321 != v326)
      {
        objc_msgSend(v481, "setFragmentBuffers:offsets:withRange:", v501, &v493, v320, v321);
        v321 = 0;
        goto LABEL_579;
      }
    }
    else
    {
LABEL_579:
      v320 = v326;
    }
    v327 = *(_QWORD *)(v480[4] + 16 * v325);
    v328 = *(_QWORD *)(v327 + 24);
    v329 = *(_QWORD *)(v328 + 24);
    v330 = v479[5];
    v331 = v329;
    if (v329 == 3735927469)
    {
      v332 = *(const char **)(v475 + 16);
      if (GEOGetGeoGLDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
      v333 = (id)GEOGetGeoGLDefaultLog_log;
      if (os_log_type_enabled(v333, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v334 = "";
        if (v332)
          v334 = v332;
        *(_QWORD *)&buf[4] = v334;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "!dataHolder->isStale()";
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalRenderItemEncoder.mm";
        v490 = 1024;
        v491 = 61;
        _os_log_impl(&dword_19F029000, v333, OS_LOG_TYPE_ERROR, "Marking stale resource as used by gpu - %s: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
      }

      v331 = *(_QWORD *)(v328 + 24);
    }
    v335 = (unint64_t *)(v331 + 16);
    v336 = atomic_load(v335);
    if (v336 < v330)
    {
      do
      {
        v340 = __ldaxr(v335);
        if (v340 == v336)
        {
          if (!__stlxr(v330, v335))
            break;
        }
        else
        {
          __clrex();
        }
        v336 = v340;
      }
      while (v340 < v330);
    }
    v337 = *(void **)(v329 + 32);
    v338 = v337;
    objc_storeStrong((id *)&v501[v321], v337);
    v339 = v479[3];
    if (*(_DWORD *)(v327 + 112) <= 1u)
      v339 = 0;
    *((_QWORD *)&v493 + v321) = *(_QWORD *)(v327 + 40) + v339 * *(_QWORD *)(v327 + 120);

    ++v321;
    ++v322;
    v323 = v476;
    if (v322 < v476[7])
      continue;
    break;
  }
  objc_msgSend(v481, "setFragmentBuffers:offsets:withRange:", v501, &v493, v320, v321);
  v319 = (void *)*((_QWORD *)&v507 + 1);
LABEL_598:

  v506 = 0u;
  v507 = 0u;
  v504 = 0u;
  v505 = 0u;
  v502 = 0u;
  v503 = 0u;
  memset(v501, 0, sizeof(v501));
  v499 = 0u;
  v500 = 0u;
  v497 = 0u;
  v498 = 0u;
  v495 = 0u;
  v496 = 0u;
  v493 = 0u;
  v494 = 0u;
  v341 = v476;
  if (!v476[5])
    goto LABEL_662;
  v466 = 0;
  v342 = 0;
  v343 = 0;
  while (2)
  {
    v345 = (unsigned __int8 *)(v341[4] + 2 * v343);
    v346 = *v345;
    v344 = v345[1];
    if (!(*(unsigned int (**)(_QWORD *, uint64_t))(*v480 + 16))(v480, v346))
      goto LABEL_602;
    v347 = *(_QWORD *)(v480[8] + 16 * v346);
    if (v347)
    {
      v348 = *(_QWORD *)(v347 + 24);
      if (v348)
        goto LABEL_606;
LABEL_612:
      v349 = 0;
    }
    else
    {
      if (GEOGetGeoGLDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
      v350 = (id)GEOGetGeoGLDefaultLog_log;
      if (os_log_type_enabled(v350, OS_LOG_TYPE_ERROR))
      {
        v351 = **(_QWORD **)(*(_QWORD *)(v480[1] + 24) + 8 * v346);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v351;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "false";
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalRenderItemEncoder.mm";
        v490 = 1024;
        v491 = 647;
        _os_log_impl(&dword_19F029000, v350, OS_LOG_TYPE_ERROR, "You must bind constant data for every one you use in your shader:%s: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
      }

      v348 = MEMORY[0x18];
      if (!MEMORY[0x18])
        goto LABEL_612;
LABEL_606:
      v349 = *(_QWORD *)(v348 + 24);
    }
    v352 = 1 << v346;
    if ((v473 & (1 << v346)) == 0)
    {
      v464 = v342;
      v353 = *(_QWORD *)(v480[8] + 16 * v346);
      v355 = v479[3];
      v354 = v479[4];
      if (!*(_QWORD *)(v353 + 24))
        ggl::BufferData::prepareBufferForDevice(*(std::mutex **)(v480[8] + 16 * v346), v463, 0);
      if (*(_BYTE *)(v353 + 18) == 1 && *(_QWORD *)(v353 + 192) != v354 && *(_DWORD *)(v353 + 112))
      {
        *(_QWORD *)(v353 + 192) = v354;
        *(_OWORD *)(v353 + 56) = *(_OWORD *)(v353 + 40);
      }
      if (*(_DWORD *)(v353 + 112) <= 1u)
        v356 = 0;
      else
        v356 = v355;
      v357 = *(int64x2_t *)(v353 + 56);
      v358 = vaddq_s64(vdupq_n_s64(v356 * *(_QWORD *)(v353 + 120)), v357);
      *(_QWORD *)(v353 + 56) = 0;
      *(_QWORD *)(v353 + 64) = 0;
      v359 = *(_QWORD *)(v353 + 24);
      *(_QWORD *)buf = *(_QWORD *)(v353 + 72) + v357.i64[0];
      *(_QWORD *)&buf[8] = v359;
      *(int64x2_t *)&buf[16] = v358;
      v492 = 0;
      v347 = *(_QWORD *)(v480[8] + 16 * v346);
      v360 = *(_QWORD *)(v347 + 24);
      if (*(_DWORD *)(v347 + 112) >= 2u && !*(_QWORD *)(v347 + 104))
        *(_QWORD *)(v347 + 104) = v479[7];
      v342 = v464;
      if ((vmovn_s64(vceqq_s64(v358, vdupq_laneq_s64(v358, 1))).u32[0] & 1) == 0)
        ggl::MetalResourceManager::upload(v469, (uint64_t)buf, v347);
      v349 = *(_QWORD *)(v360 + 24);
      v361 = v479[5];
      v362 = v349;
      if (v349 == 3735927469)
      {
        v363 = *(const char **)(v475 + 16);
        if (GEOGetGeoGLDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
        v364 = (id)GEOGetGeoGLDefaultLog_log;
        if (os_log_type_enabled(v364, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v508 = 136315906;
          v365 = "";
          if (v363)
            v365 = v363;
          v509 = v365;
          v510 = 2080;
          v511 = "!dataHolder->isStale()";
          v512 = 2080;
          v513 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalRenderItemEncoder.mm";
          v514 = 1024;
          v515 = 61;
          _os_log_impl(&dword_19F029000, v364, OS_LOG_TYPE_ERROR, "Marking stale resource as used by gpu - %s: Assertion with expression - %s : Failed in file - %s line - %i", v508, 0x26u);
        }

        v342 = v464;
        v362 = *(_QWORD *)(v360 + 24);
      }
      v366 = (unint64_t *)(v362 + 16);
      v367 = atomic_load(v366);
      if (v367 < v361)
      {
        do
        {
          v370 = __ldaxr(v366);
          if (v370 == v367)
          {
            if (!__stlxr(v361, v366))
              break;
          }
          else
          {
            __clrex();
          }
          v367 = v370;
        }
        while (v370 < v361);
      }
      v368 = v492;
      if (v492 == &v490)
      {
        v368 = &v490;
        v369 = 4;
      }
      else
      {
        if (!v492)
          goto LABEL_649;
        v369 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v368 + 8 * v369))();
LABEL_649:
      v473 |= v352;
      v341 = v476;
      if (!v349)
        goto LABEL_602;
      goto LABEL_650;
    }
    v341 = v476;
    if (!v349)
      goto LABEL_602;
LABEL_650:
    v371 = *(void **)(v349 + 32);
    v372 = v371;
    v373 = v478[23];
    v374 = *(_QWORD *)(v373 + 8 * v344);
    if (v374 && v374 == v349)
    {
      v344 = v466;
    }
    else
    {
      *(_QWORD *)(v373 + 8 * v344) = v349;
      if (v342)
      {
        if (v342 <= 0xF && v466 + v342 == v344)
        {
          v344 = v466;
        }
        else
        {
          objc_msgSend(v481, "setFragmentBuffers:offsets:withRange:", v501, &v493, v466, v342);
          v342 = 0;
        }
      }
      objc_storeStrong((id *)&v501[v342], v371);
      v375 = v479[3];
      if (*(_DWORD *)(v347 + 112) <= 1u)
        v375 = 0;
      *((_QWORD *)&v493 + v342++) = *(_QWORD *)(v347 + 40) + v375 * *(_QWORD *)(v347 + 120);
    }

    v466 = v344;
    v341 = v476;
LABEL_602:
    if ((unint64_t)++v343 < v341[5])
      continue;
    break;
  }
  if (v342)
    objc_msgSend(v481, "setFragmentBuffers:offsets:withRange:", v501, &v493, v466, v342);
LABEL_662:

  v376 = v476;
  if (v476[9])
  {
    v377 = 0;
    while (2)
    {
      v378 = (unsigned __int8 *)(v376[8] + 2 * v377);
      v379 = *v378;
      v380 = v378[1];
      v381 = *(unsigned __int8 *)(v376[10] + 2 * v377 + 1);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t))(*v480 + 24))(v480, v379))
        goto LABEL_664;
      if (*(_QWORD *)(v480[12] + 8 * v379))
        v382 = *(const ggl::Texture **)(v480[12] + 8 * v379);
      else
        v382 = (const ggl::Texture *)v479[9];
      v383 = (ggl::MetalTextureResource *)*((_QWORD *)v382 + 3);
      v384 = 1 << v379;
      if ((v471 & (1 << v379)) != 0)
      {
        if (!v383)
          goto LABEL_664;
LABEL_689:
        v394 = ggl::MetalResourceManager::getSamplerStateResource(v469, v382);
        if (v394)
        {
          if (*((_BYTE *)v383 + 120) == 1)
          {
            v395 = (id *)(*((_QWORD *)v383 + 4) + 8 * *((unsigned int *)v383 + 16));
LABEL_699:
            v382 = (const ggl::Texture *)*v395;
          }
          else if (!*((_BYTE *)v383 + 120))
          {
            v395 = (id *)*((_QWORD *)v383 + 4);
            goto LABEL_699;
          }
          v397 = v478[29];
          v398 = *(ggl::MetalTextureResource **)(v397 + 8 * v380);
          if (!v398 || v398 != v383)
          {
            *(_QWORD *)(v397 + 8 * v380) = v383;
            objc_msgSend(v481, "setFragmentTexture:atIndex:", v382, v380);
          }
          v399 = *(id *)(v394 + 32);
          v400 = v478[35];
          v401 = *(_QWORD *)(v400 + 8 * v381);
          if (v401)
            v402 = v401 == v394;
          else
            v402 = 0;
          v403 = v402;
          if (!v402)
            *(_QWORD *)(v400 + 8 * v381) = v394;
          v404 = v479[5];
          v405 = (unint64_t *)(v394 + 16);
          v406 = atomic_load((unint64_t *)(v394 + 16));
          if (v406 < v404)
          {
            do
            {
              v407 = __ldaxr(v405);
              if (v407 == v406)
              {
                if (!__stlxr(v404, v405))
                  break;
              }
              else
              {
                __clrex();
              }
              v406 = v407;
            }
            while (v407 < v404);
          }
          if ((v403 & 1) == 0)
            objc_msgSend(v481, "setFragmentSamplerState:atIndex:", v399, v381);

        }
LABEL_664:
        ++v377;
        v376 = v476;
        if (v377 >= v476[9])
          goto LABEL_720;
        continue;
      }
      break;
    }
    if (!v383)
    {
      v385 = *((_DWORD *)v382 + 14);
      if (v385 == 1)
      {
        v386 = ggl::MetalResourceManager::newTexture(v469, v382);
LABEL_677:
        v383 = v386;
      }
      else
      {
        if (v385 == 4)
        {
          v386 = ggl::MetalResourceManager::prepareTexture((std::__shared_weak_count **)v469, v382, v479[5]);
          goto LABEL_677;
        }
        v383 = 0;
      }
    }
    v387 = v479[5];
    v388 = *((_QWORD *)v382 + 3);
    if (v388 == 3735927469)
    {
      v389 = *(const char **)(v475 + 16);
      if (GEOGetGeoGLDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
      v390 = (id)GEOGetGeoGLDefaultLog_log;
      if (os_log_type_enabled(v390, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v501[0]) = 136315906;
        v391 = "";
        if (v389)
          v391 = v389;
        *(_QWORD *)((char *)v501 + 4) = v391;
        WORD2(v501[1]) = 2080;
        *(_QWORD *)((char *)&v501[1] + 6) = "!dataHolder->isStale()";
        HIWORD(v501[2]) = 2080;
        v501[3] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalRenderItemEncoder.mm";
        LOWORD(v502) = 1024;
        *(_DWORD *)((char *)&v502 + 2) = 61;
        _os_log_impl(&dword_19F029000, v390, OS_LOG_TYPE_ERROR, "Marking stale resource as used by gpu - %s: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)v501, 0x26u);
      }

      v388 = *((_QWORD *)v382 + 3);
    }
    v392 = (unint64_t *)(v388 + 16);
    v393 = atomic_load(v392);
    if (v393 < v387)
    {
      do
      {
        v396 = __ldaxr(v392);
        if (v396 == v393)
        {
          if (!__stlxr(v387, v392))
            break;
        }
        else
        {
          __clrex();
        }
        v393 = v396;
      }
      while (v396 < v387);
    }
    v471 |= v384;
    if (!v383)
      goto LABEL_664;
    goto LABEL_689;
  }
LABEL_720:
  if (((*(_BYTE *)(*(_QWORD *)(v475 + 24) + 58) - 1) & 0xFC) != 0)
    v408 = 0;
  else
    v408 = (*(_BYTE *)(*(_QWORD *)(v475 + 24) + 58) - 1) + 1;
  if (v468 && (v409 = *(_QWORD *)(v468 + 96)) != 0)
  {
    v462 = v408;
    v410 = *(_QWORD *)(v409 + 24);
    if (*(_DWORD *)(v409 + 112) >= 2u && !*(_QWORD *)(v409 + 104))
      *(_QWORD *)(v409 + 104) = v479[7];
    v411 = *(_QWORD *)(v410 + 24);
    v412 = v479[5];
    v413 = v411;
    if (v411 == 3735927469)
    {
      v414 = *(const char **)(v475 + 16);
      if (GEOGetGeoGLDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
      v415 = (id)GEOGetGeoGLDefaultLog_log;
      if (os_log_type_enabled(v415, OS_LOG_TYPE_ERROR))
      {
        v416 = "";
        if (v414)
          v416 = v414;
        LODWORD(v501[0]) = 136315906;
        *(_QWORD *)((char *)v501 + 4) = v416;
        WORD2(v501[1]) = 2080;
        *(_QWORD *)((char *)&v501[1] + 6) = "!dataHolder->isStale()";
        HIWORD(v501[2]) = 2080;
        v501[3] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalRenderItemEncoder.mm";
        LOWORD(v502) = 1024;
        *(_DWORD *)((char *)&v502 + 2) = 61;
        _os_log_impl(&dword_19F029000, v415, OS_LOG_TYPE_ERROR, "Marking stale resource as used by gpu - %s: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)v501, 0x26u);
      }

      v413 = *(_QWORD *)(v410 + 24);
    }
    v417 = (unint64_t *)(v413 + 16);
    v418 = atomic_load(v417);
    v419 = v462;
    if (v418 < v412)
    {
      while (1)
      {
        v420 = __ldaxr(v417);
        if (v420 == v418)
        {
          if (!__stlxr(v412, v417))
          {
            v421 = 1;
            goto LABEL_742;
          }
        }
        else
        {
          __clrex();
        }
        v421 = 0;
LABEL_742:
        if ((v421 & 1) == 0)
        {
          v418 = v420;
          if (v420 < v412)
            continue;
        }
        break;
      }
    }
    v465 = *(id *)(v411 + 32);
    v422 = v475;
    if (*(_QWORD *)(v475 + 96))
    {
      for (i = 0; i != *(_QWORD *)(v475 + 96); ++i)
      {
        v424 = *(_QWORD *)(v422 + 88);
        if (!v424)
          v424 = v475 + 72;
        v425 = (uint64_t *)(v424 + 16 * i);
        v427 = *v425;
        v426 = v425[1];
        v428 = *(_QWORD *)(v468 + 96);
        v429 = v426 - v427;
        if (v429)
        {
          v477 = v429;
          v474 = *(_QWORD *)(v428 + 40);
          v472 = *(_QWORD *)(v428 + 8);
        }
        else
        {
          v474 = *(_QWORD *)(v428 + 40);
          v472 = *(_QWORD *)(v428 + 8);
          v477 = (*(_QWORD *)(v428 + 48) - v474) / v472 - v427;
        }
        v430 = (ggl::MetalResourceManager *)v479[3];
        if (*(_DWORD *)(v428 + 112) <= 1u)
          v430 = 0;
        v470 = v430;
        v467 = *(_QWORD *)(v428 + 120);
        v506 = 0u;
        v507 = 0u;
        v504 = 0u;
        v505 = 0u;
        v502 = 0u;
        v503 = 0u;
        memset(v501, 0, sizeof(v501));
        if (v200[7])
        {
          v431 = 0;
          v432 = 0;
          v433 = 0;
          v434 = v478;
          while (2)
          {
            v435 = (unsigned __int8 *)(v200[6] + 2 * v431);
            v436 = *(_QWORD *)(v480[4] + 16 * *v435);
            if (!v436 || !*(_QWORD *)(v436 + 24))
              goto LABEL_759;
            v437 = *(_QWORD *)(v436 + 40);
            if (*(_DWORD *)(v436 + 112) < 2u)
              v438 = *(_QWORD *)(v436 + 8) * v437;
            else
              v438 = v437 + v479[3] * *(_QWORD *)(v436 + 120);
            v439 = v435[1];
            v440 = v434[1];
            v441 = *(_QWORD *)(v440 + 8 * v439);
            if (v441 != v438)
              *(_QWORD *)(v440 + 8 * v439) = v438;
            if (v433)
            {
              v442 = v432 + v433;
              if (v433 <= 0xF && v442 == v439)
              {
                v439 = v432;
                if (v441 != v438)
LABEL_776:
                  v501[v433++] = v438;
LABEL_758:
                v432 = v439;
                v434 = v478;
LABEL_759:
                if ((unint64_t)++v431 >= v200[7])
                {
                  v419 = v462;
                  if (v433 && v432 < v432 + v433)
                  {
                    v445 = v501;
                    do
                    {
                      v446 = *v445++;
                      objc_msgSend(v481, "setVertexBufferOffset:atIndex:", v446, v432++);
                      --v433;
                    }
                    while (v433);
                  }
                  goto LABEL_783;
                }
                continue;
              }
              if (v432 >= v442)
              {
                v433 = 0;
                if (v441 != v438)
                  goto LABEL_776;
                goto LABEL_758;
              }
              v443 = v501;
              do
              {
                v444 = *v443++;
                objc_msgSend(v481, "setVertexBufferOffset:atIndex:", v444, v432++);
                --v433;
              }
              while (v433);
            }
            break;
          }
          if (v441 != v438)
            goto LABEL_776;
          goto LABEL_758;
        }
LABEL_783:
        v447 = v474 + v472 * v427 + (_QWORD)v470 * v467;
        v448 = *(_QWORD *)(v475 + 112);
        v449 = *(_QWORD *)(v468 + 96);
        if (*(_QWORD *)(v475 + 104) == 1)
        {
          if (!v448)
          {
            objc_msgSend(v481, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", v419, v477, *(_DWORD *)(v449 + 216) != 0, v465, v447);
            goto LABEL_748;
          }
        }
        else if (!v448)
        {
          objc_msgSend(v481, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:", v419, v477, *(_DWORD *)(v449 + 216) != 0, v465, v447);
          goto LABEL_748;
        }
        objc_msgSend(v481, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", v419, v477, *(_DWORD *)(v449 + 216) != 0, v465, 0, v448);
LABEL_748:
        v422 = v475;
      }
    }

  }
  else if (*(_QWORD *)(v475 + 96))
  {
    v450 = 0;
    v451 = 0;
    do
    {
      if (*(_QWORD *)(v475 + 104) == 1 && *(_QWORD *)(v475 + 112) == 0)
        objc_msgSend(v481, "drawPrimitives:vertexStart:vertexCount:", v408);
      else
        objc_msgSend(v481, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", v408);
      ++v451;
      v450 += 16;
    }
    while (v451 != *(_QWORD *)(v475 + 96));
  }

LABEL_798:
}

void sub_19F08906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  void *a70;
  void *a71;
  void *a72;

  _Unwind_Resume(a1);
}

BOOL ggl::DaVinci::GroundPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GroundPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
    case 5:
    case 8:
    case 10:
    case 13:
    case 28:
      return result;
    case 2:
    case 18:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 309);
      goto LABEL_20;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 329);
      goto LABEL_20;
    case 6:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 330);
      goto LABEL_20;
    case 7:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 331);
      goto LABEL_20;
    case 9:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 335);
      goto LABEL_20;
    case 11:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 336);
      goto LABEL_20;
    case 12:
    case 21:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 326);
      goto LABEL_20;
    case 14:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 317);
      goto LABEL_20;
    case 15:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 318);
      goto LABEL_20;
    case 16:
    case 25:
    case 26:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 324);
      goto LABEL_20;
    case 17:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 343);
      goto LABEL_20;
    case 19:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 327);
      goto LABEL_20;
    case 20:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 320);
      goto LABEL_20;
    case 22:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 310);
      goto LABEL_20;
    case 23:
    case 24:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 311);
      goto LABEL_20;
    case 27:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 325);
      goto LABEL_20;
    case 29:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 315);
LABEL_20:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::DaVinci::GroundPipelineSetup::textureIsEnabled(ggl::DaVinci::GroundPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      return result;
    case 1:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 309);
      goto LABEL_11;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 315);
      goto LABEL_11;
    case 5:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 327);
      goto LABEL_11;
    case 6:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 324);
      goto LABEL_11;
    case 7:
    case 8:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 314);
      goto LABEL_11;
    case 9:
    case 10:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 338);
      goto LABEL_11;
    case 11:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 310);
      goto LABEL_11;
    case 12:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 311);
LABEL_11:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::SolidRibbon::PipelineSetup::constantDataIsEnabled(ggl::SolidRibbon::PipelineSetup *this, unint64_t a2)
{
  if (a2 < 3)
    return 1;
  if (a2 == 3)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 309) != 0;
  return 0;
}

BOOL ggl::SolidRibbon::PipelineSetup::textureIsEnabled(ggl::SolidRibbon::PipelineSetup *this, uint64_t a2)
{
  int v2;

  if (a2 == 1)
  {
    v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 308);
    return v2 != 0;
  }
  if (!a2)
  {
    v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 307);
    return v2 != 0;
  }
  return 0;
}

ggl::MetalResourceManager *ggl::MetalResourceManager::upload(ggl::MetalResourceManager *result, uint64_t a2, uint64_t a3)
{
  const ggl::Buffer *v5;
  ggl::MetalResourceManager *v6;
  ggl::MetalResourceManager *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a2 + 16))
  {
    v5 = *(const ggl::Buffer **)(a2 + 8);
    v6 = (ggl::MetalResourceManager *)*((_QWORD *)v5 + 3);
    v7 = v6;
    if (!v6)
    {
      result = (ggl::MetalResourceManager *)ggl::MetalResourceManager::newBuffer(result, v5);
      if (!result)
        return result;
      v7 = result;
      v6 = *(ggl::MetalResourceManager **)(*(_QWORD *)(a2 + 8) + 24);
    }
    if (v6 == (ggl::MetalResourceManager *)3735927469)
    {
      if (!a3)
        goto LABEL_11;
    }
    else if (!a3 || *((_QWORD *)v7 + 4))
    {
      goto LABEL_11;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v8 = **(_QWORD **)(a3 + 200);
      v9 = 136315138;
      v10 = v8;
      _os_log_fault_impl(&dword_19F029000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Trying to upload a stale buffer. Name : %s", (uint8_t *)&v9, 0xCu);
      result = (ggl::MetalResourceManager *)*((_QWORD *)v7 + 4);
      if (!result)
        return result;
LABEL_12:
      memcpy((void *)(-[ggl::MetalResourceManager contents](result, "contents") + *(_QWORD *)(a2 + 16)), *(const void **)a2, *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16));
      result = *(ggl::MetalResourceManager **)(a2 + 56);
      if (result)
        return (ggl::MetalResourceManager *)(*(uint64_t (**)(ggl::MetalResourceManager *, uint64_t))(*(_QWORD *)result + 48))(result, a2);
      return result;
    }
LABEL_11:
    result = (ggl::MetalResourceManager *)*((_QWORD *)v7 + 4);
    if (!result)
      return result;
    goto LABEL_12;
  }
  return result;
}

uint64_t ggl::MetalResourceManager::getSamplerStateResource(ggl::MetalResourceManager *this, const ggl::Texture *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v23;
  geo::read_write_lock *v24;
  const char *v25;
  malloc_zone_t *zone;

  switch(*((_DWORD *)a2 + 14))
  {
    case 1:
    case 2:
    case 4:
      v3 = *((_QWORD *)a2 + 17);
      v4 = *(_QWORD *)(v3 + 24);
      if (!v4)
        goto LABEL_6;
      break;
    case 3:
      v3 = *((_QWORD *)a2 + 26);
      v4 = *(_QWORD *)(v3 + 24);
      if (!v4)
      {
LABEL_6:
        v5 = objc_alloc_init(MEMORY[0x1E0CC6B80]);
        v6 = v5;
        v7 = *(_DWORD *)(v3 + 36) - 1;
        if (v7 > 2)
          v8 = 2;
        else
          v8 = qword_1A0083540[v7];
        objc_msgSend(v5, "setSAddressMode:", v8);
        v9 = *(_DWORD *)(v3 + 40) - 1;
        if (v9 > 2)
          v10 = 2;
        else
          v10 = qword_1A0083540[v9];
        objc_msgSend(v6, "setTAddressMode:", v10);
        objc_msgSend(v6, "setMinFilter:", *(_DWORD *)(v3 + 52) != 0);
        objc_msgSend(v6, "setMagFilter:", *(_DWORD *)(v3 + 48) != 0);
        if (*(_DWORD *)(v3 + 56))
          v11 = 2;
        else
          v11 = 1;
        objc_msgSend(v6, "setMipFilter:", v11);
        objc_msgSend(v6, "setMaxAnisotropy:", *(unsigned int *)(v3 + 44));
        v12 = (*(_DWORD *)(v3 + 60) - 1);
        if (v12 < 7)
          v13 = v12 + 1;
        else
          v13 = 0;
        objc_msgSend(v6, "setCompareFunction:", v13);
        v14 = (void *)objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 104), "newSamplerStateWithDescriptor:", v6);
        if ((v15 & 1) == 0)
          goto LABEL_29;
        while (1)
        {
          v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                    + 16))(ggl::Allocator::instance(void)::alloc, 40, 8);
          *(_QWORD *)v4 = 0;
          *(_WORD *)(v4 + 8) = 513;
          *(_QWORD *)(v4 + 16) = 0;
          *(_QWORD *)(v4 + 24) = 0;
          *(_QWORD *)(v4 + 32) = 0;
          objc_storeStrong((id *)(v4 + 32), v14);
          v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
          if (v16)
          {
            v17 = *((_QWORD *)this + 1);
            v18 = std::__shared_weak_count::lock(v16);
            if (v18)
              break;
          }
          std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_29:
          {
            v23 = operator new();
            *(_QWORD *)(v23 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v23 + 24) = "GeoGL";
            *(_OWORD *)(v23 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v23 = &off_1E42B5668;
            *(_QWORD *)(v23 + 8) = "GeoGL";
            *(_OWORD *)(v23 + 72) = 0u;
            *(_OWORD *)(v23 + 88) = 0u;
            *(_OWORD *)(v23 + 104) = 0u;
            *(_OWORD *)(v23 + 120) = 0u;
            *(_OWORD *)(v23 + 136) = 0u;
            *(_OWORD *)(v23 + 152) = 0u;
            *(_OWORD *)(v23 + 168) = 0u;
            *(_OWORD *)(v23 + 184) = 0u;
            *(_OWORD *)(v23 + 200) = 0u;
            *(_OWORD *)(v23 + 216) = 0u;
            *(_OWORD *)(v23 + 232) = 0u;
            *(_QWORD *)(v23 + 248) = 0;
            *(_OWORD *)(v23 + 56) = 0u;
            v24 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v23 + 56), 0);
            if ((_DWORD)v24)
              geo::read_write_lock::logFailure(v24, (uint64_t)"initialization", v25);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v23 + 48) = zone;
            malloc_set_zone_name(zone, "GeoGL");
            *(_QWORD *)(v23 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v23;
          }
        }
        v19 = *(std::__shared_weak_count **)(v3 + 16);
        *(_QWORD *)(v3 + 8) = v17;
        *(_QWORD *)(v3 + 16) = v18;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        *(_QWORD *)(v3 + 24) = v4;
        ++*(_DWORD *)(v3 + 32);
        ggl::ResourceManager::_addResourceStat((uint64_t)this, "SamplerState", 0xC9803BE00000000CLL, 0);

      }
      break;
    default:
      v4 = 0;
      break;
  }
  return v4;
}

void sub_19F089B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ggl::PatternedRibbon::BasePipelineSetup::constantDataIsEnabled(ggl::PatternedRibbon::BasePipelineSetup *this, unint64_t a2)
{
  if (a2 < 3)
    return 1;
  if (a2 == 3)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 309) != 0;
  return 0;
}

BOOL ggl::GlyphWithNormalHalo::DefaultPipelineSetup::constantDataIsEnabled(ggl::GlyphWithNormalHalo::DefaultPipelineSetup *this, uint64_t a2)
{
  int v2;

  if ((unint64_t)(a2 - 2) < 2)
    return 1;
  if (a2 == 1)
  {
    v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 304);
    return v2 != 0;
  }
  if (!a2)
  {
    v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 308);
    return v2 != 0;
  }
  return 0;
}

BOOL ggl::GlyphWithNormalHalo::DefaultPipelineSetup::textureIsEnabled(ggl::GlyphWithNormalHalo::DefaultPipelineSetup *this, uint64_t a2)
{
  if (!a2)
    return 1;
  if (a2 == 1)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 304) != 0;
  return 0;
}

BOOL ggl::PatternedRibbon::BasePipelineSetup::textureIsEnabled(ggl::PatternedRibbon::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void *ggl::MetalResourceManager::newBuffer(ggl::MetalResourceManager *this, const ggl::Buffer *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v18;
  uint8_t v19[16];

  if (*((_BYTE *)a2 + 39) == 1)
    v6 = 32;
  else
    v6 = 1;
  v7 = objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 104), "newBufferWithLength:options:", *((_QWORD *)a2 + 5), v6);
  if (!v7)
    goto LABEL_17;
  v2 = (void *)v7;
  v3 = &unk_1ECE44000;
  if ((v8 & 1) == 0)
    goto LABEL_20;
  while (1)
  {
    v3 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v3 + 495) + 16))(*((_QWORD *)v3 + 495), 40, 8);
    *(_QWORD *)v3 = 0;
    *((_WORD *)v3 + 4) = 1;
    *((_QWORD *)v3 + 2) = 0;
    *((_QWORD *)v3 + 3) = 0;
    *((_QWORD *)v3 + 4) = 0;
    objc_storeStrong((id *)v3 + 4, v2);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v9)
    {
      v10 = *((_QWORD *)this + 1);
      v11 = std::__shared_weak_count::lock(v9);
      if (v11)
        break;
    }
    std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_17:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_fault_impl(&dword_19F029000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Metal returned null buffer.", v19, 2u);
    }
    abort_with_reason();
LABEL_20:
    {
      v18 = operator new();
      *((_QWORD *)v3 + 495) = geo::MallocZoneAllocator::MallocZoneAllocator(v18, "GeoGL", 0xA3D02C1100000005);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = v10;
  *((_QWORD *)a2 + 2) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *((_QWORD *)a2 + 3) = v3;
  ++*((_DWORD *)a2 + 8);
  *((_QWORD *)v3 + 3) = *((_QWORD *)a2 + 5);
  v15 = (unsigned int *)((char *)this + 312);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  ggl::ResourceManager::_addResourceStat((uint64_t)this, "Buffer", 0x36F6F5C400000006uLL, *((_QWORD *)v3 + 3));

  return v3;
}

void sub_19F089E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ggl::ResourceManager::_addResourceStat(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  std::mutex *v9;
  _QWORD *v10;
  uint64_t *v11;
  void *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  __int128 v50;

  *(_QWORD *)&v50 = a2;
  *((_QWORD *)&v50 + 1) = a3;
  v9 = (std::mutex *)(a1 + 192);
  std::mutex::lock((std::mutex *)(a1 + 192));
  v10 = (_QWORD *)(a1 + 152);
  v11 = std::__hash_table<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::__unordered_map_hasher<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::hash<geo::StringLiteral>,std::equal_to<geo::StringLiteral>,true>,std::__unordered_map_equal<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::equal_to<geo::StringLiteral>,std::hash<geo::StringLiteral>,true>,std::allocator<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>>>::find<geo::StringLiteral>((_QWORD *)(a1 + 152), (uint64_t)&v50);
  if (!v11)
  {
    v14 = HIDWORD(a3);
    v15 = *(_QWORD *)(a1 + 160);
    if (v15)
    {
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v4 = HIDWORD(a3);
        if (v15 <= v14)
          v4 = v14 % v15;
      }
      else
      {
        v4 = (v15 - 1) & HIDWORD(a3);
      }
      v17 = *(void ***)(*v10 + 8 * v4);
      if (v17)
      {
        v12 = *v17;
        if (*v17)
        {
          if (v16.u32[0] < 2uLL)
          {
            while (1)
            {
              v19 = *((_QWORD *)v12 + 1);
              if (v19 == v14)
              {
                if (*((_QWORD *)v12 + 3) == a3 && !memcmp(*((const void **)v12 + 2), a2, a3))
                  goto LABEL_87;
              }
              else if ((v19 & (v15 - 1)) != v4)
              {
                goto LABEL_27;
              }
              v12 = *(void **)v12;
              if (!v12)
                goto LABEL_27;
            }
          }
          do
          {
            v18 = *((_QWORD *)v12 + 1);
            if (v18 == v14)
            {
              if (*((_QWORD *)v12 + 3) == a3 && !memcmp(*((const void **)v12 + 2), a2, a3))
                goto LABEL_87;
            }
            else
            {
              if (v18 >= v15)
                v18 %= v15;
              if (v18 != v4)
                break;
            }
            v12 = *(void **)v12;
          }
          while (v12);
        }
      }
    }
LABEL_27:
    v12 = operator new(0x30uLL);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = v14;
    *((_OWORD *)v12 + 1) = v50;
    *((_OWORD *)v12 + 2) = xmmword_19FFB3350;
    v13 = (_QWORD *)(a1 + 176);
    v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 176) + 1);
    v21 = *(float *)(a1 + 184);
    if (v15 && (float)(v21 * (float)v15) >= v20)
    {
LABEL_77:
      v43 = (_QWORD *)*v10;
      v44 = *(_QWORD **)(*v10 + 8 * v4);
      if (v44)
      {
        *(_QWORD *)v12 = *v44;
      }
      else
      {
        v47 = *(_QWORD *)(a1 + 168);
        v46 = (_QWORD *)(a1 + 168);
        v45 = v47;
        *(_QWORD *)v12 = v47;
        *v46 = v12;
        v43[v4] = v46;
        if (!v47)
          goto LABEL_86;
        v48 = *(_QWORD *)(v45 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v48 >= v15)
            v48 %= v15;
        }
        else
        {
          v48 &= v15 - 1;
        }
        v44 = (_QWORD *)(*v10 + 8 * v48);
      }
      *v44 = v12;
      goto LABEL_86;
    }
    v22 = 1;
    if (v15 >= 3)
      v22 = (v15 & (v15 - 1)) != 0;
    v23 = v22 | (2 * v15);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v15 = *(_QWORD *)(a1 + 160);
    }
    if (prime <= v15)
    {
      if (prime >= v15)
        goto LABEL_64;
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 176) / *(float *)(a1 + 184));
      if (v15 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime >= v15)
      {
        v15 = *(_QWORD *)(a1 + 160);
LABEL_64:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v15 <= v14)
            v4 = v14 % v15;
          else
            v4 = v14;
        }
        else
        {
          v4 = ((_DWORD)v15 - 1) & v14;
        }
        goto LABEL_77;
      }
      if (!prime)
      {
        v49 = (_QWORD *)*v10;
        *v10 = 0;
        if (v49)
          operator delete(v49);
        v15 = 0;
        *(_QWORD *)(a1 + 160) = 0;
        goto LABEL_64;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v26 = operator new(8 * prime);
    v27 = (_QWORD *)*v10;
    *v10 = v26;
    if (v27)
      operator delete(v27);
    v28 = 0;
    *(_QWORD *)(a1 + 160) = prime;
    do
      *(_QWORD *)(*v10 + 8 * v28++) = 0;
    while (prime != v28);
    v30 = a1 + 168;
    v29 = *(_QWORD **)(a1 + 168);
    if (!v29)
    {
LABEL_63:
      v15 = prime;
      goto LABEL_64;
    }
    v31 = v29[1];
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(*v10 + 8 * v33) = v30;
      for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v29 = i;
        }
        else if (*(_QWORD *)(*v10 + 8 * v35))
        {
          *v29 = *i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(*v10 + v36);
          **(_QWORD **)(*v10 + v36) = i;
        }
        else
        {
          *(_QWORD *)(*v10 + 8 * v35) = v29;
          v29 = i;
          v33 = v35;
        }
      }
      goto LABEL_63;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(*v10 + 8 * v31) = v30;
    v40 = (_QWORD *)*v29;
    if (!*v29)
      goto LABEL_63;
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 != v31)
      {
        if (!*(_QWORD *)(*v10 + 8 * v42))
        {
          *(_QWORD *)(*v10 + 8 * v42) = v29;
          goto LABEL_68;
        }
        *v29 = *v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(*v10 + v41);
        **(_QWORD **)(*v10 + v41) = v40;
        v40 = v29;
      }
      v42 = v31;
LABEL_68:
      v29 = v40;
      v40 = (_QWORD *)*v40;
      v31 = v42;
      if (!v40)
        goto LABEL_63;
    }
  }
  v12 = v11;
  v13 = v11 + 4;
LABEL_86:
  ++*v13;
LABEL_87:
  if (a4)
    *((_QWORD *)v12 + 5) += a4;
  std::mutex::unlock(v9);
}

uint64_t *std::__hash_table<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::__unordered_map_hasher<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::hash<geo::StringLiteral>,std::equal_to<geo::StringLiteral>,true>,std::__unordered_map_equal<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::equal_to<geo::StringLiteral>,std::hash<geo::StringLiteral>,true>,std::allocator<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>>>::find<geo::StringLiteral>(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *(unsigned int *)(a2 + 12);
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (*v6)
  {
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(const void **)a2;
    if (v4.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = v7[1];
        if (v12 == v3)
        {
          if (*((_DWORD *)v7 + 7) == (_DWORD)v3
            && *((_DWORD *)v7 + 6) == (_DWORD)v8
            && !memcmp((const void *)v7[2], v9, v8))
          {
            return v7;
          }
        }
        else if ((v12 & v10) != v5)
        {
          return 0;
        }
        v7 = (uint64_t *)*v7;
        if (!v7)
          return v7;
      }
    }
    do
    {
      v11 = v7[1];
      if (v11 == v3)
      {
        if (*((_DWORD *)v7 + 7) == (_DWORD)v3
          && *((_DWORD *)v7 + 6) == (_DWORD)v8
          && !memcmp((const void *)v7[2], v9, v8))
        {
          return v7;
        }
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v5)
          return 0;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  return v7;
}

BOOL ggl::Grid::GridPipelineSetup::constantDataIsEnabled(ggl::Grid::GridPipelineSetup *this, uint64_t a2)
{
  if ((unint64_t)(a2 - 2) < 2 || a2 == 0)
    return 1;
  if (a2 == 1)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 305) != 0;
  return 0;
}

BOOL ggl::Clear::ClearPipelineSetup::constantDataIsEnabled(ggl::Clear::ClearPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Icon::IconPipelineSetup::constantDataIsEnabled(ggl::Icon::IconPipelineSetup *this, uint64_t a2)
{
  int v2;

  switch(a2)
  {
    case 2:
      return 1;
    case 1:
      v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 304);
      return v2 != 0;
    case 0:
      v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 308);
      return v2 != 0;
  }
  return 0;
}

BOOL ggl::Icon::IconPipelineSetup::textureIsEnabled(ggl::Icon::IconPipelineSetup *this, uint64_t a2)
{
  if (!a2)
    return 1;
  if (a2 == 1)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 304) != 0;
  return 0;
}

void __destroy_helper_block_ea8_32c47_ZTSNSt3__18weak_ptrIN2md17RunLoopControllerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::find<grl::IconKey>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = grl::IconKey::operator<((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || grl::IconKey::operator<(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

BOOL grl::IconKey::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a2 + 16);
  v4 = v2 >= v3;
  if (v2 == v3)
  {
    v5 = *(unsigned __int16 *)(a1 + 20);
    v6 = *(unsigned __int16 *)(a2 + 20);
    v4 = v5 >= v6;
    if (v5 == v6)
    {
      v7 = *(unsigned __int16 *)(a1 + 22);
      v8 = *(unsigned __int16 *)(a2 + 22);
      v4 = v7 >= v8;
      if (v7 == v8)
        v4 = *(unsigned __int8 *)(a1 + 24) >= *(unsigned __int8 *)(a2 + 24);
    }
  }
  return !v4;
}

uint64_t gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 32))
    (*(void (**)(void))(**(_QWORD **)a1 + 56))();
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_19F08A6B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t gss::Queryable<gss::PropertyID>::lock(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  geo::read_write_lock *v6;
  const char *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  geo::read_write_lock *v14;
  const char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned __int8 v31;
  int v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int8 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned __int8 v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  unint64_t *v87;
  unint64_t v88;
  char v89;
  unint64_t *v90;
  unint64_t v91;
  gss::Allocator *v92;
  uint64_t v93;
  gss::Allocator *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  geo::read_write_lock *v102;
  const char *v103;
  geo::read_write_lock *v104;
  const char *v105;
  __int128 v106;
  unint64_t *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  geo::read_write_lock *v110;
  const char *v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  pthread_rwlock_t *v120;
  __int128 v121;

  v121 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_154;
  *((_QWORD *)&v121 + 1) = std::__shared_weak_count::lock(v4);
  if (!*((_QWORD *)&v121 + 1))
    goto LABEL_154;
  *(_QWORD *)&v121 = *(_QWORD *)(a1 + 8);
  if (!(_QWORD)v121)
    goto LABEL_154;
  v6 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"read lock", v7);
  if (((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 32))(a1, &v121) & 1) == 0
    && *(_QWORD *)(a1 + 24))
  {
    if (!a2)
      goto LABEL_150;
    v8 = v121;
    v121 = 0uLL;
    v9 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v8;
    if (!v9)
      goto LABEL_150;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    goto LABEL_148;
  }
  v12 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v12)
    geo::read_write_lock::logFailure(v12, (uint64_t)"unlock", v13);
  v120 = (pthread_rwlock_t *)(a1 + 32);
  v14 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v14)
    geo::read_write_lock::logFailure(v14, (uint64_t)"write lock", v15);
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 32))(a1, &v121))
  {
    v16 = *(_QWORD *)(v121 + 520);
    v17 = *(std::__shared_weak_count **)(v121 + 528);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      *(_DWORD *)(a1 + 232) = *(_DWORD *)(v16 + 248);
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 232) = *(_DWORD *)(v16 + 248);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v21 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v21)
      std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v21);
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v118, a1);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v116, a1);
  v22 = v121;
  v23 = *(_QWORD *)(v121 + 520);
  v24 = *(std::__shared_weak_count **)(v121 + 528);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v23)
  {
    v27 = *(_QWORD *)(v22 + 520);
    v28 = *(std::__shared_weak_count **)(v22 + 528);
    if (!v28)
    {
      v36 = atomic_load((unsigned __int8 *)(v27 + 254));
      v32 = v36 & 1;
      if (!v24)
        goto LABEL_47;
      goto LABEL_42;
    }
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    v31 = atomic_load((unsigned __int8 *)(v27 + 254));
    v32 = v31 & 1;
    do
      v33 = __ldaxr(v29);
    while (__stlxr(v33 - 1, v29));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if (!v24)
        goto LABEL_47;
      goto LABEL_42;
    }
  }
  else
  {
    v32 = 0;
  }
  if (!v24)
    goto LABEL_47;
LABEL_42:
  v34 = (unint64_t *)&v24->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_47:
  v37 = v118;
  if (v118)
  {
    v38 = (uint64_t *)(a1 + 24);
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_129;
    v39 = *(_QWORD *)(v121 + 16);
    v40 = *(_QWORD *)(v121 + 24);
    *(_QWORD *)&v115 = v39;
    *((_QWORD *)&v115 + 1) = v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = atomic_load((unsigned __int8 *)(v37 + 122));
    if ((v43 & 1) == 0)
      gss::CartoStyle<gss::PropertyID>::populateStyles(v37, v39);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
      }
    }
    v47 = v116;
    if (!v116)
      goto LABEL_76;
  }
  else
  {
    v47 = v116;
    if (v116)
      v48 = v32;
    else
      v48 = 0;
    if (v48 != 1)
      goto LABEL_129;
    v38 = (uint64_t *)(a1 + 24);
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_129;
  }
  v49 = *(_QWORD *)(v121 + 16);
  v50 = *(_QWORD *)(v121 + 24);
  *(_QWORD *)&v115 = v49;
  *((_QWORD *)&v115 + 1) = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = atomic_load((unsigned __int8 *)(v47 + 122));
  if ((v53 & 1) == 0)
    gss::CartoStyle<gss::PropertyID>::populateStyles(v47, v49);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
  if (*((_QWORD *)&v115 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
    }
  }
LABEL_76:
  v56 = operator new();
  v57 = v56;
  if (v32)
  {
    v58 = v121;
    v59 = *(_QWORD *)(v121 + 520);
    v44 = *(std::__shared_weak_count **)(v121 + 528);
    if (v44)
    {
      v60 = (unint64_t *)&v44->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    if (v59)
    {
      v62 = *(_QWORD *)(v58 + 520);
      v2 = *(std::__shared_weak_count **)(v58 + 528);
      if (v2)
      {
        v63 = (unint64_t *)&v2->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = 0;
      v66 = v62 + 256;
    }
    else
    {
      v66 = 0;
      v65 = 1;
    }
  }
  else
  {
    v66 = 0;
    v65 = 1;
  }
  *(_QWORD *)v56 = v66;
  *(_BYTE *)(v56 + 10) = 1;
  *(_QWORD *)(v56 + 64) = 0;
  *(_QWORD *)(v56 + 69) = 0;
  *(_OWORD *)(v56 + 16) = 0u;
  *(_OWORD *)(v56 + 32) = 0u;
  *(_OWORD *)(v56 + 45) = 0u;
  v67 = v118;
  v68 = v119;
  if (v119)
  {
    v69 = (unint64_t *)&v119->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    v71 = *(std::__shared_weak_count **)(v56 + 24);
    *(_QWORD *)(v56 + 16) = v67;
    *(_QWORD *)(v56 + 24) = v68;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else
  {
    *(_QWORD *)(v56 + 16) = v118;
    *(_QWORD *)(v56 + 24) = 0;
  }
  v75 = v116;
  v74 = v117;
  if (v117)
  {
    v76 = (unint64_t *)&v117->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  v78 = *(std::__shared_weak_count **)(v57 + 40);
  *(_QWORD *)(v57 + 32) = v75;
  *(_QWORD *)(v57 + 40) = v74;
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v118 == 0;
  v82 = v118 != 0;
  *(_BYTE *)(v57 + 8) = v118 != 0;
  v83 = v116 == 0;
  v84 = v116 != 0;
  *(_BYTE *)(v57 + 9) = v116 != 0;
  if (v83)
    v82 = 0;
  *(_BYTE *)(v57 + 10) = v82;
  *(_BYTE *)(v57 + 11) = v81;
  *(_BYTE *)(v57 + 12) = v84;
  v85 = *v38;
  *v38 = v57;
  if (v85)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v85);
  if (v2)
    v86 = v65;
  else
    v86 = 1;
  if ((v86 & 1) == 0)
  {
    v87 = (unint64_t *)&v2->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v89 = v32 ^ 1;
  if (!v44)
    v89 = 1;
  if ((v89 & 1) == 0)
  {
    v90 = (unint64_t *)&v44->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_QWORD *)((char *)&v115 + 7) = 0;
  *(_QWORD *)&v115 = 0;
  HIBYTE(v115) = 1;
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 64))(a1, &v115, 0);
  gss::BaseRenderStyle<gss::PropertyID>::resolveConditionalStyles(*v38, (uint64_t)&v115, 0);
  if (!BYTE14(v115) && (_QWORD)v115)
  {
    v93 = gss::Allocator::instance(v92);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v93 + 40))(v93, v115, WORD6(v115));
  }
  *(_QWORD *)((char *)&v115 + 7) = 0;
  *(_QWORD *)&v115 = 0;
  HIBYTE(v115) = 1;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 64))(a1, &v115, 1);
  gss::BaseRenderStyle<gss::PropertyID>::resolveConditionalStyles(*v38, (uint64_t)&v115, 1u);
  if (!BYTE14(v115) && (_QWORD)v115)
  {
    v95 = gss::Allocator::instance(v94);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v95 + 40))(v95, v115, WORD6(v115));
  }
LABEL_129:
  v96 = v117;
  if (v117)
  {
    v97 = (unint64_t *)&v117->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v119;
  if (v119)
  {
    v100 = (unint64_t *)&v119->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = (geo::read_write_lock *)pthread_rwlock_unlock(v120);
  if ((_DWORD)v102)
    geo::read_write_lock::logFailure(v102, (uint64_t)"unlock", v103);
  v104 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v104)
    geo::read_write_lock::logFailure(v104, (uint64_t)"read lock", v105);
  if (!*(_QWORD *)(a1 + 24))
  {
    v110 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
    if ((_DWORD)v110)
      geo::read_write_lock::logFailure(v110, (uint64_t)"unlock", v111);
LABEL_154:
    v108 = 0;
    v109 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (!*((_QWORD *)&v121 + 1))
      return v108;
    goto LABEL_155;
  }
  if (!a2)
    goto LABEL_150;
  v106 = v121;
  v121 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v106;
  if (!v9)
    goto LABEL_150;
  v107 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v107);
  while (__stlxr(v11 - 1, v107));
LABEL_148:
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_150:
  v108 = 1;
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (!*((_QWORD *)&v121 + 1))
    return v108;
LABEL_155:
  v112 = (unint64_t *)&v109->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
  }
  return v108;
}

void sub_19F08AEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  pthread_rwlock_t *v12;
  va_list va3;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v12 = va_arg(va4, pthread_rwlock_t *);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  _Unwind_Resume(a1);
}

BOOL gss::Queryable<gss::PropertyID>::needsUpdate(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *(_DWORD *)(a1 + 232);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 520);
  v4 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 528);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!v3)
  {
    v11 = 0;
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 520);
  v8 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 528);
  if (!v8)
  {
    v11 = *(_DWORD *)(v7 + 248);
    if (!v4)
      return v2 != v11;
    goto LABEL_15;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v11 = *(_DWORD *)(v7 + 248);
  do
    v12 = __ldaxr(v9);
  while (__stlxr(v12 - 1, v9));
  if (v12)
  {
LABEL_14:
    if (!v4)
      return v2 != v11;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v4)
    return v2 != v11;
LABEL_15:
  v13 = (unint64_t *)&v4->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v2 != v11;
}

void gss::Queryable<gss::PropertyID>::unlock(uint64_t a1)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
}

unint64_t gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, BOOL *a5, float a6)
{
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int16 v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  __int16 *v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  unsigned int v78;
  __int16 *v79;
  unint64_t *v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  unsigned __int16 v83;
  unsigned __int16 v84;
  float v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  unint64_t *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;

  v11 = (_QWORD *)result;
  v12 = (int)a6;
  if ((int)a6 >= 0x17)
    v13 = 23;
  else
    v13 = v12;
  if (v12 >= 0x16)
    v14 = 22;
  else
    v14 = v12;
  v15 = a2 + 16 * a4;
  v18 = *(_QWORD *)(v15 + 16);
  v17 = (uint64_t *)(v15 + 16);
  v16 = v18;
  if (!v18)
  {
    if (a5)
      *a5 = 0;
    result = (unint64_t)gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a3);
    *v11 = *(_QWORD *)result;
    return result;
  }
  v20 = v14 + 1;
  v21 = a2 + 16 * a4;
  v22 = *(unsigned __int16 *)(v21 + 56);
  v90 = (unint64_t *)result;
  v23 = 0;
  if (!*(_WORD *)(v21 + 56))
  {
    v92 = 1;
    v91 = 1;
    goto LABEL_134;
  }
  v24 = *(uint64_t **)(v21 + 48);
  v25 = &v24[v22];
LABEL_10:
  LOBYTE(v26) = 0;
  do
  {
    v28 = *v24;
    if ((v26 & 1) != 0)
    {
      v26 = 1;
      if ((v23 & 1) != 0)
        goto LABEL_97;
      goto LABEL_73;
    }
    v29 = *(uint64_t **)(v28 + 72);
    if (!v29
      || (v30 = *((unsigned __int8 *)v29 + v13 + 16),
          v31 = *v29,
          result = v31 + 80 * v30,
          v32 = *(unsigned __int16 *)(result + 10),
          !*(_WORD *)(result + 10)))
    {
LABEL_51:
      v26 = 0;
      if ((v23 & 1) != 0)
        goto LABEL_97;
      goto LABEL_73;
    }
    v33 = *(_QWORD *)result;
    if (*(_BYTE *)(result + 15))
    {
      if (v32 >= 0x1E)
      {
        result = *(_QWORD *)result;
        v36 = (unsigned __int16 *)v32;
        do
        {
          v37 = (unsigned __int16 *)((unint64_t)v36 >> 1);
          v38 = (unsigned __int16 *)(result + 2 * ((unint64_t)v36 >> 1));
          v40 = *v38;
          v39 = v38 + 1;
          v36 = (unsigned __int16 *)((char *)v36 + ~((unint64_t)v36 >> 1));
          if (v40 < a3)
            result = (unint64_t)v39;
          else
            v36 = v37;
        }
        while (v36);
        if (result == v33 + 2 * v32
          || *(unsigned __int16 *)result != a3
          || (_DWORD)v32 == (unsigned __int16)((result - v33) >> 1))
        {
          goto LABEL_51;
        }
      }
      else
      {
        result = 0;
        while (1)
        {
          v34 = *(unsigned __int16 *)(v33 + 2 * result);
          if (v34 >= a3)
            break;
          if (v32 == ++result)
            goto LABEL_51;
        }
        if (v34 == a3)
          v46 = result;
        else
          v46 = v32;
        if ((_DWORD)v32 == v46)
          goto LABEL_51;
      }
    }
    else
    {
      v35 = 2 * v32;
      result = *(_QWORD *)result;
      while (*(unsigned __int16 *)result != a3)
      {
        result += 2;
        v35 -= 2;
        if (!v35)
        {
          result = v33 + 2 * v32;
          break;
        }
      }
      if ((_DWORD)v32 == (unsigned __int16)((result - v33) >> 1))
        goto LABEL_51;
    }
    v41 = v31 + 80 * v30;
    v42 = *(unsigned __int16 *)(v41 + 58);
    if (!*(_WORD *)(v41 + 58))
    {
LABEL_66:
      v54 = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      goto LABEL_72;
    }
    v43 = v31 + 80 * v30;
    v44 = *(_QWORD *)(v43 + 48);
    if (*(_BYTE *)(v43 + 63))
    {
      if (v42 >= 0x1E)
      {
        result = *(_QWORD *)(v43 + 48);
        v49 = (unsigned __int16 *)v42;
        do
        {
          v50 = (unsigned __int16 *)((unint64_t)v49 >> 1);
          v51 = (unsigned __int16 *)(result + 2 * ((unint64_t)v49 >> 1));
          v53 = *v51;
          v52 = v51 + 1;
          v49 = (unsigned __int16 *)((char *)v49 + ~((unint64_t)v49 >> 1));
          if (v53 < a3)
            result = (unint64_t)v52;
          else
            v49 = v50;
        }
        while (v49);
        if (result == v44 + 2 * v42)
          goto LABEL_66;
        v54 = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if (*(unsigned __int16 *)result != a3)
          goto LABEL_72;
        result = (result - v44) >> 1;
      }
      else
      {
        result = 0;
        while (1)
        {
          v45 = *(unsigned __int16 *)(v44 + 2 * result);
          if (v45 >= a3)
            break;
          if (v42 == ++result)
            goto LABEL_66;
        }
        if (v45 == a3)
          result = result;
        else
          result = v42;
      }
    }
    else
    {
      v47 = 2 * v42;
      v48 = *(unsigned __int16 **)(v43 + 48);
      while (*v48 != a3)
      {
        ++v48;
        v47 -= 2;
        if (!v47)
        {
          v48 = (unsigned __int16 *)(v44 + 2 * v42);
          break;
        }
      }
      result = ((unint64_t)v48 - v44) >> 1;
    }
    v54 = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    if ((_DWORD)v42 != (unsigned __int16)result)
      v54 = (__int16 *)(v44 + *(unsigned __int16 *)(v31 + 80 * v30 + 56) + 8 * (unsigned __int16)result);
LABEL_72:
    LOWORD(v11) = *v54;
    v6 = v54[1];
    v7 = v54[2];
    v26 = 1;
    v8 = v54[3];
    if ((v23 & 1) != 0)
    {
LABEL_97:
      if (v26)
        goto LABEL_141;
LABEL_126:
      ++v24;
      v23 = 1;
      if (v24 != v25)
        goto LABEL_10;
      v92 = 1;
      v91 = 1;
      goto LABEL_134;
    }
LABEL_73:
    v55 = *(uint64_t **)(v28 + 72);
    if (v55)
    {
      v56 = *((unsigned __int8 *)v55 + v20 + 16);
      v57 = *v55;
      result = v57 + 80 * v56;
      v58 = *(unsigned __int16 *)(result + 10);
      if (!*(_WORD *)(result + 10))
      {
        LOWORD(v27) = 0;
        goto LABEL_12;
      }
      v59 = *(_QWORD *)result;
      if (!*(_BYTE *)(result + 15))
      {
        v61 = 2 * v58;
        result = *(_QWORD *)result;
        while (*(unsigned __int16 *)result != a3)
        {
          result += 2;
          v61 -= 2;
          if (!v61)
          {
            result = v59 + 2 * v58;
            break;
          }
        }
        v27 = (result - v59) >> 1;
LABEL_12:
        if ((_DWORD)v58 == (unsigned __int16)v27)
          goto LABEL_13;
        v67 = v57 + 80 * v56;
        v68 = *(unsigned __int16 *)(v67 + 58);
        if (*(_WORD *)(v67 + 58))
        {
          v69 = v57 + 80 * v56;
          v70 = *(_QWORD *)(v69 + 48);
          if (!*(_BYTE *)(v69 + 63))
          {
            v72 = 2 * v68;
            v73 = *(unsigned __int16 **)(v69 + 48);
            while (*v73 != a3)
            {
              ++v73;
              v72 -= 2;
              if (!v72)
              {
                v73 = (unsigned __int16 *)(v70 + 2 * v68);
                break;
              }
            }
            result = ((unint64_t)v73 - v70) >> 1;
LABEL_123:
            v79 = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            if ((_DWORD)v68 != (unsigned __int16)result)
              v79 = (__int16 *)(v70 + *(unsigned __int16 *)(v57 + 80 * v56 + 56) + 8 * (unsigned __int16)result);
LABEL_125:
            v88 = v79[1];
            v89 = *v79;
            v86 = v79[3];
            v87 = v79[2];
            if ((v26 & 1) != 0)
            {
LABEL_141:
              v92 = 1;
              v91 = 1;
              goto LABEL_135;
            }
            goto LABEL_126;
          }
          if (v68 < 0x1E)
          {
            result = 0;
            while (1)
            {
              v71 = *(unsigned __int16 *)(v70 + 2 * result);
              if (v71 >= a3)
                break;
              if (v68 == ++result)
                goto LABEL_119;
            }
            if (v71 == a3)
              result = result;
            else
              result = v68;
            goto LABEL_123;
          }
          result = *(_QWORD *)(v69 + 48);
          v74 = (unsigned __int16 *)v68;
          do
          {
            v75 = (unsigned __int16 *)((unint64_t)v74 >> 1);
            v76 = (unsigned __int16 *)(result + 2 * ((unint64_t)v74 >> 1));
            v78 = *v76;
            v77 = v76 + 1;
            v74 = (unsigned __int16 *)((char *)v74 + ~((unint64_t)v74 >> 1));
            if (v78 < a3)
              result = (unint64_t)v77;
            else
              v74 = v75;
          }
          while (v74);
          if (result != v70 + 2 * v68)
          {
            v79 = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            if (*(unsigned __int16 *)result == a3)
            {
              result = (result - v70) >> 1;
              goto LABEL_123;
            }
            goto LABEL_125;
          }
        }
LABEL_119:
        v79 = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        goto LABEL_125;
      }
      if (v58 < 0x1E)
      {
        result = 0;
        while (1)
        {
          v60 = *(unsigned __int16 *)(v59 + 2 * result);
          if (v60 >= a3)
            break;
          if (v58 == ++result)
            goto LABEL_13;
        }
        if (v60 == a3)
          LOWORD(v27) = result;
        else
          LOWORD(v27) = v58;
        goto LABEL_12;
      }
      result = *(_QWORD *)result;
      v62 = (unsigned __int16 *)v58;
      do
      {
        v63 = (unsigned __int16 *)((unint64_t)v62 >> 1);
        v64 = (unsigned __int16 *)(result + 2 * ((unint64_t)v62 >> 1));
        v66 = *v64;
        v65 = v64 + 1;
        v62 = (unsigned __int16 *)((char *)v62 + ~((unint64_t)v62 >> 1));
        if (v66 < a3)
          result = (unint64_t)v65;
        else
          v62 = v63;
      }
      while (v62);
      if (result != v59 + 2 * v58 && *(unsigned __int16 *)result == a3)
      {
        v27 = (result - v59) >> 1;
        goto LABEL_12;
      }
    }
LABEL_13:
    v23 = 0;
    ++v24;
  }
  while (v24 != v25);
  v92 = 1;
  v91 = 1;
  if ((v26 & 1) != 0)
    goto LABEL_138;
  v23 = 0;
LABEL_134:
  result = (unint64_t)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(*(__int16 **)(v16 + 72), a3, v13, &v92);
  LOWORD(v11) = *(_WORD *)result;
  v6 = *(_WORD *)(result + 2);
  v7 = *(_WORD *)(result + 4);
  v8 = *(_WORD *)(result + 6);
  if ((v23 & 1) != 0)
  {
LABEL_135:
    v80 = v90;
    v82 = v88;
    v81 = v89;
    v84 = v86;
    v83 = v87;
    if (!a5)
      goto LABEL_140;
LABEL_139:
    *a5 = (v92 | v91) != 0;
    goto LABEL_140;
  }
  v16 = *v17;
LABEL_138:
  result = (unint64_t)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(*(__int16 **)(v16 + 72), a3, v20, &v91);
  v81 = *(_WORD *)result;
  v82 = *(_WORD *)(result + 2);
  v83 = *(_WORD *)(result + 4);
  v84 = *(_WORD *)(result + 6);
  v80 = v90;
  if (a5)
    goto LABEL_139;
LABEL_140:
  v85 = a6 - (float)v13;
  *v80 = ((unint64_t)(int)(float)((float)((float)((float)v8 * 0.000015259)
                                                             + (float)((float)-(float)((float)((float)v8 * 0.000015259)
                                                                                     - (float)((float)v84 * 0.000015259))
                                                                     * v85))
                                                     * 65535.0) << 48) | ((unint64_t)(int)(float)((float)((float)((float)v7 * 0.000015259) + (float)((float)-(float)((float)((float)v7 * 0.000015259) - (float)((float)v83 * 0.000015259)) * v85)) * 65535.0) << 32) | ((unint64_t)(int)(float)((float)((float)((float)v6 * 0.000015259) + (float)((float)-(float)((float)((float)v6 * 0.000015259) - (float)((float)v82 * 0.000015259)) * v85)) * 65535.0) << 16) | (int)(float)((float)((float)((float)(unsigned __int16)v11 * 0.000015259) + (float)((float)-(float)((float)((float)(unsigned __int16)v11 * 0.000015259) - (float)((float)v81 * 0.000015259)) * v85)) * 65535.0);
  return result;
}

__int16 *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(__int16 *result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned int v34;

  if (!result)
    goto LABEL_38;
  v4 = a3 >= 0x17 ? 23 : a3;
  v5 = *((unsigned __int8 *)result + v4 + 16);
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)result + 80 * v5;
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_38;
  v9 = *(unsigned __int16 **)v7;
  if (!*(_BYTE *)(v7 + 15))
  {
    v12 = 2 * v8;
    v13 = *(unsigned __int16 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      v12 -= 2;
      if (!v12)
      {
        v13 = &v9[v8];
        break;
      }
    }
    if ((_DWORD)v8 == (unsigned __int16)((unint64_t)((char *)v13 - (char *)v9) >> 1))
      goto LABEL_38;
    goto LABEL_27;
  }
  if (v8 < 0x1E)
  {
    v10 = 0;
    while (1)
    {
      v11 = v9[v10];
      if (v11 >= a2)
        break;
      if (v8 == ++v10)
        goto LABEL_38;
    }
    if (v11 == a2)
      v26 = v10;
    else
      v26 = v8;
    if ((_DWORD)v8 == v26)
      goto LABEL_38;
    goto LABEL_27;
  }
  v14 = *(unsigned __int16 **)v7;
  v15 = v8;
  do
  {
    v16 = v15 >> 1;
    v17 = &v14[v15 >> 1];
    v19 = *v17;
    v18 = v17 + 1;
    v15 += ~(v15 >> 1);
    if (v19 < a2)
      v14 = v18;
    else
      v15 = v16;
  }
  while (v15);
  if (v14 == &v9[v8]
    || *v14 != a2
    || (_DWORD)v8 == (unsigned __int16)((unint64_t)((char *)v14 - (char *)v9) >> 1))
  {
LABEL_38:
    if (a4)
      *a4 = 0;
    return (__int16 *)gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(a2);
  }
LABEL_27:
  v20 = v6 + 80 * v5;
  v21 = *(unsigned __int16 *)(v20 + 58);
  if (!*(_WORD *)(v20 + 58))
    return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v22 = v6 + 80 * v5;
  v23 = *(_QWORD *)(v22 + 48);
  if (*(_BYTE *)(v22 + 63))
  {
    if (v21 >= 0x1E)
    {
      v29 = *(unsigned __int16 **)(v22 + 48);
      v30 = v21;
      do
      {
        v31 = v30 >> 1;
        v32 = &v29[v30 >> 1];
        v34 = *v32;
        v33 = v32 + 1;
        v30 += ~(v30 >> 1);
        if (v34 < a2)
          v29 = v33;
        else
          v30 = v31;
      }
      while (v30);
      if (v29 == (unsigned __int16 *)(v23 + 2 * v21) || *v29 != a2)
        return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      v24 = ((unint64_t)v29 - v23) >> 1;
    }
    else
    {
      v24 = 0;
      result = &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v25 = *(unsigned __int16 *)(v23 + 2 * v24);
        if (v25 >= a2)
          break;
        if (v21 == ++v24)
          return result;
      }
      if (v25 != a2)
        LOWORD(v24) = v21;
    }
  }
  else
  {
    v27 = 2 * v21;
    v28 = *(unsigned __int16 **)(v22 + 48);
    while (*v28 != a2)
    {
      ++v28;
      v27 -= 2;
      if (!v27)
      {
        v28 = (unsigned __int16 *)(v23 + 2 * v21);
        break;
      }
    }
    v24 = ((unint64_t)v28 - v23) >> 1;
  }
  if ((_DWORD)v21 == (unsigned __int16)v24)
    return &gss::PropertySetValueHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  if (v21 > (unsigned __int16)v24)
    return (__int16 *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 56) + 8 * (unsigned __int16)v24);
  return result;
}

unint64_t gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, float a5)
{
  unint64_t v9;
  float v10;
  unsigned int v12;
  unint64_t result;
  unsigned int v14;
  unsigned int v15;
  float32x2_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint32x2_t v21;
  float32x2_t v22;
  uint32x2_t v23;
  int32x2_t v24;
  uint64x2_t v25;
  int64x2_t v26;
  float v27;
  _WORD v28[4];
  _WORD v29[4];
  char v30;
  char v31;

  if (a4 == 2)
  {
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v10 = *(float *)v9;
      LODWORD(v9) = *(float *)v9 == 1.0;
      if (*(_BYTE *)(a2 + 10))
      {
        if (v10 != 0.0 && v10 != 1.0)
          goto LABEL_12;
      }
    }
    v9 = v9;
  }
  else
  {
    v9 = a4;
  }
  v12 = *(unsigned __int8 *)(a2 + v9 + 11);
  v10 = 0.0;
  if (v12 == 2)
  {
LABEL_12:
    v27 = v10;
    v31 = 1;
    v30 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)v29, a2, a3, 0, (BOOL *)&v31, a5);
    result = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)v28, a2, a3, 1u, (BOOL *)&v30, a5);
    LOWORD(v14) = v29[0];
    LOWORD(v15) = v29[1];
    v16 = (float32x2_t)vdup_n_s32(0x37800080u);
    LOWORD(v17) = v28[0];
    LOWORD(v18) = v28[1];
    v19 = (int)(float)((float)((float)((float)v14 * 0.000015259)
                                           + (float)((float)-(float)((float)((float)v14 * 0.000015259)
                                                                   - (float)((float)v17 * 0.000015259))
                                                   * v27))
                                   * 65535.0);
    v20 = (int)(float)((float)((float)((float)v15 * 0.000015259)
                                           + (float)((float)-(float)((float)((float)v15 * 0.000015259)
                                                                   - (float)((float)v18 * 0.000015259))
                                                   * v27))
                                   * 65535.0);
    v21.i32[0] = v29[2];
    v21.i32[1] = v29[3];
    v22 = vmul_f32(vcvt_f32_u32(v21), v16);
    v23.i32[0] = v28[2];
    v23.i32[1] = v28[3];
    v24 = vcvt_s32_f32(vmul_f32(vmla_n_f32(v22, vmla_f32(vneg_f32(v22), v16, vcvt_f32_u32(v23)), v27), (float32x2_t)vdup_n_s32(0x477FFF00u)));
    v25.i64[0] = v24.u32[0];
    v25.i64[1] = v24.u32[1];
    v26 = (int64x2_t)vshlq_u64(v25, (uint64x2_t)xmmword_19FFB3810);
    *a1 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v26, 1), (int8x16_t)v26).u64[0] | (v20 << 16) | v19;
    return result;
  }
  return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)a1, a2, a3, v12, 0, a5);
}

void geo::read_write_lock::write_lock(pthread_rwlock_t *this)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_wrlock(this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"write lock", v2);
}

void gss::CartoStyle<gss::PropertyID>::populateStyles(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  std::mutex *v6;
  gss::Allocator *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  gss::Allocator *isSpaceAvailable;
  unsigned __int16 *v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  gss::Allocator *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *v48;
  unsigned int v49;
  unsigned __int16 v50;
  __int16 v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  gss::Allocator **v56;
  gss::Allocator *v57;
  uint64_t v58;
  uint64_t v59;
  _WORD *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  _WORD *v64;
  _WORD *v65;
  __int16 *v66;
  unsigned __int16 *v67;
  unint64_t v68;
  int v69;
  __int16 v70;
  unsigned __int16 v71;
  uint64_t v72;
  _WORD *v73;
  uint64_t v74;
  const void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int16 *v80;
  int v81;
  const void **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  const void **v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  unsigned int v97;
  uint64_t v98;
  _WORD *v99;
  unsigned int v100;
  unsigned __int16 v101;
  uint64_t v102;
  uint64_t v103;
  gss::Allocator *v104;
  uint64_t v105;
  uint64_t v106;
  _WORD *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  _WORD *v112;
  unsigned int v113;
  unsigned __int16 v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  gss::Allocator *v118;
  uint64_t v119;
  uint64_t v120;
  _WORD *v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  _WORD *v125;
  uint64_t v126;
  _WORD *v127;
  unsigned __int16 *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  unsigned int v132;
  _WORD *v133;
  uint64_t v134;
  _WORD *v135;
  unsigned __int16 *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (***v141)();
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  std::mutex *v149;
  _BYTE *v150;
  char *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int v155;
  __int16 *v156;
  uint64_t v157;
  const void **v158;
  _BYTE v159[15];
  char v160;
  _BYTE v161[15];
  char v162;
  _BYTE v163[15];
  char v164;
  _BYTE v165[15];
  char v166;
  _BYTE v167[15];
  char v168;
  char v169;
  __int128 v170;
  __int128 v171;
  int v172;

  v2 = a2;
  v3 = a1;
  v4 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v4 >> 47) ^ v4);
  v6 = (std::mutex *)(a2
                    + ((unint64_t)((9 * ((v5 >> 47) ^ v5)) & 0x1F) << 6)
                    + 480);
  std::mutex::lock(v6);
  v8 = atomic_load((unsigned __int8 *)(v3 + 123));
  if ((v8 & 1) == 0)
  {
    if (*(_QWORD *)(v3 + 72))
    {
LABEL_123:
      atomic_store(1u, (unsigned __int8 *)(v3 + 123));
      goto LABEL_124;
    }
    v149 = v6;
    v9 = gss::Allocator::instance(v7);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 72, 8);
    *(_QWORD *)v10 = &off_1E42E58F0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = v9;
    v11 = 0uLL;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_QWORD *)(v10 + 64) = 0;
    *(_OWORD *)(v10 + 32) = 0u;
    v12 = *(std::__shared_weak_count **)(v3 + 80);
    *(_QWORD *)(v3 + 72) = v10 + 32;
    *(_QWORD *)(v3 + 80) = v10;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v11 = 0uLL;
      }
    }
    v170 = v11;
    v171 = v11;
    v172 = 1065353216;
    v169 = 0;
    memset(v159, 0, sizeof(v159));
    v160 = 1;
    memset(v161, 0, sizeof(v161));
    v162 = 1;
    memset(v163, 0, sizeof(v163));
    v164 = 1;
    memset(v165, 0, sizeof(v165));
    v166 = 1;
    memset(v167, 0, sizeof(v167));
    v168 = 1;
    v154 = v2;
    gss::CartoStyle<gss::PropertyID>::applyStyle(v3, (uint64_t *)v159, v2, -1.0);
    gss::StylePropertySet<gss::PropertyID>::shrink_to_fit((gss::Allocator *)v159);
    std::__hash_table<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::__unordered_map_hasher<gss::StylePropertySet<gss::PropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::hash<gss::StylePropertySet<gss::PropertyID>>,std::equal_to<gss::StylePropertySet<gss::PropertyID>>,true>,std::__unordered_map_equal<gss::StylePropertySet<gss::PropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::equal_to<gss::StylePropertySet<gss::PropertyID>>,std::hash<gss::StylePropertySet<gss::PropertyID>>,true>,std::allocator<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>>>::__emplace_unique_key_args<gss::StylePropertySet<gss::PropertyID>,gss::StylePropertySet<gss::PropertyID>,unsigned char &>((uint64_t)&v170, (uint64_t)v159, (uint64_t)v159, &v169);
    v169 = 1;
    gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)v159);
    v15 = 0;
    LOBYTE(v16) = 1;
    do
    {
      memset(v159, 0, sizeof(v159));
      v160 = 1;
      memset(v161, 0, sizeof(v161));
      v162 = 1;
      memset(v163, 0, sizeof(v163));
      v164 = 1;
      memset(v165, 0, sizeof(v165));
      v166 = 1;
      memset(v167, 0, sizeof(v167));
      v168 = 1;
      gss::CartoStyle<gss::PropertyID>::applyStyle(v3, (uint64_t *)v159, v154, (float)v15);
      gss::StylePropertySet<gss::PropertyID>::shrink_to_fit((gss::Allocator *)v159);
      v18 = std::__hash_table<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::__unordered_map_hasher<gss::StylePropertySet<gss::PropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::hash<gss::StylePropertySet<gss::PropertyID>>,std::equal_to<gss::StylePropertySet<gss::PropertyID>>,true>,std::__unordered_map_equal<gss::StylePropertySet<gss::PropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,std::equal_to<gss::StylePropertySet<gss::PropertyID>>,std::hash<gss::StylePropertySet<gss::PropertyID>>,true>,std::allocator<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>>>::__emplace_unique_key_args<gss::StylePropertySet<gss::PropertyID>,gss::StylePropertySet<gss::PropertyID>,unsigned char &>((uint64_t)&v170, (uint64_t)v159, (uint64_t)v159, &v169);
      if (v19)
      {
        LOBYTE(v16) = v16 + 1;
        v169 = v16;
      }
      *(_BYTE *)(*(_QWORD *)(v3 + 72) + v15 + 16) = *((_BYTE *)v18 + 96);
      isSpaceAvailable = (gss::Allocator *)gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)v159);
      ++v15;
    }
    while (v15 != 24);
    v20 = *(_QWORD *)(v3 + 72);
    if (!*(_BYTE *)(v20 + 12))
    {
      v21 = *(unsigned __int16 *)(v20 + 8);
      if (v21 <= v16)
      {
        if (v21 >= v16)
          goto LABEL_25;
        v16 = v16;
        if (*(unsigned __int16 *)(v20 + 10) < v16)
        {
          isSpaceAvailable = geo::intern_vector<gss::StylePropertySet<gss::PropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::PropertyID>,gss::Allocator>>::reallocate(*(gss::Allocator ***)(v3 + 72), v16);
          v21 = *(unsigned __int16 *)(v20 + 8);
        }
        if (v21 != v16)
        {
          v23 = *(_QWORD *)v20 + 80 * v16;
          v24 = *(_QWORD *)v20 + 80 * v21;
          do
          {
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            *(_BYTE *)(v24 + 15) = 1;
            *(_QWORD *)(v24 + 16) = 0;
            *(_QWORD *)(v24 + 23) = 0;
            *(_BYTE *)(v24 + 31) = 1;
            *(_QWORD *)(v24 + 32) = 0;
            *(_QWORD *)(v24 + 39) = 0;
            *(_BYTE *)(v24 + 47) = 1;
            *(_QWORD *)(v24 + 48) = 0;
            *(_QWORD *)(v24 + 55) = 0;
            *(_BYTE *)(v24 + 63) = 1;
            *(_QWORD *)(v24 + 64) = 0;
            *(_QWORD *)(v24 + 71) = 0;
            *(_BYTE *)(v24 + 79) = 1;
            v24 += 80;
          }
          while (v24 != v23);
        }
      }
      else
      {
        isSpaceAvailable = (gss::Allocator *)(*(_QWORD *)v20 + 80 * v16);
        v22 = 80 * *(unsigned __int16 *)(v20 + 8) - 80 * v16;
        do
        {
          isSpaceAvailable = (gss::Allocator *)(gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)isSpaceAvailable)
                                              + 80);
          v22 -= 80;
        }
        while (v22);
        v16 = v16;
      }
      *(_WORD *)(v20 + 8) = v16;
    }
LABEL_25:
    v25 = (uint64_t *)v171;
    if ((_QWORD)v171)
    {
      v26 = 80;
      v152 = v3;
      while (1)
      {
        v27 = *(uint64_t **)(v3 + 72);
        v28 = *((unsigned __int8 *)v25 + 96);
        v29 = (uint64_t *)(*v27 + 80 * *((unsigned __int8 *)v25 + 96));
        if (v29 == v25 + 2)
          goto LABEL_29;
        v157 = *v27;
        if (!*((_BYTE *)v29 + 14) && *v29)
        {
          v30 = gss::Allocator::instance(isSpaceAvailable);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 40))(v30, *v29, *((unsigned __int16 *)v29 + 6));
        }
        *(uint64_t *)((char *)v29 + 7) = 0;
        *v29 = 0;
        *((_BYTE *)v29 + 15) = 1;
        v31 = (gss::Allocator *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v29, (uint64_t)(v25 + 2));
        v32 = v157;
        v33 = v157 + 80 * v28;
        v34 = (_QWORD *)(v33 + 16);
        if (!*(_BYTE *)(v33 + 30) && *v34)
        {
          v35 = gss::Allocator::instance(v31);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v35 + 40))(v35, *v34, *(unsigned __int16 *)(v157 + 80 * v28 + 28));
          v32 = v157;
        }
        *(_QWORD *)((char *)v34 + 7) = 0;
        *v34 = 0;
        *(_BYTE *)(v32 + 80 * v28 + 31) = 1;
        isSpaceAvailable = (gss::Allocator *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v34, (uint64_t)(v25 + 4));
        v36 = v157;
        v37 = v157 + 80 * v28;
        v39 = *(unsigned __int8 *)(v37 + 46);
        v38 = (char *)(v37 + 46);
        v40 = v38 - 14;
        v158 = (const void **)(v38 - 14);
        if (!v39 && *(_QWORD *)v40)
        {
          v41 = gss::Allocator::instance(isSpaceAvailable);
          isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v41 + 40))(v41, *v158, *(unsigned __int16 *)(v157 + 80 * v28 + 44));
          v36 = v157;
          v40 = v38 - 14;
        }
        v42 = v36 + 80 * v28;
        *(_BYTE *)(v42 + 47) = 1;
        v43 = (_BYTE *)(v42 + 47);
        *(_QWORD *)(v40 + 7) = 0;
        *(_QWORD *)v40 = 0;
        v155 = v28;
        if (*((_BYTE *)v25 + 62))
        {
          *(_QWORD *)v40 = v25[6];
          v44 = v36;
          *(_DWORD *)(v36 + 80 * v28 + 40) = *((_DWORD *)v25 + 14);
          v45 = 1;
        }
        else
        {
          v46 = *((unsigned __int16 *)v25 + 29);
          v150 = v43;
          v151 = v38;
          if (*v38
            || (v47 = v36 + 80 * v28,
                v49 = *(unsigned __int16 *)(v47 + 44),
                v48 = (_WORD *)(v47 + 44),
                v49 >= v46))
          {
            v57 = 0;
          }
          else
          {
            v50 = ((2 * v46) & 0xFFFC) + 4;
            v51 = *((_WORD *)v25 + 29);
            v52 = v50 + 4 * v46;
            v53 = gss::Allocator::instance(isSpaceAvailable);
            v54 = v52 & 0xFFFC;
            v55 = v155;
            isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v54, 1);
            v36 = v157;
            v56 = (gss::Allocator **)(v38 - 14);
            v57 = isSpaceAvailable;
            if (*v158)
            {
              v58 = v157 + 80 * v155;
              v61 = *(unsigned __int16 *)(v58 + 42);
              v60 = (_WORD *)(v58 + 42);
              v59 = v61;
              if (v61)
              {
                isSpaceAvailable = (gss::Allocator *)memmove(isSpaceAvailable, *v158, 2 * v59);
                if (*v60)
                  isSpaceAvailable = (gss::Allocator *)memmove((char *)v57 + v50, (char *)*v158 + *(unsigned __int16 *)(v157 + 80 * v155 + 40), 4 * (unsigned __int16)*v60);
              }
              v62 = gss::Allocator::instance(isSpaceAvailable);
              isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v62 + 40))(v62, *v158, (unsigned __int16)*v48);
              v56 = (gss::Allocator **)(v38 - 14);
              v55 = v155;
              v36 = v157;
            }
            *v48 = v51;
            *v56 = v57;
            *(_WORD *)(v36 + 80 * v55 + 40) = v50;
            v46 = *((unsigned __int16 *)v25 + 29);
          }
          v63 = 0;
          v68 = v36 + 80 * v155;
          v64 = 0;
          v65 = (_WORD *)(v68 + 42);
          v66 = (__int16 *)(v68 + 44);
          v67 = (unsigned __int16 *)(v68 + 40);
          LOWORD(v68) = v46;
          v153 = v25;
          v156 = v66;
          while (v63 != (_DWORD)v46)
          {
            v69 = (unsigned __int16)*v65;
            if (v69 == (unsigned __int16)*v66)
            {
              if (v69 == 0xFFFF)
                break;
              if (2 * (v69 & 0x7FFFu) <= 4)
                v70 = 4;
              else
                v70 = 2 * (v69 & 0x7FFF);
              v71 = 2 * v70 + 4;
              v72 = v46;
              v73 = v64;
              v74 = gss::Allocator::instance(isSpaceAvailable);
              isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v74 + 16))(v74, (unsigned __int16)(v71 + 4 * v70) & 0xFFFC, 1);
              v46 = v72;
              v75 = v158;
              v64 = v73;
              v57 = isSpaceAvailable;
              if (*v158)
              {
                v76 = v46;
                if (*v65)
                {
                  isSpaceAvailable = (gss::Allocator *)memmove(isSpaceAvailable, *v158, 2 * (unsigned __int16)*v65);
                  if (*v65)
                    isSpaceAvailable = (gss::Allocator *)memmove((char *)v57 + v71, (char *)*v158 + *v67, 4 * (unsigned __int16)*v65);
                }
                v77 = gss::Allocator::instance(isSpaceAvailable);
                v75 = v158;
                isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v77 + 40))(v77, *v158, (unsigned __int16)*v156);
                v46 = v76;
                v64 = v73;
                v25 = v153;
              }
              v66 = v156;
              *v156 = v70;
              *v75 = v57;
              *v67 = v71;
              LOWORD(v68) = *((_WORD *)v25 + 29);
            }
            if (v63 < (unsigned __int16)v68)
            {
              v78 = v25[6];
              v64 = (_WORD *)(v78 + 2 * v63);
              v38 = (char *)(v78 + *((unsigned __int16 *)v25 + 28) + 4 * v63);
            }
            v68 = (unsigned __int16)*v65;
            *((_WORD *)v57 + v68) = *v64;
            *(_DWORD *)((char *)v57 + 4 * v68 + *v67) = *(_DWORD *)v38;
            *v65 = v68 + 1;
            LODWORD(v68) = *((unsigned __int16 *)v25 + 29);
            if (v63 + 1 < v68)
              ++v63;
            else
              v63 = *((unsigned __int16 *)v25 + 29);
          }
          v45 = *((_BYTE *)v25 + 62);
          v26 = 80;
          v28 = v155;
          v44 = v157;
          v43 = v150;
          v38 = v151;
        }
        *v38 = v45;
        *v43 = *((_BYTE *)v25 + 63);
        v79 = v44 + 80 * v28;
        v81 = *(unsigned __int8 *)(v79 + 62);
        v80 = (unsigned __int16 *)(v79 + 62);
        v82 = (const void **)(v80 - 7);
        v83 = v44;
        if (!v81 && *v82)
        {
          v84 = gss::Allocator::instance(isSpaceAvailable);
          isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v84 + 40))(v84, *v82, *(unsigned __int16 *)(v157 + 80 * v28 + 60));
          v83 = v157;
        }
        v85 = v83 + 80 * v28;
        *(_BYTE *)(v85 + 63) = 1;
        v86 = (_BYTE *)(v85 + 63);
        *(_QWORD *)((char *)v80 - 7) = 0;
        *v82 = 0;
        if (*((_BYTE *)v25 + 78))
        {
          *v82 = (const void *)v25[8];
          *(_DWORD *)(v83 + 80 * v28 + 56) = *((_DWORD *)v25 + 18);
          goto LABEL_75;
        }
        v110 = *((unsigned __int16 *)v25 + 37);
        if (*(_BYTE *)v80)
          break;
        v111 = v83 + 80 * v28;
        v113 = *(unsigned __int16 *)(v111 + 60);
        v112 = (_WORD *)(v111 + 60);
        if (v113 >= v110)
          break;
        v114 = ((2 * v110) & 0xFFF8) + 8;
        v115 = gss::Allocator::instance(isSpaceAvailable);
        v116 = v155;
        isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v115 + 16))(v115, (unsigned __int16)(v114 + 8 * v110) & 0xFFF8, 1);
        v117 = v157;
        v118 = isSpaceAvailable;
        if (*v82)
        {
          v119 = v157 + 80 * v155;
          v122 = *(unsigned __int16 *)(v119 + 58);
          v121 = (_WORD *)(v119 + 58);
          v120 = v122;
          if (v122)
          {
            isSpaceAvailable = (gss::Allocator *)memmove(isSpaceAvailable, *v82, 2 * v120);
            if (*v121)
              isSpaceAvailable = (gss::Allocator *)memmove((char *)v118 + v114, (char *)*v82 + *(unsigned __int16 *)(v157 + 80 * v155 + 56), 8 * (unsigned __int16)*v121);
          }
          v123 = gss::Allocator::instance(isSpaceAvailable);
          isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v123 + 40))(v123, *v82, (unsigned __int16)*v112);
          v116 = v155;
          v117 = v157;
        }
        *v112 = v110;
        *v82 = v118;
        *(_WORD *)(v117 + 80 * v116 + 56) = v114;
        v110 = *((unsigned __int16 *)v25 + 37);
        if (*((_WORD *)v25 + 37))
          goto LABEL_98;
LABEL_75:
        *(_BYTE *)v80 = *((_BYTE *)v25 + 78);
        *v86 = *((_BYTE *)v25 + 79);
        v87 = 80;
        v88 = v155;
        v89 = v157;
        v90 = v157 + 80 * v155;
        v92 = *(unsigned __int8 *)(v90 + 78);
        v91 = (unsigned __int16 *)(v90 + 78);
        v93 = (const void **)(v91 - 7);
        if (!v92 && *v93)
        {
          v94 = gss::Allocator::instance(isSpaceAvailable);
          isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v94 + 40))(v94, *v93, *(unsigned __int16 *)(v157 + 80 * v155 + 76));
          v89 = v157;
        }
        v95 = v89 + 80 * v155;
        *(_BYTE *)(v95 + 79) = 1;
        v96 = (_BYTE *)(v95 + 79);
        *(_QWORD *)((char *)v91 - 7) = 0;
        *v93 = 0;
        if (*((_BYTE *)v25 + 94))
        {
          *v93 = (const void *)v25[10];
          *(_DWORD *)(v89 + 80 * v155 + 72) = *((_DWORD *)v25 + 22);
        }
        else
        {
          v97 = *((unsigned __int16 *)v25 + 45);
          if (!*(_BYTE *)v91)
          {
            v98 = v89 + 80 * v155;
            v100 = *(unsigned __int16 *)(v98 + 76);
            v99 = (_WORD *)(v98 + 76);
            if (v100 < v97)
            {
              v101 = ((2 * v97) & 0xFFF8) + 8;
              v102 = gss::Allocator::instance(isSpaceAvailable);
              v88 = v155;
              isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v102 + 16))(v102, (unsigned __int16)(v101 + 16 * v97) & 0xFFF8, 1);
              v103 = v157;
              v104 = isSpaceAvailable;
              if (*v93)
              {
                v105 = v157 + 80 * v155;
                v108 = *(unsigned __int16 *)(v105 + 74);
                v107 = (_WORD *)(v105 + 74);
                v106 = v108;
                if (v108)
                {
                  isSpaceAvailable = (gss::Allocator *)memmove(isSpaceAvailable, *v93, 2 * v106);
                  if (*v107)
                    isSpaceAvailable = (gss::Allocator *)memmove((char *)v104 + v101, (char *)*v93 + *(unsigned __int16 *)(v157 + 80 * v155 + 72), 16 * (unsigned __int16)*v107);
                }
                v109 = gss::Allocator::instance(isSpaceAvailable);
                isSpaceAvailable = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v109 + 40))(v109, *v93, (unsigned __int16)*v99);
                v88 = v155;
                v103 = v157;
              }
              *v99 = v97;
              *v93 = v104;
              *(_WORD *)(v103 + 80 * v88 + 72) = v101;
              v97 = *((unsigned __int16 *)v25 + 45);
              if (!*((_WORD *)v25 + 45))
                goto LABEL_28;
LABEL_107:
              v132 = 0;
              v133 = 0;
              v134 = v157 + 80 * v88;
              v135 = (_WORD *)(v134 + 74);
              v136 = (unsigned __int16 *)(v134 + 72);
              do
              {
                isSpaceAvailable = (gss::Allocator *)geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable(v91 - 7);
                if (!(_DWORD)isSpaceAvailable)
                  break;
                if (v132 < *((unsigned __int16 *)v25 + 45))
                {
                  v139 = v25[10];
                  v133 = (_WORD *)(v139 + 2 * v132);
                  v87 = v139 + *((unsigned __int16 *)v25 + 44) + 16 * v132;
                }
                v137 = (unsigned __int16)*v135;
                v138 = (char *)*v93;
                *((_WORD *)*v93 + v137) = *v133;
                *(_OWORD *)&v138[16 * v137 + *v136] = *(_OWORD *)v87;
                ++*v135;
                if (v132 + 1 < *((unsigned __int16 *)v25 + 45))
                  ++v132;
                else
                  v132 = *((unsigned __int16 *)v25 + 45);
              }
              while (v132 != v97);
              goto LABEL_28;
            }
          }
          if (*((_WORD *)v25 + 45))
            goto LABEL_107;
        }
LABEL_28:
        *(_BYTE *)v91 = *((_BYTE *)v25 + 94);
        *v96 = *((_BYTE *)v25 + 95);
        v3 = v152;
        v26 = 80;
LABEL_29:
        v25 = (uint64_t *)*v25;
        if (!v25)
          goto LABEL_115;
      }
      if (!*((_WORD *)v25 + 37))
        goto LABEL_75;
LABEL_98:
      v124 = 0;
      v125 = 0;
      v126 = v157 + 80 * v155;
      v127 = (_WORD *)(v126 + 58);
      v128 = (unsigned __int16 *)(v126 + 56);
      do
      {
        isSpaceAvailable = (gss::Allocator *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable(v80 - 7);
        if (!(_DWORD)isSpaceAvailable)
          break;
        if (v124 < *((unsigned __int16 *)v25 + 37))
        {
          v131 = v25[8];
          v125 = (_WORD *)(v131 + 2 * v124);
          v26 = v131 + *((unsigned __int16 *)v25 + 36) + 8 * v124;
        }
        v129 = (unsigned __int16)*v127;
        v130 = (char *)*v82;
        *((_WORD *)*v82 + v129) = *v125;
        *(_QWORD *)&v130[8 * v129 + *v128] = *(_QWORD *)v26;
        *v127 = v129 + 1;
        if (v124 + 1 < *((unsigned __int16 *)v25 + 37))
          ++v124;
        else
          v124 = *((unsigned __int16 *)v25 + 37);
      }
      while (v124 != v110);
      goto LABEL_75;
    }
LABEL_115:
    std::mutex::lock((std::mutex *)(v154 + 168));
    v140 = *(_QWORD *)(v3 + 72);
    if (*(_WORD *)(v140 + 8))
    {
      v141 = *(uint64_t (****)())v140;
      v142 = 80 * *(unsigned __int16 *)(v140 + 8);
      do
      {
        gss::StylePropertySet<gss::PropertyID>::intern(v141, v154 + 232);
        v141 += 10;
        v142 -= 80;
      }
      while (v142);
    }
    std::mutex::unlock((std::mutex *)(v154 + 168));
    v143 = (_QWORD *)v171;
    if ((_QWORD)v171)
    {
      do
      {
        v144 = (_QWORD *)*v143;
        gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)(v143 + 2));
        operator delete(v143);
        v143 = v144;
      }
      while (v144);
    }
    v145 = (void *)v170;
    *(_QWORD *)&v170 = 0;
    v2 = v154;
    if (v145)
      operator delete(v145);
    v6 = v149;
    goto LABEL_123;
  }
LABEL_124:
  std::mutex::unlock(v6);
  if (*(_WORD *)(v3 + 64))
  {
    v146 = *(uint64_t **)(v3 + 56);
    v147 = 16 * *(unsigned __int16 *)(v3 + 64);
    do
    {
      v148 = *v146;
      v146 += 2;
      gss::CartoStyle<gss::PropertyID>::populateStyles(v148, v2);
      v147 -= 16;
    }
    while (v147);
  }
  atomic_store(1u, (unsigned __int8 *)(v3 + 122));
}

void sub_19F08C754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::unordered_map<gss::StylePropertySet<gss::PropertyID>,unsigned char>::~unordered_map[abi:nn180100](v20 - 128);
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t *gss::defaultValueForKey<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>(int a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t *result;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v44;
  int v45;
  int v46;
  int v47;
  int v49;
  int v50;
  int v51;
  int v52;
  int v54;
  int v55;
  int v56;
  int v57;
  int v59;
  int v60;
  int v62;
  int v63;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v74;
  int v75;
  int v76;
  int v77;
  int v79;
  int v80;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  __int128 v103;
  uint64_t v104;

  v1 = atomic_load((unsigned __int8 *)&qword_1ECE659B8);
  if ((v1 & 1) == 0)
  {
    v31 = a1;
    v32 = __cxa_guard_acquire(&qword_1ECE659B8);
    a1 = v31;
    if (v32)
    {
      v103 = xmmword_19FFB34C0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      _MergedGlobals_2 = v104;
      __cxa_guard_release(&qword_1ECE659B8);
      a1 = v31;
    }
  }
  v2 = atomic_load((unsigned __int8 *)&qword_1ECE659C8);
  if ((v2 & 1) == 0)
  {
    v33 = a1;
    v34 = __cxa_guard_acquire(&qword_1ECE659C8);
    a1 = v33;
    if (v34)
    {
      v103 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE659C0 = v104;
      __cxa_guard_release(&qword_1ECE659C8);
      a1 = v33;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1ECE659D8);
  if ((v3 & 1) == 0)
  {
    v35 = a1;
    v36 = __cxa_guard_acquire(&qword_1ECE659D8);
    a1 = v35;
    if (v36)
    {
      v103 = xmmword_1A0086400;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE659D0 = v104;
      __cxa_guard_release(&qword_1ECE659D8);
      a1 = v35;
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1ECE659E8);
  if ((v4 & 1) == 0)
  {
    v37 = a1;
    v38 = __cxa_guard_acquire(&qword_1ECE659E8);
    a1 = v37;
    if (v38)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE659E0 = v104;
      __cxa_guard_release(&qword_1ECE659E8);
      a1 = v37;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ECE659F8);
  if ((v5 & 1) == 0)
  {
    v44 = a1;
    v45 = __cxa_guard_acquire(&qword_1ECE659F8);
    a1 = v44;
    if (v45)
    {
      v103 = xmmword_1A0086400;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE659F0 = v104;
      __cxa_guard_release(&qword_1ECE659F8);
      a1 = v44;
    }
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1ECE65A08);
  if ((v6 & 1) == 0)
  {
    v46 = a1;
    v47 = __cxa_guard_acquire(&qword_1ECE65A08);
    a1 = v46;
    if (v47)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A00 = v104;
      __cxa_guard_release(&qword_1ECE65A08);
      a1 = v46;
    }
  }
  v7 = atomic_load((unsigned __int8 *)&qword_1ECE65A18);
  if ((v7 & 1) == 0)
  {
    v49 = a1;
    v50 = __cxa_guard_acquire(&qword_1ECE65A18);
    a1 = v49;
    if (v50)
    {
      v103 = xmmword_1A0086410;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A10 = v104;
      __cxa_guard_release(&qword_1ECE65A18);
      a1 = v49;
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_1ECE65A28);
  if ((v8 & 1) == 0)
  {
    v51 = a1;
    v52 = __cxa_guard_acquire(&qword_1ECE65A28);
    a1 = v51;
    if (v52)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A20 = v104;
      __cxa_guard_release(&qword_1ECE65A28);
      a1 = v51;
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_1ECE65A38);
  if ((v9 & 1) == 0)
  {
    v54 = a1;
    v55 = __cxa_guard_acquire(&qword_1ECE65A38);
    a1 = v54;
    if (v55)
    {
      v103 = xmmword_1A0086420;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A30 = v104;
      __cxa_guard_release(&qword_1ECE65A38);
      a1 = v54;
    }
  }
  v10 = atomic_load((unsigned __int8 *)&qword_1ECE65A48);
  if ((v10 & 1) == 0)
  {
    v56 = a1;
    v57 = __cxa_guard_acquire(&qword_1ECE65A48);
    a1 = v56;
    if (v57)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A40 = v104;
      __cxa_guard_release(&qword_1ECE65A48);
      a1 = v56;
    }
  }
  v11 = atomic_load((unsigned __int8 *)&qword_1ECE65A58);
  if ((v11 & 1) == 0)
  {
    v59 = a1;
    v60 = __cxa_guard_acquire(&qword_1ECE65A58);
    a1 = v59;
    if (v60)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A50 = v104;
      __cxa_guard_release(&qword_1ECE65A58);
      a1 = v59;
    }
  }
  v12 = atomic_load((unsigned __int8 *)&qword_1ECE65A68);
  if ((v12 & 1) == 0)
  {
    v62 = a1;
    v63 = __cxa_guard_acquire(&qword_1ECE65A68);
    a1 = v62;
    if (v63)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A60 = v104;
      __cxa_guard_release(&qword_1ECE65A68);
      a1 = v62;
    }
  }
  v13 = atomic_load((unsigned __int8 *)&qword_1ECE65A78);
  if ((v13 & 1) == 0)
  {
    v65 = a1;
    v66 = __cxa_guard_acquire(&qword_1ECE65A78);
    a1 = v65;
    if (v66)
    {
      v103 = xmmword_1A0086430;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A70 = v104;
      __cxa_guard_release(&qword_1ECE65A78);
      a1 = v65;
    }
  }
  v14 = atomic_load((unsigned __int8 *)&qword_1ECE65A88);
  if ((v14 & 1) == 0)
  {
    v67 = a1;
    v68 = __cxa_guard_acquire(&qword_1ECE65A88);
    a1 = v67;
    if (v68)
    {
      v103 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A80 = v104;
      __cxa_guard_release(&qword_1ECE65A88);
      a1 = v67;
    }
  }
  v15 = atomic_load((unsigned __int8 *)&qword_1ECE65A98);
  if ((v15 & 1) == 0)
  {
    v69 = a1;
    v70 = __cxa_guard_acquire(&qword_1ECE65A98);
    a1 = v69;
    if (v70)
    {
      v103 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65A90 = v104;
      __cxa_guard_release(&qword_1ECE65A98);
      a1 = v69;
    }
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1ECE65AA8);
  if ((v16 & 1) == 0)
  {
    v71 = a1;
    v72 = __cxa_guard_acquire(&qword_1ECE65AA8);
    a1 = v71;
    if (v72)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65AA0 = v104;
      __cxa_guard_release(&qword_1ECE65AA8);
      a1 = v71;
    }
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1ECE65AB8);
  if ((v17 & 1) == 0)
  {
    v74 = a1;
    v75 = __cxa_guard_acquire(&qword_1ECE65AB8);
    a1 = v74;
    if (v75)
    {
      v103 = xmmword_1A0086440;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65AB0 = v104;
      __cxa_guard_release(&qword_1ECE65AB8);
      a1 = v74;
    }
  }
  v18 = atomic_load((unsigned __int8 *)&qword_1ECE65AC8);
  if ((v18 & 1) == 0)
  {
    v76 = a1;
    v77 = __cxa_guard_acquire(&qword_1ECE65AC8);
    a1 = v76;
    if (v77)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65AC0 = v104;
      __cxa_guard_release(&qword_1ECE65AC8);
      a1 = v76;
    }
  }
  v19 = atomic_load((unsigned __int8 *)&qword_1ECE65AD8);
  if ((v19 & 1) == 0)
  {
    v79 = a1;
    v80 = __cxa_guard_acquire(&qword_1ECE65AD8);
    a1 = v79;
    if (v80)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65AD0 = v104;
      __cxa_guard_release(&qword_1ECE65AD8);
      a1 = v79;
    }
  }
  v20 = atomic_load((unsigned __int8 *)&qword_1ECE65AE8);
  if ((v20 & 1) == 0)
  {
    v82 = a1;
    v83 = __cxa_guard_acquire(&qword_1ECE65AE8);
    a1 = v82;
    if (v83)
    {
      v103 = xmmword_1A0086450;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65AE0 = v104;
      __cxa_guard_release(&qword_1ECE65AE8);
      a1 = v82;
    }
  }
  v21 = atomic_load((unsigned __int8 *)&qword_1ECE65AF8);
  if ((v21 & 1) == 0)
  {
    v84 = a1;
    v85 = __cxa_guard_acquire(&qword_1ECE65AF8);
    a1 = v84;
    if (v85)
    {
      v103 = xmmword_1A0086460;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65AF0 = v104;
      __cxa_guard_release(&qword_1ECE65AF8);
      a1 = v84;
    }
  }
  v22 = atomic_load((unsigned __int8 *)&qword_1ECE65B08);
  if ((v22 & 1) == 0)
  {
    v86 = a1;
    v87 = __cxa_guard_acquire(&qword_1ECE65B08);
    a1 = v86;
    if (v87)
    {
      v103 = xmmword_1A0086470;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65B00 = v104;
      __cxa_guard_release(&qword_1ECE65B08);
      a1 = v86;
    }
  }
  v23 = atomic_load((unsigned __int8 *)&qword_1ECE65B18);
  if ((v23 & 1) == 0)
  {
    v88 = a1;
    v89 = __cxa_guard_acquire(&qword_1ECE65B18);
    a1 = v88;
    if (v89)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v103 = _Q0;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65B10 = v104;
      __cxa_guard_release(&qword_1ECE65B18);
      a1 = v88;
    }
  }
  v24 = atomic_load((unsigned __int8 *)&qword_1ECE65B28);
  if ((v24 & 1) == 0)
  {
    v91 = a1;
    v92 = __cxa_guard_acquire(&qword_1ECE65B28);
    a1 = v91;
    if (v92)
    {
      v103 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65B20 = v104;
      __cxa_guard_release(&qword_1ECE65B28);
      a1 = v91;
    }
  }
  v25 = atomic_load((unsigned __int8 *)&qword_1ECE65B38);
  if ((v25 & 1) == 0)
  {
    v93 = a1;
    v94 = __cxa_guard_acquire(&qword_1ECE65B38);
    a1 = v93;
    if (v94)
    {
      v103 = xmmword_1A0086400;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65B30 = v104;
      __cxa_guard_release(&qword_1ECE65B38);
      a1 = v93;
    }
  }
  v26 = atomic_load((unsigned __int8 *)&qword_1ECE65B48);
  if ((v26 & 1) == 0)
  {
    v95 = a1;
    v96 = __cxa_guard_acquire(&qword_1ECE65B48);
    a1 = v95;
    if (v96)
    {
      v103 = xmmword_1A0086400;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65B40 = v104;
      __cxa_guard_release(&qword_1ECE65B48);
      a1 = v95;
    }
  }
  v27 = atomic_load((unsigned __int8 *)&qword_1ECE65B58);
  if ((v27 & 1) == 0)
  {
    v97 = a1;
    v98 = __cxa_guard_acquire(&qword_1ECE65B58);
    a1 = v97;
    if (v98)
    {
      v103 = xmmword_1A0086410;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65B50 = v104;
      __cxa_guard_release(&qword_1ECE65B58);
      a1 = v97;
    }
  }
  v28 = atomic_load((unsigned __int8 *)&qword_1ECE65B68);
  if ((v28 & 1) == 0)
  {
    v99 = a1;
    v100 = __cxa_guard_acquire(&qword_1ECE65B68);
    a1 = v99;
    if (v100)
    {
      v103 = xmmword_1A0086420;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65B60 = v104;
      __cxa_guard_release(&qword_1ECE65B68);
      a1 = v99;
    }
  }
  v29 = atomic_load((unsigned __int8 *)&qword_1ECE65B78);
  if ((v29 & 1) == 0)
  {
    v101 = a1;
    v102 = __cxa_guard_acquire(&qword_1ECE65B78);
    a1 = v101;
    if (v102)
    {
      v103 = 0uLL;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)&v103, (int16x4_t *)&v104);
      qword_1ECE65B70 = v104;
      __cxa_guard_release(&qword_1ECE65B78);
      a1 = v101;
    }
  }
  if (a1 <= 161)
  {
    if (a1 > 75)
    {
      if (a1 <= 115)
      {
        switch(a1)
        {
          case 'L':
            return &qword_1ECE65A30;
          case 'M':
            return &qword_1ECE65A40;
          case ']':
            return &qword_1ECE65A50;
        }
      }
      else if (a1 > 134)
      {
        if (a1 == 135)
          return &qword_1ECE65A80;
        if (a1 == 147)
          return &qword_1ECE65A90;
      }
      else
      {
        if (a1 == 116)
          return &qword_1ECE65A60;
        if (a1 == 134)
          return &qword_1ECE65A70;
      }
    }
    else if (a1 <= 53)
    {
      switch(a1)
      {
        case 3:
          return &qword_1ECE659C0;
        case 43:
          return &qword_1ECE659D0;
        case 44:
          return &qword_1ECE659E0;
      }
    }
    else if (a1 > 64)
    {
      if (a1 == 65)
        return &qword_1ECE65A10;
      if (a1 == 66)
        return &qword_1ECE65A20;
    }
    else
    {
      if (a1 == 54)
        return &qword_1ECE659F0;
      if (a1 == 55)
        return &qword_1ECE65A00;
    }
    return &_MergedGlobals_2;
  }
  if (a1 <= 302)
  {
    if (a1 <= 172)
    {
      switch(a1)
      {
        case 162:
          return &qword_1ECE65AA0;
        case 163:
          return &qword_1ECE65AB0;
        case 172:
          return &qword_1ECE65AC0;
      }
    }
    else if (a1 > 181)
    {
      if (a1 == 182)
        return &qword_1ECE65AF0;
      if (a1 == 253)
        return &qword_1ECE65B00;
    }
    else
    {
      if (a1 == 173)
        return &qword_1ECE65AD0;
      if (a1 == 177)
        return &qword_1ECE65AE0;
    }
    return &_MergedGlobals_2;
  }
  if (a1 <= 427)
  {
    if (a1 == 303)
      return &qword_1ECE65B10;
    if (a1 == 342)
      return &qword_1ECE65B20;
    return &_MergedGlobals_2;
  }
  switch(a1)
  {
    case 428:
      result = &qword_1ECE65B30;
      break;
    case 429:
      result = &qword_1ECE65B40;
      break;
    case 430:
      result = &qword_1ECE65B50;
      break;
    case 431:
      result = &qword_1ECE65B60;
      break;
    default:
      if (a1 != 459)
        return &_MergedGlobals_2;
      result = &qword_1ECE65B70;
      break;
  }
  return result;
}

void sub_19F08D564(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECE65B78);
  _Unwind_Resume(a1);
}

uint64_t gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned int v37;

  v4 = *(_QWORD *)(a1 + 16 * a4 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD **)(v4 + 72);
  if (!v5
    || (v6 = *v5 + 80 * *((unsigned __int8 *)v5 + a3 + 16), v7 = *(unsigned __int16 *)(v6 + 10), !*(_WORD *)(v6 + 10)))
  {
LABEL_27:
    v19 = a1 + 16 * a4;
    v20 = *(unsigned __int16 *)(v19 + 56);
    if (*(_WORD *)(v19 + 56))
    {
      v21 = *(_QWORD *)(v19 + 48);
      v22 = v21 + 8 * v20;
      while (1)
      {
        v24 = *(_QWORD **)(*(_QWORD *)v21 + 72);
        if (v24)
        {
          v25 = *v24 + 80 * *((unsigned __int8 *)v24 + a3 + 16);
          v26 = *(unsigned __int16 *)(v25 + 10);
          if (!*(_WORD *)(v25 + 10))
          {
            LOWORD(v23) = 0;
            goto LABEL_30;
          }
          v27 = *(unsigned __int16 **)v25;
          if (!*(_BYTE *)(v25 + 15))
          {
            v30 = 2 * v26;
            v31 = *(unsigned __int16 **)v25;
            while (*v31 != a2)
            {
              ++v31;
              v30 -= 2;
              if (!v30)
              {
                v31 = &v27[v26];
                break;
              }
            }
            v23 = (unint64_t)((char *)v31 - (char *)v27) >> 1;
LABEL_30:
            if ((_DWORD)v26 != (unsigned __int16)v23)
              return 1;
            goto LABEL_31;
          }
          if (v26 < 0x1E)
          {
            v28 = 0;
            while (1)
            {
              v29 = v27[v28];
              if (v29 >= a2)
                break;
              if (v26 == ++v28)
                goto LABEL_31;
            }
            if (v29 == a2)
              LOWORD(v23) = v28;
            else
              LOWORD(v23) = v26;
            goto LABEL_30;
          }
          v32 = *(unsigned __int16 **)v25;
          v33 = v26;
          do
          {
            v34 = v33 >> 1;
            v35 = &v32[v33 >> 1];
            v37 = *v35;
            v36 = v35 + 1;
            v33 += ~(v33 >> 1);
            if (v37 < a2)
              v32 = v36;
            else
              v33 = v34;
          }
          while (v33);
          if (v32 != &v27[v26] && *v32 == a2)
          {
            v23 = (unint64_t)((char *)v32 - (char *)v27) >> 1;
            goto LABEL_30;
          }
        }
LABEL_31:
        v21 += 8;
        if (v21 == v22)
          return 0;
      }
    }
    return 0;
  }
  v8 = *(unsigned __int16 **)v6;
  if (!*(_BYTE *)(v6 + 15))
  {
    v11 = 2 * v7;
    v12 = *(unsigned __int16 **)v6;
    while (*v12 != a2)
    {
      ++v12;
      v11 -= 2;
      if (!v11)
      {
        LODWORD(v12) = (_DWORD)v8 + 2 * v7;
        break;
      }
    }
LABEL_22:
    if ((unsigned __int16)(((_DWORD)v12 - (_DWORD)v8) >> 1) == (_DWORD)v7)
      goto LABEL_27;
    return 1;
  }
  if (v7 >= 0x1E)
  {
    v12 = *(unsigned __int16 **)v6;
    v13 = v7;
    do
    {
      v14 = v13 >> 1;
      v15 = &v12[v13 >> 1];
      v17 = *v15;
      v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2)
        v12 = v16;
      else
        v13 = v14;
    }
    while (v13);
    if (v12 == &v8[v7] || *v12 != a2)
      goto LABEL_27;
    goto LABEL_22;
  }
  v9 = 0;
  while (1)
  {
    v10 = v8[v9];
    if (v10 >= a2)
      break;
    if (v7 == ++v9)
      goto LABEL_27;
  }
  v18 = (unsigned __int16)v9;
  if (v10 != a2)
    v18 = v7;
  if (v18 == (_DWORD)v7)
    goto LABEL_27;
  return 1;
}

unint64_t gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(unint64_t result, unsigned int a2, unsigned int a3, BOOL *a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  char **v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  unsigned int v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  int *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int16 *v68;
  int *v69;
  int *v70;
  unsigned __int16 *v71;
  int *v72;
  unsigned int v73;
  unsigned __int8 v74;
  unsigned __int8 v75;

  LODWORD(v7) = (int)a5;
  if ((int)a5 >= 0x17)
    v8 = 23;
  else
    v8 = v7;
  if (v7 >= 0x16)
    v7 = 22;
  else
    v7 = v7;
  v9 = (int *)(result + 16 * a3);
  v12 = *((_QWORD *)v9 + 2);
  v11 = v9 + 4;
  v10 = v12;
  if (!v12)
  {
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,float>(a2);
  }
  v13 = v7 + 1;
  v14 = (int *)(result + 16 * a3);
  v15 = *((unsigned __int16 *)v14 + 28);
  if (!*((_WORD *)v14 + 28))
  {
    v75 = 1;
    v74 = 1;
LABEL_125:
    gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(v10 + 72), a2, v8, &v75);
LABEL_126:
    result = (unint64_t)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(*(_QWORD *)v11 + 72), a2, v13, &v74);
    if (a4)
LABEL_127:
      *a4 = (v75 | v74) != 0;
    return result;
  }
  v16 = 0;
  v17 = (uint64_t *)*((_QWORD *)v14 + 6);
  v18 = &v17[v15];
  while (2)
  {
    LOBYTE(v19) = 0;
    while (1)
    {
      v21 = *v17;
      if ((v19 & 1) == 0)
      {
        v22 = *(uint64_t **)(v21 + 72);
        if (!v22)
          goto LABEL_51;
        v23 = *((unsigned __int8 *)v22 + v8 + 16);
        v24 = *v22;
        v25 = (char **)(v24 + 80 * v23);
        v26 = *((unsigned __int16 *)v25 + 5);
        if (!*((_WORD *)v25 + 5))
        {
          result = 0;
LABEL_51:
          v19 = 0;
          if ((v16 & 1) != 0)
          {
LABEL_88:
            if (v19)
              goto LABEL_129;
            goto LABEL_116;
          }
          goto LABEL_52;
        }
        result = (unint64_t)*v25;
        if (*((_BYTE *)v25 + 15))
        {
          if (v26 >= 0x1E)
          {
            v31 = *v25;
            v32 = v26;
            do
            {
              v33 = v32 >> 1;
              v34 = (unsigned __int16 *)&v31[2 * (v32 >> 1)];
              v36 = *v34;
              v35 = v34 + 1;
              v32 += ~(v32 >> 1);
              if (v36 < a2)
                v31 = (char *)v35;
              else
                v32 = v33;
            }
            while (v32);
            if (v31 == (char *)(result + 2 * v26))
              goto LABEL_51;
            if (*(unsigned __int16 *)v31 != a2)
              goto LABEL_51;
            result = (unint64_t)&v31[-result] >> 1;
            if ((_DWORD)v26 == (unsigned __int16)result)
              goto LABEL_51;
          }
          else
          {
            v27 = 0;
            while (1)
            {
              v28 = *(unsigned __int16 *)(result + 2 * v27);
              if (v28 >= a2)
                break;
              if (v26 == ++v27)
                goto LABEL_51;
            }
            if (v28 == a2)
              result = v27;
            else
              result = v26;
            if ((_DWORD)v26 == (unsigned __int16)result)
              goto LABEL_51;
          }
        }
        else
        {
          v29 = 2 * v26;
          v30 = *v25;
          while (*(unsigned __int16 *)v30 != a2)
          {
            v30 += 2;
            v29 -= 2;
            if (!v29)
            {
              v30 = (char *)(result + 2 * v26);
              break;
            }
          }
          result = (unint64_t)&v30[-result] >> 1;
          if ((_DWORD)v26 == (unsigned __int16)result)
            goto LABEL_51;
        }
        v37 = v24 + 80 * v23;
        result = *(unsigned __int16 *)(v37 + 42);
        if (*(_WORD *)(v37 + 42))
        {
          v38 = v24 + 80 * v23;
          v39 = *(_QWORD *)(v38 + 32);
          if (*(_BYTE *)(v38 + 47))
          {
            if (result >= 0x1E)
            {
              v56 = *(unsigned __int16 **)(v38 + 32);
              v57 = result;
              do
              {
                v58 = v57 >> 1;
                v59 = &v56[v57 >> 1];
                v61 = *v59;
                v60 = v59 + 1;
                v57 += ~(v57 >> 1);
                if (v61 < a2)
                  v56 = v60;
                else
                  v57 = v58;
              }
              while (v57);
            }
            else
            {
              v40 = 0;
              do
              {
                v41 = *(unsigned __int16 *)(v39 + 2 * (_QWORD)v40);
                if (v41 >= a2)
                  break;
                v40 = (int *)((char *)v40 + 1);
              }
              while ((int *)result != v40);
            }
          }
          else
          {
            v54 = 2 * result;
            v55 = *(unsigned __int16 **)(v38 + 32);
            do
            {
              if (*v55 == a2)
                break;
              ++v55;
              v54 -= 2;
            }
            while (v54);
          }
        }
      }
      v19 = 1;
      if ((v16 & 1) != 0)
        goto LABEL_88;
LABEL_52:
      v42 = *(uint64_t **)(v21 + 72);
      if (v42)
      {
        v43 = *((unsigned __int8 *)v42 + v13 + 16);
        v44 = *v42;
        result = v44 + 80 * v43;
        v45 = *(unsigned __int16 *)(result + 10);
        if (*(_WORD *)(result + 10))
        {
          v46 = *(_QWORD *)result;
          if (*(_BYTE *)(result + 15))
          {
            if (v45 >= 0x1E)
            {
              result = *(_QWORD *)result;
              v49 = v45;
              do
              {
                v50 = v49 >> 1;
                v51 = (unsigned __int16 *)(result + 2 * (v49 >> 1));
                v53 = *v51;
                v52 = (int *)(v51 + 1);
                v49 += ~(v49 >> 1);
                if (v53 < a2)
                  result = (unint64_t)v52;
                else
                  v49 = v50;
              }
              while (v49);
              if (result == v46 + 2 * v45 || *(unsigned __int16 *)result != a2)
                goto LABEL_13;
              v20 = (result - v46) >> 1;
            }
            else
            {
              result = 0;
              while (1)
              {
                v47 = *(unsigned __int16 *)(v46 + 2 * result);
                if (v47 >= a2)
                  break;
                if (v45 == ++result)
                  goto LABEL_13;
              }
              LOWORD(v20) = v47 == a2 ? result : (unsigned __int16)v45;
            }
          }
          else
          {
            v48 = 2 * v45;
            result = *(_QWORD *)result;
            while (*(unsigned __int16 *)result != a2)
            {
              result += 2;
              v48 -= 2;
              if (!v48)
              {
                result = v46 + 2 * v45;
                break;
              }
            }
            v20 = (result - v46) >> 1;
          }
        }
        else
        {
          LOWORD(v20) = 0;
        }
        if ((_DWORD)v45 != (unsigned __int16)v20)
          break;
      }
LABEL_13:
      v16 = 0;
      if (++v17 == v18)
      {
        v75 = 1;
        v74 = 1;
        if ((v19 & 1) == 0)
          goto LABEL_125;
        goto LABEL_126;
      }
    }
    v62 = v44 + 80 * v43;
    v63 = *(unsigned __int16 *)(v62 + 42);
    if (*(_WORD *)(v62 + 42))
    {
      v64 = v44 + 80 * v43;
      v65 = *(_QWORD *)(v64 + 32);
      if (!*(_BYTE *)(v64 + 47))
      {
        v67 = 2 * v63;
        v68 = *(unsigned __int16 **)(v64 + 32);
        while (*v68 != a2)
        {
          ++v68;
          v67 -= 2;
          if (!v67)
          {
            v68 = (unsigned __int16 *)(v65 + 2 * v63);
            break;
          }
        }
        result = ((unint64_t)v68 - v65) >> 1;
LABEL_115:
        if ((v19 & 1) != 0)
          goto LABEL_129;
        goto LABEL_116;
      }
      if (v63 < 0x1E)
      {
        result = 0;
        while (1)
        {
          v66 = *(unsigned __int16 *)(v65 + 2 * result);
          if (v66 >= a2)
            break;
          if (v63 == ++result)
            goto LABEL_110;
        }
        if (v66 == a2)
          result = result;
        else
          result = v63;
        goto LABEL_115;
      }
      result = *(_QWORD *)(v64 + 32);
      v69 = (int *)v63;
      do
      {
        v70 = (int *)((unint64_t)v69 >> 1);
        v71 = (unsigned __int16 *)(result + 2 * ((unint64_t)v69 >> 1));
        v73 = *v71;
        v72 = (int *)(v71 + 1);
        v69 = (int *)((char *)v69 + ~((unint64_t)v69 >> 1));
        if (v73 < a2)
          result = (unint64_t)v72;
        else
          v69 = v70;
      }
      while (v69);
      if (result != v65 + 2 * v63)
      {
        if (*(unsigned __int16 *)result == a2)
          result = (result - v65) >> 1;
        goto LABEL_115;
      }
    }
LABEL_110:
    if ((v19 & 1) != 0)
    {
LABEL_129:
      v75 = 1;
      v74 = 1;
      if (a4)
        goto LABEL_127;
      return result;
    }
LABEL_116:
    ++v17;
    v16 = 1;
    if (v17 != v18)
      continue;
    break;
  }
  v75 = 1;
  v74 = 1;
  result = (unint64_t)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(v10 + 72), a2, v8, &v75);
  if (a4)
    goto LABEL_127;
  return result;
}

int *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int16 **v16;
  unint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  int *result;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned int v44;

  v5 = *(_QWORD *)(a1 + 16 * a4 + 16);
  if (!v5)
  {
    if (a5)
      *a5 = 0;
    return (int *)gss::defaultValueForKey<gss::PropertyID,float>(a2);
  }
  v6 = a1 + 16 * a4;
  v7 = *(unsigned __int16 *)(v6 + 56);
  if (!*(_WORD *)(v6 + 56))
    return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(v5 + 72), a2, a3, a5);
  v8 = *(_QWORD *)(v6 + 48);
  v9 = v8 + 8 * v7;
  if (a3 >= 0x17)
    v10 = 23;
  else
    v10 = a3;
  while (1)
  {
    v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
    if (v12)
    {
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      v16 = (unsigned __int16 **)(v15 + 80 * *((unsigned __int8 *)v14 + a3));
      v17 = *((unsigned __int16 *)v16 + 5);
      if (*((_WORD *)v16 + 5))
      {
        v18 = *v16;
        if (*((_BYTE *)v16 + 15))
        {
          if (v17 >= 0x1E)
          {
            v23 = *v16;
            v24 = v17;
            do
            {
              v25 = v24 >> 1;
              v26 = &v23[v24 >> 1];
              v28 = *v26;
              v27 = v26 + 1;
              v24 += ~(v24 >> 1);
              if (v28 < a2)
                v23 = v27;
              else
                v24 = v25;
            }
            while (v24);
            if (v23 == &v18[v17] || *v23 != a2)
              goto LABEL_8;
            v11 = (unint64_t)((char *)v23 - (char *)v18) >> 1;
          }
          else
          {
            v19 = 0;
            while (1)
            {
              v20 = v18[v19];
              if (v20 >= a2)
                break;
              if (v17 == ++v19)
                goto LABEL_8;
            }
            LOWORD(v11) = v20 == a2 ? v19 : (unsigned __int16)v17;
          }
        }
        else
        {
          v21 = 2 * v17;
          v22 = *v16;
          while (*v22 != a2)
          {
            ++v22;
            v21 -= 2;
            if (!v21)
            {
              v22 = &v18[v17];
              break;
            }
          }
          v11 = (unint64_t)((char *)v22 - (char *)v18) >> 1;
        }
      }
      else
      {
        LOWORD(v11) = 0;
      }
      if ((_DWORD)v17 != (unsigned __int16)v11)
        break;
    }
LABEL_8:
    v8 += 8;
    if (v8 == v9)
      return gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(*(int **)(v5 + 72), a2, a3, a5);
  }
  v30 = *((unsigned __int8 *)v14 + v10);
  v31 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v32 = *(unsigned __int16 *)(v31 + 42);
  if (!*(_WORD *)(v31 + 42))
    return &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v33 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v34 = *(_QWORD *)(v33 + 32);
  if (*(_BYTE *)(v33 + 47))
  {
    if (v32 < 0x1E)
    {
      v35 = 0;
      result = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v36 = *(unsigned __int16 *)(v34 + 2 * v35);
        if (v36 >= a2)
          break;
        if (v32 == ++v35)
          return result;
      }
      if (v36 != a2)
        LOWORD(v35) = v32;
      goto LABEL_59;
    }
    v39 = *(unsigned __int16 **)(v33 + 32);
    v40 = v32;
    do
    {
      v41 = v40 >> 1;
      v42 = &v39[v40 >> 1];
      v44 = *v42;
      v43 = v42 + 1;
      v40 += ~(v40 >> 1);
      if (v44 < a2)
        v39 = v43;
      else
        v40 = v41;
    }
    while (v40);
    if (v39 != (unsigned __int16 *)(v34 + 2 * v32) && *v39 == a2)
    {
      v35 = ((unint64_t)v39 - v34) >> 1;
      goto LABEL_59;
    }
    return &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  else
  {
    v37 = 2 * v32;
    v38 = *(unsigned __int16 **)(v33 + 32);
    while (*v38 != a2)
    {
      ++v38;
      v37 -= 2;
      if (!v37)
      {
        v38 = (unsigned __int16 *)(v34 + 2 * v32);
        break;
      }
    }
    v35 = ((unint64_t)v38 - v34) >> 1;
LABEL_59:
    if (v32 <= (unsigned __int16)v35)
      return &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    return (int *)(v34 + *(unsigned __int16 *)(v13 + 80 * v30 + 40) + 4 * (unsigned __int16)v35);
  }
}

int *gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<float>(int *result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned int v34;

  if (!result)
    goto LABEL_38;
  v4 = a3 >= 0x17 ? 23 : a3;
  v5 = *((unsigned __int8 *)result + v4 + 16);
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)result + 80 * v5;
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_38;
  v9 = *(unsigned __int16 **)v7;
  if (!*(_BYTE *)(v7 + 15))
  {
    v12 = 2 * v8;
    v13 = *(unsigned __int16 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      v12 -= 2;
      if (!v12)
      {
        v13 = &v9[v8];
        break;
      }
    }
    if ((_DWORD)v8 == (unsigned __int16)((unint64_t)((char *)v13 - (char *)v9) >> 1))
      goto LABEL_38;
    goto LABEL_27;
  }
  if (v8 < 0x1E)
  {
    v10 = 0;
    while (1)
    {
      v11 = v9[v10];
      if (v11 >= a2)
        break;
      if (v8 == ++v10)
        goto LABEL_38;
    }
    if (v11 == a2)
      v26 = v10;
    else
      v26 = v8;
    if ((_DWORD)v8 == v26)
      goto LABEL_38;
    goto LABEL_27;
  }
  v14 = *(unsigned __int16 **)v7;
  v15 = v8;
  do
  {
    v16 = v15 >> 1;
    v17 = &v14[v15 >> 1];
    v19 = *v17;
    v18 = v17 + 1;
    v15 += ~(v15 >> 1);
    if (v19 < a2)
      v14 = v18;
    else
      v15 = v16;
  }
  while (v15);
  if (v14 == &v9[v8]
    || *v14 != a2
    || (_DWORD)v8 == (unsigned __int16)((unint64_t)((char *)v14 - (char *)v9) >> 1))
  {
LABEL_38:
    if (a4)
      *a4 = 0;
    return (int *)gss::defaultValueForKey<gss::PropertyID,float>(a2);
  }
LABEL_27:
  v20 = v6 + 80 * v5;
  v21 = *(unsigned __int16 *)(v20 + 42);
  if (!*(_WORD *)(v20 + 42))
    return &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v22 = v6 + 80 * v5;
  v23 = *(_QWORD *)(v22 + 32);
  if (*(_BYTE *)(v22 + 47))
  {
    if (v21 >= 0x1E)
    {
      v29 = *(unsigned __int16 **)(v22 + 32);
      v30 = v21;
      do
      {
        v31 = v30 >> 1;
        v32 = &v29[v30 >> 1];
        v34 = *v32;
        v33 = v32 + 1;
        v30 += ~(v30 >> 1);
        if (v34 < a2)
          v29 = v33;
        else
          v30 = v31;
      }
      while (v30);
      if (v29 == (unsigned __int16 *)(v23 + 2 * v21) || *v29 != a2)
        return &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      v24 = ((unint64_t)v29 - v23) >> 1;
    }
    else
    {
      v24 = 0;
      result = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        v25 = *(unsigned __int16 *)(v23 + 2 * v24);
        if (v25 >= a2)
          break;
        if (v21 == ++v24)
          return result;
      }
      if (v25 != a2)
        LOWORD(v24) = v21;
    }
  }
  else
  {
    v27 = 2 * v21;
    v28 = *(unsigned __int16 **)(v22 + 32);
    while (*v28 != a2)
    {
      ++v28;
      v27 -= 2;
      if (!v27)
      {
        v28 = (unsigned __int16 *)(v23 + 2 * v21);
        break;
      }
    }
    v24 = ((unint64_t)v28 - v23) >> 1;
  }
  if ((_DWORD)v21 == (unsigned __int16)v24)
    return &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  if (v21 > (unsigned __int16)v24)
    return (int *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 40) + 4 * (unsigned __int16)v24);
  return result;
}

void *gss::defaultValueForKey<gss::PropertyID,float>(int a1)
{
  void *result;

  if (a1 > 250)
  {
    if (a1 > 330)
    {
      if (a1 <= 432)
      {
        if (a1 > 354)
        {
          if (a1 == 355)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelOccludedOpacity;
          if (a1 == 402)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelLineHeight;
        }
        else
        {
          if (a1 == 331)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultBuildingGradientMaxHeight;
          if (a1 == 345)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelPerspectiveScale;
        }
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
      }
      switch(a1)
      {
        case 456:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultIntensity;
        case 457:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultScaleWithNoPitch;
        case 458:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultkernelSize;
        case 459:
        case 460:
        case 461:
        case 462:
        case 463:
        case 464:
        case 465:
        case 466:
        case 467:
        case 468:
        case 469:
        case 470:
        case 474:
        case 477:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
        case 471:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultMinSize;
        case 472:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultFadeZoomSpan;
        case 473:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelMaxZoomBias;
        case 475:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelImageScale;
        case 476:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelBlockEndMargin;
        case 478:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelMaxDynamicTextScale;
        case 479:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelMaxDynamicImageScale;
        default:
          if (a1 == 433)
          {
            result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelIconImageScale;
          }
          else
          {
            if (a1 != 448)
              return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
            result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultOpacity;
          }
          break;
      }
    }
    else
    {
      if (a1 > 301)
      {
        if (a1 > 323)
        {
          if (a1 == 324)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelTextOpacity;
          if (a1 == 330)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultBuildingGradientMaxIntensity;
        }
        else
        {
          if (a1 == 302)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficCasingWidth;
          if (a1 == 313)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficMaskWidth;
        }
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
      }
      switch(a1)
      {
        case 270:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficMinWidth;
          break;
        case 271:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficSecondaryMinWidth;
          break;
        case 272:
        case 275:
        case 280:
        case 283:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
        case 273:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelIconPadding;
          break;
        case 274:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultBrightness;
          break;
        case 276:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultFillBrightness;
          break;
        case 277:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultStrokeBrightness;
          break;
        case 278:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficMaxWidth;
          break;
        case 279:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficSecondaryMaxWidth;
          break;
        case 281:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTextElementMarginVertical;
          break;
        case 282:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTextElementMarginHorizontal;
          break;
        case 284:
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultAnnotationElementMargin;
          break;
        default:
          if (a1 != 251)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultPuckOffset;
          break;
      }
    }
  }
  else
  {
    if (a1 > 151)
    {
      if (a1 > 186)
      {
        switch(a1)
        {
          case 218:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultPoiIconOpacity;
          case 219:
          case 220:
          case 221:
          case 223:
          case 224:
          case 225:
          case 229:
          case 232:
          case 233:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
          case 222:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultNavLabelSignBrightness;
          case 226:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelShieldSpacing;
          case 227:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelMultiShieldGap;
          case 228:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelRoadWithShieldGap;
          case 230:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultDiagonalPositionHorizontalMargin;
          case 231:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultDiagonalPositionVerticalMargin;
          case 234:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelOffset;
          default:
            if (a1 == 187)
            {
              result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelIconSaturation;
            }
            else
            {
              if (a1 != 193)
                return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
              result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultPadding;
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 152:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultMargin;
          case 153:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultMarginTop;
          case 154:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultMarginLeft;
          case 155:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultMarginBottom;
          case 156:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultMarginRight;
          case 157:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 165:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
          case 158:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelCollisionRank;
          case 164:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficWidth;
          case 166:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficIncidentBrightness;
          default:
            if (a1 == 178)
            {
              result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelIconCornerRadius;
            }
            else
            {
              if (a1 != 180)
                return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
              result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelIconBevelAmount;
            }
            break;
        }
      }
      return result;
    }
    if (a1 <= 66)
    {
      if (a1 > 44)
      {
        switch(a1)
        {
          case '-':
            result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficPillMiddleLengthStopped;
            break;
          case '.':
            result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficPillSpacingStopped;
            break;
          case '/':
            result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficSecondaryWidthStopped;
            break;
          case '8':
            result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficPillMiddleLengthSlow;
            break;
          case '9':
            result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficPillSpacingSlow;
            break;
          case ':':
            result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficSecondaryWidthSlow;
            break;
          default:
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
        }
        return result;
      }
      switch(a1)
      {
        case 0:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultInnerGlowOpacity;
        case 1:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultOuterGlowOpacity;
        case 9:
          return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelHeightMedium;
      }
      return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
    }
    switch(a1)
    {
      case 'C':
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficPillMiddleLengthMedium;
      case 'D':
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficPillSpacingMedium;
      case 'E':
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficSecondaryWidthMedium;
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
      case 'N':
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficPillMiddleLengthFast;
      case 'O':
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficPillSpacingFast;
      case 'P':
        return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultTrafficSecondaryWidthFast;
      default:
        if (a1 == 122)
        {
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultLabelSpacing;
        }
        else
        {
          if (a1 != 131)
            return &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::_defaultValue;
          result = &gss::defaultValueForKey<gss::PropertyID,float>(gss::PropertyID)::kDefaultArrowSpacing;
        }
        break;
    }
  }
  return result;
}

unsigned __int8 *md::getRoadWidths(uint64_t a1, float *a2, float *a3, char *a4, float a5)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int8 *result;
  BOOL v18;
  char v19;
  unint64_t v20;
  float *v21;
  float v23;
  float v24;
  _BOOL4 v25;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  unint64_t v46;
  float *v47;
  float v48;
  BOOL v49;
  unsigned int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int v55;
  int v56;
  float v57;
  float v58;
  char v59;
  char v60;

  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((int)a5 >= 0x17)
    v11 = 23;
  else
    v11 = (int)a5;
  v12 = *(unsigned __int8 *)(v10 + 11);
  if (v12 == 2)
  {
    v60 = 1;
    v59 = 1;
    v13 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v10, 0x69u, v11, 0, &v60);
    gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v10, 0x69u, v11, 1, &v59);
  }
  else
  {
    v13 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a1 + 24), 0x69u, v11, v12, 0);
  }
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v15 = *(unsigned __int8 *)(v14 + 12);
  if (v15 == 2)
  {
    v60 = 1;
    v59 = 1;
    v16 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v14, 0x69u, v11, 0, &v60);
    result = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v14, 0x69u, v11, 1, &v59);
  }
  else
  {
    result = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(_QWORD *)a1 + 24), 0x69u, v11, v15, 0);
    v16 = *result;
  }
  if (v13)
    v18 = v16 == 0;
  else
    v18 = 1;
  v19 = !v18;
  *a4 = v19;
  v20 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v21 = *(float **)v20;
  if (!*(_QWORD *)v20)
  {
    if (!v13)
    {
      v25 = 0;
      v23 = fminf(fmaxf(a5, 0.0), 23.0);
LABEL_36:
      v33 = *(unsigned __int8 *)(v20 + v25 + 11);
      v24 = 0.0;
      if (v33 != 2)
      {
        gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a1 + 24), 0x5Eu, v33, 0, v23);
LABEL_45:
        *a2 = v37;
        v46 = *(_QWORD *)(*(_QWORD *)a1 + 24);
        v47 = *(float **)v46;
        if (*(_QWORD *)v46
          && (v48 = *v47, LODWORD(v47) = *v47 == 1.0, *(_BYTE *)(v46 + 10))
          && (v48 != 0.0 ? (v49 = v48 == 1.0) : (v49 = 1), !v49)
          || (v50 = *(unsigned __int8 *)(v46 + v47 + 11), v48 = 0.0, v50 == 2))
        {
          v60 = 1;
          v59 = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v46, 0x61u, 0, (BOOL *)&v60, v23);
          v52 = v51;
          result = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v46, 0x61u, 1u, (BOOL *)&v59, v23);
          v54 = v52 + (float)((float)(v53 - v52) * v48);
        }
        else
        {
          result = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v46, 0x61u, v50, 0, v23);
        }
        *a3 = v54;
        if (v54 <= 0.0)
          return result;
        v27 = *a2 + (float)(v54 * 2.0);
LABEL_66:
        *a3 = v27;
        return result;
      }
LABEL_37:
      v60 = 1;
      v59 = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x5Eu, 0, (BOOL *)&v60, v23);
      v35 = v34;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x5Eu, 1u, (BOOL *)&v59, v23);
      v37 = v35 + (float)((float)(v36 - v35) * v24);
      goto LABEL_45;
    }
LABEL_31:
    *a2 = 1.0;
    v27 = 0.0;
    goto LABEL_66;
  }
  if ((v13 != 0) == (v16 != 0) || *(_BYTE *)(v20 + 9) == 0)
  {
    if (!v13)
    {
      v23 = fminf(fmaxf(a5, 0.0), 23.0);
      v24 = *v21;
      v25 = *v21 == 1.0;
      if (*(_BYTE *)(v20 + 10))
      {
        if (v24 != 0.0 && v24 != 1.0)
          goto LABEL_37;
      }
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  v28 = *v21;
  if (!v13)
  {
    if (!v16)
      goto LABEL_61;
    v29 = fminf(fmaxf(a5, 0.0), 23.0);
    v38 = *(unsigned __int8 *)(v20 + 11);
    if (v38 == 2)
    {
      v60 = 1;
      v59 = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x5Eu, 0, (BOOL *)&v60, v29);
      v40 = v39;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x5Eu, 1u, (BOOL *)&v59, v29);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a1 + 24), 0x5Eu, v38, 0, v29);
      v40 = v55;
    }
    v28 = 1.0 - v28;
    *(_DWORD *)a2 = v40;
    v42 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v43 = *(unsigned __int8 *)(v42 + 11);
    if (v43 == 2)
      goto LABEL_43;
LABEL_59:
    result = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v42, 0x61u, v43, 0, v29);
    v45 = v56;
    goto LABEL_60;
  }
  v29 = fminf(fmaxf(a5, 0.0), 23.0);
  v30 = *(unsigned __int8 *)(v20 + 12);
  if (v30 == 2)
  {
    v60 = 1;
    v59 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x5Eu, 0, (BOOL *)&v60, v29);
    v32 = v31;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v20, 0x5Eu, 1u, (BOOL *)&v59, v29);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)a1 + 24), 0x5Eu, v30, 0, v29);
    v32 = v41;
  }
  *(_DWORD *)a2 = v32;
  v42 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v43 = *(unsigned __int8 *)(v42 + 12);
  if (v43 != 2)
    goto LABEL_59;
LABEL_43:
  v60 = 1;
  v59 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v42, 0x61u, 0, (BOOL *)&v60, v29);
  v45 = v44;
  result = (unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v42, 0x61u, 1u, (BOOL *)&v59, v29);
LABEL_60:
  *(_DWORD *)a3 = v45;
LABEL_61:
  if (*a2 <= 1.0)
    v57 = 0.0;
  else
    v57 = *a2 + -1.0;
  v58 = (float)(v57 * v28) + 1.0;
  *a2 = v58;
  if (*a3 > 0.0)
  {
    v27 = v58 + (float)((float)(fmaxf(v58 + (float)(*a3 * 2.0), 0.0) - v58) * v28);
    goto LABEL_66;
  }
  return result;
}

void gss::StylesheetQuery<gss::PropertyID>::getAttributeMapForStyle(uint64_t a1, uint64_t *a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  gss::Allocator *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*((_BYTE *)a2 + 14))
    v6 = 1;
  else
    v6 = *a2 == 0;
  if (!v6)
  {
    v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *a2, *((unsigned __int16 *)a2 + 6));
  }
  *(uint64_t *)((char *)a2 + 7) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 15) = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v23 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      v22 = v11;
      if (!v11)
        goto LABEL_22;
      v12 = a1 + 272;
      if (a3)
      {
        gss::StylesheetManager<gss::PropertyID>::targetStyleAttributes(&v20, v11, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), v12);
        v14 = *((unsigned __int8 *)a2 + 14);
        if (&v20 != a2)
        {
          if (*((_BYTE *)a2 + 14) || !*a2)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
      else
      {
        gss::StylesheetManager<gss::PropertyID>::sourceStyleAttributes(&v20, v11, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), v12);
        v14 = *((unsigned __int8 *)a2 + 14);
        if (&v20 != a2)
        {
          if (*((_BYTE *)a2 + 14) || !*a2)
            goto LABEL_18;
LABEL_17:
          v15 = gss::Allocator::instance(v13);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *a2, *((unsigned __int16 *)a2 + 6));
          *a2 = 0;
LABEL_18:
          v16 = v21;
          *a2 = v20;
          *((_DWORD *)a2 + 2) = v16;
          *((_WORD *)a2 + 6) = WORD2(v16);
          *((_WORD *)a2 + 7) = HIWORD(v21);
LABEL_22:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
      }
      if (!v14 && *a2)
      {
        v17 = gss::Allocator::instance(v13);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, *a2, *((unsigned __int16 *)a2 + 6));
      }
      goto LABEL_22;
    }
  }
}

void sub_19F08EF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *gss::StylesheetQuery<gss::PropertyID>::targetCartoStyle@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(a1 + 312);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(a1 + 304);
  }
  return result;
}

std::__shared_weak_count *gss::StylesheetQuery<gss::PropertyID>::sourceCartoStyle@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(a1 + 296);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(a1 + 288);
  }
  return result;
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(uint64_t a1, unsigned int a2, unsigned int a3, BOOL *a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 **v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int *v51;
  unsigned __int16 v52;
  unsigned __int8 *v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 **v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned int v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned int v79;
  int *v80;
  unsigned __int8 *v81;
  unsigned __int8 v83;
  unsigned __int8 v84;

  LODWORD(v7) = (int)a5;
  if ((int)a5 >= 0x17)
    v8 = 23;
  else
    v8 = v7;
  if (v7 >= 0x16)
    v7 = 22;
  else
    v7 = v7;
  v9 = a1 + 16 * a3;
  v12 = *(_QWORD *)(v9 + 16);
  v11 = v9 + 16;
  v10 = v12;
  if (!v12)
  {
    if (a4)
      *a4 = 0;
    return *(unsigned int *)gss::defaultValueForKey<gss::ScenePropertyID,int>(a2);
  }
  v14 = v7 + 1;
  v15 = a1 + 16 * a3;
  v16 = *(unsigned __int16 *)(v15 + 56);
  if (!*(_WORD *)(v15 + 56))
  {
    v84 = 1;
    v83 = 1;
LABEL_128:
    v19 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(v10 + 72), a2, v8, &v84);
LABEL_129:
    v18 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(*(_QWORD *)v11 + 72), a2, v14, &v83);
    if (a4)
LABEL_130:
      *a4 = (v84 | v83) != 0;
    goto LABEL_131;
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(uint64_t **)(v15 + 48);
  v21 = &v20[v16];
  while (2)
  {
    LOBYTE(v22) = 0;
    while (1)
    {
      v24 = *v20;
      if ((v22 & 1) != 0)
      {
        v22 = 1;
        if ((v17 & 1) != 0)
          goto LABEL_91;
        goto LABEL_68;
      }
      v25 = *(uint64_t **)(v24 + 72);
      if (!v25
        || (v26 = *((unsigned __int8 *)v25 + v8 + 16),
            v27 = *v25,
            v28 = (unsigned __int8 **)(v27 + 80 * v26),
            v29 = *((unsigned __int16 *)v28 + 5),
            !*((_WORD *)v28 + 5)))
      {
LABEL_31:
        v22 = 0;
        if ((v17 & 1) != 0)
          goto LABEL_91;
        goto LABEL_68;
      }
      v30 = (uint64_t)*v28;
      if (!*((_BYTE *)v28 + 15))
      {
        v39 = *((unsigned __int16 *)v28 + 5);
        v31 = *v28;
        while (*v31 != a2)
        {
          ++v31;
          if (!--v39)
          {
            LOWORD(v31) = v30 + v29;
            break;
          }
        }
LABEL_37:
        if ((_DWORD)v29 == (unsigned __int16)((_WORD)v31 - v30))
          goto LABEL_31;
        goto LABEL_38;
      }
      v31 = *v28;
      v32 = v29;
      if (v29 >= 0x1E)
      {
        do
        {
          v35 = v32 >> 1;
          v36 = &v31[v32 >> 1];
          v38 = *v36;
          v37 = v36 + 1;
          v32 += ~(v32 >> 1);
          if (v38 < a2)
            v31 = v37;
          else
            v32 = v35;
        }
        while (v32);
        if (v31 == (unsigned __int8 *)(v30 + v29) || *v31 != a2)
          goto LABEL_31;
        goto LABEL_37;
      }
      v33 = 0;
      while (1)
      {
        v34 = *(unsigned __int8 *)(v30 + v33);
        if (v34 >= a2)
          break;
        if (v29 == ++v33)
          goto LABEL_31;
      }
      if (v34 == a2)
        v52 = v33;
      else
        v52 = v29;
      if ((_DWORD)v29 == v52)
        goto LABEL_31;
LABEL_38:
      v40 = v27 + 80 * v26;
      v41 = (unsigned __int8 *)*(unsigned __int16 *)(v40 + 42);
      if (!*(_WORD *)(v40 + 42))
        goto LABEL_52;
      v42 = v27 + 80 * v26;
      v43 = *(_QWORD *)(v42 + 32);
      if (!*(_BYTE *)(v42 + 47))
      {
        v53 = v41;
        v44 = *(unsigned __int8 **)(v42 + 32);
        while (*v44 != a2)
        {
          ++v44;
          if (!--v53)
          {
            LOWORD(v44) = v43 + (_WORD)v41;
            break;
          }
        }
LABEL_62:
        LOWORD(v44) = (_WORD)v44 - v43;
LABEL_65:
        v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if ((_DWORD)v41 != (unsigned __int16)v44)
          v51 = (int *)(v43 + *(unsigned __int16 *)(v27 + 80 * v26 + 40) + 4 * (unsigned __int16)v44);
        goto LABEL_67;
      }
      v44 = *(unsigned __int8 **)(v42 + 32);
      v45 = v41;
      if (v41 < 0x1E)
      {
        v44 = 0;
        while (1)
        {
          v46 = v44[v43];
          if (v46 >= a2)
            break;
          if (v41 == ++v44)
            goto LABEL_52;
        }
        if (v46 != a2)
          LOWORD(v44) = (_WORD)v41;
        goto LABEL_65;
      }
      do
      {
        v47 = (unsigned __int8 *)((unint64_t)v45 >> 1);
        v48 = &v44[(unint64_t)v45 >> 1];
        v50 = *v48;
        v49 = v48 + 1;
        v45 += ~((unint64_t)v45 >> 1);
        if (v50 < a2)
          v44 = v49;
        else
          v45 = v47;
      }
      while (v45);
      if (v44 == &v41[v43])
      {
LABEL_52:
        v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        goto LABEL_67;
      }
      v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      if (*v44 == a2)
        goto LABEL_62;
LABEL_67:
      v19 = *v51;
      v22 = 1;
      if ((v17 & 1) != 0)
      {
LABEL_91:
        if (v22)
          goto LABEL_134;
        goto LABEL_119;
      }
LABEL_68:
      v54 = *(uint64_t **)(v24 + 72);
      if (!v54)
        goto LABEL_13;
      v55 = *((unsigned __int8 *)v54 + v14 + 16);
      v56 = *v54;
      v57 = (unsigned __int8 **)(v56 + 80 * v55);
      v58 = *((unsigned __int16 *)v57 + 5);
      if (!*((_WORD *)v57 + 5))
      {
        v23 = 0;
        goto LABEL_12;
      }
      v59 = (uint64_t)*v57;
      if (!*((_BYTE *)v57 + 15))
      {
        v68 = *((unsigned __int16 *)v57 + 5);
        v60 = *v57;
        while (*v60 != a2)
        {
          ++v60;
          if (!--v68)
          {
            LOWORD(v60) = v59 + v58;
            break;
          }
        }
LABEL_87:
        v23 = (_WORD)v60 - v59;
        goto LABEL_12;
      }
      v60 = *v57;
      v61 = v58;
      if (v58 >= 0x1E)
      {
        do
        {
          v64 = v61 >> 1;
          v65 = &v60[v61 >> 1];
          v67 = *v65;
          v66 = v65 + 1;
          v61 += ~(v61 >> 1);
          if (v67 < a2)
            v60 = v66;
          else
            v61 = v64;
        }
        while (v61);
        if (v60 == (unsigned __int8 *)(v59 + v58) || *v60 != a2)
          goto LABEL_13;
        goto LABEL_87;
      }
      v62 = 0;
      while (1)
      {
        v63 = *(unsigned __int8 *)(v59 + v62);
        if (v63 >= a2)
          break;
        if (v58 == ++v62)
          goto LABEL_13;
      }
      v23 = v63 == a2 ? v62 : v58;
LABEL_12:
      if ((_DWORD)v58 != v23)
        break;
LABEL_13:
      v17 = 0;
      if (++v20 == v21)
      {
        v84 = 1;
        v83 = 1;
        if ((v22 & 1) == 0)
          goto LABEL_128;
        goto LABEL_129;
      }
    }
    v69 = v56 + 80 * v55;
    v70 = (unsigned __int8 *)*(unsigned __int16 *)(v69 + 42);
    if (*(_WORD *)(v69 + 42))
    {
      v71 = v56 + 80 * v55;
      v72 = *(_QWORD *)(v71 + 32);
      if (!*(_BYTE *)(v71 + 47))
      {
        v81 = v70;
        v73 = *(unsigned __int8 **)(v71 + 32);
        while (*v73 != a2)
        {
          ++v73;
          if (!--v81)
          {
            LOWORD(v73) = v72 + (_WORD)v70;
            goto LABEL_113;
          }
        }
        goto LABEL_113;
      }
      v73 = *(unsigned __int8 **)(v71 + 32);
      v74 = v70;
      if (v70 < 0x1E)
      {
        v73 = 0;
        while (1)
        {
          v75 = v73[v72];
          if (v75 >= a2)
            break;
          if (v70 == ++v73)
            goto LABEL_107;
        }
        if (v75 != a2)
          LOWORD(v73) = (_WORD)v70;
LABEL_116:
        v80 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if ((_DWORD)v70 != (unsigned __int16)v73)
          v80 = (int *)(v72 + *(unsigned __int16 *)(v56 + 80 * v55 + 40) + 4 * (unsigned __int16)v73);
LABEL_118:
        v18 = *v80;
        if ((v22 & 1) != 0)
          goto LABEL_134;
        goto LABEL_119;
      }
      do
      {
        v76 = (unsigned __int8 *)((unint64_t)v74 >> 1);
        v77 = &v73[(unint64_t)v74 >> 1];
        v79 = *v77;
        v78 = v77 + 1;
        v74 += ~((unint64_t)v74 >> 1);
        if (v79 < a2)
          v73 = v78;
        else
          v74 = v76;
      }
      while (v74);
      if (v73 != &v70[v72])
      {
        v80 = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if (*v73 != a2)
          goto LABEL_118;
LABEL_113:
        LOWORD(v73) = (_WORD)v73 - v72;
        goto LABEL_116;
      }
    }
LABEL_107:
    v18 = gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    if ((v22 & 1) != 0)
    {
LABEL_134:
      v84 = 1;
      v83 = 1;
      if (a4)
        goto LABEL_130;
      goto LABEL_131;
    }
LABEL_119:
    ++v20;
    v17 = 1;
    if (v20 != v21)
      continue;
    break;
  }
  v84 = 1;
  v83 = 1;
  v19 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(v10 + 72), a2, v8, &v84);
  if (a4)
    goto LABEL_130;
LABEL_131:
  if ((float)(a5 - (float)v8) >= 1.0)
    return v18;
  else
    return v19;
}

void gss::CartoStyle<gss::ScenePropertyID>::populateStyles(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  std::mutex *v6;
  gss::Allocator *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  gss::Allocator *v17;
  unsigned __int8 *v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  gss::Allocator *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  unsigned int v46;
  gss::Allocator *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unsigned __int16 v52;
  unsigned __int16 v53;
  unsigned __int16 v54;
  uint64_t v55;
  gss::Allocator **v56;
  uint64_t v57;
  size_t v58;
  _WORD *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  _BYTE *v63;
  _WORD *v64;
  __int16 *v65;
  unsigned __int16 *v66;
  unint64_t v67;
  int v68;
  __int16 v69;
  unsigned __int16 v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  const void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  char v85;
  unsigned int v86;
  gss::Allocator *v87;
  int v88;
  uint64_t v89;
  unsigned __int16 *v90;
  unsigned int v91;
  unsigned __int16 v92;
  unsigned __int16 v93;
  unsigned __int16 v94;
  uint64_t v95;
  gss::Allocator **v96;
  uint64_t v97;
  size_t v98;
  _WORD *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  _BYTE *v103;
  __int16 *v104;
  unsigned __int16 *v105;
  unint64_t v106;
  int v107;
  __int16 v108;
  unsigned __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int v115;
  const void **v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int16 *v122;
  unsigned int v123;
  unsigned __int16 v124;
  unsigned __int16 v125;
  unsigned __int16 v126;
  uint64_t v127;
  gss::Allocator *v128;
  uint64_t v129;
  size_t v130;
  _WORD *v131;
  unsigned int v132;
  uint64_t v133;
  _BYTE *v134;
  unsigned int v135;
  _WORD *v136;
  __int16 *v137;
  unsigned __int16 *v138;
  unint64_t v139;
  _BYTE *v140;
  int v141;
  uint64_t v142;
  __int16 v143;
  unsigned __int16 v144;
  uint64_t v145;
  gss::Allocator *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t (***v150)();
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  void *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  std::mutex *v158;
  _BYTE *v159;
  char *v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  _BYTE *v166;
  char *v167;
  char *v168;
  __int16 *v169;
  const void **v170;
  const void **v171;
  const void **v172;
  unsigned __int16 *v173;
  _BYTE v174[15];
  char v175;
  _BYTE v176[15];
  char v177;
  _BYTE v178[15];
  char v179;
  _BYTE v180[15];
  char v181;
  _BYTE v182[15];
  char v183;
  char v184;
  __int128 v185;
  __int128 v186;
  int v187;

  v2 = a2;
  v3 = a1;
  v4 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v4 >> 47) ^ v4);
  v6 = (std::mutex *)(a2
                    + ((unint64_t)((9 * ((v5 >> 47) ^ v5)) & 0x1F) << 6)
                    + 480);
  std::mutex::lock(v6);
  v8 = atomic_load((unsigned __int8 *)(v3 + 123));
  if ((v8 & 1) == 0)
  {
    if (*(_QWORD *)(v3 + 72))
    {
LABEL_144:
      atomic_store(1u, (unsigned __int8 *)(v3 + 123));
      goto LABEL_145;
    }
    v158 = v6;
    v9 = gss::Allocator::instance(v7);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 72, 8);
    *(_QWORD *)v10 = &off_1E42E5960;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = v9;
    v11 = 0uLL;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_QWORD *)(v10 + 64) = 0;
    *(_OWORD *)(v10 + 32) = 0u;
    v12 = *(std::__shared_weak_count **)(v3 + 80);
    *(_QWORD *)(v3 + 72) = v10 + 32;
    *(_QWORD *)(v3 + 80) = v10;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v11 = 0uLL;
      }
    }
    v185 = v11;
    v186 = v11;
    v187 = 1065353216;
    v184 = 0;
    memset(v174, 0, sizeof(v174));
    v175 = 1;
    memset(v176, 0, sizeof(v176));
    v177 = 1;
    memset(v178, 0, sizeof(v178));
    v179 = 1;
    memset(v180, 0, sizeof(v180));
    v181 = 1;
    memset(v182, 0, sizeof(v182));
    v183 = 1;
    gss::CartoStyle<gss::ScenePropertyID>::applyStyle(v3, (uint64_t)v174, v2, -1.0);
    gss::StylePropertySet<gss::ScenePropertyID>::shrink_to_fit((gss::Allocator *)v174);
    std::__hash_table<std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::__unordered_map_hasher<gss::StylePropertySet<gss::ScenePropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::hash<gss::StylePropertySet<gss::ScenePropertyID>>,std::equal_to<gss::StylePropertySet<gss::ScenePropertyID>>,true>,std::__unordered_map_equal<gss::StylePropertySet<gss::ScenePropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::equal_to<gss::StylePropertySet<gss::ScenePropertyID>>,std::hash<gss::StylePropertySet<gss::ScenePropertyID>>,true>,std::allocator<std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>>>::__emplace_unique_key_args<gss::StylePropertySet<gss::ScenePropertyID>,gss::StylePropertySet<gss::ScenePropertyID>,unsigned char &>((uint64_t)&v185, (uint64_t)v174, (uint64_t)v174, &v184);
    v184 = 1;
    gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)v174);
    v15 = 0;
    LOBYTE(v16) = 1;
    do
    {
      memset(v174, 0, sizeof(v174));
      v175 = 1;
      memset(v176, 0, sizeof(v176));
      v177 = 1;
      memset(v178, 0, sizeof(v178));
      v179 = 1;
      memset(v180, 0, sizeof(v180));
      v181 = 1;
      memset(v182, 0, sizeof(v182));
      v183 = 1;
      gss::CartoStyle<gss::ScenePropertyID>::applyStyle(v3, (uint64_t)v174, v2, (float)v15);
      gss::StylePropertySet<gss::ScenePropertyID>::shrink_to_fit((gss::Allocator *)v174);
      v18 = std::__hash_table<std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::__unordered_map_hasher<gss::StylePropertySet<gss::ScenePropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::hash<gss::StylePropertySet<gss::ScenePropertyID>>,std::equal_to<gss::StylePropertySet<gss::ScenePropertyID>>,true>,std::__unordered_map_equal<gss::StylePropertySet<gss::ScenePropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::equal_to<gss::StylePropertySet<gss::ScenePropertyID>>,std::hash<gss::StylePropertySet<gss::ScenePropertyID>>,true>,std::allocator<std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>>>::__emplace_unique_key_args<gss::StylePropertySet<gss::ScenePropertyID>,gss::StylePropertySet<gss::ScenePropertyID>,unsigned char &>((uint64_t)&v185, (uint64_t)v174, (uint64_t)v174, &v184);
      if (v19)
      {
        LOBYTE(v16) = v16 + 1;
        v184 = v16;
      }
      *(_BYTE *)(*(_QWORD *)(v3 + 72) + v15 + 16) = v18[96];
      v17 = (gss::Allocator *)gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)v174);
      ++v15;
    }
    while (v15 != 24);
    v20 = *(_QWORD *)(v3 + 72);
    if (!*(_BYTE *)(v20 + 12))
    {
      v21 = *(unsigned __int16 *)(v20 + 8);
      if (v21 <= v16)
      {
        if (v21 >= v16)
          goto LABEL_25;
        v16 = v16;
        if (*(unsigned __int16 *)(v20 + 10) < v16)
        {
          v17 = geo::intern_vector<gss::StylePropertySet<gss::PropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::PropertyID>,gss::Allocator>>::reallocate(*(gss::Allocator ***)(v3 + 72), v16);
          v21 = *(unsigned __int16 *)(v20 + 8);
        }
        if (v21 != v16)
        {
          v23 = *(_QWORD *)v20 + 80 * v16;
          v24 = *(_QWORD *)v20 + 80 * v21;
          do
          {
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            *(_BYTE *)(v24 + 15) = 1;
            *(_QWORD *)(v24 + 16) = 0;
            *(_QWORD *)(v24 + 23) = 0;
            *(_BYTE *)(v24 + 31) = 1;
            *(_QWORD *)(v24 + 32) = 0;
            *(_QWORD *)(v24 + 39) = 0;
            *(_BYTE *)(v24 + 47) = 1;
            *(_QWORD *)(v24 + 48) = 0;
            *(_QWORD *)(v24 + 55) = 0;
            *(_BYTE *)(v24 + 63) = 1;
            *(_QWORD *)(v24 + 64) = 0;
            *(_QWORD *)(v24 + 71) = 0;
            *(_BYTE *)(v24 + 79) = 1;
            v24 += 80;
          }
          while (v24 != v23);
        }
      }
      else
      {
        v17 = (gss::Allocator *)(*(_QWORD *)v20 + 80 * v16);
        v22 = 80 * *(unsigned __int16 *)(v20 + 8) - 80 * v16;
        do
        {
          v17 = (gss::Allocator *)(gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)v17) + 80);
          v22 -= 80;
        }
        while (v22);
        v16 = v16;
      }
      *(_WORD *)(v20 + 8) = v16;
    }
LABEL_25:
    v25 = (unsigned __int16 *)v186;
    if ((_QWORD)v186)
    {
      v162 = v2;
      v163 = v3;
      do
      {
        v27 = (uint64_t)(v25 + 8);
        v164 = **(_QWORD **)(v3 + 72);
        v165 = *((unsigned __int8 *)v25 + 96);
        v28 = v164 + 80 * *((unsigned __int8 *)v25 + 96);
        if ((unsigned __int16 *)v28 != v25 + 8)
        {
          v30 = **(_QWORD **)(v3 + 72);
          v29 = *((unsigned __int8 *)v25 + 96);
          v31 = v25;
          if (!*(_BYTE *)(v28 + 14) && *(_QWORD *)v28)
          {
            v32 = gss::Allocator::instance(v17);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v32 + 40))(v32, *(_QWORD *)v28, *(unsigned __int16 *)(v28 + 12));
          }
          *(_QWORD *)(v28 + 7) = 0;
          *(_QWORD *)v28 = 0;
          *(_BYTE *)(v28 + 15) = 1;
          v33 = (gss::Allocator *)geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)v28, v27);
          v34 = v31;
          v35 = v164 + 80 * v165;
          v36 = (_QWORD *)(v35 + 16);
          if (!*(_BYTE *)(v35 + 30) && *v36)
          {
            v37 = gss::Allocator::instance(v33);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 40))(v37, *v36, *(unsigned __int16 *)(v164 + 80 * v165 + 28));
            v34 = v31;
          }
          *(_QWORD *)((char *)v36 + 7) = 0;
          *v36 = 0;
          *(_BYTE *)(v164 + 80 * v165 + 31) = 1;
          v17 = (gss::Allocator *)geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v36, (uint64_t)(v34 + 16));
          v25 = v31;
          v38 = v164 + 80 * v165;
          v40 = *(unsigned __int8 *)(v38 + 46);
          v39 = (char *)(v38 + 46);
          v41 = v39 - 14;
          v170 = (const void **)(v39 - 14);
          if (!v40 && *(_QWORD *)v41)
          {
            v42 = gss::Allocator::instance(v17);
            v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v42 + 40))(v42, *v170, *(unsigned __int16 *)(v164 + 80 * v165 + 44));
            v25 = v31;
            v41 = v39 - 14;
          }
          v43 = v164 + 80 * v165;
          *(_BYTE *)(v43 + 47) = 1;
          v44 = (_BYTE *)(v43 + 47);
          *(_QWORD *)(v41 + 7) = 0;
          *(_QWORD *)v41 = 0;
          v173 = v31;
          if (*((_BYTE *)v25 + 62))
          {
            *(_QWORD *)v41 = *((_QWORD *)v25 + 6);
            *(_DWORD *)(v164 + 80 * v165 + 40) = *((_DWORD *)v25 + 14);
            v45 = 1;
          }
          else
          {
            v46 = v25[29];
            v159 = v44;
            v160 = v39;
            if (*v39)
            {
              v47 = 0;
              v48 = v25[29];
            }
            else
            {
              v49 = v164 + 80 * v165;
              v51 = *(unsigned __int16 *)(v49 + 44);
              v50 = (unsigned __int16 *)(v49 + 44);
              v48 = v25[29];
              if (v51 >= v46)
              {
                v47 = 0;
              }
              else
              {
                v52 = (v46 & 0xFFFC) + 4;
                v53 = v25[29];
                v54 = v52 + 4 * v46;
                v55 = gss::Allocator::instance(v17);
                v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v55 + 16))(v55, v54 & 0xFFFC, 1);
                v56 = (gss::Allocator **)(v39 - 14);
                v25 = v31;
                v47 = v17;
                if (*v170)
                {
                  v28 = 80;
                  v57 = v164 + 80 * v165;
                  v60 = *(unsigned __int16 *)(v57 + 42);
                  v59 = (_WORD *)(v57 + 42);
                  v58 = v60;
                  if (v60)
                  {
                    v17 = (gss::Allocator *)memmove(v17, *v170, v58);
                    if (*v59)
                      v17 = (gss::Allocator *)memmove((char *)v47 + v52, (char *)*v170 + *(unsigned __int16 *)(v164 + 80 * v165 + 40), 4 * (unsigned __int16)*v59);
                  }
                  v61 = gss::Allocator::instance(v17);
                  v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v61 + 40))(v61, *v170, *v50);
                  v56 = (gss::Allocator **)(v39 - 14);
                  v25 = v31;
                }
                *v50 = v53;
                *v56 = v47;
                *(_WORD *)(v164 + 80 * v165 + 40) = v52;
                v48 = v25[29];
              }
            }
            v62 = 0;
            v67 = v164 + 80 * v165;
            v63 = 0;
            v64 = (_WORD *)(v67 + 42);
            v65 = (__int16 *)(v67 + 44);
            v66 = (unsigned __int16 *)(v67 + 40);
            LOWORD(v67) = v48;
            v169 = v65;
            while (v62 != (_DWORD)v48)
            {
              v68 = (unsigned __int16)*v64;
              if (v68 == (unsigned __int16)*v65)
              {
                if (v68 == 0xFFFF)
                  break;
                v31 = v25;
                if (2 * (v68 & 0x7FFFu) <= 4)
                  v69 = 4;
                else
                  v69 = 2 * (v68 & 0x7FFF);
                v70 = (v69 & 0xFFFC) + 4;
                v71 = v48;
                v72 = v63;
                v73 = gss::Allocator::instance(v17);
                v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v73 + 16))(v73, (unsigned __int16)(v70 + 4 * v69) & 0xFFFC, 1);
                v48 = v71;
                v74 = v170;
                v63 = v72;
                v47 = v17;
                if (*v170)
                {
                  v75 = v48;
                  if (*v64)
                  {
                    v17 = (gss::Allocator *)memmove(v17, *v170, (unsigned __int16)*v64);
                    if (*v64)
                      v17 = (gss::Allocator *)memmove((char *)v47 + v70, (char *)*v170 + *v66, 4 * (unsigned __int16)*v64);
                  }
                  v76 = gss::Allocator::instance(v17);
                  v74 = v170;
                  v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v76 + 40))(v76, *v170, (unsigned __int16)*v169);
                  v48 = v75;
                  v63 = v72;
                  v31 = v173;
                }
                v65 = v169;
                *v169 = v69;
                *v74 = v47;
                *v66 = v70;
                v25 = v31;
                LOWORD(v67) = v31[29];
              }
              if (v62 < (unsigned __int16)v67)
              {
                v77 = *((_QWORD *)v25 + 6);
                v63 = (_BYTE *)(v77 + v62);
                v28 = v77 + v25[28] + 4 * v62;
              }
              v67 = (unsigned __int16)*v64;
              *((_BYTE *)v47 + v67) = *v63;
              *(_DWORD *)((char *)v47 + 4 * v67 + *v66) = *(_DWORD *)v28;
              *v64 = v67 + 1;
              LODWORD(v67) = v25[29];
              if (v62 + 1 < v67)
                ++v62;
              else
                v62 = v25[29];
            }
            v45 = *((_BYTE *)v25 + 62);
            v30 = v164;
            v29 = v165;
            v44 = v159;
            v39 = v160;
          }
          *v39 = v45;
          *v44 = *((_BYTE *)v25 + 63);
          v78 = v30 + 80 * v29;
          v80 = *(unsigned __int8 *)(v78 + 62);
          v79 = (char *)(v78 + 62);
          v81 = v79 - 14;
          v171 = (const void **)(v79 - 14);
          if (!v80 && *(_QWORD *)v81)
          {
            v82 = gss::Allocator::instance(v17);
            v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v82 + 40))(v82, *v171, *(unsigned __int16 *)(v30 + 80 * v29 + 60));
            v81 = v79 - 14;
            v25 = v173;
          }
          v83 = v30 + 80 * v29;
          *(_BYTE *)(v83 + 63) = 1;
          v84 = (_BYTE *)(v83 + 63);
          *(_QWORD *)(v81 + 7) = 0;
          *(_QWORD *)v81 = 0;
          if (*((_BYTE *)v25 + 78))
          {
            *(_QWORD *)v81 = *((_QWORD *)v25 + 8);
            *(_DWORD *)(v30 + 80 * v29 + 56) = *((_DWORD *)v25 + 18);
            v85 = 1;
          }
          else
          {
            v86 = v25[37];
            v167 = v79;
            v161 = v84;
            if (*v79)
            {
              v87 = 0;
              v88 = v25[37];
            }
            else
            {
              v89 = v30 + 80 * v29;
              v91 = *(unsigned __int16 *)(v89 + 60);
              v90 = (unsigned __int16 *)(v89 + 60);
              v88 = v25[37];
              if (v91 >= v86)
              {
                v87 = 0;
              }
              else
              {
                v92 = (v86 & 0xFFF8) + 8;
                v93 = v25[37];
                v94 = v92 + 8 * v86;
                v95 = gss::Allocator::instance(v17);
                v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 16))(v95, v94 & 0xFFF8, 1);
                v96 = (gss::Allocator **)(v79 - 14);
                v25 = v173;
                v87 = v17;
                if (*v171)
                {
                  v28 = 80;
                  v97 = v30 + 80 * v29;
                  v100 = *(unsigned __int16 *)(v97 + 58);
                  v99 = (_WORD *)(v97 + 58);
                  v98 = v100;
                  if (v100)
                  {
                    v17 = (gss::Allocator *)memmove(v17, *v171, v98);
                    if (*v99)
                      v17 = (gss::Allocator *)memmove((char *)v87 + v92, (char *)*v171 + *(unsigned __int16 *)(v30 + 80 * v29 + 56), 8 * (unsigned __int16)*v99);
                  }
                  v101 = gss::Allocator::instance(v17);
                  v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v101 + 40))(v101, *v171, *v90);
                  v96 = (gss::Allocator **)(v79 - 14);
                  v25 = v173;
                }
                *v90 = v93;
                *v96 = v87;
                *(_WORD *)(v30 + 80 * v29 + 56) = v92;
                v88 = v25[37];
              }
            }
            v102 = 0;
            v106 = v30 + 80 * v29;
            v103 = 0;
            v31 = (unsigned __int16 *)(v106 + 58);
            v104 = (__int16 *)(v106 + 60);
            v105 = (unsigned __int16 *)(v106 + 56);
            LOWORD(v106) = v88;
            while (v102 != v88)
            {
              v107 = *v31;
              if (v107 == (unsigned __int16)*v104)
              {
                if (v107 == 0xFFFF)
                  break;
                if (2 * (v107 & 0x7FFFu) <= 4)
                  v108 = 4;
                else
                  v108 = 2 * (v107 & 0x7FFF);
                v109 = (v108 & 0xFFF8) + 8;
                v110 = gss::Allocator::instance(v17);
                v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v110 + 16))(v110, (unsigned __int16)(v109 + 8 * v108) & 0xFFF8, 1);
                v106 = (unint64_t)v171;
                v87 = v17;
                if (*v171)
                {
                  if (*v31)
                  {
                    v17 = (gss::Allocator *)memmove(v17, *v171, *v31);
                    if (*v31)
                      v17 = (gss::Allocator *)memmove((char *)v87 + v109, (char *)*v171 + *v105, 8 * *v31);
                  }
                  v111 = gss::Allocator::instance(v17);
                  v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v111 + 40))(v111, *v171, (unsigned __int16)*v104);
                  v106 = (unint64_t)v171;
                }
                *v104 = v108;
                *(_QWORD *)v106 = v87;
                *v105 = v109;
                v25 = v173;
                LOWORD(v106) = v173[37];
              }
              if (v102 < (unsigned __int16)v106)
              {
                v112 = *((_QWORD *)v25 + 8);
                v103 = (_BYTE *)(v112 + v102);
                v28 = v112 + v25[36] + 8 * v102;
              }
              v106 = *v31;
              *((_BYTE *)v87 + v106) = *v103;
              *(_QWORD *)((char *)v87 + 8 * v106 + *v105) = *(_QWORD *)v28;
              *v31 = v106 + 1;
              LODWORD(v106) = v25[37];
              if (v102 + 1 < v106)
                ++v102;
              else
                v102 = v25[37];
            }
            v85 = *((_BYTE *)v25 + 78);
            v30 = v164;
            v29 = v165;
            v79 = v167;
            v84 = v161;
          }
          *v79 = v85;
          *v84 = *((_BYTE *)v25 + 79);
          v113 = v30 + 80 * v29;
          v115 = *(unsigned __int8 *)(v113 + 78);
          v114 = (char *)(v113 + 78);
          v116 = (const void **)(v114 - 14);
          v172 = (const void **)(v114 - 14);
          if (!v115 && *v116)
          {
            v117 = gss::Allocator::instance(v17);
            v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v117 + 40))(v117, *v172, *(unsigned __int16 *)(v30 + 80 * v29 + 76));
            v116 = (const void **)(v114 - 14);
            v25 = v173;
          }
          v118 = v30 + 80 * v29;
          *(_BYTE *)(v118 + 79) = 1;
          v119 = (_BYTE *)(v118 + 79);
          *(const void **)((char *)v116 + 7) = 0;
          *v116 = 0;
          if (*((_BYTE *)v25 + 94))
          {
            *v116 = (const void *)*((_QWORD *)v25 + 10);
            *(_DWORD *)(v30 + 80 * v29 + 72) = *((_DWORD *)v25 + 22);
            v26 = 1;
          }
          else
          {
            v120 = v25[45];
            v166 = v119;
            v168 = v114;
            if (!*v114)
            {
              v121 = v30 + 80 * v29;
              v123 = *(unsigned __int16 *)(v121 + 76);
              v122 = (unsigned __int16 *)(v121 + 76);
              if (v123 < v120)
              {
                v124 = (v120 & 0xFFF8) + 8;
                v125 = v25[45];
                v126 = v124 + 16 * v120;
                v127 = gss::Allocator::instance(v17);
                v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v127 + 16))(v127, v126 & 0xFFF8, 1);
                v116 = (const void **)(v114 - 14);
                v25 = v173;
                v128 = v17;
                if (*v172)
                {
                  v129 = v30 + 80 * v29;
                  v132 = *(unsigned __int16 *)(v129 + 74);
                  v131 = (_WORD *)(v129 + 74);
                  v130 = v132;
                  if (v132)
                  {
                    v17 = (gss::Allocator *)memmove(v17, *v172, v130);
                    if (*v131)
                      v17 = (gss::Allocator *)memmove((char *)v128 + v124, (char *)*v172 + *(unsigned __int16 *)(v30 + 80 * v29 + 72), 16 * (unsigned __int16)*v131);
                  }
                  v133 = gss::Allocator::instance(v17);
                  v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v133 + 40))(v133, *v172, *v122);
                  v116 = (const void **)(v114 - 14);
                  v25 = v173;
                }
                *v122 = v125;
                *v116 = v128;
                *(_WORD *)(v30 + 80 * v29 + 72) = v124;
                v120 = v25[45];
              }
            }
            v134 = 0;
            v135 = 0;
            v139 = v30 + 80 * v29;
            v136 = (_WORD *)(v139 + 74);
            v137 = (__int16 *)(v139 + 76);
            v138 = (unsigned __int16 *)(v139 + 72);
            LOWORD(v139) = v120;
            while (v135 != (_DWORD)v120)
            {
              v141 = (unsigned __int16)*v136;
              if (v141 == (unsigned __int16)*v137)
              {
                if (v141 == 0xFFFF)
                  break;
                v142 = v120;
                if (2 * (v141 & 0x7FFFu) <= 4)
                  v143 = 4;
                else
                  v143 = 2 * (v141 & 0x7FFF);
                v144 = (v143 & 0xFFF8) + 8;
                v145 = gss::Allocator::instance(v17);
                v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v145 + 16))(v145, (unsigned __int16)(v144 + 16 * v143) & 0xFFF8, 1);
                v116 = v172;
                v146 = v17;
                if (*v172)
                {
                  if (*v136)
                  {
                    v17 = (gss::Allocator *)memmove(v17, *v172, (unsigned __int16)*v136);
                    if (*v136)
                      v17 = (gss::Allocator *)memmove((char *)v146 + v144, (char *)*v172 + *v138, 16 * (unsigned __int16)*v136);
                  }
                  v147 = gss::Allocator::instance(v17);
                  v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)v147 + 40))(v147, *v172, (unsigned __int16)*v137);
                  v116 = v172;
                }
                *v137 = v143;
                *v116 = v146;
                *v138 = v144;
                v25 = v173;
                LOWORD(v139) = v173[45];
                v120 = v142;
              }
              if (v135 < (unsigned __int16)v139)
              {
                v148 = *((_QWORD *)v25 + 10);
                v134 = (_BYTE *)(v148 + v135);
                v31 = (unsigned __int16 *)(v148 + v25[44] + 16 * v135);
              }
              v139 = (unsigned __int16)*v136;
              v140 = *v116;
              v140[v139] = *v134;
              *(_OWORD *)&v140[16 * v139 + *v138] = *(_OWORD *)v31;
              ++*v136;
              LODWORD(v139) = v25[45];
              if (v135 + 1 < v139)
                ++v135;
              else
                v135 = v25[45];
            }
            v26 = *((_BYTE *)v25 + 94);
            v119 = v166;
            v114 = v168;
          }
          *v114 = v26;
          *v119 = *((_BYTE *)v25 + 95);
          v2 = v162;
          v3 = v163;
        }
        v25 = *(unsigned __int16 **)v25;
      }
      while (v25);
    }
    std::mutex::lock((std::mutex *)(v2 + 168));
    v149 = *(_QWORD *)(v3 + 72);
    if (*(_WORD *)(v149 + 8))
    {
      v150 = *(uint64_t (****)())v149;
      v151 = 80 * *(unsigned __int16 *)(v149 + 8);
      do
      {
        gss::StylePropertySet<gss::ScenePropertyID>::intern(v150, v2 + 232);
        v150 += 10;
        v151 -= 80;
      }
      while (v151);
    }
    std::mutex::unlock((std::mutex *)(v2 + 168));
    v152 = (_QWORD *)v186;
    if ((_QWORD)v186)
    {
      do
      {
        v153 = (_QWORD *)*v152;
        gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)(v152 + 2));
        operator delete(v152);
        v152 = v153;
      }
      while (v153);
    }
    v154 = (void *)v185;
    *(_QWORD *)&v185 = 0;
    if (v154)
      operator delete(v154);
    v6 = v158;
    goto LABEL_144;
  }
LABEL_145:
  std::mutex::unlock(v6);
  if (*(_WORD *)(v3 + 64))
  {
    v155 = *(uint64_t **)(v3 + 56);
    v156 = 16 * *(unsigned __int16 *)(v3 + 64);
    do
    {
      v157 = *v155;
      v155 += 2;
      gss::CartoStyle<gss::ScenePropertyID>::populateStyles(v157, v2);
      v156 -= 16;
    }
    while (v156);
  }
  atomic_store(1u, (unsigned __int8 *)(v3 + 122));
}

void sub_19F090390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::unordered_map<gss::StylePropertySet<gss::PropertyID>,unsigned char>::~unordered_map[abi:nn180100](v20 - 128);
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned long long> const*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **v3;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int8 v7;
  __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (a2 != a3)
  {
    v3 = (unsigned __int8 **)result;
    if (!*(_BYTE *)(result + 14))
    {
      v5 = a2;
      v6 = *(_WORD *)(result + 10);
      do
      {
        v7 = *(_BYTE *)v5;
        result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex(v3, *(_BYTE *)v5);
        if ((_DWORD)result == v6)
        {
          if (*((unsigned __int16 *)v3 + 6) == v6)
          {
            if (v6 == 0xFFFF)
              return result;
            if (2 * (v6 & 0x7FFFu) <= 4)
              v8 = 4;
            else
              v8 = 2 * (v6 & 0x7FFF);
            v9 = gss::Allocator::instance((gss::Allocator *)result);
            v10 = (v8 & 0xFFF8) + 8;
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, (unsigned __int16)(v10 + 8 * v8), 1);
            v11 = (unsigned __int8 *)result;
            if (*v3)
            {
              if (*((_WORD *)v3 + 5))
              {
                result = (uint64_t)memmove((void *)result, *v3, *((unsigned __int16 *)v3 + 5));
                if (*((_WORD *)v3 + 5))
                  result = (uint64_t)memmove(&v11[v10], &(*v3)[*((unsigned __int16 *)v3 + 4)], 8 * *((unsigned __int16 *)v3 + 5));
              }
              v12 = gss::Allocator::instance((gss::Allocator *)result);
              result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)v12 + 40))(v12, *v3, *((unsigned __int16 *)v3 + 6));
            }
            *((_WORD *)v3 + 6) = v8;
            *v3 = v11;
            *((_WORD *)v3 + 4) = v10;
            v7 = *(_BYTE *)v5;
            v6 = *((_WORD *)v3 + 5);
          }
          else
          {
            v11 = *v3;
            v10 = *((_WORD *)v3 + 4);
          }
          v11[v6] = v7;
          *(_QWORD *)&v11[8 * v6++ + v10] = *(_QWORD *)(v5 + 8);
          *((_WORD *)v3 + 5) = v6;
          *((_BYTE *)v3 + 15) = 0;
        }
        v5 += 16;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 **v3;
  unsigned __int8 *v5;
  unsigned __int16 v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;

  if (a2 != a3)
  {
    v3 = (unsigned __int8 **)result;
    if (!*(_BYTE *)(result + 14))
    {
      v5 = a2;
      v6 = *(_WORD *)(result + 10);
      do
      {
        v7 = *v5;
        result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex(v3, *v5);
        if ((_DWORD)result == v6)
        {
          if (*((unsigned __int16 *)v3 + 6) == v6)
          {
            if (v6 == 0xFFFF)
              return result;
            if (2 * (v6 & 0x7FFFu) <= 4)
              v8 = 4;
            else
              v8 = 2 * (v6 & 0x7FFF);
            v9 = gss::Allocator::instance((gss::Allocator *)result);
            v10 = v8 | 1;
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, (unsigned __int16)((v8 | 1) + v8), 1);
            v11 = (unsigned __int8 *)result;
            if (*v3)
            {
              if (*((_WORD *)v3 + 5))
              {
                result = (uint64_t)memmove((void *)result, *v3, *((unsigned __int16 *)v3 + 5));
                if (*((_WORD *)v3 + 5))
                  result = (uint64_t)memmove(&v11[v10], &(*v3)[*((unsigned __int16 *)v3 + 4)], *((unsigned __int16 *)v3 + 5));
              }
              v12 = gss::Allocator::instance((gss::Allocator *)result);
              result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)v12 + 40))(v12, *v3, *((unsigned __int16 *)v3 + 6));
            }
            *((_WORD *)v3 + 6) = v8;
            *v3 = v11;
            *((_WORD *)v3 + 4) = v10;
            v7 = *v5;
            v6 = *((_WORD *)v3 + 5);
          }
          else
          {
            v11 = *v3;
            v10 = *((unsigned __int16 *)v3 + 4);
          }
          v13 = &v11[v6];
          *v13 = v7;
          v13[v10] = v5[1];
          v6 = *((_WORD *)v3 + 5) + 1;
          *((_WORD *)v3 + 5) = v6;
          *((_BYTE *)v3 + 15) = 0;
        }
        v5 += 2;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t gss::CartoStyle<gss::ScenePropertyID>::applyStyle(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  if (a3 && *(_WORD *)(a1 + 32))
  {
    v8 = *(unsigned int **)(a1 + 24);
    v9 = 4 * *(unsigned __int16 *)(a1 + 32);
    do
    {
      v10 = *v8++;
      gss::CartoStyle<gss::ScenePropertyID>::applyStyle(*(_QWORD *)(*(_QWORD *)(a3 + 64) + 16 * v10), a2, a3, a4);
      v9 -= 4;
    }
    while (v9);
  }
  result = gss::StylePropertySet<gss::ScenePropertyID>::unionWith(a2, *(_QWORD *)(a1 + 88));
  if (*(_WORD *)(a1 + 48))
  {
    v12 = *(_QWORD *)(a1 + 40);
    v13 = 24 * *(unsigned __int16 *)(a1 + 48);
    v14 = (uint64_t *)(v12 + 8);
    do
    {
      if (*((float *)v14 - 2) + -0.001 <= a4 && *((float *)v14 - 1) > a4)
        result = gss::StylePropertySet<gss::ScenePropertyID>::unionWith(a2, *v14);
      v14 += 3;
      v13 -= 24;
    }
    while (v13);
  }
  return result;
}

uint64_t gss::StylePropertySet<gss::ScenePropertyID>::unionWith(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  _BYTE *v3;
  _QWORD *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned __int16 v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int16 v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int16 v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unsigned __int16 v73;
  uint64_t v74;
  unsigned __int8 *v75;
  __int16 v76;
  unsigned __int16 v77;
  uint64_t v78;
  const void *v79;
  uint64_t v80;
  int v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  unsigned __int16 v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned __int8 *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned int v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unsigned int v111;
  unsigned __int16 v112;
  uint64_t v113;
  unsigned __int8 *v114;
  __int16 v115;
  unsigned __int16 v116;
  uint64_t v117;
  const void *v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  unsigned __int8 *v122;
  unsigned int v123;
  uint64_t v124;
  unsigned __int16 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned __int8 *v136;
  unint64_t v137;
  unint64_t v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned int v141;
  unsigned __int16 v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned int v151;
  unsigned __int16 v152;
  uint64_t v153;
  unsigned int v154;
  __int16 v155;
  uint64_t v156;
  const void *v157;
  uint64_t v158;
  _BYTE *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  unsigned __int8 *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned __int16 v170;
  uint64_t v171;
  unsigned __int8 *v172;
  unsigned int v173;
  unint64_t v174;
  unint64_t v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  __int16 v186;
  __int16 v187;
  unsigned int v188;
  _BYTE v189[7];

  v5 = (_QWORD *)result;
  if (!*(_BYTE *)(result + 14))
  {
    v159 = 0;
    v160 = 0;
    v161 = *(unsigned __int16 *)(a2 + 10);
    v162 = v161;
    v188 = v161;
    while (1)
    {
      if (v160 == v161)
        goto LABEL_2;
      v2 = (unsigned __int8 *)v160;
      if (v160 < v162)
      {
        v159 = (_BYTE *)(*(_QWORD *)a2 + v160);
        v3 = &v159[*(unsigned __int16 *)(a2 + 8)];
      }
      v165 = *((unsigned __int16 *)v5 + 5);
      if (!*((_WORD *)v5 + 5))
      {
        v170 = 0;
        goto LABEL_329;
      }
      v166 = (unsigned __int8 *)*v5;
      if (!*((_BYTE *)v5 + 15))
        break;
      if (v165 <= 0x1D)
      {
        v167 = 0;
        v168 = *v159;
        while (1)
        {
          v169 = v166[v167];
          if (v169 >= v168)
            break;
          if (v165 == ++v167)
            goto LABEL_330;
        }
        if (v169 == v168)
          v170 = v167;
        else
          v170 = *((_WORD *)v5 + 5);
        goto LABEL_329;
      }
      v173 = *v159;
      v172 = (unsigned __int8 *)*v5;
      v174 = *((unsigned __int16 *)v5 + 5);
      do
      {
        v175 = v174 >> 1;
        v176 = &v172[v174 >> 1];
        v178 = *v176;
        v177 = v176 + 1;
        v174 += ~(v174 >> 1);
        if (v178 < v173)
          v172 = v177;
        else
          v174 = v175;
      }
      while (v174);
      if (v172 != &v166[v165] && *v172 == v173)
        goto LABEL_325;
LABEL_330:
      if ((_DWORD)v165 == *((unsigned __int16 *)v5 + 6))
      {
        if ((_DWORD)v165 == 0xFFFF)
          goto LABEL_2;
        v179 = 2 * (v165 & 0x7FFF);
        if (v179 <= 4)
          v180 = 4;
        else
          v180 = v179;
        v181 = v180 | 1;
        v182 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v182 + 16))(v182, (unsigned __int16)((v180 | 1) + v180), 1);
        v183 = result;
        if (*v5)
        {
          if (*((_WORD *)v5 + 5))
          {
            result = (uint64_t)memmove((void *)result, (const void *)*v5, *((unsigned __int16 *)v5 + 5));
            if (*((_WORD *)v5 + 5))
              result = (uint64_t)memmove((void *)(v183 + v181), (const void *)(*v5 + *((unsigned __int16 *)v5 + 4)), *((unsigned __int16 *)v5 + 5));
          }
          v184 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v184 + 40))(v184, *v5, *((unsigned __int16 *)v5 + 6));
        }
        *((_WORD *)v5 + 6) = v180;
        *v5 = v183;
        *((_WORD *)v5 + 4) = v181;
        v161 = v188;
      }
      if (v160 >= v162 && v160 < *(unsigned __int16 *)(a2 + 10))
      {
        v159 = (_BYTE *)(*(_QWORD *)a2 + v160);
        v3 = &v159[*(unsigned __int16 *)(a2 + 8)];
      }
      v163 = *((unsigned __int16 *)v5 + 5);
      v164 = (_BYTE *)*v5;
      v164[v163] = *v159;
      v164[*((unsigned __int16 *)v5 + 4) + v163] = *v3;
      ++*((_WORD *)v5 + 5);
      *((_BYTE *)v5 + 15) = 0;
      v162 = *(unsigned __int16 *)(a2 + 10);
LABEL_300:
      if (v160 + 1 < v162)
        ++v160;
      else
        v160 = v162;
    }
    v171 = *((unsigned __int16 *)v5 + 5);
    v172 = (unsigned __int8 *)*v5;
    while (*v172 != *v159)
    {
      ++v172;
      if (!--v171)
      {
        LOWORD(v172) = (_WORD)v166 + v165;
        break;
      }
    }
LABEL_325:
    v170 = (_WORD)v172 - (_WORD)v166;
LABEL_329:
    if ((_DWORD)v165 != v170)
      goto LABEL_300;
    goto LABEL_330;
  }
LABEL_2:
  v6 = *(unsigned __int16 *)(a2 + 26);
  if (*(_WORD *)(a2 + 26))
  {
    v7 = 0;
    v8 = 0;
    v9 = *(unsigned __int16 *)(a2 + 26);
    while (1)
    {
      if (v8 < v9)
      {
        v7 = (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + v8);
        v2 = &v7[*(unsigned __int16 *)(a2 + 24)];
      }
      v3 = (_BYTE *)*v2;
      v12 = (_BYTE *)*((unsigned __int16 *)v5 + 13);
      if (!*((_WORD *)v5 + 13))
        goto LABEL_33;
      v14 = v5[2];
      if (!*((_BYTE *)v5 + 31))
        break;
      if (v12 <= 0x1D)
      {
        v15 = 0;
        v16 = *v7;
        while (1)
        {
          v17 = *(unsigned __int8 *)(v14 + v15);
          if (v17 >= v16)
            break;
          if (v12 == (_BYTE *)++v15)
            goto LABEL_34;
        }
        if (v17 == v16)
          v25 = v15;
        else
          v25 = *((_WORD *)v5 + 13);
        if ((_DWORD)v12 != v25)
        {
LABEL_53:
          v13 = v25;
          goto LABEL_7;
        }
        goto LABEL_33;
      }
      v16 = *v7;
      v19 = (unsigned __int8 *)v5[2];
      v20 = *((unsigned __int16 *)v5 + 13);
      do
      {
        v21 = v20 >> 1;
        v22 = &v19[v20 >> 1];
        v24 = *v22;
        v23 = v22 + 1;
        v20 += ~(v20 >> 1);
        if (v24 < v16)
          v19 = v23;
        else
          v20 = v21;
      }
      while (v20);
      if (v19 != &v12[v14] && *v19 == v16)
        goto LABEL_32;
LABEL_34:
      if (*((_BYTE *)v5 + 30))
        goto LABEL_6;
      if (!*((_WORD *)v5 + 13))
      {
        v35 = 0;
        goto LABEL_63;
      }
      v26 = v5[2];
      if (!*((_BYTE *)v5 + 31))
      {
        v36 = *((unsigned __int16 *)v5 + 13);
        v27 = (unsigned __int8 *)v5[2];
        while (*v27 != v16)
        {
          ++v27;
          if (!--v36)
          {
            LOWORD(v27) = v26 + (_WORD)v12;
            break;
          }
        }
LABEL_59:
        v35 = (_WORD)v27 - v26;
LABEL_63:
        if ((_DWORD)v12 != v35)
          goto LABEL_6;
        goto LABEL_64;
      }
      v27 = (unsigned __int8 *)v5[2];
      v28 = *((unsigned __int16 *)v5 + 13);
      if (v12 < 0x1E)
      {
        v29 = 0;
        while (1)
        {
          v30 = *(unsigned __int8 *)(v26 + v29);
          if (v30 >= v16)
            break;
          if (v12 == (_BYTE *)++v29)
            goto LABEL_64;
        }
        if (v30 == v16)
          v35 = v29;
        else
          v35 = *((_WORD *)v5 + 13);
        goto LABEL_63;
      }
      do
      {
        v31 = v28 >> 1;
        v32 = &v27[v28 >> 1];
        v34 = *v32;
        v33 = v32 + 1;
        v28 += ~(v28 >> 1);
        if (v34 < v16)
          v27 = v33;
        else
          v28 = v31;
      }
      while (v28);
      if (v27 != &v12[v26] && *v27 == v16)
        goto LABEL_59;
LABEL_64:
      if ((_DWORD)v12 == *((unsigned __int16 *)v5 + 14))
      {
        if ((_DWORD)v12 == 0xFFFF)
        {
          LOWORD(v12) = -1;
          goto LABEL_6;
        }
        v37 = 2 * ((unsigned __int16)v12 & 0x7FFF);
        if (v37 <= 4)
          v37 = 4;
        v11 = v37 | 1;
        v185 = v37;
        v38 = (v37 | 1) + v37;
        v39 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v39 + 16))(v39, v38, 1);
        v10 = result;
        v40 = (const void *)v5[2];
        if (v40)
        {
          if (*((_WORD *)v5 + 13))
          {
            result = (uint64_t)memmove((void *)result, v40, *((unsigned __int16 *)v5 + 13));
            if (*((_WORD *)v5 + 13))
              result = (uint64_t)memmove((void *)(v10 + v11), (const void *)(v5[2] + *((unsigned __int16 *)v5 + 12)), *((unsigned __int16 *)v5 + 13));
          }
          v41 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 40))(v41, v5[2], *((unsigned __int16 *)v5 + 14));
        }
        *((_WORD *)v5 + 14) = v185;
        v5[2] = v10;
        *((_WORD *)v5 + 12) = v11;
        LODWORD(v12) = *((unsigned __int16 *)v5 + 13);
      }
      else
      {
        v10 = v5[2];
        v11 = *((unsigned __int16 *)v5 + 12);
      }
      v12 = (_BYTE *)(v10 + v12);
      *v12 = v16;
      v12[v11] = 0;
      LOWORD(v12) = *((_WORD *)v5 + 13) + 1;
      *((_WORD *)v5 + 13) = (_WORD)v12;
      *((_BYTE *)v5 + 31) = 0;
LABEL_6:
      v13 = (unsigned __int16)v12 - 1;
LABEL_7:
      *(_BYTE *)(v5[2] + *((unsigned __int16 *)v5 + 12) + v13) = (_BYTE)v3;
      v9 = *(unsigned __int16 *)(a2 + 26);
      if (v8 + 1 < v9)
        ++v8;
      else
        v8 = *(unsigned __int16 *)(a2 + 26);
      if (v8 == v6)
        goto LABEL_75;
    }
    v18 = *((unsigned __int16 *)v5 + 13);
    v19 = (unsigned __int8 *)v5[2];
    while (*v19 != *v7)
    {
      ++v19;
      if (!--v18)
      {
        LOWORD(v19) = v14 + (_WORD)v12;
        break;
      }
    }
LABEL_32:
    v25 = (_WORD)v19 - v14;
    if ((_DWORD)v12 != v25)
      goto LABEL_53;
LABEL_33:
    v16 = *v7;
    goto LABEL_34;
  }
LABEL_75:
  v42 = *(unsigned __int16 *)(a2 + 42);
  if (*(_WORD *)(a2 + 42))
  {
    v43 = 0;
    v44 = 0;
    v45 = *((unsigned __int16 *)v5 + 21);
    v46 = *(unsigned __int16 *)(a2 + 42);
    v47 = v45;
    do
    {
      v51 = *(_QWORD *)(a2 + 32);
      v52 = (unsigned __int8 *)(v51 + v44);
      v53 = v51 + *(unsigned __int16 *)(a2 + 40) + 4 * v44;
      if (v44 < v46)
      {
        v43 = v52;
        v3 = (_BYTE *)v53;
      }
      v54 = *(_DWORD *)v3;
      if ((_WORD)v47)
      {
        v50 = v5[4];
        if (*((_BYTE *)v5 + 47))
        {
          if ((unsigned __int16)v47 <= 0x1Du)
          {
            v55 = 0;
            v2 = (unsigned __int8 *)*v43;
            while (1)
            {
              v56 = *(unsigned __int8 *)(v50 + v55);
              if (v56 >= v2)
                break;
              if ((unsigned __int16)v47 == ++v55)
                goto LABEL_112;
            }
            if (v56 == (_DWORD)v2)
              LOWORD(v50) = v55;
            else
              LOWORD(v50) = v47;
            goto LABEL_110;
          }
          v2 = (unsigned __int8 *)*v43;
          v58 = (unsigned __int8 *)v5[4];
          v59 = (unsigned __int16)v47;
          do
          {
            v60 = v59 >> 1;
            v61 = &v58[v59 >> 1];
            v63 = *v61;
            v62 = v61 + 1;
            result = ~(v59 >> 1);
            v59 += result;
            if (v63 < v2)
              v58 = v62;
            else
              v59 = v60;
          }
          while (v59);
          if (v58 == (unsigned __int8 *)(v50 + (unsigned __int16)v47) || *v58 != (_DWORD)v2)
            goto LABEL_112;
        }
        else
        {
          v57 = (unsigned __int16)v47;
          v58 = (unsigned __int8 *)v5[4];
          while (*v58 != *v43)
          {
            ++v58;
            if (!--v57)
            {
              LOWORD(v58) = v50 + v47;
              break;
            }
          }
        }
        LOWORD(v50) = (_WORD)v58 - v50;
      }
      else
      {
        LOWORD(v50) = 0;
      }
LABEL_110:
      if ((unsigned __int16)v50 != (unsigned __int16)v47)
      {
        v50 = (unsigned __int16)v50;
        goto LABEL_81;
      }
      v2 = (unsigned __int8 *)*v43;
LABEL_112:
      if (*((_BYTE *)v5 + 46))
        goto LABEL_80;
      if (!(_WORD)v47)
      {
        v73 = 0;
        goto LABEL_137;
      }
      v64 = v5[4];
      if (!*((_BYTE *)v5 + 47))
      {
        v74 = (unsigned __int16)v47;
        v75 = (unsigned __int8 *)v5[4];
        while (*v75 != (_DWORD)v2)
        {
          ++v75;
          if (!--v74)
          {
            LOWORD(v75) = v64 + v47;
            break;
          }
        }
        v73 = (_WORD)v75 - v64;
LABEL_137:
        if (v73 != (unsigned __int16)v47)
          goto LABEL_79;
        goto LABEL_138;
      }
      v65 = (unsigned __int8 *)v5[4];
      v66 = (unsigned __int16)v47;
      if ((unsigned __int16)v47 < 0x1Eu)
      {
        v67 = 0;
        while (1)
        {
          v68 = *(unsigned __int8 *)(v64 + v67);
          if (v68 >= v2)
            break;
          if ((unsigned __int16)v47 == ++v67)
            goto LABEL_138;
        }
        if (v68 == (_DWORD)v2)
          v73 = v67;
        else
          v73 = v47;
        goto LABEL_137;
      }
      do
      {
        v69 = v66 >> 1;
        v70 = &v65[v66 >> 1];
        v72 = *v70;
        v71 = v70 + 1;
        v66 += ~(v66 >> 1);
        if (v72 < v2)
          v65 = v71;
        else
          v66 = v69;
      }
      while (v66);
      if (v65 != (unsigned __int8 *)(v64 + (unsigned __int16)v47) && *v65 == (_DWORD)v2)
      {
        v73 = (_WORD)v65 - v64;
        goto LABEL_137;
      }
LABEL_138:
      if (*((unsigned __int16 *)v5 + 22) == (unsigned __int16)v47)
      {
        if ((_WORD)v47 == 0xFFFF)
          goto LABEL_79;
        if (2 * (v47 & 0x7FFFu) <= 4)
          v76 = 4;
        else
          v76 = 2 * (v47 & 0x7FFF);
        v49 = (v76 & 0xFFFC) + 4;
        v186 = v76;
        v77 = v49 + 4 * v76;
        v78 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v78 + 16))(v78, v77 & 0xFFFC, 1);
        v48 = result;
        v79 = (const void *)v5[4];
        if (v79)
        {
          if (*((_WORD *)v5 + 21))
          {
            result = (uint64_t)memmove((void *)result, v79, *((unsigned __int16 *)v5 + 21));
            if (*((_WORD *)v5 + 21))
              result = (uint64_t)memmove((void *)(v48 + v49), (const void *)(v5[4] + *((unsigned __int16 *)v5 + 20)), 4 * *((unsigned __int16 *)v5 + 21));
          }
          v80 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v80 + 40))(v80, v5[4], *((unsigned __int16 *)v5 + 22));
        }
        *((_WORD *)v5 + 22) = v186;
        v5[4] = v48;
        *((_WORD *)v5 + 20) = v49;
        v47 = *((unsigned __int16 *)v5 + 21);
      }
      else
      {
        v48 = v5[4];
        v49 = *((_WORD *)v5 + 20);
      }
      *(_BYTE *)(v48 + (unsigned __int16)v47) = (_BYTE)v2;
      *(_DWORD *)(v48 + v49 + 4 * (unsigned __int16)v47) = 0;
      v45 = v47 + 1;
      *((_WORD *)v5 + 21) = v47 + 1;
      *((_BYTE *)v5 + 47) = 0;
LABEL_79:
      v46 = *(unsigned __int16 *)(a2 + 42);
LABEL_80:
      v50 = (unsigned __int16)v45 - 1;
      v47 = v45;
LABEL_81:
      *(_DWORD *)(v5[4] + *((unsigned __int16 *)v5 + 20) + 4 * v50) = v54;
      if (v44 + 1 < v46)
        ++v44;
      else
        v44 = v46;
    }
    while (v44 != v42);
  }
  v81 = *(unsigned __int16 *)(a2 + 58);
  if (*(_WORD *)(a2 + 58))
  {
    v82 = 0;
    v83 = 0;
    v84 = *((unsigned __int16 *)v5 + 29);
    v85 = *(unsigned __int16 *)(a2 + 58);
    v86 = v84;
    do
    {
      v90 = *(_QWORD *)(a2 + 48);
      v91 = (unsigned __int8 *)(v90 + v83);
      v92 = v90 + *(unsigned __int16 *)(a2 + 56) + 8 * v83;
      if (v83 < v85)
      {
        v82 = v91;
        v3 = (_BYTE *)v92;
      }
      v93 = *(_QWORD *)v3;
      if ((_WORD)v86)
      {
        v89 = v5[6];
        if (*((_BYTE *)v5 + 63))
        {
          if ((unsigned __int16)v86 <= 0x1Du)
          {
            v94 = 0;
            v2 = (unsigned __int8 *)*v82;
            while (1)
            {
              v95 = *(unsigned __int8 *)(v89 + v94);
              if (v95 >= v2)
                break;
              if ((unsigned __int16)v86 == ++v94)
                goto LABEL_186;
            }
            if (v95 == (_DWORD)v2)
              LOWORD(v89) = v94;
            else
              LOWORD(v89) = v86;
            goto LABEL_184;
          }
          v2 = (unsigned __int8 *)*v82;
          v97 = (unsigned __int8 *)v5[6];
          v98 = (unsigned __int16)v86;
          do
          {
            v99 = v98 >> 1;
            v100 = &v97[v98 >> 1];
            v102 = *v100;
            v101 = v100 + 1;
            result = ~(v98 >> 1);
            v98 += result;
            if (v102 < v2)
              v97 = v101;
            else
              v98 = v99;
          }
          while (v98);
          if (v97 == (unsigned __int8 *)(v89 + (unsigned __int16)v86) || *v97 != (_DWORD)v2)
            goto LABEL_186;
        }
        else
        {
          v96 = (unsigned __int16)v86;
          v97 = (unsigned __int8 *)v5[6];
          while (*v97 != *v82)
          {
            ++v97;
            if (!--v96)
            {
              LOWORD(v97) = v89 + v86;
              break;
            }
          }
        }
        LOWORD(v89) = (_WORD)v97 - v89;
      }
      else
      {
        LOWORD(v89) = 0;
      }
LABEL_184:
      if ((unsigned __int16)v89 != (unsigned __int16)v86)
      {
        v89 = (unsigned __int16)v89;
        goto LABEL_155;
      }
      v2 = (unsigned __int8 *)*v82;
LABEL_186:
      if (*((_BYTE *)v5 + 62))
        goto LABEL_154;
      if (!(_WORD)v86)
      {
        v112 = 0;
        goto LABEL_211;
      }
      v103 = v5[6];
      if (!*((_BYTE *)v5 + 63))
      {
        v113 = (unsigned __int16)v86;
        v114 = (unsigned __int8 *)v5[6];
        while (*v114 != (_DWORD)v2)
        {
          ++v114;
          if (!--v113)
          {
            LOWORD(v114) = v103 + v86;
            break;
          }
        }
        v112 = (_WORD)v114 - v103;
LABEL_211:
        if (v112 != (unsigned __int16)v86)
          goto LABEL_153;
        goto LABEL_212;
      }
      v104 = (unsigned __int8 *)v5[6];
      v105 = (unsigned __int16)v86;
      if ((unsigned __int16)v86 < 0x1Eu)
      {
        v106 = 0;
        while (1)
        {
          v107 = *(unsigned __int8 *)(v103 + v106);
          if (v107 >= v2)
            break;
          if ((unsigned __int16)v86 == ++v106)
            goto LABEL_212;
        }
        if (v107 == (_DWORD)v2)
          v112 = v106;
        else
          v112 = v86;
        goto LABEL_211;
      }
      do
      {
        v108 = v105 >> 1;
        v109 = &v104[v105 >> 1];
        v111 = *v109;
        v110 = v109 + 1;
        v105 += ~(v105 >> 1);
        if (v111 < v2)
          v104 = v110;
        else
          v105 = v108;
      }
      while (v105);
      if (v104 != (unsigned __int8 *)(v103 + (unsigned __int16)v86) && *v104 == (_DWORD)v2)
      {
        v112 = (_WORD)v104 - v103;
        goto LABEL_211;
      }
LABEL_212:
      if (*((unsigned __int16 *)v5 + 30) == (unsigned __int16)v86)
      {
        if ((_WORD)v86 == 0xFFFF)
          goto LABEL_153;
        if (2 * (v86 & 0x7FFFu) <= 4)
          v115 = 4;
        else
          v115 = 2 * (v86 & 0x7FFF);
        v88 = (v115 & 0xFFF8) + 8;
        v187 = v115;
        v116 = v88 + 8 * v115;
        v117 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v117 + 16))(v117, v116 & 0xFFF8, 1);
        v87 = result;
        v118 = (const void *)v5[6];
        if (v118)
        {
          if (*((_WORD *)v5 + 29))
          {
            result = (uint64_t)memmove((void *)result, v118, *((unsigned __int16 *)v5 + 29));
            if (*((_WORD *)v5 + 29))
              result = (uint64_t)memmove((void *)(v87 + v88), (const void *)(v5[6] + *((unsigned __int16 *)v5 + 28)), 8 * *((unsigned __int16 *)v5 + 29));
          }
          v119 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v119 + 40))(v119, v5[6], *((unsigned __int16 *)v5 + 30));
        }
        *((_WORD *)v5 + 30) = v187;
        v5[6] = v87;
        *((_WORD *)v5 + 28) = v88;
        v86 = *((unsigned __int16 *)v5 + 29);
      }
      else
      {
        v87 = v5[6];
        v88 = *((_WORD *)v5 + 28);
      }
      *(_BYTE *)(v87 + (unsigned __int16)v86) = (_BYTE)v2;
      *(_QWORD *)(v87 + v88 + 8 * (unsigned __int16)v86) = 0;
      v84 = v86 + 1;
      *((_WORD *)v5 + 29) = v86 + 1;
      *((_BYTE *)v5 + 63) = 0;
LABEL_153:
      v85 = *(unsigned __int16 *)(a2 + 58);
LABEL_154:
      v89 = (unsigned __int16)v84 - 1;
      v86 = v84;
LABEL_155:
      *(_QWORD *)(v5[6] + *((unsigned __int16 *)v5 + 28) + 8 * v89) = v93;
      if (v83 + 1 < v85)
        ++v83;
      else
        v83 = v85;
    }
    while (v83 != v81);
  }
  v120 = *(unsigned __int16 *)(a2 + 74);
  if (*(_WORD *)(a2 + 74))
  {
    v121 = 0;
    v122 = 0;
    v123 = *(unsigned __int16 *)(a2 + 74);
    while (1)
    {
      v128 = *(_QWORD *)(a2 + 64);
      v129 = (unsigned __int8 *)(v128 + v121);
      v130 = v128 + *(unsigned __int16 *)(a2 + 72) + 16 * v121;
      if (v121 < v123)
      {
        v2 = (unsigned __int8 *)v130;
        v122 = v129;
      }
      v126 = *((unsigned __int16 *)v5 + 37);
      if (!*((_WORD *)v5 + 37))
        goto LABEL_254;
      v131 = v5[8];
      if (!*((_BYTE *)v5 + 79))
        break;
      if (v126 <= 0x1D)
      {
        v132 = 0;
        v133 = *v122;
        while (1)
        {
          v134 = *(unsigned __int8 *)(v131 + v132);
          if (v134 >= v133)
            break;
          if (v126 == ++v132)
            goto LABEL_255;
        }
        if (v134 == v133)
          v142 = v132;
        else
          v142 = *((_WORD *)v5 + 37);
        if ((_DWORD)v126 != v142)
        {
LABEL_274:
          v127 = v142;
          goto LABEL_228;
        }
        goto LABEL_254;
      }
      v133 = *v122;
      v136 = (unsigned __int8 *)v5[8];
      v137 = *((unsigned __int16 *)v5 + 37);
      do
      {
        v138 = v137 >> 1;
        v139 = &v136[v137 >> 1];
        v141 = *v139;
        v140 = v139 + 1;
        v137 += ~(v137 >> 1);
        if (v141 < v133)
          v136 = v140;
        else
          v137 = v138;
      }
      while (v137);
      if (v136 != (unsigned __int8 *)(v131 + v126) && *v136 == v133)
        goto LABEL_253;
LABEL_255:
      if (*((_BYTE *)v5 + 78))
        goto LABEL_227;
      if (!*((_WORD *)v5 + 37))
      {
        v152 = 0;
        goto LABEL_284;
      }
      v143 = v5[8];
      if (!*((_BYTE *)v5 + 79))
      {
        v153 = *((unsigned __int16 *)v5 + 37);
        v144 = (unsigned __int8 *)v5[8];
        while (*v144 != v133)
        {
          ++v144;
          if (!--v153)
          {
            LOWORD(v144) = v143 + v126;
            break;
          }
        }
LABEL_280:
        v152 = (_WORD)v144 - v143;
LABEL_284:
        if ((_DWORD)v126 != v152)
          goto LABEL_227;
        goto LABEL_285;
      }
      v144 = (unsigned __int8 *)v5[8];
      v145 = *((unsigned __int16 *)v5 + 37);
      if (v126 < 0x1E)
      {
        v146 = 0;
        while (1)
        {
          v147 = *(unsigned __int8 *)(v143 + v146);
          if (v147 >= v133)
            break;
          if (v126 == ++v146)
            goto LABEL_285;
        }
        if (v147 == v133)
          v152 = v146;
        else
          v152 = *((_WORD *)v5 + 37);
        goto LABEL_284;
      }
      do
      {
        v148 = v145 >> 1;
        v149 = &v144[v145 >> 1];
        v151 = *v149;
        v150 = v149 + 1;
        v145 += ~(v145 >> 1);
        if (v151 < v133)
          v144 = v150;
        else
          v145 = v148;
      }
      while (v145);
      if (v144 != (unsigned __int8 *)(v143 + v126) && *v144 == v133)
        goto LABEL_280;
LABEL_285:
      if ((_DWORD)v126 == *((unsigned __int16 *)v5 + 38))
      {
        if ((_DWORD)v126 == 0xFFFF)
        {
          LOWORD(v126) = -1;
          goto LABEL_227;
        }
        v154 = 2 * (v126 & 0x7FFF);
        if (v154 <= 4)
          v155 = 4;
        else
          v155 = v154;
        v125 = (v155 & 0xFFF8) + 8;
        v156 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v156 + 16))(v156, (unsigned __int16)(v125 + 16 * v155) & 0xFFF8, 1);
        v124 = result;
        v157 = (const void *)v5[8];
        if (v157)
        {
          if (*((_WORD *)v5 + 37))
          {
            result = (uint64_t)memmove((void *)result, v157, *((unsigned __int16 *)v5 + 37));
            if (*((_WORD *)v5 + 37))
              result = (uint64_t)memmove((void *)(v124 + v125), (const void *)(v5[8] + *((unsigned __int16 *)v5 + 36)), 16 * *((unsigned __int16 *)v5 + 37));
          }
          v158 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v158 + 40))(v158, v5[8], *((unsigned __int16 *)v5 + 38));
        }
        *((_WORD *)v5 + 38) = v155;
        v5[8] = v124;
        *((_WORD *)v5 + 36) = v125;
        LODWORD(v126) = *((unsigned __int16 *)v5 + 37);
      }
      else
      {
        v124 = v5[8];
        v125 = *((_WORD *)v5 + 36);
      }
      *(_BYTE *)(v124 + v126) = v133;
      v126 = v124 + v125 + 16 * v126;
      *(_BYTE *)v126 = 0;
      *(_DWORD *)(v126 + 1) = *(_DWORD *)v189;
      *(_DWORD *)(v126 + 4) = *(_DWORD *)&v189[3];
      *(_QWORD *)(v126 + 8) = 0;
      LOWORD(v126) = *((_WORD *)v5 + 37) + 1;
      *((_WORD *)v5 + 37) = v126;
      *((_BYTE *)v5 + 79) = 0;
LABEL_227:
      v127 = (unsigned __int16)v126 - 1;
LABEL_228:
      *(_OWORD *)(v5[8] + *((unsigned __int16 *)v5 + 36) + 16 * v127) = *(_OWORD *)v2;
      v123 = *(unsigned __int16 *)(a2 + 74);
      if (v121 + 1 < v123)
        ++v121;
      else
        v121 = *(unsigned __int16 *)(a2 + 74);
      if (v121 == v120)
        return result;
    }
    v135 = *((unsigned __int16 *)v5 + 37);
    v136 = (unsigned __int8 *)v5[8];
    while (*v136 != *v122)
    {
      ++v136;
      if (!--v135)
      {
        LOWORD(v136) = v131 + v126;
        break;
      }
    }
LABEL_253:
    v142 = (_WORD)v136 - v131;
    if ((_DWORD)v126 != v142)
      goto LABEL_274;
LABEL_254:
    v133 = *v122;
    goto LABEL_255;
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 v7[4];
  int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)a1, *a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = v3;
    v8 = 0;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned int> const*>(a1, (uint64_t)v7, (uint64_t)&v9);
    v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    v5 = v4;
  }
  return *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) + 4 * v5;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex(unsigned __int8 **a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unint64_t v12;

  v2 = *((unsigned __int16 *)a1 + 5);
  if (!*((_WORD *)a1 + 5))
    return (unsigned __int16)v2;
  v3 = (uint64_t)*a1;
  if (!*((_BYTE *)a1 + 15))
  {
    v6 = v3 + v2;
    v7 = *a1;
    while (*v7 != a2)
    {
      ++v7;
      if (!--v2)
      {
        LOWORD(v7) = v6;
        goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  if (v2 >= 0x1E)
  {
    v7 = *a1;
    v8 = *((unsigned __int16 *)a1 + 5);
    do
    {
      v9 = &v7[v8 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v12 = v8 >> 1;
      v8 += ~(v8 >> 1);
      if (v11 < a2)
        v7 = v10;
      else
        v8 = v12;
    }
    while (v8);
    if (v7 == (unsigned __int8 *)(v3 + v2) || *v7 != a2)
      return (unsigned __int16)v2;
LABEL_19:
    LOWORD(v2) = (_WORD)v7 - v3;
    return (unsigned __int16)v2;
  }
  v4 = 0;
  while (1)
  {
    v5 = *(unsigned __int8 *)(v3 + v4);
    if (v5 >= a2)
      break;
    if (v2 == ++v4)
      return (unsigned __int16)v2;
  }
  if (v5 == a2)
    LOWORD(v2) = v4;
  return (unsigned __int16)v2;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned int> const*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **v3;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int8 v7;
  __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (a2 != a3)
  {
    v3 = (unsigned __int8 **)result;
    if (!*(_BYTE *)(result + 14))
    {
      v5 = a2;
      v6 = *(_WORD *)(result + 10);
      do
      {
        v7 = *(_BYTE *)v5;
        result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex(v3, *(_BYTE *)v5);
        if ((_DWORD)result == v6)
        {
          if (*((unsigned __int16 *)v3 + 6) == v6)
          {
            if (v6 == 0xFFFF)
              return result;
            if (2 * (v6 & 0x7FFFu) <= 4)
              v8 = 4;
            else
              v8 = 2 * (v6 & 0x7FFF);
            v9 = gss::Allocator::instance((gss::Allocator *)result);
            v10 = (v8 & 0xFFFC) + 4;
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, (unsigned __int16)(v10 + 4 * v8), 1);
            v11 = (unsigned __int8 *)result;
            if (*v3)
            {
              if (*((_WORD *)v3 + 5))
              {
                result = (uint64_t)memmove((void *)result, *v3, *((unsigned __int16 *)v3 + 5));
                if (*((_WORD *)v3 + 5))
                  result = (uint64_t)memmove(&v11[v10], &(*v3)[*((unsigned __int16 *)v3 + 4)], 4 * *((unsigned __int16 *)v3 + 5));
              }
              v12 = gss::Allocator::instance((gss::Allocator *)result);
              result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)v12 + 40))(v12, *v3, *((unsigned __int16 *)v3 + 6));
            }
            *((_WORD *)v3 + 6) = v8;
            *v3 = v11;
            *((_WORD *)v3 + 4) = v10;
            v7 = *(_BYTE *)v5;
            v6 = *((_WORD *)v3 + 5);
          }
          else
          {
            v11 = *v3;
            v10 = *((_WORD *)v3 + 4);
          }
          v11[v6] = v7;
          *(_DWORD *)&v11[4 * v6++ + v10] = *(_DWORD *)(v5 + 4);
          *((_WORD *)v3 + 5) = v6;
          *((_BYTE *)v3 + 15) = 0;
        }
        v5 += 8;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 v7[2];
  uint64_t v8;

  v3 = *a2;
  v4 = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)a1, *a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = v3;
    v7[1] = 0;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned char> const*>(a1, v7, (unsigned __int8 *)&v8);
    v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    v5 = v4;
  }
  return *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) + v5;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 v7[8];
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)a1, *a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = v3;
    v8 = 0;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,unsigned long long> const*>(a1, (uint64_t)v7, (uint64_t)&v9);
    v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    v5 = v4;
  }
  return *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) + 8 * v5;
}

void geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _BYTE *__dst, _BYTE *a3, int a4)
{
  unint64_t v4;
  int32x4_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t *v20;

  v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return;
  if (a4)
  {
    v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      v12 = ((4 * v4 - 4) >> 2) + 1;
      v10 = v12 & 0x7FFFFFFFFFFFFFF8;
      v13 = (int32x4_t)xmmword_19FFB2E90;
      v14 = v8 + 1;
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      v17 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v15);
        v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v12 == v10)
        goto LABEL_13;
      v11 = (unsigned int *)v8 + (v12 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_13:
    v20 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v20, 126 - 2 * __clz(v4), 1);
    if (*(_WORD *)(a1 + 10))
    {
      v18 = 0;
      do
      {
        v19 = (_BYTE *)(*(_QWORD *)a1 + v8->u32[v18]);
        __dst[v18] = *v19;
        a3[v18++] = v19[*(unsigned __int16 *)(a1 + 8)];
      }
      while (v18 < *(unsigned __int16 *)(a1 + 10));
    }
    *(_BYTE *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, v4);
  if (*(_WORD *)(a1 + 10))
    memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), *(unsigned __int16 *)(a1 + 10));
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t *v120;
  int64_t v121;
  BOOL v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t *v142;
  unsigned int *v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(unsigned __int8 *)(**a3 + v89) < *(unsigned __int8 *)(**a3 + v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(unsigned __int8 *)(v93 + v92);
        v95 = *(unsigned __int8 *)(v93 + v91);
        v96 = *v10;
        v97 = *(unsigned __int8 *)(v93 + v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v132 = *v11;
            v131 = v11[1];
            if (*(unsigned __int8 *)(v93 + v131) < *(unsigned __int8 *)(v93 + v132))
            {
              *v11 = v131;
              v11[1] = v132;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v157 = *v10;
          if (*(unsigned __int8 *)(v93 + v157) < v95)
          {
            v11[1] = v157;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = v11[1];
        v103 = **a3;
        v104 = *(unsigned __int8 *)(v103 + v99);
        v105 = *v11;
        v106 = *(unsigned __int8 *)(v103 + v105);
        v107 = *(unsigned __int8 *)(v103 + v101);
        if (v104 >= v106)
        {
          if (v107 < v104)
          {
            *v98 = v101;
            *v100 = v99;
            v108 = v11;
            result = (uint64_t)(v11 + 1);
            if (v107 >= v106)
              goto LABEL_171;
            goto LABEL_169;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v99 = *v11;
            v102 = *v11;
LABEL_169:
            *v108 = v101;
            *(_DWORD *)result = v105;
            goto LABEL_171;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v105;
          result = (uint64_t)(v11 + 2);
          v99 = v105;
          v102 = v105;
          if (v107 < v106)
            goto LABEL_169;
        }
        v99 = v101;
        v102 = v101;
LABEL_171:
        v158 = *v10;
        if (*(unsigned __int8 *)(v103 + v158) < *(unsigned __int8 *)(v103 + v99))
        {
          *v100 = v158;
          *v10 = v102;
          v159 = *v100;
          v160 = *v98;
          v161 = *(unsigned __int8 *)(v103 + v159);
          if (v161 < *(unsigned __int8 *)(v103 + v160))
          {
            v11[1] = v159;
            v11[2] = v160;
            v162 = *v11;
            if (v161 < *(unsigned __int8 *)(v103 + v162))
            {
              *v11 = v159;
              v11[1] = v162;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v119 = (unint64_t)(v13 - 2) >> 1;
              v120 = *a3;
              v121 = v119;
              do
              {
                if (v119 >= v121)
                {
                  v123 = (2 * v121) | 1;
                  v124 = &v11[v123];
                  v125 = *v124;
                  if (2 * v121 + 2 >= v13)
                  {
                    v126 = *v120;
                  }
                  else
                  {
                    v126 = *v120;
                    if (*(unsigned __int8 *)(*v120 + v125) < *(unsigned __int8 *)(*v120 + v124[1]))
                    {
                      LODWORD(v125) = v124[1];
                      ++v124;
                      v123 = 2 * v121 + 2;
                    }
                  }
                  v127 = &v11[v121];
                  v128 = *v127;
                  result = *(unsigned __int8 *)(v126 + v128);
                  if (*(unsigned __int8 *)(v126 + v125) >= result)
                  {
                    do
                    {
                      v129 = v124;
                      *v127 = v125;
                      if (v119 < v123)
                        break;
                      v130 = (2 * v123) | 1;
                      v124 = &v11[v130];
                      v123 = 2 * v123 + 2;
                      v125 = *v124;
                      if (v123 < v13)
                      {
                        if (*(unsigned __int8 *)(v126 + v125) >= *(unsigned __int8 *)(v126 + v124[1]))
                        {
                          v123 = v130;
                        }
                        else
                        {
                          LODWORD(v125) = v124[1];
                          ++v124;
                        }
                      }
                      else
                      {
                        v123 = v130;
                      }
                      v127 = v129;
                    }
                    while (*(unsigned __int8 *)(v126 + v125) >= result);
                    *v129 = v128;
                  }
                }
                v122 = v121-- <= 0;
              }
              while (!v122);
              v139 = (unint64_t)v12 >> 2;
              do
              {
                v140 = 0;
                v141 = *v11;
                v142 = *a3;
                v143 = v11;
                do
                {
                  v146 = &v143[v140];
                  v147 = v146[1];
                  v145 = v146 + 1;
                  v144 = v147;
                  v148 = (2 * v140) | 1;
                  v140 = 2 * v140 + 2;
                  if (v140 < v139)
                  {
                    result = v145[1];
                    if (*(unsigned __int8 *)(*v142 + v144) >= *(unsigned __int8 *)(*v142 + result))
                    {
                      v140 = v148;
                    }
                    else
                    {
                      LODWORD(v144) = v145[1];
                      ++v145;
                    }
                  }
                  else
                  {
                    v140 = v148;
                  }
                  *v143 = v144;
                  v143 = v145;
                }
                while (v140 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
                if (v145 == --a2)
                {
                  *v145 = v141;
                }
                else
                {
                  *v145 = *a2;
                  *a2 = v141;
                  v149 = (char *)v145 - (char *)v11 + 4;
                  if (v149 >= 5)
                  {
                    v150 = (((unint64_t)v149 >> 2) - 2) >> 1;
                    v151 = &v11[v150];
                    v152 = *v151;
                    v153 = *v145;
                    v154 = *v142;
                    v155 = *(unsigned __int8 *)(v154 + v153);
                    if (*(unsigned __int8 *)(v154 + v152) < v155)
                    {
                      do
                      {
                        v156 = v151;
                        *v145 = v152;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v11[v150];
                        v152 = *v151;
                        v145 = v156;
                      }
                      while (*(unsigned __int8 *)(v154 + v152) < v155);
                      *v156 = v153;
                    }
                  }
                }
                v122 = v139-- <= 2;
              }
              while (!v122);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(unsigned __int8 *)(v16 + v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(unsigned __int8 *)(v16 + v19);
            v22 = *(unsigned __int8 *)(v16 + v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(unsigned __int8 *)(v16 + v27) < *(unsigned __int8 *)(v16 + v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(unsigned __int8 *)(v16 + v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(unsigned __int8 *)(v16 + v35);
            v38 = *(unsigned __int8 *)(v16 + v36);
            v39 = *(a2 - 2);
            v40 = *(unsigned __int8 *)(v16 + v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(unsigned __int8 *)(v16 + v41) < *(unsigned __int8 *)(v16 + v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(unsigned __int8 *)(v16 + v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(unsigned __int8 *)(v16 + v48);
            v51 = *(unsigned __int8 *)(v16 + v49);
            v52 = *(a2 - 3);
            v53 = *(unsigned __int8 *)(v16 + v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(unsigned __int8 *)(v16 + v54) < *(unsigned __int8 *)(v16 + v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(unsigned __int8 *)(v16 + v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(unsigned __int8 *)(v16 + v57);
            v60 = *(unsigned __int8 *)(v16 + v58);
            v61 = *v46;
            v62 = *(unsigned __int8 *)(v16 + v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(unsigned __int8 *)(v16 + v23);
          v26 = *(unsigned __int8 *)(v16 + v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(unsigned __int8 *)(v16 + v29) < *(unsigned __int8 *)(v16 + v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(unsigned __int8 *)(v16 + v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(unsigned __int8 *)(v16 + v64);
            if (*(unsigned __int8 *)(v16 + *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(unsigned __int8 *)(v16 + *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(unsigned __int8 *)(v16 + *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(unsigned __int8 *)(v16 + v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(unsigned __int8 *)(v16 + v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(unsigned __int8 *)(v16 + v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(unsigned __int8 *)(v16 + v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(unsigned __int8 *)(v16 + v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(unsigned __int8 *)(v16 + v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(unsigned __int8 *)(v16 + v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(unsigned __int8 *)(v16 + v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(unsigned __int8 *)(v16 + v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(unsigned __int8 *)(v16 + v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v109 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v110 = **a3;
              v111 = 4;
              v112 = v11;
              do
              {
                v115 = *v112;
                v114 = v112[1];
                v112 = v109;
                v116 = *(unsigned __int8 *)(v110 + v114);
                if (v116 < *(unsigned __int8 *)(v110 + v115))
                {
                  v117 = v111;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v117) = v115;
                    v118 = v117 - 4;
                    if (v117 == 4)
                    {
                      v113 = v11;
                      goto LABEL_110;
                    }
                    v115 = *(unsigned int *)((char *)v11 + v117 - 8);
                    v117 -= 4;
                  }
                  while (v116 < *(unsigned __int8 *)(v110 + v115));
                  v113 = (unsigned int *)((char *)v11 + v118);
LABEL_110:
                  *v113 = v114;
                }
                v109 = v112 + 1;
                v111 += 4;
              }
              while (v112 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v133 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v134 = **a3;
            do
            {
              v136 = *v9;
              v135 = v9[1];
              v9 = v133;
              v137 = *(unsigned __int8 *)(v134 + v135);
              if (v137 < *(unsigned __int8 *)(v134 + v136))
              {
                v138 = v9;
                do
                {
                  *v138 = v136;
                  v136 = *(v138 - 2);
                  --v138;
                }
                while (v137 < *(unsigned __int8 *)(v134 + v136));
                *v138 = v135;
              }
              v133 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(uint64_t a1, int a2, _WORD *a3)
{
  unsigned int v4;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  int v19;
  _Unwind_Exception *v20;
  _Unwind_Exception *v21;
  uint64_t v22;
  uint64_t (**v23)();
  int v24;
  uint64_t (***v25)();
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = 2 * a2;
  if ((2 * a2) > *(_DWORD *)(a1 + 36))
    return 0;
  v8 = *(_DWORD *)(a1 + 32);
  if (v8 < v4)
  {
    v9 = gss::Allocator::instance((gss::Allocator *)a1);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, *(unsigned int *)(a1 + 36), 1);
    v11 = *(_DWORD *)(a1 + 36);
    v25 = &v23;
    v22 = v10;
    v23 = &off_1E42D5D10;
    v24 = v11;
    v12 = *(uint64_t **)(a1 + 8);
    if ((unint64_t)v12 >= *(_QWORD *)(a1 + 16))
    {
      v13 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)a1, &v22);
    }
    else
    {
      v22 = 0;
      *v12 = v10;
      v12[4] = (uint64_t)(v12 + 1);
      ((void (*)(uint64_t (***)()))(*v25)[3])(v25);
      v13 = (char *)(v12 + 5);
    }
    *(_QWORD *)(a1 + 8) = v13;
    v14 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 28) = v14;
    *(_DWORD *)(a1 + 32) = v14;
    v15 = v22;
    v16 = v25;
    v22 = 0;
    if (v15)
    {
      if (!v25)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        v21 = v20;
        std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](&v22);
        _Unwind_Resume(v21);
      }
      (*v25)[6]();
      v16 = v25;
    }
    if (v16 == &v23)
    {
      v17 = 4;
      v16 = &v23;
    }
    else
    {
      if (!v16)
      {
LABEL_15:
        v8 = *(_DWORD *)(a1 + 32);
        goto LABEL_16;
      }
      v17 = 5;
    }
    (*v16)[v17]();
    goto LABEL_15;
  }
LABEL_16:
  v18 = *(unsigned int *)(a1 + 24);
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 40) + v18;
  v19 = *(_DWORD *)(a1 + 28) - a2;
  *(_DWORD *)(a1 + 24) = v18 + a2;
  *(_DWORD *)(a1 + 28) = v19;
  *a3 = v19 - v18;
  *(_DWORD *)(a1 + 32) = v8 - v4;
  return result;
}

uint64_t (***gss::StylePropertySet<gss::ScenePropertyID>::intern(uint64_t (***result)(), uint64_t a2))()
{
  uint64_t v3;
  int v4;
  uint64_t (***v5)();
  __int16 v6;
  gss::Allocator *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  char *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  char *v24;
  int v25;
  uint64_t (***v26)();
  __int16 v27;
  gss::Allocator *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  gss::Allocator *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  gss::Allocator *v48;
  uint64_t v49;
  _Unwind_Exception *v50;
  _Unwind_Exception *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (**v54)();
  int v55;
  uint64_t (***v56)();
  uint64_t v57;

  v3 = (uint64_t)result;
  v57 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)result + 30))
  {
    *((_BYTE *)result + 30) = 1;
    v4 = *((unsigned __int16 *)result + 13);
    if (*((_WORD *)result + 13))
    {
      LOWORD(v53) = 0;
      result = (uint64_t (***)())geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(a2, v4, &v53);
      v5 = result;
      if (result)
      {
        v6 = v53;
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 16, result, (_BYTE *)result + (unsigned __int16)v53, 1);
        v8 = gss::Allocator::instance(v7);
        result = (uint64_t (***)())(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v3 + 16), *(unsigned __int16 *)(v3 + 28));
        *(_WORD *)(v3 + 28) = 0;
        *(_QWORD *)(v3 + 16) = v5;
        *(_WORD *)(v3 + 24) = v6;
      }
    }
  }
  if (!*(_BYTE *)(v3 + 46))
  {
    *(_BYTE *)(v3 + 46) = 1;
    v9 = *(unsigned __int16 *)(v3 + 42);
    if (*(_WORD *)(v3 + 42))
    {
      v10 = 5 * v9;
      if ((5 * v9) <= *(_DWORD *)(a2 + 76))
      {
        v11 = *(_DWORD *)(a2 + 72);
        if (v11 >= v10)
          goto LABEL_39;
        v12 = gss::Allocator::instance((gss::Allocator *)result);
        v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, *(unsigned int *)(a2 + 76), 1);
        v14 = *(_DWORD *)(a2 + 76);
        v56 = &v54;
        v53 = v13;
        v54 = &off_1E42D5D58;
        v55 = v14;
        v15 = *(uint64_t **)(a2 + 48);
        if ((unint64_t)v15 >= *(_QWORD *)(a2 + 56))
        {
          v16 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)(a2 + 40), &v53);
        }
        else
        {
          v53 = 0;
          *v15 = v13;
          v15[4] = (uint64_t)(v15 + 1);
          ((void (*)(uint64_t (***)()))(*v56)[3])(v56);
          v16 = (char *)(v15 + 5);
        }
        *(_QWORD *)(a2 + 48) = v16;
        v30 = *(_DWORD *)(a2 + 76);
        *(_DWORD *)(a2 + 64) = 0;
        *(_DWORD *)(a2 + 68) = v30;
        *(_DWORD *)(a2 + 72) = v30;
        v31 = v53;
        result = v56;
        v53 = 0;
        if (v31)
        {
          v52 = v31;
          if (!v56)
            goto LABEL_46;
          (*v56)[6]();
          result = v56;
        }
        if (result == &v54)
        {
          v32 = 4;
          result = &v54;
        }
        else
        {
          if (!result)
          {
LABEL_38:
            v11 = *(_DWORD *)(a2 + 72);
LABEL_39:
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + 48) - 40);
            v37 = *(unsigned int *)(a2 + 64);
            v38 = *(_DWORD *)(a2 + 68) - 4 * v9;
            *(_DWORD *)(a2 + 64) = v37 + v9;
            *(_DWORD *)(a2 + 68) = v38;
            *(_DWORD *)(a2 + 72) = v11 - v10;
            if (v36)
            {
              v39 = v36 + v37;
              v40 = v38 - v37;
              geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 32, (_BYTE *)(v36 + v37), (_DWORD *)(v36 + v37 + (unsigned __int16)(v38 - v37)), 1);
              v42 = gss::Allocator::instance(v41);
              result = (uint64_t (***)())(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v42 + 40))(v42, *(_QWORD *)(v3 + 32), *(unsigned __int16 *)(v3 + 44));
              *(_WORD *)(v3 + 44) = 0;
              *(_QWORD *)(v3 + 32) = v39;
              *(_WORD *)(v3 + 40) = v40;
            }
            goto LABEL_3;
          }
          v32 = 5;
        }
        result = (uint64_t (***)())(*result)[v32]();
        goto LABEL_38;
      }
    }
  }
LABEL_3:
  if (*(_BYTE *)(v3 + 62))
    goto LABEL_4;
  *(_BYTE *)(v3 + 62) = 1;
  v17 = *(unsigned __int16 *)(v3 + 58);
  if (!*(_WORD *)(v3 + 58))
    goto LABEL_4;
  v18 = 9 * v17;
  if ((9 * v17) > *(_DWORD *)(a2 + 116))
    goto LABEL_4;
  v19 = *(_DWORD *)(a2 + 112);
  if (v19 < v18)
  {
    v20 = gss::Allocator::instance((gss::Allocator *)result);
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 16))(v20, *(unsigned int *)(a2 + 116), 1);
    v22 = *(_DWORD *)(a2 + 116);
    v56 = &v54;
    v53 = v21;
    v54 = &off_1E42D5DA0;
    v55 = v22;
    v23 = *(uint64_t **)(a2 + 88);
    if ((unint64_t)v23 >= *(_QWORD *)(a2 + 96))
    {
      v24 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)(a2 + 80), &v53);
    }
    else
    {
      v53 = 0;
      *v23 = v21;
      v23[4] = (uint64_t)(v23 + 1);
      ((void (*)(uint64_t (***)()))(*v56)[3])(v56);
      v24 = (char *)(v23 + 5);
    }
    *(_QWORD *)(a2 + 88) = v24;
    v33 = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 108) = v33;
    *(_DWORD *)(a2 + 112) = v33;
    v34 = v53;
    result = v56;
    v53 = 0;
    if (!v34)
    {
LABEL_33:
      if (result == &v54)
      {
        v35 = 4;
        result = &v54;
      }
      else
      {
        if (!result)
        {
LABEL_43:
          v19 = *(_DWORD *)(a2 + 112);
          goto LABEL_44;
        }
        v35 = 5;
      }
      result = (uint64_t (***)())(*result)[v35]();
      goto LABEL_43;
    }
    v52 = v34;
    if (v56)
    {
      (*v56)[6]();
      result = v56;
      goto LABEL_33;
    }
LABEL_46:
    std::__throw_bad_function_call[abi:nn180100]();
    v51 = v50;
    std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](&v53);
    _Unwind_Resume(v51);
  }
LABEL_44:
  v43 = *(_QWORD *)(*(_QWORD *)(a2 + 88) - 40);
  v44 = *(unsigned int *)(a2 + 104);
  v45 = *(_DWORD *)(a2 + 108) - 8 * v17;
  *(_DWORD *)(a2 + 104) = v44 + v17;
  *(_DWORD *)(a2 + 108) = v45;
  *(_DWORD *)(a2 + 112) = v19 - v18;
  if (v43)
  {
    v46 = v43 + v44;
    v47 = v45 - v44;
    geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 48, (_BYTE *)(v43 + v44), (_QWORD *)(v43 + v44 + (unsigned __int16)(v45 - v44)), 1);
    v49 = gss::Allocator::instance(v48);
    result = (uint64_t (***)())(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v49 + 40))(v49, *(_QWORD *)(v3 + 48), *(unsigned __int16 *)(v3 + 60));
    *(_WORD *)(v3 + 60) = 0;
    *(_QWORD *)(v3 + 48) = v46;
    *(_WORD *)(v3 + 56) = v47;
  }
LABEL_4:
  if (!*(_BYTE *)(v3 + 14))
  {
    *(_BYTE *)(v3 + 14) = 1;
    v25 = *(unsigned __int16 *)(v3 + 10);
    if (*(_WORD *)(v3 + 10))
    {
      LOWORD(v53) = 0;
      result = (uint64_t (***)())geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(a2, v25, &v53);
      v26 = result;
      if (result)
      {
        v27 = v53;
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3, result, (_BYTE *)result + (unsigned __int16)v53, 1);
        v29 = gss::Allocator::instance(v28);
        result = (uint64_t (***)())(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)v3, *(unsigned __int16 *)(v3 + 12));
        *(_WORD *)(v3 + 12) = 0;
        *(_QWORD *)v3 = v26;
        *(_WORD *)(v3 + 8) = v27;
      }
    }
  }
  return result;
}

void geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _BYTE *__dst, _DWORD *a3, int a4)
{
  unint64_t v4;
  _BYTE *v6;
  int32x4_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t *v21;
  unsigned int v22;
  uint64_t *v23;

  v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return;
  v6 = __dst;
  if (a4)
  {
    v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      v12 = ((4 * v4 - 4) >> 2) + 1;
      v10 = v12 & 0x7FFFFFFFFFFFFFF8;
      v13 = (int32x4_t)xmmword_19FFB2E90;
      v14 = v8 + 1;
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      v17 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v15);
        v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v12 == v10)
        goto LABEL_13;
      v11 = (unsigned int *)v8 + (v12 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_13:
    v23 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v23, 126 - 2 * __clz(v4), 1);
    v18 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8);
      v21 = v8;
      do
      {
        v22 = v21->i32[0];
        v21 = (int32x4_t *)((char *)v21 + 4);
        *v6++ = *(_BYTE *)(v19 + v22);
        *a3++ = *(_DWORD *)(v20 + 4 * v22);
        --v18;
      }
      while (v18);
    }
    *(_BYTE *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, v4);
  if (*(_WORD *)(a1 + 10))
    memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), 4 * *(unsigned __int16 *)(a1 + 10));
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t *v120;
  int64_t v121;
  BOOL v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t *v142;
  unsigned int *v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(unsigned __int8 *)(**a3 + v89) < *(unsigned __int8 *)(**a3 + v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(unsigned __int8 *)(v93 + v92);
        v95 = *(unsigned __int8 *)(v93 + v91);
        v96 = *v10;
        v97 = *(unsigned __int8 *)(v93 + v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v132 = *v11;
            v131 = v11[1];
            if (*(unsigned __int8 *)(v93 + v131) < *(unsigned __int8 *)(v93 + v132))
            {
              *v11 = v131;
              v11[1] = v132;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v157 = *v10;
          if (*(unsigned __int8 *)(v93 + v157) < v95)
          {
            v11[1] = v157;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = v11[1];
        v103 = **a3;
        v104 = *(unsigned __int8 *)(v103 + v99);
        v105 = *v11;
        v106 = *(unsigned __int8 *)(v103 + v105);
        v107 = *(unsigned __int8 *)(v103 + v101);
        if (v104 >= v106)
        {
          if (v107 < v104)
          {
            *v98 = v101;
            *v100 = v99;
            v108 = v11;
            result = (uint64_t)(v11 + 1);
            if (v107 >= v106)
              goto LABEL_171;
            goto LABEL_169;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v99 = *v11;
            v102 = *v11;
LABEL_169:
            *v108 = v101;
            *(_DWORD *)result = v105;
            goto LABEL_171;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v105;
          result = (uint64_t)(v11 + 2);
          v99 = v105;
          v102 = v105;
          if (v107 < v106)
            goto LABEL_169;
        }
        v99 = v101;
        v102 = v101;
LABEL_171:
        v158 = *v10;
        if (*(unsigned __int8 *)(v103 + v158) < *(unsigned __int8 *)(v103 + v99))
        {
          *v100 = v158;
          *v10 = v102;
          v159 = *v100;
          v160 = *v98;
          v161 = *(unsigned __int8 *)(v103 + v159);
          if (v161 < *(unsigned __int8 *)(v103 + v160))
          {
            v11[1] = v159;
            v11[2] = v160;
            v162 = *v11;
            if (v161 < *(unsigned __int8 *)(v103 + v162))
            {
              *v11 = v159;
              v11[1] = v162;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v119 = (unint64_t)(v13 - 2) >> 1;
              v120 = *a3;
              v121 = v119;
              do
              {
                if (v119 >= v121)
                {
                  v123 = (2 * v121) | 1;
                  v124 = &v11[v123];
                  v125 = *v124;
                  if (2 * v121 + 2 >= v13)
                  {
                    v126 = *v120;
                  }
                  else
                  {
                    v126 = *v120;
                    if (*(unsigned __int8 *)(*v120 + v125) < *(unsigned __int8 *)(*v120 + v124[1]))
                    {
                      LODWORD(v125) = v124[1];
                      ++v124;
                      v123 = 2 * v121 + 2;
                    }
                  }
                  v127 = &v11[v121];
                  v128 = *v127;
                  result = *(unsigned __int8 *)(v126 + v128);
                  if (*(unsigned __int8 *)(v126 + v125) >= result)
                  {
                    do
                    {
                      v129 = v124;
                      *v127 = v125;
                      if (v119 < v123)
                        break;
                      v130 = (2 * v123) | 1;
                      v124 = &v11[v130];
                      v123 = 2 * v123 + 2;
                      v125 = *v124;
                      if (v123 < v13)
                      {
                        if (*(unsigned __int8 *)(v126 + v125) >= *(unsigned __int8 *)(v126 + v124[1]))
                        {
                          v123 = v130;
                        }
                        else
                        {
                          LODWORD(v125) = v124[1];
                          ++v124;
                        }
                      }
                      else
                      {
                        v123 = v130;
                      }
                      v127 = v129;
                    }
                    while (*(unsigned __int8 *)(v126 + v125) >= result);
                    *v129 = v128;
                  }
                }
                v122 = v121-- <= 0;
              }
              while (!v122);
              v139 = (unint64_t)v12 >> 2;
              do
              {
                v140 = 0;
                v141 = *v11;
                v142 = *a3;
                v143 = v11;
                do
                {
                  v146 = &v143[v140];
                  v147 = v146[1];
                  v145 = v146 + 1;
                  v144 = v147;
                  v148 = (2 * v140) | 1;
                  v140 = 2 * v140 + 2;
                  if (v140 < v139)
                  {
                    result = v145[1];
                    if (*(unsigned __int8 *)(*v142 + v144) >= *(unsigned __int8 *)(*v142 + result))
                    {
                      v140 = v148;
                    }
                    else
                    {
                      LODWORD(v144) = v145[1];
                      ++v145;
                    }
                  }
                  else
                  {
                    v140 = v148;
                  }
                  *v143 = v144;
                  v143 = v145;
                }
                while (v140 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
                if (v145 == --a2)
                {
                  *v145 = v141;
                }
                else
                {
                  *v145 = *a2;
                  *a2 = v141;
                  v149 = (char *)v145 - (char *)v11 + 4;
                  if (v149 >= 5)
                  {
                    v150 = (((unint64_t)v149 >> 2) - 2) >> 1;
                    v151 = &v11[v150];
                    v152 = *v151;
                    v153 = *v145;
                    v154 = *v142;
                    v155 = *(unsigned __int8 *)(v154 + v153);
                    if (*(unsigned __int8 *)(v154 + v152) < v155)
                    {
                      do
                      {
                        v156 = v151;
                        *v145 = v152;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v11[v150];
                        v152 = *v151;
                        v145 = v156;
                      }
                      while (*(unsigned __int8 *)(v154 + v152) < v155);
                      *v156 = v153;
                    }
                  }
                }
                v122 = v139-- <= 2;
              }
              while (!v122);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(unsigned __int8 *)(v16 + v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(unsigned __int8 *)(v16 + v19);
            v22 = *(unsigned __int8 *)(v16 + v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(unsigned __int8 *)(v16 + v27) < *(unsigned __int8 *)(v16 + v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(unsigned __int8 *)(v16 + v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(unsigned __int8 *)(v16 + v35);
            v38 = *(unsigned __int8 *)(v16 + v36);
            v39 = *(a2 - 2);
            v40 = *(unsigned __int8 *)(v16 + v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(unsigned __int8 *)(v16 + v41) < *(unsigned __int8 *)(v16 + v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(unsigned __int8 *)(v16 + v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(unsigned __int8 *)(v16 + v48);
            v51 = *(unsigned __int8 *)(v16 + v49);
            v52 = *(a2 - 3);
            v53 = *(unsigned __int8 *)(v16 + v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(unsigned __int8 *)(v16 + v54) < *(unsigned __int8 *)(v16 + v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(unsigned __int8 *)(v16 + v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(unsigned __int8 *)(v16 + v57);
            v60 = *(unsigned __int8 *)(v16 + v58);
            v61 = *v46;
            v62 = *(unsigned __int8 *)(v16 + v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(unsigned __int8 *)(v16 + v23);
          v26 = *(unsigned __int8 *)(v16 + v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(unsigned __int8 *)(v16 + v29) < *(unsigned __int8 *)(v16 + v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(unsigned __int8 *)(v16 + v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(unsigned __int8 *)(v16 + v64);
            if (*(unsigned __int8 *)(v16 + *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(unsigned __int8 *)(v16 + *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(unsigned __int8 *)(v16 + *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(unsigned __int8 *)(v16 + v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(unsigned __int8 *)(v16 + v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(unsigned __int8 *)(v16 + v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(unsigned __int8 *)(v16 + v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(unsigned __int8 *)(v16 + v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(unsigned __int8 *)(v16 + v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(unsigned __int8 *)(v16 + v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(unsigned __int8 *)(v16 + v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(unsigned __int8 *)(v16 + v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(unsigned __int8 *)(v16 + v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v109 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v110 = **a3;
              v111 = 4;
              v112 = v11;
              do
              {
                v115 = *v112;
                v114 = v112[1];
                v112 = v109;
                v116 = *(unsigned __int8 *)(v110 + v114);
                if (v116 < *(unsigned __int8 *)(v110 + v115))
                {
                  v117 = v111;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v117) = v115;
                    v118 = v117 - 4;
                    if (v117 == 4)
                    {
                      v113 = v11;
                      goto LABEL_110;
                    }
                    v115 = *(unsigned int *)((char *)v11 + v117 - 8);
                    v117 -= 4;
                  }
                  while (v116 < *(unsigned __int8 *)(v110 + v115));
                  v113 = (unsigned int *)((char *)v11 + v118);
LABEL_110:
                  *v113 = v114;
                }
                v109 = v112 + 1;
                v111 += 4;
              }
              while (v112 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v133 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v134 = **a3;
            do
            {
              v136 = *v9;
              v135 = v9[1];
              v9 = v133;
              v137 = *(unsigned __int8 *)(v134 + v135);
              if (v137 < *(unsigned __int8 *)(v134 + v136))
              {
                v138 = v9;
                do
                {
                  *v138 = v136;
                  v136 = *(v138 - 2);
                  --v138;
                }
                while (v137 < *(unsigned __int8 *)(v134 + v136));
                *v138 = v135;
              }
              v133 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

void geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _BYTE *__dst, _QWORD *a3, int a4)
{
  unint64_t v4;
  _BYTE *v6;
  int32x4_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t *v21;
  unsigned int v22;
  uint64_t *v23;

  v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return;
  v6 = __dst;
  if (a4)
  {
    v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      v12 = ((4 * v4 - 4) >> 2) + 1;
      v10 = v12 & 0x7FFFFFFFFFFFFFF8;
      v13 = (int32x4_t)xmmword_19FFB2E90;
      v14 = v8 + 1;
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      v17 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v15);
        v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v12 == v10)
        goto LABEL_13;
      v11 = (unsigned int *)v8 + (v12 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_13:
    v23 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v23, 126 - 2 * __clz(v4), 1);
    v18 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8);
      v21 = v8;
      do
      {
        v22 = v21->i32[0];
        v21 = (int32x4_t *)((char *)v21 + 4);
        *v6++ = *(_BYTE *)(v19 + v22);
        *a3++ = *(_QWORD *)(v20 + 8 * v22);
        --v18;
      }
      while (v18);
    }
    *(_BYTE *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, v4);
  if (*(_WORD *)(a1 + 10))
    memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), 8 * *(unsigned __int16 *)(a1 + 10));
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t *v120;
  int64_t v121;
  BOOL v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t *v142;
  unsigned int *v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(unsigned __int8 *)(**a3 + v89) < *(unsigned __int8 *)(**a3 + v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(unsigned __int8 *)(v93 + v92);
        v95 = *(unsigned __int8 *)(v93 + v91);
        v96 = *v10;
        v97 = *(unsigned __int8 *)(v93 + v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v132 = *v11;
            v131 = v11[1];
            if (*(unsigned __int8 *)(v93 + v131) < *(unsigned __int8 *)(v93 + v132))
            {
              *v11 = v131;
              v11[1] = v132;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v157 = *v10;
          if (*(unsigned __int8 *)(v93 + v157) < v95)
          {
            v11[1] = v157;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = v11[1];
        v103 = **a3;
        v104 = *(unsigned __int8 *)(v103 + v99);
        v105 = *v11;
        v106 = *(unsigned __int8 *)(v103 + v105);
        v107 = *(unsigned __int8 *)(v103 + v101);
        if (v104 >= v106)
        {
          if (v107 < v104)
          {
            *v98 = v101;
            *v100 = v99;
            v108 = v11;
            result = (uint64_t)(v11 + 1);
            if (v107 >= v106)
              goto LABEL_171;
            goto LABEL_169;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v99 = *v11;
            v102 = *v11;
LABEL_169:
            *v108 = v101;
            *(_DWORD *)result = v105;
            goto LABEL_171;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v105;
          result = (uint64_t)(v11 + 2);
          v99 = v105;
          v102 = v105;
          if (v107 < v106)
            goto LABEL_169;
        }
        v99 = v101;
        v102 = v101;
LABEL_171:
        v158 = *v10;
        if (*(unsigned __int8 *)(v103 + v158) < *(unsigned __int8 *)(v103 + v99))
        {
          *v100 = v158;
          *v10 = v102;
          v159 = *v100;
          v160 = *v98;
          v161 = *(unsigned __int8 *)(v103 + v159);
          if (v161 < *(unsigned __int8 *)(v103 + v160))
          {
            v11[1] = v159;
            v11[2] = v160;
            v162 = *v11;
            if (v161 < *(unsigned __int8 *)(v103 + v162))
            {
              *v11 = v159;
              v11[1] = v162;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v119 = (unint64_t)(v13 - 2) >> 1;
              v120 = *a3;
              v121 = v119;
              do
              {
                if (v119 >= v121)
                {
                  v123 = (2 * v121) | 1;
                  v124 = &v11[v123];
                  v125 = *v124;
                  if (2 * v121 + 2 >= v13)
                  {
                    v126 = *v120;
                  }
                  else
                  {
                    v126 = *v120;
                    if (*(unsigned __int8 *)(*v120 + v125) < *(unsigned __int8 *)(*v120 + v124[1]))
                    {
                      LODWORD(v125) = v124[1];
                      ++v124;
                      v123 = 2 * v121 + 2;
                    }
                  }
                  v127 = &v11[v121];
                  v128 = *v127;
                  result = *(unsigned __int8 *)(v126 + v128);
                  if (*(unsigned __int8 *)(v126 + v125) >= result)
                  {
                    do
                    {
                      v129 = v124;
                      *v127 = v125;
                      if (v119 < v123)
                        break;
                      v130 = (2 * v123) | 1;
                      v124 = &v11[v130];
                      v123 = 2 * v123 + 2;
                      v125 = *v124;
                      if (v123 < v13)
                      {
                        if (*(unsigned __int8 *)(v126 + v125) >= *(unsigned __int8 *)(v126 + v124[1]))
                        {
                          v123 = v130;
                        }
                        else
                        {
                          LODWORD(v125) = v124[1];
                          ++v124;
                        }
                      }
                      else
                      {
                        v123 = v130;
                      }
                      v127 = v129;
                    }
                    while (*(unsigned __int8 *)(v126 + v125) >= result);
                    *v129 = v128;
                  }
                }
                v122 = v121-- <= 0;
              }
              while (!v122);
              v139 = (unint64_t)v12 >> 2;
              do
              {
                v140 = 0;
                v141 = *v11;
                v142 = *a3;
                v143 = v11;
                do
                {
                  v146 = &v143[v140];
                  v147 = v146[1];
                  v145 = v146 + 1;
                  v144 = v147;
                  v148 = (2 * v140) | 1;
                  v140 = 2 * v140 + 2;
                  if (v140 < v139)
                  {
                    result = v145[1];
                    if (*(unsigned __int8 *)(*v142 + v144) >= *(unsigned __int8 *)(*v142 + result))
                    {
                      v140 = v148;
                    }
                    else
                    {
                      LODWORD(v144) = v145[1];
                      ++v145;
                    }
                  }
                  else
                  {
                    v140 = v148;
                  }
                  *v143 = v144;
                  v143 = v145;
                }
                while (v140 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
                if (v145 == --a2)
                {
                  *v145 = v141;
                }
                else
                {
                  *v145 = *a2;
                  *a2 = v141;
                  v149 = (char *)v145 - (char *)v11 + 4;
                  if (v149 >= 5)
                  {
                    v150 = (((unint64_t)v149 >> 2) - 2) >> 1;
                    v151 = &v11[v150];
                    v152 = *v151;
                    v153 = *v145;
                    v154 = *v142;
                    v155 = *(unsigned __int8 *)(v154 + v153);
                    if (*(unsigned __int8 *)(v154 + v152) < v155)
                    {
                      do
                      {
                        v156 = v151;
                        *v145 = v152;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v11[v150];
                        v152 = *v151;
                        v145 = v156;
                      }
                      while (*(unsigned __int8 *)(v154 + v152) < v155);
                      *v156 = v153;
                    }
                  }
                }
                v122 = v139-- <= 2;
              }
              while (!v122);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(unsigned __int8 *)(v16 + v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(unsigned __int8 *)(v16 + v19);
            v22 = *(unsigned __int8 *)(v16 + v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(unsigned __int8 *)(v16 + v27) < *(unsigned __int8 *)(v16 + v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(unsigned __int8 *)(v16 + v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(unsigned __int8 *)(v16 + v35);
            v38 = *(unsigned __int8 *)(v16 + v36);
            v39 = *(a2 - 2);
            v40 = *(unsigned __int8 *)(v16 + v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(unsigned __int8 *)(v16 + v41) < *(unsigned __int8 *)(v16 + v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(unsigned __int8 *)(v16 + v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(unsigned __int8 *)(v16 + v48);
            v51 = *(unsigned __int8 *)(v16 + v49);
            v52 = *(a2 - 3);
            v53 = *(unsigned __int8 *)(v16 + v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(unsigned __int8 *)(v16 + v54) < *(unsigned __int8 *)(v16 + v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(unsigned __int8 *)(v16 + v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(unsigned __int8 *)(v16 + v57);
            v60 = *(unsigned __int8 *)(v16 + v58);
            v61 = *v46;
            v62 = *(unsigned __int8 *)(v16 + v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(unsigned __int8 *)(v16 + v23);
          v26 = *(unsigned __int8 *)(v16 + v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(unsigned __int8 *)(v16 + v29) < *(unsigned __int8 *)(v16 + v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(unsigned __int8 *)(v16 + v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(unsigned __int8 *)(v16 + v64);
            if (*(unsigned __int8 *)(v16 + *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(unsigned __int8 *)(v16 + *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(unsigned __int8 *)(v16 + *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(unsigned __int8 *)(v16 + v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(unsigned __int8 *)(v16 + v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(unsigned __int8 *)(v16 + v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(unsigned __int8 *)(v16 + v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(unsigned __int8 *)(v16 + v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(unsigned __int8 *)(v16 + v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(unsigned __int8 *)(v16 + v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(unsigned __int8 *)(v16 + v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(unsigned __int8 *)(v16 + v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(unsigned __int8 *)(v16 + v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v109 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v110 = **a3;
              v111 = 4;
              v112 = v11;
              do
              {
                v115 = *v112;
                v114 = v112[1];
                v112 = v109;
                v116 = *(unsigned __int8 *)(v110 + v114);
                if (v116 < *(unsigned __int8 *)(v110 + v115))
                {
                  v117 = v111;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v117) = v115;
                    v118 = v117 - 4;
                    if (v117 == 4)
                    {
                      v113 = v11;
                      goto LABEL_110;
                    }
                    v115 = *(unsigned int *)((char *)v11 + v117 - 8);
                    v117 -= 4;
                  }
                  while (v116 < *(unsigned __int8 *)(v110 + v115));
                  v113 = (unsigned int *)((char *)v11 + v118);
LABEL_110:
                  *v113 = v114;
                }
                v109 = v112 + 1;
                v111 += 4;
              }
              while (v112 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v133 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v134 = **a3;
            do
            {
              v136 = *v9;
              v135 = v9[1];
              v9 = v133;
              v137 = *(unsigned __int8 *)(v134 + v135);
              if (v137 < *(unsigned __int8 *)(v134 + v136))
              {
                v138 = v9;
                do
                {
                  *v138 = v136;
                  v136 = *(v138 - 2);
                  --v138;
                }
                while (v137 < *(unsigned __int8 *)(v134 + v136));
                *v138 = v135;
              }
              v133 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int8 **)a1, *a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = v3;
    v7[8] = 0;
    v8 = 0;
    geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,gss::StylePropertySetInternObject> const*>(a1, (uint64_t)v7, (uint64_t)&v9);
    v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    v5 = v4;
  }
  return *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) + 16 * v5;
}

uint64_t geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::ScenePropertyID const,gss::StylePropertySetInternObject> const*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **v3;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int8 v7;
  __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int8 *v11;
  uint64_t v12;

  if (a2 != a3)
  {
    v3 = (unsigned __int8 **)result;
    if (!*(_BYTE *)(result + 14))
    {
      v5 = a2;
      v6 = *(_WORD *)(result + 10);
      do
      {
        v7 = *(_BYTE *)v5;
        result = geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex(v3, *(_BYTE *)v5);
        if ((_DWORD)result == v6)
        {
          if (*((unsigned __int16 *)v3 + 6) == v6)
          {
            if (v6 == 0xFFFF)
              return result;
            if (2 * (v6 & 0x7FFFu) <= 4)
              v8 = 4;
            else
              v8 = 2 * (v6 & 0x7FFF);
            v9 = gss::Allocator::instance((gss::Allocator *)result);
            v10 = (v8 & 0xFFF8) + 8;
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, (unsigned __int16)(v10 + 16 * v8), 1);
            v11 = (unsigned __int8 *)result;
            if (*v3)
            {
              if (*((_WORD *)v3 + 5))
              {
                result = (uint64_t)memmove((void *)result, *v3, *((unsigned __int16 *)v3 + 5));
                if (*((_WORD *)v3 + 5))
                  result = (uint64_t)memmove(&v11[v10], &(*v3)[*((unsigned __int16 *)v3 + 4)], 16 * *((unsigned __int16 *)v3 + 5));
              }
              v12 = gss::Allocator::instance((gss::Allocator *)result);
              result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD))(*(_QWORD *)v12 + 40))(v12, *v3, *((unsigned __int16 *)v3 + 6));
            }
            *((_WORD *)v3 + 6) = v8;
            *v3 = v11;
            *((_WORD *)v3 + 4) = v10;
            v7 = *(_BYTE *)v5;
            v6 = *((_WORD *)v3 + 5);
          }
          else
          {
            v11 = *v3;
            v10 = *((_WORD *)v3 + 4);
          }
          v11[v6] = v7;
          *(_OWORD *)&v11[16 * v6 + v10] = *(_OWORD *)(v5 + 8);
          v6 = *((_WORD *)v3 + 5) + 1;
          *((_WORD *)v3 + 5) = v6;
          *((_BYTE *)v3 + 15) = 0;
        }
        v5 += 24;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D5C80;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D5C38;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &unk_1E42D5CC8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D5D58;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D5D10;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D5DA0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

int *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(int *result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;

  if (!result)
    goto LABEL_25;
  v4 = a3 >= 0x17 ? 23 : a3;
  v5 = *((unsigned __int8 *)result + v4 + 16);
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)result + 80 * v5;
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_25;
  v9 = *(unsigned __int8 **)v7;
  if (!*(_BYTE *)(v7 + 15))
  {
    v12 = *(unsigned __int16 *)(v7 + 10);
    v13 = *(unsigned __int8 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      if (!--v12)
      {
        LOWORD(v13) = (_WORD)v9 + v8;
        break;
      }
    }
LABEL_24:
    if ((_DWORD)v8 != (unsigned __int16)((_WORD)v13 - (_WORD)v9))
      goto LABEL_32;
LABEL_25:
    if (a4)
      *a4 = 0;
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,int>(a2);
  }
  if (v8 >= 0x1E)
  {
    v13 = *(unsigned __int8 **)v7;
    v14 = v8;
    do
    {
      v15 = v14 >> 1;
      v16 = &v13[v14 >> 1];
      v18 = *v16;
      v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 < a2)
        v13 = v17;
      else
        v14 = v15;
    }
    while (v14);
    if (v13 == &v9[v8] || *v13 != a2)
      goto LABEL_25;
    goto LABEL_24;
  }
  v10 = 0;
  while (1)
  {
    v11 = v9[v10];
    if (v11 >= a2)
      break;
    if (v8 == ++v10)
      goto LABEL_25;
  }
  if (v11 == a2)
    v19 = v10;
  else
    v19 = v8;
  if ((_DWORD)v8 == v19)
    goto LABEL_25;
LABEL_32:
  v20 = v6 + 80 * v5;
  v21 = (unsigned __int8 *)*(unsigned __int16 *)(v20 + 42);
  if (!*(_WORD *)(v20 + 42))
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v22 = v6 + 80 * v5;
  v23 = *(_QWORD *)(v22 + 32);
  if (*(_BYTE *)(v22 + 47))
  {
    if (v21 < 0x1E)
    {
      v24 = 0;
      result = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v25 = v24[v23];
        if (v25 >= a2)
          break;
        if (v21 == ++v24)
          return result;
      }
      if (v25 != a2)
        LOWORD(v24) = (_WORD)v21;
      if ((_DWORD)v21 != (unsigned __int16)v24)
        goto LABEL_55;
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    v24 = *(unsigned __int8 **)(v22 + 32);
    v27 = v21;
    do
    {
      v28 = (unsigned __int8 *)((unint64_t)v27 >> 1);
      v29 = &v24[(unint64_t)v27 >> 1];
      v31 = *v29;
      v30 = v29 + 1;
      v27 += ~((unint64_t)v27 >> 1);
      if (v31 < a2)
        v24 = v30;
      else
        v27 = v28;
    }
    while (v27);
    if (v24 == &v21[v23] || *v24 != a2)
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v26 = v21;
    v24 = *(unsigned __int8 **)(v22 + 32);
    while (*v24 != a2)
    {
      ++v24;
      if (!--v26)
      {
        LOWORD(v24) = v23 + (_WORD)v21;
        break;
      }
    }
  }
  LOWORD(v24) = (_WORD)v24 - v23;
  if ((_DWORD)v21 == (unsigned __int16)v24)
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_55:
  if (v21 > (unsigned __int16)v24)
    return (int *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 40) + 4 * (unsigned __int16)v24);
  return result;
}

void __destroy_helper_block_8_40c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void grl::codec::IconConfigPack::iconForKey(grl::codec::IconConfigPack *this@<X0>, const grl::IconKey *a2@<X1>, grl::IconKey *a3@<X2>, uint64_t *a4@<X8>)
{
  int v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unsigned __int8 v61[2];
  int v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void (**v65)(grl::IconKey *__hidden);
  __int128 v66;
  char v67;

  v8 = *((_DWORD *)a2 + 5);
  v9 = (char *)a2 + 8;
  LOBYTE(v65) = *((_BYTE *)a2 + 24);
  *(_DWORD *)((char *)&v65 + 2) = v8;
  grl::codec::IconConfigPack::decodeIconDataIfNeeded(&v59, (uint64_t)this, (unsigned __int8 *)&v65);
  v10 = v59;
  if (v59)
  {
    v11 = std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::find<grl::IconKey>(v59, (uint64_t)a2);
    if ((_QWORD *)(v10 + 8) != v11)
    {
      if (a3)
      {
        v12 = *(_OWORD *)v9;
        *((_BYTE *)a3 + 24) = v9[16];
        *(_OWORD *)((char *)a3 + 8) = v12;
      }
      v13 = v11[9];
      *a4 = v11[8];
      a4[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      goto LABEL_63;
    }
  }
  v65 = &off_1E42C2848;
  v66 = *(_OWORD *)v9;
  v67 = v9[16];
  v16 = v67;
  if (v67)
  {
    while (1)
    {
      v67 = v16 - 1;
      v17 = (WORD6(v66)
           - 0x61C8864680B583EBLL
           + ((DWORD2(v66) - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)DWORD2(v66) - 0x61C8864680B583EBLL) >> 2)) ^ (DWORD2(v66) - 0x61C8864680B583EBLL);
      v18 = (HIWORD(v66) - 0x61C8864680B583EBLL + (v17 << 6) + (v17 >> 2)) ^ v17;
      *(_QWORD *)&v66 = ((v16 - 1) - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
      v61[0] = v16 - 1;
      v62 = HIDWORD(v66);
      grl::codec::IconConfigPack::decodeIconDataIfNeeded(&v63, (uint64_t)this, v61);
      v19 = v63;
      if (v63)
      {
        v20 = std::__tree<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::__map_value_compare<grl::IconKey,std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,std::less<grl::IconKey>,true>,geo::StdAllocator<std::__value_type<grl::IconKey,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>::find<grl::IconKey>(v63, (uint64_t)&v65);
        if ((_QWORD *)(v19 + 8) != v20)
          break;
      }
      v21 = v64;
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v16 = v67;
      if (!v67)
        goto LABEL_18;
    }
    if (a3)
    {
      v47 = *(_OWORD *)v9;
      *((_BYTE *)a3 + 24) = v9[16];
      *(_OWORD *)((char *)a3 + 8) = v47;
    }
    v48 = v20[8];
    v24 = (std::__shared_weak_count *)v20[9];
    if (v24)
    {
      v49 = (unint64_t *)&v24->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = v64;
    if (v64)
    {
      v52 = (unint64_t *)&v64->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v48)
    {
      *a4 = v48;
      a4[1] = (uint64_t)v24;
      goto LABEL_63;
    }
  }
  else
  {
LABEL_18:
    v24 = 0;
  }
  if (*((_WORD *)a2 + 11))
  {
    v25 = *((unsigned __int16 *)a2 + 10);
    v26 = *((unsigned __int8 *)a2 + 24);
    DWORD2(v66) = *((_DWORD *)a2 + 4);
    HIDWORD(v66) = (unsigned __int16)v25;
    v67 = v26;
    v27 = (v25
         - 0x61C8864680B583EBLL
         + ((DWORD2(v66) - 0x61C8864680B583EBLL) << 6)
         + (((unint64_t)DWORD2(v66) - 0x61C8864680B583EBLL) >> 2)) ^ (DWORD2(v66) - 0x61C8864680B583EBLL);
    v28 = ((v27 << 6) - 0x61C8864680B583EBLL + (v27 >> 2)) ^ v27;
    v65 = &off_1E42C2848;
    *(_QWORD *)&v66 = (v26 - 0x61C8864680B583EBLL + (v28 << 6) + (v28 >> 2)) ^ v28;
    grl::codec::IconConfigPack::iconForKey(&v63, this, (const grl::IconKey *)&v65, a3);
    v30 = v63;
    v29 = v64;
    v63 = 0;
    v64 = 0;
    if (v24)
    {
      v31 = (unint64_t *)&v24->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v33 = v64;
    if (!v64)
      goto LABEL_29;
    v34 = (unint64_t *)&v64->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if (v30)
        goto LABEL_30;
    }
    else
    {
LABEL_29:
      if (v30)
      {
LABEL_30:
        *a4 = v30;
        a4[1] = (uint64_t)v29;
        goto LABEL_63;
      }
    }
  }
  else
  {
    v29 = v24;
  }
  if (*((_WORD *)a2 + 10))
  {
    DWORD2(v66) = *((_DWORD *)a2 + 4);
    v36 = (((DWORD2(v66) - 0x61C8864680B583EBLL) << 6)
         - 0x61C8864680B583EBLL
         + (((unint64_t)DWORD2(v66) - 0x61C8864680B583EBLL) >> 2)) ^ (DWORD2(v66) - 0x61C8864680B583EBLL);
    v37 = *((unsigned __int16 *)a2 + 11);
    v38 = *((unsigned __int8 *)a2 + 24);
    WORD6(v66) = 0;
    HIWORD(v66) = v37;
    v67 = v38;
    v39 = (v37 - 0x61C8864680B583EBLL + (v36 << 6) + (v36 >> 2)) ^ v36;
    v65 = &off_1E42C2848;
    *(_QWORD *)&v66 = (v38 - 0x61C8864680B583EBLL + (v39 << 6) + (v39 >> 2)) ^ v39;
    grl::codec::IconConfigPack::iconForKey(&v63, this, (const grl::IconKey *)&v65, a3);
    v41 = v63;
    v40 = v64;
    v63 = 0;
    v64 = 0;
    if (v29)
    {
      v42 = (unint64_t *)&v29->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v44 = v64;
    if (v64)
    {
      v45 = (unint64_t *)&v64->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v41)
    {
      *a4 = v41;
      a4[1] = (uint64_t)v40;
      goto LABEL_63;
    }
  }
  else
  {
    v40 = v29;
  }
  *a4 = 0;
  a4[1] = 0;
  if (v40)
  {
    v54 = (unint64_t *)&v40->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_63:
  v56 = v60;
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void grl::codec::IconConfigPack::decodeIconDataIfNeeded(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3;
  std::mutex *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  void (**v42)(grl::IconKey *__hidden);
  int v43;
  const char *v44;
  const char *v45;
  char v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t ***v65;
  uint64_t **i;
  unint64_t v67;
  _QWORD *v68;
  float v69;
  float v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  int8x8_t prime;
  void *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint8x8_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void (**v97)(grl::IconKey *__hidden);
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  BOOL v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  grl::Allocator *v111;
  grl::Allocator *v112;
  grl::Allocator *v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t **v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  unint64_t *v129;
  unint64_t v130;
  void (**v131)(grl::IconKey *__hidden);
  std::mutex *v132;
  char v133;
  char v134;
  unsigned int v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  char *v139;
  std::__shared_weak_count *v140;
  void (**v141)(grl::IconKey *__hidden);
  __int128 v142;
  unsigned __int8 v143;
  uint64_t v144[2];
  uint64_t v145[2];
  void (**v146)(grl::IconKey *__hidden);
  __int128 v147;
  unint64_t v148;
  size_t v149[2];

  v7 = (std::mutex *)(a2 + 232);
  std::mutex::lock((std::mutex *)(a2 + 232));
  v8 = a2 + 120;
  v9 = (void **)(a2 + 80);
  v10 = geo::LRUPolicy<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>,grl::codec::IconConfigPack::IconLocationIndexHash>::get(a2 + 120, (_QWORD *)(a2 + 80), a3);
  if (a2 + 120 != v10)
  {
    v11 = (unsigned int *)(a2 + 144);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    *a1 = *(_QWORD *)(v10 + 24);
    v13 = *(_QWORD *)(v10 + 32);
    a1[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    goto LABEL_154;
  }
  v16 = (unsigned int *)(a2 + 148);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *a1 = 0;
  a1[1] = 0;
  v18 = *(_QWORD *)(a2 + 48);
  if (v18)
  {
    v19 = *a3;
    v20 = *((unsigned __int16 *)a3 + 2);
    v21 = a2 + 48;
    v22 = *((unsigned __int16 *)a3 + 1);
    do
    {
      v23 = *(unsigned __int8 *)(v18 + 28);
      v24 = v23 >= v19;
      if (v23 == v19)
      {
        v25 = *(unsigned __int16 *)(v18 + 32);
        v24 = v25 >= v20;
        if (v25 == v20)
          v24 = *(unsigned __int16 *)(v18 + 30) >= v22;
      }
      v26 = !v24;
      v27 = v26 == 0;
      if (v26)
        v28 = (uint64_t *)(v18 + 8);
      else
        v28 = (uint64_t *)v18;
      if (v27)
        v21 = v18;
      v18 = *v28;
    }
    while (*v28);
    if (a2 + 48 != v21)
    {
      v29 = *(unsigned __int8 *)(v21 + 28);
      v30 = v19 >= v29;
      if (v19 == v29)
      {
        v31 = *(unsigned __int16 *)(v21 + 32);
        v30 = v20 >= v31;
        if (v20 == v31)
          v30 = v22 >= *(unsigned __int16 *)(v21 + 30);
      }
      if (v30)
      {
        v148 = 0;
        v149[0] = 0;
        v146 = 0;
        v147 = 0uLL;
        v32 = *(std::__shared_weak_count **)(a2 + 176);
        v145[0] = *(_QWORD *)(a2 + 168);
        v145[1] = (uint64_t)v32;
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
        }
        v141 = (void (**)(grl::IconKey *__hidden))(*(_QWORD *)(a2 + 184) + *(unsigned int *)(v21 + 36) + 16);
        v3 = grl::codec::ResourcePack::decodeChapterSize(a2, v145, (uint64_t)&v141, v149, &v148);
        if (v32)
        {
          v35 = (unint64_t *)&v32->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if ((v3 & 1) == 0)
        {
          v43 = 314;
          v44 = "decodeChapterSize(_packStream, _packStreamIconDataStart + locationIter->second + sizeSkip, rawSize, compressedSize)";
          v45 = "Failed to read Icon Data Chapter Size";
          goto LABEL_55;
        }
        v37 = *(std::__shared_weak_count **)(a2 + 176);
        v144[0] = *(_QWORD *)(a2 + 168);
        v144[1] = (uint64_t)v37;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v141 = (void (**)(grl::IconKey *__hidden))(*(_QWORD *)(a2 + 184) + *(unsigned int *)(v21 + 36) + 32);
        v3 = grl::codec::ResourcePack::decodePackChunk(a2, v144, (uint64_t)&v141, v148, (unint64_t *)&v146);
        if (v37)
        {
          v40 = (unint64_t *)&v37->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        if ((v3 & 1) == 0)
        {
          v43 = 315;
          v44 = "decodePackChunk(_packStream, _packStreamIconDataStart + locationIter->second + (sizeSkip * 2), compresse"
                "dSize, chapterData)";
          v45 = "Failed to read compressed Icon Data Chapter";
          goto LABEL_55;
        }
        grl::codec::ResourcePack::decompressData((uint64_t)&v146, v149[0], (unint64_t *)&v141);
        if (v146)
        {
          *(_QWORD *)&v147 = v146;
          operator delete(v146);
        }
        v42 = v141;
        v146 = v141;
        v147 = v142;
        v3 = v142 - (_QWORD)v141;
        if ((_QWORD)v142 - (_QWORD)v141 <= 3uLL)
        {
          v43 = 321;
          v44 = "numberOfIcons.has_value()";
          v45 = "Number of Icons could not be read";
LABEL_55:
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v45, v44, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconConfigPack.cpp", v43);
          v46 = 0;
          goto LABEL_56;
        }
        v135 = *(_DWORD *)v141;
        v97 = (void (**)(grl::IconKey *__hidden))operator new(0x38uLL);
        v97[1] = 0;
        v97[2] = 0;
        *v97 = (void (*)(grl::IconKey *__hidden))&off_1E42E6680;
        v97[4] = 0;
        v97[5] = (void (*)(grl::IconKey *__hidden))grl::Allocator::instance((grl::Allocator *)v97);
        v97[6] = 0;
        v97[3] = (void (*)(grl::IconKey *__hidden))(v97 + 4);
        v141 = v97 + 3;
        *(_QWORD *)&v142 = v97;
        std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)a1, (__int128 *)&v141);
        v98 = (std::__shared_weak_count *)v142;
        if ((_QWORD)v142)
        {
          v99 = (unint64_t *)(v142 + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        if (!v135)
        {
          v46 = 1;
          goto LABEL_56;
        }
        v101 = 0;
        v102 = 0;
        v130 = v3;
        v103 = 4;
        v131 = v42;
        v132 = v7;
LABEL_162:
        v104 = v103 + 4;
        if (v103 + 4 > v3)
        {
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Icon Key Size could not be read", "iconKeySize.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconConfigPack.cpp", 325);
          v46 = v101;
          goto LABEL_56;
        }
        v138 = v102;
        v134 = v101;
        v105 = *(unsigned int *)((char *)v42 + v103);
        v141 = &off_1E42C2848;
        v142 = 0uLL;
        v143 = 4;
        v106 = grl::IconKey::decode((grl::IconKey *)&v141, (const unsigned __int8 *)v42 + v104, v105, *(unsigned __int16 *)(a2 + 192));
        v107 = v104 + v105;
        if (v104 + v105 >= v3)
          v107 = v3;
        v108 = v107 + 4;
        if (v107 + 4 > v3)
        {
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Icon Data Size could not be read", "iconDataSize.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconConfigPack.cpp", 332);
LABEL_216:
          v46 = v134;
          goto LABEL_56;
        }
        v109 = *(unsigned int *)((char *)v42 + v107);
        if ((v106 & 1) == 0)
          goto LABEL_200;
        v136 = v109;
        v137 = v108;
        v110 = (char *)operator new(0x100uLL);
        *((_QWORD *)v110 + 1) = 0;
        *((_QWORD *)v110 + 2) = 0;
        *(_QWORD *)v110 = &off_1E42E5880;
        *(_OWORD *)(v110 + 40) = 0u;
        *(_OWORD *)(v110 + 56) = 0u;
        *(_OWORD *)(v110 + 72) = 0u;
        *(_OWORD *)(v110 + 88) = 0u;
        *(_OWORD *)(v110 + 104) = 0u;
        *(_OWORD *)(v110 + 136) = 0u;
        *(_OWORD *)(v110 + 168) = 0u;
        *(_OWORD *)(v110 + 200) = 0u;
        *(_OWORD *)(v110 + 216) = 0u;
        *(_OWORD *)(v110 + 232) = 0u;
        *((_QWORD *)v110 + 31) = 0;
        *(_OWORD *)(v110 + 184) = 0u;
        *(_OWORD *)(v110 + 152) = 0u;
        *(_OWORD *)(v110 + 120) = 0u;
        *(_OWORD *)(v110 + 24) = 0u;
        v111 = (grl::Allocator *)grl::Allocator::instance((grl::Allocator *)v110);
        *((_QWORD *)v110 + 5) = v111;
        *((_QWORD *)v110 + 6) = 0;
        *((_QWORD *)v110 + 3) = v110 + 32;
        v110[56] = 0;
        *((_QWORD *)v110 + 15) = 0;
        v112 = (grl::Allocator *)grl::Allocator::instance(v111);
        *((_QWORD *)v110 + 16) = v112;
        *((_QWORD *)v110 + 17) = 0;
        *((_QWORD *)v110 + 14) = v110 + 120;
        *((_QWORD *)v110 + 19) = 0;
        v113 = (grl::Allocator *)grl::Allocator::instance(v112);
        *((_QWORD *)v110 + 20) = v113;
        *((_QWORD *)v110 + 21) = 0;
        *((_QWORD *)v110 + 18) = v110 + 152;
        *((_QWORD *)v110 + 23) = 0;
        *((_QWORD *)v110 + 24) = grl::Allocator::instance(v113);
        *((_QWORD *)v110 + 25) = 0;
        *((_QWORD *)v110 + 22) = v110 + 184;
        v42 = v131;
        v110[208] = 0;
        v139 = v110 + 24;
        v140 = (std::__shared_weak_count *)v110;
        v133 = grl::codec::IconData::decode((uint64_t **)v110 + 3, (_BYTE *)v131 + v137, v136, a2 + 200);
        if ((v133 & 1) == 0)
        {
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Icon Data could not be decoded", "iconData->decode(stream.currentByte(), iconDataSize.value(), context.propertyContext)", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconConfigPack.cpp", 337);
          v7 = v132;
          goto LABEL_194;
        }
        v114 = (uint64_t **)*a1;
        v116 = (uint64_t **)(*a1 + 8);
        v115 = *v116;
        if (!*v116)
        {
          v117 = *a1 + 8;
          goto LABEL_190;
        }
        v7 = v132;
        while (1)
        {
          while (1)
          {
            v117 = (uint64_t)v115;
            v118 = *((_DWORD *)v115 + 12);
            if (DWORD2(v142) == v118)
              break;
            if (DWORD2(v142) >= v118)
            {
              if (v118 >= DWORD2(v142))
                goto LABEL_193;
              goto LABEL_186;
            }
LABEL_183:
            v115 = *(uint64_t **)v117;
            v116 = (uint64_t **)v117;
            if (!*(_QWORD *)v117)
              goto LABEL_190;
          }
          v119 = *(unsigned __int16 *)(v117 + 52);
          if (WORD6(v142) != v119)
          {
            if (WORD6(v142) >= v119)
            {
              if (v119 >= WORD6(v142))
                goto LABEL_193;
              goto LABEL_186;
            }
            goto LABEL_183;
          }
          v120 = *(unsigned __int16 *)(v117 + 54);
          if (HIWORD(v142) != v120)
          {
            if (HIWORD(v142) >= v120)
            {
              if (v120 >= HIWORD(v142))
                goto LABEL_193;
              goto LABEL_186;
            }
            goto LABEL_183;
          }
          v121 = *(unsigned __int8 *)(v117 + 56);
          if (v143 < v121)
            goto LABEL_183;
          if (v121 >= v143)
            goto LABEL_193;
LABEL_186:
          v115 = *(uint64_t **)(v117 + 8);
          if (!v115)
          {
            v116 = (uint64_t **)(v117 + 8);
LABEL_190:
            v122 = v117;
            v117 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114[2] + 16))(v114[2], 80, 8);
            *(_QWORD *)(v117 + 32) = &off_1E42C2848;
            *(_OWORD *)(v117 + 40) = v142;
            *(_BYTE *)(v117 + 56) = v143;
            *(_QWORD *)(v117 + 64) = 0;
            *(_QWORD *)(v117 + 72) = 0;
            *(_QWORD *)v117 = 0;
            *(_QWORD *)(v117 + 8) = 0;
            *(_QWORD *)(v117 + 16) = v122;
            *v116 = (uint64_t *)v117;
            v123 = (uint64_t *)**v114;
            v124 = (uint64_t *)v117;
            if (v123)
            {
              *v114 = v123;
              v124 = *v116;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v114[1], v124);
            v114[3] = (uint64_t *)((char *)v114[3] + 1);
            v7 = v132;
LABEL_193:
            std::shared_ptr<grl::codec::IconData>::operator=[abi:nn180100]((_QWORD *)(v117 + 64), (uint64_t *)&v139);
LABEL_194:
            v3 = v130;
            v125 = v140;
            if (v140)
            {
              v126 = (unint64_t *)&v140->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            v109 = v136;
            v108 = v137;
            if ((v133 & 1) == 0)
              goto LABEL_216;
LABEL_200:
            v103 = v109 + v108;
            if (v103 >= v3)
              v103 = v3;
            v102 = v138 + 1;
            v46 = 1;
            v101 = v138 + 1 >= v135;
            if (v138 + 1 == v135)
            {
LABEL_56:
              if (v146)
              {
                *(_QWORD *)&v147 = v146;
                operator delete(v146);
              }
              if ((v46 & 1) == 0)
              {
                v47 = (std::__shared_weak_count *)a1[1];
                *a1 = 0;
                a1[1] = 0;
                if (v47)
                {
                  v48 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
              }
              break;
            }
            goto LABEL_162;
          }
        }
      }
    }
  }
  v50 = geo::LRUPolicy<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>,grl::codec::IconConfigPack::IconLocationIndexHash>::get(a2 + 120, (_QWORD *)(a2 + 80), a3);
  if (v8 == v50)
  {
    v51 = std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::find<grl::codec::IconConfigPack::IconLocationIndex>((_QWORD *)(a2 + 80), a3);
    if (v51)
    {
      v52 = (uint64_t *)v51;
      v3 = (unint64_t)v51[3];
      v53 = *(_QWORD *)v3;
      *(_QWORD *)(v53 + 8) = *(_QWORD *)(v3 + 8);
      **(_QWORD **)(v3 + 8) = v53;
      --*(_QWORD *)(a2 + 136);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3 + 24);
      operator delete((void *)v3);
      std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase((_QWORD *)(a2 + 80), v52);
    }
    v54 = operator new(0x28uLL);
    v54[4] = *(_DWORD *)a3;
    v55 = *((unsigned __int16 *)a3 + 2);
    *((_WORD *)v54 + 10) = v55;
    *((_QWORD *)v54 + 3) = 0;
    *((_QWORD *)v54 + 4) = 0;
    v56 = *(_QWORD **)(a2 + 128);
    *(_QWORD *)v54 = v8;
    *((_QWORD *)v54 + 1) = v56;
    *v56 = v54;
    v57 = *(_QWORD *)(a2 + 136) + 1;
    *(_QWORD *)(a2 + 128) = v54;
    *(_QWORD *)(a2 + 136) = v57;
    v58 = *a3;
    v59 = *((unsigned __int16 *)a3 + 1);
    v60 = (v59
         + ((v58 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v58 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v58 - 0x61C8864680B583EBLL);
    v61 = v55 + (v60 << 6) + (v60 >> 2);
    v62 = (v61 - 0x61C8864680B583EBLL) ^ v60;
    v63 = *(_QWORD *)(a2 + 88);
    if (v63)
    {
      v64 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
      v64.i16[0] = vaddlv_u8(v64);
      if (v64.u32[0] > 1uLL)
      {
        v3 = (v61 - 0x61C8864680B583EBLL) ^ v60;
        if (v62 >= v63)
          v3 = v62 % v63;
      }
      else
      {
        v3 = v62 & (v63 - 1);
      }
      v65 = (uint64_t ***)*((_QWORD *)*v9 + v3);
      if (v65)
      {
        for (i = *v65; i; i = (uint64_t **)*i)
        {
          v67 = (unint64_t)i[1];
          if (v67 == v62)
          {
            if (*((unsigned __int8 *)i + 16) == (_DWORD)v58
              && __PAIR64__(*((unsigned __int16 *)i + 10), *((unsigned __int16 *)i + 9)) == __PAIR64__(v55, v59))
            {
              v129 = (unint64_t *)(a2 + 72);
              goto LABEL_143;
            }
          }
          else
          {
            if (v64.u32[0] > 1uLL)
            {
              if (v67 >= v63)
                v67 %= v63;
            }
            else
            {
              v67 &= v63 - 1;
            }
            if (v67 != v3)
              break;
          }
        }
      }
    }
    v68 = operator new(0x20uLL);
    *v68 = 0;
    v68[1] = v62;
    *((_DWORD *)v68 + 4) = *(_DWORD *)a3;
    *((_WORD *)v68 + 10) = *((_WORD *)a3 + 2);
    v68[3] = v54;
    v69 = (float)(unint64_t)(*(_QWORD *)(a2 + 104) + 1);
    v70 = *(float *)(a2 + 112);
    if (v63 && (float)(v70 * (float)v63) >= v69)
    {
      v129 = (unint64_t *)(a2 + 72);
      goto LABEL_133;
    }
    v71 = 1;
    if (v63 >= 3)
      v71 = (v63 & (v63 - 1)) != 0;
    v72 = v71 | (2 * v63);
    v73 = vcvtps_u32_f32(v69 / v70);
    if (v72 <= v73)
      prime = (int8x8_t)v73;
    else
      prime = (int8x8_t)v72;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v63 = *(_QWORD *)(a2 + 88);
    }
    if (*(_QWORD *)&prime > v63)
    {
LABEL_98:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v75 = operator new(8 * *(_QWORD *)&prime);
      v76 = *v9;
      *v9 = v75;
      if (v76)
        operator delete(v76);
      v77 = 0;
      *(int8x8_t *)(a2 + 88) = prime;
      do
        *((_QWORD *)*v9 + v77++) = 0;
      while (*(_QWORD *)&prime != v77);
      v78 = *(_QWORD **)(a2 + 96);
      if (v78)
      {
        v79 = v78[1];
        v80 = (uint8x8_t)vcnt_s8(prime);
        v80.i16[0] = vaddlv_u8(v80);
        if (v80.u32[0] > 1uLL)
        {
          if (v79 >= *(_QWORD *)&prime)
            v79 %= *(_QWORD *)&prime;
        }
        else
        {
          v79 &= *(_QWORD *)&prime - 1;
        }
        *((_QWORD *)*v9 + v79) = a2 + 96;
        v84 = (_QWORD *)*v78;
        if (*v78)
        {
          do
          {
            v85 = v84[1];
            if (v80.u32[0] > 1uLL)
            {
              if (v85 >= *(_QWORD *)&prime)
                v85 %= *(_QWORD *)&prime;
            }
            else
            {
              v85 &= *(_QWORD *)&prime - 1;
            }
            if (v85 != v79)
            {
              if (!*((_QWORD *)*v9 + v85))
              {
                *((_QWORD *)*v9 + v85) = v78;
                goto LABEL_123;
              }
              *v78 = *v84;
              *v84 = **((_QWORD **)*v9 + v85);
              **((_QWORD **)*v9 + v85) = v84;
              v84 = v78;
            }
            v85 = v79;
LABEL_123:
            v78 = v84;
            v84 = (_QWORD *)*v84;
            v79 = v85;
          }
          while (v84);
        }
      }
      v63 = (unint64_t)prime;
      goto LABEL_127;
    }
    if (*(_QWORD *)&prime < v63)
    {
      v81 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 104) / *(float *)(a2 + 112));
      if (v63 < 3 || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v63), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        v81 = std::__next_prime(v81);
      }
      else
      {
        v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2)
          v81 = v83;
      }
      if (*(_QWORD *)&prime <= v81)
        prime = (int8x8_t)v81;
      if (*(_QWORD *)&prime < v63)
      {
        if (!*(_QWORD *)&prime)
        {
          v128 = *v9;
          *v9 = 0;
          v129 = (unint64_t *)(a2 + 72);
          if (v128)
            operator delete(v128);
          v63 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          goto LABEL_128;
        }
        goto LABEL_98;
      }
      v63 = *(_QWORD *)(a2 + 88);
    }
LABEL_127:
    v129 = (unint64_t *)(a2 + 72);
LABEL_128:
    if ((v63 & (v63 - 1)) != 0)
    {
      if (v62 >= v63)
        v3 = v62 % v63;
      else
        v3 = v62;
    }
    else
    {
      v3 = (v63 - 1) & v62;
    }
LABEL_133:
    v86 = *v9;
    v87 = (_QWORD *)*((_QWORD *)*v9 + v3);
    if (v87)
    {
      *v68 = *v87;
    }
    else
    {
      v88 = *(_QWORD *)(a2 + 96);
      *v68 = v88;
      *(_QWORD *)(a2 + 96) = v68;
      v86[v3] = a2 + 96;
      if (!v88)
        goto LABEL_142;
      v89 = *(_QWORD *)(v88 + 8);
      if ((v63 & (v63 - 1)) != 0)
      {
        if (v89 >= v63)
          v89 %= v63;
      }
      else
      {
        v89 &= v63 - 1;
      }
      v87 = (char *)*v9 + 8 * v89;
    }
    *v87 = v68;
LABEL_142:
    ++*(_QWORD *)(a2 + 104);
    v57 = *(_QWORD *)(a2 + 136);
LABEL_143:
    if (v57 > *v129)
    {
      do
        geo::Cache<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>,grl::codec::IconConfigPack::IconLocationIndexHash,geo::LRUPolicy>::_pop((uint64_t)v129);
      while (*(_QWORD *)(a2 + 136) > *(_QWORD *)(a2 + 72));
    }
    v50 = *(_QWORD *)(a2 + 128);
  }
  v91 = (uint64_t **)*a1;
  v90 = a1[1];
  if (v90)
  {
    v92 = (unint64_t *)(v90 + 8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v94 = *(std::__shared_weak_count **)(v50 + 32);
  *(_QWORD *)(v50 + 24) = v91;
  *(_QWORD *)(v50 + 32) = v90;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
LABEL_154:
  std::mutex::unlock(v7);
}

uint64_t grl::IconKey::decode(grl::IconKey *this, const unsigned __int8 *a2, unint64_t a3, unsigned int a4)
{
  int v4;
  const char *v5;
  const char *v6;
  __int16 v7;
  unint64_t v8;
  unsigned int v10;

  if (a3 < 4)
  {
    v4 = 82;
    v5 = "id.has_value()";
    v6 = "ID could not be read";
LABEL_12:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v6, v5, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconKey.cpp", v4);
    return 0;
  }
  *((_DWORD *)this + 4) = *(_DWORD *)a2;
  if (a4 < 3)
  {
    v7 = 0;
    v8 = 6;
  }
  else
  {
    if (a3 < 6)
    {
      v4 = 87;
      v5 = "dataVariant.has_value()";
      v6 = "Data Variant could not be read";
      goto LABEL_12;
    }
    v7 = *((_WORD *)a2 + 2);
    v8 = 8;
  }
  *((_WORD *)this + 10) = v7;
  if (v8 > a3)
  {
    v4 = 94;
    v5 = "variant.has_value()";
    v6 = "Variant could not be read";
    goto LABEL_12;
  }
  *((_WORD *)this + 11) = *(_WORD *)&a2[v8 - 2];
  if ((v8 | 1) > a3)
  {
    v4 = 98;
    v5 = "sizeGroupRaw.has_value()";
    v6 = "Size Group could not be read";
    goto LABEL_12;
  }
  v10 = a2[v8];
  if (v10 <= 9)
  {
    *((_BYTE *)this + 24) = v10;
    return 1;
  }
  return 0;
}

uint64_t grl::codec::IconData::decode(uint64_t **a1, _BYTE *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  unsigned int v12;
  int v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  int v34;
  unsigned int v35;
  void *v36;
  uint64_t *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  int v63;
  uint64_t *v64;
  uint64_t result;
  int v66;
  const char *v67;
  const char *v68;
  _DWORD *v69;
  uint64_t **v70;
  uint64_t **v72;
  unsigned int v73;
  unsigned int v74;
  _BYTE *v75;
  __int128 v76;
  uint64_t *v77;
  uint64_t *v78;
  char v79;
  int v80;
  int v81;
  __int16 v82;
  char v83;
  __int128 v84;
  uint64_t *v85;
  char v86[2];
  __int16 v87;

  if (!a3)
  {
    v24 = 88;
    v25 = "imageCount.has_value()";
    v26 = "Icon Image Count could not be read";
    goto LABEL_98;
  }
  v4 = a3;
  v5 = a2;
  v6 = a1;
  v75 = a2 - 4;
  v73 = *a2;
  if (*a2)
  {
    v7 = 0;
    v72 = a1 + 1;
    v8 = 1;
    while (v8 + 2 <= v4)
    {
      v9 = v8 + 6;
      if (v8 + 6 > v4)
      {
        v24 = 95;
        v25 = "imageID.has_value()";
        v26 = "Image ID could not be read";
        goto LABEL_98;
      }
      if (v8 + 10 > v4)
      {
        v24 = 97;
        v25 = "imageSizeX.has_value()";
        v26 = "Image Size X could not be read";
        goto LABEL_98;
      }
      v10 = v8 + 14;
      if (v8 + 14 > v4)
      {
        v24 = 99;
        v25 = "imageSizeY.has_value()";
        v26 = "Image Size Y could not be read";
        goto LABEL_98;
      }
      v11 = v6;
      v12 = *(unsigned __int16 *)&v5[v8];
      v13 = *(_DWORD *)&v75[v9];
      v14 = v72;
      v15 = (uint64_t)v72;
      v16 = *(_QWORD *)&v5[v9];
      v17 = (uint64_t)*v72;
      if (*v72)
      {
        while (1)
        {
          while (1)
          {
            v15 = v17;
            v18 = *(unsigned __int16 *)(v17 + 28);
            if (v18 <= v12)
              break;
            v17 = *(_QWORD *)v15;
            v14 = (uint64_t **)v15;
            if (!*(_QWORD *)v15)
              goto LABEL_15;
          }
          if (v18 >= v12)
            break;
          v17 = *(_QWORD *)(v15 + 8);
          if (!v17)
          {
            v14 = (uint64_t **)(v15 + 8);
            goto LABEL_15;
          }
        }
        v6 = v11;
      }
      else
      {
LABEL_15:
        v19 = v4;
        v20 = v5;
        v21 = v15;
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11[2] + 16))(v11[2], 48, 8);
        *(_WORD *)(v15 + 28) = v12;
        v6 = v11;
        *(_QWORD *)(v15 + 32) = 0;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = v21;
        *v14 = (uint64_t *)v15;
        v22 = (uint64_t *)**v11;
        v23 = (uint64_t *)v15;
        if (v22)
        {
          *v11 = v22;
          v23 = *v14;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v11[1], v23);
        v11[3] = (uint64_t *)((char *)v11[3] + 1);
        v5 = v20;
        v4 = v19;
      }
      *(_DWORD *)(v15 + 32) = v13;
      *(_QWORD *)(v15 + 36) = v16;
      ++v7;
      v8 = v10;
      if (v7 >= v73)
        goto LABEL_23;
    }
    v24 = 92;
    v25 = "imageLayerIndex.has_value()";
    v26 = "Image Layer Index could not be read";
LABEL_98:
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v26, v25, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconData.cpp", v24);
    return 0;
  }
  v10 = 1;
LABEL_23:
  v27 = v10 + 1;
  if (v10 + 1 > v4)
  {
    v24 = 107;
    v25 = "layerCount.has_value()";
    v26 = "Icon Layer Count could not be read";
    goto LABEL_98;
  }
  v74 = v5[v10];
  if (!v5[v10])
    return 1;
  v28 = 0;
  v70 = v6 + 5;
  v69 = v6 + 10;
  v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconData.cpp";
  v30 = a4;
  while (1)
  {
    if (v27 + 2 > v4)
    {
      v66 = 111;
      v67 = "layerTypeRaw.has_value()";
      v68 = "Layer Type could not be read";
      goto LABEL_104;
    }
    grl::toEnum<grl::LayerType>(*(unsigned __int16 *)&v5[v27], (uint64_t)v86);
    v31 = v27 + 4;
    if (v27 + 4 > v4)
    {
      v66 = 115;
      v67 = "layerIndex.has_value()";
      v68 = "Layer Index could not be read";
      goto LABEL_104;
    }
    v32 = v27 + 8;
    if (v27 + 8 > v4)
      break;
    v33 = *(unsigned int *)&v75[v32];
    v27 = v32 + v33;
    if (v32 + v33 <= v4)
    {
      v35 = *(unsigned __int16 *)&v5[v31 - 2];
      v76 = 0uLL;
      v77 = 0;
      if ((_DWORD)v33)
      {
        std::vector<unsigned char>::__append((unint64_t *)&v76, v33);
        v36 = (void *)v76;
      }
      else
      {
        v36 = 0;
      }
      memcpy(v36, &v5[v32], v33);
      v83 = 1;
      v84 = v76;
      v85 = v77;
      if (!v86[0])
      {
        v38 = (void *)v76;
        v34 = 19;
        if (!(_QWORD)v76)
          goto LABEL_90;
LABEL_88:
        *((_QWORD *)&v84 + 1) = v38;
        operator delete(v38);
        goto LABEL_90;
      }
      switch(v87)
      {
        case 0:
          grl::codec::ColorLayerData::ColorLayerData((grl::codec::ColorLayerData *)&v76);
          if (*((_BYTE *)v6 + 32))
          {
            v37 = *v70;
            if (*v70)
            {
              v6[6] = v37;
              (*(void (**)(uint64_t *, uint64_t *, int64_t))(*v6[8] + 40))(v6[8], v37, (char *)v6[7] - (char *)v37);
            }
            *(_OWORD *)(v6 + 5) = v76;
            v6[7] = v77;
            v77 = 0;
            v76 = 0uLL;
            *((_BYTE *)v6 + 72) = v79;
            *(_DWORD *)((char *)v6 + 73) = v80;
            *v69 = v81;
            *((_WORD *)v6 + 42) = v82;
          }
          else
          {
            *(_OWORD *)(v6 + 5) = v76;
            v64 = v78;
            v6[7] = v77;
            v6[8] = v64;
            v76 = 0uLL;
            v77 = 0;
            *((_BYTE *)v6 + 72) = v79;
            *(_DWORD *)((char *)v6 + 73) = v80;
            *v69 = v81;
            *((_WORD *)v6 + 42) = v82;
            *((_BYTE *)v6 + 32) = 1;
          }
          if ((grl::codec::ColorLayerData::decode((uint64_t)v70, (uint64_t)&v84, v30) & 1) != 0)
            goto LABEL_82;
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Color Layer could not be read", "_internalLayers.colorLayer->decode(layerData.value(), propertyContext)", v29, 134);
          goto LABEL_84;
        case 1:
          v39 = v29;
          v40 = (uint64_t)(v6 + 20);
          while (1)
          {
            v41 = *(_QWORD *)v40;
            v42 = (uint64_t **)v40;
            if (!*(_QWORD *)v40)
              break;
            while (1)
            {
              v40 = v41;
              v43 = *(unsigned __int16 *)(v41 + 32);
              if (v43 > v35)
                break;
              if (v43 >= v35)
                goto LABEL_52;
              v41 = *(_QWORD *)(v40 + 8);
              if (!v41)
              {
                v42 = (uint64_t **)(v40 + 8);
                goto LABEL_49;
              }
            }
          }
LABEL_49:
          v44 = v40;
          v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6[21] + 16))(v6[21], 176, 8);
          *(_WORD *)(v40 + 32) = v35;
          grl::codec::PathLayerData::PathLayerData((grl::codec::PathLayerData *)(v40 + 40));
          *(_QWORD *)v40 = 0;
          *(_QWORD *)(v40 + 8) = 0;
          *(_QWORD *)(v40 + 16) = v44;
          *v42 = (uint64_t *)v40;
          v45 = (uint64_t *)*v6[19];
          v46 = (uint64_t *)v40;
          if (v45)
          {
            v6[19] = v45;
            v46 = *v42;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v6[20], v46);
          v6[22] = (uint64_t *)((char *)v6[22] + 1);
          v30 = a4;
LABEL_52:
          v29 = v39;
          if ((grl::codec::PathLayerData::decode(v40 + 40, (uint64_t)&v84, v30) & 1) != 0)
            goto LABEL_82;
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Path Layer could not be read", "_internalLayers.pathLayers[layerIndex.value()].decode(layerData.value(), propertyContext)", v39, 130);
          goto LABEL_84;
        case 2:
          v47 = v29;
          v48 = (uint64_t)(v6 + 16);
          while (1)
          {
            v49 = *(_QWORD *)v48;
            v50 = (uint64_t **)v48;
            if (!*(_QWORD *)v48)
              break;
            while (1)
            {
              v48 = v49;
              v51 = *(unsigned __int16 *)(v49 + 32);
              if (v51 > v35)
                break;
              if (v51 >= v35)
                goto LABEL_63;
              v49 = *(_QWORD *)(v48 + 8);
              if (!v49)
              {
                v50 = (uint64_t **)(v48 + 8);
                goto LABEL_60;
              }
            }
          }
LABEL_60:
          v52 = v48;
          v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6[17] + 16))(v6[17], 192, 8);
          *(_WORD *)(v48 + 32) = v35;
          grl::codec::ImageLayerData::ImageLayerData((grl::codec::ImageLayerData *)(v48 + 40));
          *(_QWORD *)v48 = 0;
          *(_QWORD *)(v48 + 8) = 0;
          *(_QWORD *)(v48 + 16) = v52;
          *v50 = (uint64_t *)v48;
          v53 = (uint64_t *)*v6[15];
          v54 = (uint64_t *)v48;
          if (v53)
          {
            v6[15] = v53;
            v54 = *v50;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v6[16], v54);
          v6[18] = (uint64_t *)((char *)v6[18] + 1);
          v30 = a4;
LABEL_63:
          v29 = v47;
          if ((grl::codec::ImageLayerData::decode(v48 + 40, (uint64_t)&v84, v30) & 1) != 0)
            goto LABEL_82;
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Image Layer could not be read", "_internalLayers.imageLayers[layerIndex.value()].decode(layerData.value(), propertyContext)", v47, 137);
          goto LABEL_84;
        case 3:
          v55 = v29;
          v56 = (uint64_t)(v6 + 12);
          break;
        case 4:
          LODWORD(v76) = 0;
          BYTE4(v76) = -1;
          v63 = *((unsigned __int8 *)v6 + 184);
          *(uint64_t **)((char *)v6 + 188) = (uint64_t *)0xFFFFFFFF00000000;
          *(uint64_t **)((char *)v6 + 196) = (uint64_t *)0xFF000000FF000000;
          *((_BYTE *)v6 + 204) = 0;
          *(_DWORD *)((char *)v6 + 205) = *(_DWORD *)((char *)&v76 + 1);
          *(uint64_t **)((char *)v6 + 209) = (uint64_t *)0xFF000000FF000000;
          *((_DWORD *)v6 + 55) = 1065353216;
          *((_WORD *)v6 + 112) = 0;
          if (!v63)
            *((_BYTE *)v6 + 184) = 1;
          if ((grl::codec::InfoLayerData::decode((uint64_t)v6 + 188, (uint64_t)&v84, v30) & 1) != 0)
            goto LABEL_82;
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Information Layer could not be read", "_internalLayers.infoLayer->decode(layerData.value(), propertyContext)", v29, 144);
          goto LABEL_84;
        default:
          goto LABEL_82;
      }
      while (1)
      {
        v57 = *(_QWORD *)v56;
        v58 = (uint64_t **)v56;
        if (!*(_QWORD *)v56)
          break;
        while (1)
        {
          v56 = v57;
          v59 = *(unsigned __int16 *)(v57 + 32);
          if (v59 > v35)
            break;
          if (v59 >= v35)
            goto LABEL_74;
          v57 = *(_QWORD *)(v56 + 8);
          if (!v57)
          {
            v58 = (uint64_t **)(v56 + 8);
            goto LABEL_71;
          }
        }
      }
LABEL_71:
      v60 = v56;
      v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6[13] + 16))(v6[13], 224, 8);
      *(_WORD *)(v56 + 32) = v35;
      grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)(v56 + 40));
      *(_QWORD *)v56 = 0;
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v56 + 16) = v60;
      *v58 = (uint64_t *)v56;
      v61 = (uint64_t *)*v6[11];
      v62 = (uint64_t *)v56;
      if (v61)
      {
        v6[11] = v61;
        v62 = *v58;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v6[12], v62);
      v6[14] = (uint64_t *)((char *)v6[14] + 1);
      v30 = a4;
LABEL_74:
      v29 = v55;
      if ((grl::codec::TextLayerData::decode(v56 + 40, (uint64_t)&v84, v30) & 1) != 0)
      {
LABEL_82:
        v34 = 0;
      }
      else
      {
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Text Layer could not be read", "_internalLayers.textLayers[layerIndex.value()].decode(layerData.value(), propertyContext)", v55, 140);
LABEL_84:
        v34 = 1;
      }
      v32 = v27;
    }
    else
    {
      v83 = 0;
      printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Layer Data could not be read", "layerData.has_value()", v29, 121);
      v34 = 1;
    }
    if (!v83)
    {
      v27 = v32;
      goto LABEL_90;
    }
    v38 = (void *)v84;
    v27 = v32;
    if ((_QWORD)v84)
      goto LABEL_88;
LABEL_90:
    if (v34 != 19 && v34)
      return 0;
    ++v28;
    result = 1;
    if (v28 >= v74)
      return result;
  }
  v66 = 118;
  v67 = "layerLength.has_value()";
  v68 = "Layer Length could not be read";
LABEL_104:
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v68, v67, v29, v66);
  return 0;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void grl::toEnum<grl::LayerType>(int a1@<W0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  __int16 v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 0:
      *(_BYTE *)a2 = 1;
      *(_WORD *)(a2 + 2) = 0;
      return;
    case 1:
      v5 = 1;
      *(_BYTE *)a2 = 1;
      goto LABEL_12;
    case 2:
      *(_BYTE *)a2 = 1;
      v5 = 2;
      goto LABEL_12;
    case 3:
      *(_BYTE *)a2 = 1;
      v5 = 3;
      goto LABEL_12;
    case 4:
      *(_BYTE *)a2 = 1;
      v5 = 4;
LABEL_12:
      *(_WORD *)(a2 + 2) = v5;
      break;
    default:
      if (GEOGetGeoResourceLibCodecLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibCodecLog::onceToken, &__block_literal_global_4_1);
      v4 = GEOGetGeoResourceLibCodecLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCodecLog::log, OS_LOG_TYPE_ERROR))
      {
        v6[0] = 67109890;
        v6[1] = a1;
        v7 = 2080;
        v8 = "false";
        v9 = 2080;
        v10 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/IconEnums.cpp";
        v11 = 1024;
        v12 = 336;
        _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_ERROR, "LayerType value is out of range with value %d.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)v6, 0x22u);
      }
      *(_BYTE *)a2 = 0;
      break;
  }
}

grl::codec::ImageLayerData *grl::codec::ImageLayerData::ImageLayerData(grl::codec::ImageLayerData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  char v7;

  v6 = 515;
  v7 = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v2 = grl::Allocator::instance(this);
  *((_QWORD *)this + 3) = v2;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 3, 1);
  v4 = 0;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 2) = v3 + 3;
  do
  {
    if (v3 + v4)
      *(_BYTE *)(v3 + v4) = *((_BYTE *)&v6 + v4);
    ++v4;
  }
  while (v4 != 3);
  *((_QWORD *)this + 1) = v3 + 3;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 18) = -256;
  *((_BYTE *)this + 38) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_DWORD *)this + 13) = 1119092736;
  *((_DWORD *)this + 14) = -16777216;
  *((_DWORD *)this + 15) = 1065353216;
  *((_QWORD *)this + 8) = 4278190080;
  *((_DWORD *)this + 18) = 1;
  *((_BYTE *)this + 76) = -1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 93) = 0;
  *((_BYTE *)this + 112) = 2;
  *((_DWORD *)this + 29) = 1065353216;
  *((_DWORD *)this + 30) = -16777216;
  *(_QWORD *)((char *)this + 140) = 0;
  *(_QWORD *)((char *)this + 129) = 0;
  *(_QWORD *)((char *)this + 124) = 0;
  *((_WORD *)this + 74) = 1;
  return this;
}

uint64_t grl::codec::InfoLayerData::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  signed int v22;
  char v23;
  char v24;
  char v25;
  unint64_t v26;
  int v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  int v51;
  const char *v52;
  const char *v53;
  _QWORD *v55;
  char i;
  unsigned int v57;
  int v58;
  _WORD *v60;
  unint64_t v61;
  uint64_t v62;

  v3 = *(_WORD **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v60 = *(_WORD **)a2;
  v61 = v4;
  if (v4 >= 2)
  {
    v62 = 2;
    v57 = (unsigned __int16)*v3;
    if (!*v3)
    {
      v5 = 1;
      return v5 & 1;
    }
    v6 = 0;
    v7 = 0;
    v8 = (_QWORD *)(a3 + 8);
    v55 = (_QWORD *)(a3 + 8);
    while (v62 + 2 <= v61)
    {
      v9 = v62 + 4;
      if (v62 + 4 > v61)
      {
        v51 = 130;
        v52 = "numPropertiesForType.has_value()";
        v53 = "Property Count could not be read";
        goto LABEL_119;
      }
      v10 = *(unsigned __int16 *)((char *)v60 + v62);
      v62 += 4;
      v11 = *v8;
      if (!*v8)
        goto LABEL_116;
      v12 = *(unsigned __int16 *)((char *)v60 + v9 - 2);
      v13 = v8;
      do
      {
        v14 = *(_DWORD *)(v11 + 28);
        v15 = v14 >= v10;
        if (v14 >= v10)
          v16 = (uint64_t *)v11;
        else
          v16 = (uint64_t *)(v11 + 8);
        if (v15)
          v13 = (_QWORD *)v11;
        v11 = *v16;
      }
      while (*v16);
      if (v13 == v8 || *((_DWORD *)v13 + 7) > v10)
      {
LABEL_116:
        v51 = 133;
        v52 = "decoderMapIter != propertyContext.decoderMap.end()";
        v53 = "Property Type read from set that wasnt in the Property Info Chapter";
LABEL_119:
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v53, v52, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/InfoLayerData_Generated.cpp", v51);
        v5 = v6;
        return v5 & 1;
      }
      v58 = v7;
      for (i = v6; v12; --v12)
      {
        v17 = v61;
        v18 = v62;
        v19 = v62 + 2;
        if (v62 + 2 > v61)
        {
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property ID could not be read", "propertyIDValue.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/InfoLayerData_Generated.cpp", 137);
          v5 = i;
          return v5 & 1;
        }
        v62 += 2;
        v20 = *((unsigned __int8 *)v13 + 32);
        if (v10 <= 6 && (_DWORD)v20 == (0x41008040401uLL >> (8 * v10)))
        {
          v21 = v60;
          v22 = *(unsigned __int16 *)((char *)v60 + v18);
          if (grl::propertyTypeFromPropertyID(v22) == v10)
          {
            if (v22 > 26)
            {
              v25 = v22 - 34;
              switch(v22)
              {
                case '"':
                  if (v18 + 3 > v17)
                  {
                    v26 = v18 + 3;
                  }
                  else
                  {
                    v62 = v18 + 3;
                    v25 = *((_BYTE *)v21 + v19);
                    v26 = v18 + 4;
                    v19 = v18 + 3;
                  }
                  if (v26 > v17)
                  {
                    v36 = v26;
                  }
                  else
                  {
                    v62 = v26;
                    v23 = *((_BYTE *)v21 + v19);
                    v36 = v26 + 1;
                    v19 = v26;
                  }
                  if (v36 > v17)
                  {
                    v40 = v36;
                  }
                  else
                  {
                    v62 = v36;
                    v24 = *((_BYTE *)v21 + v19);
                    v40 = v36 + 1;
                    v19 = v36;
                  }
                  if (v40 <= v17)
                  {
                    v62 = v40;
                    if (v18 + 3 <= v17 && v26 <= v17 && v36 <= v17)
                    {
                      v44 = *((_BYTE *)v21 + v19);
                      *(_BYTE *)(a1 + 8) = v25;
                      *(_BYTE *)(a1 + 9) = v23;
                      *(_BYTE *)(a1 + 10) = v24;
                      *(_BYTE *)(a1 + 11) = v44;
                    }
                  }
                  break;
                case '#':
                case '$':
                case '\'':
                case '(':
                case '*':
                case '+':
                  goto LABEL_39;
                case '%':
                  if (v18 + 6 <= v17)
                  {
                    v62 = v18 + 6;
                    v31 = *(_DWORD *)((char *)v21 + v18 + 2);
                    v30 = a1;
                  }
                  else
                  {
                    v30 = a1;
                    LOBYTE(v31) = *(_BYTE *)(a1 + 16);
                  }
                  *(_BYTE *)(v30 + 16) = v31;
                  break;
                case '&':
                  if (v18 + 3 > v17)
                  {
                    v32 = v18 + 3;
                  }
                  else
                  {
                    v62 = v18 + 3;
                    v25 = *((_BYTE *)v21 + v19);
                    v32 = v18 + 4;
                    v19 = v18 + 3;
                  }
                  if (v32 > v17)
                  {
                    v37 = v32;
                  }
                  else
                  {
                    v62 = v32;
                    v23 = *((_BYTE *)v21 + v19);
                    v37 = v32 + 1;
                    v19 = v32;
                  }
                  if (v37 > v17)
                  {
                    v41 = v37;
                  }
                  else
                  {
                    v62 = v37;
                    v24 = *((_BYTE *)v21 + v19);
                    v41 = v37 + 1;
                    v19 = v37;
                  }
                  if (v41 <= v17)
                  {
                    v62 = v41;
                    if (v18 + 3 <= v17 && v32 <= v17 && v37 <= v17)
                    {
                      v45 = *((_BYTE *)v21 + v19);
                      *(_BYTE *)(a1 + 25) = v25;
                      *(_BYTE *)(a1 + 26) = v23;
                      *(_BYTE *)(a1 + 27) = v24;
                      *(_BYTE *)(a1 + 28) = v45;
                    }
                  }
                  break;
                case ')':
                  v33 = a1;
                  *(_BYTE *)(a1 + 37) = 1;
                  if (v18 + 3 > v17)
                  {
                    v34 = v18 + 3;
                  }
                  else
                  {
                    v62 = v18 + 3;
                    v33 = *((_BYTE *)v21 + v19);
                    v34 = v18 + 4;
                    v19 = v18 + 3;
                  }
                  if (v34 > v17)
                  {
                    v38 = v34;
                  }
                  else
                  {
                    v62 = v34;
                    v23 = *((_BYTE *)v21 + v19);
                    v38 = v34 + 1;
                    v19 = v34;
                  }
                  if (v38 > v17)
                  {
                    v42 = v38;
                  }
                  else
                  {
                    v62 = v38;
                    v24 = *((_BYTE *)v21 + v19);
                    v42 = v38 + 1;
                    v19 = v38;
                  }
                  if (v42 <= v17)
                  {
                    v62 = v42;
                    if (v18 + 3 <= v17 && v34 <= v17 && v38 <= v17)
                    {
                      v46 = *((_BYTE *)v21 + v19);
                      *(_BYTE *)(a1 + 17) = v33;
                      *(_BYTE *)(a1 + 18) = v23;
                      *(_BYTE *)(a1 + 19) = v24;
                      *(_BYTE *)(a1 + 20) = v46;
                    }
                  }
                  break;
                case ',':
                  if (v18 + 3 > v17)
                  {
                    v35 = v18 + 3;
                  }
                  else
                  {
                    v62 = v18 + 3;
                    v25 = *((_BYTE *)v21 + v19);
                    v35 = v18 + 4;
                    v19 = v18 + 3;
                  }
                  if (v35 > v17)
                  {
                    v39 = v35;
                  }
                  else
                  {
                    v62 = v35;
                    v23 = *((_BYTE *)v21 + v19);
                    v39 = v35 + 1;
                    v19 = v35;
                  }
                  if (v39 > v17)
                  {
                    v43 = v39;
                  }
                  else
                  {
                    v62 = v39;
                    v24 = *((_BYTE *)v21 + v19);
                    v43 = v39 + 1;
                    v19 = v39;
                  }
                  if (v43 <= v17)
                  {
                    v62 = v43;
                    if (v18 + 3 <= v17 && v35 <= v17 && v39 <= v17)
                    {
                      v47 = *((_BYTE *)v21 + v19);
                      *(_BYTE *)(a1 + 21) = v25;
                      *(_BYTE *)(a1 + 22) = v23;
                      *(_BYTE *)(a1 + 23) = v24;
                      *(_BYTE *)(a1 + 24) = v47;
                    }
                  }
                  break;
                default:
                  if (v22 != 27)
                    goto LABEL_39;
                  v28 = a1;
                  *(_BYTE *)(a1 + 36) = 1;
                  if (v18 + 3 > v17)
                  {
                    v29 = v18 + 3;
                  }
                  else
                  {
                    v62 = v18 + 3;
                    v28 = *((_BYTE *)v21 + v19);
                    v29 = v18 + 4;
                    v19 = v18 + 3;
                  }
                  if (v29 > v17)
                  {
                    v48 = v29;
                  }
                  else
                  {
                    v62 = v29;
                    v23 = *((_BYTE *)v21 + v19);
                    v48 = v29 + 1;
                    v19 = v29;
                  }
                  if (v48 > v17)
                  {
                    v49 = v48;
                  }
                  else
                  {
                    v62 = v48;
                    v24 = *((_BYTE *)v21 + v19);
                    v49 = v48 + 1;
                    v19 = v48;
                  }
                  if (v49 <= v17)
                  {
                    v62 = v49;
                    if (v18 + 3 <= v17 && v29 <= v17 && v48 <= v17)
                    {
                      v50 = *((_BYTE *)v21 + v19);
                      *(_BYTE *)(a1 + 12) = v28;
                      *(_BYTE *)(a1 + 13) = v23;
                      *(_BYTE *)(a1 + 14) = v24;
                      *(_BYTE *)(a1 + 15) = v50;
                    }
                  }
                  break;
              }
              continue;
            }
            switch(v22)
            {
              case 0:
                if (v18 + 6 <= v17)
                {
                  v27 = *(_DWORD *)((char *)v21 + v19);
                  v62 = v18 + 6;
                  *(_DWORD *)(a1 + 32) = v27;
                }
                continue;
              case 19:
                if (v18 + 6 <= v17)
                {
                  v62 = v18 + 6;
                  *(_DWORD *)(a1 + 4) = *(_DWORD *)((char *)v21 + v18 + 2);
                }
                continue;
              case 20:
                if (v18 + 6 <= v17)
                {
                  v62 = v18 + 6;
                  *(_DWORD *)a1 = *(_DWORD *)((char *)v21 + v18 + 2);
                }
                continue;
            }
          }
        }
LABEL_39:
        grl::SkipStreamBytes(&v60, v20);
      }
      v7 = v58 + 1;
      v5 = 1;
      v6 = v58 + 1 >= v57;
      v8 = v55;
      if (v58 + 1 == v57)
        return v5 & 1;
    }
    v51 = 126;
    v52 = "propertyTypeValue.has_value()";
    v53 = "Property Type could not be read";
    goto LABEL_119;
  }
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property Type Count could not be read", "numPropertyTypes.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/InfoLayerData_Generated.cpp", 122);
  v5 = 0;
  return v5 & 1;
}

grl::codec::PathLayerData *grl::codec::PathLayerData::PathLayerData(grl::codec::PathLayerData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  char v7;

  v6 = 515;
  v7 = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v2 = grl::Allocator::instance(this);
  *((_QWORD *)this + 3) = v2;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 3, 1);
  v4 = 0;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 2) = v3 + 3;
  do
  {
    if (v3 + v4)
      *(_BYTE *)(v3 + v4) = *((_BYTE *)&v6 + v4);
    ++v4;
  }
  while (v4 != 3);
  *((_QWORD *)this + 1) = v3 + 3;
  *((_WORD *)this + 16) = 0;
  *(_DWORD *)((char *)this + 34) = -1;
  *((_DWORD *)this + 10) = 0;
  *(_DWORD *)((char *)this + 43) = 0;
  *(_WORD *)((char *)this + 47) = 255;
  *(_QWORD *)((char *)this + 52) = 0;
  *((_BYTE *)this + 60) = 0;
  *((_DWORD *)this + 16) = 1119092736;
  *((_DWORD *)this + 17) = -16777216;
  *((_DWORD *)this + 18) = 1065353216;
  *(_QWORD *)((char *)this + 76) = 4278190080;
  *((_DWORD *)this + 21) = 1;
  *((_BYTE *)this + 88) = -1;
  *((_DWORD *)this + 23) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_DWORD *)this + 25) = 1065353216;
  *((_DWORD *)this + 26) = -16777216;
  *((_DWORD *)this + 31) = 0;
  *(_QWORD *)((char *)this + 113) = 0;
  *(_QWORD *)((char *)this + 108) = 0;
  *((_BYTE *)this + 128) = 1;
  return this;
}

uint64_t grl::codec::PathLayerData::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  int v72;
  const char *v73;
  const char *v74;
  _QWORD *v76;
  char v77;
  unsigned int v78;
  int v79;
  _WORD *v81;
  unint64_t v82;
  uint64_t v83;

  v3 = *(_WORD **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v81 = *(_WORD **)a2;
  v82 = v4;
  if (v4 >= 2)
  {
    v83 = 2;
    v78 = (unsigned __int16)*v3;
    if (*v3)
    {
      v6 = 0;
      v7 = 0;
      v8 = (_QWORD *)(a3 + 8);
      v76 = (_QWORD *)(a3 + 8);
      while (1)
      {
        if (v83 + 2 > v82)
        {
          v72 = 182;
          v73 = "propertyTypeValue.has_value()";
          v74 = "Property Type could not be read";
          goto LABEL_166;
        }
        v9 = v83 + 4;
        if (v83 + 4 > v82)
        {
          v72 = 186;
          v73 = "numPropertiesForType.has_value()";
          v74 = "Property Count could not be read";
          goto LABEL_166;
        }
        v10 = *(unsigned __int16 *)((char *)v81 + v83);
        v83 += 4;
        v11 = *v8;
        if (!*v8)
          goto LABEL_163;
        v12 = *(unsigned __int16 *)((char *)v81 + v9 - 2);
        v13 = v8;
        do
        {
          v14 = *(_DWORD *)(v11 + 28);
          v15 = v14 >= v10;
          if (v14 >= v10)
            v16 = (uint64_t *)v11;
          else
            v16 = (uint64_t *)(v11 + 8);
          if (v15)
            v13 = (_QWORD *)v11;
          v11 = *v16;
        }
        while (*v16);
        if (v13 == v8 || *((_DWORD *)v13 + 7) > v10)
        {
LABEL_163:
          v72 = 189;
          v73 = "decoderMapIter != propertyContext.decoderMap.end()";
          v74 = "Property Type read from set that wasnt in the Property Info Chapter";
LABEL_166:
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v74, v73, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/PathLayerData_Generated.cpp", v72);
          v5 = v6;
          return v5 & 1;
        }
        v79 = v7;
        v77 = v6;
        if (v12)
          break;
LABEL_159:
        v7 = v79 + 1;
        v5 = 1;
        v6 = v79 + 1 >= v78;
        v8 = v76;
        if (v79 + 1 == v78)
          return v5 & 1;
      }
      while (1)
      {
        v17 = v82;
        v18 = v83;
        v19 = v83 + 2;
        if (v83 + 2 > v82)
          break;
        v83 += 2;
        v20 = *((unsigned __int8 *)v13 + 32);
        if (v10 <= 6
          && (_DWORD)v20 == (0x41008040401uLL >> (8 * v10))
          && (v21 = v81,
              v22 = *(unsigned __int16 *)((char *)v81 + v18),
              grl::propertyTypeFromPropertyID(v22) == v10))
        {
          switch(v22)
          {
            case 0u:
              if (v18 + 6 <= v17)
              {
                v26 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                *(_DWORD *)(a1 + 100) = v26;
              }
              break;
            case 1u:
              if (v18 + 6 <= v17)
              {
                v27 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                if (v18 + 10 <= v17)
                {
                  v28 = *(_DWORD *)((char *)v21 + v18 + 6);
                  v83 = v18 + 10;
                  *(_DWORD *)(a1 + 52) = v27;
                  *(_DWORD *)(a1 + 56) = v28;
                }
              }
              break;
            case 2u:
              if (v18 + 6 <= v17)
              {
                v29 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                *(_DWORD *)(a1 + 92) = v29;
              }
              break;
            case 3u:
              if (v18 + 6 <= v17)
              {
                v30 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                *(_DWORD *)(a1 + 116) = v30;
              }
              break;
            case 4u:
              if (v18 + 6 <= v17)
              {
                v31 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                if (v18 + 10 <= v17)
                {
                  v32 = *(_DWORD *)((char *)v21 + v18 + 6);
                  v83 = v18 + 10;
                  *(_DWORD *)(a1 + 108) = v31;
                  *(_DWORD *)(a1 + 112) = v32;
                }
              }
              break;
            case 5u:
              if (v18 + 3 > v17)
              {
                v33 = v18 + 3;
              }
              else
              {
                v83 = v18 + 3;
                v23 = *((_BYTE *)v21 + v19);
                v33 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v33 > v17)
              {
                v54 = v33;
              }
              else
              {
                v83 = v33;
                v24 = *((_BYTE *)v21 + v19);
                v54 = v33 + 1;
                v19 = v33;
              }
              if (v54 > v17)
              {
                v60 = v54;
              }
              else
              {
                v83 = v54;
                v25 = *((_BYTE *)v21 + v19);
                v60 = v54 + 1;
                v19 = v54;
              }
              if (v60 <= v17)
              {
                v83 = v60;
                if (v18 + 3 <= v17 && v33 <= v17 && v54 <= v17)
                {
                  v66 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 44) = v23;
                  *(_BYTE *)(a1 + 45) = v24;
                  *(_BYTE *)(a1 + 46) = v25;
                  *(_BYTE *)(a1 + 47) = v66;
                }
              }
              break;
            case 6u:
              if (v18 + 3 > v17)
              {
                v34 = v18 + 3;
              }
              else
              {
                v83 = v18 + 3;
                v23 = *((_BYTE *)v21 + v19);
                v34 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v34 > v17)
              {
                v55 = v34;
              }
              else
              {
                v83 = v34;
                v24 = *((_BYTE *)v21 + v19);
                v55 = v34 + 1;
                v19 = v34;
              }
              if (v55 > v17)
              {
                v61 = v55;
              }
              else
              {
                v83 = v55;
                v25 = *((_BYTE *)v21 + v19);
                v61 = v55 + 1;
                v19 = v55;
              }
              if (v61 <= v17)
              {
                v83 = v61;
                if (v18 + 3 <= v17 && v34 <= v17 && v55 <= v17)
                {
                  v67 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 85) = v23;
                  *(_BYTE *)(a1 + 86) = v24;
                  *(_BYTE *)(a1 + 87) = v25;
                  *(_BYTE *)(a1 + 88) = v67;
                }
              }
              break;
            case 7u:
              if (v18 + 3 > v17)
              {
                v35 = v18 + 3;
              }
              else
              {
                v83 = v18 + 3;
                v23 = *((_BYTE *)v21 + v19);
                v35 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v35 > v17)
              {
                v56 = v35;
              }
              else
              {
                v83 = v35;
                v24 = *((_BYTE *)v21 + v19);
                v56 = v35 + 1;
                v19 = v35;
              }
              if (v56 > v17)
              {
                v62 = v56;
              }
              else
              {
                v83 = v56;
                v25 = *((_BYTE *)v21 + v19);
                v62 = v56 + 1;
                v19 = v56;
              }
              if (v62 <= v17)
              {
                v83 = v62;
                if (v18 + 3 <= v17 && v35 <= v17 && v56 <= v17)
                {
                  v68 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 104) = v23;
                  *(_BYTE *)(a1 + 105) = v24;
                  *(_BYTE *)(a1 + 106) = v25;
                  *(_BYTE *)(a1 + 107) = v68;
                }
              }
              break;
            case 8u:
              if (v18 + 6 <= v17)
              {
                v83 = v18 + 6;
                v49 = *(_DWORD *)((char *)v21 + v18 + 2);
                v48 = a1;
              }
              else
              {
                v48 = a1;
                LOBYTE(v49) = *(_BYTE *)(a1 + 32);
              }
              *(_BYTE *)(v48 + 32) = v49;
              break;
            case 0xCu:
              if (v18 + 3 <= v17)
              {
                v83 = v18 + 3;
                *(_BYTE *)(a1 + 33) = *((_BYTE *)v21 + v19) != 0;
              }
              break;
            case 0xDu:
              if (v18 + 6 <= v17)
              {
                v36 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                *(_DWORD *)(a1 + 40) = v36;
              }
              break;
            case 0xEu:
              if (v18 + 6 <= v17)
              {
                v37 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                *(_DWORD *)(a1 + 124) = v37;
              }
              break;
            case 0xFu:
              if (v18 + 3 <= v17)
              {
                v83 = v18 + 3;
                *(_BYTE *)(a1 + 128) = *((_BYTE *)v21 + v19) != 0;
              }
              break;
            case 0x10u:
              if (v18 + 3 > v17)
              {
                v38 = v18 + 3;
              }
              else
              {
                v83 = v18 + 3;
                v23 = *((_BYTE *)v21 + v19);
                v38 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v38 > v17)
              {
                v57 = v38;
              }
              else
              {
                v83 = v38;
                v24 = *((_BYTE *)v21 + v19);
                v57 = v38 + 1;
                v19 = v38;
              }
              if (v57 > v17)
              {
                v63 = v57;
              }
              else
              {
                v83 = v57;
                v25 = *((_BYTE *)v21 + v19);
                v63 = v57 + 1;
                v19 = v57;
              }
              if (v63 <= v17)
              {
                v83 = v63;
                if (v18 + 3 <= v17 && v38 <= v17 && v57 <= v17)
                {
                  v69 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 76) = v23;
                  *(_BYTE *)(a1 + 77) = v24;
                  *(_BYTE *)(a1 + 78) = v25;
                  *(_BYTE *)(a1 + 79) = v69;
                }
              }
              break;
            case 0x11u:
              if (v18 + 3 > v17)
              {
                v39 = v18 + 3;
              }
              else
              {
                v83 = v18 + 3;
                v23 = *((_BYTE *)v21 + v19);
                v39 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v39 > v17)
              {
                v58 = v39;
              }
              else
              {
                v83 = v39;
                v24 = *((_BYTE *)v21 + v19);
                v58 = v39 + 1;
                v19 = v39;
              }
              if (v58 > v17)
              {
                v64 = v58;
              }
              else
              {
                v83 = v58;
                v25 = *((_BYTE *)v21 + v19);
                v64 = v58 + 1;
                v19 = v58;
              }
              if (v64 <= v17)
              {
                v83 = v64;
                if (v18 + 3 <= v17 && v39 <= v17 && v58 <= v17)
                {
                  v70 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 68) = v23;
                  *(_BYTE *)(a1 + 69) = v24;
                  *(_BYTE *)(a1 + 70) = v25;
                  *(_BYTE *)(a1 + 71) = v70;
                }
              }
              break;
            case 0x12u:
              if (v18 + 6 <= v17)
              {
                v83 = v18 + 6;
                v41 = *(_DWORD *)((char *)v21 + v18 + 2);
                v40 = a1;
              }
              else
              {
                v40 = a1;
                LOBYTE(v41) = *(_BYTE *)(a1 + 60);
              }
              *(_BYTE *)(v40 + 60) = v41;
              break;
            case 0x15u:
              if (v18 + 6 <= v17)
              {
                v83 = v18 + 6;
                v51 = *(_DWORD *)((char *)v21 + v18 + 2);
                v50 = a1;
              }
              else
              {
                v50 = a1;
                LOBYTE(v51) = *(_BYTE *)(a1 + 120);
              }
              *(_BYTE *)(v50 + 120) = v51;
              break;
            case 0x20u:
              if (v18 + 6 <= v17)
              {
                v52 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                *(_DWORD *)(a1 + 80) = v52;
              }
              break;
            case 0x21u:
              if (v18 + 6 <= v17)
              {
                v42 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                *(_DWORD *)(a1 + 72) = v42;
              }
              break;
            case 0x23u:
              if (v18 + 6 <= v17)
              {
                v83 = v18 + 6;
                v44 = *(_DWORD *)((char *)v21 + v18 + 2);
                v43 = a1;
              }
              else
              {
                v43 = a1;
                LOBYTE(v44) = *(_BYTE *)(a1 + 48);
              }
              *(_BYTE *)(v43 + 48) = v44;
              break;
            case 0x27u:
              if (v18 + 6 <= v17)
              {
                v53 = *(_DWORD *)((char *)v21 + v19);
                v83 = v18 + 6;
                *(_DWORD *)(a1 + 64) = v53;
              }
              break;
            case 0x28u:
              if (v18 + 6 <= v17)
              {
                v83 = v18 + 6;
                v46 = *(_DWORD *)((char *)v21 + v18 + 2);
                v45 = a1;
              }
              else
              {
                v45 = a1;
                LOBYTE(v46) = *(_BYTE *)(a1 + 84);
              }
              *(_BYTE *)(v45 + 84) = v46;
              break;
            case 0x2Bu:
              if (v18 + 3 <= v17)
              {
                v83 = v18 + 3;
                *(_BYTE *)(a1 + 96) = *((_BYTE *)v21 + v19) != 0;
              }
              break;
            case 0x2Fu:
              if (v18 + 3 > v17)
              {
                v47 = v18 + 3;
              }
              else
              {
                v83 = v18 + 3;
                v23 = *((_BYTE *)v21 + v19);
                v47 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v47 > v17)
              {
                v59 = v47;
              }
              else
              {
                v83 = v47;
                v24 = *((_BYTE *)v21 + v19);
                v59 = v47 + 1;
                v19 = v47;
              }
              if (v59 > v17)
              {
                v65 = v59;
              }
              else
              {
                v83 = v59;
                v25 = *((_BYTE *)v21 + v19);
                v65 = v59 + 1;
                v19 = v59;
              }
              if (v65 <= v17)
              {
                v83 = v65;
                if (v18 + 3 <= v17 && v47 <= v17 && v59 <= v17)
                {
                  v71 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 34) = v23;
                  *(_BYTE *)(a1 + 35) = v24;
                  *(_BYTE *)(a1 + 36) = v25;
                  *(_BYTE *)(a1 + 37) = v71;
                }
              }
              break;
            default:
              goto LABEL_26;
          }
        }
        else
        {
LABEL_26:
          grl::SkipStreamBytes(&v81, v20);
        }
        if (!--v12)
          goto LABEL_159;
      }
      printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property ID could not be read", "propertyIDValue.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/PathLayerData_Generated.cpp", 193);
      v5 = v77;
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property Type Count could not be read", "numPropertyTypes.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/PathLayerData_Generated.cpp", 178);
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t grl::codec::ImageLayerData::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  int v76;
  const char *v77;
  const char *v78;
  _QWORD *v80;
  char v81;
  unsigned int v82;
  int v83;
  _WORD *v85;
  unint64_t v86;
  uint64_t v87;

  v3 = *(_WORD **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v85 = *(_WORD **)a2;
  v86 = v4;
  if (v4 >= 2)
  {
    v87 = 2;
    v82 = (unsigned __int16)*v3;
    if (*v3)
    {
      v6 = 0;
      v7 = 0;
      v8 = (_QWORD *)(a3 + 8);
      v80 = (_QWORD *)(a3 + 8);
      while (1)
      {
        if (v87 + 2 > v86)
        {
          v76 = 202;
          v77 = "propertyTypeValue.has_value()";
          v78 = "Property Type could not be read";
          goto LABEL_164;
        }
        v9 = v87 + 4;
        if (v87 + 4 > v86)
        {
          v76 = 206;
          v77 = "numPropertiesForType.has_value()";
          v78 = "Property Count could not be read";
          goto LABEL_164;
        }
        v10 = *(unsigned __int16 *)((char *)v85 + v87);
        v87 += 4;
        v11 = *v8;
        if (!*v8)
          goto LABEL_161;
        v12 = *(unsigned __int16 *)((char *)v85 + v9 - 2);
        v13 = v8;
        do
        {
          v14 = *(_DWORD *)(v11 + 28);
          v15 = v14 >= v10;
          if (v14 >= v10)
            v16 = (uint64_t *)v11;
          else
            v16 = (uint64_t *)(v11 + 8);
          if (v15)
            v13 = (_QWORD *)v11;
          v11 = *v16;
        }
        while (*v16);
        if (v13 == v8 || *((_DWORD *)v13 + 7) > v10)
        {
LABEL_161:
          v76 = 209;
          v77 = "decoderMapIter != propertyContext.decoderMap.end()";
          v78 = "Property Type read from set that wasnt in the Property Info Chapter";
LABEL_164:
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v78, v77, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ImageLayerData_Generated.cpp", v76);
          v5 = v6;
          return v5 & 1;
        }
        v83 = v7;
        v81 = v6;
        if (v12)
          break;
LABEL_157:
        v7 = v83 + 1;
        v5 = 1;
        v6 = v83 + 1 >= v82;
        v8 = v80;
        if (v83 + 1 == v82)
          return v5 & 1;
      }
      while (1)
      {
        v17 = v86;
        v18 = v87;
        v19 = v87 + 2;
        if (v87 + 2 > v86)
          break;
        v87 += 2;
        v20 = *((unsigned __int8 *)v13 + 32);
        if (v10 <= 6
          && (_DWORD)v20 == (0x41008040401uLL >> (8 * v10))
          && (v21 = v85,
              v22 = *(unsigned __int16 *)((char *)v85 + v18),
              grl::propertyTypeFromPropertyID(v22) == v10))
        {
          v25 = v22 - 1;
          switch(v22)
          {
            case 1u:
              if (v18 + 6 <= v17)
              {
                v26 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                if (v18 + 10 <= v17)
                {
                  v27 = *(_DWORD *)((char *)v21 + v18 + 6);
                  v87 = v18 + 10;
                  *(_DWORD *)(a1 + 40) = v26;
                  *(_DWORD *)(a1 + 44) = v27;
                }
              }
              break;
            case 2u:
              if (v18 + 6 <= v17)
              {
                v28 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                *(_DWORD *)(a1 + 80) = v28;
              }
              break;
            case 3u:
              if (v18 + 6 <= v17)
              {
                v29 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                *(_DWORD *)(a1 + 132) = v29;
              }
              break;
            case 4u:
              if (v18 + 6 <= v17)
              {
                v30 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                if (v18 + 10 <= v17)
                {
                  v31 = *(_DWORD *)((char *)v21 + v18 + 6);
                  v87 = v18 + 10;
                  *(_DWORD *)(a1 + 124) = v30;
                  *(_DWORD *)(a1 + 128) = v31;
                }
              }
              break;
            case 5u:
              if (v18 + 3 > v17)
              {
                v32 = v18 + 3;
              }
              else
              {
                v87 = v18 + 3;
                v25 = *((_BYTE *)v21 + v19);
                v32 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v32 > v17)
              {
                v61 = v32;
              }
              else
              {
                v87 = v32;
                v23 = *((_BYTE *)v21 + v19);
                v61 = v32 + 1;
                v19 = v32;
              }
              if (v61 > v17)
              {
                v66 = v61;
              }
              else
              {
                v87 = v61;
                v24 = *((_BYTE *)v21 + v19);
                v66 = v61 + 1;
                v19 = v61;
              }
              if (v66 <= v17)
              {
                v87 = v66;
                if (v18 + 3 <= v17 && v32 <= v17 && v61 <= v17)
                {
                  v71 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 34) = v25;
                  *(_BYTE *)(a1 + 35) = v23;
                  *(_BYTE *)(a1 + 36) = v24;
                  *(_BYTE *)(a1 + 37) = v71;
                }
              }
              break;
            case 6u:
              if (v18 + 3 > v17)
              {
                v33 = v18 + 3;
              }
              else
              {
                v87 = v18 + 3;
                v25 = *((_BYTE *)v21 + v19);
                v33 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v33 > v17)
              {
                v62 = v33;
              }
              else
              {
                v87 = v33;
                v23 = *((_BYTE *)v21 + v19);
                v62 = v33 + 1;
                v19 = v33;
              }
              if (v62 > v17)
              {
                v67 = v62;
              }
              else
              {
                v87 = v62;
                v24 = *((_BYTE *)v21 + v19);
                v67 = v62 + 1;
                v19 = v62;
              }
              if (v67 <= v17)
              {
                v87 = v67;
                if (v18 + 3 <= v17 && v33 <= v17 && v62 <= v17)
                {
                  v72 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 73) = v25;
                  *(_BYTE *)(a1 + 74) = v23;
                  *(_BYTE *)(a1 + 75) = v24;
                  *(_BYTE *)(a1 + 76) = v72;
                }
              }
              break;
            case 7u:
              if (v18 + 3 > v17)
              {
                v34 = v18 + 3;
              }
              else
              {
                v87 = v18 + 3;
                v25 = *((_BYTE *)v21 + v19);
                v34 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v34 > v17)
              {
                v63 = v34;
              }
              else
              {
                v87 = v34;
                v23 = *((_BYTE *)v21 + v19);
                v63 = v34 + 1;
                v19 = v34;
              }
              if (v63 > v17)
              {
                v68 = v63;
              }
              else
              {
                v87 = v63;
                v24 = *((_BYTE *)v21 + v19);
                v68 = v63 + 1;
                v19 = v63;
              }
              if (v68 <= v17)
              {
                v87 = v68;
                if (v18 + 3 <= v17 && v34 <= v17 && v63 <= v17)
                {
                  v73 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 120) = v25;
                  *(_BYTE *)(a1 + 121) = v23;
                  *(_BYTE *)(a1 + 122) = v24;
                  *(_BYTE *)(a1 + 123) = v73;
                }
              }
              break;
            case 8u:
              if (v18 + 6 <= v17)
              {
                v87 = v18 + 6;
                v36 = *(_DWORD *)((char *)v21 + v18 + 2);
                v35 = a1;
              }
              else
              {
                v35 = a1;
                LOBYTE(v36) = *(_BYTE *)(a1 + 32);
              }
              *(_BYTE *)(v35 + 32) = v36;
              break;
            case 9u:
              if (v18 + 6 <= v17)
              {
                v87 = v18 + 6;
                v55 = *(_DWORD *)((char *)v21 + v18 + 2);
                v54 = a1;
              }
              else
              {
                v54 = a1;
                LOBYTE(v55) = *(_BYTE *)(a1 + 112);
              }
              *(_BYTE *)(v54 + 112) = v55;
              break;
            case 0xAu:
              if (v18 + 6 <= v17)
              {
                v56 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                if (v18 + 10 <= v17)
                {
                  v57 = *(_DWORD *)((char *)v21 + v18 + 6);
                  v87 = v18 + 10;
                  *(_DWORD *)(a1 + 84) = v56;
                  *(_DWORD *)(a1 + 88) = v57;
                }
              }
              break;
            case 0xBu:
              if (v18 + 6 <= v17)
              {
                v37 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                if (v18 + 10 <= v17)
                {
                  v38 = *(_DWORD *)((char *)v21 + v18 + 6);
                  v87 = v18 + 10;
                  *(_DWORD *)(a1 + 140) = v37;
                  *(_DWORD *)(a1 + 144) = v38;
                }
              }
              break;
            case 0xCu:
              if (v18 + 3 <= v17)
              {
                v87 = v18 + 3;
                *(_BYTE *)(a1 + 33) = *((_BYTE *)v21 + v19) != 0;
              }
              break;
            case 0xFu:
              if (v18 + 3 <= v17)
              {
                v87 = v18 + 3;
                *(_BYTE *)(a1 + 148) = *((_BYTE *)v21 + v19) != 0;
              }
              break;
            case 0x10u:
              if (v18 + 3 > v17)
              {
                v39 = v18 + 3;
              }
              else
              {
                v87 = v18 + 3;
                v25 = *((_BYTE *)v21 + v19);
                v39 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v39 > v17)
              {
                v64 = v39;
              }
              else
              {
                v87 = v39;
                v23 = *((_BYTE *)v21 + v19);
                v64 = v39 + 1;
                v19 = v39;
              }
              if (v64 > v17)
              {
                v69 = v64;
              }
              else
              {
                v87 = v64;
                v24 = *((_BYTE *)v21 + v19);
                v69 = v64 + 1;
                v19 = v64;
              }
              if (v69 <= v17)
              {
                v87 = v69;
                if (v18 + 3 <= v17 && v39 <= v17 && v64 <= v17)
                {
                  v74 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 64) = v25;
                  *(_BYTE *)(a1 + 65) = v23;
                  *(_BYTE *)(a1 + 66) = v24;
                  *(_BYTE *)(a1 + 67) = v74;
                }
              }
              break;
            case 0x11u:
              if (v18 + 3 > v17)
              {
                v40 = v18 + 3;
              }
              else
              {
                v87 = v18 + 3;
                v25 = *((_BYTE *)v21 + v19);
                v40 = v18 + 4;
                v19 = v18 + 3;
              }
              if (v40 > v17)
              {
                v65 = v40;
              }
              else
              {
                v87 = v40;
                v23 = *((_BYTE *)v21 + v19);
                v65 = v40 + 1;
                v19 = v40;
              }
              if (v65 > v17)
              {
                v70 = v65;
              }
              else
              {
                v87 = v65;
                v24 = *((_BYTE *)v21 + v19);
                v70 = v65 + 1;
                v19 = v65;
              }
              if (v70 <= v17)
              {
                v87 = v70;
                if (v18 + 3 <= v17 && v40 <= v17 && v65 <= v17)
                {
                  v75 = *((_BYTE *)v21 + v19);
                  *(_BYTE *)(a1 + 56) = v25;
                  *(_BYTE *)(a1 + 57) = v23;
                  *(_BYTE *)(a1 + 58) = v24;
                  *(_BYTE *)(a1 + 59) = v75;
                }
              }
              break;
            case 0x12u:
              if (v18 + 6 <= v17)
              {
                v87 = v18 + 6;
                v42 = *(_DWORD *)((char *)v21 + v18 + 2);
                v41 = a1;
              }
              else
              {
                v41 = a1;
                LOBYTE(v42) = *(_BYTE *)(a1 + 48);
              }
              *(_BYTE *)(v41 + 48) = v42;
              break;
            case 0x20u:
              if (v18 + 6 <= v17)
              {
                v58 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                *(_DWORD *)(a1 + 68) = v58;
              }
              break;
            case 0x21u:
              if (v18 + 6 <= v17)
              {
                v59 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                *(_DWORD *)(a1 + 60) = v59;
              }
              break;
            case 0x23u:
              if (v18 + 6 <= v17)
              {
                v87 = v18 + 6;
                v44 = *(_DWORD *)((char *)v21 + v18 + 2);
                v43 = a1;
              }
              else
              {
                v43 = a1;
                LOBYTE(v44) = *(_BYTE *)(a1 + 38);
              }
              *(_BYTE *)(v43 + 38) = v44;
              break;
            case 0x24u:
              if (v18 + 6 <= v17)
              {
                v45 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                if (v18 + 10 <= v17)
                {
                  v46 = *(_DWORD *)((char *)v21 + v18 + 6);
                  v87 = v18 + 10;
                  *(_DWORD *)(a1 + 92) = v45;
                  *(_DWORD *)(a1 + 96) = v46;
                }
              }
              break;
            case 0x27u:
              if (v18 + 6 <= v17)
              {
                v60 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                *(_DWORD *)(a1 + 52) = v60;
              }
              break;
            case 0x28u:
              if (v18 + 6 <= v17)
              {
                v87 = v18 + 6;
                v48 = *(_DWORD *)((char *)v21 + v18 + 2);
                v47 = a1;
              }
              else
              {
                v47 = a1;
                LOBYTE(v48) = *(_BYTE *)(a1 + 72);
              }
              *(_BYTE *)(v47 + 72) = v48;
              break;
            case 0x2Au:
              *(_BYTE *)(a1 + 149) = 1;
              if (v18 + 6 <= v17)
              {
                v49 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                if (v18 + 10 <= v17)
                {
                  v50 = *(_DWORD *)((char *)v21 + v18 + 6);
                  v87 = v18 + 10;
                  *(_DWORD *)(a1 + 104) = v49;
                  *(_DWORD *)(a1 + 108) = v50;
                }
              }
              break;
            case 0x2Du:
              if (v18 + 3 <= v17)
              {
                v87 = v18 + 3;
                *(_BYTE *)(a1 + 136) = *((_BYTE *)v21 + v19) != 0;
              }
              break;
            case 0x2Eu:
              if (v18 + 6 <= v17)
              {
                v51 = *(_DWORD *)((char *)v21 + v19);
                v87 = v18 + 6;
                *(_DWORD *)(a1 + 116) = v51;
              }
              break;
            case 0x30u:
              if (v18 + 6 <= v17)
              {
                v87 = v18 + 6;
                v53 = *(_DWORD *)((char *)v21 + v18 + 2);
                v52 = a1;
              }
              else
              {
                v52 = a1;
                LOBYTE(v53) = *(_BYTE *)(a1 + 100);
              }
              *(_BYTE *)(v52 + 100) = v53;
              break;
            default:
              goto LABEL_27;
          }
        }
        else
        {
LABEL_27:
          grl::SkipStreamBytes(&v85, v20);
        }
        if (!--v12)
          goto LABEL_157;
      }
      printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property ID could not be read", "propertyIDValue.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ImageLayerData_Generated.cpp", 213);
      v5 = v81;
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property Type Count could not be read", "numPropertyTypes.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ImageLayerData_Generated.cpp", 198);
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t grl::propertyTypeFromPropertyID(unsigned int a1)
{
  if (a1 > 0x30)
    return 0;
  else
    return word_1A0086F00[(__int16)a1];
}

uint64_t grl::codec::TextLayerData::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  char v24;
  char v25;
  char v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  size_t v39;
  size_t v40;
  unint64_t v41;
  size_t v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  int v73;
  const char *v74;
  const char *v75;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  char v81;
  unsigned int v82;
  int v84;
  _WORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t __dst;
  _BYTE v89[15];
  char v90;
  _QWORD v91[4];

  v91[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_WORD **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v85 = *(_WORD **)a2;
  v86 = v4;
  if (v4 >= 2)
  {
    v87 = 2;
    v82 = (unsigned __int16)*v3;
    if (*v3)
    {
      v6 = 0;
      v7 = 0;
      v8 = (_QWORD *)(a3 + 8);
      v79 = (_QWORD *)(a1 + 152);
      v77 = (_QWORD *)(a1 + 48);
      v78 = (_QWORD *)(a1 + 96);
      v80 = (_QWORD *)(a3 + 8);
      while (1)
      {
        if (v87 + 2 > v86)
        {
          v73 = 162;
          v74 = "propertyTypeValue.has_value()";
          v75 = "Property Type could not be read";
          goto LABEL_154;
        }
        v9 = v87 + 4;
        if (v87 + 4 > v86)
        {
          v73 = 166;
          v74 = "numPropertiesForType.has_value()";
          v75 = "Property Count could not be read";
          goto LABEL_154;
        }
        v10 = *(unsigned __int16 *)((char *)v85 + v87);
        v87 += 4;
        v11 = *v8;
        if (!*v8)
          goto LABEL_151;
        v12 = *(unsigned __int16 *)((char *)v85 + v9 - 2);
        v13 = v8;
        do
        {
          v14 = *(_DWORD *)(v11 + 28);
          v15 = v14 >= v10;
          if (v14 >= v10)
            v16 = (uint64_t *)v11;
          else
            v16 = (uint64_t *)(v11 + 8);
          if (v15)
            v13 = (_QWORD *)v11;
          v11 = *v16;
        }
        while (*v16);
        if (v13 == v8 || *((_DWORD *)v13 + 7) > v10)
        {
LABEL_151:
          v73 = 169;
          v74 = "decoderMapIter != propertyContext.decoderMap.end()";
          v75 = "Property Type read from set that wasnt in the Property Info Chapter";
LABEL_154:
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v75, v74, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/TextLayerData_Generated.cpp", v73);
          v5 = v6;
          return v5 & 1;
        }
        v84 = v7;
        v81 = v6;
        if (v12)
          break;
LABEL_147:
        v7 = v84 + 1;
        v5 = 1;
        v6 = v84 + 1 >= v82;
        v8 = v80;
        if (v84 + 1 == v82)
          return v5 & 1;
      }
      v17 = 0;
      while (1)
      {
        v18 = v86;
        v19 = v87;
        v20 = v87 + 2;
        if (v86 < v87 + 2)
          break;
        v87 += 2;
        v21 = *((unsigned __int8 *)v13 + 32);
        if (v10 <= 6
          && (_DWORD)v21 == (0x41008040401uLL >> (8 * v10))
          && (v22 = v85,
              v23 = *(unsigned __int16 *)((char *)v85 + v19),
              grl::propertyTypeFromPropertyID(v23) == v10))
        {
          v26 = v23 - 2;
          v27 = (int *)((char *)v22 + v20);
          switch(v23)
          {
            case 2u:
              if (v19 + 6 <= v18)
              {
                v28 = *v27;
                v87 = v19 + 6;
                *(_DWORD *)(a1 + 72) = v28;
              }
              goto LABEL_28;
            case 3u:
              if (v19 + 6 <= v18)
              {
                v29 = *v27;
                v87 = v19 + 6;
                *(_DWORD *)(a1 + 136) = v29;
              }
              goto LABEL_28;
            case 4u:
              if (v19 + 6 <= v18)
              {
                v30 = *v27;
                v87 = v19 + 6;
                if (v19 + 10 <= v18)
                {
                  v31 = *(_DWORD *)((char *)v22 + v19 + 6);
                  v87 = v19 + 10;
                  *(_DWORD *)(a1 + 128) = v30;
                  *(_DWORD *)(a1 + 132) = v31;
                }
              }
              goto LABEL_28;
            case 5u:
              if (v19 + 3 > v18)
              {
                v32 = v19 + 3;
              }
              else
              {
                v87 = v19 + 3;
                v26 = *(_BYTE *)v27;
                v32 = v19 + 4;
                v20 = v19 + 3;
              }
              if (v32 > v18)
              {
                v49 = v32;
              }
              else
              {
                v87 = v32;
                v24 = *((_BYTE *)v22 + v20);
                v49 = v32 + 1;
                v20 = v32;
              }
              if (v49 > v18)
              {
                v54 = v49;
              }
              else
              {
                v87 = v49;
                v25 = *((_BYTE *)v22 + v20);
                v54 = v49 + 1;
                v20 = v49;
              }
              if (v54 <= v18)
              {
                v87 = v54;
                if (v19 + 3 <= v18 && v32 <= v18 && v49 <= v18)
                {
                  v59 = *((_BYTE *)v22 + v20);
                  *(_BYTE *)(a1 + 32) = v26;
                  *(_BYTE *)(a1 + 33) = v24;
                  *(_BYTE *)(a1 + 34) = v25;
                  *(_BYTE *)(a1 + 35) = v59;
                }
              }
              goto LABEL_28;
            case 6u:
              if (v19 + 3 > v18)
              {
                v33 = v19 + 3;
              }
              else
              {
                v87 = v19 + 3;
                v26 = *(_BYTE *)v27;
                v33 = v19 + 4;
                v20 = v19 + 3;
              }
              if (v33 > v18)
              {
                v50 = v33;
              }
              else
              {
                v87 = v33;
                v24 = *((_BYTE *)v22 + v20);
                v50 = v33 + 1;
                v20 = v33;
              }
              if (v50 > v18)
              {
                v55 = v50;
              }
              else
              {
                v87 = v50;
                v25 = *((_BYTE *)v22 + v20);
                v55 = v50 + 1;
                v20 = v50;
              }
              if (v55 <= v18)
              {
                v87 = v55;
                if (v19 + 3 <= v18 && v33 <= v18 && v50 <= v18)
                {
                  v60 = *((_BYTE *)v22 + v20);
                  *(_BYTE *)(a1 + 68) = v26;
                  *(_BYTE *)(a1 + 69) = v24;
                  *(_BYTE *)(a1 + 70) = v25;
                  *(_BYTE *)(a1 + 71) = v60;
                }
              }
              goto LABEL_28;
            case 7u:
              if (v19 + 3 > v18)
              {
                v34 = v19 + 3;
              }
              else
              {
                v87 = v19 + 3;
                v26 = *(_BYTE *)v27;
                v34 = v19 + 4;
                v20 = v19 + 3;
              }
              if (v34 > v18)
              {
                v51 = v34;
              }
              else
              {
                v87 = v34;
                v24 = *((_BYTE *)v22 + v20);
                v51 = v34 + 1;
                v20 = v34;
              }
              if (v51 > v18)
              {
                v56 = v51;
              }
              else
              {
                v87 = v51;
                v25 = *((_BYTE *)v22 + v20);
                v56 = v51 + 1;
                v20 = v51;
              }
              if (v56 <= v18)
              {
                v87 = v56;
                if (v19 + 3 <= v18 && v34 <= v18 && v51 <= v18)
                {
                  v61 = *((_BYTE *)v22 + v20);
                  *(_BYTE *)(a1 + 124) = v26;
                  *(_BYTE *)(a1 + 125) = v24;
                  *(_BYTE *)(a1 + 126) = v25;
                  *(_BYTE *)(a1 + 127) = v61;
                }
              }
              goto LABEL_28;
            case 0xAu:
              if (v19 + 6 <= v18)
              {
                v35 = *v27;
                v87 = v19 + 6;
                if (v19 + 10 <= v18)
                {
                  v36 = *(_DWORD *)((char *)v22 + v19 + 6);
                  v87 = v19 + 10;
                  *(_DWORD *)(a1 + 76) = v35;
                  *(_DWORD *)(a1 + 80) = v36;
                }
              }
              goto LABEL_28;
            case 0xFu:
              if (v19 + 3 <= v18)
              {
                v87 = v19 + 3;
                *(_BYTE *)(a1 + 176) = *(_BYTE *)v27 != 0;
              }
              goto LABEL_28;
            case 0x16u:
              if (v19 + 6 <= v18)
              {
                v37 = *v27;
                v87 = v19 + 6;
                *(_DWORD *)(a1 + 64) = v37;
              }
              goto LABEL_28;
            case 0x17u:
              if (v19 + 6 <= v18)
              {
                v38 = *v27;
                v87 = v19 + 6;
                *(_DWORD *)(a1 + 112) = v38;
              }
              goto LABEL_28;
            case 0x18u:
              if (v18 == v20)
                goto LABEL_28;
              v39 = 0;
              while (*((_BYTE *)v22 + v19 + v39 + 2))
              {
                if (v18 - v20 == ++v39)
                  goto LABEL_28;
              }
              std::string::basic_string[abi:nn180100](&__dst, v27, v39);
              v87 = v19 + v39 + 3;
              v64 = __dst;
              v91[0] = *(_QWORD *)v89;
              *(_QWORD *)((char *)v91 + 7) = *(_QWORD *)&v89[7];
              v65 = v90;
              v66 = a1;
              if (*(char *)(a1 + 63) < 0)
              {
                operator delete(*(void **)(a1 + 40));
                v66 = a1;
              }
              *(_QWORD *)(v66 + 40) = v64;
              *v77 = v91[0];
              *(_QWORD *)((char *)v77 + 7) = *(_QWORD *)((char *)v91 + 7);
              *(_BYTE *)(v66 + 63) = v65;
              goto LABEL_28;
            case 0x19u:
              if (v18 == v20)
                goto LABEL_28;
              v40 = 0;
              while (*((_BYTE *)v22 + v19 + v40 + 2))
              {
                if (v18 - v20 == ++v40)
                  goto LABEL_28;
              }
              std::string::basic_string[abi:nn180100](&__dst, v27, v40);
              v87 = v19 + v40 + 3;
              v67 = __dst;
              v91[0] = *(_QWORD *)v89;
              *(_QWORD *)((char *)v91 + 7) = *(_QWORD *)&v89[7];
              v68 = v90;
              v69 = a1;
              if (*(char *)(a1 + 111) < 0)
              {
                operator delete(*(void **)(a1 + 88));
                v69 = a1;
              }
              *(_QWORD *)(v69 + 88) = v67;
              *v78 = v91[0];
              *(_QWORD *)((char *)v78 + 7) = *(_QWORD *)((char *)v91 + 7);
              *(_BYTE *)(v69 + 111) = v68;
              goto LABEL_28;
            case 0x1Au:
              if (v19 + 3 > v18)
              {
                v41 = v19 + 3;
              }
              else
              {
                v87 = v19 + 3;
                v26 = *(_BYTE *)v27;
                v41 = v19 + 4;
                v20 = v19 + 3;
              }
              if (v41 > v18)
              {
                v52 = v41;
              }
              else
              {
                v87 = v41;
                v24 = *((_BYTE *)v22 + v20);
                v52 = v41 + 1;
                v20 = v41;
              }
              if (v52 > v18)
              {
                v57 = v52;
              }
              else
              {
                v87 = v52;
                v25 = *((_BYTE *)v22 + v20);
                v57 = v52 + 1;
                v20 = v52;
              }
              if (v57 <= v18)
              {
                v87 = v57;
                if (v19 + 3 <= v18 && v41 <= v18 && v52 <= v18)
                {
                  v62 = *((_BYTE *)v22 + v20);
                  *(_BYTE *)(a1 + 84) = v26;
                  *(_BYTE *)(a1 + 85) = v24;
                  *(_BYTE *)(a1 + 86) = v25;
                  *(_BYTE *)(a1 + 87) = v62;
                }
              }
              goto LABEL_28;
            case 0x1Cu:
              if (v18 == v20)
                goto LABEL_28;
              v42 = 0;
              break;
            case 0x1Du:
              if (v19 + 6 <= v18)
              {
                v43 = *v27;
                v87 = v19 + 6;
                *(_DWORD *)(a1 + 120) = v43;
              }
              goto LABEL_28;
            case 0x1Eu:
              if (v19 + 3 > v18)
              {
                v44 = v19 + 3;
              }
              else
              {
                v87 = v19 + 3;
                v26 = *(_BYTE *)v27;
                v44 = v19 + 4;
                v20 = v19 + 3;
              }
              if (v44 > v18)
              {
                v53 = v44;
              }
              else
              {
                v87 = v44;
                v24 = *((_BYTE *)v22 + v20);
                v53 = v44 + 1;
                v20 = v44;
              }
              if (v53 > v18)
              {
                v58 = v53;
              }
              else
              {
                v87 = v53;
                v25 = *((_BYTE *)v22 + v20);
                v58 = v53 + 1;
                v20 = v53;
              }
              if (v58 <= v18)
              {
                v87 = v58;
                if (v19 + 3 <= v18 && v44 <= v18 && v53 <= v18)
                {
                  v63 = *((_BYTE *)v22 + v20);
                  *(_BYTE *)(a1 + 116) = v26;
                  *(_BYTE *)(a1 + 117) = v24;
                  *(_BYTE *)(a1 + 118) = v25;
                  *(_BYTE *)(a1 + 119) = v63;
                }
              }
              goto LABEL_28;
            case 0x1Fu:
              *(_BYTE *)(a1 + 177) = 1;
              if (v19 + 6 <= v18)
              {
                v45 = *v27;
                v87 = v19 + 6;
                if (v19 + 10 <= v18)
                {
                  v46 = *(_DWORD *)((char *)v22 + v19 + 6);
                  v87 = v19 + 10;
                  *(_DWORD *)(a1 + 168) = v45;
                  *(_DWORD *)(a1 + 172) = v46;
                }
              }
              goto LABEL_28;
            case 0x23u:
              if (v19 + 6 <= v18)
              {
                v87 = v19 + 6;
                v48 = *(_DWORD *)((char *)v22 + v19 + 2);
                v47 = a1;
              }
              else
              {
                v47 = a1;
                LOBYTE(v48) = *(_BYTE *)(a1 + 36);
              }
              *(_BYTE *)(v47 + 36) = v48;
              goto LABEL_28;
            default:
              goto LABEL_27;
          }
          while (*((_BYTE *)v22 + v19 + v42 + 2))
          {
            if (v18 - v20 == ++v42)
              goto LABEL_28;
          }
          std::string::basic_string[abi:nn180100](&__dst, v27, v42);
          v87 = v19 + v42 + 3;
          v70 = __dst;
          v91[0] = *(_QWORD *)v89;
          *(_QWORD *)((char *)v91 + 7) = *(_QWORD *)&v89[7];
          v71 = v90;
          v72 = a1;
          if (*(char *)(a1 + 167) < 0)
          {
            operator delete(*(void **)(a1 + 144));
            v72 = a1;
          }
          *(_QWORD *)(v72 + 144) = v70;
          *v79 = v91[0];
          *(_QWORD *)((char *)v79 + 7) = *(_QWORD *)((char *)v91 + 7);
          *(_BYTE *)(v72 + 167) = v71;
        }
        else
        {
LABEL_27:
          grl::SkipStreamBytes(&v85, v21);
        }
LABEL_28:
        if (++v17 == v12)
          goto LABEL_147;
      }
      printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property ID could not be read", "propertyIDValue.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/TextLayerData_Generated.cpp", 173);
      v5 = v81;
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property Type Count could not be read", "numPropertyTypes.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/TextLayerData_Generated.cpp", 158);
    v5 = 0;
  }
  return v5 & 1;
}

BOOL grl::codec::ResourcePack::decodePackChunk(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v8;
  BOOL v9;
  size_t v10;

  v5 = *a2;
  if (*a2)
  {
    std::istream::seekg();
    v8 = a5[1] - *a5;
    v9 = a4 >= v8;
    v10 = a4 - v8;
    if (v10 != 0 && v9)
    {
      std::vector<unsigned char>::__append(a5, v10);
    }
    else if (!v9)
    {
      a5[1] = *a5 + a4;
    }
    std::istream::read();
  }
  else
  {
    printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Pack Stream Is Invalid", "packStream", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/ResourcePack.cpp", 324);
  }
  return v5 != 0;
}

grl::codec::ColorLayerData *grl::codec::ColorLayerData::ColorLayerData(grl::codec::ColorLayerData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  char v7;

  v6 = 515;
  v7 = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v2 = grl::Allocator::instance(this);
  *((_QWORD *)this + 3) = v2;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 3, 1);
  v4 = 0;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 2) = v3 + 3;
  do
  {
    if (v3 + v4)
      *(_BYTE *)(v3 + v4) = *((_BYTE *)&v6 + v4);
    ++v4;
  }
  while (v4 != 3);
  *((_QWORD *)this + 1) = v3 + 3;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = -1;
  *((_DWORD *)this + 10) = 1119092736;
  *((_WORD *)this + 22) = 257;
  return this;
}

uint64_t grl::codec::ColorLayerData::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _WORD *v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  signed int v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  const char *v36;
  const char *v37;
  _QWORD *v39;
  char i;
  unsigned int v41;
  int v42;
  _WORD *v44;
  unint64_t v45;
  uint64_t v46;

  v3 = *(_WORD **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v44 = *(_WORD **)a2;
  v45 = v4;
  if (v4 >= 2)
  {
    v46 = 2;
    v41 = (unsigned __int16)*v3;
    if (!*v3)
    {
      v5 = 1;
      return v5 & 1;
    }
    v6 = 0;
    v7 = 0;
    v8 = (_QWORD *)(a3 + 8);
    v39 = (_QWORD *)(a3 + 8);
    while (v46 + 2 <= v45)
    {
      v9 = v46 + 4;
      if (v46 + 4 > v45)
      {
        v35 = 91;
        v36 = "numPropertiesForType.has_value()";
        v37 = "Property Count could not be read";
        goto LABEL_65;
      }
      v10 = *(unsigned __int16 *)((char *)v44 + v46);
      v46 += 4;
      v11 = *v8;
      if (!*v8)
        goto LABEL_62;
      v12 = *(unsigned __int16 *)((char *)v44 + v9 - 2);
      v13 = v8;
      do
      {
        v14 = *(_DWORD *)(v11 + 28);
        v15 = v14 >= v10;
        if (v14 >= v10)
          v16 = (uint64_t *)v11;
        else
          v16 = (uint64_t *)(v11 + 8);
        if (v15)
          v13 = (_QWORD *)v11;
        v11 = *v16;
      }
      while (*v16);
      if (v13 == v8 || *((_DWORD *)v13 + 7) > v10)
      {
LABEL_62:
        v35 = 94;
        v36 = "decoderMapIter != propertyContext.decoderMap.end()";
        v37 = "Property Type read from set that wasnt in the Property Info Chapter";
LABEL_65:
        printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", v37, v36, "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ColorLayerData_Generated.cpp", v35);
        v5 = v6;
        return v5 & 1;
      }
      v42 = v7;
      for (i = v6; v12; --v12)
      {
        v17 = v45;
        v18 = v46;
        v19 = v46 + 2;
        if (v46 + 2 > v45)
        {
          printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property ID could not be read", "propertyIDValue.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ColorLayerData_Generated.cpp", 98);
          v5 = i;
          return v5 & 1;
        }
        v46 += 2;
        v20 = *((unsigned __int8 *)v13 + 32);
        if (v10 <= 6 && (_DWORD)v20 == (0x41008040401uLL >> (8 * v10)))
        {
          v21 = v44;
          v22 = *(unsigned __int16 *)((char *)v44 + v18);
          if (grl::propertyTypeFromPropertyID(v22) == v10)
          {
            if (v22 <= 14)
            {
              if (v22 == 5)
              {
                if (v18 + 3 > v17)
                {
                  v31 = v18 + 3;
                }
                else
                {
                  v46 = v18 + 3;
                  v23 = *((_BYTE *)v21 + v19);
                  v31 = v18 + 4;
                  v19 = v18 + 3;
                }
                if (v31 > v17)
                {
                  v32 = v31;
                }
                else
                {
                  v46 = v31;
                  v24 = *((_BYTE *)v21 + v19);
                  v32 = v31 + 1;
                  v19 = v31;
                }
                if (v32 > v17)
                {
                  v33 = v32;
                }
                else
                {
                  v46 = v32;
                  v25 = *((_BYTE *)v21 + v19);
                  v33 = v32 + 1;
                  v19 = v32;
                }
                if (v33 <= v17)
                {
                  v46 = v33;
                  if (v18 + 3 <= v17 && v31 <= v17 && v32 <= v17)
                  {
                    v34 = *((_BYTE *)v21 + v19);
                    *(_BYTE *)(a1 + 33) = v23;
                    *(_BYTE *)(a1 + 34) = v24;
                    *(_BYTE *)(a1 + 35) = v25;
                    *(_BYTE *)(a1 + 36) = v34;
                  }
                }
                continue;
              }
              if (v22 == 8)
              {
                if (v18 + 6 <= v17)
                {
                  v46 = v18 + 6;
                  v29 = *(_DWORD *)((char *)v21 + v18 + 2);
                  v28 = a1;
                }
                else
                {
                  v28 = a1;
                  LOBYTE(v29) = *(_BYTE *)(a1 + 32);
                }
                *(_BYTE *)(v28 + 32) = v29;
                continue;
              }
            }
            else
            {
              switch(v22)
              {
                case 15:
                  if (v18 + 3 <= v17)
                  {
                    v46 = v18 + 3;
                    *(_BYTE *)(a1 + 45) = *((_BYTE *)v21 + v19) != 0;
                  }
                  continue;
                case 39:
                  if (v18 + 6 <= v17)
                  {
                    v30 = *(_DWORD *)((char *)v21 + v19);
                    v46 = v18 + 6;
                    *(_DWORD *)(a1 + 40) = v30;
                  }
                  continue;
                case 40:
                  if (v18 + 6 <= v17)
                  {
                    v46 = v18 + 6;
                    v27 = *(_DWORD *)((char *)v21 + v18 + 2);
                    v26 = a1;
                  }
                  else
                  {
                    v26 = a1;
                    LOBYTE(v27) = *(_BYTE *)(a1 + 44);
                  }
                  *(_BYTE *)(v26 + 44) = v27;
                  continue;
              }
            }
          }
        }
        grl::SkipStreamBytes(&v44, v20);
      }
      v7 = v42 + 1;
      v5 = 1;
      v6 = v42 + 1 >= v41;
      v8 = v39;
      if (v42 + 1 == v41)
        return v5 & 1;
    }
    v35 = 87;
    v36 = "propertyTypeValue.has_value()";
    v37 = "Property Type could not be read";
    goto LABEL_65;
  }
  printf("\n%s : Parse Error Here: - %s : Failed in file - %s line - %i\n", "Property Type Count could not be read", "numPropertyTypes.has_value()", "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/Codec/ColorLayerData_Generated.cpp", 83);
  v5 = 0;
  return v5 & 1;
}

void gdc::ResourceManager::cleanupResources(gdc::ResourceManager *this)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  unsigned __int8 *v8;
  NSObject *v9;
  std::string *p_buf;
  uint64_t v11;
  const char *v12;
  int v13;
  char *v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  char *size;
  char *v20;
  std::string::size_type v21;
  _BYTE *v22;
  unint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  _BYTE *v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  _BOOL4 v51;
  uint64_t **v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  BOOL v64;
  void *v65;
  int8x8_t v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  std::__shared_weak_count *v80;
  _QWORD *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  unsigned __int8 *v84;
  uint64_t **v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t **v93;
  void *v94;
  void *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  std::__shared_weak_count *v115;
  void *v116;
  unint64_t *v117;
  unint64_t v118;
  gdc::ResourceManager *v119;
  uint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::string buf;
  _QWORD *v124;
  uint64_t v125;
  _QWORD v126[5];
  __int128 v127;
  int v128;
  _QWORD v129[3];
  _QWORD *v130;
  uint8_t v131[4];
  std::string *v132;
  __int16 v133;
  const char *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v2 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_DEBUG, "cleanupResourceRequests", (uint8_t *)&buf, 2u);
  }

  v3 = (_QWORD *)*((_QWORD *)this + 38);
  v129[0] = &off_1E42D5A88;
  v129[1] = this;
  v4 = v129;
  v130 = v129;
  v5 = (char *)v3[3];
  if (!v5)
  {
    v77 = 4;
LABEL_123:
    (*(void (**)(void))(*v4 + 8 * v77))();
    goto LABEL_124;
  }
  v6 = (uint64_t **)(v3 + 7);
  v119 = this;
  do
  {
    if (*((uint64_t *)v5 + 15) >= 1)
    {
      v7 = *(char **)v5;
      goto LABEL_8;
    }
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v8 = (unsigned __int8 *)(v5 + 16);
    v9 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)v5 + 16);
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v11 = *((unsigned int *)v5 + 28);
      v12 = "<Invalid>";
      if (v11 <= 4)
        v12 = off_1E42FB258[v11];
      *(_DWORD *)v131 = 136315394;
      v132 = p_buf;
      v133 = 2080;
      v134 = v12;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_DEBUG, "Removing %s from Resource status container, status is: %s", v131, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }

    v13 = *((_DWORD *)v5 + 28);
    buf.__r_.__value_.__r.__words[0] = *((_QWORD *)v5 + 2);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v126;
    v124 = v126;
    v125 = 32;
    v15 = (char *)*((_QWORD *)v5 + 3);
    v14 = (char *)*((_QWORD *)v5 + 4);
    v16 = v14 - v15;
    v17 = v126;
    if ((unint64_t)(v14 - v15) >= 0x21)
    {
      if (v16 <= 0x40)
        v18 = 64;
      else
        v18 = v14 - v15;
      v17 = malloc_type_malloc(v18, 0x100004077774924uLL);
      v20 = (char *)buf.__r_.__value_.__r.__words[2];
      size = (char *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[2])
        goto LABEL_39;
      v21 = buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_ < 8)
      {
        v22 = v17;
        goto LABEL_38;
      }
      v22 = v17;
      if ((unint64_t)v17 - buf.__r_.__value_.__l.__size_ < 0x20)
        goto LABEL_38;
      if (v21 >= 0x20)
      {
        v23 = v21 & 0xFFFFFFFFFFFFFFE0;
        v24 = (__int128 *)(buf.__r_.__value_.__l.__size_ + 16);
        v25 = v17 + 2;
        v26 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *v25 = v27;
          v24 += 2;
          v25 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v21 == v23)
          goto LABEL_39;
        if ((v21 & 0x18) == 0)
        {
          size += v23;
          v22 = (char *)v17 + v23;
          goto LABEL_38;
        }
      }
      else
      {
        v23 = 0;
      }
      v28 = v21 & 0xFFFFFFFFFFFFFFF8;
      v22 = (char *)v17 + (v21 & 0xFFFFFFFFFFFFFFF8);
      v29 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
      v30 = (uint64_t *)&size[v23];
      v31 = (_QWORD *)((char *)v17 + v23);
      do
      {
        v32 = *v30++;
        *v31++ = v32;
        v29 += 8;
      }
      while (v29);
      if (v21 == v28)
        goto LABEL_39;
      size += v28;
      do
      {
LABEL_38:
        v33 = *size++;
        *v22++ = v33;
      }
      while (size != v20);
LABEL_39:
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
      v125 = v18;
    }
    if (v15 != v14)
    {
      if (v16 < 8)
      {
        v35 = v17;
        goto LABEL_56;
      }
      if ((unint64_t)((char *)v17 - v15) < 0x20)
      {
        v35 = v17;
        goto LABEL_56;
      }
      if (v16 >= 0x20)
      {
        v34 = v16 & 0xFFFFFFFFFFFFFFE0;
        v36 = (__int128 *)(v15 + 16);
        v37 = v17 + 2;
        v38 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v16 == v34)
          goto LABEL_57;
        if ((v16 & 0x18) == 0)
        {
          v15 += v34;
          v35 = (char *)v17 + v34;
          goto LABEL_56;
        }
      }
      else
      {
        v34 = 0;
      }
      v40 = v16 & 0xFFFFFFFFFFFFFFF8;
      v35 = (char *)v17 + (v16 & 0xFFFFFFFFFFFFFFF8);
      v41 = v34 - (v16 & 0xFFFFFFFFFFFFFFF8);
      v42 = (uint64_t *)&v15[v34];
      v43 = (_QWORD *)((char *)v17 + v34);
      do
      {
        v44 = *v42++;
        *v43++ = v44;
        v41 += 8;
      }
      while (v41);
      if (v16 == v40)
        goto LABEL_57;
      v15 += v40;
      do
      {
LABEL_56:
        v45 = *v15++;
        *v35++ = v45;
      }
      while (v15 != v14);
LABEL_57:
      v17 = (_QWORD *)buf.__r_.__value_.__r.__words[2];
    }
    v46 = *((_QWORD *)v5 + 11);
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v17 + v16;
    v126[4] = v46;
    v127 = *((_OWORD *)v5 + 6);
    v128 = v13;
    v47 = *v6;
    if (*v6)
    {
      v48 = *((unsigned __int16 *)v5 + 9);
      v49 = v3 + 7;
      v50 = *v6;
      do
      {
        v53 = *((unsigned __int16 *)v50 + 17);
        v54 = v53 >= v48;
        if (v53 == v48 && (v55 = *((unsigned __int8 *)v50 + 32), v56 = *v8, v54 = v55 >= v56, v55 == v56))
          v51 = gdc::GenericKey::operator<(v50[5], v50[6], *((_QWORD *)v5 + 3), *((_QWORD *)v5 + 4));
        else
          v51 = !v54;
        v52 = (uint64_t **)(v50 + 1);
        if (!v51)
        {
          v52 = (uint64_t **)v50;
          v49 = v50;
        }
        v50 = *v52;
      }
      while (*v52);
      if (v49 != (uint64_t *)v6)
      {
        v57 = *((unsigned __int16 *)v49 + 17);
        v58 = v48 >= v57;
        if (v48 == v57 && (v59 = *v8, v60 = *((unsigned __int8 *)v49 + 32), v58 = v59 >= v60, v59 == v60))
        {
          if (gdc::GenericKey::operator<(*((_QWORD *)v5 + 3), *((_QWORD *)v5 + 4), v49[5], v49[6]))
            goto LABEL_86;
        }
        else if (!v58)
        {
          goto LABEL_86;
        }
        v61 = (uint64_t *)v49[1];
        v62 = v49;
        if (v61)
        {
          do
          {
            v63 = v61;
            v61 = (uint64_t *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v63 = (uint64_t *)v62[2];
            v64 = *v63 == (_QWORD)v62;
            v62 = v63;
          }
          while (!v64);
        }
        if ((uint64_t *)v3[6] == v49)
          v3[6] = v63;
        --v3[8];
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v47, v49);
        v65 = (void *)v49[5];
        if (v65 != (void *)v49[7])
          free(v65);
        operator delete(v49);
      }
    }
LABEL_86:
    v66 = (int8x8_t)v3[2];
    v7 = *(char **)v5;
    v67 = *((_QWORD *)v5 + 1);
    v68 = (uint8x8_t)vcnt_s8(v66);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      this = v119;
      if (v67 >= *(_QWORD *)&v66)
        v67 %= *(_QWORD *)&v66;
    }
    else
    {
      v67 &= *(_QWORD *)&v66 - 1;
      this = v119;
    }
    v69 = v3[1];
    v70 = *(uint64_t **)(v69 + 8 * v67);
    do
    {
      v71 = v70;
      v70 = (uint64_t *)*v70;
    }
    while (v70 != (uint64_t *)v5);
    if (v71 == v3 + 3)
      goto LABEL_192;
    v72 = v71[1];
    if (v68.u32[0] > 1uLL)
    {
      if (v72 >= *(_QWORD *)&v66)
        v72 %= *(_QWORD *)&v66;
    }
    else
    {
      v72 &= *(_QWORD *)&v66 - 1;
    }
    v73 = *(_QWORD *)v5;
    if (v72 != v67)
    {
LABEL_192:
      if (v7)
      {
        v74 = *((_QWORD *)v7 + 1);
        if (v68.u32[0] > 1uLL)
        {
          if (v74 >= *(_QWORD *)&v66)
            v74 %= *(_QWORD *)&v66;
        }
        else
        {
          v74 &= *(_QWORD *)&v66 - 1;
        }
        v73 = *(_QWORD *)v5;
        if (v74 == v67)
        {
LABEL_106:
          v75 = *(_QWORD *)(v73 + 8);
          if (v68.u32[0] > 1uLL)
          {
            if (v75 >= *(_QWORD *)&v66)
              v75 %= *(_QWORD *)&v66;
          }
          else
          {
            v75 &= *(_QWORD *)&v66 - 1;
          }
          if (v75 != v67)
          {
            *(_QWORD *)(v3[1] + 8 * v75) = v71;
            v73 = *(_QWORD *)v5;
          }
          goto LABEL_112;
        }
      }
      *(_QWORD *)(v69 + 8 * v67) = 0;
      v73 = *(_QWORD *)v5;
    }
    if (v73)
      goto LABEL_106;
LABEL_112:
    *v71 = v73;
    *(_QWORD *)v5 = 0;
    --v3[4];
    v76 = (void *)*((_QWORD *)v5 + 3);
    if (v76 != *((void **)v5 + 5))
      free(v76);
    operator delete(v5);
    if (v130)
      (*(void (**)(_QWORD *, std::string *))(*v130 + 48))(v130, &buf);
    if ((_QWORD *)buf.__r_.__value_.__l.__size_ != v124)
      free((void *)buf.__r_.__value_.__l.__size_);
LABEL_8:
    v5 = v7;
  }
  while (v7);
  v4 = v130;
  if (v130 == v129)
  {
    v77 = 4;
    v4 = v129;
    goto LABEL_123;
  }
  if (v130)
  {
    v77 = 5;
    goto LABEL_123;
  }
LABEL_124:
  v78 = *((_QWORD *)this + 7);
  v121 = *((_QWORD *)this + 8);
  if (v78 != v121)
  {
    v120 = *((_QWORD *)this + 38);
    v79 = (unsigned __int8 *)(v120 + 56);
    while (1)
    {
      v81 = *(_QWORD **)(v78 + 8);
      v80 = *(std::__shared_weak_count **)(v78 + 16);
      if (v80)
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v83 = __ldxr(p_shared_owners);
        while (__stxr(v83 + 1, p_shared_owners));
      }
      v122 = v80;
      v84 = *(unsigned __int8 **)(v120 + 48);
      if (v84 != v79)
      {
        do
        {
          v85 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v81 + 46, v84 + 32);
          if (v85)
            v85[14] = geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::_elementAccessed(v81 + 43, v85[14]);
          v86 = (unsigned __int8 *)*((_QWORD *)v84 + 1);
          if (v86)
          {
            do
            {
              v87 = v86;
              v86 = *(unsigned __int8 **)v86;
            }
            while (v86);
          }
          else
          {
            do
            {
              v87 = (unsigned __int8 *)*((_QWORD *)v84 + 2);
              v64 = *(_QWORD *)v87 == (_QWORD)v84;
              v84 = v87;
            }
            while (!v64);
          }
          v84 = v87;
        }
        while (v87 != v79);
      }
      v88 = v81[44];
      v89 = (uint64_t *)v81[51];
      if ((uint64_t *)v88 != v89)
      {
        v90 = 0;
        v91 = v81[49] + 1;
        while (--v91)
        {
          v92 = *(_QWORD *)(v88 + 128);
          v93 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v81 + 46, (unsigned __int8 *)(v88 + 16));
          if (v93)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&buf, v81 + 46, v93);
            v94 = (void *)buf.__r_.__value_.__r.__words[0];
            if (buf.__r_.__value_.__r.__words[0])
            {
              if (buf.__r_.__value_.__s.__data_[16])
              {
                v95 = *(void **)(buf.__r_.__value_.__r.__words[0] + 24);
                if (v95 != *(void **)(buf.__r_.__value_.__r.__words[0] + 40))
                  free(v95);
              }
              operator delete(v94);
            }
            v89 = (uint64_t *)v81[51];
          }
          v90 += v92;
          v88 = *(_QWORD *)(v88 + 8);
          if ((uint64_t *)v88 == v89)
            goto LABEL_153;
        }
        v89 = (uint64_t *)v88;
LABEL_153:
        v96 = (uint64_t *)v81[44];
        if (v96 != v89)
        {
          v97 = *v89;
          v98 = *v96;
          *(_QWORD *)(v98 + 8) = *(_QWORD *)(*v89 + 8);
          **(_QWORD **)(v97 + 8) = v98;
          do
          {
            v99 = (uint64_t *)v96[1];
            --v81[45];
            v100 = (std::__shared_weak_count *)v96[15];
            if (v100)
            {
              v101 = (unint64_t *)&v100->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            v103 = (void *)v96[3];
            if (v103 != (void *)v96[5])
              free(v103);
            operator delete(v96);
            v96 = v99;
          }
          while (v99 != v89);
        }
        v104 = v81[52];
        v54 = v104 >= v90;
        v105 = v104 - v90;
        if (!v54)
          v105 = 0;
        v81[52] = v105;
      }
      v106 = (_QWORD *)v81[35];
      if (v106)
        break;
LABEL_185:
      if (v122)
      {
        v117 = (unint64_t *)&v122->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v78 += 24;
      if (v78 == v121)
        return;
    }
    while (1)
    {
      v107 = (std::__shared_weak_count *)v106[15];
      if (v107)
      {
        v108 = std::__shared_weak_count::lock(v107);
        if (v108)
        {
          v109 = v108;
          v110 = v106[14];
          v111 = (unint64_t *)&v108->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (v112)
          {
            if (v110)
              goto LABEL_176;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v109);
            if (v110)
            {
LABEL_176:
              v106 = (_QWORD *)*v106;
              if (!v106)
                goto LABEL_185;
              continue;
            }
          }
        }
      }
      v113 = (_QWORD *)*v106;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&buf, v81 + 33, v106);
      v114 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__r.__words[0])
      {
        if (buf.__r_.__value_.__s.__data_[16])
        {
          v115 = *(std::__shared_weak_count **)(buf.__r_.__value_.__r.__words[0] + 120);
          if (v115)
            std::__shared_weak_count::__release_weak(v115);
          v116 = (void *)v114[3];
          if (v116 != (void *)v114[5])
            free(v116);
        }
        operator delete(v114);
      }
      v106 = v113;
      if (!v113)
        goto LABEL_185;
    }
  }
}

void sub_19F099B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v33;
  uint64_t v34;

  v33 = a32;
  if (a32 == &a29)
  {
    v34 = 4;
    v33 = &a29;
  }
  else
  {
    if (!a32)
      _Unwind_Resume(exception_object);
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
  _Unwind_Resume(exception_object);
}

uint64_t **gdc::LayerDataRequest::request(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  char **v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t **result;
  unsigned __int16 *v12;

  v5 = *(unsigned __int16 *)(a2 + 2);
  if (a3)
  {
    v6 = *(unsigned __int16 **)(a1 + 144);
    v7 = *(unsigned __int16 **)(a1 + 152);
    v8 = (char **)(a1 + 144);
    if (v6 != v7)
    {
      v9 = *(unsigned __int16 **)(a1 + 144);
      while (v5 != *v9)
      {
        v9 += 24;
        if (v9 == v7)
          goto LABEL_23;
      }
      if (v9 != v7)
      {
        if (v6 != v7)
        {
          while (v5 != *v6)
          {
            v6 += 24;
            if (v6 == v7)
              goto LABEL_21;
          }
        }
        goto LABEL_22;
      }
    }
  }
  else
  {
    v6 = *(unsigned __int16 **)(a1 + 120);
    v7 = *(unsigned __int16 **)(a1 + 128);
    v8 = (char **)(a1 + 120);
    if (v6 != v7)
    {
      v10 = *(unsigned __int16 **)(a1 + 120);
      while (v5 != *v10)
      {
        v10 += 24;
        if (v10 == v7)
          goto LABEL_23;
      }
      if (v10 != v7)
      {
        if (v6 != v7)
        {
          while (v5 != *v6)
          {
            v6 += 24;
            if (v6 == v7)
            {
LABEL_21:
              v6 = v7;
              break;
            }
          }
        }
LABEL_22:
        result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)v6 + 1, (unsigned __int8 *)a2);
        if (result)
          return result;
      }
    }
  }
LABEL_23:
  v12 = geo::linear_map<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>>>>::operator[](v8, v5);
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)v12, (unsigned __int8 *)a2, a2);
  return (uint64_t **)gdc::ResourceStatusContainer::incrementResourceReference(*(gdc::ResourceStatusContainer **)(a1 + 192), (const gdc::ResourceKey *)a2);
}

void std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  const void *v15;
  size_t v16;
  unint64_t v17;
  uint64_t *v18;
  size_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char *v47;
  __int128 *v48;
  _OWORD *v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  char v57;
  float v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t prime;
  int8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  size_t v70;
  const void *v71;
  const void *v72;
  _QWORD *v73;

  v6 = *a2;
  v7 = *((unsigned __int16 *)a2 + 1);
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = (uint64_t *)*((_QWORD *)a2 + 9);
  v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = (const void *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2) - (_QWORD)v15;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == (uint64_t *)v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
                && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
                && v14[11] == v9)
              {
                v22 = v14[3];
                if ((char *)v14[4] - (char *)v22 == v16)
                {
                  v70 = v16;
                  v72 = v15;
                  v23 = memcmp(v22, v15, v16);
                  v16 = v70;
                  v15 = v72;
                  if (!v23)
                    return;
                }
              }
            }
            else if (((unint64_t)v21 & (v11 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v14 = (uint64_t **)*v14;
            if (!v14)
              goto LABEL_31;
          }
        }
        do
        {
          v17 = (unint64_t)v14[1];
          if (v17 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
              && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
              && v14[11] == v9)
            {
              v18 = v14[3];
              if ((char *)v14[4] - (char *)v18 == v16)
              {
                v71 = v15;
                v19 = v16;
                v20 = memcmp(v18, v15, v16);
                v16 = v19;
                v15 = v71;
                if (!v20)
                  return;
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  v24 = a1 + 16;
  v25 = operator new(0x70uLL);
  v73 = v25;
  *v25 = 0;
  v25[1] = v10;
  v26 = (char *)(v25 + 7);
  v27 = *(char **)(a3 + 8);
  v25[2] = *(_QWORD *)a3;
  v25[3] = v25 + 7;
  v25[5] = v25 + 7;
  v25[6] = 32;
  v28 = *(char **)(a3 + 16);
  v29 = v28 - v27;
  v25[4] = v25 + 7;
  if ((unint64_t)(v28 - v27) >= 0x21)
  {
    if (v29 <= 0x40)
      v30 = 64;
    else
      v30 = v28 - v27;
    v26 = (char *)malloc_type_malloc(v30, 0x100004077774924uLL);
    v31 = (char *)v25[3];
    v32 = (char *)v25[4];
    if (v31 == v32)
      goto LABEL_51;
    v33 = v32 - v31;
    if ((unint64_t)(v32 - v31) < 8)
    {
      v34 = v26;
      goto LABEL_50;
    }
    v34 = v26;
    if ((unint64_t)(v26 - v31) < 0x20)
      goto LABEL_50;
    if (v33 >= 0x20)
    {
      v35 = v33 & 0xFFFFFFFFFFFFFFE0;
      v36 = (__int128 *)(v31 + 16);
      v37 = v26 + 16;
      v38 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v39 = *v36;
        *(v37 - 1) = *(v36 - 1);
        *v37 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 32;
      }
      while (v38);
      if (v33 == v35)
        goto LABEL_51;
      if ((v33 & 0x18) == 0)
      {
        v31 += v35;
        v34 = &v26[v35];
        goto LABEL_50;
      }
    }
    else
    {
      v35 = 0;
    }
    v40 = v33 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v26[v33 & 0xFFFFFFFFFFFFFFF8];
    v41 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
    v42 = (uint64_t *)&v31[v35];
    v43 = &v26[v35];
    do
    {
      v44 = *v42++;
      *(_QWORD *)v43 = v44;
      v43 += 8;
      v41 += 8;
    }
    while (v41);
    if (v33 == v40)
      goto LABEL_51;
    v31 += v40;
    do
    {
LABEL_50:
      v45 = *v31++;
      *v34++ = v45;
    }
    while (v31 != v32);
LABEL_51:
    v25[3] = v26;
    v25[4] = v26;
    v25[6] = v30;
    v24 = a1 + 16;
  }
  if (v27 == v28)
    goto LABEL_70;
  if (v29 < 8)
  {
    v47 = v26;
    goto LABEL_68;
  }
  if ((unint64_t)(v26 - v27) < 0x20)
  {
    v47 = v26;
    goto LABEL_68;
  }
  if (v29 >= 0x20)
  {
    v46 = v29 & 0xFFFFFFFFFFFFFFE0;
    v48 = (__int128 *)(v27 + 16);
    v49 = v26 + 16;
    v50 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v51 = *v48;
      *(v49 - 1) = *(v48 - 1);
      *v49 = v51;
      v48 += 2;
      v49 += 2;
      v50 -= 32;
    }
    while (v50);
    if (v29 == v46)
      goto LABEL_69;
    if ((v29 & 0x18) == 0)
    {
      v27 += v46;
      v47 = &v26[v46];
      goto LABEL_68;
    }
  }
  else
  {
    v46 = 0;
  }
  v52 = v29 & 0xFFFFFFFFFFFFFFF8;
  v47 = &v26[v29 & 0xFFFFFFFFFFFFFFF8];
  v53 = v46 - (v29 & 0xFFFFFFFFFFFFFFF8);
  v54 = (uint64_t *)&v27[v46];
  v55 = &v26[v46];
  do
  {
    v56 = *v54++;
    *(_QWORD *)v55 = v56;
    v55 += 8;
    v53 += 8;
  }
  while (v53);
  if (v29 == v52)
    goto LABEL_69;
  v27 += v52;
  do
  {
LABEL_68:
    v57 = *v27++;
    *v47++ = v57;
  }
  while (v27 != v28);
LABEL_69:
  v26 = (char *)v25[4];
LABEL_70:
  v25[4] = &v26[v29];
  v25[11] = *(_QWORD *)(a3 + 72);
  *((_OWORD *)v25 + 6) = *(_OWORD *)(a3 + 80);
  v58 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v59 = *(float *)(a1 + 32);
  if (!v11 || (float)(v59 * (float)v11) < v58)
  {
    v60 = 1;
    if (v11 >= 3)
      v60 = (v11 & (v11 - 1)) != 0;
    v61 = v60 | (2 * v11);
    v62 = vcvtps_u32_f32(v58 / v59);
    if (v61 <= v62)
      prime = v62;
    else
      prime = v61;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v64 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v64)
      goto LABEL_82;
    if (prime < *(_QWORD *)&v64)
    {
      v65 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v64 < 3uLL || (v66 = (uint8x8_t)vcnt_s8(v64), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
      {
        v65 = std::__next_prime(v65);
      }
      else
      {
        v67 = 1 << -(char)__clz(v65 - 1);
        if (v65 >= 2)
          v65 = v67;
      }
      if (prime <= v65)
        prime = v65;
      if (prime < *(_QWORD *)&v64)
LABEL_82:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v68 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v68)
  {
    *v73 = *v68;
    *v68 = v73;
  }
  else
  {
    *v73 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v24;
    if (*v73)
    {
      v69 = *(_QWORD *)(*v73 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v69 >= v11)
          v69 %= v11;
      }
      else
      {
        v69 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v69) = v73;
    }
  }
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F09A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::ResourceKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::ResourceKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int16 *geo::linear_map<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>>>>::operator[](char **a1, unsigned __int16 a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v34;
  void *v35;
  void *__p[2];
  void *v37[2];
  int v38;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a1;
  if (*a1 != v5)
  {
    v6 = *a1;
    while (*(unsigned __int16 *)v6 != a2)
    {
      v6 += 48;
      if (v6 == v5)
        goto LABEL_7;
    }
  }
  if (v6 == v5)
  {
LABEL_7:
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v37 = 0u;
    v38 = 1065353216;
    v6 = v4;
    if (v4 != v5)
    {
      while (*(unsigned __int16 *)v6 != a2)
      {
        v6 += 48;
        if (v6 == v5)
          goto LABEL_12;
      }
    }
    if (v6 == v5)
    {
LABEL_12:
      v7 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v7)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4);
        v10 = v9 + 1;
        if (v9 + 1 > 0x555555555555555)
          abort();
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v4) >> 4);
        if (2 * v11 > v10)
          v10 = 2 * v11;
        if (v11 >= 0x2AAAAAAAAAAAAAALL)
          v12 = 0x555555555555555;
        else
          v12 = v10;
        if (v12)
        {
          if (v12 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v13 = (char *)operator new(48 * v12);
        }
        else
        {
          v13 = 0;
        }
        v15 = &v13[48 * v12];
        v14 = &v13[48 * v9];
        *(_WORD *)v14 = a2;
        v8 = v14 + 48;
        std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::unordered_set((uint64_t)(v14 + 8), (uint64_t)__p);
        v16 = *a1;
        v17 = a1[1];
        if (v17 == *a1)
        {
          *a1 = v14;
          a1[1] = v8;
          a1[2] = v15;
        }
        else
        {
          v18 = 0;
          do
          {
            v20 = &v14[v18];
            v21 = &v17[v18];
            *((_WORD *)v20 - 24) = *(_WORD *)&v17[v18 - 48];
            v22 = *(_QWORD *)&v17[v18 - 40];
            *((_QWORD *)v21 - 5) = 0;
            *((_QWORD *)v20 - 5) = v22;
            *((_QWORD *)v20 - 4) = *(_QWORD *)&v17[v18 - 32];
            *((_QWORD *)v21 - 4) = 0;
            v23 = *(_QWORD *)&v17[v18 - 24];
            *(_QWORD *)&v14[v18 - 24] = v23;
            v24 = *(_QWORD *)&v17[v18 - 16];
            *((_QWORD *)v20 - 2) = v24;
            *((_DWORD *)v20 - 2) = *(_DWORD *)&v17[v18 - 8];
            if (v24)
            {
              v19 = *(_QWORD *)(v23 + 8);
              v25 = *((_QWORD *)v20 - 4);
              if ((v25 & (v25 - 1)) != 0)
              {
                if (v19 >= v25)
                  v19 %= v25;
              }
              else
              {
                v19 &= v25 - 1;
              }
              *(_QWORD *)(v22 + 8 * v19) = &v14[v18 - 24];
              *(_QWORD *)&v17[v18 - 24] = 0;
              *(_QWORD *)&v17[v18 - 16] = 0;
            }
            v18 -= 48;
          }
          while (&v17[v18] != v16);
          v26 = &v14[v18];
          v17 = *a1;
          v27 = a1[1];
          *a1 = v26;
          a1[1] = v8;
          a1[2] = v15;
          while (v27 != v17)
          {
            v28 = (_QWORD *)*((_QWORD *)v27 - 3);
            if (v28)
            {
              do
              {
                v30 = (_QWORD *)*v28;
                v31 = (void *)v28[3];
                if (v31 != (void *)v28[5])
                  free(v31);
                operator delete(v28);
                v28 = v30;
              }
              while (v30);
            }
            v29 = (void *)*((_QWORD *)v27 - 5);
            *((_QWORD *)v27 - 5) = 0;
            if (v29)
              operator delete(v29);
            v27 -= 48;
          }
        }
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_WORD *)v5 = a2;
        v8 = v5 + 48;
        std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::unordered_set((uint64_t)(v5 + 8), (uint64_t)__p);
      }
      a1[1] = v8;
      v6 = v8 - 48;
      v32 = v37[0];
      if (v37[0])
      {
        do
        {
          v34 = (_QWORD *)*v32;
          v35 = (void *)v32[3];
          if (v35 != (void *)v32[5])
            free(v35);
          operator delete(v32);
          v32 = v34;
        }
        while (v34);
      }
    }
    if (__p[0])
      operator delete(__p[0]);
  }
  return (unsigned __int16 *)(v6 + 8);
}

uint64_t gdc::ResourceStatusContainer::incrementResourceReference(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  uint64_t result;
  char *v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char *v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  result = (uint64_t)std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>((uint64_t)this + 8, (unsigned __int8 *)a2, (uint64_t)a2);
  ++*(_QWORD *)(result + 120);
  v6 = (_QWORD *)((char *)this + 56);
  v5 = (char *)*((_QWORD *)this + 7);
  if (!v5)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    v11 = (char *)this + 56;
    goto LABEL_20;
  }
  v7 = *((unsigned __int16 *)a2 + 1);
  v8 = *(unsigned __int8 *)a2;
  v9 = (char *)*((_QWORD *)a2 + 1);
  v10 = *((_QWORD *)a2 + 2);
  do
  {
    while (1)
    {
      v11 = v5;
      v12 = *((unsigned __int16 *)v5 + 17);
      if (v7 == v12)
        break;
      if (v7 < v12)
        goto LABEL_3;
      if (v12 >= v7)
        return result;
LABEL_16:
      v6 = v11 + 8;
      v5 = (char *)*((_QWORD *)v11 + 1);
      if (!v5)
        goto LABEL_20;
    }
    v13 = v11[32];
    if (v8 == v13)
    {
      result = gdc::GenericKey::operator<((uint64_t)v9, v10, *((_QWORD *)v11 + 5), *((_QWORD *)v11 + 6));
      if (!(_DWORD)result)
        goto LABEL_12;
    }
    else if (v8 >= v13)
    {
LABEL_12:
      v14 = v11[32];
      if (v14 == v8)
      {
        result = gdc::GenericKey::operator<(*((_QWORD *)v11 + 5), *((_QWORD *)v11 + 6), (uint64_t)v9, v10);
        if (!(_DWORD)result)
          return result;
      }
      else if (v14 >= v8)
      {
        return result;
      }
      goto LABEL_16;
    }
LABEL_3:
    v5 = *(char **)v11;
  }
  while (*(_QWORD *)v11);
  v6 = v11;
LABEL_20:
  v15 = operator new(0x80uLL);
  v16 = (char *)(v15 + 9);
  v15[4] = *(_QWORD *)a2;
  v15[5] = v15 + 9;
  v15[6] = v15 + 9;
  v15[7] = v15 + 9;
  v15[8] = 32;
  v17 = v10 - (_QWORD)v9;
  if ((unint64_t)(v10 - (_QWORD)v9) < 0x21)
    goto LABEL_41;
  if (v17 <= 0x40)
    v18 = 64;
  else
    v18 = v10 - (_QWORD)v9;
  v16 = (char *)malloc_type_malloc(v18, 0x100004077774924uLL);
  v19 = (char *)v15[5];
  v20 = (char *)v15[6];
  if (v19 == v20)
    goto LABEL_40;
  v21 = v20 - v19;
  if ((unint64_t)(v20 - v19) < 8)
  {
    v22 = v16;
    goto LABEL_39;
  }
  v22 = v16;
  if ((unint64_t)(v16 - v19) < 0x20)
    goto LABEL_39;
  if (v21 >= 0x20)
  {
    v23 = v21 & 0xFFFFFFFFFFFFFFE0;
    v24 = (__int128 *)(v19 + 16);
    v25 = v16 + 16;
    v26 = v21 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v27 = *v24;
      *(v25 - 1) = *(v24 - 1);
      *v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 32;
    }
    while (v26);
    if (v21 == v23)
      goto LABEL_40;
    if ((v21 & 0x18) != 0)
      goto LABEL_34;
    v19 += v23;
    v22 = &v16[v23];
    do
    {
LABEL_39:
      v33 = *v19++;
      *v22++ = v33;
    }
    while (v19 != v20);
    goto LABEL_40;
  }
  v23 = 0;
LABEL_34:
  v28 = v21 & 0xFFFFFFFFFFFFFFF8;
  v22 = &v16[v21 & 0xFFFFFFFFFFFFFFF8];
  v29 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
  v30 = (uint64_t *)&v19[v23];
  v31 = &v16[v23];
  do
  {
    v32 = *v30++;
    *(_QWORD *)v31 = v32;
    v31 += 8;
    v29 += 8;
  }
  while (v29);
  if (v21 != v28)
  {
    v19 += v28;
    goto LABEL_39;
  }
LABEL_40:
  v15[5] = v16;
  v15[6] = v16;
  v15[8] = v18;
LABEL_41:
  if (v9 == (char *)v10)
    goto LABEL_59;
  if (v17 < 8)
  {
    v35 = v16;
    goto LABEL_57;
  }
  if ((unint64_t)(v16 - v9) < 0x20)
  {
    v35 = v16;
    goto LABEL_57;
  }
  if (v17 >= 0x20)
  {
    v34 = v17 & 0xFFFFFFFFFFFFFFE0;
    v36 = (__int128 *)(v9 + 16);
    v37 = v16 + 16;
    v38 = v17 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v39 = *v36;
      *(v37 - 1) = *(v36 - 1);
      *v37 = v39;
      v36 += 2;
      v37 += 2;
      v38 -= 32;
    }
    while (v38);
    if (v17 == v34)
      goto LABEL_58;
    if ((v17 & 0x18) != 0)
      goto LABEL_52;
    v9 += v34;
    v35 = &v16[v34];
    do
    {
LABEL_57:
      v45 = *v9++;
      *v35++ = v45;
    }
    while (v9 != (char *)v10);
    goto LABEL_58;
  }
  v34 = 0;
LABEL_52:
  v40 = v17 & 0xFFFFFFFFFFFFFFF8;
  v35 = &v16[v17 & 0xFFFFFFFFFFFFFFF8];
  v41 = v34 - (v17 & 0xFFFFFFFFFFFFFFF8);
  v42 = (uint64_t *)&v9[v34];
  v43 = &v16[v34];
  do
  {
    v44 = *v42++;
    *(_QWORD *)v43 = v44;
    v43 += 8;
    v41 += 8;
  }
  while (v41);
  if (v17 != v40)
  {
    v9 += v40;
    goto LABEL_57;
  }
LABEL_58:
  v16 = (char *)v15[6];
LABEL_59:
  v15[6] = &v16[v17];
  v15[13] = *((_QWORD *)a2 + 9);
  *((_OWORD *)v15 + 7) = *((_OWORD *)a2 + 5);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = v11;
  *v6 = v15;
  v46 = **((_QWORD **)this + 6);
  if (v46)
  {
    *((_QWORD *)this + 6) = v46;
    v15 = (_QWORD *)*v6;
  }
  result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 7), v15);
  ++*((_QWORD *)this + 8);
  return result;
}

void sub_19F09A904(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  void *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  int v20;
  uint64_t v21;
  const void *v22;
  int v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char *v46;
  __int128 *v47;
  _OWORD *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  char v56;
  float v57;
  float v58;
  _BOOL8 v59;
  unint64_t v60;
  unint64_t v61;
  size_t prime;
  void *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  size_t v67;
  size_t v68;
  size_t v69;
  _QWORD *i;
  size_t v71;
  uint64_t v72;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  size_t v78;
  _QWORD *v79;
  unint64_t v80;
  void *v82;
  size_t v83;
  void *__s2;
  void *__s2a;

  v6 = *a2;
  v7 = *((unsigned __int16 *)a2 + 1);
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = *((_QWORD *)a2 + 9);
  v10 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = (void *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2) - (_QWORD)v15;
        if (v12.u32[0] < 2uLL)
        {
          __s2 = (void *)*((_QWORD *)a2 + 1);
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
                && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
                && v14[11] == v9)
              {
                v22 = (const void *)v14[3];
                if (v14[4] - (_QWORD)v22 == v16)
                {
                  v83 = v16;
                  v23 = memcmp(v22, __s2, v16);
                  v16 = v83;
                  if (!v23)
                    return v14;
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_31;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
              && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
              && v14[11] == v9)
            {
              v18 = (const void *)v14[3];
              if (v14[4] - (_QWORD)v18 == v16)
              {
                __s2a = v15;
                v19 = v16;
                v20 = memcmp(v18, v15, v16);
                v15 = __s2a;
                v16 = v19;
                if (!v20)
                  return v14;
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  v24 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x80uLL);
  *v14 = 0;
  v14[1] = v10;
  v25 = (char *)(v14 + 7);
  v26 = *(char **)(a3 + 8);
  v14[2] = *(_QWORD *)a3;
  v14[3] = v14 + 7;
  v14[5] = v14 + 7;
  v14[6] = 32;
  v27 = *(char **)(a3 + 16);
  v28 = v27 - v26;
  v14[4] = v14 + 7;
  if ((unint64_t)(v27 - v26) >= 0x21)
  {
    if (v28 <= 0x40)
      v29 = 64;
    else
      v29 = v27 - v26;
    v25 = (char *)malloc_type_malloc(v29, 0x100004077774924uLL);
    v30 = (char *)v14[3];
    v31 = (char *)v14[4];
    if (v30 == v31)
      goto LABEL_51;
    v32 = v31 - v30;
    if ((unint64_t)(v31 - v30) < 8)
    {
      v33 = v25;
      goto LABEL_50;
    }
    v33 = v25;
    if ((unint64_t)(v25 - v30) < 0x20)
      goto LABEL_50;
    if (v32 >= 0x20)
    {
      v34 = v32 & 0xFFFFFFFFFFFFFFE0;
      v35 = (__int128 *)(v30 + 16);
      v36 = v25 + 16;
      v37 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = *v35;
        *(v36 - 1) = *(v35 - 1);
        *v36 = v38;
        v35 += 2;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      if (v32 == v34)
        goto LABEL_51;
      if ((v32 & 0x18) == 0)
      {
        v30 += v34;
        v33 = &v25[v34];
        goto LABEL_50;
      }
    }
    else
    {
      v34 = 0;
    }
    v39 = v32 & 0xFFFFFFFFFFFFFFF8;
    v33 = &v25[v32 & 0xFFFFFFFFFFFFFFF8];
    v40 = v34 - (v32 & 0xFFFFFFFFFFFFFFF8);
    v41 = (uint64_t *)&v30[v34];
    v42 = &v25[v34];
    do
    {
      v43 = *v41++;
      *(_QWORD *)v42 = v43;
      v42 += 8;
      v40 += 8;
    }
    while (v40);
    if (v32 == v39)
      goto LABEL_51;
    v30 += v39;
    do
    {
LABEL_50:
      v44 = *v30++;
      *v33++ = v44;
    }
    while (v30 != v31);
LABEL_51:
    v14[3] = v25;
    v14[4] = v25;
    v14[6] = v29;
    v24 = (_QWORD *)(a1 + 16);
  }
  if (v26 != v27)
  {
    if (v28 < 8)
    {
      v46 = v25;
      goto LABEL_68;
    }
    if ((unint64_t)(v25 - v26) < 0x20)
    {
      v46 = v25;
      goto LABEL_68;
    }
    if (v28 >= 0x20)
    {
      v45 = v28 & 0xFFFFFFFFFFFFFFE0;
      v47 = (__int128 *)(v26 + 16);
      v48 = v25 + 16;
      v49 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v50 = *v47;
        *(v48 - 1) = *(v47 - 1);
        *v48 = v50;
        v47 += 2;
        v48 += 2;
        v49 -= 32;
      }
      while (v49);
      if (v28 == v45)
        goto LABEL_69;
      if ((v28 & 0x18) == 0)
      {
        v26 += v45;
        v46 = &v25[v45];
        goto LABEL_68;
      }
    }
    else
    {
      v45 = 0;
    }
    v51 = v28 & 0xFFFFFFFFFFFFFFF8;
    v46 = &v25[v28 & 0xFFFFFFFFFFFFFFF8];
    v52 = v45 - (v28 & 0xFFFFFFFFFFFFFFF8);
    v53 = (uint64_t *)&v26[v45];
    v54 = &v25[v45];
    do
    {
      v55 = *v53++;
      *(_QWORD *)v54 = v55;
      v54 += 8;
      v52 += 8;
    }
    while (v52);
    if (v28 == v51)
      goto LABEL_69;
    v26 += v51;
    do
    {
LABEL_68:
      v56 = *v26++;
      *v46++ = v56;
    }
    while (v26 != v27);
LABEL_69:
    v25 = (char *)v14[4];
  }
  v14[4] = &v25[v28];
  v14[11] = *(_QWORD *)(a3 + 72);
  *((_OWORD *)v14 + 6) = *(_OWORD *)(a3 + 80);
  v14[14] = 0;
  v14[15] = 0;
  v57 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v58 = *(float *)(a1 + 32);
  if (v11 && (float)(v58 * (float)v11) >= v57)
    goto LABEL_120;
  v59 = 1;
  if (v11 >= 3)
    v59 = (v11 & (v11 - 1)) != 0;
  v60 = v59 | (2 * v11);
  v61 = vcvtps_u32_f32(v57 / v58);
  if (v60 <= v61)
    prime = v61;
  else
    prime = v60;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (prime > v11)
  {
LABEL_82:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v63 = operator new(8 * prime);
    v64 = *(void **)a1;
    *(_QWORD *)a1 = v63;
    if (v64)
      operator delete(v64);
    v65 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v65++) = 0;
    while (prime != v65);
    v66 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_106;
    v67 = v66[1];
    v68 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v69 = v67 & v68;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v69) = v24;
      for (i = (_QWORD *)*v66; *v66; i = (_QWORD *)*v66)
      {
        v71 = i[1] & v68;
        if (v71 == v69)
        {
          v66 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v71))
        {
          *v66 = *i;
          v72 = 8 * v71;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v72);
          **(_QWORD **)(*(_QWORD *)a1 + v72) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v71) = v66;
          v66 = i;
          v69 = v71;
        }
      }
LABEL_106:
      v11 = prime;
      goto LABEL_107;
    }
    if (v67 >= prime)
      v67 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v67) = v24;
    v76 = (_QWORD *)*v66;
    if (!*v66)
      goto LABEL_106;
    while (1)
    {
      v78 = v76[1];
      if (v78 >= prime)
        v78 %= prime;
      if (v78 != v67)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v78))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v78) = v66;
          goto LABEL_111;
        }
        *v66 = *v76;
        v77 = 8 * v78;
        *v76 = **(_QWORD **)(*(_QWORD *)a1 + v77);
        **(_QWORD **)(*(_QWORD *)a1 + v77) = v76;
        v76 = v66;
      }
      v78 = v67;
LABEL_111:
      v66 = v76;
      v76 = (_QWORD *)*v76;
      v67 = v78;
      if (!v76)
        goto LABEL_106;
    }
  }
  if (prime >= v11)
    goto LABEL_107;
  v73 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v11 < 3 || (v74 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
  {
    v73 = std::__next_prime(v73);
  }
  else
  {
    v75 = 1 << -(char)__clz(v73 - 1);
    if (v73 >= 2)
      v73 = v75;
  }
  if (prime <= v73)
    prime = v73;
  if (prime < v11)
  {
    if (!prime)
    {
      v82 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v82)
        operator delete(v82);
      v11 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_107;
    }
    goto LABEL_82;
  }
  v11 = *(_QWORD *)(a1 + 8);
LABEL_107:
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v10 >= v11)
      v3 = v10 % v11;
    else
      v3 = v10;
  }
  else
  {
    v3 = (v11 - 1) & v10;
  }
LABEL_120:
  v79 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v79)
  {
    *v14 = *v79;
    *v79 = v14;
  }
  else
  {
    *v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v24;
    if (*v14)
    {
      v80 = *(_QWORD *)(*v14 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v80 >= v11)
          v80 %= v11;
      }
      else
      {
        v80 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v80) = v14;
    }
  }
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19F09B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::ResourceKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::ResourceKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_19F09B198(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::LayerDataRequest::collectResources(unsigned __int16 **this, gdc::ResourceManager *a2)
{
  gdc::LayerDataRequest *v2;
  _QWORD *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int8x8_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t ***v17;
  uint64_t **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  size_t v22;
  const void *v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  size_t v27;
  const void *v28;
  int v29;
  int8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  uint64_t ***v37;
  uint64_t **v38;
  unint64_t v39;
  uint64_t *v40;
  size_t v41;
  const void *v42;
  uint64_t *v43;
  uint64_t *v44;
  size_t v45;
  const void *v46;
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unsigned __int16 *v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  void *v61;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  gdc::LayerDataRequest *v66;
  _QWORD v67[3];
  unsigned __int8 v68;

  v2 = (gdc::LayerDataRequest *)this;
  *((_BYTE *)this + 208) = 1;
  v68 = 0;
  v67[0] = &v68;
  v67[1] = a2;
  v67[2] = this;
  gdc::LayerDataRequest::collectResources(gdc::ResourceManager *)::$_0::operator()((uint64_t)v67, this[15], this[16]);
  gdc::LayerDataRequest::collectResources(gdc::ResourceManager *)::$_0::operator()((uint64_t)v67, *((unsigned __int16 **)v2 + 18), *((unsigned __int16 **)v2 + 19));
  v3 = (_QWORD *)*((_QWORD *)v2 + 21);
  v63 = (_QWORD *)*((_QWORD *)v2 + 22);
  if (v3 != v63)
  {
    v66 = v2;
    do
    {
      v4 = (unsigned __int16 *)v3[3];
      if (!v4)
        goto LABEL_3;
      while (1)
      {
LABEL_5:
        v5 = v4[9];
        v6 = (unsigned __int16 *)*((_QWORD *)v2 + 15);
        v7 = (unsigned __int16 *)*((_QWORD *)v2 + 16);
        if (v6 != v7)
        {
          while ((_DWORD)v5 != *v6)
          {
            v6 += 24;
            if (v6 == v7)
            {
              v6 = (unsigned __int16 *)*((_QWORD *)v2 + 16);
              break;
            }
          }
        }
        v8 = (unsigned __int16 *)*((_QWORD *)v2 + 18);
        v9 = (unsigned __int16 *)*((_QWORD *)v2 + 19);
        if (v8 != v9)
        {
          while ((_DWORD)v5 != *v8)
          {
            v8 += 24;
            if (v8 == v9)
            {
              v8 = (unsigned __int16 *)*((_QWORD *)v2 + 19);
              break;
            }
          }
        }
        if (v6 == v7)
          break;
        v10 = *(int8x8_t *)(v6 + 8);
        if (!*(_QWORD *)&v10)
          break;
        v11 = *((unsigned __int8 *)v4 + 16);
        v12 = (v5
             - 0x61C8864680B583EBLL
             + ((v11 - 0x61C8864680B583EBLL) << 6)
             + ((unint64_t)(v11 - 0x61C8864680B583EBLL) >> 2)) ^ (v11 - 0x61C8864680B583EBLL);
        v13 = (uint64_t *)*((_QWORD *)v4 + 11);
        v14 = ((unint64_t)&v13[8 * v12 - 0xC3910C8D016B07DLL] + (v12 >> 2) - 3) ^ v12;
        v15 = (uint8x8_t)vcnt_s8(v10);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          v16 = ((unint64_t)&v13[8 * v12 - 0xC3910C8D016B07DLL] + (v12 >> 2) - 3) ^ v12;
          if (v14 >= *(_QWORD *)&v10)
            v16 = v14 % *(_QWORD *)&v10;
        }
        else
        {
          v16 = v14 & (*(_QWORD *)&v10 - 1);
        }
        v17 = *(uint64_t ****)(*((_QWORD *)v6 + 1) + 8 * v16);
        if (!v17)
          break;
        v18 = *v17;
        if (!*v17)
          break;
        if (v15.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v10 - 1;
          while (1)
          {
            v25 = v18[1];
            if ((uint64_t *)v14 == v25)
            {
              if (*((unsigned __int8 *)v18 + 16) == (_DWORD)v11
                && *((unsigned __int16 *)v18 + 9) == (_DWORD)v5
                && v18[11] == v13)
              {
                v26 = v18[3];
                v27 = (char *)v18[4] - (char *)v26;
                v28 = (const void *)*((_QWORD *)v4 + 3);
                if (v27 == *((_QWORD *)v4 + 4) - (_QWORD)v28)
                {
                  v65 = v13;
                  v29 = memcmp(v26, v28, v27);
                  v13 = v65;
                  if (!v29)
                    goto LABEL_72;
                }
              }
            }
            else if (((unint64_t)v25 & v19) != v16)
            {
              goto LABEL_43;
            }
            v18 = (uint64_t **)*v18;
            if (!v18)
              goto LABEL_43;
          }
        }
        while (1)
        {
          v20 = (unint64_t)v18[1];
          if (v14 == v20)
            break;
          if (v20 >= *(_QWORD *)&v10)
            v20 %= *(_QWORD *)&v10;
          if (v20 != v16)
            goto LABEL_43;
LABEL_24:
          v18 = (uint64_t **)*v18;
          if (!v18)
            goto LABEL_43;
        }
        if (*((unsigned __int8 *)v18 + 16) != (_DWORD)v11)
          goto LABEL_24;
        if (*((unsigned __int16 *)v18 + 9) != (_DWORD)v5)
          goto LABEL_24;
        if (v18[11] != v13)
          goto LABEL_24;
        v21 = v18[3];
        v22 = (char *)v18[4] - (char *)v21;
        v23 = (const void *)*((_QWORD *)v4 + 3);
        if (v22 != *((_QWORD *)v4 + 4) - (_QWORD)v23)
          goto LABEL_24;
        v64 = v13;
        v24 = memcmp(v21, v23, v22);
        v13 = v64;
        if (v24)
          goto LABEL_24;
LABEL_72:
        v2 = v66;
        v4 = *(unsigned __int16 **)v4;
        if (!v4)
          goto LABEL_3;
      }
LABEL_43:
      if (v8 != v9)
      {
        v30 = *(int8x8_t *)(v8 + 8);
        if (v30)
        {
          v31 = *((unsigned __int8 *)v4 + 16);
          v32 = (v5
               - 0x61C8864680B583EBLL
               + ((v31 - 0x61C8864680B583EBLL) << 6)
               + ((unint64_t)(v31 - 0x61C8864680B583EBLL) >> 2)) ^ (v31 - 0x61C8864680B583EBLL);
          v33 = (uint64_t *)*((_QWORD *)v4 + 11);
          v34 = ((unint64_t)&v33[8 * v32 - 0xC3910C8D016B07DLL] + (v32 >> 2) - 3) ^ v32;
          v35 = (uint8x8_t)vcnt_s8(v30);
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.u32[0] > 1uLL)
          {
            v36 = ((unint64_t)&v33[8 * v32 - 0xC3910C8D016B07DLL] + (v32 >> 2) - 3) ^ v32;
            if (v34 >= *(_QWORD *)&v30)
              v36 = v34 % *(_QWORD *)&v30;
          }
          else
          {
            v36 = v34 & (*(_QWORD *)&v30 - 1);
          }
          v37 = *(uint64_t ****)(*((_QWORD *)v8 + 1) + 8 * v36);
          if (v37)
          {
            v38 = *v37;
            if (*v37)
            {
              if (v35.u32[0] < 2uLL)
              {
                while (1)
                {
                  v43 = v38[1];
                  if ((uint64_t *)v34 == v43)
                  {
                    if (*((unsigned __int8 *)v38 + 16) == (_DWORD)v31
                      && *((unsigned __int16 *)v38 + 9) == (_DWORD)v5
                      && v38[11] == v33)
                    {
                      v44 = v38[3];
                      v45 = (char *)v38[4] - (char *)v44;
                      v46 = (const void *)*((_QWORD *)v4 + 3);
                      if (v45 == *((_QWORD *)v4 + 4) - (_QWORD)v46 && !memcmp(v44, v46, v45))
                        goto LABEL_72;
                    }
                  }
                  else if (((unint64_t)v43 & (*(_QWORD *)&v30 - 1)) != v36)
                  {
                    goto LABEL_74;
                  }
                  v38 = (uint64_t **)*v38;
                  if (!v38)
                    goto LABEL_74;
                }
              }
              do
              {
                v39 = (unint64_t)v38[1];
                if (v34 == v39)
                {
                  if (*((unsigned __int8 *)v38 + 16) == (_DWORD)v31
                    && *((unsigned __int16 *)v38 + 9) == (_DWORD)v5
                    && v38[11] == v33)
                  {
                    v40 = v38[3];
                    v41 = (char *)v38[4] - (char *)v40;
                    v42 = (const void *)*((_QWORD *)v4 + 3);
                    if (v41 == *((_QWORD *)v4 + 4) - (_QWORD)v42 && !memcmp(v40, v42, v41))
                      goto LABEL_72;
                  }
                }
                else
                {
                  if (v39 >= *(_QWORD *)&v30)
                    v39 %= *(_QWORD *)&v30;
                  if (v39 != v36)
                    break;
                }
                v38 = (uint64_t **)*v38;
              }
              while (v38);
            }
          }
        }
      }
LABEL_74:
      v47 = (int8x8_t)v3[2];
      v48 = *((_QWORD *)v4 + 1);
      v49 = (uint8x8_t)vcnt_s8(v47);
      v49.i16[0] = vaddlv_u8(v49);
      if (v49.u32[0] > 1uLL)
      {
        if (v48 >= *(_QWORD *)&v47)
          v48 %= *(_QWORD *)&v47;
      }
      else
      {
        v48 &= *(_QWORD *)&v47 - 1;
      }
      v50 = *(unsigned __int16 **)v4;
      v51 = v3[1];
      v52 = *(unsigned __int16 **)(v51 + 8 * v48);
      do
      {
        v53 = v52;
        v52 = *(unsigned __int16 **)v52;
      }
      while (v52 != v4);
      v2 = v66;
      if (v53 == (unsigned __int16 *)(v3 + 3))
        goto LABEL_113;
      v54 = *((_QWORD *)v53 + 1);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      v55 = *(_QWORD *)v4;
      if (v54 == v48)
      {
LABEL_93:
        if (v55)
        {
          v56 = *(_QWORD *)(v55 + 8);
          goto LABEL_95;
        }
      }
      else
      {
LABEL_113:
        if (!v50)
          goto LABEL_92;
        v56 = *((_QWORD *)v50 + 1);
        if (v49.u32[0] > 1uLL)
        {
          v57 = *((_QWORD *)v50 + 1);
          if (v56 >= *(_QWORD *)&v47)
            v57 = v56 % *(_QWORD *)&v47;
        }
        else
        {
          v57 = v56 & (*(_QWORD *)&v47 - 1);
        }
        v55 = *(_QWORD *)v4;
        if (v57 != v48)
        {
LABEL_92:
          *(_QWORD *)(v51 + 8 * v48) = 0;
          v55 = *(_QWORD *)v4;
          goto LABEL_93;
        }
LABEL_95:
        if (v49.u32[0] > 1uLL)
        {
          if (v56 >= *(_QWORD *)&v47)
            v56 %= *(_QWORD *)&v47;
        }
        else
        {
          v56 &= *(_QWORD *)&v47 - 1;
        }
        if (v56 != v48)
        {
          *(_QWORD *)(v3[1] + 8 * v56) = v53;
          v55 = *(_QWORD *)v4;
        }
      }
      *(_QWORD *)v53 = v55;
      *(_QWORD *)v4 = 0;
      --v3[4];
      v58 = (std::__shared_weak_count *)*((_QWORD *)v4 + 15);
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (void *)*((_QWORD *)v4 + 3);
      if (v61 != *((void **)v4 + 5))
        free(v61);
      operator delete(v4);
      v4 = v50;
      if (v50)
        goto LABEL_5;
LABEL_3:
      v3 += 6;
    }
    while (v3 != v63);
  }
  return v68;
}

uint64_t **std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = *((unsigned __int16 *)a2 + 1);
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = (uint64_t *)*((_QWORD *)a2 + 9);
  v7 = ((unint64_t)&v6[8 * v5 - 0xC3910C8D016B07DLL] + (v5 >> 2) - 3) ^ v5;
  v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = ((unint64_t)&v6[8 * v5 - 0xC3910C8D016B07DLL] + (v5 >> 2) - 3) ^ v5;
    if (v7 >= *(_QWORD *)&v2)
      v9 = v7 % *(_QWORD *)&v2;
  }
  else
  {
    v9 = v7 & (*(_QWORD *)&v2 - 1);
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (const void *)*((_QWORD *)a2 + 1);
    v13 = *((_QWORD *)a2 + 2) - (_QWORD)v12;
    if (v8.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v17 = v11[1];
        if ((uint64_t *)v7 == v17)
        {
          if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v3
            && *((unsigned __int16 *)v11 + 9) == (_DWORD)v4
            && v11[11] == v6)
          {
            v18 = v11[3];
            if ((char *)v11[4] - (char *)v18 == v13 && !memcmp(v18, v12, v13))
              return v11;
          }
        }
        else if (((unint64_t)v17 & v14) != v9)
        {
          return 0;
        }
        v11 = (uint64_t **)*v11;
        if (!v11)
          return v11;
      }
    }
    do
    {
      v15 = (unint64_t)v11[1];
      if (v7 == v15)
      {
        if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v3
          && *((unsigned __int16 *)v11 + 9) == (_DWORD)v4
          && v11[11] == v6)
        {
          v16 = v11[3];
          if ((char *)v11[4] - (char *)v16 == v13 && !memcmp(v16, v12, v13))
            return v11;
        }
      }
      else
      {
        if (v15 >= *(_QWORD *)&v2)
          v15 %= *(_QWORD *)&v2;
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = *((unsigned __int16 *)a2 + 1);
  v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v6 = (uint64_t *)*((_QWORD *)a2 + 9);
  v7 = ((unint64_t)&v6[8 * v5 - 0xC3910C8D016B07DLL] + (v5 >> 2) - 3) ^ v5;
  v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = ((unint64_t)&v6[8 * v5 - 0xC3910C8D016B07DLL] + (v5 >> 2) - 3) ^ v5;
    if (v7 >= *(_QWORD *)&v2)
      v9 = v7 % *(_QWORD *)&v2;
  }
  else
  {
    v9 = v7 & (*(_QWORD *)&v2 - 1);
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (const void *)*((_QWORD *)a2 + 1);
    v13 = *((_QWORD *)a2 + 2) - (_QWORD)v12;
    if (v8.u32[0] < 2uLL)
    {
      v14 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v17 = v11[1];
        if (v17 == (uint64_t *)v7)
        {
          if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v3
            && *((unsigned __int16 *)v11 + 9) == (_DWORD)v4
            && v11[11] == v6)
          {
            v18 = v11[3];
            if ((char *)v11[4] - (char *)v18 == v13 && !memcmp(v18, v12, v13))
              return v11;
          }
        }
        else if (((unint64_t)v17 & v14) != v9)
        {
          return 0;
        }
        v11 = (uint64_t **)*v11;
        if (!v11)
          return v11;
      }
    }
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v7)
      {
        if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v3
          && *((unsigned __int16 *)v11 + 9) == (_DWORD)v4
          && v11[11] == v6)
        {
          v16 = v11[3];
          if ((char *)v11[4] - (char *)v16 == v13 && !memcmp(v16, v12, v13))
            return v11;
        }
      }
      else
      {
        if (v15 >= *(_QWORD *)&v2)
          v15 %= *(_QWORD *)&v2;
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void gdc::ResourceStore::resource(gdc::ResourceStore *this, int8x8_t *a2, unsigned __int8 *a3)
{
  int8x8_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  _BYTE *v54;
  __int128 *v55;
  _OWORD *v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  size_t v71;
  size_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  void *v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD v79[5];
  __int128 v80;
  uint64_t *v81;
  std::__shared_weak_count *v82;

  v4 = a2[34];
  if (!*(_QWORD *)&v4)
    goto LABEL_43;
  v6 = *a3;
  v7 = *((unsigned __int16 *)a3 + 1);
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = (uint64_t *)*((_QWORD *)a3 + 9);
  v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
  v11 = (uint8x8_t)vcnt_s8(v4);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
    if (v10 >= *(_QWORD *)&v4)
      v12 = v10 % *(_QWORD *)&v4;
  }
  else
  {
    v12 = v10 & (*(_QWORD *)&v4 - 1);
  }
  v13 = *(uint64_t ****)(*(_QWORD *)&a2[33] + 8 * v12);
  if (!v13 || (v14 = *v13) == 0)
  {
LABEL_43:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  v15 = (const void *)*((_QWORD *)a3 + 1);
  v16 = *((_QWORD *)a3 + 2) - (_QWORD)v15;
  if (v11.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v21 = v14[1];
      if ((uint64_t *)v10 == v21)
      {
        if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
          && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
          && v14[11] == v9)
        {
          v22 = v14[3];
          if ((char *)v14[4] - (char *)v22 == v16)
          {
            v72 = v16;
            v73 = a3;
            v23 = memcmp(v22, v15, v16);
            v16 = v72;
            a3 = v73;
            if (!v23)
              goto LABEL_29;
          }
        }
      }
      else if (((unint64_t)v21 & v17) != v12)
      {
        goto LABEL_43;
      }
      v14 = (uint64_t **)*v14;
      if (!v14)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v18 = (unint64_t)v14[1];
    if (v10 == v18)
      break;
    if (v18 >= *(_QWORD *)&v4)
      v18 %= *(_QWORD *)&v4;
    if (v18 != v12)
      goto LABEL_43;
LABEL_11:
    v14 = (uint64_t **)*v14;
    if (!v14)
      goto LABEL_43;
  }
  if (*((unsigned __int8 *)v14 + 16) != (_DWORD)v6)
    goto LABEL_11;
  if (*((unsigned __int16 *)v14 + 9) != (_DWORD)v7)
    goto LABEL_11;
  if (v14[11] != v9)
    goto LABEL_11;
  v19 = v14[3];
  if ((char *)v14[4] - (char *)v19 != v16)
    goto LABEL_11;
  v71 = v16;
  v73 = a3;
  v20 = memcmp(v19, v15, v16);
  v16 = v71;
  a3 = v73;
  if (v20)
    goto LABEL_11;
LABEL_29:
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v24 = (std::__shared_weak_count *)v14[15];
  if (!v24)
    return;
  v25 = std::__shared_weak_count::lock(v24);
  *((_QWORD *)this + 1) = v25;
  if (!v25)
    return;
  v26 = v14[14];
  *(_QWORD *)this = v26;
  if (!v26)
    return;
  v27 = v25;
  v28 = (uint64_t *)&a2[43];
  v29 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(&a2[46], v73);
  if (v29)
  {
    v30 = v29;
    v31 = geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::_elementAccessed(v28, v29[14]);
    v30[14] = v31;
    if (v28 != v31)
      return;
  }
  v32 = v79;
  v33 = v73;
  v34 = (char *)*((_QWORD *)v73 + 1);
  v74 = *(_QWORD *)v73;
  v75 = v79;
  v76 = (char *)v79;
  v77 = v79;
  v78 = 32;
  v35 = (char *)*((_QWORD *)v73 + 2);
  v36 = v35 - v34;
  if ((unint64_t)(v35 - v34) < 0x21)
    goto LABEL_57;
  if (v36 <= 0x40)
    v37 = 64;
  else
    v37 = v35 - v34;
  v32 = malloc_type_malloc(v37, 0x100004077774924uLL);
  v38 = (char *)v75;
  v39 = v76;
  if (v75 == v76)
    goto LABEL_56;
  v40 = v76 - (_BYTE *)v75;
  if ((unint64_t)(v76 - (_BYTE *)v75) < 8)
  {
    v41 = v32;
    goto LABEL_55;
  }
  v41 = v32;
  if ((unint64_t)((char *)v32 - (_BYTE *)v75) < 0x20)
    goto LABEL_55;
  if (v40 >= 0x20)
  {
    v42 = v40 & 0xFFFFFFFFFFFFFFE0;
    v43 = (__int128 *)((char *)v75 + 16);
    v44 = v32 + 2;
    v45 = v40 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v46 = *v43;
      *(v44 - 1) = *(v43 - 1);
      *v44 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 32;
    }
    while (v45);
    if (v40 == v42)
      goto LABEL_56;
    if ((v40 & 0x18) != 0)
      goto LABEL_50;
    v38 += v42;
    v41 = (char *)v32 + v42;
    do
    {
LABEL_55:
      v52 = *v38++;
      *v41++ = v52;
    }
    while (v38 != v39);
    goto LABEL_56;
  }
  v42 = 0;
LABEL_50:
  v47 = v40 & 0xFFFFFFFFFFFFFFF8;
  v41 = (char *)v32 + (v40 & 0xFFFFFFFFFFFFFFF8);
  v48 = v42 - (v40 & 0xFFFFFFFFFFFFFFF8);
  v49 = &v38[v42];
  v50 = (_QWORD *)((char *)v32 + v42);
  do
  {
    v51 = *(_QWORD *)v49;
    v49 += 8;
    *v50++ = v51;
    v48 += 8;
  }
  while (v48);
  if (v40 != v47)
  {
    v38 += v47;
    goto LABEL_55;
  }
LABEL_56:
  v75 = v32;
  v76 = (char *)v32;
  v78 = v37;
  v33 = v73;
LABEL_57:
  if (v34 == v35)
    goto LABEL_75;
  if (v36 < 8)
  {
    v54 = v32;
    goto LABEL_73;
  }
  if ((unint64_t)((char *)v32 - v34) < 0x20)
  {
    v54 = v32;
    goto LABEL_73;
  }
  if (v36 >= 0x20)
  {
    v53 = v36 & 0xFFFFFFFFFFFFFFE0;
    v55 = (__int128 *)(v34 + 16);
    v56 = v32 + 2;
    v57 = v36 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v58 = *v55;
      *(v56 - 1) = *(v55 - 1);
      *v56 = v58;
      v55 += 2;
      v56 += 2;
      v57 -= 32;
    }
    while (v57);
    if (v36 == v53)
      goto LABEL_74;
    if ((v36 & 0x18) != 0)
      goto LABEL_68;
    v34 += v53;
    v54 = (char *)v32 + v53;
    do
    {
LABEL_73:
      v64 = *v34++;
      *v54++ = v64;
    }
    while (v34 != v35);
    goto LABEL_74;
  }
  v53 = 0;
LABEL_68:
  v59 = v36 & 0xFFFFFFFFFFFFFFF8;
  v54 = (char *)v32 + (v36 & 0xFFFFFFFFFFFFFFF8);
  v60 = v53 - (v36 & 0xFFFFFFFFFFFFFFF8);
  v61 = (uint64_t *)&v34[v53];
  v62 = (_QWORD *)((char *)v32 + v53);
  do
  {
    v63 = *v61++;
    *v62++ = v63;
    v60 += 8;
  }
  while (v60);
  if (v36 != v59)
  {
    v34 += v59;
    goto LABEL_73;
  }
LABEL_74:
  v32 = v76;
LABEL_75:
  v65 = *((_QWORD *)v33 + 9);
  v76 = (char *)v32 + v36;
  v79[4] = v65;
  v80 = *((_OWORD *)v33 + 5);
  v81 = v26;
  v82 = v27;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v67 = __ldxr(p_shared_owners);
  while (__stxr(v67 + 1, p_shared_owners));
  geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::insert(v28, &v74);
  v68 = v82;
  if (v82)
  {
    v69 = (unint64_t *)&v82->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v75 != v77)
    free(v75);
}

uint64_t std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,std::shared_ptr<gdc::Resource>>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

_QWORD *geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::_elementAccessed(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  v4 = std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>((uint64_t)(a2 + 2));
  v5 = v4;
  v6 = *a1;
  *(_QWORD *)(v6 + 8) = v4;
  *v4 = v6;
  *a1 = (uint64_t)v4;
  v4[1] = a1;
  v7 = a1[2];
  v8 = (uint64_t *)a1[8];
  if (v8 == a2)
  {
    v9 = (_QWORD *)a2[1];
LABEL_5:
    a1[8] = (uint64_t)v9;
    goto LABEL_6;
  }
  v9 = v4;
  if (v8 == a1)
    goto LABEL_5;
LABEL_6:
  v10 = *a2;
  *(_QWORD *)(v10 + 8) = a2[1];
  *(_QWORD *)a2[1] = v10;
  a1[2] = v7;
  v11 = (std::__shared_weak_count *)a2[15];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (void *)a2[3];
  if (v14 != (void *)a2[5])
    free(v14);
  operator delete(a2);
  return v5;
}

uint64_t gdc::LayerDataSource::isReadyToDecode(gdc::LayerDataSource *this)
{
  return 1;
}

uint64_t gdc::LayerDataSource::taskGroup(gdc::LayerDataSource *this)
{
  return 0;
}

uint64_t gdc::LayerDataSource::updateRequest()
{
  return 0;
}

uint64_t std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

uint64_t md::DaVinciGroundLayerDataSource::isReadyToDecode(md::DaVinciGroundLayerDataSource *this)
{
  std::__sp_mut *sp_mut;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  sp_mut = std::__get_sp_mut((char *)this + 776);
  std::__sp_mut::lock(sp_mut);
  v3 = *((_QWORD *)this + 97);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  if (v3)
  {
    v7 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v3 + 16) + 2786));
    v8 = v7 & 1;
    if (!v4)
      return v8;
  }
  else
  {
    v8 = 0;
    if (!v4)
      return v8;
  }
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v8;
}

uint64_t md::DaVinciGroundLayerDataSource::updateRequest()
{
  return 1;
}

uint64_t md::TrafficLayerDataSource::isReadyToDecode(md::TrafficLayerDataSource *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 95) + 16) + 2786));
  return v1 & 1;
}

void md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(uint64_t a1, uint64_t a2, std::vector<unsigned int> *a3, uint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  std::vector<unsigned int>::pointer begin;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t i;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;

  *a4 = 1;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (v8 <= v9)
  {
    if (v8 < v9)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v8;
  }
  else
  {
    std::vector<gm::Matrix<float,3,1>>::__append((char **)a2, v8 - v9);
    v8 = *(_QWORD *)(a1 + 88);
  }
  begin = a3->__begin_;
  v11 = a3->__end_ - a3->__begin_;
  if (v8 <= v11)
  {
    if (v8 < v11)
      a3->__end_ = &begin[v8];
  }
  else
  {
    std::vector<unsigned int>::__append(a3, v8 - v11);
    begin = a3->__begin_;
    v8 = *(_QWORD *)(a1 + 88);
  }
  v12 = *(char **)a2;
  v13 = *(_DWORD **)(a1 + 72);
  *(_DWORD *)v12 = *v13;
  *((_DWORD *)v12 + 1) = v13[1];
  *((_DWORD *)v12 + 2) = v13[2];
  *begin = 0;
  if (v8 >= 2)
  {
    v14 = *a4;
    v15 = v13 + 3;
    for (i = 1; i < v8; ++i)
    {
      v17 = &v12[12 * v14];
      v18 = *(_QWORD *)(v17 - 12);
      v19 = *((unsigned int *)v17 - 1);
      if (*(_QWORD *)v15 != v18 || v15[2] != v19)
      {
        begin[v14] = i;
        v21 = &v12[12 * v14++];
        *a4 = v14;
        *(_DWORD *)v21 = *v15;
        *((_DWORD *)v21 + 1) = v15[1];
        *((_DWORD *)v21 + 2) = v15[2];
        v8 = *(_QWORD *)(a1 + 88);
      }
      v15 += 3;
    }
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v6;
  std::vector<unsigned int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      abort();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (unsigned int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (unsigned int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v6 = &end[-(v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v13[4 * v9 - 16];
      v21 = (__int128 *)(end - 4);
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v24 = *--v6;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<gm::Matrix<float,3,1>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    a1[1] = &v5[12 * (12 * a2 / 0xC)];
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[12 * v7];
    v13 = &v12[12 * (12 * a2 / 0xC)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v15 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v12 - 12) = v14;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v15;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[12 * v10];
    if (v5)
      operator delete(v5);
  }
}

{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    a1[1] = &v5[12 * (12 * a2 / 0xC)];
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[12 * v7];
    v13 = &v12[12 * (12 * a2 / 0xC)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v15 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v12 - 12) = v14;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v15;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[12 * v10];
    if (v5)
      operator delete(v5);
  }
}

void md::RoadRibbon::~RoadRibbon(md::RoadRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 120);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 120);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 120);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 120);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 120);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 120);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 120);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 120);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 120);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 120);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 120);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 120);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 120);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 120);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 120);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 120);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

void __destroy_helper_block_ea8_48c23_ZTSN3gdc11ResourceKeyE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2 != *(void **)(a1 + 72))
    free(v2);
}

void grl::IconRenderer::~IconRenderer(grl::IconRenderer *this)
{
  std::__list_imp<std::shared_ptr<esl::QuartzImage>>::clear((uint64_t *)this + 45);
  std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::destroy((uint64_t)this + 320, *((_QWORD *)this + 41));
  if (*((_BYTE *)this + 356))
    *((_BYTE *)this + 356) = 0;
  if (*((_BYTE *)this + 288))
  {
    if (*((char *)this + 319) < 0)
      operator delete(*((void **)this + 37));
    *((_BYTE *)this + 288) = 0;
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((_BYTE *)this + 244))
    *((_BYTE *)this + 244) = 0;
  if (*((_BYTE *)this + 232))
    *((_BYTE *)this + 232) = 0;
  std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy((uint64_t)this + 192, *((_QWORD *)this + 25));
  if (*((_BYTE *)this + 228))
    *((_BYTE *)this + 228) = 0;
  if (*((_BYTE *)this + 72))
    *((_BYTE *)this + 72) = 0;
  std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy((uint64_t)this + 32, *((_QWORD *)this + 5));
  if (*((_BYTE *)this + 68))
    *((_BYTE *)this + 68) = 0;
}

uint64_t std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (*(_BYTE *)(a2 + 36))
      *(_BYTE *)(a2 + 36) = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 48);
  }
  return result;
}

void grl::ImageLayerRenderer::~ImageLayerRenderer(grl::ImageLayerRenderer *this)
{
  grl::ImageLayerRenderer::~ImageLayerRenderer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E42C26B8;
  v2 = (char *)this + 280;
  v3 = (char *)*((_QWORD *)this + 38);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_BYTE *)this + 168))
  {
    (**((void (***)(char *))this + 22))((char *)this + 176);
    *((_BYTE *)this + 168) = 0;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 3) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v5, *((_QWORD *)this + 4) - v5);
  }
}

uint64_t std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a2 + 40);
    if (*(_BYTE *)(a2 + 36))
      *(_BYTE *)(a2 + 36) = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 56);
  }
  return result;
}

void std::__list_imp<std::shared_ptr<esl::QuartzImage>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void grl::ShapeLayerRenderer::~ShapeLayerRenderer(grl::ShapeLayerRenderer *this)
{
  grl::ShapeLayerRenderer::~ShapeLayerRenderer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E42C26F0;
  if (*((_BYTE *)this + 152))
  {
    (**((void (***)(char *))this + 20))((char *)this + 160);
    *((_BYTE *)this + 152) = 0;
  }
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), v2, *((_QWORD *)this + 4) - v2);
  }
}

void grl::PathLayerMetrics::~PathLayerMetrics(grl::PathLayerMetrics *this)
{
  *(_QWORD *)this = &off_1E42C25A8;
  if (*((_BYTE *)this + 92))
    *((_BYTE *)this + 92) = 0;
}

{
  *(_QWORD *)this = &off_1E42C25A8;
  if (*((_BYTE *)this + 92))
    *((_BYTE *)this + 92) = 0;
  JUMPOUT(0x1A1AF4E00);
}

uint64_t grl::codec::IconData::imageWithPack@<X0>(grl::Allocator *a1@<X0>, grl::codec::IconDataPack **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>, float a6@<S0>)
{
  _QWORD *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v23;
  _QWORD *v24[3];
  _WORD *v25;
  uint64_t *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24[0] = 0;
  v24[1] = (_QWORD *)grl::Allocator::instance(a1);
  v24[2] = 0;
  v23 = (uint64_t *)v24;
  v12 = *(_QWORD **)a1;
  if (*(grl::Allocator **)a1 != (grl::Allocator *)((char *)a1 + 8))
  {
    while (1)
    {
      grl::codec::IconDataPack::imageForID(*a2, *((_DWORD *)v12 + 8), (uint64_t)&v26);
      v25 = (_WORD *)v12 + 14;
      v13 = std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v23, (unsigned __int16 *)v12 + 14, (uint64_t)&std::piecewise_construct, &v25);
      v13[5] = v26;
      std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::operator=[abi:nn180100](v13 + 6, (uint64_t)v27);
      v17 = v28;
      if (v28 == v27)
        break;
      if (v28)
      {
        v18 = 5;
LABEL_6:
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v17 + 8 * v18))(v17, v14, v15, v16);
      }
      v19 = (_QWORD *)v12[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v12[2];
          v21 = *v20 == (_QWORD)v12;
          v12 = v20;
        }
        while (!v21);
      }
      v12 = v20;
      if (v20 == (_QWORD *)((char *)a1 + 8))
        goto LABEL_13;
    }
    v17 = v27;
    v18 = 4;
    goto LABEL_6;
  }
LABEL_13:
  grl::codec::IconData::imageWithImageData(a1, &v23, a3, a4, a5, a6);
  return std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&v23, v24[0]);
}

uint64_t std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy(v3, a2[1]);
    v4 = (_QWORD *)a2[9];
    if (v4 == a2 + 6)
    {
      v5 = 4;
      v4 = a2 + 6;
    }
    else
    {
      if (!v4)
        return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 80);
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 80);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 80, 8);
    *(_WORD *)(v11 + 32) = **a4;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_QWORD *)(v11 + 72) = 0;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return result;
}

void grl::codec::IconDataPack::imageForID(grl::codec::IconDataPack *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *v3;
  _QWORD *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  unsigned __int16 *v10;
  std::mutex *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  char **v17;
  unsigned int v18;
  char **v19;
  unsigned int v20;
  BOOL v21;
  char **v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  esl::QuartzImage *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  __int16 v44;
  _WORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t ***v51;
  uint64_t **i;
  unint64_t v53;
  _QWORD *v54;
  float v55;
  float v56;
  _BOOL8 v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  _QWORD *v61;
  size_t prime;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  uint8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  _QWORD *v73;
  size_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t j;
  float32x2_t v80;
  __int128 v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  _QWORD v101[2];
  esl::QuartzImage *v102;
  std::__shared_weak_count *v103;
  _BYTE v104[32];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3)
  {
    v5 = (_QWORD *)(a3 + 8);
    v6 = (char *)this + 48;
    do
    {
      v7 = *((_DWORD *)v3 + 7);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (char **)v3;
      else
        v9 = (char **)(v3 + 8);
      if (v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != (char *)this + 48 && *((_DWORD *)v6 + 7) <= a2)
    {
      v10 = (unsigned __int16 *)(v6 + 32);
      *(_DWORD *)a3 = *((_DWORD *)v6 + 11);
      *(_DWORD *)(a3 + 4) = *((_DWORD *)v6 + 12);
      v102 = 0;
      v103 = 0;
      v11 = (std::mutex *)((char *)this + 336);
      std::mutex::lock((std::mutex *)((char *)this + 336));
      v12 = (unint64_t)this + 120;
      v13 = (_QWORD *)((char *)this + 80);
      v14 = (_QWORD *)geo::LRUPolicy<unsigned short,std::shared_ptr<esl::QuartzImage>,std::hash<unsigned short>>::get((uint64_t)this + 120, (_QWORD *)this + 10, (unsigned __int16 *)v6 + 16);
      if ((_QWORD *)((char *)this + 120) != v14)
      {
        v16 = v14 + 3;
        v15 = v14[3];
        if (v15)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15))
          {
            std::shared_ptr<grl::codec::IconData>::operator=[abi:nn180100](&v102, v16);
            ++*((_DWORD *)this + 36);
            if (v102)
              goto LABEL_122;
          }
        }
      }
      v17 = (char **)*((_QWORD *)this + 20);
      if (!v17)
        goto LABEL_27;
      v18 = *v10;
      v19 = (char **)((char *)this + 160);
      do
      {
        v20 = *((unsigned __int16 *)v17 + 14);
        v21 = v20 >= v18;
        if (v20 >= v18)
          v22 = v17;
        else
          v22 = v17 + 1;
        if (v21)
          v19 = v17;
        v17 = (char **)*v22;
      }
      while (*v22);
      if (v19 == (char **)((char *)this + 160) || v18 < *((unsigned __int16 *)v19 + 14))
      {
LABEL_27:
        std::mutex::unlock((std::mutex *)((char *)this + 336));
        v23 = v103;
        if (!v103)
          return;
        p_shared_owners = (unint64_t *)&v103->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
LABEL_152:
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        return;
      }
      v100 = v5;
      v27 = *((unsigned int *)v19 + 8);
      v26 = *((unsigned int *)v19 + 9);
      if ((_DWORD)v26)
      {
        v28 = (char *)operator new(*((unsigned int *)v19 + 9));
        v29 = &v28[v26];
        bzero(v28, v26);
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
      v111 = *((_QWORD *)this + 41);
      v30 = *(_OWORD *)((char *)this + 216);
      v31 = *(_OWORD *)((char *)this + 248);
      v105 = *(_OWORD *)((char *)this + 232);
      v106 = v31;
      *(_OWORD *)v104 = *(_OWORD *)((char *)this + 200);
      *(_OWORD *)&v104[16] = v30;
      v32 = *(_OWORD *)((char *)this + 312);
      v109 = *(_OWORD *)((char *)this + 296);
      v110 = v32;
      v33 = *(_OWORD *)((char *)this + 280);
      v107 = *(_OWORD *)((char *)this + 264);
      v108 = v33;
      v111 += v27;
      std::istream::seekg();
      std::istream::read();
      v34 = (esl::QuartzImage *)operator new();
      esl::QuartzImage::QuartzImage(v34, (const unsigned __int8 *)v28, v29 - v28);
      v35 = (std::__shared_weak_count *)operator new();
      v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E74F0;
      v35->__shared_owners_ = 0;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = (std::__shared_weak_count_vtbl *)v34;
      v36 = v103;
      v102 = v34;
      v103 = v35;
      v5 = v100;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = geo::LRUPolicy<unsigned short,std::shared_ptr<esl::QuartzImage>,std::hash<unsigned short>>::get((uint64_t)this + 120, (_QWORD *)this + 10, (unsigned __int16 *)v6 + 16);
      if (v12 != v39)
      {
LABEL_119:
        std::shared_ptr<grl::codec::IconData>::operator=[abi:nn180100]((_QWORD *)(v39 + 24), (uint64_t *)&v102);
        if (v28)
          operator delete(v28);
        ++*((_DWORD *)this + 37);
LABEL_122:
        if (!*((_QWORD *)this + 22))
        {
          *(_OWORD *)v104 = 0uLL;
          std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)this + 184, (__int128 *)v104);
          v90 = *(std::__shared_weak_count **)&v104[8];
          if (*(_QWORD *)&v104[8])
          {
            v91 = (unint64_t *)(*(_QWORD *)&v104[8] + 8);
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
        }
        std::mutex::unlock(v11);
        if (!v102 || !(*(unsigned int (**)(esl::QuartzImage *))(*(_QWORD *)v102 + 40))(v102))
          goto LABEL_149;
        v80 = vadd_f32(*(float32x2_t *)(v6 + 36), *(float32x2_t *)(v6 + 44));
        v101[0] = *(_QWORD *)(v6 + 36);
        v101[1] = v80;
        (*(void (**)(_BYTE *__return_ptr, esl::QuartzImage *, _QWORD *))(*(_QWORD *)v102 + 56))(v104, v102, v101);
        v81 = *(_OWORD *)v104;
        if (*(_QWORD *)&v104[8])
        {
          v82 = (unint64_t *)(*(_QWORD *)&v104[8] + 8);
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
          v84 = *(std::__shared_weak_count **)&v104[8];
          if (*(_QWORD *)&v104[8])
          {
            v85 = (unint64_t *)(*(_QWORD *)&v104[8] + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          do
            v87 = __ldxr(v82);
          while (__stxr(v87 + 1, v82));
        }
        *(_QWORD *)v104 = &off_1E42D81B0;
        *(_OWORD *)&v104[8] = v81;
        *(_QWORD *)&v104[24] = v104;
        std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v104, v5);
        v88 = *(_QWORD **)&v104[24];
        if (*(_BYTE **)&v104[24] == v104)
        {
          v89 = 4;
          v88 = v104;
        }
        else
        {
          if (!*(_QWORD *)&v104[24])
          {
LABEL_144:
            if (*((_QWORD *)&v81 + 1))
            {
              v93 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v81 + 1) + 16))(*((_QWORD *)&v81 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v81 + 1));
              }
            }
LABEL_149:
            v23 = v103;
            if (!v103)
              return;
            v95 = (unint64_t *)&v103->__shared_owners_;
            do
              v25 = __ldaxr(v95);
            while (__stlxr(v25 - 1, v95));
            goto LABEL_152;
          }
          v89 = 5;
        }
        (*(void (**)(void))(*v88 + 8 * v89))();
        goto LABEL_144;
      }
      v99 = v28;
      v40 = std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::find<unsigned short>((_QWORD *)this + 10, (unsigned __int16 *)v6 + 16);
      if (v40)
      {
        v41 = (uint64_t *)v40;
        v42 = v40[3];
        v43 = *v42;
        *(_QWORD *)(v43 + 8) = v42[1];
        *(_QWORD *)v42[1] = v43;
        --*((_QWORD *)this + 17);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v42 + 3));
        operator delete(v42);
        std::__hash_table<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::__unordered_map_hasher<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,grl::codec::IconConfigPack::IconLocationIndexHash,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,true>,std::__unordered_map_equal<grl::codec::IconConfigPack::IconLocationIndex,std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>,std::equal_to<grl::codec::IconConfigPack::IconLocationIndex>,grl::codec::IconConfigPack::IconLocationIndexHash,true>,std::allocator<std::__hash_value_type<grl::codec::IconConfigPack::IconLocationIndex,std::__list_iterator<std::pair<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>>,void *>>>>::erase((_QWORD *)this + 10, v41);
      }
      v44 = *v10;
      v45 = operator new(0x28uLL);
      v45[8] = v44;
      *((_QWORD *)v45 + 3) = 0;
      *((_QWORD *)v45 + 4) = 0;
      v46 = (_QWORD *)*((_QWORD *)this + 16);
      *(_QWORD *)v45 = v12;
      *((_QWORD *)v45 + 1) = v46;
      *v46 = v45;
      v47 = *((_QWORD *)this + 17) + 1;
      *((_QWORD *)this + 16) = v45;
      *((_QWORD *)this + 17) = v47;
      v48 = *v10;
      v49 = *((_QWORD *)this + 11);
      if (v49)
      {
        v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
        v50.i16[0] = vaddlv_u8(v50);
        if (v50.u32[0] > 1uLL)
        {
          v12 = v48;
          v28 = v99;
          if (v49 <= v48)
            v12 = v48 % v49;
        }
        else
        {
          v12 = ((_DWORD)v49 - 1) & v48;
          v28 = v99;
        }
        v51 = *(uint64_t ****)(*v13 + 8 * v12);
        if (v51)
        {
          for (i = *v51; i; i = (uint64_t **)*i)
          {
            v53 = (unint64_t)i[1];
            if (v53 == v48)
            {
              if (*((unsigned __int16 *)i + 8) == (_DWORD)v48)
                goto LABEL_115;
            }
            else
            {
              if (v50.u32[0] > 1uLL)
              {
                if (v53 >= v49)
                  v53 %= v49;
              }
              else
              {
                v53 &= v49 - 1;
              }
              if (v53 != v12)
                break;
            }
          }
        }
      }
      else
      {
        v28 = v99;
      }
      v54 = operator new(0x20uLL);
      *v54 = 0;
      v54[1] = v48;
      *((_WORD *)v54 + 8) = v48;
      v54[3] = v45;
      v55 = (float)(unint64_t)(*((_QWORD *)this + 13) + 1);
      v56 = *((float *)this + 28);
      if (v49 && (float)(v56 * (float)v49) >= v55)
      {
LABEL_105:
        v75 = (_QWORD *)*v13;
        v76 = *(_QWORD **)(*v13 + 8 * v12);
        if (v76)
        {
          *v54 = *v76;
        }
        else
        {
          v77 = *((_QWORD *)this + 12);
          *v54 = v77;
          *((_QWORD *)this + 12) = v54;
          v75[v12] = (char *)this + 96;
          if (!v77)
            goto LABEL_114;
          v78 = *(_QWORD *)(v77 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v78 >= v49)
              v78 %= v49;
          }
          else
          {
            v78 &= v49 - 1;
          }
          v76 = (_QWORD *)(*v13 + 8 * v78);
        }
        *v76 = v54;
LABEL_114:
        ++*((_QWORD *)this + 13);
        v47 = *((_QWORD *)this + 17);
LABEL_115:
        for (j = *((_QWORD *)this + 9); v47 > j; j = *((_QWORD *)this + 9))
        {
          geo::Cache<unsigned short,std::shared_ptr<esl::QuartzImage>,std::hash<unsigned short>,geo::LRUPolicy>::_pop((uint64_t)this + 72);
          v47 = *((_QWORD *)this + 17);
        }
        v39 = *((_QWORD *)this + 16);
        goto LABEL_119;
      }
      v57 = 1;
      if (v49 >= 3)
        v57 = (v49 & (v49 - 1)) != 0;
      v58 = v57 | (2 * v49);
      v59 = vcvtps_u32_f32(v55 / v56);
      if (v58 <= v59)
        v60 = v59;
      else
        v60 = v58;
      if (v60 == 1)
      {
        v60 = 2;
      }
      else if ((v60 & (v60 - 1)) != 0)
      {
        v61 = v54;
        prime = std::__next_prime(v60);
        v54 = v61;
        v60 = prime;
        v49 = *((_QWORD *)this + 11);
      }
      if (v60 > v49)
        goto LABEL_71;
      if (v60 < v49)
      {
        v70 = vcvtps_u32_f32((float)*((unint64_t *)this + 13) / *((float *)this + 28));
        if (v49 < 3 || (v71 = (uint8x8_t)vcnt_s8((int8x8_t)v49), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
        {
          v96 = v54;
          v70 = std::__next_prime(v70);
          v54 = v96;
        }
        else
        {
          v72 = 1 << -(char)__clz(v70 - 1);
          if (v70 >= 2)
            v70 = v72;
        }
        if (v60 <= v70)
          v60 = v70;
        if (v60 >= v49)
        {
          v49 = *((_QWORD *)this + 11);
        }
        else
        {
          if (v60)
          {
LABEL_71:
            if (v60 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v63 = v54;
            v64 = operator new(8 * v60);
            v65 = (_QWORD *)*v13;
            *v13 = v64;
            if (v65)
              operator delete(v65);
            v66 = 0;
            *((_QWORD *)this + 11) = v60;
            do
              *(_QWORD *)(*v13 + 8 * v66++) = 0;
            while (v60 != v66);
            v67 = (_QWORD *)*((_QWORD *)this + 12);
            if (v67)
            {
              v68 = v67[1];
              v69 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
              v69.i16[0] = vaddlv_u8(v69);
              if (v69.u32[0] > 1uLL)
              {
                if (v68 >= v60)
                  v68 %= v60;
              }
              else
              {
                v68 &= v60 - 1;
              }
              *(_QWORD *)(*v13 + 8 * v68) = (char *)this + 96;
              v73 = (_QWORD *)*v67;
              if (*v67)
              {
                do
                {
                  v74 = v73[1];
                  if (v69.u32[0] > 1uLL)
                  {
                    if (v74 >= v60)
                      v74 %= v60;
                  }
                  else
                  {
                    v74 &= v60 - 1;
                  }
                  if (v74 != v68)
                  {
                    if (!*(_QWORD *)(*v13 + 8 * v74))
                    {
                      *(_QWORD *)(*v13 + 8 * v74) = v67;
                      goto LABEL_96;
                    }
                    *v67 = *v73;
                    *v73 = **(_QWORD **)(*v13 + 8 * v74);
                    **(_QWORD **)(*v13 + 8 * v74) = v73;
                    v73 = v67;
                  }
                  v74 = v68;
LABEL_96:
                  v67 = v73;
                  v73 = (_QWORD *)*v73;
                  v68 = v74;
                }
                while (v73);
              }
            }
            v49 = v60;
            v54 = v63;
            goto LABEL_100;
          }
          v97 = (_QWORD *)*v13;
          *v13 = 0;
          if (v97)
          {
            v98 = v54;
            operator delete(v97);
            v54 = v98;
          }
          v49 = 0;
          *((_QWORD *)this + 11) = 0;
        }
      }
LABEL_100:
      if ((v49 & (v49 - 1)) != 0)
      {
        if (v49 <= v48)
          v12 = v48 % v49;
        else
          v12 = v48;
      }
      else
      {
        v12 = ((_DWORD)v49 - 1) & v48;
      }
      goto LABEL_105;
    }
  }
}

BOOL esl::QuartzImage::isValid(esl::QuartzImage *this)
{
  return *((_QWORD *)this + 2) != 0;
}

uint64_t geo::LRUPolicy<unsigned short,std::shared_ptr<esl::QuartzImage>,std::hash<unsigned short>>::get(uint64_t a1, _QWORD *a2, unsigned __int16 *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::find<unsigned short>(a2, a3);
  if (v4)
  {
    v5 = *(uint64_t **)(a1 + 8);
    v6 = v4[3];
    if (v5 == v6)
      return *(_QWORD *)(a1 + 8);
    v7 = (uint64_t *)v6[1];
    if (v7 == v5)
    {
      return *(_QWORD *)(a1 + 8);
    }
    else
    {
      v8 = *v6;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)v6[1] = v8;
      v9 = *v5;
      *(_QWORD *)(v9 + 8) = v6;
      *v6 = v9;
      *v5 = (uint64_t)v6;
      v6[1] = (uint64_t)v5;
      return *(_QWORD *)(a1 + 8);
    }
  }
  return a1;
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::__list_iterator<std::pair<unsigned short,std::shared_ptr<esl::QuartzImage>>,void *>>>>::find<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a1 + 8);
}

uint64_t std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42D81B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::__emplace_unique_key_args<grl::IconLayerMapKey,std::piecewise_construct_t const&,std::tuple<grl::IconLayerMapKey&&>,std::tuple<>>(uint64_t **a1, __int16 *a2, _DWORD **a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v8;
  __int16 *v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = (uint64_t *)(a1 + 1);
  v5 = (uint64_t)a1[1];
  if (!v5)
  {
    v8 = (uint64_t *)(a1 + 1);
LABEL_10:
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 48, 8);
    v10 = (uint64_t *)v11;
    v12 = *a3;
    *(_DWORD *)(v11 + 32) = **a3;
    *(_BYTE *)(v11 + 36) = 0;
    if (*((_BYTE *)v12 + 4))
    {
      *(_BYTE *)(v11 + 37) = *((_BYTE *)v12 + 5);
      *(_BYTE *)(v11 + 36) = 1;
    }
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = v8;
    *v6 = v11;
    v13 = (uint64_t *)**a1;
    v14 = (uint64_t *)v11;
    if (v13)
    {
      *a1 = v13;
      v14 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[3] = (uint64_t *)((char *)a1[3] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t *)v5;
      v9 = (__int16 *)(v5 + 32);
      if (!grl::IconLayerMapKey::operator()((uint64_t)(a1 + 4), a2, (__int16 *)(v5 + 32)))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!grl::IconLayerMapKey::operator()((uint64_t)(a1 + 4), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v10 = (uint64_t *)*v6;
  if (!*v6)
    goto LABEL_10;
  return v10;
}

uint64_t grl::ImageLayerRenderer::ImageLayerRenderer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_WORD *)(a1 + 8) = 2;
  *(_BYTE *)(a1 + 10) = 1;
  *(_QWORD *)a1 = &off_1E42C26B8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>(a1 + 16, *(_BYTE **)a2, *(_BYTE **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a2 + 34);
  v7 = *(_OWORD *)(a2 + 38);
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 54);
  *(_OWORD *)(a1 + 54) = v7;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = v8;
  *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 73);
  v9 = *(_OWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v10;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 120);
  v11 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 150) = *(_OWORD *)(a2 + 134);
  *(_OWORD *)(a1 + 140) = v11;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 272) = *a3;
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100](a1 + 280, (uint64_t)(a3 + 1));
  return a1;
}

void esl::QuartzImage::createImageInRect(CGImageRef *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  double v7;
  double v8;
  float v9;
  float v10;
  double v11;
  float v12;
  double v13;
  __int128 v14;
  CGImageRef image;

  if (((*((uint64_t (**)(CGImageRef *))*a1 + 5))(a1) & 1) != 0)
  {
    v6 = a2[1];
    v8 = v6;
    v9 = a2[3] - v6;
    if ((float)(a2[2] - *a2) >= 0.0)
      v10 = a2[2] - *a2;
    else
      v10 = 0.0;
    v11 = v10;
    if (v9 >= 0.0)
      v12 = v9;
    else
      v12 = 0.0;
    v13 = v12;
    v7 = *a2;
    image = CGImageCreateWithImageInRect(a1[2], *(CGRect *)(&v8 - 1));
    std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>(&image, &v14);
    CGImageRelease(image);
    *(_OWORD *)a3 = v14;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_19F09FE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<esl::QuartzImage>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

esl::QuartzImage *esl::QuartzImage::QuartzImage(esl::QuartzImage *this, CGImageRef image)
{
  *(_QWORD *)this = &off_1E42B0330;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  CGImageRetain(image);
  *((_QWORD *)this + 2) = image;
  return this;
}

void sub_19F09FEC8(_Unwind_Exception *a1)
{
  esl::QuartzImage *v1;

  esl::QuartzImage::~QuartzImage(v1);
  _Unwind_Resume(a1);
}

void esl::QuartzImage::~QuartzImage(esl::QuartzImage *this)
{
  CGImage *v2;
  void *v3;

  *(_QWORD *)this = &off_1E42B0330;
  v2 = (CGImage *)*((_QWORD *)this + 2);
  if (v2)
  {
    CGImageRelease(v2);
    *((_QWORD *)this + 2) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
}

{
  esl::QuartzImage::~QuartzImage(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__list_imp<std::string>::clear(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

grl::IconRenderer *grl::codec::IconData::imageWithImageData@<X0>(grl::codec::IconData *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>, float a6@<S0>)
{
  uint64_t *v8;
  grl::IconRenderer *result;
  uint64_t v10;
  grl::IconRenderer *v11;
  float v12;

  v12 = a6;
  geo::make_unique<grl::IconRenderer,grl::codec::IconData const&,float &,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&>(a1, &v12, a3, a2, a4, (uint64_t *)&v11);
  v8 = (uint64_t *)operator new(0x128uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = (uint64_t)&off_1E42E58B8;
  *a5 = grl::IconImage::IconImage(v8 + 3, (uint64_t *)&v11, a3);
  a5[1] = v8;
  result = v11;
  v11 = 0;
  if (result)
  {
    grl::IconRenderer::~IconRenderer(result);
    return (grl::IconRenderer *)MEMORY[0x1A1AF4E00](v10);
  }
  return result;
}

uint64_t *grl::IconImage::IconImage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  NSObject *v11;
  int v12;
  char v13;
  char v14;
  int v15;
  int v16;
  uint64_t LayerRenderer;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  *a2 = 0;
  *a1 = v5;
  a1[13] = 0;
  v6 = a1 + 13;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  a1[14] = grl::Allocator::instance((grl::Allocator *)a1);
  a1[15] = 0;
  *((_DWORD *)a1 + 32) = 0;
  *((_BYTE *)a1 + 132) = 0;
  a1[12] = (uint64_t)v6;
  *((_BYTE *)a1 + 136) = 0;
  *((_BYTE *)a1 + 138) = 0;
  *((_BYTE *)a1 + 143) = 0;
  *((_BYTE *)a1 + 148) = 0;
  *((_BYTE *)a1 + 153) = 0;
  *((_BYTE *)a1 + 158) = 0;
  *((_BYTE *)a1 + 163) = 0;
  *((_BYTE *)a1 + 168) = 0;
  *((_BYTE *)a1 + 173) = 0;
  *((_BYTE *)a1 + 178) = 0;
  *((_BYTE *)a1 + 183) = 0;
  a1[26] = 850045863;
  *(_OWORD *)(a1 + 27) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  a1[33] = 0;
  if (*a1)
  {
    grl::IconMetrics::operator=((uint64_t)(a1 + 3), *a1 + 120);
    v7 = *a1;
    if (!*(_BYTE *)(*a1 + 72))
    {
LABEL_28:
      if (grl::IconRenderer::hasPathLayers((grl::IconRenderer *)v7))
      {
        LayerRenderer = grl::IconRenderer::findLayerRenderer(*a1, 1, 0);
        if (*(_WORD *)(LayerRenderer + 8) == 1)
          v18 = LayerRenderer + 16;
        else
          v18 = 0;
        v19 = *((unsigned __int8 *)a1 + 153);
        *(_DWORD *)((char *)a1 + 154) = *(_DWORD *)(v18 + 44);
        if (!v19)
          *((_BYTE *)a1 + 153) = 1;
        v20 = grl::IconRenderer::findLayerRenderer(*a1, 1, 0);
        if (*(_WORD *)(v20 + 8) == 1)
          v21 = v20 + 16;
        else
          v21 = 0;
        v22 = *((unsigned __int8 *)a1 + 163);
        *((_DWORD *)a1 + 41) = *(_DWORD *)(v21 + 85);
        if (!v22)
          *((_BYTE *)a1 + 163) = 1;
        v23 = grl::IconRenderer::findLayerRenderer(*a1, 1, 0);
        if (*(_WORD *)(v23 + 8) == 1)
          v24 = v23 + 16;
        else
          v24 = 0;
        v25 = *(_BYTE *)(v24 + 120);
        if (!*((_BYTE *)a1 + 183))
          *((_BYTE *)a1 + 183) = 1;
        *((_BYTE *)a1 + 184) = v25;
        v26 = grl::IconRenderer::findLayerRenderer(*a1, 1, 0);
        if (*(_WORD *)(v26 + 8) == 1)
          v27 = v26 + 16;
        else
          v27 = 0;
        v28 = *((unsigned __int8 *)a1 + 173);
        *(_DWORD *)((char *)a1 + 174) = *(_DWORD *)(v27 + 104);
        if (!v28)
          *((_BYTE *)a1 + 173) = 1;
      }
      if (grl::IconRenderer::hasImageLayers((grl::IconRenderer *)*a1))
      {
        v29 = grl::IconRenderer::findLayerRenderer(*a1, 2, 0);
        v30 = *(_WORD *)(v29 + 8) == 2 ? v29 + 16 : 0;
        v31 = *((unsigned __int8 *)a1 + 158);
        *(_DWORD *)((char *)a1 + 159) = *(_DWORD *)(v30 + 34);
        if (!v31)
          *((_BYTE *)a1 + 158) = 1;
      }
      *((_DWORD *)a1 + 48) = *(_DWORD *)(a3 + 8);
      *((_DWORD *)a1 + 47) = *(_DWORD *)(*a1 + 260);
      *(uint64_t *)((char *)a1 + 196) = a1[7];
      if (*(_BYTE *)(a3 + 3))
        std::unique_ptr<grl::IconRenderer>::reset[abi:nn180100]((grl::IconRenderer **)a1, 0);
      return a1;
    }
    v8 = *((unsigned __int8 *)a1 + 138);
    *(_DWORD *)((char *)a1 + 139) = *(_DWORD *)(v7 + 84);
    if (!v8)
      *((_BYTE *)a1 + 138) = 1;
    if (*(_BYTE *)(v7 + 112))
    {
      v9 = *((unsigned __int8 *)a1 + 143);
      *((_DWORD *)a1 + 36) = *(_DWORD *)(v7 + 88);
      if (v9)
        goto LABEL_15;
      v10 = 1;
    }
    else
    {
      if (!*((_BYTE *)a1 + 143))
        goto LABEL_15;
      v10 = 0;
    }
    *((_BYTE *)a1 + 143) = v10;
LABEL_15:
    if (*(_BYTE *)(v7 + 113))
    {
      v12 = *((unsigned __int8 *)a1 + 148);
      *(_DWORD *)((char *)a1 + 149) = *(_DWORD *)(v7 + 93);
      if (!v12)
      {
        v13 = 1;
LABEL_20:
        *((_BYTE *)a1 + 148) = v13;
      }
    }
    else if (*((_BYTE *)a1 + 148))
    {
      v13 = 0;
      goto LABEL_20;
    }
    v14 = *(_BYTE *)(v7 + 92);
    if (!*((_BYTE *)a1 + 136))
      *((_BYTE *)a1 + 136) = 1;
    *((_BYTE *)a1 + 137) = v14;
    v15 = *(_DWORD *)(v7 + 101);
    if (!*((_BYTE *)a1 + 168))
      *((_BYTE *)a1 + 168) = 1;
    *(_DWORD *)((char *)a1 + 169) = v15;
    v16 = *(_DWORD *)(v7 + 97);
    if (!*((_BYTE *)a1 + 178))
      *((_BYTE *)a1 + 178) = 1;
    *(_DWORD *)((char *)a1 + 179) = v16;
    goto LABEL_28;
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
  v11 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    v33 = 136315650;
    v34 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    v35 = 2080;
    v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconImage.cpp";
    v37 = 1024;
    v38 = 19;
    _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "grl::IconImage should never be passed a nullptr grl::IconRenderer.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v33, 0x1Cu);
  }
  return a1;
}

BOOL grl::IconRenderer::hasPathLayers(grl::IconRenderer *this)
{
  char *v1;
  char *v2;
  int v3;
  _BOOL8 result;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = (char *)*((_QWORD *)this + 4);
  v2 = (char *)this + 40;
  if (v1 == (char *)this + 40)
    return 0;
  do
  {
    v3 = *((unsigned __int16 *)v1 + 16);
    result = v3 == 1;
    if (v3 == 1)
      break;
    v5 = (char *)*((_QWORD *)v1 + 1);
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = *(char **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (char *)*((_QWORD *)v1 + 2);
        v7 = *(_QWORD *)v6 == (_QWORD)v1;
        v1 = v6;
      }
      while (!v7);
    }
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

BOOL grl::IconRenderer::hasImageLayers(grl::IconRenderer *this)
{
  char *v1;
  char *v2;
  int v3;
  _BOOL8 result;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = (char *)*((_QWORD *)this + 4);
  v2 = (char *)this + 40;
  if (v1 == (char *)this + 40)
    return 0;
  do
  {
    v3 = *((unsigned __int16 *)v1 + 16);
    result = v3 == 2;
    if (v3 == 2)
      break;
    v5 = (char *)*((_QWORD *)v1 + 1);
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = *(char **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (char *)*((_QWORD *)v1 + 2);
        v7 = *(_QWORD *)v6 == (_QWORD)v1;
        v1 = v6;
      }
      while (!v7);
    }
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

esl::QuartzImage *esl::QuartzImage::QuartzImage(esl::QuartzImage *this, const unsigned __int8 *a2, CFIndex a3)
{
  CGImageRef *v4;
  const __CFData *v5;
  CGDataProvider *v6;

  *((_QWORD *)this + 2) = 0;
  v4 = (CGImageRef *)((char *)this + 16);
  *(_QWORD *)this = &off_1E42B0330;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v5 = CFDataCreate(0, a2, a3);
  v6 = CGDataProviderCreateWithCFData(v5);
  *v4 = CGImageCreateWithPNGDataProvider(v6, 0, 0, kCGRenderingIntentDefault);
  CGDataProviderRelease(v6);
  CFRelease(v5);
  return this;
}

void sub_19F0A0530(_Unwind_Exception *a1)
{
  esl::QuartzImage *v1;

  esl::QuartzImage::~QuartzImage(v1);
  _Unwind_Resume(a1);
}

uint64_t md::CrossFadeLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10;
  uint64_t result;

  if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 88))(**(_QWORD **)(a1 + 576)))
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 576) + 120))(**(_QWORD **)(a1 + 576), a2, a3, a4, a5);
  else
    v10 = 32;
  *(_BYTE *)(a1 + 636) = v10;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8)))
    LODWORD(result) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8)
                                                                                            + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), a2, a3, a4, a5);
  else
    LODWORD(result) = 32;
  *(_BYTE *)(a1 + 637) = result;
  if (*(_BYTE *)(a1 + 636) == 37)
    return 37;
  else
    return result;
}

uint64_t md::LabelPart::isDisplayable(md::LabelPart *this)
{
  return *((unsigned __int8 *)this + 560);
}

uint64_t md::NullLabelPart::isDisplayable(md::NullLabelPart *this)
{
  return 1;
}

uint64_t md::NullLabelPart::layoutForDisplay()
{
  return 37;
}

void grl::IconMetrics::setupBasicIcon(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  float v3;
  float v4;
  unsigned __int16 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t LayerRenderer;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  unsigned int v37;
  unsigned __int16 v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  int v52;
  unsigned __int16 v53;
  float v54;
  float v55;
  uint64_t v56;
  float *v57;
  float *v58;
  uint64_t v59;
  float v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  char v75;
  char v76;
  float v77;
  float v78;
  unsigned int v79;
  NSObject *v80;
  const char *v81;
  uint8_t *v82;
  NSObject *v83;
  unsigned __int16 v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  float *v94;
  float v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  int v105;
  float *v106;
  float v107;
  float v108;
  float *v109;
  float v110;
  float v111;
  unsigned int v112;
  float v113;
  unsigned __int16 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float *v118;
  uint64_t v119;
  float v120;
  float v121;
  float v122;
  unsigned int v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  NSObject *v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  int v147;
  float v148;
  float v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  int8x8_t v154;
  unint64_t v155;
  _BYTE buf[22];
  __int16 v157;
  int v158;
  uint64_t v159;

  v7 = 0;
  v159 = *MEMORY[0x1E0C80C00];
  v154 = 0;
  v155 = 0;
  v8 = (_QWORD *)(a3 + 40);
  v9 = (_QWORD *)(a3 + 72);
  while (1)
  {
    LayerRenderer = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 3, v7);
    if (!LayerRenderer || *(_WORD *)(LayerRenderer + 8) != 3)
    {
LABEL_32:
      v26 = 0;
      do
      {
        v27 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 2, v26);
        if (v27)
        {
          if (*(_WORD *)(v27 + 8) == 2)
            v28 = v27 + 16;
          else
            v28 = 0;
        }
        else
        {
          v28 = 0;
        }
        v29 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 2, v26);
        if (!v29)
          break;
        if (*(_WORD *)(v29 + 8) != 2)
          break;
        v30 = *(_QWORD *)(v29 + 272);
        buf[0] = 1;
        *(_QWORD *)&buf[4] = v30;
        if (!v28)
          break;
        if (!*(_BYTE *)(v28 + 136))
        {
          v31 = operator new();
          v151 = grl::LayerMetrics::LayerMetrics(v31, v28, (double *)&buf[4], v32, v33, v34, v35, v36);
          v154 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v151 + 44), (float32x2_t)v154), *(int8x8_t *)(v151 + 44), v154);
          grl::IconMetrics::cacheLayerMetrics(a1, 2u, v26, &v151);
          if (v151)
            (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
        }
        v37 = v26++;
      }
      while (v37 < 4);
      v38 = 0;
      v39 = *(float *)&v154.i32[1];
      v40 = *(float *)&v154.i32[1];
      v41 = *(float *)v154.i32;
      v42 = *(float *)v154.i32;
      do
      {
        if (v38 > 2u)
          break;
        v43 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 1, v38);
        if (!v43 || *(_WORD *)(v43 + 8) != 1)
          break;
        v44 = v43 + 16;
        v45 = operator new();
        v51 = grl::PathLayerMetrics::PathLayerMetrics(v45, v44, (float *)&v154, v46, v47, v48, v49, v50);
        *(_QWORD *)buf = v51;
        v52 = a2[258];
        if (!a2[258])
        {
          if (v42 < *(float *)(v51 + 44))
            v42 = *(float *)(v51 + 44);
          if (v40 < *(float *)(v51 + 48))
            v40 = *(float *)(v51 + 48);
        }
        grl::IconMetrics::cacheLayerMetrics(a1, 1u, v38, (uint64_t *)buf);
        if (*(_QWORD *)buf)
          (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
        ++v38;
      }
      while (!v52);
      v53 = 0;
      v147 = 0;
      v155 = __PAIR64__(LODWORD(v40), LODWORD(v42));
      v151 = 0;
      v152 = v42 + 0.0;
      v153 = v40 + 0.0;
      v54 = v42 * 0.5;
      v55 = v40 * 0.5;
      v148 = 0.0;
      v149 = 0.0;
      while (1)
      {
        v56 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 1, v53);
        if (!v56 || *(_WORD *)(v56 + 8) != 1)
          goto LABEL_81;
        v57 = (float *)grl::IconMetrics::privateLayerMetrics(a1, 1, v53);
        if (!v57)
          break;
        if (!a2[258])
        {
          v58 = v57;
          v59 = (uint64_t)(v57 + 11);
          v60 = ceilf(v54 - (float)(v57[11] * 0.5));
          v57[13] = v60;
          v61 = v57 + 13;
          v62 = ceilf(v55 - (float)(v57[12] * 0.5));
          v57[14] = v62;
          if (!v53)
          {
            v3 = gm::Box<float,2>::operator+(v57 + 29, v61);
            v4 = v63;
            v145 = v65;
            v146 = v64;
            v148 = gm::Box<float,2>::operator+(v58 + 3, v61);
            v149 = v66;
            v41 = v67;
            v39 = v68;
            v60 = v58[13];
            v62 = v58[14];
            v143 = v58[16] + v62;
            v144 = v58[15] + v60;
            v141 = v62 + v58[18];
            v142 = v60 + v58[17];
            v147 = 1;
          }
          if (a2[259])
          {
            v69 = (float)(ceilf(*(float *)&v154.i32[1] * 0.175) * (float)v53) + v62;
            v58[13] = v60 + 0.0;
            v58[14] = v69;
            v70 = gm::Box<float,2>::create(v59);
            v71 = 0;
            *(float *)buf = v70;
            *(_DWORD *)&buf[4] = v72;
            *(_DWORD *)&buf[8] = v73;
            *(_DWORD *)&buf[12] = v74;
            v75 = 1;
            do
            {
              v76 = v75;
              v77 = *(float *)&buf[4 * v71];
              if (v77 >= *((float *)&v151 + v71))
                v77 = *((float *)&v151 + v71);
              *((float *)&v151 + v71) = v77;
              v78 = *(&v152 + v71);
              if (v78 < *(float *)&buf[4 * v71 + 8])
                v78 = *(float *)&buf[4 * v71 + 8];
              *(&v152 + v71) = v78;
              v71 = 1;
              v75 = 0;
            }
            while ((v76 & 1) != 0);
          }
          v79 = v53++;
          if (v79 < 2)
            continue;
        }
        goto LABEL_81;
      }
      if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
      v83 = GEOGetGeoResourceLibMetricsLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
        v157 = 1024;
        v158 = 250;
        _os_log_impl(&dword_19F029000, v83, OS_LOG_TYPE_ERROR, "Failed to find layer metrics for image layer.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
LABEL_81:
      v139 = v4;
      v84 = 0;
      v85 = v152 - *(float *)&v151;
      v86 = v153 - *((float *)&v151 + 1);
      v140 = v41;
      v87 = v148 + (float)((float)(v41 - v148) * 0.5);
      v88 = v149 + (float)((float)(v39 - v149) * 0.5);
      while (1)
      {
        v89 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 2, v84);
        if (!v89 || (v90 = v89, *(_WORD *)(v89 + 8) != 2))
        {
LABEL_95:
          v155 = __PAIR64__(LODWORD(v86), LODWORD(v85));
          v113 = v140;
          goto LABEL_96;
        }
        if (*(_BYTE *)(v89 + 152))
        {
          v91 = v89 + 16;
          v92 = grl::IconMetrics::privateLayerMetrics(a1, 1, 0);
          v93 = (float *)(v92 + 116);
          v94 = (float *)(v92 + 52);
          gm::Box<float,2>::operator+((float *)(v92 + 116), (float *)(v92 + 52));
          v96 = v95;
          *(float *)buf = v98 - gm::Box<float,2>::operator+(v93, v94);
          *(float *)&buf[4] = v96 - v97;
          v99 = operator new();
          v150 = grl::LayerMetrics::LayerMetrics(v99, v91, (double *)buf, v100, v101, v102, v103, v104);
          *(float *)(v99 + 52) = gm::Box<float,2>::operator+(v93, v94);
          *(_DWORD *)(v99 + 56) = v105;
          grl::IconMetrics::cacheLayerMetrics(a1, 2u, v84, &v150);
          if (v150)
            (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
        }
        else
        {
          v106 = (float *)grl::IconMetrics::privateLayerMetrics(a1, 2, v84);
          if (!v106)
          {
            v155 = __PAIR64__(LODWORD(v86), LODWORD(v85));
            if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
            v113 = v140;
            v138 = GEOGetGeoResourceLibMetricsLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
              v157 = 1024;
              v158 = 299;
              _os_log_impl(&dword_19F029000, v138, OS_LOG_TYPE_ERROR, "Failed to find layer metrics for image layer.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
LABEL_96:
            v114 = 0;
            do
            {
              v115 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 3, v114);
              if (!v115)
                break;
              v116 = v115;
              if (*(_WORD *)(v115 + 8) != 3)
                break;
              v117 = grl::IconMetrics::privateLayerMetrics(a1, 3, v114);
              if (!v117)
              {
                if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
                v124 = GEOGetGeoResourceLibMetricsLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLi"
                                        "b/IconMetrics.cpp";
                  v157 = 1024;
                  v158 = 326;
                  _os_log_impl(&dword_19F029000, v124, OS_LOG_TYPE_ERROR, "Failed to find layer metrics for text layer.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                }
                break;
              }
              v118 = (float *)v117;
              if (!grl::IconRenderer::hasPathLayers((grl::IconRenderer *)a2)
                || (v119 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 1, 0)) == 0
                || *(_WORD *)(v119 + 8) != 1
                || (v120 = v39, *(_BYTE *)(v119 + 136) != 3))
              {
                v120 = v86;
              }
              v121 = (float)(v87 - (float)(v118[11] * 0.5)) + (float)(v118[23] + v118[13]);
              if (*(_BYTE *)(v116 + 193))
              {
                v121 = v121 + *(float *)(v116 + 184);
                v122 = v120 - *(float *)(v116 + 188);
              }
              else
              {
                v122 = (float)(v88 - (float)(v118[12] * 0.5)) + (float)(v118[24] + v118[14]);
              }
              v118[13] = ceilf(v121);
              v118[14] = ceilf(v122);
              v123 = v114++;
            }
            while (v123 < 4);
            v125 = grl::IconRenderer::findLayerRenderer((uint64_t)a2, 0, 0);
            if (v125)
            {
              if (!*(_WORD *)(v125 + 8))
              {
                v126 = v125 + 16;
                v127 = operator new();
                *(_QWORD *)buf = grl::LayerMetrics::LayerMetrics(v127, v126, &v155);
                grl::IconMetrics::cacheLayerMetrics(a1, 0, 0, (uint64_t *)buf);
                if (*(_QWORD *)buf)
                  (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
              }
            }
            if (v155)
            {
              v128 = ceilf(v85);
              v129 = ceilf(v86);
              *(float *)(a1 + 32) = v128;
              *(float *)(a1 + 36) = v129;
              *(_QWORD *)(a1 + 40) = 0;
              v130 = v128 * 0.5;
              v131 = v129 * 0.5;
              *(float *)(a1 + 48) = v130;
              *(float *)(a1 + 52) = v131;
              *(float *)(a1 + 16) = v148;
              *(float *)(a1 + 20) = v149;
              *(float *)(a1 + 24) = v113;
              *(float *)(a1 + 28) = v39;
              v132 = v145;
              v133 = v146;
              if (!v147)
              {
                v132 = v39;
                v133 = v113;
              }
              v134 = v3;
              if (!v147)
                v134 = v148;
              v135 = v139;
              if (!v147)
                v135 = v149;
              *(float *)a1 = v134;
              *(float *)(a1 + 4) = v135;
              *(float *)(a1 + 8) = v133;
              *(float *)(a1 + 12) = v132;
              v136 = v143;
              v137 = v144;
              if (!v147)
              {
                v136 = v131;
                v137 = v130;
              }
              *(float *)(a1 + 56) = v137;
              *(float *)(a1 + 60) = v136;
              if (v147)
              {
                v131 = v141;
                v130 = v142;
              }
              *(float *)(a1 + 64) = v130;
              *(float *)(a1 + 68) = v131;
              return;
            }
            if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
            v80 = GEOGetGeoResourceLibMetricsLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v81 = "An icon with a size of 0 was generated.";
              v82 = buf;
              goto LABEL_134;
            }
            return;
          }
          v107 = ceilf(v87 - (float)(v106[11] * 0.5));
          v108 = ceilf(v88 - (float)(v106[12] * 0.5));
          if (*(_BYTE *)(v90 + 165))
          {
            v107 = v107 + *(float *)(v90 + 120);
            v108 = v108 + *(float *)(v90 + 124);
          }
          v106[13] = v107;
          v106[14] = v108;
          v109 = v106 + 13;
          gm::Box<float,2>::operator+(v106 + 3, v106 + 13);
          if (v85 < v110)
            v85 = v110;
          gm::Box<float,2>::operator+(v109 - 10, v109);
          if (v86 < v111)
            v86 = v111;
        }
        v112 = v84++;
        if (v112 >= 4)
          goto LABEL_95;
      }
    }
    v11 = *v8;
    if (!*v8)
      goto LABEL_15;
    v12 = v8;
    do
    {
      v13 = *(unsigned __int16 *)(v11 + 28);
      v14 = v13 >= v7;
      if (v13 >= v7)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v12 = (_QWORD *)v11;
      v11 = *v15;
    }
    while (*v15);
    if (v12 != v8 && *((unsigned __int16 *)v12 + 14) <= v7)
    {
      v17 = 0;
      *(_OWORD *)&buf[4] = *((_OWORD *)v12 + 2);
      v16 = 1;
    }
    else
    {
LABEL_15:
      v16 = 0;
      v17 = 1;
    }
    buf[0] = v16;
    v18 = *v9;
    if (!*v9)
      break;
    v19 = LayerRenderer + 16;
    v20 = v9;
    do
    {
      v21 = *(unsigned __int16 *)(v18 + 28);
      v22 = v21 >= v7;
      if (v21 >= v7)
        v23 = (uint64_t *)v18;
      else
        v23 = (uint64_t *)(v18 + 8);
      if (v22)
        v20 = (_QWORD *)v18;
      v18 = *v23;
    }
    while (*v23);
    if (v20 == v9 || ((*((unsigned __int16 *)v20 + 14) <= v7) & ~v17) == 0)
      break;
    v24 = operator new();
    v151 = grl::TextLayerMetrics::TextLayerMetrics(v24, v19, (float32x2_t *)&buf[4]);
    v25 = v7;
    grl::IconMetrics::cacheLayerMetrics(a1, 3u, v7, &v151);
    if (v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
    ++v7;
    if (v25 >= 4)
      goto LABEL_32;
  }
  if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
  v80 = GEOGetGeoResourceLibMetricsLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v151) = 0;
    v81 = "[Warning][Text Layer] Failed to get text bounds and text baseline for text layer. Probably because a font wasn't found.";
    v82 = (uint8_t *)&v151;
LABEL_134:
    _os_log_impl(&dword_19F029000, v80, OS_LOG_TYPE_ERROR, v81, v82, 2u);
  }
}

uint64_t grl::IconRenderer::findLayerRenderer(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t result;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  LOWORD(v13) = a2;
  HIWORD(v13) = a3;
  LOBYTE(v14) = 0;
  v3 = a1 + 40;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 0;
  v5 = a1 + 64;
  v6 = a1 + 40;
  do
  {
    v7 = grl::IconLayerMapKey::operator()(v5, (__int16 *)(v4 + 32), (__int16 *)&v13);
    v8 = (uint64_t *)(v4 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v4;
      v6 = v4;
    }
    v4 = *v8;
  }
  while (*v8);
  if (v6 == v3 || grl::IconLayerMapKey::operator()(v5, (__int16 *)&v13, (__int16 *)(v6 + 32)))
    return 0;
  result = *(_QWORD *)(v6 + 40);
  if (!result)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v10 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      v11 = *(unsigned __int16 *)(v6 + 32);
      v12 = *(unsigned __int16 *)(v6 + 34);
      v13 = 67110146;
      v14 = v11;
      v15 = 1024;
      v16 = v12;
      v17 = 2080;
      v18 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v19 = 2080;
      v20 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
      v21 = 1024;
      v22 = 645;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_ERROR, "Nullptr LayerRenderer found in IconRenderer. This should never occur. LayerType: %hu, LayerIndex: %d: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v13, 0x28u);
    }
    return 0;
  }
  return result;
}

uint64_t grl::IconLayerMapKey::operator()(uint64_t a1, __int16 *a2, __int16 *a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;
  unsigned int v11;

  v3 = *a2;
  if (v3 > 4)
    v4 = 0;
  else
    v4 = dword_1A0086FF0[v3];
  v5 = *a3;
  if (v5 > 4)
    v6 = 0;
  else
    v6 = dword_1A0086FF0[v5];
  if (v4 != v6)
    return v4 < v6;
  v7 = (unsigned __int16)a2[1];
  v8 = (unsigned __int16)a3[1];
  v9 = v7 > v8;
  v10 = v7 < v8;
  v11 = v9;
  if ((_DWORD)v3 == 1)
    return v11;
  else
    return v10;
}

uint64_t grl::IconMetrics::privateLayerMetrics(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  __int16 v10[2];
  char v11;

  v10[0] = a2;
  v10[1] = a3;
  v11 = 0;
  v3 = a1 + 80;
  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
    return 0;
  v5 = a1 + 104;
  v6 = a1 + 80;
  do
  {
    v7 = grl::IconLayerMapKey::operator()(v5, (__int16 *)(v4 + 32), v10);
    v8 = (uint64_t *)(v4 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v4;
      v6 = v4;
    }
    v4 = *v8;
  }
  while (*v8);
  if (v6 == v3 || grl::IconLayerMapKey::operator()(v5, v10, (__int16 *)(v6 + 32)))
    return 0;
  else
    return *(_QWORD *)(v6 + 40);
}

void grl::IconMetrics::cacheLayerMetrics(uint64_t a1, unsigned int a2, __int16 a3, uint64_t *a4)
{
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  __int16 v9[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v9[0] = a2;
  v9[1] = a3;
  v10 = 0;
  if ((std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::__emplace_unique_key_args<grl::IconLayerMapKey,grl::IconLayerMapKey const&,std::unique_ptr<grl::LayerMetrics>>((uint64_t **)(a1 + 72), v9, (uint64_t)v9, a4) & 1) == 0)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v5 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      grl::toString<grl::LayerType>(a2, __p);
      if (v8 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v12 = v6;
      v13 = 2080;
      v14 = "result.second";
      v15 = 2080;
      v16 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
      v17 = 1024;
      v18 = 582;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "Failed to insert LayerMetrics for an %s layer, due to the LayerMetrics already existing.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
      if (v8 < 0)
        operator delete(__p[0]);
    }
  }
}

uint64_t md::HorizontalTextLabelPart::layoutForDisplay(float32x2_t *a1, uint64_t a2, md::LabelAnimator *a3, float32x2_t *a4, float32x2_t *a5, double a6, double a7, double a8, float64x2_t a9)
{
  float v13;
  float v14;
  float v15;
  float32_t v16;
  double v17;
  uint64_t v18;
  float v19;
  int v20;
  int v21;
  float32x2_t v22;
  int v23;
  double v24;
  float v25;
  double v26;
  double v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float32x2_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[48];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  v13 = *(float *)(a2 + 904);
  a1[67].f32[0] = v13;
  v14 = *(float *)(a2 + 908);
  a1[67].f32[1] = v14;
  LODWORD(a8) = a1[66].i32[0];
  *(float *)a9.f64 = *(float *)&a8 * v14;
  v15 = a1[66].f32[1];
  v16 = -(float)((float)(v15 * v14) - (float)(*(float *)&a8 * v13));
  a1[41].f32[0] = v16;
  a1[41].f32[1] = *(float *)a9.f64 + (float)(v15 * v13);
  v17 = fabsf(v16 + -1.0);
  a1[63].i8[4] = v17 > 0.000001;
  v18 = md::TextLabelPart::layoutForDisplay(a1, (md::LabelManager *)a2, a3, (__int32 *)a4, a5, v17, 0.000001, a8, a9);
  if ((_DWORD)v18 == 37)
  {
    v19 = a1[92].f32[1];
    if (!a1[137].i8[3] && v19 == a1[130].f32[0] && a1[92].f32[0] == a1[130].f32[1])
    {
      v20 = a1[100].u16[2];
      v21 = a1[100].u16[3];
    }
    else
    {
      a1[137].i8[3] = 0;
      a1[130].f32[0] = v19;
      a1[130].i32[1] = a1[92].i32[0];
      a1[129].f32[0] = a1[129].f32[1] * v19;
      md::HorizontalTextLabelPart::placeLines((uint64_t)&a1[74], a1 + 129, a2, (uint64_t)&a1[39]);
      v20 = 0;
      v21 = a1[137].u16[0];
      a1[100].i32[0] = a1[136].i32[1];
      a1[100].i32[1] = v21 << 16;
    }
    v22 = a1[74];
    if (v20 == v21
      || (v23 = md::FontAtlas::commitGlyphs(*(_QWORD *)(a2 + 304), *(_QWORD *)&v22 + 96, (unsigned __int16 *)&a1[100] + 2, v75)) != 0)
    {
      LOBYTE(v23) = md::FontAtlas::commitGlyphs(*(_QWORD *)(a2 + 304), *(_QWORD *)&v22 + 32, (unsigned __int16 *)&a1[100], v75);
    }
    a1[108].i8[3] = v23;
    v25 = *(float *)(*(_QWORD *)&a1[4] + 68);
    a1[52].f32[0] = v25;
    a1[44].i32[0] = a4->i32[0];
    a1[44].i32[1] = a4->i32[1];
    a1[63].i8[6] = fabsf(v25 + -1.0) > 0.000001;
    v26 = *(double *)a5;
    v27 = COERCE_DOUBLE(vadd_f32(*a5, *a4));
    *(double *)&a1[65] = v27;
    *(double *)&a1[43] = v27;
    md::CollisionObject::setupShapeData((uint64_t)&a1[39], v27, v26, v24);
    if (a1[70].i8[5])
    {
      v28 = a1[105];
      if (v28)
      {
        v29 = a1[6];
        if (a1[103].i8[6])
          v30 = 1.1;
        else
          v30 = 1.0;
        v31 = a1[68].f32[0];
        v32 = a1[68].f32[1];
        if (!*(_QWORD *)&v29)
        {
          v33 = *(float *)(*(_QWORD *)&a1[4] + 68);
          v30 = (float)(v30 * a1[114].f32[0]) * v33;
          v31 = v33 * v31;
          v32 = v33 * v32;
        }
        v34 = fabsf(v30 + -1.0);
        if (LODWORD(v31) | LODWORD(v32) || v34 > 0.000001)
        {
          v43 = v30;
          if (v34 <= 0.000001)
            v43 = 1.0;
          *(double *)v75 = v43;
          *(double *)&v75[40] = v43;
          memset(&v75[8], 0, 32);
          v78 = *(unint64_t *)&v43;
          v76 = 0u;
          v77 = 0u;
          *(double *)&v79 = v31;
          *((double *)&v79 + 1) = v32;
          v80 = xmmword_19FFB33A0;
          if (v29)
          {
            gm::operator*<double,4,4,4>((double *)&v67, (double *)v29, (double *)v75);
          }
          else
          {
            v71 = v77;
            v72 = v78;
            v73 = v79;
            v74 = v80;
            v67 = *(_OWORD *)v75;
            v68 = *(_OWORD *)&v75[16];
            v69 = *(_OWORD *)&v75[32];
            v70 = v76;
          }
          v44 = v68;
          *(_OWORD *)*(_QWORD *)&v28 = v67;
          *(_OWORD *)(*(_QWORD *)&v28 + 16) = v44;
          v45 = v70;
          *(_OWORD *)(*(_QWORD *)&v28 + 32) = v69;
          *(_OWORD *)(*(_QWORD *)&v28 + 48) = v45;
          v46 = v72;
          *(_OWORD *)(*(_QWORD *)&v28 + 64) = v71;
          *(_OWORD *)(*(_QWORD *)&v28 + 80) = v46;
          v47 = v74;
          *(_OWORD *)(*(_QWORD *)&v28 + 96) = v73;
          *(_OWORD *)(*(_QWORD *)&v28 + 112) = v47;
        }
        else
        {
          if (v29)
          {
            v35 = *(_OWORD *)*(_QWORD *)&v29;
            v36 = *(_OWORD *)(*(_QWORD *)&v29 + 16);
            v37 = *(_OWORD *)(*(_QWORD *)&v29 + 32);
            v38 = *(_OWORD *)(*(_QWORD *)&v29 + 48);
            v39 = *(_OWORD *)(*(_QWORD *)&v29 + 64);
            v40 = *(_OWORD *)(*(_QWORD *)&v29 + 80);
            v41 = *(_OWORD *)(*(_QWORD *)&v29 + 96);
            v42 = *(_OWORD *)(*(_QWORD *)&v29 + 112);
          }
          else
          {
            v37 = xmmword_19FFB33A0;
            v35 = xmmword_19FFB32C0;
            v36 = 0uLL;
            v38 = 0uLL;
            v39 = 0uLL;
            v40 = xmmword_19FFB32C0;
            v41 = 0uLL;
            v42 = xmmword_19FFB33A0;
          }
          *(_OWORD *)*(_QWORD *)&v28 = v35;
          *(_OWORD *)(*(_QWORD *)&v28 + 16) = v36;
          *(_OWORD *)(*(_QWORD *)&v28 + 32) = v37;
          *(_OWORD *)(*(_QWORD *)&v28 + 48) = v38;
          *(_OWORD *)(*(_QWORD *)&v28 + 64) = v39;
          *(_OWORD *)(*(_QWORD *)&v28 + 80) = v40;
          *(_OWORD *)(*(_QWORD *)&v28 + 96) = v41;
          *(_OWORD *)(*(_QWORD *)&v28 + 112) = v42;
        }
      }
      a1[53] = v28;
      v48 = a1[74];
      v50 = *(_QWORD *)(*(_QWORD *)&v48 + 32);
      v49 = *(_QWORD *)(*(_QWORD *)&v48 + 40);
      if (v49 != v50)
      {
        gm::operator*<double,4,4,4>((double *)v75, (double *)(a2 + 920), (double *)v28);
        v51 = *(float *)(v50 + 40);
        v52 = *(float *)(v50 + 44);
        v53 = *(double *)&v79 + *(double *)v75 * v51 + *(double *)&v75[32] * v52;
        v54 = *((double *)&v79 + 1) + *(double *)&v75[8] * v51 + *(double *)&v75[40] * v52;
        v55 = *(double *)&v80 + *(double *)&v75[16] * v51 + *(double *)&v76 * v52;
        v56 = 1.0 / (*((double *)&v80 + 1) + *(double *)&v75[24] * v51 + *((double *)&v76 + 1) * v52);
        v57 = v56 * v53;
        v58 = v56 * v54;
        v59 = v56 * v55;
        v60 = *(float *)(v49 - 48);
        v61 = *(float *)(v49 - 44);
        v62 = *((double *)&v80 + 1) + *(double *)&v75[24] * v60 + *((double *)&v76 + 1) * v61;
        v63 = 1.0 / v62 * (*(double *)&v79 + *(double *)v75 * v60 + *(double *)&v75[32] * v61);
        v64 = 1.0 / v62 * (*((double *)&v79 + 1) + *(double *)&v75[8] * v60 + *(double *)&v75[40] * v61);
        v65 = 1.0 / v62 * (*(double *)&v80 + *(double *)&v75[16] * v60 + *(double *)&v76 * v61);
        a1[101].i8[0] = v57 * v57 + v58 * v58 + v59 * v59 < v63 * v63 + v64 * v64 + v65 * v65;
      }
    }
  }
  return v18;
}

uint64_t md::CurvedTextLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, md::LabelAnimator *a3, __int32 *a4, _DWORD *a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  float v19;
  int v20;
  int v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  double *v30;
  float32x2_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  float v36;
  int v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  double v45;
  double v46;
  float64x2_t v47;
  double *v48;
  double v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  double *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  std::mutex *v61;
  char v62;

  v12 = md::TextLabelPart::layoutForDisplay((float32x2_t *)a1, (md::LabelManager *)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((_DWORD)v12 != 37)
    return v12;
  LOBYTE(v61) = 0;
  v13 = *(_QWORD *)(a1 + 592);
  if (*(unsigned __int16 *)(a1 + 804) == *(unsigned __int16 *)(a1 + 806)
    || (v14 = md::FontAtlas::commitGlyphs(*(_QWORD *)(a2 + 304), v13 + 96, (unsigned __int16 *)(a1 + 804), &v61)) != 0)
  {
    LOBYTE(v14) = md::FontAtlas::commitGlyphs(*(_QWORD *)(a2 + 304), v13 + 32, (unsigned __int16 *)(a1 + 800), &v61);
  }
  *(_BYTE *)(a1 + 867) = v14;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(float *)(v18 + 68) * *(float *)(a1 + 740);
  v20 = *(_DWORD *)(a1 + 1192);
  v21 = *(_DWORD *)(a2 + 1616);
  if (*(_BYTE *)(a1 + 1331))
  {
    if (v20 == v21)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v20 != v21)
  {
LABEL_12:
    *(_DWORD *)(a1 + 1192) = v21;
LABEL_13:
    v22 = *(float *)(v18 + 64);
    *(_BYTE *)(a1 + 1329) = (int)v22;
    if (*(_BYTE *)(a1 + 871))
      v22 = *(float *)(a2 + 476);
    *(float *)(a1 + 1152) = v22;
    *(float *)(a1 + 1172) = v19;
    *(_QWORD *)(a1 + 1200) = a1 + 312;
    v23 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 1208) = *(_QWORD *)(v23 + 408);
    *(_QWORD *)(a1 + 1216) = *(_QWORD *)(v23 + 416);
    *(_QWORD *)(a1 + 1224) = *(_QWORD *)(v23 + 424);
    *(_QWORD *)(a1 + 1248) = *(_QWORD *)(v23 + 984);
    *(_DWORD *)(a1 + 1256) = *(_DWORD *)(v23 + 1040);
    *(_DWORD *)(a1 + 1188) = *(_DWORD *)(a2 + 176);
    v24 = *(double *)(v23 + 880);
    *(float32x2_t *)(a1 + 1232) = vcvt_f32_f64(*(float64x2_t *)(v23 + 864));
    *(float *)(a1 + 1240) = v24;
    v25 = *(_QWORD *)(a1 + 720);
    v26 = *(std::__shared_weak_count **)(a1 + 728);
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
      *(_DWORD *)(a1 + 1340) = *(_DWORD *)(v25 + 468);
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 1340) = *(_DWORD *)(v25 + 468);
    }
    (*(void (**)(std::mutex **__return_ptr))(**(_QWORD **)(a1 + 1264) + 32))(&v61);
    if (!v61 || v62)
    {
      v30 = *(double **)(a1 + 16);
      v31 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(a2 + 1400), *(float64x2_t *)(a2 + 1304), v30[120]), *(float64x2_t *)(a2 + 1336), v30[121]), *(float64x2_t *)(a2 + 1368), v30[122]), 1.0/ (*(double *)(a2 + 1424)+ *(double *)(a2 + 1328) * v30[120]+ *(double *)(a2 + 1360) * v30[121]+ *(double *)(a2 + 1392) * v30[122])));
      v12 = md::CurvedTextLabelPart::placeGlyphsOnRoadPath(a1, 1, (unsigned __int8 *)(a1 + 1458), a1 + 1152, a2 + 440, a2, v31.f32[0], v31.f32[1]);
      *(_BYTE *)(a1 + 1331) = 0;
      *(_BYTE *)(a1 + 1332) = v12;
      if (v62)
        std::mutex::unlock(v61);
    }
    else
    {
      *(_BYTE *)(a1 + 1331) = 1;
      if (*(_BYTE *)(a1 + 1332) == 37)
        v12 = 37;
      else
        v12 = 31;
    }
    goto LABEL_30;
  }
  if ((_BYTE)v61)
    goto LABEL_13;
  LODWORD(v16) = *(_DWORD *)(a1 + 1172);
  if (*(float *)&v16 != v19)
    goto LABEL_13;
  v12 = *(unsigned __int8 *)(a1 + 1332);
LABEL_30:
  if (*(_BYTE *)(a1 + 565))
  {
    v32 = *(double **)(a1 + 16);
    v33 = *(double *)(a2 + 576) - v32[51];
    v34 = *(double *)(a2 + 584) - v32[52];
    v17 = *(double *)(a2 + 592) - v32[53];
    v35 = sqrt(v33 * v33 + v34 * v34 + v17 * v17);
    v16 = v32[109] * v34 + v32[110] * v17;
    v15 = (v16 + v32[108] * v33) / v35;
    *(float *)&v15 = v15;
    LODWORD(v16) = 1.0;
    *(float *)&v15 = fmaxf(fminf(*(float *)&v15, 1.0), 0.0);
    *(float *)&v17 = *(float *)&v15 + *(float *)&v15;
    if (*(float *)&v15 >= 0.5)
      v36 = 1.0;
    else
      v36 = *(float *)&v15 + *(float *)&v15;
    *(float *)(a1 + 1184) = v36;
  }
  *(_DWORD *)(a1 + 520) = *a4;
  *(_DWORD *)(a1 + 524) = a4[1];
  *(_DWORD *)(a1 + 344) = *a4;
  LODWORD(v15) = a4[1];
  *(_DWORD *)(a1 + 348) = LODWORD(v15);
  md::CollisionObject::setupShapeData(a1 + 312, v15, v16, v17);
  v37 = *(unsigned __int8 *)(a1 + 565);
  if (*(_BYTE *)(a1 + 565))
  {
    if (*(_BYTE *)(a1 + 1399) == 2)
    {
      v38 = *(double *)(a2 + 768);
      v39 = *(double **)(a1 + 16);
      v40 = v39[51];
      v41 = v39[52];
      v42 = v39[53];
      v43 = 0uLL;
      v44 = (float64x2_t)*(unint64_t *)&v38;
      v45 = 0.0;
      v46 = 0.0;
      v47 = (float64x2_t)*(unint64_t *)&v38;
    }
    else
    {
      v48 = *(double **)(a1 + 16);
      v40 = v48[51];
      v41 = v48[52];
      v42 = v48[53];
      v49 = (*(double *)(a2 + 600) * (v40 - *(double *)(a2 + 576))
           + *(double *)(a2 + 608) * (v41 - *(double *)(a2 + 584))
           + *(double *)(a2 + 616) * (v42 - *(double *)(a2 + 592)))
          * (*(double *)(a2 + 760)
           * *(float *)(*(_QWORD *)(a1 + 32) + 68));
      v44 = vmulq_n_f64(*(float64x2_t *)(a2 + 1432), v49);
      v45 = *(double *)(a2 + 1448) * v49;
      v46 = *(double *)(a2 + 1456) * v49;
      v47 = vmulq_n_f64(*(float64x2_t *)(a2 + 1464), v49);
      v43 = vmulq_n_f64(*(float64x2_t *)(a2 + 1480), v49);
      v38 = *(double *)(a2 + 1496) * v49;
    }
    v50 = *(_QWORD *)(a1 + 840);
    *(float64x2_t *)v50 = v44;
    *(double *)(v50 + 16) = v45;
    *(_QWORD *)(v50 + 24) = 0;
    *(double *)(v50 + 32) = v46;
    *(float64x2_t *)(v50 + 40) = v47;
    *(_QWORD *)(v50 + 56) = 0;
    *(float64x2_t *)(v50 + 64) = v43;
    *(double *)(v50 + 80) = v38;
    *(_QWORD *)(v50 + 88) = 0;
    *(double *)(v50 + 96) = v40;
    *(double *)(v50 + 104) = v41;
    *(double *)(v50 + 112) = v42;
    *(_QWORD *)(v50 + 120) = 0x3FF0000000000000;
  }
  v51 = *(float *)(a1 + 792);
  if (vabds_f32(*(float *)(a1 + 1432), v51) >= 0.1)
  {
    v52 = *(float *)(a1 + 796);
  }
  else
  {
    v52 = *(float *)(a1 + 796);
    if (vabds_f32(*(float *)(a1 + 1436), v52) < 0.1)
      return v12;
  }
  *(float *)(a1 + 1432) = v51;
  *(float *)(a1 + 1436) = v52;
  if (v37 && !*(_BYTE *)(*(_QWORD *)(a2 + 232) + 17))
  {
    v55 = *(double **)(a1 + 16);
    v56 = v55[108];
    v57 = v55[109];
    v58 = v55[110];
    v54 = -(float)(v52 * (float)((float)(v56 * v56) + (float)(v57 * v57)));
    v59 = v52 * v58;
    v53 = (float)(v59 * v57) + (float)(v51 * v56);
    v51 = -(float)((float)(v51 * v57) - (float)(v59 * v56));
  }
  else
  {
    v53 = -v52;
    v54 = 0.0;
  }
  *(float *)(a1 + 1440) = v51;
  *(float *)(a1 + 1444) = v53;
  *(float *)(a1 + 1448) = v54;
  return v12;
}

void sub_19F0A1E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t md::FontAtlas::commitGlyphs(uint64_t a1, _QWORD *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  __int128 *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned int v136;
  _QWORD *v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;

  v4 = *a3;
  v138 = 1;
  if (v4 >= a3[1])
    return v138 & 1;
  v9 = (_QWORD *)(a1 + 80);
  v139 = (_QWORD *)(a1 + 88);
  v138 = 1;
  v137 = (_QWORD *)(a1 + 80);
  while (2)
  {
    v10 = *(_QWORD *)(*a2 + 88 * v4);
    if (!v10 || !*(_BYTE *)(v10 + 61))
      goto LABEL_4;
    if ((_DWORD)a4)
      v11 = (_QWORD *)(*a2 + 88 * v4 + 16);
    else
      v11 = (_QWORD *)(*a2 + 88 * v4);
    v12 = *v11;
    v13 = *(_QWORD *)(*v11 + 96);
    if (v13)
    {
LABEL_11:
      v14 = *(_DWORD *)(a1 + 112);
      if (*(_DWORD *)v13 == v14)
        goto LABEL_4;
      *(_DWORD *)v13 = v14;
      v15 = (_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 16);
      if (v16)
      {
        v17 = *v9;
        v18 = *(_QWORD *)(v13 + 24);
      }
      else
      {
        v18 = *(_QWORD *)(v13 + 24);
        v17 = *v9;
        if (!v18)
        {
          if (v17 == v13)
          {
            v18 = 0;
            v17 = v13;
          }
          else
          {
            v26 = *v139;
            if (*v139 != v13)
              goto LABEL_27;
            v18 = 0;
          }
        }
      }
      if (v17 == v13)
        v23 = v9;
      else
        v23 = (_QWORD *)(v16 + 24);
      *v23 = v18;
      v24 = v139;
      if (*v139 != v13)
      {
        v25 = *(_QWORD *)(v13 + 24);
        if (!v25)
        {
LABEL_26:
          *v15 = 0;
          *(_QWORD *)(v13 + 24) = 0;
          --*(_DWORD *)(a1 + 96);
          v26 = *(_QWORD *)(a1 + 88);
LABEL_27:
          *v15 = v26;
          if (v26)
            *(_QWORD *)(v26 + 24) = v13;
          *v139 = v13;
          if (!*v9)
            *v9 = v13;
          ++*(_DWORD *)(a1 + 96);
          ++*(_DWORD *)(a1 + 116);
          if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
            dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
          v27 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 144);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
          goto LABEL_4;
        }
        v24 = (_QWORD *)(v25 + 16);
      }
      *v24 = v16;
      goto LABEL_26;
    }
    v19 = atomic_load((unsigned __int8 *)(v12 + 109));
    if ((v19 & 1) != 0)
      goto LABEL_80;
    if (!*(_BYTE *)(v12 + 108))
    {
      *(_BYTE *)(v12 + 108) = 1;
      v20 = *(_QWORD *)(a1 + 104);
      if (*(unsigned __int8 *)(*(_QWORD *)(v20 + 24) + 3383) | *(unsigned __int8 *)(a1 + 120))
      {
        v21 = *v11;
        (***(void (****)(_QWORD, uint64_t))v20)(*(_QWORD *)v20, v21);
        v22 = atomic_load((unsigned int *)(v20 + 76));
        atomic_store(v22, (unsigned int *)(v21 + 52));
        atomic_store(1u, (unsigned __int8 *)(v21 + 109));
LABEL_75:
        if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
          dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
        v54 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 136);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 + 1, v54));
        goto LABEL_79;
      }
      v29 = *(_QWORD **)(v20 + 40);
      v30 = *(_QWORD *)(v20 + 48);
      if ((unint64_t)v29 < v30)
      {
        if (v29)
        {
          *v29 = *v11;
          v31 = v11[1];
          v29[1] = v31;
          if (v31)
          {
            v32 = (unint64_t *)(v31 + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
        }
        v34 = v29 + 2;
LABEL_74:
        *(_QWORD *)(v20 + 40) = v34;
        goto LABEL_75;
      }
      v35 = a4;
      v36 = *(_QWORD *)(v20 + 32);
      v37 = ((uint64_t)v29 - v36) >> 4;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 60)
        abort();
      v39 = v30 - v36;
      if (v39 >> 3 > v38)
        v38 = v39 >> 3;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
        v38 = 0xFFFFFFFFFFFFFFFLL;
      if (v38)
      {
        v40 = 16 * v38;
        v41 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v20 + 56) + 16))(*(_QWORD *)(v20 + 56), 16 * v38, 8);
        v42 = (_OWORD *)(v41 + 16 * v37);
        v38 = v41 + v40;
        if (v41)
        {
          v43 = *(_OWORD *)v11;
          *v42 = *(_OWORD *)v11;
          a4 = v35;
          if (*((_QWORD *)&v43 + 1))
          {
            v44 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          goto LABEL_59;
        }
      }
      else
      {
        v42 = (_OWORD *)(16 * v37);
      }
      a4 = v35;
LABEL_59:
      v34 = v42 + 1;
      v46 = *(_QWORD **)(v20 + 32);
      v47 = *(_QWORD **)(v20 + 40);
      if (v47 == v46)
      {
        *(_QWORD *)(v20 + 32) = v42;
        *(_QWORD *)(v20 + 40) = v34;
        v50 = *(_QWORD *)(v20 + 48);
        *(_QWORD *)(v20 + 48) = v38;
      }
      else
      {
        do
        {
          v48 = *((_OWORD *)v47 - 1);
          v47 -= 2;
          *--v42 = v48;
          *v47 = 0;
          v47[1] = 0;
        }
        while (v47 != v46);
        v47 = *(_QWORD **)(v20 + 32);
        v49 = *(_QWORD **)(v20 + 40);
        *(_QWORD *)(v20 + 32) = v42;
        *(_QWORD *)(v20 + 40) = v34;
        v50 = *(_QWORD *)(v20 + 48);
        *(_QWORD *)(v20 + 48) = v38;
        if (v49 == v47)
        {
          a4 = v35;
        }
        else
        {
          v133 = v50;
          v135 = v34;
          do
          {
            v51 = (std::__shared_weak_count *)*(v49 - 1);
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(p_shared_owners);
              while (__stlxr(v53 - 1, p_shared_owners));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v49 -= 2;
          }
          while (v49 != v47);
          a4 = v35;
          v50 = v133;
          v34 = v135;
        }
      }
      v9 = v137;
      if (v47)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v20 + 56) + 40))(*(_QWORD *)(v20 + 56), v47, v50 - (_QWORD)v47);
      goto LABEL_74;
    }
LABEL_79:
    v56 = atomic_load((unsigned __int8 *)(v12 + 109));
    if ((v56 & 1) == 0)
    {
      v138 = 0;
      goto LABEL_4;
    }
LABEL_80:
    if (!*(_QWORD *)(v12 + 80))
      goto LABEL_4;
    v57 = 8;
    if (*(_BYTE *)(v12 + 60))
      v57 = 16;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + v57) + 32))(&v140);
    v58 = v140;
    if (!v140)
    {
      v13 = 0;
      v85 = v141;
      if (v141)
        goto LABEL_165;
LABEL_168:
      if (!v13)
        goto LABEL_4;
      goto LABEL_169;
    }
    v59 = *(uint64_t **)(a1 + 56);
    if (*(uint64_t **)(a1 + 48) != v59)
      goto LABEL_154;
    v136 = a4;
    v60 = operator new[]();
    v61 = 0;
    *(_OWORD *)v60 = xmmword_19FFB4C50;
    *(_DWORD *)(v60 + 16) = 0;
    v62 = v60 + 16;
    *(_QWORD *)(v60 + 1544) = 0;
    *(_OWORD *)(v60 + 1512) = 0u;
    *(_OWORD *)(v60 + 1528) = 0u;
    *(_OWORD *)(v60 + 24) = 0u;
    *(_OWORD *)(v60 + 40) = 0u;
    *(_OWORD *)(v60 + 52) = 0u;
    *(_OWORD *)(v60 + 72) = 0u;
    *(_OWORD *)(v60 + 88) = 0u;
    *(_OWORD *)(v60 + 100) = 0u;
    *(_OWORD *)(v60 + 120) = 0u;
    *(_OWORD *)(v60 + 136) = 0u;
    *(_OWORD *)(v60 + 148) = 0u;
    *(_OWORD *)(v60 + 168) = 0u;
    *(_OWORD *)(v60 + 184) = 0u;
    *(_OWORD *)(v60 + 196) = 0u;
    *(_OWORD *)(v60 + 244) = 0u;
    *(_OWORD *)(v60 + 232) = 0u;
    *(_OWORD *)(v60 + 216) = 0u;
    *(_OWORD *)(v60 + 292) = 0u;
    *(_OWORD *)(v60 + 264) = 0u;
    *(_OWORD *)(v60 + 280) = 0u;
    *(_OWORD *)(v60 + 340) = 0u;
    *(_OWORD *)(v60 + 312) = 0u;
    *(_OWORD *)(v60 + 328) = 0u;
    *(_OWORD *)(v60 + 388) = 0u;
    *(_OWORD *)(v60 + 360) = 0u;
    *(_OWORD *)(v60 + 376) = 0u;
    *(_OWORD *)(v60 + 436) = 0u;
    *(_OWORD *)(v60 + 408) = 0u;
    *(_OWORD *)(v60 + 424) = 0u;
    *(_OWORD *)(v60 + 484) = 0u;
    *(_OWORD *)(v60 + 456) = 0u;
    *(_OWORD *)(v60 + 472) = 0u;
    *(_OWORD *)(v60 + 504) = 0u;
    *(_OWORD *)(v60 + 520) = 0u;
    *(_OWORD *)(v60 + 532) = 0u;
    *(_OWORD *)(v60 + 580) = 0u;
    *(_OWORD *)(v60 + 552) = 0u;
    *(_OWORD *)(v60 + 568) = 0u;
    *(_OWORD *)(v60 + 628) = 0u;
    *(_OWORD *)(v60 + 600) = 0u;
    *(_OWORD *)(v60 + 616) = 0u;
    *(_OWORD *)(v60 + 676) = 0u;
    *(_OWORD *)(v60 + 648) = 0u;
    *(_OWORD *)(v60 + 664) = 0u;
    *(_OWORD *)(v60 + 724) = 0u;
    *(_OWORD *)(v60 + 696) = 0u;
    *(_OWORD *)(v60 + 712) = 0u;
    *(_OWORD *)(v60 + 772) = 0u;
    *(_OWORD *)(v60 + 744) = 0u;
    *(_OWORD *)(v60 + 760) = 0u;
    *(_OWORD *)(v60 + 820) = 0u;
    *(_OWORD *)(v60 + 792) = 0u;
    *(_OWORD *)(v60 + 808) = 0u;
    *(_OWORD *)(v60 + 868) = 0u;
    *(_OWORD *)(v60 + 840) = 0u;
    *(_OWORD *)(v60 + 856) = 0u;
    *(_OWORD *)(v60 + 916) = 0u;
    *(_OWORD *)(v60 + 888) = 0u;
    *(_OWORD *)(v60 + 904) = 0u;
    *(_OWORD *)(v60 + 964) = 0u;
    *(_OWORD *)(v60 + 936) = 0u;
    *(_OWORD *)(v60 + 952) = 0u;
    *(_OWORD *)(v60 + 1012) = 0u;
    *(_OWORD *)(v60 + 984) = 0u;
    *(_OWORD *)(v60 + 1000) = 0u;
    *(_OWORD *)(v60 + 1060) = 0u;
    *(_OWORD *)(v60 + 1032) = 0u;
    *(_OWORD *)(v60 + 1048) = 0u;
    *(_OWORD *)(v60 + 1108) = 0u;
    *(_OWORD *)(v60 + 1080) = 0u;
    *(_OWORD *)(v60 + 1096) = 0u;
    *(_OWORD *)(v60 + 1156) = 0u;
    *(_OWORD *)(v60 + 1128) = 0u;
    *(_OWORD *)(v60 + 1144) = 0u;
    *(_OWORD *)(v60 + 1204) = 0u;
    *(_OWORD *)(v60 + 1176) = 0u;
    *(_OWORD *)(v60 + 1192) = 0u;
    *(_OWORD *)(v60 + 1252) = 0u;
    *(_OWORD *)(v60 + 1224) = 0u;
    *(_OWORD *)(v60 + 1240) = 0u;
    *(_OWORD *)(v60 + 1300) = 0u;
    *(_OWORD *)(v60 + 1272) = 0u;
    *(_OWORD *)(v60 + 1288) = 0u;
    *(_OWORD *)(v60 + 1348) = 0u;
    *(_OWORD *)(v60 + 1320) = 0u;
    *(_OWORD *)(v60 + 1336) = 0u;
    *(_OWORD *)(v60 + 1396) = 0u;
    *(_OWORD *)(v60 + 1368) = 0u;
    *(_OWORD *)(v60 + 1384) = 0u;
    *(_OWORD *)(v60 + 1444) = 0u;
    *(_OWORD *)(v60 + 1416) = 0u;
    *(_OWORD *)(v60 + 1432) = 0u;
    *(_OWORD *)(v60 + 1492) = 0u;
    *(_OWORD *)(v60 + 1464) = 0u;
    *(_OWORD *)(v60 + 1480) = 0u;
    v59 = *(uint64_t **)(a1 + 56);
    do
    {
      v63 = v62 + 48 * v61;
      v64 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v59 < v64)
      {
        if (v59)
          *v59 = v63;
        ++v59;
        goto LABEL_87;
      }
      v65 = *(_QWORD *)(a1 + 48);
      v66 = ((uint64_t)v59 - v65) >> 3;
      if ((unint64_t)(v66 + 1) >> 61)
        abort();
      v67 = v64 - v65;
      v68 = v67 >> 2;
      if (v67 >> 2 <= (unint64_t)(v66 + 1))
        v68 = v66 + 1;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
        v69 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v69 = v68;
      if (v69)
      {
        v70 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), 8 * v69, 8);
        v71 = (uint64_t *)(v70 + 8 * v66);
        v72 = v70 + 8 * v69;
        if (v70)
          *v71 = v63;
      }
      else
      {
        v72 = 0;
        v71 = (uint64_t *)(8 * v66);
      }
      v74 = *(_QWORD *)(a1 + 48);
      v73 = *(_QWORD *)(a1 + 56);
      v75 = v73 - v74;
      if (v73 == v74)
      {
        v77 = v71;
        goto LABEL_112;
      }
      v76 = v75 - 8;
      if ((unint64_t)(v75 - 8) < 0x38)
      {
        v77 = v71;
      }
      else
      {
        v77 = v71;
        if ((unint64_t)(v73 - (_QWORD)v71) >= 0x20)
        {
          v78 = (v76 >> 3) + 1;
          v79 = v71 - 2;
          v80 = (__int128 *)(v73 - 16);
          v81 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v80;
            *((_OWORD *)v79 - 1) = *(v80 - 1);
            *(_OWORD *)v79 = v82;
            v79 -= 4;
            v80 -= 2;
            v81 -= 4;
          }
          while (v81);
          v77 = &v71[-(v78 & 0x3FFFFFFFFFFFFFFCLL)];
          v73 -= 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_111;
        }
      }
      do
      {
        v83 = *(_QWORD *)(v73 - 8);
        v73 -= 8;
        *--v77 = v83;
      }
      while (v73 != v74);
LABEL_111:
      v73 = *(_QWORD *)(a1 + 48);
LABEL_112:
      v59 = v71 + 1;
      *(_QWORD *)(a1 + 48) = v77;
      *(_QWORD *)(a1 + 56) = v71 + 1;
      v84 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v72;
      if (v73)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v73, v84 - v73);
LABEL_87:
      *(_QWORD *)(a1 + 56) = v59;
      ++v61;
    }
    while (v61 != 32);
    v86 = *(uint64_t **)(a1 + 24);
    v87 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)v86 >= v87)
    {
      v89 = *(_QWORD *)(a1 + 16);
      v90 = ((uint64_t)v86 - v89) >> 3;
      v91 = v90 + 1;
      v9 = v137;
      if ((unint64_t)(v90 + 1) >> 61)
        abort();
      v92 = v87 - v89;
      if (v92 >> 2 > v91)
        v91 = v92 >> 2;
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
        v93 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v93 = v91;
      if (v93)
      {
        v94 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 8 * v93, 8);
        v95 = (uint64_t *)(v94 + 8 * v90);
        v96 = v94 + 8 * v93;
        if (v94)
          *v95 = v62;
      }
      else
      {
        v96 = 0;
        v95 = (uint64_t *)(8 * v90);
      }
      v97 = *(char **)(a1 + 16);
      v98 = *(char **)(a1 + 24);
      a4 = v136;
      v134 = v95 + 1;
      if (v98 == v97)
      {
        *(_QWORD *)(a1 + 16) = v95;
        *(_QWORD *)(a1 + 24) = v95 + 1;
        v111 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v96;
        if (!v98)
          goto LABEL_152;
        goto LABEL_151;
      }
      v99 = v98 - v97 - 8;
      if (v99 > 0x57
        && ((v100 = (v97 - v98 + 7) & 0xFFFFFFFFFFFFFFF8, &v98[v100] >= (char *)v95) || (char *)v95 + v100 >= v98))
      {
        v125 = (v99 >> 3) + 1;
        v101 = &v98[-8 * (v125 & 0x3FFFFFFFFFFFFFFCLL)];
        v126 = v95 - 2;
        v127 = v98 - 32;
        v128 = v125 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v130 = *(_OWORD *)v127;
          v129 = *((_OWORD *)v127 + 1);
          *(_OWORD *)v127 = 0uLL;
          *((_OWORD *)v127 + 1) = 0uLL;
          v127 -= 32;
          *((_OWORD *)v126 - 1) = v130;
          *(_OWORD *)v126 = v129;
          v126 -= 4;
          v128 -= 4;
        }
        while (v128);
        v95 -= v125 & 0x3FFFFFFFFFFFFFFCLL;
        if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_136:
          v98 = *(char **)(a1 + 16);
          v103 = *(char **)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v95;
          v132 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 24) = v134;
          *(_QWORD *)(a1 + 32) = v96;
          if (v103 != v98)
          {
            do
            {
              v105 = *((_QWORD *)v103 - 1);
              v103 -= 8;
              v104 = v105;
              *(_QWORD *)v103 = 0;
              if (v105)
              {
                v106 = *(_QWORD *)(v104 - 8);
                if (v106)
                {
                  v107 = v104 + 48 * v106;
                  do
                  {
                    v108 = *(std::__shared_weak_count **)(v107 - 8);
                    if (v108)
                    {
                      v109 = (unint64_t *)&v108->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    v107 -= 48;
                  }
                  while (v107 != v104);
                }
                MEMORY[0x1A1AF4DE8](v104 - 16, 0x1020C80D08A26EBLL);
                v9 = v137;
              }
            }
            while (v103 != v98);
            a4 = v136;
          }
          v111 = v132;
          if (!v98)
            goto LABEL_152;
LABEL_151:
          (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), v98, v111 - (_QWORD)v98);
LABEL_152:
          v59 = *(uint64_t **)(a1 + 56);
          v88 = v134;
          goto LABEL_153;
        }
      }
      else
      {
        v101 = *(char **)(a1 + 24);
      }
      do
      {
        v102 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *(_QWORD *)v101 = 0;
        *--v95 = v102;
      }
      while (v101 != v97);
      goto LABEL_136;
    }
    a4 = v136;
    v9 = v137;
    if (v86)
      *v86 = v62;
    v88 = v86 + 1;
LABEL_153:
    *(_QWORD *)(a1 + 24) = v88;
    v58 = v140;
LABEL_154:
    v13 = *(v59 - 1);
    *(_QWORD *)(a1 + 56) = v59 - 1;
    v112 = v141;
    if (v141)
    {
      v113 = (unint64_t *)&v141->__shared_owners_;
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    v115 = *(std::__shared_weak_count **)(v13 + 40);
    *(_QWORD *)(v13 + 32) = v58;
    *(_QWORD *)(v13 + 40) = v112;
    if (v115)
    {
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = (unint64_t)(float)(*(float *)(v12 + 48) * 0.0625);
    v119 = *(_QWORD *)(a1 + 136);
    if (((*(_QWORD *)(a1 + 144) - v119) >> 2) - 1 < v118)
      v118 = ((*(_QWORD *)(a1 + 144) - v119) >> 2) - 1;
    ++*(_DWORD *)(v119 + 4 * v118);
    v85 = v141;
    if (!v141)
      goto LABEL_168;
LABEL_165:
    v120 = (unint64_t *)&v85->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (v121)
      goto LABEL_168;
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
    if (v13)
    {
LABEL_169:
      atomic_store(0, (unsigned __int8 *)(v12 + 109));
      *(_BYTE *)(v12 + 108) = 0;
      v122 = *(std::__shared_weak_count **)(v12 + 88);
      *(_QWORD *)(v12 + 80) = 0;
      *(_QWORD *)(v12 + 88) = 0;
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      *(_QWORD *)(v12 + 96) = v13;
      *(_QWORD *)(v13 + 8) = v12;
      goto LABEL_11;
    }
LABEL_4:
    if (++v4 < (unint64_t)a3[1])
      continue;
    return v138 & 1;
  }
}

void sub_19F0A2A78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 88);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::FontAtlas::commitGlyphs(uint64_t a1, uint64_t a2, unsigned __int16 *a3, _BYTE *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  if (*(float *)(a2 + 36) <= 0.0 || !md::FontAtlas::commitGlyphs(a1, (_QWORD *)a2, a3, 1))
    return md::FontAtlas::commitGlyphs(a1, (_QWORD *)a2, a3, 0);
  *a4 = 1;
  v8 = *(_QWORD **)a2;
  v9 = *(_QWORD **)(a2 + 8);
  while (v8 != v9)
  {
    v11 = v8[2];
    v10 = v8[3];
    if (v10)
    {
      v12 = (unint64_t *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = (std::__shared_weak_count *)v8[1];
    *v8 = v11;
    v8[1] = v10;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)v8[3];
    v8[2] = 0;
    v8[3] = 0;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v8 += 11;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = -1082130432;
  return 1;
}

uint64_t md::TextLabelPart::layoutForDisplay(float32x2_t *this, md::LabelManager *a2, md::LabelAnimator *a3, __int32 *a4, _DWORD *a5, double a6, double a7, double a8, float64x2_t a9)
{
  md::LabelAnimator *v10;
  BOOL v11;
  md::LabelAnimator *v12;
  uint64_t v13;
  unint64_t v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  uint64_t result;
  uint64_t v23;
  unsigned __int8 v24;
  float32x2_t v25;

  LODWORD(a6) = *a5;
  this[68].i32[0] = *a5;
  LODWORD(a7) = a5[1];
  this[68].i32[1] = LODWORD(a7);
  this[51].i32[0] = this[98].i32[0];
  this[104].i32[0] = *a4;
  LODWORD(a8) = a4[1];
  this[104].i32[1] = LODWORD(a8);
  if (this[115].i8[0])
    this[115].i8[0] = 0;
  v10 = (md::LabelAnimator *)this[2];
  if (v10)
    v10 = (md::LabelAnimator *)*((_QWORD *)v10 + 148);
  v11 = v10 == 0;
  if (v10)
    v12 = v10;
  else
    v12 = a3;
  if (v12)
  {
    v13 = 563;
    if (!v11)
      v13 = 564;
    v14 = this->u8[v13];
    v15 = (float32x2_t *)*((_QWORD *)v12 + 3);
    v16 = (float32x2_t *)*((_QWORD *)v12 + 4);
    if (0x8E38E38E38E38E39 * (((char *)v16 - (char *)v15) >> 4) <= v14)
    {
      if (v15 == v16 || !*((_BYTE *)v12 + 89))
        goto LABEL_22;
    }
    else
    {
      v15 += 18 * v14;
    }
    if (v15)
    {
      v17 = v15[9];
      if (v17)
      {
        LODWORD(a9.f64[0]) = 0;
        *(float *)&a8 = fmaxf(fminf(v15[10].f32[0]+ (float)(*(float *)(**(_QWORD **)&v17 + 32 * *(unsigned int *)(*(_QWORD *)&v17 + 32) + 8)* (float)(v15[10].f32[1] - v15[10].f32[0])), 1.0), 0.0);
        this[115].i8[0] = 1;
        this[115].i32[1] = LODWORD(a8);
      }
      v18 = v15[11];
      if (v18)
      {
        a8 = COERCE_DOUBLE(vmla_n_f32(v15[12], vsub_f32(v15[13], v15[12]), *(float *)(**(_QWORD **)&v18 + 32 * *(unsigned int *)(*(_QWORD *)&v18 + 32) + 8)));
        if (this[63].i8[4])
        {
          v19 = this[41];
          v20 = vmul_n_f32(v19, *(float *)&a8);
          v21 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v19, *(float32x2_t *)&a8, 1));
          LODWORD(a8) = vsub_f32(v20, v21).u32[0];
          HIDWORD(a8) = vadd_f32(v20, v21).i32[1];
        }
        *(int32x2_t *)&a9.f64[0] = vcltz_s32(vshl_n_s32(vdup_n_s32(v15[14].u8[0] == 0), 0x1FuLL));
        HIDWORD(a6) = LODWORD(a7);
        *(_QWORD *)&a7 = 0x8000000080000000;
        a6 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&a8, (float32x2_t)vbsl_s8(*(int8x8_t *)&a9.f64[0], (int8x8_t)0x8000000080000000, *(int8x8_t *)&a6)));
        *(double *)&this[68] = a6;
      }
    }
  }
LABEL_22:
  result = md::TextLabelPart::prepareQuadsForDisplay((md::TextLabelPart *)this, a2, a3, a6, a7, a8, a9);
  if ((_DWORD)result == 37)
  {
    v23 = *(_QWORD *)(*(_QWORD *)&this[74] + 16);
    v24 = atomic_load((unsigned __int8 *)(v23 + 125));
    if ((v24 & 1) == 0 || *(_QWORD *)(v23 + 56) == *(_QWORD *)(v23 + 64))
    {
      return 12;
    }
    else if (*(_QWORD *)(*(_QWORD *)&this[74] + 32) == *(_QWORD *)(*(_QWORD *)&this[74] + 40))
    {
      return 13;
    }
    else
    {
      v25 = this[2];
      if (v25)
      {
        this[95].i32[1] = *(_DWORD *)(*(_QWORD *)&v25 + 1300);
        this[103].i8[6] = *(_BYTE *)(*(_QWORD *)&v25 + 1079);
      }
      return 37;
    }
  }
  return result;
}

uint64_t md::TextLabelPart::prepareQuadsForDisplay(md::TextLabelPart *this, md::LabelManager *a2, md::LabelAnimator *a3, double a4, double a5, double a6, float64x2_t a7)
{
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v24;
  int v25;
  float v26;
  float v27;
  float v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  md::LabelAnimator *v36;
  BOOL v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unsigned __int8 **v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 *v54;
  grl::FontManager **v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 *v58;
  uint64_t v59;
  float v60;
  float v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t *v66;
  float *v67;
  float *v68;
  double v69;
  float v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  unsigned __int8 **v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 *v77;
  grl::FontManager **v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  uint64_t v81;
  __int128 *v82;

  if (*((_BYTE *)this + 871))
  {
    v9 = (float *)((char *)a2 + 476);
    v10 = *((_QWORD *)this + 4);
  }
  else
  {
    v10 = *((_QWORD *)this + 4);
    v9 = (float *)(v10 + 64);
  }
  v11 = *((_QWORD *)this + 74);
  if ((((unint64_t)*(unsigned int *)(v11 + 8) >> *(_BYTE *)(v10 + 76)) & 1) != 0)
  {
    v12 = *v9;
    v13 = *((_QWORD *)this + 90);
    v14 = fminf(fmaxf(v12, 0.0), 23.0);
    v15 = v13 + 8;
    v16 = (int)v14;
    if ((int)v14 >= 0x17)
      v17 = 23;
    else
      v17 = v16;
    v18 = 1 << v17;
    v19 = *(float *)(v15 + 4 * v17);
    if ((*(_QWORD *)(v13 + 104) & (1 << v17)) != 0)
    {
      if (v16 >= 0x16)
        v20 = 22;
      else
        v20 = (int)v14;
      v21 = *(float *)(v15 + 4 * (v20 + 1));
      if (*(_BYTE *)(v13 + 112) || (v22 = 0.0, v19 != 0.0) && v21 != 0.0)
        v22 = v19 + (float)((float)(v21 - v19) * (float)(v14 - (float)v17));
    }
    else
    {
      v22 = *(float *)(v15 + 4 * v17);
    }
    *(float *)(v13 + 456) = v22;
    v24 = *(float *)(v13 + 120 + 4 * v17);
    if ((*(_QWORD *)(v13 + 216) & v18) != 0)
    {
      if (v16 >= 0x16)
        v25 = 22;
      else
        v25 = (int)v14;
      v26 = *(float *)(v13 + 120 + 4 * (v25 + 1));
      if (*(_BYTE *)(v13 + 224) || (v27 = 0.0, v24 != 0.0) && v26 != 0.0)
        v27 = v24 + (float)((float)(v26 - v24) * (float)(v14 - (float)v17));
    }
    else
    {
      v27 = *(float *)(v13 + 120 + 4 * v17);
    }
    *(float *)(v13 + 460) = v27;
    v28 = *(float *)(v13 + 232 + 4 * v17);
    if ((*(_QWORD *)(v13 + 328) & v18) != 0)
    {
      if (v16 >= 0x16)
        v29 = 22;
      else
        v29 = (int)v14;
      v30 = *(float *)(v13 + 232 + 4 * (v29 + 1));
      if (*(_BYTE *)(v13 + 336) || (v31 = 0.0, v28 != 0.0) && v30 != 0.0)
        v31 = v28 + (float)((float)(v30 - v28) * (float)(v14 - (float)v17));
    }
    else
    {
      v31 = *(float *)(v13 + 232 + 4 * v17);
    }
    *(float *)(v13 + 464) = v31;
    v32 = *(float *)(v13 + 344 + 4 * v17);
    if ((*(_QWORD *)(v13 + 440) & v18) != 0)
    {
      if (v16 >= 0x16)
        v16 = 22;
      v33 = *(float *)(v13 + 344 + 4 * (v16 + 1));
      if (*(_BYTE *)(v13 + 448) || (v34 = 0.0, v32 != 0.0) && v33 != 0.0)
        v34 = v32 + (float)((float)(v33 - v32) * (float)(v14 - (float)v17));
    }
    else
    {
      v34 = *(float *)(v13 + 344 + 4 * v17);
    }
    *(float *)(v13 + 468) = v34;
    if (*((_BYTE *)this + 856))
      v22 = *((float *)this + 215);
    *((float *)this + 185) = v22;
    *((_DWORD *)this + 190) = *(_DWORD *)(v13 + 464);
    if (*((_BYTE *)this + 872))
      v35 = *(_DWORD *)(v13 + 460);
    else
      v35 = 0;
    *((_DWORD *)this + 184) = v35;
    if (v22 > 0.0)
      goto LABEL_51;
    return 27;
  }
  v22 = *((float *)this + 185);
  if (v22 <= 0.0)
    return 27;
LABEL_51:
  v36 = (md::LabelAnimator *)*((_QWORD *)this + 2);
  if (v36)
    v36 = (md::LabelAnimator *)*((_QWORD *)v36 + 148);
  v37 = v36 == 0;
  if (v36)
    a3 = v36;
  if (!a3)
    goto LABEL_66;
  v39 = 563;
  if (!v37)
    v39 = 564;
  v40 = *((unsigned __int8 *)this + v39);
  v41 = *((_QWORD *)a3 + 3);
  v42 = *((_QWORD *)a3 + 4);
  if (0x8E38E38E38E38E39 * ((v42 - v41) >> 4) > v40)
  {
    v41 += 144 * v40;
    goto LABEL_63;
  }
  if (v41 == v42 || !*((_BYTE *)a3 + 89))
  {
LABEL_66:
    *((_DWORD *)this + 228) = 1065353216;
    v43 = 1.0;
    goto LABEL_67;
  }
LABEL_63:
  *((_DWORD *)this + 228) = 1065353216;
  v43 = 1.0;
  if (v41)
  {
    v44 = *(_QWORD *)(v41 + 56);
    if (v44)
    {
      v43 = fmaxf(*(float *)(v41 + 64)+ (float)(*(float *)(*(_QWORD *)v44 + 32 * *(unsigned int *)(v44 + 32) + 8)* (float)(*(float *)(v41 + 68) - *(float *)(v41 + 64))), 0.0);
      *((float *)this + 228) = v43;
    }
  }
LABEL_67:
  v45 = v43 * *(float *)(v10 + 68);
  v46 = fmaxf(v45 * v22, 0.0);
  v47 = *((float *)this + 184);
  if (*((_BYTE *)this + 865))
    v48 = v46;
  else
    v48 = v22;
  if (*((_BYTE *)this + 865))
    v49 = v45;
  else
    v49 = 1.0;
  v50 = *((float *)this + 187);
  v51 = (unsigned __int8 **)(v11 + 16);
  v52 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v11 + 16) + 124));
  if ((v52 & 1) == 0)
  {
    v53 = atomic_load(*v51 + 125);
    if ((v53 & 1) == 0)
    {
      v54 = *v51;
      v55 = (grl::FontManager **)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)a2 + 34) + 16) + 96), "grlFontManager");
      v56 = atomic_load(v54 + 125);
      if ((v56 & 1) == 0)
      {
        if (*(_QWORD *)v54)
          md::TextDataString::generateGlyphInfosAndPositions((md::TextDataString *)v54, v55);
        atomic_store(1u, v54 + 125);
      }
    }
  }
  v57 = atomic_load(*v51 + 125);
  if ((v57 & 1) == 0)
    return 11;
  v58 = *v51;
  if (*v51)
  {
    if (v58[121]
      && (v59 = *((_QWORD *)a2 + 39), v60 = *(float *)(v59 + 120), v61 = v48 / v60, (float)(v48 / v60) >= 7.0))
    {
      v62 = (int)v61;
      if ((int)v61 >= 23)
        v62 = 23;
      if (v62 <= 7)
        v63 = 7;
      else
        v63 = v62;
      v64 = v63 + 1;
      v65 = (__int128 *)*((_QWORD *)v58 + 2);
      v66 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>((_QWORD *)(v59 + 64), (uint64_t)v65);
      if (v66 && *((_BYTE *)v66 + v63 + 48) && *((_BYTE *)v66 + v64 + 48))
      {
        v67 = (float *)v66 + v63 + 19;
        v68 = (float *)v66 + v64 + 19;
      }
      else
      {
        v82 = v65;
        v71 = std::__hash_table<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,geo::StdAllocator<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,mdm::Allocator>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59 + 64, (uint64_t)v65, &v82);
        md::FontTrackingCache::generateFontScales(*((CTFontRef *)v58 + 5), (CGFloat *)(v71 + 40), v63, v63 + 1);
        v67 = (float *)(v71 + 76 + 4 * v63);
        v68 = (float *)(v71 + 76 + 4 * v64);
        v60 = *(float *)(v59 + 120);
      }
      v70 = (float)(*v67 + (float)((float)(*v68 - *v67) * (float)(v61 - (float)(int)v63))) * v60;
    }
    else
    {
      v70 = v48 * 0.055556;
    }
    v69 = v70;
  }
  else
  {
    v69 = 1.0;
  }
  v72 = v47 * v49;
  v73 = *(_QWORD *)(*((_QWORD *)a2 + 38) + 128);
  if (v73)
  {
    a7.f64[0] = v69;
    md::FontGlyphCache::populateQuads(v73, v11 + 32, (uint64_t **)(v11 + 16), v48 != v50, v48, v46, v72, a7, v48 * 0.055556);
  }
  if (*(_BYTE *)(v11 + 144))
  {
    v74 = (unsigned __int8 **)(v11 + 80);
    v75 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v11 + 80) + 124));
    if ((v75 & 1) == 0)
    {
      v76 = atomic_load(*v74 + 125);
      if ((v76 & 1) == 0)
      {
        v77 = *v74;
        v78 = (grl::FontManager **)objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)a2 + 34) + 16) + 96), "grlFontManager");
        v79 = atomic_load(v77 + 125);
        if ((v79 & 1) == 0)
        {
          if (*(_QWORD *)v77)
            md::TextDataString::generateGlyphInfosAndPositions((md::TextDataString *)v77, v78);
          atomic_store(1u, v77 + 125);
        }
      }
    }
    v80 = atomic_load(*v74 + 125);
    if ((v80 & 1) == 0)
      return 11;
    v81 = *(_QWORD *)(*((_QWORD *)a2 + 38) + 128);
    if (v81)
    {
      a7.f64[0] = v69;
      md::FontGlyphCache::populateQuads(v81, v11 + 96, (uint64_t **)(v11 + 80), v48 != v50, v48, v46, v72, a7, v48 * 0.055556);
    }
  }
  *((float *)this + 187) = v48;
  *((float *)this + 188) = v72;
  return 37;
}

uint64_t md::HorizontalTextLabelPart::layoutForStaging(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t v8;
  double v9;
  float v10;
  int v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  __int128 *v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[48];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v8 = md::TextLabelPart::layoutForStaging((uint64_t)a1, a2, (uint64_t)a3, a4);
  if ((_DWORD)v8 == 37)
  {
    v10 = a1[78].f32[1];
    if (a1[128].i8[3] || v10 != a1[121].f32[0] || a1[78].f32[0] != a1[121].f32[1])
    {
      a1[128].i8[3] = 0;
      a1[121].f32[0] = v10;
      a1[121].i32[1] = a1[78].i32[0];
      a1[120].f32[0] = a1[120].f32[1] * v10;
      if (a1[143].i8[0])
        v11 = 8;
      else
        v11 = 18;
      if (a1[143].i32[1] != 1)
        v11 = a1[143].i32[1];
      a1[122].i32[0] = v11;
      a1[122].i32[1] = a1[144].i32[0];
      md::HorizontalTextLabelPart::placeLines((uint64_t)&a1[72], a1 + 120, a2, (uint64_t)&a1[9]);
      a1[86].i32[0] = a1[127].i32[1];
      a1[86].i32[1] = a1[128].u16[0] << 16;
    }
    v12 = *(float *)(*(_QWORD *)&a1[4] + 20);
    a1[22].f32[0] = v12;
    a1[14].i32[0] = a3->i32[0];
    a1[14].i32[1] = a3->i32[1];
    a1[33].i8[6] = fabsf(v12 + -1.0) > 0.000001;
    v13 = *(_QWORD *)(a2 + 432);
    v14 = *(float *)(v13 + 464);
    a1[37].f32[0] = v14;
    LODWORD(v9) = *(_DWORD *)(v13 + 468);
    a1[37].i32[1] = LODWORD(v9);
    v15 = a1[36].f32[0];
    v16 = v15 * *(float *)&v9;
    v17 = a1[36].f32[1];
    *(float *)&v9 = -(float)((float)(v17 * *(float *)&v9) - (float)(v15 * v14));
    a1[11].i32[0] = LODWORD(v9);
    a1[11].f32[1] = v16 + (float)(v17 * v14);
    a1[33].i8[4] = fabsf(*(float *)&v9 + -1.0) > 0.000001;
    v18 = *(double *)a4;
    v19 = COERCE_DOUBLE(vadd_f32(*a4, *a3));
    *(double *)&a1[35] = v19;
    *(double *)&a1[13] = v19;
    md::CollisionObject::setupShapeData((uint64_t)&a1[9], v19, v18, v9);
    if (a1[70].i8[5] && a1[70].i8[6])
    {
      v20 = (__int128 *)a1[106];
      if (v20)
      {
        v21 = a1[5];
        if (a1[89].i8[6])
          v22 = 1.1;
        else
          v22 = 1.0;
        v23 = a1[38].f32[0];
        v24 = a1[38].f32[1];
        if (!*(_QWORD *)&v21)
        {
          v25 = *(float *)(*(_QWORD *)&a1[4] + 20);
          v22 = v22 * v25;
          v23 = v25 * v23;
          v24 = v25 * v24;
        }
        v26 = fabsf(v22 + -1.0);
        if (LODWORD(v23) | LODWORD(v24) || v26 > 0.000001)
        {
          v35 = v22;
          if (v26 <= 0.000001)
            v35 = 1.0;
          *(double *)v49 = v35;
          *(double *)&v49[40] = v35;
          memset(&v49[8], 0, 32);
          v52 = *(unint64_t *)&v35;
          v50 = 0u;
          v51 = 0u;
          *(double *)&v53 = v23;
          *((double *)&v53 + 1) = v24;
          v54 = xmmword_19FFB33A0;
          if (v21)
          {
            gm::operator*<double,4,4,4>((double *)&v41, (double *)v21, (double *)v49);
          }
          else
          {
            v45 = v51;
            v46 = v52;
            v47 = v53;
            v48 = v54;
            v41 = *(_OWORD *)v49;
            v42 = *(_OWORD *)&v49[16];
            v43 = *(_OWORD *)&v49[32];
            v44 = v50;
          }
          v36 = v42;
          *v20 = v41;
          v20[1] = v36;
          v37 = v44;
          v20[2] = v43;
          v20[3] = v37;
          v38 = v46;
          v20[4] = v45;
          v20[5] = v38;
          v39 = v48;
          v20[6] = v47;
          v20[7] = v39;
        }
        else
        {
          if (v21)
          {
            v27 = *(_OWORD *)*(_QWORD *)&v21;
            v28 = *(_OWORD *)(*(_QWORD *)&v21 + 16);
            v29 = *(_OWORD *)(*(_QWORD *)&v21 + 32);
            v30 = *(_OWORD *)(*(_QWORD *)&v21 + 48);
            v31 = *(_OWORD *)(*(_QWORD *)&v21 + 64);
            v32 = *(_OWORD *)(*(_QWORD *)&v21 + 80);
            v33 = *(_OWORD *)(*(_QWORD *)&v21 + 96);
            v34 = *(_OWORD *)(*(_QWORD *)&v21 + 112);
          }
          else
          {
            v29 = xmmword_19FFB33A0;
            v27 = xmmword_19FFB32C0;
            v28 = 0uLL;
            v30 = 0uLL;
            v31 = 0uLL;
            v32 = xmmword_19FFB32C0;
            v33 = 0uLL;
            v34 = xmmword_19FFB33A0;
          }
          *v20 = v27;
          v20[1] = v28;
          v20[2] = v29;
          v20[3] = v30;
          v20[4] = v31;
          v20[5] = v32;
          v20[6] = v33;
          v20[7] = v34;
        }
      }
      a1[23] = (float32x2_t)v20;
    }
  }
  return v8;
}

uint64_t md::CurvedTextLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float64x2_t v22;
  int v23;
  int v24;
  int v25;
  char v26;
  char v27;
  __n128 v29;

  v7 = md::TextLabelPart::layoutForStaging(a1, a2, (uint64_t)a3, a4);
  if ((_DWORD)v7 == 37)
  {
    v11 = *(_QWORD *)(a2 + 432);
    v12 = *(unsigned __int8 *)(a1 + 1139);
    v13 = *(_BYTE *)(a1 + 1139) != 0;
    *(_BYTE *)(a1 + 1139) = 0;
    if (*(_BYTE *)(a1 + 1144))
    {
      v14 = 0;
    }
    else
    {
      v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1072) + 168))(*(_QWORD *)(a1 + 1072), (int)*(float *)(*(_QWORD *)(a1 + 32) + 16));
      if (v12)
        v13 = 1;
      else
        v13 = v14;
    }
    v15 = *(_DWORD *)(v11 + 1176);
    if (*(_DWORD *)(a1 + 1000) != v15)
    {
      *(_DWORD *)(a1 + 1000) = v15;
      v13 = 1;
      *(_BYTE *)(a1 + 1466) = 1;
    }
    if (!*(_BYTE *)(a1 + 1457))
    {
      v16 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96);
      if (*(_DWORD *)(a1 + 1408) != v16)
      {
        *(_BYTE *)(a1 + 1466) = 1;
        *(_DWORD *)(a1 + 1408) = v16;
      }
    }
    if (v13)
    {
      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(float *)(v17 + 16);
      v19 = *(float *)(v17 + 20);
      *(_BYTE *)(a1 + 1137) = (int)v18;
      *(float *)(a1 + 960) = v18;
      *(float *)(a1 + 980) = v19 * *(float *)(a1 + 628);
      *(_QWORD *)(a1 + 1008) = a1 + 72;
      *(_DWORD *)(a1 + 984) = *(_DWORD *)(a1 + 168);
      v20 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 1016) = *(_QWORD *)(v20 + 592);
      *(_QWORD *)(a1 + 1024) = *(_QWORD *)(v20 + 600);
      *(_QWORD *)(a1 + 1032) = *(_QWORD *)(v20 + 608);
      *(_DWORD *)(a1 + 1064) = *(_DWORD *)(v20 + 760);
      *(_QWORD *)(a1 + 1056) = *(_QWORD *)(v20 + 656);
      *(_DWORD *)(a1 + 996) = *(_DWORD *)(a2 + 176);
      v21 = *(double *)(v20 + 536);
      *(float32x2_t *)(a1 + 1040) = vcvt_f32_f64(*(float64x2_t *)(v20 + 520));
      *(float *)(a1 + 1048) = v21;
      v22 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v11 + 960), *(float64x2_t *)(v11 + 864), *(double *)(v20 + 616)), *(float64x2_t *)(v11 + 896), *(double *)(v20 + 624)), *(float64x2_t *)(v11 + 928), *(double *)(v20 + 632)), 1.0/ (*(double *)(v11 + 984)+ *(double *)(v11 + 888) * *(double *)(v20 + 616)+ *(double *)(v11 + 920) * *(double *)(v20 + 624)+ *(double *)(v11 + 952) * *(double *)(v20 + 632)));
      *(float32x2_t *)&v22.f64[0] = vcvt_f32_f64(v22);
      if (v14)
      {
        v29 = (__n128)v22;
        v23 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 1072) + 176))(*(_QWORD *)(a1 + 1072), 1.0);
        *(_QWORD *)&v22.f64[0] = v29.n128_u64[0];
        if (v23)
        {
          *(_BYTE *)(a1 + 1463) = 1;
          v24 = *(unsigned __int8 *)(a1 + 1142);
          v25 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 1072) + 80))(*(_QWORD *)(a1 + 1072), v29);
          *(_QWORD *)&v22.f64[0] = v29.n128_u64[0];
          if (v24 != v25)
          {
            v26 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 1072) + 80))(*(_QWORD *)(a1 + 1072), v29);
            *(_QWORD *)&v22.f64[0] = v29.n128_u64[0];
            *(_BYTE *)(a1 + 1142) = v26;
            if (*(_BYTE *)(a1 + 1136))
            {
              if (*(_BYTE *)(a1 + 1136) == 2)
                v27 = 1;
              else
                v27 = 2;
              *(_BYTE *)(a1 + 1136) = v27;
            }
          }
        }
      }
      v7 = md::CurvedTextLabelPart::placeGlyphsOnRoadPath(a1, 0, (unsigned __int8 *)(a1 + 1458), a1 + 960, v11, a2, *(float *)v22.f64, *((float *)v22.f64 + 1));
      *(_BYTE *)(a1 + 1140) = v7;
      *(_QWORD *)(a1 + 688) = -1431633920
                            * ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 16) + 64)
                                            - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 16) + 56)) >> 3);
    }
    else
    {
      v7 = *(unsigned __int8 *)(a1 + 1140);
    }
    *(_DWORD *)(a1 + 280) = *a3;
    *(_DWORD *)(a1 + 284) = a3[1];
    *(_DWORD *)(a1 + 104) = *a3;
    LODWORD(v8) = a3[1];
    *(_DWORD *)(a1 + 108) = LODWORD(v8);
    md::CollisionObject::setupShapeData(a1 + 72, v8, v9, v10);
  }
  return v7;
}

uint64_t md::CollisionObject::setupShapeData(uint64_t this, double a2, double a3, double a4)
{
  float32x2_t v4;
  int v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int v13;
  float v14;
  float32x2_t v15;
  float64x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int32x2_t v19;
  char v20;
  int8x8_t v21;
  float32x2_t v22;
  unsigned int v23;
  int8x8_t v24;
  int8x8_t v25;
  float32x2_t v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  int32x2_t v30;
  const float *v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t *v44;
  uint64_t v45;
  float32x2_t *v46;
  float32x2_t *v47;
  const float *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  const float *v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  int32x2_t v60;
  __int128 v61;
  int8x8_t v62;
  unsigned int v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  float *v67;
  uint64_t v68;
  float v69;
  float v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;

  v4 = *(float32x2_t *)(this + 32);
  v5 = *(unsigned __int8 *)(this + 198);
  if (*(_BYTE *)(this + 198))
  {
    v6 = *(float32x2_t *)(this + 40);
    a4 = COERCE_DOUBLE(vsub_f32(v4, v6));
    v4 = vmla_n_f32(v6, *(float32x2_t *)&a4, *(float *)(this + 104));
  }
  v8 = *(float32x2_t *)this;
  v7 = *(float32x2_t *)(this + 8);
  v9 = vsub_f32(v7, *(float32x2_t *)this);
  v10 = vmul_f32(v9, (float32x2_t)0x3F0000003F000000);
  v11 = vadd_f32(v10, *(float32x2_t *)this);
  v12 = vadd_f32(v11, v4);
  v13 = *(unsigned __int8 *)(this + 196);
  if (!*(_BYTE *)(this + 196) || *(_QWORD *)(this + 168) && *(_DWORD *)(this + 176) == 1)
  {
    LODWORD(a4) = *(_DWORD *)(this + 96);
    v14 = *(float *)(this + 108);
    v15 = vmaxnm_f32(v9, 0);
    v16 = vcvtq_f64_f32(v15);
    v17 = vsub_f32(v11, vcvt_f32_f64(vmulq_n_f64(v16, v14 * 0.5)));
    v18 = vmla_n_f32(v17, v15, v14);
    v19 = vcgt_f32(v17, v18);
    v20 = v19.i8[0] | v19.i8[4];
    v21 = (int8x8_t)vadd_f32(v17, v4);
    v22 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    if ((v20 & 1) != 0)
      v23 = -1;
    else
      v23 = 0;
    v24 = (int8x8_t)vdup_n_s32(v23);
    v25 = vbsl_s8(v24, (int8x8_t)v22, v21);
    v26 = (float32x2_t)0x80000000800000;
    *(int8x8_t *)(this + 64) = v25;
    *(int8x8_t *)(this + 72) = vbsl_s8(v24, (int8x8_t)0x80000000800000, (int8x8_t)vadd_f32(v18, v4));
    if (v5)
    {
      v27 = *(float *)(this + 104);
      *(float *)&a4 = v27 * *(float *)&a4;
      v28 = vsub_f32(v11, vcvt_f32_f64(vmulq_n_f64(v16, v27 * 0.5)));
      v29 = vmla_n_f32(v28, v15, v27);
      v30 = vcgt_f32(v28, v29);
      if (((v30.i32[0] | v30.i32[1]) & 1) == 0)
      {
        v22 = vadd_f32(v28, v4);
        v26 = vadd_f32(v29, v4);
      }
    }
    else
    {
      v60 = vcgt_f32(v8, v7);
      if (((v60.i32[0] | v60.i32[1]) & 1) == 0)
      {
        v22 = vadd_f32(v8, v4);
        v26 = vadd_f32(v7, v4);
      }
    }
    *(float32x2_t *)&v61 = v22;
    *((float32x2_t *)&v61 + 1) = v26;
    *(_OWORD *)(this + 48) = v61;
    *(int32x2_t *)&v61 = vcgt_f32(v22, v26);
    v62 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
    if (((v61 | BYTE4(v61)) & 1) != 0)
      v63 = -1;
    else
      v63 = 0;
    v64 = (int8x8_t)vdup_n_s32(v63);
    *(float32x2_t *)(this + 80) = vsub_f32(v22, (float32x2_t)vbic_s8(v62, v64));
    *(float32x2_t *)(this + 88) = vadd_f32(v26, (float32x2_t)vbsl_s8(v64, (int8x8_t)0x8000000080000000, v62));
    v44 = *(float32x2_t **)(this + 160);
    if (!v44)
    {
LABEL_28:
      v65 = *(_QWORD *)(this + 168);
      if (v65)
      {
        v66 = *(unsigned int *)(this + 176);
        if ((_DWORD)v66)
        {
          v67 = (float *)(v65 + 8);
          v68 = *(_QWORD *)(this + 184) + 12;
          do
          {
            v69 = *(float *)(this + 96) + *v67;
            *(float *)(v68 - 4) = v69;
            *(float *)v68 = v69;
            v70 = *(float *)(this + 100) + *v67;
            *(float *)(v68 + 4) = v70;
            *(float *)(v68 + 8) = v70;
            v71 = vsub_f32(*(float32x2_t *)(v67 - 2), v11);
            if (v5)
            {
              *(float32x2_t *)(v68 - 4) = vmul_n_f32(*(float32x2_t *)(v68 - 4), *(float *)(this + 104));
              *(float32x2_t *)(v68 + 4) = vmul_n_f32(*(float32x2_t *)(v68 + 4), *(float *)(this + 104));
              v71 = vmul_n_f32(v71, *(float *)(this + 104));
            }
            if (v13)
            {
              v72 = *(float32x2_t *)(this + 16);
              v73 = vmul_n_f32(v72, v71.f32[0]);
              v74 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v72, v71, 1));
              v71.i32[0] = vsub_f32(v73, v74).u32[0];
              v71.i32[1] = vadd_f32(v73, v74).i32[1];
            }
            *(float32x2_t *)(v68 - 12) = vadd_f32(v71, v12);
            v67 += 3;
            v68 += 24;
            --v66;
          }
          while (v66);
        }
      }
      return this;
    }
  }
  else
  {
    v31 = (const float *)(this + 96);
    v32 = *(float *)(this + 16);
    v33 = *(float *)(this + 20);
    v34 = vld1_dup_f32(v31);
    v35 = vadd_f32(v34, (float32x2_t)vbic_s8((int8x8_t)v10, (int8x8_t)vcltz_f32(v9)));
    v34.f32[0] = v33;
    v34.f32[1] = -v33;
    v36 = vadd_f32(vabs_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v35, v34))), vabs_f32(vmul_n_f32(v35, v32)));
    v37 = vsub_f32(v12, v36);
    v38 = vadd_f32(v36, v12);
    *(float32x2_t *)(this + 80) = v37;
    *(float32x2_t *)(this + 88) = v38;
    *(float32x2_t *)(this + 48) = v37;
    *(float32x2_t *)(this + 56) = v38;
    *(float32x2_t *)(this + 64) = v37;
    *(float32x2_t *)(this + 72) = v38;
    if (v5)
    {
      v39 = *(float *)(this + 104);
      v40 = v39 * v35.f32[0];
      v41 = vmuls_lane_f32(v39, v35, 1);
      v42 = fabsf(v41 * (float)-v33) + fabsf(v40 * v32);
      v43 = fabsf(v41 * v32) + fabsf(v40 * v33);
      *(float *)(this + 80) = v12.f32[0] - v42;
      *(float *)(this + 84) = v12.f32[1] - v43;
      *(float *)(this + 88) = v42 + v12.f32[0];
      *(float *)(this + 92) = v43 + v12.f32[1];
    }
    v44 = *(float32x2_t **)(this + 160);
    if (!v44)
      goto LABEL_28;
  }
  v45 = *(unsigned int *)(this + 176);
  if ((_DWORD)v45)
  {
    v46 = (float32x2_t *)(*(_QWORD *)(this + 184) + 16);
    v47 = v44 + 1;
    do
    {
      v48 = (const float *)(this + 96);
      v49 = vsub_f32(*v47, v47[-1]);
      v50 = vmaxnm_f32((float32x2_t)vbic_s8((int8x8_t)vmul_f32(v49, (float32x2_t)0x3F0000003F000000), (int8x8_t)vcltz_f32(v49)), 0);
      v51 = vld1_dup_f32(v48);
      v52 = vadd_f32(v50, v51);
      v46[-1] = v52;
      v53 = (const float *)(this + 100);
      v54 = vld1_dup_f32(v53);
      v55 = vadd_f32(v54, v50);
      *v46 = v55;
      v56 = vmla_f32(vsub_f32(v47[-1], v11), (float32x2_t)0x3F0000003F000000, vsub_f32(*v47, v47[-1]));
      if (v5)
      {
        v46[-1] = vmul_n_f32(v52, *(float *)(this + 104));
        *v46 = vmul_n_f32(v55, *(float *)(this + 104));
        v56 = vmul_n_f32(v56, *(float *)(this + 104));
      }
      if (v13)
      {
        v57 = *(float32x2_t *)(this + 16);
        v58 = vmul_n_f32(v57, v56.f32[0]);
        v59 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v57, v56, 1));
        v56.i32[0] = vsub_f32(v58, v59).u32[0];
        v56.i32[1] = vadd_f32(v58, v59).i32[1];
      }
      v46[-2] = vadd_f32(v56, v12);
      v46 += 3;
      v47 += 2;
      --v45;
    }
    while (v45);
  }
  return this;
}

float gm::Box<float,2>::operator+(float *a1, float *a2)
{
  uint64_t v2;
  char v3;
  float v4;
  float v5;
  __int128 v7;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = a1[v2 + 2];
    v5 = a1[v2];
    if ((v3 & 1) == 0)
      break;
    v3 = 0;
    v2 = 1;
  }
  while (v4 >= v5);
  if (v4 < v5)
    return 3.4028e38;
  v7 = *(_OWORD *)a1;
  gm::Box<float,2>::operator+=((float *)&v7, a2);
  return *(float *)&v7;
}

float gm::Box<float,2>::operator+=(float *a1, float *a2)
{
  uint64_t v2;
  char v3;
  float result;
  float v5;
  float v6;
  float v7;

  v2 = 0;
  v3 = 1;
  do
  {
    result = a1[v2 + 2];
    v5 = a1[v2];
    if ((v3 & 1) == 0)
      break;
    v3 = 0;
    v2 = 1;
  }
  while (result >= v5);
  if (result >= v5)
  {
    v6 = a1[1];
    *a1 = *a2 + *a1;
    a1[1] = a2[1] + v6;
    v7 = a1[3];
    a1[2] = *a2 + a1[2];
    result = a2[1] + v7;
    a1[3] = result;
  }
  return result;
}

uint64_t md::TextLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 v11;

  if (*(_BYTE *)(a1 + 565))
  {
    if (*(_BYTE *)(a1 + 566))
    {
      if (!*(_QWORD *)(a1 + 848))
      {
        v7 = operator new();
        v8 = *(_QWORD *)(a1 + 848);
        *(_QWORD *)(a1 + 848) = v7;
        if (v8)
          MEMORY[0x1A1AF4E00](v8, 0x1000C40AE2C30F4);
      }
    }
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, a2);
  if ((_DWORD)result == 37)
  {
    *(_DWORD *)(a1 + 636) = *(_DWORD *)(a1 + 916);
    *(_DWORD *)(a1 + 304) = *a4;
    *(_DWORD *)(a1 + 308) = a4[1];
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 16);
    v11 = atomic_load((unsigned __int8 *)(v10 + 125));
    if ((v11 & 1) == 0 || *(_QWORD *)(v10 + 56) == *(_QWORD *)(v10 + 64))
    {
      return 12;
    }
    else if (*(_QWORD *)(*(_QWORD *)(a1 + 576) + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 576) + 40))
    {
      return 13;
    }
    else
    {
      return 37;
    }
  }
  return result;
}

uint64_t md::TextLabelPart::checkResourcesReady(md::TextLabelPart *this, md::LabelManager *a2)
{
  float v2;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v14;
  float64x2_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t *v23;
  int v24;
  float *v25;
  float *v26;
  double v27;
  float v28;
  uint64_t *v29;
  uint64_t v30;
  const __CTFont *v31;
  unsigned int v32;
  float64x2_t v33;
  unsigned __int8 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;

  v2 = *((float *)this + 157);
  if (v2 <= 0.0)
    return 27;
  v5 = *((_QWORD *)this + 4);
  v6 = fmaxf(*(float *)(v5 + 20) * v2, 0.0);
  *((float *)this + 158) = v6;
  v7 = 632;
  if (!*((_BYTE *)this + 865))
    v7 = 628;
  v8 = *(float *)((char *)this + v7);
  v9 = *((float *)this + 156);
  v10 = *((_QWORD *)this + 72);
  v11 = *(unsigned __int8 *)(v5 + 29);
  v12 = v8 != *((float *)this + 159) || v9 != *((float *)this + 160);
  v14 = (uint64_t *)(v10 + 16);
  md::LabelTextDataLoader::loadTextData(*((_QWORD *)a2 + 34), (unsigned __int8 **)(v10 + 16), v11 != 0);
  v16 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v10 + 16) + 125));
  if ((v16 & 1) == 0)
    return 11;
  v17 = *v14;
  if (!*v14)
  {
    v27 = 1.0;
    goto LABEL_31;
  }
  if (*(_BYTE *)(v17 + 121))
  {
    v18 = *((_QWORD *)a2 + 39);
    v19 = *(float *)(v18 + 120);
    v20 = v8 / v19;
    if ((float)(v8 / v19) >= 7.0)
    {
      v35 = *(unsigned __int8 *)(*(_QWORD *)v18 + 3385);
      LODWORD(v21) = (int)v20;
      if ((int)v20 >= 23)
        LODWORD(v21) = 23;
      if ((int)v21 <= 7)
        v21 = 7;
      else
        v21 = v21;
      v37 = v21;
      v36 = v21 + 1;
      v22 = *(__int128 **)(v17 + 16);
      v23 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>((_QWORD *)(v18 + 64), (uint64_t)v22);
      if (v23 && *((_BYTE *)v23 + v37 + 48) && *((_BYTE *)v23 + v36 + 48))
      {
        v24 = v37;
        v25 = (float *)v23 + v37 + 19;
        v26 = (float *)v23 + v36 + 19;
LABEL_29:
        v28 = (float)(*v25 + (float)((float)(*v26 - *v25) * (float)(v20 - (float)v24))) * v19;
        goto LABEL_30;
      }
      if (v35)
      {
        v29 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>((_QWORD *)(v18 + 8), (uint64_t)v22);
        if (v29)
        {
          v24 = v37;
          v25 = (float *)v29 + v37 + 19;
          v26 = (float *)v29 + v36 + 19;
          goto LABEL_29;
        }
        v38 = v22;
        v30 = std::__hash_table<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,geo::StdAllocator<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,mdm::Allocator>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18 + 8, (uint64_t)v22, &v38);
        md::FontTrackingCache::generateFontScales(*(CTFontRef *)(v17 + 40), (CGFloat *)(v30 + 40), 7, 24);
        *(_BYTE *)(v18 + 124) = 1;
        v32 = v36;
        v24 = v37;
      }
      else
      {
        v38 = v22;
        v30 = std::__hash_table<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,geo::StdAllocator<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,mdm::Allocator>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18 + 64, (uint64_t)v22, &v38);
        v31 = *(const __CTFont **)(v17 + 40);
        v32 = v36;
        v24 = v37;
        md::FontTrackingCache::generateFontScales(v31, (CGFloat *)(v30 + 40), v37, v36);
      }
      v25 = (float *)(v30 + 76 + 4 * v24);
      v26 = (float *)(v30 + 76 + 4 * v32);
      v19 = *(float *)(v18 + 120);
      goto LABEL_29;
    }
  }
  v28 = v8 * 0.055556;
LABEL_30:
  v27 = v28;
LABEL_31:
  v15.f64[0] = v27;
  md::FontGlyphCache::populateQuads(*((_QWORD *)a2 + 393), v10 + 32, (uint64_t **)(v10 + 16), v12, v8, v6, v9, v15, v8 * 0.055556);
  if (*(_BYTE *)(v10 + 144))
  {
    md::LabelTextDataLoader::loadTextData(*((_QWORD *)a2 + 34), (unsigned __int8 **)(v10 + 80), v11 != 0);
    v34 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v10 + 80) + 125));
    if ((v34 & 1) == 0)
      return 11;
    v33.f64[0] = v27;
    md::FontGlyphCache::populateQuads(*((_QWORD *)a2 + 393), v10 + 96, (uint64_t **)(v10 + 80), v12, v8, v6, v9, v33, v8 * 0.055556);
  }
  *((float *)this + 229) = v8;
  *((float *)this + 160) = v9;
  return 37;
}

void md::LabelTextDataLoader::loadTextData(uint64_t a1, unsigned __int8 **a2, int a3)
{
  unsigned __int8 v3;
  unsigned __int8 v5;
  uint64_t v7;
  BOOL v8;
  unsigned __int8 *v9;
  grl::FontManager **v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  unsigned __int8 **v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  __int128 v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  v3 = atomic_load(*a2 + 124);
  if ((v3 & 1) == 0)
  {
    v5 = atomic_load(*a2 + 125);
    if ((v5 & 1) == 0)
    {
      v7 = *(_QWORD *)(a1 + 16);
      if (*(_BYTE *)(v7 + 3383))
        v8 = 0;
      else
        v8 = a3 == 0;
      if (v8)
      {
        v13 = *(unsigned __int8 ***)(a1 + 32);
        v14 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v13 >= v14)
        {
          v19 = *(_QWORD *)(a1 + 24);
          v20 = ((uint64_t)v13 - v19) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            abort();
          v22 = v14 - v19;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          if (v21)
          {
            v23 = 16 * v21;
            v24 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 16 * v21, 8);
            v25 = (_OWORD *)(v24 + 16 * v20);
            v21 = v24 + v23;
            if (v24)
            {
              v26 = *(_OWORD *)a2;
              *v25 = *(_OWORD *)a2;
              if (*((_QWORD *)&v26 + 1))
              {
                v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
              }
            }
          }
          else
          {
            v25 = (_OWORD *)(16 * v20);
          }
          v18 = v25 + 1;
          v29 = *(_QWORD **)(a1 + 24);
          v30 = *(_QWORD **)(a1 + 32);
          if (v30 == v29)
          {
            *(_QWORD *)(a1 + 24) = v25;
            *(_QWORD *)(a1 + 32) = v18;
            v33 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v21;
          }
          else
          {
            do
            {
              v31 = *((_OWORD *)v30 - 1);
              v30 -= 2;
              *--v25 = v31;
              *v30 = 0;
              v30[1] = 0;
            }
            while (v30 != v29);
            v30 = *(_QWORD **)(a1 + 24);
            v32 = *(_QWORD **)(a1 + 32);
            *(_QWORD *)(a1 + 24) = v25;
            *(_QWORD *)(a1 + 32) = v18;
            v33 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 40) = v21;
            while (v32 != v30)
            {
              v34 = (std::__shared_weak_count *)*(v32 - 1);
              if (v34)
              {
                p_shared_owners = (unint64_t *)&v34->__shared_owners_;
                do
                  v36 = __ldaxr(p_shared_owners);
                while (__stlxr(v36 - 1, p_shared_owners));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
              v32 -= 2;
            }
          }
          if (v30)
            (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v30, v33 - (_QWORD)v30);
        }
        else
        {
          if (v13)
          {
            v15 = a2[1];
            *v13 = *a2;
            v13[1] = v15;
            if (v15)
            {
              v16 = (unint64_t *)(v15 + 8);
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
          }
          v18 = v13 + 2;
        }
        *(_QWORD *)(a1 + 32) = v18;
        v11 = *a2 + 124;
      }
      else
      {
        v9 = *a2;
        v10 = (grl::FontManager **)objc_msgSend(*(id *)(v7 + 96), "grlFontManager");
        v11 = v9 + 125;
        v12 = atomic_load(v9 + 125);
        if ((v12 & 1) != 0)
          return;
        if (*(_QWORD *)v9)
          md::TextDataString::generateGlyphInfosAndPositions((md::TextDataString *)v9, v10);
      }
      atomic_store(1u, v11);
    }
  }
}

void md::FontGlyphCache::populateQuads(uint64_t a1, uint64_t a2, uint64_t **a3, int a4, float a5, float a6, float a7, float64x2_t a8, float a9)
{
  int v16;
  int v17;
  BOOL v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  float64x2_t *v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  unsigned int v35;
  float *v36;
  double *v37;
  float v38;
  double v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  float *v44;
  double *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  BOOL v49;
  float v50;
  double v51;
  float v52;
  uint64_t v53;
  float *v54;
  float64x2_t v55;
  unint64_t v56;

  v16 = *(_DWORD *)(a2 + 40);
  v17 = *(_DWORD *)(a1 + 156);
  if (v16 != v17)
    *(_DWORD *)(a2 + 40) = v17;
  v18 = a6 <= 64.0;
  v19 = fminf(ceilf(a6 * 0.03125) * 32.0, 128.0);
  v20 = ceilf(a6 * 0.0625) * 16.0;
  if (!v18)
    v20 = v19;
  v21 = *(float *)(a2 + 32);
  v22 = v20 == v21 && v16 == v17;
  v23 = !v22;
  if (v22)
  {
    v26 = *(_QWORD *)a2;
    v27 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v27)
      return;
    v28 = *(_QWORD *)a2;
    while (*(_QWORD *)v28 && *(_BYTE *)(*(_QWORD *)v28 + 61))
    {
      v28 += 88;
      if (v28 == v27)
      {
        if (v26 != v27)
        {
          if (a4)
          {
            v29 = *a3;
            v30 = (float64x2_t *)(*a3)[11];
            v31 = (*a3)[12] - (_QWORD)v30;
            if (v31)
            {
              v32 = v31 >> 4;
              v33 = a9;
              if (*(_BYTE *)(*v29 + 131))
              {
                v34 = 0;
                v35 = 0;
                if (v32 <= 1)
                  v32 = 1;
                v36 = (float *)(v26 + 80);
                v37 = &v30->f64[1];
                do
                {
                  *v36 = a5;
                  if (v34)
                    ++v35;
                  v38 = (float)((float)v35 * a7) + *(v37 - 1) * a8.f64[0];
                  v39 = *v37;
                  v37 += 2;
                  v40 = v39 * v33;
                  *(v36 - 12) = v38;
                  *(v36 - 11) = v40;
                  ++v34;
                  v36 += 22;
                }
                while (v32 != v34);
              }
              else if (*(_BYTE *)(*v29 + 132))
              {
                v41 = 0;
                v42 = 0;
                v43 = v29[7];
                if (v32 <= 1)
                  v32 = 1;
                v44 = (float *)(v26 + 80);
                v45 = &v30->f64[1];
                v46 = (unsigned __int8 *)(v43 + 19);
                do
                {
                  v48 = *v46;
                  v46 += 24;
                  v47 = v48;
                  if (v41)
                    v49 = v47 == 0;
                  else
                    v49 = 1;
                  if (!v49)
                    ++v42;
                  v50 = (float)((float)v42 * a7) + *(v45 - 1) * a8.f64[0];
                  v51 = *v45;
                  v45 += 2;
                  v52 = v51 * v33;
                  *v44 = a5;
                  *(v44 - 12) = v50;
                  *(v44 - 11) = v52;
                  ++v41;
                  v44 += 22;
                }
                while (v32 != v41);
              }
              else
              {
                if (v32 <= 1)
                  v53 = 1;
                else
                  v53 = v31 >> 4;
                v54 = (float *)(v26 + 80);
                do
                {
                  v55 = *v30++;
                  *v54 = a5;
                  a8.f64[1] = a9;
                  *((float32x2_t *)v54 - 6) = vcvt_f32_f64(vmulq_f64(v55, a8));
                  v54 += 22;
                  --v53;
                }
                while (v53);
              }
            }
          }
        }
        return;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 164))
    goto LABEL_36;
  v24 = v21 > 0.0;
  if (v20 == v21)
    v24 = 0;
  if (*(float *)(a2 + 36) <= 0.0 && !v24)
  {
LABEL_36:
    *(float *)(a2 + 32) = v20;
  }
  else
  {
    *(float *)(a2 + 36) = v20;
    v56 = *(_QWORD *)&a8.f64[0];
    md::FontGlyphCache::doPopulateQuads(a1, (uint64_t *)a2, 1, a3, v23, a4, a5, v20, a7, a8.f64[0], a9);
    *(_QWORD *)&a8.f64[0] = v56;
    v20 = *(float *)(a2 + 32);
  }
  md::FontGlyphCache::doPopulateQuads(a1, (uint64_t *)a2, 0, a3, v23, a4, a5, v20, a7, a8.f64[0], a9);
}

BOOL md::PolylineLabelPlacement::needsUpdateForZ(md::PolylineLabelPlacement *this, int a2)
{
  return *((unsigned __int8 *)this + 212) != a2 || *((_DWORD *)this + 24) != *(_DWORD *)(*((_QWORD *)this + 6) + 252);
}

uint64_t grl::IconMetrics::operator=(uint64_t a1, uint64_t a2)
{
  __int16 *v4;
  uint64_t v5;
  __int16 *v6;
  __int16 *v7;
  BOOL v8;
  uint64_t v10;

  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy(a1 + 72, *(_QWORD *)(a1 + 80));
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 72) = a1 + 80;
    *(_QWORD *)(a1 + 80) = 0;
    v4 = *(__int16 **)(a2 + 72);
    if (v4 != (__int16 *)(a2 + 80))
    {
      do
      {
        (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)v4 + 5) + 16))(&v10);
        std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::__emplace_unique_key_args<grl::IconLayerMapKey,grl::IconLayerMapKey const&,std::unique_ptr<grl::LayerMetrics>>((uint64_t **)(a1 + 72), v4 + 16, (uint64_t)(v4 + 16), &v10);
        v5 = v10;
        v10 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = (__int16 *)*((_QWORD *)v4 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(__int16 **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (__int16 *)*((_QWORD *)v4 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
        v4 = v7;
      }
      while (v7 != (__int16 *)(a2 + 80));
    }
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::__emplace_unique_key_args<grl::IconLayerMapKey,grl::IconLayerMapKey const&,std::unique_ptr<grl::LayerMetrics>>(uint64_t **a1, __int16 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v8 = (uint64_t *)(a1 + 1);
  v7 = (uint64_t)a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t *)v7;
        v11 = (__int16 *)(v7 + 32);
        if (!grl::IconLayerMapKey::operator()((uint64_t)(a1 + 4), a2, (__int16 *)(v7 + 32)))
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (!grl::IconLayerMapKey::operator()((uint64_t)(a1 + 4), v11, a2))
        break;
      v8 = v10 + 1;
      v7 = v10[1];
      if (!v7)
        goto LABEL_9;
    }
    if (*v8)
      return 0;
  }
  else
  {
    v10 = (uint64_t *)(a1 + 1);
  }
LABEL_9:
  v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 48, 8);
  v13 = (uint64_t *)v12;
  *(_DWORD *)(v12 + 32) = *(_DWORD *)a3;
  *(_BYTE *)(v12 + 36) = 0;
  if (*(_BYTE *)(a3 + 4))
  {
    *(_BYTE *)(v12 + 37) = *(_BYTE *)(a3 + 5);
    *(_BYTE *)(v12 + 36) = 1;
  }
  v14 = *a4;
  *a4 = 0;
  *(_QWORD *)(v12 + 40) = v14;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = v10;
  *v8 = v12;
  v15 = (uint64_t *)**a1;
  if (v15)
  {
    *a1 = v15;
    v13 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return 1;
}

void grl::LayerMetrics::~LayerMetrics(grl::LayerMetrics *this)
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 grl::LayerMetrics::copy@<Q0>(grl::LayerMetrics *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E42C2558;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)((char *)this + 72);
  *(_DWORD *)(v4 + 88) = *((_DWORD *)this + 22);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
  result = *(__n128 *)((char *)this + 24);
  *(__n128 *)(v4 + 24) = result;
  *a2 = v4;
  return result;
}

__n128 grl::PathLayerMetrics::copy@<Q0>(grl::PathLayerMetrics *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = operator new();
  *(_OWORD *)(v4 + 40) = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)((char *)this + 72);
  *(_DWORD *)(v4 + 88) = *((_DWORD *)this + 22);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)v4 = &off_1E42C25A8;
  *(_BYTE *)(v4 + 92) = 0;
  if (*((_BYTE *)this + 92))
  {
    *(_BYTE *)(v4 + 93) = *((_BYTE *)this + 93);
    *(_BYTE *)(v4 + 92) = 1;
  }
  result = *((__n128 *)this + 6);
  v6 = *((_OWORD *)this + 7);
  *(__n128 *)(v4 + 96) = result;
  *(_OWORD *)(v4 + 112) = v6;
  *(_DWORD *)(v4 + 128) = *((_DWORD *)this + 32);
  *a2 = v4;
  return result;
}

uint64_t grl::PathLayerMetrics::PathLayerMetrics(uint64_t a1, uint64_t a2, float *a3, double a4, double a5, double a6, double a7, double a8)
{
  unsigned int v9;

  *(_WORD *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_QWORD *)a1 = &off_1E42C25A8;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  v9 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(a1 + 92) = 1;
  *(_BYTE *)(a1 + 93) = v9;
  if (v9 <= 9)
  {
    if (((1 << v9) & 0x3D8) != 0)
      grl::PathLayerMetrics::constructBalloonMetrics(a1, a2, a3, 0.0, *(int32x2_t *)&a5, a6, a7);
    else
      grl::PathLayerMetrics::constructPathMetrics(a1, a2, (int8x8_t *)a3, 0.0, a5, a6, a7, a8);
  }
  return a1;
}

__n128 grl::TextLayerMetrics::copy@<Q0>(grl::TextLayerMetrics *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 40) = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)((char *)this + 72);
  *(_DWORD *)(v4 + 88) = *((_DWORD *)this + 22);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
  result = *(__n128 *)((char *)this + 24);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)v4 = &off_1E42C2620;
  *(_QWORD *)(v4 + 92) = *(_QWORD *)((char *)this + 92);
  *a2 = v4;
  return result;
}

void grl::TextLayerMetrics::~TextLayerMetrics(grl::TextLayerMetrics *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t grl::TextLayerMetrics::TextLayerMetrics(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  NSObject *v9;
  _BYTE v11[12];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a1 + 8) = 3;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_QWORD *)a1 = &off_1E42C2620;
  *(_QWORD *)(a1 + 92) = 0;
  v4 = roundf(a3[1].f32[1] - a3->f32[1]);
  v5 = *(float *)(a2 + 76);
  v6 = roundf(a3[1].f32[0] - a3->f32[0]) + v5;
  v7 = v6 + *(float *)(a2 + 80);
  *(float *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = 0;
  *(float *)(a1 + 20) = v6;
  *(float *)(a1 + 24) = v4 + 0.0;
  *(float *)(a1 + 28) = v5;
  *(_DWORD *)(a1 + 32) = 0;
  *(float *)(a1 + 36) = v6;
  *(float *)(a1 + 40) = v4 + 0.0;
  *(float *)(a1 + 44) = v7;
  *(float *)(a1 + 48) = v4;
  v8 = *a3;
  *(float32x2_t *)(a1 + 92) = vneg_f32(*a3);
  *(float *)(a1 + 92) = *(float *)(a2 + 76) - v8.f32[0];
  *(_QWORD *)v11 = 0;
  if (!*(_QWORD *)(a1 + 44))
  {
    if (GEOGetGeoResourceLibMathLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibMathLog::onceToken, &__block_literal_global_19_0);
    v9 = GEOGetGeoResourceLibMathLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMathLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v11 = 136315650;
      *(_QWORD *)&v11[4] = "_size != gm::Vector2f::zero()";
      v12 = 2080;
      v13 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/TextLayerMetrics.cpp";
      v14 = 1024;
      v15 = 39;
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "A TextLayer of size zero has been generated.: Assertion with expression - %s : Failed in file - %s line - %i", v11, 0x1Cu);
    }
  }
  return a1;
}

void md::FontTrackingCache::generateFontScales(CTFontRef font, CGFloat *a2, int a3, int a4)
{
  uint64_t v5;
  int v8;
  const __CTFont *CopyWithAttributes;
  float v10;
  CGGlyph glyphs;
  CGSize advances;
  uint64_t v13;

  LODWORD(v5) = a3;
  v13 = *MEMORY[0x1E0C80C00];
  glyphs = 0;
  if (*a2 == 0.0)
  {
    CTFontGetAdvancesForGlyphs(font, kCTFontOrientationDefault, &glyphs, &advances, 1);
    CTFontTransformGlyphs();
    *a2 = advances.width;
  }
  if ((int)v5 <= a4)
  {
    v5 = (int)v5;
    v8 = a4 + 1;
    do
    {
      if (!*((_BYTE *)a2 + v5 + 8))
      {
        CopyWithAttributes = CTFontCreateCopyWithAttributes(font, (double)(int)v5, 0, 0);
        CTFontGetAdvancesForGlyphs(CopyWithAttributes, kCTFontOrientationDefault, &glyphs, &advances, 1);
        CTFontTransformGlyphs();
        CTFontRemoveFromCaches();
        CFRelease(CopyWithAttributes);
        v10 = advances.width / *a2;
        *((float *)a2 + v5 + 9) = v10;
        *((_BYTE *)a2 + v5 + 8) = 1;
      }
      ++v5;
    }
    while (v8 != (_DWORD)v5);
  }
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v10);
  if (HIDWORD(v10) >= HIDWORD(v11))
    v8 = HIDWORD(v11);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::zIndex@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 152);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  *a2 = 0;
  return result;
}

BOOL md::MaterialRaster::updateStyleTextureIfNecessary(uint64_t a1, int8x8_t *a2, uint64_t a3, int a4, int a5, float a6)
{
  uint64_t i;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  __n128 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _QWORD *v19;
  int v20;
  char *v21;
  __int128 v22;
  int v23;
  __int32 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  _BOOL4 v32;
  NSObject *v33;
  char *v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  char v45;
  __int128 v46;
  int v47;
  BOOL v48;
  char v49;
  BOOL v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  char *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  uint64_t v68;
  BOOL v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  BOOL v82;
  float v83;
  float v84;
  float *v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  BOOL v98;
  float v99;
  float v100;
  _BOOL4 v103;
  _BOOL4 v104;
  float v105;
  float v106;
  float v107;
  float v108;
  BOOL v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  _BOOL4 v124;
  _BOOL4 v125;
  _BOOL4 v126;
  _BOOL4 v127;
  float v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char v137;
  char v138;
  uint64_t v139;
  char v140;
  char v141;
  uint64_t v142;
  float v143;
  float v144;
  float v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v149;
  __int16 *v150;
  _WORD *v151;
  unsigned int v152;
  unsigned __int16 *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  unsigned __int16 *v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  unsigned int v168;
  unsigned int v169;
  char *v170;
  BOOL v171;
  float32x4_t *v172;
  char *v173;
  BOOL v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  uint64_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  uint64_t v184;
  char v185;
  unsigned __int16 *v186;
  float v187;
  float v188;
  float v189;
  unsigned int v190;
  unsigned int v191;
  char *v192;
  float *v193;
  float v194;
  BOOL v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  BOOL v199;
  BOOL v200;
  BOOL v201;
  BOOL v202;
  float v203;
  uint64_t v204;
  uint64_t v205;
  int v207;
  char *v208;
  void *v209;
  void *v210;
  uint64_t v213;
  float v215;
  float v216;
  int v217;
  float v218;
  float v219;
  float v220;
  float v221;
  char *v223;
  int v224;
  int v225;
  __int32 v226;
  BOOL v227;
  int v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  __int128 v238;
  float v239;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  void *__p;
  char *v251;
  char *v252;
  uint8_t buf[4];
  uint64_t v254;
  float v255;
  char v256;
  uint64_t v257;
  float v258;
  char v259;
  uint64_t v260;
  float v261;
  char v262;
  uint64_t v263;
  float v264;
  unsigned __int8 *v265;
  std::__shared_weak_count *v266;
  uint64_t v267;
  unsigned int v268;

  i = a3;
  *(_BYTE *)(a1 + 122) = 0;
  v251 = 0;
  v252 = 0;
  __p = 0;
  v8 = *(char **)(a1 + 48);
  v223 = *(char **)(a1 + 56);
  v9 = v223 - v8;
  if (v223 == v8)
  {
    v11 = 0;
    if (!*(_BYTE *)(a3 + 8))
      goto LABEL_5;
  }
  else
  {
    if ((unint64_t)v9 >= 0x3333333333333331)
      abort();
    v10 = v9 >> 3;
    v11 = (char *)operator new(40 * (v9 >> 3));
    __p = v11;
    v251 = v11;
    v252 = &v11[40 * v10];
    if (!*(_BYTE *)(i + 8))
      goto LABEL_5;
  }
  *(_BYTE *)(i + 8) = 0;
LABEL_5:
  if (v223 == v8)
  {
    v130 = (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4;
    *(_BYTE *)(a1 + 123) = 1;
LABEL_235:
    v134 = v130;
    if ((_DWORD)v130)
      goto LABEL_243;
    goto LABEL_335;
  }
  v213 = i;
  v229 = a6;
  do
  {
    v12 = *(_QWORD *)v8;
    v268 = 0;
    v267 = 0;
    v241 = (float32x4_t)v12;
    gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v265, a2, (uint64_t *)&v241, 0);
    v13 = v265;
    if (!v265)
    {
      v19 = operator new(0x10uLL);
      v227 = 0;
      v20 = 0;
      v13 = 0;
      v21 = (char *)(v19 + 2);
      *v19 = 0;
      v19[1] = 0;
      *(_QWORD *)&v22 = v19;
      *((_QWORD *)&v22 + 1) = v19 + 2;
      v238 = v22;
LABEL_78:
      v47 = 0;
      goto LABEL_79;
    }
    (*(void (**)(float32x4_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v265 + 976))(&v241, v265, a6);
    v14.n128_u32[0] = v241.u32[2];
    if (v241.i8[0])
      v15 = v241.f32[3];
    else
      v15 = 1.0;
    if (v241.i8[0])
      v16 = v241.f32[2];
    else
      v16 = 1.0;
    if (v241.i8[0])
      v17 = v241.f32[1];
    else
      v17 = 1.0;
    (*(void (**)(float32x4_t *__return_ptr, unsigned __int8 *, float, __n128))(*(_QWORD *)v13 + 928))(&v241, v13, a6, v14);
    if (v241.i8[0])
      v18 = v241.f32[1];
    else
      v18 = 1.0;
    (*(void (**)(float32x4_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v13 + 264))(&v241, v13, a6);
    v23 = v241.u8[0];
    v24 = v226;
    if (v241.i8[0])
      v24 = v241.i32[1];
    v226 = v24;
    (*(void (**)(float32x4_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v13 + 352))(&v241, v13, a6);
    v224 = v241.u8[0];
    v25 = v228;
    if (v241.i8[0])
      v25 = v241.u8[1];
    v225 = v13[8];
    v227 = v225 == 5;
    v228 = v25;
    v259 = 0;
    v256 = 0;
    if (a4)
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v13 + 1096))(buf, v13, a6);
      v26 = buf[0];
      if (buf[0])
      {
        *(uint64_t *)((char *)v241.i64 + 4) = v254;
        v241.f32[3] = v255;
        v241.i8[0] = 1;
      }
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v13 + 1128))(buf, v13, a6);
      v27 = buf[0];
      if (buf[0])
      {
        v263 = v254;
        v264 = v255;
        v262 = 1;
      }
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v13 + 1160))(buf, v13, a6);
      v217 = buf[0];
      if (buf[0])
      {
        v260 = v254;
        v261 = v255;
        v259 = 1;
      }
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, float))(*(_QWORD *)v13 + 1192))(buf, v13, a6);
      v28 = buf[0];
      if (buf[0])
      {
        v257 = v254;
        v258 = v255;
        v256 = 1;
      }
      if ((!v26
         || (*(uint64_t *)((char *)v241.i64 + 4) == v267 ? (v29 = v241.u32[3] == (unint64_t)v268) : (v29 = 0), v29))
        && (!v27 || (v263 == v267 ? (v30 = LODWORD(v264) == (unint64_t)v268) : (v30 = 0), v30))
        && (!v217 || (v260 == v267 ? (v31 = LODWORD(v261) == (unint64_t)v268) : (v31 = 0), v31)))
      {
        if (!buf[0])
          goto LABEL_73;
        v32 = v257 != v267 || LODWORD(v258) != (unint64_t)v268;
      }
      else
      {
        v32 = 1;
      }
      if (v225 == 5 && v32)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v33 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_ERROR, "Color Ramp materials do not support climate tint... ignoring tint", buf, 2u);
        }

        goto LABEL_73;
      }
      if (v32)
      {
        v34 = (char *)operator new(0x90uLL);
        v35 = (float *)v34;
        v36 = fmaxf(v17, fmaxf(v16, v15));
        v37 = 0.0;
        if (v36 <= 0.0)
        {
          v40 = 0.0;
        }
        else
        {
          v38 = fminf(fminf(v15, v16), v17);
          v39 = v36 - v38;
          v40 = (float)(v36 - v38) / v36;
          if (v40 != 0.0)
          {
            v41 = 1.0 / v39;
            v42 = (float)(v36 - v16) * (float)(1.0 / v39);
            v43 = (float)(v36 - v15) * (float)(1.0 / v39);
            if (v36 == v17)
            {
              if (v38 == v16)
                v37 = v43 + 5.0;
              else
                v37 = 1.0 - v42;
            }
            else
            {
              v128 = (float)(v36 - v17) * v41;
              if (v36 == v16)
              {
                if (v38 == v15)
                  v37 = v128 + 1.0;
                else
                  v37 = 3.0 - v43;
              }
              else if (v38 == v17)
              {
                v37 = v42 + 3.0;
              }
              else
              {
                v37 = 5.0 - v128;
              }
            }
          }
        }
        v68 = 0;
        v69 = v27 == 0;
        v21 = v34 + 144;
        v70 = v37 * 60.0;
        v72 = *((float *)&v263 + 1);
        v71 = v264;
        if (v69)
          v71 = 0.0;
        v73 = *(float *)&v263;
        if (v69)
        {
          v72 = 0.0;
          v73 = 0.0;
        }
        v234 = v72 + v40;
        v235 = v73 + v70;
        v74 = v71 + v36;
        v75 = v241.f32[3];
        v76 = v241.f32[2];
        if (!v26)
          v75 = 0.0;
        v77 = v241.f32[1];
        if (!v26)
        {
          v76 = 0.0;
          v77 = 0.0;
        }
        v236 = v70;
        v237 = v40;
        v232 = v77 + v70;
        v233 = v74;
        v239 = v36;
        v230 = v75 + v36;
        v231 = v76 + v40;
        if (v28)
          v78 = v258;
        else
          v78 = 0.0;
        v79 = *((float *)&v257 + 1);
        if (!v28)
          v79 = 0.0;
        v220 = v79;
        v221 = v78;
        if (v28)
          v80 = *(float *)&v257;
        else
          v80 = 0.0;
        v81 = v261;
        v82 = v217 == 0;
        if (!v217)
          v81 = 0.0;
        v218 = v81;
        v219 = v80;
        if (v82)
          v83 = 0.0;
        else
          v83 = *((float *)&v260 + 1);
        if (v82)
          v84 = 0.0;
        else
          v84 = *(float *)&v260;
        v215 = v84;
        v216 = v83;
        v85 = (float *)(v34 + 24);
        while (1)
        {
          if ((_DWORD)v68 == 2)
          {
            v89 = v219;
            v90 = v220;
            v91 = v221;
          }
          else
          {
            v89 = 0.0;
            v90 = 0.0;
            v91 = 0.0;
            if (!(_DWORD)v68)
            {
              v89 = v215;
              v90 = v216;
              v91 = v218;
            }
          }
          v92 = fminf(fmaxf(v233 + v91, 0.0), 1.0);
          v93 = v92 * fminf(fmaxf(v234 + v90, 0.0), 1.0);
          v94 = fmodf((float)(v235 + v89) * 0.016667, 6.0);
          v95 = v93 - (float)(fabsf(fmodf(v94, 2.0) + -1.0) * v93);
          v96 = v92 - v93;
          if (v94 >= 0.0 && v94 < 1.0)
          {
            v110 = v95 + v96;
            v105 = v92;
            v100 = v237;
            v99 = v239;
          }
          else
          {
            v98 = v94 >= 1.0 && v94 < 2.0;
            v100 = v237;
            v99 = v239;
            if (v98)
            {
              v105 = v95 + v96;
              v110 = v92;
            }
            else if (v94 >= 2.0 && v94 < 3.0)
            {
              v105 = v92 - v93;
              v96 = v95 + v96;
              v110 = v92;
            }
            else if (v94 >= 3.0 && v94 < 4.0)
            {
              v110 = v95 + v96;
              v105 = v92 - v93;
              v96 = v92;
            }
            else
            {
              v103 = v94 >= 5.0;
              v104 = v94 < 6.0;
              if (v103 && v104)
                v105 = v92;
              else
                v105 = v92 - v93;
              v106 = -0.0;
              if (v103 && v104)
                v106 = v95;
              v107 = v106 + v96;
              v108 = v95 + v96;
              v109 = v94 >= 4.0 && v94 < 5.0;
              if (v109)
                v105 = v108;
              v110 = v92 - v93;
              if (v109)
                v96 = v92;
              else
                v96 = v107;
            }
          }
          *(v85 - 6) = v105;
          *(v85 - 5) = v110;
          *(v85 - 4) = v96;
          *(v85 - 3) = v18;
          v111 = fminf(fmaxf(v99 + v91, 0.0), 1.0);
          v112 = v111 * fminf(fmaxf(v100 + v90, 0.0), 1.0);
          v113 = fmodf((float)(v236 + v89) * 0.016667, 6.0);
          v114 = v112 - (float)(fabsf(fmodf(v113, 2.0) + -1.0) * v112);
          v115 = v111 - v112;
          if (v113 >= 0.0 && v113 < 1.0)
          {
            v118 = v114 + v115;
            v117 = v111;
            v111 = v111 - v112;
            a6 = v229;
          }
          else
          {
            a6 = v229;
            if (v113 < 1.0 || v113 >= 2.0)
            {
              if (v113 < 2.0 || v113 >= 3.0)
              {
                if (v113 < 3.0 || v113 >= 4.0)
                {
                  if (v113 < 4.0 || v113 >= 5.0)
                  {
                    v126 = v113 >= 5.0;
                    v127 = v113 < 6.0;
                    if (v126 && v127)
                      v117 = v111;
                    else
                      v117 = v115;
                    if (!v126 || !v127)
                      v114 = -0.0;
                    v111 = v114 + v115;
                    v118 = v115;
                  }
                  else
                  {
                    v117 = v114 + v115;
                    v118 = v115;
                  }
                }
                else
                {
                  v118 = v114 + v115;
                  v117 = v115;
                }
              }
              else
              {
                v118 = v111;
                v111 = v114 + v115;
                v117 = v115;
              }
            }
            else
            {
              v117 = v114 + v115;
              v118 = v111;
              v111 = v115;
            }
          }
          *(v85 - 2) = v117;
          *(v85 - 1) = v118;
          *v85 = v111;
          v85[1] = v18;
          v119 = v232 + v89;
          v88 = fminf(fmaxf(v230 + v91, 0.0), 1.0);
          v120 = v88 * fminf(fmaxf(v231 + v90, 0.0), 1.0);
          v121 = fmodf(v119 * 0.016667, 6.0);
          v122 = v120 - (float)(fabsf(fmodf(v121, 2.0) + -1.0) * v120);
          v123 = v88 - v120;
          if (v121 >= 0.0 && v121 < 1.0)
          {
            v86 = v122 + v123;
            v87 = v88;
          }
          else
          {
            if (v121 < 1.0 || v121 >= 2.0)
            {
              if (v121 < 2.0 || v121 >= 3.0)
              {
                if (v121 < 3.0 || v121 >= 4.0)
                {
                  if (v121 < 4.0 || v121 >= 5.0)
                  {
                    v124 = v121 >= 5.0;
                    v125 = v121 < 6.0;
                    if (v124 && v125)
                      v87 = v88;
                    else
                      v87 = v88 - v120;
                    if (!v124 || !v125)
                      v122 = -0.0;
                    v88 = v122 + v123;
                    v86 = v123;
                  }
                  else
                  {
                    v87 = v122 + v123;
                    v86 = v88 - v120;
                  }
                }
                else
                {
                  v86 = v122 + v123;
                  v87 = v88 - v120;
                }
              }
              else
              {
                v86 = v88;
                v88 = v122 + v123;
                v87 = v123;
              }
              goto LABEL_138;
            }
            v87 = v122 + v123;
            v86 = v88;
          }
          v88 = v88 - v120;
LABEL_138:
          v85[2] = v87;
          v85[3] = v86;
          v85[4] = v88;
          v85[5] = v18;
          ++v68;
          v85 += 12;
          if (v68 == 3)
          {
            v45 = 1;
            i = v213;
            goto LABEL_74;
          }
        }
      }
    }
LABEL_73:
    v35 = (float *)operator new(0x10uLL);
    v45 = 0;
    v21 = (char *)(v35 + 4);
    *v35 = v17;
    v35[1] = v16;
    v35[2] = v15;
    v35[3] = v18;
LABEL_74:
    *(_BYTE *)(a1 + 122) |= v45;
    if (v225 == 5 && !*(_BYTE *)(i + 8))
    {
      *(_QWORD *)i = v12;
      *(_BYTE *)(i + 8) = 1;
    }
    *(_QWORD *)&v46 = v35;
    *((_QWORD *)&v46 + 1) = v21;
    v238 = v46;
    v47 = v226;
    v20 = v224;
    if (!v23)
      goto LABEL_78;
LABEL_79:
    if ((_BYTE)v228)
      v48 = 1;
    else
      v48 = v20 == 0;
    v49 = v48;
    v50 = v13 != 0;
    v51 = v251;
    if (v251 >= v252)
    {
      v53 = (char *)__p;
      v54 = 0xCCCCCCCCCCCCCCCDLL * ((v251 - (_BYTE *)__p) >> 3);
      v55 = v54 + 1;
      if (v54 + 1 > 0x666666666666666)
        abort();
      if (0x999999999999999ALL * ((v252 - (_BYTE *)__p) >> 3) > v55)
        v55 = 0x999999999999999ALL * ((v252 - (_BYTE *)__p) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v252 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
        v56 = 0x666666666666666;
      else
        v56 = v55;
      if (v56 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v57 = (char *)operator new(40 * v56);
      v58 = &v57[40 * v54];
      *(_QWORD *)v58 = v12;
      *(_OWORD *)(v58 + 8) = v238;
      *((_QWORD *)v58 + 3) = v21;
      *((_DWORD *)v58 + 8) = v47;
      v58[36] = v49;
      v58[37] = v227;
      v58[38] = v50;
      if (v51 == v53)
      {
        __p = v58;
        v252 = &v57[40 * v56];
        i = v213;
      }
      else
      {
        v59 = 0;
        do
        {
          v60 = &v58[v59];
          v61 = &v51[v59];
          *((_QWORD *)v60 - 5) = *(_QWORD *)&v51[v59 - 40];
          *((_QWORD *)v60 - 3) = 0;
          *((_QWORD *)v60 - 2) = 0;
          *((_OWORD *)v60 - 2) = *(_OWORD *)&v51[v59 - 32];
          *((_QWORD *)v60 - 2) = *(_QWORD *)&v51[v59 - 16];
          *((_QWORD *)v61 - 4) = 0;
          *((_QWORD *)v61 - 3) = 0;
          *((_QWORD *)v61 - 2) = 0;
          v62 = *(_DWORD *)&v51[v59 - 8];
          *(_DWORD *)(v60 - 5) = *(_DWORD *)&v51[v59 - 5];
          *((_DWORD *)v60 - 2) = v62;
          v59 -= 40;
        }
        while (&v51[v59] != v53);
        v51 = (char *)__p;
        v63 = v251;
        __p = &v58[v59];
        v252 = &v57[40 * v56];
        for (i = v213; v63 != v51; v63 -= 40)
        {
          v64 = (void *)*((_QWORD *)v63 - 4);
          if (v64)
          {
            *((_QWORD *)v63 - 3) = v64;
            operator delete(v64);
          }
        }
      }
      v52 = v58 + 40;
      if (v51)
        operator delete(v51);
    }
    else
    {
      *(_QWORD *)v251 = v12;
      *(_OWORD *)(v51 + 8) = v238;
      *((_QWORD *)v51 + 3) = v21;
      *((_DWORD *)v51 + 8) = v47;
      v51[36] = v49;
      v51[37] = v227;
      v52 = v51 + 40;
      v51[38] = v50;
    }
    v251 = v52;
    v65 = v266;
    if (v266)
    {
      p_shared_owners = (unint64_t *)&v266->__shared_owners_;
      do
        v67 = __ldaxr(p_shared_owners);
      while (__stlxr(v67 - 1, p_shared_owners));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v8 += 8;
  }
  while (v8 != v223);
  v11 = (char *)__p;
  v129 = v251;
  v130 = (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4;
  *(_BYTE *)(a1 + 123) = 1;
  if (v11 == v129)
    goto LABEL_235;
  v131 = v129 - v11 - 40;
  if (v131 > 0x27)
  {
    v135 = v131 / 0x28 + 1;
    v136 = v11 + 78;
    v137 = -1;
    v138 = 1;
    v139 = v135 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v140 = *(v136 - 40);
      v141 = *v136;
      v136 += 80;
      v138 &= v140;
      v137 &= v141;
      v139 -= 2;
    }
    while (v139);
    v132 = v137 & v138;
    if (v135 != (v135 & 0xFFFFFFFFFFFFFFELL))
    {
      v133 = &v11[40 * (v135 & 0xFFFFFFFFFFFFFFELL)];
      goto LABEL_241;
    }
  }
  else
  {
    v132 = 1;
    v133 = v11;
    do
    {
LABEL_241:
      v132 &= v133[38];
      v133 += 40;
    }
    while (v133 != v129);
  }
  *(_BYTE *)(a1 + 123) = v132;
  v134 = v130;
  if ((_DWORD)v130)
  {
LABEL_243:
    v142 = 0;
    if (a5)
      v143 = 0.054901;
    else
      v143 = 0.094118;
    if (a5)
      v144 = 0.098039;
    else
      v144 = 0.66274;
    if (a5)
      v145 = 0.21961;
    else
      v145 = 0.94902;
    do
    {
      v149 = *(_QWORD *)(a1 + 72) + 16 * v142;
      v150 = *(__int16 **)v149;
      v152 = *(unsigned __int16 *)(v149 + 8);
      v151 = (_WORD *)(v149 + 8);
      v153 = (unsigned __int16 *)(*(_QWORD *)v149 + 2 * *(unsigned __int16 *)(v149 + 8));
      v241.i64[0] = (uint64_t)&__p;
      v154 = 126 - 2 * __clz(v152);
      if (v152)
        v155 = v154;
      else
        v155 = 0;
      std::__introsort<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *,false>(v150, v153, (uint64_t **)&v241, v155, 1);
      if (*(_BYTE *)(a1 + 122))
      {
        v241.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v241.i64[1] = LODWORD(v145);
        v242.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v242.i64[1] = LODWORD(v145);
        v243.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v243.i64[1] = LODWORD(v145);
        v244.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v244.i64[1] = LODWORD(v145);
        v245.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v245.i64[1] = LODWORD(v145);
        v246.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v246.i64[1] = LODWORD(v145);
        v247.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v247.i64[1] = LODWORD(v145);
        v248.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v248.i64[1] = LODWORD(v145);
        v249.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v249.i64[1] = LODWORD(v145);
        v156 = (unsigned __int16)*v151;
        if (*v151)
        {
          v157 = 0;
          v158 = *(unsigned __int16 **)v149;
          v160 = v241;
          v159 = v242;
          v162 = v243;
          v161 = v244;
          v164 = v245;
          v163 = v246;
          v166 = v247;
          v165 = v248;
          v167 = v249;
          v167.i32[3] = 0;
          do
          {
            v169 = *v158++;
            v168 = v169;
            if (*((_BYTE *)__p + 40 * v169 + 36))
            {
              v170 = (char *)__p + 40 * v168;
              v171 = v170[37] != 0;
              v173 = v170 + 8;
              v172 = (float32x4_t *)*((_QWORD *)v170 + 1);
              v174 = *((_QWORD *)v173 + 1) - (_QWORD)v172 > 0x10uLL;
              v175 = vmlaq_n_f32(vmulq_laneq_f32(*v172, *v172, 3), v160, 1.0 - COERCE_FLOAT(HIDWORD(*(unsigned __int128 *)v172)));
              v241 = v175;
              v176 = vmlaq_n_f32(vmulq_laneq_f32(v172[v174], v172[v174], 3), v159, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v172[v174])));
              v242 = v176;
              v177 = vmlaq_n_f32(vmulq_laneq_f32(v172[2 * v174], v172[2 * v174], 3), v162, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v172[2 * v174])));
              v243 = v177;
              v178 = v174 | (2 * v174);
              v179 = vmlaq_n_f32(vmulq_laneq_f32(v172[v178], v172[v178], 3), v161, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v172[v178])));
              v244 = v179;
              if (v174)
                ++v178;
              v180 = vmlaq_n_f32(vmulq_laneq_f32(v172[v178], v172[v178], 3), v164, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v172[v178])));
              v245 = v180;
              if (v174)
                ++v178;
              v181 = vmlaq_n_f32(vmulq_laneq_f32(v172[v178], v172[v178], 3), v163, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v172[v178])));
              v246 = v181;
              if (v174)
                ++v178;
              v182 = vmlaq_n_f32(vmulq_laneq_f32(v172[v178], v172[v178], 3), v166, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v172[v178])));
              v247 = v182;
              if (v174)
                ++v178;
              v183 = vmlaq_n_f32(vmulq_laneq_f32(v172[v178], v172[v178], 3), v165, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v172[v178])));
              v248 = v183;
              if (v174)
                ++v178;
              v157 |= v171;
              v160 = v175;
              v159 = v176;
              v162 = v177;
              v161 = v179;
              v164 = v180;
              v249 = vmlaq_n_f32(vmulq_laneq_f32(v172[v178], v172[v178], 3), v167, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v172[v178])));
              v163 = v181;
              v166 = v182;
              v165 = v183;
              v167 = v249;
            }
            --v156;
          }
          while (v156);
          if ((v157 & 1) != 0)
          {
            v241.i32[3] = 0;
            v242.i32[3] = 0;
            v243.i32[3] = 0;
            v244.i32[3] = 0;
            v245.i32[3] = 0;
            v246.i32[3] = 0;
            v247.i32[3] = 0;
            v248.i32[3] = 0;
            v249.i32[3] = 0;
          }
        }
        v146 = *(_QWORD *)(a1 + 32);
        v147 = *(_QWORD *)v146 + 144 * v142;
        if (v241.i64[0] != *(_QWORD *)v147 || v241.i64[1] != *(_QWORD *)(v147 + 8))
          goto LABEL_256;
        v195 = v242.i64[0] == *(_QWORD *)(v147 + 16) && v242.i64[1] == *(_QWORD *)(v147 + 24);
        if (!v195
          || (v243.i64[0] == *(_QWORD *)(v147 + 32) ? (v196 = v243.i64[1] == *(_QWORD *)(v147 + 40)) : (v196 = 0),
              !v196
           || (v244.i64[0] == *(_QWORD *)(v147 + 48) ? (v197 = v244.i64[1] == *(_QWORD *)(v147 + 56)) : (v197 = 0),
               !v197
            || (v245.i64[0] == *(_QWORD *)(v147 + 64) ? (v198 = v245.i64[1] == *(_QWORD *)(v147 + 72)) : (v198 = 0),
                !v198
             || (v246.i64[0] == *(_QWORD *)(v147 + 80) ? (v199 = v246.i64[1] == *(_QWORD *)(v147 + 88)) : (v199 = 0),
                 !v199
              || (v247.i64[0] == *(_QWORD *)(v147 + 96) ? (v200 = v247.i64[1] == *(_QWORD *)(v147 + 104)) : (v200 = 0),
                  !v200
               || (v248.i64[0] == *(_QWORD *)(v147 + 112) ? (v201 = v248.i64[1] == *(_QWORD *)(v147 + 120)) : (v201 = 0),
                   !v201
                || (v249.i64[0] == *(_QWORD *)(v147 + 128)
                  ? (v202 = v249.i64[1] == *(_QWORD *)(v147 + 136))
                  : (v202 = 0),
                    !v202))))))))
        {
LABEL_256:
          *(_BYTE *)(v146 + 32) = 1;
          *(float32x4_t *)v147 = v241;
          *(float32x4_t *)(v147 + 16) = v242;
          *(float32x4_t *)(v147 + 32) = v243;
          *(float32x4_t *)(v147 + 48) = v244;
          *(float32x4_t *)(v147 + 64) = v245;
          *(float32x4_t *)(v147 + 80) = v246;
          *(float32x4_t *)(v147 + 96) = v247;
          *(float32x4_t *)(v147 + 112) = v248;
          *(float32x4_t *)(v147 + 128) = v249;
        }
      }
      else
      {
        v241.i64[0] = __PAIR64__(LODWORD(v144), LODWORD(v143));
        v241.f32[2] = v145;
        v184 = (unsigned __int16)*v151;
        if (*v151)
        {
          v185 = 0;
          v186 = *(unsigned __int16 **)v149;
          v187 = v145;
          v188 = v144;
          v189 = v143;
          do
          {
            v191 = *v186++;
            v190 = v191;
            if (*((_BYTE *)__p + 40 * v191 + 36))
            {
              v192 = (char *)__p + 40 * v190;
              v185 |= v192[37] != 0;
              v193 = (float *)*((_QWORD *)v192 + 1);
              v194 = v193[3];
              v189 = (float)((float)(1.0 - v194) * v189) + (float)(*v193 * v194);
              v188 = (float)((float)(1.0 - v194) * v188) + (float)(v193[1] * v194);
              v187 = (float)((float)(1.0 - v194) * v187) + (float)(v193[2] * v194);
            }
            --v184;
          }
          while (v184);
          v241.i64[0] = __PAIR64__(LODWORD(v188), LODWORD(v189));
          v241.f32[2] = v187;
          if ((v185 & 1) != 0)
            v203 = 0.0;
          else
            v203 = 1.0;
        }
        else
        {
          v203 = 1.0;
          v187 = v145;
          v188 = v144;
          v189 = v143;
        }
        v241.f32[3] = v203;
        v204 = *(_QWORD *)(a1 + 16);
        v205 = *(_QWORD *)v204 + 16 * v142;
        if (v241.i64[0] != *(_QWORD *)v205 || v241.i64[1] != *(_QWORD *)(v205 + 8))
        {
          *(_BYTE *)(v204 + 32) = 1;
          *(float *)v205 = v189;
          *(float *)(v205 + 4) = v188;
          *(float *)(v205 + 8) = v187;
          *(float *)(v205 + 12) = v203;
        }
      }
      ++v142;
    }
    while (v142 != v134);
    v11 = (char *)__p;
  }
LABEL_335:
  v207 = *(unsigned __int8 *)(a1 + 122);
  if (v11)
  {
    v208 = v251;
    v209 = v11;
    if (v251 != v11)
    {
      do
      {
        v210 = (void *)*((_QWORD *)v208 - 4);
        if (v210)
        {
          *((_QWORD *)v208 - 3) = v210;
          operator delete(v210);
        }
        v208 -= 40;
      }
      while (v208 != v11);
      v209 = __p;
    }
    v251 = v11;
    operator delete(v209);
  }
  return v207 != 0;
}

void sub_19F0A6478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char *__p,char *a52)
{
  char *v53;
  char *v54;
  void *v55;

  v53 = __p;
  if (__p)
  {
    v54 = a52;
    if (a52 != __p)
    {
      do
      {
        v55 = (void *)*((_QWORD *)v54 - 4);
        if (v55)
        {
          *((_QWORD *)v54 - 3) = v55;
          operator delete(v55);
        }
        v54 -= 40;
      }
      while (v54 != __p);
      v53 = __p;
    }
    operator delete(v53);
  }
  _Unwind_Resume(exception_object);
}

void gms::ZoomablePropertyStore<gm::Matrix<float,3,1>>::getProperty(_QWORD *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  float v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  float v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  float v77;

  *(_BYTE *)a2 = 0;
  v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17)
    v5 = 23;
  else
    v5 = v4;
  v6 = (_QWORD *)a1[5];
  v7 = a1 + 6;
  v8 = v6;
  if (v6 != a1 + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)a1[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)a1[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 29))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 28) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 29)) : (v21 = 1), v21))
    v8 = a1 + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)a1[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)a1[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)a1[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 29) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 28) > v22
    || *((unsigned __int8 *)v23 + 29) <= v22)
  {
    v23 = a1 + 6;
  }
  if (v8 != v7 && a1[7])
  {
    if (v23 == v7 || (v34 = a1[4]) == 0 || (v35 = a3 - (float)v5, v35 > 1.0) || v35 < 0.0)
    {
      if (v6 != v7)
      {
        v41 = 0;
        v42 = v6;
        do
        {
          v43 = (_QWORD *)v42[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (_QWORD *)v42[2];
              v13 = *v44 == (_QWORD)v42;
              v42 = v44;
            }
            while (!v13);
          }
          ++v41;
          v42 = v44;
        }
        while (v44 != v7);
        do
        {
          v45 = v41 >> 1;
          v46 = v6;
          if (v41 != 1)
          {
            v48 = v41 >> 1;
            v49 = v6;
            do
            {
              v50 = (_QWORD *)v49[1];
              if (v50)
              {
                do
                {
                  v46 = v50;
                  v50 = (_QWORD *)*v50;
                }
                while (v50);
              }
              else
              {
                do
                {
                  v46 = (_QWORD *)v49[2];
                  v13 = *v46 == (_QWORD)v49;
                  v49 = v46;
                }
                while (!v13);
              }
              v49 = v46;
              v19 = v48-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v46 + 29))
          {
            v47 = (_QWORD *)v46[1];
            if (v47)
            {
              do
              {
                v6 = v47;
                v47 = (_QWORD *)*v47;
              }
              while (v47);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v46[2];
                v13 = *v6 == (_QWORD)v46;
                v46 = v6;
              }
              while (!v13);
            }
            v45 = v41 + ~v45;
          }
          v41 = v45;
        }
        while (v45);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 28) ? (v51 = v5 >= *((unsigned __int8 *)v6 + 29)) : (v51 = 1), v51))
      {
        v6 = v7;
      }
      *(_BYTE *)a2 = 1;
      v52 = v6[4];
      *(_DWORD *)(a2 + 12) = *((_DWORD *)v6 + 10);
      *(_QWORD *)(a2 + 4) = v52;
    }
    else
    {
      v36 = v6;
      if (v6 != v7)
      {
        v37 = 0;
        v38 = v6;
        do
        {
          v39 = (_QWORD *)v38[1];
          if (v39)
          {
            do
            {
              v40 = v39;
              v39 = (_QWORD *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              v40 = (_QWORD *)v38[2];
              v13 = *v40 == (_QWORD)v38;
              v38 = v40;
            }
            while (!v13);
          }
          ++v37;
          v38 = v40;
        }
        while (v40 != v7);
        v36 = v6;
        do
        {
          v53 = v37 >> 1;
          v54 = v36;
          if (v37 != 1)
          {
            v56 = v37 >> 1;
            v57 = v36;
            do
            {
              v58 = (_QWORD *)v57[1];
              if (v58)
              {
                do
                {
                  v54 = v58;
                  v58 = (_QWORD *)*v58;
                }
                while (v58);
              }
              else
              {
                do
                {
                  v54 = (_QWORD *)v57[2];
                  v13 = *v54 == (_QWORD)v57;
                  v57 = v54;
                }
                while (!v13);
              }
              v57 = v54;
              v19 = v56-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v54 + 29))
          {
            v55 = (_QWORD *)v54[1];
            if (v55)
            {
              do
              {
                v36 = v55;
                v55 = (_QWORD *)*v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                v36 = (_QWORD *)v54[2];
                v13 = *v36 == (_QWORD)v54;
                v54 = v36;
              }
              while (!v13);
            }
            v53 = v37 + ~v53;
          }
          v37 = v53;
        }
        while (v53);
      }
      if (v36 == v7
        || (v5 >= *((unsigned __int8 *)v36 + 28) ? (v59 = v5 >= *((unsigned __int8 *)v36 + 29)) : (v59 = 1), v59))
      {
        v36 = v7;
      }
      v75 = v36[4];
      v76 = *((_DWORD *)v36 + 10);
      if (v6 != v7)
      {
        v60 = 0;
        v61 = v6;
        do
        {
          v62 = (_QWORD *)v61[1];
          if (v62)
          {
            do
            {
              v63 = v62;
              v62 = (_QWORD *)*v62;
            }
            while (v62);
          }
          else
          {
            do
            {
              v63 = (_QWORD *)v61[2];
              v13 = *v63 == (_QWORD)v61;
              v61 = v63;
            }
            while (!v13);
          }
          ++v60;
          v61 = v63;
        }
        while (v63 != v7);
        do
        {
          v64 = v60 >> 1;
          v65 = v6;
          if (v60 != 1)
          {
            v67 = v60 >> 1;
            v68 = v6;
            do
            {
              v69 = (_QWORD *)v68[1];
              if (v69)
              {
                do
                {
                  v65 = v69;
                  v69 = (_QWORD *)*v69;
                }
                while (v69);
              }
              else
              {
                do
                {
                  v65 = (_QWORD *)v68[2];
                  v13 = *v65 == (_QWORD)v68;
                  v68 = v65;
                }
                while (!v13);
              }
              v68 = v65;
              v19 = v67-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v65 + 29) <= v22)
          {
            v66 = (_QWORD *)v65[1];
            if (v66)
            {
              do
              {
                v6 = v66;
                v66 = (_QWORD *)*v66;
              }
              while (v66);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v65[2];
                v13 = *v6 == (_QWORD)v65;
                v65 = v6;
              }
              while (!v13);
            }
            v64 = v60 + ~v64;
          }
          v60 = v64;
        }
        while (v64);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 28) > v22
        || *((unsigned __int8 *)v6 + 29) <= v22)
      {
        v6 = v7;
      }
      v73 = v6[4];
      v74 = *((_DWORD *)v6 + 10);
      v77 = v35;
      v70 = (*(float (**)(uint64_t, float *, uint64_t *, uint64_t *))(*(_QWORD *)v34 + 48))(v34, &v77, &v75, &v73);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v70;
      *(_DWORD *)(a2 + 8) = v71;
      *(_DWORD *)(a2 + 12) = v72;
    }
  }
}

__int16 *std::__introsort<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *,false>(__int16 *result, unsigned __int16 *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned __int16 *v9;
  __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int16 *v15;
  uint64_t v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  __int16 v23;
  __int16 v24;
  unsigned int v25;
  unsigned int v26;
  __int16 v27;
  __int16 v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned __int16 v31;
  unsigned int v32;
  unsigned __int16 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int16 v36;
  unsigned int v37;
  unsigned __int16 v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned __int16 v41;
  unsigned int v42;
  unsigned __int16 v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int16 v46;
  unsigned int v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int16 v53;
  unsigned int v54;
  __int16 v55;
  __int16 v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  unsigned __int16 v62;
  unsigned int v63;
  unsigned __int16 *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int16 v67;
  unsigned __int16 v68;
  unsigned __int16 *v69;
  unsigned __int16 *v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned __int16 *v75;
  unsigned __int16 *v76;
  unsigned int v77;
  __int16 v78;
  unsigned __int16 v79;
  unsigned int v80;
  unsigned int v81;
  __int16 *v82;
  __int16 v83;
  uint64_t v84;
  unsigned __int16 v85;
  unsigned int v86;
  unsigned int v87;
  unsigned __int16 v88;
  unsigned int v89;
  unsigned __int16 *v90;
  unsigned __int16 *v91;
  __int16 *v92;
  unsigned __int16 v93;
  uint64_t v94;
  unsigned __int16 v95;
  unsigned __int16 v96;
  unsigned int v97;
  unsigned __int16 v98;
  __int16 v99;
  uint64_t *v100;
  unsigned __int16 *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int16 *v104;
  unsigned __int16 *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  uint64_t *v112;
  int64_t v113;
  BOOL v114;
  uint64_t v115;
  unsigned __int16 *v116;
  unsigned int v117;
  uint64_t v118;
  unsigned __int16 *v119;
  unsigned __int16 v120;
  unsigned __int16 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int16 v126;
  uint64_t *v127;
  unsigned __int16 *v128;
  uint64_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  unsigned __int16 v132;
  uint64_t v133;
  unint64_t v134;
  unsigned __int16 *v135;
  unsigned __int16 v136;
  unsigned __int16 v137;
  uint64_t v138;
  unsigned int v139;
  unsigned __int16 *v140;
  unsigned __int16 v141;
  unsigned __int16 *v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned __int16 *v148;

  v9 = (unsigned __int16 *)result;
LABEL_2:
  v10 = (__int16 *)(a2 - 1);
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v83 = *v11;
        if (*(_DWORD *)(**a3 + 40 * (unsigned __int16)*v10 + 32) < *(_DWORD *)(**a3 + 40 * *v11 + 32))
        {
          *v11 = *v10;
          goto LABEL_164;
        }
        return result;
      case 3:
        v84 = **a3;
        v85 = v11[1];
        v83 = *v11;
        v86 = *(_DWORD *)(v84 + 40 * v85 + 32);
        v87 = *(_DWORD *)(v84 + 40 * *v11 + 32);
        v88 = *v10;
        v89 = *(_DWORD *)(v84 + 40 * (unsigned __int16)*v10 + 32);
        if (v86 >= v87)
        {
          if (v89 < v86)
          {
            v11[1] = v88;
            *v10 = v85;
            v141 = *v11;
            if (*(_DWORD *)(v84 + 40 * v11[1] + 32) < *(_DWORD *)(v84 + 40 * *v11 + 32))
            {
              *v11 = v11[1];
              v11[1] = v141;
            }
          }
        }
        else
        {
          if (v89 >= v86)
          {
            *v11 = v85;
            v11[1] = v83;
            if (*(_DWORD *)(v84 + 40 * (unsigned __int16)*v10 + 32) >= v87)
              return result;
            v11[1] = *v10;
          }
          else
          {
            *v11 = v88;
          }
LABEL_164:
          *v10 = v83;
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>((__int16 *)v11, v11 + 1, v11 + 2, a2 - 1, **a3);
      case 5:
        v90 = v11 + 1;
        v91 = v11 + 2;
        v92 = (__int16 *)(v11 + 3);
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>((__int16 *)v11, v11 + 1, v11 + 2, v11 + 3, **a3);
        v93 = v11[3];
        v94 = **a3;
        if (*(_DWORD *)(v94 + 40 * (unsigned __int16)*v10 + 32) < *(_DWORD *)(v94 + 40 * v93 + 32))
        {
          *v92 = *v10;
          *v10 = v93;
          v95 = *v92;
          v96 = *v91;
          v97 = *(_DWORD *)(v94 + 40 * (unsigned __int16)*v92 + 32);
          if (v97 < *(_DWORD *)(v94 + 40 * *v91 + 32))
          {
            *v91 = v95;
            *v92 = v96;
            v98 = *v90;
            if (v97 < *(_DWORD *)(v94 + 40 * *v90 + 32))
            {
              v11[1] = v95;
              v11[2] = v98;
              v99 = *v11;
              if (v97 < *(_DWORD *)(v94 + 40 * *v11 + 32))
              {
                *v11 = v95;
                v11[1] = v99;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 47)
        {
          v100 = *a3;
          if ((a5 & 1) != 0)
          {
            if (v11 != a2)
            {
              v101 = v11 + 1;
              if (v11 + 1 != a2)
              {
                v102 = *v100;
                v103 = 2;
                v104 = v11;
                do
                {
                  v106 = v104[1];
                  v107 = *v104;
                  v104 = v101;
                  v108 = *(_DWORD *)(v102 + 40 * v106 + 32);
                  if (v108 < *(_DWORD *)(v102 + 40 * v107 + 32))
                  {
                    v109 = v103;
                    do
                    {
                      *(unsigned __int16 *)((char *)v11 + v109) = v107;
                      v110 = v109 - 2;
                      if (v109 == 2)
                      {
                        v105 = v11;
                        goto LABEL_111;
                      }
                      LOWORD(v107) = *(unsigned __int16 *)((char *)v11 + v109 - 4);
                      v109 -= 2;
                    }
                    while (v108 < *(_DWORD *)(v102 + 40 * (unsigned __int16)v107 + 32));
                    v105 = (unsigned __int16 *)((char *)v11 + v110);
LABEL_111:
                    *v105 = v106;
                  }
                  v101 = v104 + 1;
                  v103 += 2;
                }
                while (v104 + 1 != a2);
              }
            }
          }
          else if (v11 != a2)
          {
            v142 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v143 = *v100;
              do
              {
                v144 = v9[1];
                v145 = *v9;
                v9 = v142;
                v146 = v145;
                v147 = *(_DWORD *)(v143 + 40 * v144 + 32);
                if (v147 < *(_DWORD *)(v143 + 40 * v146 + 32))
                {
                  v148 = v9;
                  do
                  {
                    *v148 = v146;
                    LOWORD(v146) = *(v148 - 2);
                    --v148;
                  }
                  while (v147 < *(_DWORD *)(v143 + 40 * (unsigned __int16)v146 + 32));
                  *v148 = v144;
                }
                v142 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v111 = (unint64_t)(v13 - 2) >> 1;
            v112 = *a3;
            v113 = v111;
            do
            {
              if (v111 >= v113)
              {
                v115 = (2 * v113) | 1;
                v116 = &v11[v115];
                v117 = *v116;
                if (2 * v113 + 2 >= v13)
                {
                  v118 = *v112;
                }
                else
                {
                  v118 = *v112;
                  if (*(_DWORD *)(*v112 + 40 * *v116 + 32) < *(_DWORD *)(*v112 + 40 * v116[1] + 32))
                  {
                    v117 = v116[1];
                    ++v116;
                    v115 = 2 * v113 + 2;
                  }
                }
                v119 = &v11[v113];
                v120 = *v119;
                result = (__int16 *)*(unsigned int *)(v118 + 40 * *v119 + 32);
                if (*(_DWORD *)(v118 + 40 * v117 + 32) >= result)
                {
                  do
                  {
                    v121 = v116;
                    *v119 = v117;
                    if (v111 < v115)
                      break;
                    v122 = (2 * v115) | 1;
                    v116 = &v11[v122];
                    v123 = 2 * v115 + 2;
                    v117 = *v116;
                    if (v123 < v13 && *(_DWORD *)(v118 + 40 * *v116 + 32) < *(_DWORD *)(v118 + 40 * v116[1] + 32))
                    {
                      v117 = v116[1];
                      ++v116;
                      v122 = v123;
                    }
                    v119 = v121;
                    v115 = v122;
                  }
                  while (*(_DWORD *)(v118 + 40 * v117 + 32) >= result);
                  *v121 = v120;
                  v112 = *a3;
                }
              }
              v114 = v113-- <= 0;
            }
            while (!v114);
            v124 = (unint64_t)v12 >> 1;
            do
            {
              v125 = 0;
              v126 = *v11;
              v127 = *a3;
              v128 = v11;
              do
              {
                v129 = 2 * v125 + 2;
                v130 = (unsigned __int16 *)((char *)v128 + v129);
                v131 = (2 * v125) | 1;
                v132 = *(unsigned __int16 *)((char *)v128 + v129);
                if (v129 < v124)
                {
                  result = (__int16 *)(v130 + 1);
                  if (*(_DWORD *)(*v127 + 40 * *(unsigned __int16 *)((char *)v128 + v129) + 32) < *(_DWORD *)(*v127 + 40 * v130[1] + 32))
                  {
                    v132 = v130[1];
                    ++v130;
                    v131 = v129;
                  }
                }
                *v128 = v132;
                v128 = v130;
                v125 = v131;
              }
              while (v131 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
              if (v130 == --a2)
              {
                *v130 = v126;
              }
              else
              {
                *v130 = *a2;
                *a2 = v126;
                v133 = (char *)v130 - (char *)v11 + 2;
                if (v133 >= 3)
                {
                  v134 = (((unint64_t)v133 >> 1) - 2) >> 1;
                  v135 = &v11[v134];
                  v136 = *v135;
                  v137 = *v130;
                  v138 = **a3;
                  v139 = *(_DWORD *)(v138 + 40 * *v130 + 32);
                  if (*(_DWORD *)(v138 + 40 * *v135 + 32) < v139)
                  {
                    do
                    {
                      v140 = v135;
                      *v130 = v136;
                      if (!v134)
                        break;
                      v134 = (v134 - 1) >> 1;
                      v135 = &v11[v134];
                      v136 = *v135;
                      result = (__int16 *)*(unsigned int *)(v138 + 40 * *v135 + 32);
                      v130 = v140;
                    }
                    while (result < v139);
                    *v140 = v137;
                  }
                }
              }
              v114 = v124-- <= 2;
            }
            while (!v114);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = (__int16 *)&v11[(unint64_t)v13 >> 1];
        v16 = **a3;
        v17 = *v10;
        v18 = *(_DWORD *)(v16 + 40 * (unsigned __int16)*v10 + 32);
        if ((unint64_t)v12 >= 0x101)
        {
          v19 = *v15;
          v20 = *v11;
          v21 = *(_DWORD *)(v16 + 40 * (unsigned __int16)*v15 + 32);
          v22 = *(_DWORD *)(v16 + 40 * *v11 + 32);
          if (v21 >= v22)
          {
            if (v18 < v21)
            {
              *v15 = v17;
              *v10 = v19;
              v27 = *v11;
              if (*(_DWORD *)(v16 + 40 * (unsigned __int16)*v15 + 32) < *(_DWORD *)(v16 + 40 * *v11 + 32))
              {
                *v11 = *v15;
                *v15 = v27;
              }
            }
          }
          else
          {
            if (v18 < v21)
            {
              *v11 = v17;
              goto LABEL_21;
            }
            *v11 = v19;
            *v15 = v20;
            if (*(_DWORD *)(v16 + 40 * (unsigned __int16)*v10 + 32) < v22)
            {
              *v15 = *v10;
LABEL_21:
              *v10 = v20;
            }
          }
          v29 = &v11[v14];
          v32 = *(v29 - 1);
          v30 = v29 - 1;
          v31 = v32;
          v33 = v11[1];
          v34 = *(_DWORD *)(v16 + 40 * v32 + 32);
          v35 = *(_DWORD *)(v16 + 40 * v33 + 32);
          v36 = *(a2 - 2);
          v37 = *(_DWORD *)(v16 + 40 * v36 + 32);
          if (v34 >= v35)
          {
            if (v37 < v34)
            {
              *v30 = v36;
              *(a2 - 2) = v31;
              v38 = v11[1];
              if (*(_DWORD *)(v16 + 40 * *v30 + 32) < *(_DWORD *)(v16 + 40 * v38 + 32))
              {
                v11[1] = *v30;
                *v30 = v38;
              }
            }
          }
          else
          {
            if (v37 < v34)
            {
              v11[1] = v36;
              goto LABEL_33;
            }
            v11[1] = v31;
            *v30 = v33;
            if (*(_DWORD *)(v16 + 40 * *(a2 - 2) + 32) < v35)
            {
              *v30 = *(a2 - 2);
LABEL_33:
              *(a2 - 2) = v33;
            }
          }
          v39 = &v11[v14];
          v42 = v39[1];
          v40 = v39 + 1;
          v41 = v42;
          v43 = v11[2];
          v44 = *(_DWORD *)(v16 + 40 * v42 + 32);
          v45 = *(_DWORD *)(v16 + 40 * v43 + 32);
          v46 = *(a2 - 3);
          v47 = *(_DWORD *)(v16 + 40 * v46 + 32);
          if (v44 >= v45)
          {
            if (v47 < v44)
            {
              *v40 = v46;
              *(a2 - 3) = v41;
              v48 = v11[2];
              if (*(_DWORD *)(v16 + 40 * *v40 + 32) < *(_DWORD *)(v16 + 40 * v48 + 32))
              {
                v11[2] = *v40;
                *v40 = v48;
              }
            }
          }
          else
          {
            if (v47 < v44)
            {
              v11[2] = v46;
              goto LABEL_42;
            }
            v11[2] = v41;
            *v40 = v43;
            if (*(_DWORD *)(v16 + 40 * *(a2 - 3) + 32) < v45)
            {
              *v40 = *(a2 - 3);
LABEL_42:
              *(a2 - 3) = v43;
            }
          }
          v49 = *v15;
          v50 = *v30;
          v51 = *(_DWORD *)(v16 + 40 * (unsigned __int16)*v15 + 32);
          v52 = *(_DWORD *)(v16 + 40 * *v30 + 32);
          v53 = *v40;
          v54 = *(_DWORD *)(v16 + 40 * *v40 + 32);
          if (v51 >= v52)
          {
            if (v54 >= v51)
              goto LABEL_50;
            *v15 = v53;
            *v40 = v49;
            v40 = (unsigned __int16 *)v15;
            v49 = v50;
            if (v54 >= v52)
            {
              v49 = v53;
              goto LABEL_50;
            }
          }
          else if (v54 >= v51)
          {
            *v30 = v49;
            *v15 = v50;
            v30 = (unsigned __int16 *)v15;
            v49 = v53;
            if (v54 >= v52)
            {
              v49 = v50;
LABEL_50:
              v55 = *v11;
              *v11 = v49;
              *v15 = v55;
              goto LABEL_51;
            }
          }
          *v30 = v53;
          *v40 = v50;
          goto LABEL_50;
        }
        v23 = *v11;
        v24 = *v15;
        v25 = *(_DWORD *)(v16 + 40 * *v11 + 32);
        v26 = *(_DWORD *)(v16 + 40 * (unsigned __int16)*v15 + 32);
        if (v25 >= v26)
        {
          if (v18 < v25)
          {
            *v11 = v17;
            *v10 = v23;
            v28 = *v15;
            if (*(_DWORD *)(v16 + 40 * *v11 + 32) < *(_DWORD *)(v16 + 40 * (unsigned __int16)*v15 + 32))
            {
              *v15 = *v11;
              *v11 = v28;
            }
          }
        }
        else
        {
          if (v18 >= v25)
          {
            *v15 = v23;
            *v11 = v24;
            if (*(_DWORD *)(v16 + 40 * (unsigned __int16)*v10 + 32) >= v26)
              goto LABEL_51;
            *v11 = *v10;
          }
          else
          {
            *v15 = v17;
          }
          *v10 = v24;
        }
LABEL_51:
        --a4;
        v56 = *v11;
        if ((a5 & 1) == 0)
        {
          v57 = *(_DWORD *)(v16 + 40 * *v11 + 32);
          if (*(_DWORD *)(v16 + 40 * *(v11 - 1) + 32) >= v57)
          {
            if (v57 >= *(_DWORD *)(v16 + 40 * (unsigned __int16)*v10 + 32))
            {
              v75 = v11 + 1;
              do
              {
                v11 = v75;
                if (v75 >= a2)
                  break;
                ++v75;
              }
              while (v57 >= *(_DWORD *)(v16 + 40 * *v11 + 32));
            }
            else
            {
              do
              {
                v74 = v11[1];
                ++v11;
              }
              while (v57 >= *(_DWORD *)(v16 + 40 * v74 + 32));
            }
            v76 = a2;
            if (v11 < a2)
            {
              v76 = a2;
              do
                v77 = *--v76;
              while (v57 < *(_DWORD *)(v16 + 40 * v77 + 32));
            }
            if (v11 < v76)
            {
              v78 = *v11;
              v79 = *v76;
              do
              {
                *v11 = v79;
                *v76 = v78;
                do
                {
                  v80 = v11[1];
                  ++v11;
                  v78 = v80;
                }
                while (v57 >= *(_DWORD *)(v16 + 40 * v80 + 32));
                do
                {
                  v81 = *--v76;
                  v79 = v81;
                }
                while (v57 < *(_DWORD *)(v16 + 40 * v81 + 32));
              }
              while (v11 < v76);
            }
            v82 = (__int16 *)(v11 - 1);
            if (v11 - 1 != v9)
              *v9 = *v82;
            a5 = 0;
            *v82 = v56;
            continue;
          }
        }
        v58 = **a3;
        v59 = *(_DWORD *)(v58 + 40 * *v11 + 32);
        v60 = v11;
        do
        {
          v61 = v60;
          v63 = v60[1];
          ++v60;
          v62 = v63;
        }
        while (*(_DWORD *)(v58 + 40 * v63 + 32) < v59);
        v64 = a2;
        if (v61 == v11)
        {
          v64 = a2;
          do
          {
            if (v60 >= v64)
              break;
            v66 = *--v64;
          }
          while (*(_DWORD *)(v58 + 40 * v66 + 32) >= v59);
        }
        else
        {
          do
            v65 = *--v64;
          while (*(_DWORD *)(v58 + 40 * v65 + 32) >= v59);
        }
        if (v60 < v64)
        {
          v67 = *v64;
          v68 = v62;
          v69 = v60;
          v70 = v64;
          do
          {
            *v69 = v67;
            *v70 = v68;
            do
            {
              v61 = v69;
              v71 = v69[1];
              ++v69;
              v68 = v71;
            }
            while (*(_DWORD *)(v58 + 40 * v71 + 32) < v59);
            do
            {
              v72 = *--v70;
              v67 = v72;
            }
            while (*(_DWORD *)(v58 + 40 * v72 + 32) >= v59);
          }
          while (v69 < v70);
        }
        if (v61 != v11)
          *v11 = *v61;
        *v61 = v56;
        if (v60 < v64)
        {
LABEL_72:
          result = (__int16 *)std::__introsort<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *,false>(v9, v61, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v61 + 1;
          continue;
        }
        v73 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>(v11, v61, a3);
        v11 = v61 + 1;
        result = (__int16 *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>(v61 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v73)
            continue;
          goto LABEL_72;
        }
        a2 = v61;
        if (!v73)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 224);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 624))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 232);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 648))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 624))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 648))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 648))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::ZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::getProperty@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  float v75;

  *(_BYTE *)a2 = 0;
  v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17)
    v5 = 23;
  else
    v5 = v4;
  v6 = (_QWORD *)result[5];
  v7 = result + 6;
  v8 = v6;
  if (v6 != result + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)result[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)result[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 29))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 28) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 29)) : (v21 = 1), v21))
    v8 = result + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)result[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)result[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)result[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 29) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 28) > v22
    || *((unsigned __int8 *)v23 + 29) <= v22)
  {
    v23 = result + 6;
  }
  if (v8 != v7 && result[7])
  {
    if (v23 == v7 || (result = (_QWORD *)result[4]) == 0 || (v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        v40 = 0;
        v41 = v6;
        do
        {
          v42 = (_QWORD *)v41[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (_QWORD *)v41[2];
              v13 = *v43 == (_QWORD)v41;
              v41 = v43;
            }
            while (!v13);
          }
          ++v40;
          v41 = v43;
        }
        while (v43 != v7);
        do
        {
          v44 = v40 >> 1;
          v45 = v6;
          if (v40 != 1)
          {
            v47 = v40 >> 1;
            v48 = v6;
            do
            {
              v49 = (_QWORD *)v48[1];
              if (v49)
              {
                do
                {
                  v45 = v49;
                  v49 = (_QWORD *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v48[2];
                  v13 = *v45 == (_QWORD)v48;
                  v48 = v45;
                }
                while (!v13);
              }
              v48 = v45;
              v19 = v47-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v45 + 29))
          {
            v46 = (_QWORD *)v45[1];
            if (v46)
            {
              do
              {
                v6 = v46;
                v46 = (_QWORD *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v45[2];
                v13 = *v6 == (_QWORD)v45;
                v45 = v6;
              }
              while (!v13);
            }
            v44 = v40 + ~v44;
          }
          v40 = v44;
        }
        while (v44);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 28) ? (v50 = v5 >= *((unsigned __int8 *)v6 + 29)) : (v50 = 1), v50))
      {
        v6 = v7;
      }
      *(_BYTE *)a2 = 1;
      v51 = v6[4];
      *(_DWORD *)(a2 + 12) = *((_DWORD *)v6 + 10);
      *(_QWORD *)(a2 + 4) = v51;
    }
    else
    {
      v35 = v6;
      if (v6 != v7)
      {
        v36 = 0;
        v37 = v6;
        do
        {
          v38 = (_QWORD *)v37[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD *)v37[2];
              v13 = *v39 == (_QWORD)v37;
              v37 = v39;
            }
            while (!v13);
          }
          ++v36;
          v37 = v39;
        }
        while (v39 != v7);
        v35 = v6;
        do
        {
          v52 = v36 >> 1;
          v53 = v35;
          if (v36 != 1)
          {
            v55 = v36 >> 1;
            v56 = v35;
            do
            {
              v57 = (_QWORD *)v56[1];
              if (v57)
              {
                do
                {
                  v53 = v57;
                  v57 = (_QWORD *)*v57;
                }
                while (v57);
              }
              else
              {
                do
                {
                  v53 = (_QWORD *)v56[2];
                  v13 = *v53 == (_QWORD)v56;
                  v56 = v53;
                }
                while (!v13);
              }
              v56 = v53;
              v19 = v55-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v53 + 29))
          {
            v54 = (_QWORD *)v53[1];
            if (v54)
            {
              do
              {
                v35 = v54;
                v54 = (_QWORD *)*v54;
              }
              while (v54);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v53[2];
                v13 = *v35 == (_QWORD)v53;
                v53 = v35;
              }
              while (!v13);
            }
            v52 = v36 + ~v52;
          }
          v36 = v52;
        }
        while (v52);
      }
      if (v35 == v7
        || (v5 >= *((unsigned __int8 *)v35 + 28) ? (v58 = v5 >= *((unsigned __int8 *)v35 + 29)) : (v58 = 1), v58))
      {
        v35 = v7;
      }
      v73 = v35[4];
      v74 = *((_DWORD *)v35 + 10);
      if (v6 != v7)
      {
        v59 = 0;
        v60 = v6;
        do
        {
          v61 = (_QWORD *)v60[1];
          if (v61)
          {
            do
            {
              v62 = v61;
              v61 = (_QWORD *)*v61;
            }
            while (v61);
          }
          else
          {
            do
            {
              v62 = (_QWORD *)v60[2];
              v13 = *v62 == (_QWORD)v60;
              v60 = v62;
            }
            while (!v13);
          }
          ++v59;
          v60 = v62;
        }
        while (v62 != v7);
        do
        {
          v63 = v59 >> 1;
          v64 = v6;
          if (v59 != 1)
          {
            v66 = v59 >> 1;
            v67 = v6;
            do
            {
              v68 = (_QWORD *)v67[1];
              if (v68)
              {
                do
                {
                  v64 = v68;
                  v68 = (_QWORD *)*v68;
                }
                while (v68);
              }
              else
              {
                do
                {
                  v64 = (_QWORD *)v67[2];
                  v13 = *v64 == (_QWORD)v67;
                  v67 = v64;
                }
                while (!v13);
              }
              v67 = v64;
              v19 = v66-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v64 + 29) <= v22)
          {
            v65 = (_QWORD *)v64[1];
            if (v65)
            {
              do
              {
                v6 = v65;
                v65 = (_QWORD *)*v65;
              }
              while (v65);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v64[2];
                v13 = *v6 == (_QWORD)v64;
                v64 = v6;
              }
              while (!v13);
            }
            v63 = v59 + ~v63;
          }
          v59 = v63;
        }
        while (v63);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 28) > v22
        || *((unsigned __int8 *)v6 + 29) <= v22)
      {
        v6 = v7;
      }
      v71 = v6[4];
      v72 = *((_DWORD *)v6 + 10);
      v75 = v34;
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, float *, uint64_t *, uint64_t *))(*result + 48))(&v69, result, &v75, &v73, &v71);
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 4) = v69;
      *(_DWORD *)(a2 + 12) = v70;
    }
  }
  return result;
}

uint64_t gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>)
{
  float32x4_t v6;

  a5.i64[0] = *(_QWORD *)result;
  a5.i32[2] = *(_DWORD *)(result + 8);
  a6.i64[0] = *(_QWORD *)a2;
  a6.i32[2] = *(_DWORD *)(a2 + 8);
  v6 = vmlaq_n_f32(a5, vsubq_f32(a6, a5), a4);
  *(_DWORD *)(a3 + 8) = v6.i32[2];
  *(_QWORD *)a3 = v6.i64[0];
  return result;
}

uint64_t std::__function::__func<geo::Color<float,3,(geo::ColorSpace)0> (*)(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&),std::allocator<geo::Color<float,3,(geo::ColorSpace)0> (*)(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&)>,geo::Color<float,3,(geo::ColorSpace)0> ()(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&)>::operator()(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(a1 + 8))(a3, a4, *a2);
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v10);
  if (HIDWORD(v10) >= HIDWORD(v11))
    v8 = HIDWORD(v11);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::zIndex@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 120);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::NonZoomablePropertyStore<unsigned int>::getProperty@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(result + 8))
  {
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(result + 12);
    *(_BYTE *)a2 = 1;
  }
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::visibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 136);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::coldAdjustment@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 264);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 768))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::wetAdjustment@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 272);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 792))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::hotAdjustment@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 256);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 744))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::dryAdjustment@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 280);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 816))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::coldAdjustment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 768))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 768))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 768))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 768))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::wetAdjustment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 792))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 792))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 792))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 792))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::hotAdjustment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 744))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 744))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 744))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 744))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::dryAdjustment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 816))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 816))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 816))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 816))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::BasicMaterial<ggl::Texture2D>::maxVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE3(v10);
  if (BYTE3(v10) <= BYTE1(v10))
    v8 = BYTE1(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

_QWORD *gms::ZoomablePropertyStore<BOOL>::getProperty@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>, float a3@<S0>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char v68;
  char v69;
  float v70;

  *a2 = 0;
  v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17)
    v5 = 23;
  else
    v5 = v4;
  v6 = (_QWORD *)result[5];
  v7 = result + 6;
  v8 = v6;
  if (v6 != result + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)result[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)result[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 26))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 25) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 26)) : (v21 = 1), v21))
    v8 = result + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)result[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)result[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)result[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 26) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 25) > v22
    || *((unsigned __int8 *)v23 + 26) <= v22)
  {
    v23 = result + 6;
  }
  if (v8 != v7 && result[7])
  {
    if (v23 == v7 || (result = (_QWORD *)result[4]) == 0 || (v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        v40 = 0;
        v41 = v6;
        do
        {
          v42 = (_QWORD *)v41[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (_QWORD *)v41[2];
              v13 = *v43 == (_QWORD)v41;
              v41 = v43;
            }
            while (!v13);
          }
          ++v40;
          v41 = v43;
        }
        while (v43 != v7);
        do
        {
          v44 = v40 >> 1;
          v45 = v6;
          if (v40 != 1)
          {
            v47 = v40 >> 1;
            v48 = v6;
            do
            {
              v49 = (_QWORD *)v48[1];
              if (v49)
              {
                do
                {
                  v45 = v49;
                  v49 = (_QWORD *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v48[2];
                  v13 = *v45 == (_QWORD)v48;
                  v48 = v45;
                }
                while (!v13);
              }
              v48 = v45;
              v19 = v47-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v45 + 26))
          {
            v46 = (_QWORD *)v45[1];
            if (v46)
            {
              do
              {
                v6 = v46;
                v46 = (_QWORD *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v45[2];
                v13 = *v6 == (_QWORD)v45;
                v45 = v6;
              }
              while (!v13);
            }
            v44 = v40 + ~v44;
          }
          v40 = v44;
        }
        while (v44);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 25) ? (v50 = v5 >= *((unsigned __int8 *)v6 + 26)) : (v50 = 1), v50))
      {
        v6 = v7;
      }
      *a2 = 1;
      a2[1] = *((_BYTE *)v6 + 27);
    }
    else
    {
      v35 = v6;
      if (v6 != v7)
      {
        v36 = 0;
        v37 = v6;
        do
        {
          v38 = (_QWORD *)v37[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD *)v37[2];
              v13 = *v39 == (_QWORD)v37;
              v37 = v39;
            }
            while (!v13);
          }
          ++v36;
          v37 = v39;
        }
        while (v39 != v7);
        v35 = v6;
        do
        {
          v51 = v36 >> 1;
          v52 = v35;
          if (v36 != 1)
          {
            v54 = v36 >> 1;
            v55 = v35;
            do
            {
              v56 = (_QWORD *)v55[1];
              if (v56)
              {
                do
                {
                  v52 = v56;
                  v56 = (_QWORD *)*v56;
                }
                while (v56);
              }
              else
              {
                do
                {
                  v52 = (_QWORD *)v55[2];
                  v13 = *v52 == (_QWORD)v55;
                  v55 = v52;
                }
                while (!v13);
              }
              v55 = v52;
              v19 = v54-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v52 + 26))
          {
            v53 = (_QWORD *)v52[1];
            if (v53)
            {
              do
              {
                v35 = v53;
                v53 = (_QWORD *)*v53;
              }
              while (v53);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v52[2];
                v13 = *v35 == (_QWORD)v52;
                v52 = v35;
              }
              while (!v13);
            }
            v51 = v36 + ~v51;
          }
          v36 = v51;
        }
        while (v51);
      }
      if (v35 == v7
        || (v5 >= *((unsigned __int8 *)v35 + 25) ? (v57 = v5 >= *((unsigned __int8 *)v35 + 26)) : (v57 = 1), v57))
      {
        v35 = v7;
      }
      v69 = *((_BYTE *)v35 + 27);
      if (v6 != v7)
      {
        v58 = 0;
        v59 = v6;
        do
        {
          v60 = (_QWORD *)v59[1];
          if (v60)
          {
            do
            {
              v61 = v60;
              v60 = (_QWORD *)*v60;
            }
            while (v60);
          }
          else
          {
            do
            {
              v61 = (_QWORD *)v59[2];
              v13 = *v61 == (_QWORD)v59;
              v59 = v61;
            }
            while (!v13);
          }
          ++v58;
          v59 = v61;
        }
        while (v61 != v7);
        do
        {
          v62 = v58 >> 1;
          v63 = v6;
          if (v58 != 1)
          {
            v65 = v58 >> 1;
            v66 = v6;
            do
            {
              v67 = (_QWORD *)v66[1];
              if (v67)
              {
                do
                {
                  v63 = v67;
                  v67 = (_QWORD *)*v67;
                }
                while (v67);
              }
              else
              {
                do
                {
                  v63 = (_QWORD *)v66[2];
                  v13 = *v63 == (_QWORD)v66;
                  v66 = v63;
                }
                while (!v13);
              }
              v66 = v63;
              v19 = v65-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v63 + 26) <= v22)
          {
            v64 = (_QWORD *)v63[1];
            if (v64)
            {
              do
              {
                v6 = v64;
                v64 = (_QWORD *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v63[2];
                v13 = *v6 == (_QWORD)v63;
                v63 = v6;
              }
              while (!v13);
            }
            v62 = v58 + ~v62;
          }
          v58 = v62;
        }
        while (v62);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 25) > v22
        || *((unsigned __int8 *)v6 + 26) <= v22)
      {
        v6 = v7;
      }
      v68 = *((_BYTE *)v6 + 27);
      v70 = v34;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, float *, char *, char *))(*result + 48))(result, &v70, &v69, &v68);
      *a2 = 1;
      a2[1] = (_BYTE)result;
    }
  }
  return result;
}

uint64_t gms::NonZoomablePropertyStore<BOOL>::getProperty@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  if (*(_BYTE *)(result + 8))
  {
    a2[1] = *(_BYTE *)(result + 9);
    *a2 = 1;
  }
  return result;
}

void gms::Material<ggl::Texture2D>::coldAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::wetAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::hotAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::dryAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 160);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 624))(result);
  *a2 = 0;
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 168);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 648))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::minZIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v6 + 216))(&v11, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    LOBYTE(v11) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 216))(&v10, v3);
      if ((_BYTE)v11)
        goto LABEL_4;
LABEL_10:
      *(_BYTE *)a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = HIDWORD(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!(_BYTE)v11)
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = HIDWORD(v11);
LABEL_13:
    *(_DWORD *)(a2 + 4) = v9;
    *(_BYTE *)a2 = 1;
    return result;
  }
  v8 = HIDWORD(v10);
  if (HIDWORD(v10) >= HIDWORD(v11))
    v8 = HIDWORD(v11);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v8;
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::zIndex@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 104);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 624))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4;
  float v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  float32x4_t v11;
  unsigned __int32 v12;
  float v13;
  char v14[4];
  unint64_t v15;
  unsigned __int32 v16;
  char v17[4];
  unint64_t v18;
  unsigned __int32 v19;

  v4 = a3.f32[0];
  v7 = **(float **)(a1 + 48);
  if (v7 <= 0.00000011921)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  if (v7 >= 1.0)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float32_t))(*(_QWORD *)v8 + 648))(v8, a3.f32[0]);
  }
  v13 = v7;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    (*(void (**)(char *__return_ptr, float32_t))(*(_QWORD *)v10 + 648))(v17, a3.f32[0]);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    v14[0] = 0;
    if (v17[0])
      goto LABEL_9;
    goto LABEL_13;
  }
  v17[0] = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(char *__return_ptr, float))(*result + 648))(v14, v4);
  if (v17[0])
  {
LABEL_9:
    if (v14[0])
    {
      *(_BYTE *)a2 = 1;
      a3.i64[0] = v18;
      a3.i32[2] = v19;
      a4.i64[0] = v15;
      a4.i32[2] = v16;
      v11 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v13);
      *(_DWORD *)(a2 + 12) = v11.i32[2];
      *(_QWORD *)(a2 + 4) = v11.i64[0];
      return result;
    }
    *(_QWORD *)(a2 + 4) = v18;
    v12 = v19;
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!v14[0])
    return result;
  *(_QWORD *)(a2 + 4) = v15;
  v12 = v16;
LABEL_16:
  *(_DWORD *)(a2 + 12) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

_QWORD *gms::PlanarMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::visibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 112);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  *a2 = 0;
  return result;
}

void gms::Material<ggl::Texture2D>::albedoFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 200);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 624))(result);
  *a2 = 0;
  return result;
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v6 = **(float **)(a1 + 48);
  if (v6 <= 0.00000011921)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  if (v6 >= 1.0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v7 + 624))(v7, a3);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v9 + 624))(&v13, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_8;
LABEL_12:
    LOBYTE(v12) = 0;
    if ((_BYTE)v13)
      goto LABEL_9;
    goto LABEL_13;
  }
  LOBYTE(v13) = 0;
  result = *(_QWORD **)(a1 + 32);
  if (!result)
    goto LABEL_12;
LABEL_8:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v12, a3);
  if ((_BYTE)v13)
  {
LABEL_9:
    if ((_BYTE)v12)
    {
      v10 = *((float *)&v13 + 1) + (float)((float)(*((float *)&v12 + 1) - *((float *)&v13 + 1)) * v6);
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = v10;
      return result;
    }
    v11 = HIDWORD(v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_BYTE *)a2 = 0;
  if (!(_BYTE)v12)
    return result;
  v11 = HIDWORD(v12);
LABEL_16:
  *(_DWORD *)(a2 + 4) = v11;
  *(_BYTE *)a2 = 1;
  return result;
}

void gss::ClientStyleState<gss::PropertyID>::setSourceMapDisplayStyle(uint64_t a1, uint64_t a2)
{
  geo::read_write_lock *v3;
  const char *v4;
  gss::Allocator *v5;
  __int16 v6;
  unsigned __int16 v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  gss::Allocator *v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  geo::read_write_lock *v27;
  const char *v28;
  pthread_rwlock_t *v29;
  uint64_t v30;

  v29 = (pthread_rwlock_t *)(a1 + 16);
  v30 = a2;
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  v5 = (gss::Allocator *)gss::DisplayStyle::applyDisplayStyle((unsigned __int8 *)&v30, (_QWORD *)(a1 + 216));
  if (!*(_BYTE *)(a1 + 230) && !*(_BYTE *)(a1 + 231))
  {
    v6 = *(_WORD *)(a1 + 228);
    v7 = (4 * v6) | 2;
    v8 = gss::Allocator::instance(v5);
    v9 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, (unsigned __int16)(v7 + 2 * v6) & 0xFFFE, 1);
    v10 = v9;
    if (*(_QWORD *)(a1 + 216))
    {
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 216, v9, (_DWORD *)((char *)v9 + v7), 1);
      v12 = gss::Allocator::instance(v11);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(a1 + 216), *(unsigned __int16 *)(a1 + 228));
    }
    *(_WORD *)(a1 + 228) = v6;
    *(_QWORD *)(a1 + 216) = v10;
    *(_WORD *)(a1 + 224) = v7;
  }
  v13 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  if (v13 > 0.0)
    goto LABEL_18;
  v14 = *(unsigned __int16 *)(a1 + 242);
  if ((_DWORD)v14 != *(unsigned __int16 *)(a1 + 226))
    goto LABEL_18;
  if (!*(_WORD *)(a1 + 242))
    goto LABEL_19;
  v15 = *(_DWORD **)(a1 + 232);
  v16 = *(_DWORD **)(a1 + 216);
  if (*v15 != *v16
    || (v17 = *(unsigned __int16 *)(a1 + 224),
        v18 = *(unsigned __int16 *)(a1 + 240),
        *(unsigned __int16 *)((char *)v15 + v18) != *(unsigned __int16 *)((char *)v16 + v17)))
  {
LABEL_18:
    LOBYTE(v14) = 1;
    goto LABEL_19;
  }
  v19 = 0;
  v20 = v15 + 1;
  v21 = v16 + 1;
  v22 = (uint64_t)v15 + v18 + 2;
  v23 = (uint64_t)v16 + v17 + 2;
  while (v14 - 1 != v19)
  {
    v24 = v19++;
    if (v20[v24] != v21[v24])
      goto LABEL_25;
    if (*(unsigned __int16 *)(v22 + 2 * v24) != *(unsigned __int16 *)(v23 + 2 * v24))
    {
      v19 = v24 + 1;
      goto LABEL_25;
    }
  }
  v19 = *(unsigned __int16 *)(a1 + 242);
LABEL_25:
  LOBYTE(v14) = v19 < v14;
LABEL_19:
  atomic_store(v14, (unsigned __int8 *)(a1 + 254));
  v25 = (unsigned int *)(a1 + 248);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v27 = (geo::read_write_lock *)pthread_rwlock_unlock(v29);
  if ((_DWORD)v27)
    geo::read_write_lock::logFailure(v27, (uint64_t)"unlock", v28);
}

void sub_19F0A9A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
  geo::write_lock_guard::~write_lock_guard(&a9);
  _Unwind_Resume(a1);
}

void md::LabelSettingsStyleCache::styleQueryForAttributes(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  gss::Allocator *v5;
  BOOL v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  _BYTE v10[15];
  char v11;

  gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)v8, a3);
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(a1, a2, (gss::FeatureAttributeSet *)v8, (gss::QueryOverrides *)v10);
  if (v10[14])
    v6 = 1;
  else
    v6 = *(_QWORD *)v10 == 0;
  if (!v6)
  {
    v7 = gss::Allocator::instance(v5);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)v10, *(unsigned __int16 *)&v10[12]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, v8[0], v8[2] - v8[0]);
  }
}

void sub_19F0A9AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  if (a2)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 40))(a5, a2, a4 - a2);
  _Unwind_Resume(a1);
}

gss::FeatureAttributeSet *gss::FeatureAttributeSet::FeatureAttributeSet(gss::FeatureAttributeSet *this, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (uint64_t)v5 - *(_QWORD *)a2;
  if (v6)
  {
    if (v6 < 0)
      abort();
    v7 = v6 >> 3;
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = &v8[v7];
    do
    {
      if (v8)
        *v8 = *v4;
      ++v4;
      ++v8;
    }
    while (v4 != v5);
    *((_QWORD *)this + 1) = v8;
  }
  gss::FeatureAttributeSet::sort(this);
  return this;
}

void sub_19F0A9B84(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

void gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(uint64_t a1, unsigned int a2, int a3)
{
  pthread_rwlock_t *v6;
  geo::read_write_lock *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  unsigned int v21;
  gss::Allocator *v22;
  __int16 v23;
  unsigned __int16 v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  gss::Allocator *v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  geo::read_write_lock *v44;
  const char *v45;
  pthread_rwlock_t *v46;

  v6 = (pthread_rwlock_t *)(a1 + 16);
  v46 = (pthread_rwlock_t *)(a1 + 16);
  v7 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"write lock", v8);
  v9 = *(unsigned __int16 *)(a1 + 242);
  if (!*(_WORD *)(a1 + 242))
    goto LABEL_31;
  v10 = *(_QWORD *)(a1 + 232);
  if (*(_BYTE *)(a1 + 247))
  {
    if (v9 >= 0x1E)
    {
      v16 = *(_DWORD **)(a1 + 232);
      v17 = *(unsigned __int16 *)(a1 + 242);
      do
      {
        v18 = v17 >> 1;
        v19 = &v16[v17 >> 1];
        v21 = *v19;
        v20 = v19 + 1;
        v17 += ~(v17 >> 1);
        if (v21 < a2)
          v16 = v20;
        else
          v17 = v18;
      }
      while (v17);
      if (v16 != (_DWORD *)(v10 + 4 * v9) && *v16 == a2)
      {
        v15 = ((unint64_t)v16 - v10) >> 2;
        if ((_DWORD)v9 != (unsigned __int16)v15)
          goto LABEL_30;
      }
    }
    else
    {
      v11 = 0;
      while (1)
      {
        v12 = *(_DWORD *)(v10 + 4 * v11);
        if (v12 >= a2)
          break;
        if (v9 == ++v11)
          goto LABEL_31;
      }
      if (v12 == a2)
        LOWORD(v15) = v11;
      else
        LOWORD(v15) = *(_WORD *)(a1 + 242);
      if ((_DWORD)v9 != (unsigned __int16)v15)
        goto LABEL_30;
    }
LABEL_31:
    v22 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(a1 + 232), a2);
    *(_WORD *)v22 = a3;
    if (!*(_BYTE *)(a1 + 246) && !*(_BYTE *)(a1 + 247))
    {
      v23 = *(_WORD *)(a1 + 244);
      v24 = (4 * v23) | 2;
      v25 = gss::Allocator::instance(v22);
      v26 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 16))(v25, (unsigned __int16)(v24 + 2 * v23) & 0xFFFE, 1);
      v27 = v26;
      if (*(_QWORD *)(a1 + 232))
      {
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 232, v26, (_DWORD *)((char *)v26 + v24), 1);
        v29 = gss::Allocator::instance(v28);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(a1 + 232), *(unsigned __int16 *)(a1 + 244));
      }
      *(_WORD *)(a1 + 244) = v23;
      *(_QWORD *)(a1 + 232) = v27;
      *(_WORD *)(a1 + 240) = v24;
    }
    v30 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
    if (v30 <= 0.0)
    {
      v31 = *(unsigned __int16 *)(a1 + 242);
      if ((_DWORD)v31 == *(unsigned __int16 *)(a1 + 226))
      {
        if (!*(_WORD *)(a1 + 242))
          goto LABEL_47;
        v32 = *(_DWORD **)(a1 + 232);
        v33 = *(_DWORD **)(a1 + 216);
        if (*v32 == *v33)
        {
          v34 = *(unsigned __int16 *)(a1 + 224);
          v35 = *(unsigned __int16 *)(a1 + 240);
          if (*(unsigned __int16 *)((char *)v32 + v35) == *(unsigned __int16 *)((char *)v33 + v34))
          {
            v36 = 0;
            v37 = v32 + 1;
            v38 = v33 + 1;
            v39 = (uint64_t)v32 + v35 + 2;
            v40 = (uint64_t)v33 + v34 + 2;
            while (v31 - 1 != v36)
            {
              v41 = v36++;
              if (v37[v41] != v38[v41])
                goto LABEL_54;
              if (*(unsigned __int16 *)(v39 + 2 * v41) != *(unsigned __int16 *)(v40 + 2 * v41))
              {
                v36 = v41 + 1;
                goto LABEL_54;
              }
            }
            v36 = *(unsigned __int16 *)(a1 + 242);
LABEL_54:
            LOBYTE(v31) = v36 < v31;
            goto LABEL_47;
          }
        }
      }
    }
    LOBYTE(v31) = 1;
LABEL_47:
    atomic_store(v31, (unsigned __int8 *)(a1 + 254));
    v42 = (unsigned int *)(a1 + 248);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    v6 = v46;
    goto LABEL_50;
  }
  v13 = 4 * v9;
  v14 = *(_DWORD **)(a1 + 232);
  while (*v14 != a2)
  {
    ++v14;
    v13 -= 4;
    if (!v13)
    {
      v14 = (_DWORD *)(v10 + 4 * v9);
      break;
    }
  }
  v15 = ((unint64_t)v14 - v10) >> 2;
  if ((_DWORD)v9 == (unsigned __int16)v15)
    goto LABEL_31;
LABEL_30:
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 232) + *(unsigned __int16 *)(a1 + 240) + 2 * (unsigned __int16)v15) != a3)
    goto LABEL_31;
LABEL_50:
  v44 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if ((_DWORD)v44)
    geo::read_write_lock::logFailure(v44, (uint64_t)"unlock", v45);
}

void sub_19F0A9EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void gss::ClientStyleState<gss::ScenePropertyID>::setTargetMapDisplayStyle(uint64_t a1, uint64_t a2)
{
  geo::read_write_lock *v3;
  const char *v4;
  gss::Allocator *v5;
  __int16 v6;
  unsigned __int16 v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  gss::Allocator *v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  geo::read_write_lock *v27;
  const char *v28;
  pthread_rwlock_t *v29;
  uint64_t v30;

  v29 = (pthread_rwlock_t *)(a1 + 16);
  v30 = a2;
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  v5 = (gss::Allocator *)gss::DisplayStyle::applyDisplayStyle((unsigned __int8 *)&v30, (_QWORD *)(a1 + 232));
  if (!*(_BYTE *)(a1 + 246) && !*(_BYTE *)(a1 + 247))
  {
    v6 = *(_WORD *)(a1 + 244);
    v7 = (4 * v6) | 2;
    v8 = gss::Allocator::instance(v5);
    v9 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, (unsigned __int16)(v7 + 2 * v6) & 0xFFFE, 1);
    v10 = v9;
    if (*(_QWORD *)(a1 + 232))
    {
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 232, v9, (_DWORD *)((char *)v9 + v7), 1);
      v12 = gss::Allocator::instance(v11);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(a1 + 232), *(unsigned __int16 *)(a1 + 244));
    }
    *(_WORD *)(a1 + 244) = v6;
    *(_QWORD *)(a1 + 232) = v10;
    *(_WORD *)(a1 + 240) = v7;
  }
  v13 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  if (v13 > 0.0)
    goto LABEL_18;
  v14 = *(unsigned __int16 *)(a1 + 242);
  if ((_DWORD)v14 != *(unsigned __int16 *)(a1 + 226))
    goto LABEL_18;
  if (!*(_WORD *)(a1 + 242))
    goto LABEL_19;
  v15 = *(_DWORD **)(a1 + 232);
  v16 = *(_DWORD **)(a1 + 216);
  if (*v15 != *v16
    || (v17 = *(unsigned __int16 *)(a1 + 224),
        v18 = *(unsigned __int16 *)(a1 + 240),
        *(unsigned __int16 *)((char *)v15 + v18) != *(unsigned __int16 *)((char *)v16 + v17)))
  {
LABEL_18:
    LOBYTE(v14) = 1;
    goto LABEL_19;
  }
  v19 = 0;
  v20 = v15 + 1;
  v21 = v16 + 1;
  v22 = (uint64_t)v15 + v18 + 2;
  v23 = (uint64_t)v16 + v17 + 2;
  while (v14 - 1 != v19)
  {
    v24 = v19++;
    if (v20[v24] != v21[v24])
      goto LABEL_25;
    if (*(unsigned __int16 *)(v22 + 2 * v24) != *(unsigned __int16 *)(v23 + 2 * v24))
    {
      v19 = v24 + 1;
      goto LABEL_25;
    }
  }
  v19 = *(unsigned __int16 *)(a1 + 242);
LABEL_25:
  LOBYTE(v14) = v19 < v14;
LABEL_19:
  atomic_store(v14, (unsigned __int8 *)(a1 + 254));
  v25 = (unsigned int *)(a1 + 248);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v27 = (geo::read_write_lock *)pthread_rwlock_unlock(v29);
  if ((_DWORD)v27)
    geo::read_write_lock::logFailure(v27, (uint64_t)"unlock", v28);
}

void sub_19F0AA0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
  geo::write_lock_guard::~write_lock_guard(&a9);
  _Unwind_Resume(a1);
}

void gss::ClientStyleState<gss::PropertyID>::setTargetMapDisplayStyle(uint64_t a1, uint64_t a2)
{
  geo::read_write_lock *v3;
  const char *v4;
  gss::Allocator *v5;
  __int16 v6;
  unsigned __int16 v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  gss::Allocator *v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  geo::read_write_lock *v27;
  const char *v28;
  pthread_rwlock_t *v29;
  uint64_t v30;

  v29 = (pthread_rwlock_t *)(a1 + 16);
  v30 = a2;
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  v5 = (gss::Allocator *)gss::DisplayStyle::applyDisplayStyle((unsigned __int8 *)&v30, (_QWORD *)(a1 + 232));
  if (!*(_BYTE *)(a1 + 246) && !*(_BYTE *)(a1 + 247))
  {
    v6 = *(_WORD *)(a1 + 244);
    v7 = (4 * v6) | 2;
    v8 = gss::Allocator::instance(v5);
    v9 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, (unsigned __int16)(v7 + 2 * v6) & 0xFFFE, 1);
    v10 = v9;
    if (*(_QWORD *)(a1 + 232))
    {
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(a1 + 232, v9, (_DWORD *)((char *)v9 + v7), 1);
      v12 = gss::Allocator::instance(v11);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(a1 + 232), *(unsigned __int16 *)(a1 + 244));
    }
    *(_WORD *)(a1 + 244) = v6;
    *(_QWORD *)(a1 + 232) = v10;
    *(_WORD *)(a1 + 240) = v7;
  }
  v13 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  if (v13 > 0.0)
    goto LABEL_18;
  v14 = *(unsigned __int16 *)(a1 + 242);
  if ((_DWORD)v14 != *(unsigned __int16 *)(a1 + 226))
    goto LABEL_18;
  if (!*(_WORD *)(a1 + 242))
    goto LABEL_19;
  v15 = *(_DWORD **)(a1 + 232);
  v16 = *(_DWORD **)(a1 + 216);
  if (*v15 != *v16
    || (v17 = *(unsigned __int16 *)(a1 + 224),
        v18 = *(unsigned __int16 *)(a1 + 240),
        *(unsigned __int16 *)((char *)v15 + v18) != *(unsigned __int16 *)((char *)v16 + v17)))
  {
LABEL_18:
    LOBYTE(v14) = 1;
    goto LABEL_19;
  }
  v19 = 0;
  v20 = v15 + 1;
  v21 = v16 + 1;
  v22 = (uint64_t)v15 + v18 + 2;
  v23 = (uint64_t)v16 + v17 + 2;
  while (v14 - 1 != v19)
  {
    v24 = v19++;
    if (v20[v24] != v21[v24])
      goto LABEL_25;
    if (*(unsigned __int16 *)(v22 + 2 * v24) != *(unsigned __int16 *)(v23 + 2 * v24))
    {
      v19 = v24 + 1;
      goto LABEL_25;
    }
  }
  v19 = *(unsigned __int16 *)(a1 + 242);
LABEL_25:
  LOBYTE(v14) = v19 < v14;
LABEL_19:
  atomic_store(v14, (unsigned __int8 *)(a1 + 254));
  v25 = (unsigned int *)(a1 + 248);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v27 = (geo::read_write_lock *)pthread_rwlock_unlock(v29);
  if ((_DWORD)v27)
    geo::read_write_lock::logFailure(v27, (uint64_t)"unlock", v28);
}

void sub_19F0AA2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
  geo::write_lock_guard::~write_lock_guard(&a9);
  _Unwind_Resume(a1);
}

_WORD *gss::DisplayStyle::applyDisplayStyle(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  _WORD *result;

  v3 = a1;
  v4 = *a1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2, 0x10001u) = v4;
  v5 = v3[1];
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2, 0x1000Du) = v5;
  v6 = v3[2];
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2, 0x1000Eu) = v6;
  v7 = v3[3];
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2, 0x10084u) = v7;
  v8 = v3[4];
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2, 0x10033u) = v8;
  v9 = v3[5];
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2, 0x1003Cu) = v9;
  v10 = v3[6];
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2, 0x10045u) = v10;
  LOWORD(v3) = v3[7];
  result = (_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2, 0x1003Du);
  *result = (_WORD)v3;
  return result;
}

__n128 md::RoadStyling::subscribeLayer(md::RoadStyling *this, md::RoadLayer *a2, __n128 result)
{
  unsigned __int16 *v3;
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *i;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  __n128 *v36;
  char *v37;
  uint64_t v38;
  __n128 *v39;
  __n128 *v40;
  __n128 *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD **v104;

  ++*((_DWORD *)a2 + 52);
  v5 = (_QWORD **)*((_QWORD *)a2 + 1);
  v4 = (_QWORD **)*((_QWORD *)a2 + 2);
  if (v5 != v4)
  {
    result = 0uLL;
    v104 = (_QWORD **)*((_QWORD *)a2 + 2);
    do
    {
      v7 = (uint64_t)*v5;
      v8 = (*v5)[131];
      v9 = *(unsigned int **)(v8 + 240);
      v10 = *(unsigned int **)(v8 + 248);
      v11 = (char *)((char *)v10 - (char *)v9);
      v12 = ((char *)v10 - (char *)v9) >> 3;
      if (v10 != v9)
      {
        v13 = *(unsigned int **)(v8 + 240);
        do
        {
          v14 = ((v12 << 6) - 0x61C8864680B583EBLL + (v12 >> 2) + *v13) ^ v12;
          v12 = (*((unsigned __int16 *)v13 + 2) - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
          v13 += 2;
        }
        while (v13 != v10);
      }
      v15 = *(unsigned __int16 *)(v8 + 282);
      if (*(_WORD *)(v8 + 282))
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = *(_QWORD *)(v8 + 272);
        v20 = v19 + *(unsigned __int16 *)(v8 + 280);
        do
        {
          if (v18 < v15)
          {
            v17 = (unsigned int *)(v19 + 4 * v18);
            v3 = (unsigned __int16 *)(v20 + 2 * v18);
          }
          v16 ^= (*v3
                - 0x61C8864680B583EBLL
                + ((((v16 << 6) - 0x61C8864680B583EBLL + (v16 >> 2) + *v17) ^ v16) << 6)
                + ((((v16 << 6) - 0x61C8864680B583EBLL + (v16 >> 2) + *v17) ^ v16) >> 2)) ^ ((v16 << 6)
                                                                                           - 0x61C8864680B583EBLL
                                                                                           + (v16 >> 2)
                                                                                           + *v17);
          v21 = v18 + 1;
          if (v18 + 1 < v15)
            ++v18;
          else
            v18 = v15;
        }
        while (v21 < v15);
      }
      else
      {
        v16 = 0;
      }
      v22 = v16 ^ v12;
      v23 = *(__n128 **)this;
      v24 = (__n128 *)*((_QWORD *)this + 1);
      if (*(__n128 **)this != v24)
      {
        for (i = *(__n128 **)this; i != v24; i += 3)
        {
          if (i->n128_u64[0] == v22)
          {
            v27 = *(_QWORD *)(i->n128_u64[1] + 240);
            v26 = *(_QWORD *)(i->n128_u64[1] + 248);
            if ((char *)(v26 - v27) == v11)
            {
              if (v27 == v26)
              {
LABEL_31:
                md::RoadBatch::setStyle(*v5, (__n128 *)i[2].n128_u64);
                ++i[1].n128_u32[2];
                goto LABEL_4;
              }
              v28 = v9;
              while (*(_DWORD *)v27 == *v28 && *(unsigned __int16 *)(v27 + 4) == *((unsigned __int16 *)v28 + 2))
              {
                v27 += 8;
                v28 += 2;
                if (v27 == v26)
                  goto LABEL_31;
              }
            }
          }
        }
      }
      v30 = *((_QWORD *)this + 2);
      if ((unint64_t)v24 >= v30)
      {
        v32 = 0xAAAAAAAAAAAAAAABLL * (v24 - v23) + 1;
        if (v32 > 0x555555555555555)
          abort();
        v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v23) >> 4);
        if (2 * v33 > v32)
          v32 = 2 * v33;
        if (v33 >= 0x2AAAAAAAAAAAAAALL)
          v34 = 0x555555555555555;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v35 = (char *)operator new(48 * v34);
          result = 0uLL;
        }
        else
        {
          v35 = 0;
        }
        v36 = (__n128 *)&v35[16 * (v24 - v23)];
        v36[1] = result;
        v36[2] = result;
        v37 = &v35[48 * v34];
        *v36 = result;
        v31 = v36 + 3;
        if (v23 != v24)
        {
          v38 = 0;
          do
          {
            v39 = &v36[v38];
            v40 = &v24[v38];
            v39[-3].n128_u64[0] = v24[v38 - 3].n128_u64[0];
            *(__n128 *)((char *)v39 - 40) = *(__n128 *)((char *)&v24[v38 - 2] - 8);
            v40[-3].n128_u64[1] = 0;
            v40[-2].n128_u64[0] = 0;
            v39[-2].n128_u32[2] = *((_DWORD *)&v24[v38 - 1] - 2);
            v39[-1] = v24[v38 - 1];
            v40[-1].n128_u64[0] = 0;
            v40[-1].n128_u64[1] = 0;
            v38 -= 3;
          }
          while (&v24[v38] != v23);
          v23 = *(__n128 **)this;
          v41 = (__n128 *)*((_QWORD *)this + 1);
          *(_QWORD *)this = &v36[v38];
          *((_QWORD *)this + 1) = v31;
          *((_QWORD *)this + 2) = v37;
          while (2)
          {
            if (v41 == v23)
              goto LABEL_62;
            v42 = (std::__shared_weak_count *)v41[-1].n128_u64[1];
            if (!v42)
              goto LABEL_54;
            p_shared_owners = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
              v45 = (std::__shared_weak_count *)v41[-2].n128_u64[0];
              if (v45)
              {
LABEL_55:
                v46 = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
            }
            else
            {
LABEL_54:
              v45 = (std::__shared_weak_count *)v41[-2].n128_u64[0];
              if (v45)
                goto LABEL_55;
            }
            v41 -= 3;
            continue;
          }
        }
        *(_QWORD *)this = v36;
        *((_QWORD *)this + 1) = v31;
        *((_QWORD *)this + 2) = v37;
LABEL_62:
        if (v23)
          operator delete(v23);
      }
      else
      {
        v24[1] = result;
        v24[2] = result;
        v31 = v24 + 3;
        *v24 = result;
      }
      *((_QWORD *)this + 1) = v31;
      v48 = operator new();
      v49 = (_QWORD *)v48;
      *(_OWORD *)v48 = 0u;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_BYTE *)(v48 + 48) = 0;
      v50 = *(_QWORD *)(v7 + 1056);
      *(_QWORD *)(v48 + 56) = *(_QWORD *)(v7 + 1048);
      *(_QWORD *)(v48 + 64) = v50;
      if (v50)
      {
        v51 = (unint64_t *)(v50 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      *(_OWORD *)(v48 + 80) = 0uLL;
      *(_OWORD *)(v48 + 176) = 0uLL;
      *(_OWORD *)(v48 + 192) = 0uLL;
      *(_OWORD *)(v48 + 144) = 0uLL;
      *(_OWORD *)(v48 + 160) = 0uLL;
      *(_OWORD *)(v48 + 112) = 0uLL;
      *(_OWORD *)(v48 + 128) = 0uLL;
      *(_OWORD *)(v48 + 96) = 0uLL;
      v53 = operator new(0xE8uLL);
      v53[1] = 0;
      v53[2] = 0;
      *v53 = &off_1E42E1248;
      v54 = ggl::BufferData::BufferData((uint64_t)(v53 + 3), qword_1EE567148, 2, 1, 6, 1);
      v53[28] = ggl::OffsetRibbon::Style::reflection(void)::reflection;
      v53[3] = &off_1E42B8DF0;
      v55 = (std::__shared_weak_count *)v49[11];
      v49[10] = v54;
      v49[11] = v53;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = operator new(0xE8uLL);
      v58[1] = 0;
      v58[2] = 0;
      *v58 = &off_1E42E1248;
      v59 = ggl::BufferData::BufferData((uint64_t)(v58 + 3), qword_1EE567148, 2, 1, 6, 1);
      v58[28] = ggl::OffsetRibbon::Style::reflection(void)::reflection;
      v58[3] = &off_1E42B8DF0;
      v60 = (std::__shared_weak_count *)v49[13];
      v49[12] = v59;
      v49[13] = v58;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = operator new(0xE8uLL);
      v63[1] = 0;
      v63[2] = 0;
      *v63 = &off_1E42E1248;
      v64 = ggl::BufferData::BufferData((uint64_t)(v63 + 3), qword_1EE567148, 2, 1, 6, 1);
      v63[28] = ggl::OffsetRibbon::Style::reflection(void)::reflection;
      v63[3] = &off_1E42B8DF0;
      v65 = (std::__shared_weak_count *)v49[15];
      v49[14] = v64;
      v49[15] = v63;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = operator new(0xE8uLL);
      v68[1] = 0;
      v68[2] = 0;
      *v68 = &off_1E42E1248;
      v69 = ggl::BufferData::BufferData((uint64_t)(v68 + 3), qword_1EE567148, 2, 1, 6, 1);
      v68[28] = ggl::OffsetRibbon::Style::reflection(void)::reflection;
      v68[3] = &off_1E42B8DF0;
      v70 = (std::__shared_weak_count *)v49[19];
      v49[18] = v69;
      v49[19] = v68;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = operator new(0xE8uLL);
      v73[1] = 0;
      v73[2] = 0;
      *v73 = &off_1E42E1BE8;
      v74 = ggl::BufferData::BufferData((uint64_t)(v73 + 3), qword_1EE566C18, 2, 1, 6, 1);
      v73[28] = ggl::OuterShadowRibbon::Style::reflection(void)::reflection;
      v73[3] = &off_1E42B93D0;
      v75 = (std::__shared_weak_count *)v49[21];
      v49[20] = v74;
      v49[21] = v73;
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = operator new(0xE8uLL);
      v78[1] = 0;
      v78[2] = 0;
      *v78 = &off_1E42E2208;
      v79 = ggl::BufferData::BufferData((uint64_t)(v78 + 3), qword_1EE55C290, 2, 1, 6, 1);
      v78[28] = ggl::Line::Style::reflection(void)::reflection;
      v78[3] = &off_1E42B9750;
      v80 = (std::__shared_weak_count *)v49[23];
      v49[22] = v79;
      v49[23] = v78;
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = operator new(0xE8uLL);
      v83[1] = 0;
      v83[2] = 0;
      *v83 = &off_1E42E2080;
      v84 = ggl::BufferData::BufferData((uint64_t)(v83 + 3), qword_1EE54F640, 2, 1, 6, 1);
      v83[28] = ggl::TexturedInnerShadowRibbon::ShadowStyle::reflection(void)::reflection;
      v83[3] = &off_1E42B9670;
      v85 = (std::__shared_weak_count *)v49[17];
      v49[16] = v84;
      v49[17] = v83;
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = operator new(0xE8uLL);
      v88[1] = 0;
      v88[2] = 0;
      *v88 = &off_1E42E1210;
      v89 = ggl::BufferData::BufferData((uint64_t)(v88 + 3), qword_1EE567188, 2, 1, 6, 1);
      v88[28] = ggl::OffsetRibbon::Noise::reflection(void)::reflection;
      v88[3] = &off_1E42B8DD0;
      v90 = (std::__shared_weak_count *)v49[25];
      v49[24] = v89;
      v49[25] = v88;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v93 = (_QWORD *)operator new();
      *v93 = &off_1E42E74B8;
      v93[1] = 0;
      v93[2] = 0;
      v93[3] = v49;
      v94 = (std::__shared_weak_count *)v31[-1].n128_u64[1];
      v31[-1].n128_u64[0] = (unint64_t)v49;
      v31[-1].n128_u64[1] = (unint64_t)v93;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v31[-2].n128_u32[2] = 1;
      v97 = *(_QWORD *)(v7 + 1048);
      v98 = *(_QWORD *)(v7 + 1056);
      if (v98)
      {
        v99 = (unint64_t *)(v98 + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      v101 = (std::__shared_weak_count *)v31[-2].n128_u64[0];
      v31[-3].n128_u64[1] = v97;
      v31[-2].n128_u64[0] = v98;
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v31[-3].n128_u64[0] = v22;
      md::RoadBatch::setStyle(*v5, (__n128 *)v31[-1].n128_u64);
      v4 = v104;
LABEL_4:
      ++v5;
      result = 0uLL;
    }
    while (v5 != v4);
  }
  return result;
}

void sub_19F0AACCC(_Unwind_Exception *a1)
{
  md::RoadStyle *v1;

  md::RoadStyle::~RoadStyle(v1);
  MEMORY[0x1A1AF4E00](v1, 0x1020C40F1B7CD7FLL);
  _Unwind_Resume(a1);
}

void md::RoadBatch::setStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[134] = v5;
  v8 = (std::__shared_weak_count *)a1[135];
  a1[135] = v4;
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *a2;
    if (!*a2)
      return;
  }
  else
  {
LABEL_8:
    v11 = *a2;
    if (!*a2)
      return;
  }
  v12 = a1[139];
  v13 = *(_QWORD *)(v12 + 64);
  v14 = *(_QWORD *)(v11 + 96);
  v15 = *(_QWORD *)(v11 + 104);
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = 0;
  v16 = *(_QWORD *)(v12 + 160);
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(std::__shared_weak_count **)(v16 + 40);
  *(_QWORD *)(v16 + 32) = v14;
  *(_QWORD *)(v16 + 40) = v15;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = a1[138];
  v23 = *(_QWORD *)(v22 + 64);
  v24 = *(_QWORD *)(*a2 + 144);
  v25 = *(_QWORD *)(*a2 + 152);
  *(_QWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 40) = 0;
  v26 = *(_QWORD *)(v22 + 160);
  if (v25)
  {
    v27 = (unint64_t *)(v25 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *(std::__shared_weak_count **)(v26 + 40);
  *(_QWORD *)(v26 + 32) = v24;
  *(_QWORD *)(v26 + 40) = v25;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = a1[136];
  v33 = *(_QWORD *)(v32 + 64);
  v34 = *(_QWORD *)(*a2 + 80);
  v35 = *(_QWORD *)(*a2 + 88);
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = 0;
  v36 = *(_QWORD *)(v32 + 160);
  if (v35)
  {
    v37 = (unint64_t *)(v35 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(std::__shared_weak_count **)(v36 + 40);
  *(_QWORD *)(v36 + 32) = v34;
  *(_QWORD *)(v36 + 40) = v35;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = a1[137];
  v43 = *(_QWORD *)(v42 + 64);
  v44 = *(_QWORD *)(*a2 + 160);
  v45 = *(_QWORD *)(*a2 + 168);
  *(_QWORD *)(v43 + 32) = v44;
  *(_QWORD *)(v43 + 40) = 0;
  v46 = *(_QWORD *)(v42 + 160);
  if (v45)
  {
    v47 = (unint64_t *)(v45 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = *(std::__shared_weak_count **)(v46 + 40);
  *(_QWORD *)(v46 + 32) = v44;
  *(_QWORD *)(v46 + 40) = v45;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = a1[140];
  v53 = *(_QWORD *)(v52 + 64);
  v54 = *(_QWORD *)(*a2 + 96);
  v55 = *(_QWORD *)(*a2 + 104);
  *(_QWORD *)(v53 + 32) = v54;
  *(_QWORD *)(v53 + 40) = 0;
  v56 = *(_QWORD *)(v52 + 160);
  if (v55)
  {
    v57 = (unint64_t *)(v55 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = *(std::__shared_weak_count **)(v56 + 40);
  *(_QWORD *)(v56 + 32) = v54;
  *(_QWORD *)(v56 + 40) = v55;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = *(_QWORD *)(v52 + 64);
  v63 = *(_QWORD *)(*a2 + 192);
  v64 = *(_QWORD *)(*a2 + 200);
  *(_QWORD *)(v62 + 48) = v63;
  *(_QWORD *)(v62 + 56) = 0;
  v65 = *(_QWORD *)(v52 + 160);
  if (v64)
  {
    v66 = (unint64_t *)(v64 + 8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v68 = *(std::__shared_weak_count **)(v65 + 56);
  *(_QWORD *)(v65 + 48) = v63;
  *(_QWORD *)(v65 + 56) = v64;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = a1[141];
  v72 = *(_QWORD *)(v71 + 64);
  v73 = *(_QWORD *)(*a2 + 112);
  v74 = *(_QWORD *)(*a2 + 120);
  *(_QWORD *)(v72 + 32) = v73;
  *(_QWORD *)(v72 + 40) = 0;
  v75 = *(_QWORD *)(v71 + 160);
  if (v74)
  {
    v76 = (unint64_t *)(v74 + 8);
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  v78 = *(std::__shared_weak_count **)(v75 + 40);
  *(_QWORD *)(v75 + 32) = v73;
  *(_QWORD *)(v75 + 40) = v74;
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *(_QWORD *)(v71 + 64);
  v82 = *(_QWORD *)(*a2 + 128);
  v83 = *(_QWORD *)(*a2 + 136);
  *(_QWORD *)(v81 + 64) = v82;
  *(_QWORD *)(v81 + 72) = 0;
  v84 = *(_QWORD *)(v71 + 160);
  if (v83)
  {
    v85 = (unint64_t *)(v83 + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v87 = *(std::__shared_weak_count **)(v84 + 72);
  *(_QWORD *)(v84 + 64) = v82;
  *(_QWORD *)(v84 + 72) = v83;
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = *(_QWORD *)(v71 + 64);
  v91 = *(_QWORD *)(*a2 + 192);
  v92 = *(_QWORD *)(*a2 + 200);
  *(_QWORD *)(v90 + 48) = v91;
  *(_QWORD *)(v90 + 56) = 0;
  v93 = *(_QWORD *)(v71 + 160);
  if (v92)
  {
    v94 = (unint64_t *)(v92 + 8);
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  v96 = *(std::__shared_weak_count **)(v93 + 56);
  *(_QWORD *)(v93 + 48) = v91;
  *(_QWORD *)(v93 + 56) = v92;
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = a1[142];
  v100 = *(_QWORD *)(v99 + 64);
  v101 = *(_QWORD *)(*a2 + 176);
  v102 = *(_QWORD *)(*a2 + 184);
  *(_QWORD *)(v100 + 16) = v101;
  *(_QWORD *)(v100 + 24) = 0;
  v103 = *(_QWORD *)(v99 + 160);
  if (v102)
  {
    v104 = (unint64_t *)(v102 + 8);
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
  }
  v106 = *(std::__shared_weak_count **)(v103 + 24);
  *(_QWORD *)(v103 + 16) = v101;
  *(_QWORD *)(v103 + 24) = v102;
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
}

_QWORD *geo::codec::multiSectionFeaturePoints(_QWORD *result, unint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (!result)
    goto LABEL_8;
  v5 = result;
  if (*((unsigned int *)result + 25) <= a2)
  {
LABEL_9:
    result = 0;
    *a3 = 0;
    return result;
  }
  result = geo::codec::vertexPoolForFeature((uint64_t)result);
  if (!result)
  {
LABEL_8:
    *a3 = 0;
    return result;
  }
  v6 = result[4];
  if (v6)
  {
    v7 = *((unsigned int *)v5 + 24) + a2;
    if (result[5] > v7)
    {
      v8 = *(_QWORD *)(v6 + 16 * v7);
      if (v8 < result[2])
      {
        result = (_QWORD *)(result[1] + 8 * v8);
        *a3 = *(_QWORD *)(v6 + 16 * v7 + 8);
        return result;
      }
    }
    goto LABEL_9;
  }
  return 0;
}

_QWORD *geo::codec::vertexPoolForFeature(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  _QWORD **v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v1 = (_QWORD *)a1;
  if (!a1)
    return v1;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (_QWORD *)*v1;
  if (!*v1)
    goto LABEL_37;
  if (v5[4] > (unint64_t)v1 || v5[5] <= (unint64_t)v1)
  {
    if (v5[12] <= (unint64_t)v1 && v5[13] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 100);
      goto LABEL_36;
    }
    if (v5[23] <= (unint64_t)v1 && v5[24] > (unint64_t)v1
      || v5[27] <= (unint64_t)v1 && v5[28] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 105);
      goto LABEL_36;
    }
    if (v5[35] <= (unint64_t)v1 && v5[36] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 102);
      goto LABEL_36;
    }
    if (v5[47] <= (unint64_t)v1 && v5[48] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 103);
      goto LABEL_36;
    }
    if (v5[51] <= (unint64_t)v1 && v5[52] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 104);
      goto LABEL_36;
    }
    if (v5[8] <= (unint64_t)v1 && v5[9] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 101);
      goto LABEL_36;
    }
    if (v5[19] <= (unint64_t)v1 && v5[20] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 106);
      goto LABEL_36;
    }
    if (v5[436] <= (unint64_t)v1 && v5[437] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 440);
      goto LABEL_36;
    }
LABEL_37:
    v1 = 0;
    goto LABEL_38;
  }
  v6 = (_QWORD **)(v5 + 99);
LABEL_36:
  v1 = *v6;
LABEL_38:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v4);
  return v1;
}

uint64_t *std::__hash_table<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RoadBatchKey,std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::hash<md::RoadBatchKey>,std::equal_to<md::RoadBatchKey>,true>,std::__unordered_map_equal<md::RoadBatchKey,std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,std::equal_to<md::RoadBatchKey>,std::hash<md::RoadBatchKey>,true>,std::allocator<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::RoadBatchKey,std::piecewise_construct_t const&,std::tuple<md::RoadBatchKey const&>,std::tuple<>>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int16 *v3;
  unint64_t v4;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t i;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  unsigned __int8 v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  size_t v43;
  size_t v44;
  size_t v45;
  _QWORD *j;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  void *v59;
  uint64_t v60;

  v8 = *a2;
  v10 = *(unsigned int **)(*a2 + 240);
  v9 = *(unsigned int **)(*a2 + 248);
  for (i = ((char *)v9 - (char *)v10) >> 3; v10 != v9; v10 += 2)
  {
    v12 = ((i << 6) - 0x61C8864680B583EBLL + (i >> 2) + *v10) ^ i;
    i = (*((unsigned __int16 *)v10 + 2) - 0x61C8864680B583EBLL + (v12 << 6) + (v12 >> 2)) ^ v12;
  }
  v13 = *(unsigned __int16 *)(v8 + 282);
  if (*(_WORD *)(v8 + 282))
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)(v8 + 272);
    v18 = v17 + *(unsigned __int16 *)(v8 + 280);
    do
    {
      if (v16 < v13)
      {
        v15 = (unsigned int *)(v17 + 4 * v16);
        v3 = (unsigned __int16 *)(v18 + 2 * v16);
      }
      v14 ^= (*v3
            - 0x61C8864680B583EBLL
            + ((((v14 << 6) - 0x61C8864680B583EBLL + (v14 >> 2) + *v15) ^ v14) << 6)
            + ((((v14 << 6) - 0x61C8864680B583EBLL + (v14 >> 2) + *v15) ^ v14) >> 2)) ^ ((v14 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v14 >> 2)
                                                                                       + *v15);
      v19 = v16 + 1;
      if (v16 + 1 < v13)
        ++v16;
      else
        v16 = v13;
    }
    while (v19 < v13);
  }
  else
  {
    v14 = 0;
  }
  v20 = v14 ^ i ^ *((unsigned int *)a2 + 4) ^ *((unsigned __int8 *)a2 + 20);
  v21 = a1[1];
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v4 = v14 ^ i ^ *((unsigned int *)a2 + 4) ^ *((unsigned __int8 *)a2 + 20);
      if (v20 >= v21)
        v4 = v20 % v21;
    }
    else
    {
      v4 = (v21 - 1) & v20;
    }
    v23 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v23)
    {
      v24 = *v23;
      if (*v23)
      {
        if (v22.u32[0] < 2uLL)
        {
          while (1)
          {
            v26 = v24[1];
            if (v26 == v20)
            {
              if (md::RoadBatchKey::operator==(v24 + 2, a2))
                return v24;
            }
            else if ((v26 & (v21 - 1)) != v4)
            {
              goto LABEL_34;
            }
            v24 = (uint64_t *)*v24;
            if (!v24)
              goto LABEL_34;
          }
        }
        do
        {
          v25 = v24[1];
          if (v25 == v20)
          {
            if (md::RoadBatchKey::operator==(v24 + 2, a2))
              return v24;
          }
          else
          {
            if (v25 >= v21)
              v25 %= v21;
            if (v25 != v4)
              break;
          }
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
    }
  }
LABEL_34:
  v27 = (uint64_t *)operator new(0x48uLL);
  v24 = v27;
  *v27 = 0;
  v27[1] = v20;
  v28 = *(_QWORD *)(a3 + 8);
  v27[2] = *(_QWORD *)a3;
  v27[3] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = a1 + 2;
  *((_DWORD *)v27 + 8) = *(_DWORD *)(a3 + 16);
  *((_BYTE *)v27 + 36) = *(_BYTE *)(a3 + 20);
  v27[6] = 0;
  v27[7] = 0;
  v27[5] = 0;
  {
    v60 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v60, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v24[8] = mdm::Allocator::instance(void)::alloc;
  v33 = (float)(unint64_t)(a1[3] + 1);
  v34 = *((float *)a1 + 8);
  if (!v21 || (float)(v34 * (float)v21) < v33)
  {
    v35 = 1;
    if (v21 >= 3)
      v35 = (v21 & (v21 - 1)) != 0;
    v36 = v35 | (2 * v21);
    v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = a1[1];
    if (prime <= v21)
    {
      if (prime >= v21)
        goto LABEL_75;
      v49 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v21 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (prime <= v49)
        prime = v49;
      if (prime >= v21)
      {
        v21 = a1[1];
LABEL_75:
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            v4 = v20 % v21;
          else
            v4 = v20;
        }
        else
        {
          v4 = (v21 - 1) & v20;
        }
        goto LABEL_88;
      }
      if (!prime)
      {
        v59 = (void *)*a1;
        *a1 = 0;
        if (v59)
          operator delete(v59);
        v21 = 0;
        a1[1] = 0;
        goto LABEL_75;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v39 = operator new(8 * prime);
    v40 = (void *)*a1;
    *a1 = (uint64_t)v39;
    if (v40)
      operator delete(v40);
    v41 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v41++) = 0;
    while (prime != v41);
    v42 = (_QWORD *)*v31;
    if (!*v31)
    {
LABEL_74:
      v21 = prime;
      goto LABEL_75;
    }
    v43 = v42[1];
    v44 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v45 = v43 & v44;
      *(_QWORD *)(*a1 + 8 * v45) = v31;
      for (j = (_QWORD *)*v42; *v42; j = (_QWORD *)*v42)
      {
        v47 = j[1] & v44;
        if (v47 == v45)
        {
          v42 = j;
        }
        else if (*(_QWORD *)(*a1 + 8 * v47))
        {
          *v42 = *j;
          v48 = 8 * v47;
          *j = **(_QWORD **)(*a1 + v48);
          **(_QWORD **)(*a1 + v48) = j;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v47) = v42;
          v42 = j;
          v45 = v47;
        }
      }
      goto LABEL_74;
    }
    if (v43 >= prime)
      v43 %= prime;
    *(_QWORD *)(*a1 + 8 * v43) = v31;
    v52 = (_QWORD *)*v42;
    if (!*v42)
      goto LABEL_74;
    while (1)
    {
      v54 = v52[1];
      if (v54 >= prime)
        v54 %= prime;
      if (v54 != v43)
      {
        if (!*(_QWORD *)(*a1 + 8 * v54))
        {
          *(_QWORD *)(*a1 + 8 * v54) = v42;
          goto LABEL_79;
        }
        *v42 = *v52;
        v53 = 8 * v54;
        *v52 = **(_QWORD **)(*a1 + v53);
        **(_QWORD **)(*a1 + v53) = v52;
        v52 = v42;
      }
      v54 = v43;
LABEL_79:
      v42 = v52;
      v52 = (_QWORD *)*v52;
      v43 = v54;
      if (!v52)
        goto LABEL_74;
    }
  }
LABEL_88:
  v55 = *a1;
  v56 = *(uint64_t **)(*a1 + 8 * v4);
  if (v56)
  {
    *v24 = *v56;
LABEL_96:
    *v56 = (uint64_t)v24;
    goto LABEL_97;
  }
  *v24 = *v31;
  *v31 = (uint64_t)v24;
  *(_QWORD *)(v55 + 8 * v4) = v31;
  if (*v24)
  {
    v57 = *(_QWORD *)(*v24 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v57 >= v21)
        v57 %= v21;
    }
    else
    {
      v57 &= v21 - 1;
    }
    v56 = (uint64_t *)(*a1 + 8 * v57);
    goto LABEL_96;
  }
LABEL_97:
  ++a1[3];
  return v24;
}

void sub_19F0ABB5C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

BOOL md::RoadBatchKey::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *a1;
  v3 = *a2;
  v5 = *(_QWORD *)(*a1 + 240);
  v4 = *(_QWORD *)(*a1 + 248);
  v6 = *(_QWORD *)(*a2 + 240);
  if (v4 - v5 == *(_QWORD *)(*a2 + 248) - v6)
  {
    if (v5 != v4)
    {
      while (*(_DWORD *)v5 == *(_DWORD *)v6 && *(unsigned __int16 *)(v5 + 4) == *(unsigned __int16 *)(v6 + 4))
      {
        v5 += 8;
        v6 += 8;
        if (v5 == v4)
          goto LABEL_9;
      }
      return 0;
    }
LABEL_9:
    v8 = *(unsigned __int16 *)(v2 + 282);
    if ((_DWORD)v8 == *(unsigned __int16 *)(v3 + 282))
    {
      if (*(_WORD *)(v2 + 282))
      {
        v9 = *(_DWORD **)(v2 + 272);
        v10 = *(_DWORD **)(v3 + 272);
        if (*v9 != *v10)
          return 0;
        v11 = *(unsigned __int16 *)(v3 + 280);
        v12 = *(unsigned __int16 *)(v2 + 280);
        if (*(unsigned __int16 *)((char *)v9 + v12) != *(unsigned __int16 *)((char *)v10 + v11))
          return 0;
        v13 = 0;
        v14 = v9 + 1;
        v15 = v10 + 1;
        v16 = (uint64_t)v9 + v12 + 2;
        v17 = (uint64_t)v10 + v11 + 2;
        while (v8 - 1 != v13)
        {
          if (v14[v13] != v15[v13])
          {
            ++v13;
LABEL_19:
            if (v13 < v8)
              return 0;
            break;
          }
          v18 = *(unsigned __int16 *)(v16 + 2 * v13);
          v19 = *(unsigned __int16 *)(v17 + 2 * v13++);
          if (v18 != v19)
            goto LABEL_19;
        }
      }
      if (*((_DWORD *)a1 + 4) == *((_DWORD *)a2 + 4))
        return *((unsigned __int8 *)a1 + 20) == *((unsigned __int8 *)a2 + 20);
    }
  }
  return 0;
}

uint64_t gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int16 ***v4;
  unsigned __int16 **v5;
  unint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 ***v23;
  unsigned __int16 **v24;
  unint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v36;

  v3 = *(_QWORD *)(a1 + 16 * a3 + 16);
  if (!v3)
    return 0;
  v4 = *(unsigned __int16 ****)(v3 + 72);
  if (!v4 || (v5 = *v4, v6 = *((unsigned __int16 *)*v4 + 5), !(_DWORD)v6))
  {
LABEL_27:
    v18 = a1 + 16 * a3;
    v19 = *(unsigned __int16 *)(v18 + 56);
    if (*(_WORD *)(v18 + 56))
    {
      v20 = *(_QWORD *)(v18 + 48);
      v21 = v20 + 8 * v19;
      while (1)
      {
        v23 = *(unsigned __int16 ****)(*(_QWORD *)v20 + 72);
        if (v23)
        {
          v24 = *v23;
          v25 = *((unsigned __int16 *)*v23 + 5);
          if (!v25)
          {
            LOWORD(v22) = 0;
            goto LABEL_30;
          }
          v26 = *v24;
          if (!*((_BYTE *)v24 + 15))
          {
            v29 = 2 * v25;
            v30 = *v24;
            while (*v30 != a2)
            {
              ++v30;
              v29 -= 2;
              if (!v29)
              {
                v30 = &v26[v25];
                break;
              }
            }
            v22 = (unint64_t)((char *)v30 - (char *)v26) >> 1;
LABEL_30:
            if ((_DWORD)v25 != (unsigned __int16)v22)
              return 1;
            goto LABEL_31;
          }
          if (v25 < 0x1E)
          {
            v27 = 0;
            while (1)
            {
              v28 = v26[v27];
              if (v28 >= a2)
                break;
              if (v25 == ++v27)
                goto LABEL_31;
            }
            if (v28 == a2)
              LOWORD(v22) = v27;
            else
              LOWORD(v22) = v25;
            goto LABEL_30;
          }
          v31 = *v24;
          v32 = v25;
          do
          {
            v33 = v32 >> 1;
            v34 = &v31[v32 >> 1];
            v36 = *v34;
            v35 = v34 + 1;
            v32 += ~(v32 >> 1);
            if (v36 < a2)
              v31 = v35;
            else
              v32 = v33;
          }
          while (v32);
          if (v31 != &v26[v25] && *v31 == a2)
          {
            v22 = (unint64_t)((char *)v31 - (char *)v26) >> 1;
            goto LABEL_30;
          }
        }
LABEL_31:
        v20 += 8;
        if (v20 == v21)
          return 0;
      }
    }
    return 0;
  }
  v7 = *v5;
  if (!*((_BYTE *)v5 + 15))
  {
    v10 = 2 * v6;
    v11 = *v5;
    while (*v11 != a2)
    {
      ++v11;
      v10 -= 2;
      if (!v10)
      {
        LODWORD(v11) = (_DWORD)v7 + 2 * v6;
        break;
      }
    }
LABEL_22:
    if ((unsigned __int16)(((_DWORD)v11 - (_DWORD)v7) >> 1) == (_DWORD)v6)
      goto LABEL_27;
    return 1;
  }
  if (v6 >= 0x1E)
  {
    v11 = *v5;
    v12 = v6;
    do
    {
      v13 = v12 >> 1;
      v14 = &v11[v12 >> 1];
      v16 = *v14;
      v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v16 < a2)
        v11 = v15;
      else
        v12 = v13;
    }
    while (v12);
    if (v11 == &v7[v6] || *v11 != a2)
      goto LABEL_27;
    goto LABEL_22;
  }
  v8 = 0;
  while (1)
  {
    v9 = v7[v8];
    if (v9 >= a2)
      break;
    if (v6 == ++v8)
      goto LABEL_27;
  }
  v17 = (unsigned __int16)v8;
  if (v9 != a2)
    v17 = v6;
  if (v17 == (_DWORD)v6)
    goto LABEL_27;
  return 1;
}

_QWORD *std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PatternedBatchKey,std::piecewise_construct_t const&,std::tuple<md::PatternedBatchKey const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int16 *v4;
  unint64_t v5;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t i;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  size_t v43;
  size_t v44;
  size_t v45;
  _QWORD *j;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  void *v59;
  uint64_t v60;

  v11 = *(unsigned int **)(a2 + 240);
  v10 = *(unsigned int **)(a2 + 248);
  for (i = ((char *)v10 - (char *)v11) >> 3; v11 != v10; v11 += 2)
  {
    v13 = ((i << 6) - 0x61C8864680B583EBLL + (i >> 2) + *v11) ^ i;
    i = (*((unsigned __int16 *)v11 + 2) - 0x61C8864680B583EBLL + (v13 << 6) + (v13 >> 2)) ^ v13;
  }
  v14 = *(unsigned __int16 *)(a2 + 282);
  if (*(_WORD *)(a2 + 282))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = *(_QWORD *)(a2 + 272);
    do
    {
      if (v17 < v14)
      {
        v16 = (unsigned int *)(v18 + 4 * v17);
        v4 = (unsigned __int16 *)(v18 + *(unsigned __int16 *)(a2 + 280) + 2 * v17);
      }
      v15 ^= (*v4
            - 0x61C8864680B583EBLL
            + ((((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *v16) ^ v15) << 6)
            + ((((v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + *v16) ^ v15) >> 2)) ^ ((v15 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v15 >> 2)
                                                                                       + *v16);
      v19 = v17 + 1;
      if (v17 + 1 < v14)
        ++v17;
      else
        v17 = *(unsigned __int16 *)(a2 + 282);
    }
    while (v19 < v14);
  }
  else
  {
    v15 = 0;
  }
  v20 = v15 ^ i ^ a3;
  v21 = a1[1];
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v5 = v15 ^ i ^ a3;
      if (v20 >= v21)
        v5 = v20 % v21;
    }
    else
    {
      v5 = (v21 - 1) & v20;
    }
    v23 = *(_QWORD **)(*a1 + 8 * v5);
    if (v23)
    {
      v24 = (_QWORD *)*v23;
      if (*v23)
      {
        if (v22.u32[0] < 2uLL)
        {
          while (1)
          {
            v26 = v24[1];
            if (v26 == v20)
            {
              if (md::PatternedBatchKey::operator==((_DWORD *)v24 + 4, a2, a3))
                return v24;
            }
            else if ((v26 & (v21 - 1)) != v5)
            {
              goto LABEL_34;
            }
            v24 = (_QWORD *)*v24;
            if (!v24)
              goto LABEL_34;
          }
        }
        do
        {
          v25 = v24[1];
          if (v25 == v20)
          {
            if (md::PatternedBatchKey::operator==((_DWORD *)v24 + 4, a2, a3))
              return v24;
          }
          else
          {
            if (v25 >= v21)
              v25 %= v21;
            if (v25 != v5)
              break;
          }
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
    }
  }
LABEL_34:
  v27 = operator new(0x48uLL);
  v24 = v27;
  *v27 = 0;
  v27[1] = v20;
  v28 = *(_QWORD *)(a4 + 8);
  v27[2] = *(_QWORD *)a4;
  v27[3] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = a1 + 2;
  *((_DWORD *)v27 + 8) = *(_DWORD *)(a4 + 16);
  v27[6] = 0;
  v27[7] = 0;
  v27[5] = 0;
  {
    v60 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v60, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v24[8] = mdm::Allocator::instance(void)::alloc;
  v33 = (float)(unint64_t)(a1[3] + 1);
  v34 = *((float *)a1 + 8);
  if (!v21 || (float)(v34 * (float)v21) < v33)
  {
    v35 = 1;
    if (v21 >= 3)
      v35 = (v21 & (v21 - 1)) != 0;
    v36 = v35 | (2 * v21);
    v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = a1[1];
    if (prime <= v21)
    {
      if (prime >= v21)
        goto LABEL_75;
      v49 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v21 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (prime <= v49)
        prime = v49;
      if (prime >= v21)
      {
        v21 = a1[1];
LABEL_75:
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            v5 = v20 % v21;
          else
            v5 = v20;
        }
        else
        {
          v5 = (v21 - 1) & v20;
        }
        goto LABEL_88;
      }
      if (!prime)
      {
        v59 = (void *)*a1;
        *a1 = 0;
        if (v59)
          operator delete(v59);
        v21 = 0;
        a1[1] = 0;
        goto LABEL_75;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v39 = operator new(8 * prime);
    v40 = (void *)*a1;
    *a1 = (uint64_t)v39;
    if (v40)
      operator delete(v40);
    v41 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v41++) = 0;
    while (prime != v41);
    v42 = (_QWORD *)*v31;
    if (!*v31)
    {
LABEL_74:
      v21 = prime;
      goto LABEL_75;
    }
    v43 = v42[1];
    v44 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v45 = v43 & v44;
      *(_QWORD *)(*a1 + 8 * v45) = v31;
      for (j = (_QWORD *)*v42; *v42; j = (_QWORD *)*v42)
      {
        v47 = j[1] & v44;
        if (v47 == v45)
        {
          v42 = j;
        }
        else if (*(_QWORD *)(*a1 + 8 * v47))
        {
          *v42 = *j;
          v48 = 8 * v47;
          *j = **(_QWORD **)(*a1 + v48);
          **(_QWORD **)(*a1 + v48) = j;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v47) = v42;
          v42 = j;
          v45 = v47;
        }
      }
      goto LABEL_74;
    }
    if (v43 >= prime)
      v43 %= prime;
    *(_QWORD *)(*a1 + 8 * v43) = v31;
    v52 = (_QWORD *)*v42;
    if (!*v42)
      goto LABEL_74;
    while (1)
    {
      v54 = v52[1];
      if (v54 >= prime)
        v54 %= prime;
      if (v54 != v43)
      {
        if (!*(_QWORD *)(*a1 + 8 * v54))
        {
          *(_QWORD *)(*a1 + 8 * v54) = v42;
          goto LABEL_79;
        }
        *v42 = *v52;
        v53 = 8 * v54;
        *v52 = **(_QWORD **)(*a1 + v53);
        **(_QWORD **)(*a1 + v53) = v52;
        v52 = v42;
      }
      v54 = v43;
LABEL_79:
      v42 = v52;
      v52 = (_QWORD *)*v52;
      v43 = v54;
      if (!v52)
        goto LABEL_74;
    }
  }
LABEL_88:
  v55 = *a1;
  v56 = *(_QWORD **)(*a1 + 8 * v5);
  if (v56)
  {
    *v24 = *v56;
LABEL_96:
    *v56 = v24;
    goto LABEL_97;
  }
  *v24 = *v31;
  *v31 = v24;
  *(_QWORD *)(v55 + 8 * v5) = v31;
  if (*v24)
  {
    v57 = *(_QWORD *)(*v24 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v57 >= v21)
        v57 %= v21;
    }
    else
    {
      v57 &= v21 - 1;
    }
    v56 = (_QWORD *)(*a1 + 8 * v57);
    goto LABEL_96;
  }
LABEL_97:
  ++a1[3];
  return v24;
}

void sub_19F0AC484(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

BOOL md::PatternedBatchKey::operator==(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 240);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 248);
  v6 = *(_QWORD *)(a2 + 240);
  if (v4 - v5 != *(_QWORD *)(a2 + 248) - v6)
    return 0;
  if (v5 != v4)
  {
    while (*(_DWORD *)v5 == *(_DWORD *)v6 && *(unsigned __int16 *)(v5 + 4) == *(unsigned __int16 *)(v6 + 4))
    {
      v5 += 8;
      v6 += 8;
      if (v5 == v4)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v8 = *(unsigned __int16 *)(v3 + 282);
  if ((_DWORD)v8 != *(unsigned __int16 *)(a2 + 282))
    return 0;
  if (*(_WORD *)(v3 + 282))
  {
    v9 = *(_DWORD **)(v3 + 272);
    v10 = *(_DWORD **)(a2 + 272);
    if (*v9 == *v10)
    {
      v11 = *(unsigned __int16 *)(a2 + 280);
      v12 = *(unsigned __int16 *)(v3 + 280);
      if (*(unsigned __int16 *)((char *)v9 + v12) == *(unsigned __int16 *)((char *)v10 + v11))
      {
        v13 = 0;
        v14 = v9 + 1;
        v15 = v10 + 1;
        v16 = (uint64_t)v9 + v12 + 2;
        v17 = (uint64_t)v10 + v11 + 2;
        while (v8 - 1 != v13)
        {
          if (v14[v13] != v15[v13])
          {
            ++v13;
LABEL_19:
            if (v13 >= v8)
              return a1[4] == a3;
            return 0;
          }
          v18 = *(unsigned __int16 *)(v16 + 2 * v13);
          v19 = *(unsigned __int16 *)(v17 + 2 * v13++);
          if (v18 != v19)
            goto LABEL_19;
        }
        return a1[4] == a3;
      }
    }
    return 0;
  }
  return a1[4] == a3;
}

void std::__hash_table<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<md::PatternedBatchKey>,std::equal_to<md::PatternedBatchKey>,true>,std::__unordered_map_equal<md::PatternedBatchKey,std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<md::PatternedBatchKey>,std::hash<md::PatternedBatchKey>,true>,std::allocator<std::__hash_value_type<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        v4 = (_QWORD *)v2[6];
        v5 = v2[5];
        if (v4 != v3)
        {
          do
          {
            v8 = (void (***)(_QWORD, uint64_t))*--v4;
            v7 = v8;
            *v4 = 0;
            if (v8)
            {
              (**v7)(v7, v5);
              {
                v10 = operator new();
                *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v10 + 24) = "VectorKitLabels";
                *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v10 = &off_1E42B5668;
                *(_QWORD *)(v10 + 8) = "VectorKitLabels";
                *(_OWORD *)(v10 + 72) = 0u;
                *(_OWORD *)(v10 + 88) = 0u;
                *(_OWORD *)(v10 + 104) = 0u;
                *(_OWORD *)(v10 + 120) = 0u;
                *(_OWORD *)(v10 + 136) = 0u;
                *(_OWORD *)(v10 + 152) = 0u;
                *(_OWORD *)(v10 + 168) = 0u;
                *(_OWORD *)(v10 + 184) = 0u;
                *(_OWORD *)(v10 + 200) = 0u;
                *(_OWORD *)(v10 + 216) = 0u;
                *(_OWORD *)(v10 + 232) = 0u;
                *(_QWORD *)(v10 + 248) = 0;
                v16 = v10;
                *(_OWORD *)(v10 + 56) = 0u;
                v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
                if ((_DWORD)v11)
                  geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v7, 120);
            }
          }
          while (v4 != v3);
          v5 = v2[5];
        }
        v2[6] = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[8] + 40))(v2[8], v5, v2[7] - v5);
      }
      v13 = (std::__shared_weak_count *)v2[3];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      operator delete(v2);
    }
    while (v1);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  malloc_zone_t *zone;
  void (***v8)(_QWORD, uint64_t);
  void (***v9)(_QWORD, uint64_t);
  unsigned __int8 v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;

  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      v4 = (uint64_t *)*v2;
      v5 = (_QWORD *)v2[3];
      if (v5)
      {
        v6 = (_QWORD *)v2[4];
        v3 = v2[3];
        if (v6 != v5)
        {
          do
          {
            v9 = (void (***)(_QWORD, uint64_t))*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
            {
              (**v8)(v8, v3);
              {
                v11 = operator new();
                *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v11 + 24) = "VectorKitLabels";
                *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v11 = &off_1E42B5668;
                *(_QWORD *)(v11 + 8) = "VectorKitLabels";
                *(_OWORD *)(v11 + 72) = 0u;
                *(_OWORD *)(v11 + 88) = 0u;
                *(_OWORD *)(v11 + 104) = 0u;
                *(_OWORD *)(v11 + 120) = 0u;
                *(_OWORD *)(v11 + 136) = 0u;
                *(_OWORD *)(v11 + 152) = 0u;
                *(_OWORD *)(v11 + 168) = 0u;
                *(_OWORD *)(v11 + 184) = 0u;
                *(_OWORD *)(v11 + 200) = 0u;
                *(_OWORD *)(v11 + 216) = 0u;
                *(_OWORD *)(v11 + 232) = 0u;
                *(_QWORD *)(v11 + 248) = 0;
                v16 = v11;
                *(_OWORD *)(v11 + 56) = 0u;
                v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
                if ((_DWORD)v12)
                  geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 120);
            }
          }
          while (v6 != v5);
          v3 = v2[3];
        }
        v2[4] = (uint64_t)v5;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v3, v2[5] - v3);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], v2, 56);
      v2 = v4;
    }
    while (v4);
  }
  v14 = *a1;
  *a1 = 0;
  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v14, 8 * a1[1]);
  return a1;
}

uint64_t md::PolylinePixelHiker::setBasePositionOffset(md::PolylinePixelHiker *this, __n128 a2)
{
  uint64_t result;

  *((_DWORD *)this + 189) = a2.n128_u32[0];
  if (*((_BYTE *)this + 11))
    a2.n128_f32[0] = -a2.n128_f32[0];
  result = (*(uint64_t (**)(md::PolylinePixelHiker *, __n128))(*(_QWORD *)this + 40))(this, a2);
  *((_DWORD *)this + 192) = 0;
  return result;
}

uint64_t md::CurvedTextLabelPart::initializeLayoutDirection(uint64_t a1, uint64_t a2, float *a3, float a4)
{
  unsigned __int8 *v8;
  int v9;
  __n128 v10;
  __n128 v11;
  int v12;
  char v13;
  uint64_t result;
  float *v15;
  float *v16;
  float v17;
  float *v18;
  float *v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  char v26;
  uint64_t v27;
  float v28;

  v28 = 0.0;
  v27 = 0;
  v8 = *(unsigned __int8 **)(a1 + 1072);
  v9 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v8 + 80))(v8);
  v12 = v8[45];
  if (v8[45])
    v13 = 1;
  else
    v13 = 2;
  if (v12 == 2)
    v13 = 0;
  if (v9)
    LOBYTE(v12) = v13;
  result = md::CurvedTextLabelPart::findLineLayoutDirection(a2, 0, v12, (uint64_t)&v27, a4, v10, v11);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 565))
    {
      v15 = a3 + 24;
      v16 = a3 + 25;
      v17 = a3[26];
      v18 = a3 + 21;
      v19 = a3 + 22;
      v20 = a3[23];
    }
    else
    {
      v15 = a3 + 19;
      v16 = a3 + 20;
      v18 = a3 + 17;
      v19 = a3 + 18;
      v17 = 0.0;
      v20 = 0.0;
    }
    v21 = v27;
    v22 = v28;
    v23 = (float)((float)(*(float *)&v27 * *v15) + (float)(*((float *)&v27 + 1) * *v16)) + (float)(v28 * v17);
    if (*(_BYTE *)(a1 + 1455) && fabsf(v23) < 0.70711)
    {
      v24 = *v18;
      v25 = *v19;
      *(_BYTE *)(a1 + 1141) = 2;
      v23 = -(float)((float)((float)(*(float *)&v21 * v24) + (float)(*((float *)&v21 + 1) * v25)) + (float)(v22 * v20));
    }
    else
    {
      *(_BYTE *)(a1 + 1141) = 1;
    }
    if (v23 >= 0.0)
      v26 = 1;
    else
      v26 = 2;
    *(_BYTE *)(a1 + 1136) = v26;
  }
  return result;
}

uint64_t md::CurvedTextLabelPart::findLineLayoutDirection(uint64_t a1, int a2, int a3, uint64_t a4, float a5, __n128 a6, __n128 a7)
{
  float v10;
  float v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  *(_BYTE *)(a1 + 11) = 0;
  *(_BYTE *)(a1 + 8) = 1;
  a6.n128_u32[0] = 0;
  a7.n128_f32[0] = a5 * -0.5;
  v10 = a5 * 0.5;
  if (a3 == 2)
  {
    a7.n128_f32[0] = -a5;
    v10 = 0.0;
  }
  if (a3)
    v11 = a7.n128_f32[0];
  else
    v11 = 0.0;
  if (a3)
    v12 = v10;
  else
    v12 = a5;
  (*(void (**)(uint64_t, float, __n128, __n128))(*(_QWORD *)a1 + 32))(a1, (float)(v12 + v11) * 0.5, a6, a7);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (!*(_BYTE *)(a1 + 9))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v27.i32[2] = *(_DWORD *)(a1 + 36);
  v27.i64[0] = *(_QWORD *)(a1 + 28);
  v25 = v27;
  if (a2)
    (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)a1 + 72))(a1, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 32))(a1, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (!*(_BYTE *)(a1 + 9))
    return 0;
  v13 = (float32x4_t)((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)a1 + 88))(a1);
  v13.i64[0] = *(_QWORD *)(a1 + 28);
  v13.i32[2] = *(_DWORD *)(a1 + 36);
  v23 = v13;
  v14 = (float32x4_t)((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)a1 + 88))(a1);
  v14.i64[0] = *(_QWORD *)(a1 + 16);
  v14.i32[2] = *(_DWORD *)(a1 + 24);
  v24 = v14;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, float))(*(_QWORD *)a1 + 32))(a1, v12);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (!*(_BYTE *)(a1 + 9))
    return 0;
  v15 = (float32x4_t)((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)a1 + 88))(a1);
  v15.i64[0] = *(_QWORD *)(a1 + 28);
  v15.i32[2] = *(_DWORD *)(a1 + 36);
  v26 = vaddq_f32(vaddq_f32(v23, v25), v15);
  v16 = (float32x4_t)((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)a1 + 88))(a1);
  v16.i64[0] = *(_QWORD *)(a1 + 16);
  v16.i32[2] = *(_DWORD *)(a1 + 24);
  v17 = vsubq_f32(v16, v24);
  v18 = vmulq_f32(v17, v17);
  v19 = vmlaq_n_f32(v26, v17, 3.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1), v18), (float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2)).f32[0]));
  v20 = vmulq_f32(v19, v19);
  v21 = vmulq_n_f32(v19, 1.0/ sqrtf(vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1), v20), (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2)).f32[0]));
  *(_DWORD *)(a4 + 8) = v21.i32[2];
  *(_QWORD *)a4 = v21.i64[0];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  return 1;
}

uint64_t md::PolylinePixelHiker::disablePathRetraceCheck(uint64_t this)
{
  *(_BYTE *)(this + 772) = 0;
  return this;
}

void md::CurvedTextLabelPart::placeQuads(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, float32x2_t *a7, _BYTE *a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v16;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  char v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  float v43;
  float v44;
  size_t v45;
  uint64_t v46;
  size_t v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  double v80;
  float32x2_t *v81;
  float32x2_t v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  unint64_t v87;
  unint64_t v88;
  float v89;
  uint64_t v90;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  unint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x2_t v110;
  float32x4_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  char *v122;
  float *v123;
  float v124;
  char *v125;
  float v126;
  float32x2_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  float *v133;
  float v134;
  float32x2_t v135;
  float v136;
  float32x2_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  float *v144;
  float *v145;
  float *v146;
  float *v147;
  uint64_t v148;
  float *v149;
  uint64_t v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  double v175;
  double v176;
  double v177;
  double v178;
  int8x16_t v179;
  int8x16_t *v180;
  uint64_t v181;
  float32x2_t *v182;
  uint64_t v183;
  uint64_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  uint64_t v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float32x4_t v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  uint64_t v215;
  unsigned __int32 v216;
  uint64_t v217;
  float32x4_t v218;
  int8x16_t v219;
  float32x4_t v220;
  float32x4_t v221;
  uint64_t v222;
  uint64_t v223;
  float32x4_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  float32x2_t *v228;
  char *v229;
  uint64_t v230;
  int v231;
  float64x2_t v232;
  float64x2_t v233;
  uint64_t *v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  double v238;
  __int128 v239;
  double v240;
  float64x2_t v241;
  double v242;
  float64x2_t v243;
  double v244;
  _BYTE v245[40];
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD v254[4];

  v254[1] = *MEMORY[0x1E0C80C00];
  *a8 = 0;
  v9 = *(uint64_t **)(a3 + 32);
  v10 = *(_QWORD *)(a3 + 40) - (_QWORD)v9;
  if (!v10)
  {
    *a8 = 1;
    return;
  }
  v11 = *v9;
  if (*v9)
  {
    if (*(_BYTE *)(v11 + 61))
    {
      *(_QWORD *)&v232.f64[0] = a4;
      v228 = a7;
      v16 = v10 / 88;
      LODWORD(v235) = CGFontGetXHeight(*(CGFontRef *)(v11 + 16));
      LODWORD(v233.f64[0]) = CGFontGetAscent(*(CGFontRef *)(*v9 + 16));
      LODWORD(v229) = CGFontGetUnitsPerEm(*(CGFontRef *)(*v9 + 16));
      v234 = &v222;
      v18 = *(float *)(*v9 + 48);
      v19 = *(float *)(a5 + 16);
      v20 = *(float *)(a5 + 20);
      v254[0] = 0x8000007F7FFFFFLL;
      v21 = a1;
      v22 = 8 * (v16 + 1);
      v230 = MEMORY[0x1E0C80A78](v21);
      v231 = a2;
      *(_QWORD *)&v236 = (char *)&v222 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (md::CurvedTextLabelPart::populateGlyphOffsets(v230, a2, v236, (float *)v254))
      {
        if (*(float *)(*(_QWORD *)&v232.f64[0] + 424) > 0.0
          || (v23 = -(*(float *)(*(_QWORD *)(a5 + 112) + 40)
                    + exp2f(*(float *)a5) * -512.0 * *(double *)(*(_QWORD *)(a5 + 112) + 32)),
              (float)(*((float *)v254 + 1) - *(float *)v254) <= (float)(*(float *)(*(_QWORD *)&v232.f64[0] + 40) * v23)))
        {
          if (*(_BYTE *)(a5 + 184))
          {
            v24 = (_BYTE *)*a6;
            v24[11] = *(_BYTE *)(a5 + 183);
            v24[8] = 1;
            (*(void (**)(_BYTE *, float))(*(_QWORD *)v24 + 56))(v24, *(float *)(a5 + 28));
            v25 = *a6;
            (*(void (**)(uint64_t))(*(_QWORD *)*a6 + 88))(*a6);
            if (*(_BYTE *)(v25 + 10))
              return;
            v34 = *a6;
            v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a6 + 88))(*a6);
            v33 = 0.0;
            if (!*(_BYTE *)(v34 + 9))
              return;
          }
          else
          {
            v26 = v231;
            if (!v231 && (!*(_BYTE *)(a5 + 176) || !*(_BYTE *)(a5 + 181)))
            {
              if (!md::CurvedTextLabelPart::initializeLayoutDirection(v230, *a6, *(float **)&v232.f64[0], *((float *)v254 + 1) - *(float *)v254))return;
              (*(void (**)(uint64_t))(*(_QWORD *)*a6 + 16))(*a6);
              v26 = v231;
            }
            v27 = *a6;
            *(_BYTE *)(v27 + 11) = *(_BYTE *)(a5 + 176) == 2;
            *(_BYTE *)(v27 + 8) = 1;
            v28 = v230 + 960;
            if (v26)
              v28 = v230 + 1152;
            v29 = *(unsigned __int8 **)(v28 + 112);
            v30 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v29 + 80))(v29);
            v31 = v29[45];
            if (v29[45])
              v32 = 1;
            else
              v32 = 2;
            if (v31 == 2)
              v32 = 0;
            if ((_DWORD)v30)
              LOBYTE(v31) = v32;
            if (v31 == 2)
            {
              v33 = *(_BYTE *)(*a6 + 11) ? 0.0 : *((float *)v254 + 1);
            }
            else if ((_BYTE)v31)
            {
              v33 = (float)(*((float *)v254 + 1) + *(float *)v254) * 0.5;
            }
            else
            {
              v33 = *(_BYTE *)(*a6 + 11) ? *((float *)v254 + 1) : 0.0;
            }
          }
          v35 = 1.0 / (float)(int)v229;
          v36 = v35 * (float)(int)v235;
          v37 = fminf(fmaxf((float)((float)(v19 * 2.1) / v20) + -0.336, 0.0), 0.42);
          v38 = -(float)(v36 - (float)(v35 * (float)SLODWORD(v233.f64[0])));
          if (v231)
          {
            v39 = -1;
          }
          else
          {
            v40 = *(std::__shared_weak_count **)(a5 + 168);
            *(_QWORD *)(a5 + 160) = 0;
            *(_QWORD *)(a5 + 168) = 0;
            if (v40)
            {
              p_shared_owners = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(p_shared_owners);
              while (__stlxr(v42 - 1, p_shared_owners));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v39 = v16 <= 7 ? -1 : v16 >> 1;
          }
          v43 = v36 + (float)(v37 * v38);
          v44 = v20 / v18;
          MEMORY[0x1E0C80A78](v30);
          *(_QWORD *)&v235 = (char *)&v222 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero((void *)v235, v45);
          MEMORY[0x1E0C80A78](v46);
          v48 = (_DWORD *)((char *)&v222 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
          bzero(v48, v47);
          MEMORY[0x1E0C80A78](v49);
          *(_QWORD *)&v233.f64[0] = (char *)&v222 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(*(void **)&v233.f64[0], 8 * (v16 + 1));
          v50 = 0;
          do
          {
            (*(void (**)(uint64_t, float))(*(_QWORD *)*a6 + 32))(*a6, *(float *)(v236 + 8 * v50) - v33);
            v51 = *a6;
            (*(void (**)(uint64_t))(*(_QWORD *)*a6 + 88))(*a6);
            if (*(_BYTE *)(v51 + 10))
              return;
            v52 = *a6;
            (*(void (**)(uint64_t))(*(_QWORD *)*a6 + 88))(*a6);
            if (!*(_BYTE *)(v52 + 9))
              return;
            v53 = *a6;
            (*(void (**)(uint64_t))(*(_QWORD *)*a6 + 88))(*a6);
            v54 = v235 + 12 * v50;
            v55 = *(_QWORD *)(v53 + 16);
            *(_DWORD *)(v54 + 8) = *(_DWORD *)(v53 + 24);
            *(_QWORD *)v54 = v55;
            v56 = *a6;
            (*(void (**)(uint64_t))(*(_QWORD *)*a6 + 88))(*a6);
            v48[v50] = *(_DWORD *)(v56 + 48);
            v57 = *a6;
            *(_QWORD *)(*(_QWORD *)&v233.f64[0] + 8 * v50) = *(_QWORD *)(*a6 + 40);
            if (v50)
            {
              if (v50 == v39)
              {
                (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v57 + 24))(v245);
                v58 = *(_OWORD *)v245;
                *(_QWORD *)v245 = 0;
                *(_QWORD *)&v245[8] = 0;
                v59 = *(std::__shared_weak_count **)(a5 + 168);
                *(_OWORD *)(a5 + 160) = v58;
                if (v59)
                {
                  v60 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                v62 = *(std::__shared_weak_count **)&v245[8];
                if (*(_QWORD *)&v245[8])
                {
                  v63 = (unint64_t *)(*(_QWORD *)&v245[8] + 8);
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
              }
            }
            else
            {
              (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v57 + 24))(v245);
              v65 = *(_OWORD *)v245;
              *(_QWORD *)v245 = 0;
              *(_QWORD *)&v245[8] = 0;
              v66 = *(std::__shared_weak_count **)(a5 + 136);
              *(_OWORD *)(a5 + 128) = v65;
              if (v66)
              {
                v67 = (unint64_t *)&v66->__shared_owners_;
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              v69 = *(std::__shared_weak_count **)&v245[8];
              if (*(_QWORD *)&v245[8])
              {
                v70 = (unint64_t *)(*(_QWORD *)&v245[8] + 8);
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              if (!*(_QWORD *)(a5 + 128))
                return;
            }
            ++v50;
          }
          while (v50 <= v16);
          (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a6 + 24))(v245);
          v72 = *(_OWORD *)v245;
          *(_QWORD *)v245 = 0;
          *(_QWORD *)&v245[8] = 0;
          v73 = *(std::__shared_weak_count **)(a5 + 152);
          *(_OWORD *)(a5 + 144) = v72;
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v76 = *(std::__shared_weak_count **)&v245[8];
          if (*(_QWORD *)&v245[8])
          {
            v77 = (unint64_t *)(*(_QWORD *)&v245[8] + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v79 = *(_QWORD *)(a5 + 144);
          if (v79)
          {
            if (*(float *)(*(_QWORD *)&v232.f64[0] + 424) <= 0.0
              || (v80 = (*(double (**)(uint64_t))(*(_QWORD *)v79 + 208))(v79),
                  vabdd_f64(v80, (*(double (**)(_QWORD))(**(_QWORD **)(a5 + 128) + 208))(*(_QWORD *)(a5 + 128))) <= *(double *)(*(_QWORD *)(a5 + 112) + 32)))
            {
              if (!v231)
              {
                v81 = *(float32x2_t **)(v230 + 1008);
                v82 = vsub_f32(*(float32x2_t *)(v235 + 12 * v16), *(float32x2_t *)v235);
                v81[3] = vmul_n_f32(v82, 1.0 / sqrtf(vaddv_f32(vmul_f32(v82, v82))));
                v81[24].i8[5] = 1;
              }
              MEMORY[0x1E0C80A78](v79);
              v227 = (char *)&v222 - ((12 * v16 + 15) & 0xFFFFFFFFFFFFFFF0);
              bzero(v227, 12 * v16);
              MEMORY[0x1E0C80A78](v83);
              v229 = (char *)&v222 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
              bzero(v229, v16);
              v87 = 0;
              v88 = 0;
              v89 = *(float *)v254 - v33;
              if (v16 <= 1)
                v90 = 1;
              else
                v90 = v16;
              v225 = v236 + 8;
              v226 = v235 + 12;
              __asm { FMOV            V0.4S, #1.0 }
              v224 = _Q0;
              v222 = v235 + 12 * v16;
              v223 = v90;
              do
              {
                if (v88 && *(float *)(v236 + 8 * v88) <= *(float *)(v236 + 8 * v88 - 8))
                {
                  v229[v88] = 1;
                  v96 = v88 + 1;
                }
                else
                {
                  v96 = v88 + 1;
                  if (v88 >= v16)
                  {
LABEL_103:
                    if (v88)
                    {
                      v229[v88] = 1;
                    }
                    else
                    {
                      (*(void (**)(uint64_t, float))(*(_QWORD *)*a6 + 32))(*a6, v89);
                      v104 = *a6;
                      (*(void (**)(uint64_t))(*(_QWORD *)*a6 + 88))(*a6);
                      if (!*(_BYTE *)(v104 + 9))
                        return;
                      v105 = *a6;
                      v106 = (float32x4_t)((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)*a6 + 88))(*a6);
                      v106.i64[0] = *(_QWORD *)v222;
                      v106.i32[2] = *(_DWORD *)(v222 + 8);
                      v107.i64[0] = *(_QWORD *)(v105 + 16);
                      v107.i32[2] = *(_DWORD *)(v105 + 24);
                      v108 = vsubq_f32(v106, v107);
                      v109 = vmulq_f32(v108, v108);
                      v110 = (int32x2_t)vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 1), v109), (float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 2)).u64[0];
                      *(float *)v110.i32 = sqrtf(*(float *)v110.i32);
                      if (*(float *)v110.i32 <= 0.01)
                        return;
                      v86.i32[3] = v224.i32[3];
                      v85 = vdivq_f32(v224, (float32x4_t)vdupq_lane_s32(v110, 0));
                      v111 = vmulq_f32(v108, v85);
                      v112 = &v227[12 * v87];
                      *((_DWORD *)v112 + 2) = v111.i32[2];
                      *(_QWORD *)v112 = v111.i64[0];
                      ++v87;
                      v96 = 1;
                      v90 = v223;
                    }
                  }
                  else
                  {
                    v97 = v235 + 12 * v88;
                    v98 = v226 + 12 * v88;
                    v99 = (float *)(v225 + 8 * v88);
                    v100 = v88 + 1;
                    while (1)
                    {
                      if (*(float *)(v236 + 8 * v88) < *v99)
                      {
                        v85.i64[0] = *(_QWORD *)v98;
                        v85.i32[2] = *(_DWORD *)(v98 + 8);
                        v86.i64[0] = *(_QWORD *)v97;
                        v86.i32[2] = *(_DWORD *)(v97 + 8);
                        v85 = vsubq_f32(v85, v86);
                        v101 = vmulq_f32(v85, v85);
                        v86 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v101.f32, 1), v101), (float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 2));
                        v86.f32[0] = sqrtf(v86.f32[0]);
                        if (v86.f32[0] > 0.01)
                          break;
                      }
                      ++v100;
                      v98 += 12;
                      v99 += 2;
                      if (v100 > v16)
                        goto LABEL_103;
                    }
                    v86.i32[3] = v224.i32[3];
                    v102 = vmulq_f32(v85, vdivq_f32(v224, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 0)));
                    v103 = &v227[12 * v87];
                    *((_DWORD *)v103 + 2) = v102.i32[2];
                    *(_QWORD *)v103 = v102.i64[0];
                    ++v87;
                  }
                }
                v88 = v96;
              }
              while (v96 != v90);
              MEMORY[0x1E0C80A78](v84);
              v115 = (char *)&v222 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
              v116 = 0;
              v117 = 0;
              v118 = v227;
              v119.n128_u64[0] = (unint64_t)vdup_n_s32(0x3ECCCCCDu);
              v120.n128_u64[0] = (unint64_t)vdup_n_s32(0x3E4CCCCDu);
              v121.n128_u32[0] = 1.0;
              v122 = v229;
              do
              {
                if (v122[v117])
                {
                  v123 = (float *)&v115[12 * v117];
                  *(_QWORD *)v123 = *(_QWORD *)(v123 - 3);
                  v124 = *(v123 - 1);
                }
                else
                {
                  v125 = &v118[12 * v116];
                  v126 = *(float *)v125;
                  v127 = *(float32x2_t *)(v125 + 4);
                  v128 = v116 + 1;
                  if (v116 + 1 < v87)
                  {
                    v129 = &v118[12 * v128];
                    v126 = v126 + (float)(*(float *)v129 * 0.4);
                    v127 = vmla_f32(v127, (float32x2_t)v119.n128_u64[0], *(float32x2_t *)(v129 + 4));
                    if (v116 + 2 < v87)
                    {
                      v130 = &v118[12 * v116 + 24];
                      v126 = v126 + (float)(*(float *)v130 * 0.2);
                      v127 = vmla_f32(v127, (float32x2_t)v120.n128_u64[0], *(float32x2_t *)(v130 + 4));
                    }
                  }
                  if (v116 - 1 >= 0)
                  {
                    if (v116 == 1)
                      v131 = 1;
                    else
                      v131 = 2;
                    v132 = (uint64_t)&v118[12 * v116 - 12];
                    v133 = (float *)&meanTangentWeights;
                    do
                    {
                      v134 = *v133++;
                      v126 = v126 + (float)(*(float *)v132 * v134);
                      v127 = vmla_n_f32(v127, *(float32x2_t *)(v132 + 4), v134);
                      v132 -= 12;
                      --v131;
                    }
                    while (v131);
                  }
                  v135 = vmul_f32(v127, v127);
                  v136 = 1.0 / sqrtf((float)(v135.f32[0] + (float)(v126 * v126)) + v135.f32[1]);
                  v124 = vmuls_lane_f32(v136, v127, 1);
                  v137 = (float32x2_t)vdup_lane_s32((int32x2_t)v127, 0);
                  v137.f32[0] = v126;
                  *(float32x2_t *)&v115[12 * v117] = vmul_n_f32(v137, v136);
                  v116 = v128;
                }
                *(float *)&v115[12 * v117++ + 8] = v124;
              }
              while (v117 != v113);
              if (v231 == 1)
              {
                (*(void (**)(_QWORD, __n128, __n128, __n128))(**(_QWORD **)(a5 + 112) + 192))(*(_QWORD *)(a5 + 112), v119, v120, v121);
                v138 = *(unsigned __int8 *)(a5 + 182);
                v139 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a5 + 112) + 80))(*(_QWORD *)(a5 + 112));
                v113 = v223;
                if (v138 != v139)
                  *(_BYTE *)(a5 + 179) = 1;
              }
              v140 = 0;
              v141 = *(_QWORD *)(a3 + 32);
              v142 = *(unsigned __int8 *)(a5 + 181);
              v143 = v141 + 44;
              v144 = (float *)(v115 + 8);
              v145 = (float *)(*(_QWORD *)&v233.f64[0] + 4);
              v146 = (float *)(v236 + 4);
              v147 = (float *)(v235 + 8);
              v148 = v113;
              v149 = (float *)v228;
              v150 = v230;
              while (1)
              {
                *(_BYTE *)(v143 + 40) = 0;
                v153 = *(_QWORD *)(v143 - 44);
                if (!v153 || !*(_BYTE *)(v153 + 61))
                  goto LABEL_129;
                v154 = *(unsigned __int8 *)(v150 + 869);
                if (*(_BYTE *)(v150 + 869))
                {
                  v155 = *(v144 - 1);
                  v157 = *(float *)(a5 + 84);
                  v156 = *(float *)(a5 + 88);
                  v158 = *(v144 - 2);
                  v159 = *(float *)(a5 + 80);
                  v160 = -(float)((float)(v155 * v156) - (float)(*v144 * v157));
                  v161 = -(float)((float)(v159 * *v144) - (float)(v158 * v156));
                  v162 = -(float)((float)(v158 * v157) - (float)(v159 * v155));
                  v163 = 1.0 / sqrtf((float)((float)(v160 * v160) + (float)(v161 * v161)) + (float)(v162 * v162));
                  v164 = v163 * v160;
                  v165 = v163 * v161;
                  v166 = v163 * v162;
                  v167 = -(float)((float)((float)(v163 * v162) * v158) - (float)(v164 * *v144));
                  *(float *)(v143 + 20) = -(float)((float)(v165 * *v144) - (float)((float)(v163 * v162) * v155));
                  *(float *)(v143 + 24) = v167;
                  *(float *)(v143 + 28) = -(float)((float)(v164 * v155) - (float)(v165 * v158));
                  if (v142 != 2)
                    goto LABEL_137;
                }
                else
                {
                  v158 = *(v144 - 2);
                  v155 = *(v144 - 1);
                  v164 = -v155;
                  v166 = 0.0;
                  v165 = v158;
                  if (v142 != 2)
                  {
LABEL_137:
                    v174 = *v146 - (float)((float)(v20 * 0.5) * v43);
                    v171 = *(v147 - 2) + (float)(v174 * v164);
                    v172 = *(v147 - 1) + (float)(v174 * v165);
                    v173 = *v147 + (float)(v174 * v166);
                    *(float *)(v143 + 8) = v158;
                    *(float *)(v143 + 12) = v155;
                    v166 = *v144;
                    goto LABEL_139;
                  }
                }
                v168 = (float)(*(float *)(v153 + 32)
                             + (float)((float)(*(float *)(v153 + 40) - *(float *)(v153 + 32)) * 0.5))
                     * v44;
                v169 = (float)(*(float *)(v153 + 36)
                             + (float)((float)(*(float *)(v153 + 44) - *(float *)(v153 + 36)) * 0.5))
                     * v44;
                if (*(_BYTE *)(v153 + 59))
                {
                  v170 = *v144;
                  v171 = *(v147 - 2) - (float)((float)(v169 * v164) + (float)(v158 * v168));
                  v172 = *(v147 - 1) - (float)((float)(v169 * v165) + (float)(v155 * v168));
                  v173 = *v147 - (float)((float)(v169 * v166) + (float)(*v144 * v168));
                  *(float *)(v143 + 8) = v158;
                  *(float *)(v143 + 12) = v155;
                  v166 = v170;
                }
                else
                {
                  v171 = *(v147 - 2) - (float)((float)(v168 * v164) - (float)(v158 * v169));
                  v172 = *(v147 - 1) - (float)((float)(v168 * v165) - (float)(v155 * v169));
                  v173 = *v147 - (float)((float)(v168 * v166) - (float)(*v144 * v169));
                  *(float *)(v143 + 8) = v164;
                  *(float *)(v143 + 12) = v165;
                }
LABEL_139:
                *(float *)(v143 + 16) = v166;
                if (*(_BYTE *)(v150 + 565))
                {
                  *(float *)(v143 - 4) = v171;
                  *(float *)v143 = v172;
                  *(float *)(v143 + 4) = v173;
                  if (v154)
                    goto LABEL_128;
                  *(_DWORD *)(v143 + 32) = *v48;
                  v151 = *v145;
                  v152 = v141 + 88 * v140 + 64;
                  *(float *)(v143 + 20) = *(v145 - 1);
                }
                else
                {
                  v151 = v172 - v149[1];
                  *(float *)(v143 - 4) = v171 - *v149;
                  v152 = v143 - 4;
                }
                *(float *)(v152 + 4) = v151;
                *(_DWORD *)(v152 + 8) = 0;
LABEL_128:
                *(_BYTE *)(v143 + 40) = 1;
LABEL_129:
                ++v140;
                v143 += 88;
                v144 += 3;
                v145 += 2;
                v146 += 2;
                ++v48;
                v147 += 3;
                if (!--v148)
                {
                  if (*(_BYTE *)(v150 + 565))
                  {
                    *(_QWORD *)v245 = *(_QWORD *)(*(_QWORD *)&v232.f64[0] + 328);
                    v246 = *(_QWORD *)v245;
                    memset(&v245[8], 0, 32);
                    v249 = *(_QWORD *)v245;
                    v247 = 0u;
                    v248 = 0u;
                    v250 = 0;
                    v251 = *(_OWORD *)(a5 + 56);
                    v252 = *(_QWORD *)(a5 + 72);
                    v253 = 0x3FF0000000000000;
                    gm::operator*<double,4,4,4>((double *)&v237, (double *)(*(_QWORD *)&v232.f64[0] + 864), (double *)v245);
                    v175 = v238;
                    v176 = v240;
                    v177 = v242;
                    v235 = v237;
                    v236 = v239;
                    v232 = v241;
                    v233 = v243;
                    v178 = v244;
                  }
                  else
                  {
                    v236 = xmmword_19FFB33A0;
                    v235 = xmmword_19FFB32C0;
                    v232 = 0u;
                    v233 = 0u;
                    v177 = 0.0;
                    v178 = 1.0;
                    v176 = 0.0;
                    v175 = 0.0;
                  }
                  md::CollisionObject::resetWithCircles(*(void ***)(a5 + 48), v16);
                  v180 = *(int8x16_t **)(a5 + 48);
                  v181 = *(_QWORD *)(a3 + 32) + 44;
                  v182 = v228;
                  v183 = v230;
                  v184 = v223;
                  v186 = (float64x2_t)v235;
                  v185 = (float64x2_t)v236;
                  v188 = v232;
                  v187 = v233;
                  while (!*(_BYTE *)(v181 + 40))
                  {
LABEL_146:
                    v181 += 88;
                    if (!--v184)
                    {
                      *a8 = 1;
                      return;
                    }
                  }
                  v189 = *(_QWORD *)(v181 - 44);
                  v190 = *(float *)(v189 + 32);
                  v191 = *(float *)(v189 + 40) - v190;
                  v192 = v191 * 0.5;
                  if (*(_BYTE *)(v189 + 58))
                  {
                    v190 = 0.0;
                    v193 = 0.0;
                    v194 = v191 * 0.5;
                  }
                  else
                  {
                    v193 = *(float *)(v189 + 36);
                    v194 = (float)(*(float *)(v189 + 44) - v193) * 0.5;
                  }
                  *(float *)v179.i32 = fmaxf(v192, v194) * v44;
                  v195 = (float)(v192 + v190) * v44;
                  v196 = (float)(v194 + v193) * v44;
                  if (*(_BYTE *)(v183 + 869))
                  {
                    if (*(_BYTE *)(v183 + 565))
                    {
                      v198 = *(float *)(v181 + 12);
                      v197 = *(float *)(v181 + 16);
                      v200 = *(float *)(a5 + 84);
                      v199 = *(float *)(a5 + 88);
                      v201 = *(float *)(v181 + 8);
                      v202 = *(float *)(a5 + 80);
                      v203 = -(float)((float)(v198 * v199) - (float)(v197 * v200));
                      v204 = -(float)((float)(v202 * v197) - (float)(v201 * v199));
                      v205 = -(float)((float)(v201 * v200) - (float)(v202 * v198));
                      v206 = v196 / sqrtf((float)((float)(v203 * v203) + (float)(v204 * v204)) + (float)(v205 * v205));
                      v207.f32[0] = (float)(*(float *)(v181 - 4) + (float)(v201 * v195)) + (float)(v206 * v203);
                      v208 = (float)(*(float *)v181 + (float)(v198 * v195)) + (float)(v206 * v204);
                      v209 = (float)(*(float *)(v181 + 4) + (float)(v197 * v195)) + (float)(v206 * v205);
                      goto LABEL_156;
                    }
                    v207.i64[0] = 0;
                  }
                  else
                  {
                    v210 = *(float *)(v181 + 8);
                    v211 = *(float *)(v181 + 12);
                    v212 = v210 * v196;
                    v213 = -(float)((float)(v211 * v196) - (float)(v210 * v195));
                    v214 = v212 + (float)(v211 * v195);
                    v207.f32[0] = *(float *)(v181 - 4) + v213;
                    if (*(_BYTE *)(v183 + 565))
                    {
                      v209 = *(float *)(v181 + 4);
                      v208 = *(float *)v181 + v214;
LABEL_156:
                      *(float32x2_t *)v207.f32 = vsub_f32(vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v187, v186, v207.f32[0]), v185, v208), v188, v209), 1.0 / (v178 + v175 * v207.f32[0] + v176 * v208 + v177 * v209))), *v182);
                      *(float *)v179.i32 = *(float *)(a5 + 104) * *(float *)v179.i32;
                    }
                    else
                    {
                      v207.f32[1] = *(float *)v181 + v214;
                    }
                  }
                  v215 = v180[10].i64[1];
                  v216 = v180[11].u32[0];
                  v180[11].i32[0] = v216 + 1;
                  v217 = v215 + 12 * v216;
                  *(_QWORD *)v217 = v207.i64[0];
                  *(_DWORD *)(v217 + 8) = v179.i32[0];
                  if (*(float *)v179.i32 != 0.0)
                  {
                    v207.i64[1] = v207.i64[0];
                    v218 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v179.i8, 0);
                    v219.i64[0] = vsubq_f32(v207, v218).u64[0];
                    v219.i64[1] = vaddq_f32(v207, v218).i64[1];
                    v220.i64[0] = v219.i64[0];
                    v220.i64[1] = v180->i64[1];
                    v221.i64[0] = v180->i64[0];
                    v221.i64[1] = v219.i64[1];
                    v179 = vbslq_s8((int8x16_t)vcgtq_f32(v221, v220), v219, *v180);
                    *v180 = v179;
                  }
                  goto LABEL_146;
                }
              }
            }
          }
        }
      }
    }
  }
}

void md::PolylinePixelHiker::validateIfNeeded(md::PolylinePixelHiker *this)
{
  if (*((_BYTE *)this + 8))
    md::PolylinePixelHiker::validate(this);
}

void md::PolylinePixelHiker::moveCursor(md::PolylinePixelHiker *this, float a2)
{
  float32x4_t v2;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  float v19;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  float v45;
  _DWORD *v46;
  _DWORD *v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  float32x4_t v58;
  float32x4_t v59;
  __int32 v60;
  float v61;
  float v62;
  __int128 v63;
  float v64;
  int v65;
  uint64_t v66;
  md::LabelPoint *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  __int128 v73;
  float v74;
  int PointCoordinateAtOffset;
  uint64_t v76;
  md::LabelPoint *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  float v117;
  float32x2_t v118;
  float32x2_t v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  BOOL v125;
  BOOL v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x2_t v140;
  int v141;
  unint64_t v142;
  float v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  _DWORD v147[6];

  if (*((_BYTE *)this + 8))
    md::PolylinePixelHiker::validate(this);
  *((float *)this + 192) = *((float *)this + 192) + a2;
  if (*((_BYTE *)this + 11))
    v5 = -a2;
  else
    v5 = a2;
  v6 = *((_QWORD *)this + 86);
  v7 = *((float *)this + 174);
  v8 = *((float *)this + 175);
  v9 = *((_QWORD *)this + 88);
  v10 = *((float *)this + 190);
  v11.i64[0] = v9;
  v11.i64[1] = v6;
  if (v10 == 0.0)
  {
    v13 = *((float *)this + 175);
    v2.i32[0] = *((_DWORD *)this + 174);
  }
  else
  {
    v2.f32[0] = v7 + (float)(*((float *)this + 182) * v10);
    v12.i64[0] = *((_QWORD *)this + 92);
    v12.i64[1] = *((_QWORD *)this + 90);
    v13 = v8 + (float)(*((float *)this + 183) * v10);
    v11 = vmlaq_n_f32(v11, v12, v10);
  }
  v14 = v11.f32[2];
  v15.i32[0] = vdup_laneq_s32((int32x4_t)v11, 3).u32[0];
  v15.i32[1] = v2.i32[0];
  v16 = vsub_f32(v15, *(float32x2_t *)v11.f32);
  v17 = vmul_f32(v16, v16);
  v18 = sqrtf((float)(v17.f32[0] + (float)((float)(v11.f32[2] - v13) * (float)(v11.f32[2] - v13))) + v17.f32[1]);
  v19 = v5 + (float)(v18 * *((float *)this + 191));
  if (v19 >= 0.0 && v19 <= v18)
  {
    v26 = *((float *)&v9 + 1);
    v27 = *((float *)&v6 + 1);
LABEL_97:
    *((float *)this + 191) = v19 / v18;
    v117 = v2.f32[0] + (float)((float)(v19 / v18) * (float)(v11.f32[1] - v2.f32[0]));
    v118 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
    v118.f32[0] = v13;
    v119 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    *((float32x2_t *)this + 2) = vmla_n_f32(v119, vsub_f32(v118, v119), v19 / v18);
    *((float *)this + 6) = v117;
    v120 = *((float *)this + 178);
    v118.i32[0] = *((_DWORD *)this + 179);
    v119.f32[0] = v120 + (float)((float)(v118.f32[0] - v120) * (float)(v19 / v18));
    v121 = v120 - v118.f32[0];
    v122 = (float)((float)((float)(v8 - *(float *)&v6) * (float)(v8 - *(float *)&v6))
                 + (float)((float)(*(float *)&v9 - v27) * (float)(*(float *)&v9 - v27)))
         + (float)((float)(v26 - v7) * (float)(v26 - v7));
    v123 = sqrtf(v122);
    v124 = 1.0 / sqrtf(v122 + (float)(v121 * v121));
    *((float *)this + 10) = v124 * v121;
    *((float *)this + 11) = v124 * v123;
    *((_DWORD *)this + 12) = v119.i32[0];
    v125 = (float)(v19 / v18) < 0.0;
    v126 = (float)(v19 / v18) <= 1.0;
LABEL_98:
    if (!v126)
      v125 = 1;
    *((_BYTE *)this + 10) = v125;
    return;
  }
  v138 = v11;
  v139 = v2;
  v137 = v13;
  v21 = (char *)this + 544;
  if (v5 >= 0.0)
  {
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)v21, 1, (uint64_t)this + 576))
    {
      v22 = *((__int16 *)this + 288);
      v23 = *(_QWORD *)(*((_QWORD *)this + 70) + 8);
      v24 = *(_QWORD *)(*((_QWORD *)this + 70) + 16) - v23;
      v25 = v23 + 16 * v22;
      if (v22 >= v24 >> 4)
        v25 = 0;
    }
    else
    {
      v25 = 0;
    }
    *((_QWORD *)this + 71) = v25;
    LODWORD(v142) = -1;
    if ((md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this + 544, 1, (uint64_t)&v142) & 1) != 0)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 70) + 8) + 16 * (__int16)v142);
      v33 = SWORD1(v142);
      goto LABEL_26;
    }
    v11 = v138;
    v2.i32[0] = v139.i32[0];
    v13 = v137;
    goto LABEL_95;
  }
  if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)v21, -1, (uint64_t)this + 576))
  {
    v28 = *((__int16 *)this + 288);
    v29 = *(_QWORD *)(*((_QWORD *)this + 70) + 8);
    v30 = *(_QWORD *)(*((_QWORD *)this + 70) + 16) - v29;
    v31 = (_QWORD *)(v29 + 16 * v28);
    if (v28 >= v30 >> 4)
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  *((_QWORD *)this + 71) = v31;
  v114 = *((_QWORD *)this + 68);
  v11 = v138;
  v2.i32[0] = v139.i32[0];
  v13 = v137;
  if (!v114
    || *((_DWORD *)this + 146) != *(_DWORD *)(v114 + 252)
    || !v31
    || *((__int16 *)this + 289) < 0
    || (v115 = *((unsigned __int16 *)this + 289),
        v116 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v31 + 16))(*v31),
        v13 = v137,
        v11 = v138,
        v2.i32[0] = v139.i32[0],
        v116 <= v115))
  {
LABEL_95:
    if (!*((_BYTE *)this + 9))
      return;
    v8 = *((float *)this + 175);
    LODWORD(v6) = *((_DWORD *)this + 172);
    LODWORD(v9) = *((_DWORD *)this + 176);
    v27 = *((float *)this + 173);
    v26 = *((float *)this + 177);
    v7 = *((float *)this + 174);
    goto LABEL_97;
  }
  v32 = **((_QWORD **)this + 71);
  v33 = *((__int16 *)this + 289);
LABEL_26:
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v33);
  v35 = v138;
  v36 = *(_OWORD *)(v34 + 16);
  v144 = *(_OWORD *)v34;
  v145 = v36;
  v146 = *(_QWORD *)(v34 + 32);
  v37 = *(_DWORD *)(v34 + 43);
  v147[0] = *(_DWORD *)(v34 + 40);
  *(_DWORD *)((char *)v147 + 3) = v37;
  if (*((_BYTE *)this + 9))
  {
    v38 = *((_QWORD *)this + 68);
    if (!v38
      || *((_DWORD *)this + 146) != *(_DWORD *)(v38 + 252)
      || (v39 = (_QWORD *)*((_QWORD *)this + 71)) == 0
      || *((__int16 *)this + 289) < 0
      || (v40 = *((unsigned __int8 *)this + 540),
          v41 = *((unsigned __int16 *)this + 289),
          v42 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v39 + 16))(*v39),
          v35 = v138,
          v42 <= v41)
      || (v43 = (*(uint64_t (**)(_QWORD, _QWORD))(***((_QWORD ***)this + 71) + 32))(**((_QWORD **)this + 71), *((__int16 *)this + 289)), v35 = v138, *(unsigned __int8 *)(v43 + 2) <= v40))
    {
      v44 = (uint64_t *)((char *)this + 688);
      v45 = v5 * v5;
      v46 = (_DWORD *)((char *)this + 680);
      v47 = (_DWORD *)((char *)this + 632);
      v48 = v35.f32[1];
      v49 = v35.f32[3];
      while (1)
      {
        if (v5 < 0.0)
        {
          v54 = *v44;
          *((_DWORD *)this + 177) = *((_DWORD *)this + 174);
          *(_QWORD *)((char *)this + 700) = v54;
          *((_DWORD *)this + 179) = *((_DWORD *)this + 178);
          v55 = *((_QWORD *)this + 90);
          *((_DWORD *)this + 185) = *((_DWORD *)this + 182);
          *(_QWORD *)((char *)this + 732) = v55;
          v56 = *((_OWORD *)this + 38);
          *((_OWORD *)this + 40) = *((_OWORD *)this + 37);
          *((_OWORD *)this + 41) = v56;
          *((_QWORD *)this + 84) = *((_QWORD *)this + 78);
          *v46 = *v47;
          *(_DWORD *)((char *)this + 683) = *(_DWORD *)((char *)this + 635);
        }
        else
        {
          v50 = *(_QWORD *)((char *)this + 700);
          *((_DWORD *)this + 174) = *((_DWORD *)this + 177);
          *v44 = v50;
          *((_DWORD *)this + 178) = *((_DWORD *)this + 179);
          v51 = *(_QWORD *)((char *)this + 732);
          *((_DWORD *)this + 182) = *((_DWORD *)this + 185);
          *((_QWORD *)this + 90) = v51;
          v52 = *((_OWORD *)this + 41);
          *((_OWORD *)this + 37) = *((_OWORD *)this + 40);
          *((_OWORD *)this + 38) = v52;
          *((_QWORD *)this + 78) = *((_QWORD *)this + 84);
          *v47 = *v46;
          v14 = v137;
          v53 = v138;
          v49 = v138.f32[0];
          v53.f32[0] = v48;
          v139 = v53;
          *(_DWORD *)((char *)this + 635) = *(_DWORD *)((char *)this + 683);
        }
        v141 = 0;
        v57 = md::RoadHiker::pixelForPoint((uint64_t)this, (md::LabelPoint *)&v144, (float32x2_t *)&v142, (float *)&v141);
        *((_BYTE *)this + 9) = v57;
        if (!v57)
          return;
        v60 = v142;
        if (v5 < 0.0)
        {
          *((_DWORD *)this + 172) = v142;
          v61 = *((float *)&v142 + 1);
          v62 = v143;
          *((_DWORD *)this + 173) = HIDWORD(v142);
          *((float *)this + 174) = v62;
          *((_DWORD *)this + 178) = v141;
          v73 = v145;
          *((_OWORD *)this + 37) = v144;
          *((_OWORD *)this + 38) = v73;
          *((_QWORD *)this + 78) = v146;
          *v47 = v147[0];
          v74 = *((float *)this + 190);
          *(_DWORD *)((char *)this + 635) = *(_DWORD *)((char *)v147 + 3);
          if (v74 == 0.0)
          {
            v72 = v14;
            v59.f32[0] = v49;
          }
          else
          {
            v140.i32[0] = -1;
            PointCoordinateAtOffset = md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this + 544, -1, (uint64_t)&v140);
            if ((PointCoordinateAtOffset & 1) != 0)
            {
              v76 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 70) + 8) + 16 * v140.i16[0]);
              v77 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 24))(v76, v140.i16[1]);
              md::RoadHiker::pixelForPoint((uint64_t)this, v77, &v140, 0);
            }
            v78 = md::PolylinePixelHiker::computeBisector(this, (uint64_t)&v140, PointCoordinateAtOffset, (uint64_t *)this + 86, (uint64_t *)((char *)this + 700), 1, (md::LabelPoint *)&v144);
            *((float *)this + 180) = v78;
            *((float *)this + 181) = v79;
            *((float *)this + 182) = v80;
            v81 = *((float *)this + 190);
            *(float *)&v60 = *((float *)this + 172) + (float)(v81 * v78);
            v61 = *((float *)this + 173) + (float)(v81 * v79);
            v62 = *((float *)this + 174) + (float)(v81 * v80);
            v72 = v14;
            v59.f32[0] = v49;
            v142 = __PAIR64__(LODWORD(v61), v60);
            v143 = v62;
          }
          v48 = v139.f32[0];
          v14 = *(float *)&v60;
          v49 = v61;
          v58.f32[0] = v62;
          if (!*((_BYTE *)this + 772))
            goto LABEL_52;
        }
        else
        {
          *((_DWORD *)this + 175) = v142;
          v61 = *((float *)&v142 + 1);
          v62 = v143;
          *((_DWORD *)this + 176) = HIDWORD(v142);
          *((float *)this + 177) = v62;
          *((_DWORD *)this + 179) = v141;
          v63 = v145;
          *((_OWORD *)this + 40) = v144;
          *((_OWORD *)this + 41) = v63;
          *((_QWORD *)this + 84) = v146;
          *v46 = v147[0];
          v64 = *((float *)this + 190);
          *(_DWORD *)((char *)this + 683) = *(_DWORD *)((char *)v147 + 3);
          if (v64 != 0.0)
          {
            v140.i32[0] = -1;
            v65 = md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this + 544, 2, (uint64_t)&v140);
            if ((v65 & 1) != 0)
            {
              v66 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 70) + 8) + 16 * v140.i16[0]);
              v67 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 24))(v66, v140.i16[1]);
              md::RoadHiker::pixelForPoint((uint64_t)this, v67, &v140, 0);
            }
            v68 = md::PolylinePixelHiker::computeBisector(this, (uint64_t)this + 688, 1, (uint64_t *)((char *)this + 700), (uint64_t *)&v140, v65, (md::LabelPoint *)&v144);
            *((float *)this + 183) = v68;
            *((float *)this + 184) = v69;
            *((float *)this + 185) = v70;
            v71 = *((float *)this + 190);
            *(float *)&v60 = *((float *)this + 175) + (float)(v71 * v68);
            v61 = *((float *)this + 176) + (float)(v71 * v69);
            v62 = *((float *)this + 177) + (float)(v71 * v70);
            LODWORD(v142) = v60;
          }
          v72 = *(float *)&v60;
          v59.f32[0] = v61;
          v48 = v62;
          v58 = v139;
          if (!*((_BYTE *)this + 772))
            goto LABEL_52;
        }
        if ((float)((float)((float)(*((float *)this + 186) * (float)(v72 - v14))
                           + (float)(*((float *)this + 187) * (float)(v59.f32[0] - v49)))
                   + (float)(*((float *)this + 188) * (float)(v48 - v58.f32[0]))) <= 0.0)
          break;
LABEL_52:
        v137 = v72;
        v138 = v59;
        v139 = v58;
        v82 = (float)((float)((float)(*(float *)&v60 - *((float *)this + 4))
                            * (float)(*(float *)&v60 - *((float *)this + 4)))
                    + (float)((float)(v61 - *((float *)this + 5)) * (float)(v61 - *((float *)this + 5))))
            + (float)((float)(v62 - *((float *)this + 6)) * (float)(v62 - *((float *)this + 6)));
        if (v82 > v45)
          goto LABEL_76;
        v83 = (char *)this + 544;
        if (v5 < 0.0)
        {
          if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)v83, -1, (uint64_t)this + 576))
          {
            v88 = *((__int16 *)this + 288);
            v89 = *(_QWORD *)(*((_QWORD *)this + 70) + 8);
            v90 = *(_QWORD *)(*((_QWORD *)this + 70) + 16) - v89;
            v91 = (_QWORD *)(v89 + 16 * v88);
            if (v88 >= v90 >> 4)
              v92 = 0;
            else
              v92 = v91;
          }
          else
          {
            v92 = 0;
          }
          *((_QWORD *)this + 71) = v92;
          v99 = *((_QWORD *)this + 68);
          if (!v99)
            goto LABEL_73;
          v100 = *(_DWORD *)(v99 + 252);
          v96 = 1;
          if (*((_DWORD *)this + 146) != v100 || !v92)
            goto LABEL_74;
          v101 = *((__int16 *)this + 289);
          if (v101 < 0
            || (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v92 + 16))(*v92) <= (unint64_t)(unsigned __int16)v101)
          {
LABEL_73:
            v96 = 1;
            goto LABEL_74;
          }
          v93 = **((_QWORD **)this + 71);
          v94 = *((__int16 *)this + 289);
        }
        else
        {
          if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)v83, 1, (uint64_t)this + 576))
          {
            v84 = *((__int16 *)this + 288);
            v85 = *(_QWORD *)(*((_QWORD *)this + 70) + 8);
            v86 = *(_QWORD *)(*((_QWORD *)this + 70) + 16) - v85;
            v87 = v85 + 16 * v84;
            if (v84 >= v86 >> 4)
              v87 = 0;
          }
          else
          {
            v87 = 0;
          }
          *((_QWORD *)this + 71) = v87;
          v140.i32[0] = -1;
          if ((md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this + 544, 1, (uint64_t)&v140) & 1) == 0)
            goto LABEL_73;
          v93 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 70) + 8) + 16 * v140.i16[0]);
          v94 = v140.i16[1];
        }
        v95 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 24))(v93, v94);
        v96 = 0;
        v97 = *(_OWORD *)(v95 + 16);
        v144 = *(_OWORD *)v95;
        v145 = v97;
        v146 = *(_QWORD *)(v95 + 32);
        v98 = *(_DWORD *)(v95 + 43);
        v147[0] = *(_DWORD *)(v95 + 40);
        *(_DWORD *)((char *)v147 + 3) = v98;
LABEL_74:
        if (!*((_BYTE *)this + 9))
          return;
        if (v96)
        {
LABEL_76:
          v102 = v137 - v14;
          v103 = v138.f32[0] - v49;
          v104 = v48 - v139.f32[0];
          v105 = sqrtf((float)((float)(v102 * v102) + (float)(v103 * v103)) + (float)(v104 * v104));
          v106 = 1.0;
          *((float *)this + 7) = (float)(v137 - v14) * (float)(1.0 / v105);
          *((float *)this + 8) = (float)(v138.f32[0] - v49) * (float)(1.0 / v105);
          *((float *)this + 9) = (float)(v48 - v139.f32[0]) * (float)(1.0 / v105);
          if (v5 >= 0.0)
            v107 = 0.0;
          else
            v107 = 1.0;
          if (v5 < 0.0)
            v106 = 0.0;
          if (v82 <= v45)
          {
            v108 = v5 / v105;
            v109 = *((float *)this + 4);
            v110 = *((float *)this + 5);
            v111 = *((float *)this + 6);
            v112 = (float)(v5 / v105) + v106;
            if ((float)((float)((float)((float)((float)(v14 + (float)(v112 * v102)) - v109)
                                       * (float)((float)(v14 + (float)(v112 * v102)) - v109))
                               + (float)((float)((float)(v49 + (float)(v112 * v103)) - v110)
                                       * (float)((float)(v49 + (float)(v112 * v103)) - v110)))
                       + (float)((float)((float)(v139.f32[0] + (float)(v112 * v104)) - v111)
                               * (float)((float)(v139.f32[0] + (float)(v112 * v104)) - v111))) <= v45)
            {
              v113 = v112 + v108;
              if ((float)((float)((float)((float)((float)(v14 + (float)((float)(v112 + v108) * v102)) - v109)
                                         * (float)((float)(v14 + (float)((float)(v112 + v108) * v102)) - v109))
                                 + (float)((float)((float)(v49 + (float)((float)(v112 + v108) * v103)) - v110)
                                         * (float)((float)(v49 + (float)((float)(v112 + v108) * v103)) - v110)))
                         + (float)((float)((float)(v139.f32[0] + (float)((float)(v112 + v108) * v104)) - v111)
                                 * (float)((float)(v139.f32[0] + (float)((float)(v112 + v108) * v104)) - v111))) > v45)
              {
                v106 = (float)(v5 / v105) + v106;
                v112 = v112 + v108;
              }
              else
              {
                v112 = v113 + v108;
                if ((float)((float)((float)((float)((float)(v14 + (float)((float)(v113 + v108) * v102)) - v109)
                                           * (float)((float)(v14 + (float)((float)(v113 + v108) * v102)) - v109))
                                   + (float)((float)((float)(v49 + (float)((float)(v113 + v108) * v103)) - v110)
                                           * (float)((float)(v49 + (float)((float)(v113 + v108) * v103)) - v110)))
                           + (float)((float)((float)(v139.f32[0] + (float)((float)(v113 + v108) * v104)) - v111)
                                   * (float)((float)(v139.f32[0] + (float)((float)(v113 + v108) * v104)) - v111))) > v45)
                {
                  v106 = v113;
                }
                else
                {
                  v106 = v113 + v108;
                  v112 = v112 + v108;
                  if ((float)((float)((float)((float)((float)(v14 + (float)(v112 * v102)) - v109)
                                             * (float)((float)(v14 + (float)(v112 * v102)) - v109))
                                     + (float)((float)((float)(v49 + (float)(v112 * v103)) - v110)
                                             * (float)((float)(v49 + (float)(v112 * v103)) - v110)))
                             + (float)((float)((float)(v139.f32[0] + (float)(v112 * v104)) - v111)
                                     * (float)((float)(v139.f32[0] + (float)(v112 * v104)) - v111))) <= v45)
                    break;
                }
              }
            }
            v105 = fabsf(v108) * v105;
            v107 = v106;
            v106 = v112;
          }
          for (; v105 > 0.5; v105 = v105 * 0.5)
          {
            v127 = (float)(v106 + v107) * 0.5;
            v128 = (float)(v49 + (float)(v127 * v103)) - *((float *)this + 5);
            if ((float)((float)((float)((float)((float)(v14 + (float)(v127 * v102)) - *((float *)this + 4))
                                       * (float)((float)(v14 + (float)(v127 * v102)) - *((float *)this + 4)))
                               + (float)(v128 * v128))
                       + (float)((float)((float)(v139.f32[0] + (float)(v127 * v104)) - *((float *)this + 6))
                               * (float)((float)(v139.f32[0] + (float)(v127 * v104)) - *((float *)this + 6)))) >= v45)
              v106 = (float)(v106 + v107) * 0.5;
            else
              v107 = (float)(v106 + v107) * 0.5;
          }
          *((float *)this + 191) = v106;
          *((float *)this + 4) = v14 + (float)(v106 * v102);
          *((float *)this + 5) = v49 + (float)(v106 * v103);
          *((float *)this + 6) = v139.f32[0] + (float)(v106 * v104);
          v129 = *((float *)this + 178);
          v130 = *((float *)this + 179);
          *((float *)this + 12) = v129 + (float)((float)(v130 - v129) * v106);
          v131 = v129 - v130;
          v132 = *((float *)this + 175) - *((float *)this + 172);
          v133 = *((float *)this + 176) - *((float *)this + 173);
          v134 = (float)((float)(v132 * v132) + (float)(v133 * v133))
               + (float)((float)(*((float *)this + 177) - *((float *)this + 174))
                       * (float)(*((float *)this + 177) - *((float *)this + 174)));
          v135 = sqrtf(v134);
          v136 = 1.0 / sqrtf(v134 + (float)(v131 * v131));
          *((float *)this + 10) = v136 * v131;
          *((float *)this + 11) = v136 * v135;
          v125 = v106 < 0.0;
          v126 = v106 <= 1.0;
          goto LABEL_98;
        }
      }
    }
    *((_BYTE *)this + 9) = 0;
  }
}

uint64_t md::PolylinePixelHiker::setCursor(md::PolylinePixelHiker *this, float a2)
{
  return (*(uint64_t (**)(md::PolylinePixelHiker *, float))(*(_QWORD *)this + 40))(this, a2 - *((float *)this + 192));
}

void md::PolylinePixelHiker::validate(md::PolylinePixelHiker *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  md::LabelPoint *v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x2_t *v21;
  md::LabelPoint *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  float v28;
  float v29;
  float v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int32x2_t v34;
  float v35;
  float v36;
  BOOL v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  _BYTE v45[48];

  *((_WORD *)this + 4) = 256;
  *((_BYTE *)this + 10) = 0;
  v2 = *((_QWORD *)this + 68);
  if (!v2)
    goto LABEL_30;
  if (*((_DWORD *)this + 146) != *(_DWORD *)(v2 + 252))
    goto LABEL_30;
  v3 = (_QWORD *)*((_QWORD *)this + 71);
  if (!v3)
    goto LABEL_30;
  if ((*((__int16 *)this + 289) & 0x8000000000000000) != 0)
    goto LABEL_30;
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  *((_QWORD *)this + 74) = *(_QWORD *)v4;
  *((_QWORD *)this + 75) = *(_QWORD *)(v4 + 8);
  *((_QWORD *)this + 76) = *(_QWORD *)(v4 + 16);
  *((_QWORD *)this + 77) = *(_QWORD *)(v4 + 24);
  *((_QWORD *)this + 78) = *(_QWORD *)(v4 + 32);
  v5 = *(_DWORD *)(v4 + 40);
  *(_DWORD *)((char *)this + 635) = *(_DWORD *)(v4 + 43);
  *((_DWORD *)this + 158) = v5;
  v6 = *((_QWORD *)this + 68);
  if (!v6)
    goto LABEL_30;
  if (*((_DWORD *)this + 146) != *(_DWORD *)(v6 + 252))
    goto LABEL_30;
  v7 = (_QWORD *)*((_QWORD *)this + 71);
  if (!v7 || *((__int16 *)this + 289) < 0)
    goto LABEL_30;
  v8 = *((unsigned __int16 *)this + 289);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 16))(*v7);
  *((_BYTE *)this + 9) = v9 > v8;
  if (v9 <= v8)
    return;
  v10 = md::RoadHiker::pixelForPoint((uint64_t)this, (md::PolylinePixelHiker *)((char *)this + 592), (float32x2_t *)this + 86, (float *)this + 178);
  *((_BYTE *)this + 9) = v10;
  if (!v10)
    return;
  v11 = md::LabelLinePosition::pointAtOffset((md::PolylinePixelHiker *)((char *)this + 544), 1);
  if (!v11)
  {
LABEL_30:
    *((_BYTE *)this + 9) = 0;
    return;
  }
  v12 = (md::LabelPoint *)v11;
  *((_QWORD *)this + 80) = *(_QWORD *)v11;
  *((_QWORD *)this + 81) = *(_QWORD *)(v11 + 8);
  *((_QWORD *)this + 82) = *(_QWORD *)(v11 + 16);
  *((_QWORD *)this + 83) = *(_QWORD *)(v11 + 24);
  *((_QWORD *)this + 84) = *(_QWORD *)(v11 + 32);
  v13 = *(_DWORD *)(v11 + 40);
  *(_DWORD *)((char *)this + 683) = *(_DWORD *)(v11 + 43);
  *((_DWORD *)this + 170) = v13;
  v14 = md::RoadHiker::pixelForPoint((uint64_t)this, (md::PolylinePixelHiker *)((char *)this + 640), (float32x2_t *)((char *)this + 700), (float *)this + 179);
  *((_BYTE *)this + 9) = v14;
  if (v14)
  {
    v15 = *((float *)this + 178) - *((float *)this + 179);
    v16 = *((float *)this + 175) - *((float *)this + 172);
    v17 = *((float *)this + 176) - *((float *)this + 173);
    v18 = (float)((float)(v16 * v16) + (float)(v17 * v17))
        + (float)((float)(*((float *)this + 177) - *((float *)this + 174))
                * (float)(*((float *)this + 177) - *((float *)this + 174)));
    v19 = sqrtf(v18);
    v20 = 1.0 / sqrtf(v18 + (float)(v15 * v15));
    *((float *)this + 10) = v20 * v15;
    *((float *)this + 11) = v20 * v19;
    md::LabelPoint::lerped((md::LabelPoint *)v45, (md::PolylinePixelHiker *)((char *)this + 592), *((float *)this + 145), (uint64_t)this + 640);
    if (md::RoadHiker::pixelForPoint((uint64_t)this, (md::LabelPoint *)v45, (float32x2_t *)this + 2, (float *)this + 12))
    {
      v21 = (float32x2_t *)((char *)this + 692);
      if (*((float *)this + 190) != 0.0)
      {
        v22 = (md::LabelPoint *)md::LabelLinePosition::pointAtOffset((md::PolylinePixelHiker *)((char *)this + 544), -1);
        if (v22)
          md::RoadHiker::pixelForPoint((uint64_t)this, v22, &v44, 0);
        *((float *)this + 180) = md::PolylinePixelHiker::computeBisector(this, (uint64_t)&v44, v22 != 0, (uint64_t *)this + 86, (uint64_t *)((char *)this + 700), 1, (md::PolylinePixelHiker *)((char *)this + 592));
        *((_DWORD *)this + 181) = v23;
        *((_DWORD *)this + 182) = v24;
        v25 = md::LabelLinePosition::pointAtOffset((md::PolylinePixelHiker *)((char *)this + 544), 2);
        if (v25)
          md::RoadHiker::pixelForPoint((uint64_t)this, v12, &v43, 0);
        *((float *)this + 183) = md::PolylinePixelHiker::computeBisector(this, (uint64_t)this + 688, 1, (uint64_t *)((char *)this + 700), (uint64_t *)&v43, v25 != 0, (md::PolylinePixelHiker *)((char *)this + 640));
        *((_DWORD *)this + 184) = v26;
        *((_DWORD *)this + 185) = v27;
      }
      v28 = *((float *)this + 175);
      v29 = *((float *)this + 172);
      v30 = v28 - v29;
      v31 = *(float32x2_t *)((char *)this + 704);
      v32 = *v21;
      v33 = vsub_f32(v31, *v21);
      v34 = (int32x2_t)vmul_f32(v33, v33);
      *(float *)v34.i32 = sqrtf((float)(*(float *)v34.i32 + (float)(v30 * v30)) + *(float *)&v34.i32[1]);
      *((_BYTE *)this + 9) = *(float *)v34.i32 > 0.001;
      if (*(float *)v34.i32 > 0.001)
      {
        *((float *)this + 7) = v30 / *(float *)v34.i32;
        *((float32x2_t *)this + 4) = vdiv_f32(v33, (float32x2_t)vdup_lane_s32(v34, 0));
        v35 = fabsf(v30);
        v36 = fabsf(v33.f32[0]);
        v37 = v35 <= v36;
        v38 = 20;
        if (v35 <= v36)
        {
          v39 = v32.f32[0];
        }
        else
        {
          v38 = 16;
          v39 = v29;
        }
        if (v37)
          v30 = v33.f32[0];
        v40 = (float)(*(float *)((char *)this + v38) - v39) / v30;
        *((float *)this + 191) = v40;
        v41 = *((float *)this + 190);
        if (v41 != 0.0)
        {
          *((float *)this + 4) = (float)(v29 + (float)(*((float *)this + 180) * v41))
                               + (float)(v40
                                       * (float)((float)(v28 - (float)(v29 + (float)(*((float *)this + 180) * v41)))
                                               + (float)(*((float *)this + 183) * v41)));
          v42 = vmla_n_f32(v32, *(float32x2_t *)((char *)this + 724), v41);
          *(float32x2_t *)((char *)this + 20) = vmla_n_f32(v42, vadd_f32(vmla_n_f32(vneg_f32(v42), *(float32x2_t *)((char *)this + 736), v41), v31), v40);
        }
        *((_DWORD *)this + 192) = 0;
      }
    }
  }
}

uint64_t md::RoadHiker::pixelForPoint(uint64_t a1, md::LabelPoint *this, float32x2_t *a3, float *a4)
{
  float v8;
  float v9;
  double v10;
  float64x2_t *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float64x2_t v20;
  double v21;
  float v22;
  double v23;
  uint64_t v25;
  long double v26;
  long double v27;
  double v28;
  long double v29;
  double v30;
  __double2 v31;
  double v32;
  __double2 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  long double v39;
  long double v40;
  double v41;
  long double v42;
  double v43;
  __double2 v44;
  double v45;
  __double2 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;

  v8 = *((float *)this + 10);
  if (v8 == 3.4028e38)
    v8 = 0.0;
  v9 = v8 * *(float *)(a1 + 52);
  v10 = v9;
  if (!*(_BYTE *)(a1 + 13))
  {
    if (*(_BYTE *)(a1 + 65))
    {
      if (*((_BYTE *)this + 44))
      {
        v14 = *(double *)this;
        v15 = *((double *)this + 1);
        v16 = *((double *)this + 2);
        if (v9 == 0.0)
          goto LABEL_25;
        goto LABEL_24;
      }
      v26 = *((double *)this + 3) * 6.28318531;
      v27 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
      v28 = atan(v27) * 2.0 + -1.57079633;
      v29 = fmod(v26, 6.28318531);
      v30 = fmod(v29 + 6.28318531, 6.28318531) + -3.14159265;
      v31 = __sincos_stret(v28);
      v32 = 6378137.0 / sqrt(v31.__sinval * v31.__sinval * -0.00669437999 + 1.0);
      v33 = __sincos_stret(v30);
      v14 = v32 * v31.__cosval * v33.__cosval;
      v15 = v32 * v31.__cosval * v33.__sinval;
      v16 = v31.__sinval * 0.99330562 * v32;
      *(double *)this = v14;
      *((double *)this + 1) = v15;
      *((double *)this + 2) = v16;
      *((_BYTE *)this + 44) = 1;
      if (v9 != 0.0)
      {
LABEL_24:
        v53 = v16;
        v48 = v15;
        v14 = v14 + md::LabelPoint::geocentricNormal(this) * v10;
        v15 = v48 + v34 * v10;
        v16 = v53 + v35 * v10;
      }
    }
    else
    {
      v52 = *(double *)(a1 + 56) * v10;
      v50 = *(double *)md::LabelPoint::mercatorPoint(this);
      v25 = md::LabelPoint::mercatorPoint(this);
      v14 = v50;
      v16 = v52;
      v15 = *(double *)(v25 + 8);
      v10 = v52;
    }
LABEL_25:
    v36 = *(double *)(a1 + 152);
    v37 = *(double *)(a1 + 184);
    if (a4)
    {
      v38 = v37 + v36 * v10;
      *a4 = v38;
    }
    v23 = 1.0
        / (*(double *)(a1 + 192) + *(double *)(a1 + 96) * v14 + *(double *)(a1 + 128) * v15 + *(double *)(a1 + 160)
                                                                                            * v16);
    v22 = v23 * (v37 + *(double *)(a1 + 88) * v14 + *(double *)(a1 + 120) * v15 + v36 * v16);
    v20 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(a1 + 168), *(float64x2_t *)(a1 + 72), v14), *(float64x2_t *)(a1 + 104), v15), *(float64x2_t *)(a1 + 136), v16);
    goto LABEL_28;
  }
  v11 = (float64x2_t *)(a1 + 72);
  if (*(_BYTE *)(a1 + 65))
  {
    if (!*(_BYTE *)(a1 + 64))
    {
      if (*((_BYTE *)this + 44))
      {
        v12 = *((double *)this + 1);
        v51 = *(double *)this;
        v13 = *((double *)this + 2);
        if (v9 == 0.0)
          goto LABEL_15;
      }
      else
      {
        v39 = *((double *)this + 3) * 6.28318531;
        v40 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
        v41 = atan(v40) * 2.0 + -1.57079633;
        v42 = fmod(v39, 6.28318531);
        v43 = fmod(v42 + 6.28318531, 6.28318531) + -3.14159265;
        v44 = __sincos_stret(v41);
        v45 = 6378137.0 / sqrt(v44.__sinval * v44.__sinval * -0.00669437999 + 1.0);
        v46 = __sincos_stret(v43);
        v12 = v45 * v44.__cosval * v46.__sinval;
        v13 = v44.__sinval * 0.99330562 * v45;
        v51 = v45 * v44.__cosval * v46.__cosval;
        *(double *)this = v51;
        *((double *)this + 1) = v12;
        *((double *)this + 2) = v13;
        *((_BYTE *)this + 44) = 1;
        if (v9 == 0.0)
          goto LABEL_15;
      }
      v47 = v13;
      v49 = v12;
      v51 = v51 + md::LabelPoint::geocentricNormal(this) * v10;
      v12 = v49 + v17 * v10;
      v13 = v47 + v18 * v10;
      goto LABEL_15;
    }
    v51 = *(double *)md::LabelPoint::mercatorPoint(this);
    v12 = *(double *)(md::LabelPoint::mercatorPoint(this) + 8);
    v11 = (float64x2_t *)(a1 + 200);
    v13 = 0.0;
  }
  else
  {
    v51 = *(double *)md::LabelPoint::mercatorPoint(this);
    v12 = *(double *)(md::LabelPoint::mercatorPoint(this) + 8);
    v13 = *(double *)(a1 + 56) * v10;
  }
LABEL_15:
  if (a4)
  {
    v19 = v11[7].f64[0] + v11[5].f64[0] * v10;
    *a4 = v19;
  }
  v20 = vmlaq_n_f64(vmlaq_n_f64(v11[6], *v11, v51), v11[2], v12);
  v21 = v11[7].f64[1] + v11[1].f64[1] * v51 + v11[3].f64[1] * v12;
  if (v13 != 0.0)
  {
    v20 = vmlaq_n_f64(v20, v11[4], v13);
    v21 = v21 + v11[5].f64[1] * v13;
  }
  if (v21 <= 2.22044605e-16)
    return 0;
  v22 = 0.0;
  v23 = 1.0 / v21;
LABEL_28:
  *a3 = vcvt_f32_f64(vmulq_n_f64(v20, v23));
  a3[1].f32[0] = v22;
  return 1;
}

uint64_t ta2::TextureAtlasRegion::uvRect(ta2::TextureAtlasRegion *this)
{
  return (uint64_t)this + 48;
}

double gm::operator*<double,4,4,4>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double result;
  double v46;
  double v47;
  double v48;
  double v49;

  v3 = a2[1];
  v5 = a2[4];
  v4 = a2[5];
  v6 = a2[8];
  v7 = a2[9];
  v8 = a3[2];
  v9 = *a3 * *a2 + a3[1] * v5 + v8 * v6;
  v10 = a3[4];
  v48 = a3[3];
  v49 = *a3;
  v11 = a3[5];
  v47 = a3[1];
  v12 = a3[6];
  v13 = v10 * *a2 + v11 * v5 + v12 * v6;
  v14 = a3[8];
  v46 = a3[7];
  v15 = a3[9];
  v16 = a3[10];
  v17 = v14 * *a2 + v15 * v5 + v16 * v6;
  v19 = a3[11];
  v18 = a3[12];
  v20 = a3[13];
  v21 = v18 * *a2 + v20 * v5;
  v22 = a3[14];
  v23 = v21 + v22 * v6;
  v25 = a2[12];
  v24 = a2[13];
  v27 = v22;
  v26 = a3[15];
  v28 = *a3 * v3 + v47 * v4 + v8 * v7 + v48 * v24;
  *a1 = v9 + v48 * v25;
  a1[1] = v28;
  a1[4] = v13 + v46 * v25;
  a1[5] = v10 * v3 + v11 * v4 + v12 * v7 + v46 * v24;
  a1[8] = v17 + v19 * v25;
  a1[9] = v14 * v3 + v15 * v4 + v16 * v7 + v19 * v24;
  a1[12] = v23 + v26 * v25;
  a1[13] = v18 * v3 + v20 * v4 + v22 * v7 + v26 * v24;
  v29 = a2[2];
  v30 = a2[3];
  v31 = a2[6];
  v32 = a2[7];
  v33 = a2[10];
  v34 = a2[11];
  v35 = v49 * v29 + v47 * v31 + v8 * v33;
  v36 = v10 * v29 + v11 * v31;
  v37 = v14 * v29 + v15 * v31;
  v38 = v18 * v29 + v20 * v31;
  v39 = a2[14];
  v40 = a2[15];
  v41 = v36 + v12 * v33 + v46 * v39;
  v42 = v37 + v16 * v33 + v19 * v39;
  v43 = v38 + v27 * v33;
  v44 = a3[15];
  result = v43 + v44 * v39;
  a1[2] = v35 + v48 * v39;
  a1[3] = v49 * v30 + v47 * v32 + v8 * v34 + v48 * v40;
  a1[6] = v41;
  a1[7] = v10 * v30 + v11 * v32 + v12 * v34 + v46 * v40;
  a1[10] = v42;
  a1[11] = v14 * v30 + v15 * v32 + v16 * v34 + v19 * v40;
  a1[14] = result;
  a1[15] = v18 * v30 + v20 * v32 + v27 * v34 + v44 * v40;
  return result;
}

uint64_t md::TextLabelPart::modelMatrix(md::TextLabelPart *this)
{
  return *((_QWORD *)this + 105);
}

float md::CurvedTextLabelPart::hikerWidth(uint64_t a1, int a2)
{
  int v2;
  float result;
  uint64_t v4;

  v4 = 0x8000007F7FFFFFLL;
  v2 = md::CurvedTextLabelPart::populateGlyphOffsets(a1, a2, 0, (float *)&v4);
  result = *((float *)&v4 + 1) - *(float *)&v4;
  if (!v2)
    return 0.0;
  return result;
}

uint64_t md::CurvedTextLabelPart::populateGlyphOffsets(uint64_t a1, int a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  float v38;
  double v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  float *v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  float *v55;
  float v56;
  float *v57;
  uint64_t v58;

  v4 = 592;
  if (!a2)
    v4 = 576;
  v5 = *(_QWORD **)(a1 + v4);
  v6 = (char *)v5[4];
  v7 = (char *)v5[5];
  v8 = v7 - v6;
  if (v7 == v6)
    return 0;
  v9 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6 || !*(_BYTE *)(v9 + 61))
    return 0;
  v12 = (unsigned __int128)(v8 * (__int128)0x2E8BA2E8BA2E8BA3) >> 64;
  v14 = *(_QWORD *)(a1 + 32);
  if (a2 == 1)
  {
    v15 = *(float *)(v14 + 68) * *(float *)(a1 + 740);
    v16 = a1 + 1152;
  }
  else
  {
    v15 = *(float *)(v14 + 20) * *(float *)(a1 + 628);
    if (a2)
      v16 = a1 + 1152;
    else
      v16 = a1 + 960;
  }
  v13 = v12 >> 4;
  v18 = (v12 >> 4) + ((unint64_t)v12 >> 63);
  v19 = v15 / *(float *)(v9 + 48);
  if (*(_BYTE *)(v16 + 181) == 2)
  {
    v20 = v15 * 0.5;
    v21 = v19 * 0.5;
    if (v18 <= 1)
      v22 = 1;
    else
      v22 = v13 + ((unint64_t)v12 >> 63);
    v23 = (float *)(a3 + 4);
    v24 = 0.0;
    v25 = -3.4028e38;
    v26 = 3.4028e38;
    v27 = 0.0;
    do
    {
      v29 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 && *(_BYTE *)(v29 + 61))
      {
        if (*(_BYTE *)(v29 + 59))
        {
          v30 = v21 * (float)(*(float *)(v29 + 40) - *(float *)(v29 + 32));
          v28 = fmaxf(v20, v30);
        }
        else
        {
          v30 = v21 * (float)(*(float *)(v29 + 44) - *(float *)(v29 + 36));
          v28 = v20;
        }
        v27 = (float)(v24 + v27) + v28;
        if (a3)
        {
          *(v23 - 1) = v27;
          *v23 = 0.0;
        }
        v26 = fminf(v26, v27 - v30);
        v25 = fmaxf(v25, v27 + v30);
      }
      else
      {
        v28 = v24;
      }
      v23 += 2;
      v6 += 88;
      v24 = v28;
      --v22;
    }
    while (v22);
  }
  else
  {
    if (v18 <= 1)
      v31 = 1;
    else
      v31 = v13 + ((unint64_t)v12 >> 63);
    v32 = (uint64_t *)(v6 + 32);
    v25 = -3.4028e38;
    v26 = 3.4028e38;
    if (a3)
    {
      v33 = (uint64_t *)a3;
      do
      {
        v34 = *v32;
        *v33 = *v32;
        v35 = *(v32 - 4);
        if (v35 && *(_BYTE *)(v35 + 61))
        {
          v26 = fminf(v26, *(float *)&v34 + (float)(*(float *)(v35 + 32) * v19));
          v25 = fmaxf(v25, *(float *)&v34 + (float)(*(float *)(v35 + 40) * v19));
        }
        ++v33;
        v32 += 11;
        --v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        v36 = *(v32 - 4);
        if (v36 && *(_BYTE *)(v36 + 61))
        {
          v26 = fminf(v26, *(float *)v32 + (float)(*(float *)(v36 + 32) * v19));
          v25 = fmaxf(v25, *(float *)v32 + (float)(*(float *)(v36 + 40) * v19));
        }
        v32 += 11;
        --v31;
      }
      while (v31);
    }
  }
  v37 = v18 - 2;
  if (v18 >= 2)
  {
    if (*(_BYTE *)(a1 + 1416))
    {
      v38 = *(float *)(v16 + 188);
      if (v38 > 0.0)
      {
        v39 = *(double *)(a1 + 1424);
        v40 = (float)(v26 - v25) + v39 * 409.600006 * exp2f(*(float *)v16) * *(float *)(v16 + 36);
        if (v40 > 0.0)
        {
          v41 = v5[2];
          if (*(_BYTE *)(*(_QWORD *)v41 + 131))
          {
            v42 = v18 - 1;
            v43 = (float)(v18 - 1);
            v44 = fminf(v40 / v43, v38);
            if (a3)
            {
              if (v18 >= 3)
              {
                v45 = 1;
                if (a3 + 8 + 8 * v37 >= a3 + 8 && !(v37 >> 61))
                {
                  v53 = 0;
                  v54 = v42 & 0xFFFFFFFFFFFFFFFELL;
                  v55 = (float *)(a3 + 16);
                  do
                  {
                    v56 = *v55 + (float)(v44 * (float)(unint64_t)(v53 + 2));
                    *(v55 - 2) = *(v55 - 2) + (float)(v44 * (float)(unint64_t)(v53 + 1));
                    *v55 = v56;
                    v55 += 4;
                    v53 += 2;
                  }
                  while (v54 != v53);
                  if (v42 == v54)
                    goto LABEL_62;
                  v45 = v42 | 1;
                }
              }
              else
              {
                v45 = 1;
              }
              v57 = (float *)(a3 + 8 * v45);
              do
              {
                *v57 = *v57 + (float)(v44 * (float)(unint64_t)v45);
                v57 += 2;
                ++v45;
              }
              while (v18 != v45);
            }
LABEL_62:
            v25 = v25 + (float)(v44 * v43);
            goto LABEL_63;
          }
          if (*(_BYTE *)(*(_QWORD *)v41 + 132))
          {
            v46 = *(unsigned __int8 *)(v41 + 123);
            if (v46 >= 2)
            {
              v43 = (float)(v46 - 1);
              v44 = fminf(v40 / v43, v38);
              if (a3)
              {
                v47 = 0;
                v48 = *(_QWORD *)(v41 + 56);
                v49 = v18 - 1;
                v50 = (float *)(a3 + 8);
                v51 = (unsigned __int8 *)(v48 + 43);
                do
                {
                  v52 = *v51;
                  v51 += 24;
                  v47 += v52;
                  *v50 = *v50 + (float)(v44 * (float)v47);
                  v50 += 2;
                  --v49;
                }
                while (v49);
              }
              goto LABEL_62;
            }
          }
        }
      }
    }
  }
LABEL_63:
  if (a3)
  {
    v58 = a3 + 8 * v18;
    *(float *)v58 = v25;
    *(_DWORD *)(v58 + 4) = 0;
  }
  *a4 = v26;
  a4[1] = v25;
  return 1;
}

float md::PolylinePixelHiker::enablePathRetraceCheck(uint64_t a1, uint64_t a2)
{
  float result;

  *(_BYTE *)(a1 + 772) = 1;
  *(_DWORD *)(a1 + 744) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 4);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 752) = result;
  return result;
}

uint64_t md::PolylineLabelPlacement::ensureValidIterator(uint64_t this, double a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 48);
  if (!v2 || *(_DWORD *)(this + 88) != *(_DWORD *)(v2 + 252) || !*(_QWORD *)(this + 72) || *(__int16 *)(this + 82) < 0)
    return md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(this + 48), *(unsigned __int8 *)(this + 212), a2);
  return this;
}

void ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void (**v11)(_QWORD, _QWORD);
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  int v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a2;
  v6 = a3;
  v7 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_2;
  v22[3] = &unk_1E42F3BB0;
  v8 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(a1 + 40);
  v26 = v8;
  v9 = v6;
  v23 = v9;
  v24 = *(id *)(a1 + 32);
  v16 = v7;
  v17 = 3221225472;
  v18 = ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_3;
  v19 = &unk_1E42F3BD8;
  v10 = (id)MEMORY[0x1A1AF5730](v22);
  v20 = v10;
  v21 = *(_DWORD *)(a1 + 64);
  v11 = (void (**)(_QWORD, _QWORD))MEMORY[0x1A1AF5730](&v16);
  v12 = &stru_1E4315B30;
  if (objc_msgSend(v5, "length", v16, v17, v18, v19))
  {
    objc_msgSend(&stru_1E4315B30, "stringByAppendingString:", v5);
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  ((void (**)(_QWORD, __CFString *))v11)[2](v11, v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

}

void sub_19F0AF9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

id ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  float v5;
  float v6;

  v3 = a2;
  (*(void (**)(float))(*(_QWORD *)(a1 + 32) + 16))(*(float *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    v5 = *(float *)(a1 + 40);
    if (v5 >= 2.6)
    {
      (*(void (**)(float))(*(_QWORD *)(a1 + 32) + 16))(2.6);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
        goto LABEL_9;
      v5 = *(float *)(a1 + 40);
    }
    v6 = ceilf(v5);
    if (v6 <= 0.0)
    {
LABEL_8:
      v4 = 0;
    }
    else
    {
      while (1)
      {
        (*(void (**)(float))(*(_QWORD *)(a1 + 32) + 16))(v6);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        if (v4)
          break;
        v6 = v6 + -1.0;
        if (v6 <= 0.0)
          goto LABEL_8;
      }
    }
  }
LABEL_9:

  return v4;
}

void sub_19F0AFAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_2(uint64_t a1, void *a2, float a3)
{
  id v5;
  unint64_t v6;
  float v7;
  void *v8;
  double v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v5 = a2;
  v6 = vcvtms_u32_f32(a3);
  v7 = (float)((float)(a3 - floorf(a3)) * 10.0) + 0.5;
  if ((int)v7)
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("@%lu.%ux"), v6, (int)v7);
  else
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("@%lux"), v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = a3;
  v10 = *(uint64_t **)(a1 + 56);
  v11 = *((char *)v10 + 23);
  if (a3 <= 1.9)
  {
    if (v11 < 0)
      v10 = (uint64_t *)*v10;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s%@.%@"), v9, v10, v5, *(_QWORD *)(a1 + 32));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v11 < 0)
      v10 = (uint64_t *)*v10;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s%@%@.%@"), v9, v10, v5, v8, *(_QWORD *)(a1 + 32));
    v12 = objc_claimAutoreleasedReturnValue();
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  objc_msgSend(*(id *)(a1 + 40), "dataForResourceWithName:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_19F0AFC14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F0AFDA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::RegionalResourceLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  void *v8;
  void *v9;
  unint64_t v10;
  int v11;
  int v12;
  _BOOL4 v13;
  void *v14;
  unint64_t i;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unint64_t j;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  _BOOL4 v31;
  void *v32;
  unint64_t k;
  unsigned int v35;
  unsigned int v36;
  char v37;
  unint64_t m;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  _BOOL4 v47;
  _BOOL4 v48;
  void *v50;
  uint64_t *v51;
  _BYTE v52[2];
  __int16 v53;
  int v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char v59[32];
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66[8];

  v46 = a3;
  if (a2 != a3)
  {
    v3 = a2;
    do
    {
      v4 = *(_QWORD *)(*v3 + 16);
      v5 = *(unsigned __int8 *)(v4 + 8);
      v7 = *(_DWORD *)v4;
      v6 = *(_DWORD *)(v4 + 4);
      objc_msgSend(MEMORY[0x1E0D27420], "modernManager", v46);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "activeTileGroup");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = 0;
      v11 = v6 >> v5;
      v12 = v7 >> v5;
      if (!v5)
      {
        v11 = v6;
        v12 = v7;
      }
      v13 = (v12 | v11) == 0;
      v50 = v9;
      v51 = v3;
      v47 = v13;
      while (v10 < objc_msgSend(v9, "attributionsCount"))
      {
        objc_msgSend(v9, "attributionAtIndex:", v10);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (v14)
        {
          for (i = 0; i < objc_msgSend(v14, "regionsCount"); ++i)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            objc_msgSend(v14, "regionAtIndex:", i);
            if (HIDWORD(v64) <= v5 && v63 >= v5)
            {
              v17 = v6;
              v18 = v7;
              if (v5)
              {
                if (v5 >= (v5 - BYTE4(v64)))
                  v19 = v5 - BYTE4(v64);
                else
                  v19 = v5;
                v17 = v6 >> v19;
                v18 = v7 >> v19;
              }
              if (v18 >= HIDWORD(v63) && v18 <= v62 && v17 >= v64 && v17 <= HIDWORD(v62))
                goto LABEL_36;
            }
          }
        }
        else if (objc_msgSend(0, "regionsCount"))
        {
          v62 = 0;
          v63 = 0;
          v64 = 0;
          if (v5 || !v13)
          {
            for (j = 1; j < objc_msgSend(0, "regionsCount"); ++j)
            {
              v62 = 0;
              v63 = 0;
              v64 = 0;
              if (!v5 && v13)
                goto LABEL_36;
            }
          }
          else
          {
LABEL_36:
            v21 = v3;
            v22 = *(_QWORD *)(a1 + 752);
            v23 = *(_QWORD *)(*v21 + 112);
            v52[0] = 0;
            v53 = 19;
            v54 = -1073741827;
            v55 = v59;
            v56 = v59;
            v57 = v59;
            v58 = 32;
            v60 = 0;
            v65 = v10;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v55, v59, (char *)&v65, v66);
            v65 = v22;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v55, v56, (char *)&v65, v66);
            v24 = (unsigned __int8 *)v55;
            v25 = v56 - (_BYTE *)v55;
            if (v56 == v55)
            {
              v26 = 0;
            }
            else
            {
              v26 = 0;
              if (v25 <= 1)
                v25 = 1;
              do
              {
                v27 = *v24++;
                v26 ^= (v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + v27;
                --v25;
              }
              while (v25);
            }
            v60 = v26;
            v61 = v23;
            v3 = v51;
            gdc::LayerDataRequest::request(*v51, (uint64_t)v52, 0);
            v9 = v50;
            v13 = v47;
            if (v55 != v57)
              free(v55);
          }
        }

        ++v10;
      }
      v28 = 0;
      v30 = v7 >> v5;
      v29 = v6 >> v5;
      if (!v5)
      {
        v29 = v6;
        v30 = v7;
      }
      v31 = (v30 | v29) == 0;
      v48 = v31;
      while (v28 < objc_msgSend(v9, "regionalResourcesCount"))
      {
        objc_msgSend(v9, "regionalResourceAtIndex:", v28);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        if (v32)
        {
          for (k = 0; k < objc_msgSend(v32, "regionsCount"); ++k)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            objc_msgSend(v32, "regionAtIndex:", k);
            if (HIDWORD(v64) <= v5 && v63 >= v5)
            {
              v35 = v6;
              v36 = v7;
              if (v5)
              {
                if (v5 >= (v5 - BYTE4(v64)))
                  v37 = v5 - BYTE4(v64);
                else
                  v37 = v5;
                v35 = v6 >> v37;
                v36 = v7 >> v37;
              }
              if (v36 >= HIDWORD(v63) && v36 <= v62 && v35 >= v64 && v35 <= HIDWORD(v62))
                goto LABEL_76;
            }
          }
        }
        else if (objc_msgSend(0, "regionsCount"))
        {
          v62 = 0;
          v63 = 0;
          v64 = 0;
          if (v5 || !v31)
          {
            for (m = 1; m < objc_msgSend(0, "regionsCount"); ++m)
            {
              v62 = 0;
              v63 = 0;
              v64 = 0;
              if (!v5 && v31)
                goto LABEL_76;
            }
          }
          else
          {
LABEL_76:
            v39 = v3;
            v40 = *(_QWORD *)(a1 + 752);
            v41 = *(_QWORD *)(*v39 + 112);
            v52[0] = 0;
            v53 = 18;
            v54 = -1073741827;
            v55 = v59;
            v56 = v59;
            v57 = v59;
            v58 = 32;
            v60 = 0;
            v65 = v28;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v55, v59, (char *)&v65, v66);
            v65 = v40;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v55, v56, (char *)&v65, v66);
            v42 = (unsigned __int8 *)v55;
            v43 = v56 - (_BYTE *)v55;
            if (v56 == v55)
            {
              v44 = 0;
            }
            else
            {
              v44 = 0;
              if (v43 <= 1)
                v43 = 1;
              do
              {
                v45 = *v42++;
                v44 ^= (v44 << 6) - 0x61C8864680B583EBLL + (v44 >> 2) + v45;
                --v43;
              }
              while (v43);
            }
            v60 = v44;
            v61 = v41;
            v3 = v51;
            gdc::LayerDataRequest::request(*v51, (uint64_t)v52, 0);
            v9 = v50;
            v31 = v48;
            if (v55 != v57)
              free(v55);
          }
        }

        ++v28;
      }
      v3 += 2;

    }
    while (v3 != v46);
  }
}

void sub_19F0B0314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::IdentifiedGEOResourceFetcher::IdentifiedGEOResourceFetcher(uint64_t a1, void *a2, int a3, unsigned __int16 *a4, uint64_t a5, _QWORD *a6, float a7)
{
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;

  v13 = a2;
  gdc::ResourceFetcher::ResourceFetcher(a1, a4, a5, a7);
  *(_QWORD *)a1 = off_1E42A5B10;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("IdentifiedResourceFetcher<%p>"), a1);
  v14 = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 440) = &off_1E42B5490;
  *(_QWORD *)(a1 + 448) = v14;
  v15 = v13;
  *(_QWORD *)(a1 + 464) = &off_1E42B5090;
  *(_QWORD *)(a1 + 472) = v15;
  v16 = a6[1];
  *(_QWORD *)(a1 + 488) = *a6;
  *(_QWORD *)(a1 + 496) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_WORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 508) = a3;
  *(_QWORD *)(a1 + 512) = &off_1E42B4C10;
  *(_QWORD *)(a1 + 520) = 0;
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "openForClient:", *(_QWORD *)(a1 + 448));

  return a1;
}

void sub_19F0B0480(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 512) = v6;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 488);
  *(_QWORD *)(v1 + 464) = v5;

  *(_QWORD *)(v1 + 440) = v4;
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v1);

  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::configurationDidChange(md::IdentifiedGEOResourceFetcher *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t i;
  gdc::ResourceStore *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t j;
  gdc::ResourceStore *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  id v23;

  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "activeTileGroup");
  v23 = (id)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    objc_msgSend(v23, "activeTileSetForStyle:", *((unsigned int *)this + 127));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3 != *((void **)this + 65))
    {
      v4 = *((_QWORD *)this + 2);
      for (i = *((_QWORD *)this + 3); v4 != i; v4 += 24)
      {
        while (1)
        {
          v6 = *(gdc::ResourceStore **)(v4 + 8);
          v7 = *(std::__shared_weak_count **)(v4 + 16);
          if (v7)
            break;
          gdc::ResourceStore::clearAllResources(v6);
          v4 += 24;
          if (v4 == i)
            goto LABEL_14;
        }
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        gdc::ResourceStore::clearAllResources(v6);
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
LABEL_14:
      v11 = v3;
      v12 = v11;
      if (v11)
        v13 = v11;
      v14 = (void *)*((_QWORD *)this + 65);
      *((_QWORD *)this + 65) = v12;

    }
  }
  else
  {
    v15 = (void *)*((_QWORD *)this + 65);
    if (v15)
    {
      *((_QWORD *)this + 65) = 0;

    }
    v16 = *((_QWORD *)this + 2);
    for (j = *((_QWORD *)this + 3); v16 != j; v16 += 24)
    {
      while (1)
      {
        v18 = *(gdc::ResourceStore **)(v16 + 8);
        v19 = *(std::__shared_weak_count **)(v16 + 16);
        if (v19)
          break;
        gdc::ResourceStore::clearAllResources(v18);
        v16 += 24;
        if (v16 == j)
          goto LABEL_18;
      }
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      gdc::ResourceStore::clearAllResources(v18);
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
LABEL_18:

}

void sub_19F0B0694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F0B0808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, uint64_t *a6, float a7)
{
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  id v21;
  unint64_t *v22;
  uint64_t v23[2];

  v21 = a3;
  v13 = (unint64_t *)operator new();
  v14 = v13;
  v15 = *a6;
  v16 = (std::__shared_weak_count *)a6[1];
  v23[0] = v15;
  v23[1] = (uint64_t)v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  md::GEOVectorTileResourceFetcher::GEOVectorTileResourceFetcher(v13, v21, a4, a5, v23, a7);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(unint64_t *))(*v14 + 104))(v14);
  atomic_store(a2, v14 + 13);
  v22 = v14;
  gdc::ResourceManager::addResourceFetcher(a1, &v22);
  if (v22)
    (*(void (**)(unint64_t *))(*v22 + 8))(v22);

}

void sub_19F0B097C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

void gdc::ResourceManager::addResourceFetcher(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  char *v33;
  char *v34;
  int v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  std::__shared_weak_count *v38;
  char *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t *v44;
  _QWORD *v45;
  size_t prime;
  unint64_t v47;
  int8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t v63;
  int8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned __int16 *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned __int16 *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  std::__shared_weak_count *v96;
  void *v97;
  void *__p;
  _QWORD v99[3];
  _QWORD *v100;
  _QWORD v101[3];
  _QWORD *v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v5 = *(_QWORD **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char *)v5 - v8;
    v10 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v4 - v8;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v17 = *a2;
    *a2 = 0;
    *(_QWORD *)v15 = v17;
    v7 = v15 + 8;
    v18 = *(char **)(a1 + 8);
    v19 = *(char **)(a1 + 16);
    if (v19 == v18)
    {
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v16;
    }
    else
    {
      v20 = v19 - v18 - 8;
      if (v20 <= 0x77
        || &v19[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] < v15 && &v9[(_QWORD)v14 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8] < v19)
      {
        goto LABEL_157;
      }
      v21 = (v20 >> 3) + 1;
      v22 = &v14[8 * v10 - 16];
      v23 = v19 - 32;
      v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(_OWORD *)v23;
        v25 = *((_OWORD *)v23 + 1);
        *(_OWORD *)v23 = 0uLL;
        *((_OWORD *)v23 + 1) = 0uLL;
        v23 -= 32;
        *((_OWORD *)v22 - 1) = v26;
        *(_OWORD *)v22 = v25;
        v22 -= 32;
        v24 -= 4;
      }
      while (v24);
      v15 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v19 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_157:
        do
        {
          v27 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v15 - 1) = v27;
          v15 -= 8;
        }
        while (v19 != v18);
      }
      v19 = *(char **)(a1 + 8);
      v28 = *(char **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v16;
      while (v28 != v19)
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        v29 = v30;
        *(_QWORD *)v28 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    *v5 = v6;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 16) = v7;
  v31 = *(v7 - 1);
  std::unordered_set<unsigned short>::unordered_set((uint64_t)&v97, v31 + 64);
  v32 = (unsigned __int16 *)__p;
  if (__p)
  {
    while (1)
    {
      v33 = *(char **)(a1 + 32);
      v34 = *(char **)(a1 + 40);
      if (v33 != v34)
      {
        v35 = v32[8];
        while (v35 != *(unsigned __int16 *)v33)
        {
          v33 += 16;
          if (v33 == v34)
            goto LABEL_38;
        }
      }
      if (v33 == v34)
      {
        LOWORD(v35) = v32[8];
LABEL_38:
        LOWORD(v107[0]) = v35;
        v107[1] = 0;
        v33 = geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert(a1 + 32, (unsigned __int16 *)v107);
      }
      *((_QWORD *)v33 + 1) = v31;
      v96 = 0;
      v36 = *(unsigned __int16 **)(a1 + 56);
      v37 = *(unsigned __int16 **)(a1 + 64);
      if (v36 != v37)
      {
        while (v32[8] != *v36)
        {
          v36 += 12;
          if (v36 == v37)
            goto LABEL_49;
        }
      }
      if (v36 != v37)
      {
        v39 = (char *)*((_QWORD *)v36 + 1);
        v38 = (std::__shared_weak_count *)*((_QWORD *)v36 + 2);
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          v96 = v38;
          v42 = v32[8];
          if (!v39)
            goto LABEL_57;
        }
        else
        {
          v42 = v32[8];
          if (!v39)
            goto LABEL_57;
        }
        goto LABEL_134;
      }
LABEL_49:
      v43 = (char *)operator new(0x1C0uLL);
      *((_QWORD *)v43 + 1) = 0;
      v44 = (unint64_t *)(v43 + 8);
      *((_QWORD *)v43 + 2) = 0;
      *(_QWORD *)v43 = &off_1E42DE180;
      v45 = v43 + 24;
      *((_QWORD *)v43 + 6) = 0;
      *((_QWORD *)v43 + 10) = 0;
      *((_QWORD *)v43 + 14) = 0;
      *((_QWORD *)v43 + 18) = 0;
      *((_QWORD *)v43 + 19) = 850045863;
      *((_OWORD *)v43 + 10) = 0u;
      *((_OWORD *)v43 + 11) = 0u;
      *((_OWORD *)v43 + 12) = 0u;
      *((_OWORD *)v43 + 13) = 0u;
      *((_OWORD *)v43 + 14) = 0u;
      *((_OWORD *)v43 + 15) = 0u;
      *((_OWORD *)v43 + 16) = 0u;
      *((_OWORD *)v43 + 17) = 0u;
      *((_OWORD *)v43 + 18) = 0u;
      *((_OWORD *)v43 + 19) = 0u;
      *((_DWORD *)v43 + 80) = 1065353216;
      *(_OWORD *)(v43 + 328) = 0u;
      *(_OWORD *)(v43 + 344) = 0u;
      *((_DWORD *)v43 + 90) = 1065353216;
      *((_QWORD *)v43 + 46) = v43 + 368;
      *((_QWORD *)v43 + 47) = v43 + 368;
      *((_OWORD *)v43 + 24) = 0u;
      *((_OWORD *)v43 + 25) = 0u;
      *((_QWORD *)v43 + 52) = 0;
      *((_DWORD *)v43 + 106) = 1065353216;
      *((_QWORD *)v43 + 54) = 0;
      *((_QWORD *)v43 + 55) = 0;
      prime = std::__next_prime(0x14uLL);
      v47 = prime;
      v48 = *(int8x8_t *)(v43 + 400);
      if (prime > *(_QWORD *)&v48)
        goto LABEL_84;
      if (prime < *(_QWORD *)&v48)
      {
        v49 = vcvtps_u32_f32((float)*((unint64_t *)v43 + 52) / *((float *)v43 + 106));
        if (*(_QWORD *)&v48 < 3uLL || (v50 = (uint8x8_t)vcnt_s8(v48), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
        {
          v49 = std::__next_prime(v49);
        }
        else
        {
          v51 = 1 << -(char)__clz(v49 - 1);
          if (v49 >= 2)
            v49 = v51;
        }
        if (v47 <= v49)
          v47 = v49;
        if (v47 < *(_QWORD *)&v48)
LABEL_84:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)(v43 + 392), v47);
      }
      *((_QWORD *)v43 + 54) = v43 + 368;
      v63 = vcvtps_u32_f32(20.0 / *((float *)v43 + 80));
      if (v63 == 1)
      {
        v63 = 2;
      }
      else if ((v63 & (v63 - 1)) != 0)
      {
        v63 = std::__next_prime(v63);
      }
      v64 = *(int8x8_t *)(v43 + 296);
      if (v63 > *(_QWORD *)&v64)
        goto LABEL_100;
      if (v63 < *(_QWORD *)&v64)
      {
        v65 = vcvtps_u32_f32((float)*((unint64_t *)v43 + 39) / *((float *)v43 + 80));
        if (*(_QWORD *)&v64 < 3uLL || (v66 = (uint8x8_t)vcnt_s8(v64), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          v65 = std::__next_prime(v65);
        }
        else
        {
          v67 = 1 << -(char)__clz(v65 - 1);
          if (v65 >= 2)
            v65 = v67;
        }
        if (v63 <= v65)
          v63 = v65;
        if (v63 < *(_QWORD *)&v64)
LABEL_100:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)(v43 + 288), v63);
      }
      v96 = (std::__shared_weak_count *)v43;
      v68 = v32[8];
      v105[0] = &off_1E42D5968;
      v105[1] = a1;
      v105[2] = v68;
      v106 = v105;
      gdc::ResourceStore::setNewResourceNotification((uint64_t)v45, v105);
      v69 = v106;
      if (v106 == v105)
      {
        v69 = v105;
        v70 = 4;
      }
      else
      {
        if (!v106)
          goto LABEL_106;
        v70 = 5;
      }
      (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_106:
      v71 = v32[8];
      v103[0] = &off_1E42D59B0;
      v103[1] = a1;
      v103[2] = v71;
      v104 = v103;
      gdc::ResourceStore::setRetryResourceNotification((uint64_t)v45, v103);
      v72 = v104;
      if (v104 == v103)
      {
        v72 = v103;
        v73 = 4;
      }
      else
      {
        if (!v104)
          goto LABEL_111;
        v73 = 5;
      }
      (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_111:
      v101[0] = &off_1E42D59F8;
      v101[1] = a1;
      v102 = v101;
      md::LabelsLogic::setNeedsDisplayCallback(v45, v101);
      v74 = v102;
      if (v102 == v101)
      {
        v74 = v101;
        v75 = 4;
      }
      else
      {
        if (!v102)
          goto LABEL_116;
        v75 = 5;
      }
      (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_116:
      v99[0] = &off_1E42D5A40;
      v99[1] = a1;
      v100 = v99;
      v108 = v107;
      std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::__clone((uint64_t)v99, v107);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v107, (_QWORD *)v43 + 15);
      v76 = v108;
      if (v108 == v107)
      {
        v76 = v107;
        v77 = 4;
      }
      else
      {
        if (!v108)
          goto LABEL_121;
        v77 = 5;
      }
      (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_121:
      v78 = v100;
      if (v100 == v99)
      {
        v78 = v99;
        v79 = 4;
        goto LABEL_125;
      }
      if (v100)
      {
        v79 = 5;
LABEL_125:
        (*(void (**)(void))(*v78 + 8 * v79))();
      }
      v80 = geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(a1 + 56), v32[8]);
      do
        v81 = __ldxr(v44);
      while (__stxr(v81 + 1, v44));
      v82 = (std::__shared_weak_count *)*((_QWORD *)v80 + 1);
      *(_QWORD *)v80 = v45;
      *((_QWORD *)v80 + 1) = v43;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v39 = v43 + 24;
      v42 = v32[8];
      if (!v45)
      {
LABEL_57:
        v52 = *(unsigned __int16 **)(v31 + 16);
        v53 = *(unsigned __int16 **)(v31 + 24);
        if (v52 != v53)
        {
          while ((_DWORD)v42 != *v52)
          {
            v52 += 12;
            if (v52 == v53)
              goto LABEL_141;
          }
        }
        if (v52 != v53)
        {
          v54 = v52 + 12;
          if (v52 + 12 != v53)
          {
            do
            {
              *v52 = *v54;
              v55 = *(_OWORD *)(v54 + 4);
              *((_QWORD *)v54 + 1) = 0;
              *((_QWORD *)v54 + 2) = 0;
              v56 = (std::__shared_weak_count *)*((_QWORD *)v52 + 2);
              *(_OWORD *)(v52 + 4) = v55;
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v56->__on_zero_shared)(v56, v42);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v54 += 12;
              v52 += 12;
            }
            while (v54 != v53);
            v53 = *(unsigned __int16 **)(v31 + 24);
          }
          while (v53 != v52)
          {
            v59 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v59->__on_zero_shared)(v59, v42);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            v53 -= 12;
          }
          *(_QWORD *)(v31 + 24) = v52;
          v62 = v96;
          if (!v96)
            goto LABEL_30;
LABEL_142:
          v91 = (unint64_t *)&v62->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v62->__on_zero_shared)(v62, v42);
            std::__shared_weak_count::__release_weak(v62);
          }
          goto LABEL_30;
        }
LABEL_141:
        v62 = v96;
        if (v96)
          goto LABEL_142;
        goto LABEL_30;
      }
LABEL_134:
      v85 = geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(v31 + 16), v42);
      if (v96)
      {
        v86 = (unint64_t *)&v96->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v88 = (std::__shared_weak_count *)*((_QWORD *)v85 + 1);
      *(_QWORD *)v85 = v39;
      *((_QWORD *)v85 + 1) = v96;
      if (!v88)
        goto LABEL_141;
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (v90)
        goto LABEL_141;
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
      v62 = v96;
      if (v96)
        goto LABEL_142;
LABEL_30:
      v32 = *(unsigned __int16 **)v32;
      if (!v32)
      {
        v93 = __p;
        if (__p)
        {
          do
          {
            v94 = (_QWORD *)*v93;
            operator delete(v93);
            v93 = v94;
          }
          while (v94);
        }
        break;
      }
    }
  }
  v95 = v97;
  v97 = 0;
  if (v95)
    operator delete(v95);
}

void sub_19F0B1274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *md::GEOVectorTileResourceFetcher::GEOVectorTileResourceFetcher(_QWORD *a1, void *a2, int a3, int a4, uint64_t *a5, float a6)
{
  id v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  id v20;
  unint64_t v21;
  uint64_t v23[2];
  _QWORD v24[3];
  _QWORD v25[2];

  v11 = a2;
  LOWORD(v23[0]) = a4;
  v12 = *a5;
  v13 = (std::__shared_weak_count *)a5[1];
  v25[0] = v12;
  v25[1] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v24[0] = &off_1E42B4B10;
  v24[1] = 0;
  md::TiledGEOResourceFetcher::TiledGEOResourceFetcher((uint64_t)a1, v11, a3, (unsigned __int16 *)v23, 1, v25, (uint64_t)v24, a6);
  v24[0] = &off_1E42B4B10;
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a1 = &off_1E42A5A60;
  v18 = (std::__shared_weak_count *)operator new(0x38uLL);
  v18->__shared_owners_ = 0;
  v19 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD7E0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42A5A38;
  v20 = objc_alloc_init(MEMORY[0x1E0D276B0]);
  v18[1].__shared_owners_ = (uint64_t)&off_1E42B4EB0;
  v18[1].__shared_weak_owners_ = (uint64_t)v20;
  v23[0] = (uint64_t)&v18[1];
  v23[1] = (uint64_t)v18;
  gdc::ResourceFetcher::setDecoder(a1, a4, v23);
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }

  return a1;
}

void sub_19F0B1458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  id *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(v3);

  _Unwind_Resume(a1);
}

void gdc::ResourceFetcher::setDecoder(_QWORD *a1, int a2, uint64_t *a3)
{
  unsigned __int16 v3;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unsigned __int16 *v24;
  char *v25;
  __int16 v26;
  unsigned __int16 *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  v3 = a2;
  v5 = *a3;
  v6 = (unsigned __int16 *)a1[5];
  v7 = (unsigned __int16 *)a1[6];
  if (*a3)
  {
    v9 = (unsigned __int16 *)a1[5];
    if (v6 != v7)
    {
      v9 = (unsigned __int16 *)a1[5];
      while (*v9 != a2)
      {
        v9 += 12;
        if (v9 == v7)
          goto LABEL_8;
      }
    }
    if (v9 == v7)
    {
LABEL_8:
      v9 = (unsigned __int16 *)a1[5];
      if (v6 != v7)
      {
        v9 = (unsigned __int16 *)a1[5];
        while (*v9 != a2)
        {
          v9 += 12;
          if (v9 == v7)
            goto LABEL_27;
        }
      }
      if (v9 == v7)
      {
LABEL_27:
        v15 = a1[7];
        if ((unint64_t)v7 >= v15)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3) + 1;
          if (v19 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v6) >> 3);
          if (2 * v20 > v19)
            v19 = 2 * v20;
          if (v20 >= 0x555555555555555)
            v21 = 0xAAAAAAAAAAAAAAALL;
          else
            v21 = v19;
          if (v21 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v22 = (char *)operator new(24 * v21);
          v9 = (unsigned __int16 *)&v22[8 * (((char *)v7 - (char *)v6) >> 3)];
          *v9 = v3;
          v23 = &v22[24 * v21];
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v9 + 2) = 0;
          v24 = v9 + 12;
          if (v6 == v7)
          {
            a1[5] = v9;
            a1[6] = v24;
            a1[7] = v23;
          }
          else
          {
            v25 = &v22[8 * (((char *)v7 - (char *)v6) >> 3)];
            do
            {
              v26 = *(v7 - 12);
              v7 -= 12;
              *((_WORD *)v25 - 12) = v26;
              v25 -= 24;
              *(_OWORD *)(v25 + 8) = *(_OWORD *)(v7 + 4);
              *((_QWORD *)v7 + 1) = 0;
              *((_QWORD *)v7 + 2) = 0;
            }
            while (v7 != v6);
            v6 = (unsigned __int16 *)a1[5];
            v27 = (unsigned __int16 *)a1[6];
            a1[5] = v25;
            a1[6] = v24;
            a1[7] = v23;
            while (v27 != v6)
            {
              v28 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
              if (v28)
              {
                p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldaxr(p_shared_owners);
                while (__stlxr(v30 - 1, p_shared_owners));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }
              v27 -= 12;
            }
          }
          if (v6)
            operator delete(v6);
          a1[6] = v24;
        }
        else
        {
          *v7 = a2;
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          a1[6] = v7 + 12;
          v9 = v7;
        }
      }
      v5 = *a3;
    }
    v31 = a3[1];
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 1) = v5;
    *((_QWORD *)v9 + 2) = v31;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    if (v6 != v7)
    {
      while (*v6 != a2)
      {
        v6 += 12;
        if (v6 == v7)
          return;
      }
    }
    if (v6 != v7)
    {
      v10 = v6 + 12;
      if (v6 + 12 != v7)
      {
        do
        {
          *v6 = *v10;
          v11 = *(_OWORD *)(v10 + 4);
          *((_QWORD *)v10 + 1) = 0;
          *((_QWORD *)v10 + 2) = 0;
          v12 = (std::__shared_weak_count *)*((_QWORD *)v6 + 2);
          *(_OWORD *)(v6 + 4) = v11;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 += 12;
          v6 += 12;
        }
        while (v10 != v7);
        v7 = (unsigned __int16 *)a1[6];
      }
      while (v7 != v6)
      {
        v16 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v7 -= 12;
      }
      a1[6] = v6;
    }
  }
}

void sub_19F0B188C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(uint64_t a1, void *a2, int a3, unsigned __int16 *a4, uint64_t a5, _QWORD *a6, uint64_t a7, float a8)
{
  id v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  v15 = a2;
  gdc::ResourceFetcher::ResourceFetcher(a1, a4, a5, a8);
  *(_QWORD *)a1 = off_1E429F988;
  v16 = a6[1];
  *(_QWORD *)(a1 + 440) = *a6;
  *(_QWORD *)(a1 + 448) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 456) = &off_1E42B5490;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 480) = &off_1E42B5490;
  *(_QWORD *)(a1 + 488) = 0;
  v19 = v15;
  *(_QWORD *)(a1 + 504) = &off_1E42B5090;
  *(_QWORD *)(a1 + 512) = v19;
  *(_QWORD *)(a1 + 528) = &off_1E42B4B10;
  *(_QWORD *)(a1 + 536) = 0;
  v20 = *(id *)(a7 + 8);
  v21 = *(void **)(a1 + 536);
  *(_QWORD *)(a1 + 536) = v20;

  *(_WORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 556) = a3;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 592) = 0;
  *(_WORD *)(a1 + 616) = 257;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("TiledResourceFetcher<%p>"), a1);
  v22 = (id)objc_claimAutoreleasedReturnValue();
  v23 = *(void **)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v22;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("PreliminaryTiledResourceFetcher<%p>"), a1);
  v24 = (id)objc_claimAutoreleasedReturnValue();
  v25 = *(void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v24;

  md::TiledGEOResourceFetcher::getTileLoader((id *)a1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "openForClient:", *(_QWORD *)(a1 + 464));
  objc_msgSend(v26, "openForClient:", *(_QWORD *)(a1 + 488));
  v27 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;

  v28 = *(void **)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;

  return a1;
}

void sub_19F0B1A60(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(v1 + 592))
    *(_BYTE *)(v1 + 592) = 0;
  std::pair<GEOActiveTileSet * {__strong},std::vector<md::TiledGEOResourceFetcher::TileSetRegion>>::~pair(v1 + 560);
  *(_QWORD *)(v1 + 528) = v6;

  *(_QWORD *)(v1 + 504) = v5;
  *(_QWORD *)(v1 + 480) = v4;

  *(_QWORD *)(v1 + 456) = v4;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 440);
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v1);

  _Unwind_Resume(a1);
}

void sub_19F0B1AEC()
{
  JUMPOUT(0x19F0B1AE0);
}

uint64_t gdc::ResourceFetcher::ResourceFetcher(uint64_t a1, unsigned __int16 *a2, uint64_t a3, float a4)
{
  uint64_t v5;
  uint64_t v7;

  *(_OWORD *)(a1 + 16) = 0u;
  *(float *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = a1 + 64;
  *(_QWORD *)a1 = off_1E42B07F8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  if (a3)
  {
    v7 = 2 * a3;
    do
    {
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v5, *a2, *a2);
      ++a2;
      v7 -= 2;
    }
    while (v7);
  }
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 850045863;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  return a1;
}

void sub_19F0B1BEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v5 = *(_QWORD **)(v1 + 80);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    operator delete(v7);
  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map((void **)(v1 + 40));
  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map(v2);
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::configurationDidChange(md::TiledGEOResourceFetcher *this)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t i;
  gdc::ResourceStore *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  gdc::ResourceStore *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  id *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  size_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  double *v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t j;
  gdc::ResourceStore *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  id v57;

  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *((id *)this + 64);
  objc_msgSend(v2, "activeTileGroupForCurrentOfflineModeForAuditToken:", v3);
  v57 = (id)objc_claimAutoreleasedReturnValue();

  if (v57)
  {
    objc_msgSend(v57, "activeTileSetForTileType:scale:", *((unsigned int *)this + 139), (*(uint64_t (**)(md::TiledGEOResourceFetcher *))(*(_QWORD *)this + 136))(this));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (!v4 || (objc_msgSend(v4, "hasBaseURL") & 1) == 0 && *((_DWORD *)this + 139) == 84)
    {
      v6 = (void *)*((_QWORD *)this + 76);
      *((_QWORD *)this + 76) = 0;

      v7 = (void *)*((_QWORD *)this + 70);
      *((_QWORD *)this + 70) = 0;

      *((_QWORD *)this + 72) = *((_QWORD *)this + 71);
      if (*((_BYTE *)this + 592))
        *((_BYTE *)this + 592) = 0;
      v8 = *((_QWORD *)this + 2);
      for (i = *((_QWORD *)this + 3); v8 != i; v8 += 24)
      {
        while (1)
        {
          v10 = *(gdc::ResourceStore **)(v8 + 8);
          v11 = *(std::__shared_weak_count **)(v8 + 16);
          if (v11)
            break;
          gdc::ResourceStore::clearAllResources(v10);
          v8 += 24;
          if (v8 == i)
            goto LABEL_67;
        }
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        gdc::ResourceStore::clearAllResources(v10);
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      goto LABEL_67;
    }
    if (v5 == *((void **)this + 76)
      || (v25 = (id *)((char *)this + 608), objc_storeStrong((id *)this + 76, v5), !*((_QWORD *)this + 76)))
    {
LABEL_67:

      v19 = v57;
      goto LABEL_68;
    }
    objc_storeStrong((id *)this + 70, *((id *)this + 76));
    v26 = objc_msgSend(*((id *)this + 76), "availableTiles");
    v27 = objc_msgSend(*v25, "availableTilesCount");
    v28 = v27;
    v29 = (char *)*((_QWORD *)this + 72);
    v30 = (_BYTE *)*((_QWORD *)this + 71);
    v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3);
    v32 = v27 - v31;
    if (v27 <= v31)
    {
      if (v27 < v31)
        *((_QWORD *)this + 72) = &v30[24 * v27];
    }
    else
    {
      v33 = *((_QWORD *)this + 73);
      if (0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v29) >> 3) >= v32)
      {
        bzero(*((void **)this + 72), 24 * ((24 * v32 - 24) / 0x18) + 24);
        *((_QWORD *)this + 72) = &v29[24 * ((24 * v32 - 24) / 0x18) + 24];
LABEL_52:
        v43 = 0;
        v44 = *((_QWORD *)this + 71);
        do
        {
          v45 = *(_QWORD *)(v26 + v43);
          *(_QWORD *)&v46 = *(_QWORD *)(v26 + v43 + 12);
          *(_QWORD *)(v44 + v43) = *(unsigned int *)(v26 + v43 + 20) | ((unint64_t)*(unsigned int *)(v26 + v43 + 8) << 32);
          v44 = *((_QWORD *)this + 71);
          *((_QWORD *)&v46 + 1) = v45;
          *(_OWORD *)(v44 + v43 + 8) = v46;
          v43 += 24;
        }
        while (24 * v28 != v43);
LABEL_54:
        v47 = (double *)MEMORY[0x1E0D266E8];
        v48 = objc_msgSend(*v25, "minimumZoomLevelInRect:", *MEMORY[0x1E0D266E8], *(double *)(MEMORY[0x1E0D266E8] + 8), *(double *)(MEMORY[0x1E0D266E8] + 16), *(double *)(MEMORY[0x1E0D266E8] + 24));
        v49 = v48 | (unint64_t)(objc_msgSend(*v25, "maximumZoomLevelInRect:", *v47, v47[1], v47[2], v47[3]) << 32);
        if (!*((_BYTE *)this + 592))
          *((_BYTE *)this + 592) = 1;
        *(_QWORD *)((char *)this + 596) = v49;
        v50 = *((_QWORD *)this + 2);
        for (j = *((_QWORD *)this + 3); v50 != j; v50 += 24)
        {
          while (1)
          {
            v52 = *(gdc::ResourceStore **)(v50 + 8);
            v53 = *(std::__shared_weak_count **)(v50 + 16);
            if (v53)
              break;
            gdc::ResourceStore::clearAllResources(v52);
            v50 += 24;
            if (v50 == j)
              goto LABEL_67;
          }
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          gdc::ResourceStore::clearAllResources(v52);
          do
            v56 = __ldaxr(v54);
          while (__stlxr(v56 - 1, v54));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        goto LABEL_67;
      }
      v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v30) >> 3);
      v35 = 0x5555555555555556 * ((v33 - (uint64_t)v30) >> 3);
      if (v35 <= v27)
        v35 = v27;
      if (v34 >= 0x555555555555555)
        v36 = 0xAAAAAAAAAAAAAAALL;
      else
        v36 = v35;
      if (v36 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v37 = (char *)operator new(24 * v36);
      v38 = &v37[8 * ((v29 - v30) >> 3)];
      v39 = &v37[24 * v36];
      v40 = 24 * ((24 * v32 - 24) / 0x18) + 24;
      bzero(v38, v40);
      v41 = &v38[v40];
      if (v29 != v30)
      {
        do
        {
          v42 = *(_OWORD *)(v29 - 24);
          *((_QWORD *)v38 - 1) = *((_QWORD *)v29 - 1);
          *(_OWORD *)(v38 - 24) = v42;
          v38 -= 24;
          v29 -= 24;
        }
        while (v29 != v30);
        v29 = (char *)*((_QWORD *)this + 71);
      }
      *((_QWORD *)this + 71) = v38;
      *((_QWORD *)this + 72) = v41;
      *((_QWORD *)this + 73) = v39;
      if (v29)
        operator delete(v29);
    }
    if (!v28)
      goto LABEL_54;
    goto LABEL_52;
  }
  v15 = (void *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;

  v16 = (void *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;

  *((_QWORD *)this + 72) = *((_QWORD *)this + 71);
  if (*((_BYTE *)this + 592))
    *((_BYTE *)this + 592) = 0;
  v18 = *((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 3);
  while (1)
  {
    v19 = 0;
    if (v18 == v17)
      break;
    v20 = *(gdc::ResourceStore **)(v18 + 8);
    v21 = *(std::__shared_weak_count **)(v18 + 16);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      gdc::ResourceStore::clearAllResources(v20);
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      v18 += 24;
    }
    else
    {
      gdc::ResourceStore::clearAllResources(v20);
      v18 += 24;
    }
  }
LABEL_68:

}

void sub_19F0B210C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t md::TiledGEOResourceFetcher::tileScale(md::TiledGEOResourceFetcher *this)
{
  if (*((float *)this + 2) <= 1.0)
    return 1;
  else
    return 2;
}

id md::TextureManager::_loadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  void *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;

  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "pathExtension");
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!-[__CFString length](v9, "length"))
  {

    v9 = CFSTR("png");
  }
  objc_msgSend(v8, "stringByDeletingPathExtension");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)a4)
  {
    v12 = v10;
    if (!*(_BYTE *)a3)
      goto LABEL_11;
    goto LABEL_10;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%u"), v10, *(unsigned int *)(a4 + 4));
  v11 = objc_claimAutoreleasedReturnValue();

  v12 = (void *)v11;
  if (*(_BYTE *)a3)
  {
LABEL_10:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@@%ux"), v12, *(unsigned int *)(a3 + 4));
    v13 = objc_claimAutoreleasedReturnValue();

    v12 = (void *)v13;
  }
LABEL_11:
  objc_msgSend(v12, "stringByAppendingPathExtension:", v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    v17 = v15;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 552), "dataForResourceWithName:", v14);
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = v17;

  return v18;
}

void sub_19F0B22D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F0B2398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D42A0;
  a2[1] = v2;
  return result;
}

uint64_t __copy_helper_block_ea8_32c47_ZTSNSt3__18weak_ptrIN2md17RunLoopControllerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

__n128 md::PolylinePixelHiker::resetPosition(md::PolylinePixelHiker *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __n128 result;

  *((_DWORD *)this + 192) = 0;
  v3 = *((_QWORD *)this + 47);
  if (!v3
    || *((_DWORD *)this + 104) != *(_DWORD *)(v3 + 252)
    || !*((_QWORD *)this + 50)
    || *((__int16 *)this + 205) < 0)
  {
    md::LabelLineResolvedPosition::moveOntoPathForZoom((md::PolylinePixelHiker *)((char *)this + 376), *((unsigned __int8 *)this + 540), a2);
    v3 = *((_QWORD *)this + 47);
  }
  v4 = *((_QWORD *)this + 48);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 68) = v3;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = v4;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *((_OWORD *)this + 35) = *(_OWORD *)((char *)this + 392);
  result = *(__n128 *)((char *)this + 404);
  *(__n128 *)((char *)this + 572) = result;
  *((_BYTE *)this + 8) = 1;
  return result;
}

void md::Label::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  float v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  float v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  float v32;
  float v33;
  int v34;
  int v35;
  _BOOL4 v36;
  float v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  int v48;
  md::LabelAnimator *v49;
  float v50;
  float64x2_t *v51;
  float64x2_t v52;
  double v53;
  float v54;
  double v55;
  double v56;
  __n128 v57;
  int v58;
  uint64_t v59;
  float64x2_t v60;
  double v61;
  float v62;
  double v63;
  double v64;
  float64x2_t v65;
  int v66;
  int v67;
  int v68;
  char v69;
  int v70;
  float64x2_t v71;
  _QWORD v72[162];
  float64x2_t v73;
  double v74;
  double v75;
  float64x2_t v76;
  double v77;
  double v78;
  float64x2_t v79;
  double v80;
  double v81;
  float64x2_t v82;
  double v83;
  double v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float64x2_t v93;
  __int128 v94;
  double v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  double v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  double v106;
  __int16 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float64x2_t v116;
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 296);
  if (!v6)
    goto LABEL_19;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6) && !*(_BYTE *)(a2 + 3375))
  {
    v7 = *(_QWORD *)(a1 + 296);
    if (v7 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 680))(v7))
    {
      if (*(_BYTE *)(a1 + 1082))
      {
        *(_BYTE *)(a1 + 1082) = 0;
        atomic_store(0, (unsigned __int8 *)(a1 + 1243));
      }
      if (*(_BYTE *)(a1 + 1081))
      {
        *(_BYTE *)(a1 + 1081) = 0;
        atomic_store(0, (unsigned __int8 *)(a1 + 1244));
        *(_DWORD *)(a1 + 1120) = 0;
        *(float *)(a1 + 1124) = (*(float (**)(float))(a1 + 1144))(0.0);
        md::Label::updateStateMachineForDisplay(a1, 8, *(_BYTE *)(a1 + 1073), 0);
      }
      v8 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 296) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = *(_QWORD *)(a1 + 280);
      *(_QWORD *)(a1 + 280) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    v10 = *(_QWORD *)(a1 + 272);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 552))(v10);
  }
  v11 = *(_QWORD *)(a1 + 296);
  if (v11)
  {
    if (!*(_BYTE *)(a2 + 465))
      goto LABEL_21;
  }
  else
  {
LABEL_19:
    v11 = *(_QWORD *)(a1 + 272);
    if (!*(_BYTE *)(a2 + 465))
      goto LABEL_21;
  }
  if (!*(_BYTE *)(a1 + 1083))
  {
LABEL_31:
    v26 = a1;
    v27 = 2;
    v28 = 32;
    goto LABEL_33;
  }
LABEL_21:
  if (!v11)
  {
    v26 = a1;
    v27 = 2;
    v28 = 8;
    goto LABEL_33;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11) & 1) == 0)
    goto LABEL_31;
  v12 = (float64x2_t *)(a1 + 840);
  v13 = *(_QWORD *)(a1 + 1000);
  if (v13)
  {
    v14 = *(float *)(a1 + 440);
    v15 = *(float *)(a2 + 472);
    if (v14 != v15)
    {
      LOBYTE(v15) = *(_BYTE *)(v13 + 40);
      v16 = exp2f(v14 - (float)LODWORD(v15));
      v71 = *(float64x2_t *)(v13 + 24);
      v111 = 0u;
      v113 = 0;
      v109 = 0u;
      v110 = 0u;
      v112 = 0u;
      v108 = 0x3FF0000000000000;
      *(_QWORD *)&v111 = 0x3FF0000000000000;
      v114 = 0x3FF0000000000000;
      v115 = 0;
      v116 = v71;
      v117 = xmmword_19FFB33A0;
      v98 = 0u;
      v100 = 0;
      v103 = 0u;
      v102 = 0u;
      v99 = 0u;
      v97 = 0u;
      v96 = 0u;
      v104 = 0x3FF0000000000000;
      v95 = 1.0 / v16;
      *(double *)&v98 = v95;
      v101 = v95;
      gm::operator*<double,4,4,4>((double *)&v105, (double *)&v108, &v95);
      v88 = 0u;
      v90 = 0;
      v89 = 0u;
      v87 = 0u;
      v86 = 0u;
      v85 = 0x3FF0000000000000;
      *(_QWORD *)&v88 = 0x3FF0000000000000;
      v92 = 0;
      v91 = 0x3FF0000000000000;
      v93 = vnegq_f64(v71);
      v94 = xmmword_19FFB33A0;
      gm::operator*<double,4,4,4>(v73.f64, (double *)&v105, (double *)&v85);
      v17 = *(double *)(v13 + 8);
      v18 = *(double *)(v13 + 16);
      v19 = 1.0 / (v84 + v75 * *(double *)v13 + v78 * v17 + v81 * v18);
      v20 = v19 * (v83 + v74 * *(double *)v13 + v77 * v17 + v80 * v18);
      *v12 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v82, v73, *(double *)v13), v76, v17), v79, v18), v19);
      *(double *)(a1 + 856) = v20;
    }
  }
  v21 = *(float *)(a2 + 488);
  v22 = *(double *)(a1 + 856) + *(double *)(a1 + 904) * v21;
  *(float64x2_t *)(a1 + 960) = vmlaq_n_f64(*v12, *(float64x2_t *)(a1 + 888), v21);
  *(double *)(a1 + 976) = v22;
  v105 = xmmword_19FFB34C0;
  v106 = 0.0;
  v107 = 0;
  LOBYTE(v73.f64[0]) = 0;
  BYTE4(v73.f64[1]) = 0;
  md::LabelLayoutContext::evaluateWorldPoint(a2 + 440, a1 + 960, (uint64_t)&v73, *(unsigned __int8 *)(a1 + 1219), 0, (uint64_t)&v105, *(double *)(a1 + 224));
  *(_DWORD *)(a1 + 1040) = HIDWORD(v105);
  v23 = DWORD2(v105);
  v24 = fmaxf(*(float *)&v105, 0.0);
  *(float *)(a1 + 440) = v24;
  v25 = (int)v24;
  if ((int)v24 >= 0x17)
    LOBYTE(v25) = 23;
  *(_BYTE *)(a1 + 452) = v25;
  *(_DWORD *)(a1 + 1052) = v23;
  if (*(_BYTE *)(a3 + 2) && (_BYTE)v107)
  {
    v26 = a1;
    v27 = 2;
    v28 = 3;
LABEL_33:
    md::Label::updateStateMachineForDisplay(v26, v27, v28, 0);
    return;
  }
  v29 = v106;
  *(float *)(a1 + 448) = v29;
  v30 = atomic_load((unsigned __int8 *)(a1 + 1243));
  if ((v30 & 1) != 0)
    goto LABEL_40;
  v31 = atomic_load((unsigned __int8 *)(a1 + 1240));
  if ((v31 & 1) != 0)
    goto LABEL_40;
  v32 = *(float *)(a1 + 440);
  v33 = *(float *)(a1 + 1044);
  if (v32 >= v33)
  {
    v37 = *(float *)(a1 + 1048);
    if (v32 >= v37)
    {
      v34 = 7;
      if (v32 > (float)(v37 + 0.4))
        goto LABEL_38;
LABEL_61:
      v35 = 0;
      v36 = *(_BYTE *)(a1 + 1276) != 0;
      goto LABEL_41;
    }
LABEL_40:
    v36 = 0;
    v34 = 37;
    v35 = 1;
    goto LABEL_41;
  }
  v34 = 6;
  if (v32 >= (float)(v33 + -0.4))
    goto LABEL_61;
LABEL_38:
  v35 = 0;
  v36 = 1;
LABEL_41:
  if (*(unsigned __int8 *)(a1 + 1109) != v34)
  {
    *(_BYTE *)(a1 + 1109) = v34;
    if (!*(_BYTE *)(a1 + 1105))
    {
      if (*(_BYTE *)(a1 + 1104))
        md::Label::updateClusterState((unsigned __int8 *)a1, (md::LabelManager *)a2, v34, *(unsigned __int8 *)(a1 + 1085));
    }
  }
  v38 = *(_QWORD *)(a2 + 1672);
  v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 360))(*(_QWORD *)(a1 + 8));
  v40 = 0;
  if (v39 && v38)
    v40 = *(float *)(v38 + 280) > 0.0;
  *(_BYTE *)(a1 + 1077) = v40;
  if (v36)
  {
    v26 = a1;
    v27 = 8;
    v28 = v34;
    goto LABEL_33;
  }
  if (v35)
  {
    if (!*(_BYTE *)(a1 + 1252))
    {
      LOBYTE(v34) = 30;
      md::Label::updateStateMachineForDisplay(a1, 3, 30, (md::LabelManager *)a2);
      v11 = *(_QWORD *)(a1 + 296);
      if (!v11)
        v11 = *(_QWORD *)(a1 + 272);
LABEL_74:
      if (!*(_BYTE *)(a1 + 1072))
      {
        *(_BYTE *)(a1 + 1073) = v34;
        return;
      }
      v48 = 3;
      if (!*(_BYTE *)(a2 + 3382))
        goto LABEL_77;
      goto LABEL_76;
    }
    if (!*(_QWORD *)(a1 + 1192))
    {
      LOBYTE(v34) = 37;
      goto LABEL_72;
    }
    *(_QWORD *)&v73.f64[0] = a1;
    md::LabelLayoutContext::LabelLayoutContext((md::LabelLayoutContext *)&v73.f64[1], (const md::LabelLayoutContext *)(a2 + 440));
    v41 = *(_QWORD *)(a1 + 1192);
    if (*(_BYTE *)(v41 + 52) == 2)
      *(_BYTE *)(a1 + 1084) = 0;
    v42 = *(unsigned __int8 *)(a1 + 1209);
    md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0::$_0((uint64_t)v72, (uint64_t)&v73);
    std::function<gm::Matrix<float,2,1> ()(void)>::function<md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0,void>((uint64_t)&v108, (uint64_t)v72);
    md::LabelScene::shouldHideLabel(v41, v42, v110, *(unsigned __int8 *)(a1 + 1208));
    *(_BYTE *)(a1 + 1208) = v43;
    v44 = (uint64_t *)v110;
    if ((uint64_t *)v110 == &v108)
    {
      v45 = 4;
      v44 = &v108;
    }
    else
    {
      if (!(_QWORD)v110)
        goto LABEL_65;
      v45 = 5;
    }
    (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_65:
    md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0::~$_0(v72);
    if (!*(_BYTE *)(a1 + 1208)
      || (v46 = atomic_load((unsigned __int8 *)(a1 + 1241)), (v46 & 1) != 0)
      || (v47 = atomic_load((unsigned __int8 *)(a1 + 1240)), (v47 & 1) != 0))
    {
      v34 = 37;
    }
    else
    {
      v34 = 29;
    }
    md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0::~$_0(&v73);
  }
  if (v34 != 37)
    goto LABEL_74;
LABEL_72:
  v48 = 4;
  if (!*(_BYTE *)(a2 + 3382))
  {
LABEL_77:
    md::Label::setupShowAnimation((md::Label *)a1);
    *(_DWORD *)(a1 + 1152) = 1065353216;
    *(float *)(a1 + 1156) = (*(float (**)(float))(a1 + 1168))(1.0);
    *(_DWORD *)(a1 + 1120) = 1065353216;
    *(float *)(a1 + 1124) = (*(float (**)(float))(a1 + 1136))(1.0);
    v49 = *(md::LabelAnimator **)(a1 + 1184);
    *(_QWORD *)(a1 + 1184) = 0;
    if (v49)
    {
      md::LabelAnimator::~LabelAnimator(v49);
      MEMORY[0x1A1AF4E00]();
    }
    goto LABEL_79;
  }
LABEL_76:
  if (*(_BYTE *)(a1 + 1255))
    goto LABEL_77;
LABEL_79:
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 360))(*(_QWORD *)(a1 + 8)) & 1) == 0)
    *(_DWORD *)(a1 + 1300) = *(_DWORD *)(a2 + 3344);
  if (*(_BYTE *)(a1 + 1211) == 4)
    *(_DWORD *)(a1 + 1068) = *(_DWORD *)(a2 + 504);
  switch(*(_BYTE *)(a1 + 1075))
  {
    case 1:
    case 3:
      v50 = *(double *)(a2 + 696) / v106;
      if (*(_BYTE *)(a1 + 823) == 3)
        v50 = *(float *)(a1 + 1064) * v50;
      break;
    case 2:
      md::LabelDisplayCoreStyleGroup::setZoom(*(md::LabelDisplayCoreStyleGroup **)(a1 + 1024), *(float *)(a1 + 440));
      v50 = *(float *)(*(_QWORD *)(a1 + 1024) + 112);
      break;
    case 4:
      v50 = exp2f(*(float *)(a1 + 440) + -5.0);
      break;
    default:
      v50 = 1.0;
      break;
  }
  v51 = (float64x2_t *)(a1 + 408);
  *(float *)(a1 + 444) = v50;
  if (*(_QWORD *)(a1 + 304))
  {
    v52 = vaddq_f64(*(float64x2_t *)(a1 + 936), *(float64x2_t *)(a1 + 960));
    v53 = *(double *)(a1 + 952) + *(double *)(a1 + 976);
    *v51 = v52;
    *(double *)(a1 + 424) = v53;
    v54 = *(float *)(a1 + 1060);
    if (v54 != 0.0)
    {
      v55 = *(double *)(a1 + 232) * v54 * *(float *)(a2 + 1624);
      v56 = *(double *)(a1 + 880);
      *v51 = vmlaq_n_f64(v52, *(float64x2_t *)(a1 + 864), v55);
      v52.f64[0] = v53 + v56 * v55;
      *(float64_t *)(a1 + 424) = v52.f64[0];
    }
    if (*(_BYTE *)(a1 + 259))
    {
      v57.n128_u64[0] = (unint64_t)md::LabelLayoutContext::projectPointToPixel((float64x2_t *)(a2 + 440), (double *)(a1 + 408), (float32x2_t *)(a1 + 432));
    }
    else
    {
      v57.n128_f32[0] = md::Label::featurePixel(a1, a2, 1, v52.f64[0], v53);
      *(_DWORD *)(a1 + 432) = v57.n128_u32[0];
      *(_DWORD *)(a1 + 436) = v58;
    }
    v59 = *(_QWORD *)(a1 + 304);
    v73.f64[0] = 0.0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, float64x2_t *, __n128))(*(_QWORD *)v59 + 120))(v59, a2, 0, a1 + 432, &v73, v57);
  }
  v60 = vaddq_f64(*(float64x2_t *)(a1 + 912), *(float64x2_t *)(a1 + 960));
  v61 = *(double *)(a1 + 928) + *(double *)(a1 + 976);
  *v51 = v60;
  *(double *)(a1 + 424) = v61;
  v62 = *(float *)(a1 + 1056);
  if (v62 != 0.0)
  {
    v63 = *(double *)(a1 + 232) * v62 * *(float *)(a2 + 1624);
    v64 = *(double *)(a1 + 880);
    v60 = vmlaq_n_f64(v60, *(float64x2_t *)(a1 + 864), v63);
    *v51 = v60;
    v61 = v61 + v64 * v63;
    *(double *)(a1 + 424) = v61;
  }
  if (*(_BYTE *)(a1 + 259))
  {
    v65.f64[0] = *(float64_t *)(a2 + 1328);
    v65.f64[1] = *(float64_t *)(a2 + 1360);
    *(float32x2_t *)(a1 + 432) = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(a2 + 1400), *(float64x2_t *)(a2 + 1304), v60.f64[0]), *(float64x2_t *)(a2 + 1336), v60, 1), *(float64x2_t *)(a2 + 1368), v61), 1.0/ (vaddvq_f64(vmulq_f64(v65, v60))+ *(double *)(a2 + 1392) * v61+ *(double *)(a2 + 1424))));
  }
  else
  {
    *(float *)(a1 + 432) = md::Label::featurePixel(a1, a2, 1, v61, v60.f64[0]);
    *(_DWORD *)(a1 + 436) = v66;
  }
  v73.f64[0] = 0.0;
  v67 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, float64x2_t *))(*(_QWORD *)v11 + 120))(v11, a2, 0, a1 + 432, &v73);
  if ((v67 & 0xFE) == 0x12)
    v68 = 3;
  else
    v68 = 2;
  if (v67 == 37)
    v69 = v34;
  else
    v69 = v67;
  if (v67 == 37)
    v70 = v48;
  else
    v70 = v68;
  md::Label::updateStateMachineForDisplay(a1, v70, v69, (md::LabelManager *)a2);
}

void sub_19F0B2E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a5);
  v7 = *(_QWORD **)(v5 - 224);
  if (v7 == (_QWORD *)(v5 - 248))
  {
    v8 = 4;
    v7 = (_QWORD *)(v5 - 248);
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0::~$_0(va);
  md::Label::layoutForDisplay(md::LabelManager *,md::LabelLayoutOptions const&)::$_0::~$_0(&STACK[0x530]);
  _Unwind_Resume(a1);
}

void md::Label::layoutForStaging(md::Label *a1, uint64_t a2, md::LabelPool *this, _BYTE *a4)
{
  uint64_t v8;
  BOOL v9;
  double v10;
  double v11;
  uint64_t v12;
  md::Label *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  char v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64x2_t *v28;
  int8x8_t *v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  double v33;
  char v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float v39;
  float v40;
  float v41;
  int v42;
  md::Label *v43;
  int v44;
  char v45;
  double v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  long double v56;
  double v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  BOOL v64;
  uint64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  int32x2_t v68;
  __int8 v69;
  double v70;
  double v71;
  long double v72;
  float v73;
  int v74;
  float v75;
  uint64_t v76;
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  md::LabelPool *v83;
  float v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  float v87;
  float v88;
  int v89;
  int v90;
  int v91;
  _BOOL4 v92;
  float v93;
  int v94;
  unsigned __int8 v95;
  uint64_t v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  float64x2_t *v99;
  float v100;
  float v101;
  _BOOL4 v102;
  float v103;
  unsigned __int8 v104;
  int v105;
  float v106;
  double v107;
  double v108;
  float v109;
  float v110;
  double v111;
  float v112;
  double v113;
  float v114;
  float v115;
  float v116;
  double v117;
  double v118;
  float64x2_t v119;
  double v120;
  float v121;
  double v122;
  double v123;
  __n128 v124;
  int v125;
  float *v126;
  unsigned int v127;
  char v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  _BYTE *v134;
  md::Label *v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  char v140;
  BOOL v141;
  BOOL v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float *v149;
  float v150;
  float v151;
  float v152;
  unsigned __int8 v153;
  float v154;
  float v155;
  float v156;
  char v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  _DWORD *v162;
  char v163;
  char v164;
  int v165;
  int v166;
  int v167;
  _DWORD *v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  BOOL v174;
  BOOL v175;
  int v176;
  float64x2_t v177;
  int v178;
  int v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  float64x2_t v188;
  __int128 v189;
  double v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  double v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  float64x2_t v208;
  __int128 v209;
  _BYTE v210[120];
  float64x2_t v211;
  double v212;
  double v213;
  float64x2_t v214;
  double v215;
  double v216;
  float64x2_t v217;
  double v218;
  double v219;
  float64x2_t v220;
  double v221;
  double v222;

  v8 = *(_QWORD *)(a2 + 432);
  *((_BYTE *)a1 + 1270) = *(_BYTE *)(v8 + 12);
  if (*((_BYTE *)a1 + 1249))
  {
    *(_WORD *)((char *)a1 + 1249) = 256;
    v9 = 1;
  }
  else if (*((_BYTE *)a1 + 1250))
  {
    v9 = 1;
  }
  else
  {
    v9 = *((_BYTE *)a1 + 1255) != 0;
  }
  *((_BYTE *)a1 + 405) = v9;
  *((_BYTE *)a1 + 482) = 0;
  if (this && (*((_BYTE *)a1 + 1261) || *((_BYTE *)a1 + 1262)))
  {
    v10 = *(double *)(v8 + 336);
    v11 = *((double *)a1 + 153);
    if (v11 == 0.0)
    {
      *((double *)a1 + 153) = v10;
      v11 = v10;
    }
    if (vabdd_f64(v10, v11) > 1.0
      || (v12 = md::LabelPool::replacementForLabel(this, a1)) == 0
      || *(_BYTE *)(v12 + 1263))
    {
      if (*((_BYTE *)a1 + 1262))
      {
        *((_BYTE *)a1 + 1262) = 0;
        md::Label::updateStateMachineForStaging((uint64_t)a1, 2, 28);
      }
      if (*((_BYTE *)a1 + 1261))
      {
        *((_BYTE *)a1 + 1261) = 0;
        md::Label::updateStateMachineForStaging((uint64_t)a1, 1, 37);
      }
    }
  }
  *((_QWORD *)a1 + 44) = 0;
  if (*((_BYTE *)a1 + 820))
  {
    if (((*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)a1 + 1) + 440))(*((_QWORD *)a1 + 1), (char *)a1 + 48) & 1) == 0)
    {
      v13 = a1;
      v14 = 0;
      goto LABEL_29;
    }
    if (*(_BYTE *)(v8 + 25) && !*((_BYTE *)a1 + 835))
    {
      v13 = a1;
      v14 = 32;
      goto LABEL_29;
    }
    if (!*((_BYTE *)a1 + 1264))
    {
      v15 = *((unsigned int *)a1 + 326);
      if ((_DWORD)v15 != -1 && *((_BYTE *)a1 + 1213) == 1)
      {
        v16 = *(_QWORD *)(a2 + 3576);
        if (v16)
        {
          v17 = *(id *)(v16 + 8);
          v18 = v17;
          if (v17)
          {
            v19 = objc_msgSend(v17, "isEqual:", 0);

            if ((v19 & 1) == 0 && (objc_msgSend(*(id *)(v16 + 8), "shouldDisplayPOIWithType:", v15) & 1) == 0)
              goto LABEL_27;
          }
          else
          {

          }
        }
      }
    }
    if (*(_BYTE *)(a2 + 3040) || !*(_BYTE *)(a2 + 3039))
    {
      if (!*((_BYTE *)a1 + 1264) || *((_BYTE *)a1 + 1258) && !*((_BYTE *)a1 + 1257))
      {
LABEL_27:
        v13 = a1;
        v14 = 33;
LABEL_29:
        md::Label::updateStateMachineForStaging((uint64_t)v13, 2, v14);
        return;
      }
    }
    else if (*(_BYTE *)(a2 + 3033)
           && (!*(_BYTE *)(a2 + 3036) && *((_BYTE *)a1 + 1210) == 1 && !*((_BYTE *)a1 + 1264)
            || !*(_BYTE *)(a2 + 3034) && *((_BYTE *)a1 + 1211) == 2
            || !*(_BYTE *)(a2 + 3035) && *((_BYTE *)a1 + 1210) == 7
            || !*(_BYTE *)(a2 + 3037) && *((_BYTE *)a1 + 1211) == 4
            || !*(_BYTE *)(a2 + 3038) && *((_BYTE *)a1 + 1211) == 3))
    {
      goto LABEL_27;
    }
    if (*(_BYTE *)(a2 + 3641))
    {
      switch(*((_BYTE *)a1 + 1211))
      {
        case 0:
        case 6:
        case 0xA:
        case 0xF:
        case 0x10:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
          if (!*(_BYTE *)(a2 + 3636))
            break;
          goto LABEL_53;
        case 1:
        case 7:
        case 8:
        case 0xB:
        case 0xC:
        case 0x11:
        case 0x12:
          if (!*(_BYTE *)(a2 + 3638))
            break;
          goto LABEL_53;
        case 2:
        case 4:
        case 5:
        case 9:
        case 0xD:
        case 0xE:
          if (*((_BYTE *)a1 + 1210) == 8)
          {
            if (!*(_BYTE *)(a2 + 3640))
              break;
          }
          else if (!*(_BYTE *)(a2 + 3637))
          {
            break;
          }
LABEL_53:
          v13 = a1;
          v14 = 5;
          goto LABEL_29;
        case 3:
          if (!*(_BYTE *)(a2 + 3639))
            break;
          goto LABEL_53;
        default:
          break;
      }
    }
    v20 = *((_QWORD *)a1 + 85);
    if (v20)
    {
      v21 = *((float *)a1 + 98);
      v22 = *(float *)(v8 + 32);
      if (v21 != v22)
      {
        LOBYTE(v22) = *(_BYTE *)(v20 + 40);
        v23 = exp2f(v21 - (float)LODWORD(v22));
        v177 = *(float64x2_t *)(v20 + 24);
        v203 = 0u;
        v205 = 0;
        v201 = 0u;
        v202 = 0u;
        v204 = 0u;
        v199 = 0x3FF0000000000000;
        v200 = 0x3FF0000000000000;
        *(_QWORD *)&v203 = 0x3FF0000000000000;
        v206 = 0x3FF0000000000000;
        v207 = 0;
        v208 = v177;
        v209 = xmmword_19FFB33A0;
        v193 = 0u;
        v195 = 0;
        v198 = 0u;
        v197 = 0u;
        v194 = 0u;
        v192 = 0u;
        v191 = 0u;
        v190 = 1.0 / v23;
        *(double *)&v193 = v190;
        v196 = v190;
        gm::operator*<double,4,4,4>((double *)v210, (double *)&v200, &v190);
        v185 = 0;
        v184 = 0u;
        v182 = 0u;
        v181 = 0u;
        v180 = 0x3FF0000000000000;
        v183 = 0x3FF0000000000000uLL;
        v186 = 0x3FF0000000000000;
        v187 = 0;
        v188 = vnegq_f64(v177);
        v189 = xmmword_19FFB33A0;
        gm::operator*<double,4,4,4>(v211.f64, (double *)v210, (double *)&v180);
        v24 = *(double *)(v20 + 8);
        v25 = *(double *)(v20 + 16);
        v26 = 1.0 / (v222 + v213 * *(double *)v20 + v216 * v24 + v219 * v25);
        v27 = v26 * (v221 + v212 * *(double *)v20 + v215 * v24 + v218 * v25);
        *((float64x2_t *)a1 + 31) = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v220, v211, *(double *)v20), v214, v24), v217, v25), v26);
        *((double *)a1 + 64) = v27;
      }
    }
    v28 = (float64x2_t *)((char *)a1 + 520);
    v29 = *(int8x8_t **)(v8 + 1232);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a1 + 1) + 360))(*((_QWORD *)a1 + 1)))
    {
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 376))(*((_QWORD *)a1 + 1)))
      {
        if (v29)
        {
          v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 376))(*((_QWORD *)a1 + 1));
          v31 = md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(v29, v30);
          v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 376))(*((_QWORD *)a1 + 1));
          md::VenueLogicContext::getVenueLevelElevation((md::VenueLogicContext *)v29, v32, v31, 0);
          if (v34)
          {
            v35 = *((double *)a1 + 29) * v33;
            *((double *)a1 + 82) = v35;
            v36 = *((double *)a1 + 67) * v35;
            *((float64x2_t *)a1 + 34) = vmulq_n_f64(*v28, v35);
            *((double *)a1 + 70) = v36;
          }
        }
      }
    }
    v37 = *(float *)(v8 + 48);
    v38 = *((double *)a1 + 64) + *((double *)a1 + 70) * v37;
    *(float64x2_t *)((char *)a1 + 616) = vmlaq_n_f64(*((float64x2_t *)a1 + 31), *((float64x2_t *)a1 + 34), v37);
    *((double *)a1 + 79) = v38;
    v211 = (float64x2_t)xmmword_19FFB34C0;
    v212 = 0.0;
    LOWORD(v214.f64[0]) = 0;
    md::LabelLayoutContext::evaluateWorldPoint(v8, (uint64_t)a1 + 616, (uint64_t)a1 + 152, *((unsigned __int8 *)a1 + 1219), 1, (uint64_t)&v211, *((double *)a1 + 28));
    *((_DWORD *)a1 + 190) = HIDWORD(v211.f64[1]);
    v39 = *(float *)&v211.f64[1];
    v40 = fmaxf(*(float *)v211.f64, 0.0);
    v41 = v212;
    *((float *)a1 + 195) = v41;
    *((float *)a1 + 98) = v40;
    v42 = (int)v40;
    if ((int)v40 >= 0x17)
      LOBYTE(v42) = 23;
    *((_BYTE *)a1 + 404) = v42;
    *((float *)a1 + 191) = v39;
    if (a4[2] && (LOBYTE(v214.f64[0]) || *((float *)a1 + 196) > v41 || *((float *)a1 + 197) < v41))
    {
      v43 = a1;
      v44 = 2;
      v45 = 3;
LABEL_91:
      md::Label::updateStateMachineForStaging((uint64_t)v43, v44, v45);
      return;
    }
    *((float *)a1 + 100) = v41;
    if (a4[1])
    {
      v46 = v39;
      if (*((double *)a1 + 99) > v46 || *((double *)a1 + 100) < v46)
      {
        v43 = a1;
        v44 = 2;
        v45 = 34;
        goto LABEL_91;
      }
    }
    v47 = (*(uint64_t (**)(_QWORD, uint64_t, md::Label *))(**((_QWORD **)a1 + 1) + 48))(*((_QWORD *)a1 + 1), a2, a1);
    v48 = *((_QWORD *)a1 + 1);
    v49 = *((unsigned int *)a1 + 12);
    v50 = atomic_load((unsigned __int8 *)a1 + 1240);
    v51 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v48 + 552))(v48, v49, 0, v50 & 1, a2);
    if (!*v51)
      goto LABEL_90;
    v179 = v47;
    md::LabelStyle::setVariantStyleType(*v51, *(_QWORD *)(*(_QWORD *)(a2 + 336) + 161));
    md::LabelStyle::setZoom((md::LabelStyle *)*v51, *((float *)a1 + 98));
    v52 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 560))(*((_QWORD *)a1 + 1));
    v53 = *(uint64_t **)v52;
    v54 = *(uint64_t **)(v52 + 8);
    while (v53 != v54)
    {
      if (*v53)
      {
        md::LabelStyle::setVariantStyleType(*v53, *(_QWORD *)(*(_QWORD *)(a2 + 336) + 161));
        md::LabelStyle::setZoom((md::LabelStyle *)*v53, *((float *)a1 + 98));
      }
      v53 += 2;
    }
    v55 = *v51;
    if (!*(_BYTE *)(*v51 + 125) || *(unsigned __int8 *)(v55 + 136) == 255)
    {
LABEL_90:
      v43 = a1;
      v44 = 2;
      v45 = 1;
      goto LABEL_91;
    }
    std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>((_QWORD *)a1 + 47, v55, v51[1]);
    if (*((_BYTE *)a1 + 1218) || (v59 = *(_BYTE *)(a2 + 3051)) != 0 && (v59 = *(_BYTE *)(*v51 + 141)) != 0)
    {
      LODWORD(v57) = *(_DWORD *)(*(_QWORD *)(a2 + 232) + 36);
      v59 = *((float *)a1 + 98) >= *(float *)&v57
         && (v58 = atomic_load((unsigned __int8 *)a1 + 1243), (v58 & 1) == 0)
         && *(_BYTE *)(a2 + 3612) != 0;
    }
    atomic_store(v59, (unsigned __int8 *)a1 + 481);
    v60 = atomic_load((unsigned __int8 *)a1 + 481);
    if ((v60 & 1) == 0)
      *((_BYTE *)a1 + 1284) = 0;
    if (*((_BYTE *)a1 + 483))
    {
      v61 = atomic_load((unsigned __int8 *)a1 + 481);
      v62 = *((_QWORD *)a1 + 57);
      if ((v61 & 1) != 0)
      {
        v63 = atomic_load((unsigned __int8 *)(v62 + 286));
        if ((v63 & 1) != 0)
        {
          if (*(_BYTE *)(*((_QWORD *)a1 + 57) + 280))
            *((_BYTE *)a1 + 485) = *(_BYTE *)(*((_QWORD *)a1 + 57) + 280);
          *((_BYTE *)a1 + 483) = 0;
          if (*((_BYTE *)a1 + 484))
            *((_BYTE *)a1 + 1284) = 0;
        }
      }
      else
      {
        *(_BYTE *)(v62 + 285) = 1;
        *((_BYTE *)a1 + 483) = 0;
      }
    }
    if (*(_BYTE *)(a2 + 3050))
      v64 = *(_BYTE *)(a2 + 3056) == 0;
    else
      v64 = 1;
    *((_BYTE *)a1 + 1245) = v64;
    v65 = *v51;
    *((_BYTE *)a1 + 822) = *(_BYTE *)(*v51 + 252);
    LODWORD(v56) = *(_DWORD *)(v65 + 152);
    *((_DWORD *)a1 + 189) = LODWORD(v56);
    if (*((_BYTE *)a1 + 1271))
    {
      v66 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
      v67 = vmaxnmq_f64(vmlaq_f64(v66, (float64x2_t)vdupq_n_s64(0xBF91DF46A2529D39), vcvtq_f64_f32(*(float32x2_t *)(v65 + 228))), (float64x2_t)0);
      v68 = vmovn_s64(vcgtq_f64(v67, v66));
      v69 = v68.i8[4];
      if ((v68.i8[0] & 1) != 0)
        v70 = 3.14159265;
      else
        v70 = v67.f64[0];
      if ((v69 & 1) != 0)
        v71 = 3.14159265;
      else
        v71 = v67.f64[1];
      v72 = cos(v70);
      v56 = cos(v71);
      *((long double *)a1 + 99) = v72;
      *((long double *)a1 + 100) = v56;
    }
    if (*((_BYTE *)a1 + 1272))
    {
      v57 = *((double *)a1 + 28);
      v73 = v57 * *(float *)(v65 + 220);
      *((float *)a1 + 196) = v73;
      v56 = v57 * *(float *)(v65 + 216);
      *(float *)&v56 = v56;
      *((_DWORD *)a1 + 197) = LODWORD(v56);
    }
    v74 = *(unsigned __int8 *)(v65 + 123);
    *((_BYTE *)a1 + 823) = v74;
    switch(v74)
    {
      case 1:
      case 3:
        LODWORD(v57) = LODWORD(v212);
        v56 = *(double *)(v8 + 256) / v212;
        v75 = v56;
        if (v74 == 3)
        {
          if (*((_BYTE *)a1 + 827) && *((_BYTE *)a1 + 816))
          {
            LODWORD(v56) = *((_DWORD *)a1 + 203);
          }
          else
          {
            LODWORD(v56) = *(_DWORD *)(v65 + 196);
            *((_DWORD *)a1 + 203) = LODWORD(v56);
            *((_BYTE *)a1 + 816) = 1;
          }
          v75 = *(float *)&v56 * v75;
        }
        break;
      case 2:
        v75 = *(float *)(v65 + 196);
        v76 = *(_QWORD *)(v65 + 392);
        if (!v76)
        {
          md::LabelStyle::prepareDisplayCoreStyleGroup((md::LabelStyle *)v65);
          v76 = *(_QWORD *)(v65 + 392);
        }
        std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>((_QWORD *)a1 + 88, v76, *(_QWORD *)(v65 + 400));
        break;
      case 4:
        *(float *)&v56 = exp2f(*((float *)a1 + 98) + -5.0);
        v75 = *(float *)&v56;
        break;
      default:
        v75 = 1.0;
        break;
    }
    *((float *)a1 + 99) = v75;
    md::LabelStyle::getLabelKnobs((uint64_t *)*v51, (uint64_t)a1 + 720, *((unsigned __int8 *)a1 + 1210), *((_BYTE *)a1 + 1274), v56, *(float *)&v57);
    v77 = *((_DWORD *)a1 + 181) != *((_DWORD *)a1 + 180);
    if (*((unsigned __int8 *)a1 + 825) != v77)
    {
      *((_BYTE *)a1 + 825) = v77;
      *((_BYTE *)a1 + 1247) = 1;
    }
    v78 = (*(float (**)(_QWORD))(**((_QWORD **)a1 + 1) + 240))(*((_QWORD *)a1 + 1));
    if (v78 <= 252.0)
    {
      v80 = roundf(v78 * 10.0) * 0.1;
      v81 = *((float *)a1 + 186);
      *((_BYTE *)a1 + 836) = v80 > v81;
      if (v80 <= v81)
        v80 = v81;
      *((float *)a1 + 186) = v80;
      v79 = fmaxf(*((float *)a1 + 182), v78);
    }
    else
    {
      *((_BYTE *)a1 + 836) = 0;
      v79 = *((float *)a1 + 182);
      if (v79 == 0.0)
        v79 = *((float *)a1 + 186);
    }
    v82 = v79 + *((float *)a1 + 184);
    *((float *)a1 + 182) = v82;
    if (*((_BYTE *)a1 + 1252))
      *((float *)a1 + 182) = *((float *)a1 + 183) + v82;
    v84 = (*(float (**)(_QWORD))(**((_QWORD **)a1 + 1) + 248))(*((_QWORD *)a1 + 1));
    if (v84 < 252.0)
      *((float *)a1 + 187) = fminf(roundf(v84 * 10.0) * 0.1, *((float *)a1 + 187));
    if (*((_BYTE *)a1 + 1246))
    {
      *((_QWORD *)a1 + 90) = 0xFFFFFFFF00000000;
      *((_DWORD *)a1 + 186) = 0;
    }
    v85 = atomic_load((unsigned __int8 *)a1 + 1243);
    if ((v85 & 1) == 0)
    {
      v86 = atomic_load((unsigned __int8 *)a1 + 1240);
      if ((v86 & 1) == 0)
      {
        v87 = *((float *)a1 + 98);
        v88 = *((float *)a1 + 186);
        if (v87 < v88)
        {
          v89 = 6;
          v90 = 1;
          if (v87 < (float)(v88 + -0.4))
          {
            v91 = 0;
            v92 = 1;
            goto LABEL_158;
          }
          goto LABEL_218;
        }
        v93 = *((float *)a1 + 187);
        if (v87 >= v93)
        {
          v90 = 7;
          if (v87 > (float)(v93 + 0.4))
          {
            v91 = 0;
            v92 = 1;
            v89 = 7;
            goto LABEL_158;
          }
          v89 = 7;
LABEL_218:
          v91 = 0;
          v92 = *((_BYTE *)a1 + 1276) != 0;
LABEL_158:
          v94 = *((unsigned __int8 *)a1 + 831);
          if (v94 == v90)
          {
            if (v91)
              goto LABEL_160;
          }
          else
          {
            if (!*((_BYTE *)a1 + 831))
              LOBYTE(v94) = v90;
            *((_BYTE *)a1 + 832) = v94;
            *((_BYTE *)a1 + 831) = v90;
            if (v91)
            {
LABEL_160:
              v95 = atomic_load((unsigned __int8 *)a1 + 1243);
              if ((v95 & 1) == 0)
              {
                if (*((_BYTE *)a1 + 824) && !*((_BYTE *)a1 + 1262))
                {
                  v89 = 28;
                  if (!v92)
                  {
LABEL_178:
                    *((_QWORD *)a1 + 71) = 0;
                    *((_QWORD *)a1 + 72) = 0;
                    v99 = (float64x2_t *)((char *)a1 + 568);
                    *((_QWORD *)a1 + 73) = 0;
                    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a1 + 1) + 360))(*((_QWORD *)a1 + 1)))
                    {
                      *((_DWORD *)a1 + 193) = 1065353216;
                      v100 = *(float *)(*v51 + 200);
                      if (v100 != 0.0)
                      {
                        v101 = v100 * (40075017.0 * *(double *)(v8 + 304)) / *(float *)(v8 + 476) + 1.0;
                        *((float *)a1 + 193) = v101;
                      }
                      *((_DWORD *)a1 + 192) = 0;
                      goto LABEL_205;
                    }
                    if (*((_BYTE *)a1 + 257))
                    {
                      if (*((_BYTE *)a1 + 164))
                      {
                        v102 = *((float *)a1 + 61) <= 10.0 && *((float *)a1 + 98) < 18.0;
                        if (*(_BYTE *)(v8 + 23))
                          v102 = 1;
                        if (v102)
                          v104 = 2;
                        else
                          v104 = 3;
                      }
                      else
                      {
                        v104 = 1;
                      }
                      v105 = *((unsigned __int8 *)a1 + 256);
                      if (v105 != v104)
                      {
                        *((_BYTE *)a1 + 1295) = v105 != 0;
                        *((_BYTE *)a1 + 256) = v104;
                      }
                      md::Label::updatePoiPositionOffsets((uint64_t)a1, (const LabelLayoutContext *)*(unsigned __int8 *)(v8 + 19), *(float *)(v8 + 424));
                      goto LABEL_205;
                    }
                    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a1 + 1) + 328))(*((_QWORD *)a1 + 1)))
                    {
                      v103 = *(float *)(v8 + 52);
                    }
                    else if (*((_BYTE *)a1 + 1211) == 4)
                    {
                      v103 = *(float *)(v8 + 60);
                    }
                    else
                    {
                      if (!*((_BYTE *)a1 + 830))
                        *((_DWORD *)a1 + 194) = *(_DWORD *)(*v51 + 208);
                      if (*((_BYTE *)a1 + 829))
                      {
LABEL_205:
                        v106 = *((float *)a1 + 192);
                        if (v106 != 0.0)
                        {
                          v107 = *((double *)a1 + 67);
                          v108 = *((double *)a1 + 29) * v106;
                          *(float64x2_t *)((char *)a1 + 568) = vmlaq_n_f64(*(float64x2_t *)((char *)a1 + 568), *(float64x2_t *)((char *)a1 + 520), v108);
                          *((double *)a1 + 73) = *((double *)a1 + 73) + v108 * v107;
                        }
                        v109 = *((float *)a1 + 194);
                        if (v109 == 0.0)
                        {
                          if (!*((_BYTE *)a1 + 164))
                            goto LABEL_222;
                        }
                        else
                        {
                          if (!*((_BYTE *)a1 + 164))
                            goto LABEL_222;
                          v110 = *((double *)a1 + 28) * v109;
                          v111 = (float)(*((float *)a1 + 40) * v110);
                          *v99 = vaddq_f64(*v99, vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)((char *)a1 + 152), v110)));
                          *((double *)a1 + 73) = *((double *)a1 + 73) + v111;
                        }
                        if (*((_BYTE *)a1 + 180))
                        {
                          if (!*((_BYTE *)a1 + 828))
                          {
                            v112 = fabsf(*((float *)a1 + 191));
                            if (v112 > 0.93)
                            {
                              v113 = v112;
                              if (v112 <= 0.985 && *((unsigned __int8 *)a1 + 184) == BYTE1(v214.f64[0]))
                                v114 = fminf(-*((float *)a1 + 54), 0.0);
                              else
                                v114 = fmaxf(*((float *)a1 + 53), 0.0);
                              v115 = v113 * 66.6667302 + -65.6667302;
                              v116 = fmin(fmax(v115, 0.0), 1.0) * v114;
                              *((float *)a1 + 202) = v116;
                            }
                          }
                          v117 = *((float *)a1 + 44);
                          v118 = *((double *)a1 + 28) * *((float *)a1 + 202);
                          *v99 = vmlaq_n_f64(*v99, vcvtq_f64_f32(*(float32x2_t *)((char *)a1 + 168)), v118);
                          *((double *)a1 + 73) = *((double *)a1 + 73) + v118 * v117;
                        }
LABEL_222:
                        v119 = vaddq_f64(*v99, *(float64x2_t *)((char *)a1 + 616));
                        v120 = *((double *)a1 + 73) + *((double *)a1 + 79);
                        *((float64x2_t *)a1 + 37) = v119;
                        *((double *)a1 + 76) = v120;
                        v121 = *((float *)a1 + 193);
                        if (v121 != 0.0)
                        {
                          v122 = *((double *)a1 + 29) * v121 * *(float *)(v8 + 1184);
                          v123 = *((double *)a1 + 67);
                          *((float64x2_t *)a1 + 37) = vmlaq_n_f64(v119, *v28, v122);
                          v119.f64[0] = v120 + v123 * v122;
                          *((_QWORD *)a1 + 76) = *(_QWORD *)&v119.f64[0];
                        }
                        if (*((_BYTE *)a1 + 259))
                        {
                          v124.n128_u64[0] = (unint64_t)md::LabelLayoutContext::projectPointToPixel((float64x2_t *)v8, (double *)a1 + 74, (float32x2_t *)a1 + 83);
                        }
                        else
                        {
                          v124.n128_f32[0] = md::Label::featurePixel((uint64_t)a1, a2, 0, v119.f64[0], v120);
                          *((_DWORD *)a1 + 166) = v124.n128_u32[0];
                          *((_DWORD *)a1 + 167) = v125;
                        }
                        if (*a4)
                        {
                          if (*((_BYTE *)a1 + 1266))
                          {
                            v126 = *(float **)(a2 + 432);
                            v124.n128_u32[0] = *((_DWORD *)a1 + 166);
                            if (v124.n128_f32[0] < v126[284]
                              || v124.n128_f32[0] >= v126[286]
                              || (v124.n128_u32[0] = *((_DWORD *)a1 + 167), v124.n128_f32[0] < v126[285])
                              || v124.n128_f32[0] >= v126[287])
                            {
                              v89 = 2;
                            }
                          }
                        }
                        if ((*(unsigned int (**)(_QWORD, __n128))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 32)
                                                                            + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 32), v124))
                        {
                          if (*((_BYTE *)a1 + 1210) == 1 && *(unsigned __int8 *)(*v51 + 261) <= 3u)
                          {
                            v127 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 32)
                                                                                     + 96))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 32), (char *)a1 + 664, *((unsigned __int8 *)a1 + 1215));
                            if (v127 != *((unsigned __int8 *)a1 + 1215))
                            {
                              *((_BYTE *)a1 + 320) = v127;
                              v128 = 32 * v127;
                              if (v127 >= 8)
                                v128 = 0;
                              *((_BYTE *)a1 + 321) = v128;
                              *((_BYTE *)a1 + 1215) = v127;
                            }
                          }
                        }
                        if (v89 != 37)
                        {
                          v129 = atomic_load((unsigned __int8 *)a1 + 1240);
                          if ((v129 & 1) == 0)
                          {
                            if (*((_QWORD *)a1 + 36))
                            {
                              *((_QWORD *)a1 + 36) = 0;
                              *((_BYTE *)a1 + 1247) = 1;
                            }
                            if (*((_BYTE *)a1 + 820) == 1)
                            {
                              *((_BYTE *)a1 + 821) = v89;
                              *((_BYTE *)a1 + 1290) = 0;
                              return;
                            }
                            goto LABEL_308;
                          }
                        }
                        v130 = *((_QWORD *)a1 + 33);
                        v131 = v130;
                        if (!v130)
                          v131 = *((_QWORD *)a1 + 34);
                        v132 = *((_DWORD *)a1 + 14);
                        v133 = *(_DWORD *)(a2 + 3312);
                        if (!*(_BYTE *)(a2 + 3375) || v132 == v133)
                        {
                          if (v131)
                          {
                            v175 = v130 == 0;
                            v137 = *((unsigned __int8 *)a1 + 404);
                            v138 = *((unsigned __int8 *)a1 + 1214);
                            *((_BYTE *)a1 + 1214) = v137;
                            if (v130)
                            {
                              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v130 + 72))(v130, a2);
                              v139 = *((_QWORD *)a1 + 33);
                              *(_QWORD *)v210 = 0;
                              v89 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _BYTE *))(*(_QWORD *)v139 + 80))(v139, a2, (char *)a1 + 664, v210);
                              v174 = 0;
                              v176 = 37;
                              v178 = 1;
                            }
                            else
                            {
                              if (v137 == v138)
                                (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 34) + 72))(*((_QWORD *)a1 + 34), a2);
                              v174 = v137 == v138;
                              v144 = *((_QWORD *)a1 + 34);
                              *(_QWORD *)v210 = 0;
                              v176 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _BYTE *))(*(_QWORD *)v144
                                                                                                  + 80))(v144, a2, (char *)a1 + 664, v210);
                              v178 = 0;
                              v89 = 37;
                            }
                            *(_DWORD *)&v210[8] = 0;
                            *(_QWORD *)&v210[1] = 0x100000000000000;
                            v210[0] = 0;
                            if (((v179 | (*(unsigned int (**)(uint64_t, uint64_t, BOOL, _BYTE *))(*(_QWORD *)v131 + 760))(v131, a2, v137 != v138, v210)) & 1) != 0|| md::LabelPlacement::operator!=((unsigned __int8 *)a1 + 312, (unsigned __int8 *)a1 + 317)|| *((_DWORD *)a1 + 13) != *(_DWORD *)(*((_QWORD *)a1 + 1) + 132)|| v132 != v133|| *((_BYTE *)a1 + 1295))
                            {
                              md::Label::createNextPart((uint64_t)a1, a2, (uint64_t)v210);
                              if (!*((_QWORD *)a1 + 33))
                                goto LABEL_278;
                              v178 = 0;
                            }
                            v143 = v176;
                            v142 = v178 != 0;
                            v140 = v174;
                            v141 = v175;
LABEL_272:
                            v145 = *((_QWORD *)a1 + 34);
                            if (v145)
                            {
                              v146 = *((_QWORD *)a1 + 33);
                              if (v146)
                                v140 = 1;
                              if ((v140 & 1) != 0)
                              {
                                if (v141)
                                {
LABEL_283:
                                  if (v146)
                                  {
                                    if (!v142)
                                    {
                                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 72))(v146, a2);
                                      v148 = *((_QWORD *)a1 + 33);
                                      *(_QWORD *)v210 = 0;
                                      v89 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _BYTE *))(*(_QWORD *)v148 + 80))(v148, a2, (char *)a1 + 664, v210);
                                      v146 = *((_QWORD *)a1 + 33);
                                    }
                                    if (v146 && (v89 & 0xFB) != 0xB && !*((_BYTE *)a1 + 1284))
                                    {
                                      if (v89 == 37)
                                      {
                                        *((_BYTE *)a1 + 1283) = 1;
                                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 104))(v146, a2);
                                        v172 = (uint64_t *)md::LabelStyle::animationStyleGroup((md::LabelStyle *)*v51);
                                        std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>((_QWORD *)a1 + 86, *v172, v172[1]);
                                        goto LABEL_291;
                                      }
                                      v158 = 2;
LABEL_310:
                                      md::Label::updateStateMachineForStaging((uint64_t)a1, v158, v89);
                                      if (*((_QWORD *)a1 + 36))
                                      {
                                        *((_QWORD *)a1 + 36) = 0;
LABEL_312:
                                        *((_BYTE *)a1 + 1247) = 1;
                                        goto LABEL_313;
                                      }
                                      goto LABEL_313;
                                    }
                                  }
                                  *((_BYTE *)a1 + 1283) = 0;
                                  if (*((_QWORD *)a1 + 34))
                                  {
                                    if (v143 == 37)
                                    {
LABEL_291:
                                      v149 = *(float **)(a2 + 432);
                                      if (v149[278] <= md::Label::boundsForStaging(a1)
                                        || v149[276] >= v151
                                        || v149[279] <= v150
                                        || v149[277] >= v152)
                                      {
                                        if (*a4)
                                        {
                                          LOBYTE(v89) = 2;
                                          goto LABEL_308;
                                        }
                                      }
                                      else
                                      {
                                        v153 = atomic_load((unsigned __int8 *)a1 + 481);
                                        if ((v153 & 1) != 0)
                                        {
                                          if (*(_BYTE *)(a2 + 3615)
                                            || !*(_BYTE *)(*(_QWORD *)(a2 + 232) + 23)
                                            || *(_BYTE *)(a2 + 3152)
                                            || *((_BYTE *)a1 + 485) != 2)
                                          {
                                            v154 = *(float *)(a2 + 3308);
                                            v155 = *((float *)a1 + 166);
                                            v156 = *((float *)a1 + 167);
                                            if (vabds_f32(v155, *((float *)a1 + 118)) >= v154
                                              || *(_BYTE *)(a2 + 3615)
                                              || vabds_f32(v156, *((float *)a1 + 119)) >= v154)
                                            {
                                              *((_BYTE *)a1 + 480) = 1;
                                              *((float *)a1 + 118) = v155;
                                              *((float *)a1 + 119) = v156;
                                            }
                                          }
                                          v157 = *((_BYTE *)a1 + 480);
                                          if (v157)
                                            v157 = *(_BYTE *)(a2 + 3153) != 0;
                                          *((_BYTE *)a1 + 482) = v157;
                                          if (*((_BYTE *)a1 + 485) != 2)
                                          {
                                            atomic_store(1u, (unsigned __int8 *)a1 + 1244);
                                            LOBYTE(v89) = 22;
LABEL_308:
                                            v158 = 3;
                                            goto LABEL_310;
                                          }
                                        }
                                      }
                                      if (!*((_BYTE *)a1 + 1290))
                                      {
                                        *((_BYTE *)a1 + 1106) = *((_BYTE *)a1 + 832);
                                        *((_BYTE *)a1 + 832) = *((_BYTE *)a1 + 831);
                                        *((_WORD *)a1 + 645) = 1;
                                        *((_BYTE *)a1 + 1263) = 1;
                                      }
                                      v171 = *((_QWORD *)a1 + 33);
                                      if (v171 && *((_BYTE *)a1 + 1283))
                                      {
                                        if (*((_QWORD *)a1 + 36) != v171)
                                        {
                                          *((_QWORD *)a1 + 36) = v171;
                                          *((_BYTE *)a1 + 1247) = 1;
                                        }
                                        if (*((_BYTE *)a1 + 1285))
                                          *((_BYTE *)a1 + 1291) = 0;
                                        goto LABEL_313;
                                      }
                                      v173 = *((_QWORD *)a1 + 34);
                                      if (*((_QWORD *)a1 + 36) != v173)
                                      {
                                        *((_QWORD *)a1 + 36) = v173;
                                        goto LABEL_312;
                                      }
LABEL_313:
                                      if (*((_BYTE *)a1 + 1290))
                                      {
                                        v159 = md::LabelStyle::collisionGroupInfo(*v51, *((unsigned __int8 *)a1 + 1210));
                                        if (__PAIR64__(*((unsigned __int8 *)a1 + 365), *((unsigned __int8 *)a1 + 364)) != __PAIR64__(BYTE5(v159), BYTE4(v159))
                                          || *((unsigned __int8 *)a1 + 366) != BYTE6(v159)
                                          || *((_DWORD *)a1 + 90) != (_DWORD)v159)
                                        {
                                          *((_DWORD *)a1 + 90) = v159;
                                          *((_BYTE *)a1 + 364) = BYTE4(v159);
                                          *((_BYTE *)a1 + 365) = BYTE5(v159);
                                          *((_BYTE *)a1 + 366) = BYTE6(v159);
                                          v160 = *((_QWORD *)a1 + 45);
                                          v161 = md::Label::resolvedCollisionOverlayGroup(a1);
                                          *((_BYTE *)a1 + 369) = v161;
                                          v162 = (_DWORD *)*((_QWORD *)a1 + 41);
                                          v163 = BYTE4(v160) + 3;
                                          v164 = BYTE4(v160) + 3;
                                          if ((BYTE4(v160) + 3) >= 0xBu)
                                          {
                                            v165 = SBYTE4(v160);
                                            if (SBYTE4(v160) >= 7)
                                              v165 = 7;
                                            if (v165 <= -3)
                                              LOBYTE(v165) = -3;
                                            v164 = v165 + 3;
                                          }
                                          v166 = 1 << v164;
                                          v162[8] = v166;
                                          v167 = LabelCollisionOverlayGroupToLayersCollided[v161];
                                          v162[9] = v167 | v166;
                                          v162[11] = 1 << SBYTE6(v160);
                                          v162[12] = v160;
                                          v168 = (_DWORD *)*((_QWORD *)a1 + 42);
                                          if (v168)
                                          {
                                            if ((BYTE4(v160) + 3) >= 0xBu)
                                            {
                                              v169 = SBYTE4(v160);
                                              if (SBYTE4(v160) >= 7)
                                                v169 = 7;
                                              if (v169 <= -3)
                                                LOBYTE(v169) = -3;
                                              v163 = v169 + 3;
                                            }
                                            v170 = 1 << v163;
                                            v168[8] = v170;
                                            v168[9] = v167 | v170;
                                            v168[11] = 1 << SBYTE6(v160);
                                            v168[12] = v160;
                                          }
                                        }
                                      }
                                      return;
                                    }
                                    v158 = 2;
                                    LOBYTE(v89) = v143;
                                    goto LABEL_310;
                                  }
                                  v43 = a1;
                                  v44 = 2;
LABEL_176:
                                  v45 = v89;
                                  goto LABEL_91;
                                }
                              }
                              else
                              {
                                (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v145 + 72))(*((_QWORD *)a1 + 34), a2);
                              }
                              if (!*((_BYTE *)a1 + 1284))
                              {
                                v147 = *((_QWORD *)a1 + 34);
                                *(_QWORD *)v210 = 0;
                                v143 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _BYTE *))(*(_QWORD *)v147 + 80))(v147, a2, (char *)a1 + 664, v210);
                              }
                            }
                            v146 = *((_QWORD *)a1 + 33);
                            goto LABEL_283;
                          }
                          v135 = a1;
                          v136 = a2;
                          v134 = 0;
                        }
                        else
                        {
                          v210[0] = 1;
                          *(_QWORD *)&v210[1] = 0;
                          *(_DWORD *)&v210[8] = 0;
                          if (v131 && *((_BYTE *)a1 + 820) == 2)
                          {
                            v210[8] = 1;
                            v210[0] = 0;
                          }
                          v134 = v210;
                          v135 = a1;
                          v136 = a2;
                        }
                        md::Label::createNextPart((uint64_t)v135, v136, (uint64_t)v134);
                        if (*((_QWORD *)a1 + 33))
                        {
                          v140 = 0;
                          v141 = 0;
                          v142 = 0;
                          v143 = 37;
                          v89 = 37;
                          goto LABEL_272;
                        }
LABEL_278:
                        v43 = a1;
                        v44 = 2;
                        v45 = 8;
                        goto LABEL_91;
                      }
                      v103 = *(float *)(*v51 + 204);
                      if (v103 == 0.0)
                        v103 = *((float *)a1 + 50);
                    }
                    *((float *)a1 + 192) = v103;
                    goto LABEL_205;
                  }
LABEL_175:
                  v43 = a1;
                  v44 = 8;
                  goto LABEL_176;
                }
                v96 = *((_QWORD *)a1 + 149);
                if (v96)
                {
                  v97 = atomic_load((unsigned __int8 *)(v96 + 55));
                  if ((v97 & 1) == 0)
                  {
                    v98 = atomic_load((unsigned __int8 *)a1 + 1241);
                    if ((v98 & 1) == 0
                      && (!this
                       || !*((_BYTE *)a1 + 1264)
                       || md::Label::checkReplacementLabelReady(a1, this, v83, *(double *)(*(_QWORD *)(a2 + 432) + 336))))
                    {
                      v89 = 29;
                      if (!v92)
                        goto LABEL_178;
                      goto LABEL_175;
                    }
                  }
                }
              }
              v89 = 37;
              if (!v92)
                goto LABEL_178;
              goto LABEL_175;
            }
          }
          if (!v92)
            goto LABEL_178;
          goto LABEL_175;
        }
      }
    }
    v92 = 0;
    v89 = 37;
    v91 = 1;
    v90 = 4;
    goto LABEL_158;
  }
}

void sub_19F0B4574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelStyle::setZoom(md::LabelStyle *this, float a2)
{
  float v4;
  float v5;
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  float v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  float v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD v31[2];
  unsigned __int8 v32;

  if (*((_BYTE *)this + 125))
  {
    v4 = fminf(fmaxf(a2, 0.0), 23.0);
LABEL_4:
    if (*((unsigned __int8 *)this + 136) != 255)
    {
      v5 = *((float *)this + 26);
      if (vabds_f32(v4, v5) < 0.01 && SLODWORD(v4) == SLODWORD(v5))
        return;
    }
    goto LABEL_9;
  }
  md::LabelStyle::updateZoomInvariantStyles(this);
  v4 = fminf(fmaxf(a2, 0.0), 23.0);
  if (*((_BYTE *)this + 125))
    goto LABEL_4;
LABEL_9:
  *((float *)this + 26) = v4;
  if (v4 >= 24.0)
    return;
  v7 = (int)v4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v30 = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v30 = 0;
    }
    v31[0] = 0;
    v31[1] = 0;
    v29 = v8;
    v32 = 0;
    v32 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v31);
    if (!v9)
      goto LABEL_57;
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (*((_BYTE *)this + 456))
      {
LABEL_28:
        v16 = v32;
        if (*((unsigned __int8 *)this + 136) == v7)
        {
          if (v32)
            md::LabelCoreStyleGroup::update((uint64_t)this + 140, (uint64_t)&v29, *((_QWORD *)this + 2), *((unsigned __int8 *)this + 93), 0, *((float *)this + 26), *((float *)this + 22));
          else
            *((_BYTE *)this + 456) = 0;
LABEL_52:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v29);
          return;
        }
LABEL_33:
        *((_BYTE *)this + 136) = v7;
        if (v16)
        {
          *((_BYTE *)this + 456) = 1;
          md::LabelCoreStyleGroup::update((uint64_t)this + 140, (uint64_t)&v29, *((_QWORD *)this + 2), *((unsigned __int8 *)this + 93), 1, *((float *)this + 26), *((float *)this + 22));
        }
        else
        {
          *((_BYTE *)this + 456) = 0;
        }
        *((_BYTE *)this + 457) = 0;
        v17 = *((_QWORD *)this + 42);
        v18 = *((_QWORD *)this + 43);
        if (v17 == v18)
          goto LABEL_43;
        v19 = v18 - v17 - 16;
        if (v19 > 0xF)
        {
          v20 = (v19 >> 4) + 1;
          v21 = (uint64_t *)(v17 + 24);
          v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v23 = *(v21 - 2);
            v24 = *v21;
            v21 += 4;
            *(_BYTE *)(v23 + 12) = 0;
            *(_BYTE *)(v24 + 12) = 0;
            v22 -= 2;
          }
          while (v22);
          if (v20 == (v20 & 0x1FFFFFFFFFFFFFFELL))
            goto LABEL_43;
          v17 += 16 * (v20 & 0x1FFFFFFFFFFFFFFELL);
        }
        do
        {
          *(_BYTE *)(*(_QWORD *)(v17 + 8) + 12) = 0;
          v17 += 16;
        }
        while (v17 != v18);
LABEL_43:
        *(_OWORD *)((char *)this + 296) = 0u;
        *(_OWORD *)((char *)this + 312) = 0u;
        *(_OWORD *)((char *)this + 264) = 0u;
        *(_OWORD *)((char *)this + 280) = 0u;
        v25 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
        *((_QWORD *)this + 41) = 0;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (*((float *)this + 59) >= 1.0)
          v28 = *((float *)this + 59);
        else
          v28 = 20.0;
        *((long double *)this + 16) = ldexp(1.0, v7) * 768.0 / v28;
        goto LABEL_52;
      }
    }
    else
    {
LABEL_57:
      if (*((_BYTE *)this + 456))
        goto LABEL_28;
    }
    v16 = v32;
    goto LABEL_33;
  }
  if (*((unsigned __int8 *)this + 136) != v7)
  {
    *((_BYTE *)this + 136) = v7;
    if (*((float *)this + 59) >= 1.0)
      v13 = *((float *)this + 59);
    else
      v13 = 20.0;
    *((long double *)this + 16) = ldexp(1.0, v7) * 768.0 / v13;
  }
}

void sub_19F0B48B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (a11)
  {
    v17 = (unint64_t *)&a11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelFeature::isVenue(md::LabelFeature *this)
{
  return 0;
}

void md::LabelStyle::setVariantStyleType(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  if (*(unsigned __int8 *)(a1 + 94) != a2
    || __PAIR64__(*(unsigned __int8 *)(a1 + 96), *(unsigned __int8 *)(a1 + 95)) != __PAIR64__(BYTE2(a2), BYTE1(a2))
    || *(unsigned __int8 *)(a1 + 97) != BYTE3(a2)
    || *(unsigned __int8 *)(a1 + 98) != BYTE4(a2)
    || *(unsigned __int8 *)(a1 + 99) != BYTE5(a2)
    || *(unsigned __int8 *)(a1 + 100) != BYTE6(a2)
    || *(unsigned __int8 *)(a1 + 101) != HIBYTE(a2))
  {
    v3 = a1 + 408;
    *(_QWORD *)(a1 + 94) = a2;
    *(_BYTE *)(a1 + 136) = -1;
    *(_BYTE *)(a1 + 125) = 0;
    v4 = *(std::__shared_weak_count **)(a1 + 416);
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 416) = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = *(std::__shared_weak_count **)(a1 + 432);
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void md::LabelLayoutContext::evaluateWorldPoint(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, double a7)
{
  double v7;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float v30;
  float v31;
  double v32;
  double v33;
  BOOL v34;
  double v35;
  float v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;
  float v59;

  *(_DWORD *)a6 = *(_DWORD *)(a1 + 32);
  v7 = *(double *)(a1 + 256);
  *(double *)(a6 + 16) = v7;
  *(double *)(a6 + 24) = v7 / a7;
  *(_WORD *)(a6 + 32) = 0;
  *(_DWORD *)(a6 + 12) = 1065353216;
  *(_QWORD *)(a6 + 4) = 0x3F80000000000000;
  if (a4 != 6)
  {
    v10 = *(_BYTE **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 24) && *(_BYTE *)(a3 + 12))
    {
      v11 = a1 + 112;
      v12 = 136;
      if (a5)
        v12 = 112;
      else
        v11 = a1 + 136;
      v13 = *(double *)(a1 + v12) - *(double *)a2;
      v14 = *(double *)(v11 + 8) - *(double *)(a2 + 8);
      v15 = *(double *)(v11 + 16) - *(double *)(a2 + 16);
      v16 = 1.0 / sqrt(v13 * v13 + v14 * v14 + v15 * v15);
      v17 = v16 * v13;
      v18 = v16 * v14;
      if (v10[25])
      {
        v19 = (float)((float)(*(float *)a3 * v17) + (float)(*(float *)(a3 + 4) * v18))
            / sqrtf((float)((float)(v17 * v17) + (float)(v18 * v18))* (float)((float)(*(float *)a3 * *(float *)a3) + (float)(*(float *)(a3 + 4) * *(float *)(a3 + 4))));
      }
      else
      {
        v20 = v16 * v15;
        v19 = (float)((float)(*(float *)a3 * v17) + (float)(*(float *)(a3 + 4) * v18))
            + (float)(*(float *)(a3 + 8) * v20);
      }
      *(float *)(a6 + 8) = v19;
      if (v10[26])
        *(_BYTE *)(a6 + 33) = COERCE__INT64(-(*(float *)(a3 + 4) * v17 - *(float *)a3 * v18)) < 0;
    }
    if (!v10[18]
      || *(_BYTE *)(a1 + 15)
      || (v21 = vmulq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 168)),
          v21.f64[0] + *(double *)a2 * *(double *)(a1 + 160) + v21.f64[1] <= *(double *)(a1 + 288)))
    {
      if (!*(_BYTE *)(a1 + 9))
      {
        v22 = a1 + 112;
        v23 = 136;
        if (a5)
          v23 = 112;
        else
          v22 = a1 + 136;
        v24 = *(double *)a2 - *(double *)(a1 + v23);
        v25 = *(double *)(a2 + 8) - *(double *)(v22 + 8);
        v26 = *(double *)(a2 + 16) - *(double *)(v22 + 16);
        v27 = *(double *)(a1 + 160) * v24 + *(double *)(a1 + 168) * v25 + *(double *)(a1 + 176) * v26;
        if (a4 > 1
          || (v28 = *(double *)(a1 + 160) * v24 + *(double *)(a1 + 168) * v25 + *(double *)(a1 + 176) * v26,
              *(_BYTE *)(a1 + 15)))
        {
          v28 = sqrt(v24 * v24 + v25 * v25 + v26 * v26);
        }
        v29 = v28 / a7;
        *(double *)(a6 + 16) = v28;
        *(double *)(a6 + 24) = v29;
        if (*(_BYTE *)(a1 + 1273) && (v30 = *(float *)(a1 + 1276), v31 = *(float *)(a1 + 1280), v30 > v31))
        {
          v32 = *(double *)(a1 + 256);
          v33 = v32 * v31 / v30;
          v34 = v27 < v32 - v33;
          if (v27 > v33 + v32)
            v34 = 1;
        }
        else
        {
          v34 = v27 < *(double *)(a1 + 272) || v27 > *(double *)(a1 + 280);
        }
        *(_BYTE *)(a6 + 32) = v34;
        if (*(_BYTE *)(a1 + 16) || !v34)
        {
          v35 = *(double *)(a1 + 264);
          v36 = *(double *)(a1 + 256) / v27;
          *(float *)(a6 + 12) = v36;
          v37 = *(unsigned __int8 *)(a1 + 8);
          if (*(_BYTE *)(a1 + 8))
          {
            v38 = v26 / sqrt(v24 * v24 + v25 * v25 + v26 * v26);
          }
          else
          {
            v39 = *(double *)a2;
            v40 = *(double *)(a2 + 8);
            v41 = *(double *)(a2 + 16);
            v42 = sqrt(v39 * v39 + v40 * v40 + v41 * v41);
            if (v42 <= 0.001)
            {
              v44 = *(double *)(a1 + 208);
              v45 = *(double *)(a1 + 216);
              v46 = *(double *)(a1 + 224);
            }
            else
            {
              v43 = 1.0 / v42;
              v44 = v43 * v39;
              v45 = v43 * v40;
              v46 = v43 * v41;
            }
            v38 = *(double *)(a1 + 160) * v44 + *(double *)(a1 + 168) * v45 + *(double *)(a1 + 176) * v46;
          }
          v47 = v38 + 1.0;
          v48 = fminf(fmaxf(v47, 0.0), 1.0);
          *(float *)(a6 + 4) = v48;
          v49 = 0.0;
          switch(a4)
          {
            case 0u:
            case 6u:
              v49 = *(float *)(a1 + 32);
              break;
            case 1u:
              v51 = *(float *)(a1 + 428);
              v52 = log2(v35 * v27);
              v49 = v51 - v52;
              if (!v37)
                v49 = *(double *)(a1 + 296) + v49;
              if (!*(_BYTE *)(a1 + 15) && v48 > 0.8)
                v49 = fmaxf(v49 + log2f(fmaxf(1.0 - v48, 0.01)), 0.0);
              break;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              v50 = v29;
              switch(a4)
              {
                case 2u:
                  v49 = log2f(fmaxf(v50, 1.0));
                  break;
                case 3u:
                  v53 = log2f(fmaxf(v50 + -3.0, 1.0));
                  v54 = 1.7095;
                  goto LABEL_49;
                case 4u:
                  v53 = log2f(fmaxf(v50 + -3.0, 1.0));
                  v54 = 3.1063;
LABEL_49:
                  v49 = v53 * v54;
                  break;
                case 5u:
                  v55 = 220.0 / v50;
                  v56 = v55 + -1.0;
                  v57 = v55 < 0.1;
                  v58 = -0.9;
                  if (!v57)
                    v58 = v56;
                  v49 = (float)(logf(v58) * -5.0) + 25.0;
                  break;
                default:
                  goto LABEL_53;
              }
              break;
            default:
              break;
          }
LABEL_53:
          v59 = floor((float)(v49 * 100.0) + 0.5) * 0.01;
          *(float *)a6 = fmaxf(v59, 0.0);
        }
      }
    }
    else
    {
      *(_BYTE *)(a6 + 32) = 1;
    }
  }
}

uint64_t md::PointLabelFeature::isVenue(md::PointLabelFeature *this)
{
  return *((unsigned __int8 *)this + 648);
}

uint64_t md::LineLabelFeature::style(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned __int8 *v22;
  double v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  md::SharedDeviceResources *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;

  if (!a2)
    return a1 + 80;
  v6 = *(_QWORD *)(a1 + 232);
  if (!v6)
    goto LABEL_13;
  v10 = a1 + 232;
  do
  {
    v11 = *(_DWORD *)(v6 + 32);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = (uint64_t *)v6;
    else
      v13 = (uint64_t *)(v6 + 8);
    if (v12)
      v10 = v6;
    v6 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 232 || *(_DWORD *)(v10 + 32) > a2)
  {
LABEL_13:
    v14 = 0;
    goto LABEL_14;
  }
  v19 = *(unsigned __int8 **)(v10 + 40);
  v14 = *(std::__shared_weak_count **)(v10 + 48);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (!v19)
    goto LABEL_14;
  v22 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v19 + 200))(v19);
  v24 = v22;
  if (!v22)
    goto LABEL_37;
  if (*(_QWORD *)v22)
  {
    if (*((_DWORD *)v22 + 10) == *(_DWORD *)(*(_QWORD *)v22 + 252))
    {
      v25 = (uint64_t *)*((_QWORD *)v22 + 3);
      if (v25)
      {
        if ((*((__int16 *)v22 + 17) & 0x80000000) == 0)
          goto LABEL_35;
      }
    }
  }
  md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v22, v22[164], v23);
  v25 = *(uint64_t **)v24;
  if (!*(_QWORD *)v24)
    goto LABEL_38;
  if (*((_DWORD *)v24 + 10) != *((_DWORD *)v25 + 63))
    goto LABEL_37;
  v25 = (uint64_t *)*((_QWORD *)v24 + 3);
  if (!v25)
    goto LABEL_38;
  if ((*((__int16 *)v24 + 17) & 0x80000000) == 0)
  {
LABEL_35:
    v25 = (uint64_t *)*v25;
    if (v25)
      LODWORD(v25) = *((_DWORD *)v25 + 10);
    else
      LODWORD(v25) = -1;
  }
  else
  {
LABEL_37:
    LODWORD(v25) = 0;
  }
LABEL_38:
  v26 = *(_QWORD *)(a1 + 272);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 280) - v26) >> 4) > v25)
  {
    v27 = v19[9];
    v28 = v26 + 80 * v25;
    if (a4)
    {
      if (*(_DWORD *)(a1 + 304) != (_DWORD)v25)
      {
        *(_DWORD *)(a1 + 304) = (_DWORD)v25;
        v29 = operator new();
        *(_QWORD *)v29 = *(_QWORD *)v28;
        v30 = *(_QWORD *)(v28 + 8);
        *(_QWORD *)(v29 + 8) = v30;
        if (v30)
        {
          v31 = (unint64_t *)(v30 + 8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        *(_OWORD *)(v29 + 48) = 0u;
        *(_OWORD *)(v29 + 64) = 0u;
        *(_OWORD *)(v29 + 16) = 0u;
        *(_OWORD *)(v29 + 32) = 0u;
        v33 = *(md::SharedDeviceResources **)(a1 + 312);
        *(_QWORD *)(a1 + 312) = v29;
        if (v33)
        {
          md::SharedDeviceResources::~SharedDeviceResources(v33);
          MEMORY[0x1A1AF4E00](v34, 0x60C40D5E51E28);
        }
      }
      v28 = *(_QWORD *)(a1 + 312);
    }
    v35 = v28 + 48;
    if (v27 == 3)
    {
      v36 = 1;
    }
    else
    {
      v35 = v28 + 64;
      v36 = 12;
    }
    if (((1 << v27) & 0x1E7) != 0)
      v37 = v28 + 16;
    else
      v37 = v35;
    if (((1 << v27) & 0x1E7) != 0)
      v38 = 0;
    else
      v38 = v36;
    if (v27 > 8)
    {
      v37 = 0;
      v38 = 0;
    }
    if (a3)
    {
      v37 = 0;
      v39 = 0;
    }
    else
    {
      v39 = v38;
    }
    if (v37)
      v15 = v37;
    else
      v15 = v28 + 16;
    if (a5 && !*(_QWORD *)v15)
    {
      md::LineLabelFeature::resolvedStyleAttributes(&v59, *(const FeatureStyleAttributes **)v28, a4, v39);
      v56 = v59;
      v57 = v60;
      if (v60)
      {
        v40 = (unint64_t *)&v60->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
      md::LabelManager::styleForFeatureAttributes((uint64_t *)&v58, *(_QWORD *)(a5 + 336), &v56, v42);
      v43 = v58;
      v58 = 0uLL;
      v44 = *(std::__shared_weak_count **)(v15 + 8);
      *(_OWORD *)v15 = v43;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
      if (*((_QWORD *)&v58 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = v57;
      if (v57)
      {
        v51 = (unint64_t *)&v57->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = v60;
      if (v60)
      {
        v54 = (unint64_t *)&v60->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }
    goto LABEL_15;
  }
LABEL_14:
  v15 = a1 + 80;
LABEL_15:
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v15;
}

void sub_19F0B5384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::PolylineLabelPlacement::labelPosition(md::PolylineLabelPlacement *this)
{
  return (uint64_t)this + 48;
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::isNavHighZoomActive(md::MapNavLabeler *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 1) + 352))((char *)this - 8);
  if ((_DWORD)result)
    return *((unsigned __int8 *)this + 122) == 1;
  return result;
}

uint64_t md::MapNavLabeler::isNavActive(md::MapNavLabeler *this)
{
  return *((unsigned __int8 *)this + 128);
}

float md::LabelFeature::minZoomRank(md::LabelFeature *this)
{
  return 254.0;
}

uint64_t *md::LabelStyle::getLabelKnobs(uint64_t *result, uint64_t a2, int a3, char a4, double a5, float a6)
{
  int v6;
  unsigned int v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t *v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v6 = *((_DWORD *)result + 45);
  if (!v6)
    v6 = 0x7FFFFFFF;
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v6;
  v7 = *((_DWORD *)result + 46);
  *(_DWORD *)(a2 + 20) = v7;
  *(_BYTE *)(a2 + 33) = *((_BYTE *)result + 240);
  LOBYTE(v7) = *((_BYTE *)result + 112);
  v8 = (float)v7;
  *(float *)(a2 + 24) = v8;
  LOBYTE(a6) = *((_BYTE *)result + 113);
  v9 = (float)LODWORD(a6);
  *(float *)(a2 + 28) = v9;
  *(_BYTE *)(a2 + 32) = *((_BYTE *)result + 142);
  *(float *)(a2 + 8) = v8;
  v10 = *(uint64_t *)((char *)result + 188);
  *(_QWORD *)(a2 + 12) = v10;
  v12 = result;
  switch(a3)
  {
    case 1:
      v17 = result[34];
      if (!v17)
      {
        result = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)result);
        v17 = *result;
        v12[34] = *result;
        v6 = *(_DWORD *)a2;
      }
      v18 = *(_DWORD *)(v17 + 60);
      if (v6 >= v18)
        v19 = v18;
      else
        v19 = v6;
      v20 = v6 + v18;
      if (v18 >= 1)
        v20 = v19;
      *(_DWORD *)(a2 + 4) = v20;
      return result;
    case 2:
    case 5:
    case 6:
      LOBYTE(v10) = *((_BYTE *)result + 114);
      v13 = (float)v10;
      LOBYTE(v10) = *((_BYTE *)result + 115);
      v14 = (float)v10;
      if ((a4 & 1) == 0)
        goto LABEL_7;
      goto LABEL_8;
    case 3:
    case 9:
      LOBYTE(v10) = *((_BYTE *)result + 116);
      v13 = (float)v10;
      LOBYTE(v10) = *((_BYTE *)result + 117);
      v14 = (float)v10;
      if ((a4 & 1) == 0)
      {
LABEL_7:
        LOBYTE(v10) = *((_BYTE *)result + 112);
        v15 = (float)v10;
        v13 = fmaxf(v13, v15);
        LOBYTE(v15) = *((_BYTE *)result + 113);
        v14 = fminf((float)LODWORD(v15), v14);
      }
      goto LABEL_8;
    case 4:
      LOBYTE(v10) = *((_BYTE *)result + 114);
      v21 = (float)v10;
      LOBYTE(v9) = *((_BYTE *)result + 118);
      v22 = (float)LODWORD(v9);
      v13 = fminf(v22, v21);
      LOBYTE(v21) = *((_BYTE *)result + 115);
      *(float *)&v10 = (float)LODWORD(v21);
      LOBYTE(v22) = *((_BYTE *)result + 119);
      v14 = fmaxf(*(float *)&v10, (float)LODWORD(v22));
      if ((a4 & 1) == 0)
      {
        LOBYTE(v10) = *((_BYTE *)result + 112);
        v23 = (float)v10;
        v13 = fmaxf(v13, v23);
        LOBYTE(v23) = *((_BYTE *)result + 113);
        v14 = fminf(v14, (float)LODWORD(v23));
      }
LABEL_8:
      v16 = result[33];
      if (!v16)
      {
        result = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)result);
        v16 = *result;
        v12[33] = *result;
      }
      LODWORD(v10) = *(_DWORD *)(v16 + 16);
      *(float *)(a2 + 24) = fmaxf(*(float *)&v10, v13);
      *(float *)(a2 + 28) = v14;
      goto LABEL_11;
    case 7:
      LOBYTE(v10) = *((_BYTE *)result + 118);
      v24 = (float)v10;
      LOBYTE(v10) = *((_BYTE *)result + 119);
      v25 = (float)v10;
      if ((a4 & 1) == 0)
      {
        LOBYTE(v10) = *((_BYTE *)result + 112);
        v26 = (float)v10;
        v24 = fmaxf(v24, v26);
        LOBYTE(v26) = *((_BYTE *)result + 113);
        v25 = fminf((float)LODWORD(v26), v25);
      }
      v27 = result[33];
      if (!v27)
      {
        result = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)result);
        v27 = *result;
        v12[33] = *result;
      }
      v28 = *(_DWORD *)(v27 + 16);
      *(float *)(a2 + 24) = fmaxf(*(float *)(v27 + 20), v24);
      *(float *)(a2 + 28) = v25;
      *(_DWORD *)(a2 + 8) = v28;
      return result;
    case 8:
      v29 = result[33];
      if (!v29)
      {
        result = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)result);
        v29 = *result;
        v12[33] = *result;
      }
      *(_BYTE *)(a2 + 33) = *(_BYTE *)(v29 + 63);
      LOBYTE(v10) = *((_BYTE *)v12 + 120);
      *(float *)&v10 = (float)v10;
      *(_DWORD *)(a2 + 24) = v10;
      *(_DWORD *)(a2 + 28) = 1132199936;
LABEL_11:
      *(_DWORD *)(a2 + 8) = v10;
      break;
    case 10:
      *(_BYTE *)(a2 + 32) = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t md::LabelFeature::styles(md::LabelFeature *this)
{
  return (uint64_t)this + 96;
}

uint64_t md::Label::updateStateMachineForStaging(uint64_t result, int a2, char a3)
{
  uint64_t v3;
  char v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v3 = result;
  v4 = byte_1A007EA28[3 * a2 + *(char *)(result + 820)];
  if (v4 == -1)
  {
    v4 = *(_BYTE *)(result + 820);
    goto LABEL_15;
  }
  if ((*(_BYTE *)(result + 820) != 0) == (byte_1A007EA28[3 * a2 + *(char *)(result + 820)] == 0))
  {
    result = *(_QWORD *)(result + 264);
    v6 = *(_QWORD **)(v3 + 272);
    if (v4)
    {
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
      if (!v6)
        goto LABEL_14;
      v7 = 19;
    }
    else
    {
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
      if (!v6)
        goto LABEL_14;
      v7 = 20;
    }
    result = (*(uint64_t (**)(_QWORD *))(*v6 + 8 * v7))(v6);
  }
LABEL_14:
  *(_BYTE *)(v3 + 820) = v4;
  *(_BYTE *)(v3 + 821) = a3;
LABEL_15:
  if (v4 != 2)
  {
    if (!v4)
    {
      *(_BYTE *)(v3 + 1283) = 0;
      *(_BYTE *)(v3 + 1285) = 0;
      result = *(_QWORD *)(v3 + 264);
      *(_QWORD *)(v3 + 264) = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      if (*(_QWORD *)(v3 + 288))
      {
        *(_QWORD *)(v3 + 288) = 0;
        *(_BYTE *)(v3 + 1247) = 1;
      }
    }
    *(_BYTE *)(v3 + 1290) = 0;
    *(_BYTE *)(v3 + 832) = *(_BYTE *)(v3 + 831);
    if (*(_BYTE *)(v3 + 1250))
    {
      *(_BYTE *)(v3 + 1250) = 0;
      v8 = atomic_load((unsigned __int8 *)(v3 + 1240));
      if ((v8 & 1) == 0)
        *(_BYTE *)(v3 + 834) = 1;
    }
  }
  v9 = atomic_load((unsigned __int8 *)(v3 + 481));
  if ((v9 & 1) == 0)
    *(_BYTE *)(v3 + 485) = 2 * (*(_BYTE *)(v3 + 820) == 2);
  return result;
}

BOOL md::LabelPlacement::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;

  if (*a1 != *a2)
    return 1;
  if (a1[1] != a2[1])
    return 1;
  v2 = a1[3];
  if (v2 != a2[3])
    return 1;
  if (v2 == 10)
    return a1[4] != a2[4];
  return 0;
}

float md::Label::boundsForStaging(md::Label *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 33);
  if (v2 && *((_BYTE *)this + 1283))
    return *(float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 248))(v2);
  v2 = *((_QWORD *)this + 34);
  if (v2)
    return *(float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 248))(v2);
  else
    return 3.4028e38;
}

uint64_t md::LabelPart::collisionBoundsForStaging(md::LabelPart *this)
{
  return *((_QWORD *)this + 3) + 152;
}

md::LabelLineResolvedPosition *md::LabelLineResolvedPosition::LabelLineResolvedPosition(md::LabelLineResolvedPosition *this, const md::LabelLinePosition *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  double v11;
  BOOL v12;
  md::LabelPoint *v13;
  uint64_t v14;
  const md::LabelPoint *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v21;

  v3 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = *(_QWORD *)this;
  }
  v7 = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 1) = v7;
  v8 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 4) = v8;
  v9 = *((_DWORD *)a2 + 10);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 10) = v9;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 24) = 2139095039;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 50) = 0;
  *((_BYTE *)this + 102) = 0;
  *((_DWORD *)this + 36) = 2139095039;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_WORD *)this + 74) = 0;
  *((_BYTE *)this + 150) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_QWORD *)this + 19) = 0;
  if (v3 && v9 == *(_DWORD *)(v3 + 252))
  {
    if (*((_QWORD *)&v7 + 1) && (v8 & 0x80000000) == 0)
    {
      *((_BYTE *)this + 164) = *(_BYTE *)(**((_QWORD **)&v7 + 1) + 34);
      *(_WORD *)((char *)this + 165) = 0;
      v10 = (char *)this + 166;
      *((_BYTE *)this + 167) = 0;
      goto LABEL_15;
    }
    *((_DWORD *)this + 41) = 0;
    v10 = (char *)this + 166;
  }
  else
  {
    v10 = (char *)this + 166;
    *((_DWORD *)this + 41) = 0;
  }
  md::LabelLineResolvedPosition::moveOntoPathForZoom(this, 0, *(double *)&v7);
  if (!*(_QWORD *)this
    || *((_DWORD *)this + 10) != *(_DWORD *)(*(_QWORD *)this + 252)
    || !*((_QWORD *)this + 3)
    || *((__int16 *)this + 17) < 0)
  {
LABEL_31:
    *v10 = 0;
    return this;
  }
LABEL_15:
  *((_BYTE *)this + 166) = md::LabelLinePosition::getLabelPoint(this, (md::LabelLineResolvedPosition *)((char *)this + 104));
  if (!*(_QWORD *)this
    || *((_DWORD *)this + 10) != *(_DWORD *)(*(_QWORD *)this + 252)
    || !*((_QWORD *)this + 3)
    || *((__int16 *)this + 17) < 0)
  {
    md::LabelLineResolvedPosition::moveOntoPathForZoom(this, *((unsigned __int8 *)this + 164), v11);
  }
  LODWORD(v11) = *((_DWORD *)this + 9);
  if (*(float *)&v11 >= 0.0)
  {
    if (!*(_QWORD *)this
      || *((_DWORD *)this + 10) != *(_DWORD *)(*(_QWORD *)this + 252)
      || !*((_QWORD *)this + 3)
      || *((__int16 *)this + 17) < 0)
    {
      md::LabelLineResolvedPosition::moveOntoPathForZoom(this, *((unsigned __int8 *)this + 164), v11);
      LODWORD(v11) = *((_DWORD *)this + 9);
    }
    v12 = *(float *)&v11 > 1.0;
  }
  else
  {
    v12 = 1;
  }
  *((_BYTE *)this + 167) = v12;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)this + 120);
  *((_QWORD *)this + 11) = *((_QWORD *)this + 17);
  *((_DWORD *)this + 24) = *((_DWORD *)this + 36);
  *(_DWORD *)((char *)this + 99) = *(_DWORD *)((char *)this + 147);
  v13 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, _QWORD))(***((_QWORD ***)this + 3) + 24))(**((_QWORD **)this + 3), *((__int16 *)this + 17));
  v21 = -1;
  if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)&v21))
    goto LABEL_31;
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16 * (__int16)v21);
  v15 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 24))(v14, SHIWORD(v21));
  md::LabelPoint::vectorToPoint(v13, v15, *(unsigned __int8 *)(*(_QWORD *)this + 290));
  v19 = 1.0 / sqrt(v16 * v16 + v17 * v17 + v18 * v18);
  *(float *)&v16 = v19 * v16;
  *(float *)&v17 = v19 * v17;
  *(float *)&v18 = v19 * v18;
  *((_DWORD *)this + 38) = LODWORD(v16);
  *((_DWORD *)this + 39) = LODWORD(v17);
  *((_DWORD *)this + 40) = LODWORD(v18);
  return this;
}

void sub_19F0B5B10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::LabelLinePosition::getLabelPoint(md::LabelLinePosition *this, md::LabelPoint *a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v6;
  const md::LabelPoint *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v12;
  _OWORD v13[2];
  uint64_t v14;
  _DWORD v15[2];

  if (*(_QWORD *)this)
  {
    if (*((_DWORD *)this + 10) == *(_DWORD *)(*(_QWORD *)this + 252))
    {
      v3 = (_QWORD *)*((_QWORD *)this + 3);
      if (v3)
      {
        v4 = *((__int16 *)this + 17);
        if ((v4 & 0x80000000) == 0
          && (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 16))(*v3) > (unint64_t)(unsigned __int16)v4)
        {
          v6 = (*(uint64_t (**)(_QWORD, _QWORD))(***((_QWORD ***)this + 3) + 24))(**((_QWORD **)this + 3), *((__int16 *)this + 17));
          v7 = (const md::LabelPoint *)v6;
          if (*((float *)this + 9) == 0.0)
          {
            *(_QWORD *)a2 = *(_QWORD *)v6;
            *((_QWORD *)a2 + 1) = *(_QWORD *)(v6 + 8);
            *((_QWORD *)a2 + 2) = *(_QWORD *)(v6 + 16);
            *((_QWORD *)a2 + 3) = *(_QWORD *)(v6 + 24);
            *((_QWORD *)a2 + 4) = *(_QWORD *)(v6 + 32);
            v12 = *(_DWORD *)(v6 + 40);
            *(_DWORD *)((char *)a2 + 43) = *(_DWORD *)(v6 + 43);
            *((_DWORD *)a2 + 10) = v12;
            return 1;
          }
          LODWORD(v13[0]) = -1;
          if ((md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)v13) & 1) != 0)
          {
            v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16 * SLOWORD(v13[0]));
            v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, SWORD1(v13[0]));
            md::LabelPoint::lerped((md::LabelPoint *)v13, v7, *((float *)this + 9), v9);
            v10 = v13[1];
            *(_OWORD *)a2 = v13[0];
            *((_OWORD *)a2 + 1) = v10;
            *((_QWORD *)a2 + 4) = v14;
            *((_DWORD *)a2 + 10) = v15[0];
            *(_DWORD *)((char *)a2 + 43) = *(_DWORD *)((char *)v15 + 3);
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

void md::LabelPoint::lerped(md::LabelPoint *this, const md::LabelPoint *a2, double a3, uint64_t a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  double v13;
  double v14;
  double v15;
  float64x2_t *v16;
  char v17;
  char v18;
  long double v19;
  long double v20;
  double v21;
  long double v22;
  double v23;
  __double2 v24;
  double v25;
  __double2 v26;
  double v27;
  double v28;
  double v29;
  double v30;

  v8 = *((float *)a2 + 10);
  v9 = 3.4028e38;
  if (v8 != 3.4028e38)
  {
    v10 = *(float *)(a4 + 40);
    v11 = v8 + (float)(v10 - v8) * a3;
    if (v10 == 3.4028e38)
      v9 = 3.4028e38;
    else
      v9 = v11;
  }
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (*((_BYTE *)a2 + 45))
    v12 = *(_BYTE *)(a4 + 45) == 0;
  else
    v12 = 1;
  if (v12)
  {
    if (*(_BYTE *)(a4 + 44))
    {
      v14 = *(double *)a4;
      v13 = *(double *)(a4 + 8);
      v15 = *(double *)(a4 + 16);
    }
    else
    {
      v19 = *(double *)(a4 + 24) * 6.28318531;
      v30 = a3;
      v20 = exp(*(double *)(a4 + 32) * 6.28318531 + -3.14159265);
      v21 = atan(v20) * 2.0 + -1.57079633;
      v22 = fmod(v19, 6.28318531);
      v23 = fmod(v22 + 6.28318531, 6.28318531) + -3.14159265;
      v24 = __sincos_stret(v21);
      v25 = 6378137.0 / sqrt(v24.__sinval * v24.__sinval * -0.00669437999 + 1.0);
      v26 = __sincos_stret(v23);
      a3 = v30;
      v14 = v25 * v24.__cosval * v26.__cosval;
      v13 = v25 * v24.__cosval * v26.__sinval;
      v15 = v24.__sinval * 0.99330562 * v25;
      *(double *)a4 = v14;
      *(double *)(a4 + 8) = v13;
      *(double *)(a4 + 16) = v15;
      *(_BYTE *)(a4 + 44) = 1;
    }
    v18 = 0;
    v27 = *((double *)a2 + 1) + (v13 - *((double *)a2 + 1)) * a3;
    v28 = *((double *)a2 + 2) + (v15 - *((double *)a2 + 2)) * a3;
    *(double *)this = *(double *)a2 + (v14 - *(double *)a2) * a3;
    *((double *)this + 1) = v27;
    *((double *)this + 2) = v28;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    v17 = 1;
  }
  else
  {
    v29 = a3;
    v16 = (float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)a4);
    v17 = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    *(float64x2_t *)((char *)this + 24) = vmlaq_n_f64(*(float64x2_t *)((char *)a2 + 24), vsubq_f64(*v16, *(float64x2_t *)((char *)a2 + 24)), v29);
    v18 = 1;
  }
  *((float *)this + 10) = v9;
  *((_BYTE *)this + 44) = v17;
  *((_BYTE *)this + 45) = v18;
  *((_BYTE *)this + 46) = 1;
}

uint64_t md::LabelStyle::animationStyleGroup(md::LabelStyle *this)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  _QWORD v48[2];
  uint64_t *v49;
  std::__shared_weak_count *v50;
  _QWORD v51[2];
  unsigned __int8 v52;
  __int16 v53;
  char v54;
  char v55;

  if (!*((_QWORD *)this + 40))
  {
    v53 = 0;
    v54 = 6;
    v3 = *((_QWORD *)this + 42);
    v4 = *((_QWORD *)this + 43);
    if (v3 != v4)
    {
      while (1)
      {
        v5 = !*(_BYTE *)v3 && *(_BYTE *)(v3 + 1) == 0;
        if (v5 && *(_BYTE *)(v3 + 2) == 6)
          break;
        v3 += 16;
        if (v3 == v4)
          goto LABEL_15;
      }
    }
    if (v3 == v4)
    {
LABEL_15:
      v8 = (uint64_t *)operator new();
      *v8 = 0;
      v8[1] = 0;
      v49 = v8;
      v9 = operator new();
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = &off_1E42A0998;
      *(_DWORD *)(v9 + 24) = 0;
      v10 = *v8;
      *v8 = v9;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v7 = (uint64_t *)*((_QWORD *)geo::linear_map<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>,std::equal_to<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>>,std::allocator<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>,std::vector<std::pair<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType>,std::unique_ptr<md::LabelStyleGroupInfo>>>>::emplace<std::pair<md::LabelStyle::StyleQueryOptions,md::LabelStyleGroupType> const&,std::unique_ptr<md::LabelStyleGroupInfo>>((unsigned __int8 **)this + 42, &v53, &v49)+ 1);
      v11 = v49;
      if (v49)
      {
        v12 = *v49;
        *v49 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        MEMORY[0x1A1AF4E00](v11, 0x1020C4034E03FFCLL);
      }
    }
    else
    {
      v7 = *(uint64_t **)(v3 + 8);
    }
    if (!*((_BYTE *)v7 + 12))
    {
      v19 = *v7;
      *((_BYTE *)v7 + 12) = 1;
      if (*(_QWORD *)this)
      {
        v20 = md::LabelStyle::styleQueryForComponent((unsigned __int8 **)this, 0, 0);
        v21 = *(uint64_t **)v20;
        if (*(_QWORD *)v20)
        {
          v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 1);
          v48[0] = *(_QWORD *)v20;
          v48[1] = v22;
          if (v22)
          {
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(p_shared_owners);
            while (__stxr(v24 + 1, p_shared_owners));
            v50 = v22;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          else
          {
            v50 = 0;
          }
          v51[0] = 0;
          v51[1] = 0;
          v49 = v21;
          v52 = 0;
          v26 = (*(uint64_t (**)(uint64_t *, _QWORD *))(*v21 + 48))(v21, v51);
          v52 = v26;
          if (v22)
          {
            v27 = (unint64_t *)&v22->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
            v26 = v52;
          }
          if (v26)
          {
            if ((int)*((float *)this + 26) >= 0x17)
              v29 = 23;
            else
              v29 = (int)*((float *)this + 26);
            *(_QWORD *)(v19 + 8) = 0;
            *(_QWORD *)(v19 + 16) = 0;
            *(_DWORD *)(v19 + 24) = 0;
            v30 = v49[3];
            v31 = *(unsigned __int8 *)(v30 + 12);
            if (v31 == 2)
            {
              LOBYTE(v48[0]) = 1;
              v55 = 1;
              v32 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v30, 0x120u, v29, 0, v48);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v30, 0x120u, v29, 1u, &v55);
            }
            else
            {
              v32 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49[3], 0x120u, v29, v31, 0);
            }
            *(_DWORD *)(v19 + 8) = v32;
            v33 = v49[3];
            v34 = *(unsigned __int8 *)(v33 + 12);
            if (v34 == 2)
            {
              LOBYTE(v48[0]) = 1;
              v55 = 1;
              v35 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v33, 0x121u, v29, 0, v48);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v33, 0x121u, v29, 1u, &v55);
            }
            else
            {
              v35 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49[3], 0x121u, v29, v34, 0);
            }
            *(_DWORD *)(v19 + 12) = v35;
            v36 = v49[3];
            v37 = *(unsigned __int8 *)(v36 + 12);
            if (v37 == 2)
            {
              LOBYTE(v48[0]) = 1;
              v55 = 1;
              v38 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v36, 0x122u, v29, 0, v48);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v36, 0x122u, v29, 1u, &v55);
            }
            else
            {
              v38 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49[3], 0x122u, v29, v37, 0);
            }
            *(_DWORD *)(v19 + 16) = v38;
            v39 = v49[3];
            v40 = *(unsigned __int8 *)(v39 + 12);
            if (v40 == 2)
            {
              LOBYTE(v48[0]) = 1;
              v55 = 1;
              v41 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39, 0x124u, v29, 0, v48);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v39, 0x124u, v29, 1u, &v55);
            }
            else
            {
              v41 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49[3], 0x124u, v29, v40, 0);
            }
            *(_DWORD *)(v19 + 20) = v41;
            v42 = v49[3];
            v43 = *(unsigned __int8 *)(v42 + 12);
            if (v43 == 2)
            {
              LOBYTE(v48[0]) = 1;
              v55 = 1;
              v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v42, 0x123u, v29, 0, v48);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v42, 0x123u, v29, 1u, &v55);
            }
            else
            {
              v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v49[3], 0x123u, v29, v43, 0);
            }
            *(_BYTE *)(v19 + 24) = v44;
            v45 = v49[3];
            v46 = *(unsigned __int8 *)(v45 + 12);
            if (v46 == 2)
            {
              LOBYTE(v48[0]) = 1;
              v55 = 1;
              v47 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0x125u, v29, 0, v48);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v45, 0x125u, v29, 1u, &v55);
              *(_BYTE *)(v19 + 25) = v47;
            }
            else
            {
              *(_BYTE *)(v19 + 25) = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v49[3], 0x125u, v29, v46, 0);
            }
          }
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v49);
        }
      }
    }
    v13 = *v7;
    v14 = operator new(0x38uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1E42DCEE8;
    v14[3] = &off_1E42A0998;
    v15 = *(_DWORD *)(v13 + 24);
    *((_OWORD *)v14 + 2) = *(_OWORD *)(v13 + 8);
    *((_DWORD *)v14 + 12) = v15;
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 40) = v14 + 3;
    *((_QWORD *)this + 41) = v14;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return (uint64_t)this + 320;
}

void sub_19F0B6410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v15 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a12;
  if (a12)
  {
    v19 = (unint64_t *)&a12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F0B6494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<md::LabelStyleGroupInfo>::~unique_ptr[abi:nn180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::isOnRouteFeature(md::LabelFeature *this)
{
  return 0;
}

float md::LabelFeature::maxZoomRank(md::LabelFeature *this)
{
  return 252.0;
}

uint64_t md::LineLabelFeature::updateDynamicStyling(md::LineLabelFeature *this, LabelManager *a2, md::Label *a3)
{
  if (*((_BYTE *)this + 432))
  {
    (*(void (**)(md::LineLabelFeature *, LabelManager *, md::Label *))(*(_QWORD *)this + 536))(this, a2, a3);
    *((_BYTE *)this + 432) = 0;
  }
  return 0;
}

BOOL md::LineLabelFeature::hasIdentifier(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  double v11;
  unsigned __int8 *v12;

  v4 = *(_QWORD *)(a1 + 232);
  v2 = a1 + 232;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = *a2;
  v6 = v2;
  do
  {
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(_DWORD *)(v6 + 32))
    return 0;
  v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 200))(*(_QWORD *)(v6 + 40));
  v12 = v10;
  if (*(_QWORD *)v10
    && *((_DWORD *)v10 + 10) == *(_DWORD *)(*(_QWORD *)v10 + 252)
    && *((_QWORD *)v10 + 3)
    && (*((__int16 *)v10 + 17) & 0x80000000) == 0)
  {
    return 1;
  }
  md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v10, v10[164], v11);
  return *(_QWORD *)v12
      && *((_DWORD *)v12 + 10) == *(_DWORD *)(*(_QWORD *)v12 + 252)
      && *((_QWORD *)v12 + 3)
      && *((__int16 *)v12 + 17) >= 0;
}

uint64_t md::LabelFeature::style(uint64_t a1)
{
  return a1 + 80;
}

float md::PointLabelFeature::minZoomRank(md::PointLabelFeature *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned __int8 *)this + 653);
  return *((float *)this + v1 + 88);
}

double md::CollisionObject::resetWithCircles(void **this, unsigned int a2)
{
  void *v4;
  void *v5;
  unsigned int v6;
  double result;

  if (*((_DWORD *)this + 48) < a2)
  {
    free(this[23]);
    this[23] = malloc_type_calloc(a2, 0x18uLL, 0x1000040504FFAC1uLL);
    *((_DWORD *)this + 48) = a2;
  }
  v4 = this[20];
  if (v4)
  {
    free(v4);
    this[20] = 0;
    *((_DWORD *)this + 45) = 0;
    if (!a2)
      goto LABEL_9;
  }
  else if (*((_DWORD *)this + 45) >= a2)
  {
    goto LABEL_9;
  }
  free(this[21]);
  v5 = malloc_type_malloc(12 * a2, 0x10000403E1C8BA9uLL);
  this[21] = v5;
  if (v5)
    v6 = a2;
  else
    v6 = 0;
  *((_DWORD *)this + 45) = v6;
LABEL_9:
  *((_DWORD *)this + 44) = 0;
  result = 1.40444743e306;
  *(_OWORD *)this = xmmword_19FFB2E30;
  return result;
}

float md::PointLabelFeature::maxZoomRank(md::PointLabelFeature *this)
{
  float result;

  result = *((float *)this + 92);
  if (result == 254.0)
    return 252.0;
  return result;
}

uint64_t md::PointLabelFeature::updateDynamicStyling(md::PointLabelFeature *this, md::LabelManager *a2, md::Label *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  int8x8_t *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float v26;
  float *v27;
  float v28;
  int v30;
  __int16 v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  NSObject *v35;
  int8x8_t *v37;
  std::__shared_weak_count *v38;

  v5 = *((_DWORD *)a3 + 25);
  if (*((_DWORD *)this + 104) != v5)
  {
    v6 = *((_QWORD *)a2 + 432);
LABEL_6:
    *((_DWORD *)this + 104) = v5;
    *((_QWORD *)this + 53) = v6;
    if (*((_BYTE *)this + 655))
      *((_BYTE *)this + 655) = 0;
    v8 = *((_QWORD *)a3 + 10);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 24);
      v11 = *(int8x8_t **)v9;
      v10 = *(std::__shared_weak_count **)(v9 + 8);
      v37 = *(int8x8_t **)v9;
      v38 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      if (v11)
      {
        v14 = (unsigned __int8 **)geo::codec::VectorTile::liveMetadataForID(v11, *((_QWORD *)this + 62));
        if (v14)
        {
          v15 = geo::codec::VectorTile::liveVariants((geo::codec::VectorTile *)v11);
          v16 = *v14;
          v17 = v14[1];
          if (*v14 == v17)
          {
            v21 = 0.0;
            v19 = 1;
            v20 = 0.0;
          }
          else
          {
            v18 = v15 + 8;
            v19 = 1;
            v20 = 0.0;
            v21 = 0.0;
            do
            {
              v22 = *v16;
              v23 = *((unsigned int *)v16 + 1);
              v24 = *((unsigned __int16 *)v16 + 4);
              if (*v16)
              {
                if (v22 == 1)
                {
                  if (*((_WORD *)v16 + 4))
                  {
                    v25 = (float *)(v18 + 16 * v23);
                    do
                    {
                      if ((*((_QWORD *)this + 53) & *((_QWORD *)v25 - 1)) != 0)
                        v26 = *v25;
                      else
                        v26 = 0.0;
                      v21 = v26 + v21;
                      v25 += 4;
                      --v24;
                    }
                    while (v24);
                  }
                }
                else if (v22 == 2 && (_DWORD)v24 != 0)
                {
                  v19 = *(unsigned __int8 *)(v15 + 16 * v23);
                }
              }
              else if (*((_WORD *)v16 + 4))
              {
                v27 = (float *)(v18 + 16 * v23);
                do
                {
                  if ((*((_QWORD *)this + 53) & *((_QWORD *)v27 - 1)) != 0)
                    v28 = *v27;
                  else
                    v28 = 0.0;
                  v20 = v28 + v20;
                  v27 += 4;
                  --v24;
                }
                while (v24);
              }
              v16 += 12;
            }
            while (v16 != v17);
          }
          if (*((_BYTE *)this + 400)
            && *((float *)this + 99) == v21
            && *((_BYTE *)this + 408)
            && *((float *)this + 101) == v20
            && *((_BYTE *)this + 413)
            && *((unsigned __int8 *)this + 412) == v19)
          {
            v30 = 0;
            v21 = *((float *)this + 99);
            if (v19 != 2)
              goto LABEL_53;
          }
          else
          {
            *((float *)this + 99) = v21;
            v30 = 1;
            *((_BYTE *)this + 400) = 1;
            *((float *)this + 101) = v20;
            *((_BYTE *)this + 408) = 1;
            *((_WORD *)this + 206) = v19 | 0x100;
            if (v19 != 2)
            {
LABEL_53:
              if (v21 == 0.0)
                v31 = 258;
              else
                v31 = 259;
              goto LABEL_58;
            }
          }
          v31 = 257;
LABEL_58:
          *((_WORD *)this + 327) = v31;
          goto LABEL_59;
        }
      }
    }
    else
    {
      v10 = 0;
      v37 = 0;
      v38 = 0;
    }
    if (*((_BYTE *)this + 400))
    {
      *((_BYTE *)this + 400) = 0;
      if (!*((_BYTE *)this + 408))
      {
        if (*((_BYTE *)this + 413))
        {
LABEL_40:
          *((_BYTE *)this + 413) = 0;
          v30 = 1;
          if (!v10)
            goto LABEL_80;
LABEL_59:
          v32 = (unint64_t *)&v10->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
            if (*((_BYTE *)this + 448))
            {
LABEL_64:
              *((_BYTE *)this + 448) = 0;
              if (md::DebugStreamingPOIFeatureID)
                v34 = md::DebugStreamingPOIFeatureID == *((_QWORD *)this + 62);
              else
                v34 = 0;
              if (v34)
              {
                if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
                  dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
                v35 = (id)GEOGetVectorKitStreamingPOILog_log;
                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                {
                  LOWORD(v37) = 0;
                  _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_DEBUG, "PointLabelFeature::updateDynamicStyling [CrossFade]", (uint8_t *)&v37, 2u);
                }

                v7 = 1;
              }
              else
              {
                v7 = 1;
              }
              goto LABEL_76;
            }
          }
          else
          {
LABEL_80:
            if (*((_BYTE *)this + 448))
              goto LABEL_64;
          }
          v7 = 0;
          if (!v30)
            return v7;
LABEL_76:
          (*(void (**)(md::PointLabelFeature *, md::LabelManager *))(*(_QWORD *)this + 536))(this, a2);
          return v7;
        }
LABEL_43:
        v30 = 1;
        goto LABEL_59;
      }
    }
    else if (!*((_BYTE *)this + 408))
    {
      v30 = 0;
      goto LABEL_59;
    }
    *((_BYTE *)this + 408) = 0;
    if (*((_BYTE *)this + 413))
      goto LABEL_40;
    goto LABEL_43;
  }
  v6 = *((_QWORD *)a2 + 432);
  if (*((_QWORD *)this + 53) != v6)
    goto LABEL_6;
  if (*((_BYTE *)this + 448))
    goto LABEL_64;
  return 0;
}

void sub_19F0B6A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::hasIdentifier(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(uint64_t **)(a1 + 464);
  if (!v2)
    return 0;
  v3 = *a2;
  while (1)
  {
    v4 = *((_DWORD *)v2 + 8);
    if (v3 >= v4)
      break;
LABEL_3:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v4 < v3)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

uint64_t md::Label::updatePoiPositionOffsets(uint64_t this, const LabelLayoutContext *a2, float a3)
{
  int v3;
  float v4;
  float v6;

  *(_DWORD *)(this + 776) = 0;
  *(_QWORD *)(this + 768) = 0;
  if (!*(_BYTE *)(this + 258))
  {
    v6 = *(float *)(this + 240);
LABEL_14:
    *(float *)(this + 768) = v6;
    return this;
  }
  v3 = *(unsigned __int8 *)(this + 256);
  if ((v3 & 0xFE) == 2)
  {
    v4 = -1.5;
    if (v3 == 3)
      v4 = 1.0;
    *(float *)(this + 776) = v4;
  }
  if ((v3 - 1) <= 1 && a2 != 0)
    *(_DWORD *)(this + 772) = *(_DWORD *)(this + 244);
  v6 = 1.0;
  if (a3 > 0.0)
    goto LABEL_14;
  return this;
}

uint64_t md::LabelPart::isStyleFadeNode(md::LabelPart *this)
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::isDisplayable(md::CrossFadeLabelPart *this)
{
  return 1;
}

unint64_t md::LabelStyle::collisionGroupInfo(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 *v7;

  v3 = *(unsigned int *)(a1 + 256);
  v4 = *(unsigned __int16 *)(a1 + 261) | (*(unsigned __int8 *)(a1 + 263) << 16);
  if (a2 == 8)
  {
    v5 = *(_QWORD *)(a1 + 264);
    if (!v5)
    {
      v6 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(a1);
      v5 = *v6;
      *(_QWORD *)(a1 + 264) = *v6;
    }
    v7 = (unsigned __int8 *)(v5 + 63);
  }
  else
  {
    v7 = (unsigned __int8 *)(a1 + 260);
  }
  return v3 | (v4 << 40) | ((unint64_t)*v7 << 32);
}

uint64_t md::AnimatedCrossFadeLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char v10;
  uint64_t result;

  v9 = a1 + 640;
  if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 88))(**(_QWORD **)(a1 + 576)))
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 576) + 120))(**(_QWORD **)(a1 + 576), a2, v9, a4, a5);
  else
    v10 = 32;
  *(_BYTE *)(a1 + 636) = v10;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8)))
    LODWORD(result) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8)
                                                                                            + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), a2, v9, a4, a5);
  else
    LODWORD(result) = 32;
  *(_BYTE *)(a1 + 637) = result;
  if (*(_BYTE *)(a1 + 636) == 37)
    return 37;
  else
    return result;
}

uint64_t md::LabelPart::needsCrossfade()
{
  return 0;
}

uint64_t md::ArrowLabelPart::prepareForDisplay(uint64_t this, md::LabelManager *a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;

  v2 = this;
  *(_QWORD *)(this + 888) = *(_QWORD *)(this + 816);
  v3 = *(float *)(this + 612);
  if (v3 != *(float *)(this + 752)
    || *(float *)(this + 320) < *(float *)(this + 312)
    || *(float *)(this + 324) < *(float *)(this + 316))
  {
    *(float *)(this + 752) = v3;
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 912))(this, 1, this + 640, this + 312);
  }
  if (*(_BYTE *)(v2 + 565))
  {
    v4 = operator new();
    this = *(_QWORD *)(v2 + 728);
    *(_QWORD *)(v2 + 728) = v4;
    if (this)
      this = MEMORY[0x1A1AF4E00](this, 0x1000C40AE2C30F4);
    *(_BYTE *)(v2 + 665) = 0;
  }
  if (!*(_BYTE *)(v2 + 836))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 768) + 24))(*(_QWORD *)(v2 + 768), v2 + 840);
  return this;
}

uint64_t md::UniLineLabelFeature::labelFeatureTrait(md::UniLineLabelFeature *this)
{
  return *((unsigned __int8 *)this + 450);
}

uint64_t md::LabelFeatureStyler::restyleFeature(md::LabelFeatureStyler *this, md::LabelFeature *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  md::LabelFeature *v35;

  v35 = a2;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  {
    v20 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v34 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(md::LabelFeature *, uint64_t **, uint64_t))(*(_QWORD *)a2 + 568))(a2, &v31, *(_QWORD *)(*(_QWORD *)this + 336) + 184);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  {
    v21 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v30 = mdm::Allocator::instance(void)::alloc;
  std::vector<md::LabelFeature *,geo::StdAllocator<md::LabelFeature *,mdm::Allocator>>::assign((uint64_t)&v27, ((char *)v32 - (char *)v31) >> 4, (const double *)&v35);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  {
    v22 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v26 = mdm::Allocator::instance(void)::alloc;
  md::LabelStyleCache::requestStyles(*(_QWORD *)(*(_QWORD *)this + 336), &v31, (uint64_t)&v23, &v27);
  v7 = v23;
  result = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)v35 + 576))(v35);
  if (v7)
  {
    v9 = v24;
    v10 = v7;
    if (v24 != v7)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v7);
      v10 = v23;
    }
    v24 = v7;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 40))(v26, v10, v25 - v10);
  }
  if (v27)
  {
    v28 = v27;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 40))(v30, v27, v29 - v27);
  }
  v14 = v31;
  if (v31)
  {
    v15 = v32;
    v16 = v31;
    if (v32 != v31)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*(v15 - 1);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t *))v17->__on_zero_shared)(v17, v16);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 2;
      }
      while (v15 != v14);
      v16 = v31;
    }
    v32 = v14;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v34 + 40))(v34, v16, v33 - (_QWORD)v16);
  }
  return result;
}

void sub_19F0B7098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  if (a7)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a10 + 40))(a10, a7, a9 - a7);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::restyleFeature(md::LabelFeature *this, md::LabelFeatureStyler **a2)
{
  return md::LabelFeatureStyler::restyleFeature(a2[37], this);
}

BOOL md::Label::checkReplacementLabelReady(md::Label *this, md::LabelManager *a2, md::LabelPool *a3, double a4)
{
  double v4;
  uint64_t v5;

  v4 = *((double *)this + 153);
  if (v4 == 0.0)
  {
    *((double *)this + 153) = a4;
    v4 = a4;
  }
  return vabdd_f64(a4, v4) > 1.0
      || (v5 = md::LabelPool::replacementForLabel(a2, this)) == 0
      || *(_BYTE *)(v5 + 1263) != 0;
}

_BYTE *geo::optional<esl::FontWeight>::~optional(_BYTE *a1)
{
  if (*a1)
  {
    geo::optional<esl::FontWeight>::value(a1);
    *a1 = 0;
  }
  return a1;
}

_BYTE *geo::optional<esl::FontWeight>::value(_BYTE *a1)
{
  size_t v3;
  _BYTE v4[32];
  int v5;
  int v6[2];
  int v7;
  pid_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!*a1)
  {
    printf("%s : Assertion with expression - %s : Failed in file - %s line - %i\n", "optional has no value. Undefined behavior.", "_hasValue", "/AppleInternal/Library/BuildRoots/3949dc93-559d-11ef-b093-5a7ac3341c94/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/GeoStdLib/Optional.hpp", 355);
    v5 = 0;
    *(_QWORD *)v6 = 0xE00000001;
    v7 = 1;
    v8 = getpid();
    v3 = 648;
    if (!sysctl(v6, 4u, v4, &v3, 0, 0) && (v5 & 0x800) != 0)
      __debugbreak();
  }
  return a1 + 1;
}

void gdc::ResourceManager::finishBatch(gdc::ResourceManager *this)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  _BYTE *v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  NSObject *v38;
  os_signpost_id_t v39;
  NSObject *v40;
  std::string *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  void *v76;
  _QWORD *v77;
  void *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t i;
  _QWORD *v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t j;
  _QWORD *v89;
  void *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  void *v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD v99[5];
  __int128 v100;
  uint64_t v101;
  void *__p;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  int v106;
  std::string v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  _BYTE buf[24];
  char *v112;
  _QWORD *v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*((_QWORD *)this + 28);
  if (v2)
  {
    v93 = (char *)this + 88;
    v92 = (char *)this + 32;
    v91 = (_QWORD *)((char *)this + 264);
    while (1)
    {
      v3 = *((unsigned __int16 *)v2 + 9);
      v4 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v4 + 1;
      v94 = v2[2];
      v95 = v99;
      v96 = (char *)v99;
      v97 = v99;
      v98 = 32;
      v6 = (char *)v2[3];
      v5 = (char *)v2[4];
      v7 = v5 - v6;
      v8 = v99;
      if ((unint64_t)(v5 - v6) < 0x21)
        goto LABEL_25;
      v9 = v7 <= 0x40 ? 64 : v5 - v6;
      v8 = malloc_type_malloc(v9, 0x100004077774924uLL);
      v10 = (char *)v95;
      v11 = v96;
      if (v95 != v96)
        break;
LABEL_24:
      v95 = v8;
      v96 = (char *)v8;
      v98 = v9;
LABEL_25:
      if (v6 == v5)
        goto LABEL_43;
      if (v7 < 8)
      {
        v26 = v8;
        goto LABEL_41;
      }
      if ((unint64_t)((char *)v8 - v6) < 0x20)
      {
        v26 = v8;
        goto LABEL_41;
      }
      if (v7 >= 0x20)
      {
        v25 = v7 & 0xFFFFFFFFFFFFFFE0;
        v27 = (__int128 *)(v6 + 16);
        v28 = v8 + 2;
        v29 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v30 = *v27;
          *(v28 - 1) = *(v27 - 1);
          *v28 = v30;
          v27 += 2;
          v28 += 2;
          v29 -= 32;
        }
        while (v29);
        if (v7 == v25)
          goto LABEL_42;
        if ((v7 & 0x18) == 0)
        {
          v6 += v25;
          v26 = (char *)v8 + v25;
          goto LABEL_41;
        }
      }
      else
      {
        v25 = 0;
      }
      v31 = v7 & 0xFFFFFFFFFFFFFFF8;
      v26 = (char *)v8 + (v7 & 0xFFFFFFFFFFFFFFF8);
      v32 = v25 - (v7 & 0xFFFFFFFFFFFFFFF8);
      v33 = (uint64_t *)&v6[v25];
      v34 = (_QWORD *)((char *)v8 + v25);
      do
      {
        v35 = *v33++;
        *v34++ = v35;
        v32 += 8;
      }
      while (v32);
      if (v7 == v31)
        goto LABEL_42;
      v6 += v31;
      do
      {
LABEL_41:
        v36 = *v6++;
        *v26++ = v36;
      }
      while (v6 != v5);
LABEL_42:
      v8 = v96;
LABEL_43:
      v37 = v2[11];
      v96 = (char *)v8 + v7;
      v99[4] = v37;
      v100 = *((_OWORD *)v2 + 6);
      v101 = v4;
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      v38 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      v39 = os_signpost_id_generate(v38);

      *(_QWORD *)&v100 = v39;
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      v40 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&v107, (unsigned __int8 *)v2 + 16);
        v41 = &v107;
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = (std::string *)v107.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v41;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v101;
        _os_log_impl(&dword_19F029000, v40, OS_LOG_TYPE_DEBUG, "Adding to requests in progress: %s, %lu", buf, 0x16u);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
      }

      std::__hash_table<std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,unsigned long long>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey,unsigned long> &>((uint64_t)v93, (unsigned __int8 *)&v94, (uint64_t)&v94);
      v42 = (char *)*((_QWORD *)this + 4);
      v43 = (char *)*((_QWORD *)this + 5);
      if (v42 != v43)
      {
        while (v3 != *(unsigned __int16 *)v42)
        {
          v42 += 16;
          if (v42 == v43)
            goto LABEL_57;
        }
      }
      if (v42 == v43)
      {
LABEL_57:
        LOWORD(v107.__r_.__value_.__l.__data_) = v3;
        v107.__r_.__value_.__l.__size_ = 0;
        v42 = geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert((uint64_t)v92, (unsigned __int16 *)&v107);
      }
      v44 = *((_QWORD *)v42 + 1);
      v45 = (char *)*((_QWORD *)this + 31);
      v46 = (char *)*((_QWORD *)this + 32);
      v47 = v45;
      if (v45 != v46)
      {
        v47 = (char *)*((_QWORD *)this + 31);
        while (v44 != *(_QWORD *)v47)
        {
          v47 += 48;
          if (v47 == v46)
            goto LABEL_64;
        }
      }
      if (v47 != v46)
        goto LABEL_101;
LABEL_64:
      v104 = 0;
      v105 = 0;
      v106 = 1065353216;
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v44;
      __p = 0;
      v103 = 0;
      v107.__r_.__value_.__r.__words[2] = 0;
      v108 = 0;
      v109 = 0;
      v110 = 1065353216;
      v47 = v45;
      if (v45 != v46)
      {
        while (v44 != *(_QWORD *)v47)
        {
          v47 += 48;
          if (v47 == v46)
            goto LABEL_69;
        }
      }
      if (v47 == v46)
      {
LABEL_69:
        if ((unint64_t)v46 >= *v91)
        {
          v48 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 4);
          if (v48 + 1 > 0x555555555555555)
            abort();
          v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v91 - (_QWORD)v45) >> 4);
          v50 = 2 * v49;
          if (2 * v49 <= v48 + 1)
            v50 = v48 + 1;
          if (v49 >= 0x2AAAAAAAAAAAAAALL)
            v51 = 0x555555555555555;
          else
            v51 = v50;
          v113 = v91;
          if (v51)
          {
            if (v51 > 0x555555555555555)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v52 = (char *)operator new(48 * v51);
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[48 * v48];
          *(_QWORD *)buf = v52;
          *(_QWORD *)&buf[8] = v53;
          *(_QWORD *)&buf[16] = v53;
          v112 = &v52[48 * v51];
          *(_QWORD *)v53 = v44;
          std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>::unordered_map((uint64_t)(v53 + 8), (uint64_t)&v107.__r_.__value_.__l.__size_);
          v54 = (_QWORD *)*((_QWORD *)this + 31);
          v55 = (_QWORD *)*((_QWORD *)this + 32);
          v56 = *(_QWORD *)&buf[8];
          v57 = *(_QWORD *)&buf[16];
          if (v55 == v54)
          {
            v66 = (_QWORD *)*((_QWORD *)this + 32);
          }
          else
          {
            v58 = 0;
            do
            {
              v60 = v56 + v58 * 8;
              v61 = (char *)&v55[v58];
              *(_QWORD *)(v60 - 48) = v55[v58 - 6];
              v62 = v55[v58 - 5];
              *((_QWORD *)v61 - 5) = 0;
              *(_QWORD *)(v60 - 40) = v62;
              *(_QWORD *)(v60 - 32) = v55[v58 - 4];
              *((_QWORD *)v61 - 4) = 0;
              v63 = v55[v58 - 3];
              *(_QWORD *)(v56 + v58 * 8 - 24) = v63;
              v64 = v55[v58 - 2];
              *(_QWORD *)(v60 - 16) = v64;
              *(_DWORD *)(v60 - 8) = v55[v58 - 1];
              if (v64)
              {
                v59 = *(_QWORD *)(v63 + 8);
                v65 = *(_QWORD *)(v60 - 32);
                if ((v65 & (v65 - 1)) != 0)
                {
                  if (v59 >= v65)
                    v59 %= v65;
                }
                else
                {
                  v59 &= v65 - 1;
                }
                *(_QWORD *)(v62 + 8 * v59) = v56 + v58 * 8 - 24;
                v55[v58 - 3] = 0;
                v55[v58 - 2] = 0;
              }
              v58 -= 6;
            }
            while (&v55[v58] != v54);
            v56 += v58 * 8;
            v66 = (_QWORD *)*((_QWORD *)this + 31);
            v55 = (_QWORD *)*((_QWORD *)this + 32);
          }
          v67 = v57 + 48;
          *((_QWORD *)this + 31) = v56;
          *((_QWORD *)this + 32) = v57 + 48;
          v68 = (char *)*((_QWORD *)this + 33);
          *((_QWORD *)this + 33) = v112;
          v112 = v68;
          *(_QWORD *)buf = v66;
          *(_QWORD *)&buf[8] = v66;
          if (v55 == v66)
          {
            if (v55)
              goto LABEL_94;
          }
          else
          {
            do
            {
              *(_QWORD *)&buf[16] = v55 - 6;
              v73 = (_QWORD *)*(v55 - 3);
              if (v73)
              {
                do
                {
                  v75 = (_QWORD *)*v73;
                  v76 = (void *)v73[3];
                  if (v76 != (void *)v73[5])
                    free(v76);
                  operator delete(v73);
                  v73 = v75;
                }
                while (v75);
              }
              v74 = (void *)*(v55 - 5);
              *(v55 - 5) = 0;
              if (v74)
                operator delete(v74);
              v55 = *(_QWORD **)&buf[16];
            }
            while (*(_QWORD **)&buf[16] != v66);
            v55 = *(_QWORD **)buf;
            if (*(_QWORD *)buf)
LABEL_94:
              operator delete(v55);
          }
          v69 = v108;
          *((_QWORD *)this + 32) = v67;
          v47 = (char *)(v67 - 48);
          if (v69)
          {
            do
            {
              v77 = (_QWORD *)*v69;
              v78 = (void *)v69[3];
              if (v78 != (void *)v69[5])
                free(v78);
              operator delete(v69);
              v69 = v77;
            }
            while (v77);
          }
          goto LABEL_96;
        }
        *(_QWORD *)v46 = v44;
        std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>::unordered_map((uint64_t)(v46 + 8), (uint64_t)&v107.__r_.__value_.__l.__size_);
        *((_QWORD *)this + 32) = v46 + 48;
        v47 = v46;
      }
LABEL_96:
      if (v107.__r_.__value_.__l.__size_)
        operator delete((void *)v107.__r_.__value_.__l.__size_);
      v70 = v104;
      if (v104)
      {
        do
        {
          v71 = (_QWORD *)*v70;
          v72 = (void *)v70[3];
          if (v72 != (void *)v70[5])
            free(v72);
          operator delete(v70);
          v70 = v71;
        }
        while (v71);
      }
      if (__p)
        operator delete(__p);
LABEL_101:
      std::__hash_table<std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,unsigned long long>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey,unsigned long> &>((uint64_t)(v47 + 8), (unsigned __int8 *)&v94, (uint64_t)&v94);
      if (v95 != v97)
        free(v95);
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_118;
    }
    v12 = v96 - (_BYTE *)v95;
    if ((unint64_t)(v96 - (_BYTE *)v95) < 8)
    {
      v13 = v8;
    }
    else
    {
      v13 = v8;
      if ((unint64_t)((char *)v8 - (_BYTE *)v95) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v14 = 0;
LABEL_18:
          v19 = v12 & 0xFFFFFFFFFFFFFFF8;
          v13 = (char *)v8 + (v12 & 0xFFFFFFFFFFFFFFF8);
          v20 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
          v21 = (uint64_t *)&v10[v14];
          v22 = (_QWORD *)((char *)v8 + v14);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            v20 += 8;
          }
          while (v20);
          if (v12 == v19)
            goto LABEL_24;
          v10 += v19;
          goto LABEL_23;
        }
        v14 = v12 & 0xFFFFFFFFFFFFFFE0;
        v15 = (__int128 *)((char *)v95 + 16);
        v16 = v8 + 2;
        v17 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 32;
        }
        while (v17);
        if (v12 == v14)
          goto LABEL_24;
        if ((v12 & 0x18) != 0)
          goto LABEL_18;
        v10 += v14;
        v13 = (char *)v8 + v14;
      }
    }
    do
    {
LABEL_23:
      v24 = *v10++;
      *v13++ = v24;
    }
    while (v10 != v11);
    goto LABEL_24;
  }
LABEL_118:
  v79 = (_QWORD *)*((_QWORD *)this + 31);
  v80 = (_QWORD *)*((_QWORD *)this + 32);
  while (v79 != v80)
  {
    (*(void (**)(_QWORD, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)*v79 + 16))(*v79, v79 + 1, *((_QWORD *)this + 34), 0);
    if (v79[4])
    {
      v81 = (_QWORD *)v79[3];
      if (v81)
      {
        do
        {
          v84 = (_QWORD *)*v81;
          v85 = (void *)v81[3];
          if (v85 != (void *)v81[5])
            free(v85);
          operator delete(v81);
          v81 = v84;
        }
        while (v84);
      }
      v79[3] = 0;
      v82 = v79[2];
      if (v82)
      {
        for (i = 0; i != v82; ++i)
          *(_QWORD *)(v79[1] + 8 * i) = 0;
      }
      v79[4] = 0;
    }
    v79 += 6;
  }
  if (*((_QWORD *)this + 29))
  {
    v86 = (_QWORD *)*((_QWORD *)this + 28);
    if (v86)
    {
      do
      {
        v89 = (_QWORD *)*v86;
        v90 = (void *)v86[3];
        if (v90 != (void *)v86[5])
          free(v90);
        operator delete(v86);
        v86 = v89;
      }
      while (v89);
    }
    *((_QWORD *)this + 28) = 0;
    v87 = *((_QWORD *)this + 27);
    if (v87)
    {
      for (j = 0; j != v87; ++j)
        *(_QWORD *)(*((_QWORD *)this + 26) + 8 * j) = 0;
    }
    *((_QWORD *)this + 29) = 0;
  }
}

void sub_19F0B7B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>::~pair(v32 - 192);
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table((uint64_t)&a32);
  if (a20 != a22)
  {
    free(a20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::fetchResources(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _BYTE *v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int v47;
  NSObject *v48;
  NSObject *v49;
  os_signpost_id_t v50;
  NSObject *v51;
  os_signpost_id_t v52;
  const char *v53;
  uint32_t v54;
  NSObject *v55;
  os_signpost_id_t v56;
  NSObject *v57;
  uint8_t *v58;
  char *v59;
  uint64_t v60;
  id v61;
  qos_class_t v62;
  id v63;
  char *v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  id v77;
  qos_class_t v78;
  id v79;
  char *v80;
  char *v81;
  unint64_t v82;
  _QWORD *v83;
  size_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  __int128 *v90;
  _OWORD *v91;
  unint64_t v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 *v99;
  _OWORD *v100;
  unint64_t v101;
  __int128 v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  _BYTE *v110;
  __int128 *v111;
  _OWORD *v112;
  unint64_t v113;
  __int128 v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  _QWORD *v118;
  uint64_t v119;
  char v120;
  void *v121;
  char v122;
  uint64_t v123;
  _BYTE *v124;
  __int128 *v125;
  _OWORD *v126;
  unint64_t v127;
  __int128 v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  _QWORD *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  int v138;
  id v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  void *v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  id v149;
  _QWORD v150[4];
  id v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  char *v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD v158[5];
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[4];
  id v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  _QWORD v170[5];
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[2];
  uint64_t v175;
  void *v176;
  char *v177;
  _BYTE *v178;
  uint64_t v179;
  _BYTE v180[32];
  uint64_t v181;
  __int128 v182;
  uint8_t v183[4];
  uint8_t *v184;
  __int16 v185;
  uint64_t v186;
  uint8_t buf[8];
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  int v193;
  __int16 v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v145 = a4;
  if (*(_QWORD *)(a1 + 608) || !*(_BYTE *)(a1 + 617))
  {
    v6 = 7;
    if (!*(_BYTE *)(a1 + 552))
      v6 = 3;
    if (*(_BYTE *)(a1 + 553))
      v6 |= 8uLL;
    v137 = v6;
    md::TiledGEOResourceFetcher::getTileLoader((id *)a1);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 608);
    v142 = a1;
    if (v7 && objc_msgSend(v7, "hasTimeToLiveSeconds"))
    {
      v141 = 1000 * objc_msgSend(*(id *)(a1 + 608), "timeToLiveSeconds");
      v8 = *(uint64_t **)(a2 + 16);
      if (!v8)
        goto LABEL_167;
    }
    else
    {
      v141 = 0;
      v8 = *(uint64_t **)(a2 + 16);
      if (!v8)
      {
LABEL_167:

        goto LABEL_169;
      }
    }
    v136 = (*MEMORY[0x1E0D265A8] + 1) & 0x7F;
    v138 = *MEMORY[0x1E0D26C48];
    v9 = &qword_1ECE37000;
    v10 = &qword_1ECE37000;
    while (1)
    {
      v11 = v8[14];
      v175 = v8[2];
      v12 = v180;
      v176 = v180;
      v177 = v180;
      v178 = v180;
      v179 = 32;
      v13 = (char *)v8[3];
      v14 = (char *)v8[4];
      v15 = v14 - v13;
      if ((unint64_t)(v14 - v13) < 0x21)
        goto LABEL_34;
      v16 = v15 <= 0x40 ? 64 : v14 - v13;
      v12 = malloc_type_malloc(v16, 0x100004077774924uLL);
      v17 = (char *)v176;
      v18 = v177;
      if (v176 != v177)
        break;
LABEL_33:
      v176 = v12;
      v177 = v12;
      v179 = v16;
LABEL_34:
      if (v13 != v14)
      {
        if (v15 < 8)
        {
          v33 = v12;
        }
        else if ((unint64_t)(v12 - v13) < 0x20)
        {
          v33 = v12;
        }
        else
        {
          if (v15 < 0x20)
          {
            v32 = 0;
LABEL_45:
            v38 = v15 & 0xFFFFFFFFFFFFFFF8;
            v33 = &v12[v15 & 0xFFFFFFFFFFFFFFF8];
            v39 = v32 - (v15 & 0xFFFFFFFFFFFFFFF8);
            v40 = (uint64_t *)&v13[v32];
            v41 = &v12[v32];
            do
            {
              v42 = *v40++;
              *v41++ = v42;
              v39 += 8;
            }
            while (v39);
            if (v15 != v38)
            {
              v13 += v38;
              goto LABEL_50;
            }
LABEL_51:
            v12 = v177;
            goto LABEL_52;
          }
          v32 = v15 & 0xFFFFFFFFFFFFFFE0;
          v34 = (__int128 *)(v13 + 16);
          v35 = v12 + 16;
          v36 = v15 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v37 = *v34;
            *(v35 - 1) = *(v34 - 1);
            *v35 = v37;
            v34 += 2;
            v35 += 2;
            v36 -= 32;
          }
          while (v36);
          if (v15 == v32)
            goto LABEL_51;
          if ((v15 & 0x18) != 0)
            goto LABEL_45;
          v13 += v32;
          v33 = &v12[v32];
        }
        do
        {
LABEL_50:
          v43 = *v13++;
          *v33++ = v43;
        }
        while (v13 != v14);
        goto LABEL_51;
      }
LABEL_52:
      v44 = v8[11];
      v177 = &v12[v15];
      v181 = v44;
      v182 = *((_OWORD *)v8 + 6);
      v196 = 0uLL;
      *(_QWORD *)&v196 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v142 + 144))(v142, *(_QWORD *)(v142 + 608), &v175);
      *((_QWORD *)&v196 + 1) = v45;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v142 + 152))(v174, v142, &v175);
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = objc_msgSend(v46, "shouldUseTestTileLoader");

      if (v47 && (v196 & 0x7F) == v138)
        LOBYTE(v196) = v136 | v196 & 0x80;
      if (*(_BYTE *)(v142 + 616))
      {
        GEOTileKeyAssertIsStandard();
        if (v9[138] != -1)
          dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
        v48 = (id)v10[137];
        v49 = v48;
        v50 = v182;
        if ((unint64_t)(v182 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
        {
          *(_DWORD *)&buf[4] = ((*(_QWORD *)((char *)&v196 + 1) >> 46) | (*(_DWORD *)((char *)&v196 + 9) << 18)) & 0x3FFFFFF;
          *(_DWORD *)buf = 67110144;
          v188 = 1024;
          v189 = ((*(unsigned int *)((char *)&v196 + 9) | ((unint64_t)(*(unsigned __int16 *)((char *)&v196 + 13) | (HIBYTE(v196) << 16)) << 32)) >> 8) & 0x3FFFFFF;
          v190 = 1024;
          v191 = (*(_QWORD *)((char *)&v196 + 1) >> 40) & 0x3F;
          v192 = 1024;
          v193 = *(unsigned __int16 *)((char *)&v196 + 13) >> 2;
          v194 = 2048;
          v195 = *((_QWORD *)&v182 + 1);
          v51 = v49;
          v52 = v50;
          v53 = "key=%d.%d.%d type=%d parent_signpost=%llu";
          v54 = 36;
LABEL_66:
          _os_signpost_emit_with_name_impl(&dword_19F029000, v51, OS_SIGNPOST_INTERVAL_BEGIN, v52, "ResourceFetch", v53, buf, v54);
        }
      }
      else
      {
        if (v9[138] != -1)
          dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
        v55 = (id)v10[137];
        v49 = v55;
        v56 = v182;
        if ((unint64_t)(v182 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v55))
        {
          *(_WORD *)buf = 0;
          v51 = v49;
          v52 = v56;
          v53 = "Unknown tile key";
          v54 = 2;
          goto LABEL_66;
        }
      }

      if (v9[138] != -1)
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
      v57 = (id)v10[137];
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str((std::string *)buf, (unsigned __int8 *)&v175);
        v58 = buf;
        if ((v193 & 0x8000) != 0)
          v58 = *(uint8_t **)buf;
        *(_DWORD *)v183 = 136315394;
        v184 = v58;
        v185 = 2048;
        v186 = v11;
        _os_log_impl(&dword_19F029000, v57, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher fetching resource: %s, %llu", v183, 0x16u);
        if (SBYTE1(v193) < 0)
          operator delete(*(void **)buf);
      }

      if (!(_BYTE)v175)
      {
        v74 = atomic_load((unint64_t *)(v142 + 104));
        if (v74)
          (*(void (**)(unint64_t))(*(_QWORD *)v74 + 16))(v74);
        if (LOBYTE(v174[0]))
          v75 = (char *)v174 + 4;
        else
          v75 = 0;
        v76 = HIDWORD(v175);
        v77 = *(id *)(v142 + 464);
        v78 = qos_class_self();
        v147 = v182;
        v149 = *(id *)(v142 + 512);
        v79 = *(id *)(a3 + 16);
        v162[0] = MEMORY[0x1E0C809B0];
        v162[1] = 3321888768;
        v162[2] = ___ZN2md23TiledGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
        v162[3] = &unk_1E42E9450;
        v80 = (char *)v176;
        v164 = v142;
        v165 = v175;
        v166 = (char *)v170;
        v167 = (char *)v170;
        v81 = v177;
        v82 = v177 - (_BYTE *)v176;
        v83 = v170;
        v168 = (char *)v170;
        v169 = 32;
        if ((unint64_t)(v177 - (_BYTE *)v176) < 0x21)
          goto LABEL_147;
        v140 = v79;
        if (v82 <= 0x40)
          v84 = 64;
        else
          v84 = v177 - (_BYTE *)v176;
        v83 = malloc_type_malloc(v84, 0x100004077774924uLL);
        v85 = v166;
        v86 = v167;
        if (v166 == v167)
          goto LABEL_146;
        v87 = v167 - v166;
        if ((unint64_t)(v167 - v166) < 8)
        {
          v88 = v83;
        }
        else
        {
          v88 = v83;
          if ((unint64_t)((char *)v83 - v166) >= 0x20)
          {
            if (v87 < 0x20)
            {
              v89 = 0;
LABEL_115:
              v103 = v87 & 0xFFFFFFFFFFFFFFF8;
              v88 = (char *)v83 + (v87 & 0xFFFFFFFFFFFFFFF8);
              v104 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
              v105 = &v85[v89];
              v106 = (_QWORD *)((char *)v83 + v89);
              do
              {
                v107 = *(_QWORD *)v105;
                v105 += 8;
                *v106++ = v107;
                v104 += 8;
              }
              while (v104);
              if (v87 != v103)
              {
                v85 += v103;
                goto LABEL_145;
              }
LABEL_146:
              v166 = (char *)v83;
              v167 = (char *)v83;
              v169 = v84;
              v79 = v140;
LABEL_147:
              if (v80 == v81)
                goto LABEL_165;
              if (v82 < 8)
              {
                v124 = v83;
              }
              else if ((unint64_t)((char *)v83 - v80) < 0x20)
              {
                v124 = v83;
              }
              else
              {
                if (v82 < 0x20)
                {
                  v123 = 0;
LABEL_158:
                  v129 = v82 & 0xFFFFFFFFFFFFFFF8;
                  v124 = (char *)v83 + (v82 & 0xFFFFFFFFFFFFFFF8);
                  v130 = v123 - (v82 & 0xFFFFFFFFFFFFFFF8);
                  v131 = (uint64_t *)&v80[v123];
                  v132 = (_QWORD *)((char *)v83 + v123);
                  do
                  {
                    v133 = *v131++;
                    *v132++ = v133;
                    v130 += 8;
                  }
                  while (v130);
                  if (v82 != v129)
                  {
                    v80 += v129;
                    goto LABEL_163;
                  }
LABEL_164:
                  v83 = v167;
LABEL_165:
                  v167 = (char *)v83 + v82;
                  v170[4] = v181;
                  v171 = v182;
                  v172 = v11;
                  v173 = v141;
                  v163 = v145;
                  LODWORD(v135) = v78;
                  objc_msgSend(v144, "loadKey:additionalInfo:priority:forClient:options:reason:qos:signpostID:auditToken:callbackQ:beginNetwork:callback:", &v196, v75, v76, v77, v137, 1, v135, v147, v149, v79, 0, v162);
                  v10 = &qword_1ECE37000;

                  v9 = &qword_1ECE37000;
                  v121 = v166;
                  if (v166 == v168)
                    goto LABEL_142;
LABEL_141:
                  free(v121);
                  goto LABEL_142;
                }
                v123 = v82 & 0xFFFFFFFFFFFFFFE0;
                v125 = (__int128 *)(v80 + 16);
                v126 = v83 + 2;
                v127 = v82 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v128 = *v125;
                  *(v126 - 1) = *(v125 - 1);
                  *v126 = v128;
                  v125 += 2;
                  v126 += 2;
                  v127 -= 32;
                }
                while (v127);
                if (v82 == v123)
                  goto LABEL_164;
                if ((v82 & 0x18) != 0)
                  goto LABEL_158;
                v80 += v123;
                v124 = (char *)v83 + v123;
              }
              do
              {
LABEL_163:
                v134 = *v80++;
                *v124++ = v134;
              }
              while (v80 != v81);
              goto LABEL_164;
            }
            v89 = v87 & 0xFFFFFFFFFFFFFFE0;
            v99 = (__int128 *)(v166 + 16);
            v100 = v83 + 2;
            v101 = v87 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v102 = *v99;
              *(v100 - 1) = *(v99 - 1);
              *v100 = v102;
              v99 += 2;
              v100 += 2;
              v101 -= 32;
            }
            while (v101);
            if (v87 == v89)
              goto LABEL_146;
            if ((v87 & 0x18) != 0)
              goto LABEL_115;
            v85 += v89;
            v88 = (char *)v83 + v89;
          }
        }
        do
        {
LABEL_145:
          v122 = *v85++;
          *v88++ = v122;
        }
        while (v85 != v86);
        goto LABEL_146;
      }
      if (LOBYTE(v174[0]))
        v59 = (char *)v174 + 4;
      else
        v59 = 0;
      v60 = HIDWORD(v175);
      v61 = *(id *)(v142 + 488);
      v62 = qos_class_self();
      v146 = v182;
      v63 = *(id *)(v142 + 512);
      v148 = *(id *)(a3 + 16);
      v150[0] = MEMORY[0x1E0C809B0];
      v150[1] = 3321888768;
      v150[2] = ___ZN2md23TiledGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke_13;
      v150[3] = &unk_1E42E9450;
      v64 = (char *)v176;
      v152 = v142;
      v153 = v175;
      v154 = v158;
      v155 = (char *)v158;
      v65 = v177;
      v66 = v177 - (_BYTE *)v176;
      v67 = v158;
      v156 = v158;
      v157 = 32;
      if ((unint64_t)(v177 - (_BYTE *)v176) >= 0x21)
      {
        v139 = v63;
        if (v66 <= 0x40)
          v68 = 64;
        else
          v68 = v177 - (_BYTE *)v176;
        v67 = malloc_type_malloc(v68, 0x100004077774924uLL);
        v69 = (char *)v154;
        v70 = v155;
        if (v154 == v155)
          goto LABEL_121;
        v71 = v155 - (_BYTE *)v154;
        if ((unint64_t)(v155 - (_BYTE *)v154) < 8)
        {
          v72 = v67;
        }
        else
        {
          v72 = v67;
          if ((unint64_t)((char *)v67 - (_BYTE *)v154) >= 0x20)
          {
            if (v71 < 0x20)
            {
              v73 = 0;
LABEL_106:
              v94 = v71 & 0xFFFFFFFFFFFFFFF8;
              v72 = (char *)v67 + (v71 & 0xFFFFFFFFFFFFFFF8);
              v95 = v73 - (v71 & 0xFFFFFFFFFFFFFFF8);
              v96 = &v69[v73];
              v97 = (_QWORD *)((char *)v67 + v73);
              do
              {
                v98 = *(_QWORD *)v96;
                v96 += 8;
                *v97++ = v98;
                v95 += 8;
              }
              while (v95);
              if (v71 != v94)
              {
                v69 += v94;
                goto LABEL_120;
              }
LABEL_121:
              v154 = v67;
              v155 = (char *)v67;
              v157 = v68;
              v63 = v139;
              goto LABEL_122;
            }
            v73 = v71 & 0xFFFFFFFFFFFFFFE0;
            v90 = (__int128 *)((char *)v154 + 16);
            v91 = v67 + 2;
            v92 = v71 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v93 = *v90;
              *(v91 - 1) = *(v90 - 1);
              *v91 = v93;
              v90 += 2;
              v91 += 2;
              v92 -= 32;
            }
            while (v92);
            if (v71 == v73)
              goto LABEL_121;
            if ((v71 & 0x18) != 0)
              goto LABEL_106;
            v69 += v73;
            v72 = (char *)v67 + v73;
          }
        }
        do
        {
LABEL_120:
          v108 = *v69++;
          *v72++ = v108;
        }
        while (v69 != v70);
        goto LABEL_121;
      }
LABEL_122:
      if (v64 == v65)
        goto LABEL_140;
      if (v66 < 8)
      {
        v110 = v67;
        goto LABEL_138;
      }
      if ((unint64_t)((char *)v67 - v64) < 0x20)
      {
        v110 = v67;
        goto LABEL_138;
      }
      if (v66 >= 0x20)
      {
        v109 = v66 & 0xFFFFFFFFFFFFFFE0;
        v111 = (__int128 *)(v64 + 16);
        v112 = v67 + 2;
        v113 = v66 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v114 = *v111;
          *(v112 - 1) = *(v111 - 1);
          *v112 = v114;
          v111 += 2;
          v112 += 2;
          v113 -= 32;
        }
        while (v113);
        if (v66 == v109)
          goto LABEL_139;
        if ((v66 & 0x18) == 0)
        {
          v64 += v109;
          v110 = (char *)v67 + v109;
          goto LABEL_138;
        }
      }
      else
      {
        v109 = 0;
      }
      v115 = v66 & 0xFFFFFFFFFFFFFFF8;
      v110 = (char *)v67 + (v66 & 0xFFFFFFFFFFFFFFF8);
      v116 = v109 - (v66 & 0xFFFFFFFFFFFFFFF8);
      v117 = (uint64_t *)&v64[v109];
      v118 = (_QWORD *)((char *)v67 + v109);
      do
      {
        v119 = *v117++;
        *v118++ = v119;
        v116 += 8;
      }
      while (v116);
      if (v66 == v115)
        goto LABEL_139;
      v64 += v115;
      do
      {
LABEL_138:
        v120 = *v64++;
        *v110++ = v120;
      }
      while (v64 != v65);
LABEL_139:
      v67 = v155;
LABEL_140:
      v155 = (char *)v67 + v66;
      v158[4] = v181;
      v159 = v182;
      v160 = v11;
      v161 = v141;
      v151 = v145;
      LODWORD(v135) = v62;
      objc_msgSend(v144, "loadKey:additionalInfo:priority:forClient:options:reason:qos:signpostID:auditToken:callbackQ:beginNetwork:callback:", &v196, v59, v60, v61, 65, 1, v135, v146, v63, v148, 0, v150);
      v10 = &qword_1ECE37000;

      v9 = &qword_1ECE37000;
      v121 = v154;
      if (v154 != v156)
        goto LABEL_141;
LABEL_142:
      if (v176 != v178)
        free(v176);
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_167;
    }
    v19 = v177 - (_BYTE *)v176;
    if ((unint64_t)(v177 - (_BYTE *)v176) < 8)
    {
      v20 = v12;
    }
    else
    {
      v20 = v12;
      if ((unint64_t)(v12 - (_BYTE *)v176) >= 0x20)
      {
        if (v19 < 0x20)
        {
          v21 = 0;
LABEL_27:
          v26 = v19 & 0xFFFFFFFFFFFFFFF8;
          v20 = &v12[v19 & 0xFFFFFFFFFFFFFFF8];
          v27 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
          v28 = (uint64_t *)&v17[v21];
          v29 = &v12[v21];
          do
          {
            v30 = *v28++;
            *v29++ = v30;
            v27 += 8;
          }
          while (v27);
          if (v19 == v26)
            goto LABEL_33;
          v17 += v26;
          goto LABEL_32;
        }
        v21 = v19 & 0xFFFFFFFFFFFFFFE0;
        v22 = (__int128 *)((char *)v176 + 16);
        v23 = v12 + 16;
        v24 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v19 == v21)
          goto LABEL_33;
        if ((v19 & 0x18) != 0)
          goto LABEL_27;
        v17 += v21;
        v20 = &v12[v21];
      }
    }
    do
    {
LABEL_32:
      v31 = *v17++;
      *v20++ = v31;
    }
    while (v17 != v18);
    goto LABEL_33;
  }
LABEL_169:

}

void sub_19F0B8830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35)
{

  _Unwind_Resume(a1);
}

id md::TiledGEOResourceFetcher::getTileLoader(id *this)
{
  id v2;
  void *v3;
  char v4;
  id v5;
  void *v6;
  char v7;
  id v8;

  v2 = this[67];
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, "isEqual:", 0);

    if ((v4 & 1) == 0)
    {
      v5 = this[67];
      goto LABEL_9;
    }
  }
  else
  {

  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "shouldUseTestTileLoader");

  if ((v7 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    return v8;
  }
  if (md::TiledGEOResourceFetcher::getTileLoader(void)const::onceToken != -1)
    dispatch_once(&md::TiledGEOResourceFetcher::getTileLoader(void)const::onceToken, &__block_literal_global_11018);
  v5 = (id)md::TiledGEOResourceFetcher::getTileLoader(void)const::loader;
LABEL_9:
  v8 = v5;
  return v8;
}

void sub_19F0B89F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::DaVinciGroundTileData::_appendFaces(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t *a11, uint64_t *a12, char a13, int *a14, uint64_t a15)
{
  void *v25;
  int v26;
  float v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  _WORD *v53;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  _WORD *v62;
  float *v63;
  __int16 v64;
  uint64_t v65;
  _WORD *v66;
  float *v67;
  float *v68;
  float *v69;
  float *v70;
  float *v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  _WORD *v79;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  _WORD *v85;
  _WORD *v88;
  uint64_t v89;
  unsigned int v90;
  float v91;
  float v92;
  float *v93;
  char v94;
  float v95;
  float v96;
  int v97;
  int v98;
  uint64_t v99;
  _BOOL4 v100;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "daVinciBuildingHeights");

  if (v26)
  {
    v27 = *(float *)(a2 + 4);
    if (*(_BYTE *)(a15 + 24))
      v27 = *(float *)(a15 + 20) + (float)(*(float *)(a15 + 8) * v27);
    v28 = *(_BYTE *)(a2 + 1) != 0;
  }
  else
  {
    v27 = *(float *)(a1 + 1176) * 5.0;
    v28 = 1;
  }
  v100 = v28;
  v29 = *a3;
  v30 = a3[1];
  if (v30 != *a3)
  {
    v31 = 0;
    v32 = *a12;
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - *a3) >> 2);
    v34 = v33 - 1;
    v99 = a3[3];
    v35 = *(_QWORD *)(a5 + 40);
    v36 = *(_QWORD *)(a8 + 40);
    v37 = *(_QWORD *)(a7 + 40);
    v38 = *(_QWORD *)(a6 + 40);
    v39 = v33 - 1;
    v40 = *(_QWORD *)(a4 + 40);
    v41 = (float *)(v29 + 4);
    v42 = *a12;
    do
    {
      v89 = v31++;
      if (v39 == v89)
        v90 = 0;
      else
        v90 = (unsigned __int16)v31;
      v91 = a9;
      if ((a13 & 1) == 0)
        v91 = v41[1];
      if (v100)
        v92 = v41[1];
      else
        v92 = 0.0;
      v93 = (float *)(v29 + 12 * v34);
      v94 = *(_BYTE *)(v99 + v89);
      v95 = *(v41 - 1);
      v96 = v92 + v27;
      v97 = (int)(float)(v95 * a10);
      v98 = (int)(float)(*v41 * a10);
      if ((v94 & 3) == 0)
      {
        v43 = *v41 - v93[1];
        v44 = *v93 - v95;
        v45 = v35 + 8 * v42;
        *(_WORD *)v45 = v97;
        *(_WORD *)(v45 + 2) = v98;
        *(float *)(v45 + 4) = v96;
        *(float *)(v36 + 4 * v42) = a9;
        v46 = 0.28126 / sqrtf((float)(v43 * v43) + (float)(v44 * v44));
        _S5 = (float)(v46 * v43) + 0.5;
        _S4 = (float)(v46 * v44) + 0.5;
        __asm
        {
          FCVT            H5, S5
          FCVT            H4, S4
        }
        v53 = (_WORD *)(v37 + 4 * v42);
        *v53 = LOWORD(_S5);
        v53[1] = LOWORD(_S4);
        _S6 = *a14;
        _S7 = a14[1];
        __asm
        {
          FCVT            H6, S6
          FCVT            H7, S7
        }
        v56 = (_WORD *)(v38 + 4 * v42);
        *v56 = _S6;
        v56[1] = _S7;
        v57 = v35 + 8 * (v42 + 1);
        *(_WORD *)v57 = v97;
        *(_WORD *)(v57 + 2) = v98;
        *(float *)(v57 + 4) = v41[1];
        v58 = 4 * (v42 + 1);
        *(float *)(v36 + v58) = v91;
        v59 = (_WORD *)(v37 + v58);
        *v59 = LOWORD(_S5);
        v59[1] = LOWORD(_S4);
        _S4 = *a14;
        _S5 = a14[1];
        __asm
        {
          FCVT            H4, S4
          FCVT            H5, S5
        }
        v62 = (_WORD *)(v38 + v58);
        *v62 = _S4;
        v62[1] = _S5;
        v42 += 2;
        *a12 = v42;
      }
      v63 = (float *)(v29 + 12 * v90);
      v64 = v42 + 2;
      if (v39 == v89)
        v64 = v32;
      v65 = *a11;
      v66 = (_WORD *)(v40 + 2 * *a11);
      *v66 = v42;
      *a11 = v65 + 1;
      *(_WORD *)(v40 + 2 * (v65 + 1)) = *(_WORD *)a12 + 1;
      v66[2] = v64;
      v66[3] = v64;
      *a11 = v65 + 4;
      *(_WORD *)(v40 + 2 * (v65 + 4)) = *(_WORD *)a12 + 1;
      v66[5] = v64 + 1;
      *a11 = v65 + 6;
      v67 = v63 + 1;
      v68 = v93 + 1;
      if ((v94 & 1) != 0)
        v69 = v63 + 1;
      else
        v69 = v41;
      if ((v94 & 1) != 0)
        v70 = v63;
      else
        v70 = v41 - 1;
      if ((v94 & 2) != 0)
        v67 = v69;
      else
        v68 = v41;
      if ((v94 & 2) != 0)
        v71 = v93;
      else
        v71 = v41 - 1;
      if ((v94 & 2) == 0)
        v70 = v63;
      v72 = *v67 - *v68;
      v73 = *v71 - *v70;
      v74 = sqrtf((float)(v72 * v72) + (float)(v73 * v73));
      v75 = *a12;
      v76 = v35 + 8 * *a12;
      *(_WORD *)v76 = v97;
      *(_WORD *)(v76 + 2) = v98;
      *(float *)(v76 + 4) = v96;
      *(float *)(v36 + 4 * v75) = a9;
      _S4 = (float)((float)(0.28126 / v74) * v72) + 0.5;
      _S3 = (float)((float)(0.28126 / v74) * v73) + 0.5;
      __asm
      {
        FCVT            H4, S4
        FCVT            H3, S3
      }
      v79 = (_WORD *)(v37 + 4 * v75);
      *v79 = LOWORD(_S4);
      v79[1] = LOWORD(_S3);
      _S5 = *a14;
      _S6 = a14[1];
      __asm
      {
        FCVT            H5, S5
        FCVT            H6, S6
      }
      v82 = (_WORD *)(v38 + 4 * v75);
      *v82 = _S5;
      v82[1] = _S6;
      v83 = v35 + 8 * (v75 + 1);
      *(_WORD *)v83 = v97;
      *(_WORD *)(v83 + 2) = v98;
      *(float *)(v83 + 4) = v41[1];
      v84 = 4 * (v75 + 1);
      *(float *)(v36 + v84) = v91;
      v85 = (_WORD *)(v37 + v84);
      *v85 = LOWORD(_S4);
      v85[1] = LOWORD(_S3);
      _S2 = *a14;
      _S3 = a14[1];
      __asm
      {
        FCVT            H2, S2
        FCVT            H3, S3
      }
      v88 = (_WORD *)(v38 + v84);
      *v88 = _S2;
      v88[1] = _S3;
      v42 = v75 + 2;
      *a12 = v75 + 2;
      v41 += 3;
      v34 = v89;
    }
    while (v33 > (unsigned __int16)v31);
  }
}

void sub_19F0B8E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,unsigned long long>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey,unsigned long> &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  const void *v15;
  size_t v16;
  unint64_t v17;
  uint64_t *v18;
  size_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char *v47;
  __int128 *v48;
  _OWORD *v49;
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  char v57;
  float v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t prime;
  int8x8_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  size_t v70;
  const void *v71;
  const void *v72;
  _QWORD *v73;

  v6 = *a2;
  v7 = *((unsigned __int16 *)a2 + 1);
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = (uint64_t *)*((_QWORD *)a2 + 9);
  v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = (const void *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2) - (_QWORD)v15;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == (uint64_t *)v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
                && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
                && v14[11] == v9)
              {
                v22 = v14[3];
                if ((char *)v14[4] - (char *)v22 == v16)
                {
                  v70 = v16;
                  v72 = v15;
                  v23 = memcmp(v22, v15, v16);
                  v16 = v70;
                  v15 = v72;
                  if (!v23)
                    return;
                }
              }
            }
            else if (((unint64_t)v21 & (v11 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v14 = (uint64_t **)*v14;
            if (!v14)
              goto LABEL_31;
          }
        }
        do
        {
          v17 = (unint64_t)v14[1];
          if (v17 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == (_DWORD)v6
              && *((unsigned __int16 *)v14 + 9) == (_DWORD)v7
              && v14[11] == v9)
            {
              v18 = v14[3];
              if ((char *)v14[4] - (char *)v18 == v16)
              {
                v71 = v15;
                v19 = v16;
                v20 = memcmp(v18, v15, v16);
                v16 = v19;
                v15 = v71;
                if (!v20)
                  return;
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  v24 = a1 + 16;
  v25 = operator new(0x78uLL);
  v73 = v25;
  *v25 = 0;
  v25[1] = v10;
  v26 = (char *)(v25 + 7);
  v27 = *(char **)(a3 + 8);
  v25[2] = *(_QWORD *)a3;
  v25[3] = v25 + 7;
  v25[5] = v25 + 7;
  v25[6] = 32;
  v28 = *(char **)(a3 + 16);
  v29 = v28 - v27;
  v25[4] = v25 + 7;
  if ((unint64_t)(v28 - v27) >= 0x21)
  {
    if (v29 <= 0x40)
      v30 = 64;
    else
      v30 = v28 - v27;
    v26 = (char *)malloc_type_malloc(v30, 0x100004077774924uLL);
    v31 = (char *)v25[3];
    v32 = (char *)v25[4];
    if (v31 == v32)
      goto LABEL_51;
    v33 = v32 - v31;
    if ((unint64_t)(v32 - v31) < 8)
    {
      v34 = v26;
      goto LABEL_50;
    }
    v34 = v26;
    if ((unint64_t)(v26 - v31) < 0x20)
      goto LABEL_50;
    if (v33 >= 0x20)
    {
      v35 = v33 & 0xFFFFFFFFFFFFFFE0;
      v36 = (__int128 *)(v31 + 16);
      v37 = v26 + 16;
      v38 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v39 = *v36;
        *(v37 - 1) = *(v36 - 1);
        *v37 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 32;
      }
      while (v38);
      if (v33 == v35)
        goto LABEL_51;
      if ((v33 & 0x18) == 0)
      {
        v31 += v35;
        v34 = &v26[v35];
        goto LABEL_50;
      }
    }
    else
    {
      v35 = 0;
    }
    v40 = v33 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v26[v33 & 0xFFFFFFFFFFFFFFF8];
    v41 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
    v42 = (uint64_t *)&v31[v35];
    v43 = &v26[v35];
    do
    {
      v44 = *v42++;
      *(_QWORD *)v43 = v44;
      v43 += 8;
      v41 += 8;
    }
    while (v41);
    if (v33 == v40)
      goto LABEL_51;
    v31 += v40;
    do
    {
LABEL_50:
      v45 = *v31++;
      *v34++ = v45;
    }
    while (v31 != v32);
LABEL_51:
    v25[3] = v26;
    v25[4] = v26;
    v25[6] = v30;
    v24 = a1 + 16;
  }
  if (v27 == v28)
    goto LABEL_70;
  if (v29 < 8)
  {
    v47 = v26;
    goto LABEL_68;
  }
  if ((unint64_t)(v26 - v27) < 0x20)
  {
    v47 = v26;
    goto LABEL_68;
  }
  if (v29 >= 0x20)
  {
    v46 = v29 & 0xFFFFFFFFFFFFFFE0;
    v48 = (__int128 *)(v27 + 16);
    v49 = v26 + 16;
    v50 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v51 = *v48;
      *(v49 - 1) = *(v48 - 1);
      *v49 = v51;
      v48 += 2;
      v49 += 2;
      v50 -= 32;
    }
    while (v50);
    if (v29 == v46)
      goto LABEL_69;
    if ((v29 & 0x18) == 0)
    {
      v27 += v46;
      v47 = &v26[v46];
      goto LABEL_68;
    }
  }
  else
  {
    v46 = 0;
  }
  v52 = v29 & 0xFFFFFFFFFFFFFFF8;
  v47 = &v26[v29 & 0xFFFFFFFFFFFFFFF8];
  v53 = v46 - (v29 & 0xFFFFFFFFFFFFFFF8);
  v54 = (uint64_t *)&v27[v46];
  v55 = &v26[v46];
  do
  {
    v56 = *v54++;
    *(_QWORD *)v55 = v56;
    v55 += 8;
    v53 += 8;
  }
  while (v53);
  if (v29 == v52)
    goto LABEL_69;
  v27 += v52;
  do
  {
LABEL_68:
    v57 = *v27++;
    *v47++ = v57;
  }
  while (v27 != v28);
LABEL_69:
  v26 = (char *)v25[4];
LABEL_70:
  v25[4] = &v26[v29];
  v25[11] = *(_QWORD *)(a3 + 72);
  *((_OWORD *)v25 + 6) = *(_OWORD *)(a3 + 80);
  v25[14] = *(_QWORD *)(a3 + 96);
  v58 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v59 = *(float *)(a1 + 32);
  if (!v11 || (float)(v59 * (float)v11) < v58)
  {
    v60 = 1;
    if (v11 >= 3)
      v60 = (v11 & (v11 - 1)) != 0;
    v61 = v60 | (2 * v11);
    v62 = vcvtps_u32_f32(v58 / v59);
    if (v61 <= v62)
      prime = v62;
    else
      prime = v61;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v64 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v64)
      goto LABEL_82;
    if (prime < *(_QWORD *)&v64)
    {
      v65 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v64 < 3uLL || (v66 = (uint8x8_t)vcnt_s8(v64), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
      {
        v65 = std::__next_prime(v65);
      }
      else
      {
        v67 = 1 << -(char)__clz(v65 - 1);
        if (v65 >= 2)
          v65 = v67;
      }
      if (prime <= v65)
        prime = v65;
      if (prime < *(_QWORD *)&v64)
LABEL_82:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v68 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v68)
  {
    *v73 = *v68;
    *v68 = v73;
  }
  else
  {
    *v73 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v24;
    if (*v73)
    {
      v69 = *(_QWORD *)(*v73 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v69 >= v11)
          v69 %= v11;
      }
      else
      {
        v69 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v69) = v73;
    }
  }
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F0B9444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::ResourceKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::ResourceKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::tileLoaderAdditionalInfo(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::RegionalResourceSetFetcher::tileKey()
{
  GEOResourceFilterScaleForScale();
  return GEORegionalResourceTileKeyMake();
}

uint64_t __copy_helper_block_8_40c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_19F0B95E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void grl::FontManager::fontForKey(grl::FontManager *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  _BYTE v6[128];

  grl::FontKey::FontKey((uint64_t)v6, a2, a4);
  grl::FontManager::fontForKey(a1, (const grl::FontKey *)v6, a3);
  esl::FontKey::~FontKey((esl::FontKey *)v6);
}

void md::TextDataString::generateGlyphInfosAndPositions(md::TextDataString *a1, grl::FontManager **a2)
{
  unint64_t v4;
  unsigned __int8 v5;
  float *v6;
  uint64_t v7;
  char v8;
  id v9;
  __int128 *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const __CTFont *v20;
  _BOOL4 HasSmallCaps;
  int v22;
  _QWORD *v23;
  __CFString *v24;
  __CFString *v25;
  CFMutableStringRef MutableCopy;
  __CFString *v27;
  __CFString *v28;
  CFIndex Length;
  double v30;
  const __CTFont *v31;
  const __CTFontDescriptor *v32;
  const __CFAllocator *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CTFontDescriptor *CopyWithFeature;
  CTFontRef CopyWithAttributes;
  CTFontRef v38;
  const __CTFont *v39;
  const void *v40;
  CFCharacterSetRef v41;
  void *v42;
  id v43;
  const __CTLine *v44;
  const __CTLine *v45;
  unint64_t GlyphCount;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  size_t v68;
  size_t v69;
  CFArrayRef GlyphRuns;
  unsigned __int8 v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  float v76;
  uint64_t i;
  const __CTRun *v78;
  CFIndex v79;
  const __CFDictionary *Attributes;
  const __CTFont *Value;
  CTFontSymbolicTraits SymbolicTraits;
  CGFontRef v83;
  uint64_t v84;
  _WORD *v85;
  __int128 *v86;
  unsigned int v87;
  __int16 *v88;
  unsigned int v89;
  BOOL v90;
  float64x2_t v91;
  float64x2_t *v92;
  unint64_t v93;
  float64x2_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float64x2_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float64x2_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  CGFont *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _WORD *v115;
  uint64_t v116;
  CGFont *v117;
  CGFontRef v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _WORD *v123;
  uint64_t v124;
  uint64_t v125;
  _WORD *v126;
  uint64_t v127;
  void *v128;
  __CFAttributedString *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  const __CFLocale *v135;
  const __CTFont *v136;
  id v137;
  __CFAttributedString *Mutable;
  const void *v139;
  uint64_t v140;
  const __CFArray *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  int v148;
  int v149;
  char *v150;
  CGFontRef v151;
  const __CTLine *v152;
  CGPoint *v153;
  float64x2_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _QWORD **v159;
  _QWORD *v160[3];
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t (**v165)();
  const __CTFont *v166;
  uint64_t (**v167)();
  const __CTFont *v168;
  void (**v169)(esl::FontKey *__hidden);
  char v170;
  void *v171;
  char v172;
  void *v173;
  char v174;
  void *v175;
  void *v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _WORD *v181;
  __int128 v182;
  _QWORD *v183;
  _BYTE v184[128];
  uint64_t v185;
  CFRange v186;
  CFRange v187;
  CFRange v188;
  CFRange v189;
  CFRange v190;
  CFRange v191;
  CFRange v192;
  CFRange v193;
  CFRange v194;
  CFRange v195;
  CFRange v196;

  v185 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v4 = *(_QWORD *)a1;
    v178 = 0;
    v177 = 0uLL;
    v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    {
      v130 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v130, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v179 = mdm::Allocator::instance(void)::alloc;
    if (*(char *)(v4 + 87) < 0)
    {
      if (*(_QWORD *)(v4 + 72))
      {
LABEL_5:
        if ((__int128 *)(v4 + 64) != &v177)
        {
          if ((*(_BYTE *)(v4 + 87) & 0x80) != 0)
          {
            std::basic_string<char16_t,std::char_traits<char16_t>,geo::StdAllocator<char16_t,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)&v177, *(void **)(v4 + 64), *(_QWORD *)(v4 + 72));
          }
          else
          {
            v177 = *(_OWORD *)(v4 + 64);
            v178 = *(_QWORD *)(v4 + 80);
          }
        }
LABEL_11:
        v7 = HIBYTE(v178);
        v8 = HIBYTE(v178);
        if (v178 < 0)
          v7 = *((_QWORD *)&v177 + 1);
        if (!v7)
          goto LABEL_229;
        v9 = objc_alloc(MEMORY[0x1E0CB3940]);
        if (v178 >= 0)
          v10 = &v177;
        else
          v10 = (__int128 *)v177;
        if (v178 >= 0)
          v11 = HIBYTE(v178);
        else
          v11 = *((_QWORD *)&v177 + 1);
        v137 = (id)objc_msgSend(v9, "initWithCharacters:length:", v10, v11);

        Mutable = CFAttributedStringCreateMutable(0, 0);
        if (!Mutable)
        {
LABEL_228:

          v8 = HIBYTE(v178);
LABEL_229:
          if (v8 < 0)
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v179 + 40))(v179, v177, 2 * v178);
          return;
        }
        v12 = (_BYTE *)*((_QWORD *)a1 + 2);
        v13 = v12[37];
        if (v12[40])
        {
          v14 = 1;
        }
        else if (v12[37])
        {
          v14 = v12[36] != 0;
          v13 = 1;
        }
        else
        {
          v14 = 0;
        }
        v15 = v13 == 0;
        v16 = !v14;
        v17 = !v15 && !v14;
        if (!v12[36])
          v16 = 0;
        LODWORD(v154.f64[0]) = v16;
        v18 = v12[38];
        v19 = v12[39];
        grl::FontKey::FontKey(&v169, 18.0);
        grl::FontManager::fontForKey(*a2, (const grl::FontKey *)&v169, &v167);
        v20 = v168;
        if (!v168)
        {
LABEL_223:
          v169 = &off_1E42B0650;
          if (v175)
          {
            v176 = v175;
            operator delete(v175);
          }
          v129 = Mutable;
          if (v174 < 0)
          {
            operator delete(v173);
            if ((v172 & 0x80000000) == 0)
              goto LABEL_227;
          }
          else if ((v172 & 0x80000000) == 0)
          {
LABEL_227:
            CFRelease(v129);
            goto LABEL_228;
          }
          operator delete(v171);
          goto LABEL_227;
        }
        if (v14)
        {
          v165 = &off_1E42B4950;
          CFRetain(v168);
          v166 = v20;
          HasSmallCaps = grl::FontManager::fontHasSmallCaps((uint64_t)&v165);
          v165 = &off_1E42B4950;
          if (v166)
            CFRelease(v166);
          LODWORD(v154.f64[0]) = !HasSmallCaps;
          LOBYTE(v17) = 1;
        }
        else
        {
          HasSmallCaps = 0;
          v22 = LODWORD(v154.f64[0]);
          if (v19 | v18)
            v22 = 1;
          if ((v17 | v22) != 1)
          {
            v135 = 0;
            LODWORD(v154.f64[0]) = 0;
            goto LABEL_50;
          }
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 32);
        if (*(char *)(*(_QWORD *)a1 + 55) < 0)
          v23 = (_QWORD *)*v23;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v23);
        v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v135 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v24);

        if ((v17 & 1) != 0)
        {
          v25 = (__CFString *)v137;
          MutableCopy = CFStringCreateMutableCopy(0, 0, v25);

          if (MutableCopy)
          {
            if (*(_BYTE *)(*(_QWORD *)a1 + 129) == 1)
            {
              v195.length = CFStringGetLength(MutableCopy);
              v195.location = 0;
              CFStringFindAndReplace(MutableCopy, CFSTR("ß"), CFSTR("ẞ"), v195, 0);
            }
            CFStringUppercase(MutableCopy, v135);
            v186.location = 0;
            v186.length = 0;
            CFAttributedStringReplaceString(Mutable, v186, MutableCopy);
            goto LABEL_53;
          }
LABEL_219:
          if (v135)
            CFRelease(v135);
          v167 = &off_1E42B4950;
          if (v168)
            CFRelease(v168);
          goto LABEL_223;
        }
        if (v18)
        {
          v27 = (__CFString *)v137;
          MutableCopy = CFStringCreateMutableCopy(0, 0, v27);

          if (!MutableCopy)
            goto LABEL_219;
          CFStringLowercase(MutableCopy, v135);
          v187.location = 0;
          v187.length = 0;
          CFAttributedStringReplaceString(Mutable, v187, MutableCopy);
          goto LABEL_53;
        }
LABEL_50:
        v28 = (__CFString *)v137;
        if (!v19)
        {
          v189.location = 0;
          v189.length = 0;
          CFAttributedStringReplaceString(Mutable, v189, v28);

LABEL_55:
          Length = CFAttributedStringGetLength(Mutable);
          v30 = 0.0;
          if ((LODWORD(v154.f64[0]) | HasSmallCaps) != 1)
            goto LABEL_69;
          v31 = v168;
          if (HasSmallCaps)
          {
            v32 = CTFontCopyFontDescriptor(v168);
            LODWORD(v180) = 38;
            v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v180);
            LODWORD(v161) = 1;
            v35 = CFNumberCreate(v33, kCFNumberIntType, &v161);
            CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v32, v34, v35);
            CopyWithAttributes = CTFontCreateCopyWithAttributes(v31, 0.0, 0, CopyWithFeature);
            if (CopyWithFeature)
              CFRelease(CopyWithFeature);
            if (v35)
              CFRelease(v35);
            v38 = CopyWithAttributes;
            if (v34)
              CFRelease(v34);
            if (v32)
              CFRelease(v32);
          }
          else
          {
            v30 = CTFontGetSize(v168) * 0.829999983;
            v38 = CTFontCreateCopyWithAttributes(v168, v30, 0, 0);
          }
          if (v38)
          {
            if (v18)
            {
              v190.location = 0;
              v190.length = Length;
              CFAttributedStringSetAttribute(Mutable, v190, (CFStringRef)*MEMORY[0x1E0CA8188], v38);
            }
            else
            {
              v196.location = 0;
              v196.length = Length;
              applyRaisedInitial(Mutable, v168, (CFIndex)v38, v196, v135);
            }
          }
          else
          {
LABEL_69:
            v38 = 0;
            v191.location = 0;
            v191.length = Length;
            CFAttributedStringSetAttribute(Mutable, v191, (CFStringRef)*MEMORY[0x1E0CA8188], v168);
          }
          v39 = v168;
          v40 = (const void *)*((_QWORD *)a1 + 5);
          if (v168)
            CFRetain(v168);
          *((_QWORD *)a1 + 5) = v39;
          if (v40)
            CFRelease(v40);
          v136 = v38;
          if (v170)
          {
            v41 = CTFontCopyCharacterSet(v168);
            -[__CFCharacterSet invertedSet](v41, "invertedSet");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            if (v42)
            {
              v43 = v137;
              *((_BYTE *)a1 + 121) = objc_msgSend(v43, "rangeOfCharacterFromSet:", v42) == 0x7FFFFFFFFFFFFFFFLL;

            }
            else
            {
              *((_BYTE *)a1 + 121) = 0;
            }

            if (v41)
              CFRelease(v41);
          }
          v44 = CTLineCreateWithAttributedString(Mutable);
          v45 = v44;
          if (v44)
          {
            v152 = v44;
            GlyphCount = CTLineGetGlyphCount(v44);
            v47 = *((_QWORD *)a1 + 7);
            v147 = (_QWORD *)((char *)a1 + 56);
            v48 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 9) - v47) >> 3);
            v49 = GlyphCount;
            v142 = GlyphCount;
            if (v48 < GlyphCount)
            {
              if (GlyphCount > 0xAAAAAAAAAAAAAAALL)
                abort();
              v50 = GlyphCount;
              v51 = *((_QWORD *)a1 + 10);
              v52 = *((_QWORD *)a1 + 8);
              v183 = (_QWORD *)((char *)a1 + 80);
              v53 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, 24 * v50, 8);
              v54 = v53 + v52 - v47;
              v180 = v53;
              v181 = (_WORD *)v54;
              v55 = v53 + 24 * v50;
              *(_QWORD *)&v182 = v54;
              *((_QWORD *)&v182 + 1) = v55;
              v57 = *((_QWORD *)a1 + 7);
              v56 = *((_QWORD *)a1 + 8);
              if (v56 == v57)
              {
                *((_QWORD *)a1 + 7) = v54;
                *((_QWORD *)a1 + 8) = v54;
                v61 = *((_QWORD *)a1 + 9);
                *((_QWORD *)a1 + 9) = v55;
              }
              else
              {
                v58 = 0;
                do
                {
                  v59 = v54 + v58;
                  *(_WORD *)(v54 + v58 - 24) = *(_WORD *)(v56 + v58 - 24);
                  *(_QWORD *)(v59 - 16) = CGFontRetain(*(CGFontRef *)(v56 + v58 - 16));
                  *(_BYTE *)(v59 - 8) = *(_BYTE *)(v56 + v58 - 8);
                  *(_WORD *)(v59 - 7) = *(_WORD *)(v56 + v58 - 7);
                  *(_BYTE *)(v59 - 5) = 0;
                  *(_BYTE *)(v59 - 4) &= 0xC0u;
                  v58 -= 24;
                }
                while (v56 + v58 != v57);
                v56 = *((_QWORD *)a1 + 7);
                v60 = *((_QWORD *)a1 + 8);
                *((_QWORD *)a1 + 7) = v54 + v58;
                *((_QWORD *)a1 + 8) = v54;
                v61 = *((_QWORD *)a1 + 9);
                *((_QWORD *)a1 + 9) = v55;
                if (v60 == v56)
                {
                  v38 = v136;
                  v45 = v152;
                  v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
                }
                else
                {
                  v38 = v136;
                  v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
                  do
                  {
                    v62 = v60 - 24;
                    CGFontRelease(*(CGFontRef *)(v60 - 16));
                    v60 = v62;
                  }
                  while (v62 != v56);
                  v45 = v152;
                }
              }
              if (v56)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 10) + 40))(*((_QWORD *)a1 + 10), v56, v61 - v56);
              v49 = v142;
            }
            v161 = 0;
            v162 = 0;
            v163 = 0;
            {
              v131 = operator new();
              *((_QWORD *)v6 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v131, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v64 = *((_QWORD *)v6 + 299);
            v164 = v64;
            if (!v49)
              goto LABEL_105;
            if (v49 >> 61)
              abort();
            v65 = 8 * v49;
            v64 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, 8 * v49, 8);
            v66 = v64 + 8 * v49;
            v161 = v64;
            v163 = v66;
            do
            {
              if (v64)
                *(_QWORD *)v64 = 0;
              v64 += 8;
              v65 -= 8;
            }
            while (v65);
            v162 = v66;
            if (2 * v49 > 0x2000)
            {
              v150 = (char *)malloc_type_malloc(2 * v49, 0x1000040BDFB0063uLL);
              v134 = 0;
            }
            else
            {
LABEL_105:
              MEMORY[0x1E0C80A78](v64);
              v150 = (char *)&v133 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
              bzero(v150, v67);
              v134 = 1;
            }
            v68 = 16 * v49;
            v133 = 16 * v49;
            if (16 * v49 > 0x2000)
            {
              v153 = (CGPoint *)malloc_type_malloc(v68, 0x1000040451B5BE8uLL);
            }
            else
            {
              v69 = MEMORY[0x1E0C80A78](v68);
              v153 = (CGPoint *)((char *)&v133 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
              bzero(v153, v69);
            }
            if (v150 && v153)
            {
              GlyphRuns = CTLineGetGlyphRuns(v45);
              v160[0] = 0;
              {
                v132 = operator new();
                *((_QWORD *)v6 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v132, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              v160[1] = *((_QWORD **)v6 + 299);
              v160[2] = 0;
              v159 = v160;
              v155 = 0u;
              v156 = 0u;
              v157 = 0u;
              v158 = 0u;
              v141 = GlyphRuns;
              v72 = -[__CFArray countByEnumeratingWithState:objects:count:](v141, "countByEnumeratingWithState:objects:count:", &v155, v184, 16);
              v73 = v142;
              if (v72)
              {
                v143 = 0;
                v145 = 0;
                v74 = LODWORD(v154.f64[0]);
                if (vabdd_f64(18.0, v30) > 0.00999999978)
                  v74 = 0;
                v148 = v74;
                v146 = (_QWORD *)((char *)a1 + 80);
                v75 = *(_QWORD *)v156;
                v139 = (const void *)*MEMORY[0x1E0CA8188];
                v140 = v75;
                v76 = 0.0;
                for (i = v75; ; i = *(_QWORD *)v156)
                {
                  if (i != v140)
                    objc_enumerationMutation(v141);
                  v144 = v72;
                  v78 = *(const __CTRun **)(*((_QWORD *)&v155 + 1) + 8 * v145);
                  v79 = CTRunGetGlyphCount(v78);
                  Attributes = CTRunGetAttributes(v78);
                  Value = (const __CTFont *)CFDictionaryGetValue(Attributes, v139);
                  SymbolicTraits = CTFontGetSymbolicTraits(Value);
                  v83 = CTFontCopyGraphicsFont(Value, 0);
                  if (v83)
                    break;
LABEL_201:
                  v72 = v144;
                  ++v145;
                  v73 = v142;
                  if (v145 >= v144)
                  {
                    v72 = -[__CFArray countByEnumeratingWithState:objects:count:](v141, "countByEnumeratingWithState:objects:count:", &v155, v184, 16);
                    if (!v72)
                      goto LABEL_205;
                    v145 = 0;
                  }
                }
                v151 = v83;
                v192.location = 0;
                v192.length = v79;
                CTRunGetStringIndices(v78, v192, (CFIndex *)(v161 + 8 * v143));
                v193.location = 0;
                v193.length = v79;
                CTRunGetGlyphs(v78, v193, (CGGlyph *)v150);
                v194.location = 0;
                v194.length = v79;
                CTRunGetPositions(v78, v194, v153);
                if (*((_BYTE *)a1 + 122))
                {
                  if (v79)
                    goto LABEL_125;
                  goto LABEL_200;
                }
                *((_BYTE *)a1 + 122) = CTRunGetStatus(v78) & 1;
                if (!v79)
                {
LABEL_200:
                  v143 += v79;
                  CFRelease(v151);
                  v38 = v136;
                  goto LABEL_201;
                }
LABEL_125:
                v84 = 0;
                v149 = (SymbolicTraits >> 13) & 1;
                while (1)
                {
                  if (*(_BYTE *)(*(_QWORD *)a1 + 128) == 2 && *(_BYTE *)(*(_QWORD *)a1 + 130))
                  {
                    v86 = &v177;
                    if (v178 < 0)
                      v86 = (__int128 *)v177;
                    v87 = *((unsigned __int16 *)v86
                          + *(_QWORD *)(v161 + 0x5555555555555558 * ((*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 3)));
                    if (v87 > 0x300B)
                    {
                      switch(v87)
                      {
                        case 0x300Cu:
                          v88 = (__int16 *)&unk_1A007B6A6;
                          break;
                        case 0x300Du:
                          v88 = (__int16 *)&unk_1A007B6A8;
                          break;
                        case 0x30FCu:
                          v88 = (__int16 *)&unk_1A007B6A4;
                          break;
                        default:
LABEL_156:
                          v88 = (__int16 *)&ggl::polylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
                          break;
                      }
                    }
                    else
                    {
                      v89 = v87 - 40;
                      v88 = jpVerticalExceptions;
                      switch(v89)
                      {
                        case 0u:
                          v88 = &jpVerticalExceptions[4];
                          break;
                        case 1u:
                          v88 = &jpVerticalExceptions[5];
                          break;
                        case 5u:
                          v88 = &jpVerticalExceptions[13];
                          break;
                        case 7u:
                          v88 = &jpVerticalExceptions[8];
                          break;
                        case 0x12u:
                          v88 = &jpVerticalExceptions[11];
                          break;
                        case 0x14u:
                          v88 = &jpVerticalExceptions[6];
                          break;
                        case 0x15u:
                          v88 = &jpVerticalExceptions[12];
                          break;
                        case 0x16u:
                          v88 = &jpVerticalExceptions[7];
                          break;
                        case 0x33u:
                          break;
                        case 0x34u:
                          v88 = &jpVerticalExceptions[9];
                          break;
                        case 0x35u:
                          v88 = &jpVerticalExceptions[1];
                          break;
                        case 0x37u:
                          v88 = &jpVerticalExceptions[15];
                          break;
                        case 0x53u:
                          v88 = &jpVerticalExceptions[2];
                          break;
                        case 0x54u:
                          v88 = &jpVerticalExceptions[10];
                          break;
                        case 0x55u:
                          v88 = &jpVerticalExceptions[3];
                          break;
                        case 0x56u:
                          v88 = &jpVerticalExceptions[14];
                          break;
                        default:
                          goto LABEL_156;
                      }
                    }
                    v90 = (char *)v88 - (char *)jpVerticalExceptions != 38;
                  }
                  else
                  {
                    v90 = 0;
                  }
                  v91 = (float64x2_t)v153[v84];
                  *(float32x2_t *)&v91.f64[0] = vcvt_f32_f64(v91);
                  v154 = v91;
                  v92 = (float64x2_t *)*((_QWORD *)a1 + 12);
                  v93 = *((_QWORD *)a1 + 13);
                  if ((unint64_t)v92 >= v93)
                  {
                    v95 = *((_QWORD *)a1 + 11);
                    v96 = ((uint64_t)v92 - v95) >> 4;
                    v97 = v96 + 1;
                    if ((unint64_t)(v96 + 1) >> 60)
                      abort();
                    v98 = v93 - v95;
                    if (v98 >> 3 > v97)
                      v97 = v98 >> 3;
                    if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0)
                      v99 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v99 = v97;
                    if (v99)
                    {
                      v100 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 14) + 16))(*((_QWORD *)a1 + 14), 16 * v99, 8);
                      v101 = (float64x2_t *)(v100 + 16 * v96);
                      v102 = v100 + 16 * v99;
                      if (v100)
                        *v101 = vcvtq_f64_f32(*(float32x2_t *)&v154.f64[0]);
                    }
                    else
                    {
                      v102 = 0;
                      v101 = (float64x2_t *)(16 * v96);
                    }
                    v104 = *((_QWORD *)a1 + 11);
                    v103 = *((_QWORD *)a1 + 12);
                    v105 = v101;
                    if (v103 != v104)
                    {
                      do
                      {
                        v105[-1] = *(float64x2_t *)(v103 - 16);
                        --v105;
                        v103 -= 16;
                      }
                      while (v103 != v104);
                      v103 = *((_QWORD *)a1 + 11);
                    }
                    v94 = v101 + 1;
                    *((_QWORD *)a1 + 11) = v105;
                    *((_QWORD *)a1 + 12) = v101 + 1;
                    v106 = *((_QWORD *)a1 + 13);
                    *((_QWORD *)a1 + 13) = v102;
                    if (v103)
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 14) + 40))(*((_QWORD *)a1 + 14), v103, v106 - v103);
                  }
                  else
                  {
                    if (v92)
                      *v92 = vcvtq_f64_f32(*(float32x2_t *)&v154.f64[0]);
                    v94 = v92 + 1;
                  }
                  *((_QWORD *)a1 + 12) = v94;
                  v108 = *((_QWORD *)a1 + 8);
                  v107 = *((_QWORD *)a1 + 9);
                  if (v108 < v107)
                  {
                    if (v108)
                    {
                      v109 = v151;
                      *(_WORD *)v108 = *(_WORD *)&v150[2 * v84];
                      *(_QWORD *)(v108 + 8) = CGFontRetain(v109);
                      *(_BYTE *)(v108 + 16) = v148;
                      *(_BYTE *)(v108 + 17) = v149;
                      *(_BYTE *)(v108 + 18) = v90;
                      *(_BYTE *)(v108 + 19) = 0;
                      *(_BYTE *)(v108 + 20) &= 0xC0u;
                    }
                    v85 = (_WORD *)(v108 + 24);
                    *((_QWORD *)a1 + 8) = v108 + 24;
                    goto LABEL_127;
                  }
                  v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - *v147) >> 3);
                  v111 = v110 + 1;
                  if (v110 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - *v147) >> 3);
                  if (2 * v112 > v111)
                    v111 = 2 * v112;
                  if (v112 >= 0x555555555555555)
                    v113 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v113 = v111;
                  v183 = v146;
                  if (v113)
                    v114 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v146 + 16))(*v146, 24 * v113, 8);
                  else
                    v114 = 0;
                  v115 = (_WORD *)(v114 + 24 * v110);
                  v180 = v114;
                  v181 = v115;
                  v116 = v114 + 24 * v113;
                  *(_QWORD *)&v182 = v115;
                  *((_QWORD *)&v182 + 1) = v116;
                  if (v114)
                  {
                    v117 = v151;
                    *v115 = *(_WORD *)&v150[2 * v84];
                    v118 = CGFontRetain(v117);
                    v119 = v114 + 24 * v110;
                    *(_QWORD *)(v119 + 8) = v118;
                    *(_BYTE *)(v119 + 16) = v148;
                    *(_BYTE *)(v119 + 17) = v149;
                    *(_BYTE *)(v119 + 18) = v90;
                    *(_BYTE *)(v119 + 19) = 0;
                    *(_BYTE *)(v119 + 20) &= 0xC0u;
                  }
                  v85 = v115 + 12;
                  *(_QWORD *)&v182 = v115 + 12;
                  v120 = *((_QWORD *)a1 + 7);
                  v121 = *((_QWORD *)a1 + 8);
                  if (v121 != v120)
                    break;
                  *((_QWORD *)a1 + 7) = v115;
                  *((_QWORD *)a1 + 8) = v85;
                  v125 = *((_QWORD *)a1 + 9);
                  *((_QWORD *)a1 + 9) = v116;
                  if (v121)
                    goto LABEL_199;
LABEL_127:
                  v76 = fmaxf(v76, *(float *)v154.f64);
                  *((_QWORD *)a1 + 8) = v85;
                  ++v84;
                  v45 = v152;
                  if (v84 == v79)
                    goto LABEL_200;
                }
                v122 = 0;
                do
                {
                  v123 = &v115[v122 / 2];
                  v115[v122 / 2 - 12] = *(_WORD *)(v121 + v122 - 24);
                  *((_QWORD *)v123 - 2) = CGFontRetain(*(CGFontRef *)(v121 + v122 - 16));
                  *((_BYTE *)v123 - 8) = *(_BYTE *)(v121 + v122 - 8);
                  *(_WORD *)((char *)v123 - 7) = *(_WORD *)(v121 + v122 - 7);
                  *((_BYTE *)v123 - 5) = 0;
                  *((_BYTE *)v123 - 4) &= 0xC0u;
                  v122 -= 24;
                }
                while (v121 + v122 != v120);
                v121 = *((_QWORD *)a1 + 7);
                v124 = *((_QWORD *)a1 + 8);
                *((_QWORD *)a1 + 7) = &v115[v122 / 2];
                v125 = *((_QWORD *)a1 + 9);
                v126 = (_WORD *)v182;
                *((_OWORD *)a1 + 4) = v182;
                v85 = v126;
                if (v124 != v121)
                {
                  do
                  {
                    v127 = v124 - 24;
                    CGFontRelease(*(CGFontRef *)(v124 - 16));
                    v124 = v127;
                  }
                  while (v127 != v121);
                }
                if (!v121)
                  goto LABEL_127;
LABEL_199:
                (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v183 + 40))(*v183, v121, v125 - v121);
                goto LABEL_127;
              }
              v76 = 0.0;
LABEL_205:

              if (*(_BYTE *)(*(_QWORD *)a1 + 132))
                md::TextDataString::detectTextClusters(a1, v45, v76, v73);
              std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v159, v160[0]);
            }
            if ((v134 & 1) == 0)
              free(v150);
            if (v133 > 0x2000)
              free(v153);
            CFAttributedStringGetString(Mutable);
            v128 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v128, "length"))
              md::TextDataStringInfo::generateLineBreakInfo(*(_QWORD *)a1, v128, &v161, v147);

            if (v161)
            {
              v162 = v161;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v164 + 40))(v164, v161, v163 - v161);
            }
            CFRelease(v45);
          }
          if (v38)
            CFRelease(v38);
          goto LABEL_219;
        }
        MutableCopy = CFStringCreateMutableCopy(0, 0, v28);

        if (!MutableCopy)
          goto LABEL_219;
        CFStringLowercase(MutableCopy, v135);
        CFStringCapitalize(MutableCopy, v135);
        v188.location = 0;
        v188.length = 0;
        CFAttributedStringReplaceString(Mutable, v188, MutableCopy);
LABEL_53:
        CFRelease(MutableCopy);
        goto LABEL_55;
      }
    }
    else if (*(_BYTE *)(v4 + 87))
    {
      goto LABEL_5;
    }
    md::TextDataStringInfo::widenText(v4, (unsigned __int16 *)&v177);
    goto LABEL_11;
  }
}

void sub_19F0BA8D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;

  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy(v1 + 240, *(_QWORD **)(v1 + 248));
  v3 = *(_QWORD *)(v1 + 272);
  if (v3)
  {
    *(_QWORD *)(v1 + 280) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 296) + 40))(*(_QWORD *)(v1 + 296), v3, *(_QWORD *)(v1 + 288) - v3);
  }
  CFRelease(*(CFTypeRef *)(v1 + 144));
  v4 = *(const void **)(v1 + 24);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(v1 + 16);
  if (v5)
    CFRelease(v5);
  *(_QWORD *)(v1 + 328) = &off_1E42B4950;
  v6 = *(const void **)(v1 + 336);
  if (v6)
    CFRelease(v6);
  grl::FontKey::~FontKey((grl::FontKey *)(v1 + 352));
  CFRelease(*(CFTypeRef *)(v1 + 40));

  if (*(char *)(v1 + 503) < 0)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 504) + 40))(*(_QWORD *)(v1 + 504), *(_QWORD *)(v1 + 480), 2 * *(_QWORD *)(v1 + 496));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void grl::FontManager::fontForKey(grl::FontManager *this@<X0>, const grl::FontKey *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  char *v8;
  CFTypeRef *v9;
  CTFontRef v10;
  uint64_t v11;
  const __CFData *v12;
  const __CFData *v13;
  CGDataProvider *v14;
  CGDataProvider *v15;
  CGFont *v16;
  NSObject *v17;
  char *v18;
  NSObject *v19;
  char *v20;
  const char *v21;
  NSObject *v22;
  NSObject *v23;
  char *v24;
  const char *v25;
  char *v26;
  char *v27;
  NSObject *v28;
  char *v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  char *v33;
  int v34;
  char *v35;
  __int128 buf;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)((char *)this + 168);
  std::mutex::lock((std::mutex *)((char *)this + 168));
  v7 = *((unsigned __int8 *)a2 + 95);
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 10);
  if (!v7)
    goto LABEL_94;
  v8 = (char *)this + 96;
  if ((grl::FontManager *)((char *)this + 144) == (grl::FontManager *)geo::LRUPolicy<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>>::get((uint64_t)this + 144, (_QWORD *)this + 13, a2))
  {
    if (*((_BYTE *)a2 + 11))
    {
      v11 = *((unsigned __int8 *)a2 + 71);
      if ((v11 & 0x80u) != 0)
        v11 = *((_QWORD *)a2 + 7);
      if (!v11)
      {
        if (GEOGetGeoResourceLibFontLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_13_0);
        v22 = GEOGetGeoResourceLibFontLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "Font name is empty, can't create font.", (uint8_t *)&buf, 2u);
        }
LABEL_87:
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
        v32 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a2 + 95) >= 0)
            v33 = (char *)a2 + 72;
          else
            v33 = (char *)*((_QWORD *)a2 + 9);
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v33;
          _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_ERROR, "Failed to load a font from disk/manifest for font name \"%s\".", (uint8_t *)&buf, 0xCu);
        }
LABEL_94:
        v10 = 0;
        goto LABEL_95;
      }
      (*(void (**)(__int128 *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 1) + 48))(&buf, *((_QWORD *)this + 1), (char *)a2 + 48);
      if (*((_QWORD *)&buf + 1) == (_QWORD)buf)
      {
        if (GEOGetGeoResourceLibFontLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_13_0);
        v23 = GEOGetGeoResourceLibFontLog::log;
        if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        if (*((char *)a2 + 71) >= 0)
          v24 = (char *)a2 + 48;
        else
          v24 = (char *)*((_QWORD *)a2 + 6);
        v34 = 136315138;
        v35 = v24;
        v25 = "Failed to read resource font from manifest, %s.";
      }
      else
      {
        v12 = CFDataCreate(0, (const UInt8 *)buf, *((_QWORD *)&buf + 1) - buf);
        if (v12)
        {
          v13 = v12;
          v14 = CGDataProviderCreateWithCFData(v12);
          if (v14)
          {
            v15 = v14;
            v16 = CGFontCreateWithDataProvider(v14);
            CFRelease(v15);
            if (v16)
            {
              v10 = CTFontCreateWithGraphicsFont(v16, *((float *)a2 + 4), 0, 0);
              if (!v10)
              {
                if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
                v17 = GEOGetGeoResourceLibCoreFoundationLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                {
                  if (*((char *)a2 + 95) >= 0)
                    v18 = (char *)a2 + 72;
                  else
                    v18 = (char *)*((_QWORD *)a2 + 9);
                  v34 = 136315138;
                  v35 = v18;
                  _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "Failed to create CTFont from CGFont for font name \"%s\".", (uint8_t *)&v34, 0xCu);
                }
              }
              CFRelease(v16);
              goto LABEL_82;
            }
            if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_28_0);
            v28 = GEOGetGeoResourceLibCoreGraphicsLog::log;
            if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
            {
LABEL_81:
              v10 = 0;
LABEL_82:
              CFRelease(v13);
LABEL_83:
              if ((_QWORD)buf)
              {
                *((_QWORD *)&buf + 1) = buf;
                operator delete((void *)buf);
              }
              goto LABEL_85;
            }
            if (*((char *)a2 + 71) >= 0)
              v31 = (char *)a2 + 48;
            else
              v31 = (char *)*((_QWORD *)a2 + 6);
            v34 = 136315138;
            v35 = v31;
            v30 = "Failed to create CGFont from data provider for font name \"%s\".";
          }
          else
          {
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
            v28 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
              goto LABEL_81;
            if (*((char *)a2 + 71) >= 0)
              v29 = (char *)a2 + 48;
            else
              v29 = (char *)*((_QWORD *)a2 + 6);
            v34 = 136315138;
            v35 = v29;
            v30 = "Failed to create CFDataProvider for font name \"%s\".";
          }
          _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&v34, 0xCu);
          goto LABEL_81;
        }
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
        v23 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
LABEL_65:
          v10 = 0;
          goto LABEL_83;
        }
        if (*((char *)a2 + 71) >= 0)
          v27 = (char *)a2 + 48;
        else
          v27 = (char *)*((_QWORD *)a2 + 6);
        v34 = 136315138;
        v35 = v27;
        v25 = "Failed to generate CFData for font from manifest with name \"%s\".";
      }
      _os_log_impl(&dword_19F029000, v23, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v34, 0xCu);
      goto LABEL_65;
    }
    grl::FontKey::createDescriptor(a2, &buf);
    if (*((_QWORD *)&buf + 1))
    {
      v10 = CTFontCreateWithFontDescriptor(*((CTFontDescriptorRef *)&buf + 1), *((float *)a2 + 4), 0);
      if (v10)
        goto LABEL_55;
      if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
      v19 = GEOGetGeoResourceLibCoreFoundationLog::log;
      if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
      {
LABEL_54:
        v10 = 0;
LABEL_55:
        *(_QWORD *)&buf = &off_1E42B4930;
        if (*((_QWORD *)&buf + 1))
          CFRelease(*((CFTypeRef *)&buf + 1));
LABEL_85:
        if (v10)
        {
          CFRetain(v10);
          geo::Cache<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>,geo::LRUPolicy>::insert((uint64_t)v8, a2, v10);
          CFRelease(v10);
LABEL_95:
          *a3 = &off_1E42B4970;
          goto LABEL_96;
        }
        goto LABEL_87;
      }
      if (*((char *)a2 + 95) >= 0)
        v20 = (char *)a2 + 72;
      else
        v20 = (char *)*((_QWORD *)a2 + 9);
      v34 = 136315138;
      v35 = v20;
      v21 = "Failed to create CTFont for font name \"%s\".";
    }
    else
    {
      if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
      v19 = GEOGetGeoResourceLibCoreFoundationLog::log;
      if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        goto LABEL_54;
      if (*((char *)a2 + 95) >= 0)
        v26 = (char *)a2 + 72;
      else
        v26 = (char *)*((_QWORD *)a2 + 9);
      v34 = 136315138;
      v35 = v26;
      v21 = "Failed to create CTFontDescriptor for font name \"%s\".";
    }
    _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v34, 0xCu);
    goto LABEL_54;
  }
  v9 = (CFTypeRef *)geo::LRUPolicy<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>>::get((uint64_t)this + 144, (_QWORD *)this + 13, a2);
  if ((CFTypeRef *)((char *)this + 144) == v9)
  {
    geo::Cache<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>,geo::LRUPolicy>::insert((uint64_t)this + 96, a2, 0);
    v9 = (CFTypeRef *)*((_QWORD *)this + 19);
  }
  *a3 = &off_1E42B4970;
  v10 = (CTFontRef)v9[19];
  if (v10)
    CFRetain(v9[19]);
LABEL_96:
  a3[1] = v10;
  std::mutex::unlock(v6);
}

uint64_t geo::LRUPolicy<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>>::get(uint64_t a1, _QWORD *a2, esl::FontKey *this)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<grl::FontKey>(a2, this);
  if (v4)
  {
    v5 = *(uint64_t **)(a1 + 8);
    v6 = (uint64_t *)v4[18];
    if (v5 == v6)
      return *(_QWORD *)(a1 + 8);
    v7 = (uint64_t *)v6[1];
    if (v7 == v5)
    {
      return *(_QWORD *)(a1 + 8);
    }
    else
    {
      v8 = *v6;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)v6[1] = v8;
      v9 = *v5;
      *(_QWORD *)(v9 + 8) = v6;
      *v6 = v9;
      *v5 = (uint64_t)v6;
      v6[1] = (uint64_t)v5;
      return *(_QWORD *)(a1 + 8);
    }
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<grl::FontKey>(_QWORD *a1, esl::FontKey *this)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = esl::FontKey::hash(this);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (esl::FontKey::operator==((uint64_t)(v11 + 2), (uint64_t)this))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t esl::FontKey::hash(esl::FontKey *this)
{
  float v2;
  float v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v16;
  char v17;

  v2 = *((float *)this + 4);
  v3 = *((float *)this + 5);
  v4 = ((*((unsigned __int8 *)this + 9) | ((*((unsigned __int8 *)this + 8) - 0x61C8864680B583EBLL) << 6))
      - 0x3A3AA7D820E2E4E6) ^ (*((unsigned __int8 *)this + 8) - 0x61C8864680B583EBLL);
  v5 = ((*((unsigned __int8 *)this + 10) | (v4 << 6)) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  v6 = ((*((unsigned __int8 *)this + 11) | (v5 << 6)) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v7 = ((*((unsigned __int8 *)this + 12) | (v6 << 6)) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  v8 = ((*((unsigned __int8 *)this + 13) | (v7 << 6)) + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  v9 = LODWORD(v2) - 0x61C8864680B583EBLL;
  if (v2 == 0.0)
    v9 = 0x9E3779B97F4A7C15;
  v10 = (v9 + (v8 << 6) + (v8 >> 2)) ^ v8;
  v11 = LODWORD(v3) - 0x61C8864680B583EBLL;
  if (v3 == 0.0)
    v11 = 0x9E3779B97F4A7C15;
  v12 = (v11 + (v10 << 6) + (v10 >> 2)) ^ v10;
  v13 = (*((unsigned __int8 *)this + 40) + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
  v14 = (std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, (uint64_t)this + 48)
       + (v13 << 6)
       + (v13 >> 2)
       - 0x61C8864680B583EBLL) ^ v13;
  return (std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v17, (uint64_t)this + 72)
        + (v14 << 6)
        + (v14 >> 2)
        - 0x61C8864680B583EBLL) ^ v14;
}

BOOL esl::FontKey::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a1 + 8)
      && *(unsigned __int8 *)(a2 + 9) == *(unsigned __int8 *)(a1 + 9)
      && *(unsigned __int8 *)(a2 + 10) == *(unsigned __int8 *)(a1 + 10)
      && *(unsigned __int8 *)(a2 + 11) == *(unsigned __int8 *)(a1 + 11)
      && *(unsigned __int8 *)(a2 + 12) == *(unsigned __int8 *)(a1 + 12)
      && *(unsigned __int8 *)(a2 + 13) == *(unsigned __int8 *)(a1 + 13)
      && *(float *)(a2 + 16) == *(float *)(a1 + 16)
      && *(unsigned __int8 *)(a2 + 40) == *(unsigned __int8 *)(a1 + 40)
      && *(float *)(a2 + 20) == *(float *)(a1 + 20)
      && !std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(a2 + 48), (unsigned __int8 *)(a1 + 48))&& !std::operator!=[abi:ne180100]<int,std::allocator<int>>(a2 + 96, a1 + 96)&& !std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(a2 + 72), (unsigned __int8 *)(a1 + 72));
}

void esl::FontKey::~FontKey(esl::FontKey *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E42B0650;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  geo::optional<int>::~optional((_BYTE *)this + 32);
  geo::optional<float>::~optional((_BYTE *)this + 24);
}

{
  esl::FontKey::~FontKey(this);
  JUMPOUT(0x1A1AF4E00);
}

_BYTE *geo::optional<float>::~optional(_BYTE *a1)
{
  if (*a1)
  {
    geo::optional<int>::value(a1);
    *a1 = 0;
  }
  return a1;
}

_BYTE *geo::optional<int>::~optional(_BYTE *a1)
{
  if (*a1)
  {
    geo::optional<int>::value(a1);
    *a1 = 0;
  }
  return a1;
}

uint64_t grl::FontKey::FontKey(uint64_t a1, __int128 *a2, float a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  std::string *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  std::string *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)esl::FontKey::FontKey(a1, a2, 4, a3);
  *v4 = &off_1E42C2828;
  memset(&__p, 0, sizeof(__p));
  v5 = esl::FontKey::initialize((uint64_t)v4, &__p);
  if ((v5 - 1) >= 2)
  {
    if (v5 == 3)
    {
      if (GEOGetGeoResourceLibFontLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_13_0);
      v11 = GEOGetGeoResourceLibFontLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v16 = p_p;
        v8 = "%s";
        v9 = v11;
        v10 = 12;
        goto LABEL_15;
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibFontLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_13_0);
    v6 = GEOGetGeoResourceLibFontLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
    {
      v7 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v16 = v7;
      v17 = 2080;
      v18 = "false";
      v19 = 2080;
      v20 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
      v21 = 1024;
      v22 = 42;
      v8 = "%s: Assertion with expression - %s : Failed in file - %s line - %i";
      v9 = v6;
      v10 = 38;
LABEL_15:
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

uint64_t esl::FontKey::FontKey(uint64_t a1, __int128 *a2, char a3, float a4)
{
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a1 = &off_1E42B0650;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 1120403456;
  *(_BYTE *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 32) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "");
  v6 = (std::string *)(a1 + 72);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

void sub_19F0BB95C(_Unwind_Exception *a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  void **v4;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v4);
  geo::optional<int>::~optional(v3);
  geo::optional<float>::~optional(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy(v3, a2[1]);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 32);
  }
  return result;
}

void gdc::EnteringCollector<md::components::MeshInstance>::~EnteringCollector(_QWORD *a1)
{
  gdc::RegistrySignalCollector<md::components::MeshInstance>::~RegistrySignalCollector(a1);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::UpdateCollector<md::components::Material>::~UpdateCollector(_QWORD *a1)
{
  gdc::RegistrySignalCollector<md::components::Material>::~RegistrySignalCollector(a1);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::EnteringCollector<md::components::Material>::~EnteringCollector(_QWORD *a1)
{
  gdc::RegistrySignalCollector<md::components::Material>::~RegistrySignalCollector(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *gdc::RegistrySignalCollector<md::components::Material>::~RegistrySignalCollector(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = &off_1E42B4668;
  gdc::RegistrySignalCollector<md::components::Material>::unobserve(a1);
  *a1 = &off_1E42B0728;
  v2 = (void *)a1[4];
  a1[5] = v2;
  a1[7] = 0;
  v3 = (_QWORD *)a1[11];
  if (v3 == a1 + 8)
  {
    v4 = 4;
    v3 = a1 + 8;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  v2 = (void *)a1[4];
LABEL_6:
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v5 = (_QWORD *)a1[1];
  if (v5)
  {
    v6 = (_QWORD *)a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          MEMORY[0x1A1AF4E00](v8, 0x1000C40104B78CFLL);
      }
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19F0BBB34(_Unwind_Exception *a1)
{
  gdc::EntityCollector *v1;

  gdc::EntityCollector::~EntityCollector(v1);
  _Unwind_Resume(a1);
}

_QWORD *gdc::RegistrySignalCollector<md::components::MeshInstance>::~RegistrySignalCollector(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = &off_1E42B4638;
  gdc::RegistrySignalCollector<md::components::MeshInstance>::unobserve(a1);
  *a1 = &off_1E42B0728;
  v2 = (void *)a1[4];
  a1[5] = v2;
  a1[7] = 0;
  v3 = (_QWORD *)a1[11];
  if (v3 == a1 + 8)
  {
    v4 = 4;
    v3 = a1 + 8;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  v2 = (void *)a1[4];
LABEL_6:
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v5 = (_QWORD *)a1[1];
  if (v5)
  {
    v6 = (_QWORD *)a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          MEMORY[0x1A1AF4E00](v8, 0x1000C40104B78CFLL);
      }
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19F0BBC30(_Unwind_Exception *a1)
{
  gdc::EntityCollector *v1;

  gdc::EntityCollector::~EntityCollector(v1);
  _Unwind_Resume(a1);
}

void gdc::EnteringCollector<md::components::MeshInstance>::observe(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  uint64_t (***v31)();
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1[7] != a2)
    (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  a1[7] = a2;
  v4 = gdc::Registry::storage<md::components::MeshInstance>(a2);
  v6 = (uint64_t *)(v4 + 152);
  v5 = *(_QWORD *)(v4 + 152);
  v29 = &off_1E427D1A0;
  v30 = a1;
  v31 = &v29;
  *(_QWORD *)(v4 + 152) = v5 + 1;
  v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v4 + 160), v5 + 1, (_QWORD *)(v4 + 152));
  v8 = (uint64_t)v31;
  if (!v31)
    goto LABEL_6;
  if (v31 != &v29)
  {
    v8 = (*v31)[2]();
LABEL_6:
    v33 = (_QWORD *)v8;
    goto LABEL_8;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))v29[3])(&v29, v32);
LABEL_8:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v32, v7 + 3);
  v9 = v33;
  if (v33 == v32)
  {
    v10 = 4;
    v9 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  v11 = *v6;
  v12 = v31;
  if (v31 == &v29)
  {
    v13 = 4;
    v12 = &v29;
  }
  else
  {
    if (!v31)
      goto LABEL_18;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_18:
  if (v11 != -1)
  {
    if ((v14 & 1) == 0
    {
      v27 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId = v27;
    }
    a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId
     + 12] = v11;
  }
  v15 = gdc::Registry::storage<md::components::MeshInstance>(a1[7]);
  v17 = (uint64_t *)(v15 + 200);
  v16 = *(_QWORD *)(v15 + 200);
  v29 = &off_1E427D158;
  v30 = a1;
  v31 = &v29;
  *(_QWORD *)(v15 + 200) = v16 + 1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v15 + 208), v16 + 1, (_QWORD *)(v15 + 200));
  v19 = (uint64_t)v31;
  if (!v31)
    goto LABEL_24;
  if (v31 != &v29)
  {
    v19 = (*v31)[2]();
LABEL_24:
    v33 = (_QWORD *)v19;
    goto LABEL_26;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))v29[3])(&v29, v32);
LABEL_26:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v32, v18 + 3);
  v20 = v33;
  if (v33 == v32)
  {
    v21 = 4;
    v20 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_31;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_31:
  v22 = *v17;
  v23 = v31;
  if (v31 == &v29)
  {
    v24 = 4;
    v23 = &v29;
  }
  else
  {
    if (!v31)
      goto LABEL_36;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_36:
  if (v22 != -1)
  {
    v25 = a1 + 14;
    if ((v26 & 1) == 0)
    {
      {
        v28 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::Counter::nextId(void)::counter++;
        gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId = v28;
      }
    }
    v25[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId] = v22;
  }
}

void sub_19F0BBF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gdc::RegistrySignalCollector<md::components::MeshInstance>::unobserve(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1[7])
  {
    if ((v2 & 1) == 0
    {
      v11 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId = v11;
    }
    v3 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId
          + 12];
    if (v3 != -1)
    {
      v4 = gdc::Registry::storage<md::components::MeshInstance>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v4 + 160), v3);
    }
    if ((v5 & 1) == 0
    {
      v12 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId = v12;
    }
    v6 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId
          + 13];
    if (v6 != -1)
    {
      v7 = gdc::Registry::storage<md::components::MeshInstance>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v7 + 112), v6);
    }
    if ((v8 & 1) == 0
    {
      v13 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId = v13;
    }
    v9 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::MeshInstance>,unsigned long long>::getId<md::components::MeshInstance>(void)::localId
          + 14];
    if (v9 != -1)
    {
      v10 = gdc::Registry::storage<md::components::MeshInstance>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v10 + 208), v9);
    }
  }
  a1[5] = a1[4];
  a1[7] = 0;
}

void gdc::UpdateCollector<md::components::Visibility>::observe(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  uint64_t (***v31)();
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1[7] != a2)
    (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  a1[7] = a2;
  v4 = gdc::Registry::storage<md::components::Visibility>(a2);
  v6 = (uint64_t *)(v4 + 104);
  v5 = *(_QWORD *)(v4 + 104);
  v29 = &off_1E427D080;
  v30 = a1;
  v31 = &v29;
  *(_QWORD *)(v4 + 104) = v5 + 1;
  v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v4 + 112), v5 + 1, (_QWORD *)(v4 + 104));
  v8 = (uint64_t)v31;
  if (!v31)
    goto LABEL_6;
  if (v31 != &v29)
  {
    v8 = (*v31)[2]();
LABEL_6:
    v33 = (_QWORD *)v8;
    goto LABEL_8;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))v29[3])(&v29, v32);
LABEL_8:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v32, v7 + 3);
  v9 = v33;
  if (v33 == v32)
  {
    v10 = 4;
    v9 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  v11 = *v6;
  v12 = v31;
  if (v31 == &v29)
  {
    v13 = 4;
    v12 = &v29;
  }
  else
  {
    if (!v31)
      goto LABEL_18;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_18:
  if (v11 != -1)
  {
    if ((v14 & 1) == 0
    {
      v27 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId = v27;
    }
    a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId
     + 13] = v11;
  }
  v15 = gdc::Registry::storage<md::components::Visibility>(a1[7]);
  v17 = (uint64_t *)(v15 + 200);
  v16 = *(_QWORD *)(v15 + 200);
  v29 = &off_1E427D038;
  v30 = a1;
  v31 = &v29;
  *(_QWORD *)(v15 + 200) = v16 + 1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v15 + 208), v16 + 1, (_QWORD *)(v15 + 200));
  v19 = (uint64_t)v31;
  if (!v31)
    goto LABEL_24;
  if (v31 != &v29)
  {
    v19 = (*v31)[2]();
LABEL_24:
    v33 = (_QWORD *)v19;
    goto LABEL_26;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))v29[3])(&v29, v32);
LABEL_26:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v32, v18 + 3);
  v20 = v33;
  if (v33 == v32)
  {
    v21 = 4;
    v20 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_31;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_31:
  v22 = *v17;
  v23 = v31;
  if (v31 == &v29)
  {
    v24 = 4;
    v23 = &v29;
  }
  else
  {
    if (!v31)
      goto LABEL_36;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_36:
  if (v22 != -1)
  {
    v25 = a1 + 14;
    if ((v26 & 1) == 0)
    {
      {
        v28 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::Counter::nextId(void)::counter++;
        gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId = v28;
      }
    }
    v25[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId] = v22;
  }
}

void sub_19F0BC41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gdc::RegistrySignalCollector<md::components::Visibility>::unobserve(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1[7])
  {
    if ((v2 & 1) == 0
    {
      v11 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId = v11;
    }
    v3 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId
          + 12];
    if (v3 != -1)
    {
      v4 = gdc::Registry::storage<md::components::Visibility>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v4 + 160), v3);
    }
    if ((v5 & 1) == 0
    {
      v12 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId = v12;
    }
    v6 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId
          + 13];
    if (v6 != -1)
    {
      v7 = gdc::Registry::storage<md::components::Visibility>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v7 + 112), v6);
    }
    if ((v8 & 1) == 0
    {
      v13 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId = v13;
    }
    v9 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Visibility>,unsigned long long>::getId<md::components::Visibility>(void)::localId
          + 14];
    if (v9 != -1)
    {
      v10 = gdc::Registry::storage<md::components::Visibility>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v10 + 208), v9);
    }
  }
  a1[5] = a1[4];
  a1[7] = 0;
}

void gdc::UpdateCollector<md::components::Material>::observe(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  uint64_t *v30;
  uint64_t (***v31)();
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1[7] != a2)
    (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  a1[7] = a2;
  v4 = gdc::Registry::storage<md::components::Material>(a2);
  v6 = (uint64_t *)(v4 + 104);
  v5 = *(_QWORD *)(v4 + 104);
  v29 = &off_1E427D110;
  v30 = a1;
  v31 = &v29;
  *(_QWORD *)(v4 + 104) = v5 + 1;
  v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v4 + 112), v5 + 1, (_QWORD *)(v4 + 104));
  v8 = (uint64_t)v31;
  if (!v31)
    goto LABEL_6;
  if (v31 != &v29)
  {
    v8 = (*v31)[2]();
LABEL_6:
    v33 = (_QWORD *)v8;
    goto LABEL_8;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))v29[3])(&v29, v32);
LABEL_8:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v32, v7 + 3);
  v9 = v33;
  if (v33 == v32)
  {
    v10 = 4;
    v9 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  v11 = *v6;
  v12 = v31;
  if (v31 == &v29)
  {
    v13 = 4;
    v12 = &v29;
  }
  else
  {
    if (!v31)
      goto LABEL_18;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_18:
  if (v11 != -1)
  {
    if ((v14 & 1) == 0
    {
      v27 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v27;
    }
    a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId
     + 13] = v11;
  }
  v15 = gdc::Registry::storage<md::components::Material>(a1[7]);
  v17 = (uint64_t *)(v15 + 200);
  v16 = *(_QWORD *)(v15 + 200);
  v29 = &off_1E427D0C8;
  v30 = a1;
  v31 = &v29;
  *(_QWORD *)(v15 + 200) = v16 + 1;
  v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v15 + 208), v16 + 1, (_QWORD *)(v15 + 200));
  v19 = (uint64_t)v31;
  if (!v31)
    goto LABEL_24;
  if (v31 != &v29)
  {
    v19 = (*v31)[2]();
LABEL_24:
    v33 = (_QWORD *)v19;
    goto LABEL_26;
  }
  v33 = v32;
  ((void (*)(uint64_t (***)(), _QWORD *))v29[3])(&v29, v32);
LABEL_26:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v32, v18 + 3);
  v20 = v33;
  if (v33 == v32)
  {
    v21 = 4;
    v20 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_31;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_31:
  v22 = *v17;
  v23 = v31;
  if (v31 == &v29)
  {
    v24 = 4;
    v23 = &v29;
  }
  else
  {
    if (!v31)
      goto LABEL_36;
    v24 = 5;
  }
  (*v23)[v24]();
LABEL_36:
  if (v22 != -1)
  {
    v25 = a1 + 14;
    if ((v26 & 1) == 0)
    {
      {
        v28 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
        gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v28;
      }
    }
    v25[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId] = v22;
  }
}

void sub_19F0BC8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gdc::RegistrySignalCollector<md::components::Material>::unobserve(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1[7])
  {
    if ((v2 & 1) == 0
    {
      v11 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v11;
    }
    v3 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId
          + 12];
    if (v3 != -1)
    {
      v4 = gdc::Registry::storage<md::components::Material>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v4 + 160), v3);
    }
    if ((v5 & 1) == 0
    {
      v12 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v12;
    }
    v6 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId
          + 13];
    if (v6 != -1)
    {
      v7 = gdc::Registry::storage<md::components::Material>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v7 + 112), v6);
    }
    if ((v8 & 1) == 0
    {
      v13 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v13;
    }
    v9 = a1[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId
          + 14];
    if (v9 != -1)
    {
      v10 = gdc::Registry::storage<md::components::Material>(a1[7]);
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v10 + 208), v9);
    }
  }
  a1[5] = a1[4];
  a1[7] = 0;
}

void gdc::ComponentStorageSignals::~ComponentStorageSignals(gdc::ComponentStorageSignals *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  _QWORD *v8;
  uint64_t v9;
  uint64_t k;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;

  if (!*((_QWORD *)this + 4))
    goto LABEL_7;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v28 = (_QWORD *)*v2;
      v26 = (_QWORD *)v2[6];
      if (v26 == v2 + 3)
      {
        v26 = v2 + 3;
        v27 = 4;
      }
      else
      {
        if (!v26)
          goto LABEL_49;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_49:
      operator delete(v2);
      v2 = v28;
    }
    while (v28);
  }
  *((_QWORD *)this + 3) = 0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i) = 0;
  }
  *((_QWORD *)this + 4) = 0;
LABEL_7:
  if (!*((_QWORD *)this + 10))
    goto LABEL_13;
  v5 = (_QWORD *)*((_QWORD *)this + 9);
  if (v5)
  {
    do
    {
      v31 = (_QWORD *)*v5;
      v29 = (_QWORD *)v5[6];
      if (v29 == v5 + 3)
      {
        v29 = v5 + 3;
        v30 = 4;
      }
      else
      {
        if (!v29)
          goto LABEL_55;
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_55:
      operator delete(v5);
      v5 = v31;
    }
    while (v31);
  }
  *((_QWORD *)this + 9) = 0;
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    for (j = 0; j != v6; ++j)
      *(_QWORD *)(*((_QWORD *)this + 7) + 8 * j) = 0;
  }
  *((_QWORD *)this + 10) = 0;
LABEL_13:
  if (!*((_QWORD *)this + 16))
    goto LABEL_19;
  v8 = (_QWORD *)*((_QWORD *)this + 15);
  if (v8)
  {
    do
    {
      v34 = (_QWORD *)*v8;
      v32 = (_QWORD *)v8[6];
      if (v32 == v8 + 3)
      {
        v32 = v8 + 3;
        v33 = 4;
      }
      else
      {
        if (!v32)
          goto LABEL_61;
        v33 = 5;
      }
      (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_61:
      operator delete(v8);
      v8 = v34;
    }
    while (v34);
  }
  *((_QWORD *)this + 15) = 0;
  v9 = *((_QWORD *)this + 14);
  if (v9)
  {
    for (k = 0; k != v9; ++k)
      *(_QWORD *)(*((_QWORD *)this + 13) + 8 * k) = 0;
  }
  *((_QWORD *)this + 16) = 0;
LABEL_19:
  v11 = (_QWORD *)*((_QWORD *)this + 15);
  if (v11)
  {
    do
    {
      v19 = (_QWORD *)*v11;
      v17 = (_QWORD *)v11[6];
      if (v17 == v11 + 3)
      {
        v17 = v11 + 3;
        v18 = 4;
      }
      else
      {
        if (!v17)
          goto LABEL_31;
        v18 = 5;
      }
      (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_31:
      operator delete(v11);
      v11 = v19;
    }
    while (v19);
  }
  v12 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v12)
    operator delete(v12);
  v13 = (_QWORD *)*((_QWORD *)this + 9);
  if (v13)
  {
    do
    {
      v22 = (_QWORD *)*v13;
      v20 = (_QWORD *)v13[6];
      if (v20 == v13 + 3)
      {
        v20 = v13 + 3;
        v21 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_37;
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_37:
      operator delete(v13);
      v13 = v22;
    }
    while (v22);
  }
  v14 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
    operator delete(v14);
  v15 = (_QWORD *)*((_QWORD *)this + 3);
  if (v15)
  {
    do
    {
      v25 = (_QWORD *)*v15;
      v23 = (_QWORD *)v15[6];
      if (v23 == v15 + 3)
      {
        v23 = v15 + 3;
        v24 = 4;
      }
      else
      {
        if (!v23)
          goto LABEL_43;
        v24 = 5;
      }
      (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_43:
      operator delete(v15);
      v15 = v25;
    }
    while (v25);
  }
  v16 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
    operator delete(v16);
}

_QWORD *gdc::Registry::_registerStorageDataSignals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v35[0] = &off_1E4289E18;
  v35[1] = a1;
  v36 = v35;
  v8 = *a4 + 1;
  *a4 = v8;
  v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a4 + 1, v8, a4);
  v10 = (uint64_t)v36;
  if (!v36)
    goto LABEL_4;
  if (v36 != v35)
  {
    v10 = (*(uint64_t (**)(void))(*v36 + 16))();
LABEL_4:
    v38 = (_QWORD *)v10;
    goto LABEL_6;
  }
  v38 = v37;
  (*(void (**)(_QWORD *, _QWORD *))(v35[0] + 24))(v35, v37);
LABEL_6:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v37, v9 + 3);
  v11 = v38;
  if (v38 == v37)
  {
    v12 = 4;
    v11 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v36;
  if (v36 == v35)
  {
    v14 = 4;
    v13 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  v15 = operator new(0x30uLL);
  *v15 = &unk_1E4289D88;
  v15[1] = a2;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(_QWORD *)(a3 + 16);
  v15[5] = a1;
  v34 = v15;
  v16 = a4[6] + 1;
  a4[6] = v16;
  v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a4 + 7, v16, a4 + 6);
  v18 = (uint64_t)v34;
  if (!v34)
  {
LABEL_19:
    v38 = (_QWORD *)v18;
    goto LABEL_21;
  }
  if (v34 != v33)
  {
    v18 = (*(uint64_t (**)(void))(*v34 + 16))();
    goto LABEL_19;
  }
  v38 = v37;
  (*(void (**)(_QWORD *, _QWORD *))(v33[0] + 24))(v33, v37);
LABEL_21:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v37, v17 + 3);
  v19 = v38;
  if (v38 == v37)
  {
    v20 = 4;
    v19 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_26;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_26:
  v21 = v34;
  if (v34 == v33)
  {
    v22 = 4;
    v21 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_31;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_31:
  v23 = operator new(0x30uLL);
  *v23 = &off_1E4289DD0;
  v23[1] = a2;
  *((_OWORD *)v23 + 1) = *(_OWORD *)a3;
  v23[4] = *(_QWORD *)(a3 + 16);
  v23[5] = a1;
  v32 = v23;
  v24 = a4[12] + 1;
  a4[12] = v24;
  v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a4 + 13, v24, a4 + 12);
  v26 = (uint64_t)v32;
  if (!v32)
  {
LABEL_34:
    v38 = (_QWORD *)v26;
    goto LABEL_36;
  }
  if (v32 != v31)
  {
    v26 = (*(uint64_t (**)(void))(*v32 + 16))();
    goto LABEL_34;
  }
  v38 = v37;
  (*(void (**)(_QWORD *, _QWORD *))(v31[0] + 24))(v31, v37);
LABEL_36:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v37, v25 + 3);
  v27 = v38;
  if (v38 == v37)
  {
    v28 = 4;
    v27 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_41;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_41:
  result = v32;
  if (v32 == v31)
  {
    v30 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      return result;
    v30 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v30))();
}

void sub_19F0BD088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a13;
  if (a13 == &a10)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  _Unwind_Resume(exception_object);
}

void gdc::ComponentStorageWrapper<md::ls::RenderTargetToPrepare>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 13));
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4)
  {
    v5 = (_QWORD *)a1[5];
    v6 = (void *)a1[4];
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          MEMORY[0x1A1AF4E00](v7, 0x1000C40104B78CFLL);
      }
      while (v5 != v4);
      v6 = (void *)a1[4];
    }
    a1[5] = v4;
    operator delete(v6);
  }
  return a1;
}

void gdc::ComponentStorageWrapper<md::erq::RenderTargetToSubmit>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::ComponentStorageWrapper<md::erq::RenderQueueToSubmit>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

void gdc::EntityCollector::~EntityCollector(gdc::EntityCollector *this)
{
  void *v2;
  gdc::EntityCollector *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E42B0728;
  v2 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 7) = 0;
  v3 = (gdc::EntityCollector *)*((_QWORD *)this + 11);
  if (v3 == (gdc::EntityCollector *)((char *)this + 64))
  {
    v4 = 4;
    v3 = (gdc::EntityCollector *)((char *)this + 64);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(gdc::EntityCollector *))(*(_QWORD *)v3 + 8 * v4))(v3);
  v2 = (void *)*((_QWORD *)this + 4);
LABEL_6:
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          MEMORY[0x1A1AF4E00](v8, 0x1000C40104B78CFLL);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
}

{
  void *v2;
  gdc::EntityCollector *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E42B0728;
  v2 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 7) = 0;
  v3 = (gdc::EntityCollector *)*((_QWORD *)this + 11);
  if (v3 == (gdc::EntityCollector *)((char *)this + 64))
  {
    v4 = 4;
    v3 = (gdc::EntityCollector *)((char *)this + 64);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(gdc::EntityCollector *))(*(_QWORD *)v3 + 8 * v4))(v3);
  v2 = (void *)*((_QWORD *)this + 4);
LABEL_6:
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          MEMORY[0x1A1AF4E00](v8, 0x1000C40104B78CFLL);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
}

{
  void *v2;
  gdc::EntityCollector *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E42B0728;
  v2 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 7) = 0;
  v3 = (gdc::EntityCollector *)*((_QWORD *)this + 11);
  if (v3 == (gdc::EntityCollector *)((char *)this + 64))
  {
    v4 = 4;
    v3 = (gdc::EntityCollector *)((char *)this + 64);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(gdc::EntityCollector *))(*(_QWORD *)v3 + 8 * v4))(v3);
  v2 = (void *)*((_QWORD *)this + 4);
LABEL_6:
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          MEMORY[0x1A1AF4E00](v8, 0x1000C40104B78CFLL);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D00D0;
}

void gdc::UpdateCollector<md::components::Visibility>::~UpdateCollector(_QWORD *a1)
{
  gdc::RegistrySignalCollector<md::components::Visibility>::~RegistrySignalCollector(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *gdc::RegistrySignalCollector<md::components::Visibility>::~RegistrySignalCollector(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = &off_1E42B4608;
  gdc::RegistrySignalCollector<md::components::Visibility>::unobserve(a1);
  *a1 = &off_1E42B0728;
  v2 = (void *)a1[4];
  a1[5] = v2;
  a1[7] = 0;
  v3 = (_QWORD *)a1[11];
  if (v3 == a1 + 8)
  {
    v4 = 4;
    v3 = a1 + 8;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  v2 = (void *)a1[4];
LABEL_6:
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v5 = (_QWORD *)a1[1];
  if (v5)
  {
    v6 = (_QWORD *)a1[2];
    v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          MEMORY[0x1A1AF4E00](v8, 0x1000C40104B78CFLL);
      }
      while (v6 != v5);
      v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19F0BD414(_Unwind_Exception *a1)
{
  gdc::EntityCollector *v1;

  gdc::EntityCollector::~EntityCollector(v1);
  _Unwind_Resume(a1);
}

uint64_t md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>(unsigned __int8 ***a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  ggl::RenderQueue *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  ggl::CommandBuffer *v13;
  ggl::CommandBuffer *v14;
  const char *v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4290AA0;
  v7 = operator new(0x150uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E42DE9D0;
  v8 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v7 + 3), 125);
  v6[3] = 0;
  v9 = v6 + 3;
  v6[1] = v8;
  v6[2] = v7;
  v6[4] = 0;
  v6[5] = 0;
  v10 = (char *)operator new(0x3E8uLL);
  v6[3] = v10;
  v11 = v10 + 1000;
  v6[5] = v10 + 1000;
  bzero(v10, 0x3E8uLL);
  v12 = 0;
  v6[4] = v11;
  *v6 = &off_1E428C500;
  do
  {
    v13 = (ggl::CommandBuffer *)operator new();
    v14 = v13;
    v15 = "<Invalid>";
    if (v12 <= 0x7Cu)
      v15 = off_1E42F59C8[v12];
    v16 = ggl::CommandBuffer::CommandBuffer(v13, v12, v15);
    v17 = *(_QWORD *)(*v9 + 8 * v12);
    *(_QWORD *)(*v9 + 8 * v12) = v14;
    if (v17)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v17 + 8))(v17, v16);
    ggl::RenderQueue::setBufferForLayer(v6[1], v12++, v14);
  }
  while (v12 != 125);
  v23 = v6;
  v18 = (_QWORD *)a3[3];
  if (!v18)
  {
    v19 = 0;
    goto LABEL_11;
  }
  if (v18 != a3)
  {
    v19 = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
LABEL_11:
    v25 = (_BYTE *)v19;
    goto LABEL_13;
  }
  v25 = v24;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v24);
  v19 = (uint64_t)v25;
LABEL_13:
  md::FrameGraphBuilder::addRenderPass(a1, a2, (uint64_t *)&v23, v19);
  v20 = v25;
  if (v25 == v24)
  {
    v21 = 4;
    v20 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_18;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_18:
  result = (uint64_t)v23;
  if (v23)
    return (*(uint64_t (**)(_QWORD *))(*v23 + 8))(v23);
  return result;
}

void sub_19F0BD664(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19F0BD680(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  MEMORY[0x1A1AF4E00](v1, 0xA1C4084DA3AFDLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::RenderQueue::setBufferForLayer(uint64_t this, uint64_t a2, ggl::CommandBuffer *a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = this;
  v6 = a2 + 1;
  v8 = *(_QWORD *)(this + 104);
  v7 = *(_QWORD **)(this + 112);
  v9 = (char *)v7 - v8;
  v10 = ((uint64_t)v7 - v8) >> 3;
  v11 = a2 + 1 - v10;
  if (a2 + 1 > v10)
  {
    v12 = *(_QWORD *)(this + 120);
    if (v11 <= (v12 - (uint64_t)v7) >> 3)
    {
      v20 = &v7[v11];
      v21 = 8 * a2 - 8 * v10 + 8;
      do
      {
        if (v7)
          *v7 = 0;
        ++v7;
        v21 -= 8;
      }
      while (v21);
      *(_QWORD *)(this + 112) = v20;
    }
    else
    {
      if (v6 >> 61)
        abort();
      v13 = v12 - v8;
      v14 = (v12 - v8) >> 2;
      if (v14 <= v6)
        v14 = a2 + 1;
      if (v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(this + 128) + 16))(*(_QWORD *)(this + 128), 8 * v15, 8);
      v16 = (_QWORD *)(this + 8 * v10);
      v17 = this + 8 * v6;
      v18 = 8 * a2 - 8 * v10 + 8;
      v19 = v16;
      do
      {
        if (v19)
          *v19 = 0;
        ++v19;
        v18 -= 8;
      }
      while (v18);
      v22 = this + 8 * v15;
      v24 = *(_QWORD *)(v5 + 104);
      v23 = *(_QWORD *)(v5 + 112);
      if (v23 != v24)
      {
        v25 = v23 - v24 - 8;
        if (v25 < 0x58)
          goto LABEL_37;
        if ((unint64_t)(v23 - (_QWORD)&v9[this]) < 0x20)
          goto LABEL_37;
        v26 = (v25 >> 3) + 1;
        v27 = (_OWORD *)(this + 8 * v10 - 16);
        v28 = (__int128 *)(v23 - 16);
        this = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v28;
          *(v27 - 1) = *(v28 - 1);
          *v27 = v29;
          v27 -= 2;
          v28 -= 2;
          this -= 4;
        }
        while (this);
        v16 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v23 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_37:
          do
          {
            v30 = *(_QWORD *)(v23 - 8);
            v23 -= 8;
            *--v16 = v30;
          }
          while (v23 != v24);
        }
        v23 = *(_QWORD *)(v5 + 104);
      }
      *(_QWORD *)(v5 + 104) = v16;
      *(_QWORD *)(v5 + 112) = v17;
      v31 = *(_QWORD *)(v5 + 120);
      *(_QWORD *)(v5 + 120) = v22;
      if (v23)
        this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 128) + 40))(*(_QWORD *)(v5 + 128), v23, v31 - v23);
    }
    v8 = *(_QWORD *)(v5 + 104);
  }
  v32 = *(_QWORD *)(v8 + 8 * a2);
  if (v32)
    *(_QWORD *)(v32 + 24) = 0;
  if (a3)
    *((_QWORD *)a3 + 3) = v5;
  *(_QWORD *)(v8 + 8 * a2) = a3;
  return this;
}

uint64_t ggl::PipelineSetup::PipelineSetup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v57;
  int v58;
  uint64_t v59;
  geo::read_write_lock *v60;
  const char *v61;
  malloc_zone_t *zone;
  uint64_t v63;
  int v64;
  uint64_t v65;
  geo::read_write_lock *v66;
  const char *v67;
  malloc_zone_t *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  geo::read_write_lock *v72;
  const char *v73;
  malloc_zone_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  geo::read_write_lock *v78;
  const char *v79;
  malloc_zone_t *v80;
  int v81;
  uint64_t v82;
  geo::read_write_lock *v83;
  const char *v84;
  malloc_zone_t *v85;
  int v86;
  uint64_t v87;
  geo::read_write_lock *v88;
  const char *v89;
  malloc_zone_t *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;

  *(_QWORD *)a1 = off_1E42B6730;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  v3 = a1 + 32;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  if ((v4 & 1) == 0)
  {
    v57 = v3;
    v3 = v57;
    if (v58)
    {
      v59 = operator new();
      *(_QWORD *)(v59 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v59 + 24) = "GeoGL";
      *(_OWORD *)(v59 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v59 = &off_1E42B5668;
      *(_QWORD *)(v59 + 8) = "GeoGL";
      *(_OWORD *)(v59 + 72) = 0u;
      *(_OWORD *)(v59 + 88) = 0u;
      *(_OWORD *)(v59 + 104) = 0u;
      *(_OWORD *)(v59 + 120) = 0u;
      *(_OWORD *)(v59 + 136) = 0u;
      *(_OWORD *)(v59 + 152) = 0u;
      *(_OWORD *)(v59 + 168) = 0u;
      *(_OWORD *)(v59 + 184) = 0u;
      *(_OWORD *)(v59 + 200) = 0u;
      *(_OWORD *)(v59 + 216) = 0u;
      *(_OWORD *)(v59 + 232) = 0u;
      *(_QWORD *)(v59 + 248) = 0;
      *(_OWORD *)(v59 + 56) = 0u;
      v60 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v59 + 56), 0);
      if ((_DWORD)v60)
        geo::read_write_lock::logFailure(v60, (uint64_t)"initialization", v61);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v59 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v59 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v59;
      v3 = v57;
    }
  }
  v5 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if ((v5 & 1) == 0)
  {
    v63 = v3;
    v3 = v63;
    if (v64)
    {
      v65 = operator new();
      *(_QWORD *)(v65 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v65 + 24) = "GeoGL";
      *(_OWORD *)(v65 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v65 = &off_1E42B5668;
      *(_QWORD *)(v65 + 8) = "GeoGL";
      *(_OWORD *)(v65 + 72) = 0u;
      *(_OWORD *)(v65 + 88) = 0u;
      *(_OWORD *)(v65 + 104) = 0u;
      *(_OWORD *)(v65 + 120) = 0u;
      *(_OWORD *)(v65 + 136) = 0u;
      *(_OWORD *)(v65 + 152) = 0u;
      *(_OWORD *)(v65 + 168) = 0u;
      *(_OWORD *)(v65 + 184) = 0u;
      *(_OWORD *)(v65 + 200) = 0u;
      *(_OWORD *)(v65 + 216) = 0u;
      *(_OWORD *)(v65 + 232) = 0u;
      *(_QWORD *)(v65 + 248) = 0;
      *(_OWORD *)(v65 + 56) = 0u;
      v66 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v65 + 56), 0);
      if ((_DWORD)v66)
        geo::read_write_lock::logFailure(v66, (uint64_t)"initialization", v67);
      v68 = malloc_create_zone(0, 0);
      *(_QWORD *)(v65 + 48) = v68;
      malloc_set_zone_name(v68, "GeoGL");
      *(_QWORD *)(v65 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v65;
      v3 = v63;
    }
  }
  v6 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if ((v6 & 1) == 0)
  {
    v69 = v3;
    v3 = v69;
    if (v70)
    {
      v71 = operator new();
      *(_QWORD *)(v71 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v71 + 24) = "GeoGL";
      *(_OWORD *)(v71 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v71 = &off_1E42B5668;
      *(_QWORD *)(v71 + 8) = "GeoGL";
      *(_OWORD *)(v71 + 72) = 0u;
      *(_OWORD *)(v71 + 88) = 0u;
      *(_OWORD *)(v71 + 104) = 0u;
      *(_OWORD *)(v71 + 120) = 0u;
      *(_OWORD *)(v71 + 136) = 0u;
      *(_OWORD *)(v71 + 152) = 0u;
      *(_OWORD *)(v71 + 168) = 0u;
      *(_OWORD *)(v71 + 184) = 0u;
      *(_OWORD *)(v71 + 200) = 0u;
      *(_OWORD *)(v71 + 216) = 0u;
      *(_OWORD *)(v71 + 232) = 0u;
      *(_QWORD *)(v71 + 248) = 0;
      *(_OWORD *)(v71 + 56) = 0u;
      v72 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v71 + 56), 0);
      if ((_DWORD)v72)
        geo::read_write_lock::logFailure(v72, (uint64_t)"initialization", v73);
      v74 = malloc_create_zone(0, 0);
      *(_QWORD *)(v71 + 48) = v74;
      malloc_set_zone_name(v74, "GeoGL");
      *(_QWORD *)(v71 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v71;
      v3 = v69;
    }
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if ((v7 & 1) == 0)
  {
    v75 = v3;
    v3 = v75;
    if (v76)
    {
      v77 = operator new();
      *(_QWORD *)(v77 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v77 + 24) = "GeoGL";
      *(_OWORD *)(v77 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v77 = &off_1E42B5668;
      *(_QWORD *)(v77 + 8) = "GeoGL";
      *(_OWORD *)(v77 + 72) = 0u;
      *(_OWORD *)(v77 + 88) = 0u;
      *(_OWORD *)(v77 + 104) = 0u;
      *(_OWORD *)(v77 + 120) = 0u;
      *(_OWORD *)(v77 + 136) = 0u;
      *(_OWORD *)(v77 + 152) = 0u;
      *(_OWORD *)(v77 + 168) = 0u;
      *(_OWORD *)(v77 + 184) = 0u;
      *(_OWORD *)(v77 + 200) = 0u;
      *(_OWORD *)(v77 + 216) = 0u;
      *(_OWORD *)(v77 + 232) = 0u;
      *(_QWORD *)(v77 + 248) = 0;
      *(_OWORD *)(v77 + 56) = 0u;
      v78 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v77 + 56), 0);
      if ((_DWORD)v78)
        geo::read_write_lock::logFailure(v78, (uint64_t)"initialization", v79);
      v80 = malloc_create_zone(0, 0);
      *(_QWORD *)(v77 + 48) = v80;
      malloc_set_zone_name(v80, "GeoGL");
      *(_QWORD *)(v77 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v77;
      v3 = v75;
    }
  }
  v8 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  if ((v8 & 1) == 0)
  {
    v91 = v3;
    v3 = v91;
    if (v81)
    {
      v82 = operator new();
      *(_QWORD *)(v82 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v82 + 24) = "GeoGL";
      *(_OWORD *)(v82 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v82 = &off_1E42B5668;
      *(_QWORD *)(v82 + 8) = "GeoGL";
      *(_OWORD *)(v82 + 72) = 0u;
      *(_OWORD *)(v82 + 88) = 0u;
      *(_OWORD *)(v82 + 104) = 0u;
      *(_OWORD *)(v82 + 120) = 0u;
      *(_OWORD *)(v82 + 136) = 0u;
      *(_OWORD *)(v82 + 152) = 0u;
      *(_OWORD *)(v82 + 168) = 0u;
      *(_OWORD *)(v82 + 184) = 0u;
      *(_OWORD *)(v82 + 200) = 0u;
      *(_OWORD *)(v82 + 216) = 0u;
      *(_OWORD *)(v82 + 232) = 0u;
      *(_QWORD *)(v82 + 248) = 0;
      *(_OWORD *)(v82 + 56) = 0u;
      v83 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v82 + 56), 0);
      if ((_DWORD)v83)
        geo::read_write_lock::logFailure(v83, (uint64_t)"initialization", v84);
      v85 = malloc_create_zone(0, 0);
      *(_QWORD *)(v82 + 48) = v85;
      malloc_set_zone_name(v85, "GeoGL");
      *(_QWORD *)(v82 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v82;
      v3 = v91;
    }
  }
  v9 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  if ((v9 & 1) == 0)
  {
    v92 = v3;
    v3 = v92;
    if (v86)
    {
      v87 = operator new();
      *(_QWORD *)(v87 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v87 + 24) = "GeoGL";
      *(_OWORD *)(v87 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v87 = &off_1E42B5668;
      *(_QWORD *)(v87 + 8) = "GeoGL";
      *(_OWORD *)(v87 + 72) = 0u;
      *(_OWORD *)(v87 + 88) = 0u;
      *(_OWORD *)(v87 + 104) = 0u;
      *(_OWORD *)(v87 + 120) = 0u;
      *(_OWORD *)(v87 + 136) = 0u;
      *(_OWORD *)(v87 + 152) = 0u;
      *(_OWORD *)(v87 + 168) = 0u;
      *(_OWORD *)(v87 + 184) = 0u;
      *(_OWORD *)(v87 + 200) = 0u;
      *(_OWORD *)(v87 + 216) = 0u;
      *(_OWORD *)(v87 + 232) = 0u;
      *(_QWORD *)(v87 + 248) = 0;
      *(_OWORD *)(v87 + 56) = 0u;
      v88 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v87 + 56), 0);
      if ((_DWORD)v88)
        geo::read_write_lock::logFailure(v88, (uint64_t)"initialization", v89);
      v90 = malloc_create_zone(0, 0);
      *(_QWORD *)(v87 + 48) = v90;
      malloc_set_zone_name(v90, "GeoGL");
      *(_QWORD *)(v87 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v87;
      v3 = v92;
    }
  }
  *(_QWORD *)(a1 + 216) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 224) = 0;
  v10 = *(_QWORD **)(a1 + 8);
  v11 = v10[2];
  v93 = 0uLL;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = (*(_QWORD *)(a1 + 40) - v12) >> 4;
  if (v11 <= v13)
  {
    if (v11 < v13)
      *(_QWORD *)(a1 + 40) = v12 + 16 * v11;
  }
  else
  {
    std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append(v3, v11 - v13, &v93);
    v10 = *(_QWORD **)(a1 + 8);
  }
  v14 = v10[4];
  v93 = 0uLL;
  v15 = *(_QWORD *)(a1 + 64);
  v16 = (*(_QWORD *)(a1 + 72) - v15) >> 4;
  if (v14 <= v16)
  {
    if (v14 < v16)
      *(_QWORD *)(a1 + 72) = v15 + 16 * v14;
  }
  else
  {
    std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append(a1 + 64, v14 - v16, &v93);
    v10 = *(_QWORD **)(a1 + 8);
  }
  v17 = v10[5];
  *(_QWORD *)&v93 = 0;
  v18 = *(_QWORD *)(a1 + 96);
  v19 = (*(_QWORD *)(a1 + 104) - v18) >> 3;
  if (v17 <= v19)
  {
    if (v17 < v19)
      *(_QWORD *)(a1 + 104) = v18 + 8 * v17;
  }
  else
  {
    std::vector<ggl::Texture *,geo::StdAllocator<ggl::Texture *,ggl::Allocator>>::__append(a1 + 96, v17 - v19, &v93);
  }
  v20 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4;
  v93 = 0uLL;
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(_QWORD *)(a1 + 136);
  v23 = (v22 - v21) >> 4;
  v24 = v20 - v23;
  if (v20 <= v23)
  {
    if (v20 < v23)
    {
      v25 = v21 + 16 * v20;
      if (v22 == v25)
      {
        *(_QWORD *)(a1 + 136) = v25;
      }
      else
      {
        do
        {
          v26 = *(std::__shared_weak_count **)(v22 - 8);
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v26->__on_zero_shared)(v26, v24);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v22 -= 16;
        }
        while (v22 != v25);
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
        *(_QWORD *)(a1 + 136) = v25;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v29->__on_zero_shared)(v29, v24);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append(a1 + 128, v24, &v93);
  }
  v32 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4;
  v93 = 0uLL;
  v33 = *(_QWORD *)(a1 + 160);
  v34 = *(_QWORD *)(a1 + 168);
  v35 = (v34 - v33) >> 4;
  v36 = v32 - v35;
  if (v32 <= v35)
  {
    if (v32 < v35)
    {
      v37 = v33 + 16 * v32;
      if (v34 == v37)
      {
        *(_QWORD *)(a1 + 168) = v37;
      }
      else
      {
        do
        {
          v38 = *(std::__shared_weak_count **)(v34 - 8);
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v38->__on_zero_shared)(v38, v36);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v34 -= 16;
        }
        while (v34 != v37);
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
        *(_QWORD *)(a1 + 168) = v37;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v41->__on_zero_shared)(v41, v36);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append(a1 + 160, v36, &v93);
  }
  v44 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4;
  v93 = 0uLL;
  v45 = *(_QWORD *)(a1 + 192);
  v46 = *(_QWORD *)(a1 + 200);
  v47 = (v46 - v45) >> 4;
  v48 = v44 - v47;
  if (v44 <= v47)
  {
    if (v44 < v47)
    {
      v49 = v45 + 16 * v44;
      if (v46 == v49)
      {
        *(_QWORD *)(a1 + 200) = v49;
      }
      else
      {
        do
        {
          v50 = *(std::__shared_weak_count **)(v46 - 8);
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v50->__on_zero_shared)(v50, v48);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v46 -= 16;
        }
        while (v46 != v49);
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
        *(_QWORD *)(a1 + 200) = v49;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v53->__on_zero_shared)(v53, v48);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append(a1 + 192, v48, &v93);
  }
  return a1;
}

uint64_t ggl::Allocator::instance(ggl::Allocator *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  uint64_t v5;

  v2 = &unk_1ECE44000;
  if ((v1 & 1) == 0)
  {
    v2 = (_QWORD *)&unk_1ECE44000;
    if (v4)
    {
      v5 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v5, "GeoGL", 0xA3D02C1100000005);
      v2 = (_QWORD *)&unk_1ECE44000;
    }
  }
  return v2[495];
}

void std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v7 - (uint64_t)v6) >> 4)
  {
    if (a2)
    {
      v13 = &v6[2 * a2];
      do
      {
        if (v6)
        {
          v14 = a3[1];
          *v6 = *a3;
          v6[1] = v14;
          if (v14)
          {
            v15 = (unint64_t *)(v14 + 8);
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
        }
        v6 += 2;
      }
      while (v6 != v13);
      v6 = v13;
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v8 = ((uint64_t)v6 - *(_QWORD *)a1) >> 4;
    v9 = v8 + a2;
    if ((v8 + a2) >> 60)
      abort();
    v10 = v7 - *(_QWORD *)a1;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v11, 8);
    else
      v12 = 0;
    v17 = (_QWORD *)(v12 + 16 * v8);
    v18 = &v17[2 * a2];
    v19 = v17;
    do
    {
      if (v19)
      {
        v20 = a3[1];
        *v19 = *a3;
        v19[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
      }
      v19 += 2;
    }
    while (v19 != v18);
    v23 = v12 + 16 * v11;
    v24 = *(_QWORD **)a1;
    v25 = *(_QWORD **)(a1 + 8);
    if (v25 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v18;
      v28 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v23;
    }
    else
    {
      do
      {
        v26 = *((_OWORD *)v25 - 1);
        v25 -= 2;
        *((_OWORD *)v17 - 1) = v26;
        v17 -= 2;
        *v25 = 0;
        v25[1] = 0;
      }
      while (v25 != v24);
      v25 = *(_QWORD **)a1;
      v27 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v18;
      v28 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v23;
      while (v27 != v25)
      {
        v29 = (std::__shared_weak_count *)*(v27 - 1);
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v27 -= 2;
      }
    }
    if (v25)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v25, v28 - (_QWORD)v25);
  }
}

uint64_t std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append(uint64_t result, unint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = result;
  v6 = *(_OWORD **)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (a2 <= (v7 - (uint64_t)v6) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      v13 = &v6[a2];
      do
      {
        if (v6)
          *v6 = *a3;
        ++v6;
        v12 -= 16;
      }
      while (v12);
      v6 = v13;
    }
    *(_QWORD *)(result + 8) = v6;
  }
  else
  {
    v8 = ((uint64_t)v6 - *(_QWORD *)result) >> 4;
    v9 = v8 + a2;
    if ((v8 + a2) >> 60)
      abort();
    v10 = v7 - *(_QWORD *)result;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 16 * v11, 8);
    else
      result = 0;
    v14 = (_OWORD *)(result + 16 * v8);
    v15 = 16 * a2;
    v16 = &v14[a2];
    v17 = v14;
    do
    {
      if (v17)
        *v17 = *a3;
      ++v17;
      v15 -= 16;
    }
    while (v15);
    v19 = *(_QWORD *)v5;
    v18 = *(_QWORD *)(v5 + 8);
    if (v18 != *(_QWORD *)v5)
    {
      do
      {
        *--v14 = *(_OWORD *)(v18 - 16);
        v18 -= 16;
      }
      while (v18 != v19);
      v18 = *(_QWORD *)v5;
    }
    *(_QWORD *)v5 = v14;
    *(_QWORD *)(v5 + 8) = v16;
    v20 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = result + 16 * v11;
    if (v18)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), v18, v20 - v18);
  }
  return result;
}

uint64_t std::vector<ggl::Texture *,geo::StdAllocator<ggl::Texture *,ggl::Allocator>>::__append(uint64_t result, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v5 = result;
  v6 = *(_QWORD **)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  if (a2 <= (v7 - (uint64_t)v6) >> 3)
  {
    if (a2)
    {
      v13 = 8 * a2;
      v14 = &v6[a2];
      do
      {
        if (v6)
          *v6 = *a3;
        ++v6;
        v13 -= 8;
      }
      while (v13);
      v6 = v14;
    }
    *(_QWORD *)(result + 8) = v6;
  }
  else
  {
    v8 = (uint64_t)v6 - *(_QWORD *)result;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v7 - *(_QWORD *)result;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v12, 8);
    else
      result = 0;
    v15 = (_QWORD *)(result + 8 * v9);
    v16 = 8 * a2;
    v17 = &v15[a2];
    v18 = v15;
    do
    {
      if (v18)
        *v18 = *a3;
      ++v18;
      v16 -= 8;
    }
    while (v16);
    v19 = result + 8 * v12;
    v21 = *(_QWORD *)v5;
    v20 = *(_QWORD *)(v5 + 8);
    if (v20 != *(_QWORD *)v5)
    {
      v22 = v20 - *(_QWORD *)v5 - 8;
      if (v22 < 0x58)
        goto LABEL_36;
      if ((unint64_t)(v20 - (v8 + result)) < 0x20)
        goto LABEL_36;
      v23 = (v22 >> 3) + 1;
      v24 = (_OWORD *)(result + 8 * v9 - 16);
      v25 = (__int128 *)(v20 - 16);
      result = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *v24 = v26;
        v24 -= 2;
        v25 -= 2;
        result -= 4;
      }
      while (result);
      v15 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v20 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          v27 = *(_QWORD *)(v20 - 8);
          v20 -= 8;
          *--v15 = v27;
        }
        while (v20 != v21);
      }
      v20 = *(_QWORD *)v5;
    }
    *(_QWORD *)v5 = v15;
    *(_QWORD *)(v5 + 8) = v17;
    v28 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v19;
    if (v20)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), v20, v28 - v20);
  }
  return result;
}

uint64_t md::FrameGraphBuilder::addRenderPass(unsigned __int8 ***a1, int a2, uint64_t *a3, uint64_t a4)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned __int8 **v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unsigned __int8 **v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unsigned __int8 **v36;
  unsigned __int8 *v37;
  unsigned __int8 **v38;
  unsigned __int8 **v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  unsigned __int8 *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v63;
  uint64_t (**v64)(md::FrameGraphRenderPassBuilder *__hidden);
  char v65;
  uint64_t v66;
  int v67;
  void *__p;
  uint64_t v69;
  uint64_t v70;
  _QWORD **v71;
  _QWORD *v72[3];
  _QWORD *v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[56];

  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    v7 = *a1;
  }
  else
  {
    v8 = *a1;
    while (**v8 != a2)
    {
      if (++v8 == v7)
        goto LABEL_9;
    }
    if (v8 != v7)
      return 0;
  }
LABEL_9:
  v65 = a2;
  v66 = v7 - v6;
  v67 = 0;
  __p = 0;
  v69 = 0;
  v72[0] = 0;
  v72[1] = 0;
  v70 = 0;
  v71 = v72;
  v73[0] = 0;
  v73[1] = 0;
  v72[2] = v73;
  v64 = &off_1E42A3CD0;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  memset(v77, 0, 25);
  v77[48] = 0;
  if (!a4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_76;
  }
  (*(void (**)(uint64_t, uint64_t (***)(md::FrameGraphRenderPassBuilder *__hidden)))(*(_QWORD *)a4 + 48))(a4, &v64);
  md::FrameGraphRenderPassBuilder::build((md::FrameGraphRenderPassBuilder *)&v64, &v63);
  v11 = a1[1];
  v10 = (unint64_t)a1[2];
  if ((unint64_t)v11 >= v10)
  {
    v12 = *a1;
    v13 = (char *)v11 - (char *)*a1;
    v14 = v13 >> 3;
    v15 = (v13 >> 3) + 1;
    if (v15 >> 61)
      goto LABEL_76;
    v16 = v10 - (_QWORD)v12;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        goto LABEL_77;
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    v21 = v63;
    v63 = 0;
    *(_QWORD *)v19 = v21;
    v22 = (unsigned __int8 **)(v19 + 8);
    if (v11 == v12)
    {
      *a1 = (unsigned __int8 **)v19;
      a1[1] = v22;
      a1[2] = (unsigned __int8 **)v20;
    }
    else
    {
      v23 = (char *)v11 - (char *)v12 - 8;
      if (v23 <= 0x77
        || (char *)v11 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8 < v19
        && &v18[v13 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v11)
      {
        goto LABEL_80;
      }
      v24 = (v23 >> 3) + 1;
      v25 = &v18[8 * v14 - 16];
      v26 = v11 - 4;
      v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v26;
        v28 = *((_OWORD *)v26 + 1);
        *(_OWORD *)v26 = 0uLL;
        *((_OWORD *)v26 + 1) = 0uLL;
        v26 -= 4;
        *((_OWORD *)v25 - 1) = v29;
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v27 -= 4;
      }
      while (v27);
      v19 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v11 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_80:
        do
        {
          v30 = (uint64_t)*--v11;
          *v11 = 0;
          *((_QWORD *)v19 - 1) = v30;
          v19 -= 8;
        }
        while (v11 != v12);
      }
      v11 = *a1;
      v31 = a1[1];
      *a1 = (unsigned __int8 **)v19;
      a1[1] = v22;
      a1[2] = (unsigned __int8 **)v20;
      while (v31 != v11)
      {
        v33 = (uint64_t)*--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v32 + 112));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v32 + 88));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v32 + 64));
          if (*(char *)(v32 + 47) < 0)
            operator delete(*(void **)(v32 + 24));
          MEMORY[0x1A1AF4E00](v32, 0x1032C4041C7693DLL);
        }
      }
    }
    if (v11)
      operator delete(v11);
    v34 = v63;
    a1[1] = v22;
    if (v34)
    {
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v34 + 14));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v34 + 11));
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)v34 + 8));
      if ((char)v34[47] < 0)
        operator delete(*((void **)v34 + 3));
      MEMORY[0x1A1AF4E00](v34, 0x1032C4041C7693DLL);
    }
  }
  else
  {
    *v11 = v63;
    a1[1] = v11 + 1;
  }
  v36 = a1[17];
  v35 = (unint64_t)a1[18];
  if ((unint64_t)v36 >= v35)
  {
    v39 = a1[16];
    v40 = (char *)((char *)v36 - (char *)v39);
    v41 = v36 - v39;
    if (!((unint64_t)(v41 + 1) >> 61))
    {
      v42 = v35 - (_QWORD)v39;
      v43 = v42 >> 2;
      if (v42 >> 2 <= (unint64_t)(v41 + 1))
        v43 = v41 + 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      if (!v44)
      {
        v45 = 0;
        goto LABEL_55;
      }
      if (!(v44 >> 61))
      {
        v45 = (char *)operator new(8 * v44);
LABEL_55:
        v46 = &v45[8 * v41];
        v47 = &v45[8 * v44];
        v48 = (unsigned __int8 *)*a3;
        *a3 = 0;
        *(_QWORD *)v46 = v48;
        v38 = (unsigned __int8 **)(v46 + 8);
        v49 = (char *)a1[16];
        v50 = (char *)a1[17];
        if (v50 == v49)
        {
          a1[16] = (unsigned __int8 **)v46;
          a1[17] = v38;
          a1[18] = (unsigned __int8 **)v47;
        }
        else
        {
          v51 = v50 - v49 - 8;
          if (v51 <= 0x77
            || &v50[-(v51 & 0xFFFFFFFFFFFFFFF8) - 8] < v46
            && &v40[(_QWORD)v45 - (v51 & 0xFFFFFFFFFFFFFFF8) - 8] < v50)
          {
            goto LABEL_81;
          }
          v52 = (v51 >> 3) + 1;
          v53 = &v45[8 * v41 - 16];
          v54 = v50 - 32;
          v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v57 = *(_OWORD *)v54;
            v56 = *((_OWORD *)v54 + 1);
            *(_OWORD *)v54 = 0uLL;
            *((_OWORD *)v54 + 1) = 0uLL;
            v54 -= 32;
            *((_OWORD *)v53 - 1) = v57;
            *(_OWORD *)v53 = v56;
            v53 -= 32;
            v55 -= 4;
          }
          while (v55);
          v46 -= 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          v50 -= 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_81:
            do
            {
              v58 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              *(_QWORD *)v50 = 0;
              *((_QWORD *)v46 - 1) = v58;
              v46 -= 8;
            }
            while (v50 != v49);
          }
          v50 = (char *)a1[16];
          v59 = (char *)a1[17];
          a1[16] = (unsigned __int8 **)v46;
          a1[17] = v38;
          a1[18] = (unsigned __int8 **)v47;
          while (v59 != v50)
          {
            v61 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            v60 = v61;
            *(_QWORD *)v59 = 0;
            if (v61)
              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
          }
        }
        if (v50)
          operator delete(v50);
        goto LABEL_70;
      }
LABEL_77:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_76:
    abort();
  }
  v37 = (unsigned __int8 *)*a3;
  *a3 = 0;
  *v36 = v37;
  v38 = v36 + 1;
LABEL_70:
  a1[17] = v38;
  v9 = (uint64_t)*(a1[1] - 1);
  if (v77[24])
    v77[24] = 0;
  v64 = (uint64_t (**)(md::FrameGraphRenderPassBuilder *__hidden))&unk_1E429B200;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v73[0]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v72[0]);
  if (SHIBYTE(v70) < 0)
    operator delete(__p);
  return v9;
}

void md::FrameGraphRenderPassBuilder::build(md::FrameGraphRenderPassBuilder *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  _OWORD *v109;
  char *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t *v128;
  unsigned __int8 **v129;
  uint64_t **v130;
  uint64_t *v131;
  uint64_t **v132;
  BOOL v133;
  uint64_t *v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  BOOL v138;
  uint64_t **v139;
  uint64_t **v140;
  unsigned __int8 *v141;
  unsigned int v142;
  uint64_t *v143;
  uint64_t *v144;
  std::string *v145;
  _QWORD *v146;
  uint64_t v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t *v150;
  unsigned __int8 *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t **v164;
  unsigned int v165;
  uint64_t **v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t **v175;
  unsigned int v176;
  uint64_t **v177;
  unsigned int v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t *v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  unsigned __int8 v184;
  uint64_t v185;
  int v186;
  unsigned __int8 v187;
  uint64_t **v189;
  uint64_t *v190;
  uint64_t v191;

  v3 = (unsigned __int8 *)operator new();
  v184 = *((_BYTE *)this + 8);
  v185 = *((_QWORD *)this + 2);
  v186 = *((_DWORD *)this + 6);
  v187 = *((_BYTE *)this + 200);
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = (char *)operator new(8uLL);
    *(_QWORD *)v5 = v4;
    v6 = v5 + 8;
    v7 = *((_QWORD *)this + 14);
    if (v7)
      goto LABEL_3;
LABEL_13:
    v13 = v5;
    v14 = v6;
    v15 = v6;
    goto LABEL_24;
  }
  v5 = 0;
  v6 = 0;
  v7 = *((_QWORD *)this + 14);
  if (!v7)
    goto LABEL_13;
LABEL_3:
  v8 = v6 - v5;
  v9 = (v6 - v5) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    goto LABEL_288;
  if (v8 >> 2 > v10)
    v10 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  if (v11)
  {
    if (v11 >> 61)
      goto LABEL_289;
    v12 = (char *)operator new(8 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[8 * v9];
  v15 = &v12[8 * v11];
  *(_QWORD *)v13 = v7;
  v14 = v13 + 8;
  if (v6 == v5)
    goto LABEL_22;
  v16 = v6 - v5 - 8;
  if (v16 < 0x18)
  {
    v17 = v6;
    do
    {
LABEL_21:
      v23 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v13 - 1) = v23;
      v13 -= 8;
    }
    while (v17 != v5);
    goto LABEL_22;
  }
  v18 = (v16 >> 3) + 1;
  v17 = &v6[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
  v19 = &v12[8 * v9 - 16];
  v20 = (__int128 *)(v6 - 16);
  v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v22 = *v20;
    *((_OWORD *)v19 - 1) = *(v20 - 1);
    *(_OWORD *)v19 = v22;
    v19 -= 32;
    v20 -= 2;
    v21 -= 4;
  }
  while (v21);
  v13 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_21;
LABEL_22:
  if (v5)
    operator delete(v5);
LABEL_24:
  v24 = *((_QWORD *)this + 15);
  if (!v24)
  {
LABEL_27:
    v25 = v13;
    v26 = v14;
    goto LABEL_49;
  }
  if (v14 < v15)
  {
    *(_QWORD *)v14 = v24;
    v14 += 8;
    goto LABEL_27;
  }
  v27 = (v14 - v13) >> 3;
  v28 = v27 + 1;
  if ((unint64_t)(v27 + 1) >> 61)
    goto LABEL_288;
  if ((v15 - v13) >> 2 > v28)
    v28 = (v15 - v13) >> 2;
  if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFF8)
    v29 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v29 = v28;
  if (v29)
  {
    if (v29 >> 61)
      goto LABEL_289;
    v30 = operator new(8 * v29);
  }
  else
  {
    v30 = 0;
  }
  v25 = &v30[8 * v27];
  v15 = &v30[8 * v29];
  *(_QWORD *)v25 = v24;
  v26 = v25 + 8;
  if (v14 != v13)
  {
    v31 = v14 - v13 - 8;
    if (v31 < 0x58)
    {
      v32 = v14;
      goto LABEL_46;
    }
    if ((unint64_t)(v13 - v30) < 0x20)
    {
      v32 = v14;
      do
      {
LABEL_46:
        v38 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v25 - 1) = v38;
        v25 -= 8;
      }
      while (v32 != v13);
      goto LABEL_47;
    }
    v33 = (v31 >> 3) + 1;
    v32 = &v14[-8 * (v33 & 0x3FFFFFFFFFFFFFFCLL)];
    v34 = &v30[8 * v27 - 16];
    v35 = (__int128 *)(v14 - 16);
    v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *(v34 - 1) = *(v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    v25 -= 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_46;
  }
LABEL_47:
  if (v13)
    operator delete(v13);
LABEL_49:
  v39 = *((_QWORD *)this + 16);
  if (!v39)
  {
LABEL_52:
    v40 = v25;
    v41 = v26;
    goto LABEL_74;
  }
  if (v26 < v15)
  {
    *(_QWORD *)v26 = v39;
    v26 += 8;
    goto LABEL_52;
  }
  v42 = (v26 - v25) >> 3;
  v43 = v42 + 1;
  if ((unint64_t)(v42 + 1) >> 61)
    goto LABEL_288;
  if ((v15 - v25) >> 2 > v43)
    v43 = (v15 - v25) >> 2;
  if ((unint64_t)(v15 - v25) >= 0x7FFFFFFFFFFFFFF8)
    v44 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (v44)
  {
    if (v44 >> 61)
      goto LABEL_289;
    v45 = operator new(8 * v44);
  }
  else
  {
    v45 = 0;
  }
  v40 = &v45[8 * v42];
  v15 = &v45[8 * v44];
  *(_QWORD *)v40 = v39;
  v41 = v40 + 8;
  if (v26 != v25)
  {
    v46 = v26 - v25 - 8;
    if (v46 < 0x58)
    {
      v47 = v26;
      goto LABEL_71;
    }
    if ((unint64_t)(v25 - v45) < 0x20)
    {
      v47 = v26;
      do
      {
LABEL_71:
        v53 = *((_QWORD *)v47 - 1);
        v47 -= 8;
        *((_QWORD *)v40 - 1) = v53;
        v40 -= 8;
      }
      while (v47 != v25);
      goto LABEL_72;
    }
    v48 = (v46 >> 3) + 1;
    v47 = &v26[-8 * (v48 & 0x3FFFFFFFFFFFFFFCLL)];
    v49 = &v45[8 * v42 - 16];
    v50 = (__int128 *)(v26 - 16);
    v51 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *v49 = v52;
      v49 -= 2;
      v50 -= 2;
      v51 -= 4;
    }
    while (v51);
    v40 -= 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_71;
  }
LABEL_72:
  if (v25)
    operator delete(v25);
LABEL_74:
  v54 = *((_QWORD *)this + 21);
  if (!v54)
    goto LABEL_77;
  if (v41 < v15)
  {
    *(_QWORD *)v41 = v54;
    v41 += 8;
LABEL_77:
    v55 = v41;
    v56 = *((_QWORD *)this + 17);
    if (!v56)
      goto LABEL_103;
LABEL_101:
    if (v55 < v15)
    {
      *(_QWORD *)v55 = v56;
      v55 += 8;
      goto LABEL_103;
    }
    v72 = (v55 - v40) >> 3;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 61)
      goto LABEL_288;
    if ((v15 - v40) >> 2 > v73)
      v73 = (v15 - v40) >> 2;
    if ((unint64_t)(v15 - v40) >= 0x7FFFFFFFFFFFFFF8)
      v74 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v74 = v73;
    if (v74)
    {
      if (v74 >> 61)
        goto LABEL_289;
      v75 = operator new(8 * v74);
    }
    else
    {
      v75 = 0;
    }
    v76 = &v75[8 * v72];
    v15 = &v75[8 * v74];
    *(_QWORD *)v76 = v56;
    v70 = v76 + 8;
    if (v55 != v40)
    {
      v77 = v55 - v40 - 8;
      if (v77 < 0x58)
      {
        v78 = v55;
        goto LABEL_123;
      }
      if ((unint64_t)(v40 - v75) < 0x20)
      {
        v78 = v55;
        do
        {
LABEL_123:
          v84 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *((_QWORD *)v76 - 1) = v84;
          v76 -= 8;
        }
        while (v78 != v40);
        goto LABEL_124;
      }
      v79 = (v77 >> 3) + 1;
      v78 = &v55[-8 * (v79 & 0x3FFFFFFFFFFFFFFCLL)];
      v80 = &v75[8 * v72 - 16];
      v81 = v55 - 16;
      v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v83 = *(_OWORD *)v81;
        *(v80 - 1) = *((_OWORD *)v81 - 1);
        *v80 = v83;
        v80 -= 2;
        v81 -= 32;
        v82 -= 4;
      }
      while (v82);
      v76 -= 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
      if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_123;
    }
LABEL_124:
    if (v40)
      operator delete(v40);
    v40 = v76;
    v71 = *((_QWORD *)this + 18);
    if (!v71)
      goto LABEL_129;
    goto LABEL_127;
  }
  v57 = (v41 - v40) >> 3;
  v58 = v57 + 1;
  if ((unint64_t)(v57 + 1) >> 61)
    goto LABEL_288;
  if ((v15 - v40) >> 2 > v58)
    v58 = (v15 - v40) >> 2;
  if ((unint64_t)(v15 - v40) >= 0x7FFFFFFFFFFFFFF8)
    v59 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v59 = v58;
  if (v59)
  {
    if (v59 >> 61)
      goto LABEL_289;
    v60 = operator new(8 * v59);
  }
  else
  {
    v60 = 0;
  }
  v61 = &v60[8 * v57];
  v15 = &v60[8 * v59];
  *(_QWORD *)v61 = v54;
  v55 = v61 + 8;
  if (v41 != v40)
  {
    v62 = v41 - v40 - 8;
    if (v62 < 0x58)
    {
      v63 = v41;
      goto LABEL_97;
    }
    if ((unint64_t)(v40 - v60) < 0x20)
    {
      v63 = v41;
      do
      {
LABEL_97:
        v69 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v69;
        v61 -= 8;
      }
      while (v63 != v40);
      goto LABEL_98;
    }
    v64 = (v62 >> 3) + 1;
    v63 = &v41[-8 * (v64 & 0x3FFFFFFFFFFFFFFCLL)];
    v65 = &v60[8 * v57 - 16];
    v66 = v41 - 16;
    v67 = v64 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v68 = *(_OWORD *)v66;
      *(v65 - 1) = *((_OWORD *)v66 - 1);
      *v65 = v68;
      v65 -= 2;
      v66 -= 32;
      v67 -= 4;
    }
    while (v67);
    v61 -= 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
    if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_97;
  }
LABEL_98:
  if (v40)
    operator delete(v40);
  v40 = v61;
  v56 = *((_QWORD *)this + 17);
  if (v56)
    goto LABEL_101;
LABEL_103:
  v70 = v55;
  v71 = *((_QWORD *)this + 18);
  if (!v71)
    goto LABEL_129;
LABEL_127:
  if (v70 < v15)
  {
    *(_QWORD *)v70 = v71;
    v70 += 8;
LABEL_129:
    v85 = v40;
    v86 = v70;
    goto LABEL_151;
  }
  v87 = (v70 - v40) >> 3;
  v88 = v87 + 1;
  if ((unint64_t)(v87 + 1) >> 61)
    goto LABEL_288;
  if ((v15 - v40) >> 2 > v88)
    v88 = (v15 - v40) >> 2;
  if ((unint64_t)(v15 - v40) >= 0x7FFFFFFFFFFFFFF8)
    v89 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v89 = v88;
  if (v89)
  {
    if (v89 >> 61)
      goto LABEL_289;
    v90 = operator new(8 * v89);
  }
  else
  {
    v90 = 0;
  }
  v85 = &v90[8 * v87];
  v15 = &v90[8 * v89];
  *(_QWORD *)v85 = v71;
  v86 = v85 + 8;
  if (v70 != v40)
  {
    v91 = v70 - v40 - 8;
    if (v91 < 0x58)
    {
      v92 = v70;
      goto LABEL_148;
    }
    if ((unint64_t)(v40 - v90) < 0x20)
    {
      v92 = v70;
      do
      {
LABEL_148:
        v98 = *((_QWORD *)v92 - 1);
        v92 -= 8;
        *((_QWORD *)v85 - 1) = v98;
        v85 -= 8;
      }
      while (v92 != v40);
      goto LABEL_149;
    }
    v93 = (v91 >> 3) + 1;
    v92 = &v70[-8 * (v93 & 0x3FFFFFFFFFFFFFFCLL)];
    v94 = &v90[8 * v87 - 16];
    v95 = v70 - 16;
    v96 = v93 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v97 = *(_OWORD *)v95;
      *(v94 - 1) = *((_OWORD *)v95 - 1);
      *v94 = v97;
      v94 -= 2;
      v95 -= 32;
      v96 -= 4;
    }
    while (v96);
    v85 -= 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
    if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_148;
  }
LABEL_149:
  if (v40)
    operator delete(v40);
LABEL_151:
  v99 = *((_QWORD *)this + 19);
  if (!v99)
  {
LABEL_154:
    v100 = v85;
    v101 = v86;
    goto LABEL_176;
  }
  if (v86 < v15)
  {
    *(_QWORD *)v86 = v99;
    v86 += 8;
    goto LABEL_154;
  }
  v102 = (v86 - v85) >> 3;
  v103 = v102 + 1;
  if ((unint64_t)(v102 + 1) >> 61)
    goto LABEL_288;
  if ((v15 - v85) >> 2 > v103)
    v103 = (v15 - v85) >> 2;
  if ((unint64_t)(v15 - v85) >= 0x7FFFFFFFFFFFFFF8)
    v104 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v104 = v103;
  if (v104)
  {
    if (v104 >> 61)
      goto LABEL_289;
    v105 = operator new(8 * v104);
  }
  else
  {
    v105 = 0;
  }
  v100 = &v105[8 * v102];
  v15 = &v105[8 * v104];
  *(_QWORD *)v100 = v99;
  v101 = v100 + 8;
  if (v86 != v85)
  {
    v106 = v86 - v85 - 8;
    if (v106 < 0x58)
    {
      v107 = v86;
      goto LABEL_173;
    }
    if ((unint64_t)(v85 - v105) < 0x20)
    {
      v107 = v86;
      do
      {
LABEL_173:
        v113 = *((_QWORD *)v107 - 1);
        v107 -= 8;
        *((_QWORD *)v100 - 1) = v113;
        v100 -= 8;
      }
      while (v107 != v85);
      goto LABEL_174;
    }
    v108 = (v106 >> 3) + 1;
    v107 = &v86[-8 * (v108 & 0x3FFFFFFFFFFFFFFCLL)];
    v109 = &v105[8 * v102 - 16];
    v110 = v86 - 16;
    v111 = v108 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v112 = *(_OWORD *)v110;
      *(v109 - 1) = *((_OWORD *)v110 - 1);
      *v109 = v112;
      v109 -= 2;
      v110 -= 32;
      v111 -= 4;
    }
    while (v111);
    v100 -= 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
    if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_173;
  }
LABEL_174:
  if (v85)
    operator delete(v85);
LABEL_176:
  v114 = *((_QWORD *)this + 20);
  if (v114)
  {
    if (v101 < v15)
    {
      *(_QWORD *)v101 = v114;
      v101 += 8;
      goto LABEL_179;
    }
    v117 = (v101 - v100) >> 3;
    v118 = v117 + 1;
    if (!((unint64_t)(v117 + 1) >> 61))
    {
      if ((v15 - v100) >> 2 > v118)
        v118 = (v15 - v100) >> 2;
      if ((unint64_t)(v15 - v100) >= 0x7FFFFFFFFFFFFFF8)
        v118 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v118)
      {
        v119 = 0;
LABEL_189:
        v115 = &v119[8 * v117];
        *(_QWORD *)v115 = v114;
        v116 = v115 + 8;
        if (v101 == v100)
          goto LABEL_198;
        v120 = v101 - v100 - 8;
        if (v120 >= 0x58)
        {
          if ((unint64_t)(v100 - v119) >= 0x20)
          {
            v122 = (v120 >> 3) + 1;
            v121 = &v101[-8 * (v122 & 0x3FFFFFFFFFFFFFFCLL)];
            v123 = &v119[8 * v117 - 16];
            v124 = v101 - 16;
            v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v126 = *(_OWORD *)v124;
              *(v123 - 1) = *((_OWORD *)v124 - 1);
              *v123 = v126;
              v123 -= 2;
              v124 -= 32;
              v125 -= 4;
            }
            while (v125);
            v115 -= 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
            if (v122 == (v122 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_198:
              if (v100)
                operator delete(v100);
              goto LABEL_200;
            }
          }
          else
          {
            v121 = v101;
          }
        }
        else
        {
          v121 = v101;
        }
        do
        {
          v127 = *((_QWORD *)v121 - 1);
          v121 -= 8;
          *((_QWORD *)v115 - 1) = v127;
          v115 -= 8;
        }
        while (v121 != v100);
        goto LABEL_198;
      }
      if (!(v118 >> 61))
      {
        v119 = operator new(8 * v118);
        goto LABEL_189;
      }
LABEL_289:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_288:
    abort();
  }
LABEL_179:
  v115 = v100;
  v116 = v101;
LABEL_200:
  v190 = 0;
  v191 = 0;
  v189 = &v190;
  if (v115 == v116)
    goto LABEL_229;
  v128 = 0;
  v129 = (unsigned __int8 **)v115;
  while (1)
  {
    v130 = &v190;
    if (v189 != &v190)
    {
      v131 = v128;
      v132 = &v190;
      if (v128)
      {
        do
        {
          v130 = (uint64_t **)v131;
          v131 = (uint64_t *)v131[1];
        }
        while (v131);
      }
      else
      {
        do
        {
          v130 = (uint64_t **)v132[2];
          v133 = *v130 == (uint64_t *)v132;
          v132 = v130;
        }
        while (v133);
      }
      v134 = v130[4];
      v135 = (uint64_t)*v129;
      v136 = *(unsigned __int8 *)v134;
      v137 = **v129;
      v138 = v136 >= v137;
      if (v136 == v137)
        v138 = v134[3] + (unint64_t)*((unsigned int *)v134 + 5) >= *(_QWORD *)(v135 + 24)
                                                                        + (unint64_t)*(unsigned int *)(v135 + 20);
      if (v138)
      {
        v139 = &v190;
        v140 = &v190;
        if (!v128)
          goto LABEL_223;
        while (1)
        {
          while (1)
          {
            v139 = (uint64_t **)v128;
            v141 = (unsigned __int8 *)v128[4];
            v142 = *v141;
            if (v137 == v142)
              break;
            if (v137 >= v142)
            {
              if (v142 >= v137)
                goto LABEL_227;
              goto LABEL_222;
            }
LABEL_215:
            v128 = *v139;
            v140 = v139;
            if (!*v139)
              goto LABEL_223;
          }
          if (*(_QWORD *)(v135 + 24) + (unint64_t)*(unsigned int *)(v135 + 20) < *((_QWORD *)v141 + 3)
                                                                                       + (unint64_t)*((unsigned int *)v141 + 5))
            goto LABEL_215;
          if (*((_QWORD *)v141 + 3) + (unint64_t)*((unsigned int *)v141 + 5) >= *(_QWORD *)(v135 + 24)
                                                                                      + (unint64_t)*(unsigned int *)(v135 + 20))
            goto LABEL_227;
LABEL_222:
          v140 = v139 + 1;
          v128 = v139[1];
          if (!v128)
            goto LABEL_223;
        }
      }
    }
    v139 = &v190;
    v140 = &v190;
    if (v128)
    {
      v140 = v130 + 1;
      if (v130[1])
        goto LABEL_227;
      v139 = v130;
    }
LABEL_223:
    v143 = (uint64_t *)operator new(0x28uLL);
    v143[4] = (uint64_t)*v129;
    *v143 = 0;
    v143[1] = 0;
    v143[2] = (uint64_t)v139;
    *v140 = v143;
    if (*v189)
    {
      v189 = (uint64_t **)*v189;
      v144 = *v140;
    }
    else
    {
      v144 = v143;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v190, v144);
    ++v191;
LABEL_227:
    if (++v129 == (unsigned __int8 **)v116)
      break;
    v128 = v190;
  }
LABEL_229:
  *v3 = v184;
  *((_QWORD *)v3 + 1) = v185;
  *((_QWORD *)v3 + 2) = -1;
  v145 = (std::string *)(v3 + 24);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v145, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v145->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    *((_QWORD *)v3 + 5) = *((_QWORD *)this + 6);
  }
  v146 = (_QWORD *)((char *)this + 88);
  v147 = *((_QWORD *)this + 11);
  *((_QWORD *)v3 + 8) = v147;
  v148 = v3 + 64;
  v3[48] = 0;
  *((_QWORD *)v3 + 7) = *((_QWORD *)this + 10);
  v149 = *((_QWORD *)this + 12);
  *((_QWORD *)v3 + 9) = v149;
  if (v149)
  {
    *(_QWORD *)(v147 + 16) = v148;
    *((_QWORD *)this + 10) = v146;
    *v146 = 0;
    *((_QWORD *)this + 12) = 0;
  }
  else
  {
    *((_QWORD *)v3 + 7) = v148;
  }
  v150 = v190;
  *((_QWORD *)v3 + 11) = v190;
  v151 = v3 + 88;
  *((_QWORD *)v3 + 10) = v189;
  v152 = v191;
  *((_QWORD *)v3 + 12) = v191;
  if (v152)
  {
    v150[2] = (uint64_t)v151;
    v190 = 0;
    v191 = 0;
  }
  else
  {
    *((_QWORD *)v3 + 10) = v151;
  }
  v153 = (_QWORD *)((char *)this + 64);
  v154 = *((_QWORD *)this + 8);
  v155 = *((_QWORD *)this + 7);
  *((_QWORD *)v3 + 14) = v154;
  v156 = v3 + 112;
  *((_QWORD *)v3 + 13) = v155;
  v157 = *((_QWORD *)this + 9);
  *((_QWORD *)v3 + 15) = v157;
  if (v157)
  {
    *(_QWORD *)(v154 + 16) = v156;
    *((_QWORD *)this + 7) = v153;
    *v153 = 0;
    *((_QWORD *)this + 9) = 0;
  }
  else
  {
    *((_QWORD *)v3 + 13) = v156;
  }
  *((_DWORD *)v3 + 32) = 0;
  v158 = (unsigned __int8 *)*((_QWORD *)v3 + 7);
  if (v158 != v148)
  {
    do
    {
      v162 = *((_QWORD *)v158 + 4);
      v164 = (uint64_t **)(v162 + 48);
      v163 = *(uint64_t **)(v162 + 48);
      if (v163)
      {
        v165 = *v3;
        while (1)
        {
          while (1)
          {
            v166 = (uint64_t **)v163;
            v167 = *(unsigned __int8 *)v163[4];
            if (v165 >= v167)
              break;
            v163 = *v166;
            v164 = v166;
            if (!*v166)
              goto LABEL_259;
          }
          if (v167 >= v165)
            break;
          v164 = v166 + 1;
          v163 = v166[1];
          if (!v163)
            goto LABEL_259;
        }
      }
      else
      {
        v166 = (uint64_t **)(v162 + 48);
LABEL_259:
        v168 = (uint64_t *)operator new(0x28uLL);
        v168[4] = (uint64_t)v3;
        *v168 = 0;
        v168[1] = 0;
        v168[2] = (uint64_t)v166;
        *v164 = v168;
        v169 = **(_QWORD **)(v162 + 40);
        if (v169)
        {
          *(_QWORD *)(v162 + 40) = v169;
          v170 = *v164;
        }
        else
        {
          v170 = v168;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v162 + 48), v170);
        ++*(_QWORD *)(v162 + 56);
      }
      v171 = (unsigned __int8 *)*((_QWORD *)v158 + 1);
      if (v171)
      {
        do
        {
          v172 = v171;
          v171 = *(unsigned __int8 **)v171;
        }
        while (v171);
      }
      else
      {
        do
        {
          v172 = (unsigned __int8 *)*((_QWORD *)v158 + 2);
          v133 = *(_QWORD *)v172 == (_QWORD)v158;
          v158 = v172;
        }
        while (!v133);
      }
      v158 = v172;
    }
    while (v172 != v148);
  }
  v159 = (unsigned __int8 *)*((_QWORD *)v3 + 10);
  if (v159 != v151)
  {
    do
    {
      v173 = *((_QWORD *)v159 + 4);
      v175 = (uint64_t **)(v173 + 72);
      v174 = *(uint64_t **)(v173 + 72);
      if (v174)
      {
        v176 = *v3;
        while (1)
        {
          while (1)
          {
            v177 = (uint64_t **)v174;
            v178 = *(unsigned __int8 *)v174[4];
            if (v176 >= v178)
              break;
            v174 = *v177;
            v175 = v177;
            if (!*v177)
              goto LABEL_278;
          }
          if (v178 >= v176)
            break;
          v175 = v177 + 1;
          v174 = v177[1];
          if (!v174)
            goto LABEL_278;
        }
      }
      else
      {
        v177 = (uint64_t **)(v173 + 72);
LABEL_278:
        v179 = (uint64_t *)operator new(0x28uLL);
        v179[4] = (uint64_t)v3;
        *v179 = 0;
        v179[1] = 0;
        v179[2] = (uint64_t)v177;
        *v175 = v179;
        v180 = **(_QWORD **)(v173 + 64);
        if (v180)
        {
          *(_QWORD *)(v173 + 64) = v180;
          v181 = *v175;
        }
        else
        {
          v181 = v179;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v173 + 72), v181);
        ++*(_QWORD *)(v173 + 80);
      }
      v182 = (unsigned __int8 *)*((_QWORD *)v159 + 1);
      if (v182)
      {
        do
        {
          v183 = v182;
          v182 = *(unsigned __int8 **)v182;
        }
        while (v182);
      }
      else
      {
        do
        {
          v183 = (unsigned __int8 *)*((_QWORD *)v159 + 2);
          v133 = *(_QWORD *)v183 == (_QWORD)v159;
          v159 = v183;
        }
        while (!v133);
      }
      v159 = v183;
    }
    while (v183 != v151);
  }
  if (v186)
    *((_DWORD *)v3 + 32) = v186;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v190);
  if (v115)
    operator delete(v115);
  v160 = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)((char *)this + 120);
  v161 = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(v3 + 184) = v161;
  *((_QWORD *)v3 + 25) = *((_QWORD *)this + 21);
  *(_OWORD *)(v3 + 136) = v160;
  v3[208] = 0;
  if (*((_BYTE *)this + 176))
  {
    *(_OWORD *)(v3 + 212) = *(_OWORD *)((char *)this + 180);
    *((_DWORD *)v3 + 57) = *((_DWORD *)this + 49);
    v3[208] = 1;
  }
  v3[232] = v187;
  *a2 = v3;
}

_QWORD *std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

uint64_t md::FrameGraphBuilder::createResource(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD v84[2];

  v6 = a5;
  v84[0] = a3;
  v84[1] = a4;
  v83 = a5;
  v11 = operator new(0x20uLL);
  *v11 = &off_1E42CE468;
  v11[1] = a2;
  v11[2] = v84;
  v11[3] = &v83;
  v12 = HIDWORD(a4);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    v82 = v6;
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v16 = HIDWORD(a4);
      if (v13 <= v12)
        v16 = v12 % v13;
    }
    else
    {
      v16 = (v13 - 1) & HIDWORD(a4);
    }
    v17 = *(void ***)(*(_QWORD *)(a1 + 48) + 8 * v16);
    if (v17)
    {
      v18 = (char *)*v17;
      if (*v17)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = *((_QWORD *)v18 + 1);
            if (v20 == v12)
            {
              if (*((_QWORD *)v18 + 3) == a4 && !memcmp(*((const void **)v18 + 2), a3, a4))
                goto LABEL_38;
            }
            else if ((v20 & (v13 - 1)) != v16)
            {
              goto LABEL_25;
            }
            v18 = *(char **)v18;
            if (!v18)
              goto LABEL_25;
          }
        }
        do
        {
          v19 = *((_QWORD *)v18 + 1);
          if (v19 == v12)
          {
            if (*((_QWORD *)v18 + 3) == a4 && !memcmp(*((const void **)v18 + 2), a3, a4))
            {
LABEL_38:
              v6 = v82;
              goto LABEL_109;
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v16)
              break;
          }
          v18 = *(char **)v18;
        }
        while (v18);
      }
    }
LABEL_25:
    if (v15 > 1)
    {
      v5 = HIDWORD(a4);
      if (v13 <= v12)
        v5 = v12 % v13;
    }
    else
    {
      v5 = (v13 - 1) & HIDWORD(a4);
    }
    v21 = *(void ***)(*(_QWORD *)(a1 + 48) + 8 * v5);
    if (v21)
    {
      v18 = (char *)*v21;
      if (*v21)
      {
        if (v15 < 2)
        {
          while (1)
          {
            v22 = *((_QWORD *)v18 + 1);
            if (v22 == v12)
            {
              if (*((_QWORD *)v18 + 3) == a4 && !memcmp(*((const void **)v18 + 2), a3, a4))
                goto LABEL_38;
            }
            else if ((v22 & (v13 - 1)) != v5)
            {
              goto LABEL_39;
            }
            v18 = *(char **)v18;
            if (!v18)
              goto LABEL_39;
          }
        }
        v6 = v82;
        while (1)
        {
          v44 = *((_QWORD *)v18 + 1);
          if (v44 == v12)
          {
            if (*((_QWORD *)v18 + 3) == a4 && !memcmp(*((const void **)v18 + 2), a3, a4))
              goto LABEL_109;
          }
          else
          {
            if (v44 >= v13)
              v44 %= v13;
            if (v44 != v5)
              goto LABEL_40;
          }
          v18 = *(char **)v18;
          if (!v18)
            goto LABEL_40;
        }
      }
    }
LABEL_39:
    v6 = v82;
  }
LABEL_40:
  v18 = (char *)operator new(0x38uLL);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v12;
  *((_QWORD *)v18 + 2) = a3;
  *((_QWORD *)v18 + 3) = a4;
  *((_QWORD *)v18 + 5) = 0;
  *((_QWORD *)v18 + 6) = 0;
  *((_QWORD *)v18 + 4) = 0;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
  v24 = *(float *)(a1 + 80);
  if (!v13 || (float)(v24 * (float)v13) < v23)
  {
    v25 = 1;
    if (v13 >= 3)
      v25 = (v13 & (v13 - 1)) != 0;
    v26 = v25 | (2 * v13);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v13 = *(_QWORD *)(a1 + 56);
    }
    if (prime <= v13)
    {
      if (prime >= v13)
        goto LABEL_86;
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v13 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime >= v13)
      {
        v13 = *(_QWORD *)(a1 + 56);
LABEL_86:
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v13 <= v12)
            v5 = v12 % v13;
          else
            v5 = v12;
        }
        else
        {
          v5 = ((_DWORD)v13 - 1) & v12;
        }
        goto LABEL_99;
      }
      if (!prime)
      {
        v81 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (v81)
          operator delete(v81);
        v13 = 0;
        *(_QWORD *)(a1 + 56) = 0;
        goto LABEL_86;
      }
    }
    if (prime >> 61)
      goto LABEL_154;
    v29 = operator new(8 * prime);
    v30 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v29;
    if (v30)
      operator delete(v30);
    v31 = 0;
    *(_QWORD *)(a1 + 56) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v31++) = 0;
    while (prime != v31);
    v33 = a1 + 64;
    v32 = *(_QWORD **)(a1 + 64);
    if (!v32)
    {
LABEL_85:
      v13 = prime;
      goto LABEL_86;
    }
    v34 = v32[1];
    v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v36 = v34 & v35;
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v36) = v33;
      for (i = (_QWORD *)*v32; *v32; i = (_QWORD *)*v32)
      {
        v38 = i[1] & v35;
        if (v38 == v36)
        {
          v32 = i;
        }
        else
        {
          v39 = *(_QWORD *)(a1 + 48);
          if (*(_QWORD *)(v39 + 8 * v38))
          {
            *v32 = *i;
            v40 = 8 * v38;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 48) + v40);
            **(_QWORD **)(*(_QWORD *)(a1 + 48) + v40) = i;
          }
          else
          {
            *(_QWORD *)(v39 + 8 * v38) = v32;
            v32 = i;
            v36 = v38;
          }
        }
      }
      goto LABEL_85;
    }
    if (v34 >= prime)
      v34 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v34) = v33;
    v45 = (_QWORD *)*v32;
    if (!*v32)
      goto LABEL_85;
    while (1)
    {
      v47 = v45[1];
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v34)
      {
        v48 = *(_QWORD *)(a1 + 48);
        if (!*(_QWORD *)(v48 + 8 * v47))
        {
          *(_QWORD *)(v48 + 8 * v47) = v32;
          goto LABEL_90;
        }
        *v32 = *v45;
        v46 = 8 * v47;
        *v45 = **(_QWORD **)(*(_QWORD *)(a1 + 48) + v46);
        **(_QWORD **)(*(_QWORD *)(a1 + 48) + v46) = v45;
        v45 = v32;
      }
      v47 = v34;
LABEL_90:
      v32 = v45;
      v45 = (_QWORD *)*v45;
      v34 = v47;
      if (!v45)
        goto LABEL_85;
    }
  }
LABEL_99:
  v49 = *(_QWORD *)(a1 + 48);
  v50 = *(_QWORD **)(v49 + 8 * v5);
  if (v50)
  {
    *(_QWORD *)v18 = *v50;
LABEL_107:
    *v50 = v18;
    goto LABEL_108;
  }
  *(_QWORD *)v18 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  *(_QWORD *)(v49 + 8 * v5) = a1 + 64;
  if (*(_QWORD *)v18)
  {
    v51 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v51 >= v13)
        v51 %= v13;
    }
    else
    {
      v51 &= v13 - 1;
    }
    v50 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v51);
    goto LABEL_107;
  }
LABEL_108:
  ++*(_QWORD *)(a1 + 72);
LABEL_109:
  v52 = *((_QWORD *)v18 + 4);
  v53 = v18 + 32;
  v54 = (*((_QWORD *)v18 + 5) - v52) >> 3;
  if (v54 <= v6)
  {
    if (v6 + 1 <= v54)
    {
      if (v6 + 1 < v54)
        *((_QWORD *)v18 + 5) = v52 + 8 * (v6 + 1);
    }
    else
    {
      std::vector<altitude::TextureMap *>::__append((uint64_t)(v18 + 32), v6 + 1 - v54);
    }
    goto LABEL_116;
  }
  if (!*(_QWORD *)(v52 + 8 * v6))
  {
LABEL_116:
    v56 = (*(uint64_t (**)(_QWORD *))(*v11 + 48))(v11);
    v55 = v56;
    v58 = *(char **)(a1 + 32);
    v57 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v58 < v57)
    {
      *(_QWORD *)v58 = v56;
      v59 = v58 + 8;
LABEL_143:
      *(_QWORD *)(a1 + 32) = v59;
      *(_QWORD *)(*v53 + 8 * v6) = v55;
      goto LABEL_144;
    }
    v60 = v6;
    v61 = *(char **)(a1 + 24);
    v62 = (v58 - v61) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      abort();
    v64 = v57 - (_QWORD)v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (!v65)
    {
      v66 = 0;
      goto LABEL_128;
    }
    if (!(v65 >> 61))
    {
      v66 = (char *)operator new(8 * v65);
LABEL_128:
      v67 = (uint64_t *)&v66[8 * v62];
      v68 = &v66[8 * v65];
      *v67 = v55;
      v59 = v67 + 1;
      if (v58 == v61)
      {
        *(_QWORD *)(a1 + 24) = v67;
        *(_QWORD *)(a1 + 32) = v59;
        *(_QWORD *)(a1 + 40) = v68;
      }
      else
      {
        v69 = v58 - v61 - 8;
        if (v69 <= 0x77
          || &v58[-(v69 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v67
          && &v66[v58 - v61 - (v69 & 0xFFFFFFFFFFFFFFF8) - 8] < v58)
        {
          goto LABEL_158;
        }
        v70 = (v69 >> 3) + 1;
        v71 = &v66[8 * v62 - 16];
        v72 = v58 - 32;
        v73 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v72;
          v74 = *((_OWORD *)v72 + 1);
          *(_OWORD *)v72 = 0uLL;
          *((_OWORD *)v72 + 1) = 0uLL;
          v72 -= 32;
          *((_OWORD *)v71 - 1) = v75;
          *(_OWORD *)v71 = v74;
          v71 -= 32;
          v73 -= 4;
        }
        while (v73);
        v67 -= v70 & 0x3FFFFFFFFFFFFFFCLL;
        v58 -= 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_158:
          do
          {
            v76 = *((_QWORD *)v58 - 1);
            v58 -= 8;
            *(_QWORD *)v58 = 0;
            *--v67 = v76;
          }
          while (v58 != v61);
        }
        v58 = *(char **)(a1 + 24);
        v77 = *(char **)(a1 + 32);
        *(_QWORD *)(a1 + 24) = v67;
        *(_QWORD *)(a1 + 32) = v59;
        *(_QWORD *)(a1 + 40) = v68;
        while (v77 != v58)
        {
          v79 = *((_QWORD *)v77 - 1);
          v77 -= 8;
          v78 = v79;
          *(_QWORD *)v77 = 0;
          if (v79)
          {
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v78 + 72));
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v78 + 48));
            MEMORY[0x1A1AF4E00](v78, 0x1070C4044CBF76DLL);
          }
        }
      }
      v6 = v60;
      if (v58)
        operator delete(v58);
      goto LABEL_143;
    }
LABEL_154:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v55 = 0;
LABEL_144:
  (*(void (**)(_QWORD *))(*v11 + 40))(v11);
  return v55;
}

void std::vector<altitude::TextureMap *>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      v7 = v5;
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_31;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_31;
      v19 = (v18 >> 3) + 1;
      v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v13[8 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v24 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
        v7 = *(char **)a1;
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v6 = *a2;
  v7 = a2[1];
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = *((int *)a2 + 1);
  v10 = *((int *)a2 + 2);
  v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v12 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v3 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
      if (v12 >= v13)
        v3 = v12 % v13;
    }
    else
    {
      v3 = v12 & (v13 - 1);
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v15)
    {
      v16 = *v15;
      if (v16)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v16[1];
            if (v18 == v12)
            {
              if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v16 + 20) == __PAIR64__(v10, v9))
              {
                return;
              }
            }
            else if ((v18 & (v13 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_25;
          }
        }
        do
        {
          v17 = v16[1];
          if (v17 == v12)
          {
            if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
              && *(uint64_t *)((char *)v16 + 20) == __PAIR64__(v10, v9))
            {
              return;
            }
          }
          else
          {
            if (v17 >= v13)
              v17 %= v13;
            if (v17 != v3)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_25:
  v19 = operator new(0x28uLL);
  *v19 = 0;
  v19[1] = v12;
  *((_WORD *)v19 + 8) = *(_WORD *)a3;
  *(_QWORD *)((char *)v19 + 20) = *(_QWORD *)(a3 + 4);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v13 || (float)(v21 * (float)v13) < v20)
  {
    v22 = 1;
    if (v13 >= 3)
      v22 = (v13 & (v13 - 1)) != 0;
    v23 = v22 | (2 * v13);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v13 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v13)
      goto LABEL_37;
    if (prime < v13)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v13 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v13)
LABEL_37:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v3 = v12 % v13;
      else
        v3 = v12;
    }
    else
    {
      v3 = (v13 - 1) & v12;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v19 = *v30;
LABEL_61:
    *v30 = v19;
    goto LABEL_62;
  }
  *v19 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(v29 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    v31 = *(_QWORD *)(*v19 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v31 >= v13)
        v31 %= v13;
    }
    else
    {
      v31 &= v13 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F0C0DC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v6 = *a2;
  v7 = a2[1];
  v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  v9 = *((int *)a2 + 1);
  v10 = *((int *)a2 + 2);
  v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v12 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v3 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
      if (v12 >= v13)
        v3 = v12 % v13;
    }
    else
    {
      v3 = v12 & (v13 - 1);
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v15)
    {
      v16 = *v15;
      if (v16)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v16[1];
            if (v18 == v12)
            {
              if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v16 + 20) == __PAIR64__(v10, v9))
              {
                return;
              }
            }
            else if ((v18 & (v13 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_25;
          }
        }
        do
        {
          v17 = v16[1];
          if (v17 == v12)
          {
            if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
              && *(uint64_t *)((char *)v16 + 20) == __PAIR64__(v10, v9))
            {
              return;
            }
          }
          else
          {
            if (v17 >= v13)
              v17 %= v13;
            if (v17 != v3)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_25:
  v19 = operator new(0x28uLL);
  *v19 = 0;
  v19[1] = v12;
  *((_WORD *)v19 + 8) = *(_WORD *)a3;
  *(_QWORD *)((char *)v19 + 20) = *(_QWORD *)(a3 + 4);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v13 || (float)(v21 * (float)v13) < v20)
  {
    v22 = 1;
    if (v13 >= 3)
      v22 = (v13 & (v13 - 1)) != 0;
    v23 = v22 | (2 * v13);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v13 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v13)
      goto LABEL_37;
    if (prime < v13)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v13 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v13)
LABEL_37:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v3 = v12 % v13;
      else
        v3 = v12;
    }
    else
    {
      v3 = (v13 - 1) & v12;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v19 = *v30;
LABEL_61:
    *v30 = v19;
    goto LABEL_62;
  }
  *v19 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(v29 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    v31 = *(_QWORD *)(*v19 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v31 >= v13)
        v31 %= v13;
    }
    else
    {
      v31 &= v13 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F0C1138(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int16 *geo::linear_map<unsigned short,std::set<gdc::LayerDataWithWorld>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::set<gdc::LayerDataWithWorld>>>,std::vector<std::pair<unsigned short,std::set<gdc::LayerDataWithWorld>>>>::operator[](char **a1, unsigned __int16 a2)
{
  unsigned __int16 *v4;
  unint64_t v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned __int16 *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD v29[3];
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;

  v4 = (unsigned __int16 *)*a1;
  v5 = (unint64_t)a1[1];
  v6 = (unsigned __int16 *)*a1;
  if (*a1 != (char *)v5)
  {
    v6 = (unsigned __int16 *)*a1;
    while (*v6 != a2)
    {
      v6 += 16;
      if (v6 == (unsigned __int16 *)v5)
        goto LABEL_7;
    }
  }
  if (v6 == (unsigned __int16 *)v5)
  {
LABEL_7:
    v29[0] = 0;
    v29[1] = 0;
    v6 = v4;
    if (v4 != (unsigned __int16 *)v5)
    {
      while (*v6 != a2)
      {
        v6 += 16;
        if (v6 == (unsigned __int16 *)v5)
          goto LABEL_13;
      }
    }
    if (v6 != (unsigned __int16 *)v5)
    {
      v7 = 0;
LABEL_36:
      std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
      std::__tree<gdc::LayerDataWithWorld>::destroy(0);
      return v6 + 4;
    }
LABEL_13:
    v8 = (unint64_t)a1[2];
    if (v5 >= v8)
    {
      v10 = (uint64_t)(v5 - (_QWORD)v4) >> 5;
      if ((unint64_t)(v10 + 1) >> 59)
        abort();
      v11 = v8 - (_QWORD)v4;
      v12 = v11 >> 4;
      if (v11 >> 4 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
        v13 = 0x7FFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v33 = a1 + 2;
      if (v13)
      {
        if (v13 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v14 = (char *)operator new(32 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[32 * v10];
      v29[2] = v14;
      v30 = v15;
      v31 = v15;
      v32 = &v14[32 * v13];
      *(_WORD *)v15 = a2;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = 0;
      *((_QWORD *)v15 + 1) = v15 + 16;
      std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v15 + 1, v29, v29);
      v16 = v30;
      v9 = v31 + 32;
      v17 = (unsigned __int16 *)*a1;
      v18 = a1[1];
      if (v18 == *a1)
      {
        *a1 = v30;
        a1[1] = v9;
        a1[2] = v32;
        if (!v18)
          goto LABEL_35;
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = &v16[v19];
          *((_WORD *)v20 - 16) = *(_WORD *)&v18[v19 - 32];
          *((_QWORD *)v20 - 3) = *(_QWORD *)&v18[v19 - 24];
          v21 = &v18[v19 - 16];
          v22 = *(_QWORD *)v21;
          *(_QWORD *)&v16[v19 - 16] = *(_QWORD *)v21;
          v23 = (uint64_t)&v16[v19 - 16];
          v24 = *(_QWORD *)&v18[v19 - 8];
          *((_QWORD *)v20 - 1) = v24;
          if (v24)
          {
            *(_QWORD *)(v22 + 16) = v23;
            *(_QWORD *)&v18[v19 - 24] = v21;
            *(_QWORD *)v21 = 0;
            *(_QWORD *)&v18[v19 - 8] = 0;
          }
          else
          {
            *((_QWORD *)v20 - 3) = v23;
          }
          v19 -= 32;
        }
        while (&v18[v19] != (char *)v17);
        v25 = &v16[v19];
        v18 = *a1;
        v26 = a1[1];
        *a1 = v25;
        a1[1] = v9;
        a1[2] = v32;
        if (v26 != v18)
        {
          do
          {
            v27 = v26 - 32;
            std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v26 - 2));
            v26 = v27;
          }
          while (v27 != v18);
        }
        if (!v18)
          goto LABEL_35;
      }
      operator delete(v18);
    }
    else
    {
      *(_WORD *)v5 = a2;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 8) = v5 + 16;
      std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)(v5 + 8), v29, v29);
      v9 = (char *)(v5 + 32);
      a1[1] = (char *)(v5 + 32);
    }
LABEL_35:
    a1[1] = v9;
    v6 = (unsigned __int16 *)(v9 - 32);
    v7 = (_QWORD *)v29[0];
    goto LABEL_36;
  }
  return v6 + 4;
}

void sub_19F0C13D0(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, ...)
{
  _QWORD **v8;
  va_list va;

  va_start(va, a8);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v8);
  std::__split_buffer<std::pair<unsigned short,std::set<gdc::LayerDataWithWorld>>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a7);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a3);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<gdc::LayerDataWithWorld>::__find_equal<gdc::LayerDataWithWorld>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unint64_t a5, unsigned __int8 a6)
{
  uint64_t *v6;
  int v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  int v20;
  _BOOL4 v21;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  _BOOL4 v27;
  unint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t *v31;
  int v32;
  uint64_t v34;
  int v35;
  int v36;
  _BOOL4 v37;
  unint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;

  v6 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_5;
  v7 = *((unsigned __int8 *)a2 + 48);
  v8 = *((char *)a2 + 48) > (char)a6;
  v9 = a2[4];
  if (v7 == a6)
    v8 = v9 > a5;
  if (v8)
  {
LABEL_5:
    v10 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_25:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      v11 = (uint64_t *)*a2;
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v18 = a2;
      do
      {
        v12 = (uint64_t *)v18[2];
        v19 = *v12 == (_QWORD)v18;
        v18 = v12;
      }
      while (v19);
    }
    v20 = *((char *)v12 + 48);
    if (a6 == v20)
      v21 = v12[4] < a5;
    else
      v21 = v20 < (char)a6;
    if (v21)
      goto LABEL_25;
    v23 = *v6;
    if (*v6)
    {
      do
      {
        while (1)
        {
          v24 = (uint64_t *)v23;
          v25 = *(char *)(v23 + 48);
          v26 = *(unsigned __int8 *)(v23 + 48);
          v27 = v25 > (char)a6;
          v28 = v24[4];
          if (v26 == a6)
            v27 = v28 > a5;
          if (!v27)
            break;
          v23 = *v24;
          v6 = v24;
          if (!*v24)
            goto LABEL_62;
        }
        v29 = v28 < a5;
        if (v26 == a6)
          v30 = v29;
        else
          v30 = (char)v26 < (char)a6;
        if (!v30)
          break;
        v6 = v24 + 1;
        v23 = v24[1];
      }
      while (v23);
      goto LABEL_62;
    }
LABEL_28:
    v24 = a1 + 1;
LABEL_62:
    *a3 = v24;
    return v6;
  }
  v13 = v9 < a5;
  if (v7 == a6)
    v14 = v13;
  else
    v14 = (char)v7 < (char)a6;
  if (!v14)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v15 = a2[1];
  if (v15)
  {
    v16 = (uint64_t *)a2[1];
    do
    {
      v17 = v16;
      v16 = (uint64_t *)*v16;
    }
    while (v16);
  }
  else
  {
    v31 = a2;
    do
    {
      v17 = (uint64_t *)v31[2];
      v19 = *v17 == (_QWORD)v31;
      v31 = v17;
    }
    while (!v19);
  }
  if (v17 != v6)
  {
    v32 = *((char *)v17 + 48);
    if (!(a6 == v32 ? v17[4] > a5 : v32 > (char)a6))
    {
      v34 = *v6;
      if (*v6)
      {
        do
        {
          while (1)
          {
            v24 = (uint64_t *)v34;
            v35 = *(char *)(v34 + 48);
            v36 = *(unsigned __int8 *)(v34 + 48);
            v37 = v35 > (char)a6;
            v38 = v24[4];
            if (v36 == a6)
              v37 = v38 > a5;
            if (!v37)
              break;
            v34 = *v24;
            v6 = v24;
            if (!*v24)
              goto LABEL_62;
          }
          v39 = v38 < a5;
          if (v36 == a6)
            v40 = v39;
          else
            v40 = (char)v36 < (char)a6;
          if (!v40)
            break;
          v6 = v24 + 1;
          v34 = v24[1];
        }
        while (v34);
        goto LABEL_62;
      }
      goto LABEL_28;
    }
  }
  if (v15)
  {
    *a3 = v17;
    return v17;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

void md::SingleGEOResourceLayerDataSource::addFallbackData(md::SingleGEOResourceLayerDataSource *this, const gdc::SelectionContext *a2)
{
  unint64_t v2;
  unint64_t *v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const void *v24;
  size_t v25;
  _DWORD *v26;
  int v27;
  uint8x8_t v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD **v42;
  size_t v43;
  size_t v44;
  size_t v45;
  _QWORD *i;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  size_t v54;
  uint64_t (**v55)();
  uint64_t (**v56)();
  unint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  int v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int64x2_t v73;
  unsigned __int128 v74;
  unsigned __int128 v75;
  int8x16_t v76;
  int8x16_t v77;
  int64x2_t v78;
  __int16 v79;
  const gdc::LayerDataRequestKey *v80;
  uint64_t (***v81)();
  uint64_t v82;
  int v83;
  _QWORD *v84;
  const QuadTile *v85;
  __int16 *v86;
  __int16 *v87;
  __int16 *v88;
  __int16 *v89;
  char v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  void *v98;
  unint64_t v99;
  int64x2_t *v101;
  gdc::FallbackCollector *v102;
  md::SingleGEOResourceLayerDataSource *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  char v108[8];
  void *v109;
  void *v110;
  unsigned __int16 v111;
  unsigned __int8 *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  __int16 v121;
  uint64_t v122;
  char v123[4];
  int v124;
  int v125;
  __int128 v126;
  __int128 v127;
  float v128;
  __int16 *v129;
  char *v130;
  uint64_t v131;
  uint64_t (**v132)();
  unsigned __int8 *(*v133)@<X0>(unsigned __int8@<W0>, __int16@<W1>, unsigned __int8 *@<X2>, unsigned __int8 *@<X8>);
  char v134;
  uint64_t (***v135)();
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v4 = (unint64_t *)*((_QWORD *)a2 + 1);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v126 = 0u;
  v127 = 0u;
  v128 = 1.0;
  v104 = (uint64_t)v4;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v111, v4, *((unsigned __int16 *)this + 16));
  v5 = v111;
  v6 = v112;
  v7 = (unsigned __int8 *)v113;
  v8 = v114;
  v102 = (md::SingleGEOResourceLayerDataSource *)((char *)this + 592);
  v103 = this;
  v101 = (int64x2_t *)((char *)this + 704);
  v107 = (unsigned __int16)v115;
  v105 = v117;
  v106 = v116;
LABEL_3:
  while (v5 != v107 || v6 != v106 || v8 != v105)
  {
    v9 = v6[112];
    v10 = v6[113];
    v11 = (v10
         - 0x61C8864680B583EBLL
         + ((v9 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v9 - 0x61C8864680B583EBLL) >> 2)) ^ (v9 - 0x61C8864680B583EBLL);
    v13 = *((int *)v6 + 29);
    v12 = *((int *)v6 + 30);
    v14 = (v13 - 0x61C8864680B583EBLL + (v11 << 6) + (v11 >> 2)) ^ v11;
    v15 = (v12 - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
    v16 = *((_QWORD *)&v126 + 1);
    if (!*((_QWORD *)&v126 + 1))
    {
      v19 = (uint64_t)(v6 + 8);
      goto LABEL_62;
    }
    v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v126 + 8));
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = (v12 - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
      if (v15 >= *((_QWORD *)&v126 + 1))
        v18 = v15 % *((_QWORD *)&v126 + 1);
    }
    else
    {
      v18 = v15 & (*((_QWORD *)&v126 + 1) - 1);
    }
    v20 = *(uint64_t ***)(v126 + 8 * v18);
    if (!v20 || (v21 = *v20) == 0)
    {
      v19 = (uint64_t)(v6 + 8);
      goto LABEL_36;
    }
    if (v17.u32[0] < 2uLL)
    {
      while (1)
      {
        v23 = v21[1];
        if (v23 == v15)
        {
          if (__PAIR64__(*((unsigned __int8 *)v21 + 17), *((unsigned __int8 *)v21 + 16)) == __PAIR64__(v10, v9)
            && *(uint64_t *)((char *)v21 + 20) == __PAIR64__(v12, v13))
          {
            goto LABEL_29;
          }
        }
        else if ((v23 & (*((_QWORD *)&v126 + 1) - 1)) != v18)
        {
          goto LABEL_33;
        }
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_33;
      }
    }
    while (1)
    {
      v22 = v21[1];
      if (v22 == v15)
        break;
      if (v22 >= *((_QWORD *)&v126 + 1))
        v22 %= *((_QWORD *)&v126 + 1);
      if (v22 != v18)
        goto LABEL_33;
LABEL_17:
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_33;
    }
    if (__PAIR64__(*((unsigned __int8 *)v21 + 17), *((unsigned __int8 *)v21 + 16)) != __PAIR64__(v10, v9)
      || *(uint64_t *)((char *)v21 + 20) != __PAIR64__(v12, v13))
    {
      goto LABEL_17;
    }
LABEL_29:
    if (*((unsigned __int16 *)v21 + 20) == *((unsigned __int16 *)v6 + 4) && v21[14] == *((_QWORD *)v6 + 10))
    {
      v24 = (const void *)v21[6];
      v25 = v21[7] - (_QWORD)v24;
      v26 = (_DWORD *)*((_QWORD *)v6 + 2);
      if (v25 == *((_QWORD *)v6 + 3) - (_QWORD)v26)
      {
        v99 = v6[113];
        v2 = *((int *)v6 + 30);
        v27 = memcmp(v24, *((const void **)v6 + 2), v25);
        LODWORD(v12) = v2;
        LODWORD(v10) = v99;
        if (!v27)
        {
          v61 = *(_QWORD *)(v6 + 116);
          v62 = v26[2];
          v63 = v62;
          v64 = 1 << v62;
          v65 = (v26[1] % v64 + v64) % v64;
          v66 = *v26 % v64 + v64;
          v123[0] = v26[3];
          v123[1] = v62;
          v67 = v66 % (1 << v62);
          v124 = v65;
          v125 = v67;
          if (v62 <= 0x1Eu
            && ((v68 = vcvtmd_s64_f64((double)v67 / (double)v64), v68 >= 0) ? (v69 = v68) : (v69 = -v68), v69 <= 0x7F))
          {
            v71.i64[0] = ((v67 + v64) % v64) | ((unint64_t)((v67 + v64) % v64) << 16);
            v71.i64[1] = ((v65 + v64) % v64) | ((unint64_t)((v65 + v64) % v64) << 16);
            v72.i64[0] = 0xFFFF0000FFFFLL;
            v72.i64[1] = 0xFFFF0000FFFFLL;
            v73 = (int64x2_t)vandq_s8(v71, v72);
            v74 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v73, 8uLL), (int8x16_t)v73) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
            v75 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v74, 4uLL), (int8x16_t)v74) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
            v72.i64[0] = 0x3333333333333333;
            v72.i64[1] = 0x3333333333333333;
            v76 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v75, 2uLL), (int8x16_t)v75), v72);
            v77 = (int8x16_t)vshlq_u64((uint64x2_t)v76, (uint64x2_t)xmmword_19FFB2DB0);
            v76.i64[1] *= 2;
            v78 = (int64x2_t)vandq_s8(vorrq_s8(v77, v76), (int8x16_t)xmmword_19FFB2DC0);
            v70 = vorrq_s8((int8x16_t)v78, (int8x16_t)vdupq_laneq_s64(v78, 1)).u64[0];
          }
          else
          {
            LOBYTE(v68) = 0;
            v63 = 0;
            v70 = 0;
          }
          if (!*(_BYTE *)v102)
            *(_BYTE *)v102 = 1;
          *((_QWORD *)v103 + 75) = v70;
          *((_BYTE *)v103 + 608) = v63;
          *((_BYTE *)v103 + 609) = v68;
          v79 = *((_WORD *)v103 + 16);
          v80 = (const gdc::LayerDataRequestKey *)*((_QWORD *)v103 + 2);
          v132 = &off_1E42C6F00;
          v133 = md::TileAdjustmentHelpers::dataKeyForTile;
          v135 = &v132;
          md::TileAdjustmentHelpers::getFallbackDataForTile(v101, v79, v123, v80, (uint64_t)&v132, (uint64_t)v102);
          v81 = v135;
          if (v135 == &v132)
          {
            v81 = &v132;
            v82 = 4;
LABEL_151:
            (*v81)[v82]();
          }
          else if (v135)
          {
            v82 = 5;
            goto LABEL_151;
          }
          v83 = *((unsigned __int8 *)v103 + 696);
          if (*((_BYTE *)v103 + 697))
            v84 = (_QWORD *)*((_QWORD *)a2 + 7);
          else
            v84 = 0;
          v2 = v99;
          LOBYTE(v121) = v9;
          HIBYTE(v121) = v99;
          v122 = v61;
          gdc::FallbackCollector::collectFallbackData((uint64_t)v102, (void **)&v129, v83 != 0, v84, &v121);
          gdc::FallbackCollector::end(v102, v85);
          goto LABEL_122;
        }
      }
    }
LABEL_33:
    v19 = (uint64_t)(v6 + 8);
    if (!v16)
      goto LABEL_62;
LABEL_36:
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] > 1uLL)
    {
      v2 = v15;
      if (v15 >= v16)
        v2 = v15 % v16;
    }
    else
    {
      v2 = v15 & (v16 - 1);
    }
    v29 = *(uint64_t ***)(v126 + 8 * v2);
    if (v29)
    {
      v30 = *v29;
      if (v30)
      {
        if (v28.u32[0] < 2uLL)
        {
          while (1)
          {
            v32 = v30[1];
            if (v32 == v15)
            {
              if (*((unsigned __int8 *)v30 + 16) == (_DWORD)v9
                && *((unsigned __int8 *)v30 + 17) == (_DWORD)v10
                && *((_DWORD *)v30 + 5) == (_DWORD)v13
                && *((_DWORD *)v30 + 6) == (_DWORD)v12)
              {
                goto LABEL_122;
              }
            }
            else if ((v32 & (v16 - 1)) != v2)
            {
              goto LABEL_62;
            }
            v30 = (uint64_t *)*v30;
            if (!v30)
              goto LABEL_62;
          }
        }
        do
        {
          v31 = v30[1];
          if (v31 == v15)
          {
            if (*((unsigned __int8 *)v30 + 16) == (_DWORD)v9
              && *((unsigned __int8 *)v30 + 17) == (_DWORD)v10
              && *((_DWORD *)v30 + 5) == (_DWORD)v13
              && *((_DWORD *)v30 + 6) == (_DWORD)v12)
            {
              goto LABEL_122;
            }
          }
          else
          {
            if (v31 >= v16)
              v31 %= v16;
            if (v31 != v2)
              break;
          }
          v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
    }
LABEL_62:
    v33 = (char *)operator new(0x80uLL);
    v132 = (uint64_t (**)())v33;
    v133 = (unsigned __int8 *(*)@<X0>(unsigned __int8@<W0>, __int16@<W1>, unsigned __int8 *@<X2>, unsigned __int8 *@<X8>))&v127;
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = v15;
    *((_WORD *)v33 + 8) = *((_WORD *)v6 + 56);
    *(_QWORD *)(v33 + 20) = *(_QWORD *)(v6 + 116);
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v33 + 40), v19);
    v134 = 1;
    v34 = (float)(unint64_t)(*((_QWORD *)&v127 + 1) + 1);
    if (!v16 || (float)(v128 * (float)v16) < v34)
    {
      v35 = (v16 & (v16 - 1)) != 0;
      if (v16 < 3)
        v35 = 1;
      v36 = v35 | (2 * v16);
      v37 = vcvtps_u32_f32(v34 / v128);
      if (v36 <= v37)
        prime = v37;
      else
        prime = v36;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v16 = *((_QWORD *)&v126 + 1);
      if (prime > *((_QWORD *)&v126 + 1))
      {
LABEL_74:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v39 = operator new(8 * prime);
        v40 = (void *)v126;
        *(_QWORD *)&v126 = v39;
        if (v40)
          operator delete(v40);
        v41 = 0;
        *((_QWORD *)&v126 + 1) = prime;
        do
          *(_QWORD *)(v126 + 8 * v41++) = 0;
        while (prime != v41);
        v42 = (_QWORD **)v127;
        if (!(_QWORD)v127)
          goto LABEL_98;
        v43 = *(_QWORD *)(v127 + 8);
        v44 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v45 = v43 & v44;
          *(_QWORD *)(v126 + 8 * v45) = &v127;
          for (i = *v42; *v42; i = *v42)
          {
            v47 = i[1] & v44;
            if (v47 == v45)
            {
              v42 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v126 + 8 * v47))
            {
              *v42 = (_QWORD *)*i;
              v48 = 8 * v47;
              *i = **(_QWORD **)(v126 + v48);
              **(_QWORD **)(v126 + v48) = i;
            }
            else
            {
              *(_QWORD *)(v126 + 8 * v47) = v42;
              v42 = (_QWORD **)i;
              v45 = v47;
            }
          }
          goto LABEL_98;
        }
        if (v43 >= prime)
          v43 %= prime;
        *(_QWORD *)(v126 + 8 * v43) = &v127;
        v52 = *v42;
        if (!*v42)
        {
LABEL_98:
          v16 = prime;
          goto LABEL_99;
        }
        while (2)
        {
          v54 = v52[1];
          if (v54 >= prime)
            v54 %= prime;
          if (v54 != v43)
          {
            if (!*(_QWORD *)(v126 + 8 * v54))
            {
              *(_QWORD *)(v126 + 8 * v54) = v42;
LABEL_103:
              v42 = (_QWORD **)v52;
              v52 = (_QWORD *)*v52;
              v43 = v54;
              if (!v52)
                goto LABEL_98;
              continue;
            }
            *v42 = (_QWORD *)*v52;
            v53 = 8 * v54;
            *v52 = **(_QWORD **)(v126 + v53);
            **(_QWORD **)(v126 + v53) = v52;
            v52 = v42;
          }
          break;
        }
        v54 = v43;
        goto LABEL_103;
      }
      if (prime < *((_QWORD *)&v126 + 1))
      {
        v49 = vcvtps_u32_f32((float)*((unint64_t *)&v127 + 1) / v128);
        if (*((_QWORD *)&v126 + 1) < 3uLL
          || (v50 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v126 + 8)), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
        {
          v49 = std::__next_prime(v49);
        }
        else
        {
          v51 = 1 << -(char)__clz(v49 - 1);
          if (v49 >= 2)
            v49 = v51;
        }
        if (prime <= v49)
          prime = v49;
        if (prime >= v16)
        {
          v16 = *((_QWORD *)&v126 + 1);
        }
        else
        {
          if (prime)
            goto LABEL_74;
          v60 = (void *)v126;
          *(_QWORD *)&v126 = 0;
          if (v60)
            operator delete(v60);
          v16 = 0;
          *((_QWORD *)&v126 + 1) = 0;
        }
      }
LABEL_99:
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v15 >= v16)
          v2 = v15 % v16;
        else
          v2 = v15;
      }
      else
      {
        v2 = (v16 - 1) & v15;
      }
    }
    v55 = *(uint64_t (***)())(v126 + 8 * v2);
    v56 = v132;
    if (v55)
    {
      *v132 = *v55;
      goto LABEL_120;
    }
    *v132 = (uint64_t (*)())v127;
    *(_QWORD *)&v127 = v56;
    *(_QWORD *)(v126 + 8 * v2) = &v127;
    if (*v56)
    {
      v57 = *((_QWORD *)*v56 + 1);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v57 >= v16)
          v57 %= v16;
      }
      else
      {
        v57 &= v16 - 1;
      }
      v55 = (uint64_t (**)())(v126 + 8 * v57);
LABEL_120:
      *v55 = (uint64_t (*)())v56;
    }
    ++*((_QWORD *)&v127 + 1);
LABEL_122:
    v58 = v6 + 144;
    v6 = v7;
    if (v58 != v7)
    {
      v6 = v58;
      while (1)
      {
        if (*((unsigned __int16 *)v6 + 4) == v5)
        {
          v59 = *((_QWORD *)v6 + 17);
          if (!*(_QWORD *)(v8 + 144 * v59 + 112) || *(_BYTE *)(v8 + 144 * v59 + 136))
            break;
        }
        v6 += 144;
        if (v6 == v7)
        {
          v6 = v7;
          goto LABEL_3;
        }
      }
    }
  }
  v86 = v129;
  v87 = (__int16 *)v130;
  if (v129 != (__int16 *)v130)
  {
    v88 = v129 + 56;
    do
    {
      v90 = *(_BYTE *)(*(_QWORD *)v88 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v108, (uint64_t)(v88 - 44));
      LOBYTE(v111) = v90;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v112, (uint64_t)v108);
      v119 = 0;
      v120 = (v118
            - 0x61C8864680B583EBLL
            + ((v111 - 0x61C8864680B583EBLL) << 6)
            + (((unint64_t)v111 - 0x61C8864680B583EBLL) >> 2)) ^ (v111
                                                                                        - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v104, (uint64_t)&v111, v88 - 56, v88);
      if (v119)
        v119 = 0;
      if (v113 != v115)
        free(v113);
      if (v109 != v110)
        free(v109);
      v89 = v88 + 8;
      v88 += 64;
    }
    while (v89 != v87);
  }
  v91 = (_QWORD *)v127;
  if ((_QWORD)v127)
  {
    do
    {
      v93 = (_QWORD *)*v91;
      v94 = (void *)v91[6];
      if (v94 != (void *)v91[8])
        free(v94);
      operator delete(v91);
      v91 = v93;
    }
    while (v93);
  }
  v92 = (void *)v126;
  *(_QWORD *)&v126 = 0;
  if (v92)
    operator delete(v92);
  if (v86)
  {
    if (v86 != v87)
    {
      do
      {
        v95 = (std::__shared_weak_count *)*((_QWORD *)v87 - 1);
        if (v95)
        {
          p_shared_owners = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(p_shared_owners);
          while (__stlxr(v97 - 1, p_shared_owners));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v98 = (void *)*((_QWORD *)v87 - 12);
        if (v98 != *((void **)v87 - 10))
          free(v98);
        v87 -= 64;
      }
      while (v87 != v86);
      v86 = v129;
    }
    operator delete(v86);
  }
}

void sub_19F0C21F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 128);
  if (v3 == (_QWORD *)(v1 - 152))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 152);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::unordered_map<geo::QuadTile,gdc::LayerDataKey,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,gdc::LayerDataKey>>>::~unordered_map[abi:nn180100](v1 - 224);
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v1 - 176));
  _Unwind_Resume(a1);
}

__n128 gdc::LayerDataCollector::missingData(gdc::LayerDataCollector *this, unint64_t *a2, int a3)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 *v10;
  __n128 *v11;
  __int128 v12;
  __n128 result;
  __n128 v14;
  __int16 v15;
  __int16 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v4 = (unsigned __int16 *)a2[3];
  v3 = (unsigned __int16 *)a2[4];
  if (v4 != v3)
  {
    while (*v4 != a3)
    {
      v4 += 16;
      if (v4 == v3)
        goto LABEL_13;
    }
  }
  if (v4 == v3)
  {
LABEL_13:
    v9 = 0;
    v5 = a2[1];
    v21 = a3;
    v22 = v5;
    v23 = v5;
    v24 = 0;
    v20 = a3;
    v10 = &v21;
    v11 = (__n128 *)&v20;
  }
  else
  {
    v6 = *a2;
    v5 = a2[1];
    v7 = *((_QWORD *)v4 + 1);
    v16 = a3;
    v17 = v6;
    v18 = v5;
    v19 = v7;
    if (v6 != v5)
    {
      while (1)
      {
        if (*(unsigned __int16 *)(v6 + 8) == a3)
        {
          v8 = *(_QWORD *)(v6 + 136);
          if (!*(_QWORD *)(v7 + 144 * v8 + 112) || *(_BYTE *)(v7 + 144 * v8 + 136))
            break;
        }
        v6 += 144;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
      v17 = v6;
    }
    v9 = *((_QWORD *)v4 + 1);
    v15 = a3;
    v10 = &v16;
    v11 = (__n128 *)&v15;
  }
  v11->n128_u64[1] = v5;
  v11[1].n128_u64[0] = v5;
  v11[1].n128_u64[1] = v9;
  v12 = *((_OWORD *)v10 + 1);
  *(_OWORD *)this = *(_OWORD *)v10;
  *((_OWORD *)this + 1) = v12;
  result = *v11;
  v14 = v11[1];
  *((__n128 *)this + 2) = *v11;
  *((__n128 *)this + 3) = v14;
  return result;
}

_QWORD *esl::toFontWeight@<X0>(_QWORD *result@<X0>, __int16 *a2@<X8>)
{
  _QWORD *v2;
  int v4;
  _QWORD *v5;
  uint64_t v7;
  __int16 v12;

  v2 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    v4 = *((unsigned __int8 *)result + 23);
    v5 = result;
    switch(*((_BYTE *)result + 23))
    {
      case 4:
        goto LABEL_8;
      case 5:
        if (*(_DWORD *)result == 1751607660 && *((_BYTE *)result + 4) == 116)
          goto LABEL_42;
        if (v4 != 4)
          goto LABEL_58;
LABEL_8:
        if (*(_DWORD *)result != 1852401780)
          goto LABEL_58;
        goto LABEL_41;
      case 6:
        goto LABEL_48;
      case 7:
        if (*(_DWORD *)result == 1969710450 && *(_DWORD *)((char *)result + 3) == 1918987381)
          goto LABEL_65;
        if (v4 != 6)
          goto LABEL_58;
LABEL_48:
        if (*(_DWORD *)result != 1768187245 || *((_WORD *)result + 2) != 28021)
          goto LABEL_58;
        goto LABEL_53;
      case 8:
        goto LABEL_39;
      case 0xA:
        if (*result != 0x67696C6172746C75 || *((_WORD *)result + 4) != 29800)
          goto LABEL_58;
        goto LABEL_64;
      default:
        goto LABEL_58;
    }
  }
  v7 = result[1];
  if (v7 == 5)
  {
    if (*(_DWORD *)*result == 1751607660 && *(_BYTE *)(*result + 4) == 116)
    {
LABEL_42:
      v12 = 257;
      goto LABEL_66;
    }
    v7 = result[1];
  }
  else if (v7 == 10 && *(_QWORD *)*result == 0x67696C6172746C75 && *(_WORD *)(*result + 8) == 29800)
  {
LABEL_64:
    v12 = 1;
    goto LABEL_66;
  }
  if (v7 == 4)
  {
    if (*(_DWORD *)*result == 1852401780)
    {
LABEL_41:
      v12 = 513;
      goto LABEL_66;
    }
    v7 = result[1];
  }
  if (v7 == 7)
  {
    if (*(_DWORD *)*result == 1969710450 && *(_DWORD *)(*result + 3) == 1918987381)
    {
LABEL_65:
      v12 = 769;
      goto LABEL_66;
    }
    v7 = result[1];
  }
  if (v7 == 6)
  {
    if (*(_DWORD *)*result == 1768187245 && *(_WORD *)(*result + 4) == 28021)
    {
LABEL_53:
      v12 = 1025;
      goto LABEL_66;
    }
    v7 = result[1];
  }
  if (v7 == 8)
  {
    v5 = (_QWORD *)*result;
LABEL_39:
    if (*v5 == 0x646C6F62696D6573)
    {
      v12 = 1281;
LABEL_66:
      *a2 = v12;
      return result;
    }
  }
LABEL_58:
  result = (_QWORD *)std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("bold", result);
  if ((_DWORD)result)
  {
    v12 = 1537;
    goto LABEL_66;
  }
  result = (_QWORD *)std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("heavy", v2);
  if ((_DWORD)result)
  {
    v12 = 1793;
    goto LABEL_66;
  }
  result = (_QWORD *)std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("black", v2);
  if ((_DWORD)result)
  {
    v12 = 2049;
    goto LABEL_66;
  }
  *(_BYTE *)a2 = 0;
  return result;
}

void md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  int v25;
  void *__p;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;

  v4 = (_QWORD *)operator new();
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v21, a1);
  v5 = operator new();
  v6 = v21;
  v7 = v22;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v23;
  v8 = v24;
  *(_QWORD *)(v5 + 16) = v23;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v25;
  if (v8)
  {
    v10 = v9[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    v6[v10] = v5 + 16;
    v23 = 0;
    v24 = 0;
  }
  v11 = __p;
  v12 = v27;
  v13 = v28;
  v14 = v29;
  *(_QWORD *)(v5 + 56) = v28;
  __p = 0;
  v27 = 0;
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 48) = v12;
  *(_QWORD *)(v5 + 64) = v14;
  *(_DWORD *)(v5 + 72) = v30;
  if (v14)
  {
    v15 = v13[1];
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    v13 = 0;
    v11[v15] = v5 + 56;
    v28 = 0;
    v29 = 0;
  }
  v4[2] = "md::AssetInjectionContext]";
  v4[3] = 25;
  v4[4] = v5;
  *v4 = &off_1E42B10B8;
  v4[1] = 0xD77FB76AFC10A710;
  *a2 = v4;
  if (v13)
  {
    do
    {
      v16 = (_QWORD *)*v13;
      operator delete(v13);
      v13 = v16;
    }
    while (v16);
  }
  v17 = __p;
  __p = 0;
  if (v17)
    operator delete(v17);
  v18 = v23;
  if (v23)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = v21;
  v21 = 0;
  if (v20)
    operator delete(v20);
}

void sub_19F0C27B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::AssetInjectionContext::~AssetInjectionContext((md::AssetInjectionContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::MaterialLogic::reset(md::MaterialLogic *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (v2[5])
  {
    v3 = (_QWORD *)v2[4];
    while (v3)
    {
      v10 = v3;
      v3 = (_QWORD *)*v3;
      v11 = (std::__shared_weak_count *)v10[4];
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      operator delete(v10);
    }
    v2[4] = 0;
    v4 = v2[3];
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(v2[2] + 8 * i) = 0;
    }
    v2[5] = 0;
  }
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear((uint64_t)(v2 + 13));
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear((uint64_t)(v2 + 25));
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear((uint64_t)(v2 + 37));
  if (*((_QWORD *)this + 27))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 26);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    *((_QWORD *)this + 26) = 0;
    v8 = *((_QWORD *)this + 25);
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*((_QWORD *)this + 24) + 8 * j) = 0;
    }
    *((_QWORD *)this + 27) = 0;
  }
}

void md::MaterialLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *i;
  _BYTE *v42;
  _BYTE *v43;
  int64_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  BOOL v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t *v141;
  unint64_t *v142;
  uint64_t *v143;
  unint64_t v144;
  int8x8_t v145;
  uint8x8_t v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  _QWORD *v168;
  unsigned __int16 *v169;
  _QWORD *v170;
  char *v171;
  int v172;
  void **v173;
  unint64_t v174;
  int8x8_t v175;
  uint8x8_t v176;
  unint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  int8x8_t *v193;
  int8x8_t v194;
  uint8x8_t v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  int8x8_t *v209;
  unsigned int v210;
  uint64_t *v211;
  _QWORD *v212;
  char v213;
  uint64_t v214;
  _QWORD *j;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  size_t v224;
  char *v225;
  char *v226;
  char *v227;
  _QWORD *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  int8x8_t v234;
  uint8x8_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  char v247;
  unint64_t *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  unint64_t *v261;
  unint64_t *v262;
  unint64_t v263;
  char *v264;
  unint64_t v265;
  unint64_t *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  int8x8_t v279;
  uint8x8_t v280;
  uint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  char v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  unint64_t v295;
  _BYTE *v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  size_t v302;
  char *v303;
  char *v304;
  char *v305;
  _QWORD *k;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  _BYTE *v311;
  char *v312;
  char *v313;
  unint64_t v314;
  char *v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  _OWORD *v320;
  char *v321;
  __int128 v322;
  unint64_t *v323;
  int8x8_t v324;
  uint8x8_t v325;
  uint64_t v326;
  _QWORD *v327;
  _QWORD *v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  char v341;
  _QWORD *v342;
  _QWORD *v343;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  void **v348;
  uint64_t *v349;
  _QWORD *v350;
  _QWORD *v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  _QWORD *v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t v358;
  void *v359;
  uint64_t v360;
  void *__p;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  _QWORD v365[3];
  _QWORD *v366;
  _QWORD v367[3];
  _QWORD *v368;
  _QWORD v369[3];
  _QWORD *v370;
  unint64_t v371;
  void **v372;
  uint64_t *v373;
  unint64_t *v374;
  uint64_t v375;

  v375 = *MEMORY[0x1E0C80C00];
  v367[0] = &off_1E42CB1C8;
  v367[1] = a2;
  v368 = v367;
  v365[0] = &off_1E42CB210;
  v365[1] = a2;
  v366 = v365;
  v370 = v369;
  v369[0] = &off_1E42CB210;
  v369[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__0NS_9allocatorISN_EEFvvEEclEv((uint64_t)v367);
  v6 = v366;
  if (v366 == v365)
  {
    v8 = 4;
    v6 = v365;
    v7 = a4;
  }
  else
  {
    v7 = a4;
    if (!v366)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v8))();
LABEL_6:
  v9 = v368;
  if (v368 == v367)
  {
    v10 = 4;
    v9 = v367;
  }
  else
  {
    if (!v368)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  md::MaterialLogic::_clearPendingTaggedRegistries((md::MaterialLogic *)a1);
  v12 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 128);
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(v7 + 8);
  *(_QWORD *)v7 = v12;
  *(_QWORD *)(v7 + 8) = v11;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v19 = *(_QWORD *)(a1 + 136);
  v18 = *(_QWORD *)(a1 + 144);
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(std::__shared_weak_count **)(v7 + 24);
  *(_QWORD *)(v7 + 16) = v19;
  *(_QWORD *)(v7 + 24) = v18;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(_QWORD *)(a3 + 32);
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_QWORD *)(v25 + 40);
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(std::__shared_weak_count **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    v26 = *(_QWORD *)(a1 + 176);
  }
  if (*(_BYTE *)(v7 + 72))
  {
    if (!v26)
    {
      *(_BYTE *)(v7 + 73) = 0;
      goto LABEL_44;
    }
    v33 = atomic_load((unsigned __int8 *)(v26 + 254));
    if ((v33 & 1) == 0)
    {
      LOBYTE(v26) = 0;
      *(_BYTE *)(v7 + 73) = 1;
      goto LABEL_44;
    }
    v26 = *(_QWORD *)(a1 + 176);
  }
  *(_BYTE *)(v7 + 73) = 0;
  if (v26)
  {
    v34 = atomic_load((unsigned __int8 *)(v26 + 254));
    LOBYTE(v26) = v34 & 1;
  }
LABEL_44:
  *(_BYTE *)(v7 + 72) = v26;
  gms::MaterialManager<ggl::Texture2D>::setClientStyleState(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  v342 = *(_QWORD **)(a3 + 8);
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v359, (uint64_t)(v342 + 10));
  LOBYTE(v364) = v362 != 0;
  v35 = *(_QWORD *)(a1 + 152);
  v371 = (unint64_t)&off_1E42CB180;
  v372 = &v359;
  v373 = &v364;
  v374 = &v371;
  md::RegistryManager::each(v35, (uint64_t)&v371);
  v36 = v374;
  if (v374 == &v371)
  {
    v37 = 4;
    v36 = &v371;
    goto LABEL_48;
  }
  if (v374)
  {
    v37 = 5;
LABEL_48:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  v38 = __p;
  if (__p)
  {
    do
    {
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
  v40 = v359;
  v359 = 0;
  if (v40)
    operator delete(v40);
  for (i = (_QWORD *)v342[2]; i; i = (_QWORD *)*i)
  {
    v48 = *(_QWORD *)(a1 + 120);
    v49 = i[2];
    v50 = i[3];
    v51 = *(_QWORD *)(v50 + 176);
    v52 = *(std::__shared_weak_count **)(v50 + 184);
    v371 = v51;
    v372 = (void **)&v52->__vftable;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(v48, v49, v51, v52);
    if (v52)
    {
      v55 = (unint64_t *)&v52->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  v43 = (_BYTE *)v342[20];
  v42 = (_BYTE *)v342[21];
  v44 = v42 - v43;
  if (v42 != v43)
  {
    if (v44 < 0)
      abort();
    v45 = (char *)operator new(v42 - v43);
    v46 = (unint64_t *)&v45[8 * (v44 >> 3)];
    memcpy(v45, v43, v44);
    v47 = (unint64_t *)v45;
    do
    {
      v57 = *v47;
      v58 = *(_QWORD *)(a1 + 120);
      v59 = *(void **)(v58 + 56);
      v60 = *(std::__shared_weak_count **)(v58 + 64);
      v359 = v59;
      v360 = (uint64_t)v60;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(v58, v57, (unint64_t)v59, v60);
      if (v60)
      {
        v63 = (unint64_t *)&v60->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      ++v47;
    }
    while (v47 != v46);
    operator delete(v45);
  }
  v65 = *(_DWORD *)(*(_QWORD *)(v25 + 32) + 248);
  v66 = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a1 + 168) = v65;
  v67 = *(_QWORD *)(a1 + 152);
  v68 = *(uint64_t **)(v67 + 384);
  v349 = *(uint64_t **)(v67 + 392);
  if (v68 == v349)
    goto LABEL_499;
  v79 = v65 == v66;
  v69 = 384;
  if (v79)
  {
    v69 = 432;
    v70 = v67 + 432;
  }
  else
  {
    v70 = v67 + 384;
  }
  v347 = v70;
  v71 = *(_QWORD **)(v67 + v69);
  v344 = a1;
  do
  {
    v357 = v68;
    v72 = *v68;
    if (v71 != *(_QWORD **)(v347 + 8) && v72 == *v71)
    {
      v139 = (_QWORD *)gdc::Registry::storage<md::components::Material>(*v68);
      v140 = v71;
      v141 = (unint64_t *)v139[7];
      v142 = (unint64_t *)v139[8];
      if (v141 != v142)
      {
        v143 = (uint64_t *)v139[10];
        do
        {
          v144 = *v141;
          v371 = 0xA4F4C87C991FC6E0;
          v145 = *(int8x8_t *)(v72 + 128);
          if (v145)
          {
            v146 = (uint8x8_t)vcnt_s8(v145);
            v146.i16[0] = vaddlv_u8(v146);
            if (v146.u32[0] > 1uLL)
            {
              v147 = 0xA4F4C87C991FC6E0;
              if (*(_QWORD *)&v145 <= 0xA4F4C87C991FC6E0)
                v147 = 0xA4F4C87C991FC6E0 % *(_QWORD *)&v145;
            }
            else
            {
              v147 = (*(_QWORD *)&v145 - 1) & 0xA4F4C87C991FC6E0;
            }
            v148 = *(_QWORD **)(*(_QWORD *)(v72 + 120) + 8 * v147);
            if (v148)
            {
              v149 = (_QWORD *)*v148;
              if (v149)
              {
                if (v146.u32[0] < 2uLL)
                {
                  v150 = *(_QWORD *)&v145 - 1;
                  while (1)
                  {
                    v152 = v149[1];
                    if (v152 == 0xA4F4C87C991FC6E0)
                    {
                      if (v149[2] == 0xA4F4C87C991FC6E0)
                        goto LABEL_196;
                    }
                    else if ((v152 & v150) != v147)
                    {
                      goto LABEL_179;
                    }
                    v149 = (_QWORD *)*v149;
                    if (!v149)
                      goto LABEL_179;
                  }
                }
                do
                {
                  v151 = v149[1];
                  if (v151 == 0xA4F4C87C991FC6E0)
                  {
                    if (v149[2] == 0xA4F4C87C991FC6E0)
                    {
LABEL_196:
                      v153 = v149[3];
                      goto LABEL_182;
                    }
                  }
                  else
                  {
                    if (v151 >= *(_QWORD *)&v145)
                      v151 %= *(_QWORD *)&v145;
                    if (v151 != v147)
                      break;
                  }
                  v149 = (_QWORD *)*v149;
                }
                while (v149);
              }
            }
          }
LABEL_179:
          v153 = operator new();
          *(_QWORD *)(v153 + 16) = "md::components::ClientState]";
          *(_QWORD *)(v153 + 24) = 27;
          *(_OWORD *)(v153 + 32) = 0u;
          *(_OWORD *)(v153 + 48) = 0u;
          *(_OWORD *)(v153 + 64) = 0u;
          *(_OWORD *)(v153 + 80) = 0u;
          *(_OWORD *)(v153 + 96) = 0u;
          *(_OWORD *)(v153 + 112) = 0u;
          *(_OWORD *)(v153 + 128) = 0u;
          *(_DWORD *)(v153 + 144) = 1065353216;
          *(_OWORD *)(v153 + 152) = 0u;
          *(_OWORD *)(v153 + 168) = 0u;
          *(_QWORD *)(v153 + 184) = 0;
          *(_DWORD *)(v153 + 192) = 1065353216;
          *(_OWORD *)(v153 + 200) = 0u;
          *(_OWORD *)(v153 + 216) = 0u;
          *(_QWORD *)(v153 + 232) = 0;
          *(_DWORD *)(v153 + 240) = 1065353216;
          *(_QWORD *)v153 = &off_1E42B2E98;
          *(_QWORD *)(v153 + 8) = 0xA4F4C87C991FC6E0;
          *(_QWORD *)(v153 + 248) = v72;
          v154 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v72 + 120), 0xA4F4C87C991FC6E0, &v371);
          v155 = v154[3];
          v154[3] = v153;
          if (v155)
            (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
          v359 = (void *)0xA4F4C87C991FC6E0;
          v360 = (uint64_t)"md::components::ClientState]";
          __p = (void *)27;
          gdc::Registry::_registerStorageDataSignals(v72, 0xA4F4C87C991FC6E0, (uint64_t)&v359, (uint64_t *)(v153 + 104));
LABEL_182:
          v156 = *(_QWORD *)(v153 + 32);
          if (v144 >> 39 < (*(_QWORD *)(v153 + 40) - v156) >> 3
            && (v157 = *(_QWORD *)(v156 + 8 * (v144 >> 39))) != 0
            && (v158 = *(unsigned __int16 *)(v157 + 2 * (HIDWORD(v144) & 0x7F)),
                v160 = *(_QWORD *)(v153 + 56),
                v159 = *(_QWORD *)(v153 + 64),
                v158 < (v159 - v160) >> 3)
            && ((v161 = v160 + 8 * v158, v161 != v159) ? (v162 = *(_DWORD *)(v161 + 4) == HIDWORD(v144)) : (v162 = 0),
                v162))
          {
            v163 = *(_QWORD *)(v153 + 88);
            v164 = *(_QWORD *)(v153 + 80) + 16 * v158;
          }
          else
          {
            v163 = *(_QWORD *)(v153 + 88);
            v164 = v163;
          }
          if (v164 == v163)
            v165 = 0;
          else
            v165 = v164;
          md::MaterialLogic::_updateMaterialForComponent(a1, v72, v144, v143, v165);
          v143 += 3;
          ++v141;
        }
        while (v141 != v142);
      }
      v71 = v140 + 1;
    }
    else
    {
      v73 = (_QWORD *)gdc::Registry::storage<md::components::FlexClientStateChanged>(*v68);
      v74 = gdc::Registry::storage<md::components::Material>(v72);
      v75 = (_QWORD *)v74;
      v355 = v71;
      v77 = v73[7];
      v76 = v73[8];
      if (*(_QWORD *)(v74 + 64) - *(_QWORD *)(v74 + 56) >= (unint64_t)(v76 - v77))
        v78 = v73 + 4;
      else
        v78 = (_QWORD *)(v74 + 32);
      v351 = v78;
      v353 = v74 + 32;
      v79 = v73 + 4 != v78 || v77 == v76;
      if (!v79)
      {
        do
        {
          v90 = *(unsigned int *)(v77 + 4);
          v91 = v75[4];
          v92 = (v75[5] - v91) >> 3;
          if (v90 >> 7 < v92)
          {
            v93 = *(_QWORD *)(v91 + 8 * (v90 >> 7));
            if (v93)
            {
              v94 = *(unsigned __int16 *)(v93 + 2 * (v90 & 0x7F));
              v96 = v75[7];
              v95 = v75[8];
              v97 = (v95 - v96) >> 3;
              if (v97 > v94)
              {
                v98 = v96 + 8 * v94;
                if (v98 != v95 && *(_DWORD *)(v98 + 4) == (_DWORD)v90)
                {
                  v100 = *(_QWORD *)v77;
                  v101 = HIDWORD(*(_QWORD *)v77);
                  v102 = *(_QWORD *)v77 >> 39;
                  if (v102 < v92
                    && (v103 = *(_QWORD *)(v91 + 8 * v102)) != 0
                    && (v104 = *(unsigned __int16 *)(v103 + 2 * (HIDWORD(v100) & 0x7F)), v97 > v104)
                    && ((v105 = v96 + 8 * v104, v105 != v95)
                      ? (v106 = *(_DWORD *)(v105 + 4) == (_DWORD)v101)
                      : (v106 = 0),
                        v106))
                  {
                    v107 = (uint64_t *)(v75[10] + 24 * v104);
                  }
                  else
                  {
                    v107 = (uint64_t *)v75[11];
                  }
                  v108 = (_QWORD *)gdc::Registry::storage<md::components::ClientState>(v72);
                  v109 = v108[4];
                  if (v102 < (v108[5] - v109) >> 3
                    && (v110 = *(_QWORD *)(v109 + 8 * v102)) != 0
                    && (v111 = *(unsigned __int16 *)(v110 + 2 * (HIDWORD(v100) & 0x7F)),
                        v113 = v108[7],
                        v112 = v108[8],
                        v111 < (v112 - v113) >> 3)
                    && ((v114 = v113 + 8 * v111, v114 != v112)
                      ? (v115 = *(_DWORD *)(v114 + 4) == (_DWORD)v101)
                      : (v115 = 0),
                        v115))
                  {
                    v87 = v108[11];
                    v88 = v108[10] + 16 * v111;
                  }
                  else
                  {
                    v87 = v108[11];
                    v88 = v87;
                  }
                  if (v88 == v87)
                    v89 = 0;
                  else
                    v89 = v88;
                  md::MaterialLogic::_updateMaterialForComponent(v344, v72, v100, v107, v89);
                }
              }
            }
          }
          v77 += 8;
        }
        while (v77 != v76);
      }
      a1 = v344;
      v71 = v355;
      if ((_QWORD *)v353 == v351)
      {
        v116 = v75[7];
        v117 = v75[8];
        if (v116 != v117)
        {
          v118 = (uint64_t *)v75[10];
          do
          {
            v122 = *(unsigned int *)(v116 + 4);
            v123 = v73[4];
            if (v122 >> 7 < (v73[5] - v123) >> 3)
            {
              v124 = *(_QWORD *)(v123 + 8 * (v122 >> 7));
              if (v124)
              {
                v125 = *(unsigned __int16 *)(v124 + 2 * (v122 & 0x7F));
                v127 = v73[7];
                v126 = v73[8];
                if (v125 < (v126 - v127) >> 3)
                {
                  v128 = v127 + 8 * v125;
                  if (v128 != v126 && *(_DWORD *)(v128 + 4) == (_DWORD)v122)
                  {
                    v130 = *(_QWORD *)v116;
                    v131 = (_QWORD *)gdc::Registry::storage<md::components::ClientState>(v72);
                    v132 = v131[4];
                    if (v130 >> 39 < (v131[5] - v132) >> 3
                      && (v133 = *(_QWORD *)(v132 + 8 * (v130 >> 39))) != 0
                      && (v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v130) & 0x7F)),
                          v136 = v131[7],
                          v135 = v131[8],
                          v134 < (v135 - v136) >> 3)
                      && ((v137 = v136 + 8 * v134, v137 != v135)
                        ? (v138 = *(_DWORD *)(v137 + 4) == HIDWORD(v130))
                        : (v138 = 0),
                          v138))
                    {
                      v119 = v131[11];
                      v120 = v131[10] + 16 * v134;
                    }
                    else
                    {
                      v119 = v131[11];
                      v120 = v119;
                    }
                    if (v120 == v119)
                      v121 = 0;
                    else
                      v121 = v120;
                    md::MaterialLogic::_updateMaterialForComponent(v344, v72, v130, v118, v121);
                  }
                }
              }
            }
            v118 += 3;
            v116 += 8;
          }
          while (v116 != v117);
        }
      }
      v80 = (_QWORD *)gdc::Registry::storage<md::components::FlexClientStateChanged>(v72);
      v81 = v80;
      if (v80[29])
      {
        v82 = (_QWORD *)v80[28];
        if (v82)
        {
          v83 = v80[31];
          v84 = (void *)v80[7];
          v85 = (uint64_t)(v80[8] - (_QWORD)v84) >> 3;
          do
          {
            v359 = v84;
            v360 = v85;
            v371 = v83;
            v86 = v82[6];
            if (!v86)
              goto LABEL_514;
            (*(void (**)(uint64_t, unint64_t *, void **))(*(_QWORD *)v86 + 48))(v86, &v371, &v359);
            v82 = (_QWORD *)*v82;
          }
          while (v82);
        }
      }
      v81[8] = v81[7];
      v81[11] = v81[10];
    }
    v68 = v357 + 1;
  }
  while (v357 + 1 != v349);
  v166 = *(_QWORD *)(a1 + 152);
  v167 = *(uint64_t **)(v166 + 384);
  v339 = *(uint64_t **)(v166 + 392);
  if (v167 == v339)
  {
LABEL_499:
    v341 = 0;
  }
  else
  {
    v341 = 0;
    v338 = a1 + 192;
    do
    {
      v358 = *v167;
      v168 = (_QWORD *)gdc::Registry::storage<md::components::PendingMaterial>(*v167);
      v170 = (_QWORD *)v168[7];
      v343 = (_QWORD *)v168[8];
      if (v170 != v343)
      {
        v340 = v167;
        v171 = 0;
        v352 = 0;
        v346 = 0;
        v172 = 0;
        v173 = (void **)v168[10];
        v356 = (uint64_t *)(v358 + 120);
LABEL_205:
        v348 = v173;
        v350 = v170;
        v354 = *v170;
        v174 = (unint64_t)*v173;
        v371 = 0xA4F4C87C991FC6E0;
        v175 = *(int8x8_t *)(v358 + 128);
        if (v175)
        {
          v176 = (uint8x8_t)vcnt_s8(v175);
          v176.i16[0] = vaddlv_u8(v176);
          if (v176.u32[0] > 1uLL)
          {
            v177 = 0xA4F4C87C991FC6E0;
            if (*(_QWORD *)&v175 <= 0xA4F4C87C991FC6E0)
              v177 = 0xA4F4C87C991FC6E0 % *(_QWORD *)&v175;
          }
          else
          {
            v177 = (*(_QWORD *)&v175 - 1) & 0xA4F4C87C991FC6E0;
          }
          v178 = *(_QWORD **)(*v356 + 8 * v177);
          if (v178)
          {
            v179 = (_QWORD *)*v178;
            if (v179)
            {
              if (v176.u32[0] < 2uLL)
              {
                v180 = *(_QWORD *)&v175 - 1;
                while (1)
                {
                  v182 = v179[1];
                  if (v182 == 0xA4F4C87C991FC6E0)
                  {
                    if (v179[2] == 0xA4F4C87C991FC6E0)
                      goto LABEL_271;
                  }
                  else if ((v182 & v180) != v177)
                  {
                    goto LABEL_225;
                  }
                  v179 = (_QWORD *)*v179;
                  if (!v179)
                    goto LABEL_225;
                }
              }
              do
              {
                v181 = v179[1];
                if (v181 == 0xA4F4C87C991FC6E0)
                {
                  if (v179[2] == 0xA4F4C87C991FC6E0)
                  {
LABEL_271:
                    v183 = v179[3];
                    goto LABEL_228;
                  }
                }
                else
                {
                  if (v181 >= *(_QWORD *)&v175)
                    v181 %= *(_QWORD *)&v175;
                  if (v181 != v177)
                    break;
                }
                v179 = (_QWORD *)*v179;
              }
              while (v179);
            }
          }
        }
LABEL_225:
        v183 = operator new();
        *(_QWORD *)(v183 + 16) = "md::components::ClientState]";
        *(_QWORD *)(v183 + 24) = 27;
        *(_OWORD *)(v183 + 32) = 0u;
        *(_OWORD *)(v183 + 48) = 0u;
        *(_OWORD *)(v183 + 64) = 0u;
        *(_OWORD *)(v183 + 80) = 0u;
        *(_OWORD *)(v183 + 96) = 0u;
        *(_OWORD *)(v183 + 112) = 0u;
        *(_OWORD *)(v183 + 128) = 0u;
        *(_DWORD *)(v183 + 144) = 1065353216;
        *(_OWORD *)(v183 + 152) = 0u;
        *(_OWORD *)(v183 + 168) = 0u;
        *(_QWORD *)(v183 + 184) = 0;
        *(_DWORD *)(v183 + 192) = 1065353216;
        *(_OWORD *)(v183 + 200) = 0u;
        *(_OWORD *)(v183 + 216) = 0u;
        *(_QWORD *)(v183 + 232) = 0;
        *(_DWORD *)(v183 + 240) = 1065353216;
        *(_QWORD *)v183 = &off_1E42B2E98;
        *(_QWORD *)(v183 + 8) = 0xA4F4C87C991FC6E0;
        *(_QWORD *)(v183 + 248) = v358;
        v184 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v356, 0xA4F4C87C991FC6E0, &v371);
        v185 = v184[3];
        v184[3] = v183;
        if (v185)
          (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
        v359 = (void *)0xA4F4C87C991FC6E0;
        v360 = (uint64_t)"md::components::ClientState]";
        __p = (void *)27;
        gdc::Registry::_registerStorageDataSignals(v358, 0xA4F4C87C991FC6E0, (uint64_t)&v359, (uint64_t *)(v183 + 104));
LABEL_228:
        v186 = *(_QWORD *)(v183 + 32);
        if (v354 >> 39 >= (*(_QWORD *)(v183 + 40) - v186) >> 3)
          goto LABEL_235;
        v187 = *(_QWORD *)(v186 + 8 * (v354 >> 39));
        if (!v187)
          goto LABEL_235;
        v188 = *(unsigned __int16 *)(v187 + 2 * (HIDWORD(v354) & 0x7F));
        v190 = *(_QWORD *)(v183 + 56);
        v189 = *(_QWORD *)(v183 + 64);
        if (v188 >= (v189 - v190) >> 3)
          goto LABEL_235;
        v191 = v190 + 8 * v188;
        v192 = v191 != v189 && *(_DWORD *)(v191 + 4) == HIDWORD(v354);
        if (v192
          && (v203 = *(_QWORD *)(v183 + 80)) != 0
          && (v204 = v203 + 16 * v188, v204 != *(_QWORD *)(v183 + 88))
          && (v205 = *(unsigned __int16 *)(v204 + 10), *(_WORD *)(v204 + 10)))
        {
          v206 = 0;
          v207 = 0;
          v208 = 0;
          v209 = *(int8x8_t **)(v344 + 120);
          v359 = (void *)v174;
          do
          {
            if (v208 < v205)
            {
              v207 = (unsigned int *)(*(_QWORD *)v204 + 4 * v208);
              v169 = (unsigned __int16 *)(*(_QWORD *)v204 + *(unsigned __int16 *)(v204 + 8) + 2 * v208);
            }
            v206 ^= (*v169
                   - 0x61C8864680B583EBLL
                   + ((((v206 << 6) - 0x61C8864680B583EBLL + (v206 >> 2) + *v207) ^ v206) << 6)
                   + ((((v206 << 6) - 0x61C8864680B583EBLL + (v206 >> 2) + *v207) ^ v206) >> 2)) ^ ((v206 << 6)
                                                                                                  - 0x61C8864680B583EBLL
                                                                                                  + (v206 >> 2)
                                                                                                  + *v207);
            v210 = v208 + 1;
            if (v208 + 1 < v205)
              ++v208;
            else
              v208 = v205;
          }
          while (v210 < v205);
          v360 = v206;
          gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v371, v209, (uint64_t *)&v359, v204);
        }
        else
        {
LABEL_235:
          v193 = *(int8x8_t **)(v344 + 120);
          v359 = (void *)v174;
          v360 = 0;
          gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v371, v193, (uint64_t *)&v359, 0);
        }
        if (!v371)
        {
          v341 = 1;
          v197 = (std::__shared_weak_count *)v372;
          if (v372)
            goto LABEL_452;
          goto LABEL_204;
        }
        v345 = v371;
        v194 = (int8x8_t)v342[1];
        if (!*(_QWORD *)&v194)
          goto LABEL_298;
        v195 = (uint8x8_t)vcnt_s8(v194);
        v195.i16[0] = vaddlv_u8(v195);
        if (v195.u32[0] > 1uLL)
        {
          v196 = v174;
          if (*(_QWORD *)&v194 <= v174)
            v196 = v174 % *(_QWORD *)&v194;
        }
        else
        {
          v196 = (*(_QWORD *)&v194 - 1) & v174;
        }
        v198 = *(_QWORD **)(*v342 + 8 * v196);
        if (!v198)
          goto LABEL_298;
        v199 = (_QWORD *)*v198;
        if (!v199)
          goto LABEL_298;
        if (v195.u32[0] < 2uLL)
        {
          v200 = *(_QWORD *)&v194 - 1;
          while (1)
          {
            v202 = v199[1];
            if (v202 == v174)
            {
              if (v199[2] == v174)
                goto LABEL_272;
            }
            else if ((v202 & v200) != v196)
            {
              goto LABEL_298;
            }
            v199 = (_QWORD *)*v199;
            if (!v199)
              goto LABEL_298;
          }
        }
        while (1)
        {
          v201 = v199[1];
          if (v201 == v174)
          {
            if (v199[2] == v174)
            {
LABEL_272:
              if (!*(_BYTE *)(v199[3] + 200))
                goto LABEL_298;
              v211 = (uint64_t *)gdc::Registry::storage<md::components::SupportsFlexing>(v358);
              v363 = v354;
              v212 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v211 + 4, (uint64_t)&v363);
              if ((v213 & 1) == 0)
              {
                v214 = v211[31];
                if (v211[10] + (((uint64_t)v212 - v211[7]) >> 3) == v211[11])
                  goto LABEL_295;
                for (j = (_QWORD *)v211[16]; j; j = (_QWORD *)*j)
                {
                  v359 = &v363;
                  v360 = 1;
                  v364 = v214;
                  v216 = j[6];
                  if (!v216)
                    goto LABEL_514;
                  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v216 + 48))(v216, &v364, &v359);
                }
LABEL_298:
                v230 = (std::__shared_weak_count *)v372;
                if (v372)
                {
                  v231 = (unint64_t *)(v372 + 1);
                  do
                    v232 = __ldxr(v231);
                  while (__stxr(v232 + 1, v231));
                  do
                    v233 = __ldxr(v231);
                  while (__stxr(v233 + 1, v231));
                }
                v364 = 0x299DE7A80C80C439;
                v234 = *(int8x8_t *)(v358 + 128);
                if (v234)
                {
                  v235 = (uint8x8_t)vcnt_s8(v234);
                  v235.i16[0] = vaddlv_u8(v235);
                  if (v235.u32[0] > 1uLL)
                  {
                    v236 = 0x299DE7A80C80C439;
                    if (*(_QWORD *)&v234 <= 0x299DE7A80C80C439uLL)
                      v236 = 0x299DE7A80C80C439uLL % *(_QWORD *)&v234;
                  }
                  else
                  {
                    v236 = (*(_QWORD *)&v234 - 1) & 0x299DE7A80C80C439;
                  }
                  v237 = *(_QWORD **)(*v356 + 8 * v236);
                  if (v237)
                  {
                    v238 = (_QWORD *)*v237;
                    if (v238)
                    {
                      if (v235.u32[0] < 2uLL)
                      {
                        v239 = *(_QWORD *)&v234 - 1;
                        while (1)
                        {
                          v241 = v238[1];
                          if (v241 == 0x299DE7A80C80C439)
                          {
                            if (v238[2] == 0x299DE7A80C80C439)
                              goto LABEL_322;
                          }
                          else if ((v241 & v239) != v236)
                          {
                            goto LABEL_323;
                          }
                          v238 = (_QWORD *)*v238;
                          if (!v238)
                            goto LABEL_323;
                        }
                      }
                      do
                      {
                        v240 = v238[1];
                        if (v240 == 0x299DE7A80C80C439)
                        {
                          if (v238[2] == 0x299DE7A80C80C439)
                          {
LABEL_322:
                            v242 = v171;
                            v243 = v238[3];
                            goto LABEL_326;
                          }
                        }
                        else
                        {
                          if (v240 >= *(_QWORD *)&v234)
                            v240 %= *(_QWORD *)&v234;
                          if (v240 != v236)
                            break;
                        }
                        v238 = (_QWORD *)*v238;
                      }
                      while (v238);
                    }
                  }
                }
LABEL_323:
                v242 = v171;
                v243 = operator new();
                *(_QWORD *)(v243 + 16) = "md::components::Material]";
                *(_QWORD *)(v243 + 24) = 24;
                *(_OWORD *)(v243 + 32) = 0u;
                *(_OWORD *)(v243 + 48) = 0u;
                *(_OWORD *)(v243 + 64) = 0u;
                *(_OWORD *)(v243 + 80) = 0u;
                *(_OWORD *)(v243 + 96) = 0u;
                *(_OWORD *)(v243 + 112) = 0u;
                *(_OWORD *)(v243 + 128) = 0u;
                *(_DWORD *)(v243 + 144) = 1065353216;
                *(_OWORD *)(v243 + 152) = 0u;
                *(_OWORD *)(v243 + 168) = 0u;
                *(_QWORD *)(v243 + 184) = 0;
                *(_DWORD *)(v243 + 192) = 1065353216;
                *(_OWORD *)(v243 + 200) = 0u;
                *(_OWORD *)(v243 + 216) = 0u;
                *(_QWORD *)(v243 + 232) = 0;
                *(_DWORD *)(v243 + 240) = 1065353216;
                *(_QWORD *)(v243 + 8) = 0x299DE7A80C80C439;
                *(_QWORD *)v243 = &off_1E42B34C8;
                *(_QWORD *)(v243 + 248) = v358;
                v244 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v356, 0x299DE7A80C80C439uLL, &v364);
                v245 = v244[3];
                v244[3] = v243;
                if (v245)
                  (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
                v359 = (void *)0x299DE7A80C80C439;
                v360 = (uint64_t)"md::components::Material]";
                __p = (void *)24;
                gdc::Registry::_registerStorageDataSignals(v358, 0x299DE7A80C80C439, (uint64_t)&v359, (uint64_t *)(v243 + 104));
LABEL_326:
                v363 = v354;
                v246 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v243 + 32), (uint64_t)&v363);
                if ((v247 & 1) != 0)
                {
                  v253 = *(unint64_t **)(v243 + 88);
                  v252 = *(_QWORD *)(v243 + 96);
                  if ((unint64_t)v253 < v252)
                  {
                    *v253 = v174;
                    v253[1] = v345;
                    v253[2] = (unint64_t)v230;
                    if (v230)
                    {
                      v254 = (unint64_t *)&v230->__shared_owners_;
                      do
                        v255 = __ldxr(v254);
                      while (__stxr(v255 + 1, v254));
                    }
                    v248 = v253 + 3;
                    v171 = v242;
                    goto LABEL_363;
                  }
                  v256 = *(unint64_t **)(v243 + 80);
                  v257 = 0xAAAAAAAAAAAAAAABLL * (v253 - v256) + 1;
                  if (v257 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  v258 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v252 - (_QWORD)v256) >> 3);
                  if (2 * v258 > v257)
                    v257 = 2 * v258;
                  if (v258 >= 0x555555555555555)
                    v259 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v259 = v257;
                  if (v259 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_509;
                  v260 = (char *)operator new(24 * v259);
                  v261 = (unint64_t *)&v260[8 * (v253 - v256)];
                  *v261 = v174;
                  v261[1] = v345;
                  v261[2] = (unint64_t)v230;
                  if (v230)
                  {
                    v262 = (unint64_t *)&v230->__shared_owners_;
                    do
                      v263 = __ldxr(v262);
                    while (__stxr(v263 + 1, v262));
                    v256 = *(unint64_t **)(v243 + 80);
                    v253 = *(unint64_t **)(v243 + 88);
                    v171 = v242;
                  }
                  else
                  {
                    v171 = v242;
                  }
                  v264 = &v260[24 * v259];
                  v248 = v261 + 3;
                  if (v253 == v256)
                  {
                    *(_QWORD *)(v243 + 80) = v261;
                    *(_QWORD *)(v243 + 88) = v248;
                    *(_QWORD *)(v243 + 96) = v264;
                    if (v256)
                      goto LABEL_362;
                  }
                  else
                  {
                    do
                    {
                      v265 = *(v253 - 3);
                      v253 -= 3;
                      *(v261 - 3) = v265;
                      v261 -= 3;
                      *(_OWORD *)(v261 + 1) = *(_OWORD *)(v253 + 1);
                      v253[1] = 0;
                      v253[2] = 0;
                    }
                    while (v253 != v256);
                    v256 = *(unint64_t **)(v243 + 80);
                    v266 = *(unint64_t **)(v243 + 88);
                    *(_QWORD *)(v243 + 80) = v261;
                    *(_QWORD *)(v243 + 88) = v248;
                    for (*(_QWORD *)(v243 + 96) = v264; v266 != v256; v266 -= 3)
                    {
                      v267 = (std::__shared_weak_count *)*(v266 - 1);
                      if (v267)
                      {
                        v268 = (unint64_t *)&v267->__shared_owners_;
                        do
                          v269 = __ldaxr(v268);
                        while (__stlxr(v269 - 1, v268));
                        if (!v269)
                        {
                          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                          std::__shared_weak_count::__release_weak(v267);
                        }
                      }
                    }
                    if (!v256)
                      goto LABEL_363;
LABEL_362:
                    operator delete(v256);
                  }
LABEL_363:
                  *(_QWORD *)(v243 + 88) = v248;
                  v249 = v230;
                  goto LABEL_364;
                }
                v248 = (unint64_t *)(*(_QWORD *)(v243 + 80) + 24
                                                                   * (((uint64_t)v246 - *(_QWORD *)(v243 + 56)) >> 3));
                *v248 = v174;
                v248[1] = v345;
                v249 = (std::__shared_weak_count *)v248[2];
                v248[2] = (unint64_t)v230;
                if (v249)
                {
                  v250 = (unint64_t *)&v249->__shared_owners_;
                  do
                    v251 = __ldaxr(v250);
                  while (__stlxr(v251 - 1, v250));
                  v171 = v242;
                  if (!v251)
                  {
                    ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                    std::__shared_weak_count::__release_weak(v249);
                  }
                  v249 = 0;
                }
                else
                {
                  v171 = v242;
                }
LABEL_364:
                v270 = *(_QWORD *)(v243 + 248);
                if (v248 == *(unint64_t **)(v243 + 88))
                {
                  v273 = *(_QWORD **)(v243 + 176);
                  if (v273)
                  {
                    while (1)
                    {
                      v359 = &v363;
                      v360 = 1;
                      v364 = v270;
                      v274 = v273[6];
                      if (!v274)
                        goto LABEL_514;
                      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v274 + 48))(v274, &v364, &v359);
                      v273 = (_QWORD *)*v273;
                      if (!v273)
                        goto LABEL_372;
                    }
                  }
                }
                else
                {
                  v271 = *(_QWORD **)(v243 + 128);
                  if (v271)
                  {
                    while (1)
                    {
                      v359 = &v363;
                      v360 = 1;
                      v364 = v270;
                      v272 = v271[6];
                      if (!v272)
                        goto LABEL_514;
                      (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v272 + 48))(v272, &v364, &v359);
                      v271 = (_QWORD *)*v271;
                      if (!v271)
                        goto LABEL_372;
                    }
                  }
                }
                if (!v249)
                  goto LABEL_376;
LABEL_372:
                v275 = (unint64_t *)&v249->__shared_owners_;
                do
                  v276 = __ldaxr(v275);
                while (__stlxr(v276 - 1, v275));
                if (!v276)
                {
                  ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                  std::__shared_weak_count::__release_weak(v249);
                  if (v230)
                  {
LABEL_377:
                    v277 = (unint64_t *)&v230->__shared_owners_;
                    do
                      v278 = __ldaxr(v277);
                    while (__stlxr(v278 - 1, v277));
                    if (!v278)
                    {
                      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                      std::__shared_weak_count::__release_weak(v230);
                    }
                  }
                }
                else
                {
LABEL_376:
                  if (v230)
                    goto LABEL_377;
                }
                v364 = 0x21F9ABBDA81BEAF3;
                v279 = *(int8x8_t *)(v358 + 128);
                if (v279)
                {
                  v280 = (uint8x8_t)vcnt_s8(v279);
                  v280.i16[0] = vaddlv_u8(v280);
                  if (v280.u32[0] > 1uLL)
                  {
                    v281 = 0x21F9ABBDA81BEAF3;
                    if (*(_QWORD *)&v279 <= 0x21F9ABBDA81BEAF3uLL)
                      v281 = 0x21F9ABBDA81BEAF3uLL % *(_QWORD *)&v279;
                  }
                  else
                  {
                    v281 = (*(_QWORD *)&v279 - 1) & 0x21F9ABBDA81BEAF3;
                  }
                  v282 = *(_QWORD **)(*v356 + 8 * v281);
                  if (v282)
                  {
                    v283 = (_QWORD *)*v282;
                    if (v283)
                    {
                      if (v280.u32[0] < 2uLL)
                      {
                        v284 = *(_QWORD *)&v279 - 1;
                        while (1)
                        {
                          v286 = v283[1];
                          if (v286 == 0x21F9ABBDA81BEAF3)
                          {
                            if (v283[2] == 0x21F9ABBDA81BEAF3)
                              goto LABEL_460;
                          }
                          else if ((v286 & v284) != v281)
                          {
                            goto LABEL_402;
                          }
                          v283 = (_QWORD *)*v283;
                          if (!v283)
                            goto LABEL_402;
                        }
                      }
                      do
                      {
                        v285 = v283[1];
                        if (v285 == 0x21F9ABBDA81BEAF3)
                        {
                          if (v283[2] == 0x21F9ABBDA81BEAF3)
                          {
LABEL_460:
                            v287 = v283[3];
                            goto LABEL_405;
                          }
                        }
                        else
                        {
                          if (v285 >= *(_QWORD *)&v279)
                            v285 %= *(_QWORD *)&v279;
                          if (v285 != v281)
                            break;
                        }
                        v283 = (_QWORD *)*v283;
                      }
                      while (v283);
                    }
                  }
                }
LABEL_402:
                v287 = operator new();
                *(_QWORD *)(v287 + 16) = "md::components::DidResolvePendingMaterial]";
                *(_QWORD *)(v287 + 24) = 41;
                *(_OWORD *)(v287 + 32) = 0u;
                *(_OWORD *)(v287 + 48) = 0u;
                *(_OWORD *)(v287 + 64) = 0u;
                *(_OWORD *)(v287 + 80) = 0u;
                *(_OWORD *)(v287 + 96) = 0u;
                *(_OWORD *)(v287 + 112) = 0u;
                *(_OWORD *)(v287 + 128) = 0u;
                *(_DWORD *)(v287 + 144) = 1065353216;
                *(_OWORD *)(v287 + 152) = 0u;
                *(_OWORD *)(v287 + 168) = 0u;
                *(_QWORD *)(v287 + 184) = 0;
                *(_DWORD *)(v287 + 192) = 1065353216;
                *(_OWORD *)(v287 + 200) = 0u;
                *(_OWORD *)(v287 + 216) = 0u;
                *(_QWORD *)(v287 + 232) = 0;
                *(_DWORD *)(v287 + 240) = 1065353216;
                *(_QWORD *)(v287 + 8) = 0x21F9ABBDA81BEAF3;
                *(_QWORD *)v287 = &off_1E42B33A8;
                *(_QWORD *)(v287 + 248) = v358;
                v288 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v356, 0x21F9ABBDA81BEAF3uLL, &v364);
                v289 = v288[3];
                v288[3] = v287;
                if (v289)
                  (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
                v359 = (void *)0x21F9ABBDA81BEAF3;
                v360 = (uint64_t)"md::components::DidResolvePendingMaterial]";
                __p = (void *)41;
                gdc::Registry::_registerStorageDataSignals(v358, 0x21F9ABBDA81BEAF3, (uint64_t)&v359, (uint64_t *)(v287 + 104));
LABEL_405:
                v363 = v354;
                v290 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v287 + 32), (uint64_t)&v363);
                if ((v291 & 1) != 0)
                {
                  v296 = *(_BYTE **)(v287 + 88);
                  v295 = *(_QWORD *)(v287 + 96);
                  if ((unint64_t)v296 >= v295)
                  {
                    v298 = *(char **)(v287 + 80);
                    v299 = v296 - v298;
                    v300 = v296 - v298 + 1;
                    if (v300 < 0)
                      abort();
                    v301 = v295 - (_QWORD)v298;
                    if (2 * v301 > v300)
                      v300 = 2 * v301;
                    if (v301 >= 0x3FFFFFFFFFFFFFFFLL)
                      v302 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v302 = v300;
                    if (v302)
                      v303 = (char *)operator new(v302);
                    else
                      v303 = 0;
                    v304 = &v303[v299];
                    v297 = (uint64_t)&v303[v299 + 1];
                    v305 = (char *)(v298 - v296);
                    if (v298 == v296)
                      v305 = 0;
                    *(_QWORD *)(v287 + 80) = &v305[(_QWORD)v304];
                    *(_QWORD *)(v287 + 88) = v297;
                    *(_QWORD *)(v287 + 96) = &v303[v302];
                    if (v298)
                      operator delete(v298);
                  }
                  else
                  {
                    v297 = (uint64_t)(v296 + 1);
                  }
                  *(_QWORD *)(v287 + 88) = v297;
                  v292 = *(_QWORD *)(v287 + 248);
                }
                else
                {
                  v292 = *(_QWORD *)(v287 + 248);
                  if (*(_QWORD *)(v287 + 80) + (((uint64_t)v290 - *(_QWORD *)(v287 + 56)) >> 3) != *(_QWORD *)(v287 + 88))
                  {
                    v293 = *(_QWORD **)(v287 + 128);
                    if (v293)
                    {
                      while (1)
                      {
                        v359 = &v363;
                        v360 = 1;
                        v364 = v292;
                        v294 = v293[6];
                        if (!v294)
                          goto LABEL_514;
                        (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v294 + 48))(v294, &v364, &v359);
                        v293 = (_QWORD *)*v293;
                        if (!v293)
                          goto LABEL_432;
                      }
                    }
                    goto LABEL_432;
                  }
                }
                for (k = *(_QWORD **)(v287 + 176); k; k = (_QWORD *)*k)
                {
                  v359 = &v363;
                  v360 = 1;
                  v364 = v292;
                  v307 = k[6];
                  if (!v307)
                    goto LABEL_514;
                  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v307 + 48))(v307, &v364, &v359);
                }
LABEL_432:
                if (v352 < v346)
                {
                  *(_QWORD *)v352 = v354;
                  v352 += 8;
                  v172 = 1;
                  goto LABEL_451;
                }
                v308 = (v352 - v171) >> 3;
                v309 = v308 + 1;
                if ((unint64_t)(v308 + 1) >> 61)
                  abort();
                if ((v346 - v171) >> 2 > v309)
                  v309 = (v346 - v171) >> 2;
                if ((unint64_t)(v346 - v171) >= 0x7FFFFFFFFFFFFFF8)
                  v310 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v310 = v309;
                if (v310)
                {
                  if (!(v310 >> 61))
                  {
                    v311 = operator new(8 * v310);
                    goto LABEL_444;
                  }
LABEL_509:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                v311 = 0;
LABEL_444:
                v312 = &v311[8 * v308];
                *(_QWORD *)v312 = v354;
                v313 = v312 + 8;
                if (v352 != v171)
                {
                  v314 = v352 - 8 - v171;
                  if (v314 < 0x168)
                  {
                    v315 = v352;
                    goto LABEL_447;
                  }
                  if (&v311[v352 - v171 - 8 - (v314 & 0xFFFFFFFFFFFFFFF8)] > &v311[v352 - v171 - 8])
                  {
                    v315 = v352;
                    goto LABEL_447;
                  }
                  if (&v352[-(v314 & 0xFFFFFFFFFFFFFFF8) - 8] > v352 - 8)
                  {
                    v315 = v352;
                    goto LABEL_447;
                  }
                  if ((unint64_t)(v171 - v311) < 0x20)
                  {
                    v315 = v352;
                    goto LABEL_447;
                  }
                  v319 = (v314 >> 3) + 1;
                  v315 = &v352[-8 * (v319 & 0x3FFFFFFFFFFFFFFCLL)];
                  v320 = &v311[8 * v308 - 16];
                  v321 = v352 - 16;
                  v169 = (unsigned __int16 *)(v319 & 0x3FFFFFFFFFFFFFFCLL);
                  do
                  {
                    v322 = *(_OWORD *)v321;
                    *(v320 - 1) = *((_OWORD *)v321 - 1);
                    *v320 = v322;
                    v320 -= 2;
                    v321 -= 32;
                    v169 -= 2;
                  }
                  while (v169);
                  v312 -= 8 * (v319 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v319 != (v319 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_447:
                      v316 = *((_QWORD *)v315 - 1);
                      v315 -= 8;
                      *((_QWORD *)v312 - 1) = v316;
                      v312 -= 8;
                    }
                    while (v315 != v171);
                  }
                }
                v346 = &v311[8 * v310];
                if (v171)
                  operator delete(v171);
                v172 = 1;
                v171 = v312;
                v352 = v313;
LABEL_451:
                v197 = (std::__shared_weak_count *)v372;
                if (v372)
                {
LABEL_452:
                  v317 = (unint64_t *)&v197->__shared_owners_;
                  do
                    v318 = __ldaxr(v317);
                  while (__stlxr(v318 - 1, v317));
                  if (!v318)
                  {
                    ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                    std::__shared_weak_count::__release_weak(v197);
                  }
                }
LABEL_204:
                v173 = v348 + 1;
                v170 = v350 + 1;
                if (v350 + 1 == v343)
                {
                  if (v171 != v352)
                  {
                    v323 = (unint64_t *)v171;
                    do
                    {
                      v371 = 0x251D10CE20A5B012;
                      v324 = *(int8x8_t *)(v358 + 128);
                      if (v324)
                      {
                        v325 = (uint8x8_t)vcnt_s8(v324);
                        v325.i16[0] = vaddlv_u8(v325);
                        if (v325.u32[0] > 1uLL)
                        {
                          v326 = 0x251D10CE20A5B012;
                          if (*(_QWORD *)&v324 <= 0x251D10CE20A5B012uLL)
                            v326 = 0x251D10CE20A5B012uLL % *(_QWORD *)&v324;
                        }
                        else
                        {
                          v326 = (*(_QWORD *)&v324 - 1) & 0x251D10CE20A5B012;
                        }
                        v327 = *(_QWORD **)(*v356 + 8 * v326);
                        if (v327)
                        {
                          v328 = (_QWORD *)*v327;
                          if (v328)
                          {
                            if (v325.u32[0] < 2uLL)
                            {
                              v329 = *(_QWORD *)&v324 - 1;
                              while (1)
                              {
                                v331 = v328[1];
                                if (v331 == 0x251D10CE20A5B012)
                                {
                                  if (v328[2] == 0x251D10CE20A5B012)
                                    goto LABEL_494;
                                }
                                else if ((v331 & v329) != v326)
                                {
                                  goto LABEL_489;
                                }
                                v328 = (_QWORD *)*v328;
                                if (!v328)
                                  goto LABEL_489;
                              }
                            }
                            do
                            {
                              v330 = v328[1];
                              if (v330 == 0x251D10CE20A5B012)
                              {
                                if (v328[2] == 0x251D10CE20A5B012)
                                {
LABEL_494:
                                  v332 = v328[3];
                                  goto LABEL_492;
                                }
                              }
                              else
                              {
                                if (v330 >= *(_QWORD *)&v324)
                                  v330 %= *(_QWORD *)&v324;
                                if (v330 != v326)
                                  break;
                              }
                              v328 = (_QWORD *)*v328;
                            }
                            while (v328);
                          }
                        }
                      }
LABEL_489:
                      v332 = operator new();
                      *(_QWORD *)(v332 + 16) = "md::components::PendingMaterial]";
                      *(_QWORD *)(v332 + 24) = 31;
                      *(_OWORD *)(v332 + 32) = 0u;
                      *(_OWORD *)(v332 + 48) = 0u;
                      *(_OWORD *)(v332 + 64) = 0u;
                      *(_OWORD *)(v332 + 80) = 0u;
                      *(_OWORD *)(v332 + 96) = 0u;
                      *(_OWORD *)(v332 + 112) = 0u;
                      *(_OWORD *)(v332 + 128) = 0u;
                      *(_DWORD *)(v332 + 144) = 1065353216;
                      *(_OWORD *)(v332 + 152) = 0u;
                      *(_OWORD *)(v332 + 168) = 0u;
                      *(_QWORD *)(v332 + 184) = 0;
                      *(_DWORD *)(v332 + 192) = 1065353216;
                      *(_OWORD *)(v332 + 200) = 0u;
                      *(_OWORD *)(v332 + 216) = 0u;
                      *(_QWORD *)(v332 + 232) = 0;
                      *(_DWORD *)(v332 + 240) = 1065353216;
                      *(_QWORD *)v332 = &off_1E42B3018;
                      *(_QWORD *)(v332 + 8) = 0x251D10CE20A5B012;
                      *(_QWORD *)(v332 + 248) = v358;
                      v333 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v356, 0x251D10CE20A5B012uLL, &v371);
                      v334 = v333[3];
                      v333[3] = v332;
                      if (v334)
                        (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
                      v359 = (void *)0x251D10CE20A5B012;
                      v360 = (uint64_t)"md::components::PendingMaterial]";
                      __p = (void *)31;
                      gdc::Registry::_registerStorageDataSignals(v358, 0x251D10CE20A5B012, (uint64_t)&v359, (uint64_t *)(v332 + 104));
LABEL_492:
                      gdc::ComponentStorageWrapper<md::components::PendingMaterial>::remove((_QWORD *)v332, *v323++);
                    }
                    while (v323 != (unint64_t *)v352);
                  }
                  if (v172)
                    std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>(v338, *(_WORD *)(v358 + 40), *(_WORD *)(v358 + 40));
                  if (v171)
                    operator delete(v171);
                  v167 = v340;
                  break;
                }
                goto LABEL_205;
              }
              v218 = (_BYTE *)v211[11];
              v217 = v211[12];
              if ((unint64_t)v218 >= v217)
              {
                v220 = (char *)v211[10];
                v221 = v218 - v220;
                v222 = v218 - v220 + 1;
                if (v222 < 0)
                  abort();
                v223 = v217 - (_QWORD)v220;
                if (2 * v223 > v222)
                  v222 = 2 * v223;
                if (v223 >= 0x3FFFFFFFFFFFFFFFLL)
                  v224 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v224 = v222;
                if (v224)
                  v225 = (char *)operator new(v224);
                else
                  v225 = 0;
                v226 = &v225[v221];
                v219 = (uint64_t)&v225[v221 + 1];
                v227 = (char *)(v220 - v218);
                if (v220 == v218)
                  v227 = 0;
                v211[10] = (uint64_t)&v227[(_QWORD)v226];
                v211[11] = v219;
                v211[12] = (uint64_t)&v225[v224];
                if (v220)
                  operator delete(v220);
              }
              else
              {
                v219 = (uint64_t)(v218 + 1);
              }
              v211[11] = v219;
              v214 = v211[31];
LABEL_295:
              v228 = (_QWORD *)v211[22];
              if (!v228)
                goto LABEL_298;
              while (1)
              {
                v359 = &v363;
                v360 = 1;
                v364 = v214;
                v229 = v228[6];
                if (!v229)
                  break;
                (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v229 + 48))(v229, &v364, &v359);
                v228 = (_QWORD *)*v228;
                if (!v228)
                  goto LABEL_298;
              }
LABEL_514:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
              return;
            }
          }
          else
          {
            if (v201 >= *(_QWORD *)&v194)
              v201 %= *(_QWORD *)&v194;
            if (v201 != v196)
              goto LABEL_298;
          }
          v199 = (_QWORD *)*v199;
          if (!v199)
            goto LABEL_298;
        }
      }
      ++v167;
    }
    while (v167 != v339);
  }
  *(_BYTE *)(a4 + 74) = v341;
  if (!v370)
    goto LABEL_514;
  (*(void (**)(_QWORD *))(*v370 + 48))(v370);
  v335 = v370;
  if (v370 == v369)
  {
    v336 = 4;
    v335 = v369;
  }
  else
  {
    if (!v370)
      return;
    v336 = 5;
  }
  (*(void (**)(void))(*v335 + 8 * v336))();
}

