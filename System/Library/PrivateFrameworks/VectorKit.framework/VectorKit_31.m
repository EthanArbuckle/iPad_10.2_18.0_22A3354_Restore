void sub_19FC326E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

float karo::media::Image::sample<float,unsigned char,float>(uint64_t a1, float a2, float a3, double a4, double a5, double a6, float a7, float a8)
{
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;
  float v20;
  int v21;
  int v22;
  float v23;
  float v24;
  int v25;
  BOOL v26;
  float v27;
  int v28;
  float v29;
  float v30;
  int v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  float v35;

  v11 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 16);
  v12 = *v11;
  v13 = (std::__shared_weak_count *)v11[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = *(_QWORD *)(v12 + 8);
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v18 = *(int **)(a1 + 8);
    if (v18)
      goto LABEL_9;
  }
  else
  {
    v16 = *(_QWORD *)(v12 + 8);
    v18 = *(int **)(a1 + 8);
    if (v18)
    {
LABEL_9:
      v19 = *v18;
      LODWORD(v18) = v18[1];
      goto LABEL_12;
    }
  }
  v19 = 0;
LABEL_12:
  v20 = (float)(v19 - 1) * a2;
  v21 = (int)v20;
  v22 = v19 - 2;
  v23 = v20 - (float)(int)v20;
  v24 = 0.0;
  if (v21 < 0)
    v23 = 0.0;
  v25 = v21 & ~(v21 >> 31);
  v26 = v22 < v21;
  if (v22 < v21)
    v23 = 1.0;
  v27 = (float)((int)v18 - 1) * a3;
  v28 = (int)v27;
  if (!v26)
    v22 = v25;
  v29 = truncf(v27);
  v30 = v27 - v29;
  v31 = (_DWORD)v18 - 2;
  if (v28 >= 0)
    v24 = v30;
  if (v31 < v28)
    v24 = 1.0;
  else
    v31 = v28 & ~(v28 >> 31);
  v32 = v19 - v31;
  v33 = (_BYTE *)(v16 + v22 + (uint64_t)((v32 - 1) * v19));
  LOBYTE(v30) = *v33;
  LOBYTE(v29) = v33[1];
  v34 = v22 + (uint64_t)((v32 - 2) * v19);
  LOBYTE(a7) = *(_BYTE *)(v16 + v34);
  LOBYTE(a8) = *(_BYTE *)(v16 + (int)v34 + 1);
  v35 = (float)((float)(1.0 - v23) * (float)LODWORD(v30)) + (float)(v23 * (float)LODWORD(v29));
  return v35
       + (float)((float)((float)(v23 * (float)LODWORD(a8))
                       - (float)(v35 - (float)((float)(1.0 - v23) * (float)LODWORD(a7))))
               * v24);
}

void std::__shared_ptr_pointer<altitude::MapProvider *,std::shared_ptr<altitude::MapProvider>::__shared_ptr_default_delete<altitude::MapProvider,altitude::MapProvider>,std::allocator<altitude::MapProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::MapProvider *,std::shared_ptr<altitude::MapProvider>::__shared_ptr_default_delete<altitude::MapProvider,altitude::MapProvider>,std::allocator<altitude::MapProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void karo::media::C3bModel::~C3bModel(karo::media::C3bModel *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = *((_QWORD *)this + 28);
  if (v2)
  {
    v3 = *((_QWORD *)this + 29);
    v4 = (void *)*((_QWORD *)this + 28);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(*((_QWORD **)this + 26));
  v5 = (_QWORD *)*((_QWORD *)this + 22);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 23);
    v7 = (void *)*((_QWORD *)this + 22);
    if (v6 != v5)
    {
      do
      {
        v6 -= 7;
        std::__destroy_at[abi:nn180100]<karo::media::C3bMaterial,0>(v6);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v5;
    operator delete(v7);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  if (!v8)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (char *)*((_QWORD *)this + 17);
    if (!v11)
      return;
  }
  else
  {
LABEL_18:
    v11 = (char *)*((_QWORD *)this + 17);
    if (!v11)
      return;
  }
  v12 = (char *)*((_QWORD *)this + 18);
  v13 = v11;
  if (v12 != v11)
  {
    while (1)
    {
      v14 = (void *)*((_QWORD *)v12 - 5);
      if (v14)
      {
        *((_QWORD *)v12 - 4) = v14;
        operator delete(v14);
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)v12 - 6);
      if (!v15)
        goto LABEL_30;
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        v18 = (std::__shared_weak_count *)*((_QWORD *)v12 - 9);
        if (v18)
        {
LABEL_31:
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      else
      {
LABEL_30:
        v18 = (std::__shared_weak_count *)*((_QWORD *)v12 - 9);
        if (v18)
          goto LABEL_31;
      }
      if (*(v12 - 89) < 0)
        operator delete(*((void **)v12 - 14));
      v12 -= 120;
      if (v12 == v11)
      {
        v13 = (char *)*((_QWORD *)this + 17);
        break;
      }
    }
  }
  *((_QWORD *)this + 18) = v11;
  operator delete(v13);
}

uint64_t altitude::ProcessC3b::ProcessC3b(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, _QWORD *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v36[2];
  _QWORD v37[2];

  v15 = karo::Job::Job(a1, a2);
  *(_QWORD *)v15 = &off_1E42C3900;
  *(_QWORD *)(v15 + 176) = 0;
  *(_QWORD *)(v15 + 184) = 0;
  *(_QWORD *)(v15 + 192) = 0;
  *(_QWORD *)(v15 + 200) = a3;
  *(_BYTE *)(v15 + 208) = a4;
  *(_BYTE *)(v15 + 209) = a5;
  v16 = a6[1];
  *(_QWORD *)(v15 + 216) = *a6;
  *(_QWORD *)(v15 + 224) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = a7[1];
  *(_QWORD *)(a1 + 232) = *a7;
  *(_QWORD *)(a1 + 240) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = a8[1];
  *(_QWORD *)(a1 + 248) = *a8;
  *(_QWORD *)(a1 + 256) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(double *)(a1 + 320) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  v25 = *a6;
  if (*a6)
  {
    v26 = (std::__shared_weak_count *)a6[1];
    v37[0] = v25;
    v37[1] = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
      karo::Job::addBlockingSubJob((uint64_t *)a1, v37, -1, 1);
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)a1, v37, -1, 1);
    }
  }
  v30 = *a7;
  if (*a7)
  {
    v31 = (std::__shared_weak_count *)a7[1];
    v36[0] = v30;
    v36[1] = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      karo::Job::addBlockingSubJob((uint64_t *)a1, v36, -1, 1);
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)a1, v36, -1, 1);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<altitude::ProcessC3b>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::ProcessC3b>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::ProcessC3b>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<karo::media::C3bModel *,std::shared_ptr<karo::media::C3bModel>::__shared_ptr_default_delete<karo::media::C3bModel,karo::media::C3bModel>,std::allocator<karo::media::C3bModel>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

karo::media::C3bModel *std::__shared_ptr_pointer<karo::media::C3bModel *,std::shared_ptr<karo::media::C3bModel>::__shared_ptr_default_delete<karo::media::C3bModel,karo::media::C3bModel>,std::allocator<karo::media::C3bModel>>::__on_zero_shared(uint64_t a1)
{
  karo::media::C3bModel *result;

  result = *(karo::media::C3bModel **)(a1 + 24);
  if (result)
  {
    karo::media::C3bModel::~C3bModel(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

altitude::Renderable *altitude::Renderable::Renderable(altitude::Renderable *this, const altitude::Renderable *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;

  *(_QWORD *)this = &off_1E42C3688;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 8) = v4;
  v5 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_OWORD *)this + 2) = v5;
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *(_QWORD *)this = &off_1E42C3630;
  v6 = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 5) = v6;
  v7 = *((_OWORD *)a2 + 6);
  v8 = *((_OWORD *)a2 + 7);
  v9 = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = v9;
  *((_OWORD *)this + 6) = v7;
  *((_OWORD *)this + 7) = v8;
  *(_QWORD *)this = &off_1E42C3938;
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_WORD *)this + 84) = *((_WORD *)a2 + 84);
  *(_QWORD *)((char *)this + 172) = *(_QWORD *)((char *)a2 + 172);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  v10 = operator new();
  *(_QWORD *)v10 = &off_1E42B59B0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = "";
  *(_DWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 56) = 1065353216;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(int64x2_t *)(v10 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v10 + 112) = 0;
  v12 = *((_QWORD *)a2 + 24);
  v11 = *((_QWORD *)a2 + 25);
  *((_QWORD *)this + 23) = v10;
  *((_QWORD *)this + 24) = v12;
  *((_QWORD *)this + 25) = v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *((_OWORD *)this + 13) = *((_OWORD *)a2 + 13);
  v15 = *((_QWORD *)a2 + 28);
  *((_QWORD *)this + 28) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *((_QWORD *)a2 + 31);
  *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)a2 + 232);
  *((_QWORD *)this + 31) = v18;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  v20 = (_BYTE *)*((_QWORD *)a2 + 32);
  v19 = (_BYTE *)*((_QWORD *)a2 + 33);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      abort();
    v22 = (char *)operator new(v19 - v20);
    *((_QWORD *)this + 32) = v22;
    *((_QWORD *)this + 33) = v22;
    v23 = &v22[8 * (v21 >> 3)];
    *((_QWORD *)this + 34) = v23;
    memcpy(v22, v20, v21);
    *((_QWORD *)this + 33) = v23;
  }
  return this;
}

void karo::Bounded::~Bounded(karo::Bounded *this)
{
  *(_QWORD *)this = &off_1E42C3688;
}

{
  *(_QWORD *)this = &off_1E42C3688;
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::Renderable::createOverlayElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t *a6, uint64_t *a7, void (__cdecl *a8)(std::__shared_weak_count *__hidden this), int a9)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t shared_weak_owners;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _DWORD *v75;
  int64x2_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v96;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102[2];
  uint64_t v103;
  std::__shared_weak_count *v104;

  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE570;
  v103 = a4;
  v104 = a5;
  v19 = *a6;
  v20 = (std::__shared_weak_count *)a6[1];
  v102[0] = v19;
  v102[1] = (uint64_t)v20;
  v100 = (uint64_t)&v17[1];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(v100, (uint64_t)"overlay", &v103, v102);
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)&v17[1], (uint64_t)"overlay", &v103, v102);
  }
  v24 = v104;
  if (v104)
  {
    v25 = (unint64_t *)&v104->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(_QWORD *)(a1 + 256);
  v28 = *(std::__shared_weak_count **)(a1 + 264);
  v96 = a1;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = (std::__shared_weak_count *)operator new(0x100uLL);
  v32 = v31;
  v31->__shared_owners_ = 0;
  v33 = (unint64_t *)&v31->__shared_owners_;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF140;
  v34 = &v31[1].__vftable;
  v99 = a2;
  if (v28)
  {
    v35 = (unint64_t *)&v28->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    ggl::PipelineSetup::PipelineSetup(&v31[1].__vftable, v27, (uint64_t)v28);
    v37 = (unint64_t *)&v28->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(&v31[1].__vftable, v27, 0);
  }
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6AA8;
  v39 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1520;
  v41 = ggl::BufferData::BufferData((uint64_t)&v39[1], qword_1EE571660, 2, 1, 6, 1);
  v39[9].__shared_owners_ = (uint64_t)ggl::FlyoverOverlay::Transform::reflection(void)::reflection;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8FB0;
  shared_weak_owners = v32[3].__shared_weak_owners_;
  *(_QWORD *)(shared_weak_owners + 16) = v41;
  *(_QWORD *)(shared_weak_owners + 24) = 0;
  v43 = v32[7].__shared_weak_owners_;
  do
    v44 = __ldxr(v40);
  while (__stxr(v44 + 1, v40));
  v45 = *(std::__shared_weak_count **)(v43 + 24);
  *(_QWORD *)(v43 + 16) = v41;
  *(_QWORD *)(v43 + 24) = v39;
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  do
    v48 = __ldaxr(v40);
  while (__stlxr(v48 - 1, v40));
  if (v48)
  {
    v49 = *a7;
    v50 = (std::__shared_weak_count *)a7[1];
    if (v50)
      goto LABEL_38;
LABEL_44:
    v57 = (_QWORD *)v32[3].__shared_weak_owners_;
    *v57 = v49;
    v57[1] = 0;
    v54 = (_QWORD *)v32[7].__shared_weak_owners_;
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  v49 = *a7;
  v50 = (std::__shared_weak_count *)a7[1];
  if (!v50)
    goto LABEL_44;
LABEL_38:
  v51 = (unint64_t *)&v50->__shared_owners_;
  do
    v52 = __ldxr(v51);
  while (__stxr(v52 + 1, v51));
  v53 = (_QWORD *)v32[3].__shared_weak_owners_;
  *v53 = v49;
  v53[1] = 0;
  v54 = (_QWORD *)v32[7].__shared_weak_owners_;
  v55 = (unint64_t *)&v50->__shared_owners_;
  do
    v56 = __ldxr(v55);
  while (__stxr(v56 + 1, v55));
LABEL_45:
  v58 = (std::__shared_weak_count *)v54[1];
  *v54 = v49;
  v54[1] = v50;
  if (!v58)
    goto LABEL_49;
  v59 = (unint64_t *)&v58->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    if (!v50)
      goto LABEL_55;
  }
  else
  {
LABEL_49:
    if (!v50)
      goto LABEL_55;
  }
  v61 = (unint64_t *)&v50->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
LABEL_55:
  v63 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v63->__shared_owners_ = 0;
  v64 = (unint64_t *)&v63->__shared_owners_;
  v63->__shared_weak_owners_ = 0;
  v63->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2B00;
  v65 = ggl::BufferData::BufferData((uint64_t)&v63[1], qword_1EE574B50, 2, 1, 6, 1);
  v63[9].__shared_owners_ = (uint64_t)ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
  v63[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9DF0;
  v66 = v32[3].__shared_weak_owners_;
  *(_QWORD *)(v66 + 48) = v65;
  *(_QWORD *)(v66 + 56) = 0;
  v67 = v32[7].__shared_weak_owners_;
  do
    v68 = __ldxr(v64);
  while (__stxr(v68 + 1, v64));
  v69 = *(std::__shared_weak_count **)(v67 + 56);
  *(_QWORD *)(v67 + 48) = v65;
  *(_QWORD *)(v67 + 56) = v63;
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  do
    v72 = __ldaxr(v64);
  while (__stlxr(v72 - 1, v64));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  v73 = *(_QWORD **)(v32[3].__shared_weak_owners_ + 48);
  v74 = v73[1];
  v75 = (_DWORD *)v73[9];
  *v75 = 1065353216;
  v75[1] = a9;
  if (v73[8] > v74)
    v74 = v73[8];
  v73[7] = 0;
  v73[8] = v74;
  v76 = (int64x2_t *)operator new();
  v76->i64[0] = (uint64_t)&off_1E42B59B0;
  v76[3].i64[0] = 0;
  v76[2].i32[2] = 0;
  v76[3].i32[2] = 1065353216;
  v76[5].i64[0] = 0;
  v76[5].i64[1] = 0;
  v76[6] = vdupq_n_s64(1uLL);
  v76[7].i64[0] = 0;
  v76[4].i64[0] = v100;
  v76[4].i64[1] = 0;
  v77 = *(_QWORD *)(v96 + 208);
  v76[1].i64[0] = (uint64_t)"";
  v76[1].i64[1] = v77;
  v76[2].i64[0] = (uint64_t)v34;
  v32[5].~__shared_weak_count = a8;
  v78 = operator new();
  v79 = v78;
  do
    v80 = __ldxr(v33);
  while (__stxr(v80 + 1, v33));
  do
    v81 = __ldxr(v18);
  while (__stxr(v81 + 1, v18));
  *(_OWORD *)(v78 + 40) = 0u;
  *(_OWORD *)(v78 + 24) = 0u;
  *(_QWORD *)(v78 + 56) = 0x3FF0000000000000;
  *(_OWORD *)(v78 + 8) = 0u;
  *(_QWORD *)v78 = &off_1E42C3938;
  *(_QWORD *)(v78 + 160) = 0xFFFFFFFF00000000;
  *(_WORD *)(v78 + 168) = 0;
  *(_QWORD *)(v78 + 172) = -1;
  *(_BYTE *)(v78 + 180) = 1;
  *(_QWORD *)(v78 + 184) = v76;
  *(_QWORD *)(v78 + 192) = v34;
  *(_QWORD *)(v78 + 200) = v32;
  do
    v82 = __ldxr(v33);
  while (__stxr(v82 + 1, v33));
  *(_QWORD *)(v78 + 208) = 0;
  *(_QWORD *)(v78 + 216) = v100;
  *(_QWORD *)(v78 + 224) = v17;
  do
    v83 = __ldxr(v18);
  while (__stxr(v83 + 1, v18));
  __asm { FMOV            V0.2D, #1.0 }
  v101 = _Q0;
  *(_OWORD *)(v78 + 232) = _Q0;
  *(_QWORD *)(v78 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(v78 + 256) = 0;
  *(_QWORD *)(v78 + 264) = 0;
  *(_QWORD *)(v78 + 272) = 0;
  do
    v89 = __ldaxr(v18);
  while (__stlxr(v89 - 1, v18));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v90 = __ldaxr(v33);
  while (__stlxr(v90 - 1, v33));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 32))(v79, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v99);
  *(_OWORD *)(v79 + 232) = v101;
  *(_QWORD *)(v79 + 248) = 0x3FF0000000000000;
  do
    v91 = __ldaxr(v33);
  while (__stlxr(v91 - 1, v33));
  if (v91)
  {
    if (!v28)
      goto LABEL_91;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if (!v28)
      goto LABEL_91;
  }
  v92 = (unint64_t *)&v28->__shared_owners_;
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  do
LABEL_91:
    v94 = __ldaxr(v18);
  while (__stlxr(v94 - 1, v18));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return v79;
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<ggl::Mesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::Mesh>,std::allocator<ggl::Mesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::Mesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::Mesh>,std::allocator<ggl::Mesh>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t altitude::Renderable::createSolidLineElement(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, const void *a6, unsigned int a7, void (__cdecl **a8)(std::__shared_weak_count *__hidden this))
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  _QWORD *v13;
  void (__cdecl *v14)(std::__shared_weak_count *__hidden);
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count_vtbl *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  void (__cdecl *v31)(std::__shared_weak_count *__hidden);
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const void *(__cdecl *v36)(const std::__shared_weak_count *__hidden, const std::type_info *);
  void (__cdecl *v37)(std::__shared_weak_count *__hidden);
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  size_t v44;
  unint64_t v45;
  ggl::CommonMesh::Pos4Mesh *v46;
  void **p_dst;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  size_t v61;
  unint64_t v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;
  const void *v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  int64x2_t *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  uint64_t v109;
  std::__shared_weak_count *v110;
  __int128 v114;
  void **__dst;
  size_t v116;
  int64_t v117;

  v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2EB8;
  v13 = &v11[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1EE574988, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::SolidLine::Style::reflection(void)::reflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BA010;
  v14 = a8[1];
  shared_owners = v11[1].__shared_owners_;
  v16 = v11[4].__vftable;
  v16->~__shared_weak_count = *a8;
  v16->~__shared_weak_count_0 = v14;
  if (v11[3].__shared_weak_owners_ > shared_owners)
    shared_owners = v11[3].__shared_weak_owners_;
  v11[3].__shared_owners_ = 0;
  v11[3].__shared_weak_owners_ = shared_owners;
  v17 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E80;
  v19 = &v17[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v17[1], qword_1EE5749C8, 2, 1, 6, 1);
  v17[9].__shared_owners_ = (uint64_t)ggl::SolidLine::View::reflection(void)::reflection;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9FF0;
  v21 = *(_QWORD *)(a1 + 136);
  v20 = *(std::__shared_weak_count **)(a1 + 144);
  v109 = a1;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v24 = (std::__shared_weak_count_vtbl *)operator new();
    v25 = v24;
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    ggl::PipelineSetup::PipelineSetup(v24, v21, (uint64_t)v20);
    v28 = (unint64_t *)&v20->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    v25 = (std::__shared_weak_count_vtbl *)operator new();
    ggl::PipelineSetup::PipelineSetup(v25, v21, 0);
  }
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E42BE3E8;
  get_deleter = v25[1].__get_deleter;
  *(_QWORD *)get_deleter = v13;
  *((_QWORD *)get_deleter + 1) = 0;
  v31 = v25[4].~__shared_weak_count;
  do
    v32 = __ldxr(p_shared_owners);
  while (__stxr(v32 + 1, p_shared_owners));
  v33 = (std::__shared_weak_count *)*((_QWORD *)v31 + 1);
  *(_QWORD *)v31 = v13;
  *((_QWORD *)v31 + 1) = v11;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v25[1].__get_deleter;
  *((_QWORD *)v36 + 2) = v19;
  *((_QWORD *)v36 + 3) = 0;
  v37 = v25[4].~__shared_weak_count;
  do
    v38 = __ldxr(v18);
  while (__stxr(v38 + 1, v18));
  v39 = (std::__shared_weak_count *)*((_QWORD *)v37 + 3);
  *((_QWORD *)v37 + 2) = v19;
  *((_QWORD *)v37 + 3) = v17;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v110 = v20;
  v105 = v17;
  v42 = operator new();
  v43 = *((char *)a2 + 23);
  if (v43 >= 0)
    v44 = *((unsigned __int8 *)a2 + 23);
  else
    v44 = (size_t)a2[1];
  v45 = v44 + 5;
  if (v44 + 5 > 0x7FFFFFFFFFFFFFF7)
LABEL_118:
    abort();
  v46 = (ggl::CommonMesh::Pos4Mesh *)v42;
  v106 = v11;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    p_dst = (void **)operator new(v48 + 1);
    v116 = v44 + 5;
    v117 = v49 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v116 = 0;
    v117 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v117) = v44 + 5;
    if (!v44)
      goto LABEL_41;
  }
  if (v43 >= 0)
    v50 = a2;
  else
    v50 = *a2;
  memmove(p_dst, v50, v44);
LABEL_41:
  strcpy((char *)p_dst + v44, "/mesh");
  if (v117 >= 0)
    v51 = (const char *)&__dst;
  else
    v51 = (const char *)__dst;
  ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v46, v51);
  if (SHIBYTE(v117) < 0)
    operator delete(__dst);
  v52 = (_QWORD *)*((_QWORD *)v46 + 8);
  v54 = *a5;
  v53 = a5[1];
  if (v53)
  {
    v55 = (unint64_t *)(v53 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = (std::__shared_weak_count *)v52[1];
  *v52 = v54;
  v52[1] = v53;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = *((char *)a2 + 23);
  if (v60 >= 0)
    v61 = *((unsigned __int8 *)a2 + 23);
  else
    v61 = (size_t)a2[1];
  v62 = v61 + 10;
  if (v61 + 10 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_118;
  if (v62 >= 0x17)
  {
    v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17)
      v64 = v62 | 7;
    v65 = v64 + 1;
    v63 = (void **)operator new(v64 + 1);
    v116 = v61 + 10;
    v117 = v65 | 0x8000000000000000;
    __dst = v63;
  }
  else
  {
    v116 = 0;
    v117 = 0;
    __dst = 0;
    v63 = (void **)&__dst;
    HIBYTE(v117) = v61 + 10;
    if (!v61)
      goto LABEL_68;
  }
  if (v60 >= 0)
    v66 = a2;
  else
    v66 = *a2;
  memmove(v63, v66, v61);
LABEL_68:
  strcpy((char *)v63 + v61, "/indexdata");
  if (v117 >= 0)
    v67 = (void **)&__dst;
  else
    v67 = __dst;
  v68 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v68->__shared_owners_ = 0;
  v69 = (unint64_t *)&v68->__shared_owners_;
  v68->__shared_weak_owners_ = 0;
  v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v70 = ggl::BufferData::BufferData((uint64_t)&v68[1], 2, 1, 0, 6, a7);
  LODWORD(v68[10].__vftable) = 0;
  v68[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v68[1].__shared_owners_ = 2;
  v68[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v68[9].__shared_weak_owners_ = (uint64_t)v67;
  do
    v71 = __ldxr(v69);
  while (__stxr(v71 + 1, v69));
  v72 = (std::__shared_weak_count *)*((_QWORD *)v46 + 13);
  *((_QWORD *)v46 + 12) = v70;
  *((_QWORD *)v46 + 13) = v68;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  do
    v75 = __ldaxr(v69);
  while (__stlxr(v75 - 1, v69));
  if (v75)
  {
    if ((SHIBYTE(v117) & 0x80000000) == 0)
      goto LABEL_81;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
    if ((SHIBYTE(v117) & 0x80000000) == 0)
      goto LABEL_81;
  }
  operator delete(__dst);
LABEL_81:
  v76 = (int64x2_t *)operator new();
  v77 = *(_QWORD *)(v109 + 80);
  v76->i64[0] = (uint64_t)&off_1E42B59B0;
  v76[1].i64[0] = (uint64_t)"";
  v76[1].i64[1] = v77;
  v76[2].i64[0] = (uint64_t)v25;
  v76[2].i32[2] = 0;
  v76[3].i64[0] = 0;
  v76[3].i32[2] = 1065353216;
  v76[4].i64[0] = (uint64_t)v46;
  v76[4].i64[1] = 0;
  v76[5].i64[0] = 0;
  v76[5].i64[1] = 0;
  v76[6] = vdupq_n_s64(1uLL);
  v76[7].i64[0] = 0;
  v78 = (_QWORD *)*((_QWORD *)v46 + 12);
  v79 = v78[1] * a7;
  if (v79)
  {
    v80 = (void *)v78[9];
    memcpy(v80, a6, 2 * a7);
    if (v80)
    {
      v81 = v78[8];
      if (v81 <= v79)
        v81 = v79;
      v78[7] = 0;
      v78[8] = v81;
    }
  }
  else
  {
    memcpy(0, a6, 2 * a7);
  }
  v82 = operator new();
  v83 = (std::__shared_weak_count *)operator new();
  v83->__shared_owners_ = 0;
  v84 = (unint64_t *)&v83->__shared_owners_;
  v83->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7DB0;
  v83->__shared_weak_owners_ = 0;
  v83[1].__vftable = v25;
  v85 = (std::__shared_weak_count *)operator new();
  v86 = v85;
  v85->__shared_owners_ = 0;
  v87 = (unint64_t *)&v85->__shared_owners_;
  v85->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7678;
  v85->__shared_weak_owners_ = 0;
  v85[1].__vftable = (std::__shared_weak_count_vtbl *)v46;
  *(_OWORD *)(v82 + 8) = 0u;
  *(_OWORD *)(v82 + 24) = 0u;
  *(_QWORD *)(v82 + 56) = 0x3FF0000000000000;
  *(_OWORD *)(v82 + 40) = 0u;
  *(_QWORD *)v82 = &off_1E42C3938;
  *(_QWORD *)(v82 + 160) = 0xFFFFFFFF00000000;
  *(_WORD *)(v82 + 168) = 0;
  *(_QWORD *)(v82 + 172) = -1;
  *(_BYTE *)(v82 + 180) = 1;
  *(_QWORD *)(v82 + 184) = v76;
  *(_QWORD *)(v82 + 192) = v25;
  *(_QWORD *)(v82 + 200) = v83;
  do
    v88 = __ldxr(v84);
  while (__stxr(v88 + 1, v84));
  *(_QWORD *)(v82 + 208) = 0;
  *(_QWORD *)(v82 + 216) = v46;
  *(_QWORD *)(v82 + 224) = v85;
  do
    v89 = __ldxr(v87);
  while (__stxr(v89 + 1, v87));
  __asm { FMOV            V0.2D, #1.0 }
  v114 = _Q0;
  *(_OWORD *)(v82 + 232) = _Q0;
  *(_QWORD *)(v82 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(v82 + 256) = 0;
  *(_QWORD *)(v82 + 264) = 0;
  *(_QWORD *)(v82 + 272) = 0;
  do
    v95 = __ldaxr(v87);
  while (__stlxr(v95 - 1, v87));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v86);
  }
  do
    v96 = __ldaxr(v84);
  while (__stlxr(v96 - 1, v84));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
  }
  v97 = (_QWORD *)v76[2].i64[0];
  if (v97[9] != v97[8])
  {
    v98 = 0;
    do
    {
      (*(void (**)(_QWORD *, unint64_t))(*v97 + 16))(v97, v98++);
      v97 = (_QWORD *)v76[2].i64[0];
    }
    while (v98 < (uint64_t)(v97[9] - v97[8]) >> 4);
  }
  if (v97[13] != v97[12])
  {
    v99 = 0;
    do
    {
      (*(void (**)(_QWORD *, unint64_t))(*v97 + 24))(v97, v99++);
      v97 = (_QWORD *)v76[2].i64[0];
    }
    while (v99 < (uint64_t)(v97[13] - v97[12]) >> 3);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 32))(v82, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, a3);
  *(_OWORD *)(v82 + 232) = v114;
  *(_QWORD *)(v82 + 248) = 0x3FF0000000000000;
  if (v110)
  {
    v100 = (unint64_t *)&v110->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  do
    v102 = __ldaxr(v18);
  while (__stlxr(v102 - 1, v18));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  do
    v103 = __ldaxr(p_shared_owners);
  while (__stlxr(v103 - 1, p_shared_owners));
  if (!v103)
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }
  return v82;
}

void std::__shared_ptr_pointer<ggl::CommonMesh::Pos4Mesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::CommonMesh::Pos4Mesh>,std::allocator<ggl::CommonMesh::Pos4Mesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::CommonMesh::Pos4Mesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::CommonMesh::Pos4Mesh>,std::allocator<ggl::CommonMesh::Pos4Mesh>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<ggl::SolidLine::BasePipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::SolidLine::BasePipelineSetup>,std::allocator<ggl::SolidLine::BasePipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::SolidLine::BasePipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::SolidLine::BasePipelineSetup>,std::allocator<ggl::SolidLine::BasePipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::SolidLine::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::SolidLine::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::SolidLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::SolidLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void altitude::BundleLoader::~BundleLoader(altitude::BundleLoader *this)
{
  *(_QWORD *)this = off_1E42C3330;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::BundleLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  *(_QWORD *)this = off_1E42C3330;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::BundleLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *altitude::BundleLoader::createRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  int v10;
  _QWORD *result;

  v6 = operator new();
  v7 = karo::Job::Job(v6, *(_QWORD *)(a1 + 32));
  *(_BYTE *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v7 = off_1E42C2C58;
  v8 = (std::string *)(v7 + 192);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v10 = *(char *)(a2 + 23);
    *(_QWORD *)v6 = off_1E42C4020;
    v9 = (std::string *)(v6 + 216);
    if (v10 < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      goto LABEL_5;
    }
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)v6 = off_1E42C4020;
    v9 = (std::string *)(v6 + 216);
  }
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
LABEL_5:
  *(_QWORD *)(v6 + 240) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *a3 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8638;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

void altitude::BundleLoader::requestFile(pthread_mutex_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  std::__shared_weak_count *v14;
  uint64_t v15;
  int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string __p;
  std::string v20;
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  pthread_mutex_lock(a1[5]);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    __p = *(std::string *)a2;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      v20 = __p;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_6:
  v21 = 0;
  (*(void (**)(uint64_t *__return_ptr, pthread_mutex_t **, std::string *, _QWORD))&(*a1)[1].__opaque[24])(&v22, a1, &v20, 0);
  v15 = v22;
  v14 = v23;
  v22 = 0;
  v23 = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_8:
  pthread_mutex_unlock(a1[5]);
  pthread_mutex_lock(*(pthread_mutex_t **)(v15 + 152));
  v16 = *(_DWORD *)(v15 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v15 + 152));
  if ((v16 & 1) == 0)
    karo::Job::step((karo::Job *)v15);
  karo::AsyncFileLoader::requestFile((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void altitude::BundleLoader::getProtocol(uint64_t a1@<X8>)
{
  char *v3;
  int v4;
  void *__p[2];
  char v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = 6;
  strcpy((char *)__p, "bundle");
  v3 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1, (uint64_t)__p);
  v4 = v6;
  *(_QWORD *)(a1 + 8) = v3;
  if (v4 < 0)
    operator delete(__p[0]);
}

uint64_t altitude::BundleLoader::createAndQueueFileRequest@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, karo::Job **a3@<X8>)
{
  karo::AsyncFileLoader::createAndQueueFileRequest(a1, a2, a3);
  return karo::Job::step(*a3);
}

void std::__shared_ptr_pointer<altitude::BundleLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::BundleLoadJob>,std::allocator<altitude::BundleLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::BundleLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::BundleLoadJob>,std::allocator<altitude::BundleLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::BundleLoadJob::~BundleLoadJob(void **this)
{
  *this = off_1E42C4020;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  *this = off_1E42C2C58;
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  karo::Job::~Job((karo::Job *)this);
}

{
  *this = off_1E42C4020;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  *this = off_1E42C2C58;
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  karo::Job::~Job((karo::Job *)this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::BundleLoadJob::jobStep(altitude::BundleLoadJob *this)
{
  uint64_t MemFile;
  BOOL v3;
  char v4[24];
  void *__p[2];
  char v6;

  v4[23] = 8;
  strcpy(v4, "bundle:/");
  karo::util::Path::removePrefix(__p, (uint64_t)this + 216, (uint64_t)v4);
  MemFile = karo::Loader::getMemFile(*(_QWORD *)(*((_QWORD *)this + 1) + 80), (uint64_t)__p, (_DWORD *)this + 62);
  *((_QWORD *)this + 30) = MemFile;
  if (MemFile)
    v3 = *((_DWORD *)this + 62) != 0;
  else
    v3 = 0;
  *((_BYTE *)this + 252) = v3;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if (v6 < 0)
    operator delete(__p[0]);
}

uint64_t altitude::BundleLoadJob::succeeded(altitude::BundleLoadJob *this)
{
  return *((unsigned __int8 *)this + 252);
}

uint64_t altitude::BundleLoadJob::getDataSize(altitude::BundleLoadJob *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t altitude::BundleLoadJob::getData(altitude::BundleLoadJob *this)
{
  return *((_QWORD *)this + 30);
}

void md::realistic::LabelRenderLayer::~LabelRenderLayer(md::realistic::LabelRenderLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_1E42AFF58;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = off_1E428C468;
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_1E42AFF58;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = off_1E428C468;
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::realistic::LabelRenderLayer::layout(md::realistic::LabelRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *result;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  md::realistic::LabelRenderLayer *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  _QWORD v73[3];
  _QWORD *v74;
  _QWORD v75[3];
  _QWORD *v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v75[0] = &off_1E42D5530;
  v75[1] = a2;
  v76 = v75;
  v73[0] = &off_1E42D5578;
  v73[1] = a2;
  v74 = v73;
  v78 = v77;
  v77[0] = &off_1E42D5578;
  v77[1] = a2;
  std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v75);
  v4 = v74;
  if (v74 == v73)
  {
    v5 = 4;
    v4 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v76;
  if (v76 == v75)
  {
    v7 = 4;
    v6 = v75;
    goto LABEL_10;
  }
  if (v76)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v70 = this;
  v8 = *((_QWORD *)this + 9);
  if (v8)
  {
    v9 = *((_QWORD *)this + 5);
    v10 = *(_QWORD *)(v9 + 144);
    v11 = *(unsigned int *)(*(_QWORD *)(v9 + 136) + 88);
    v12 = *(_QWORD *)(*((_QWORD *)a2 + 92) + 16);
    v13 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = *v14;
        v17 = *(_QWORD *)(*v14 + 352);
        if (!v17)
        {
          v18 = operator new();
          *(_DWORD *)(v18 + 8) = 3;
          *(_QWORD *)(v18 + 40) = 0;
          *(_QWORD *)(v18 + 32) = 0;
          *(_QWORD *)(v18 + 16) = 0;
          *(_QWORD *)(v18 + 24) = v18 + 32;
          *(_OWORD *)(v18 + 48) = 0u;
          *(_OWORD *)(v18 + 64) = 0u;
          *(_QWORD *)v18 = &off_1E42C5FC8;
          *(_WORD *)(v18 + 80) = 257;
          *(_BYTE *)(v18 + 82) = 0;
          *(_OWORD *)(v18 + 88) = 0u;
          *(_OWORD *)(v18 + 104) = 0u;
          *(_QWORD *)(v16 + 352) = v18;
          altitude::TileComponent::onAttach(v18, v16);
          v17 = *(_QWORD *)(v16 + 352);
        }
        (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v17 + 80))(v17, a2, v12, *(_QWORD *)(*((_QWORD *)a2 + 92) + 24), v11, v10);
        ++v14;
      }
      while (v14 != v15);
    }
  }
  v19 = *((_QWORD *)v70 + 6);
  v20 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v70 + 5) + 136) + 88);
  v22 = *(_QWORD **)v19;
  v21 = *(std::__shared_weak_count **)(v19 + 8);
  v23 = *(_QWORD **)v19;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v23 = *(_QWORD **)v19;
  }
  *((_BYTE *)v23 + 48) = 0;
  v26 = (uint64_t *)v22[3];
  v27 = v22 + 4;
  if (v26 != v22 + 4)
  {
    do
    {
      v58 = *(_QWORD *)(v26[6] + 504);
      if (!v58 || *(_QWORD *)(v58 + 8) == -1)
      {
        v61 = (uint64_t *)v26[1];
        v62 = v61;
        v63 = v26;
        if (v61)
        {
          do
          {
            v60 = v62;
            v62 = (uint64_t *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v63[2];
            v53 = *v60 == (_QWORD)v63;
            v63 = v60;
          }
          while (!v53);
        }
        v64 = v26;
        if (v61)
        {
          do
          {
            v65 = v61;
            v61 = (uint64_t *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v65 = (uint64_t *)v64[2];
            v53 = *v65 == (_QWORD)v64;
            v64 = v65;
          }
          while (!v53);
        }
        if ((uint64_t *)v22[3] == v26)
          v22[3] = v65;
        v66 = (uint64_t *)v22[4];
        --v22[5];
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v66, v26);
        v67 = (std::__shared_weak_count *)v26[7];
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        operator delete(v26);
      }
      else
      {
        v59 = (uint64_t *)v26[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v26[2];
            v53 = *v60 == (_QWORD)v26;
            v26 = v60;
          }
          while (!v53);
        }
      }
      v26 = v60;
    }
    while (v60 != v27);
  }
  if (*(_QWORD *)(v19 + 64))
  {
    v28 = *(_QWORD **)(v19 + 48);
    while (v28)
    {
      v54 = v28;
      v28 = (_QWORD *)*v28;
      v55 = (std::__shared_weak_count *)v54[3];
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v19 + 56) + 40))(*(_QWORD *)(v19 + 56), v54, 32);
    }
    *(_QWORD *)(v19 + 48) = 0;
    v29 = *(_QWORD *)(v19 + 32);
    if (v29)
    {
      for (i = 0; i != v29; ++i)
        *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * i) = 0;
    }
    *(_QWORD *)(v19 + 64) = 0;
  }
  v31 = (uint64_t *)v22[3];
  if (v31 != v27)
  {
    do
    {
      v36 = v31[6];
      v37 = *(std::__shared_weak_count **)(v36 + 504);
      if (v37 && (v38 = std::__shared_weak_count::lock(v37)) != 0)
      {
        v39 = v38;
        v40 = *(_QWORD *)(v36 + 496);
        if (v40)
          v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 56))(v40);
        else
          v41 = 0;
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (v43)
        {
          if (v41 == v20)
            goto LABEL_49;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
          if (v41 == v20)
          {
LABEL_49:
            v44 = v31[6];
            v45 = (std::__shared_weak_count *)v31[7];
            v71 = v44;
            v72 = v45;
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>(v19 + 24, v44, (uint64_t)&v71);
            v48 = v72;
            if (v72)
            {
              v49 = (unint64_t *)&v72->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
          }
        }
      }
      else if (!v20)
      {
        goto LABEL_49;
      }
      v51 = (uint64_t *)v31[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (uint64_t *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (uint64_t *)v31[2];
          v53 = *v52 == (_QWORD)v31;
          v31 = v52;
        }
        while (!v53);
      }
      v31 = v52;
    }
    while (v52 != v27);
  }
  if (v21)
  {
    v32 = (unint64_t *)&v21->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  md::LabelManager::layout(*(_QWORD *)(v19 + 80), a2, v19 + 24);
  if (!v78)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v78 + 48))(v78);
  result = v78;
  if (v78 == v77)
  {
    v35 = 4;
    result = v77;
  }
  else
  {
    if (!v78)
      return result;
    v35 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v35))();
}

void sub_19FC3563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GlobeLabelLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5578;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5578;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GlobeLabelLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5530;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5530;
  a2[1] = v2;
  return result;
}

char *md::HikingRenderLayer::reserveStencilRange(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  char *v18;
  char *v19;
  void *v21;
  int v22;
  char *result;
  char *v24;
  unsigned __int8 *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  char *v31;
  char *v33;
  unsigned __int8 v35[4];
  int v36;
  uint64_t v37;

  v6 = *(_BYTE *)(a1 + 49) - *(_BYTE *)(a1 + 48) + 1;
  v7 = a1 + 416;
  v8 = *(char **)(a1 + 416);
  v9 = *(char **)(a1 + 424);
  if (v8 != v9)
  {
    while (*a3 != *v8 || a3[1] != v8[1])
    {
      v8 += 16;
      if (v8 == v9)
        goto LABEL_9;
    }
  }
  if (v8 == v9)
  {
LABEL_9:
    *(_WORD *)v35 = *(_WORD *)a3;
    v37 = 0;
    v8 = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert(v7, v35);
  }
  v11 = *(unsigned __int8 **)(a2 + 24);
  v12 = *v11;
  v13 = v12 + v6;
  v14 = v11[1];
  v15 = v13 > v14;
  if (v13 <= v14)
    v16 = 0;
  else
    v16 = v11 + 4;
  *((_QWORD *)v8 + 1) = v16;
  if (v15)
  {
    v12 = 1;
    *v11 = 1;
    v11[1] = v11[2];
  }
  *v11 = v12 + v6;
  v17 = v12 - *(unsigned __int8 *)(a1 + 48);
  v18 = *(char **)(a1 + 368);
  v19 = *(char **)(a1 + 376);
  if (v18 != v19)
  {
    while (*a3 != *v18 || a3[1] != v18[1])
    {
      v18 += 8;
      if (v18 == v19)
        goto LABEL_24;
    }
  }
  if (v18 == v19)
  {
LABEL_24:
    *(_WORD *)v35 = *(_WORD *)a3;
    v36 = 0;
    v18 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(a1 + 368, v35);
  }
  *((_DWORD *)v18 + 1) = v17;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = *(unsigned __int8 *)(objc_msgSend(v21, "gglDevice") + 20);

  if (v22)
  {
    result = *(char **)(a1 + 392);
    v24 = *(char **)(a1 + 400);
    if (result != v24)
    {
      while (*a3 != *result || a3[1] != result[1])
      {
        result += 8;
        if (result == v24)
          goto LABEL_34;
      }
    }
    if (result == v24)
    {
LABEL_34:
      *(_WORD *)v35 = *(_WORD *)a3;
      v36 = 0;
      result = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(a1 + 392, v35);
    }
    *((_DWORD *)result + 1) = 0;
  }
  else
  {
    v26 = *(unsigned __int8 **)(a2 + 24);
    v27 = *v26;
    v28 = v27 + 3;
    v29 = v26[1];
    if (v27 + 3 <= v29)
      v30 = 0;
    else
      v30 = v26 + 4;
    if (v28 > v29)
    {
      v27 = 1;
      *v26 = 1;
      v26[1] = v26[2];
    }
    *v26 = v27 + 3;
    result = *(char **)(a1 + 392);
    v31 = *(char **)(a1 + 400);
    if (result != v31)
    {
      while (*a3 != *result || a3[1] != result[1])
      {
        result += 8;
        if (result == v31)
          goto LABEL_49;
      }
    }
    if (result == v31)
    {
LABEL_49:
      *(_WORD *)v35 = *(_WORD *)a3;
      v36 = 0;
      result = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(a1 + 392, v35);
    }
    *((_DWORD *)result + 1) = v27;
    if (v28 > v29)
    {
      result = *(char **)(a1 + 416);
      v33 = *(char **)(a1 + 424);
      if (result != v33)
      {
        while (*a3 != *result || a3[1] != result[1])
        {
          result += 16;
          if (result == v33)
            goto LABEL_59;
        }
      }
      if (result == v33)
      {
LABEL_59:
        *(_WORD *)v35 = *(_WORD *)a3;
        v37 = 0;
        result = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert(v7, v35);
      }
      *((_QWORD *)result + 1) = v30;
    }
  }
  return result;
}

void sub_19FC35D70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert(uint64_t a1, unsigned __int8 *a2)
{
  char *v4;
  char *v5;
  char *result;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  result = v4;
  if (v4 != v5)
  {
    result = v4;
    while (*a2 != *result || a2[1] != result[1])
    {
      result += 16;
      if (result == v5)
        goto LABEL_10;
    }
  }
  if (result == v5)
  {
LABEL_10:
    v8 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 >= v8)
    {
      v10 = (v5 - v4) >> 4;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60)
        abort();
      v12 = v8 - (_QWORD)v4;
      if (v12 >> 3 > v11)
        v11 = v12 >> 3;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v14 = (char *)operator new(16 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[16 * v10];
      *(_OWORD *)v15 = *(_OWORD *)a2;
      v9 = v15 + 16;
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v5 - 1);
          v15 -= 16;
          v5 -= 16;
        }
        while (v5 != v4);
        v4 = *(char **)a1;
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = &v14[16 * v13];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)a2;
      v9 = v5 + 16;
    }
    *(_QWORD *)(a1 + 8) = v9;
    return (char *)(v9 - 1);
  }
  return result;
}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CE540;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CE540;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::operator()(uint64_t a1, ggl::RenderItem **a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  ggl::RenderItem *v5;
  int v6;
  uint64_t result;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  v5 = *a2;
  v6 = *a3;
  *((_QWORD *)v5 + 6) = 0;
  if (v6)
  {
    result = *v3;
    return ggl::CommandBuffer::pushRenderItem(result, v5);
  }
  result = *v4;
  if (*v4)
    return ggl::CommandBuffer::pushRenderItem(result, v5);
  return result;
}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE4F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE4B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE4B0;
  a2[1] = v2;
  return result;
}

_QWORD *md::HikingRenderLayer::HikingRenderLayer(_QWORD *a1, uint64_t a2, void *a3, int a4)
{
  id v7;
  md::TrailJunctionRenderable::SharedResources *v8;
  uint64_t v9;
  id v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;

  v7 = a3;
  md::RoadRenderLayer::RoadRenderLayer((uint64_t)a1, a2, v7, a4, 0, 1);
  *a1 = &off_1E4292530;
  a1[64] = 0;
  v8 = (md::TrailJunctionRenderable::SharedResources *)operator new();
  v9 = objc_msgSend(v7, "shaderLibrary");
  v10 = *(id *)(a2 + 104);
  md::TrailJunctionRenderable::SharedResources::SharedResources(v8, *(const ggl::StandardLibrary **)(*(_QWORD *)(v9 + 80) + 296), *(const RenderTargetFormat **)(*(_QWORD *)(v9 + 80) + 304), (__int128 *)objc_msgSend(v10, "format"), 0);
  v11 = (uint64_t *)a1[64];
  a1[64] = v8;
  if (v11)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v11[15]);
    v12 = (std::__shared_weak_count *)v11[2];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *v11;
    *v11 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    MEMORY[0x1A1AF4E00](v11, 0x1020C40455D1DCFLL);
  }

  return a1;
}

void sub_19FC36154(_Unwind_Exception *a1)
{
  void *v1;
  md::RoadRenderLayer *v2;
  uint64_t v3;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;

  MEMORY[0x1A1AF4E00](v3, 0x1020C40455D1DCFLL);
  v5 = (uint64_t *)*((_QWORD *)v2 + 64);
  *((_QWORD *)v2 + 64) = 0;
  if (v5)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v5[15]);
    v6 = (std::__shared_weak_count *)v5[2];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *v5;
    *v5 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    MEMORY[0x1A1AF4E00](v5, 0x1020C40455D1DCFLL);
  }
  md::RoadRenderLayer::~RoadRenderLayer(v2);

  _Unwind_Resume(a1);
}

void md::TransitLineLabelFeature::~TransitLineLabelFeature(md::TransitLineLabelFeature *this)
{
  md::TransitLineLabelFeature::~TransitLineLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  geo::read_write_lock *v19;
  const char *v20;
  malloc_zone_t *zone;
  uint64_t v22;

  *(_QWORD *)this = &off_1E429FA38;
  v2 = *((_QWORD *)this + 85);
  if (v2)
  {
    v3 = *((_QWORD *)this + 86);
    v4 = *((_QWORD *)this + 85);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 85);
    }
    *((_QWORD *)this + 86) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 88) + 40))(*((_QWORD *)this + 88), v4, *((_QWORD *)this + 87) - v4);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 608));
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)this + 568, *((_QWORD **)this + 72));
  v8 = *((_QWORD *)this + 67);
  if (v8)
  {
    *((_QWORD *)this + 68) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 70) + 40))(*((_QWORD *)this + 70), v8, *((_QWORD *)this + 69) - v8);
  }
  v9 = *((_QWORD *)this + 63);
  if (v9)
  {
    v10 = *((_QWORD *)this + 64);
    v11 = *((_QWORD *)this + 63);
    if (v10 != v9)
    {
      v12 = *((_QWORD *)this + 64);
      do
      {
        v15 = *(_QWORD *)(v12 - 8);
        v12 -= 8;
        v14 = v15;
        if (v15)
        {
          if ((*(_QWORD *)v14)-- == 1)
          {
            v17 = *(_QWORD *)(v14 + 16);
            if (v17)
            {
              *(_QWORD *)(v14 + 24) = v17;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 40) + 40))(*(_QWORD *)(v14 + 40), v17, *(_QWORD *)(v14 + 32) - v17);
            }
            {
              v22 = v9;
              v18 = operator new();
              *(_QWORD *)(v18 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v18 + 24) = "VectorKitLabels";
              *(_OWORD *)(v18 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v18 = &off_1E42B5668;
              *(_QWORD *)(v18 + 8) = "VectorKitLabels";
              *(_OWORD *)(v18 + 72) = 0u;
              *(_OWORD *)(v18 + 88) = 0u;
              *(_OWORD *)(v18 + 104) = 0u;
              *(_OWORD *)(v18 + 120) = 0u;
              *(_OWORD *)(v18 + 136) = 0u;
              *(_OWORD *)(v18 + 152) = 0u;
              *(_OWORD *)(v18 + 168) = 0u;
              *(_OWORD *)(v18 + 184) = 0u;
              *(_OWORD *)(v18 + 200) = 0u;
              *(_OWORD *)(v18 + 216) = 0u;
              *(_OWORD *)(v18 + 232) = 0u;
              *(_QWORD *)(v18 + 248) = 0;
              *(_OWORD *)(v18 + 56) = 0u;
              v19 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v18 + 56), 0);
              if ((_DWORD)v19)
                geo::read_write_lock::logFailure(v19, (uint64_t)"initialization", v20);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v18 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v18 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v18;
              v9 = v22;
            }
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(v10 - 8), 56);
            *(_QWORD *)(v10 - 8) = 0;
          }
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *((_QWORD *)this + 63);
    }
    *((_QWORD *)this + 64) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 66) + 40))(*((_QWORD *)this + 66), v11, *((_QWORD *)this + 65) - v11);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 440));
  md::LineLabelFeature::~LineLabelFeature(this);
}

uint64_t md::TransitLineLabelFeature::newRootPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unsigned __int8 *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  mdm::Allocator *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  BOOL v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  const md::LabelTextStyleGroup *v84;
  char v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  float v121;
  mdm::Allocator *v122;
  uint64_t v123;
  int v124;
  char v125;
  unsigned __int8 v126;
  __int16 v127;
  mdm::Allocator *v128;
  unsigned int v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  BOOL v144;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v149;
  uint64_t *v150;
  unsigned int v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t *v154;
  unsigned int v155;
  unsigned int v156;
  _BYTE *v157;
  unsigned int v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  mdm::Allocator *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  BOOL v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t i;
  uint64_t v177;
  int v178;
  uint64_t v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  const md::LabelTextStyleGroup *v182;
  char v183;
  uint64_t v184;
  float v185;
  mdm::Allocator *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  char v190;
  char v191;
  __int16 v192;
  mdm::Allocator *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  uint64_t *v205;
  uint64_t *v206;
  unsigned int v207;
  uint64_t v208;
  unsigned __int8 *v209;
  std::__shared_weak_count *v210;
  _BYTE v211[3];
  __int16 v212;
  uint64_t v213[2];
  uint64_t v214;
  std::__shared_weak_count *v215;
  uint64_t *v216;
  uint64_t v217[3];
  uint64_t v218;
  std::__shared_weak_count *v219;
  uint64_t v220;
  mdm::Allocator *v221;
  _QWORD *v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;

  if (*(_QWORD *)(a1 + 536) == *(_QWORD *)(a1 + 544))
    return 0;
  v9 = a1 + 232;
  v10 = *(_QWORD *)(a1 + 232);
  v11 = *(_DWORD *)(a3 + 48);
  do
  {
    v12 = *(_DWORD *)(v10 + 32);
    v13 = v12 >= v11;
    if (v12 >= v11)
      v14 = (uint64_t *)v10;
    else
      v14 = (uint64_t *)(v10 + 8);
    if (v13)
      v9 = v10;
    v10 = *v14;
  }
  while (*v14);
  v16 = *(unsigned __int8 **)(v9 + 40);
  v15 = *(std::__shared_weak_count **)(v9 + 48);
  v209 = v16;
  v210 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = v16[9];
  if ((v19 - 2) >= 2)
  {
    if (v19 == 1)
    {
      v57 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 128))(v16);
      v58 = *(_QWORD **)(a1 + 576);
      if (v58)
      {
        v59 = a1 + 576;
        do
        {
          v60 = v58[4];
          v61 = v60 >= v57;
          if (v60 >= v57)
            v62 = v58;
          else
            v62 = v58 + 1;
          if (v61)
            v59 = (uint64_t)v58;
          v58 = (_QWORD *)*v62;
        }
        while (*v62);
        if (v59 != a1 + 576 && *(_QWORD *)(v59 + 32) <= v57)
        {
          v63 = *(_QWORD *)(v59 + 40);
          if (v63)
          {
            v64 = *(unsigned __int16 *)(v63 + 42);
            if (v64 == 0xFFFF)
              v64 = *(unsigned __int16 *)(a1 + 600);
            v65 = v64;
            v66 = *(_QWORD *)(v63 + 8);
            v67 = *(unsigned int *)(v66 + 20 * v64 + 16);
            if ((_DWORD)v67 == -1)
              v67 = *(unsigned int *)(*(_QWORD *)(a1 + 536)
                                    + 32 * *(unsigned __int16 *)(v66 + 20 * v65 + 14)
                                    + 24);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 4) <= v67
              || (v68 = *(_QWORD *)(a1 + 96), v67 >= (*(_QWORD *)(a1 + 104) - v68) >> 4))
            {
              v69 = (uint64_t *)(a1 + 80);
            }
            else
            {
              v69 = (uint64_t *)(v68 + 16 * v67);
            }
            v70 = *v69;
            if (*(float *)(*v69 + 236) != 0.0)
            {
              v78 = *(_QWORD *)(v70 + 264);
              if (!v78)
              {
                v79 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(v70);
                v78 = *v79;
                *(_QWORD *)(v70 + 264) = *v79;
              }
              if (*(_BYTE *)(v78 + 56))
              {
                if (*(_BYTE *)(v78 + 60))
                {
                  v80 = *(unsigned __int8 *)(v70 + 144);
                  if (v80 != 1)
                  {
                    v144 = v80 == 3;
                    v81 = *(_QWORD *)(a1 + 536) + 32 * v65;
                    v82 = (unsigned __int8 *)(v81 + 9);
                    v83 = (unsigned __int8 *)(v81 + 8);
                    if (!v144)
                      v83 = v82;
                    v84 = (const md::LabelTextStyleGroup *)*v83;
                    if ((_DWORD)v84 != 255)
                    {
                      v85 = *(_BYTE *)(a3 + 404);
                      v86 = *(_QWORD *)(v70 + 280);
                      if (v86)
                      {
                        if (vabds_f32(*(float *)(v86 + 8), *(float *)(v70 + 104)) >= 0.01)
                        {
                          md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v70, v86, 0);
                          v86 = *(_QWORD *)(v70 + 280);
                        }
                      }
                      else
                      {
                        v86 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v70, 0);
                        *(_QWORD *)(v70 + 280) = v86;
                      }
                      md::LabelFeature::textDataForZoom((md::LabelFeature *)&v218, (md::LabelFeature *)a1, v84, *(_QWORD *)v86);
                      v207 = v65;
                      v104 = v218;
                      if (v218)
                      {
                        v105 = (std::__shared_weak_count *)operator new(0xB0uLL);
                        v105->__shared_owners_ = 0;
                        v105->__shared_weak_owners_ = 0;
                        v105->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
                        v216 = (uint64_t *)md::LabelText::LabelText((uint64_t)&v105[1], v104, (uint64_t)v219, v85);
                        v217[0] = (uint64_t)v105;
                        v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 64));
                        if (!v56)
                          goto LABEL_142;
                        v106 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 128))(v16);
                        md::LabelExternalObjectsModerator::externalTransitLink(&v224, v56, v106);
                        if (v224
                          && (v107 = atomic_load((unsigned __int8 *)(v224 + 104)), (v107 & 1) != 0)
                          && (v108 = atomic_load((unsigned __int8 *)(v224 + 105)), (v108 & 1) != 0))
                        {
                          md::LabelExternalTransitLink::linkData((md::LabelExternalTransitLink *)&v222, v224);
                          v112 = v222;
                          if (v222
                            && (v113 = v222[1], *v222 != v113)
                            && (v114 = (v113 - *v222) >> 4,
                                v114 == (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 5)
                            && (v116 = *(_QWORD *)(v63 + 8),
                                v115 = *(_QWORD *)(v63 + 16),
                                0xCCCCCCCCCCCCCCCDLL * ((v115 - v116) >> 2) == v114)
                            && *(_BYTE *)(v116 + 20 * v207 + 5))
                          {
                            if (v115 != v116)
                            {
                              v117 = 0;
                              if (v114 <= 1)
                                v114 = 1;
                              v118 = 12;
                              do
                              {
                                v119 = *v112 + v117;
                                v120 = (_BYTE *)(*(_QWORD *)(v63 + 8) + v118);
                                *(v120 - 3) = *(_BYTE *)(v119 + 4);
                                *(v120 - 2) = *(_BYTE *)(v119 + 5);
                                *(v120 - 1) = *(_BYTE *)(v119 + 6);
                                *v120 = *(_BYTE *)(v119 + 7);
                                *((_DWORD *)v120 - 3) = *(_DWORD *)v119;
                                v118 += 20;
                                v117 += 16;
                                --v114;
                              }
                              while (v114);
                            }
                            v121 = md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(a1, v63);
                            v123 = mdm::Allocator::instance(v122);
                            v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v123 + 16))(v123, 1512, 8);
                            v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
                            if (*a5)
                            {
                              v125 = 0;
                              v126 = 0;
                              v127 = 9;
                            }
                            else
                            {
                              v125 = *(_BYTE *)(a3 + 317);
                              v126 = *(_BYTE *)(a3 + 318);
                              v127 = *(_WORD *)(a3 + 320);
                            }
                            *(_WORD *)((char *)&v214 + 3) = v127;
                            LOBYTE(v214) = v125;
                            *(_WORD *)((char *)&v214 + 1) = v126;
                            md::TransitLineTextLabelPart::TransitLineTextLabelPart(v56, v124, &v216, a2, a3, v70, &v209, (uint64_t)&v214, v121, a5, &v224, v207);
                          }
                          else
                          {
                            v56 = 0;
                          }
                          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v222);
                        }
                        else
                        {
                          v56 = 0;
                        }
                        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v224);
                        v105 = (std::__shared_weak_count *)v217[0];
                        if (v217[0])
                        {
LABEL_142:
                          v109 = (unint64_t *)&v105->__shared_owners_;
                          do
                            v110 = __ldaxr(v109);
                          while (__stlxr(v110 - 1, v109));
                          if (!v110)
                          {
                            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                            std::__shared_weak_count::__release_weak(v105);
                          }
                        }
                      }
                      else
                      {
                        v56 = 0;
                      }
                      v75 = v219;
                      if (!v219)
                        goto LABEL_73;
                      v111 = (unint64_t *)&v219->__shared_owners_;
                      do
                        v77 = __ldaxr(v111);
                      while (__stlxr(v77 - 1, v111));
                      goto LABEL_85;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_72;
  }
  v20 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 128))(v16);
  v21 = *(_QWORD **)(a1 + 576);
  if (!v21)
    goto LABEL_72;
  v22 = a1 + 576;
  do
  {
    v23 = v21[4];
    v24 = v23 >= v20;
    if (v23 >= v20)
      v25 = v21;
    else
      v25 = v21 + 1;
    if (v24)
      v22 = (uint64_t)v21;
    v21 = (_QWORD *)*v25;
  }
  while (*v25);
  if (v22 == a1 + 576
    || *(_QWORD *)(v22 + 32) > v20
    || (v26 = *(_QWORD *)(v22 + 40)) == 0
    || (v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 168) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 168) + 64))) == 0)
  {
LABEL_72:
    v56 = 0;
    goto LABEL_73;
  }
  v28 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v16 + 128))(v16);
  v29 = (std::mutex *)(v27 + 304);
  std::mutex::lock((std::mutex *)(v27 + 304));
  v30 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(v27 + 192), v28);
  if (!v30)
  {
    v224 = 0;
    v225 = 0;
LABEL_80:
    std::mutex::unlock(v29);
LABEL_81:
    v56 = 0;
    goto LABEL_82;
  }
  v31 = v30;
  v224 = 0;
  v225 = 0;
  v32 = (std::__shared_weak_count *)v30[4];
  if (!v32)
    goto LABEL_80;
  v225 = std::__shared_weak_count::lock(v32);
  if (!v225)
    goto LABEL_80;
  v33 = v31[3];
  v224 = v33;
  std::mutex::unlock(v29);
  if (!v33)
    goto LABEL_81;
  v34 = atomic_load((unsigned __int8 *)(v33 + 104));
  if ((v34 & 1) == 0)
    goto LABEL_81;
  v35 = atomic_load((unsigned __int8 *)(v33 + 105));
  if ((v35 & 1) == 0)
    goto LABEL_81;
  std::mutex::lock((std::mutex *)(v224 + 40));
  v37 = *(_QWORD **)(v224 + 24);
  v36 = *(std::__shared_weak_count **)(v224 + 32);
  v222 = v37;
  v223 = v36;
  if (v36)
  {
    v38 = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  std::mutex::unlock((std::mutex *)(v224 + 40));
  if (v37
    && (v41 = v37[1], *v37 != v41)
    && (v42 = (v41 - *v37) >> 4, v42 == (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 5)
    && (v43 = *(_QWORD *)(v26 + 8), v44 = *(_QWORD *)(v26 + 16), 0xCCCCCCCCCCCCCCCDLL * ((v44 - v43) >> 2) == v42))
  {
    v197 = v26;
    if (v44 != v43)
    {
      v45 = 0;
      if (v42 <= 1)
        v42 = 1;
      v46 = 12;
      do
      {
        v47 = *v37 + v45;
        v48 = (_BYTE *)(*(_QWORD *)(v26 + 8) + v46);
        *(v48 - 3) = *(_BYTE *)(v47 + 4);
        *(v48 - 2) = *(_BYTE *)(v47 + 5);
        *(v48 - 1) = *(_BYTE *)(v47 + 6);
        *v48 = *(_BYTE *)(v47 + 7);
        *((_DWORD *)v48 - 3) = *(_DWORD *)v47;
        v46 += 20;
        v45 += 16;
        --v42;
      }
      while (v42);
    }
    v205 = (uint64_t *)(v26 + 8);
    v201 = mdm::Allocator::instance(v40);
    v49 = *(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536);
    if (v49)
    {
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = v49 >> 5;
      if (v54 <= 1)
        v55 = 1;
      else
        v55 = v54;
      while (1)
      {
        if (*(_WORD *)(*(_QWORD *)(a1 + 536) + 32 * v50 + 12))
        {
          if ((unint64_t)v52 >= v53)
          {
            v90 = ((uint64_t)v52 - v51) >> 3;
            v91 = v90 + 1;
            v206 = (uint64_t *)v51;
            if ((unint64_t)(v90 + 1) >> 61)
              abort();
            v92 = v53 - v51;
            if (v92 >> 2 > v91)
              v91 = v92 >> 2;
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
              v53 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v53 = v91;
            if (v53)
            {
              v93 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v201 + 16))(v201, 8 * v53, 8);
              v94 = (uint64_t *)(v93 + 8 * v90);
              v53 = v93 + 8 * v53;
              if (v93)
                *v94 = v50;
            }
            else
            {
              v94 = (uint64_t *)(8 * v90);
            }
            v95 = v94;
            if (v52 == v206)
              goto LABEL_124;
            v96 = (char *)v52 - (char *)v206 - 8;
            if (v96 < 0x138
              || (uint64_t *)((char *)v94 - (v96 & 0xFFFFFFFFFFFFFFF8) - 8) > v94 - 1
              || (uint64_t *)((char *)v52 - (v96 & 0xFFFFFFFFFFFFFFF8) - 8) > v52 - 1
              || (unint64_t)((char *)v52 - (char *)v94) < 0x20)
            {
              v97 = v52;
              v95 = v94;
            }
            else
            {
              v99 = (v96 >> 3) + 1;
              v97 = &v52[-(v99 & 0x3FFFFFFFFFFFFFFCLL)];
              v100 = v94 - 2;
              v101 = v52 - 2;
              v102 = v99 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v103 = *(_OWORD *)v101;
                *((_OWORD *)v100 - 1) = *((_OWORD *)v101 - 1);
                *(_OWORD *)v100 = v103;
                v100 -= 4;
                v101 -= 4;
                v102 -= 4;
              }
              while (v102);
              v95 = &v94[-(v99 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_124;
            }
            do
            {
              v98 = *--v97;
              *--v95 = v98;
            }
            while (v97 != v206);
LABEL_124:
            v52 = v94 + 1;
            if (v206)
              (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v201 + 40))(v201, v206, v92);
            v51 = (uint64_t)v95;
            goto LABEL_105;
          }
          if (v52)
            *v52 = v50;
          ++v52;
        }
LABEL_105:
        if (++v50 == v55)
          goto LABEL_166;
      }
    }
    v53 = 0;
    v52 = 0;
    v51 = 0;
LABEL_166:
    v199 = v53;
    v128 = (mdm::Allocator *)std::sort[abi:nn180100]<std::__wrap_iter<unsigned long *>,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0>(v51, v52, a1, (uint64_t)v205);
    v129 = *(unsigned __int16 *)(v197 + 42);
    if (v129 == 0xFFFF)
      v129 = *(unsigned __int16 *)(a1 + 600);
    v130 = *(float *)(*v205 + 20 * v129);
    v196 = v129;
    v204 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 536) + 32 * v129 + 9);
    v218 = 0;
    v219 = 0;
    v220 = 0;
    v221 = (mdm::Allocator *)mdm::Allocator::instance(v128);
    v217[0] = 0;
    v217[1] = mdm::Allocator::instance(v221);
    v217[2] = 0;
    v216 = v217;
    v131 = (uint64_t)v52 - v51;
    if (v52 == (uint64_t *)v51)
    {
      std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v216, v217[0]);
      v56 = 0;
    }
    else
    {
      v208 = v51;
      v132 = 0;
      v133 = v131 >> 3;
      if (v133 <= 1)
        v133 = 1;
      v203 = v133;
      do
      {
        v134 = *(_QWORD *)(v208 + 8 * v132);
        v135 = *(_QWORD *)(a1 + 536);
        v136 = *v205;
        v137 = *v205 + 20 * v134;
        v138 = *(unsigned int *)(v137 + 16);
        if ((_DWORD)v138 == -1)
          v138 = *(unsigned int *)(v135 + 32 * *(unsigned __int16 *)(v136 + 20 * v134 + 14) + 24);
        v139 = (uint64_t *)(a1 + 80);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 4) > v138)
        {
          v140 = *(_QWORD *)(a1 + 96);
          v141 = *(_QWORD *)(a1 + 104) - v140;
          v142 = (uint64_t *)(v140 + 16 * v138);
          if (v138 >= v141 >> 4)
            v139 = (uint64_t *)(a1 + 80);
          else
            v139 = v142;
        }
        v143 = (_QWORD *)*v139;
        v144 = *(float *)v137 == v130 || *(unsigned __int8 *)(v135 + 32 * v134 + 9) == v204;
        if (v144 && v143 != 0)
        {
          v146 = v143[33];
          if (!v146)
          {
            v147 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*v139);
            v146 = *v147;
            v143[33] = *v147;
          }
          if (*(_BYTE *)(v146 + 56))
          {
            if (*(_BYTE *)(v146 + 58) && *(_BYTE *)(v136 + 20 * v134 + 5) != 0)
            {
              v200 = *(unsigned __int16 *)(v135 + 32 * v134 + 10);
              v198 = *(_QWORD *)(v135 + 32 * v134);
              v202 = *(_QWORD *)(a1 + 352);
              v149 = v143[37];
              if (!v149)
              {
                v150 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)v143, 0);
                v149 = *v150;
                v143[37] = *v150;
              }
              switch(*(_BYTE *)(v149 + 89))
              {
                case 0:
                case 1:
                case 3:
                  v149 = v136 + 20 * v134;
                  v151 = v200;
                  v152 = v202;
                  v153 = (_BYTE *)(v202 + 48 * v200);
                  v153[40] = *(_BYTE *)(v149 + 9);
                  v153[41] = *(_BYTE *)(v149 + 10);
                  v153[42] = *(_BYTE *)(v149 + 11);
                  LOBYTE(v149) = *(_BYTE *)(v149 + 12);
                  goto LABEL_201;
                case 2:
                  v151 = v200;
                  v152 = v202;
                  v159 = (_BYTE *)(v202 + 48 * v200);
                  v159[40] = *(_BYTE *)(v149 + 72);
                  v159[41] = *(_BYTE *)(v149 + 73);
                  v159[42] = *(_BYTE *)(v149 + 74);
                  LOBYTE(v149) = *(_BYTE *)(v149 + 75);
                  goto LABEL_201;
                case 4:
                  v149 = v143[34];
                  if (!v149)
                  {
                    v154 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)v143);
                    v149 = *v154;
                    v143[34] = *v154;
                  }
                  v155 = *(_DWORD *)(v149 + 65);
                  v156 = v155 >> 8;
                  v151 = v200;
                  v152 = v202;
                  v157 = (_BYTE *)(v202 + 48 * v200);
                  v157[40] = v155;
                  v158 = HIWORD(v155);
                  LODWORD(v149) = HIBYTE(v155);
                  v157[41] = v156;
                  v157[42] = v158;
LABEL_201:
                  *(_BYTE *)(v152 + 48 * v151 + 43) = v149;
                  break;
                default:
                  break;
              }
              md::LabelStyle::shieldIcon(&v214, (uint64_t)v143, a2, a3, (void **)(v202 + 48 * v200), 1, -1);
              if (v214)
              {
                v160 = std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::__emplace_unique_key_args<md::LabelShieldEntry,md::LabelShieldEntry const&>(&v216, (void **)(v202 + 48 * v200), (__int128 *)(v202 + 48 * v200));
                if ((v160 & 1) != 0)
                {
                  v161 = mdm::Allocator::instance((mdm::Allocator *)v160);
                  v162 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161 + 16))(v161, 856, 8);
                  md::TransitShieldIconLabelPart::TransitShieldIconLabelPart(v162, &v214, (uint64_t)v143, &v209, v198, &v224, v134, (_DWORD *)(v202 + 48 * v200 + 40));
                  v213[0] = v162;
                  if (v162)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 176))(v162, 2);
                    std::vector<md::TransitShieldIconLabelPart *,geo::StdAllocator<md::TransitShieldIconLabelPart *,mdm::Allocator>>::push_back[abi:nn180100]((uint64_t)&v218, v213);
                  }
                }
              }
              v163 = v215;
              if (v215)
              {
                v164 = (unint64_t *)&v215->__shared_owners_;
                do
                  v165 = __ldaxr(v164);
                while (__stlxr(v165 - 1, v164));
                if (!v165)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
              }
            }
          }
        }
        ++v132;
      }
      while (v132 != v203);
      v167 = v218;
      v166 = (uint64_t)v219;
      if ((std::__shared_weak_count *)v218 == v219)
      {
        v56 = 0;
      }
      else
      {
        v168 = (mdm::Allocator *)md::TransitLineLabelFeature::styleFromTransitLineSegment((_QWORD *)a1, *(_WORD *)(*v205 + 20 * v196 + 14), *(_DWORD *)(*v205 + 20 * v196 + 16));
        v169 = *(_QWORD *)v168;
        LODWORD(v170) = *(_DWORD *)(*(_QWORD *)v168 + 160);
        v171 = (v166 - v167) >> 3;
        v172 = (v170 & 0x80000000) != 0;
        if ((v170 & 0x80000000) == 0)
          v170 = v170;
        else
          v170 = -(int)v170;
        if (v172)
          v173 = 0;
        else
          v173 = v170;
        if (v171 <= v170)
          v174 = v171;
        else
          v174 = v173;
        if (v174)
        {
          v175 = mdm::Allocator::instance(v168);
          v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v175 + 16))(v175, 704, 8);
          md::MultipleShieldLabelPart::MultipleShieldLabelPart(v56, &v209);
          for (i = 0; i != v174; ++i)
            md::CompositeLabelPart::addLabelPart(v56, *(md::LabelPart **)(v167 + 8 * i));
        }
        else
        {
          v56 = 0;
        }
        while (v174 < v171)
        {
          v177 = *(_QWORD *)(v167 + 8 * v174);
          if (v177)
            (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
          ++v174;
        }
        if (v209[9] != 3)
        {
          if (v169)
          {
            v178 = *(unsigned __int8 *)(v169 + 144);
            if (v178 != 1)
            {
              v144 = v178 == 3;
              v179 = *(_QWORD *)(a1 + 536) + 32 * v196;
              v180 = (unsigned __int8 *)(v179 + 9);
              v181 = (unsigned __int8 *)(v179 + 8);
              if (!v144)
                v181 = v180;
              v182 = (const md::LabelTextStyleGroup *)*v181;
              if ((_DWORD)v182 != 255)
              {
                v183 = *(_BYTE *)(a3 + 404);
                v184 = md::LabelStyle::textStyleGroup(v169);
                md::LabelFeature::textDataForZoom((md::LabelFeature *)&v214, (md::LabelFeature *)a1, v182, v184);
                if (v214)
                {
                  std::make_shared[abi:nn180100]<md::LabelText,std::shared_ptr<md::TextDataString> const&,unsigned char const&,void>(v213, v214, (uint64_t)v215, v183);
                  if (v213[0])
                  {
                    v185 = md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(a1, v197);
                    v187 = mdm::Allocator::instance(v186);
                    v188 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 1512, 8);
                    v189 = (unsigned __int8 *)v188;
                    if (*a5)
                    {
                      v190 = 0;
                      v191 = 0;
                      v192 = 9;
                    }
                    else
                    {
                      v190 = *(_BYTE *)(a3 + 317);
                      v191 = *(_BYTE *)(a3 + 318);
                      v192 = *(_WORD *)(a3 + 320);
                    }
                    v212 = v192;
                    v211[0] = v190;
                    v211[1] = v191;
                    v211[2] = 0;
                    v193 = (mdm::Allocator *)md::TransitLineTextLabelPart::TransitLineTextLabelPart(v188, 9, v213, a2, a3, v169, &v209, (uint64_t)v211, v185, a5, &v224, v196);
                    if (v56)
                    {
                      v194 = mdm::Allocator::instance(v193);
                      v195 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v194 + 16))(v194, 720, 8);
                      md::LineTextWithAuxLabelPart::LineTextWithAuxLabelPart(v195, &v209, v189, v56);
                      v56 = v195;
                    }
                    else
                    {
                      v56 = (uint64_t)v189;
                    }
                  }
                  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v213);
                }
                std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v214);
              }
            }
          }
        }
      }
      std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v216, v217[0]);
      if (v167)
      {
        v219 = (std::__shared_weak_count *)v167;
        (*(void (**)(mdm::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v221 + 40))(v221, v167, v220 - v167);
      }
      v51 = v208;
    }
    if (v51)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v201 + 40))(v201, v51, v199 - v51);
  }
  else
  {
    v56 = 0;
  }
  v87 = v223;
  if (v223)
  {
    v88 = (unint64_t *)&v223->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
LABEL_82:
  v75 = v225;
  if (v225)
  {
    v76 = (unint64_t *)&v225->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
LABEL_85:
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_73:
  v71 = v210;
  if (v210)
  {
    v72 = (unint64_t *)&v210->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  return v56;
}

void sub_19FC371F0(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v36 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 40))(v36, v33, 720);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  v37 = *(_QWORD *)(v34 - 168);
  std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&a32, a33);
  if (v37)
  {
    *(_QWORD *)(v34 - 160) = v37;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v34 - 144) + 40))(*(_QWORD *)(v34 - 144), v37, *(_QWORD *)(v34 - 152) - v37);
  }
  if (a24)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a18 + 40))(a18, a24, a16 - a24);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 - 136);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v34 - 120);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void md::TransitLineLabelFeature::updateText(md::TransitLineLabelFeature *this, _QWORD *a2, int a3)
{
  _QWORD *v3;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  _QWORD **v27;
  std::__shared_weak_count *v28;
  const char *v29;
  unsigned __int8 v30;
  size_t v31;
  size_t v32;
  __int128 *p_dst;
  unsigned __int8 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unsigned __int8 v40;
  size_t v41;
  size_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int16 NativeShieldCount;
  unint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::mutex *v86;
  _QWORD *v87;
  uint64_t *v88;
  int v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  _WORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *__src;
  uint64_t *v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  __int128 __dst;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  std::__shared_weak_count *v115;
  const char *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;

  v3 = (_QWORD *)*((_QWORD *)this + 72);
  if (v3)
  {
    v6 = (uint64_t *)this;
    v7 = (_QWORD *)((char *)this + 576);
    do
    {
      v8 = v3[4];
      v9 = v8 >= (unint64_t)a2;
      if (v8 >= (unint64_t)a2)
        v10 = v3;
      else
        v10 = v3 + 1;
      if (v9)
        v7 = v3;
      v3 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != (_QWORD *)((char *)this + 576) && v7[4] <= (unint64_t)a2)
    {
      v92 = v7[5];
      if (v92)
      {
        v86 = (std::mutex *)((char *)this + 440);
        std::mutex::lock((std::mutex *)((char *)this + 440));
        v11 = v6[44];
        for (i = v6[45]; i != v11; i -= 48)
        {
          if (*(char *)(i - 25) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 24) + 40))(*(_QWORD *)(i - 24), *(_QWORD *)(i - 48), *(_QWORD *)(i - 32) & 0x7FFFFFFFFFFFFFFFLL);
        }
        v6[45] = v11;
        v13 = v6[68] - v6[67];
        if (v13)
        {
          v14 = 0;
          v89 = 0;
          v15 = v13 >> 5;
          if (v15 <= 1)
            v15 = 1;
          v90 = v15;
          v87 = v6 + 47;
          v88 = v6 + 45;
          v16 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          v91 = a3;
          v102 = v6;
          do
          {
            v17 = (uint64_t *)geo::codec::vectorTransitLineAlongLink(a2, v14);
            v18 = v6[67];
            v19 = *(_QWORD *)(v92 + 8);
            v20 = v18 + 32 * v14;
            *(_DWORD *)(v20 + 10) = 0xFFFF;
            v93 = (_WORD *)(v20 + 10);
            v94 = v19;
            {
              v78 = operator new();
              *((_QWORD *)v16 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v78, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v22 = *((_QWORD *)v16 + 299);
            v111 = 0uLL;
            v112 = 0;
            {
              v79 = operator new();
              *((_QWORD *)v16 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v79, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v113 = *((_QWORD *)v16 + 299);
            md::LabelFeature::textFromFeature(&__dst, v17, a3, (uint64_t)&v111, 0);
            *((_QWORD *)&v107 + 1) = v22;
            v97 = __dst;
            v98 = v107;
            if ((v107 & 0x8000000000000000) != 0)
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)__dst, *((unint64_t *)&__dst + 1));
            v110 = v113;
            if (SHIBYTE(v112) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v108, (void *)v111, *((unint64_t *)&v111 + 1));
            }
            else
            {
              v108 = v111;
              v109 = v112;
            }
            *(_BYTE *)(v18 + 32 * v14 + 8) = md::LineLabelFeature::textIndexForText(v6, (uint64_t)&__dst);
            if (SHIBYTE(v109) < 0)
            {
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v110 + 40))(v110, v108, v109 & 0x7FFFFFFFFFFFFFFFLL);
              if ((SBYTE7(v107) & 0x80000000) == 0)
              {
LABEL_32:
                if ((v24 & 1) != 0)
                  goto LABEL_36;
                goto LABEL_143;
              }
            }
            else if ((SBYTE7(v107) & 0x80000000) == 0)
            {
              goto LABEL_32;
            }
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v107 + 1) + 40))(*((_QWORD *)&v107 + 1), __dst, v107 & 0x7FFFFFFFFFFFFFFFLL);
            if ((v25 & 1) != 0)
              goto LABEL_36;
LABEL_143:
            {
              v80 = operator new();
              *((_QWORD *)v16 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v80, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
LABEL_36:
            v100 = *((_QWORD *)v16 + 299);
            {
              v81 = operator new();
              *((_QWORD *)v16 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v81, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v99 = *((_QWORD *)v16 + 299);
            v118 = 0;
            v119 = 0;
            geo::codec::transitLinkExtractLineInfo(a2, (unsigned __int16)v14, &v119, &v118);
            v27 = (_QWORD **)v119;
            if (v119 && v118)
            {
              v95 = v22;
              v116 = 0;
              v117 = 0;
              v114 = 0;
              v115 = 0;
              v28 = *(std::__shared_weak_count **)(v119 + 8);
              if (v28)
              {
                v115 = std::__shared_weak_count::lock(v28);
                if (v115)
                  v114 = *v27;
              }
              if (a3)
                geo::codec::transitSystemInfoGetLocalizedLabel(&v114, v118, 0, (unint64_t *)&v117, (unint64_t *)&v116);
              if (!v117 || !*v117)
                geo::codec::transitSystemInfoGetNativeLabel((uint64_t *)&v114, v118, 0, &v117, &v116);
              v29 = v116;
              if (v29)
              {
                {
                  v84 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v84, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                v31 = strlen(v29);
                if (v31 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                v32 = v31;
                a3 = v91;
                if (v31 >= 0x17)
                {
                  v37 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v31 | 7) != 0x17)
                    v37 = v31 | 7;
                  v38 = v37 + 1;
                  p_dst = (__int128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                           + 16))(mdm::Allocator::instance(void)::alloc, v37 + 1, 1);
                  *((_QWORD *)&__dst + 1) = v32;
                  *(_QWORD *)&v107 = v38 | 0x8000000000000000;
                  *(_QWORD *)&__dst = p_dst;
                }
                else
                {
                  BYTE7(v107) = v31;
                  p_dst = &__dst;
                  if (!v31)
                  {
LABEL_61:
                    *((_BYTE *)p_dst + v32) = 0;
                    goto LABEL_62;
                  }
                }
                memmove(p_dst, v29, v32);
                goto LABEL_61;
              }
              {
                v85 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v85, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              *((_QWORD *)&v107 + 1) = mdm::Allocator::instance(void)::alloc;
              BYTE7(v107) = 0;
              LOBYTE(__dst) = 0;
              a3 = v91;
LABEL_62:
              v39 = v117;
              v35 = *((_QWORD *)&__dst + 1);
              __src = (void *)__dst;
              v36 = v107;
              {
                v83 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v83, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              v105 = mdm::Allocator::instance(void)::alloc;
              if (v39)
              {
                v41 = strlen(v39);
                if (v41 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                v42 = v41;
                if (v41 >= 0x17)
                {
                  v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v41 | 7) != 0x17)
                    v44 = v41 | 7;
                  v45 = v44 + 1;
                  v43 = (__int128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                         + 16))(mdm::Allocator::instance(void)::alloc, v44 + 1, 1);
                  *((_QWORD *)&v103 + 1) = v42;
                  v104 = v45 | 0x8000000000000000;
                  *(_QWORD *)&v103 = v43;
                }
                else
                {
                  HIBYTE(v104) = v41;
                  v43 = &v103;
                  if (!v41)
                  {
LABEL_73:
                    *((_BYTE *)v43 + v42) = 0;
                    a3 = v91;
                    goto LABEL_74;
                  }
                }
                memmove(v43, v39, v42);
                goto LABEL_73;
              }
              HIBYTE(v104) = 0;
              LOBYTE(v103) = 0;
LABEL_74:
              v46 = v115;
              v22 = v95;
              if (v115)
              {
                p_shared_owners = (unint64_t *)&v115->__shared_owners_;
                do
                  v48 = __ldaxr(p_shared_owners);
                while (__stlxr(v48 - 1, p_shared_owners));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              goto LABEL_79;
            }
            {
              v82 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v35 = 0;
            v36 = 0;
            __src = 0;
            v105 = mdm::Allocator::instance(void)::alloc;
            HIBYTE(v104) = 0;
            LOBYTE(v103) = 0;
LABEL_79:
            v49 = v103;
            v50 = v104;
            *((_QWORD *)&v107 + 1) = v100;
            if ((v104 & 0x8000000000000000) != 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)v103, *((unint64_t *)&v103 + 1));
            }
            else
            {
              __dst = v103;
              *(_QWORD *)&v107 = v104;
            }
            v110 = v99;
            if (v36 < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v108, __src, v35);
            }
            else
            {
              *(_QWORD *)&v108 = __src;
              *((_QWORD *)&v108 + 1) = v35;
              v109 = v36;
            }
            *(_BYTE *)(v18 + 32 * v14 + 9) = md::LineLabelFeature::textIndexForText(v102, (uint64_t)&__dst);
            if (SHIBYTE(v109) < 0)
            {
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v110 + 40))(v110, v108, v109 & 0x7FFFFFFFFFFFFFFFLL);
              if (SBYTE7(v107) < 0)
LABEL_101:
                (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v107 + 1) + 40))(*((_QWORD *)&v107 + 1), __dst, v107 & 0x7FFFFFFFFFFFFFFFLL);
            }
            else if (SBYTE7(v107) < 0)
            {
              goto LABEL_101;
            }
            NativeShieldCount = geo::codec::featureGetNativeShieldCount((uint64_t)v17);
            if (NativeShieldCount != 1
              || (v52 = 0xAAAAAAAAAAAAAAABLL * ((v102[45] - v102[44]) >> 4), v52 >= (v89 + 1))
              || v52 > 0x3F)
            {
              if ((v36 & 0x8000000000000000) == 0)
                goto LABEL_95;
              goto LABEL_135;
            }
            v114 = 0;
            *(_QWORD *)&__dst = 0;
            geo::codec::featureGetNativeShield((uint64_t)v17, 0, &__dst, &v114, 0);
            localizedLabel(&v103, v17, (char *)__dst, a3, 0);
            *v93 = v89;
            v93[1] = NativeShieldCount;
            v53 = (_DWORD *)(v94 + 20 * v14 + 9);
            v55 = v102[45];
            v54 = v102[46];
            if (v55 >= v54)
            {
              v96 = v22;
              v57 = v102[44];
              v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - v57) >> 4);
              v59 = v58 + 1;
              if (v58 + 1 > 0x555555555555555)
                abort();
              v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v57) >> 4);
              if (2 * v60 > v59)
                v59 = 2 * v60;
              if (v60 >= 0x2AAAAAAAAAAAAAALL)
                v61 = 0x555555555555555;
              else
                v61 = v59;
              *(_QWORD *)&v108 = v87;
              if (v61)
                v62 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v87 + 16))(*v87, 48 * v61, 8);
              else
                v62 = 0;
              v63 = v62 + 48 * v58;
              *(_QWORD *)&__dst = v62;
              *((_QWORD *)&__dst + 1) = v63;
              *(_QWORD *)&v107 = v63;
              *((_QWORD *)&v107 + 1) = v62 + 48 * v61;
              if (v62)
              {
                v64 = v114;
                *(_QWORD *)(v63 + 24) = v105;
                if (SHIBYTE(v104) < 0)
                {
                  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v63, (void *)v103, *((unint64_t *)&v103 + 1));
                  v63 = *((_QWORD *)&__dst + 1);
                  v65 = v107;
                }
                else
                {
                  *(_OWORD *)v63 = v103;
                  *(_QWORD *)(v63 + 16) = v104;
                  v65 = v62 + 48 * v58;
                }
                v68 = v62 + 48 * v58;
                *(_QWORD *)(v68 + 32) = v64;
                *(_DWORD *)(v68 + 40) = *v53;
                *(_BYTE *)(v68 + 44) = 2;
              }
              else
              {
                v65 = v63;
              }
              v66 = v65 + 48;
              *(_QWORD *)&v107 = v65 + 48;
              v69 = v102[44];
              v70 = v102[45];
              v22 = v96;
              if (v70 == v69)
              {
                v102[44] = v63;
                v102[45] = v66;
                v76 = v102[46];
                v102[46] = *((_QWORD *)&v107 + 1);
                v67 = v88;
                if (!v70)
                  goto LABEL_131;
              }
              else
              {
                v71 = 0;
                do
                {
                  v72 = v63 + v71;
                  v73 = v70 + v71;
                  v74 = *(_OWORD *)(v70 + v71 - 32);
                  *(_OWORD *)(v72 - 48) = *(_OWORD *)(v70 + v71 - 48);
                  *(_OWORD *)(v72 - 32) = v74;
                  *(_QWORD *)(v73 - 40) = 0;
                  *(_QWORD *)(v73 - 32) = 0;
                  *(_QWORD *)(v73 - 48) = 0;
                  *(_QWORD *)(v72 - 16) = *(_QWORD *)(v70 + v71 - 16);
                  *(_DWORD *)(v72 - 8) = *(_DWORD *)(v70 + v71 - 8);
                  *(_BYTE *)(v72 - 4) = *(_BYTE *)(v70 + v71 - 4);
                  v71 -= 48;
                }
                while (v70 + v71 != v69);
                v70 = v102[44];
                v75 = v102[45];
                v102[44] = v63 + v71;
                v76 = v102[46];
                v77 = v107;
                v67 = v88;
                *(_OWORD *)v88 = v107;
                v66 = v77;
                if (v75 == v70)
                {
                  v22 = v96;
                  if (!v70)
                    goto LABEL_131;
                }
                else
                {
                  do
                  {
                    if (*(char *)(v75 - 25) < 0)
                      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v75 - 24) + 40))(*(_QWORD *)(v75 - 24), *(_QWORD *)(v75 - 48), *(_QWORD *)(v75 - 32) & 0x7FFFFFFFFFFFFFFFLL);
                    v75 -= 48;
                  }
                  while (v75 != v70);
                  v22 = v96;
                  v67 = v88;
                  if (!v70)
                    goto LABEL_131;
                }
              }
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v108 + 40))(*(_QWORD *)v108, v70, v76 - v70);
              v67 = v88;
LABEL_131:
              a3 = v91;
              goto LABEL_132;
            }
            if (v55)
            {
              v56 = v114;
              *(_QWORD *)(v55 + 24) = v105;
              if (SHIBYTE(v104) < 0)
              {
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v55, (void *)v103, *((unint64_t *)&v103 + 1));
              }
              else
              {
                *(_OWORD *)v55 = v103;
                *(_QWORD *)(v55 + 16) = v104;
              }
              *(_QWORD *)(v55 + 32) = v56;
              *(_DWORD *)(v55 + 40) = *v53;
              *(_BYTE *)(v55 + 44) = 2;
              a3 = v91;
            }
            v66 = v55 + 48;
            v67 = v88;
            *v88 = v55 + 48;
LABEL_132:
            *v67 = v66;
            if (SHIBYTE(v104) < 0)
              (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v105 + 40))(v105, v103, v104 & 0x7FFFFFFFFFFFFFFFLL);
            v89 = (unsigned __int16)(v89 + 1);
            if ((v36 & 0x8000000000000000) == 0)
            {
LABEL_95:
              if ((v50 & 0x8000000000000000) != 0)
                goto LABEL_136;
              goto LABEL_96;
            }
LABEL_135:
            (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v99 + 40))(v99, __src, v36 & 0x7FFFFFFFFFFFFFFFLL);
            if ((v50 & 0x8000000000000000) != 0)
LABEL_136:
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v100 + 40))(v100, v49, v50 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_96:
            v16 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
            if (SHIBYTE(v112) < 0)
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v113 + 40))(v113, v111, v112 & 0x7FFFFFFFFFFFFFFFLL);
            v6 = v102;
            if (v98 < 0)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 40))(v22, v97, v98 & 0x7FFFFFFFFFFFFFFFLL);
            ++v14;
          }
          while (v14 != v90);
        }
        std::mutex::unlock(v86);
      }
    }
  }
}

void sub_19FC3805C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *a11 = v40;
  if (a31 < 0)
    (*(void (**)(void))(*(_QWORD *)a32 + 40))();
  if (v42 < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a22 + 40))(a22, a24, v42 & 0x7FFFFFFFFFFFFFFFLL);
  if (v39 < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a23 + 40))(a23, v41, v39 & 0x7FFFFFFFFFFFFFFFLL);
  if (*(char *)(v44 - 145) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v44 - 144) + 40))(*(_QWORD *)(v44 - 144), *(_QWORD *)(v44 - 168), *(_QWORD *)(v44 - 152) & 0x7FFFFFFFFFFFFFFFLL);
  if (a21 < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 40))(v43, a19, a21 & 0x7FFFFFFFFFFFFFFFLL);
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t md::TransitLineLabelFeature::updateDynamicStyling(md::TransitLineLabelFeature *this, md::LabelManager *a2, md::Label *a3)
{
  char *v3;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  std::mutex *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  const FeatureStyleAttributes *v54;
  char *v55;
  unint64_t *v56;
  mdm::Allocator *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  unsigned __int8 v71;
  size_t v72;
  _QWORD *v73;
  uint64_t v74;
  int *v75;
  int v76;
  uint64_t v77;
  int *v78;
  int v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  void **v100;
  char *v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  void **v105;
  std::__shared_weak_count *v106;
  mdm::Allocator *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;

  v3 = (char *)*((_QWORD *)this + 29);
  if (v3)
  {
    v6 = *((_DWORD *)a3 + 12);
    v7 = (char *)this + 232;
    do
    {
      v8 = *((_DWORD *)v3 + 8);
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = (char **)v3;
      else
        v10 = (char **)(v3 + 8);
      if (v9)
        v7 = v3;
      v3 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 232 && v6 >= *((_DWORD *)v7 + 8))
    {
      v12 = *((_QWORD *)v7 + 5);
      v11 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
      v113 = v12;
      v114 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      if (!v12)
        goto LABEL_123;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 128))(v12);
      v16 = (_QWORD *)*((_QWORD *)this + 72);
      if (!v16)
        goto LABEL_123;
      v17 = (_QWORD *)((char *)this + 576);
      do
      {
        v18 = v16[4];
        v19 = v18 >= v15;
        if (v18 >= v15)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == (_QWORD *)((char *)this + 576))
        goto LABEL_123;
      if (v17[4] > v15)
        goto LABEL_123;
      v21 = v17[5];
      if (!v21)
        goto LABEL_123;
      v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 64) + 16))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 64));
      if (!v22)
        goto LABEL_123;
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 128))(v12);
      md::LabelExternalObjectsModerator::externalTransitLink(&v111, v22, v23);
      if (v111
        && (v24 = atomic_load((unsigned __int8 *)(v111 + 104)), (v24 & 1) != 0)
        && (v25 = atomic_load((unsigned __int8 *)(v111 + 105)), (v25 & 1) != 0))
      {
        v32 = v111;
        v33 = (std::mutex *)(v111 + 40);
        std::mutex::lock((std::mutex *)(v111 + 40));
        v35 = *(_QWORD *)(v32 + 24);
        v34 = *(std::__shared_weak_count **)(v32 + 32);
        v109 = v35;
        v110 = v34;
        if (v34)
        {
          v36 = (unint64_t *)&v34->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        std::mutex::unlock(v33);
        if (v35)
        {
          v38 = *(_QWORD *)(v35 + 8);
          if (*(_QWORD *)v35 != v38
            && (v39 = (v38 - *(_QWORD *)v35) >> 4,
                v40 = *((_QWORD *)this + 68),
                v41 = *((_QWORD *)this + 67),
                v39 == (v40 - v41) >> 5)
            && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 2) == v39)
          {
            v42 = *(unsigned __int8 *)(v21 + 40);
            v43 = *(unsigned __int8 *)(v35 + 33);
            v98 = v42 != v43;
            if (v42 != v43)
              *(_BYTE *)(v21 + 40) = v43;
            v44 = *(unsigned __int8 *)(v35 + 32);
            if (*(unsigned __int8 *)(v21 + 41) != v44)
            {
              *(_BYTE *)(v21 + 41) = v44;
              v98 = 1;
            }
            *(_WORD *)(v21 + 42) = -1;
            if (v40 == v41)
            {
              v45 = 0;
              LOBYTE(v35) = 1;
            }
            else
            {
              v45 = 0;
              v46 = 0;
              if (v39 <= 1)
                v39 = 1;
              v96 = v21;
              v97 = v39;
              v95 = v35;
              do
              {
                v47 = *(_QWORD *)v35;
                v48 = *(_QWORD *)(v21 + 8);
                if (v98
                  || *(_DWORD *)(v48 + 20 * v46 + 16) == -1
                  || (v49 = v47 + 16 * v46, *(unsigned __int8 *)(v48 + 20 * v46 + 6) != *(unsigned __int8 *)(v49 + 8))
                  || *(unsigned __int8 *)(v48 + 20 * v46 + 7) != *(unsigned __int8 *)(v49 + 9)
                  || (v50 = v47 + 16 * v46, *(unsigned __int8 *)(v48 + 20 * v46 + 8) != *(unsigned __int8 *)(v50 + 10))
                  || (v51 = *(unsigned __int8 *)(v48 + 20 * v46 + 4), v51 != *(unsigned __int8 *)(v50 + 11))
                  || *(unsigned __int8 *)(v48 + 20 * v46 + 5) != *(unsigned __int8 *)(v47 + 16 * v46 + 12))
                {
                  v52 = v47 + 16 * v46;
                  v53 = (unsigned __int8 *)(v48 + 20 * v46);
                  v53[6] = *(_BYTE *)(v52 + 8);
                  v53 += 6;
                  *(_WORD *)(v53 + 1) = *(_WORD *)(v52 + 9);
                  *((_WORD *)v53 - 1) = *(_WORD *)(v52 + 11);
                  v102 = v46;
                  v54 = *(const FeatureStyleAttributes **)(*((_QWORD *)this + 34)
                                                         + 80
                                                         * *(unsigned int *)(*((_QWORD *)this + 67) + 32 * v46 + 24));
                  v55 = (char *)operator new(0x40uLL);
                  v99 = v48;
                  v103 = v53 - 2;
                  *((_QWORD *)v55 + 1) = 0;
                  v56 = (unint64_t *)(v55 + 8);
                  *((_QWORD *)v55 + 2) = 0;
                  *(_QWORD *)v55 = &off_1E42DAB40;
                  FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v55 + 24), v54);
                  v100 = (void **)v57;
                  v107 = v57;
                  v108 = (std::__shared_weak_count *)v55;
                  v58 = *v53;
                  v59 = *(unsigned __int8 *)(v21 + 40);
                  v60 = *(unsigned __int8 *)(v21 + 41);
                  v61 = v53[1];
                  v62 = v53[2];
                  v104 = mdm::Allocator::instance(v57);
                  v63 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, 40, 4);
                  v64 = v63;
                  if (v63)
                    *v63 = (v58 << 32) | 0x10015;
                  v63[1] = ((v59 << 32) | 0x10015) + 5;
                  v63[2] = ((v60 << 32) | 0x10015) + 34;
                  v63[3] = ((v61 << 32) | 0x10015) + 6;
                  v63[4] = ((v62 << 32) | 0x10015) + 7;
                  v65 = (char *)(v63 + 5);
                  if (*v103)
                  {
                    v66 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, 80, 4);
                    v21 = v96;
                    v67 = v66;
                    if (v66)
                      v66[5] = 0x100010002;
                    v101 = (char *)(v66 + 10);
                    v66[4] = v64[4];
                    v66[3] = v64[3];
                    v66[2] = v64[2];
                    v66[1] = v64[1];
                    *v66 = *v64;
                    v65 = (char *)(v66 + 6);
                    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v104 + 40))(v104, v64, 40);
                  }
                  else
                  {
                    v101 = (char *)(v63 + 5);
                    v67 = v63;
                    v21 = v96;
                  }
                  if (((v65 - (char *)v67) & 0x7FFFFFFF8) != 0)
                  {
                    v68 = 0;
                    v69 = 0;
                    v70 = ((unint64_t)(v65 - (char *)v67) >> 3);
                    v71 = v55[57];
                    while (1)
                    {
                      v72 = v71;
                      v73 = *v100;
                      if (v71)
                        break;
LABEL_71:
                      v73[v72] = v67[v68];
                      v71 = v55[57] + 1;
                      v55[57] = v71;
                      ++v68;
                      v69 = 1;
                      if (v68 == v70)
                      {
                        v73 = *v100;
                        v72 = v71;
LABEL_88:
                        qsort(v73, v72, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                        goto LABEL_89;
                      }
                    }
                    if (v71 > 0x1Fu)
                    {
                      do
                      {
                        v77 = 0;
                        v78 = (int *)v73;
                        while (1)
                        {
                          v79 = *v78;
                          v78 += 2;
                          if (v79 == LODWORD(v67[v68]))
                            break;
                          if (v72 == ++v77)
                            goto LABEL_82;
                        }
                        HIDWORD(v73[v77]) = HIDWORD(v67[v68]);
LABEL_82:
                        ++v68;
                      }
                      while (v68 != v70);
                    }
                    else
                    {
                      do
                      {
                        v74 = 0;
                        v75 = (int *)v73;
                        while (1)
                        {
                          v76 = *v75;
                          v75 += 2;
                          if (v76 == LODWORD(v67[v68]))
                            break;
                          if (v72 == ++v74)
                            goto LABEL_71;
                        }
                        HIDWORD(v73[v74]) = HIDWORD(v67[v68++]);
                      }
                      while (v68 != v70);
                    }
                    if ((v69 & 1) != 0)
                      goto LABEL_88;
                  }
LABEL_89:
                  v105 = v100;
                  v106 = (std::__shared_weak_count *)v55;
                  do
                    v80 = __ldxr(v56);
                  while (__stxr(v80 + 1, v56));
                  v46 = v102;
                  *(_DWORD *)(v99 + 20 * v102 + 16) = md::LineLabelFeature::styleIndexForAttributes((uint64_t)this, (uint64_t *)&v105);
                  v81 = v106;
                  if (v106)
                  {
                    v82 = (unint64_t *)&v106->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  if (v67)
                    (*(void (**)(uint64_t, uint64_t *, int64_t))(*(_QWORD *)v104 + 40))(v104, v67, v101 - (char *)v67);
                  v84 = v108;
                  v35 = v95;
                  if (v108)
                  {
                    v85 = (unint64_t *)&v108->__shared_owners_;
                    do
                      v86 = __ldaxr(v85);
                    while (__stlxr(v86 - 1, v85));
                    if (!v86)
                    {
                      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                      std::__shared_weak_count::__release_weak(v84);
                    }
                  }
                  v51 = *v103;
                  v45 = 1;
                }
                if (v51)
                  *(_WORD *)(v21 + 42) = v46;
                ++v46;
              }
              while (v46 != v97);
              LOBYTE(v35) = 1;
              v34 = v110;
            }
          }
          else
          {
            v45 = 0;
            LOBYTE(v35) = 0;
          }
        }
        else
        {
          v45 = 0;
        }
        if (v34)
        {
          v87 = (unint64_t *)&v34->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if ((v35 & 1) == 0)
          goto LABEL_117;
        v29 = v45;
      }
      else
      {
        v27 = *(_QWORD *)(v21 + 8);
        v26 = *(_QWORD *)(v21 + 16);
        v28 = v26 - v27;
        if (v26 == v27)
        {
LABEL_117:
          v89 = v112;
          if (v112)
          {
            v90 = (unint64_t *)&v112->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          v11 = v114;
LABEL_123:
          if (v11)
          {
            v92 = (unint64_t *)&v11->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          return 0;
        }
        v29 = 0;
        v30 = v28 / 20;
        if (v30 <= 1)
          v30 = 1;
        v31 = (_DWORD *)(v27 + 16);
        do
        {
          if (*v31 != -1)
          {
            *v31 = -1;
            v29 = 1;
          }
          v31 += 5;
          --v30;
        }
        while (v30);
      }
      if ((v29 & 1) != 0)
        (*(void (**)(md::TransitLineLabelFeature *, md::LabelManager *))(*(_QWORD *)this + 536))(this, a2);
      goto LABEL_117;
    }
  }
  return 0;
}

void sub_19FC389E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  va_list va;
  uint64_t v19;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v17 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, v14, a9 - v14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v15 - 120);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v15 - 104);
  _Unwind_Resume(a1);
}

unint64_t md::TransitLineLabelFeature::populateFeatureInfo(md::TransitLineLabelFeature *this, md::LabelFeatureInfo *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t result;

  v4 = (char *)a2 + 16;
  if (!*((_QWORD *)a2 + 2))
  {
    std::mutex::lock((std::mutex *)((char *)this + 8));
    v5 = *((_QWORD *)this + 19);
    if (v5)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 16))(v5, v4);
    std::mutex::unlock((std::mutex *)((char *)this + 8));
  }
  result = md::TransitLineLabelFeature::populateFeatureIDs((uint64_t)this, (uint64_t *)a2 + 4);
  *(_QWORD *)a2 = 0;
  *((_DWORD *)a2 + 16) = (*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3;
  return result;
}

void sub_19FC38B10(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::TransitLineLabelFeature::featureID(md::TransitLineLabelFeature *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 67);
  if (v1 == *((_QWORD *)this + 68))
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t md::TransitLineLabelFeature::labelFeatureType(md::TransitLineLabelFeature *this)
{
  return 9;
}

uint64_t md::TransitLineLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  if ((v10 & 1) == 0)
  {
    v19 = a5;
    v18 = a4;
    v16 = a2;
    v17 = a3;
    v15 = a1;
    a1 = v15;
    a2 = v16;
    a3 = v17;
    a4 = v18;
    v13 = v12;
    a5 = v19;
    if (v13)
    {
      v14 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v14, "VectorKitLabels", 0x5ED09DD50000000FLL);
      a5 = v19;
      a1 = v15;
      a2 = v16;
      a3 = v17;
      a4 = v18;
    }
  }
  v22 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v21) = 12;
  strcpy((char *)v20, "Transit line");
  result = md::LineLabelFeature::debugRoadString(a5, a1, a2, a3, a4, (uint64_t)v20);
  if (SHIBYTE(v21) < 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 40))(v22, v20[0], v21 & 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

void sub_19FC38C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (SHIBYTE(a17) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a18 + 40))(a18, a15, a17 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void md::TransitLineLabelFeature::debugDraw(uint64_t *a1, uint64_t a2, float32x2_t *a3, __n128 *a4)
{
  md::LineLabelFeature::debugDraw(a1, a2, a3, a4);
}

uint64_t md::TransitLineLabelFeature::publicShieldName(md::TransitLineLabelFeature *this)
{
  if (*((_QWORD *)this + 44) == *((_QWORD *)this + 45))
    return 0;
  else
    return *((_QWORD *)this + 44);
}

uint64_t md::TransitLineLabelFeature::style(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;

  if (!a2)
    return md::LineLabelFeature::style(a1, 0, a3, a4, a5);
  v10 = *(_QWORD *)(a1 + 232);
  if (!v10)
    goto LABEL_13;
  v11 = a1 + 232;
  do
  {
    v12 = *(_DWORD *)(v10 + 32);
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = (uint64_t *)v10;
    else
      v14 = (uint64_t *)(v10 + 8);
    if (v13)
      v11 = v10;
    v10 = *v14;
  }
  while (*v14);
  if (v11 != a1 + 232 && *(_DWORD *)(v11 + 32) <= a2)
  {
    v21 = *(_QWORD *)(v11 + 40);
    v15 = *(std::__shared_weak_count **)(v11 + 48);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    if (v21)
    {
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 128))(v21);
      v25 = *(_QWORD **)(a1 + 576);
      if (!v25)
        goto LABEL_41;
      v26 = a1 + 576;
      do
      {
        v27 = v25[4];
        v28 = v27 >= v24;
        if (v27 >= v24)
          v29 = v25;
        else
          v29 = v25 + 1;
        if (v28)
          v26 = (uint64_t)v25;
        v25 = (_QWORD *)*v29;
      }
      while (*v29);
      if (v26 != a1 + 576 && *(_QWORD *)(v26 + 32) <= v24 && (v30 = *(_QWORD *)(v26 + 40)) != 0)
      {
        v31 = *(unsigned __int16 *)(v30 + 42);
        if (v31 == 0xFFFF)
          v31 = *(unsigned __int16 *)(a1 + 600);
        v32 = *(_QWORD *)(v30 + 8) + 20 * v31;
        v16 = (uint64_t)md::TransitLineLabelFeature::styleFromTransitLineSegment((_QWORD *)a1, *(_WORD *)(v32 + 14), *(_DWORD *)(v32 + 16));
      }
      else
      {
LABEL_41:
        v16 = md::LineLabelFeature::style(a1, a2, a3, a4, a5);
      }
      goto LABEL_15;
    }
  }
  else
  {
LABEL_13:
    v15 = 0;
  }
  v16 = md::LineLabelFeature::style(a1, a2, a3, a4, a5);
LABEL_15:
  v17 = v16;
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v17;
}

void sub_19FC38E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::TransitLineLabelFeature::populateStyleQueries(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17[3];
  _QWORD *v18;
  uint64_t v19[3];
  uint64_t v20;

  v18 = 0;
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 488))(a1)
    && (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 480))(a1, 0))
  {
    v6 = (_QWORD *)operator new();
    v7 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 480))(a1, 0);
    v6[3] = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      v6[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v18 = v6;
  }
  else
  {
    v6 = 0;
  }
  v9 = (uint64_t *)a1[34];
  v10 = (uint64_t *)a1[35];
  if (v9 == v10)
  {
    v18 = 0;
    if (!v6)
      return;
    goto LABEL_25;
  }
  do
  {
    v11 = v18;
    md::createFeatureAttributeSet((gss::Allocator *)v19, v9);
    md::LabelStyleCache::styleQueryForFeatureAttributes(v17, a3, v19, v11);
    if (v19[0])
    {
      v19[1] = v19[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 40))(v20, v19[0], v19[2] - v19[0]);
    }
    v12 = *(_OWORD **)(a2 + 8);
    if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
    {
      v13 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)v17);
    }
    else
    {
      if (v12)
      {
        *v12 = *(_OWORD *)v17;
        *(_OWORD *)v17 = 0uLL;
      }
      v13 = v12 + 1;
    }
    *(_QWORD *)(a2 + 8) = v13;
    v14 = (std::__shared_weak_count *)v17[1];
    if (v17[1])
    {
      v15 = (unint64_t *)(v17[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v9 += 10;
  }
  while (v9 != v10);
  v6 = v18;
  v18 = 0;
  if (v6)
  {
LABEL_25:
    if (*((char *)v6 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v6[3] + 40))(v6[3], *v6, v6[2] & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v6, 0x1032C402ED93987);
  }
}

void sub_19FC3909C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1A1AF4E00](v4, 0x1032C402ED93987);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::TransitLineLabelFeature::styleForElementIndex(md::TransitLineLabelFeature *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 67);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 68) - v2) >> 5))
    return 0;
  v3 = *(unsigned int *)(v2 + 32 * a2 + 24);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 35) - *((_QWORD *)this + 34)) >> 4) <= v3)
    return *((_QWORD *)this + 10);
  v4 = *((_QWORD *)this + 12);
  if (v3 >= (*((_QWORD *)this + 13) - v4) >> 4)
    return *((_QWORD *)this + 10);
  else
    return *(_QWORD *)(v4 + 16 * v3);
}

void md::TransitLineLabelFeature::debugPopulateAttributeStrings(uint64_t a1, void *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  unsigned __int8 v29;
  size_t v30;
  int v31;
  uint64_t v32;
  __int128 *v33;
  size_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  size_t v37;
  int v38;
  uint64_t v39;
  __int128 *p_dst;
  size_t v41;
  void *v42;
  size_t v43;
  char *v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  int v55;
  __int128 *v56;
  int v57;
  __int128 *v58;
  uint64_t v59;
  void *v60;
  __int128 *v61;
  __int128 *v62;
  void *v63;
  void *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  BOOL v82;
  _QWORD *v83;
  uint64_t v84;
  id v86;
  __int128 __dst;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;

  v86 = a2;
  v6 = *(_QWORD *)(a1 + 232);
  if (!v6)
    goto LABEL_12;
  v7 = *a4;
  v8 = a1 + 232;
  do
  {
    v9 = *(_DWORD *)(v6 + 32);
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 == a1 + 232 || v7 < *(_DWORD *)(v8 + 32))
  {
LABEL_12:
    v12 = 0;
    v96 = 0;
    v97 = 0;
LABEL_13:
    v13 = **(_QWORD **)(a1 + 504);
    if (v13)
      v14 = v13 + 8;
    else
      v14 = 0;
    goto LABEL_16;
  }
  v75 = *(_QWORD *)(v8 + 40);
  v12 = *(std::__shared_weak_count **)(v8 + 48);
  v96 = v75;
  v97 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v77 = __ldxr(p_shared_owners);
    while (__stxr(v77 + 1, p_shared_owners));
  }
  if (!v75)
    goto LABEL_13;
  v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 128))(v75);
  v79 = *(_QWORD **)(a1 + 576);
  if (!v79)
    goto LABEL_13;
  v80 = (_QWORD *)(a1 + 576);
  do
  {
    v81 = v79[4];
    v82 = v81 >= v78;
    if (v81 >= v78)
      v83 = v79;
    else
      v83 = v79 + 1;
    if (v82)
      v80 = v79;
    v79 = (_QWORD *)*v83;
  }
  while (*v83);
  if (v80 == (_QWORD *)(a1 + 576))
    goto LABEL_13;
  if (v80[4] > v78)
    goto LABEL_13;
  v14 = v80[5];
  if (!v14)
    goto LABEL_13;
LABEL_16:
  v15 = *(_QWORD *)(v14 + 8);
  v84 = *(_QWORD *)(v14 + 16);
  if (v15 != v84)
  {
    v16 = 0;
    v17 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    while (1)
    {
      v18 = *(unsigned __int16 *)(v15 + 14);
      v19 = *(_QWORD *)(a1 + 536);
      v93 = 0uLL;
      v94 = 0;
      {
        v69 = operator new();
        *((_QWORD *)v17 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v95 = *((_QWORD *)v17 + 299);
      v90 = 0uLL;
      v91 = 0;
      {
        v70 = operator new();
        *((_QWORD *)v17 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v70, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v92 = *((_QWORD *)v17 + 299);
      v22 = v19 + 32 * v18;
      v24 = *(unsigned __int8 *)(v22 + 8);
      v23 = (unsigned __int8 *)(v22 + 8);
      if (v24 == 255)
      {
        if (*(_WORD *)(v19 + 32 * v18 + 12))
        {
          v26 = *(_QWORD *)(a1 + 352) + 48 * *(unsigned __int16 *)(v19 + 32 * v18 + 10);
          if (&v93 != (__int128 *)v26)
          {
            v27 = *(_BYTE *)(v26 + 23);
            if (SHIBYTE(v94) < 0)
            {
              if (v27 >= 0)
                v42 = (void *)(*(_QWORD *)(a1 + 352) + 48 * *(unsigned __int16 *)(v19 + 32 * v18 + 10));
              else
                v42 = *(void **)v26;
              if (v27 >= 0)
                v43 = *(unsigned __int8 *)(v26 + 23);
              else
                v43 = *(_QWORD *)(v26 + 8);
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v93, v42, v43);
            }
            else if ((*(_BYTE *)(v26 + 23) & 0x80) != 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)&v93, *(void **)v26, *(_QWORD *)(v26 + 8));
            }
            else
            {
              v28 = *(_OWORD *)v26;
              v94 = *(_QWORD *)(v26 + 16);
              v93 = v28;
            }
          }
          if (SHIBYTE(v91) < 0)
          {
            *((_QWORD *)&v90 + 1) = 6;
            v44 = (char *)v90;
          }
          else
          {
            HIBYTE(v91) = 6;
            v44 = (char *)&v90;
          }
          strcpy(v44, "SHIELD");
        }
        goto LABEL_80;
      }
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 472))(a1);
      if (v25)
      {
        v89 = *(_QWORD *)(v25 + 24);
        if (*(char *)(v25 + 23) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)v25, *(_QWORD *)(v25 + 8));
        }
        else
        {
          __dst = *(_OWORD *)v25;
          v88 = *(_QWORD *)(v25 + 16);
        }
        v30 = HIBYTE(v88);
      }
      else
      {
        {
          v71 = operator new();
          *((_QWORD *)v17 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v71, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v30 = 0;
        v89 = *((_QWORD *)v17 + 299);
        HIBYTE(v88) = 0;
        LOBYTE(__dst) = 0;
      }
      v31 = (char)v30;
      if (SHIBYTE(v94) < 0)
        break;
      if ((char)v30 < 0)
      {
        v32 = __dst;
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)&v93, (void *)__dst, *((size_t *)&__dst + 1));
LABEL_47:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v32, v88 & 0x7FFFFFFFFFFFFFFFLL);
        goto LABEL_48;
      }
      v93 = __dst;
      v94 = v88;
LABEL_48:
      v35 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, *v23);
      if (v35)
      {
        v89 = *(_QWORD *)(v35 + 24);
        if (*(char *)(v35 + 23) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, *(void **)v35, *(_QWORD *)(v35 + 8));
        }
        else
        {
          __dst = *(_OWORD *)v35;
          v88 = *(_QWORD *)(v35 + 16);
        }
        v37 = HIBYTE(v88);
      }
      else
      {
        {
          v72 = operator new();
          *((_QWORD *)v17 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v72, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v37 = 0;
        v89 = *((_QWORD *)v17 + 299);
        HIBYTE(v88) = 0;
        LOBYTE(__dst) = 0;
      }
      v38 = (char)v37;
      if ((SHIBYTE(v91) & 0x80000000) == 0)
      {
        if (((char)v37 & 0x80000000) == 0)
        {
          v90 = __dst;
          v91 = v88;
          goto LABEL_80;
        }
        v39 = __dst;
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)&v90, (void *)__dst, *((size_t *)&__dst + 1));
LABEL_67:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v39, v88 & 0x7FFFFFFFFFFFFFFFLL);
        goto LABEL_80;
      }
      v39 = __dst;
      if ((v37 & 0x80u) == 0)
        p_dst = &__dst;
      else
        p_dst = (__int128 *)__dst;
      if ((v37 & 0x80u) == 0)
        v41 = v37;
      else
        v41 = *((_QWORD *)&__dst + 1);
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v90, p_dst, v41);
      if (v38 < 0)
        goto LABEL_67;
LABEL_80:
      __dst = 0uLL;
      v45 = *(_DWORD *)(v15 + 16);
      if (v45 == -1)
      {
        v51 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 80 * *(unsigned int *)(v19 + 32 * v18 + 24));
        v47 = *v51;
        v48 = v51[1];
        if (v48)
        {
          v52 = (unint64_t *)(v48 + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
          goto LABEL_88;
        }
      }
      else
      {
        v46 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 80 * v45);
        v47 = *v46;
        v48 = v46[1];
        if (v48)
        {
          v49 = (unint64_t *)(v48 + 8);
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
LABEL_88:
          *(_QWORD *)&__dst = v47;
          *((_QWORD *)&__dst + 1) = v48;
          goto LABEL_90;
        }
      }
      *(_QWORD *)&__dst = v47;
LABEL_90:
      v54 = (void *)MEMORY[0x1E0CB3940];
      v55 = SHIBYTE(v94);
      v56 = (__int128 *)v93;
      v57 = SHIBYTE(v91);
      v58 = (__int128 *)v90;
      md::HighlightHelper::debugAttributesToString((gss::Allocator *)&__dst);
      v59 = objc_claimAutoreleasedReturnValue();
      v60 = (void *)v59;
      v61 = &v90;
      if (v57 < 0)
        v61 = v58;
      v62 = &v93;
      if (v55 < 0)
        v62 = v56;
      objc_msgSend(v54, "stringWithFormat:", CFSTR("[%i]\"%s(%s)\":{%@}"), v16, v62, v61, v59);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "addObject:", v63);
      v17 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];

      md::LabelFeature::debugClientAttributesToString((uint64_t *)&__dst, *(_QWORD *)(a3 + 336));
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      if (v64)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{%@}"), v64);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v86, "addObject:", v65);

      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (!*((_QWORD *)&__dst + 1))
        goto LABEL_100;
      v67 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
        if (SHIBYTE(v91) < 0)
        {
LABEL_18:
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v92 + 40))(v92, v90, v91 & 0x7FFFFFFFFFFFFFFFLL);
          if (SHIBYTE(v94) < 0)
            goto LABEL_102;
          goto LABEL_19;
        }
      }
      else
      {
LABEL_100:
        if (SHIBYTE(v91) < 0)
          goto LABEL_18;
      }
      if (SHIBYTE(v94) < 0)
LABEL_102:
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v95 + 40))(v95, v93, v94 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_19:
      v16 = (v16 + 1);
      v15 += 20;
      if (v15 == v84)
      {
        v12 = v97;
        goto LABEL_114;
      }
    }
    v32 = __dst;
    if ((v30 & 0x80u) == 0)
      v33 = &__dst;
    else
      v33 = (__int128 *)__dst;
    if ((v30 & 0x80u) == 0)
      v34 = v30;
    else
      v34 = *((_QWORD *)&__dst + 1);
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v93, v33, v34);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_47;
  }
LABEL_114:
  if (v12)
  {
    v73 = (unint64_t *)&v12->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

}

void sub_19FC398E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  uint64_t v16;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 104);

  _Unwind_Resume(a1);
}

void md::TransitLineLabelFeature::removeTile(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  md::LabelLineStore::removeRoadFeaturesInTile<geo::codec::VectorTile>(*(_QWORD *)(a1 + 192), a2);
  std::mutex::lock((std::mutex *)(a1 + 608));
  v4 = *(_QWORD *)(a1 + 688);
  v5 = *(_QWORD *)(a1 + 696);
  if (v4 >= v5)
  {
    v11 = *(_QWORD *)(a1 + 680);
    v12 = (uint64_t)(v4 - v11) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      abort();
    v14 = v5 - v11;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 704) + 16))(*(_QWORD *)(a1 + 704), 32 * v15, 8);
      v17 = v16 + 32 * v12;
      v18 = v16 + 32 * v15;
      if (v16)
      {
        *(_BYTE *)v17 = 2;
        v20 = *a2;
        v19 = a2[1];
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = v20;
        *(_QWORD *)(v17 + 24) = v19;
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
      }
    }
    else
    {
      v18 = 0;
      v17 = 32 * v12;
    }
    v10 = v17 + 32;
    v23 = *(_QWORD *)(a1 + 688);
    v24 = *(_QWORD *)(a1 + 680);
    if (v23 == v24)
    {
      *(_QWORD *)(a1 + 680) = v17;
      *(_QWORD *)(a1 + 688) = v10;
      v26 = *(_QWORD *)(a1 + 696);
      *(_QWORD *)(a1 + 696) = v18;
    }
    else
    {
      do
      {
        *(_OWORD *)(v17 - 32) = *(_OWORD *)(v23 - 32);
        *(_OWORD *)(v17 - 16) = *(_OWORD *)(v23 - 16);
        v17 -= 32;
        *(_QWORD *)(v23 - 16) = 0;
        *(_QWORD *)(v23 - 8) = 0;
        v23 -= 32;
      }
      while (v23 != v24);
      v23 = *(_QWORD *)(a1 + 680);
      v25 = *(_QWORD *)(a1 + 688);
      *(_QWORD *)(a1 + 680) = v17;
      *(_QWORD *)(a1 + 688) = v10;
      v26 = *(_QWORD *)(a1 + 696);
      *(_QWORD *)(a1 + 696) = v18;
      while (v25 != v23)
      {
        v27 = *(std::__shared_weak_count **)(v25 - 8);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 32;
      }
    }
    if (v23)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 704) + 40))(*(_QWORD *)(a1 + 704), v23, v26 - v23);
  }
  else
  {
    if (v4)
    {
      *(_BYTE *)v4 = 2;
      v7 = *a2;
      v6 = a2[1];
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = v7;
      *(_QWORD *)(v4 + 24) = v6;
      if (v6)
      {
        v8 = (unint64_t *)(v6 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
    }
    v10 = v4 + 32;
  }
  *(_QWORD *)(a1 + 688) = v10;
  atomic_store(1u, (unsigned __int8 *)(a1 + 672));
  std::mutex::unlock((std::mutex *)(a1 + 608));
}

void sub_19FC39BF4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL md::TransitLineLabelFeature::hasAnnotatedShieldText(md::TransitLineLabelFeature *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 264);
  if (v3)
  {
    if (!*(_BYTE *)(v3 + 56))
      return 0;
  }
  else
  {
    v4 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*((_QWORD *)this + 10));
    v3 = *v4;
    *(_QWORD *)(v1 + 264) = *v4;
    if (!*(_BYTE *)(v3 + 56))
      return 0;
  }
  if (*(_BYTE *)(v3 + 60))
    return *(unsigned __int8 *)(*((_QWORD *)this + 10) + 144) - 3 < 2;
  return 0;
}

unint64_t md::TransitLineLabelFeature::populateFeatureIDs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t result;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *(_QWORD *)(a1 + 544);
  v5 = *(_QWORD *)(a1 + 536);
  {
    v20 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v46 = mdm::Allocator::instance(void)::alloc;
  if (v4 == v5)
  {
    v10 = 0;
    v12 = 0;
  }
  else
  {
    v7 = v4 - v5;
    if (v4 - v5 < 0)
      abort();
    v8 = v7 >> 5;
    v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, (unint64_t)v7 >> 2, 8);
    v10 = v9;
    v11 = 0;
    v12 = (uint64_t *)(v9 + 8 * v8);
    do
    {
      if (v9 + v11)
        *(_QWORD *)(v9 + v11) = 0;
      v11 += 8;
    }
    while (8 * v8 != v11);
    if (v8 <= 1)
      v13 = 1;
    else
      v13 = v8;
    if (v13 >= 4)
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = (int64x2_t)xmmword_19FFB2E40;
      v16 = (int64x2_t *)(v9 + 16);
      v17 = vdupq_n_s64(2uLL);
      v18 = vdupq_n_s64(4uLL);
      v19 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16[-1] = v15;
        *v16 = vaddq_s64(v15, v17);
        v15 = vaddq_s64(v15, v18);
        v16 += 2;
        v19 -= 4;
      }
      while (v19);
      goto LABEL_21;
    }
    v14 = 0;
    do
    {
      *(_QWORD *)(v9 + 8 * v14) = v14;
      ++v14;
LABEL_21:
      ;
    }
    while (v13 != v14);
  }
  v21 = 126 - 2 * __clz((uint64_t)((uint64_t)v12 - v10) >> 3);
  v47 = a1;
  if (v12 == (uint64_t *)v10)
    v22 = 0;
  else
    v22 = v21;
  result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(v10, v12, (uint64_t)&v47, v22, 1);
  if (v12 != (uint64_t *)v10)
  {
    v24 = (_QWORD *)a2[1];
    v25 = (_QWORD *)v10;
    while (1)
    {
      v26 = (_QWORD *)(*(_QWORD *)(a1 + 536) + 32 * *v25);
      v27 = a2[2];
      if ((unint64_t)v24 >= v27)
        break;
      if (v24)
        *v24 = *v26;
      ++v24;
LABEL_28:
      a2[1] = (uint64_t)v24;
      if (++v25 == v12)
        goto LABEL_53;
    }
    v28 = ((uint64_t)v24 - *a2) >> 3;
    if ((unint64_t)(v28 + 1) >> 61)
      abort();
    v29 = v27 - *a2;
    v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1))
      v30 = v28 + 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 8 * v31, 8);
      v32 = (_QWORD *)(result + 8 * v28);
      v33 = result + 8 * v31;
      if (result)
        *v32 = *v26;
    }
    else
    {
      v33 = 0;
      v32 = (_QWORD *)(8 * v28);
    }
    v34 = *a2;
    v35 = a2[1];
    v36 = v32;
    if (v35 != *a2)
    {
      v37 = v35 - *a2 - 8;
      if (v37 < 0x38)
      {
        v36 = v32;
      }
      else
      {
        v36 = v32;
        if ((unint64_t)(v35 - (_QWORD)v32) >= 0x20)
        {
          v38 = (v37 >> 3) + 1;
          v39 = v35 - 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          v40 = v32 - 2;
          v41 = (__int128 *)(v35 - 16);
          v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v43 = *v41;
            *(v40 - 1) = *(v41 - 1);
            *v40 = v43;
            v40 -= 2;
            v41 -= 2;
            v42 -= 4;
          }
          while (v42);
          v36 = &v32[-(v38 & 0x3FFFFFFFFFFFFFFCLL)];
          v35 = v39;
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_51;
        }
      }
      do
      {
        v44 = *(_QWORD *)(v35 - 8);
        v35 -= 8;
        *--v36 = v44;
      }
      while (v35 != v34);
    }
LABEL_51:
    v24 = v32 + 1;
    *a2 = (uint64_t)v36;
    a2[1] = (uint64_t)(v32 + 1);
    v45 = a2[2];
    a2[2] = v33;
    if (v34)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v34, v45 - v34);
    goto LABEL_28;
  }
LABEL_53:
  if (v10)
    return (*(uint64_t (**)(uint64_t, unint64_t, char *))(*(_QWORD *)v46 + 40))(v46, v10, (char *)v12 - v10);
  return result;
}

void sub_19FC3A004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (v11)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a11 + 40))(a11, v11, a10);
  _Unwind_Resume(exception_object);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *j;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  _DWORD *v26;
  uint64_t *k;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int i;
  unsigned int v45;
  uint64_t *v46;
  __int16 v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  unsigned int v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  _DWORD *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v116 = a2 - 3;
  v117 = a2 - 2;
  j = v9;
  v115 = a2;
  while (2)
  {
    v9 = j;
    v12 = (char *)a2 - (char *)j;
    v13 = a2 - j;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v54 = *j;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * (unsigned __int16)*v10 + 16) < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * (unsigned __int16)*j + 16))
        {
          *j = *v10;
          *v10 = v54;
        }
        return result;
      case 3:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(j, j + 1, v10, *(_QWORD *)(*(_QWORD *)a3 + 536));
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(j, j + 1, j + 2, v10, a3);
      case 5:
        return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,0>(j, j + 1, j + 2, j + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v55 = *(_QWORD *)a3;
          if ((a5 & 1) != 0)
          {
            if (j != a2)
            {
              v56 = j + 1;
              if (j + 1 != a2)
              {
                v57 = 0;
                v58 = *(_QWORD *)(v55 + 536);
                v59 = j;
                do
                {
                  v61 = v59;
                  v59 = v56;
                  v62 = v61[1];
                  v63 = v58 + 32 * (unsigned __int16)v62;
                  v64 = *(_DWORD *)(v63 + 20);
                  v65 = (unsigned __int16)*v61;
                  result = *(unsigned int *)(v58 + 32 * v65 + 20);
                  if (*(_QWORD *)(v63 + 16) < *(_QWORD *)(v58 + 32 * v65 + 16))
                  {
                    v61[1] = *v61;
                    v60 = j;
                    if (v61 != j)
                    {
                      v66 = (_DWORD *)(v63 + 16);
                      v67 = v57;
                      while (1)
                      {
                        result = (unsigned __int16)*(uint64_t *)((char *)j + v67 - 8);
                        v68 = *(_DWORD *)(v58 + 32 * result + 20);
                        if (v64 >= v68)
                        {
                          if (v64 != v68)
                          {
                            v60 = (uint64_t *)((char *)j + v67);
                            goto LABEL_87;
                          }
                          result = *(unsigned int *)(v58 + 32 * result + 16);
                          if (*v66 >= result)
                            break;
                        }
                        --v61;
                        *(uint64_t *)((char *)j + v67) = *(uint64_t *)((char *)j + v67 - 8);
                        v67 -= 8;
                        if (!v67)
                        {
                          v60 = j;
                          goto LABEL_87;
                        }
                      }
                      v60 = v61;
                    }
LABEL_87:
                    *v60 = v62;
                  }
                  v56 = v59 + 1;
                  v57 += 8;
                }
                while (v59 + 1 != a2);
              }
            }
          }
          else if (j != a2)
          {
            v105 = j + 1;
            if (j + 1 != a2)
            {
              v106 = *(_QWORD *)(v55 + 536);
              do
              {
                v107 = v9;
                v9 = v105;
                v109 = *v107;
                v108 = v107[1];
                v110 = v106 + 32 * (unsigned __int16)v108;
                v111 = *(_DWORD *)(v110 + 20);
                if (*(_QWORD *)(v110 + 16) < *(_QWORD *)(v106 + 32 * (unsigned __int16)*v107 + 16))
                {
                  v112 = (_DWORD *)(v110 + 16);
                  do
                  {
                    v113 = v107;
                    v114 = *--v107;
                    v107[2] = v109;
                    v109 = v114;
                  }
                  while (__PAIR64__(v111, *v112) < *(_QWORD *)(v106 + 32 * (unsigned __int16)v114 + 16));
                  *v113 = v108;
                }
                v105 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (j != a2)
          {
            v69 = (unint64_t)(v13 - 2) >> 1;
            v70 = *(_QWORD *)a3;
            v71 = v69;
            do
            {
              v72 = v71;
              if (v69 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = &j[v73];
                if (2 * v72 + 2 >= v13)
                {
                  v75 = *(_QWORD *)(v70 + 536);
                }
                else
                {
                  v75 = *(_QWORD *)(v70 + 536);
                  if (*(_QWORD *)(v75 + 32 * *(unsigned __int16 *)v74 + 16) < *(_QWORD *)(v75
                                                                                           + 32
                                                                                           * *((unsigned __int16 *)v74
                                                                                             + 4)
                                                                                           + 16))
                  {
                    ++v74;
                    v73 = 2 * v72 + 2;
                  }
                }
                result = *v74;
                v76 = j[v72];
                v77 = *(_DWORD *)(v75 + 32 * (unsigned __int16)v76 + 20);
                if (*(_QWORD *)(v75 + 32 * (unsigned __int16)*v74 + 16) >= *(_QWORD *)(v75
                                                                                        + 32 * (unsigned __int16)v76
                                                                                        + 16))
                {
                  j[v72] = result;
                  if (v69 >= v73)
                  {
                    while (1)
                    {
                      v78 = 2 * v73;
                      v73 = (2 * v73) | 1;
                      result = (unint64_t)&j[v73];
                      v79 = v78 + 2;
                      if (v79 < v13
                        && *(_QWORD *)(v75 + 32 * *(unsigned __int16 *)result + 16) < *(_QWORD *)(v75
                                                                                                  + 32 * *(unsigned __int16 *)(result + 8)
                                                                                                  + 16))
                      {
                        result += 8;
                        v73 = v79;
                      }
                      if (*(_QWORD *)(v75 + 32 * (unsigned __int16)*(_QWORD *)result + 16) < __PAIR64__(v77, *(_DWORD *)(v75 + 32 * (unsigned __int16)v76 + 16)))break;
                      *v74 = *(_QWORD *)result;
                      v74 = (uint64_t *)result;
                      if (v69 < v73)
                        goto LABEL_101;
                    }
                  }
                  result = (unint64_t)v74;
LABEL_101:
                  *(_QWORD *)result = v76;
                  v70 = *(_QWORD *)a3;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v80 = (unint64_t)v12 >> 3;
            do
            {
              v82 = 0;
              v83 = *j;
              v84 = *(_QWORD *)a3;
              v85 = j;
              do
              {
                v86 = v85;
                v85 += v82 + 1;
                v87 = 2 * v82;
                v82 = (2 * v82) | 1;
                v88 = v87 + 2;
                if (v88 < v80)
                {
                  v89 = *(unsigned __int16 *)v85;
                  result = *((unsigned __int16 *)v85 + 4);
                  v90 = *(_QWORD *)(v84 + 536);
                  v91 = *(_DWORD *)(v90 + 32 * v89 + 20);
                  v92 = *(_DWORD *)(v90 + 32 * result + 20);
                  if (v91 < v92
                    || v91 == v92
                    && (result = *(unsigned int *)(v90 + 32 * result + 16),
                        *(_DWORD *)(v90 + 32 * v89 + 16) < result))
                  {
                    ++v85;
                    v82 = v88;
                  }
                }
                *v86 = *v85;
              }
              while (v82 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              if (v85 == --a2)
              {
                *v85 = v83;
              }
              else
              {
                *v85 = *a2;
                *a2 = v83;
                v93 = (char *)v85 - (char *)j + 8;
                if (v93 >= 9)
                {
                  v94 = ((unint64_t)v93 >> 3) - 2;
                  v95 = v94 >> 1;
                  v96 = &j[v94 >> 1];
                  v97 = *v85;
                  v98 = *(_QWORD *)(*(_QWORD *)a3 + 536);
                  result = (unsigned __int16)*v96;
                  v99 = *(_DWORD *)(v98 + 32 * result + 20);
                  v100 = (unsigned __int16)*v85;
                  v101 = *(_DWORD *)(v98 + 32 * v100 + 20);
                  if (v99 < v101
                    || v99 == v101
                    && (result = *(unsigned int *)(v98 + 32 * result + 16),
                        result < *(_DWORD *)(v98 + 32 * v100 + 16)))
                  {
                    *v85 = *v96;
                    if (v94 >= 2)
                    {
                      while (1)
                      {
                        v102 = v95 - 1;
                        v95 = (v95 - 1) >> 1;
                        v103 = &j[v95];
                        result = (unsigned __int16)*v103;
                        v104 = *(_DWORD *)(v98 + 32 * result + 20);
                        if (v104 >= v101)
                        {
                          if (v104 != v101)
                            break;
                          result = *(unsigned int *)(v98 + 32 * result + 16);
                          if (result >= *(_DWORD *)(v98 + 32 * v100 + 16))
                            break;
                        }
                        *v96 = *v103;
                        v96 = &j[v95];
                        if (v102 <= 1)
                          goto LABEL_142;
                      }
                    }
                    v103 = v96;
LABEL_142:
                    *v103 = v97;
                  }
                }
              }
            }
            while (v80-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &j[(unint64_t)v13 >> 1];
        v16 = *(_QWORD *)(*(_QWORD *)a3 + 536);
        if ((unint64_t)v12 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v15, v9, v10, v16);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v9, v15, v10, v16);
          v17 = &v9[v14];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v9 + 1, v17 - 1, v117, *(_QWORD *)(*(_QWORD *)a3 + 536));
          a2 = v115;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v9 + 2, &v9[v14 + 1], v116, *(_QWORD *)(*(_QWORD *)a3 + 536));
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v17 - 1, v15, &v9[v14 + 1], *(_QWORD *)(*(_QWORD *)a3 + 536));
          v18 = *v9;
          *v9 = *v17;
          *v17 = v18;
        }
        --a4;
        v19 = *(_QWORD *)a3;
        v20 = *v9;
        if ((a5 & 1) == 0)
        {
          v24 = *((unsigned __int16 *)v9 - 4);
          v21 = *(_QWORD *)(v19 + 536);
          v25 = *(_DWORD *)(v21 + 32 * v24 + 20);
          v22 = (unsigned __int16)*v9;
          v23 = *(_DWORD *)(v21 + 32 * v22 + 20);
          if (v25 < v23)
            goto LABEL_14;
          if (v25 == v23)
          {
            v23 = *(_DWORD *)(v21 + 32 * v24 + 20);
            if (*(_DWORD *)(v21 + 32 * v24 + 16) < *(_DWORD *)(v21 + 32 * v22 + 16))
              goto LABEL_14;
          }
          v42 = *(unsigned __int16 *)v10;
          if (__PAIR64__(v23, *(_DWORD *)(v21 + 32 * v22 + 16)) < *(_QWORD *)(v21 + 32 * v42 + 16))
          {
            j = v9 + 1;
            v43 = *((unsigned __int16 *)v9 + 4);
            for (i = *(_DWORD *)(v21 + 32 * v43 + 20); v23 >= i; i = *(_DWORD *)(v21 + 32 * v45 + 20))
            {
              if (v23 == i && *(_DWORD *)(v21 + 32 * v22 + 16) < *(_DWORD *)(v21 + 32 * v43 + 16))
                break;
              v45 = *((unsigned __int16 *)j++ + 4);
              v43 = v45;
            }
          }
          else
          {
            for (j = v9 + 1; j < a2; ++j)
            {
              if (__PAIR64__(v23, *(_DWORD *)(v21 + 32 * v22 + 16)) < *(_QWORD *)(v21
                                                                                 + 32 * *(unsigned __int16 *)j
                                                                                 + 16))
                break;
            }
          }
          v46 = a2;
          if (j < a2)
          {
            v46 = v10;
            while (__PAIR64__(v23, *(_DWORD *)(v21 + 32 * v22 + 16)) < *(_QWORD *)(v21
                                                                                  + 32 * (unsigned __int16)v42
                                                                                  + 16))
            {
              v47 = *((_WORD *)v46-- - 4);
              LOWORD(v42) = v47;
            }
          }
          if (j < v46)
          {
            v48 = (_DWORD *)(v21 + 32 * v22 + 16);
            v49 = *j;
            v50 = *v46;
            do
            {
              *j = v50;
              *v46 = v49;
              do
              {
                v51 = j[1];
                ++j;
                v49 = v51;
              }
              while (__PAIR64__(v23, *v48) >= *(_QWORD *)(v21 + 32 * (unsigned __int16)v51 + 16));
              do
              {
                v52 = *--v46;
                v50 = v52;
              }
              while (__PAIR64__(v23, *v48) < *(_QWORD *)(v21 + 32 * (unsigned __int16)v52 + 16));
            }
            while (j < v46);
          }
          v53 = j - 1;
          if (j - 1 != v9)
            *v9 = *v53;
          a5 = 0;
          *v53 = v20;
          continue;
        }
        v21 = *(_QWORD *)(v19 + 536);
        v22 = (unsigned __int16)*v9;
        v23 = *(_DWORD *)(v21 + 32 * v22 + 20);
LABEL_14:
        v26 = (_DWORD *)(v21 + 32 * v22 + 16);
        for (k = v9 + 1; ; ++k)
        {
          v28 = *k;
          if (*(_QWORD *)(v21 + 32 * (unsigned __int16)*k + 16) >= __PAIR64__(v23, *v26))
            break;
        }
        v29 = k - 1;
        if (k - 1 == v9)
        {
          v32 = a2;
          if (k < a2)
          {
            v34 = *(unsigned __int16 *)v10;
            v35 = *(_DWORD *)(v21 + 32 * v34 + 20);
            v32 = v10;
            if (v35 >= v23)
            {
              v32 = v10;
              do
              {
                if (v35 == v23)
                {
                  if (k >= v32 || *(_DWORD *)(v21 + 32 * v34 + 16) < *v26)
                    break;
                }
                else if (k >= v32)
                {
                  break;
                }
                v41 = *((unsigned __int16 *)v32-- - 4);
                v34 = v41;
                v35 = *(_DWORD *)(v21 + 32 * v41 + 20);
              }
              while (v35 >= v23);
            }
          }
        }
        else
        {
          v30 = *(unsigned __int16 *)v10;
          v31 = *(_DWORD *)(v21 + 32 * v30 + 20);
          v32 = v10;
          while (v31 >= v23 && (v31 != v23 || *(_DWORD *)(v21 + 32 * v30 + 16) >= *v26))
          {
            v33 = *((unsigned __int16 *)v32-- - 4);
            v30 = v33;
            v31 = *(_DWORD *)(v21 + 32 * v33 + 20);
          }
        }
        if (k < v32)
        {
          v36 = *v32;
          v37 = k;
          v38 = v32;
          do
          {
            *v37++ = v36;
            *v38 = v28;
            while (1)
            {
              v28 = *v37;
              if (*(_QWORD *)(v21 + 32 * (unsigned __int16)*v37 + 16) >= __PAIR64__(v23, *v26))
                break;
              ++v37;
            }
            v29 = v37 - 1;
            do
            {
              v39 = *--v38;
              v36 = v39;
            }
            while (*(_QWORD *)(v21 + 32 * (unsigned __int16)v39 + 16) >= __PAIR64__(v23, *v26));
          }
          while (v37 < v38);
        }
        if (v29 != v9)
          *v9 = *v29;
        *v29 = v20;
        if (k < v32)
        {
LABEL_40:
          result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(v9, v29, a3, a4, a5 & 1);
          a5 = 0;
          j = v29 + 1;
          continue;
        }
        v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v9, v29, a3);
        j = v29 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v29 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v40)
            continue;
          goto LABEL_40;
        }
        a2 = v29;
        if (!v40)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *result;
  v6 = (unsigned __int16)*a2;
  v7 = (unsigned __int16)*result;
  v8 = *(_DWORD *)(a4 + 32 * v7 + 20);
  if (*(_QWORD *)(a4 + 32 * v6 + 16) >= *(_QWORD *)(a4 + 32 * v7 + 16))
  {
    if (*(_QWORD *)(a4 + 32 * (unsigned __int16)*a3 + 16) < *(_QWORD *)(a4 + 32 * v6 + 16))
    {
      *a2 = *a3;
      *a3 = v4;
      v9 = *result;
      if (*(_QWORD *)(a4 + 32 * (unsigned __int16)*a2 + 16) < *(_QWORD *)(a4 + 32 * (unsigned __int16)*result + 16))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (*(_QWORD *)(a4 + 32 * (unsigned __int16)*a3 + 16) < *(_QWORD *)(a4 + 32 * v6 + 16))
    {
      *result = *a3;
    }
    else
    {
      *result = v4;
      *a2 = v5;
      if (*(_QWORD *)(a4 + 32 * (unsigned __int16)*a3 + 16) >= __PAIR64__(v8, *(_DWORD *)(a4 + 32 * v7 + 16)))
        return result;
      *a2 = *a3;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 536));
  v11 = *a3;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 536);
  if (*(_QWORD *)(v12 + 32 * (unsigned __int16)*a4 + 16) < *(_QWORD *)(v12 + 32 * (unsigned __int16)*a3 + 16))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(_QWORD *)(v12 + 32 * (unsigned __int16)*a3 + 16) < *(_QWORD *)(v12 + 32 * (unsigned __int16)*a2 + 16))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(_QWORD *)(v12 + 32 * (unsigned __int16)*a2 + 16) < *(_QWORD *)(v12 + 32 * (unsigned __int16)*a1 + 16))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = *(_QWORD *)(*(_QWORD *)a6 + 536);
  if (*(_QWORD *)(v14 + 32 * (unsigned __int16)*a5 + 16) < *(_QWORD *)(v14 + 32 * (unsigned __int16)*a4 + 16))
  {
    *a4 = *a5;
    *a5 = v13;
    v15 = *a3;
    if (*(_QWORD *)(v14 + 32 * (unsigned __int16)*a4 + 16) < *(_QWORD *)(v14 + 32 * (unsigned __int16)*a3 + 16))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_QWORD *)(v14 + 32 * (unsigned __int16)*a3 + 16) < *(_QWORD *)(v14 + 32 * (unsigned __int16)*a2 + 16))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *a1;
        if (*(_QWORD *)(v14 + 32 * (unsigned __int16)*a2 + 16) < *(_QWORD *)(v14 + 32 * (unsigned __int16)*a1 + 16))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a1;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * (unsigned __int16)*(a2 - 1) + 16) < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * (unsigned __int16)*a1 + 16))
      {
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 536));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 536));
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 536);
      break;
  }
  while (1)
  {
    v15 = *v10;
    v16 = v13 + 32 * (unsigned __int16)*v10;
    v17 = *(_DWORD *)(v16 + 20);
    if (*(_QWORD *)(v16 + 16) < *(_QWORD *)(v13 + 32 * (unsigned __int16)*v9 + 16))
    {
      *v10 = *v9;
      v14 = a1;
      if (v9 != a1)
      {
        v18 = (_DWORD *)(v16 + 16);
        v19 = v11;
        while (1)
        {
          v20 = (unsigned __int16)*(uint64_t *)((char *)a1 + v19 + 8);
          v21 = *(_DWORD *)(v13 + 32 * v20 + 20);
          if (v17 >= v21)
          {
            if (v17 != v21)
            {
              v14 = v9;
              goto LABEL_7;
            }
            if (*v18 >= *(_DWORD *)(v13 + 32 * v20 + 16))
              break;
          }
          --v9;
          *(uint64_t *)((char *)a1 + v19 + 16) = *(uint64_t *)((char *)a1 + v19 + 8);
          v19 -= 8;
          if (v19 == -16)
          {
            v14 = a1;
            goto LABEL_7;
          }
        }
        v14 = (uint64_t *)((char *)a1 + v19 + 16);
      }
LABEL_7:
      *v14 = v15;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

_QWORD *md::TransitLineLabelFeature::styleFromTransitLineSegment(_QWORD *a1, unsigned __int16 a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;

  if (a3 == -1)
  {
    v5 = *(unsigned int *)(a1[67] + 32 * a2 + 24);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[35] - a1[34]) >> 4) > v5)
    {
      v6 = a1[12];
      if (v5 < (a1[13] - v6) >> 4)
        return (_QWORD *)(v6 + 16 * v5);
    }
    return a1 + 10;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[35] - a1[34]) >> 4) <= a3)
    return a1 + 10;
  v3 = a1[12];
  if (a3 < (unint64_t)((a1[13] - v3) >> 4))
    return (_QWORD *)(v3 + 16 * a3);
  else
    return a1 + 10;
}

void md::LabelExternalTransitLink::linkData(md::LabelExternalTransitLink *this, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = (std::mutex *)(a2 + 40);
  std::mutex::lock((std::mutex *)(a2 + 40));
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)this = *(_QWORD *)(a2 + 24);
  *((_QWORD *)this + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::mutex::unlock(v4);
}

float md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  int64x2_t *v18;
  int64x2_t v19;
  int64x2_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  float v42;
  uint64_t *v44;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = (uint64_t *)(a2 + 8);
  v8 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v7 & 1) == 0)
  {
    v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v22)
    {
      v23 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v23, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  v9 = (v5 - v4) / 20;
  v10 = *((_QWORD *)v8 + 299);
  if (v5 == v4)
  {
    v12 = 0;
    v14 = 0;
  }
  else
  {
    if (v9 >> 61)
      abort();
    v11 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 8 * v9, 8);
    v12 = v11;
    v13 = 0;
    v14 = (uint64_t *)(v11 + 8 * v9);
    do
    {
      if (v11 + v13)
        *(_QWORD *)(v11 + v13) = 0;
      v13 += 8;
    }
    while (8 * v9 != v13);
    if (v9 <= 1)
      v15 = 1;
    else
      v15 = v9;
    if (v15 >= 4)
    {
      v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      v17 = (int64x2_t)xmmword_19FFB2E40;
      v18 = (int64x2_t *)(v11 + 16);
      v19 = vdupq_n_s64(2uLL);
      v20 = vdupq_n_s64(4uLL);
      v21 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v18[-1] = v17;
        *v18 = vaddq_s64(v17, v19);
        v17 = vaddq_s64(v17, v20);
        v18 += 2;
        v21 -= 4;
      }
      while (v21);
      goto LABEL_21;
    }
    v16 = 0;
    do
    {
      *(_QWORD *)(v11 + 8 * v16) = v16;
      ++v16;
LABEL_21:
      ;
    }
    while (v15 != v16);
  }
  v24 = 126 - 2 * __clz(((uint64_t)v14 - v12) >> 3);
  v25 = (char *)v14 - v12;
  v44 = v6;
  if (v14 == (uint64_t *)v12)
    v26 = 0;
  else
    v26 = v24;
  std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *,false>(v12, v14, &v44, v26, 1);
  v27 = v9 - 1;
  v28 = *(unsigned __int16 *)(a2 + 42);
  if (v28 == 0xFFFF)
  {
    v28 = *(unsigned __int16 *)(a1 + 600);
    v29 = 0;
    if (v9 == 1)
    {
LABEL_47:
      v42 = (float)(*(float *)(*v6 + 20 * *(_QWORD *)(v12 + 8 * v27))
                  + *(float *)(*v6 + 20 * *(_QWORD *)(v12 + 8 * v29)))
          * 0.5;
      goto LABEL_48;
    }
  }
  else
  {
    v29 = 0;
    if (v9 == 1)
      goto LABEL_47;
  }
  v30 = *(_QWORD *)(a1 + 536);
  v31 = *(unsigned __int8 *)(v30 + 32 * v28 + 9);
  while (*(unsigned __int8 *)(v30 + 32 * *(_QWORD *)(v12 + 8 * v29) + 9) != (_DWORD)v31)
  {
    if (v27 == ++v29)
    {
      v29 = v9 - 1;
      break;
    }
  }
  v32 = 0;
  while (*(unsigned __int8 *)(v30 + 32 * *(_QWORD *)(v12 + 8 * v27) + 9) != (_DWORD)v31)
  {
    ++v32;
    if (!--v27)
      goto LABEL_47;
  }
  if (v29 >= v27)
    goto LABEL_47;
  v33 = v9 + ~v29 - v32;
  if (v33 <= 1)
  {
    v34 = 0;
    v35 = v29;
    goto LABEL_44;
  }
  v36 = 0;
  v37 = 0;
  v38 = ~v29 + v9 - v32;
  v39 = v33 & 0xFFFFFFFFFFFFFFFELL;
  v40 = v38 & 0xFFFFFFFFFFFFFFFELL;
  v41 = (_QWORD *)(v12 + 8 * v29 + 8);
  do
  {
    v36 = v36 - v31 + *(unsigned __int8 *)(v30 + 32 * *(v41 - 1) + 9);
    v37 = v37 - v31 + *(unsigned __int8 *)(v30 + 32 * *v41 + 9);
    v41 += 2;
    v40 -= 2;
  }
  while (v40);
  v34 = v37 + v36;
  if (v33 != v39)
  {
    v35 = v29 + v39;
    do
LABEL_44:
      v34 = v34 - v31 + *(unsigned __int8 *)(v30 + 32 * *(_QWORD *)(v12 + 8 * v35++) + 9);
    while (v27 != v35);
  }
  if (!v34)
    goto LABEL_47;
  v42 = *(float *)(*v6 + 20 * v28);
LABEL_48:
  (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v10 + 40))(v10, v12, v25);
  return v42;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  float v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  float v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float v143;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v84 = *v11;
        if (*(float *)(**a3 + 20 * *v10) < *(float *)(**a3 + 20 * *v11))
        {
          *v11 = *v10;
          goto LABEL_159;
        }
        return result;
      case 3:
        v85 = **a3;
        v84 = *v11;
        v86 = v11[1];
        v87 = *(float *)(v85 + 20 * v86);
        v88 = *(float *)(v85 + 20 * *v11);
        v89 = *v10;
        v90 = *(float *)(v85 + 20 * *v10);
        if (v87 >= v88)
        {
          if (v90 < v87)
          {
            v11[1] = v89;
            *v10 = v86;
            v99 = *v11;
            v95 = v11[1];
            v97 = *(float *)(v85 + 20 * v95);
            goto LABEL_148;
          }
        }
        else
        {
          if (v90 >= v87)
          {
            *v11 = v86;
            v11[1] = v84;
            if (*(float *)(v85 + 20 * *v10) >= v88)
              return result;
            v11[1] = *v10;
          }
          else
          {
            *v11 = v89;
          }
LABEL_159:
          *v10 = v84;
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(v11, v11 + 1, v11 + 2, a2 - 1, **a3);
      case 5:
        v91 = v11 + 1;
        v92 = v11 + 2;
        v93 = v11 + 3;
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(v11, v11 + 1, v11 + 2, v11 + 3, **a3);
        v94 = v11[3];
        v85 = **a3;
        if (*(float *)(v85 + 20 * *v10) < *(float *)(v85 + 20 * v94))
        {
          *v93 = *v10;
          *v10 = v94;
          v95 = *v93;
          v96 = *v92;
          v97 = *(float *)(v85 + 20 * *v93);
          if (v97 < *(float *)(v85 + 20 * *v92))
          {
            *v92 = v95;
            *v93 = v96;
            v98 = *v91;
            if (v97 < *(float *)(v85 + 20 * *v91))
            {
              v11[1] = v95;
              v11[2] = v98;
              v99 = *v11;
LABEL_148:
              if (v97 < *(float *)(v85 + 20 * v99))
              {
                *v11 = v95;
                v11[1] = v99;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 191)
        {
          v100 = *a3;
          if ((a5 & 1) != 0)
          {
            if (v11 != a2)
            {
              v101 = v11 + 1;
              if (v11 + 1 != a2)
              {
                v102 = *v100;
                v103 = 8;
                v104 = v11;
                do
                {
                  v107 = *v104;
                  v106 = v104[1];
                  v104 = v101;
                  v108 = *(float *)(v102 + 20 * v106);
                  if (v108 < *(float *)(v102 + 20 * v107))
                  {
                    v109 = v103;
                    do
                    {
                      *(uint64_t *)((char *)v11 + v109) = v107;
                      v110 = v109 - 8;
                      if (v109 == 8)
                      {
                        v105 = v11;
                        goto LABEL_110;
                      }
                      v107 = *(uint64_t *)((char *)v11 + v109 - 16);
                      v109 -= 8;
                    }
                    while (v108 < *(float *)(v102 + 20 * v107));
                    v105 = (uint64_t *)((char *)v11 + v110);
LABEL_110:
                    *v105 = v106;
                  }
                  v101 = v104 + 1;
                  v103 += 8;
                }
                while (v104 + 1 != a2);
              }
            }
          }
          else if (v11 != a2)
          {
            v139 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v140 = *v100;
              do
              {
                v142 = *v9;
                v141 = v9[1];
                v9 = v139;
                v143 = *(float *)(v140 + 20 * v141);
                if (v143 < *(float *)(v140 + 20 * v142))
                {
                  do
                  {
                    *v139 = v142;
                    v142 = *(v139 - 2);
                    --v139;
                  }
                  while (v143 < *(float *)(v140 + 20 * v142));
                  *v139 = v141;
                }
                v139 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v111 = (unint64_t)(v13 - 2) >> 1;
            v112 = v111;
            do
            {
              if (v111 >= v112)
              {
                v114 = (2 * v112) | 1;
                v115 = &v11[v114];
                v116 = **a3;
                if (2 * v112 + 2 < v13 && *(float *)(v116 + 20 * *v115) < *(float *)(v116 + 20 * v115[1]))
                {
                  ++v115;
                  v114 = 2 * v112 + 2;
                }
                v117 = &v11[v112];
                result = *v115;
                v118 = *v117;
                v119 = *(float *)(v116 + 20 * *v117);
                if (*(float *)(v116 + 20 * *v115) >= v119)
                {
                  do
                  {
                    v120 = v115;
                    *v117 = result;
                    if (v111 < v114)
                      break;
                    v121 = 2 * v114;
                    v114 = (2 * v114) | 1;
                    v115 = &v11[v114];
                    v122 = v121 + 2;
                    if (v122 < v13 && *(float *)(v116 + 20 * *v115) < *(float *)(v116 + 20 * v115[1]))
                    {
                      ++v115;
                      v114 = v122;
                    }
                    result = *v115;
                    v117 = v120;
                  }
                  while (*(float *)(v116 + 20 * *v115) >= v119);
                  *v120 = v118;
                }
              }
              v113 = v112-- <= 0;
            }
            while (!v113);
            v123 = (unint64_t)v12 >> 3;
            do
            {
              v124 = 0;
              v125 = *v11;
              v126 = *a3;
              v127 = v11;
              do
              {
                v128 = v127;
                v127 += v124 + 1;
                v129 = 2 * v124;
                v124 = (2 * v124) | 1;
                v130 = v129 + 2;
                if (v130 < v123)
                {
                  result = 20 * v127[1];
                  if (*(float *)(*v126 + 20 * *v127) < *(float *)(*v126 + result))
                  {
                    ++v127;
                    v124 = v130;
                  }
                }
                *v128 = *v127;
              }
              while (v124 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
              if (v127 == --a2)
              {
                *v127 = v125;
              }
              else
              {
                *v127 = *a2;
                *a2 = v125;
                v131 = (char *)v127 - (char *)v11 + 8;
                if (v131 >= 9)
                {
                  v132 = (((unint64_t)v131 >> 3) - 2) >> 1;
                  v133 = &v11[v132];
                  v134 = *v133;
                  v135 = *v127;
                  v136 = **a3;
                  v137 = *(float *)(v136 + 20 * *v127);
                  if (*(float *)(v136 + 20 * *v133) < v137)
                  {
                    do
                    {
                      v138 = v133;
                      *v127 = v134;
                      if (!v132)
                        break;
                      v132 = (v132 - 1) >> 1;
                      v133 = &v11[v132];
                      v134 = *v133;
                      v127 = v138;
                    }
                    while (*(float *)(v136 + 20 * *v133) < v137);
                    *v138 = v135;
                  }
                }
              }
              v113 = v123-- <= 2;
            }
            while (!v113);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        v16 = **a3;
        v17 = *v10;
        v18 = *(float *)(v16 + 20 * *v10);
        if ((unint64_t)v12 >= 0x401)
        {
          v19 = *v15;
          v20 = *v11;
          v21 = *(float *)(v16 + 20 * *v15);
          v22 = *(float *)(v16 + 20 * *v11);
          if (v21 >= v22)
          {
            if (v18 < v21)
            {
              *v15 = v17;
              *v10 = v19;
              v27 = *v11;
              if (*(float *)(v16 + 20 * *v15) < *(float *)(v16 + 20 * *v11))
              {
                *v11 = *v15;
                *v15 = v27;
              }
            }
          }
          else
          {
            if (v18 < v21)
            {
              *v11 = v17;
              goto LABEL_21;
            }
            *v11 = v19;
            *v15 = v20;
            if (*(float *)(v16 + 20 * *v10) < v22)
            {
              *v15 = *v10;
LABEL_21:
              *v10 = v20;
            }
          }
          v29 = &v11[v14];
          v32 = *(v29 - 1);
          v30 = v29 - 1;
          v31 = v32;
          v33 = v11[1];
          v34 = *(float *)(v16 + 20 * v32);
          v35 = *(float *)(v16 + 20 * v33);
          v36 = *(a2 - 2);
          v37 = *(float *)(v16 + 20 * v36);
          if (v34 >= v35)
          {
            if (v37 < v34)
            {
              *v30 = v36;
              *(a2 - 2) = v31;
              v38 = v11[1];
              if (*(float *)(v16 + 20 * *v30) < *(float *)(v16 + 20 * v38))
              {
                v11[1] = *v30;
                *v30 = v38;
              }
            }
          }
          else
          {
            if (v37 < v34)
            {
              v11[1] = v36;
              goto LABEL_33;
            }
            v11[1] = v31;
            *v30 = v33;
            v39 = *(a2 - 2);
            if (*(float *)(v16 + 20 * v39) < v35)
            {
              *v30 = v39;
LABEL_33:
              *(a2 - 2) = v33;
            }
          }
          v40 = &v11[v14];
          v43 = v40[1];
          v41 = v40 + 1;
          v42 = v43;
          v44 = v11[2];
          v45 = *(float *)(v16 + 20 * v43);
          v46 = *(float *)(v16 + 20 * v44);
          v47 = *(a2 - 3);
          v48 = *(float *)(v16 + 20 * v47);
          if (v45 >= v46)
          {
            if (v48 < v45)
            {
              *v41 = v47;
              *(a2 - 3) = v42;
              v49 = v11[2];
              if (*(float *)(v16 + 20 * *v41) < *(float *)(v16 + 20 * v49))
              {
                v11[2] = *v41;
                *v41 = v49;
              }
            }
          }
          else
          {
            if (v48 < v45)
            {
              v11[2] = v47;
              goto LABEL_42;
            }
            v11[2] = v42;
            *v41 = v44;
            v50 = *(a2 - 3);
            if (*(float *)(v16 + 20 * v50) < v46)
            {
              *v41 = v50;
LABEL_42:
              *(a2 - 3) = v44;
            }
          }
          v51 = *v15;
          v52 = *v30;
          v53 = *(float *)(v16 + 20 * *v15);
          v54 = *(float *)(v16 + 20 * *v30);
          v55 = *v41;
          v56 = *(float *)(v16 + 20 * *v41);
          if (v53 >= v54)
          {
            if (v56 >= v53)
              goto LABEL_50;
            *v15 = v55;
            *v41 = v51;
            v41 = v15;
            v51 = v52;
            if (v56 >= v54)
            {
              v51 = v55;
              goto LABEL_50;
            }
          }
          else if (v56 >= v53)
          {
            *v30 = v51;
            *v15 = v52;
            v30 = v15;
            v51 = v55;
            if (v56 >= v54)
            {
              v51 = v52;
LABEL_50:
              v57 = *v11;
              *v11 = v51;
              *v15 = v57;
              goto LABEL_51;
            }
          }
          *v30 = v55;
          *v41 = v52;
          goto LABEL_50;
        }
        v23 = *v11;
        v24 = *v15;
        v25 = *(float *)(v16 + 20 * *v11);
        v26 = *(float *)(v16 + 20 * *v15);
        if (v25 >= v26)
        {
          if (v18 < v25)
          {
            *v11 = v17;
            *v10 = v23;
            v28 = *v15;
            if (*(float *)(v16 + 20 * *v11) < *(float *)(v16 + 20 * *v15))
            {
              *v15 = *v11;
              *v11 = v28;
            }
          }
        }
        else
        {
          if (v18 >= v25)
          {
            *v15 = v23;
            *v11 = v24;
            if (*(float *)(v16 + 20 * *v10) >= v26)
              goto LABEL_51;
            *v11 = *v10;
          }
          else
          {
            *v15 = v17;
          }
          *v10 = v24;
        }
LABEL_51:
        --a4;
        v58 = *v11;
        if ((a5 & 1) == 0)
        {
          v59 = *(float *)(v16 + 20 * v58);
          if (*(float *)(v16 + 20 * *(v11 - 1)) >= v59)
          {
            if (v59 >= *(float *)(v16 + 20 * *v10))
            {
              v76 = v11 + 1;
              do
              {
                v11 = v76;
                if (v76 >= a2)
                  break;
                ++v76;
              }
              while (v59 >= *(float *)(v16 + 20 * *v11));
            }
            else
            {
              do
              {
                v75 = v11[1];
                ++v11;
              }
              while (v59 >= *(float *)(v16 + 20 * v75));
            }
            v77 = a2;
            if (v11 < a2)
            {
              v77 = a2;
              do
                v78 = *--v77;
              while (v59 < *(float *)(v16 + 20 * v78));
            }
            if (v11 < v77)
            {
              v79 = *v11;
              v80 = *v77;
              do
              {
                *v11 = v80;
                *v77 = v79;
                do
                {
                  v81 = v11[1];
                  ++v11;
                  v79 = v81;
                }
                while (v59 >= *(float *)(v16 + 20 * v81));
                do
                {
                  v82 = *--v77;
                  v80 = v82;
                }
                while (v59 < *(float *)(v16 + 20 * v82));
              }
              while (v11 < v77);
            }
            v83 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v83;
            a5 = 0;
            *v83 = v58;
            continue;
          }
        }
        v60 = **a3;
        v61 = *(float *)(v60 + 20 * v58);
        v62 = v11;
        do
        {
          v63 = v62;
          v65 = v62[1];
          ++v62;
          v64 = v65;
        }
        while (*(float *)(v60 + 20 * v65) < v61);
        v66 = a2;
        if (v63 == v11)
        {
          v66 = a2;
          do
          {
            if (v62 >= v66)
              break;
            v68 = *--v66;
          }
          while (*(float *)(v60 + 20 * v68) >= v61);
        }
        else
        {
          do
            v67 = *--v66;
          while (*(float *)(v60 + 20 * v67) >= v61);
        }
        if (v62 < v66)
        {
          v69 = *v66;
          v70 = v62;
          v71 = v66;
          do
          {
            *v70 = v69;
            *v71 = v64;
            do
            {
              v63 = v70;
              v72 = v70[1];
              ++v70;
              v64 = v72;
            }
            while (*(float *)(v60 + 20 * v72) < v61);
            do
            {
              v73 = *--v71;
              v69 = v73;
            }
            while (*(float *)(v60 + 20 * v73) >= v61);
          }
          while (v70 < v71);
        }
        if (v63 != v11)
          *v11 = *v63;
        *v63 = v58;
        if (v62 < v66)
        {
LABEL_72:
          result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *,false>(v9, v63, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v63 + 1;
          continue;
        }
        v74 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(v11, v63, a3);
        v11 = v63 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(v63 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v74)
            continue;
          goto LABEL_72;
        }
        a2 = v63;
        if (!v74)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + 20 * *a2);
  v8 = *(float *)(a5 + 20 * *result);
  v9 = *a3;
  v10 = *(float *)(a5 + 20 * *a3);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(float *)(a5 + 20 * *a2) < *(float *)(a5 + 20 * *result))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(float *)(a5 + 20 * *a3) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(float *)(a5 + 20 * *a4) < *(float *)(a5 + 20 * v5))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(float *)(a5 + 20 * *a3) < *(float *)(a5 + 20 * *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(float *)(a5 + 20 * *a2) < *(float *)(a5 + 20 * *result))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t i;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + 20 * v8) < *(float *)(**a3 + 20 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = **a3;
      v11 = *a1;
      v12 = a1[1];
      v13 = *(float *)(v10 + 20 * v12);
      v14 = *(float *)(v10 + 20 * *a1);
      v15 = *(a2 - 1);
      v16 = *(float *)(v10 + 20 * v15);
      if (v13 >= v14)
      {
        if (v16 < v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v39 = *a1;
          v38 = a1[1];
          if (*(float *)(v10 + 20 * v38) < *(float *)(v10 + 20 * *a1))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v49 = *(a2 - 1);
        if (*(float *)(v10 + 20 * v49) < v14)
        {
          a1[1] = v49;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = **a3;
      if (*(float *)(v32 + 20 * v30) < *(float *)(v32 + 20 * v31))
      {
        *v29 = v30;
        *(a2 - 1) = v31;
        v33 = *v29;
        v34 = *v28;
        v35 = *(float *)(v32 + 20 * *v29);
        if (v35 < *(float *)(v32 + 20 * *v28))
        {
          *v28 = v33;
          *v29 = v34;
          v36 = *v27;
          if (v35 < *(float *)(v32 + 20 * *v27))
          {
            a1[1] = v33;
            a1[2] = v36;
            v37 = *a1;
            if (v35 < *(float *)(v32 + 20 * *a1))
            {
              *a1 = v33;
              a1[1] = v37;
            }
          }
        }
      }
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = **a3;
      v21 = *a1;
      v22 = *(float *)(v20 + 20 * v19);
      v23 = *(float *)(v20 + 20 * *a1);
      v24 = *(float *)(v20 + 20 * v17);
      if (v22 < v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 >= v22)
        {
          *a1 = v19;
          a1[1] = v21;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 >= v23)
            goto LABEL_23;
        }
LABEL_22:
        *v25 = v17;
        *v26 = v21;
        goto LABEL_23;
      }
      if (v24 < v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 < v23)
          goto LABEL_22;
      }
LABEL_23:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      for (i = 24; ; i += 8)
      {
        v44 = *v40;
        v45 = *v18;
        v46 = *(float *)(v20 + 20 * *v40);
        if (v46 < *(float *)(v20 + 20 * v45))
        {
          v47 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v47) = v45;
            v48 = v47 - 8;
            if (v47 == 8)
            {
              v43 = a1;
              goto LABEL_26;
            }
            v45 = *(uint64_t *)((char *)a1 + v47 - 16);
            v47 -= 8;
          }
          while (v46 < *(float *)(v20 + 20 * v45));
          v43 = (uint64_t *)((char *)a1 + v48);
LABEL_26:
          *v43 = v44;
          if (++v41 == 8)
            break;
        }
        v18 = v40++;
        if (v40 == a2)
          return 1;
      }
      return v40 + 1 == a2;
  }
}

uint64_t std::sort[abi:nn180100]<std::__wrap_iter<unsigned long *>,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  v7[0] = a3;
  v7[1] = a4;
  if (a2 == (uint64_t *)a1)
    v5 = 0;
  else
    v5 = v4;
  return std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *,false>(a1, a2, v7, v5, 1);
}

uint64_t std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::__emplace_unique_key_args<md::LabelShieldEntry,md::LabelShieldEntry const&>(uint64_t **a1, void **a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  unsigned int v7;
  char v8;
  void *v9;
  size_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  _QWORD **v30;
  __int128 v31;
  uint64_t *v32;
  void *__s1;

  v4 = (uint64_t)(a1 + 1);
  v3 = (uint64_t)a1[1];
  if (v3)
  {
    v6 = a2[4];
    v7 = *((unsigned __int8 *)a2 + 44);
    v8 = *((_BYTE *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    __s1 = v9;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v4 = v3;
      v12 = *(_QWORD *)(v3 + 64);
      if ((uint64_t)v6 < v12)
        goto LABEL_8;
      v13 = *(unsigned __int8 *)(v3 + 76);
      if (v7 < v13)
        goto LABEL_8;
      v14 = *(char *)(v3 + 55);
      if (v14 >= 0)
        v15 = (const void *)(v3 + 32);
      else
        v15 = *(const void **)(v3 + 32);
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v3 + 55);
      else
        v16 = *(_QWORD *)(v3 + 40);
      if (v16 >= v10)
        v17 = v10;
      else
        v17 = v16;
      v18 = memcmp(__s1, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_24:
        v19 = bswap32(*((_DWORD *)a2 + 10));
        v20 = bswap32(*(_DWORD *)(v4 + 72));
        v21 = v19 >= v20;
        v22 = v19 > v20;
        v23 = !v21;
        if (v22 - v23 < 0)
          goto LABEL_8;
        if (v12 >= (uint64_t)v6 && v13 >= v7)
        {
          v24 = memcmp(v15, __s1, v17);
          if (v24)
          {
            if (v24 < 0)
              goto LABEL_38;
          }
          else if (v16 < v10)
          {
            goto LABEL_38;
          }
          v25 = bswap32(*(_DWORD *)(v4 + 72));
          v26 = bswap32(*((_DWORD *)a2 + 10));
          v21 = v25 >= v26;
          v27 = v25 > v26;
          v28 = !v21;
          if (v27 - v28 >= 0)
            return 0;
        }
LABEL_38:
        v11 = (uint64_t *)(v4 + 8);
        v3 = *(_QWORD *)(v4 + 8);
        if (!v3)
          goto LABEL_41;
      }
      else
      {
        if (v10 >= v16)
          goto LABEL_24;
LABEL_8:
        v3 = *(_QWORD *)v4;
        v11 = (uint64_t *)v4;
        if (!*(_QWORD *)v4)
          goto LABEL_41;
      }
    }
  }
  v11 = (uint64_t *)(a1 + 1);
LABEL_41:
  v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 80, 8);
  v30 = (_QWORD **)(v29 + 32);
  *(_QWORD *)(v29 + 56) = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v30, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v31 = *a3;
    *(_QWORD *)(v29 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v30 = v31;
  }
  *(_QWORD *)(v29 + 64) = *((_QWORD *)a3 + 4);
  *(_DWORD *)(v29 + 72) = *((_DWORD *)a3 + 10);
  *(_BYTE *)(v29 + 76) = *((_BYTE *)a3 + 44);
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = v4;
  *v11 = v29;
  v32 = (uint64_t *)**a1;
  if (v32)
  {
    *a1 = v32;
    v29 = *v11;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v29);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return 1;
}

void sub_19FC3C8FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 16) + 40))(*(_QWORD *)(v1 + 16), v2, 80);
  _Unwind_Resume(a1);
}

uint64_t std::vector<md::TransitShieldIconLabelPart *,geo::StdAllocator<md::TransitShieldIconLabelPart *,mdm::Allocator>>::push_back[abi:nn180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = *a2;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = ((uint64_t)v4 - *(_QWORD *)result) >> 3;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61)
    abort();
  v9 = v5 - *(_QWORD *)result;
  if (v9 >> 2 > v8)
    v8 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  if (v8)
  {
    v10 = 8 * v8;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v8, 8);
    v11 = (_QWORD *)(result + 8 * v7);
    v8 = result + v10;
    if (result)
      *v11 = *a2;
  }
  else
  {
    v11 = (_QWORD *)(8 * v7);
  }
  v6 = v11 + 1;
  v13 = *(_QWORD *)v3;
  v12 = *(_QWORD *)(v3 + 8);
  if (v12 != *(_QWORD *)v3)
  {
    v14 = v12 - *(_QWORD *)v3 - 8;
    if (v14 < 0x38)
    {
      v16 = *(_QWORD *)(v3 + 8);
    }
    else if ((unint64_t)(v12 - (_QWORD)v11) < 0x20)
    {
      v16 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      v15 = (v14 >> 3) + 1;
      v16 = v12 - 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = v11 - 2;
      v18 = (__int128 *)(v12 - 16);
      v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v11 -= v15 & 0x3FFFFFFFFFFFFFFCLL;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v21 = *(_QWORD *)(v16 - 8);
      v16 -= 8;
      *--v11 = v21;
    }
    while (v16 != v13);
LABEL_24:
    v12 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v11;
  *(_QWORD *)(v3 + 8) = v6;
  v22 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v8;
  if (v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v22 - v12);
LABEL_27:
  *(_QWORD *)(v3 + 8) = v6;
  return result;
}

uint64_t md::LabelStyle::textStyleGroup(uint64_t a1)
{
  float *v2;

  v2 = *(float **)(a1 + 280);
  if (v2)
  {
    if (vabds_f32(v2[2], *(float *)(a1 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a1, (uint64_t)v2, 0);
      v2 = *(float **)(a1 + 280);
    }
  }
  else
  {
    v2 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a1, 0);
    *(_QWORD *)(a1 + 280) = v2;
  }
  return *(_QWORD *)v2;
}

uint64_t std::make_shared[abi:nn180100]<md::LabelText,std::shared_ptr<md::TextDataString> const&,unsigned char const&,void>(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0xB0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DDF50;
  result = md::LabelText::LabelText((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

uint64_t std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 55) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 40))(*(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 80);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t *j;
  uint64_t v26;
  float v27;
  uint64_t *v28;
  uint64_t v29;
  float v30;
  uint64_t *k;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  float v38;
  uint64_t v39;
  float v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  unsigned int v79;
  int64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  uint64_t *v103;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  float v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  float v123;
  uint64_t v124;
  unsigned int v125;
  unint64_t v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  float v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  float v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v142 = a2 - 3;
  v143 = a2 - 2;
  i = v8;
  v144 = a2;
  while (2)
  {
    v8 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = a2 - i;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v58 = *v9;
        v59 = *i;
        v60 = *(_QWORD *)a3[1];
        v61 = *(float *)(v60 + 20 * *v9);
        v62 = *(float *)(v60 + 20 * *i);
        if (v61 < v62
          || v61 == v62
          && *(unsigned __int16 *)(*(_QWORD *)(*a3 + 536) + 32 * v58 + 14) < *(unsigned __int16 *)(*(_QWORD *)(*a3 + 536) + 32 * v59 + 14))
        {
          *i = v58;
          *v9 = v59;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(i, i + 1, v9, *a3, *(_QWORD *)a3[1]);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(i, i + 1, i + 2, v9, (uint64_t)a3);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *,0>(i, i + 1, i + 2, i + 3, v9, (uint64_t)a3);
      default:
        if (v11 <= 191)
        {
          v63 = *a3;
          v64 = (uint64_t *)a3[1];
          if ((a5 & 1) != 0)
          {
            if (i != a2)
            {
              v65 = i + 1;
              if (i + 1 != a2)
              {
                v66 = 0;
                v67 = *v64;
                v68 = i;
                do
                {
                  v70 = v68;
                  v68 = v65;
                  v72 = *v70;
                  v71 = v70[1];
                  v73 = *(float *)(v67 + 20 * v71);
                  v74 = *(float *)(v67 + 20 * *v70);
                  if (v73 < v74
                    || v73 == v74
                    && *(unsigned __int16 *)(*(_QWORD *)(v63 + 536) + 32 * v71 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v63 + 536) + 32 * v72 + 14))
                  {
                    v70[1] = v72;
                    v69 = i;
                    if (v70 != i)
                    {
                      v75 = v66;
                      while (1)
                      {
                        v76 = *(uint64_t *)((char *)i + v75 - 8);
                        result = 20 * v76;
                        v77 = *(float *)(v67 + 20 * v76);
                        if (v73 >= v77)
                        {
                          if (v73 != v77)
                          {
                            v69 = (uint64_t *)((char *)i + v75);
                            goto LABEL_103;
                          }
                          v78 = *(_QWORD *)(v63 + 536);
                          v79 = *(unsigned __int16 *)(v78 + 32 * v71 + 14);
                          result = *(unsigned __int16 *)(v78 + 32 * v76 + 14);
                          if (v79 >= result)
                            break;
                        }
                        --v70;
                        *(uint64_t *)((char *)i + v75) = v76;
                        v75 -= 8;
                        if (!v75)
                        {
                          v69 = i;
                          goto LABEL_103;
                        }
                      }
                      v69 = v70;
                    }
LABEL_103:
                    *v69 = v71;
                  }
                  v65 = v68 + 1;
                  v66 += 8;
                }
                while (v68 + 1 != a2);
              }
            }
          }
          else if (i != a2)
          {
            v131 = i + 1;
            if (i + 1 != a2)
            {
              v132 = *v64;
              do
              {
                v133 = v8;
                v8 = v131;
                v135 = *v133;
                v134 = v133[1];
                v136 = *(float *)(v132 + 20 * v134);
                v137 = *(float *)(v132 + 20 * *v133);
                if (v136 < v137
                  || v136 == v137
                  && *(unsigned __int16 *)(*(_QWORD *)(v63 + 536) + 32 * v134 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v63 + 536) + 32 * v135 + 14))
                {
                  do
                  {
                    do
                    {
                      v138 = v133;
                      v139 = v135;
                      v140 = *--v133;
                      v135 = v140;
                      v133[2] = v139;
                      v141 = *(float *)(v132 + 20 * v140);
                    }
                    while (v136 < v141);
                  }
                  while (v136 == v141
                       && *(unsigned __int16 *)(*(_QWORD *)(v63 + 536) + 32 * v134 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v63 + 536) + 32 * v135 + 14));
                  *v138 = v134;
                }
                v131 = v8 + 1;
              }
              while (v8 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (i == a2)
            return result;
          v80 = (v12 - 2) >> 1;
          v81 = *a3;
          v82 = v80;
          do
          {
            v84 = v82;
            if (v80 >= v82)
            {
              v85 = (2 * v82) | 1;
              v86 = &i[v85];
              v87 = *(_QWORD *)a3[1];
              if (2 * v84 + 2 < (uint64_t)v12)
              {
                v88 = v86[1];
                v89 = *(float *)(v87 + 20 * *v86);
                v90 = *(float *)(v87 + 20 * v88);
                if (v89 < v90
                  || v89 == v90
                  && *(unsigned __int16 *)(*(_QWORD *)(v81 + 536) + 32 * *v86 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v81 + 536) + 32 * v88 + 14))
                {
                  ++v86;
                  v85 = 2 * v84 + 2;
                }
              }
              v91 = *v86;
              v92 = i[v84];
              v93 = *(float *)(v87 + 20 * *v86);
              v94 = *(float *)(v87 + 20 * v92);
              if (v93 >= v94
                && (v93 != v94
                 || *(unsigned __int16 *)(*(_QWORD *)(v81 + 536) + 32 * v91 + 14) >= *(unsigned __int16 *)(*(_QWORD *)(v81 + 536) + 32 * v92 + 14)))
              {
                i[v84] = v91;
                if (v80 >= v85)
                {
                  while (1)
                  {
                    v95 = 2 * v85;
                    v85 = (2 * v85) | 1;
                    v83 = &i[v85];
                    v96 = v95 + 2;
                    if (v96 < (uint64_t)v12)
                    {
                      v97 = v83[1];
                      v98 = *(float *)(v87 + 20 * *v83);
                      v99 = *(float *)(v87 + 20 * v97);
                      if (v98 < v99
                        || v98 == v99
                        && *(unsigned __int16 *)(*(_QWORD *)(v81 + 536) + 32 * *v83 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v81 + 536) + 32 * v97 + 14))
                      {
                        ++v83;
                        v85 = v96;
                      }
                    }
                    v100 = *v83;
                    v101 = *(float *)(v87 + 20 * *v83);
                    if (v101 < v94
                      || v101 == v94
                      && *(unsigned __int16 *)(*(_QWORD *)(v81 + 536) + 32 * v100 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v81 + 536) + 32 * v92 + 14))
                    {
                      break;
                    }
                    *v86 = v100;
                    v86 = v83;
                    if (v80 < v85)
                      goto LABEL_119;
                  }
                }
                v83 = v86;
LABEL_119:
                *v83 = v92;
                v81 = *a3;
              }
            }
            v82 = v84 - 1;
          }
          while (v84);
          v102 = (unint64_t)v11 >> 3;
          while (2)
          {
            v105 = 0;
            v106 = *i;
            v107 = *a3;
            v108 = (_QWORD *)a3[1];
            v103 = i;
            do
            {
              v109 = v103;
              v103 += v105 + 1;
              v110 = 2 * v105;
              result = (2 * v105) | 1;
              v105 = result;
              v111 = v110 + 2;
              if (v111 < v102)
              {
                result = (uint64_t)(v103 + 1);
                v112 = v103[1];
                v113 = *(float *)(*v108 + 20 * *v103);
                v114 = *(float *)(*v108 + 20 * v112);
                if (v113 < v114
                  || v113 == v114
                  && *(unsigned __int16 *)(*(_QWORD *)(v107 + 536) + 32 * *v103 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v107 + 536) + 32 * v112 + 14))
                {
                  ++v103;
                  v105 = v111;
                }
              }
              *v109 = *v103;
            }
            while (v105 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
            if (v103 == --a2)
            {
LABEL_144:
              *v103 = v106;
            }
            else
            {
              *v103 = *a2;
              *a2 = v106;
              v115 = (char *)v103 - (char *)i + 8;
              if (v115 >= 9)
              {
                v116 = *a3;
                v117 = ((unint64_t)v115 >> 3) - 2;
                v118 = v117 >> 1;
                v119 = &i[v117 >> 1];
                v120 = *v119;
                v106 = *v103;
                v121 = *(_QWORD *)a3[1];
                v122 = *(float *)(v121 + 20 * *v119);
                result = 20 * *v103;
                v123 = *(float *)(v121 + result);
                if (v122 < v123
                  || v122 == v123
                  && (v124 = *(_QWORD *)(v116 + 536),
                      v125 = *(unsigned __int16 *)(v124 + 32 * v120 + 14),
                      result = *(unsigned __int16 *)(v124 + 32 * v106 + 14),
                      v125 < result))
                {
                  *v103 = v120;
                  if (v117 >= 2)
                  {
                    while (1)
                    {
                      v126 = v118 - 1;
                      v118 = (v118 - 1) >> 1;
                      v103 = &i[v118];
                      v127 = *v103;
                      result = 20 * *v103;
                      v128 = *(float *)(v121 + result);
                      if (v128 >= v123)
                      {
                        if (v128 != v123)
                          break;
                        v129 = *(_QWORD *)(v116 + 536);
                        v130 = *(unsigned __int16 *)(v129 + 32 * v127 + 14);
                        result = *(unsigned __int16 *)(v129 + 32 * v106 + 14);
                        if (v130 >= result)
                          break;
                      }
                      *v119 = v127;
                      v119 = &i[v118];
                      if (v126 <= 1)
                        goto LABEL_144;
                    }
                  }
                  v103 = v119;
                  goto LABEL_144;
                }
              }
            }
            if (v102-- <= 2)
              return result;
            continue;
          }
        }
        v13 = v12 >> 1;
        v14 = &i[v12 >> 1];
        v15 = *a3;
        v16 = *(_QWORD *)a3[1];
        if ((unint64_t)v11 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(&v8[v12 >> 1], v8, v9, v15, v16);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(v8, &v8[v12 >> 1], v9, v15, v16);
          v17 = &v8[v13];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(v8 + 1, v17 - 1, v143, *a3, *(_QWORD *)a3[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(v8 + 2, &v8[v13 + 1], v142, *a3, *(_QWORD *)a3[1]);
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(v17 - 1, v14, &v8[v13 + 1], *a3, *(_QWORD *)a3[1]);
          v18 = *v8;
          *v8 = *v17;
          *v17 = v18;
          a2 = v144;
        }
        --a4;
        v19 = *a3;
        v20 = *v8;
        v21 = *(_QWORD *)a3[1];
        if ((a5 & 1) == 0)
        {
          v23 = *(v8 - 1);
          v24 = *(float *)(v21 + 20 * v23);
          v22 = *(float *)(v21 + 20 * v20);
          if (v24 < v22
            || v24 == v22
            && *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v23 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14))
          {
            goto LABEL_14;
          }
          v43 = *v9;
          v44 = *(float *)(v21 + 20 * *v9);
          if (v22 < v44
            || v22 == v44
            && *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v43 + 14))
          {
            i = v8;
            do
            {
              v46 = i[1];
              ++i;
              v45 = v46;
              v47 = *(float *)(v21 + 20 * v46);
            }
            while (v22 >= v47
                 && (v22 != v47
                  || *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14) >= *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v45 + 14)));
          }
          else
          {
            for (i = v8 + 1; i < a2; ++i)
            {
              v48 = *(float *)(v21 + 20 * *i);
              if (v22 < v48
                || v22 == v48
                && *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * *i + 14))
              {
                break;
              }
            }
          }
          v49 = a2;
          if (i < a2)
          {
            v49 = v9;
            while (v22 < v44
                 || v22 == v44
                 && *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v43 + 14))
            {
              v50 = *--v49;
              v43 = v50;
              v44 = *(float *)(v21 + 20 * v50);
            }
          }
          if (i < v49)
          {
            v51 = *i;
            v52 = *v49;
            do
            {
              *i = v52;
              *v49 = v51;
              do
              {
                v53 = i[1];
                ++i;
                v51 = v53;
                v54 = *(float *)(v21 + 20 * v53);
              }
              while (v22 >= v54
                   && (v22 != v54
                    || *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14) >= *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v51 + 14)));
              do
              {
                do
                {
                  v55 = *--v49;
                  v52 = v55;
                  v56 = *(float *)(v21 + 20 * v55);
                }
                while (v22 < v56);
              }
              while (v22 == v56
                   && *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v52 + 14));
            }
            while (i < v49);
          }
          v57 = i - 1;
          if (i - 1 != v8)
            *v8 = *v57;
          a5 = 0;
          *v57 = v20;
          continue;
        }
        v22 = *(float *)(v21 + 20 * v20);
LABEL_14:
        for (j = v8 + 1; ; ++j)
        {
          v26 = *j;
          v27 = *(float *)(v21 + 20 * *j);
          if (v27 >= v22
            && (v27 != v22
             || *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v26 + 14) >= *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14)))
          {
            break;
          }
        }
        v28 = j - 1;
        if (j - 1 == v8)
        {
          k = a2;
          if (j < a2)
          {
            v33 = *v9;
            v34 = *(float *)(v21 + 20 * *v9);
            k = v9;
            if (v34 >= v22)
            {
              k = v9;
              do
              {
                if (v34 == v22)
                {
                  if (j >= k
                    || *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v33 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14))
                  {
                    break;
                  }
                }
                else if (j >= k)
                {
                  break;
                }
                v42 = *--k;
                v33 = v42;
                v34 = *(float *)(v21 + 20 * v42);
              }
              while (v34 >= v22);
            }
          }
        }
        else
        {
          v29 = *v9;
          v30 = *(float *)(v21 + 20 * *v9);
          for (k = v9; v30 >= v22; v30 = *(float *)(v21 + 20 * v32))
          {
            if (v30 == v22
              && *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v29 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14))
            {
              break;
            }
            v32 = *--k;
            v29 = v32;
          }
        }
        if (j < k)
        {
          v35 = *k;
          v36 = j;
          v37 = k;
          do
          {
            *v36++ = v35;
            *v37 = v26;
            while (1)
            {
              v26 = *v36;
              v38 = *(float *)(v21 + 20 * *v36);
              if (v38 >= v22
                && (v38 != v22
                 || *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v26 + 14) >= *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14)))
              {
                break;
              }
              ++v36;
            }
            v28 = v36 - 1;
            do
            {
              v39 = *--v37;
              v35 = v39;
              v40 = *(float *)(v21 + 20 * v39);
            }
            while (v40 >= v22
                 && (v40 != v22
                  || *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v35 + 14) >= *(unsigned __int16 *)(*(_QWORD *)(v19 + 536) + 32 * v20 + 14)));
          }
          while (v36 < v37);
        }
        if (v28 != v8)
          *v8 = *v28;
        *v28 = v20;
        if (j < k)
        {
LABEL_46:
          result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *,false>(v8, v28, a3, a4, a5 & 1);
          a5 = 0;
          i = v28 + 1;
          continue;
        }
        v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(v8, v28, a3);
        i = v28 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(v28 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v41)
            continue;
          goto LABEL_46;
        }
        a2 = v28;
        if (!v41)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + 20 * *a2);
  v8 = *(float *)(a5 + 20 * *result);
  if (v7 < v8
    || v7 == v8
    && *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v5 + 14) < *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v6 + 14))
  {
    v9 = *a3;
    v10 = *(float *)(a5 + 20 * *a3);
    if (v10 < v7
      || v10 == v7
      && *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v9 + 14) < *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v5 + 14))
    {
      *result = v9;
LABEL_19:
      *a3 = v6;
      return result;
    }
    *result = v5;
    *a2 = v6;
    v17 = *a3;
    v18 = *(float *)(a5 + 20 * *a3);
    if (v18 < v8
      || v18 == v8
      && *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v17 + 14) < *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v6 + 14))
    {
      *a2 = v17;
      goto LABEL_19;
    }
  }
  else
  {
    v11 = *a3;
    v12 = *(float *)(a5 + 20 * *a3);
    if (v12 < v7
      || v12 == v7
      && *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v11 + 14) < *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v5 + 14))
    {
      *a2 = v11;
      *a3 = v5;
      v13 = *a2;
      v14 = *result;
      v15 = *(float *)(a5 + 20 * *a2);
      v16 = *(float *)(a5 + 20 * *result);
      if (v15 < v16
        || v15 == v16
        && *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v13 + 14) < *(unsigned __int16 *)(*(_QWORD *)(a4 + 536) + 32 * v14 + 14))
      {
        *result = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(a1, a2, a3, *(_QWORD *)a5, **(_QWORD **)(a5 + 8));
  v11 = *a4;
  v12 = *a3;
  v13 = *(_QWORD *)a5;
  v14 = **(_QWORD **)(a5 + 8);
  v15 = *(float *)(v14 + 20 * *a4);
  v16 = *(float *)(v14 + 20 * *a3);
  if (v15 < v16
    || v15 == v16
    && *(unsigned __int16 *)(*(_QWORD *)(v13 + 536) + 32 * v11 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v13 + 536) + 32 * v12 + 14))
  {
    *a3 = v11;
    *a4 = v12;
    v17 = *a3;
    v18 = *a2;
    v19 = *(float *)(v14 + 20 * *a3);
    v20 = *(float *)(v14 + 20 * *a2);
    if (v19 < v20
      || v19 == v20
      && *(unsigned __int16 *)(*(_QWORD *)(v13 + 536) + 32 * v17 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v13 + 536) + 32 * v18 + 14))
    {
      *a2 = v17;
      *a3 = v18;
      v21 = *a2;
      v22 = *a1;
      v23 = *(float *)(v14 + 20 * *a2);
      v24 = *(float *)(v14 + 20 * *a1);
      if (v23 < v24
        || v23 == v24
        && *(unsigned __int16 *)(*(_QWORD *)(v13 + 536) + 32 * v21 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v13 + 536) + 32 * v22 + 14))
      {
        *a1 = v21;
        *a2 = v22;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *(_QWORD *)a6;
  v16 = **(_QWORD **)(a6 + 8);
  v17 = *(float *)(v16 + 20 * *a5);
  v18 = *(float *)(v16 + 20 * *a4);
  if (v17 < v18
    || v17 == v18
    && *(unsigned __int16 *)(*(_QWORD *)(v15 + 536) + 32 * v13 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v15 + 536) + 32 * v14 + 14))
  {
    *a4 = v13;
    *a5 = v14;
    v19 = *a4;
    v20 = *a3;
    v21 = *(float *)(v16 + 20 * *a4);
    v22 = *(float *)(v16 + 20 * *a3);
    if (v21 < v22
      || v21 == v22
      && *(unsigned __int16 *)(*(_QWORD *)(v15 + 536) + 32 * v19 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v15 + 536) + 32 * v20 + 14))
    {
      *a3 = v19;
      *a4 = v20;
      v23 = *a3;
      v24 = *a2;
      v25 = *(float *)(v16 + 20 * *a3);
      v26 = *(float *)(v16 + 20 * *a2);
      if (v25 < v26
        || v25 == v26
        && *(unsigned __int16 *)(*(_QWORD *)(v15 + 536) + 32 * v23 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v15 + 536) + 32 * v24 + 14))
      {
        *a2 = v23;
        *a3 = v24;
        v27 = *a2;
        v28 = *a1;
        v29 = *(float *)(v16 + 20 * *a2);
        v30 = *(float *)(v16 + 20 * *a1);
        if (v29 < v30
          || v29 == v30
          && *(unsigned __int16 *)(*(_QWORD *)(v15 + 536) + 32 * v27 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v15 + 536) + 32 * v28 + 14))
        {
          *a1 = v27;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)a3[1];
      v11 = *(float *)(v10 + 20 * v8);
      v12 = *(float *)(v10 + 20 * *a1);
      if (v11 < v12
        || v11 == v12
        && *(unsigned __int16 *)(*(_QWORD *)(*a3 + 536) + 32 * v8 + 14) < *(unsigned __int16 *)(*(_QWORD *)(*a3 + 536) + 32 * v9 + 14))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, *a3, *(_QWORD *)a3[1]);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, (uint64_t)a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, (uint64_t)a3);
      return 1;
    default:
      v13 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, *a3, *(_QWORD *)a3[1]);
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      v17 = *a3;
      v18 = *(_QWORD *)a3[1];
      break;
  }
  while (1)
  {
    v20 = *v14;
    v21 = *v13;
    v22 = *(float *)(v18 + 20 * *v14);
    v23 = *(float *)(v18 + 20 * *v13);
    if (v22 < v23
      || v22 == v23
      && *(unsigned __int16 *)(*(_QWORD *)(v17 + 536) + 32 * v20 + 14) < *(unsigned __int16 *)(*(_QWORD *)(v17 + 536) + 32 * v21 + 14))
    {
      *v14 = v21;
      v19 = a1;
      if (v13 != a1)
      {
        v24 = v15;
        while (1)
        {
          v25 = *(uint64_t *)((char *)a1 + v24 + 8);
          v26 = *(float *)(v18 + 20 * v25);
          if (v22 >= v26)
          {
            if (v22 != v26)
            {
              v19 = v13;
              goto LABEL_9;
            }
            if (*(unsigned __int16 *)(*(_QWORD *)(v17 + 536) + 32 * v20 + 14) >= *(unsigned __int16 *)(*(_QWORD *)(v17 + 536) + 32 * v25 + 14))
              break;
          }
          --v13;
          *(uint64_t *)((char *)a1 + v24 + 16) = v25;
          v24 -= 8;
          if (v24 == -16)
          {
            v19 = a1;
            goto LABEL_9;
          }
        }
        v19 = (uint64_t *)((char *)a1 + v24 + 16);
      }
LABEL_9:
      *v19 = v20;
      if (++v16 == 8)
        return v14 + 1 == a2;
    }
    v13 = v14;
    v15 += 8;
    if (++v14 == a2)
      return 1;
  }
}

uint64_t *md::TransitLineLabelFeature::addTransitLink(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t **v46;
  _QWORD *v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;

  v3 = result;
  v4 = result + 72;
  v5 = (_QWORD *)result[72];
  if (v5)
  {
    v6 = result + 72;
    do
    {
      v7 = v5[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = v5;
      else
        v9 = v5 + 1;
      if (v8)
        v6 = v5;
      v5 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != v4 && v6[4] <= a2 && v6[5])
      return result;
  }
  {
    v86 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v86, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v90 = v3;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 56, 8);
  *(_QWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = a2;
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (uint64_t *)(v11 + 16);
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  {
    v87 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v87, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v14 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v11 + 40) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(v11 + 48) = -65536;
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(v11 + 16);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v11 + 32) - v16) >> 2) < v15)
  {
    if (v15 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v17 = *(_QWORD *)(v11 + 24);
    v18 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, 20 * v15, 4);
    v20 = *(_QWORD *)(v11 + 16);
    v19 = *(_QWORD *)(v11 + 24);
    v21 = v18 + v17 - v16;
    if (v19 != v20)
    {
      do
      {
        v22 = *(_QWORD *)(v19 - 20);
        v19 -= 20;
        v23 = *(_BYTE *)(v19 + 8);
        *(_QWORD *)(v21 - 20) = v22;
        v21 -= 20;
        *(_BYTE *)(v21 + 8) = v23;
        *(_DWORD *)(v21 + 9) = *(_DWORD *)(v19 + 9);
        v24 = *(_DWORD *)(v19 + 14);
        *(_WORD *)(v21 + 18) = *(_WORD *)(v19 + 18);
        *(_DWORD *)(v21 + 14) = v24;
      }
      while (v19 != v20);
      v19 = *v12;
    }
    *(_QWORD *)(v11 + 16) = v21;
    *(_QWORD *)(v11 + 24) = v18 + v17 - v16;
    v25 = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v11 + 32) = v18 + 20 * v15;
    if (v19)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 40) + 40))(*(_QWORD *)(v11 + 40), v19, v25 - v19);
  }
  v89 = v4;
  if (v15)
  {
    v26 = 0;
    v27 = *(_QWORD *)(v11 + 24);
    do
    {
      v28 = *(_QWORD *)(v11 + 32);
      if (v27 >= v28)
      {
        v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - *v12) >> 2);
        v30 = v29 + 1;
        if (v29 + 1 > 0xCCCCCCCCCCCCCCCLL)
          abort();
        v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - *v12) >> 2);
        if (2 * v31 > v30)
          v30 = 2 * v31;
        if (v31 >= 0x666666666666666)
          v32 = 0xCCCCCCCCCCCCCCCLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 40) + 16))(*(_QWORD *)(v11 + 40), 20 * v32, 4);
          v34 = v33 + 20 * v29;
          v35 = v33 + 20 * v32;
          if (v33)
          {
            *(_BYTE *)(v34 + 8) = 0;
            *(_QWORD *)v34 = 0;
            v36 = v33 + 20 * v29;
            *(_DWORD *)(v36 + 9) = -16777216;
            *(_WORD *)(v36 + 14) = v26;
            *(_DWORD *)(v36 + 16) = -1;
          }
        }
        else
        {
          v35 = 0;
          v34 = 20 * v29;
        }
        v38 = *(_QWORD *)(v11 + 16);
        v37 = *(_QWORD *)(v11 + 24);
        v39 = v34;
        if (v37 != v38)
        {
          do
          {
            v40 = *(_QWORD *)(v37 - 20);
            v37 -= 20;
            v41 = *(_BYTE *)(v37 + 8);
            *(_QWORD *)(v39 - 20) = v40;
            v39 -= 20;
            *(_BYTE *)(v39 + 8) = v41;
            *(_DWORD *)(v39 + 9) = *(_DWORD *)(v37 + 9);
            v42 = *(_DWORD *)(v37 + 14);
            *(_WORD *)(v39 + 18) = *(_WORD *)(v37 + 18);
            *(_DWORD *)(v39 + 14) = v42;
          }
          while (v37 != v38);
          v37 = *v12;
        }
        v27 = v34 + 20;
        *(_QWORD *)(v11 + 16) = v39;
        *(_QWORD *)(v11 + 24) = v34 + 20;
        v43 = *(_QWORD *)(v11 + 32);
        *(_QWORD *)(v11 + 32) = v35;
        if (v37)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 40) + 40))(*(_QWORD *)(v11 + 40), v37, v43 - v37);
      }
      else
      {
        if (v27)
        {
          *(_BYTE *)(v27 + 8) = 0;
          *(_QWORD *)v27 = 0;
          *(_DWORD *)(v27 + 9) = -16777216;
          *(_WORD *)(v27 + 14) = v26;
          *(_DWORD *)(v27 + 16) = -1;
        }
        v27 += 20;
      }
      *(_QWORD *)(v11 + 24) = v27;
      ++v26;
    }
    while (v26 != v15);
  }
  v91 = v11;
  v44 = (uint64_t *)v90[64];
  v45 = v90[65];
  if ((unint64_t)v44 < v45)
  {
    if (v44)
    {
      *v44 = v11;
      v11 = 0;
      v91 = 0;
    }
    v46 = (uint64_t **)v89;
    v47 = v44 + 1;
    v48 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    v90[64] = (uint64_t)(v44 + 1);
    if (!v11)
      goto LABEL_87;
LABEL_81:
    v69 = (*(_QWORD *)v11)-- == 1;
    if (v69)
    {
      v72 = *(_QWORD *)(v11 + 16);
      if (v72)
      {
        *(_QWORD *)(v11 + 24) = v72;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 40) + 40))(*(_QWORD *)(v11 + 40), v72, *(_QWORD *)(v11 + 32) - v72);
      }
      {
        v88 = operator new();
        *((_QWORD *)v48 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v88, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v48 + 299) + 40))(*((_QWORD *)v48 + 299), v91, 56);
      v47 = (_QWORD *)v90[64];
    }
    goto LABEL_87;
  }
  v49 = v90[63];
  v50 = ((uint64_t)v44 - v49) >> 3;
  v51 = v50 + 1;
  if ((unint64_t)(v50 + 1) >> 61)
    abort();
  v52 = v45 - v49;
  if (v52 >> 2 > v51)
    v51 = v52 >> 2;
  if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
    v53 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v53 = v51;
  if (v53)
  {
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90[66] + 16))(v90[66], 8 * v53, 8);
    v55 = (uint64_t *)(v54 + 8 * v50);
    v56 = v54 + 8 * v53;
    v46 = (uint64_t **)v89;
    v48 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v54)
    {
      *v55 = v11;
      v91 = 0;
    }
  }
  else
  {
    v56 = 0;
    v55 = (uint64_t *)(8 * v50);
    v46 = (uint64_t **)v89;
    v48 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  }
  v47 = v55 + 1;
  v57 = (char *)v90[63];
  v58 = (char *)v90[64];
  if (v58 == v57)
  {
    v90[63] = (uint64_t)v55;
    v90[64] = (uint64_t)v47;
    v64 = v90[65];
    v90[65] = v56;
    goto LABEL_78;
  }
  v59 = v58 - v57 - 8;
  if (v59 <= 0x47 || (v60 = (v57 - v58 + 7) & 0xFFFFFFFFFFFFFFF8, (char *)v55 + v60 < v58) && &v58[v60] < (char *)v55)
  {
    v61 = (char *)v90[64];
    do
    {
LABEL_64:
      *--v55 = 0;
      v62 = *((_QWORD *)v61 - 1);
      v61 -= 8;
      *v55 = v62;
      *(_QWORD *)v61 = 0;
    }
    while (v61 != v57);
    goto LABEL_65;
  }
  v81 = (v59 >> 3) + 1;
  v61 = &v58[-8 * (v81 & 0x3FFFFFFFFFFFFFFCLL)];
  v82 = v55 - 4;
  v83 = v58 - 32;
  v84 = v81 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    *(_OWORD *)v82 = 0uLL;
    *((_OWORD *)v82 + 1) = 0uLL;
    v85 = *((_OWORD *)v83 + 1);
    *(_OWORD *)v82 = *(_OWORD *)v83;
    *((_OWORD *)v82 + 1) = v85;
    v82 -= 4;
    *(_OWORD *)v83 = 0uLL;
    *((_OWORD *)v83 + 1) = 0uLL;
    v83 -= 32;
    v84 -= 4;
  }
  while (v84);
  v55 -= v81 & 0x3FFFFFFFFFFFFFFCLL;
  if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_64;
LABEL_65:
  v58 = (char *)v90[63];
  v63 = (char *)v90[64];
  v90[63] = (uint64_t)v55;
  v90[64] = (uint64_t)v47;
  v64 = v90[65];
  v90[65] = v56;
  if (v63 != v58)
  {
    v65 = v63;
    do
    {
      v68 = *((_QWORD *)v65 - 1);
      v65 -= 8;
      v67 = v68;
      if (v68)
      {
        v69 = (*(_QWORD *)v67)-- == 1;
        if (v69)
        {
          v70 = *(_QWORD *)(v67 + 16);
          if (v70)
          {
            *(_QWORD *)(v67 + 24) = v70;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v67 + 40) + 40))(*(_QWORD *)(v67 + 40), v70, *(_QWORD *)(v67 + 32) - v70);
          }
          {
            v71 = operator new();
            *((_QWORD *)v48 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v71, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v48 + 299) + 40))(*((_QWORD *)v48 + 299), *((_QWORD *)v63 - 1), 56);
          *((_QWORD *)v63 - 1) = 0;
        }
      }
      v63 = v65;
    }
    while (v65 != v58);
  }
LABEL_78:
  if (v58)
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v90[66] + 40))(v90[66], v58, v64 - (_QWORD)v58);
  v11 = v91;
  v90[64] = (uint64_t)v47;
  if (v91)
    goto LABEL_81;
LABEL_87:
  v74 = *(v47 - 1);
  if (v74)
    v75 = v74 + 8;
  else
    v75 = 0;
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90[73] + 16))(v90[73], 48, 8);
  v76 = result;
  result[4] = a2;
  result[5] = v75;
  v77 = (uint64_t *)v90[72];
  v78 = v46;
  if (v77)
  {
    while (1)
    {
      while (1)
      {
        v78 = (uint64_t **)v77;
        v79 = v77[4];
        if (v79 <= a2)
          break;
        v77 = *v78;
        v46 = v78;
        if (!*v78)
          goto LABEL_97;
      }
      if (v79 >= a2)
        break;
      v77 = v78[1];
      if (!v77)
      {
        v46 = v78 + 1;
        goto LABEL_97;
      }
    }
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v90[73] + 40))(v90[73], result, 48);
  }
  else
  {
LABEL_97:
    *result = 0;
    result[1] = 0;
    result[2] = (uint64_t)v78;
    *v46 = result;
    v80 = *(_QWORD *)v90[71];
    if (v80)
    {
      v90[71] = v80;
      v76 = *v46;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v90[72], v76);
    ++v90[74];
  }
  return result;
}

void sub_19FC3E8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::fast_shared_ptr<md::TransitLineLabelFeature::LabelTransitLink,mdm::MDAllocator>::~fast_shared_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FC3E8F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = exception_object;
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    exception_object = (_Unwind_Exception *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 40)
                                                                                                + 40))(*(_QWORD *)(v1 + 40), v4, *(_QWORD *)(v1 + 32) - v4);
  }
  if ((*(_QWORD *)v1)-- == 1)
  {
    v6 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 24) = v6;
      exception_object = (_Unwind_Exception *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 40)
                                                                                                  + 40))(*(_QWORD *)(v1 + 40), v6, *(_QWORD *)(v1 + 32) - v6);
    }
    v7 = mdm::Allocator::instance((mdm::Allocator *)exception_object);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v1, 56);
  }
  _Unwind_Resume(v3);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *,false>(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *j;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t *k;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int i;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  _DWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v115 = a2 - 3;
  v116 = a2 - 2;
  j = v9;
  v114 = a2;
  while (2)
  {
    v9 = j;
    v12 = (char *)a2 - (char *)j;
    v13 = a2 - j;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v54 = *j;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * *v10 + 16) < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536)
                                                                                          + 32 * *j
                                                                                          + 16))
        {
          *j = *v10;
          *v10 = v54;
        }
        return result;
      case 3:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(j, j + 1, v10, *(_QWORD *)(*(_QWORD *)a3 + 536));
      case 4:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(j, j + 1, j + 2, v10, a3);
      case 5:
        return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *,0>(j, j + 1, j + 2, j + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v55 = *(_QWORD *)a3;
          if ((a5 & 1) != 0)
          {
            if (j != a2)
            {
              v56 = j + 1;
              if (j + 1 != a2)
              {
                v57 = 0;
                v58 = *(_QWORD *)(v55 + 536);
                v59 = j;
                do
                {
                  v61 = v59;
                  v59 = v56;
                  v62 = v61[1];
                  v63 = v58 + 32 * v62;
                  v64 = *(_DWORD *)(v63 + 20);
                  if (*(_QWORD *)(v63 + 16) < *(_QWORD *)(v58 + 32 * *v61 + 16))
                  {
                    v61[1] = *v61;
                    v60 = j;
                    if (v61 != j)
                    {
                      v65 = (unsigned int *)(v63 + 16);
                      v66 = v57;
                      while (1)
                      {
                        v67 = *(uint64_t *)((char *)j + v66 - 8);
                        result = *(unsigned int *)(v58 + 32 * v67 + 20);
                        if (v64 >= result)
                        {
                          if (v64 != (_DWORD)result)
                          {
                            v60 = (uint64_t *)((char *)j + v66);
                            goto LABEL_89;
                          }
                          result = *v65;
                          if (result >= *(_DWORD *)(v58 + 32 * v67 + 16))
                            break;
                        }
                        --v61;
                        *(uint64_t *)((char *)j + v66) = v67;
                        v66 -= 8;
                        if (!v66)
                        {
                          v60 = j;
                          goto LABEL_89;
                        }
                      }
                      v60 = v61;
                    }
LABEL_89:
                    *v60 = v62;
                  }
                  v56 = v59 + 1;
                  v57 += 8;
                }
                while (v59 + 1 != a2);
              }
            }
          }
          else if (j != a2)
          {
            v103 = j + 1;
            if (j + 1 != a2)
            {
              v104 = *(_QWORD *)(v55 + 536);
              do
              {
                v105 = v9;
                v9 = v103;
                v107 = *v105;
                v106 = v105[1];
                v108 = v104 + 32 * v106;
                v109 = *(_DWORD *)(v108 + 20);
                if (*(_QWORD *)(v108 + 16) < *(_QWORD *)(v104 + 32 * *v105 + 16))
                {
                  v110 = (_DWORD *)(v108 + 16);
                  do
                  {
                    v111 = v105;
                    v112 = v107;
                    v113 = *--v105;
                    v107 = v113;
                    v105[2] = v112;
                  }
                  while (__PAIR64__(v109, *v110) < *(_QWORD *)(v104 + 32 * v113 + 16));
                  *v111 = v106;
                }
                v103 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (j != a2)
          {
            v68 = (unint64_t)(v13 - 2) >> 1;
            v69 = *(_QWORD *)a3;
            v70 = v68;
            do
            {
              v71 = v70;
              if (v68 >= v70)
              {
                v72 = (2 * v70) | 1;
                v73 = &j[v72];
                if (2 * v71 + 2 >= v13)
                {
                  v74 = *(_QWORD *)(v69 + 536);
                }
                else
                {
                  v74 = *(_QWORD *)(v69 + 536);
                  if (*(_QWORD *)(v74 + 32 * *v73 + 16) < *(_QWORD *)(v74 + 32 * v73[1] + 16))
                  {
                    ++v73;
                    v72 = 2 * v71 + 2;
                  }
                }
                v75 = j[v71];
                result = *v73;
                v76 = *(_DWORD *)(v74 + 32 * v75 + 20);
                if (*(_QWORD *)(v74 + 32 * *v73 + 16) >= *(_QWORD *)(v74 + 32 * v75 + 16))
                {
                  j[v71] = result;
                  if (v68 >= v72)
                  {
                    while (1)
                    {
                      v77 = 2 * v72;
                      v72 = (2 * v72) | 1;
                      result = (unint64_t)&j[v72];
                      v78 = v77 + 2;
                      if (v78 < v13
                        && *(_QWORD *)(v74 + 32 * *(_QWORD *)result + 16) < *(_QWORD *)(v74
                                                                                        + 32 * *(_QWORD *)(result + 8)
                                                                                        + 16))
                      {
                        result += 8;
                        v72 = v78;
                      }
                      if (*(_QWORD *)(v74 + 32 * *(_QWORD *)result + 16) < __PAIR64__(v76, *(_DWORD *)(v74 + 32 * v75 + 16)))break;
                      *v73 = *(_QWORD *)result;
                      v73 = (uint64_t *)result;
                      if (v68 < v72)
                        goto LABEL_103;
                    }
                  }
                  result = (unint64_t)v73;
LABEL_103:
                  *(_QWORD *)result = v75;
                  v69 = *(_QWORD *)a3;
                }
              }
              v70 = v71 - 1;
            }
            while (v71);
            v79 = (unint64_t)v12 >> 3;
            do
            {
              v81 = 0;
              v82 = *j;
              v83 = *(_QWORD *)a3;
              v84 = j;
              do
              {
                v85 = v84;
                v84 += v81 + 1;
                v86 = 2 * v81;
                v81 = (2 * v81) | 1;
                v87 = v86 + 2;
                if (v87 < v79)
                {
                  result = v84[1];
                  v88 = *(_QWORD *)(v83 + 536);
                  v89 = *(_DWORD *)(v88 + 32 * *v84 + 20);
                  v90 = *(_DWORD *)(v88 + 32 * result + 20);
                  if (v89 < v90
                    || v89 == v90
                    && (result = *(unsigned int *)(v88 + 32 * result + 16),
                        *(_DWORD *)(v88 + 32 * *v84 + 16) < result))
                  {
                    ++v84;
                    v81 = v87;
                  }
                }
                *v85 = *v84;
              }
              while (v81 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
              if (v84 == --a2)
              {
                *v84 = v82;
              }
              else
              {
                *v84 = *a2;
                *a2 = v82;
                v91 = (char *)v84 - (char *)j + 8;
                if (v91 >= 9)
                {
                  v92 = ((unint64_t)v91 >> 3) - 2;
                  v93 = v92 >> 1;
                  v94 = &j[v92 >> 1];
                  v95 = *v94;
                  v96 = *v84;
                  v97 = *(_QWORD *)(*(_QWORD *)a3 + 536);
                  v98 = *(_DWORD *)(v97 + 32 * *v94 + 20);
                  v99 = *(_DWORD *)(v97 + 32 * *v84 + 20);
                  if (v98 < v99
                    || v98 == v99
                    && (result = *(unsigned int *)(v97 + 32 * v96 + 16),
                        *(_DWORD *)(v97 + 32 * v95 + 16) < result))
                  {
                    *v84 = v95;
                    if (v92 >= 2)
                    {
                      while (1)
                      {
                        v100 = v93 - 1;
                        v93 = (v93 - 1) >> 1;
                        v101 = &j[v93];
                        v102 = *v101;
                        result = *(unsigned int *)(v97 + 32 * *v101 + 20);
                        if (result >= v99)
                        {
                          if ((_DWORD)result != v99)
                            break;
                          result = *(unsigned int *)(v97 + 32 * v102 + 16);
                          if (result >= *(_DWORD *)(v97 + 32 * v96 + 16))
                            break;
                        }
                        *v94 = v102;
                        v94 = &j[v93];
                        if (v100 <= 1)
                          goto LABEL_144;
                      }
                    }
                    v101 = v94;
LABEL_144:
                    *v101 = v96;
                  }
                }
              }
            }
            while (v79-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &j[(unint64_t)v13 >> 1];
        v16 = *(_QWORD *)(*(_QWORD *)a3 + 536);
        if ((unint64_t)v12 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(v15, v9, v10, v16);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(v9, v15, v10, v16);
          v17 = &v9[v14];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(v9 + 1, v17 - 1, v116, *(_QWORD *)(*(_QWORD *)a3 + 536));
          a2 = v114;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(v9 + 2, &v9[v14 + 1], v115, *(_QWORD *)(*(_QWORD *)a3 + 536));
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(v17 - 1, v15, &v9[v14 + 1], *(_QWORD *)(*(_QWORD *)a3 + 536));
          v18 = *v9;
          *v9 = *v17;
          *v17 = v18;
        }
        --a4;
        v19 = *(_QWORD *)a3;
        v20 = *v9;
        if ((a5 & 1) == 0)
        {
          v23 = *(v9 - 1);
          v21 = *(_QWORD *)(v19 + 536);
          v24 = *(_DWORD *)(v21 + 32 * v23 + 20);
          v22 = *(_DWORD *)(v21 + 32 * v20 + 20);
          if (v24 < v22)
            goto LABEL_14;
          if (v24 == v22)
          {
            v22 = *(_DWORD *)(v21 + 32 * v23 + 20);
            if (*(_DWORD *)(v21 + 32 * v23 + 16) < *(_DWORD *)(v21 + 32 * v20 + 16))
              goto LABEL_14;
          }
          v41 = *v10;
          v42 = *(_DWORD *)(v21 + 32 * *v10 + 20);
          if (__PAIR64__(v22, *(_DWORD *)(v21 + 32 * v20 + 16)) < __PAIR64__(v42, *(_DWORD *)(v21 + 32 * v41 + 16)))
          {
            j = v9 + 1;
            v43 = v9[1];
            for (i = *(_DWORD *)(v21 + 32 * v43 + 20); v22 >= i; i = *(_DWORD *)(v21 + 32 * v45 + 20))
            {
              if (v22 == i && *(_DWORD *)(v21 + 32 * v20 + 16) < *(_DWORD *)(v21 + 32 * v43 + 16))
                break;
              v45 = j[1];
              ++j;
              v43 = v45;
            }
          }
          else
          {
            for (j = v9 + 1; j < a2; ++j)
            {
              if (__PAIR64__(v22, *(_DWORD *)(v21 + 32 * v20 + 16)) < *(_QWORD *)(v21 + 32 * *j + 16))
                break;
            }
          }
          v46 = a2;
          if (j < a2)
          {
            v46 = v10;
            while (v22 < v42 || v22 == v42 && *(_DWORD *)(v21 + 32 * v20 + 16) < *(_DWORD *)(v21 + 32 * v41 + 16))
            {
              v47 = *--v46;
              v41 = v47;
              v42 = *(_DWORD *)(v21 + 32 * v47 + 20);
            }
          }
          if (j < v46)
          {
            v48 = (_DWORD *)(v21 + 32 * v20 + 16);
            v49 = *j;
            v50 = *v46;
            do
            {
              *j = v50;
              *v46 = v49;
              do
              {
                v51 = j[1];
                ++j;
                v49 = v51;
              }
              while (__PAIR64__(v22, *v48) >= *(_QWORD *)(v21 + 32 * v51 + 16));
              do
              {
                v52 = *--v46;
                v50 = v52;
              }
              while (__PAIR64__(v22, *v48) < *(_QWORD *)(v21 + 32 * v52 + 16));
            }
            while (j < v46);
          }
          v53 = j - 1;
          if (j - 1 != v9)
            *v9 = *v53;
          a5 = 0;
          *v53 = v20;
          continue;
        }
        v21 = *(_QWORD *)(v19 + 536);
        v22 = *(_DWORD *)(v21 + 32 * v20 + 20);
LABEL_14:
        v25 = (_DWORD *)(v21 + 32 * v20 + 16);
        for (k = v9 + 1; ; ++k)
        {
          v27 = *k;
          if (*(_QWORD *)(v21 + 32 * *k + 16) >= __PAIR64__(v22, *v25))
            break;
        }
        v28 = k - 1;
        if (k - 1 == v9)
        {
          v31 = a2;
          if (k < a2)
          {
            v33 = *v10;
            v34 = *(_DWORD *)(v21 + 32 * *v10 + 20);
            v31 = v10;
            if (v34 >= v22)
            {
              v31 = v10;
              do
              {
                if (v34 == v22)
                {
                  if (k >= v31 || *(_DWORD *)(v21 + 32 * v33 + 16) < *v25)
                    break;
                }
                else if (k >= v31)
                {
                  break;
                }
                v40 = *--v31;
                v33 = v40;
                v34 = *(_DWORD *)(v21 + 32 * v40 + 20);
              }
              while (v34 >= v22);
            }
          }
        }
        else
        {
          v29 = *v10;
          v30 = *(_DWORD *)(v21 + 32 * *v10 + 20);
          v31 = v10;
          if (v30 >= v22)
          {
            v31 = v10;
            do
            {
              if (v30 == v22 && *(_DWORD *)(v21 + 32 * v29 + 16) < *v25)
                break;
              v32 = *--v31;
              v29 = v32;
              v30 = *(_DWORD *)(v21 + 32 * v32 + 20);
            }
            while (v30 >= v22);
          }
        }
        if (k < v31)
        {
          v35 = *v31;
          v36 = k;
          v37 = v31;
          do
          {
            *v36++ = v35;
            *v37 = v27;
            while (1)
            {
              v27 = *v36;
              if (*(_QWORD *)(v21 + 32 * *v36 + 16) >= __PAIR64__(v22, *v25))
                break;
              ++v36;
            }
            v28 = v36 - 1;
            do
            {
              v38 = *--v37;
              v35 = v38;
            }
            while (*(_QWORD *)(v21 + 32 * v38 + 16) >= __PAIR64__(v22, *v25));
          }
          while (v36 < v37);
        }
        if (v28 != v9)
          *v9 = *v28;
        *v28 = v20;
        if (k < v31)
        {
LABEL_40:
          result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *,false>(v9, v28, a3, a4, a5 & 1);
          a5 = 0;
          j = v28 + 1;
          continue;
        }
        v39 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(v9, v28, a3);
        j = v28 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(v28 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_40;
        }
        a2 = v28;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *result;
  v6 = *(_DWORD *)(a4 + 32 * *a2 + 20);
  v7 = *(_DWORD *)(a4 + 32 * *result + 20);
  if (*(_QWORD *)(a4 + 32 * *a2 + 16) >= *(_QWORD *)(a4 + 32 * *result + 16))
  {
    if (*(_QWORD *)(a4 + 32 * *a3 + 16) < __PAIR64__(v6, *(_DWORD *)(a4 + 32 * v4 + 16)))
    {
      *a2 = *a3;
      *a3 = v4;
      v8 = *result;
      if (*(_QWORD *)(a4 + 32 * *a2 + 16) < *(_QWORD *)(a4 + 32 * *result + 16))
      {
        *result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (*(_QWORD *)(a4 + 32 * *a3 + 16) < __PAIR64__(v6, *(_DWORD *)(a4 + 32 * v4 + 16)))
    {
      *result = *a3;
    }
    else
    {
      *result = v4;
      *a2 = v5;
      if (*(_QWORD *)(a4 + 32 * *a3 + 16) >= __PAIR64__(v7, *(_DWORD *)(a4 + 32 * v5 + 16)))
        return result;
      *a2 = *a3;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 536));
  v11 = *a3;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 536);
  if (*(_QWORD *)(v12 + 32 * *a4 + 16) < *(_QWORD *)(v12 + 32 * *a3 + 16))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(_QWORD *)(v12 + 32 * *a3 + 16) < *(_QWORD *)(v12 + 32 * *a2 + 16))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(_QWORD *)(v12 + 32 * *a2 + 16) < *(_QWORD *)(v12 + 32 * *a1 + 16))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = *(_QWORD *)(*(_QWORD *)a6 + 536);
  if (*(_QWORD *)(v14 + 32 * *a5 + 16) < *(_QWORD *)(v14 + 32 * *a4 + 16))
  {
    *a4 = *a5;
    *a5 = v13;
    v15 = *a3;
    if (*(_QWORD *)(v14 + 32 * *a4 + 16) < *(_QWORD *)(v14 + 32 * *a3 + 16))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_QWORD *)(v14 + 32 * *a3 + 16) < *(_QWORD *)(v14 + 32 * *a2 + 16))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *a1;
        if (*(_QWORD *)(v14 + 32 * *a2 + 16) < *(_QWORD *)(v14 + 32 * *a1 + 16))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * v8 + 16) < *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536)
                                                                                      + 32 * *a1
                                                                                      + 16))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 536));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::initTransitLines(GeoCodecsTransitLink *)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 536));
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)a3 + 536);
      break;
  }
  while (1)
  {
    v16 = *v11;
    v17 = v14 + 32 * *v11;
    v18 = *(_DWORD *)(v17 + 20);
    if (*(_QWORD *)(v17 + 16) < *(_QWORD *)(v14 + 32 * *v10 + 16))
    {
      *v11 = *v10;
      v15 = a1;
      if (v10 != a1)
      {
        v19 = (_DWORD *)(v17 + 16);
        v20 = v12;
        while (1)
        {
          v21 = *(uint64_t *)((char *)a1 + v20 + 8);
          v22 = *(_DWORD *)(v14 + 32 * v21 + 20);
          if (v18 >= v22)
          {
            if (v18 != v22)
            {
              v15 = v10;
              goto LABEL_7;
            }
            if (*v19 >= *(_DWORD *)(v14 + 32 * v21 + 16))
              break;
          }
          --v10;
          *(uint64_t *)((char *)a1 + v20 + 16) = v21;
          v20 -= 8;
          if (v20 == -16)
          {
            v15 = a1;
            goto LABEL_7;
          }
        }
        v15 = (uint64_t *)((char *)a1 + v20 + 16);
      }
LABEL_7:
      *v15 = v16;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

_QWORD *geo::fast_shared_ptr<md::TransitLineLabelFeature::LabelTransitLink,mdm::MDAllocator>::~fast_shared_ptr(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 v5;
  float *v6;
  int v8;
  uint64_t v9;

  v2 = *a1;
  if (*a1)
  {
    if ((*(_QWORD *)v2)-- == 1)
    {
      v4 = *(_QWORD *)(v2 + 16);
      if (v4)
      {
        *(_QWORD *)(v2 + 24) = v4;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 40) + 40))(*(_QWORD *)(v2 + 40), v4, *(_QWORD *)(v2 + 32) - v4);
      }
      v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      if ((v5 & 1) == 0)
      {
        v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        if (v8)
        {
          v9 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
          v6 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        }
      }
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v6 + 299) + 40))(*((_QWORD *)v6 + 299), *a1, 56);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  uint64_t v113;
  int64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t *v149;

  v9 = result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v84 = *v11;
        if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * *v10 + 14) < *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * *v11 + 14))
        {
          *v11 = *v10;
          goto LABEL_166;
        }
        return result;
      case 3:
        v85 = *(_QWORD *)(*(_QWORD *)a3 + 536);
        v84 = *v11;
        v86 = v11[1];
        v87 = *(unsigned __int16 *)(v85 + 32 * v86 + 14);
        v88 = *(unsigned __int16 *)(v85 + 32 * *v11 + 14);
        v89 = *v10;
        v90 = *(unsigned __int16 *)(v85 + 32 * *v10 + 14);
        if (v87 >= v88)
        {
          if (v90 < v87)
          {
            v11[1] = v89;
            *v10 = v86;
            v143 = *v11;
            v142 = v11[1];
            if (*(unsigned __int16 *)(v85 + 32 * v142 + 14) < *(unsigned __int16 *)(v85 + 32 * *v11 + 14))
            {
              *v11 = v142;
              v11[1] = v143;
            }
          }
        }
        else
        {
          if (v90 >= v87)
          {
            *v11 = v86;
            v11[1] = v84;
            if (*(unsigned __int16 *)(v85 + 32 * *v10 + 14) >= v88)
              return result;
            v11[1] = *v10;
          }
          else
          {
            *v11 = v89;
          }
LABEL_166:
          *v10 = v84;
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *>(v11, v11 + 1, v11 + 2, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 536));
      case 5:
        v91 = v11 + 1;
        v92 = v11 + 2;
        v93 = v11 + 3;
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *>(v11, v11 + 1, v11 + 2, v11 + 3, *(_QWORD *)(*(_QWORD *)a3 + 536));
        v94 = v11[3];
        v95 = *(_QWORD *)(*(_QWORD *)a3 + 536);
        if (*(unsigned __int16 *)(v95 + 32 * *v10 + 14) < *(unsigned __int16 *)(v95 + 32 * v94 + 14))
        {
          *v93 = *v10;
          *v10 = v94;
          v96 = *v93;
          v97 = *v92;
          v98 = *(unsigned __int16 *)(v95 + 32 * *v93 + 14);
          if (v98 < *(unsigned __int16 *)(v95 + 32 * *v92 + 14))
          {
            *v92 = v96;
            *v93 = v97;
            v99 = *v91;
            if (v98 < *(unsigned __int16 *)(v95 + 32 * *v91 + 14))
            {
              v11[1] = v96;
              v11[2] = v99;
              v100 = *v11;
              if (v98 < *(unsigned __int16 *)(v95 + 32 * *v11 + 14))
              {
                *v11 = v96;
                v11[1] = v100;
              }
            }
          }
        }
        return result;
      default:
        if (v12 <= 191)
        {
          v101 = *(_QWORD *)a3;
          if ((a5 & 1) != 0)
          {
            if (v11 != a2)
            {
              v102 = v11 + 1;
              if (v11 + 1 != a2)
              {
                v103 = *(_QWORD *)(v101 + 536);
                v104 = 8;
                v105 = v11;
                do
                {
                  v108 = *v105;
                  v107 = v105[1];
                  v105 = v102;
                  v109 = *(unsigned __int16 *)(v103 + 32 * v107 + 14);
                  if (v109 < *(unsigned __int16 *)(v103 + 32 * v108 + 14))
                  {
                    v110 = v104;
                    do
                    {
                      *(uint64_t *)((char *)v11 + v110) = v108;
                      v111 = v110 - 8;
                      if (v110 == 8)
                      {
                        v106 = v11;
                        goto LABEL_111;
                      }
                      v108 = *(uint64_t *)((char *)v11 + v110 - 16);
                      v110 -= 8;
                    }
                    while (v109 < *(unsigned __int16 *)(v103 + 32 * v108 + 14));
                    v106 = (uint64_t *)((char *)v11 + v111);
LABEL_111:
                    *v106 = v107;
                  }
                  v102 = v105 + 1;
                  v104 += 8;
                }
                while (v105 + 1 != a2);
              }
            }
          }
          else if (v11 != a2)
          {
            v144 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v145 = *(_QWORD *)(v101 + 536);
              do
              {
                v147 = *v9;
                v146 = v9[1];
                v9 = v144;
                v148 = *(unsigned __int16 *)(v145 + 32 * v146 + 14);
                if (v148 < *(unsigned __int16 *)(v145 + 32 * v147 + 14))
                {
                  v149 = v9;
                  do
                  {
                    *v149 = v147;
                    v147 = *(v149 - 2);
                    --v149;
                  }
                  while (v148 < *(unsigned __int16 *)(v145 + 32 * v147 + 14));
                  *v149 = v146;
                }
                v144 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != a2)
          {
            v112 = (unint64_t)(v13 - 2) >> 1;
            v113 = *(_QWORD *)a3;
            v114 = v112;
            do
            {
              if (v112 >= v114)
              {
                v116 = (2 * v114) | 1;
                v117 = &v11[v116];
                v118 = *v117;
                if (2 * v114 + 2 >= v13)
                {
                  v119 = *(_QWORD *)(v113 + 536);
                }
                else
                {
                  v119 = *(_QWORD *)(v113 + 536);
                  if (*(unsigned __int16 *)(v119 + 32 * v118 + 14) < *(unsigned __int16 *)(v119 + 32 * v117[1] + 14))
                  {
                    v118 = v117[1];
                    ++v117;
                    v116 = 2 * v114 + 2;
                  }
                }
                v120 = &v11[v114];
                v121 = *v120;
                result = (uint64_t *)*(unsigned __int16 *)(v119 + 32 * *v120 + 14);
                if (*(unsigned __int16 *)(v119 + 32 * v118 + 14) >= result)
                {
                  do
                  {
                    v122 = v117;
                    *v120 = v118;
                    if (v112 < v116)
                      break;
                    v123 = (2 * v116) | 1;
                    v117 = &v11[v123];
                    v116 = 2 * v116 + 2;
                    v118 = *v117;
                    if (v116 < v13)
                    {
                      if (*(unsigned __int16 *)(v119 + 32 * v118 + 14) >= *(unsigned __int16 *)(v119 + 32 * v117[1] + 14))
                      {
                        v116 = v123;
                      }
                      else
                      {
                        v118 = v117[1];
                        ++v117;
                      }
                    }
                    else
                    {
                      v116 = v123;
                    }
                    v120 = v122;
                  }
                  while (*(unsigned __int16 *)(v119 + 32 * v118 + 14) >= result);
                  *v122 = v121;
                  v113 = *(_QWORD *)a3;
                }
              }
              v115 = v114-- <= 0;
            }
            while (!v115);
            v124 = (unint64_t)v12 >> 3;
            do
            {
              v125 = 0;
              v126 = *v11;
              v127 = *(_QWORD *)a3;
              v128 = v11;
              do
              {
                v131 = &v128[v125];
                v132 = v131[1];
                v130 = v131 + 1;
                v129 = v132;
                v133 = (2 * v125) | 1;
                v125 = 2 * v125 + 2;
                if (v125 < v124)
                {
                  result = (uint64_t *)v130[1];
                  if (*(unsigned __int16 *)(*(_QWORD *)(v127 + 536) + 32 * v129 + 14) >= *(unsigned __int16 *)(*(_QWORD *)(v127 + 536) + 32 * (_QWORD)result + 14))
                  {
                    v125 = v133;
                  }
                  else
                  {
                    v129 = v130[1];
                    ++v130;
                  }
                }
                else
                {
                  v125 = v133;
                }
                *v128 = v129;
                v128 = v130;
              }
              while (v125 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
              if (v130 == --a2)
              {
                *v130 = v126;
              }
              else
              {
                *v130 = *a2;
                *a2 = v126;
                v134 = (char *)v130 - (char *)v11 + 8;
                if (v134 >= 9)
                {
                  v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
                  v136 = &v11[v135];
                  v137 = *v136;
                  v138 = *v130;
                  v139 = *(_QWORD *)(*(_QWORD *)a3 + 536);
                  v140 = *(unsigned __int16 *)(v139 + 32 * *v130 + 14);
                  if (*(unsigned __int16 *)(v139 + 32 * *v136 + 14) < v140)
                  {
                    do
                    {
                      v141 = v136;
                      *v130 = v137;
                      if (!v135)
                        break;
                      v135 = (v135 - 1) >> 1;
                      v136 = &v11[v135];
                      v137 = *v136;
                      v130 = v141;
                    }
                    while (*(unsigned __int16 *)(v139 + 32 * *v136 + 14) < v140);
                    *v141 = v138;
                  }
                }
              }
              v115 = v124-- <= 2;
            }
            while (!v115);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        v16 = *(_QWORD *)(*(_QWORD *)a3 + 536);
        v17 = *v10;
        v18 = *(unsigned __int16 *)(v16 + 32 * *v10 + 14);
        if ((unint64_t)v12 >= 0x401)
        {
          v19 = *v15;
          v20 = *v11;
          v21 = *(unsigned __int16 *)(v16 + 32 * *v15 + 14);
          v22 = *(unsigned __int16 *)(v16 + 32 * *v11 + 14);
          if (v21 >= v22)
          {
            if (v18 < v21)
            {
              *v15 = v17;
              *v10 = v19;
              v27 = *v11;
              if (*(unsigned __int16 *)(v16 + 32 * *v15 + 14) < *(unsigned __int16 *)(v16 + 32 * *v11 + 14))
              {
                *v11 = *v15;
                *v15 = v27;
              }
            }
          }
          else
          {
            if (v18 < v21)
            {
              *v11 = v17;
              goto LABEL_21;
            }
            *v11 = v19;
            *v15 = v20;
            if (*(unsigned __int16 *)(v16 + 32 * *v10 + 14) < v22)
            {
              *v15 = *v10;
LABEL_21:
              *v10 = v20;
            }
          }
          v29 = &v11[v14];
          v32 = *(v29 - 1);
          v30 = v29 - 1;
          v31 = v32;
          v33 = v11[1];
          v34 = *(unsigned __int16 *)(v16 + 32 * v32 + 14);
          v35 = *(unsigned __int16 *)(v16 + 32 * v33 + 14);
          v36 = *(a2 - 2);
          v37 = *(unsigned __int16 *)(v16 + 32 * v36 + 14);
          if (v34 >= v35)
          {
            if (v37 < v34)
            {
              *v30 = v36;
              *(a2 - 2) = v31;
              v38 = v11[1];
              if (*(unsigned __int16 *)(v16 + 32 * *v30 + 14) < *(unsigned __int16 *)(v16 + 32 * v38 + 14))
              {
                v11[1] = *v30;
                *v30 = v38;
              }
            }
          }
          else
          {
            if (v37 < v34)
            {
              v11[1] = v36;
              goto LABEL_33;
            }
            v11[1] = v31;
            *v30 = v33;
            v39 = *(a2 - 2);
            if (*(unsigned __int16 *)(v16 + 32 * v39 + 14) < v35)
            {
              *v30 = v39;
LABEL_33:
              *(a2 - 2) = v33;
            }
          }
          v40 = &v11[v14];
          v43 = v40[1];
          v41 = v40 + 1;
          v42 = v43;
          v44 = v11[2];
          v45 = *(unsigned __int16 *)(v16 + 32 * v43 + 14);
          v46 = *(unsigned __int16 *)(v16 + 32 * v44 + 14);
          v47 = *(a2 - 3);
          v48 = *(unsigned __int16 *)(v16 + 32 * v47 + 14);
          if (v45 >= v46)
          {
            if (v48 < v45)
            {
              *v41 = v47;
              *(a2 - 3) = v42;
              v49 = v11[2];
              if (*(unsigned __int16 *)(v16 + 32 * *v41 + 14) < *(unsigned __int16 *)(v16 + 32 * v49 + 14))
              {
                v11[2] = *v41;
                *v41 = v49;
              }
            }
          }
          else
          {
            if (v48 < v45)
            {
              v11[2] = v47;
              goto LABEL_42;
            }
            v11[2] = v42;
            *v41 = v44;
            v50 = *(a2 - 3);
            if (*(unsigned __int16 *)(v16 + 32 * v50 + 14) < v46)
            {
              *v41 = v50;
LABEL_42:
              *(a2 - 3) = v44;
            }
          }
          v51 = *v15;
          v52 = *v30;
          v53 = *(unsigned __int16 *)(v16 + 32 * *v15 + 14);
          v54 = *(unsigned __int16 *)(v16 + 32 * *v30 + 14);
          v55 = *v41;
          v56 = *(unsigned __int16 *)(v16 + 32 * *v41 + 14);
          if (v53 >= v54)
          {
            if (v56 >= v53)
              goto LABEL_50;
            *v15 = v55;
            *v41 = v51;
            v41 = v15;
            v51 = v52;
            if (v56 >= v54)
            {
              v51 = v55;
              goto LABEL_50;
            }
          }
          else if (v56 >= v53)
          {
            *v30 = v51;
            *v15 = v52;
            v30 = v15;
            v51 = v55;
            if (v56 >= v54)
            {
              v51 = v52;
LABEL_50:
              v57 = *v11;
              *v11 = v51;
              *v15 = v57;
              goto LABEL_51;
            }
          }
          *v30 = v55;
          *v41 = v52;
          goto LABEL_50;
        }
        v23 = *v11;
        v24 = *v15;
        v25 = *(unsigned __int16 *)(v16 + 32 * *v11 + 14);
        v26 = *(unsigned __int16 *)(v16 + 32 * *v15 + 14);
        if (v25 >= v26)
        {
          if (v18 < v25)
          {
            *v11 = v17;
            *v10 = v23;
            v28 = *v15;
            if (*(unsigned __int16 *)(v16 + 32 * *v11 + 14) < *(unsigned __int16 *)(v16 + 32 * *v15 + 14))
            {
              *v15 = *v11;
              *v11 = v28;
            }
          }
        }
        else
        {
          if (v18 >= v25)
          {
            *v15 = v23;
            *v11 = v24;
            if (*(unsigned __int16 *)(v16 + 32 * *v10 + 14) >= v26)
              goto LABEL_51;
            *v11 = *v10;
          }
          else
          {
            *v15 = v17;
          }
          *v10 = v24;
        }
LABEL_51:
        --a4;
        v58 = *v11;
        if ((a5 & 1) == 0)
        {
          v59 = *(unsigned __int16 *)(v16 + 32 * v58 + 14);
          if (*(unsigned __int16 *)(v16 + 32 * *(v11 - 1) + 14) >= v59)
          {
            if (v59 >= *(unsigned __int16 *)(v16 + 32 * *v10 + 14))
            {
              v76 = v11 + 1;
              do
              {
                v11 = v76;
                if (v76 >= a2)
                  break;
                ++v76;
              }
              while (v59 >= *(unsigned __int16 *)(v16 + 32 * *v11 + 14));
            }
            else
            {
              do
              {
                v75 = v11[1];
                ++v11;
              }
              while (v59 >= *(unsigned __int16 *)(v16 + 32 * v75 + 14));
            }
            v77 = a2;
            if (v11 < a2)
            {
              v77 = a2;
              do
                v78 = *--v77;
              while (v59 < *(unsigned __int16 *)(v16 + 32 * v78 + 14));
            }
            if (v11 < v77)
            {
              v79 = *v11;
              v80 = *v77;
              do
              {
                *v11 = v80;
                *v77 = v79;
                do
                {
                  v81 = v11[1];
                  ++v11;
                  v79 = v81;
                }
                while (v59 >= *(unsigned __int16 *)(v16 + 32 * v81 + 14));
                do
                {
                  v82 = *--v77;
                  v80 = v82;
                }
                while (v59 < *(unsigned __int16 *)(v16 + 32 * v82 + 14));
              }
              while (v11 < v77);
            }
            v83 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v83;
            a5 = 0;
            *v83 = v58;
            continue;
          }
        }
        v60 = *(_QWORD *)(*(_QWORD *)a3 + 536);
        v61 = *(unsigned __int16 *)(v60 + 32 * v58 + 14);
        v62 = v11;
        do
        {
          v63 = v62;
          v65 = v62[1];
          ++v62;
          v64 = v65;
        }
        while (*(unsigned __int16 *)(v60 + 32 * v65 + 14) < v61);
        v66 = a2;
        if (v63 == v11)
        {
          v66 = a2;
          do
          {
            if (v62 >= v66)
              break;
            v68 = *--v66;
          }
          while (*(unsigned __int16 *)(v60 + 32 * v68 + 14) >= v61);
        }
        else
        {
          do
            v67 = *--v66;
          while (*(unsigned __int16 *)(v60 + 32 * v67 + 14) >= v61);
        }
        if (v62 < v66)
        {
          v69 = *v66;
          v70 = v62;
          v71 = v66;
          do
          {
            *v70 = v69;
            *v71 = v64;
            do
            {
              v63 = v70;
              v72 = v70[1];
              ++v70;
              v64 = v72;
            }
            while (*(unsigned __int16 *)(v60 + 32 * v72 + 14) < v61);
            do
            {
              v73 = *--v71;
              v69 = v73;
            }
            while (*(unsigned __int16 *)(v60 + 32 * v73 + 14) >= v61);
          }
          while (v70 < v71);
        }
        if (v63 != v11)
          *v11 = *v63;
        *v63 = v58;
        if (v62 < v66)
        {
LABEL_72:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(v9, v63, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v63 + 1;
          continue;
        }
        v74 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *>(v11, v63, a3);
        v11 = v63 + 1;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *>(v63 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v74)
            continue;
          goto LABEL_72;
        }
        a2 = v63;
        if (!v74)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(unsigned __int16 *)(a5 + 32 * *a2 + 14);
  v8 = *(unsigned __int16 *)(a5 + 32 * *result + 14);
  v9 = *a3;
  v10 = *(unsigned __int16 *)(a5 + 32 * *a3 + 14);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      v11 = *result;
      if (*(unsigned __int16 *)(a5 + 32 * *a2 + 14) < *(unsigned __int16 *)(a5 + 32 * *result + 14))
      {
        *result = *a2;
        *a2 = v11;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *result = v9;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(unsigned __int16 *)(a5 + 32 * *a3 + 14) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(unsigned __int16 *)(a5 + 32 * *a4 + 14) < *(unsigned __int16 *)(a5 + 32 * v5 + 14))
  {
    *a3 = *a4;
    *a4 = v5;
    v12 = *a2;
    if (*(unsigned __int16 *)(a5 + 32 * *a3 + 14) < *(unsigned __int16 *)(a5 + 32 * *a2 + 14))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(unsigned __int16 *)(a5 + 32 * *a2 + 14) < *(unsigned __int16 *)(a5 + 32 * *result + 14))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * v8 + 14) < *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 32 * *a1 + 14))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 536);
      v11 = *a1;
      v12 = a1[1];
      v13 = *(unsigned __int16 *)(v10 + 32 * v12 + 14);
      v14 = *(unsigned __int16 *)(v10 + 32 * *a1 + 14);
      v15 = *(a2 - 1);
      v16 = *(unsigned __int16 *)(v10 + 32 * v15 + 14);
      if (v13 >= v14)
      {
        if (v16 < v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v39 = *a1;
          v38 = a1[1];
          if (*(unsigned __int16 *)(v10 + 32 * v38 + 14) < *(unsigned __int16 *)(v10 + 32 * *a1 + 14))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v49 = *(a2 - 1);
        if (*(unsigned __int16 *)(v10 + 32 * v49 + 14) < v14)
        {
          a1[1] = v49;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 536));
      return 1;
    case 5:
      v27 = a1 + 1;
      v28 = a1 + 2;
      v29 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, *(_QWORD *)(*(_QWORD *)a3 + 536));
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = *(_QWORD *)(*(_QWORD *)a3 + 536);
      if (*(unsigned __int16 *)(v32 + 32 * v30 + 14) < *(unsigned __int16 *)(v32 + 32 * v31 + 14))
      {
        *v29 = v30;
        *(a2 - 1) = v31;
        v33 = *v29;
        v34 = *v28;
        v35 = *(unsigned __int16 *)(v32 + 32 * *v29 + 14);
        if (v35 < *(unsigned __int16 *)(v32 + 32 * *v28 + 14))
        {
          *v28 = v33;
          *v29 = v34;
          v36 = *v27;
          if (v35 < *(unsigned __int16 *)(v32 + 32 * *v27 + 14))
          {
            a1[1] = v33;
            a1[2] = v36;
            v37 = *a1;
            if (v35 < *(unsigned __int16 *)(v32 + 32 * *a1 + 14))
            {
              *a1 = v33;
              a1[1] = v37;
            }
          }
        }
      }
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *(_QWORD *)(*(_QWORD *)a3 + 536);
      v21 = *a1;
      v22 = *(unsigned __int16 *)(v20 + 32 * v19 + 14);
      v23 = *(unsigned __int16 *)(v20 + 32 * *a1 + 14);
      v24 = *(unsigned __int16 *)(v20 + 32 * v17 + 14);
      if (v22 >= v23)
      {
        if (v24 >= v22)
          goto LABEL_23;
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
      }
      else
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 < v22)
          goto LABEL_22;
        *a1 = v19;
        a1[1] = v21;
        v25 = a1 + 1;
        v26 = a1 + 2;
      }
      if (v24 >= v23)
        goto LABEL_23;
LABEL_22:
      *v25 = v17;
      *v26 = v21;
LABEL_23:
      v40 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v41 = 0;
      v42 = 24;
      break;
  }
  while (1)
  {
    v44 = *v40;
    v45 = *v18;
    v46 = *(unsigned __int16 *)(v20 + 32 * *v40 + 14);
    if (v46 < *(unsigned __int16 *)(v20 + 32 * v45 + 14))
    {
      v47 = v42;
      do
      {
        *(uint64_t *)((char *)a1 + v47) = v45;
        v48 = v47 - 8;
        if (v47 == 8)
        {
          v43 = a1;
          goto LABEL_26;
        }
        v45 = *(uint64_t *)((char *)a1 + v47 - 16);
        v47 -= 8;
      }
      while (v46 < *(unsigned __int16 *)(v20 + 32 * v45 + 14));
      v43 = (uint64_t *)((char *)a1 + v48);
LABEL_26:
      *v43 = v44;
      if (++v41 == 8)
        return v40 + 1 == a2;
    }
    v18 = v40;
    v42 += 8;
    if (++v40 == a2)
      return 1;
  }
}

void ggl::GradientPolylineOverlayRibbon::BaseMesh::~BaseMesh(ggl::GradientPolylineOverlayRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::GradientPolylineOverlayRibbon::BaseMesh::~BaseMesh(ggl::GradientPolylineOverlayRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::GradientPolylineOverlayRibbon::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::GradientPolylineOverlayRibbon::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::GradientPolylineOverlayRibbon::FillPipelineState::~FillPipelineState(ggl::GradientPolylineOverlayRibbon::FillPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::~FillPipelineSetup(ggl::GradientPolylineOverlayRibbon::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::constantDataIsEnabled(ggl::GradientPolylineOverlayRibbon::FillPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::textureIsEnabled(ggl::GradientPolylineOverlayRibbon::FillPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::GradientPolylineOverlayRibbon::AlphaPipelineState::~AlphaPipelineState(ggl::GradientPolylineOverlayRibbon::AlphaPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::~AlphaPipelineSetup(ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::constantDataIsEnabled(ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::textureIsEnabled(ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState::~AlphaFillPipelineState(ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::~AlphaFillPipelineSetup(ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::constantDataIsEnabled(ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::textureIsEnabled(ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::VectorFeatureMarker::~VectorFeatureMarker(md::VectorFeatureMarker *this)
{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1A1AF4E00);
}

void md::VectorFeatureMarker::name(md::VectorFeatureMarker *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unsigned __int8 v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(const char **)(v3 + 16);
    v5 = "unnamed";
    if (v4 && *v4)
      v5 = v4;
    {
      v15 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v15, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v7 = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(a2 + 24) = mdm::Allocator::instance(void)::alloc;
    v8 = strlen(v5);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v12 + 1, 1);
      *(_QWORD *)(a2 + 8) = v9;
      *(_QWORD *)(a2 + 16) = v13 | 0x8000000000000000;
      *(_QWORD *)a2 = v14;
      a2 = v14;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = v8;
      if (!v8)
        goto LABEL_16;
    }
    memmove((void *)a2, v5, v9);
LABEL_16:
    v11 = (_BYTE *)(a2 + v9);
    goto LABEL_17;
  }
  {
    v16 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v16, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(a2 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a2 + 23) = 7;
  *(_DWORD *)a2 = 1634627189;
  *(_DWORD *)(a2 + 3) = 1684368737;
  v11 = (_BYTE *)(a2 + 7);
LABEL_17:
  *v11 = 0;
}

uint64_t md::VectorFeatureMarker::featureId(md::VectorFeatureMarker *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(_QWORD *)(v1 + 40);
  else
    return 0;
}

uint64_t md::VectorFeatureMarker::venueId(md::VectorFeatureMarker *this)
{
  return -1;
}

uint64_t md::VectorFeatureMarker::styleAttributes@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 32);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v3 = *(_QWORD *)(v2 + 32);
    *a2 = v4;
    a2[1] = v3;
    if (v3)
    {
      v5 = (unint64_t *)(v3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

float md::VectorFeatureMarker::minZoomRank(md::VectorFeatureMarker *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(float *)(v1 + 68);
  else
    return 0.0;
}

float md::VectorFeatureMarker::maxZoomRank(md::VectorFeatureMarker *this)
{
  return -1.0;
}

void md::VectorFeatureMarker::debugString(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  uint64_t v8;

  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  *(_QWORD *)(a1 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(a1 + 23) = 19;
  strcpy((char *)a1, "VectorFeatureMarker");
}

void sub_19FC41830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_19FC41A70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC41AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKLabelNavJunction;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FC41B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC41C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC41D64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC4200C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC42108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC424D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FC427A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC42A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FC42D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FC43054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC43410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC43440(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC43638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC43AC4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  if (a3)
  {
    v9 = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19FC44150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;
  uint64_t v13;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  md::RoadSignTextMetrics::~RoadSignTextMetrics((md::RoadSignTextMetrics *)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v13 - 176);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v13 - 152);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<md::NavLabel>::shared_ptr[abi:nn180100]<md::NavRoadSign,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42E6B50;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19FC4449C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_19FC44518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC445A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC446AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::realistic::SkyRenderLayer::~SkyRenderLayer(md::realistic::SkyRenderLayer *this)
{
  md::realistic::SkyRenderLayer::~SkyRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;

  *(_QWORD *)this = &off_1E42AFE38;
  v2 = *((_QWORD *)this + 31);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 12);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1000C4049ECCB0CLL);
  v6 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (uint64_t *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v8)
  {
    v9 = (std::__shared_weak_count *)v8[3];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v8[1];
    v8[1] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *v8;
    *v8 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    MEMORY[0x1A1AF4E00](v8, 0x20C40DC1BFBCFLL);
  }
  v14 = (uint64_t *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v14)
  {
    v15 = (std::__shared_weak_count *)v14[3];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v14[1];
    v14[1] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *v14;
    *v14 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    MEMORY[0x1A1AF4E00](v14, 0x20C40DC1BFBCFLL);
  }
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v20)
    goto LABEL_41;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v23)
      goto LABEL_47;
  }
  else
  {
LABEL_41:
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v23)
      goto LABEL_47;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_47:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v29 = (void *)*((_QWORD *)this + 1);
  if (v29)
  {
    *((_QWORD *)this + 2) = v29;
    operator delete(v29);
  }
}

_QWORD *md::realistic::SkyRenderLayer::layout(md::realistic::SkyRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  double v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  BOOL v45;
  _QWORD *v46;
  int8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  BOOL v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  long double v62;
  long double v63;
  double v64;
  double v65;
  long double v66;
  long double v67;
  double v68;
  double v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  double *v81;
  uint64_t v82;
  ggl::PipelineSetup *v83;
  double v84;
  double v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  double v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  int v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  double *v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double *v103;
  double v104;
  double v105;
  double v106;
  __n128 v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  __n128 v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  float v134;
  float v135;
  float v136;
  float v137;
  __float2 v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  double *v154;
  uint64_t v155;
  id v156;
  float v157;
  float v158;
  float v159;
  __int32 v160;
  double *v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  float v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float v172;
  float v173;
  float v174;
  double v175;
  float v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  float v205;
  float32_t v206;
  float v207;
  float32_t v208;
  float v209;
  float32_t v210;
  float32_t v211;
  float32_t v212;
  float v213;
  float32_t v214;
  float32_t v215;
  float32_t v216;
  uint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  float32x4_t *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  float32x2_t v232;
  float32x2_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  float32x2_t v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  float v268;
  float32_t v269;
  float v270;
  float32_t v271;
  float v272;
  float v273;
  float32_t v274;
  float v275;
  float v276;
  float32_t v277;
  float v278;
  float32_t v279;
  uint64_t v280;
  unint64_t v281;
  __int128 v282;
  float32x2_t *v283;
  uint64_t v284;
  float32_t v285;
  unint64_t v286;
  _QWORD *result;
  uint64_t v288;
  float v289;
  unsigned __int32 v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  double v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  double v309;
  double v310;
  std::__shared_weak_count *v311;
  _QWORD v312[3];
  _QWORD *v313;
  _QWORD v314[3];
  _QWORD *v315;
  _QWORD v316[3];
  _QWORD *v317;
  __int128 v318;
  uint64_t v319;
  _BYTE v320[12];
  _BYTE v321[12];
  _BYTE v322[24];
  _BYTE *v323;
  double v324[3];
  double *v325;
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  v314[0] = &off_1E42D54A0;
  v314[1] = a2;
  v315 = v314;
  v312[0] = &off_1E42D54E8;
  v312[1] = a2;
  v313 = v312;
  v317 = v316;
  v316[0] = &off_1E42D54E8;
  v316[1] = a2;
  std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v314);
  v4 = v313;
  if (v313 == v312)
  {
    v5 = 4;
    v4 = v312;
  }
  else
  {
    if (!v313)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v315;
  if (v315 == v314)
  {
    v7 = 4;
    v6 = v314;
    goto LABEL_10;
  }
  if (v315)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = v8[1];
  if ((v9 & (v9 - 1)) != 0)
  {
    v11 = 0x1AF456233693CD46;
    if (v9 <= 0x1AF456233693CD46)
      v11 = 0x1AF456233693CD46 % v9;
    v10 = *(_QWORD **)(*v8 + 8 * v11);
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x1AF456233693CD46);
    }
    while (v10[2] != 0x1AF456233693CD46);
  }
  else
  {
    v10 = *(_QWORD **)(*v8 + 8 * ((v9 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x1AF456233693CD46);
    }
    while (v10[2] != 0x1AF456233693CD46);
  }
  v12 = *(_QWORD *)(v10[5] + 32);
  v13 = *((_QWORD *)this + 5);
  v14 = *(_QWORD **)(*(_QWORD *)(v13 + 24) + 8);
  v15 = v14[3];
  v16 = v14[4];
  v17 = v16 - v15;
  if (v16 == v15)
    goto LABEL_28;
  v18 = 0;
  v19 = v17 >> 3;
  while (1)
  {
    v20 = *(unsigned __int8 **)(v15 + 8 * v18);
    if (*v20 == *((unsigned __int8 *)this + 272))
    {
      v21 = *((_QWORD *)v20 + 1);
      v22 = v14[15];
      if (v21 < (v14[16] - v22) >> 3)
        break;
    }
    if (++v18 >= v19)
      goto LABEL_28;
  }
  v23 = *(_QWORD *)(v22 + 8 * v21);
  if (!v23)
LABEL_28:
    v24 = 0;
  else
    v24 = *(_QWORD **)(*(_QWORD *)(v23 + 24) + 8 * *((unsigned __int8 *)this + 273));
  v25 = *(double *)(v12 + 32);
  if (*((float *)this + 17) != 1.0)
  {
    v26 = *(_QWORD *)(v13 + 136);
    v27 = *(double *)(v26 + 104);
    v28 = *(unsigned int *)(v26 + 88);
    v29 = *(_QWORD *)(*(_QWORD *)v26 + 464);
    v30 = v29
       && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29)
       && (unint64_t)(v28 - *((_QWORD *)this + 7)) < 0x259;
    v31 = *((double *)this + 9);
    if (v31 == 0.0 && !v30 && (unint64_t)(v28 - *((_QWORD *)this + 7)) >= 0xB)
    {
      *((double *)this + 9) = v27;
      v31 = v27;
    }
    if (v31 <= 0.0)
    {
      v33 = *((float *)this + 17);
    }
    else
    {
      v32 = v27 - v31;
      v33 = fminf(fmaxf(v32, 0.0), 1.0);
      *((float *)this + 17) = v33;
    }
    if (v33 == 1.0)
    {
      *((_BYTE *)this + 66) = 0;
    }
    else
    {
      *((_BYTE *)this + 66) = 1;
      v34 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 128) + 856) + 88);
      if (v34)
      {
        LOBYTE(v318) = 7;
        md::MapEngine::setNeedsTick(v34, &v318);
      }
    }
  }
  v35 = (_QWORD *)*((_QWORD *)a2 + 1);
  v36 = v35[1];
  if ((v36 & (v36 - 1)) != 0)
  {
    v38 = 0xE42D19AFCA302E68;
    if (v36 <= 0xE42D19AFCA302E68)
      v38 = 0xE42D19AFCA302E68 % v36;
    v37 = *(_QWORD **)(*v35 + 8 * v38);
    do
    {
      do
        v37 = (_QWORD *)*v37;
      while (v37[1] != 0xE42D19AFCA302E68);
    }
    while (v37[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v37 = *(_QWORD **)(*v35 + 8 * ((v36 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v37 = (_QWORD *)*v37;
      while (v37[1] != 0xE42D19AFCA302E68);
    }
    while (v37[2] != 0xE42D19AFCA302E68);
  }
  if (*(_BYTE *)(*(_QWORD *)(v37[5] + 32) + 72) == 1)
  {
    if (*((_QWORD *)this + 25))
      *((_BYTE *)this + 64) = 1;
    else
      md::realistic::SkyRenderLayer::load(this);
    if (v25 >= 6378137.0)
    {
      *((_BYTE *)this + 65) = *((float *)this + 17) > 0.0;
      v43 = *((_QWORD *)this + 29);
      *(_OWORD *)(v43 + 4) = xmmword_19FFB34C0;
      md::realistic::SkyRenderLayer::updateCorona(this, v43 + 4);
    }
    else
    {
      v42 = *((_QWORD *)this + 29);
      *(_OWORD *)(v42 + 4) = xmmword_19FFB5D30;
      md::realistic::SkyRenderLayer::updateCorona(this, v42 + 4);
      *(_WORD *)((char *)this + 65) = 0;
    }
    *((_BYTE *)this + 80) = 0;
    if (*((_QWORD *)this + 25))
    {
      *((_BYTE *)this + 64) = 1;
      if (*((_BYTE *)this + 65))
        goto LABEL_125;
    }
    else
    {
      md::realistic::SkyRenderLayer::load(this);
      if (*((_BYTE *)this + 65))
        goto LABEL_125;
    }
    goto LABEL_194;
  }
  *(_WORD *)((char *)this + 65) = 1;
  if (*(double *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 128) + 72) + 32) >= 3189068.5)
  {
    if (*((_BYTE *)this + 80))
    {
      v41 = *((_QWORD *)this + 29);
      *(_OWORD *)(v41 + 4) = xmmword_19FFB34C0;
      md::realistic::SkyRenderLayer::updateCorona(this, v41 + 4);
      *((_BYTE *)this + 80) = 0;
    }
    if (!*((_QWORD *)this + 25))
    {
      md::realistic::SkyRenderLayer::load(this);
      goto LABEL_78;
    }
    v40 = 1;
  }
  else
  {
    if (!*((_BYTE *)this + 80))
    {
      v39 = *((_QWORD *)this + 29);
      *(_OWORD *)(v39 + 4) = xmmword_19FFB5D20;
      md::realistic::SkyRenderLayer::updateCorona(this, v39 + 4);
      *((_BYTE *)this + 80) = 1;
    }
    if (!*((_QWORD *)this + 25))
      goto LABEL_78;
    v40 = 0;
  }
  *((_BYTE *)this + 64) = v40;
LABEL_78:
  v44 = (_BYTE *)*((_QWORD *)a2 + 9);
  if (v44)
    v45 = *v44 == 0;
  else
    v45 = 1;
  if (*((float *)this + 17) <= 0.0)
  {
    v50 = 0;
    goto LABEL_124;
  }
  v46 = (_QWORD *)*((_QWORD *)a2 + 1);
  v47 = (int8x8_t)v46[1];
  if (!*(_QWORD *)&v47)
    goto LABEL_106;
  v48 = (uint8x8_t)vcnt_s8(v47);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] > 1uLL)
  {
    v49 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v47 <= 0x1AF456233693CD46uLL)
      v49 = 0x1AF456233693CD46uLL % *(_QWORD *)&v47;
  }
  else
  {
    v49 = (*(_QWORD *)&v47 - 1) & 0x1AF456233693CD46;
  }
  v51 = *(_QWORD **)(*v46 + 8 * v49);
  if (!v51)
    goto LABEL_106;
  v52 = (_QWORD *)*v51;
  if (!v52)
    goto LABEL_106;
  if (v48.u32[0] < 2uLL)
  {
    v53 = *(_QWORD *)&v47 - 1;
    while (1)
    {
      v55 = v52[1];
      if (v55 == 0x1AF456233693CD46)
      {
        if (v52[2] == 0x1AF456233693CD46)
          goto LABEL_104;
      }
      else if ((v55 & v53) != v49)
      {
        goto LABEL_106;
      }
      v52 = (_QWORD *)*v52;
      if (!v52)
        goto LABEL_106;
    }
  }
  while (1)
  {
    v54 = v52[1];
    if (v54 == 0x1AF456233693CD46)
      break;
    if (v54 >= *(_QWORD *)&v47)
      v54 %= *(_QWORD *)&v47;
    if (v54 != v49)
      goto LABEL_106;
LABEL_93:
    v52 = (_QWORD *)*v52;
    if (!v52)
      goto LABEL_106;
  }
  if (v52[2] != 0x1AF456233693CD46)
    goto LABEL_93;
LABEL_104:
  v56 = v52[5];
  if (*(_QWORD *)(v56 + 8) == 0x1AF456233693CD46)
  {
    v57 = *(double **)(v56 + 32);
    goto LABEL_107;
  }
LABEL_106:
  v57 = 0;
LABEL_107:
  v59 = v57[46];
  v58 = v57[47];
  if (v58 >= v59)
  {
    v61 = v57[57];
    v64 = v61;
    if (v59 >= v58)
      goto LABEL_118;
    goto LABEL_114;
  }
  if (v58 * v59 <= 0.0)
    v60 = 1.0;
  else
    v60 = v58 / v59;
  v61 = v57[57];
  v62 = tan(v61 * 0.5);
  v63 = atan(v60 * v62);
  v64 = v63 + v63;
  if (v59 < v58)
  {
LABEL_114:
    if (v58 * v59 <= 0.0)
      v65 = 1.0;
    else
      v65 = v59 / v58;
    v66 = tan(v61 * 0.5);
    v67 = atan(v65 * v66);
    v61 = v67 + v67;
  }
LABEL_118:
  v68 = v57[4];
  v69 = v57[5];
  if (v68 >= 3000.0 || v69 >= 1.13446401)
  {
    v70 = sqrt(v61 * v61 + v64 * v64) * 0.5 >= acos(6378137.0 / (v68 + 6378137.0)) * -0.6 + 0.942477796;
    if (v69 >= 0.785398163)
      v70 = 1;
  }
  else
  {
    v70 = 0;
  }
  v50 = v70 && v45;
LABEL_124:
  *((_BYTE *)this + 65) = v50;
  if (!*((_BYTE *)this + 65))
    goto LABEL_194;
LABEL_125:
  v71 = *((_QWORD *)this + 28);
  if (!v71)
  {
    md::realistic::SkyRenderLayer::updateCorona(this, *((_QWORD *)this + 29) + 4);
    v71 = *((_QWORD *)this + 28);
  }
  v72 = *(_QWORD *)(*((_QWORD *)a2 + 92) + 8);
  v73 = *((_QWORD *)this + 27);
  v74 = *(_QWORD *)(v73 + 80);
  *(_QWORD *)&v318 = v71;
  *((_QWORD *)&v318 + 1) = v73;
  LOBYTE(v319) = 0;
  BYTE4(v319) = 0;
  *(_QWORD *)&v320[4] = 0;
  *(_QWORD *)v321 = v74;
  v75 = v322;
  v323 = 0;
  ggl::CommandBuffer::pushLoadItem(v24, (uint64_t)&v318);
  v76 = *((_QWORD *)this + 26);
  if (!v76)
  {
    v77 = *((_QWORD *)a2 + 92);
    *(_QWORD *)&v324[0] = &off_1E42D5458;
    *(_QWORD *)&v324[1] = this;
    v325 = v324;
    v310 = 0.0;
    v311 = 0;
    (*(void (**)(_QWORD, double *, double *))(**(_QWORD **)(v77 + 32) + 16))(*(_QWORD *)(v77 + 32), v324, &v310);
    v78 = v311;
    if (v311)
    {
      p_shared_owners = (unint64_t *)&v311->__shared_owners_;
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = v325;
    if (v325 == v324)
    {
      v82 = 4;
      v81 = v324;
LABEL_137:
      (*(void (**)(void))(*(_QWORD *)v81 + 8 * v82))();
    }
    else if (v325)
    {
      v82 = 5;
      goto LABEL_137;
    }
    v76 = *((_QWORD *)this + 26);
  }
  v83 = *(ggl::PipelineSetup **)(v76 + 8);
  v84 = *(double *)(v72 + 944);
  v85 = *(double *)(v72 + 952);
  v86 = *((_QWORD *)a2 + 4);
  v87 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  if (!v87)
  {
    v90 = *(double *)(v86 + 64);
    goto LABEL_148;
  }
  v88 = (unint64_t *)&v87->__shared_owners_;
  do
    v89 = __ldxr(v88);
  while (__stxr(v89 + 1, v88));
  v90 = *(double *)(v86 + 64);
  do
    v91 = __ldaxr(v88);
  while (__stlxr(v91 - 1, v88));
  if (v91)
  {
    v86 = *((_QWORD *)a2 + 4);
    v92 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
    if (!v92)
    {
LABEL_148:
      v93 = *(unsigned __int8 *)(v86 + 72);
      goto LABEL_156;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    v86 = *((_QWORD *)a2 + 4);
    v92 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
    if (!v92)
      goto LABEL_148;
  }
  v94 = (unint64_t *)&v92->__shared_owners_;
  do
    v95 = __ldxr(v94);
  while (__stxr(v95 + 1, v94));
  v93 = *(unsigned __int8 *)(v86 + 72);
  do
    v96 = __ldaxr(v94);
  while (__stlxr(v96 - 1, v94));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
  }
LABEL_156:
  karo::graphics::View::setNear((karo::graphics::View *)v72, v85 * 0.000000157313035, v90, v93 != 0);
  karo::graphics::View::setFar((karo::graphics::View *)v72, v84 * 0.000000157313035, v90, v93 != 0);
  v306 = *(float64x2_t *)(v72 + 424);
  v307 = *(float64x2_t *)(v72 + 392);
  v302 = *(float64x2_t *)(v72 + 408);
  v303 = *(float64x2_t *)(v72 + 376);
  v304 = *(float64x2_t *)(v72 + 488);
  v305 = *(float64x2_t *)(v72 + 456);
  v300 = *(float64x2_t *)(v72 + 472);
  v301 = *(float64x2_t *)(v72 + 440);
  karo::graphics::View::setFar((karo::graphics::View *)v72, v84, v90, v93 != 0);
  karo::graphics::View::setNear((karo::graphics::View *)v72, v85, v90, v93 != 0);
  v97 = v72 + 40;
  v98 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v72 + 40) + 24))(v72 + 40);
  v100 = v98[3];
  v99 = v98[4];
  v102 = v98[5];
  v101 = v98[6];
  v103 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v72 + 40) + 24))(v72 + 40);
  v104 = -((v100 + v100) * v102 - v101 * (v99 * -2.0));
  v105 = v99 * -2.0 * v102 + (v100 + v100) * v101;
  v116.n128_f64[0] = -(v99 * -2.0 * v99 + 1.0 - (v100 + v100) * v100);
  v106 = 1.0 / sqrt(v104 * v104 + v105 * v105 + v116.n128_f64[0] * v116.n128_f64[0]);
  v107.n128_f64[0] = v106 * v104;
  v108 = v106 * v105;
  v109 = v106 * v116.n128_f64[0];
  v110 = v103[1];
  v111 = v103[2];
  v112 = 1.0 / sqrt(*v103 * *v103 + v110 * v110 + v111 * v111);
  v113 = -(*v103 * v112);
  v114 = -(v110 * v112);
  v115 = -(v111 * v112);
  v116.n128_f64[0] = v113 * v107.n128_f64[0] + v114 * v108 + v115 * v109;
  v299 = v25;
  if (v116.n128_f64[0] >= 0.9999999)
  {
    v120 = *(double *)(v72 + 72);
    v121 = *(double *)(v72 + 80);
    v298 = 0.0;
    v144 = 1.0;
    v297 = 0.0;
    v293 = 0.0;
    v294 = 1.0;
    v295 = 1.0;
    v122 = *(double *)(v72 + 88);
    v123 = *(double *)(v72 + 96);
    v296 = 0.0;
    v291 = 0.0;
    v292 = 0.0;
  }
  else
  {
    v117 = -(v114 * v109 - v115 * v108);
    v118 = -(v115 * v107.n128_f64[0] - v113 * v109);
    v119 = -(v113 * v108 - v114 * v107.n128_f64[0]);
    v120 = *(double *)(v72 + 72);
    v121 = *(double *)(v72 + 80);
    v122 = *(double *)(v72 + 88);
    v123 = *(double *)(v72 + 96);
    v124 = -(v121 * (v121 * -2.0));
    v125 = v122 * -2.0 * v123;
    v126 = v123 * (v121 * -2.0);
    v127 = v120 * -2.0 * v120 + 1.0;
    v128 = v123 * (v120 * -2.0);
    v129 = v127 - v124;
    v130 = v117
         - (v124 - v122 * (v122 * -2.0)) * v117
         + (-(v121 * (v120 * -2.0)) - v125) * v118
         + (v126 - v122 * (v120 * -2.0)) * v119;
    v131 = (v125 - v121 * (v120 * -2.0)) * v117
         + (v127 - -(v122 * (v122 * -2.0))) * v118
         + (-(v122 * (v121 * -2.0)) - v128) * v119;
    v132 = v129 * v119 + (-(v122 * (v120 * -2.0)) - v126) * v117 + (v128 - v122 * (v121 * -2.0)) * v118;
    v133 = 1.0 / sqrt(v130 * v130 + v131 * v131 + v132 * v132);
    v134 = v133 * v130;
    v135 = v133 * v131;
    v136 = v133 * v132;
    v137 = acos(v116.n128_f64[0]);
    v138 = __sincosf_stret(v137 * 0.5);
    v139 = v138.__sinval * v134;
    v140 = v138.__sinval * v135;
    v116.n128_f32[0] = v138.__sinval * v136;
    v141 = v140 + v140;
    v142 = (float)(v140 + v140) * v140;
    v143 = (float)(v116.n128_f32[0] + v116.n128_f32[0]) * v116.n128_f32[0];
    v144 = 1.0 - (float)(v143 + v142);
    v145 = v139 + v139;
    v146 = (float)(v139 + v139) * (float)(v138.__sinval * v135);
    v147 = (float)(v116.n128_f32[0] + v116.n128_f32[0]) * v138.__cosval;
    v148 = (float)(v139 + v139) * (float)(v138.__sinval * v136);
    v296 = v146 - v147;
    v297 = (float)(v141 * v138.__cosval) + v148;
    v292 = v147 + v146;
    v149 = 1.0 - (float)((float)(v139 + v139) * v139);
    v116.n128_f32[0] = v141 * (float)(v138.__sinval * v136);
    v298 = v116.n128_f32[0] - (float)(v145 * v138.__cosval);
    v291 = v148 - (float)(v141 * v138.__cosval);
    v293 = (float)(v145 * v138.__cosval) + v116.n128_f32[0];
    v294 = v149 - v143;
    v295 = v149 - v142;
  }
  v151 = *(double *)(v72 + 56);
  v150 = *(double *)(v72 + 64);
  v152 = *(double *)(v72 + 48);
  v153 = *(_QWORD *)(*((_QWORD *)this + 5) + 136);
  if (*(_BYTE *)(v153 + 48))
  {
    v154 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 24))(v72 + 40);
    v116.n128_f32[0] = fmin(fmax(fabs(sqrt(*v154 * *v154 + v154[1] * v154[1] + v154[2] * v154[2]) + -6378137.0)* 0.000000666666667+ -4.66666667, 0.0), 1.0);
    v290 = v116.n128_u32[0];
    v153 = *(_QWORD *)(*((_QWORD *)this + 5) + 136);
  }
  else
  {
    v290 = 0;
  }
  v155 = *(unsigned int *)(v153 + 88);
  if (*((_QWORD *)this + 19) != v155)
  {
    *((_QWORD *)this + 19) = v155;
    v324[0] = 0.0;
    v309 = 0.0;
    v310 = 0.0;
    v156 = objc_alloc_init(MEMORY[0x1E0D26ED0]);
    objc_msgSend(v156, "calculateGeocentricDirectionForSunX:Y:Z:", v324, &v310, &v309);
    v157 = v324[0];
    v158 = v310;
    v159 = v309;
    *((float *)this + 40) = v157;
    *((float *)this + 41) = v158;
    *((float *)this + 42) = v159;

  }
  v289 = v144;
  v160 = 0;
  v116.n128_u64[0] = 0x415854A640000000;
  v107.n128_f64[0] = v299;
  if (v299 >= 6378137.0)
    v160 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 128) + 856) + 40) + 68);
  v161 = (double *)(*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)v97 + 24))(v72 + 40, v116, v107);
  v162 = -(v150 * v121 - v151 * v122) - (v150 * v121 - v151 * v122);
  v163 = -(v152 * v122 - v150 * v120) - (v152 * v122 - v150 * v120);
  v164 = -(v151 * v120 - v152 * v121) - (v151 * v120 - v152 * v121);
  v165 = v150 + v162 * v121 + v164 * v123;
  v166 = v151 - v162 * v122 + v163 * v123 + v164 * v120;
  *(float *)&v164 = -(v152 + v162 * v123 + v163 * v122 - v164 * v121);
  *(float *)&v166 = v166;
  v167 = -(v165 - v163 * v120);
  v168 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v303), v307);
  v169 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v302), v306);
  v170 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v301), v305);
  v171 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v300), v304);
  v172 = *(float *)&v164 * 0.00000015731;
  v173 = *(float *)&v166 * -0.00000015731;
  v174 = v167 * 0.00000015731;
  v175 = fmax(sqrt(*v161 * *v161 + v161[1] * v161[1] + v161[2] * v161[2]) + -6356752.31, 100.0);
  v176 = sqrt((v175 + 12713504.6) * v175) * 0.000000157313035;
  v177 = *(double *)(v72 + 80);
  v178 = *(double *)(v72 + 88);
  v179 = *(double *)(v72 + 96);
  v181 = *(double *)(v72 + 64);
  v180 = *(double *)(v72 + 72);
  v183 = *(double *)(v72 + 48);
  v182 = *(double *)(v72 + 56);
  v184 = -(v181 * v177 - v182 * v178) - (v181 * v177 - v182 * v178);
  v185 = -(v183 * v178 - v181 * v180) - (v183 * v178 - v181 * v180);
  v186 = -(v182 * v180 - v183 * v177) - (v182 * v180 - v183 * v177);
  v187 = -(v186 * v180 - (-(v182 - v184 * v178) - v185 * v179));
  v188 = -(v183 + v184 * v179 + v185 * v178 - v186 * v177);
  v189 = -(v181 + v184 * v177 + v186 * v179 - v185 * v180);
  v190 = v177 * -2.0;
  v191 = -(v177 * (v177 * -2.0));
  v192 = 1.0 - (v191 - v178 * (v178 * -2.0));
  v193 = v180 * -2.0;
  v194 = -(v177 * (v180 * -2.0));
  v195 = v178 * -2.0 * v179;
  v196 = v194 - v195;
  v197 = -(v178 * (v180 * -2.0));
  v198 = v179 * v190;
  v199 = v179 * v190 - v178 * (v180 * -2.0);
  v200 = v195 + v194;
  v201 = v180 * -2.0 * v180 + 1.0;
  v202 = v201 - -(v178 * (v178 * -2.0));
  v203 = -(v178 * v190);
  v204 = v179 * v193;
  v205 = v192;
  v207 = v197 - v198;
  v209 = v202;
  v213 = v201 - v191;
  v217 = *((_QWORD *)v83 + 8);
  v218 = *(_QWORD **)v217;
  v219 = *(_QWORD *)(*(_QWORD *)v217 + 8);
  if (v219)
    v220 = (float32x4_t *)v218[9];
  else
    v220 = 0;
  v220->f32[0] = v205;
  v206 = v200;
  v220->f32[1] = v206;
  v220->f32[2] = v207;
  v220->i32[3] = 0;
  v208 = v196;
  v220[1].f32[0] = v208;
  v220[1].f32[1] = v209;
  v210 = v204 + v203;
  v220[1].f32[2] = v210;
  v220[1].i32[3] = 0;
  v211 = v199;
  v220[2].f32[0] = v211;
  v212 = v203 - v204;
  v220[2].f32[1] = v212;
  v220[2].f32[2] = v213;
  v220[2].i32[3] = 0;
  v214 = v188;
  v220[3].f32[0] = v214;
  v215 = v187;
  v220[3].f32[1] = v215;
  v216 = v189;
  v220[3].f32[2] = v216;
  v220[3].i32[3] = 1065353216;
  v220[14].f32[0] = v176;
  v220[9].i32[0] = *((_DWORD *)this + 40);
  v220[9].i32[1] = *((_DWORD *)this + 41);
  v220[9].i32[2] = *((_DWORD *)this + 42);
  v220[8].i32[0] = v160;
  v220[14].i32[1] = v290;
  v220[10].f32[0] = v289;
  v220[10].f32[1] = v292;
  v220[10].f32[2] = v291;
  v220[10].i32[3] = 0;
  v220[11].f32[0] = v296;
  v220[11].f32[1] = v294;
  v220[11].f32[2] = v293;
  v220[11].i32[3] = 0;
  v220[12].f32[0] = v297;
  v220[12].f32[1] = v298;
  v220[12].f32[2] = v295;
  v220[12].i32[3] = 0;
  v220[13].f32[0] = v172;
  v220[13].f32[1] = v173;
  v220[13].f32[2] = v174;
  v220[13].i32[3] = 1065353216;
  v220[4] = v168;
  v220[5] = v169;
  v220[6] = v170;
  v220[7] = v171;
  if (!*((_BYTE *)this + 66))
  {
    v221 = *((_QWORD *)this + 15);
    v222 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (v222)
    {
      v226 = (unint64_t *)&v222->__shared_owners_;
      do
        v227 = __ldxr(v226);
      while (__stxr(v227 + 1, v226));
      ggl::Flyover::FlyoverPipelineSetup::setState(v83, v221, v222);
      do
        v225 = __ldaxr(v226);
      while (__stlxr(v225 - 1, v226));
      goto LABEL_181;
    }
    goto LABEL_183;
  }
  v221 = *((_QWORD *)this + 17);
  v222 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v222)
  {
LABEL_183:
    ggl::Flyover::FlyoverPipelineSetup::setState(v83, v221, v222);
    goto LABEL_184;
  }
  v223 = (unint64_t *)&v222->__shared_owners_;
  do
    v224 = __ldxr(v223);
  while (__stxr(v224 + 1, v223));
  ggl::Flyover::FlyoverPipelineSetup::setState(v83, v221, v222);
  do
    v225 = __ldaxr(v223);
  while (__stlxr(v225 - 1, v223));
LABEL_181:
  if (!v225)
  {
    ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
    std::__shared_weak_count::__release_weak(v222);
  }
LABEL_184:
  if (v220 && v219)
  {
    v228 = v218[8];
    if (v228 <= v219)
      v228 = v219;
    v218[7] = 0;
    v218[8] = v228;
  }
  ggl::CommandBuffer::pushRenderItem((uint64_t)v24, **((ggl::RenderItem ***)this + 26));
  if (v323 == v322)
  {
    v229 = 4;
LABEL_193:
    (*(void (**)(_QWORD *))(*v75 + 8 * v229))(v75);
  }
  else if (v323)
  {
    v229 = 5;
    v75 = v323;
    goto LABEL_193;
  }
LABEL_194:
  if (*((_BYTE *)this + 64))
  {
    v230 = *((_QWORD *)this + 25);
    if (v230)
    {
      v231 = *(_QWORD *)(*((_QWORD *)a2 + 92) + 8);
      v232 = vcvt_f32_f64(*(float64x2_t *)(v231 + 376));
      v233 = vcvt_f32_f64(*(float64x2_t *)(v231 + 392));
      v234 = vcvt_f32_f64(*(float64x2_t *)(v231 + 408));
      v235 = vcvt_f32_f64(*(float64x2_t *)(v231 + 424));
      v236 = vcvt_f32_f64(*(float64x2_t *)(v231 + 440));
      v237 = vcvt_f32_f64(*(float64x2_t *)(v231 + 456));
      v238 = vcvt_f32_f64(*(float64x2_t *)(v231 + 472));
      v239 = vcvt_f32_f64(*(float64x2_t *)(v231 + 488));
      v240 = *(double *)(v231 + 80);
      v241 = *(double *)(v231 + 88);
      v242 = *(double *)(v231 + 96);
      v244 = *(double *)(v231 + 64);
      v243 = *(double *)(v231 + 72);
      v246 = *(double *)(v231 + 48);
      v245 = *(double *)(v231 + 56);
      v247 = -(v244 * v240 - v245 * v241) - (v244 * v240 - v245 * v241);
      v248 = -(v246 * v241 - v244 * v243) - (v246 * v241 - v244 * v243);
      v249 = -(v245 * v243 - v246 * v240) - (v245 * v243 - v246 * v240);
      v250 = -(v249 * v243 - (-(v245 - v247 * v241) - v248 * v242));
      v251 = -(v246 + v247 * v242 + v248 * v241 - v249 * v240);
      v252 = -(v244 + v247 * v240 + v249 * v242 - v248 * v243);
      v253 = v240 * -2.0;
      v254 = -(v240 * (v240 * -2.0));
      v255 = 1.0 - (v254 - v241 * (v241 * -2.0));
      v256 = v243 * -2.0;
      v257 = -(v240 * (v243 * -2.0));
      v258 = v241 * -2.0 * v242;
      v259 = v257 - v258;
      v260 = -(v241 * (v243 * -2.0));
      v261 = v242 * v253;
      v262 = v242 * v253 - v241 * (v243 * -2.0);
      v263 = v258 + v257;
      v264 = v243 * -2.0 * v243 + 1.0;
      v265 = v264 - -(v241 * (v241 * -2.0));
      v266 = -(v241 * v253);
      v267 = v242 * v256;
      v268 = v255;
      v270 = v260 - v261;
      v272 = v265;
      v273 = v267 + v266;
      v275 = v266 - v267;
      v276 = v264 - v254;
      v278 = v250;
      v280 = **(_QWORD **)(*(_QWORD *)(v230 + 8) + 64);
      v318 = 0uLL;
      v281 = *(_QWORD *)(v280 + 8);
      *(_QWORD *)&v282 = 0;
      *((_QWORD *)&v282 + 1) = v280;
      v283 = v281 ? *(float32x2_t **)(v280 + 72) : 0;
      v308 = (float64x2_t)v282;
      v318 = v282;
      v319 = 0;
      *(_QWORD *)v320 = v281;
      *(_QWORD *)&v321[4] = v283;
      *(_WORD *)&v320[8] = 1;
      v283[8] = v232;
      v283[9] = v233;
      v283[10] = v234;
      v283[11] = v235;
      v283[12] = v236;
      v283[13] = v237;
      v283[14] = v238;
      v283[15] = v239;
      v283->f32[0] = v268;
      v269 = v263;
      v283->f32[1] = v269;
      v283[1].f32[0] = v270;
      v283[1].i32[1] = 0;
      v271 = v259;
      v283[2].f32[0] = v271;
      v283[2].f32[1] = v272;
      v283[3].f32[0] = v273;
      v283[3].i32[1] = 0;
      v274 = v262;
      v283[4].f32[0] = v274;
      v283[4].f32[1] = v275;
      v283[5].f32[0] = v276;
      v283[5].i32[1] = 0;
      v277 = v251;
      v283[6].f32[0] = v277;
      v283[6].f32[1] = v278;
      v279 = v252;
      v283[7].f32[0] = v279;
      v283[7].i32[1] = 1065353216;
      v284 = *((_QWORD *)this + 5);
      v283[16].i32[0] = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v284 + 128) + 856) + 40) + 68);
      v285 = *(double *)(*(_QWORD *)(v284 + 136) + 32);
      v283[16].f32[1] = v285;
      ggl::CommandBuffer::pushRenderItem((uint64_t)v24, *(ggl::RenderItem **)v230);
      if (v281)
      {
        if (*(_QWORD *)&v308.f64[0] && *(_BYTE *)(*(_QWORD *)&v308.f64[1] + 17) != 2)
          (*(void (**)(void))(**(_QWORD **)&v308.f64[0] + 64))();
        v286 = *(_QWORD *)(*(_QWORD *)&v308.f64[1] + 64);
        if (v286 <= v281)
          v286 = v281;
        *(_QWORD *)(*(_QWORD *)&v308.f64[1] + 56) = 0;
        *(_QWORD *)(*(_QWORD *)&v308.f64[1] + 64) = v286;
      }
    }
  }
  v24[4] = *((_QWORD *)this + 29);
  if (!v317)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v317 + 48))(v317);
  result = v317;
  if (v317 == v316)
  {
    v288 = 4;
    result = v316;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v288))();
  }
  else if (v317)
  {
    v288 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v288))();
  }
  return result;
}

void sub_19FC45A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,_QWORD *a58)
{
  _QWORD *v58;
  void *v59;
  uint64_t v61;

  if (a58 == v58)
  {
    v61 = 4;
  }
  else
  {
    if (!a58)
      goto LABEL_6;
    v61 = 5;
    v58 = a58;
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v61))(v58);
LABEL_6:
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a45);
  _Unwind_Resume(a1);
}

void sub_19FC45B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char *a48)
{
  char *v49;
  uint64_t v50;

  v49 = a48;
  if (a48 == &a45)
  {
    v50 = 4;
    v49 = &a45;
  }
  else
  {
    if (!a48)
      goto LABEL_6;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SkyLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

unint64_t md::realistic::SkyRenderLayer::updateCorona(md::realistic::SkyRenderLayer *a1, unint64_t a2)
{
  unint64_t result;
  float32x4_t v5;
  uint64_t v6;
  float v7;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  uint64_t v22;
  float v23;
  unsigned int v24;
  float v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float v35;
  double v36;
  float v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  int16x8_t v41;
  unint64_t v42;
  uint64_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint64_t v47;
  uint32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  uint32x4_t v163;
  uint32x4_t v164;
  uint32x4_t v165;
  char *v166;
  uint64_t v167;
  int8x16_t v168;
  int32x4_t v169;
  int32x4_t v170;
  uint64_t v171;
  uint64_t v172;
  float64x2_t v173;
  float32x4_t v174;
  uint64_t v175;
  float64x2_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  int8x16_t v207;
  int8x16_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float64x2_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float32x4_t v267;
  float64x2_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float32x4_t v277;
  float64x2_t v278;
  float32x4_t v279;
  float64x2_t v280;
  int32x4_t v281;
  float64x2_t v282;
  float64x2_t v283;
  int8x16_t v284;
  float64x2_t v285;
  float v286;
  float v287;
  int32x4_t v288;
  float64x2_t v289;
  int32x4_t v290;
  float64x2_t v291;
  int32x4_t v292;
  float64x2_t v293;
  float32x4_t v294;
  int8x16x2_t v295;
  int8x16x2_t v296;
  int8x16x4_t v297;
  int8x16x4_t v298;

  md::realistic::SkyRenderLayer::coronaTexture(a1);
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(**((_QWORD **)a1 + 28) + 16))(*((_QWORD **)a1 + 28), 0);
  v6 = *(unsigned int *)(*((_QWORD *)a1 + 28) + 16);
  if (!(_DWORD)v6)
    return result;
  v7 = (float)(v6 - 1);
  __asm { FMOV            V1.4S, #1.0 }
  v294 = _Q1;
  if (v6 > 7
    && ((v12 = 4 * v6, v13 = 4 * v6 - 4, result + v13 >= result) ? (_CF = result + 1 + v13 >= result + 1) : (_CF = 0),
        _CF ? (v15 = result + 3 + v13 >= result + 3) : (v15 = 0),
        v15 ? (v16 = result + 2 + v13 >= result + 2) : (v16 = 0),
        v16 && (result + v12 > a2 ? (v17 = result >= a2 + 12) : (v17 = 1), v17)))
  {
    __asm { FMOV            V1.2D, #1.5 }
    v285 = _Q1;
    __asm
    {
      FMOV            V3.2D, #1.0
      FMOV            V1.2D, #2.0
    }
    v264 = _Q1;
    __asm { FMOV            V13.2D, #-3.0 }
    if (v6 > 0xF)
    {
      v43 = 0;
      v22 = v6 & 0xFFFFFFF0;
      v44 = (uint32x4_t)xmmword_19FFB4F80;
      v45 = (uint32x4_t)xmmword_19FFB4F90;
      v266 = (float64x2_t)vdupq_n_s64(0x4038FFFFFFFFFFFAuLL);
      v268 = (float64x2_t)vdupq_n_s64(0x3FF0A3D70A3D70A4uLL);
      v265 = (float64x2_t)vdupq_n_s64(0xC038FFFFFFFFFFFALL);
      v262 = (float64x2_t)vdupq_n_s64(0x4048FFFFFFFFFFFAuLL);
      v263 = (float64x2_t)vdupq_n_s64(0x3FF051EB851EB852uLL);
      v260 = (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL);
      v261 = (float64x2_t)vdupq_n_s64(0xC048FFFFFFFFFFFALL);
      v258 = (float64x2_t)vdupq_n_s64(0x4058FFFFFFFFFFFAuLL);
      v259 = (float64x2_t)vdupq_n_s64(0x3FED1EB851EB851FuLL);
      v256 = (float32x4_t)vdupq_n_s32(0x3F19999Au);
      v257 = (float64x2_t)vdupq_n_s64(0xC0567FFFFFFFFFFBLL);
      v254 = (float32x4_t)vdupq_n_s32(0x3F666666u);
      v255 = (float32x4_t)vdupq_n_s32(0x3F451EB8u);
      v253 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v23 = 1.0 / v7;
      v46 = (uint32x4_t)xmmword_19FFB4FA0;
      v47 = v12 & 0x3FFFFFFC0;
      v48 = (uint32x4_t)xmmword_19FFB2E90;
      v49.i64[0] = -1;
      v49.i64[1] = -1;
      v284 = v49;
      v286 = v23;
      do
      {
        v288 = (int32x4_t)v48;
        v281 = (int32x4_t)v46;
        v290 = (int32x4_t)v44;
        v292 = (int32x4_t)v45;
        v50 = vmulq_n_f32(vcvtq_f32_u32(v44), v23);
        v51 = vmulq_n_f32(vcvtq_f32_u32(v45), v23);
        v52 = vmulq_n_f32(vcvtq_f32_u32(v46), v23);
        v53 = vmulq_n_f32(vcvtq_f32_u32(v48), v23);
        v54 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v50.f32), v285);
        v276 = vmulq_f64(vcvt_hight_f64_f32(v50), v285);
        v55 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v51.f32), v285);
        v56 = vmulq_f64(vcvt_hight_f64_f32(v51), v285);
        v57 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v52.f32), v285);
        v58 = vmulq_f64(vcvt_hight_f64_f32(v52), v285);
        v59 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v53.f32), v285);
        v60 = vmulq_f64(vcvt_hight_f64_f32(v53), v285);
        v61 = vmaxnmq_f64(v60, _Q3);
        v62 = vmaxnmq_f64(v59, _Q3);
        v63 = vmaxnmq_f64(v58, _Q3);
        v64 = vmaxnmq_f64(v57, _Q3);
        v65 = vmaxnmq_f64(v56, _Q3);
        v66 = vmaxnmq_f64(v55, _Q3);
        v67 = vmaxnmq_f64(v276, _Q3);
        v68 = vmaxnmq_f64(v54, _Q3);
        v69 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v61, v268), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v265, v266, v61));
        v70 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v62, v268), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v265, v266, v62));
        v71 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v63, v268), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v265, v266, v63));
        v72 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v64, v268), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v265, v266, v64));
        v73 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v65, v268), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v265, v266, v65));
        v74 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v66, v268), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v265, v266, v66));
        v75 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v68, v268), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v265, v266, v68));
        v76 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v67, v268), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v265, v266, v67));
        v274 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v69), vmulq_f64(v69, v69));
        v272 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v70), vmulq_f64(v70, v70));
        v77 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v72), vmulq_f64(v72, v72));
        v78 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v73), vmulq_f64(v73, v73));
        v79 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v74), vmulq_f64(v74, v74));
        v80 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v76), vmulq_f64(v76, v76));
        v81 = (int8x16_t)vcgtq_f64(v66, v263);
        v82 = (int8x16_t)vmlaq_f64(v261, v262, v66);
        v83 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v61, v263), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v261, v262, v61));
        v84 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v62, v263), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v261, v262, v62));
        v85 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v63, v263), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v261, v262, v63));
        v86 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v64, v263), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v261, v262, v64));
        v87 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v65, v263), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v261, v262, v65));
        v88 = (float64x2_t)vbslq_s8(v81, (int8x16_t)_Q3, v82);
        v89 = vmulq_f64(v75, v75);
        v90 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v67, v263), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v261, v262, v67));
        v91 = vmlaq_f64(_Q13, v264, v75);
        v92 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v68, v263), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v261, v262, v68));
        v93 = vmlaq_f64(_Q3, v91, v89);
        v94 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v83), vmulq_f64(v83, v83));
        v95 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v85), vmulq_f64(v85, v85));
        v96 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v87), vmulq_f64(v87, v87));
        v97 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v88), vmulq_f64(v88, v88));
        v98 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v90), vmulq_f64(v90, v90));
        v99 = vmaxnmq_f64(v60, v260);
        v100 = vmaxnmq_f64(v59, v260);
        v101 = vmaxnmq_f64(v58, v260);
        v102 = vmaxnmq_f64(v57, v260);
        v103 = vmaxnmq_f64(v56, v260);
        v104 = vmaxnmq_f64(v55, v260);
        v105 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v99, v259), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v257, v258, v99));
        v106 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v100, v259), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v257, v258, v100));
        v107 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v101, v259), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v257, v258, v101));
        v108 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v102, v259), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v257, v258, v102));
        v109 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v103, v259), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v257, v258, v103));
        v110 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v104, v259), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v257, v258, v104));
        v111 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v108), vmulq_f64(v108, v108));
        v112 = vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v109), vmulq_f64(v109, v109));
        v270 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v93), v80);
        v113 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v79), v78);
        v114 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v77), vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v71), vmulq_f64(v71, v71)));
        v115 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v272), v274);
        v116 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v92), vmulq_f64(v92, v92))), v98);
        v117 = vmaxnmq_f64(v276, v260);
        v118 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v117, v259), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v257, v258, v117));
        *(float32x2_t *)&v98.f64[0] = vcvt_f32_f64(vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v84), vmulq_f64(v84, v84)));
        v119 = vmaxnmq_f64(v54, v260);
        v120 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v119, v259), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v257, v258, v119));
        v121 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v86), vmulq_f64(v86, v86))), v95);
        v122 = vcvt_hight_f32_f64(*(int32x2_t *)&v98.f64[0], v94);
        v277 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v120), vmulq_f64(v120, v120))), vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v118), vmulq_f64(v118, v118)));
        v279 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v97), v96);
        v123 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v110), vmulq_f64(v110, v110))), v112);
        v124 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v111), vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v107), vmulq_f64(v107, v107)));
        v125 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v106), vmulq_f64(v106, v106))), vmlaq_f64(_Q3, vmlaq_f64(_Q13, v264, v105), vmulq_f64(v105, v105)));
        v126 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0);
        v127 = vsubq_f32(v256, v126);
        v128 = vmlaq_f32(v126, v115, v127);
        v129 = vmlaq_f32(v126, v114, v127);
        v130 = vmlaq_f32(v126, v113, v127);
        v131 = vmlaq_f32(v126, v270, v127);
        v132 = vmlaq_f32(v128, v122, vsubq_f32(v294, v128));
        v133 = v122;
        v134 = vmlaq_f32(v129, v121, vsubq_f32(v294, v129));
        v135 = vmlaq_f32(v130, v279, vsubq_f32(v294, v130));
        v136 = v116;
        v137 = vmlaq_f32(v131, v116, vsubq_f32(v294, v131));
        v297.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v132, v125, vsubq_f32(v126, v132)), v253));
        v297.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v134, v124, vsubq_f32(v126, v134)), v253));
        v138 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(a2 + 4), 0);
        v297.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v135, v123, vsubq_f32(v126, v135)), v253));
        v139 = vsubq_f32(v255, v138);
        v297.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v137, v277, vsubq_f32(v126, v137)), v253));
        v140 = vmlaq_f32(v138, v115, v139);
        v298.val[3] = v284;
        v298.val[0] = vqtbl4q_s8(v297, (int8x16_t)xmmword_19FFB4E00);
        v141 = v114;
        v142 = vmlaq_f32(v138, v114, v139);
        v143 = vmlaq_f32(v138, v113, v139);
        v144 = vmlaq_f32(v138, v270, v139);
        v145 = vmlaq_f32(v140, v133, vsubq_f32(v294, v140));
        v146 = vmlaq_f32(v142, v121, vsubq_f32(v294, v142));
        v147 = vmlaq_f32(v143, v279, vsubq_f32(v294, v143));
        v148 = vmlaq_f32(v144, v136, vsubq_f32(v294, v144));
        v297.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v145, v125, vsubq_f32(v138, v145)), v253));
        v5 = (float32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v146, v124, vsubq_f32(v138, v146)), v253));
        v297.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v147, v123, vsubq_f32(v138, v147)), v253));
        v297.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v148, v277, vsubq_f32(v138, v148)), v253));
        v298.val[1] = vqtbl4q_s8(*(int8x16x4_t *)(&v5 - 1), (int8x16_t)xmmword_19FFB4E00);
        v149 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(a2 + 8), 0);
        v150 = vsubq_f32(v254, v149);
        v151 = vmlaq_f32(v149, v115, v150);
        v152 = vmlaq_f32(v149, v141, v150);
        v153 = vmlaq_f32(v149, v113, v150);
        v154 = vmlaq_f32(v149, v270, v150);
        v155 = vmlaq_f32(v151, v133, vsubq_f32(v294, v151));
        v156 = vmlaq_f32(v152, v121, vsubq_f32(v294, v152));
        v157 = vmlaq_f32(v153, v279, vsubq_f32(v294, v153));
        v158 = vmlaq_f32(v154, v136, vsubq_f32(v294, v154));
        v159 = vmlaq_f32(v155, v125, vsubq_f32(v149, v155));
        v160 = vmlaq_f32(v157, v123, vsubq_f32(v149, v157));
        v161 = vmlaq_f32(v158, v277, vsubq_f32(v149, v158));
        v162 = vmulq_f32(vmlaq_f32(v156, v124, vsubq_f32(v149, v156)), v253);
        v23 = v286;
        v163 = vcvtq_u32_f32(vmulq_f32(v159, v253));
        v164 = vcvtq_u32_f32(v162);
        v165 = vcvtq_u32_f32(vmulq_f32(v160, v253));
        v297.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v161, v253));
        v298.val[2] = vqtbl4q_s8(v297, (int8x16_t)xmmword_19FFB4E00);
        v166 = (char *)(result + (v43 & 0xFFFFFFC0));
        vst4q_s8(v166, v298);
        *(_QWORD *)&v54.f64[0] = 0x1000000010;
        *(_QWORD *)&v54.f64[1] = 0x1000000010;
        v48 = (uint32x4_t)vaddq_s32(v288, (int32x4_t)v54);
        v46 = (uint32x4_t)vaddq_s32(v281, (int32x4_t)v54);
        v45 = (uint32x4_t)vaddq_s32(v292, (int32x4_t)v54);
        v43 += 64;
        v44 = (uint32x4_t)vaddq_s32(v290, (int32x4_t)v54);
      }
      while (v47 != v43);
      v7 = (float)(v6 - 1);
      if (v22 == v6)
        return result;
      if ((v6 & 8) == 0)
        goto LABEL_22;
    }
    else
    {
      v22 = 0;
      v23 = 1.0 / v7;
    }
    v167 = v22;
    v168 = (int8x16_t)vdupq_n_s32(v22);
    v22 = v6 & 0xFFFFFFF8;
    v169 = (int32x4_t)vorrq_s8(v168, (int8x16_t)xmmword_19FFB4FA0);
    v170 = (int32x4_t)vorrq_s8(v168, (int8x16_t)xmmword_19FFB2E90);
    v171 = v167 - v22;
    v172 = 4 * v167;
    v291 = (float64x2_t)vdupq_n_s64(0x4038FFFFFFFFFFFAuLL);
    v293 = (float64x2_t)vdupq_n_s64(0x3FF0A3D70A3D70A4uLL);
    v289 = (float64x2_t)vdupq_n_s64(0xC038FFFFFFFFFFFALL);
    v282 = (float64x2_t)vdupq_n_s64(0x4048FFFFFFFFFFFAuLL);
    v283 = (float64x2_t)vdupq_n_s64(0x3FF051EB851EB852uLL);
    v278 = (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL);
    v280 = (float64x2_t)vdupq_n_s64(0xC048FFFFFFFFFFFALL);
    v273 = (float64x2_t)vdupq_n_s64(0x4058FFFFFFFFFFFAuLL);
    v275 = (float64x2_t)vdupq_n_s64(0x3FED1EB851EB851FuLL);
    v173 = (float64x2_t)vdupq_n_s64(0xC0567FFFFFFFFFFBLL);
    v269 = (float32x4_t)vdupq_n_s32(0x3F451EB8u);
    v271 = (float32x4_t)vdupq_n_s32(0x3F19999Au);
    v267 = (float32x4_t)vdupq_n_s32(0x3F666666u);
    v174 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v175 = -1;
    v5.i32[3] = HIDWORD(v264.f64[1]);
    v176 = _Q13;
    v287 = v23;
    do
    {
      v177 = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)v169), v23);
      v178 = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)v170), v23);
      v179 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v177.f32), v285);
      v180 = vmulq_f64(vcvt_hight_f64_f32(v177), v285);
      v181 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v178.f32), v285);
      v182 = vmulq_f64(vcvt_hight_f64_f32(v178), v285);
      v183 = vmaxnmq_f64(v182, _Q3);
      v184 = vmaxnmq_f64(v181, _Q3);
      v185 = vmaxnmq_f64(v180, _Q3);
      v186 = vmaxnmq_f64(v179, _Q3);
      v187 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v183, v293), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v289, v291, v183));
      v188 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v184, v293), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v289, v291, v184));
      v189 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v186, v293), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v289, v291, v186));
      v190 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v185, v293), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v289, v291, v185));
      v191 = vmulq_f64(v190, v190);
      v192 = vmlaq_f64(v176, v264, v190);
      v193 = vmlaq_f64(_Q3, vmlaq_f64(v176, v264, v187), vmulq_f64(v187, v187));
      v194 = vmlaq_f64(_Q3, vmlaq_f64(v176, v264, v188), vmulq_f64(v188, v188));
      v195 = vmlaq_f64(_Q3, v192, v191);
      v196 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v183, v283), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v280, v282, v183));
      v197 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v184, v283), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v280, v282, v184));
      v198 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v185, v283), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v280, v282, v185));
      v199 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v186, v283), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v280, v282, v186));
      v200 = vmlaq_f64(_Q3, vmlaq_f64(v176, v264, v189), vmulq_f64(v189, v189));
      v201 = vmulq_f64(v199, v199);
      v202 = vmlaq_f64(_Q3, vmlaq_f64(v176, v264, v196), vmulq_f64(v196, v196));
      v203 = vmaxnmq_f64(v182, v278);
      v204 = vmaxnmq_f64(v181, v278);
      v205 = vmaxnmq_f64(v180, v278);
      v206 = vmaxnmq_f64(v179, v278);
      v207 = (int8x16_t)vcgtq_f64(v206, v275);
      v208 = (int8x16_t)vmlaq_f64(v173, v273, v206);
      v209 = vmlaq_f64(v176, v264, v199);
      v210 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v203, v275), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v173, v273, v203));
      v211 = vmulq_f64(v198, v198);
      v212 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v204, v275), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v173, v273, v204));
      v213 = vmlaq_f64(v176, v264, v198);
      v214 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v205, v275), (int8x16_t)_Q3, (int8x16_t)vmlaq_f64(v173, v273, v205));
      v215 = (float64x2_t)vbslq_s8(v207, (int8x16_t)_Q3, v208);
      v216 = vmulq_f64(v215, v215);
      v217 = vmlaq_f64(_Q3, v213, v211);
      v218 = vmlaq_f64(v176, v264, v215);
      v219 = vmlaq_f64(_Q3, v209, v201);
      v220 = vmlaq_f64(_Q3, vmlaq_f64(v176, v264, v214), vmulq_f64(v214, v214));
      v221 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0);
      v222 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v200), v195);
      v223 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(a2 + 4), 0);
      v224 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(a2 + 8), 0);
      v225 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v194), v193);
      v226 = vmlaq_f64(_Q3, v218, v216);
      v227 = vsubq_f32(v271, v221);
      v228 = vmlaq_f32(v221, v225, v227);
      v229 = vmlaq_f32(v221, v222, v227);
      v230 = vsubq_f32(v269, v223);
      v231 = vmlaq_f32(v223, v225, v230);
      v232 = vsubq_f32(v267, v224);
      v233 = vmlaq_f32(v223, v222, v230);
      v234 = vmlaq_f32(v224, v225, v232);
      v235 = vmlaq_f32(v224, v222, v232);
      v236 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(_Q3, vmlaq_f64(v176, v264, v197), vmulq_f64(v197, v197))), v202);
      v237 = vmlaq_f32(v228, v236, vsubq_f32(v294, v228));
      v238 = vmlaq_f32(v231, v236, vsubq_f32(v294, v231));
      v239 = vmlaq_f32(v234, v236, vsubq_f32(v294, v234));
      v240 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v219), v217);
      v241 = vmlaq_f32(v229, v240, vsubq_f32(v294, v229));
      v242 = vmlaq_f32(v233, v240, vsubq_f32(v294, v233));
      v243 = vmlaq_f32(v235, v240, vsubq_f32(v294, v235));
      v244 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(_Q3, vmlaq_f64(v176, v264, v212), vmulq_f64(v212, v212))), vmlaq_f64(_Q3, vmlaq_f64(v176, v264, v210), vmulq_f64(v210, v210)));
      v245 = vmlaq_f32(v237, v244, vsubq_f32(v221, v237));
      v246 = vmlaq_f32(v238, v244, vsubq_f32(v223, v238));
      v247 = vmlaq_f32(v239, v244, vsubq_f32(v224, v239));
      v248 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v226), v220);
      v296.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v245, v174));
      v296.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v241, v248, vsubq_f32(v221, v241)), v174));
      v249 = vqtbl2q_s8(v296, (int8x16_t)xmmword_19FFB5D40).u64[0];
      v296.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v246, v174));
      v296.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v242, v248, vsubq_f32(v223, v242)), v174));
      v250 = vqtbl2q_s8(v296, (int8x16_t)xmmword_19FFB5D40).u64[0];
      v23 = v287;
      v295.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v247, v174));
      v295.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v243, v248, vsubq_f32(v224, v243)), v174));
      v251 = vqtbl2q_s8(v295, (int8x16_t)xmmword_19FFB5D40).u64[0];
      v252 = (char *)(result + (v172 & 0xFFFFFFE0));
      vst4_s8(v252, *(int8x8x4_t *)(&v175 - 3));
      v248.i64[0] = 0x800000008;
      v248.i64[1] = 0x800000008;
      v170 = vaddq_s32(v170, (int32x4_t)v248);
      v169 = vaddq_s32(v169, (int32x4_t)v248);
      v172 += 32;
      v171 += 8;
    }
    while (v171);
    v7 = (float)(v6 - 1);
    if (v22 == v6)
      return result;
  }
  else
  {
    v22 = 0;
  }
LABEL_22:
  v24 = 4 * v22;
  v25 = 1.0 / v7;
  v26 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  do
  {
    v27 = (float)((float)v22 * v25) * 1.5;
    v28 = fmax(v27, 1.0);
    v29 = v28 * 25.0 + -25.0;
    if (v28 > 1.04)
      v29 = 1.0;
    v30 = v29 * v29;
    v31 = v29 * 2.0 + -3.0;
    if (v28 <= 1.02)
      v32 = v28 * 50.0 + -50.0;
    else
      v32 = 1.0;
    v33 = v32 * v32 * (v32 * 2.0 + -3.0) + 1.0;
    v34 = fmax(v27, 0.9);
    v35 = v30 * v31 + 1.0;
    if (v34 <= 0.91)
      v36 = v34 * 100.0 + -90.0;
    else
      v36 = 1.0;
    v37 = v33;
    v5.i64[0] = *(_QWORD *)a2;
    v5.i32[2] = *(_DWORD *)(a2 + 8);
    v38 = v36 * v36 * (v36 * 2.0 + -3.0) + 1.0;
    v39 = vmlaq_n_f32(v5, vsubq_f32((float32x4_t)xmmword_19FFB5D50, v5), v35);
    v40 = vmlaq_n_f32(v39, vsubq_f32(v294, v39), v37);
    v41 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmlaq_n_f32(v40, vsubq_f32(v5, v40), v38), v26));
    *(int16x4_t *)v41.i8 = vmovn_s32((int32x4_t)v41);
    v42 = result + v24;
    *(_BYTE *)(v42 + 2) = v41.i8[4];
    *(_WORD *)v42 = vmovn_s16(v41).u16[0];
    *(_BYTE *)(result + v24 + 3) = -1;
    ++v22;
    v24 += 4;
  }
  while (v6 != v22);
  return result;
}

void std::__function::__func<md::realistic::SkyRenderLayer::corona(ggl::Loader *)::$_0,std::allocator<md::realistic::SkyRenderLayer::corona(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::SkyRenderLayer::corona(ggl::Loader *)::$_0,std::allocator<md::realistic::SkyRenderLayer::corona(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D5458;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::realistic::SkyRenderLayer::corona(ggl::Loader *)::$_0,std::allocator<md::realistic::SkyRenderLayer::corona(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5458;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::realistic::SkyRenderLayer::corona(ggl::Loader *)::$_0,std::allocator<md::realistic::SkyRenderLayer::corona(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  md::realistic::SkyRenderLayer *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_count v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t shared_owners;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t *v15;
  float64x2_t v21;
  __double2 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unsigned __int8 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int16x8_t v33;
  uint64x2_t v34;
  int64x2_t v35;
  int16x8_t v36;
  int16x8_t v37;
  __int128 v38;
  int16x8_t v39;
  int8x16_t v40;
  __int16 *v41;
  int16x8_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 v65;
  uint64_t p_shared_weak_owners;
  unsigned __int8 v67;
  uint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int64x2_t *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned __int8 v101;
  int v102;
  uint64_t v103;
  geo::read_write_lock *v104;
  const char *v105;
  malloc_zone_t *zone;
  int v107;
  uint64_t v108;
  geo::read_write_lock *v109;
  const char *v110;
  malloc_zone_t *v111;
  uint64_t v112;
  md::realistic::SkyRenderLayer *v113;
  std::__shared_weak_count *v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  float64x2_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  unint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count *v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v2 = *(md::realistic::SkyRenderLayer **)(a1 + 8);
  v3 = *a2;
  v4 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFA38;
  v4[1].__shared_owners_ = 16;
  LODWORD(v4[1].__shared_weak_owners_) = 1;
  v4[2].__vftable = 0;
  v4[2].__shared_owners_ = 0;
  v4[2].__shared_weak_owners_ = 0;
  v4[3].__vftable = (std::__shared_weak_count_vtbl *)3216;
  v6 = (std::__shared_count)0;
  *(_OWORD *)&v4[3].__shared_owners_ = 0u;
  v4[4].std::__shared_count = 0u;
  v4[4].__shared_weak_owners_ = 0;
  if ((v7 & 1) == 0)
  {
    v6 = (std::__shared_count)0;
    if (v97)
    {
      v98 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v98, "GeoGL", 0xA3D02C1100000005);
      v6 = (std::__shared_count)0;
    }
  }
  v8 = 0;
  v4[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v4[5].__shared_owners_ = 0;
  *((std::__shared_count *)v4 + 11) = v6;
  v4[8].std::__shared_count = v6;
  v4[8].__shared_weak_owners_ = 0;
  v4[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  v4[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  *((std::__shared_count *)v4 + 10) = v6;
  LODWORD(v4[5].__shared_weak_owners_) = 0;
  v4[9].__shared_weak_owners_ = (uint64_t)"/render/earthcorona/vertexdata";
  v4[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::EarthCorona::defaultVboReflection;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7660;
  v4[9].__shared_owners_ = (uint64_t)&unk_1E42B7680;
  shared_owners = v4[1].__shared_owners_;
  v10 = (unint64_t)v4[3].__vftable - v4[2].__shared_weak_owners_;
  v11 = v10 / shared_owners * shared_owners;
  *(_QWORD *)&v12 = v3;
  *((_QWORD *)&v12 + 1) = v4 + 1;
  if (v10 != v10 % shared_owners)
  {
    if (!v3 || BYTE1(v4[1].__shared_weak_owners_) == 2)
    {
      v8 = (uint64_t)v4[4].__vftable;
    }
    else
    {
      v117 = v12;
      v13 = (*(uint64_t (**)(uint64_t, std::__shared_weak_count *, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, v4 + 1, 0, v11, 1, 1);
      v12 = v117;
      v8 = v13;
    }
  }
  v14 = 0;
  v122 = v12;
  v123 = v11;
  v124 = v8;
  v15 = (float32x2_t *)(v8 + 8);
  __asm { FMOV            V0.2D, #1.5 }
  v118 = _Q0;
  do
  {
    v22 = __sincos_stret((double)v14 * 0.0314159265);
    v21.f64[0] = v22.__cosval;
    v21.f64[1] = v22.__sinval;
    v15[-1] = vcvt_f32_f64(vmulq_f64(v21, v118));
    v15->i32[0] = 0;
    v15 += 2;
    ++v14;
  }
  while (v14 != 200);
  *(_DWORD *)(v8 + 3208) = 0;
  *(_QWORD *)(v8 + 3200) = 0;
  v23 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v23->__shared_owners_ = 0;
  v24 = (unint64_t *)&v23->__shared_owners_;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v23[1].__shared_owners_ = 2;
  LODWORD(v23[1].__shared_weak_owners_) = 257;
  v23[2].__vftable = 0;
  v23[2].__shared_owners_ = 0;
  v23[2].__shared_weak_owners_ = 0;
  v23[3].__vftable = (std::__shared_weak_count_vtbl *)1200;
  *(_OWORD *)&v23[3].__shared_owners_ = 0u;
  v23[4].std::__shared_count = 0u;
  v23[4].__shared_weak_owners_ = 0;
  *(_QWORD *)&v26 = v3;
  if ((v25 & 1) == 0)
  {
    *(_QWORD *)&v26 = v3;
    if (v99)
    {
      v100 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v100, "GeoGL", 0xA3D02C1100000005);
      *(_QWORD *)&v26 = v3;
    }
  }
  v23[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v23[5].__shared_owners_ = 0;
  *(_OWORD *)&v23[7].__shared_owners_ = 0u;
  v23[8].std::__shared_count = 0u;
  v23[8].__shared_weak_owners_ = 0;
  v23[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  v23[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  *(_OWORD *)&v23[6].__shared_weak_owners_ = 0u;
  LODWORD(v23[5].__shared_weak_owners_) = 0;
  LODWORD(v23[10].__vftable) = 0;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v23[1].__shared_owners_ = 2;
  v23[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v23[9].__shared_weak_owners_ = (uint64_t)"/render/earthcorona/indexdata";
  *((_QWORD *)&v26 + 1) = v23 + 1;
  if (!v3 || BYTE1(v23[1].__shared_weak_owners_) == 2)
  {
    v27 = (uint64_t)v23[4].__vftable;
  }
  else
  {
    v115 = v26;
    v27 = (*(uint64_t (**)(uint64_t, std::__shared_weak_count *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, v23 + 1, 0, 1200, 1, 1);
    v26 = v115;
  }
  v28 = 0;
  v29 = (int64x2_t)xmmword_19FFB2FE0;
  v30 = (int64x2_t)xmmword_19FFB2FF0;
  v31 = (int64x2_t)xmmword_19FFB3000;
  v32 = (int64x2_t)xmmword_19FFB2E40;
  v33 = (int16x8_t)xmmword_19FFB3C40;
  v34 = (uint64x2_t)vdupq_n_s64(0xC7uLL);
  v35 = vdupq_n_s64(8uLL);
  v120 = v26;
  v121 = v27;
  v36.i64[0] = 0x1000100010001;
  v36.i64[1] = 0x1000100010001;
  v37.i64[0] = 0xC600C600C600C6;
  v37.i64[1] = 0xC600C600C600C6;
  *(_QWORD *)&v38 = 0xC800C800C800C8;
  *((_QWORD *)&v38 + 1) = 0xC800C800C800C8;
  v39.i64[0] = 0x8000800080008;
  v39.i64[1] = 0x8000800080008;
  do
  {
    v40 = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v34, (uint64x2_t)v32), (int32x4_t)vcgtq_u64(v34, (uint64x2_t)v31)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v34, (uint64x2_t)v30), (int32x4_t)vcgtq_u64(v34, (uint64x2_t)v29))), (int8x16_t)vaddq_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v31), (int16x8_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v29)), v36), (int8x16_t)vaddq_s16(v33, v37));
    v41 = (__int16 *)(v27 + v28);
    v42 = v33;
    vst3q_s16(v41, *(int16x8x3_t *)&v38);
    v30 = vaddq_s64(v30, v35);
    v31 = vaddq_s64(v31, v35);
    v32 = vaddq_s64(v32, v35);
    v29 = vaddq_s64(v29, v35);
    v33 = vaddq_s16(v33, v39);
    v28 += 48;
  }
  while (v28 != 1200);
  v43 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v43->__shared_owners_ = 0;
  v44 = (unint64_t *)&v43->__shared_owners_;
  v43->__shared_weak_owners_ = 0;
  v43->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0EC8;
  v45 = &v43[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v43[1], qword_1EE54A030, 2, 1, 6, 1);
  v43[9].__shared_owners_ = (uint64_t)ggl::EarthCorona::Base::reflection(void)::reflection;
  v43[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8BF0;
  v46 = *((_QWORD *)v2 + 15);
  v119 = (std::__shared_weak_count *)*((_QWORD *)v2 + 16);
  if (v119)
  {
    v47 = (unint64_t *)&v119->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v114 = v43;
  v49 = operator new();
  v113 = v2;
  v50 = md::realistic::SkyRenderLayer::coronaTexture(v2);
  if (v119)
  {
    v51 = (unint64_t *)&v119->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    ggl::PipelineSetup::PipelineSetup((_QWORD *)v49, v46, (uint64_t)v119);
    v53 = (unint64_t *)&v119->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((_QWORD *)v49, v46, 0);
  }
  *(_QWORD *)v49 = &off_1E42B5B80;
  v55 = *(_QWORD **)(v49 + 64);
  *v55 = v45;
  v55[1] = 0;
  v56 = *(_QWORD **)(v49 + 160);
  do
    v57 = __ldxr(v44);
  while (__stxr(v57 + 1, v44));
  v58 = (std::__shared_weak_count *)v56[1];
  *v56 = v45;
  v56[1] = v43;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  **(_QWORD **)(v49 + 96) = v50;
  v61 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v61->__shared_owners_ = 0;
  v62 = (unint64_t *)&v61->__shared_owners_;
  v61->__shared_weak_owners_ = 0;
  v61->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE880;
  v116 = v61 + 1;
  do
    v63 = __ldxr(p_shared_owners);
  while (__stxr(v63 + 1, p_shared_owners));
  do
    v64 = __ldxr(v24);
  while (__stxr(v64 + 1, v24));
  if ((v65 & 1) == 0
  {
    if ((v101 & 1) == 0
    {
      ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::EarthCorona::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::attributesReflection(void)::r;
    unk_1EE576160 = 1;
  }
  v61[3].__shared_weak_owners_ = 0;
  p_shared_weak_owners = (uint64_t)&v61[3].__shared_weak_owners_;
  v61[2].__shared_owners_ = 0;
  v61[2].__shared_weak_owners_ = 0;
  LODWORD(v61[3].__vftable) = 0;
  v61[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
  v61[1].__shared_owners_ = (uint64_t)"/render/earthcorona/mesh";
  v61[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
  v61[2].__vftable = 0;
  v61[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::EarthCorona::DefaultVbo>::typedReflection(void)::r;
  v61[4].__vftable = 0;
  v61[4].__shared_owners_ = 0;
  if ((v67 & 1) == 0)
  {
    p_shared_weak_owners = (uint64_t)&v61[3].__shared_weak_owners_;
    if (v102)
    {
      v103 = operator new();
      *(_QWORD *)(v103 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v103 + 24) = "GeoGL";
      *(_OWORD *)(v103 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v103 = &off_1E42B5668;
      *(_QWORD *)(v103 + 8) = "GeoGL";
      *(_OWORD *)(v103 + 72) = 0u;
      *(_OWORD *)(v103 + 88) = 0u;
      *(_OWORD *)(v103 + 104) = 0u;
      *(_OWORD *)(v103 + 120) = 0u;
      *(_OWORD *)(v103 + 136) = 0u;
      *(_OWORD *)(v103 + 152) = 0u;
      *(_OWORD *)(v103 + 168) = 0u;
      *(_OWORD *)(v103 + 184) = 0u;
      *(_OWORD *)(v103 + 200) = 0u;
      *(_OWORD *)(v103 + 216) = 0u;
      *(_OWORD *)(v103 + 232) = 0u;
      *(_QWORD *)(v103 + 248) = 0;
      *(_OWORD *)(v103 + 56) = 0u;
      v104 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v103 + 56), 0);
      if ((_DWORD)v104)
        geo::read_write_lock::logFailure(v104, (uint64_t)"initialization", v105);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v103 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v103 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v103;
      p_shared_weak_owners = (uint64_t)&v61[3].__shared_weak_owners_;
    }
  }
  v68 = ggl::Allocator::instance(void)::alloc;
  v61[6].__vftable = 0;
  v61[5].__vftable = 0;
  v61[5].__shared_owners_ = 0;
  v61[4].__shared_weak_owners_ = v68;
  if ((v68 & 1) == 0)
  {
    v112 = p_shared_weak_owners;
    p_shared_weak_owners = v112;
    if (v107)
    {
      v108 = operator new();
      *(_QWORD *)(v108 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v108 + 24) = "GeoGL";
      *(_OWORD *)(v108 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v108 = &off_1E42B5668;
      *(_QWORD *)(v108 + 8) = "GeoGL";
      *(_OWORD *)(v108 + 72) = 0u;
      *(_OWORD *)(v108 + 88) = 0u;
      *(_OWORD *)(v108 + 104) = 0u;
      *(_OWORD *)(v108 + 120) = 0u;
      *(_OWORD *)(v108 + 136) = 0u;
      *(_OWORD *)(v108 + 152) = 0u;
      *(_OWORD *)(v108 + 168) = 0u;
      *(_OWORD *)(v108 + 184) = 0u;
      *(_OWORD *)(v108 + 200) = 0u;
      *(_OWORD *)(v108 + 216) = 0u;
      *(_OWORD *)(v108 + 232) = 0u;
      *(_QWORD *)(v108 + 248) = 0;
      *(_OWORD *)(v108 + 56) = 0u;
      v109 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v108 + 56), 0);
      if ((_DWORD)v109)
        geo::read_write_lock::logFailure(v109, (uint64_t)"initialization", v110);
      v111 = malloc_create_zone(0, 0);
      *(_QWORD *)(v108 + 48) = v111;
      malloc_set_zone_name(v111, "GeoGL");
      *(_QWORD *)(v108 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v108;
      p_shared_weak_owners = v112;
    }
  }
  v61[6].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
  v61[6].__shared_weak_owners_ = 0;
  v61[5].__shared_weak_owners_ = (uint64_t)&v61[6];
  v61[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BD2F8;
  v61[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BD318;
  v125 = v4 + 1;
  v126 = v4;
  do
    v69 = __ldxr(p_shared_owners);
  while (__stxr(v69 + 1, p_shared_owners));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(p_shared_weak_owners, (uint64_t *)&v125, &v127, 1uLL);
  v70 = v126;
  if (v126)
  {
    v71 = (unint64_t *)&v126->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  do
    v73 = __ldxr(v24);
  while (__stxr(v73 + 1, v24));
  v74 = (std::__shared_weak_count *)v61[5].__shared_owners_;
  v61[5].__vftable = (std::__shared_weak_count_vtbl *)&v23[1];
  v61[5].__shared_owners_ = (uint64_t)v23;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v61[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5BD0;
  v61[1].__shared_weak_owners_ = (uint64_t)&unk_1E42B5BF0;
  do
    v77 = __ldaxr(v24);
  while (__stlxr(v77 - 1, v24));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  do
    v78 = __ldaxr(p_shared_owners);
  while (__stlxr(v78 - 1, p_shared_owners));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v79 = (int64x2_t *)operator new();
  v80 = *((_QWORD *)v113 + 12);
  v79->i64[0] = (uint64_t)&off_1E42B59B0;
  v79[1].i64[0] = (uint64_t)"";
  v79[1].i64[1] = v80;
  v79[2].i64[0] = v49;
  v79[2].i32[2] = 0;
  v79[3].i64[0] = 0;
  v79[3].i32[2] = 1065353216;
  v79[4].i64[0] = (uint64_t)v116;
  v79[4].i64[1] = 0;
  v79[5].i64[0] = 0;
  v79[5].i64[1] = 0;
  v79[6] = vdupq_n_s64(1uLL);
  v79[7].i64[0] = 0;
  v81 = (_QWORD *)operator new();
  do
    v82 = __ldxr(v62);
  while (__stxr(v82 + 1, v62));
  *v81 = v79;
  v81[1] = v49;
  v81[2] = v116;
  v81[3] = v61;
  do
    v83 = __ldxr(v62);
  while (__stxr(v83 + 1, v62));
  v84 = (uint64_t *)*((_QWORD *)v113 + 26);
  *((_QWORD *)v113 + 26) = v81;
  if (v84)
  {
    v85 = (std::__shared_weak_count *)v84[3];
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = v84[1];
    v84[1] = 0;
    if (v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
    v89 = *v84;
    *v84 = 0;
    if (v89)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
    MEMORY[0x1A1AF4E00](v84, 0x20C40DC1BFBCFLL);
  }
  do
    v90 = __ldaxr(v62);
  while (__stlxr(v90 - 1, v62));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
  }
  do
    v91 = __ldaxr(v62);
  while (__stlxr(v91 - 1, v62));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
  }
  if (v119)
  {
    v92 = (unint64_t *)&v119->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  do
    v94 = __ldaxr(v44);
  while (__stlxr(v94 - 1, v44));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
  }
  if (v121 && (_QWORD)v120 && *(_BYTE *)(*((_QWORD *)&v120 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v120 + 64))();
  do
    v95 = __ldaxr(v24);
  while (__stlxr(v95 - 1, v24));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v124 && v123 && (_QWORD)v122 && *(_BYTE *)(*((_QWORD *)&v122 + 1) + 17) != 2)
    (*(void (**)(void))(*(_QWORD *)v122 + 64))();
  do
    v96 = __ldaxr(p_shared_owners);
  while (__stlxr(v96 - 1, p_shared_owners));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_19FC47AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, ...)
{
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  va_list va;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v27 = va_arg(va1, _QWORD);
  v29 = va_arg(va1, _QWORD);
  v30 = va_arg(va1, _QWORD);
  v31 = va_arg(va1, _QWORD);
  v32 = va_arg(va1, _QWORD);
  v33 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  do
    v24 = __ldaxr(v14);
  while (__stlxr(v24 - 1, v14));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  do
    v25 = __ldaxr(v12);
  while (__stlxr(v25 - 1, v12));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  do
    v26 = __ldaxr(v11);
  while (__stlxr(v26 - 1, v11));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t md::realistic::SkyRenderLayer::coronaTexture(md::realistic::SkyRenderLayer *this)
{
  uint64_t result;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;

  result = *((_QWORD *)this + 27);
  if (!result)
  {
    v3 = (std::__shared_weak_count *)operator new(0x58uLL);
    v3->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
    v3[1].__shared_weak_owners_ = 0;
    v3[2].__vftable = 0;
    v3[1].__shared_owners_ = 0;
    LODWORD(v3[2].__shared_owners_) = 0;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    *(_OWORD *)((char *)&v3[2].__shared_owners_ + 4) = v5;
    *(std::__shared_weak_count_vtbl **)((char *)&v3[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
    HIDWORD(v3[3].__shared_owners_) = 0;
    v6 = operator new();
    *(_DWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_OWORD *)(v6 + 56) = xmmword_19FFB5D70;
    *(_DWORD *)(v6 + 72) = 1;
    *(_QWORD *)(v6 + 76) = 0;
    *(_QWORD *)(v6 + 92) = 0;
    *(_QWORD *)(v6 + 100) = 0x100000000;
    *(_QWORD *)(v6 + 84) = 0;
    *(_QWORD *)v6 = &off_1E42BE438;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v6 + 48) = "";
    *(_QWORD *)(v6 + 112) = 0;
    *(_QWORD *)(v6 + 120) = 0;
    *(_WORD *)(v6 + 128) = 0;
    *(_BYTE *)(v6 + 130) = 1;
    *(_QWORD *)(v6 + 136) = v3 + 1;
    *(_QWORD *)(v6 + 144) = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)(v6 + 80) = 0x100000400;
    v8 = *((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = v6;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = operator new();
    v10 = ggl::TextureData2D::TextureData2D(v9, 1024, 1, 1u, 12, 0);
    v11 = *((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    return *((_QWORD *)this + 27);
  }
  return result;
}

void sub_19FC47DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::EarthCorona::BaseMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::EarthCorona::BaseMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::EarthCorona::BaseMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::EarthCorona::Base>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::EarthCorona::Base>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::EarthCorona::Base>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::EarthCorona::Base>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::EarthCorona::Base>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::EarthCorona::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFA38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::EarthCorona::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFA38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::EarthCorona::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::realistic::SkyRenderLayer::load(md::realistic::SkyRenderLayer *this)
{
  char *v2;
  NSObject *v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  unsigned int *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void (**v18)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint8_t buf[4];
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 176;
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, char *, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 31) + 104))(&v18, *((_QWORD *)this + 31), (char *)this + 176, 0, 1, 4);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v18) == 4)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v3 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = (char *)this + 176;
      if (*((char *)this + 199) < 0)
        v4 = *(char **)v2;
      *(_DWORD *)buf = 136315138;
      v22 = v4;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_DEBUG, "Loaded sky model: %s", buf, 0xCu);
    }

    v5 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 31) + 112))(*((_QWORD *)this + 31), (char *)this + 176, 1);
    v6 = (uint64_t *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = v5;
    if (v6)
    {
      v7 = (std::__shared_weak_count *)v6[3];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = v6[1];
      v6[1] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v11 = *v6;
      *v6 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      MEMORY[0x1A1AF4E00](v6, 0x20C40DC1BFBCFLL);
      v5 = *((_QWORD *)this + 25);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 24) = *((_QWORD *)this + 11);
    if (*((_QWORD *)this + 25))
      *((_BYTE *)this + 64) = 1;
    else
      md::realistic::SkyRenderLayer::load(this);
  }
  else if (!karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v18))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v12 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)this + 199) < 0)
        v2 = *(char **)v2;
      *(_DWORD *)buf = 136315138;
      v22 = v2;
      _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_DEBUG, "Failed to load sky model: %s", buf, 0xCu);
    }

  }
  v18 = &off_1E42C2D08;
  if (v19)
  {
    v13 = (unsigned int *)(v19 + 128);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_19FC482E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  karo::AsyncRequestManager::RequestHandle::~RequestHandle((karo::AsyncRequestManager::RequestHandle *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D54E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D54E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SkyLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D54A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D54A0;
  a2[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<ggl::Stars::StarsPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Stars::StarsPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Stars::StarsPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::EarthCorona::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::EarthCorona::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::EarthCorona::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::ARWalkingGeoTrackingMapEngineMode::~ARWalkingGeoTrackingMapEngineMode(md::ARWalkingGeoTrackingMapEngineMode *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = off_1E429C660;
  *((_QWORD *)this + 73) = &off_1E42B54D0;

  v2 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  md::MapEngineMode::~MapEngineMode(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = off_1E429C660;
  *((_QWORD *)this + 73) = &off_1E42B54D0;

  v2 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 70);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 68);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

double md::ARWalkingGeoTrackingMapEngineMode::buildLocationProvider@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  result = 0.0;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_QWORD *)v4 = &off_1E42A48C0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 0;
  *a1 = v4;
  return result;
}

void md::DaVinciTransitMapEngineMode::~DaVinciTransitMapEngineMode(md::DaVinciTransitMapEngineMode *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciTransitMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  md::DaVinciBaseMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  v6 = *(_QWORD **)(a2 + 896);
  v7 = v6[7];
  v8 = v6[8];
  if (v7 != v8)
  {
    while (*(_WORD *)v7 != 15)
    {
      v7 += 16;
      if (v7 == v8)
        goto LABEL_9;
    }
  }
  if (v7 != v8)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 21))
        *(_BYTE *)(v9 + 21) = 1;
    }
  }
LABEL_9:
  v11 = v6[4];
  v10 = v6[5];
  if (v11 != v10)
  {
    while (*(_WORD *)v11 != 15)
    {
      v11 += 16;
      if (v11 == v10)
        goto LABEL_18;
    }
  }
  if (v11 != v10)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      if (!*(_BYTE *)(v12 + 600))
      {
        *(_BYTE *)(v12 + 600) = 1;
        v13 = *(_QWORD *)(v12 + 16);
        for (i = *(_QWORD *)(v13 + 8); i != v13; i = *(_QWORD *)(i + 8))
          *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
      }
    }
  }
LABEL_18:
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 856) + 40);
  v17 = *(_QWORD *)(v15 + 152);
  v16 = *(_QWORD *)(v15 + 160);
  *(_BYTE *)(v17 + 417) = 1;
  *(_BYTE *)(v16 + 417) = 1;
}

void md::DaVinciTransitMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(int8x8_t **)(a2 + 1120);
  v4 = v3[2];
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = 0x91E65CD7F1A7A7FALL;
      if (*(_QWORD *)&v4 <= 0x91E65CD7F1A7A7FALL)
        v6 = 0x91E65CD7F1A7A7FALL % *(_QWORD *)&v4;
    }
    else
    {
      v6 = (*(_QWORD *)&v4 - 1) & 0x91E65CD7F1A7A7FALL;
    }
    v7 = *(_QWORD **)(*(_QWORD *)&v3[1] + 8 * v6);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == 0x91E65CD7F1A7A7FALL)
            {
              if (v8[2] == 0x91E65CD7F1A7A7FALL)
                goto LABEL_22;
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_24;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              goto LABEL_24;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == 0x91E65CD7F1A7A7FALL)
          {
            if (v8[2] == 0x91E65CD7F1A7A7FALL)
            {
LABEL_22:
              v12 = v8[5];
              if (v12)
                *(_BYTE *)(v12 + 120) = 0;
              break;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v4)
              v10 %= *(_QWORD *)&v4;
            if (v10 != v6)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_24:
  v13 = *(_QWORD **)(a2 + 896);
  v14 = v13[7];
  v15 = v13[8];
  if (v14 != v15)
  {
    while (*(_WORD *)v14 != 15)
    {
      v14 += 16;
      if (v14 == v15)
        goto LABEL_32;
    }
  }
  if (v14 != v15)
  {
    v16 = *(_QWORD *)(v14 + 8);
    if (v16)
    {
      if (*(_BYTE *)(v16 + 21))
        *(_BYTE *)(v16 + 21) = 0;
    }
  }
LABEL_32:
  v18 = v13[4];
  v17 = v13[5];
  if (v18 != v17)
  {
    while (*(_WORD *)v18 != 15)
    {
      v18 += 16;
      if (v18 == v17)
        goto LABEL_41;
    }
  }
  if (v18 != v17)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      if (*(_BYTE *)(v19 + 600))
      {
        *(_BYTE *)(v19 + 600) = 0;
        v20 = *(_QWORD *)(v19 + 16);
        for (i = *(_QWORD *)(v20 + 8); i != v20; i = *(_QWORD *)(i + 8))
          *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
      }
    }
  }
LABEL_41:
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 856) + 40);
  v24 = *(_QWORD *)(v22 + 152);
  v23 = *(_QWORD *)(v22 + 160);
  *(_BYTE *)(v24 + 417) = 0;
  *(_BYTE *)(v23 + 417) = 0;
}

uint64_t md::DaVinciTransitMapEngineMode::DaVinciTransitMapEngineMode(uint64_t a1, int a2, __int128 *a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  _WORD *v20;
  uint64_t v21;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  char v26;
  unint64_t v27[3];
  _OWORD *v28;
  uint64_t v29;
  _OWORD v30[3];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  md::DaVinciMapEngineMode::DaVinciMapEngineMode((_QWORD *)a1, 13, a2, a3, a4);
  if (a4)
  {
    v9 = (unint64_t *)&a4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *(_QWORD *)a1 = &off_1E42A3C88;
  LOBYTE(v28) = 19;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x13u, &v28)+ 17) = 0;
  LOBYTE(v28) = 48;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x30u, &v28)+ 17) = 0;
  LOBYTE(v28) = 20;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x14u, &v28)+ 17) = 1;
  LOWORD(v28) = 25;
  WORD1(v28) = a2;
  WORD2(v28) = 16;
  HIWORD(v28) = a2;
  LOWORD(v29) = 59;
  WORD1(v29) = a2;
  WORD2(v29) = 29;
  HIWORD(v29) = a2;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x19u, &v28)+ 18) = a2 << 16;
  v11 = HIWORD(v28);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v28), (_WORD *)&v28 + 2)+ 18) = v11 << 16;
  v12 = WORD1(v29);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v29, &v29)+ 18) = v12 << 16;
  v13 = HIWORD(v29);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v29), (_WORD *)&v29 + 2)+ 18) = v13 << 16;
  LOWORD(v28) = 17;
  WORD1(v28) = a2;
  v14 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x11u, &v28);
  if (a2)
    v15 = 65537;
  else
    v15 = 1;
  *(_DWORD *)((char *)v14 + 18) = v15;
  v27[0] = 0x1BCA10CB9934FB1BLL;
  v27[1] = (unint64_t)"md::TransitLogic]";
  v27[2] = 16;
  *(_QWORD *)&v24 = 0xFD5D5EC7C4E1E43ELL;
  *((_QWORD *)&v24 + 1) = "md::TransitContext]";
  v25 = 18;
  v26 = 1;
  v28 = v30;
  v29 = 2;
  v30[0] = xmmword_1E42F7A98;
  v30[1] = unk_1E42F7AA8;
  v30[2] = xmmword_1E42F7AB8;
  v23[0] = &v24;
  v23[1] = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, v27, &v24, 0, (uint64_t)&v28, (uint64_t)v23);
  if (a2)
  {
    v17 = (_QWORD *)(a1 + 128);
    v16 = *(_QWORD *)(a1 + 128);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          v18 = (_QWORD *)v16;
          v19 = *(unsigned __int16 *)(v16 + 26);
          if (v19 < 9)
            break;
          v16 = *v18;
          v17 = v18;
          if (!*v18)
            goto LABEL_20;
        }
        if (v19 == 8)
          break;
        v16 = v18[1];
        if (!v16)
        {
          v17 = v18 + 1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v18 = (_QWORD *)(a1 + 128);
LABEL_20:
      v20 = operator new(0x20uLL);
      v20[13] = 8;
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = v18;
      *v17 = v20;
      v21 = **(_QWORD **)(a1 + 120);
      if (v21)
      {
        *(_QWORD *)(a1 + 120) = v21;
        v20 = (_WORD *)*v17;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), (uint64_t *)v20);
      ++*(_QWORD *)(a1 + 136);
    }
  }
  return a1;
}

void sub_19FC490C8(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)v1 = &off_1E42A0578;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingExtrudedTextLabelPart::~ARWalkingExtrudedTextLabelPart(md::ARWalkingExtrudedTextLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::TextLabelPart::~TextLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ARWalkingExtrudedTextLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, this, 1184);
}

float *md::ARWalkingExtrudedTextLabelPart::updateWithStyle(uint64_t **this, md::LabelManager *a2)
{
  float *result;
  _BOOL8 v4;
  float *v5;
  uint64_t v6;
  float *v7;

  md::HorizontalTextLabelPart::updateWithStyle(this, a2);
  result = (float *)*this[4];
  v4 = *((unsigned __int8 *)this + 864) == 1;
  v5 = result + 70;
  if (*((_BYTE *)this + 864) == 1)
    v6 = 6;
  else
    v6 = 0;
  v7 = *(float **)&v5[2 * (*((_BYTE *)this + 864) == 1)];
  if (v7)
  {
    if (vabds_f32(v7[2], result[26]) >= 0.01)
    {
      result = (float *)md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((uint64_t)result, (uint64_t)v7, v6);
      v7 = *(float **)&v5[2 * v4];
    }
  }
  else
  {
    result = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>((uint64_t)result, v6);
    v7 = result;
    *(_QWORD *)&v5[2 * v4] = result;
  }
  *((_DWORD *)this + 293) = *(_DWORD *)(*(_QWORD *)v7 + 28);
  return result;
}

void md::ARWalkingExtrudedTextLabelPart::updateForDisplay(md::ARWalkingExtrudedTextLabelPart *this)
{
  md::HorizontalTextLabelPart::updateForDisplay(this);
  *((_DWORD *)this + 294) = *((_DWORD *)this + 293);
}

uint64_t md::ARWalkingExtrudedTextLabelPart::layoutForDisplay(float32x2_t *a1, double *a2, md::LabelAnimator *a3, float32x2_t *a4, float32x2_t *a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v11;
  float v12;
  float v13;
  float32x2_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  float v35;

  v11 = md::HorizontalTextLabelPart::layoutForDisplay(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((_DWORD)v11 == 37)
  {
    v12 = a1[96].f32[0];
    v13 = a1[147].f32[0];
    if (v13 <= 3.0)
    {
LABEL_10:
      a1[113].f32[1] = v12;
      a1[108].i8[2] = v12 >= 0.0001;
      return v11;
    }
    v14 = a1[2];
    if (*(_BYTE *)(*(_QWORD *)&v14 + 164))
    {
      v15 = *(float *)(*(_QWORD *)&v14 + 152);
      v16 = *(float *)(*(_QWORD *)&v14 + 156);
      v17 = *(float *)(*(_QWORD *)&v14 + 160);
      if (!a1[146].i8[0])
      {
LABEL_6:
        v30 = a2[72] - *(double *)(*(_QWORD *)&v14 + 408);
        v31 = a2[73] - *(double *)(*(_QWORD *)&v14 + 416);
        v32 = a2[74] - *(double *)(*(_QWORD *)&v14 + 424);
        v33 = acos(fabs((v31 * v16 + v32 * v17 + v30 * v15) / sqrt(v30 * v30 + v31 * v31 + v32 * v32)))
            * 57.2957795
            / v13;
        v34 = fmaxf(v33, 0.0);
        if (v34 <= 1.0)
          v35 = 1.0 - v34;
        else
          v35 = 0.0;
        v12 = v12 - (float)(v35 * v12);
        goto LABEL_10;
      }
    }
    else
    {
      v15 = 1.0;
      v16 = 0.0;
      v17 = 0.0;
      if (!a1[146].i8[0])
        goto LABEL_6;
    }
    v18 = *(double *)(*(_QWORD *)&v14 + 864);
    v19 = *(double *)(*(_QWORD *)&v14 + 872);
    v20 = *(double *)(*(_QWORD *)&v14 + 880);
    v21 = 0.382683432 / sqrt(v18 * v18 + v19 * v19 + v20 * v20);
    v22 = v21 * v18;
    v23 = v21 * v19;
    v24 = v21 * v20;
    v25 = -(v22 * v17 - v24 * v15);
    v26 = -(v23 * v15 - v22 * v16);
    v27 = -(v24 * v16 - v23 * v17) - (v24 * v16 - v23 * v17);
    v28 = v25 - (v22 * v17 - v24 * v15);
    v29 = v26 - (v23 * v15 - v22 * v16);
    v15 = v15 + -(v24 * v16 - v23 * v17) * 1.84775907 + v29 * v23 - v28 * v24;
    v16 = v16 + v25 * 1.84775907 + v27 * v24 - v29 * v22;
    v17 = v17 + v26 * 1.84775907 + v28 * v22 - v27 * v23;
    goto LABEL_6;
  }
  return v11;
}

uint64_t md::HorizontalTextLabelPart::partType(md::HorizontalTextLabelPart *this)
{
  return 4;
}

float md::HorizontalTextLabelPart::topLayoutMargin(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 960;
  if (a2)
    v2 = a1 + 1032;
  return *(float *)(v2 + 52);
}

float md::HorizontalTextLabelPart::bottomLayoutMargin(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 960;
  if (a2)
    v2 = a1 + 1032;
  return *(float *)(v2 + 56);
}

float md::HorizontalTextLabelPart::topLeftAlignInset(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 960;
  if (a2)
    v2 = a1 + 1032;
  return *(float *)(v2 + 24);
}

float md::HorizontalTextLabelPart::topRightAlignInset(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 960;
  if (a2)
    v2 = a1 + 1032;
  return *(float *)(v2 + 28);
}

void md::ARWalkingExtrudedTextLabelPart::populateDebugNode(md::ARWalkingExtrudedTextLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *v4;
  char *ChildNode;
  char *v6;
  float v7;
  char *v8;
  float v9;
  _BYTE v10[16];
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[16];
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  __int128 v23;

  v4 = (char *)operator new(0x20uLL);
  v22 = v4;
  v23 = xmmword_19FFB3890;
  strcpy(v4, "ARWalkingExtrudedTextLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)&v22);
  operator delete(v4);
  v6 = (char *)operator new(0x20uLL);
  v22 = v6;
  v23 = xmmword_19FFB34A0;
  strcpy(v6, "StagingExtrusionCollapseAngle");
  v7 = *((float *)this + 293);
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v21 = 2;
  v17 = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v22, (uint64_t)v16);
  operator delete(v6);
  v8 = (char *)operator new(0x20uLL);
  v22 = v8;
  v23 = xmmword_19FFB34A0;
  strcpy(v8, "DisplayExtrusionCollapseAngle");
  v9 = *((float *)this + 294);
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v15 = 2;
  v11 = v9;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v22, (uint64_t)v10);
  operator delete(v8);
  md::HorizontalTextLabelPart::populateDebugNode(this, (gdc::DebugTreeNode *)ChildNode);
}

void std::__function::__func<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1,std::allocator<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1,std::allocator<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427B538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1,std::allocator<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1,std::allocator<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (***v7)();
  uint64_t v8;
  char v10;
  uint64_t (**v11)();
  uint64_t v12;
  int v13;
  uint64_t (***v14)();
  _QWORD v15[2];
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v11 = &off_1E427E748;
  v12 = (v5 << 32) | 1;
  v13 = HIDWORD(v5);
  v14 = &v11;
  v15[0] = &off_1E427E748;
  v17 = v15;
  v15[1] = v12;
  v16 = HIDWORD(v5);
  v18 = 0;
  ecs2::Runtime::queueCommand(v6, (uint64_t)v15);
  if (v18 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v18])(&v10, v15);
  v18 = -1;
  v7 = v14;
  if (v14 == &v11)
  {
    v8 = 4;
    v7 = &v11;
    goto LABEL_7;
  }
  if (v14)
  {
    v8 = 5;
LABEL_7:
    (*v7)[v8]();
  }
  return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(_QWORD *)(a1 + 16), *a3, *a3);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E748;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E748;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)3>>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427B4F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B4F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (***v7)();
  uint64_t v8;
  char v10;
  uint64_t (**v11)();
  uint64_t v12;
  int v13;
  uint64_t (***v14)();
  _QWORD v15[2];
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v11 = &off_1E427E748;
  v12 = (v5 << 32) | 1;
  v13 = HIDWORD(v5);
  v14 = &v11;
  v15[0] = &off_1E427E748;
  v17 = v15;
  v15[1] = v12;
  v16 = HIDWORD(v5);
  v18 = 0;
  ecs2::Runtime::queueCommand(v6, (uint64_t)v15);
  if (v18 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v18])(&v10, v15);
  v18 = -1;
  v7 = v14;
  if (v14 == &v11)
  {
    v8 = 4;
    v7 = &v11;
    goto LABEL_7;
  }
  if (v14)
  {
    v8 = 5;
LABEL_7:
    (*v7)[v8]();
  }
  return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(_QWORD *)(a1 + 16), *a3, *a3);
}

void std::__function::__func<md::ita::PrepareCulledShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>)::$_0,std::allocator<md::ita::PrepareCulledShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareCulledShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>)::$_0,std::allocator<md::ita::PrepareCulledShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427BAD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::PrepareCulledShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>)::$_0,std::allocator<md::ita::PrepareCulledShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BAD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareCulledShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>)::$_0,std::allocator<md::ita::PrepareCulledShadowSlice::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, uint64_t *a6, __int128 *a7, float **a8, float **a9)
{
  uint64_t v12;
  float *v13;
  float *v14;
  uint64_t RenderableData;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (***v23)();
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t (**v28)();
  uint64_t v29;
  int v30;
  uint64_t (***v31)();
  _BYTE v32[24];
  _BYTE *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v12 = *a6;
  v13 = *a8;
  v14 = *a9;
  RenderableData = md::VKMRenderResourcesStore::getRenderableData(**(_QWORD **)(a1 + 8), *a5);
  v25 = 0uLL;
  v26 = 0;
  if (v12)
  {
    v25 = *(_OWORD *)(RenderableData + 256);
    v16 = *(_QWORD *)(RenderableData + 272);
  }
  else if (v13 && v14)
  {
    v17 = *v14 + (float)(*((float *)a7 + 2) * *v13);
    v18 = *v14 + (float)(*((float *)a7 + 5) * *v13);
    *(_QWORD *)v32 = *(_QWORD *)a7;
    *(float *)&v32[8] = v17;
    *(_QWORD *)&v32[12] = *(_QWORD *)((char *)a7 + 12);
    *(float *)&v32[20] = v18;
    v25 = *(_OWORD *)v32;
    v16 = *(_QWORD *)&v32[16];
  }
  else
  {
    v25 = *a7;
    v16 = *((_QWORD *)a7 + 2);
  }
  v26 = v16;
  result = geo::Intersect::encloses<float>((float *)RenderableData, (float *)&v25);
  if ((_DWORD)result)
  {
    v20 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v28 = &off_1E427E790;
    v29 = (v20 << 32) | 1;
    v30 = HIDWORD(v20);
    v31 = &v28;
    *(_QWORD *)v32 = &off_1E427E790;
    v33 = v32;
    *(_QWORD *)&v32[8] = v29;
    *(_DWORD *)&v32[16] = HIDWORD(v20);
    v34 = 0;
    ecs2::Runtime::queueCommand(v21, (uint64_t)v32);
    if (v34 != -1)
      ((void (*)(char *, _BYTE *))off_1E42FB340[v34])(&v27, v32);
    v34 = -1;
    v23 = v31;
    if (v31 == &v28)
    {
      v24 = 4;
      v23 = &v28;
    }
    else
    {
      if (!v31)
        return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(_QWORD *)(a1 + 24), *a4, *a4);
      v24 = 5;
    }
    ((void (*)(uint64_t (***)(), uint64_t))(*v23)[v24])(v23, v22);
    return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(_QWORD *)(a1 + 24), *a4, *a4);
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E790;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E790;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)4>>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1,std::allocator<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1>,void ()(md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1,std::allocator<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1>,void ()(md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1,std::allocator<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1>,void ()(md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1,std::allocator<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_1>,void ()(md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***v6)();
  uint64_t v7;
  char v9;
  uint64_t (**v10)();
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  _QWORD v14[2];
  int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v10 = &off_1E427E7D8;
  v11 = (v4 << 32) | 1;
  v12 = HIDWORD(v4);
  v13 = &v10;
  v14[0] = &off_1E427E7D8;
  v16 = v14;
  v14[1] = v11;
  v15 = HIDWORD(v4);
  v17 = 0;
  ecs2::Runtime::queueCommand(v5, (uint64_t)v14);
  if (v17 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v17])(&v9, v14);
  v17 = -1;
  v6 = v13;
  if (v13 == &v10)
  {
    v7 = 4;
    v6 = &v10;
    goto LABEL_7;
  }
  if (v13)
  {
    v7 = 5;
LABEL_7:
    (*v6)[v7]();
  }
  return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(_QWORD *)(a1 + 16), *a2, *a2);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)5> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)5> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E7D8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)5> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E7D8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(gdc::Entity,md::ls::SliceAssignmentT<(md::SliceType)5> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)5>>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C1E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C1E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0,std::allocator<md::ita::PrepareCulledDepthPrePassSlice::operator()(ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>,ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>)::$_0>,void ()(md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&)>::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (***v6)();
  uint64_t v7;
  char v9;
  uint64_t (**v10)();
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  _QWORD v14[2];
  int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v10 = &off_1E427E7D8;
  v11 = (v4 << 32) | 1;
  v12 = HIDWORD(v4);
  v13 = &v10;
  v14[0] = &off_1E427E7D8;
  v16 = v14;
  v14[1] = v11;
  v15 = HIDWORD(v4);
  v17 = 0;
  ecs2::Runtime::queueCommand(v5, (uint64_t)v14);
  if (v17 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v17])(&v9, v14);
  v17 = -1;
  v6 = v13;
  if (v13 == &v10)
  {
    v7 = 4;
    v6 = &v10;
    goto LABEL_7;
  }
  if (v13)
  {
    v7 = 5;
LABEL_7:
    (*v6)[v7]();
  }
  return std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(*(_QWORD *)(a1 + 16), *a2, *a2);
}

void md::AssetData::~AssetData(md::AssetData *this)
{
  md::AssetData::~AssetData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;

  *(_QWORD *)this = &off_1E42AF720;
  v2 = (uint64_t *)*((_QWORD *)this + 61);
  if (v2)
  {
    do
    {
      v7 = (uint64_t *)*v2;
      v8 = v2[3];
      if (v8)
      {
        v2[4] = v8;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v8, v2[5] - v8);
      }
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 62) + 40))(*((_QWORD *)this + 62), v2, 56);
      v2 = v7;
    }
    while (v7);
  }
  v3 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v3)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 60) + 40))(*((_QWORD *)this + 60), v3, 8 * *((_QWORD *)this + 59));
  v4 = (_QWORD *)*((_QWORD *)this + 53);
  if (v4)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 54);
    v6 = (void *)*((_QWORD *)this + 53);
    if (v5 != v4)
    {
      do
      {
        v9 = (_QWORD *)*(v5 - 3);
        if (v9)
        {
          do
          {
            v10 = (_QWORD *)*v9;
            operator delete(v9);
            v9 = v10;
          }
          while (v10);
        }
        v12 = (void *)*(v5 - 5);
        v5 -= 5;
        v11 = v12;
        *v5 = 0;
        if (v12)
          operator delete(v11);
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 53);
    }
    *((_QWORD *)this + 54) = v4;
    operator delete(v6);
  }
  v13 = (_QWORD *)*((_QWORD *)this + 50);
  if (v13)
  {
    do
    {
      v20 = (_QWORD *)*v13;
      v21 = (void *)v13[3];
      if (v21)
      {
        v13[4] = v21;
        operator delete(v21);
      }
      operator delete(v13);
      v13 = v20;
    }
    while (v20);
  }
  v14 = (void *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v14)
    operator delete(v14);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 45));
  v15 = (_QWORD *)*((_QWORD *)this + 41);
  while (v15)
  {
    v22 = v15;
    v15 = (_QWORD *)*v15;
    v23 = (std::__shared_weak_count *)v22[4];
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    operator delete(v22);
  }
  v16 = (void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v16)
    operator delete(v16);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 33));
  v17 = *((_QWORD *)this + 29);
  if (v17)
  {
    v18 = *((_QWORD *)this + 30);
    v19 = (void *)*((_QWORD *)this + 29);
    if (v18 != v17)
    {
      do
      {
        v26 = *(std::__shared_weak_count **)(v18 - 8);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v17;
    operator delete(v19);
  }
  v29 = (void *)*((_QWORD *)this + 26);
  if (v29)
  {
    *((_QWORD *)this + 27) = v29;
    operator delete(v29);
  }
  v30 = *((_QWORD *)this + 23);
  if (v30)
  {
    v31 = *((_QWORD *)this + 24);
    v32 = (void *)*((_QWORD *)this + 23);
    if (v31 == v30)
    {
LABEL_61:
      *((_QWORD *)this + 24) = v30;
      operator delete(v32);
      goto LABEL_62;
    }
    while (1)
    {
      v33 = *(std::__shared_weak_count **)(v31 - 8);
      if (!v33)
        goto LABEL_53;
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        v36 = *(std::__shared_weak_count **)(v31 - 72);
        if (v36)
        {
LABEL_54:
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      else
      {
LABEL_53:
        v36 = *(std::__shared_weak_count **)(v31 - 72);
        if (v36)
          goto LABEL_54;
      }
      v31 -= 80;
      if (v31 == v30)
      {
        v32 = (void *)*((_QWORD *)this + 23);
        goto LABEL_61;
      }
    }
  }
LABEL_62:
  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v39 = (void *)*((_QWORD *)this + 4);
  if (v39 != *((void **)this + 6))
    free(v39);
}

uint64_t md::AssetData::estimatedCost(md::AssetData *this)
{
  return *((_QWORD *)this + 22);
}

_QWORD *std::vector<std::unordered_map<unsigned short,unsigned long long>>::~vector[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<md::AssetData::AssetData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,VKSharedResources *)::$_0,std::allocator<md::AssetData::AssetData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,VKSharedResources *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::AssetData::AssetData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,VKSharedResources *)::$_0,std::allocator<md::AssetData::AssetData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,VKSharedResources *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D47F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::AssetData::AssetData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,VKSharedResources *)::$_0,std::allocator<md::AssetData::AssetData(gdc::LayerDataRequestKey const&,std::shared_ptr<md::DaVinciAssetResource> &,VKSharedResources *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D47F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::construct_at[abi:nn180100]<ggl::DaVinci::TexturedCompressedMesh,char const(&)[14],std::shared_ptr<ggl::VertexDataTyped<ggl::DaVinci::TexturedCompressedVbo>> &,std::shared_ptr<ggl::IndexData> &,ggl::DaVinci::TexturedCompressedMesh*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;

  v16 = a2;
  v17 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v15[0] = *a4;
  v15[1] = (uint64_t)v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh(a1, (uint64_t)"DV Asset Mesh", &v16, v15);
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh(a1, (uint64_t)"DV Asset Mesh", &v16, v15);
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

char *std::vector<md::Mesh>::__emplace_back_slow_path<std::shared_ptr<ggl::DaVinci::TexturedCompressedMesh> &,gm::Range<unsigned long>,ggl::PrimitiveType,gm::Box<float,3> &,md::MeshVertexFormat,BOOL>(void **a1, uint64_t a2, std::__shared_weak_count *a3, _OWORD *a4, char *a5, uint64_t a6, char *a7, char *a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  char *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char v23;
  char v24;
  char v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v46;

  v8 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v9 = v8 + 1;
  if (v8 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v9)
    v9 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v16 = 0x333333333333333;
  else
    v16 = v9;
  v46 = v16;
  if (v16)
  {
    if (v16 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v17 = a2;
    v18 = a4;
    v19 = (char *)operator new(80 * v16);
    a4 = v18;
    a2 = v17;
  }
  else
  {
    v19 = 0;
  }
  v20 = &v19[80 * v8];
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v23 = *a5;
    v24 = *a7;
    v25 = *a8;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v27 = a3;
  }
  else
  {
    v27 = 0;
    v23 = *a5;
    v24 = *a7;
    v25 = *a8;
  }
  *(_QWORD *)v20 = a2;
  *((_QWORD *)v20 + 1) = v27;
  v28 = &v19[80 * v8];
  *((_OWORD *)v28 + 1) = *a4;
  v28[32] = v23;
  *(_OWORD *)(v28 + 36) = *(_OWORD *)a6;
  *(_QWORD *)(v28 + 52) = *(_QWORD *)(a6 + 16);
  v28[60] = v25;
  v28[61] = v24;
  *((_QWORD *)v28 + 8) = 0;
  *((_QWORD *)v28 + 9) = 0;
  if (a3)
  {
    v29 = (unint64_t *)&a3->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  v31 = &v19[80 * v46];
  v32 = v20 + 80;
  v33 = (char *)*a1;
  v34 = (char *)a1[1];
  if (v34 != *a1)
  {
    do
    {
      v35 = *((_OWORD *)v34 - 5);
      v34 -= 80;
      *((_OWORD *)v20 - 5) = v35;
      v20 -= 80;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      v36 = *((_OWORD *)v34 + 1);
      v37 = *((_OWORD *)v34 + 2);
      *(_OWORD *)(v20 + 46) = *(_OWORD *)(v34 + 46);
      *((_OWORD *)v20 + 1) = v36;
      *((_OWORD *)v20 + 2) = v37;
      *((_OWORD *)v20 + 4) = *((_OWORD *)v34 + 4);
      *((_QWORD *)v34 + 8) = 0;
      *((_QWORD *)v34 + 9) = 0;
    }
    while (v34 != v33);
    v34 = (char *)*a1;
    v38 = (char *)a1[1];
    *a1 = v20;
    a1[1] = v32;
    a1[2] = v31;
    while (1)
    {
      if (v38 == v34)
        goto LABEL_40;
      v39 = (std::__shared_weak_count *)*((_QWORD *)v38 - 1);
      if (!v39)
        goto LABEL_32;
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        v42 = (std::__shared_weak_count *)*((_QWORD *)v38 - 9);
        if (!v42)
          goto LABEL_26;
      }
      else
      {
LABEL_32:
        v42 = (std::__shared_weak_count *)*((_QWORD *)v38 - 9);
        if (!v42)
          goto LABEL_26;
      }
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
LABEL_26:
      v38 -= 80;
    }
  }
  *a1 = v20;
  a1[1] = v32;
  a1[2] = v31;
LABEL_40:
  if (v34)
    operator delete(v34);
  return v32;
}

void std::__hash_table<std::__hash_value_type<unsigned short,unsigned long long>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned short,unsigned long long>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  _WORD *v6;
  _WORD *v7;
  _OWORD *v8;
  _WORD *v9;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (_WORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[8] = *((_WORD *)a2 + 8);
      *((_QWORD *)v6 + 3) = a2[3];
      v7 = *(_WORD **)v6;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      v6 = v7;
      if (!v7)
        goto LABEL_7;
    }
    do
    {
      v9 = *(_WORD **)v6;
      operator delete(v6);
      v6 = v9;
    }
    while (v9);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v8 = operator new(0x20uLL);
      *(_QWORD *)v8 = 0;
      v8[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v8 + 1) = *((unsigned __int16 *)v8 + 8);
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19FC4B058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned short,unsigned long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  v10 = *(uint64_t **)(a2 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = *((unsigned __int16 *)v10 + 8);
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          prime = *((unsigned __int16 *)v10 + 8);
          if (v12 <= v13)
            prime = v13 % v12;
        }
        else
        {
          prime = ((_DWORD)v12 - 1) & v13;
        }
        v15 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * prime);
        if (v15)
        {
          v16 = *v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == (uint64_t *)v13)
                {
                  if (*((unsigned __int16 *)v16 + 8) == (_DWORD)v13)
                    goto LABEL_78;
                }
                else if (((unint64_t)v18 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                v16 = (uint64_t **)*v16;
                if (!v16)
                  goto LABEL_40;
              }
            }
            do
            {
              v17 = (unint64_t)v16[1];
              if (v17 == v13)
              {
                if (*((unsigned __int16 *)v16 + 8) == (_DWORD)v13)
                  goto LABEL_78;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != prime)
                  break;
              }
              v16 = (uint64_t **)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      v19 = operator new(0x20uLL);
      *v19 = 0;
      v19[1] = v13;
      *((_OWORD *)v19 + 1) = *((_OWORD *)v10 + 1);
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (!v12 || (float)(v21 * (float)v12) < v20)
      {
        v22 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v22 = 1;
        v23 = v22 | (2 * v12);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        if (v25 == 1)
        {
          v25 = 2;
        }
        else if ((v25 & (v25 - 1)) != 0)
        {
          v25 = std::__next_prime(v25);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v25 > v12)
          goto LABEL_52;
        if (v25 < v12)
        {
          v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
          {
            v26 = std::__next_prime(v26);
          }
          else
          {
            v28 = 1 << -(char)__clz(v26 - 1);
            if (v26 >= 2)
              v26 = v28;
          }
          if (v25 <= v26)
            v25 = v26;
          if (v25 < v12)
LABEL_52:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v25);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v12 <= v13)
            prime = v13 % v12;
          else
            prime = v13;
        }
        else
        {
          prime = ((_DWORD)v12 - 1) & v13;
        }
      }
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
      if (v30)
      {
        *v19 = *v30;
      }
      else
      {
        *v19 = *v11;
        *v11 = v19;
        *(_QWORD *)(v29 + 8 * prime) = v11;
        if (!*v19)
          goto LABEL_77;
        v31 = *(_QWORD *)(*v19 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v31 >= v12)
            v31 %= v12;
        }
        else
        {
          v31 &= v12 - 1;
        }
        v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
      }
      *v30 = v19;
LABEL_77:
      ++*(_QWORD *)(a1 + 24);
LABEL_78:
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  return a1;
}

void sub_19FC4B41C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *md::AssetData::getMaterialID(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, char a5, unsigned int a6)
{
  unint64_t v6;
  uint64_t *result;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t ***v23;
  uint64_t **v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t ***v38;
  uint64_t **v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t ***v43;
  uint64_t **v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t ***v48;
  uint64_t *v49;
  unint64_t v50;

  v6 = (a2 - a1) >> 4;
  if (v6 < a3)
    return 0;
  if (v6 <= a3)
    goto LABEL_129;
  v8 = *(_QWORD **)(a1 + 16 * a3);
  if (!a5)
  {
    v12 = v8[6];
    if (!v12)
      return 0;
    v13 = *(_QWORD *)(v12 + 32);
    if (!v13)
      return 0;
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = a6;
      if (v13 <= a6)
        v15 = a6 % v13;
    }
    else
    {
      v15 = ((_DWORD)v13 - 1) & a6;
    }
    v22 = *(_QWORD *)(v12 + 24);
    v23 = *(uint64_t ****)(v22 + 8 * v15);
    if (!v23)
      return 0;
    v24 = *v23;
    if (!*v23)
      return 0;
    v25 = v13 - 1;
    if (v14.u32[0] < 2uLL)
    {
      while (1)
      {
        v26 = v24[1];
        if (v26 == (uint64_t *)a6)
        {
          if (*((unsigned __int16 *)v24 + 8) == a6)
            goto LABEL_70;
        }
        else if (((unint64_t)v26 & v25) != v15)
        {
          return 0;
        }
        result = 0;
        v24 = (uint64_t **)*v24;
        if (!v24)
          return result;
      }
    }
    while (1)
    {
      v27 = (unint64_t)v24[1];
      if (v27 == a6)
      {
        if (*((unsigned __int16 *)v24 + 8) == a6)
        {
LABEL_70:
          if (v14.u32[0] > 1uLL)
          {
            v36 = a6;
            if (v13 <= a6)
              v36 = a6 % v13;
          }
          else
          {
            v36 = ((_DWORD)v13 - 1) & a6;
          }
          v43 = *(uint64_t ****)(v22 + 8 * v36);
          if (!v43)
            goto LABEL_129;
          v44 = *v43;
          if (!v44)
            goto LABEL_129;
          if (v14.u32[0] < 2uLL)
          {
            while (1)
            {
              v45 = v44[1];
              if (v45 == (uint64_t *)a6)
              {
                if (*((unsigned __int16 *)v44 + 8) == a6)
                  return v44[3];
              }
              else if (((unint64_t)v45 & v25) != v36)
              {
                goto LABEL_129;
              }
              v44 = (uint64_t **)*v44;
              if (!v44)
                goto LABEL_129;
            }
          }
          while (1)
          {
            v46 = (unint64_t)v44[1];
            if (v46 == a6)
            {
              if (*((unsigned __int16 *)v44 + 8) == a6)
                return v44[3];
            }
            else
            {
              if (v46 >= v13)
                v46 %= v13;
              if (v46 != v36)
                goto LABEL_129;
            }
            v44 = (uint64_t **)*v44;
            if (!v44)
              goto LABEL_129;
          }
        }
      }
      else
      {
        if (v27 >= v13)
          v27 %= v13;
        if (v27 != v15)
          return 0;
      }
      result = 0;
      v24 = (uint64_t **)*v24;
      if (!v24)
        return result;
    }
  }
  v9 = (int8x8_t)v8[5];
  if (!*(_QWORD *)&v9)
    return 0;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a4;
    if (*(_QWORD *)&v9 <= a4)
      v11 = a4 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & a4;
  }
  v16 = v8[4];
  v17 = *(_QWORD **)(v16 + 8 * v11);
  if (!v17)
    return 0;
  v18 = (_QWORD *)*v17;
  if (!*v17)
    return 0;
  v19 = *(_QWORD *)&v9 - 1;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v20 = v18[1];
      if (v20 == a4)
      {
        if (v18[2] == a4)
          goto LABEL_48;
      }
      else if ((v20 & v19) != v11)
      {
        return 0;
      }
      result = 0;
      v18 = (_QWORD *)*v18;
      if (!v18)
        return result;
    }
  }
  while (1)
  {
    v21 = v18[1];
    if (v21 != a4)
    {
      if (v21 >= *(_QWORD *)&v9)
        v21 %= *(_QWORD *)&v9;
      if (v21 != v11)
        return 0;
      goto LABEL_24;
    }
    if (v18[2] == a4)
      break;
LABEL_24:
    result = 0;
    v18 = (_QWORD *)*v18;
    if (!v18)
      return result;
  }
LABEL_48:
  if (v10.u32[0] > 1uLL)
  {
    v28 = a4;
    if (*(_QWORD *)&v9 <= a4)
      v28 = a4 % *(_QWORD *)&v9;
  }
  else
  {
    v28 = v19 & a4;
  }
  v29 = *(_QWORD **)(v16 + 8 * v28);
  if (!v29)
    goto LABEL_129;
  v30 = (_QWORD *)*v29;
  if (!*v29)
    goto LABEL_129;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v31 = v30[1];
      if (v31 == a4)
      {
        if (v30[2] == a4)
          goto LABEL_60;
      }
      else if ((v31 & v19) != v28)
      {
        goto LABEL_129;
      }
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_129;
    }
  }
  while (2)
  {
    v35 = v30[1];
    if (v35 != a4)
    {
      if (v35 >= *(_QWORD *)&v9)
        v35 %= *(_QWORD *)&v9;
      if (v35 != v28)
        goto LABEL_129;
      goto LABEL_64;
    }
    if (v30[2] != a4)
    {
LABEL_64:
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_129;
      continue;
    }
    break;
  }
LABEL_60:
  v32 = v30[4];
  if (v32)
  {
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.u32[0] > 1uLL)
    {
      v34 = a6;
      if (v32 <= a6)
        v34 = a6 % v32;
    }
    else
    {
      v34 = ((_DWORD)v32 - 1) & a6;
    }
    v37 = v30[3];
    v38 = *(uint64_t ****)(v37 + 8 * v34);
    if (v38)
    {
      v39 = *v38;
      if (*v38)
      {
        v40 = v32 - 1;
        if (v33.u32[0] < 2uLL)
        {
          while (1)
          {
            v41 = v39[1];
            if (v41 == (uint64_t *)a6)
            {
              if (*((unsigned __int16 *)v39 + 8) == a6)
                goto LABEL_109;
            }
            else if (((unint64_t)v41 & v40) != v34)
            {
              return 0;
            }
            result = 0;
            v39 = (uint64_t **)*v39;
            if (!v39)
              return result;
          }
        }
        while (1)
        {
          v42 = (unint64_t)v39[1];
          if (v42 == a6)
          {
            if (*((unsigned __int16 *)v39 + 8) == a6)
            {
LABEL_109:
              if (v33.u32[0] > 1uLL)
              {
                v47 = a6;
                if (v32 <= a6)
                  v47 = a6 % v32;
              }
              else
              {
                v47 = ((_DWORD)v32 - 1) & a6;
              }
              v48 = *(uint64_t ****)(v37 + 8 * v47);
              if (v48)
              {
                v44 = *v48;
                if (v44)
                {
                  if (v33.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v49 = v44[1];
                      if (v49 == (uint64_t *)a6)
                      {
                        if (*((unsigned __int16 *)v44 + 8) == a6)
                          return v44[3];
                      }
                      else if (((unint64_t)v49 & v40) != v47)
                      {
                        goto LABEL_129;
                      }
                      v44 = (uint64_t **)*v44;
                      if (!v44)
                        goto LABEL_129;
                    }
                  }
                  do
                  {
                    v50 = (unint64_t)v44[1];
                    if (v50 == a6)
                    {
                      if (*((unsigned __int16 *)v44 + 8) == a6)
                        return v44[3];
                    }
                    else
                    {
                      if (v50 >= v32)
                        v50 %= v32;
                      if (v50 != v47)
                        break;
                    }
                    v44 = (uint64_t **)*v44;
                  }
                  while (v44);
                }
              }
LABEL_129:
              abort();
            }
          }
          else
          {
            if (v42 >= v32)
              v42 %= v32;
            if (v42 != v34)
              return 0;
          }
          result = 0;
          v39 = (uint64_t **)*v39;
          if (!v39)
            return result;
        }
      }
    }
  }
  return 0;
}

void sub_19FC4B97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKPuckAnimatorLocationProjector;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FC4BB64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC4BD3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL49GEOGetVectorKitVKPuckAnimatorLocationProjectorLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKPuckAnimatorLocationProjector");
  v1 = (void *)GEOGetVectorKitVKPuckAnimatorLocationProjectorLog(void)::log;
  GEOGetVectorKitVKPuckAnimatorLocationProjectorLog(void)::log = (uint64_t)v0;

}

void ggl::VSView::PipelineState::~PipelineState(ggl::VSView::PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VSView::PipelineSetup::~PipelineSetup(ggl::VSView::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VSView::PipelineSetup::constantDataIsEnabled(ggl::VSView::PipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::VSView::PipelineSetup::textureIsEnabled(ggl::VSView::PipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::VSView::StretchAlphaPipelineState::~StretchAlphaPipelineState(ggl::VSView::StretchAlphaPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VSView::StretchAlphaPipelineSetup::~StretchAlphaPipelineSetup(ggl::VSView::StretchAlphaPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VSView::StretchAlphaPipelineSetup::constantDataIsEnabled(ggl::VSView::StretchAlphaPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::VSView::StretchAlphaPipelineSetup::textureIsEnabled(ggl::VSView::StretchAlphaPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::GlowAlpha::MeshPipelineState::MeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::GlowAlphaShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::GlowAlpha::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GlowAlpha::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::GlowAlpha::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GlowAlpha::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DF8 = 1;
          }
          ggl::GlowAlpha::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GlowAlpha::DefaultVbo>::typedReflection(void)::r;
          unk_1EE5847E0 = &ggl::GlowAlpha::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE5847E8 = 0;
          if ((v97 & 1) == 0
          {
            ggl::GlowAlpha::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE584818 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE584820 = (uint64_t)ggl::GlowAlpha::Glow::reflection(void)::reflection;
          }
          qword_1EE5847F0 = (uint64_t)&ggl::GlowAlpha::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE5847F8 = xmmword_19FFB3410;
        }
      }
      ggl::GlowAlpha::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GlowAlpha::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::GlowAlphaShader::typedReflection(v92);
      qword_1ECE32538 = (uint64_t)&ggl::GlowAlphaShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::GlowAlpha::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE5848C8 = 0;
        qword_1EE5848D0 = (uint64_t)"";
        dword_1EE5848D8 = 0;
        qword_1EE5848E0 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE5848E8 = 2;
      }
      qword_1ECE32540 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE32548 = 1;
      qword_1ECE32550 = 0;
      unk_1ECE32558 = 0;
      qword_1ECE32560 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32568 = 0;
      if ((v95 & 1) == 0
      {
        ggl::GlowAlpha::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE584838 = 0;
        qword_1EE584840 = (uint64_t)"view";
        dword_1EE584848 = 3;
        qword_1EE584850 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE584858 = xmmword_19FFB35A0;
        qword_1EE584868 = 1;
        unk_1EE584870 = "transform";
        dword_1EE584878 = 3;
        qword_1EE584880 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE584888 = xmmword_19FFB3660;
        qword_1EE584898 = 2;
        unk_1EE5848A0 = "glow";
        dword_1EE5848A8 = 3;
        qword_1EE5848B0 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineConstantGlowBinding(void)::reflection;
        unk_1EE5848B8 = 2;
      }
      qword_1ECE32570 = (uint64_t)&ggl::GlowAlpha::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE32578 = 3;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::GlowAlpha::MeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  *(_QWORD *)a1 = &off_1E42BD038;
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::GlowAlpha::MeshPipelineSetup::~MeshPipelineSetup(ggl::GlowAlpha::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::GlowAlpha::MeshPipelineSetup::constantDataIsEnabled(ggl::GlowAlpha::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::GlowAlpha::MeshPipelineSetup::textureIsEnabled(ggl::GlowAlpha::MeshPipelineSetup *this)
{
  return 0;
}

void md::NavShieldLabelPart::~NavShieldLabelPart(md::NavShieldLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E428D080;
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::IconLabelPart::~IconLabelPart(this);
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E428D080;
  v2 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40AE2C30F4);
  v3 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x1000C40AE2C30F4);
  md::IconLabelPart::~IconLabelPart(this);
  {
    v5 = operator new();
    *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v5 + 24) = "VectorKitLabels";
    *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v5 = &off_1E42B5668;
    *(_QWORD *)(v5 + 8) = "VectorKitLabels";
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 152) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 216) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_QWORD *)(v5 + 248) = 0;
    *(_OWORD *)(v5 + 56) = 0u;
    v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
    if ((_DWORD)v6)
      geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v5 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v5;
  }
  (*(void (**)(uint64_t, md::NavShieldLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, this, 848);
}

void md::NavShieldLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 18;
  strcpy(a1, "NavShieldLabelPart");
}

float md::NavShieldLabelPart::updateWithNavLabelStyle(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 != *(unsigned __int8 *)(a1 + 768))
  {
    *(_BYTE *)(a1 + 768) = v4;
    *(_BYTE *)(a1 + 565) = v4 != 0;
    if (!v4)
    {
      v6 = *(_QWORD *)(a1 + 776);
      *(_QWORD *)(a1 + 776) = 0;
      if (!v6)
        goto LABEL_5;
      goto LABEL_4;
    }
    v5 = operator new();
    v6 = *(_QWORD *)(a1 + 776);
    *(_QWORD *)(a1 + 776) = v5;
    if (v6)
LABEL_4:
      MEMORY[0x1A1AF4E00](v6, 0x1000C40AE2C30F4);
  }
LABEL_5:
  result = *(float *)a2;
  *(_DWORD *)(a1 + 596) = *(_DWORD *)a2;
  return result;
}

void md::NavShield::~NavShield(md::NavShield *this)
{
  md::NavLabel::~NavLabel(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::NavShield::type(md::NavShield *this)
{
  return 3;
}

void std::__function::__func<md::ita::ProcessRenderableForStyleRouteLineMask::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ProcessRenderableForStyleRouteLineMask::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C6F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessRenderableForStyleRouteLineMask::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C6F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessRenderableForStyleRouteLineMask::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask::operator()(ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>)::$_0>,void ()(md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3, int *a4, unint64_t **a5)
{
  unint64_t *v7;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  char v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint8x8_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  _BOOL8 v82;
  unint64_t v83;
  unint64_t v84;
  size_t prime;
  unint64_t v86;
  uint8x8_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint8x8_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  _BOOL8 v101;
  unint64_t v102;
  unint64_t v103;
  size_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  size_t v110;
  size_t v111;
  size_t v112;
  _QWORD *v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint8x8_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  size_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint8x8_t v130;
  _QWORD **v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  float v135;
  float v136;
  _BOOL8 v137;
  unint64_t v138;
  unint64_t v139;
  size_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  size_t v146;
  size_t v147;
  size_t v148;
  _QWORD *v149;
  size_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint8x8_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  size_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t (***v166)();
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v182;
  _QWORD **v183;
  _QWORD *v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  unint64_t v192;
  _QWORD *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  char *v213;
  char *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  char *v223;
  __int128 v224;
  char *v225;
  std::__shared_weak_count *v226;
  unint64_t *p_shared_owners;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  _BYTE *v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  _OWORD *v241;
  __int128 *v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  uint8x8_t v248;
  _QWORD *v249;
  _QWORD *v250;
  unint64_t v251;
  uint64_t v252;
  float v253;
  float v254;
  _BOOL8 v255;
  unint64_t v256;
  unint64_t v257;
  size_t v258;
  unint64_t v259;
  uint8x8_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  float v268;
  float v269;
  unint64_t v270;
  uint64_t v271;
  float v272;
  float v273;
  _QWORD *v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint8x8_t v282;
  char **v283;
  char *v284;
  unint64_t v285;
  uint64_t v287;
  char *v289;
  float v290;
  float v291;
  _BOOL8 v292;
  unint64_t v293;
  unint64_t v294;
  size_t v295;
  void *v296;
  void *v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  size_t v301;
  size_t v302;
  size_t v303;
  _QWORD *v304;
  size_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint8x8_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  size_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  unint64_t v319;
  uint8x8_t v320;
  uint64_t *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  float v325;
  float v326;
  _BOOL8 v327;
  unint64_t v328;
  unint64_t v329;
  size_t v330;
  void *v331;
  void *v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  size_t v336;
  size_t v337;
  size_t v338;
  _QWORD *v339;
  size_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint8x8_t v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  size_t v348;
  uint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  unint64_t v360;
  uint8x8_t v361;
  unint64_t v362;
  _WORD *v363;
  _QWORD **v371;
  _QWORD *v372;
  unint64_t v373;
  uint64_t v374;
  float v375;
  _QWORD *v376;
  float v377;
  _BOOL8 v378;
  unint64_t v379;
  unint64_t v380;
  size_t v381;
  void *v382;
  void *v383;
  uint64_t v384;
  _QWORD *v385;
  size_t v386;
  size_t v387;
  size_t v388;
  _QWORD *v389;
  size_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint8x8_t v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  size_t v398;
  uint64_t v399;
  void *v400;
  uint64_t v401;
  _QWORD *v402;
  unint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  unint64_t v406;
  char v407;
  uint64_t (**v408)();
  __int128 v409;
  uint64_t (***v410)();
  _BYTE v411[24];
  _BYTE *v412;
  int v413;
  uint64_t v414;

  v414 = *MEMORY[0x1E0C80C00];
  v7 = *a5;
  if (!*((_BYTE *)a4 + 32))
  {
    if (!*((_BYTE *)a4 + 16))
    {
      if (v7)
      {
        v17 = **(_QWORD ***)(a1 + 8);
        v18 = *v7;
        v19 = *v7;
        v20 = v17[269];
        if (v19 < (v17[270] - v20) >> 3)
        {
          v21 = *(_QWORD *)(v20 + 8 * v19);
          if (v21 && HIDWORD(v18) == HIDWORD(v21))
          {
            v23 = (_BYTE *)(v17[272] + 24 * v21);
            if (v23 != (_BYTE *)v17[273] && v23 != 0)
            {
              v25 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::ColorStyleCacheKey>> const&>,std::tuple<>>((uint64_t)(v17 + 256), v18, v7);
              ++v25[3];
              *v23 = 0;
            }
          }
        }
      }
      return;
    }
    _S8 = *a4;
    _S9 = a4[1];
    _S11 = a4[2];
    _S10 = *((float *)a4 + 3);
    if (v7)
      goto LABEL_3;
LABEL_6:
    v14 = **(_QWORD **)(a1 + 8);
    v15 = *(_QWORD *)(v14 + 2136);
    if (*(_QWORD *)(v14 + 2128) == v15)
    {
      v26 = (-1431655765 * ((*(_QWORD *)(v14 + 2184) - *(_QWORD *)(v14 + 2176)) >> 3)) | 0x100000000;
      v27 = *(uint64_t **)(v14 + 2160);
      v28 = *(_QWORD *)(v14 + 2168);
      if ((unint64_t)v27 >= v28)
      {
        v30 = *(char **)(v14 + 2152);
        v31 = ((char *)v27 - v30) >> 3;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
          goto LABEL_803;
        v33 = v28 - (_QWORD)v30;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 >> 61)
            goto LABEL_800;
          v35 = (char *)operator new(8 * v34);
        }
        else
        {
          v35 = 0;
        }
        v36 = (uint64_t *)&v35[8 * v31];
        *v36 = v26;
        v29 = v36 + 1;
        if (v27 != (uint64_t *)v30)
        {
          v37 = (char *)v27 - v30 - 8;
          if (v37 < 0x58)
            goto LABEL_806;
          if ((unint64_t)(v30 - v35) < 0x20)
            goto LABEL_806;
          v38 = (v37 >> 3) + 1;
          v39 = &v35[(char *)v27 - v30 - 16];
          v40 = v27 - 2;
          v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = *(_OWORD *)v40;
            *((_OWORD *)v39 - 1) = *((_OWORD *)v40 - 1);
            *(_OWORD *)v39 = v42;
            v39 -= 32;
            v40 -= 4;
            v41 -= 4;
          }
          while (v41);
          v36 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
          v27 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
          if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_806:
            do
            {
              v43 = *--v27;
              *--v36 = v43;
            }
            while (v27 != (uint64_t *)v30);
          }
          v27 = *(uint64_t **)(v14 + 2152);
        }
        *(_QWORD *)(v14 + 2152) = v36;
        *(_QWORD *)(v14 + 2160) = v29;
        *(_QWORD *)(v14 + 2168) = &v35[8 * v34];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v27 = v26;
        v29 = v27 + 1;
      }
      *(_QWORD *)(v14 + 2160) = v29;
      v12 = *(v29 - 1);
    }
    else
    {
      v16 = *(_QWORD *)(v15 - 8);
      *(_QWORD *)(v14 + 2136) = v15 - 8;
      *(_DWORD *)(*(_QWORD *)(v14 + 2152) + 8 * v16) = -1431655765
                                                     * ((*(_QWORD *)(v14 + 2184) - *(_QWORD *)(v14 + 2176)) >> 3);
      *(_DWORD *)(*(_QWORD *)(v14 + 2152) + 8 * v16 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v14 + 2152)
                                                                                               + 8 * v16
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
      v12 = v16 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v14 + 2152) + 8 * v16 + 4) << 32);
    }
    v44 = *(_BYTE **)(v14 + 2184);
    v45 = *(_QWORD *)(v14 + 2192);
    if ((unint64_t)v44 >= v45)
    {
      v47 = *(_BYTE **)(v14 + 2176);
      v48 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v47) >> 3) + 1;
      if (v48 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_803;
      v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (_QWORD)v47) >> 3);
      if (2 * v49 > v48)
        v48 = 2 * v49;
      if (v49 >= 0x555555555555555)
        v50 = 0xAAAAAAAAAAAAAAALL;
      else
        v50 = v48;
      if (v50)
      {
        if (v50 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_800;
        v51 = (char *)operator new(24 * v50);
      }
      else
      {
        v51 = 0;
      }
      v52 = &v51[8 * ((v44 - v47) >> 3)];
      *v52 = 0;
      *((_DWORD *)v52 + 1) = _S8;
      *((_DWORD *)v52 + 2) = _S9;
      *((_DWORD *)v52 + 3) = _S11;
      *((float *)v52 + 4) = _S10;
      v52[20] = 1;
      v46 = v52 + 24;
      if (v44 == v47)
      {
        v55 = &v51[8 * ((v44 - v47) >> 3)];
      }
      else
      {
        v53 = v44;
        do
        {
          v54 = *(v53 - 24);
          v53 -= 24;
          *(v52 - 20) = 0;
          *(v52 - 24) = v54;
          v55 = v52 - 24;
          *(v52 - 4) = 0;
          if (v53[20])
          {
            *(_OWORD *)(v52 - 20) = *(_OWORD *)(v44 - 20);
            *(v52 - 4) = 1;
          }
          v44 = v53;
          v52 -= 24;
        }
        while (v53 != v47);
        v44 = *(_BYTE **)(v14 + 2176);
      }
      *(_QWORD *)(v14 + 2176) = v55;
      *(_QWORD *)(v14 + 2184) = v46;
      *(_QWORD *)(v14 + 2192) = &v51[24 * v50];
      if (v44)
        operator delete(v44);
    }
    else
    {
      *v44 = 0;
      *((_DWORD *)v44 + 1) = _S8;
      *((_DWORD *)v44 + 2) = _S9;
      *((_DWORD *)v44 + 3) = _S11;
      *((float *)v44 + 4) = _S10;
      v46 = v44 + 24;
      v44[20] = 1;
    }
    *(_QWORD *)(v14 + 2184) = v46;
    v13 = v12;
    v56 = *(_QWORD *)(v14 + 2208);
    v57 = *(_QWORD *)(v14 + 2216);
    if (v56 >= v57)
    {
      v59 = *(_BYTE **)(v14 + 2200);
      v60 = (uint64_t)(v56 - (_QWORD)v59) >> 3;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
        goto LABEL_803;
      v62 = v57 - (_QWORD)v59;
      if (v62 >> 2 > v61)
        v61 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        if (v63 >> 61)
          goto LABEL_800;
        v64 = operator new(8 * v63);
      }
      else
      {
        v64 = 0;
      }
      v65 = &v64[8 * v60];
      *v65 = v12;
      v58 = (unint64_t)(v65 + 1);
      if ((_BYTE *)v56 != v59)
      {
        v66 = v56 - (_QWORD)v59 - 8;
        if (v66 < 0x58)
          goto LABEL_807;
        if ((unint64_t)(v59 - v64) < 0x20)
          goto LABEL_807;
        v67 = (v66 >> 3) + 1;
        v68 = &v64[v56 - (_QWORD)v59 - 16];
        v69 = (__int128 *)(v56 - 16);
        v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v71 = *v69;
          *(v68 - 1) = *(v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 2;
          v70 -= 4;
        }
        while (v70);
        v65 -= v67 & 0x3FFFFFFFFFFFFFFCLL;
        v56 -= 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
        if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_807:
          do
          {
            v72 = *(_QWORD *)(v56 - 8);
            v56 -= 8;
            *--v65 = v72;
          }
          while ((_BYTE *)v56 != v59);
        }
      }
      *(_QWORD *)(v14 + 2200) = v65;
      *(_QWORD *)(v14 + 2208) = v58;
      *(_QWORD *)(v14 + 2216) = &v64[8 * v63];
      if (v59)
        operator delete(v59);
    }
    else
    {
      *(_QWORD *)v56 = v12;
      v56 += 8;
      v58 = v56;
    }
    v73 = (uint64_t *)(v14 + 2048);
    *(_QWORD *)(v14 + 2208) = v58;
    v74 = *(_QWORD *)(v14 + 2056);
    if (v74)
    {
      v75 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
      v75.i16[0] = vaddlv_u8(v75);
      if (v75.u32[0] > 1uLL)
      {
        v58 = v12;
        if (v12 >= v74)
          v58 = v12 % v74;
      }
      else
      {
        v58 = (v74 - 1) & v12;
      }
      v76 = *(_QWORD **)(*v73 + 8 * v58);
      if (v76)
      {
        v77 = (_QWORD *)*v76;
        if (v77)
        {
          if (v75.u32[0] < 2uLL)
          {
            while (1)
            {
              v79 = v77[1];
              if (v79 == v12)
              {
                if (v77[2] == v12)
                  goto LABEL_146;
              }
              else if ((v79 & (v74 - 1)) != v58)
              {
                goto LABEL_108;
              }
              v77 = (_QWORD *)*v77;
              if (!v77)
                goto LABEL_108;
            }
          }
          do
          {
            v78 = v77[1];
            if (v78 == v12)
            {
              if (v77[2] == v12)
                goto LABEL_146;
            }
            else
            {
              if (v78 >= v74)
                v78 %= v74;
              if (v78 != v58)
                break;
            }
            v77 = (_QWORD *)*v77;
          }
          while (v77);
        }
      }
    }
LABEL_108:
    v56 = (unint64_t)operator new(0x30uLL);
    *(_QWORD *)v56 = 0;
    *(_QWORD *)(v56 + 8) = v12;
    *(_QWORD *)(v56 + 16) = v12;
    *(_OWORD *)(v56 + 24) = xmmword_19FFB3350;
    *(_BYTE *)(v56 + 40) = 0;
    v80 = (float)(unint64_t)(*(_QWORD *)(v14 + 2072) + 1);
    v81 = *(float *)(v14 + 2080);
    if (!v74 || (float)(v81 * (float)v74) < v80)
    {
      v82 = 1;
      if (v74 >= 3)
        v82 = (v74 & (v74 - 1)) != 0;
      v83 = v82 | (2 * v74);
      v84 = vcvtps_u32_f32(v80 / v81);
      if (v83 <= v84)
        prime = v84;
      else
        prime = v83;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v74 = *(_QWORD *)(v14 + 2056);
      }
      if (prime > v74)
        goto LABEL_120;
      if (prime < v74)
      {
        v86 = vcvtps_u32_f32((float)*(unint64_t *)(v14 + 2072) / *(float *)(v14 + 2080));
        if (v74 < 3 || (v87 = (uint8x8_t)vcnt_s8((int8x8_t)v74), v87.i16[0] = vaddlv_u8(v87), v87.u32[0] > 1uLL))
        {
          v86 = std::__next_prime(v86);
        }
        else
        {
          v88 = 1 << -(char)__clz(v86 - 1);
          if (v86 >= 2)
            v86 = v88;
        }
        if (prime <= v86)
          prime = v86;
        if (prime < v74)
LABEL_120:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v14 + 2048, prime);
      }
      v74 = *(_QWORD *)(v14 + 2056);
      if ((v74 & (v74 - 1)) != 0)
      {
        if (v12 >= v74)
          v58 = v12 % v74;
        else
          v58 = v12;
      }
      else
      {
        v58 = (v74 - 1) & v12;
      }
    }
    v89 = *v73;
    v90 = *(unint64_t **)(*v73 + 8 * v58);
    if (v90)
    {
      *(_QWORD *)v56 = *v90;
    }
    else
    {
      *(_QWORD *)v56 = *(_QWORD *)(v14 + 2064);
      *(_QWORD *)(v14 + 2064) = v56;
      *(_QWORD *)(v89 + 8 * v58) = v14 + 2064;
      if (!*(_QWORD *)v56)
      {
LABEL_145:
        ++*(_QWORD *)(v14 + 2072);
LABEL_146:
        v92 = *a3;
        v93 = *(_QWORD *)(v14 + 2272);
        if (v93)
        {
          v94 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
          v94.i16[0] = vaddlv_u8(v94);
          if (v94.u32[0] > 1uLL)
          {
            v56 = *a3;
            if (v92 >= v93)
              v56 = v92 % v93;
          }
          else
          {
            v56 = (v93 - 1) & v92;
          }
          v95 = *(uint64_t **)(*(_QWORD *)(v14 + 2264) + 8 * v56);
          if (v95)
          {
            v96 = *v95;
            if (*v95)
            {
              if (v94.u32[0] < 2uLL)
              {
                while (1)
                {
                  v98 = *(_QWORD *)(v96 + 8);
                  if (v98 == v92)
                  {
                    if (*(_QWORD *)(v96 + 16) == v92)
                      goto LABEL_234;
                  }
                  else if ((v98 & (v93 - 1)) != v56)
                  {
                    goto LABEL_167;
                  }
                  v96 = *(_QWORD *)v96;
                  if (!v96)
                    goto LABEL_167;
                }
              }
              do
              {
                v97 = *(_QWORD *)(v96 + 8);
                if (v97 == v92)
                {
                  if (*(_QWORD *)(v96 + 16) == v92)
                    goto LABEL_234;
                }
                else
                {
                  if (v97 >= v93)
                    v97 %= v93;
                  if (v97 != v56)
                    break;
                }
                v96 = *(_QWORD *)v96;
              }
              while (v96);
            }
          }
        }
LABEL_167:
        v96 = (uint64_t)operator new(0x20uLL);
        *(_QWORD *)v96 = 0;
        *(_QWORD *)(v96 + 8) = v92;
        *(_QWORD *)(v96 + 16) = v92;
        *(_QWORD *)(v96 + 24) = 0;
        v99 = (float)(unint64_t)(*(_QWORD *)(v14 + 2288) + 1);
        v100 = *(float *)(v14 + 2296);
        if (v93 && (float)(v100 * (float)v93) >= v99)
        {
LABEL_224:
          v125 = *(_QWORD *)(v14 + 2264);
          v126 = *(uint64_t **)(v125 + 8 * v56);
          if (v126)
          {
            *(_QWORD *)v96 = *v126;
          }
          else
          {
            *(_QWORD *)v96 = *(_QWORD *)(v14 + 2280);
            *(_QWORD *)(v14 + 2280) = v96;
            *(_QWORD *)(v125 + 8 * v56) = v14 + 2280;
            if (!*(_QWORD *)v96)
            {
LABEL_233:
              ++*(_QWORD *)(v14 + 2288);
LABEL_234:
              *(_QWORD *)(v96 + 24) = v12;
              v128 = *a3;
              v129 = *(_QWORD *)(v14 + 2312);
              if (v129)
              {
                v130 = (uint8x8_t)vcnt_s8((int8x8_t)v129);
                v130.i16[0] = vaddlv_u8(v130);
                if (v130.u32[0] > 1uLL)
                {
                  v96 = v12;
                  if (v12 >= v129)
                    v96 = v12 % v129;
                }
                else
                {
                  v96 = (v129 - 1) & v12;
                }
                v131 = *(_QWORD ***)(*(_QWORD *)(v14 + 2304) + 8 * v96);
                if (v131)
                {
                  v132 = *v131;
                  if (*v131)
                  {
                    if (v130.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v134 = v132[1];
                        if (v134 == v12)
                        {
                          if (v132[2] == v12)
                            goto LABEL_322;
                        }
                        else if ((v134 & (v129 - 1)) != v96)
                        {
                          goto LABEL_255;
                        }
                        v132 = (_QWORD *)*v132;
                        if (!v132)
                          goto LABEL_255;
                      }
                    }
                    do
                    {
                      v133 = v132[1];
                      if (v133 == v12)
                      {
                        if (v132[2] == v12)
                          goto LABEL_322;
                      }
                      else
                      {
                        if (v133 >= v129)
                          v133 %= v129;
                        if (v133 != v96)
                          break;
                      }
                      v132 = (_QWORD *)*v132;
                    }
                    while (v132);
                  }
                }
              }
LABEL_255:
              v132 = operator new(0x20uLL);
              *v132 = 0;
              v132[1] = v12;
              v132[2] = v12;
              v132[3] = 0;
              v135 = (float)(unint64_t)(*(_QWORD *)(v14 + 2328) + 1);
              v136 = *(float *)(v14 + 2336);
              if (v129 && (float)(v136 * (float)v129) >= v135)
              {
LABEL_312:
                v161 = *(_QWORD *)(v14 + 2304);
                v162 = *(_QWORD **)(v161 + 8 * v96);
                if (v162)
                {
                  *v132 = *v162;
                }
                else
                {
                  *v132 = *(_QWORD *)(v14 + 2320);
                  *(_QWORD *)(v14 + 2320) = v132;
                  *(_QWORD *)(v161 + 8 * v96) = v14 + 2320;
                  if (!*v132)
                  {
LABEL_321:
                    ++*(_QWORD *)(v14 + 2328);
LABEL_322:
                    v132[3] = v128;
                    v406 = v12;
                    v164 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
                    v408 = &off_1E42819A0;
                    *(_QWORD *)&v409 = v12;
                    *((_QWORD *)&v409 + 1) = v164;
                    v410 = &v408;
                    v412 = v411;
                    *(_QWORD *)v411 = &off_1E42819A0;
                    *(_OWORD *)&v411[8] = v409;
                    v413 = 0;
                    ecs2::Runtime::queueCommand(v165, (uint64_t)v411);
                    if (v413 != -1)
                      ((void (*)(char *, _BYTE *))off_1E42FB340[v413])(&v407, v411);
                    v413 = -1;
                    v166 = v410;
                    if (v410 == &v408)
                    {
                      v167 = 4;
                      v166 = &v408;
                    }
                    else
                    {
                      if (!v410)
                        goto LABEL_329;
                      v167 = 5;
                    }
                    (*v166)[v167]();
                    goto LABEL_329;
                  }
                  v163 = *(_QWORD *)(*v132 + 8);
                  if ((v129 & (v129 - 1)) != 0)
                  {
                    if (v163 >= v129)
                      v163 %= v129;
                  }
                  else
                  {
                    v163 &= v129 - 1;
                  }
                  v162 = (_QWORD *)(*(_QWORD *)(v14 + 2304) + 8 * v163);
                }
                *v162 = v132;
                goto LABEL_321;
              }
              v137 = 1;
              if (v129 >= 3)
                v137 = (v129 & (v129 - 1)) != 0;
              v138 = v137 | (2 * v129);
              v139 = vcvtps_u32_f32(v135 / v136);
              if (v138 <= v139)
                v140 = v139;
              else
                v140 = v138;
              if (v140 == 1)
              {
                v140 = 2;
              }
              else if ((v140 & (v140 - 1)) != 0)
              {
                v140 = std::__next_prime(v140);
                v129 = *(_QWORD *)(v14 + 2312);
              }
              if (v140 <= v129)
              {
                if (v140 >= v129)
                  goto LABEL_307;
                v153 = vcvtps_u32_f32((float)*(unint64_t *)(v14 + 2328) / *(float *)(v14 + 2336));
                if (v129 < 3
                  || (v154 = (uint8x8_t)vcnt_s8((int8x8_t)v129), v154.i16[0] = vaddlv_u8(v154), v154.u32[0] > 1uLL))
                {
                  v153 = std::__next_prime(v153);
                }
                else
                {
                  v155 = 1 << -(char)__clz(v153 - 1);
                  if (v153 >= 2)
                    v153 = v155;
                }
                if (v140 <= v153)
                  v140 = v153;
                if (v140 >= v129)
                  goto LABEL_307;
                if (!v140)
                {
                  v160 = *(void **)(v14 + 2304);
                  *(_QWORD *)(v14 + 2304) = 0;
                  if (v160)
                    operator delete(v160);
                  *(_QWORD *)(v14 + 2312) = 0;
                  goto LABEL_307;
                }
              }
              if (v140 >> 61)
                goto LABEL_800;
              v141 = operator new(8 * v140);
              v142 = *(void **)(v14 + 2304);
              *(_QWORD *)(v14 + 2304) = v141;
              if (v142)
                operator delete(v142);
              v143 = 0;
              *(_QWORD *)(v14 + 2312) = v140;
              do
                *(_QWORD *)(*(_QWORD *)(v14 + 2304) + 8 * v143++) = 0;
              while (v140 != v143);
              v144 = *(_QWORD **)(v14 + 2320);
              if (!v144)
                goto LABEL_307;
              v145 = v14 + 2320;
              v146 = v144[1];
              v147 = v140 - 1;
              if ((v140 & (v140 - 1)) == 0)
              {
                v148 = v146 & v147;
                *(_QWORD *)(*(_QWORD *)(v14 + 2304) + 8 * v148) = v145;
                while (1)
                {
                  v149 = (_QWORD *)*v144;
                  if (!*v144)
                    break;
                  v150 = v149[1] & v147;
                  if (v150 == v148)
                  {
                    v144 = (_QWORD *)*v144;
                  }
                  else
                  {
                    v151 = *(_QWORD *)(v14 + 2304);
                    if (*(_QWORD *)(v151 + 8 * v150))
                    {
                      *v144 = *v149;
                      v152 = 8 * v150;
                      *v149 = **(_QWORD **)(*(_QWORD *)(v14 + 2304) + v152);
                      **(_QWORD **)(*(_QWORD *)(v14 + 2304) + v152) = v149;
                    }
                    else
                    {
                      *(_QWORD *)(v151 + 8 * v150) = v144;
                      v144 = v149;
                      v148 = v150;
                    }
                  }
                }
LABEL_307:
                v129 = *(_QWORD *)(v14 + 2312);
                if ((v129 & (v129 - 1)) != 0)
                {
                  if (v12 >= v129)
                    v96 = v12 % v129;
                  else
                    v96 = v12;
                }
                else
                {
                  v96 = (v129 - 1) & v12;
                }
                goto LABEL_312;
              }
              if (v146 >= v140)
                v146 %= v140;
              *(_QWORD *)(*(_QWORD *)(v14 + 2304) + 8 * v146) = v145;
              v156 = (_QWORD *)*v144;
              if (!*v144)
                goto LABEL_307;
              while (1)
              {
                v158 = v156[1];
                if (v158 >= v140)
                  v158 %= v140;
                if (v158 != v146)
                {
                  v159 = *(_QWORD *)(v14 + 2304);
                  if (!*(_QWORD *)(v159 + 8 * v158))
                  {
                    *(_QWORD *)(v159 + 8 * v158) = v144;
                    goto LABEL_293;
                  }
                  *v144 = *v156;
                  v157 = 8 * v158;
                  *v156 = **(_QWORD **)(*(_QWORD *)(v14 + 2304) + v157);
                  **(_QWORD **)(*(_QWORD *)(v14 + 2304) + v157) = v156;
                  v156 = v144;
                }
                v158 = v146;
LABEL_293:
                v144 = v156;
                v156 = (_QWORD *)*v156;
                v146 = v158;
                if (!v156)
                  goto LABEL_307;
              }
            }
            v127 = *(_QWORD *)(*(_QWORD *)v96 + 8);
            if ((v93 & (v93 - 1)) != 0)
            {
              if (v127 >= v93)
                v127 %= v93;
            }
            else
            {
              v127 &= v93 - 1;
            }
            v126 = (uint64_t *)(*(_QWORD *)(v14 + 2264) + 8 * v127);
          }
          *v126 = v96;
          goto LABEL_233;
        }
        v101 = 1;
        if (v93 >= 3)
          v101 = (v93 & (v93 - 1)) != 0;
        v102 = v101 | (2 * v93);
        v103 = vcvtps_u32_f32(v99 / v100);
        if (v102 <= v103)
          v104 = v103;
        else
          v104 = v102;
        if (v104 == 1)
        {
          v104 = 2;
        }
        else if ((v104 & (v104 - 1)) != 0)
        {
          v104 = std::__next_prime(v104);
          v93 = *(_QWORD *)(v14 + 2272);
        }
        if (v104 <= v93)
        {
          if (v104 >= v93)
            goto LABEL_219;
          v117 = vcvtps_u32_f32((float)*(unint64_t *)(v14 + 2288) / *(float *)(v14 + 2296));
          if (v93 < 3 || (v118 = (uint8x8_t)vcnt_s8((int8x8_t)v93), v118.i16[0] = vaddlv_u8(v118), v118.u32[0] > 1uLL))
          {
            v117 = std::__next_prime(v117);
          }
          else
          {
            v119 = 1 << -(char)__clz(v117 - 1);
            if (v117 >= 2)
              v117 = v119;
          }
          if (v104 <= v117)
            v104 = v117;
          if (v104 >= v93)
            goto LABEL_219;
          if (!v104)
          {
            v124 = *(void **)(v14 + 2264);
            *(_QWORD *)(v14 + 2264) = 0;
            if (v124)
              operator delete(v124);
            *(_QWORD *)(v14 + 2272) = 0;
            goto LABEL_219;
          }
        }
        if (v104 >> 61)
          goto LABEL_800;
        v105 = operator new(8 * v104);
        v106 = *(void **)(v14 + 2264);
        *(_QWORD *)(v14 + 2264) = v105;
        if (v106)
          operator delete(v106);
        v107 = 0;
        *(_QWORD *)(v14 + 2272) = v104;
        do
          *(_QWORD *)(*(_QWORD *)(v14 + 2264) + 8 * v107++) = 0;
        while (v104 != v107);
        v108 = *(_QWORD **)(v14 + 2280);
        if (!v108)
          goto LABEL_219;
        v109 = v14 + 2280;
        v110 = v108[1];
        v111 = v104 - 1;
        if ((v104 & (v104 - 1)) == 0)
        {
          v112 = v110 & v111;
          *(_QWORD *)(*(_QWORD *)(v14 + 2264) + 8 * v112) = v109;
          while (1)
          {
            v113 = (_QWORD *)*v108;
            if (!*v108)
              break;
            v114 = v113[1] & v111;
            if (v114 == v112)
            {
              v108 = (_QWORD *)*v108;
            }
            else
            {
              v115 = *(_QWORD *)(v14 + 2264);
              if (*(_QWORD *)(v115 + 8 * v114))
              {
                *v108 = *v113;
                v116 = 8 * v114;
                *v113 = **(_QWORD **)(*(_QWORD *)(v14 + 2264) + v116);
                **(_QWORD **)(*(_QWORD *)(v14 + 2264) + v116) = v113;
              }
              else
              {
                *(_QWORD *)(v115 + 8 * v114) = v108;
                v108 = v113;
                v112 = v114;
              }
            }
          }
LABEL_219:
          v93 = *(_QWORD *)(v14 + 2272);
          if ((v93 & (v93 - 1)) != 0)
          {
            if (v92 >= v93)
              v56 = v92 % v93;
            else
              v56 = v92;
          }
          else
          {
            v56 = (v93 - 1) & v92;
          }
          goto LABEL_224;
        }
        if (v110 >= v104)
          v110 %= v104;
        *(_QWORD *)(*(_QWORD *)(v14 + 2264) + 8 * v110) = v109;
        v120 = (_QWORD *)*v108;
        if (!*v108)
          goto LABEL_219;
        while (1)
        {
          v122 = v120[1];
          if (v122 >= v104)
            v122 %= v104;
          if (v122 != v110)
          {
            v123 = *(_QWORD *)(v14 + 2264);
            if (!*(_QWORD *)(v123 + 8 * v122))
            {
              *(_QWORD *)(v123 + 8 * v122) = v108;
              goto LABEL_205;
            }
            *v108 = *v120;
            v121 = 8 * v122;
            *v120 = **(_QWORD **)(*(_QWORD *)(v14 + 2264) + v121);
            **(_QWORD **)(*(_QWORD *)(v14 + 2264) + v121) = v120;
            v120 = v108;
          }
          v122 = v110;
LABEL_205:
          v108 = v120;
          v120 = (_QWORD *)*v120;
          v110 = v122;
          if (!v120)
            goto LABEL_219;
        }
      }
      v91 = *(_QWORD *)(*(_QWORD *)v56 + 8);
      if ((v74 & (v74 - 1)) != 0)
      {
        if (v91 >= v74)
          v91 %= v74;
      }
      else
      {
        v91 &= v74 - 1;
      }
      v90 = (unint64_t *)(*v73 + 8 * v91);
    }
    *v90 = v56;
    goto LABEL_145;
  }
  _S8 = a4[5];
  _S9 = a4[6];
  _S10 = 1.0;
  _S11 = a4[7];
  if (!v7)
    goto LABEL_6;
LABEL_3:
  v12 = *v7;
  v406 = v12;
  v13 = v12;
LABEL_329:
  v168 = **(_QWORD ***)(a1 + 8);
  v169 = v168[269];
  if (v13 < (v168[270] - v169) >> 3
    && ((v170 = *(_QWORD *)(v169 + 8 * v13)) != 0 ? (v171 = HIDWORD(v12) == HIDWORD(v170)) : (v171 = 0), v171))
  {
    v173 = v168[272] + 24 * v170;
    v172 = v168[273];
  }
  else
  {
    v172 = v168[273];
    v173 = v172;
  }
  if (v173 == v172)
    v174 = 0;
  else
    v174 = v173;
  if (v174)
  {
    v175 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::ColorStyleCacheKey>> const&>,std::tuple<>>((uint64_t)(v168 + 256), v12, &v406);
    ++v175[3];
  }
  if (!*(_BYTE *)(v174 + 20))
    *(_BYTE *)(v174 + 20) = 1;
  *(_DWORD *)(v174 + 4) = _S8;
  *(_DWORD *)(v174 + 8) = _S9;
  *(_DWORD *)(v174 + 12) = _S11;
  *(float *)(v174 + 16) = _S10;
  *(_BYTE *)v174 = 1;
  v176 = std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>((_QWORD *)(**(_QWORD **)(a1 + 8) + 1968), v174);
  if (v176)
  {
    v177 = *(_QWORD *)(v176 + 40);
    v178 = **(_QWORD **)(a1 + 8);
    if (v177)
    {
      *(_QWORD *)v411 = *(_QWORD *)(v176 + 40);
      v179 = *(_QWORD *)(v178 + 1856);
      if (v177 >= (unint64_t)((*(_QWORD *)(v178 + 1864) - v179) >> 3))
        return;
      v180 = *(_QWORD *)(v179 + 8 * v177);
      if (!v180 || HIDWORD(v177) != HIDWORD(v180))
        return;
      v182 = *(_QWORD *)(v178 + 1880);
      v183 = (_QWORD **)(v182 + 24 * v180);
      if (v183 == *(_QWORD ***)(v178 + 1888) || v182 == 0)
        return;
      v185 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>> const&>,std::tuple<>>(v178 + 1752, v177, v411);
      ++v185[3];
      v186 = *v183;
      if (!v186)
        return;
LABEL_708:
      v362 = v186[1];
      v363 = (_WORD *)v186[9];
      __asm
      {
        FCVT            H0, S8
        FCVT            H1, S9
        FCVT            H2, S11
        FCVT            H3, S10
      }
      *v363 = _H0;
      v363[1] = _H1;
      v363[2] = _H2;
      v363[3] = _H3;
      if (v186[8] > v362)
        v362 = v186[8];
      v186[7] = 0;
      v186[8] = v362;
      return;
    }
  }
  else
  {
    v178 = **(_QWORD **)(a1 + 8);
  }
  memset(v411, 0, sizeof(v411));
  v187 = *(_QWORD *)(v178 + 1840);
  if (*(_QWORD *)(v178 + 1832) == v187)
  {
    v190 = (-1431655765 * ((*(_QWORD *)(v178 + 1888) - *(_QWORD *)(v178 + 1880)) >> 3)) | 0x100000000;
    v191 = *(uint64_t **)(v178 + 1864);
    v192 = *(_QWORD *)(v178 + 1872);
    if ((unint64_t)v191 >= v192)
    {
      v194 = *(char **)(v178 + 1856);
      v195 = ((char *)v191 - v194) >> 3;
      v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 61)
        goto LABEL_801;
      v197 = v192 - (_QWORD)v194;
      if (v197 >> 2 > v196)
        v196 = v197 >> 2;
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8)
        v198 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v198 = v196;
      if (v198)
      {
        if (v198 >> 61)
          goto LABEL_800;
        v199 = (char *)operator new(8 * v198);
      }
      else
      {
        v199 = 0;
      }
      v200 = (uint64_t *)&v199[8 * v195];
      *v200 = v190;
      v193 = v200 + 1;
      if (v191 != (uint64_t *)v194)
      {
        v201 = (char *)v191 - v194 - 8;
        if (v201 < 0x58)
          goto LABEL_808;
        if ((unint64_t)(v194 - v199) < 0x20)
          goto LABEL_808;
        v202 = (v201 >> 3) + 1;
        v203 = &v199[(char *)v191 - v194 - 16];
        v204 = v191 - 2;
        v205 = v202 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v206 = *(_OWORD *)v204;
          *((_OWORD *)v203 - 1) = *((_OWORD *)v204 - 1);
          *(_OWORD *)v203 = v206;
          v203 -= 32;
          v204 -= 4;
          v205 -= 4;
        }
        while (v205);
        v200 -= v202 & 0x3FFFFFFFFFFFFFFCLL;
        v191 -= v202 & 0x3FFFFFFFFFFFFFFCLL;
        if (v202 != (v202 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_808:
          do
          {
            v207 = *--v191;
            *--v200 = v207;
          }
          while (v191 != (uint64_t *)v194);
        }
        v191 = *(uint64_t **)(v178 + 1856);
      }
      *(_QWORD *)(v178 + 1856) = v200;
      *(_QWORD *)(v178 + 1864) = v193;
      *(_QWORD *)(v178 + 1872) = &v199[8 * v198];
      if (v191)
        operator delete(v191);
    }
    else
    {
      *v191 = v190;
      v193 = v191 + 1;
    }
    *(_QWORD *)(v178 + 1864) = v193;
    v189 = *(v193 - 1);
  }
  else
  {
    v188 = *(_QWORD *)(v187 - 8);
    *(_QWORD *)(v178 + 1840) = v187 - 8;
    *(_DWORD *)(*(_QWORD *)(v178 + 1856) + 8 * v188) = -1431655765
                                                     * ((*(_QWORD *)(v178 + 1888) - *(_QWORD *)(v178 + 1880)) >> 3);
    *(_DWORD *)(*(_QWORD *)(v178 + 1856) + 8 * v188 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v178 + 1856)
                                                                                               + 8 * v188
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
    v189 = v188 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v178 + 1856) + 8 * v188 + 4) << 32);
  }
  v208 = *(char **)(v178 + 1888);
  v209 = *(_QWORD *)(v178 + 1896);
  if ((unint64_t)v208 >= v209)
  {
    v214 = *(char **)(v178 + 1880);
    v215 = 0xAAAAAAAAAAAAAAABLL * ((v208 - v214) >> 3) + 1;
    if (v215 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_801;
    v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209 - (_QWORD)v214) >> 3);
    if (2 * v216 > v215)
      v215 = 2 * v216;
    if (v216 >= 0x555555555555555)
      v217 = 0xAAAAAAAAAAAAAAALL;
    else
      v217 = v215;
    if (v217 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_800;
    v218 = (char *)operator new(24 * v217);
    v219 = &v218[8 * ((v208 - v214) >> 3)];
    *(_OWORD *)v219 = *(_OWORD *)v411;
    v220 = *(_QWORD *)&v411[16];
    *((_QWORD *)v219 + 2) = *(_QWORD *)&v411[16];
    if (v220)
    {
      v221 = (unint64_t *)(v220 + 8);
      do
        v222 = __ldxr(v221);
      while (__stxr(v222 + 1, v221));
      v208 = *(char **)(v178 + 1888);
      v214 = *(char **)(v178 + 1880);
    }
    v223 = &v218[24 * v217];
    v213 = v219 + 24;
    if (v208 == v214)
    {
      *(_QWORD *)(v178 + 1880) = v219;
      *(_QWORD *)(v178 + 1888) = v213;
      *(_QWORD *)(v178 + 1896) = v223;
    }
    else
    {
      do
      {
        v224 = *(_OWORD *)(v208 - 24);
        v208 -= 24;
        *(_OWORD *)(v219 - 24) = v224;
        v219 -= 24;
        *((_QWORD *)v219 + 2) = *((_QWORD *)v208 + 2);
        *((_QWORD *)v208 + 1) = 0;
        *((_QWORD *)v208 + 2) = 0;
      }
      while (v208 != v214);
      v214 = *(char **)(v178 + 1880);
      v225 = *(char **)(v178 + 1888);
      *(_QWORD *)(v178 + 1880) = v219;
      *(_QWORD *)(v178 + 1888) = v213;
      *(_QWORD *)(v178 + 1896) = v223;
      while (v225 != v214)
      {
        v226 = (std::__shared_weak_count *)*((_QWORD *)v225 - 1);
        if (v226)
        {
          p_shared_owners = (unint64_t *)&v226->__shared_owners_;
          do
            v228 = __ldaxr(p_shared_owners);
          while (__stlxr(v228 - 1, p_shared_owners));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
            std::__shared_weak_count::__release_weak(v226);
          }
        }
        v225 -= 24;
      }
    }
    if (v214)
      operator delete(v214);
  }
  else
  {
    *(_OWORD *)v208 = *(_OWORD *)v411;
    v210 = *(_QWORD *)&v411[16];
    *((_QWORD *)v208 + 2) = *(_QWORD *)&v411[16];
    if (v210)
    {
      v211 = (unint64_t *)(v210 + 8);
      do
        v212 = __ldxr(v211);
      while (__stxr(v212 + 1, v211));
    }
    v213 = v208 + 24;
  }
  *(_QWORD *)(v178 + 1888) = v213;
  v229 = *(_QWORD *)(v178 + 1912);
  v230 = *(_QWORD *)(v178 + 1920);
  if (v229 < v230)
  {
    *(_QWORD *)v229 = v189;
    v229 += 8;
    v231 = v229;
    goto LABEL_433;
  }
  v232 = *(_BYTE **)(v178 + 1904);
  v233 = (uint64_t)(v229 - (_QWORD)v232) >> 3;
  v234 = v233 + 1;
  if ((unint64_t)(v233 + 1) >> 61)
LABEL_801:
    abort();
  v235 = v230 - (_QWORD)v232;
  if (v235 >> 2 > v234)
    v234 = v235 >> 2;
  if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFF8)
    v236 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v236 = v234;
  if (v236)
  {
    if (v236 >> 61)
      goto LABEL_800;
    v237 = operator new(8 * v236);
  }
  else
  {
    v237 = 0;
  }
  v238 = &v237[8 * v233];
  *v238 = v189;
  v231 = (unint64_t)(v238 + 1);
  if ((_BYTE *)v229 != v232)
  {
    v239 = v229 - (_QWORD)v232 - 8;
    if (v239 < 0x58)
      goto LABEL_809;
    if ((unint64_t)(v232 - v237) < 0x20)
      goto LABEL_809;
    v240 = (v239 >> 3) + 1;
    v241 = &v237[v229 - (_QWORD)v232 - 16];
    v242 = (__int128 *)(v229 - 16);
    v243 = v240 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v244 = *v242;
      *(v241 - 1) = *(v242 - 1);
      *v241 = v244;
      v241 -= 2;
      v242 -= 2;
      v243 -= 4;
    }
    while (v243);
    v238 -= v240 & 0x3FFFFFFFFFFFFFFCLL;
    v229 -= 8 * (v240 & 0x3FFFFFFFFFFFFFFCLL);
    if (v240 != (v240 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_809:
      do
      {
        v245 = *(_QWORD *)(v229 - 8);
        v229 -= 8;
        *--v238 = v245;
      }
      while ((_BYTE *)v229 != v232);
    }
  }
  *(_QWORD *)(v178 + 1904) = v238;
  *(_QWORD *)(v178 + 1912) = v231;
  *(_QWORD *)(v178 + 1920) = &v237[8 * v236];
  if (v232)
    operator delete(v232);
LABEL_433:
  v246 = (uint64_t *)(v178 + 1752);
  *(_QWORD *)(v178 + 1912) = v231;
  v247 = *(_QWORD *)(v178 + 1760);
  if (v247)
  {
    v248 = (uint8x8_t)vcnt_s8((int8x8_t)v247);
    v248.i16[0] = vaddlv_u8(v248);
    if (v248.u32[0] > 1uLL)
    {
      v231 = v189;
      if (v189 >= v247)
        v231 = v189 % v247;
    }
    else
    {
      v231 = (v247 - 1) & v189;
    }
    v249 = *(_QWORD **)(*v246 + 8 * v231);
    if (v249)
    {
      v250 = (_QWORD *)*v249;
      if (v250)
      {
        if (v248.u32[0] < 2uLL)
        {
          while (1)
          {
            v252 = v250[1];
            if (v252 == v189)
            {
              if (v250[2] == v189)
                goto LABEL_492;
            }
            else if ((v252 & (v247 - 1)) != v231)
            {
              goto LABEL_454;
            }
            v250 = (_QWORD *)*v250;
            if (!v250)
              goto LABEL_454;
          }
        }
        do
        {
          v251 = v250[1];
          if (v251 == v189)
          {
            if (v250[2] == v189)
              goto LABEL_492;
          }
          else
          {
            if (v251 >= v247)
              v251 %= v247;
            if (v251 != v231)
              break;
          }
          v250 = (_QWORD *)*v250;
        }
        while (v250);
      }
    }
  }
LABEL_454:
  v229 = (unint64_t)operator new(0x30uLL);
  *(_QWORD *)v229 = 0;
  *(_QWORD *)(v229 + 8) = v189;
  *(_QWORD *)(v229 + 16) = v189;
  *(_OWORD *)(v229 + 24) = xmmword_19FFB3350;
  *(_BYTE *)(v229 + 40) = 0;
  v253 = (float)(unint64_t)(*(_QWORD *)(v178 + 1776) + 1);
  v254 = *(float *)(v178 + 1784);
  if (!v247 || (float)(v254 * (float)v247) < v253)
  {
    v255 = 1;
    if (v247 >= 3)
      v255 = (v247 & (v247 - 1)) != 0;
    v256 = v255 | (2 * v247);
    v257 = vcvtps_u32_f32(v253 / v254);
    if (v256 <= v257)
      v258 = v257;
    else
      v258 = v256;
    if (v258 == 1)
    {
      v258 = 2;
    }
    else if ((v258 & (v258 - 1)) != 0)
    {
      v258 = std::__next_prime(v258);
      v247 = *(_QWORD *)(v178 + 1760);
    }
    if (v258 > v247)
      goto LABEL_466;
    if (v258 < v247)
    {
      v259 = vcvtps_u32_f32((float)*(unint64_t *)(v178 + 1776) / *(float *)(v178 + 1784));
      if (v247 < 3 || (v260 = (uint8x8_t)vcnt_s8((int8x8_t)v247), v260.i16[0] = vaddlv_u8(v260), v260.u32[0] > 1uLL))
      {
        v259 = std::__next_prime(v259);
      }
      else
      {
        v261 = 1 << -(char)__clz(v259 - 1);
        if (v259 >= 2)
          v259 = v261;
      }
      if (v258 <= v259)
        v258 = v259;
      if (v258 < v247)
LABEL_466:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v178 + 1752, v258);
    }
    v247 = *(_QWORD *)(v178 + 1760);
    if ((v247 & (v247 - 1)) != 0)
    {
      if (v189 >= v247)
        v231 = v189 % v247;
      else
        v231 = v189;
    }
    else
    {
      v231 = (v247 - 1) & v189;
    }
  }
  v262 = *v246;
  v263 = *(unint64_t **)(*v246 + 8 * v231);
  if (v263)
  {
    *(_QWORD *)v229 = *v263;
LABEL_490:
    *v263 = v229;
    goto LABEL_491;
  }
  *(_QWORD *)v229 = *(_QWORD *)(v178 + 1768);
  *(_QWORD *)(v178 + 1768) = v229;
  *(_QWORD *)(v262 + 8 * v231) = v178 + 1768;
  if (*(_QWORD *)v229)
  {
    v264 = *(_QWORD *)(*(_QWORD *)v229 + 8);
    if ((v247 & (v247 - 1)) != 0)
    {
      if (v264 >= v247)
        v264 %= v247;
    }
    else
    {
      v264 &= v247 - 1;
    }
    v263 = (unint64_t *)(*v246 + 8 * v264);
    goto LABEL_490;
  }
LABEL_491:
  ++*(_QWORD *)(v178 + 1776);
LABEL_492:
  v265 = *(std::__shared_weak_count **)&v411[16];
  if (*(_QWORD *)&v411[16])
  {
    v266 = (unint64_t *)(*(_QWORD *)&v411[16] + 8);
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  if (!*(_BYTE *)(v174 + 20))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
LABEL_803:
    abort();
  }
  v268 = *(float *)(v174 + 4);
  v269 = *(float *)(v174 + 8);
  v270 = LODWORD(v268) - 0x61C8864680B583EBLL;
  if (v268 == 0.0)
    v270 = 0x9E3779B97F4A7C15;
  v271 = LODWORD(v269) - 0x61C8864680B583EBLL;
  if (v269 == 0.0)
    v271 = 0x9E3779B97F4A7C15;
  v272 = *(float *)(v174 + 12);
  v273 = *(float *)(v174 + 16);
  v274 = (_QWORD *)(v174 + 4);
  v275 = ((v270 >> 2) + (v270 << 6) + v271) ^ v270;
  v276 = LODWORD(v272) - 0x61C8864680B583EBLL;
  if (v272 == 0.0)
    v276 = 0x9E3779B97F4A7C15;
  v277 = (v276 + (v275 << 6) + (v275 >> 2)) ^ v275;
  v278 = LODWORD(v273) - 0x61C8864680B583EBLL;
  if (v273 == 0.0)
    v278 = 0x9E3779B97F4A7C15;
  v279 = (v278 + (v277 << 6) + (v277 >> 2)) ^ v277;
  v280 = (((v279 << 6) + (v279 >> 2) - 0x61C8864680B583EBLL) ^ v279) - 0x61C8864680B583EBLL;
  v281 = *(_QWORD *)(v178 + 1976);
  if (v281)
  {
    v282 = (uint8x8_t)vcnt_s8((int8x8_t)v281);
    v282.i16[0] = vaddlv_u8(v282);
    if (v282.u32[0] > 1uLL)
    {
      v229 = (((v279 << 6) + (v279 >> 2) - 0x61C8864680B583EBLL) ^ v279) - 0x61C8864680B583EBLL;
      if (v280 >= v281)
        v229 = v280 % v281;
    }
    else
    {
      v229 = v280 & (v281 - 1);
    }
    v283 = *(char ***)(*(_QWORD *)(v178 + 1968) + 8 * v229);
    if (v283)
    {
      v284 = *v283;
      if (*v283)
      {
        if (v282.u32[0] < 2uLL)
        {
          while (1)
          {
            v287 = *((_QWORD *)v284 + 1);
            if (v287 == v280)
            {
              if (v284[36])
              {
                if (*(_QWORD *)(v284 + 20) == *v274 && *(_QWORD *)(v284 + 28) == *(_QWORD *)(v174 + 12))
                  goto LABEL_607;
              }
            }
            else if ((v287 & (v281 - 1)) != v229)
            {
              goto LABEL_538;
            }
            v284 = *(char **)v284;
            if (!v284)
              goto LABEL_538;
          }
        }
        do
        {
          v285 = *((_QWORD *)v284 + 1);
          if (v285 == v280)
          {
            if (v284[36])
            {
              if (*(_QWORD *)(v284 + 20) == *v274 && *(_QWORD *)(v284 + 28) == *(_QWORD *)(v174 + 12))
                goto LABEL_607;
            }
          }
          else
          {
            if (v285 >= v281)
              v285 %= v281;
            if (v285 != v229)
              break;
          }
          v284 = *(char **)v284;
        }
        while (v284);
      }
    }
  }
LABEL_538:
  v289 = (char *)operator new(0x30uLL);
  v284 = v289;
  *(_QWORD *)v289 = 0;
  *((_QWORD *)v289 + 1) = v280;
  v289[16] = *(_BYTE *)v174;
  v289[20] = 0;
  v289[36] = 0;
  if (*(_BYTE *)(v174 + 20))
  {
    *(_OWORD *)(v289 + 20) = *(_OWORD *)v274;
    v289[36] = 1;
  }
  *((_QWORD *)v289 + 5) = 0;
  v290 = (float)(unint64_t)(*(_QWORD *)(v178 + 1992) + 1);
  v291 = *(float *)(v178 + 2000);
  if (!v281 || (float)(v291 * (float)v281) < v290)
  {
    v292 = 1;
    if (v281 >= 3)
      v292 = (v281 & (v281 - 1)) != 0;
    v293 = v292 | (2 * v281);
    v294 = vcvtps_u32_f32(v290 / v291);
    if (v293 <= v294)
      v295 = v294;
    else
      v295 = v293;
    if (v295 == 1)
    {
      v295 = 2;
    }
    else if ((v295 & (v295 - 1)) != 0)
    {
      v295 = std::__next_prime(v295);
      v281 = *(_QWORD *)(v178 + 1976);
    }
    if (v295 <= v281)
    {
      if (v295 >= v281)
        goto LABEL_592;
      v308 = vcvtps_u32_f32((float)*(unint64_t *)(v178 + 1992) / *(float *)(v178 + 2000));
      if (v281 < 3 || (v309 = (uint8x8_t)vcnt_s8((int8x8_t)v281), v309.i16[0] = vaddlv_u8(v309), v309.u32[0] > 1uLL))
      {
        v308 = std::__next_prime(v308);
      }
      else
      {
        v310 = 1 << -(char)__clz(v308 - 1);
        if (v308 >= 2)
          v308 = v310;
      }
      if (v295 <= v308)
        v295 = v308;
      if (v295 >= v281)
        goto LABEL_592;
      if (!v295)
      {
        v315 = *(void **)(v178 + 1968);
        *(_QWORD *)(v178 + 1968) = 0;
        if (v315)
          operator delete(v315);
        *(_QWORD *)(v178 + 1976) = 0;
        goto LABEL_592;
      }
    }
    if (v295 >> 61)
      goto LABEL_800;
    v296 = operator new(8 * v295);
    v297 = *(void **)(v178 + 1968);
    *(_QWORD *)(v178 + 1968) = v296;
    if (v297)
      operator delete(v297);
    v298 = 0;
    *(_QWORD *)(v178 + 1976) = v295;
    do
      *(_QWORD *)(*(_QWORD *)(v178 + 1968) + 8 * v298++) = 0;
    while (v295 != v298);
    v299 = *(_QWORD **)(v178 + 1984);
    if (!v299)
      goto LABEL_592;
    v300 = v178 + 1984;
    v301 = v299[1];
    v302 = v295 - 1;
    if ((v295 & (v295 - 1)) == 0)
    {
      v303 = v301 & v302;
      *(_QWORD *)(*(_QWORD *)(v178 + 1968) + 8 * v303) = v300;
      while (1)
      {
        v304 = (_QWORD *)*v299;
        if (!*v299)
          break;
        v305 = v304[1] & v302;
        if (v305 == v303)
        {
          v299 = (_QWORD *)*v299;
        }
        else
        {
          v306 = *(_QWORD *)(v178 + 1968);
          if (*(_QWORD *)(v306 + 8 * v305))
          {
            *v299 = *v304;
            v307 = 8 * v305;
            *v304 = **(_QWORD **)(*(_QWORD *)(v178 + 1968) + v307);
            **(_QWORD **)(*(_QWORD *)(v178 + 1968) + v307) = v304;
          }
          else
          {
            *(_QWORD *)(v306 + 8 * v305) = v299;
            v299 = v304;
            v303 = v305;
          }
        }
      }
LABEL_592:
      v281 = *(_QWORD *)(v178 + 1976);
      if ((v281 & (v281 - 1)) != 0)
      {
        if (v280 >= v281)
          v229 = v280 % v281;
        else
          v229 = v280;
      }
      else
      {
        v229 = (v281 - 1) & v280;
      }
      goto LABEL_597;
    }
    if (v301 >= v295)
      v301 %= v295;
    *(_QWORD *)(*(_QWORD *)(v178 + 1968) + 8 * v301) = v300;
    v311 = (_QWORD *)*v299;
    if (!*v299)
      goto LABEL_592;
    while (1)
    {
      v313 = v311[1];
      if (v313 >= v295)
        v313 %= v295;
      if (v313 != v301)
      {
        v314 = *(_QWORD *)(v178 + 1968);
        if (!*(_QWORD *)(v314 + 8 * v313))
        {
          *(_QWORD *)(v314 + 8 * v313) = v299;
          goto LABEL_578;
        }
        *v299 = *v311;
        v312 = 8 * v313;
        *v311 = **(_QWORD **)(*(_QWORD *)(v178 + 1968) + v312);
        **(_QWORD **)(*(_QWORD *)(v178 + 1968) + v312) = v311;
        v311 = v299;
      }
      v313 = v301;
LABEL_578:
      v299 = v311;
      v311 = (_QWORD *)*v311;
      v301 = v313;
      if (!v311)
        goto LABEL_592;
    }
  }
LABEL_597:
  v316 = *(_QWORD *)(v178 + 1968);
  v317 = *(_QWORD **)(v316 + 8 * v229);
  if (v317)
  {
    *(_QWORD *)v284 = *v317;
LABEL_605:
    *v317 = v284;
    goto LABEL_606;
  }
  *(_QWORD *)v284 = *(_QWORD *)(v178 + 1984);
  *(_QWORD *)(v178 + 1984) = v284;
  *(_QWORD *)(v316 + 8 * v229) = v178 + 1984;
  if (*(_QWORD *)v284)
  {
    v318 = *(_QWORD *)(*(_QWORD *)v284 + 8);
    if ((v281 & (v281 - 1)) != 0)
    {
      if (v318 >= v281)
        v318 %= v281;
    }
    else
    {
      v318 &= v281 - 1;
    }
    v317 = (_QWORD *)(*(_QWORD *)(v178 + 1968) + 8 * v318);
    goto LABEL_605;
  }
LABEL_606:
  ++*(_QWORD *)(v178 + 1992);
LABEL_607:
  *((_QWORD *)v284 + 5) = v189;
  v319 = *(_QWORD *)(v178 + 2016);
  if (v319)
  {
    v320 = (uint8x8_t)vcnt_s8((int8x8_t)v319);
    v320.i16[0] = vaddlv_u8(v320);
    if (v320.u32[0] > 1uLL)
    {
      v229 = v189;
      if (v189 >= v319)
        v229 = v189 % v319;
    }
    else
    {
      v229 = (v319 - 1) & v189;
    }
    v321 = *(uint64_t **)(*(_QWORD *)(v178 + 2008) + 8 * v229);
    if (v321)
    {
      v322 = *v321;
      if (*v321)
      {
        if (v320.u32[0] < 2uLL)
        {
          while (1)
          {
            v324 = *(_QWORD *)(v322 + 8);
            if (v324 == v189)
            {
              if (*(_QWORD *)(v322 + 16) == v189)
                goto LABEL_694;
            }
            else if ((v324 & (v319 - 1)) != v229)
            {
              goto LABEL_628;
            }
            v322 = *(_QWORD *)v322;
            if (!v322)
              goto LABEL_628;
          }
        }
        do
        {
          v323 = *(_QWORD *)(v322 + 8);
          if (v323 == v189)
          {
            if (*(_QWORD *)(v322 + 16) == v189)
              goto LABEL_694;
          }
          else
          {
            if (v323 >= v319)
              v323 %= v319;
            if (v323 != v229)
              break;
          }
          v322 = *(_QWORD *)v322;
        }
        while (v322);
      }
    }
  }
LABEL_628:
  v322 = (uint64_t)operator new(0x30uLL);
  *(_QWORD *)v322 = 0;
  *(_QWORD *)(v322 + 8) = v189;
  *(_QWORD *)(v322 + 16) = v189;
  *(_QWORD *)(v322 + 24) = 0;
  *(_QWORD *)(v322 + 32) = 0;
  *(_QWORD *)(v322 + 40) = 0;
  v325 = (float)(unint64_t)(*(_QWORD *)(v178 + 2032) + 1);
  v326 = *(float *)(v178 + 2040);
  if ((((float)(v326 * (float)v319) >= v325) & ~(v319 == 0)) == 0)
  {
    v327 = 1;
    if (v319 >= 3)
      v327 = (v319 & (v319 - 1)) != 0;
    v328 = v327 | (2 * v319);
    v329 = vcvtps_u32_f32(v325 / v326);
    if (v328 <= v329)
      v330 = v329;
    else
      v330 = v328;
    if (v330 == 1)
    {
      v330 = 2;
    }
    else if ((v330 & (v330 - 1)) != 0)
    {
      v330 = std::__next_prime(v330);
      v319 = *(_QWORD *)(v178 + 2016);
    }
    if (v330 <= v319)
    {
      if (v330 >= v319)
        goto LABEL_679;
      v343 = vcvtps_u32_f32((float)*(unint64_t *)(v178 + 2032) / *(float *)(v178 + 2040));
      if (v319 < 3 || (v344 = (uint8x8_t)vcnt_s8((int8x8_t)v319), v344.i16[0] = vaddlv_u8(v344), v344.u32[0] > 1uLL))
      {
        v343 = std::__next_prime(v343);
      }
      else
      {
        v345 = 1 << -(char)__clz(v343 - 1);
        if (v343 >= 2)
          v343 = v345;
      }
      if (v330 <= v343)
        v330 = v343;
      if (v330 >= v319)
        goto LABEL_679;
      if (!v330)
      {
        v350 = *(void **)(v178 + 2008);
        *(_QWORD *)(v178 + 2008) = 0;
        if (v350)
          operator delete(v350);
        *(_QWORD *)(v178 + 2016) = 0;
        goto LABEL_679;
      }
    }
    if (v330 >> 61)
      goto LABEL_800;
    v331 = operator new(8 * v330);
    v332 = *(void **)(v178 + 2008);
    *(_QWORD *)(v178 + 2008) = v331;
    if (v332)
      operator delete(v332);
    v333 = 0;
    *(_QWORD *)(v178 + 2016) = v330;
    do
      *(_QWORD *)(*(_QWORD *)(v178 + 2008) + 8 * v333++) = 0;
    while (v330 != v333);
    v334 = *(_QWORD **)(v178 + 2024);
    if (!v334)
      goto LABEL_679;
    v335 = v178 + 2024;
    v336 = v334[1];
    v337 = v330 - 1;
    if ((v330 & (v330 - 1)) == 0)
    {
      v338 = v336 & v337;
      *(_QWORD *)(*(_QWORD *)(v178 + 2008) + 8 * v338) = v335;
      while (1)
      {
        v339 = (_QWORD *)*v334;
        if (!*v334)
          break;
        v340 = v339[1] & v337;
        if (v340 == v338)
        {
          v334 = (_QWORD *)*v334;
        }
        else
        {
          v341 = *(_QWORD *)(v178 + 2008);
          if (*(_QWORD *)(v341 + 8 * v340))
          {
            *v334 = *v339;
            v342 = 8 * v340;
            *v339 = **(_QWORD **)(*(_QWORD *)(v178 + 2008) + v342);
            **(_QWORD **)(*(_QWORD *)(v178 + 2008) + v342) = v339;
          }
          else
          {
            *(_QWORD *)(v341 + 8 * v340) = v334;
            v334 = v339;
            v338 = v340;
          }
        }
      }
LABEL_679:
      v319 = *(_QWORD *)(v178 + 2016);
      if ((v319 & (v319 - 1)) != 0)
      {
        if (v189 >= v319)
          v229 = v189 % v319;
        else
          v229 = v189;
      }
      else
      {
        v229 = (v319 - 1) & v189;
      }
      goto LABEL_684;
    }
    if (v336 >= v330)
      v336 %= v330;
    *(_QWORD *)(*(_QWORD *)(v178 + 2008) + 8 * v336) = v335;
    v346 = (_QWORD *)*v334;
    if (!*v334)
      goto LABEL_679;
    while (1)
    {
      v348 = v346[1];
      if (v348 >= v330)
        v348 %= v330;
      if (v348 != v336)
      {
        v349 = *(_QWORD *)(v178 + 2008);
        if (!*(_QWORD *)(v349 + 8 * v348))
        {
          *(_QWORD *)(v349 + 8 * v348) = v334;
          goto LABEL_665;
        }
        *v334 = *v346;
        v347 = 8 * v348;
        *v346 = **(_QWORD **)(*(_QWORD *)(v178 + 2008) + v347);
        **(_QWORD **)(*(_QWORD *)(v178 + 2008) + v347) = v346;
        v346 = v334;
      }
      v348 = v336;
LABEL_665:
      v334 = v346;
      v346 = (_QWORD *)*v346;
      v336 = v348;
      if (!v346)
        goto LABEL_679;
    }
  }
LABEL_684:
  v351 = *(_QWORD *)(v178 + 2008);
  v352 = *(uint64_t **)(v351 + 8 * v229);
  if (v352)
  {
    *(_QWORD *)v322 = *v352;
  }
  else
  {
    *(_QWORD *)v322 = *(_QWORD *)(v178 + 2024);
    *(_QWORD *)(v178 + 2024) = v322;
    *(_QWORD *)(v351 + 8 * v229) = v178 + 2024;
    if (!*(_QWORD *)v322)
      goto LABEL_693;
    v353 = *(_QWORD *)(*(_QWORD *)v322 + 8);
    if ((v319 & (v319 - 1)) != 0)
    {
      if (v353 >= v319)
        v353 %= v319;
    }
    else
    {
      v353 &= v319 - 1;
    }
    v352 = (uint64_t *)(*(_QWORD *)(v178 + 2008) + 8 * v353);
  }
  *v352 = v322;
LABEL_693:
  ++*(_QWORD *)(v178 + 2032);
LABEL_694:
  *(_BYTE *)(v322 + 24) = *(_BYTE *)v174;
  if (*(unsigned __int8 *)(v322 + 44) == *(unsigned __int8 *)(v174 + 20))
  {
    if (*(_BYTE *)(v322 + 44))
    {
      *(_DWORD *)(v322 + 28) = *(_DWORD *)(v174 + 4);
      *(_DWORD *)(v322 + 32) = *(_DWORD *)(v174 + 8);
      *(_DWORD *)(v322 + 36) = *(_DWORD *)(v174 + 12);
      *(_DWORD *)(v322 + 40) = *(_DWORD *)(v174 + 16);
    }
  }
  else if (*(_BYTE *)(v322 + 44))
  {
    *(_BYTE *)(v322 + 44) = 0;
  }
  else
  {
    *(_OWORD *)(v322 + 28) = *(_OWORD *)v274;
    *(_BYTE *)(v322 + 44) = 1;
  }
  v354 = **(_QWORD **)(a1 + 8);
  v355 = *(_QWORD *)(v354 + 1864);
  v356 = *(_QWORD *)(v354 + 1856);
  *(_QWORD *)v411 = v189;
  if (v189 >= (unint64_t)((v355 - v356) >> 3))
    return;
  v357 = *(_QWORD *)(v356 + 8 * v189);
  if (!v357)
    return;
  if (HIDWORD(v189) != HIDWORD(v357))
    return;
  v358 = (_QWORD *)(*(_QWORD *)(v354 + 1880) + 24 * v357);
  if (v358 == *(_QWORD **)(v354 + 1888))
    return;
  v186 = (_QWORD *)operator new();
  v359 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v186, qword_1EE54A548, 2, 0, 6, 1);
  v359[25] = ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
  *v359 = &off_1E42B9CD0;
  v360 = *(_QWORD *)(v354 + 1936);
  if (v360)
  {
    v361 = (uint8x8_t)vcnt_s8((int8x8_t)v360);
    v361.i16[0] = vaddlv_u8(v361);
    if (v361.u32[0] > 1uLL)
    {
      v322 = v189;
      if (v189 >= v360)
        v322 = v189 % v360;
    }
    else
    {
      v322 = (v360 - 1) & v189;
    }
    v371 = *(_QWORD ***)(*(_QWORD *)(v354 + 1928) + 8 * v322);
    if (v371)
    {
      v372 = *v371;
      if (*v371)
      {
        if (v361.u32[0] < 2uLL)
        {
          while (1)
          {
            v374 = v372[1];
            if (v374 == v189)
            {
              if (v372[2] == v189)
                goto LABEL_796;
            }
            else if ((v374 & (v360 - 1)) != v322)
            {
              goto LABEL_730;
            }
            v372 = (_QWORD *)*v372;
            if (!v372)
              goto LABEL_730;
          }
        }
        do
        {
          v373 = v372[1];
          if (v373 == v189)
          {
            if (v372[2] == v189)
              goto LABEL_796;
          }
          else
          {
            if (v373 >= v360)
              v373 %= v360;
            if (v373 != v322)
              break;
          }
          v372 = (_QWORD *)*v372;
        }
        while (v372);
      }
    }
  }
LABEL_730:
  v372 = operator new(0x20uLL);
  *v372 = 0;
  v372[1] = v189;
  v372[2] = v189;
  v372[3] = 0;
  v375 = (float)(unint64_t)(*(_QWORD *)(v354 + 1952) + 1);
  v376 = (_QWORD *)(v354 + 1944);
  v377 = *(float *)(v354 + 1960);
  if ((((float)(v377 * (float)v360) >= v375) & ~(v360 == 0)) != 0)
  {
    v189 = v322;
    goto LABEL_786;
  }
  v378 = 1;
  if (v360 >= 3)
    v378 = (v360 & (v360 - 1)) != 0;
  v379 = v378 | (2 * v360);
  v380 = vcvtps_u32_f32(v375 / v377);
  if (v379 <= v380)
    v381 = v380;
  else
    v381 = v379;
  if (v381 == 1)
  {
    v381 = 2;
  }
  else if ((v381 & (v381 - 1)) != 0)
  {
    v381 = std::__next_prime(v381);
    v360 = *(_QWORD *)(v354 + 1936);
  }
  if (v381 <= v360)
  {
    if (v381 >= v360)
      goto LABEL_782;
    v393 = vcvtps_u32_f32((float)*(unint64_t *)(v354 + 1952) / *(float *)(v354 + 1960));
    if (v360 < 3 || (v394 = (uint8x8_t)vcnt_s8((int8x8_t)v360), v394.i16[0] = vaddlv_u8(v394), v394.u32[0] > 1uLL))
    {
      v393 = std::__next_prime(v393);
    }
    else
    {
      v395 = 1 << -(char)__clz(v393 - 1);
      if (v393 >= 2)
        v393 = v395;
    }
    if (v381 <= v393)
      v381 = v393;
    if (v381 >= v360)
      goto LABEL_782;
    if (!v381)
    {
      v400 = *(void **)(v354 + 1928);
      *(_QWORD *)(v354 + 1928) = 0;
      if (v400)
        operator delete(v400);
      *(_QWORD *)(v354 + 1936) = 0;
      goto LABEL_782;
    }
  }
  if (v381 >> 61)
LABEL_800:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v382 = operator new(8 * v381);
  v383 = *(void **)(v354 + 1928);
  *(_QWORD *)(v354 + 1928) = v382;
  if (v383)
    operator delete(v383);
  v384 = 0;
  *(_QWORD *)(v354 + 1936) = v381;
  do
    *(_QWORD *)(*(_QWORD *)(v354 + 1928) + 8 * v384++) = 0;
  while (v381 != v384);
  v385 = (_QWORD *)*v376;
  if (!*v376)
    goto LABEL_782;
  v386 = v385[1];
  v387 = v381 - 1;
  if ((v381 & (v381 - 1)) != 0)
  {
    if (v386 >= v381)
      v386 %= v381;
    *(_QWORD *)(*(_QWORD *)(v354 + 1928) + 8 * v386) = v376;
    v396 = (_QWORD *)*v385;
    if (!*v385)
      goto LABEL_782;
    while (1)
    {
      v398 = v396[1];
      if (v398 >= v381)
        v398 %= v381;
      if (v398 != v386)
      {
        v399 = *(_QWORD *)(v354 + 1928);
        if (!*(_QWORD *)(v399 + 8 * v398))
        {
          *(_QWORD *)(v399 + 8 * v398) = v385;
          goto LABEL_768;
        }
        *v385 = *v396;
        v397 = 8 * v398;
        *v396 = **(_QWORD **)(*(_QWORD *)(v354 + 1928) + v397);
        **(_QWORD **)(*(_QWORD *)(v354 + 1928) + v397) = v396;
        v396 = v385;
      }
      v398 = v386;
LABEL_768:
      v385 = v396;
      v396 = (_QWORD *)*v396;
      v386 = v398;
      if (!v396)
        goto LABEL_782;
    }
  }
  v388 = v386 & v387;
  *(_QWORD *)(*(_QWORD *)(v354 + 1928) + 8 * v388) = v376;
  while (1)
  {
    v389 = (_QWORD *)*v385;
    if (!*v385)
      break;
    v390 = v389[1] & v387;
    if (v390 == v388)
    {
      v385 = (_QWORD *)*v385;
    }
    else
    {
      v391 = *(_QWORD *)(v354 + 1928);
      if (*(_QWORD *)(v391 + 8 * v390))
      {
        *v385 = *v389;
        v392 = 8 * v390;
        *v389 = **(_QWORD **)(*(_QWORD *)(v354 + 1928) + v392);
        **(_QWORD **)(*(_QWORD *)(v354 + 1928) + v392) = v389;
      }
      else
      {
        *(_QWORD *)(v391 + 8 * v390) = v385;
        v385 = v389;
        v388 = v390;
      }
    }
  }
LABEL_782:
  v360 = *(_QWORD *)(v354 + 1936);
  if ((v360 & (v360 - 1)) != 0)
  {
    if (v189 >= v360)
      v189 %= v360;
  }
  else
  {
    v189 &= v360 - 1;
  }
LABEL_786:
  v401 = *(_QWORD *)(v354 + 1928);
  v402 = *(_QWORD **)(v401 + 8 * v189);
  if (v402)
  {
    *v372 = *v402;
LABEL_794:
    *v402 = v372;
    goto LABEL_795;
  }
  *v372 = *v376;
  *v376 = v372;
  *(_QWORD *)(v401 + 8 * v189) = v376;
  if (*v372)
  {
    v403 = *(_QWORD *)(*v372 + 8);
    if ((v360 & (v360 - 1)) != 0)
    {
      if (v403 >= v360)
        v403 %= v360;
    }
    else
    {
      v403 &= v360 - 1;
    }
    v402 = (_QWORD *)(*(_QWORD *)(v354 + 1928) + 8 * v403);
    goto LABEL_794;
  }
LABEL_795:
  ++*(_QWORD *)(v354 + 1952);
LABEL_796:
  v404 = v372[3];
  v372[3] = v186;
  if (v404)
    (*(void (**)(uint64_t))(*(_QWORD *)v404 + 8))(v404);
  v405 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>> const&>,std::tuple<>>(v354 + 1752, *(unint64_t *)v411, v411);
  ++v405[3];
  *v358 = v186;
  if (v186)
    goto LABEL_708;
}

void sub_19FC4F5A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19FC4F604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  operator delete(v17);
  md::components::Material::~Material((md::components::Material *)&a17);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleRouteLineMaskDataKeyHandle>(gdc::Entity,md::ls::StyleRouteLineMaskDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleRouteLineMaskDataKeyHandle>(gdc::Entity,md::ls::StyleRouteLineMaskDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42819A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleRouteLineMaskDataKeyHandle>(gdc::Entity,md::ls::StyleRouteLineMaskDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42819A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleRouteLineMaskDataKeyHandle>(gdc::Entity,md::ls::StyleRouteLineMaskDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

unsigned __int8 *md::Label::updateClusterState(unsigned __int8 *result, md::LabelManager *a2, int a3, int a4)
{
  unsigned int v4;
  int v5;
  char v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  char v10;
  unint64_t v12;
  uint64_t v13;
  md::LabelAnimator *v14;
  md::LabelPart *v15;
  _BYTE v16[56];

  v4 = result[1106];
  v5 = 2 * (v4 != 1);
  if (a4)
    v6 = 1;
  else
    v6 = result[1106];
  if (!a4)
    v5 = 0;
  if (v4 == 7)
    v7 = 0;
  else
    v7 = 6;
  if (v4 <= 3)
    v8 = 3;
  else
    v8 = 0;
  if (v4 >= 5)
    v8 = 5;
  if (a3 == 37)
    LOBYTE(v4) = 4;
  else
    v8 = 0;
  if (a3 == 7)
    LOBYTE(v4) = 7;
  else
    v7 = v8;
  if (a3 == 6)
    LOBYTE(v4) = v6;
  else
    v5 = v7;
  if (v5 != result[1107])
  {
    v9 = result;
    result[1107] = v5;
    result[1108] = v4;
    v10 = v5 - 2;
    if ((v5 - 2) <= 4 && ((0x1Bu >> v10) & 1) != 0)
    {
      v12 = 0x1716141415uLL >> (8 * v10);
      v13 = operator new();
      md::LabelAnimator::LabelAnimator(v13, a2, (md::Label *)v9);
      v14 = (md::LabelAnimator *)*((_QWORD *)v9 + 148);
      *((_QWORD *)v9 + 148) = v13;
      if (v14)
      {
        md::LabelAnimator::~LabelAnimator(v14);
        MEMORY[0x1A1AF4E00]();
      }
      v15 = (md::LabelPart *)*((_QWORD *)v9 + 34);
      (*(void (**)(md::LabelPart *))(*(_QWORD *)v15 + 192))(v15);
      md::LabelPartContent::LabelPartContent((md::LabelPartContent *)v16, v15);
      __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t md::NullLabelPart::layoutForStaging()
{
  return 37;
}

uint64_t md::NullLabelPart::isNullLabelPart(md::NullLabelPart *this)
{
  return 1;
}

uint64_t md::NullLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void md::NullLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "NullLabelPart");
}

void md::NullLabelPart::populateDebugNode(md::NullLabelPart *this, gdc::DebugTreeNode *a2)
{
  uint64_t v3;
  std::string __p;
  int v5;
  char v6[32];

  v6[23] = 17;
  strcpy(v6, "Is Null LabelPart");
  memset(&__p, 0, sizeof(__p));
  v5 = 4;
  std::string::__assign_external(&__p, " ");
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v6, (uint64_t)&v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t md::NullLabelPart::publicName(md::NullLabelPart *this)
{
  return 0;
}

void sub_19FC4FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  void *v23;
  void *v24;
  void *v25;

  v25 = v24;

  _Block_object_dispose(&a18, 8);
  a9.super_class = (Class)MDDisplayLayer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FC50C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19FC50D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC51548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC51598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC515E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC51648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FC516A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC51C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FC51CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC52000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC52098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC5217C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27436(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27437(uint64_t a1)
{

}

void sub_19FC527F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC52864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC528D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void MDDisplayLayerSwapchainProvider::~MDDisplayLayerSwapchainProvider(MDDisplayLayerSwapchainProvider *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;

  *(_QWORD *)this = &off_1E426EE40;

  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 28);
  if (v4)
  {
    v5 = *((_QWORD *)this + 29);
    v6 = (void *)*((_QWORD *)this + 28);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v4;
    operator delete(v6);
  }
  v10 = (void *)*((_QWORD *)this + 25);
  if (v10)
  {
    *((_QWORD *)this + 26) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 22);
  if (v11)
  {
    *((_QWORD *)this + 23) = v11;
    operator delete(v11);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

MDDisplayLayerSwapchainProvider **std::unique_ptr<MDDisplayLayerSwapchainProvider>::~unique_ptr[abi:nn180100](MDDisplayLayerSwapchainProvider **a1)
{
  MDDisplayLayerSwapchainProvider *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MDDisplayLayerSwapchainProvider::~MDDisplayLayerSwapchainProvider(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void std::__shared_ptr_pointer<MDDisplayLayerRendererProvider *,std::shared_ptr<MDDisplayLayerRendererProvider>::__shared_ptr_default_delete<MDDisplayLayerRendererProvider,MDDisplayLayerRendererProvider>,std::allocator<MDDisplayLayerRendererProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<MDDisplayLayerRendererProvider *,std::shared_ptr<MDDisplayLayerRendererProvider>::__shared_ptr_default_delete<MDDisplayLayerRendererProvider,MDDisplayLayerRendererProvider>,std::allocator<MDDisplayLayerRendererProvider>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {

    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t MDDisplayLayerRendererProvider::renderer(id *this)
{
  return objc_msgSend(this[1], "renderer");
}

uint64_t MDDisplayLayerRendererProvider::signpost(id *this)
{
  return objc_msgSend(this[1], "signpost");
}

void std::__shared_ptr_pointer<MDDisplayLayerSwapchainProvider *,std::shared_ptr<MDDisplayLayerSwapchainProvider>::__shared_ptr_default_delete<MDDisplayLayerSwapchainProvider,MDDisplayLayerSwapchainProvider>,std::allocator<MDDisplayLayerSwapchainProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

MDDisplayLayerSwapchainProvider *std::__shared_ptr_pointer<MDDisplayLayerSwapchainProvider *,std::shared_ptr<MDDisplayLayerSwapchainProvider>::__shared_ptr_default_delete<MDDisplayLayerSwapchainProvider,MDDisplayLayerSwapchainProvider>,std::allocator<MDDisplayLayerSwapchainProvider>>::__on_zero_shared(uint64_t a1)
{
  MDDisplayLayerSwapchainProvider *result;

  result = *(MDDisplayLayerSwapchainProvider **)(a1 + 24);
  if (result)
  {
    MDDisplayLayerSwapchainProvider::~MDDisplayLayerSwapchainProvider(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

unint64_t MDDisplayLayerSwapchainProvider::nextDrawable(id *this)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v68;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)objc_msgSend(this[37], "swapchain") + 24))(&v68);
  if ((_QWORD)v68)
  {
    v2 = this[23];
    if (this[22] == v2)
    {
      v6 = ((unint64_t)((_BYTE *)this[29] - (_BYTE *)this[28]) >> 4) | 0x100000000;
      v8 = (uint64_t *)this[26];
      v7 = (uint64_t *)this[27];
      if (v8 >= v7)
      {
        v10 = (uint64_t *)this[25];
        v11 = v8 - v10;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_86;
        v13 = (char *)v7 - (char *)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            goto LABEL_87;
          v15 = operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = (uint64_t *)&v15[8 * v11];
        v17 = &v15[8 * v14];
        *v16 = v6;
        v9 = v16 + 1;
        if (v8 == v10)
        {
          v10 = v8;
        }
        else
        {
          v18 = (char *)v8 - (char *)v10 - 8;
          if (v18 < 0x58)
            goto LABEL_90;
          if ((unint64_t)((char *)v10 - v15) < 0x20)
            goto LABEL_90;
          v19 = (v18 >> 3) + 1;
          v20 = &v15[8 * v11 - 16];
          v21 = v8 - 2;
          v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v23 = *(_OWORD *)v21;
            *(v20 - 1) = *((_OWORD *)v21 - 1);
            *v20 = v23;
            v20 -= 2;
            v21 -= 4;
            v22 -= 4;
          }
          while (v22);
          v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
          v8 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
          if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_90:
            do
            {
              v24 = *--v8;
              *--v16 = v24;
            }
            while (v8 != v10);
            v10 = (uint64_t *)this[25];
          }
        }
        this[25] = v16;
        this[26] = v9;
        this[27] = v17;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v8 = v6;
        v9 = v8 + 1;
      }
      this[26] = v9;
      v4 = *(v9 - 1);
    }
    else
    {
      v3 = *(v2 - 1);
      this[23] = v2 - 1;
      *((_DWORD *)this[25] + 2 * v3) = (unint64_t)((_BYTE *)this[29] - (_BYTE *)this[28]) >> 4;
      *((_DWORD *)this[25] + 2 * v3 + 1) = (((unint64_t)*((unsigned int *)this[25] + 2 * v3 + 1) << 32)
                                          + 0x100000000) >> 32;
      v4 = v3 | ((unint64_t)*((unsigned int *)this[25] + 2 * v3 + 1) << 32);
    }
    v26 = (char *)this[29];
    v25 = (char *)this[30];
    if (v26 >= v25)
    {
      v31 = (char *)this[28];
      v32 = (v26 - v31) >> 4;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60)
        goto LABEL_86;
      v34 = v25 - v31;
      if (v34 >> 3 > v33)
        v33 = v34 >> 3;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35 >> 60)
        goto LABEL_87;
      v36 = (char *)operator new(16 * v35);
      v37 = &v36[16 * v32];
      v38 = *((_QWORD *)&v68 + 1);
      *(_OWORD *)v37 = v68;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        v31 = (char *)this[28];
        v26 = (char *)this[29];
      }
      v41 = &v36[16 * v35];
      v30 = v37 + 16;
      if (v26 == v31)
      {
        this[28] = v37;
        this[29] = v30;
        this[30] = v41;
      }
      else
      {
        do
        {
          v42 = *((_OWORD *)v26 - 1);
          v26 -= 16;
          *((_OWORD *)v37 - 1) = v42;
          v37 -= 16;
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v26 + 1) = 0;
        }
        while (v26 != v31);
        v31 = (char *)this[28];
        v43 = (char *)this[29];
        this[28] = v37;
        this[29] = v30;
        this[30] = v41;
        while (v43 != v31)
        {
          v44 = (std::__shared_weak_count *)*((_QWORD *)v43 - 1);
          if (v44)
          {
            p_shared_owners = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v43 -= 16;
        }
      }
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_QWORD *)v26 = v68;
      v27 = *((_QWORD *)&v68 + 1);
      *((_QWORD *)v26 + 1) = *((_QWORD *)&v68 + 1);
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = v26 + 16;
    }
    this[29] = v30;
    v48 = (char *)this[32];
    v47 = (char *)this[33];
    if (v48 < v47)
    {
      *(_QWORD *)v48 = v4;
      v49 = v48 + 8;
      goto LABEL_80;
    }
    v50 = (char *)this[31];
    v51 = (v48 - v50) >> 3;
    v52 = v51 + 1;
    if (!((unint64_t)(v51 + 1) >> 61))
    {
      v53 = v47 - v50;
      if (v53 >> 2 > v52)
        v52 = v53 >> 2;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (!v54)
      {
        v55 = 0;
LABEL_71:
        v56 = &v55[8 * v51];
        v57 = &v55[8 * v54];
        *v56 = v4;
        v49 = v56 + 1;
        if (v48 != v50)
        {
          v58 = v48 - v50 - 8;
          if (v58 < 0x58)
            goto LABEL_91;
          if ((unint64_t)(v50 - v55) < 0x20)
            goto LABEL_91;
          v59 = (v58 >> 3) + 1;
          v60 = &v55[8 * v51 - 16];
          v61 = v48 - 16;
          v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v63 = *(_OWORD *)v61;
            *(v60 - 1) = *((_OWORD *)v61 - 1);
            *v60 = v63;
            v60 -= 2;
            v61 -= 32;
            v62 -= 4;
          }
          while (v62);
          v56 -= v59 & 0x3FFFFFFFFFFFFFFCLL;
          v48 -= 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
          if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
            {
              v64 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *--v56 = v64;
            }
            while (v48 != v50);
          }
        }
        this[31] = v56;
        this[32] = v49;
        this[33] = v57;
        if (v50)
          operator delete(v50);
LABEL_80:
        this[32] = v49;
        v5 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
        if (!*((_QWORD *)&v68 + 1))
          return v4;
        goto LABEL_81;
      }
      if (!(v54 >> 61))
      {
        v55 = operator new(8 * v54);
        goto LABEL_71;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_86:
    abort();
  }
  v4 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (!*((_QWORD *)&v68 + 1))
    return v4;
LABEL_81:
  v65 = (unint64_t *)&v5->__shared_owners_;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v4;
}

void sub_19FC52FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MDDisplayLayerSwapchainProvider::resolve(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 200);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 208) - v5) >> 3)
    && (v6 = *(_QWORD *)(v5 + 8 * a2)) != 0
    && HIDWORD(a2) == HIDWORD(v6)
    && (v7 = (uint64_t *)(*(_QWORD *)(a1 + 224) + 16 * v6), v7 != *(uint64_t **)(a1 + 232)))
  {
    v8 = *v7;
  }
  else
  {
    v8 = 0;
  }
  std::__shared_mutex_base::unlock_shared(v4);
  return v8;
}

void MDDisplayLayerSwapchainProvider::cleanup(MDDisplayLayerSwapchainProvider *this)
{
  uint64_t i;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  for (i = *((_QWORD *)this + 32); i != *((_QWORD *)this + 31); *((_QWORD *)this + 23) = v3)
  {
    v5 = *(_QWORD *)(i - 8);
    i -= 8;
    v4 = v5;
    v6 = *((_QWORD *)this + 25);
    v7 = *((_QWORD *)this + 26) - v6;
    v8 = v6 + 8 * v5;
    v9 = (unint64_t)*(unsigned int *)(v8 + 4) << 32;
    *(_DWORD *)(v8 + 4) = (v9 + 0x100000000) >> 32;
    *(_QWORD *)(*((_QWORD *)this + 25) + 8 * v5) = v9 & 0xFFFFFFFF00000000 | (v7 >> 3);
    v11 = (char *)*((_QWORD *)this + 23);
    v10 = *((_QWORD *)this + 24);
    if ((unint64_t)v11 < v10)
    {
      *(_QWORD *)v11 = v4;
      v3 = v11 + 8;
    }
    else
    {
      v12 = (char *)*((_QWORD *)this + 22);
      v13 = (v11 - v12) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      v15 = v10 - (_QWORD)v12;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v17 = operator new(8 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[8 * v13];
      *v18 = v4;
      v3 = v18 + 1;
      if (v11 != v12)
      {
        v19 = v11 - 8 - v12;
        if (v19 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v12 - v17) < 0x20)
          goto LABEL_38;
        v20 = (v19 >> 3) + 1;
        v21 = &v17[8 * v13 - 16];
        v22 = v11 - 16;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v18 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v25 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v18 = v25;
          }
          while (v11 != v12);
        }
      }
      *((_QWORD *)this + 22) = v18;
      *((_QWORD *)this + 23) = v3;
      *((_QWORD *)this + 24) = &v17[8 * v16];
      if (v12)
        operator delete(v12);
    }
  }
  *((_QWORD *)this + 32) = i;
  v26 = *((_QWORD *)this + 28);
  for (j = *((_QWORD *)this + 29); j != v26; j -= 16)
  {
    v28 = *(std::__shared_weak_count **)(j - 8);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  *((_QWORD *)this + 29) = v26;
}

void std::__shared_ptr_pointer<MDDisplayLayerRenderTargetPreparer *,std::shared_ptr<MDDisplayLayerRenderTargetPreparer>::__shared_ptr_default_delete<MDDisplayLayerRenderTargetPreparer,MDDisplayLayerRenderTargetPreparer>,std::allocator<MDDisplayLayerRenderTargetPreparer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<MDDisplayLayerRenderTargetPreparer *,std::shared_ptr<MDDisplayLayerRenderTargetPreparer>::__shared_ptr_default_delete<MDDisplayLayerRenderTargetPreparer,MDDisplayLayerRenderTargetPreparer>,std::allocator<MDDisplayLayerRenderTargetPreparer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void MDDisplayLayerRenderTargetPreparer::~MDDisplayLayerRenderTargetPreparer(id *this)
{

}

{

  JUMPOUT(0x1A1AF4E00);
}

uint64_t MDDisplayLayerRenderTargetPreparer::prepareInteractiveTargets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  objc_msgSend(*(id *)(a1 + 8), "prepareTexture:", a2);
  v3 = objc_msgSend(*(id *)(a1 + 8), "finalRenderTarget");
  objc_msgSend(*(id *)(a1 + 8), "blitRenderTarget");
  return v3;
}

uint64_t MDDisplayLayerRenderTargetPreparer::prepareSnapshotTargets(id *this)
{
  return objc_msgSend(this[1], "finalRenderTarget");
}

void ggl::OuterShadowRibbon::PipelineSetup::~PipelineSetup(ggl::OuterShadowRibbon::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::OuterShadowRibbon::PipelineSetup::constantDataIsEnabled(ggl::OuterShadowRibbon::PipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::OuterShadowRibbon::PipelineSetup::textureIsEnabled(ggl::OuterShadowRibbon::PipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::SignedDistanceFieldGenerator::initializeHypotCache(void)::$_0 &&>>()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  bzero(md::SignedDistanceFieldGenerator::_hypotCache, 0x20200uLL);
  v0 = 0;
  v1 = 1;
  do
  {
    v2 = 0;
    do
    {
      if ((v2 | v0) <= 0xFF)
      {
        if (v2 <= v0)
          v3 = v0;
        else
          v3 = v2;
        if (v2 >= v0)
          v4 = v0;
        else
          v4 = v2;
        if (v3 <= 1)
          LOWORD(v3) = 1;
        md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v3 - 1) * v3) >> 1) + v4] = sqrtf((float)(uint64_t)(v0 * v0 + v2 * v2));
      }
      ++v2;
    }
    while (v1 != v2);
    ++v0;
    ++v1;
  }
  while (v0 != 256);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassToCommandBuffers>(gdc::Entity,md::ls::PassToCommandBuffers &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassToCommandBuffers>(gdc::Entity,md::ls::PassToCommandBuffers &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F120;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassToCommandBuffers>(gdc::Entity,md::ls::PassToCommandBuffers &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F120;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassToCommandBuffers>(gdc::Entity,md::ls::PassToCommandBuffers &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PassToCommandBuffers>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void md::HillshadeLogic::~HillshadeLogic(md::HillshadeLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

void md::HillshadeLogic::debugConsoleString(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_19FC539B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC53BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void VKLineDrawWithOuterStroke(const __CTLine *a1, CGContextRef c)
{
  uint64_t v4;
  uint64_t i;
  const __CTRun *v6;
  const __CFDictionary *Attributes;
  const __CFDictionary *v8;
  const __CTFont *Value;
  const __CTFont *v10;
  CGFont *v11;
  CGFloat Size;
  CGColor *v13;
  CGColor *v14;
  void *v15;
  void *v16;
  float v17;
  CFIndex GlyphCount;
  const CGPoint *PositionsPtr;
  CGPoint *v20;
  const CGGlyph *GlyphsPtr;
  CGGlyph *v22;
  id obj;
  void *v24;
  void *v25;
  void *key;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;
  CFRange v35;
  CFRange v36;

  v34 = *MEMORY[0x1E0C80C00];
  CGContextSaveGState(c);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  CTLineGetGlyphRuns(a1);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v4)
  {
    v27 = *(_QWORD *)v30;
    v25 = (void *)*MEMORY[0x1E0CA85C8];
    key = (void *)*MEMORY[0x1E0CA8188];
    v24 = (void *)*MEMORY[0x1E0CA8550];
    do
    {
      v28 = v4;
      for (i = 0; i != v28; ++i)
      {
        if (*(_QWORD *)v30 != v27)
          objc_enumerationMutation(obj);
        v6 = *(const __CTRun **)(*((_QWORD *)&v29 + 1) + 8 * i);
        Attributes = CTRunGetAttributes(v6);
        v8 = CTRunGetAttributes(v6);
        Value = (const __CTFont *)CFDictionaryGetValue(v8, key);
        v10 = Value;
        if (Value)
        {
          v11 = CTFontCopyGraphicsFont(Value, 0);
          if (v11)
          {
            CGContextSetFont(c, v11);
            CFRelease(v11);
          }
          Size = CTFontGetSize(v10);
          CGContextSetFontSize(c, Size);
        }
        v13 = (CGColor *)CFDictionaryGetValue(Attributes, v25);
        if (v13)
          CGContextSetStrokeColorWithColor(c, v13);
        v14 = (CGColor *)CFDictionaryGetValue(Attributes, v24);
        if (v14)
          CGContextSetFillColorWithColor(c, v14);
        v15 = (void *)CFDictionaryGetValue(Attributes, (const void *)kVKOuterStrokeWidthAttributeName);
        v16 = v15;
        if (v15)
        {
          objc_msgSend(v15, "floatValue");
          CGContextSetLineWidth(c, v17);
        }
        GlyphCount = CTRunGetGlyphCount(v6);
        PositionsPtr = CTRunGetPositionsPtr(v6);
        if (PositionsPtr)
        {
          v20 = 0;
        }
        else
        {
          v20 = (CGPoint *)malloc_type_malloc(16 * GlyphCount, 0x1000040451B5BE8uLL);
          v35.location = 0;
          v35.length = 0;
          CTRunGetPositions(v6, v35, v20);
          PositionsPtr = v20;
        }
        GlyphsPtr = CTRunGetGlyphsPtr(v6);
        if (GlyphsPtr)
        {
          v22 = 0;
        }
        else
        {
          v22 = (CGGlyph *)malloc_type_malloc(16 * GlyphCount, 0x1000040451B5BE8uLL);
          v36.location = 0;
          v36.length = 0;
          CTRunGetGlyphs(v6, v36, v22);
          GlyphsPtr = v22;
        }
        CGContextSetBlendMode(c, kCGBlendModeNormal);
        if (v13 && v16)
        {
          CGContextSetTextDrawingMode(c, kCGTextStroke);
          CGContextShowGlyphsAtPositions(c, GlyphsPtr, PositionsPtr, GlyphCount);
        }
        CGContextSetTextDrawingMode(c, kCGTextFill);
        CGContextShowGlyphsAtPositions(c, GlyphsPtr, PositionsPtr, GlyphCount);
        if (v20)
          free(v20);
        if (v22)
          free(v22);
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v4);
  }

  CGContextRestoreGState(c);
}

void sub_19FC53F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void md::GEOFlyoverTileResourceFetcher::~GEOFlyoverTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::GEOFlyoverTileResourceFetcher::resourceTileForTile@<X0>(uint64_t this@<X0>, const QuadTile *a2@<X1>, uint64_t a3@<X8>, int8x8_t a4@<D0>, int8x8_t a5@<D1>)
{
  int v5;
  unsigned int level;
  unsigned int v7;
  unsigned __int8 type;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned int v15;
  QuadTile v16;

  v5 = *(_DWORD *)(this + 556);
  if (v5 == 92)
  {
    a4.i32[0] = 0;
    a5.i32[0] = a2->_level;
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x100000001, vdup_lane_s8(vceq_s8(a5, a4), 0));
    v11 = *(int32x2_t *)&a2->_yIdx;
    if (a2->_level)
      v12 = a2->_level - 1;
    else
      v12 = 0;
    v16._type = a2->_type;
    v16._level = v12;
    *(int32x2_t *)&v16._yIdx = vshl_s32(v11, vneg_s32(v10));
    return md::TiledGEOResourceFetcher::resourceTileForTile(this, &v16, a3);
  }
  else
  {
    if (v5 == 16)
    {
      level = a2->_level;
      if (level >= 0xE)
      {
        v7 = (level - 14);
        if (level < v7)
          v7 = a2->_level;
        type = a2->_type;
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 8) = type;
        *(_BYTE *)(a3 + 9) = level - v7;
        v9 = vshl_s32(*(int32x2_t *)&a2->_yIdx, vneg_s32(vdup_n_s32(v7)));
LABEL_18:
        *(int32x2_t *)(a3 + 12) = v9;
        return this;
      }
    }
    else if (*(_BYTE *)(this + 592))
    {
      v13 = a2->_level;
      v9 = *(int32x2_t *)&a2->_yIdx;
      v14 = a2->_type;
      if ((int)(v13 - *(_DWORD *)(this + 600)) >= 1 && a2->_level)
      {
        v15 = (v13 - *(_BYTE *)(this + 600));
        if (v13 < v15)
          v15 = a2->_level;
        LOBYTE(v13) = v13 - v15;
        v9 = vshl_s32(v9, vneg_s32(vdup_n_s32(v15)));
      }
      *(_BYTE *)a3 = 1;
      *(_BYTE *)(a3 + 8) = v14;
      *(_BYTE *)(a3 + 9) = v13;
      goto LABEL_18;
    }
    *(_BYTE *)a3 = 0;
  }
  return this;
}

uint64_t md::GEOFlyoverTileResourceFetcher::downloadZoomRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if (*(_DWORD *)(this + 556) == 16)
  {
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 4) = 0xE0000000ELL;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    if (*(_BYTE *)(this + 592))
    {
      v2 = *(_QWORD *)(this + 596);
      *(_QWORD *)(a2 + 4) = v2;
      *(_BYTE *)a2 = 1;
      if (v2 <= 1)
        LODWORD(v2) = 1;
      *(_DWORD *)(a2 + 4) = v2;
    }
  }
  return this;
}

id *md::GEOFlyoverTileResourceFetcher::tileSize@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  id *v2;
  id v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;

  v2 = this;
  v4 = this[76];
  if (v4)
  {
    if (objc_msgSend(this[76], "scale") == 2)
    {
      if (*((float *)v2 + 2) > 1.0)
        v5 = 2;
      else
        v5 = 1;
    }
    else
    {
      v5 = 1;
    }
    this = (id *)objc_msgSend(v2[76], "size");
    v7 = 0x20001000080uLL >> (16 * this);
    if (this >= 3)
      LOWORD(v7) = 0;
    v6 = (v7 & 0x380) / v5;
  }
  else
  {
    v6 = 256;
  }
  v8 = *((_DWORD *)v2 + 139);
  if (v8 != 92 && v8 != 16)
  {
    if (v8 == 15)
    {
      this = (id *)v2[76];
      if (this)
      {
        this = (id *)objc_msgSend(this, "size");
        if (this > 2)
          v6 = 0;
        else
          v6 = (float)((float)dword_1A007D950[this] * 0.5);
        goto LABEL_23;
      }
      v6 = (float)((float)v6 * 0.5);
    }
    else
    {
      v6 >>= 1;
    }
    if (!v4)
      v6 = 256;
  }
LABEL_23:
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v6;
  return this;
}

void md::GEOFlyoverTileResourceFetcher::configurationDidChange(md::GEOFlyoverTileResourceFetcher *this)
{
  void *v2;
  void *v3;
  int v4;
  char v5;

  md::TiledGEOResourceFetcher::configurationDidChange(this);
  if (*((_DWORD *)this + 139) == 15
    && (objc_msgSend(MEMORY[0x1E0D27008], "sharedConfiguration"),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v2, "countryCode"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("CN")),
        v3,
        v2,
        v4))
  {
    if (!*((_BYTE *)this + 592))
      *((_BYTE *)this + 592) = 1;
    *(_QWORD *)((char *)this + 596) = 0x1000000001;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *((_BYTE *)this + 618) = v5;
}

void sub_19FC542EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t md::GEOFlyoverTileResourceFetcher::tileScale(md::GEOFlyoverTileResourceFetcher *this)
{
  if (*((_DWORD *)this + 139) == 92)
    return 1;
  if (*((float *)this + 2) <= 1.0)
    return 1;
  return 2;
}

unint64_t md::GEOFlyoverTileResourceFetcher::tileKey(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = (int *)a3[1];
  v8 = *v6;
  v7 = v6[1];
  v9 = v6[2];
  v10 = *(_DWORD *)(a1 + 556);
  if (v10 == 16)
  {
    v12 = 0;
  }
  else
  {
    if (v10 == 92)
    {
      v11 = GEOTileKeyMake() & 0xFFFFFFFFFFFFFF7FLL;
      goto LABEL_13;
    }
    gdc::ResourceKey::keyData((gdc::ResourceKey *)&v14, a3);
    if (*((_QWORD *)&v14 + 1) - (_QWORD)v14 < 0x14uLL)
      v12 = 0;
    else
      v12 = *(unsigned int *)(a3[1] + 16);
    if ((_QWORD)v14 != v15)
      free((void *)v14);
  }
  gdc::ResourceKey::keyData((gdc::ResourceKey *)&v14, a3);
  if ((_QWORD)v14 != v15)
    free((void *)v14);
  objc_msgSend(v5, "size");
  objc_msgSend(v5, "scale");
  LOBYTE(v14) = GEOTileKeyMakeEmpty();
  *(_QWORD *)((char *)&v14 + 1) = (v8 << 6) | ((unint64_t)(v7 & 0x3FFFFFF) << 32) | v9 & 0x3F | (v12 << 58);
  v11 = v14;
LABEL_13:

  return v11;
}

void sub_19FC54504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::C3mResourceDecoder<md::GEOFlyoverTileResource>::~C3mResourceDecoder(uint64_t a1)
{
  md::C3mResourceDecoder<md::GEOFlyoverTileResource>::~C3mResourceDecoder(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::C3mResourceDecoder<md::GEOFlyoverTileResource>::decode(uint64_t a1@<X0>, const gdc::ResourceKey *a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  BOOL v6;
  _BYTE *v9;
  unint64_t v10;
  double v11;
  double v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  id v20;
  char *v21;
  _QWORD **v22;
  void *v23;
  _QWORD *v24;
  id v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  _QWORD *v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  geo::c3m::Model *v98;
  id *v99;
  __int128 v100;
  __int128 v101;
  char v102;
  void *v103;
  void *v104;
  char *v105;
  char *v106;
  char *v107;
  char v108[8];
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  void *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;

  if (*(_QWORD *)a3)
    v6 = a3[16] == 0;
  else
    v6 = 1;
  if (v6
    || (v9 = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 32))(*(_QWORD *)a3),
        v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a3 + 24))(*(_QWORD *)a3),
        geo::c3m::loadFromChunk((uint64_t *)(a1 + 72), v9, v10, (uint64_t)v108, v11, v12),
        !v108[0]))
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v98 = (geo::c3m::Model *)&v109;
  std::vector<std::shared_ptr<md::GEOVectorTileResource>>::reserve((uint64_t)&v105, 0x4EC4EC4EC4EC4EC5 * ((v114 - (_BYTE *)v113) >> 3));
  v13 = (unsigned __int8 *)v113;
  v14 = v114;
  if (v113 != v114)
  {
    v99 = (id *)(a1 + 8);
    do
    {
      v15 = *v13;
      if ((v15 - 4) < 2 || v15 == 2)
      {
        v17 = (_QWORD **)*((_QWORD *)v13 + 1);
        if (*((_QWORD *)v13 + 2) - (_QWORD)v17 == 32)
        {
          v101 = 0uLL;
          v102 = 0;
          objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", **v17, (*v17)[1] - **v17, 0, v98);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = operator new(0x38uLL);
          v19[1] = 0;
          v19[2] = 0;
          *v19 = &off_1E42DE110;
          v20 = v18;
          v19[3] = &off_1E42B0670;
          v19[4] = &off_1E42B5310;
          v19[5] = v20;
          *(_QWORD *)&v101 = v19 + 3;
          *((_QWORD *)&v101 + 1) = v19;
          md::ImageResourceDecoder::decode(a2, (const gdc::RawResourceSourceData *)&v101, (uint64_t *)&v100);
          v21 = v106;
          if (v106 < v107)
          {
            *(_OWORD *)v106 = v100;
            v106 = v21 + 16;
LABEL_72:

            if (v102)
            {
              if (v103 != v104)
                free(v103);
              v102 = 0;
            }
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
            if (!*((_QWORD *)&v101 + 1))
              goto LABEL_9;
            v60 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v43 = __ldaxr(v60);
            while (__stlxr(v43 - 1, v60));
            goto LABEL_113;
          }
          v44 = v105;
          v45 = (v106 - v105) >> 4;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 60)
            abort();
          v47 = v107 - v105;
          if ((v107 - v105) >> 3 > v46)
            v46 = v47 >> 3;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
            v48 = 0xFFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48 >> 60)
LABEL_160:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v49 = (char *)operator new(16 * v48);
          v50 = &v49[16 * v45];
          *(_OWORD *)v50 = v100;
          v51 = v50 + 16;
          v100 = 0uLL;
          if (v21 == v44)
          {
            v105 = &v49[16 * v45];
            v107 = &v49[16 * v48];
            if (v21)
              goto LABEL_66;
          }
          else
          {
            v52 = v21;
            do
            {
              v53 = *((_OWORD *)v52 - 1);
              v52 -= 16;
              *((_OWORD *)v50 - 1) = v53;
              v50 -= 16;
              *(_QWORD *)v52 = 0;
              *((_QWORD *)v52 + 1) = 0;
            }
            while (v52 != v44);
            v105 = v50;
            v106 = v51;
            v107 = &v49[16 * v48];
            do
            {
              v54 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
              if (v54)
              {
                p_shared_owners = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(p_shared_owners);
                while (__stlxr(v56 - 1, p_shared_owners));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v21 -= 16;
            }
            while (v21 != v44);
            v21 = v44;
            if (v44)
LABEL_66:
              operator delete(v21);
          }
          v57 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
          v106 = v51;
          if (*((_QWORD *)&v100 + 1))
          {
            v58 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          goto LABEL_72;
        }
      }
      else if (!*v13)
      {
        v22 = (_QWORD **)*((_QWORD *)v13 + 1);
        if (*((_QWORD *)v13 + 2) - (_QWORD)v22 == 32)
        {
          v101 = 0uLL;
          v102 = 0;
          objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", **v22, (*v22)[1] - **v22, 0);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = operator new(0x38uLL);
          v24[1] = 0;
          v24[2] = 0;
          *v24 = &off_1E42DE110;
          v25 = v23;
          v24[3] = &off_1E42B0670;
          v24[4] = &off_1E42B5310;
          v24[5] = v25;
          *(_QWORD *)&v101 = v24 + 3;
          *((_QWORD *)&v101 + 1) = v24;
          md::TextureResourceDecoder::decode(v99, a2, (const gdc::RawResourceSourceData *)&v101, &v100);
          v26 = v106;
          if (v106 < v107)
          {
            *(_OWORD *)v106 = v100;
            v106 = v26 + 16;
            goto LABEL_106;
          }
          v61 = v105;
          v62 = (v106 - v105) >> 4;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 60)
            abort();
          v64 = v107 - v105;
          if ((v107 - v105) >> 3 > v63)
            v63 = v64 >> 3;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
            v65 = 0xFFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65 >> 60)
            goto LABEL_160;
          v66 = (char *)operator new(16 * v65);
          v67 = &v66[16 * v62];
          *(_OWORD *)v67 = v100;
          v68 = v67 + 16;
          v100 = 0uLL;
          if (v26 == v61)
          {
            v105 = &v66[16 * v62];
            v107 = &v66[16 * v65];
            if (v26)
              goto LABEL_100;
          }
          else
          {
            v69 = v26;
            do
            {
              v70 = *((_OWORD *)v69 - 1);
              v69 -= 16;
              *((_OWORD *)v67 - 1) = v70;
              v67 -= 16;
              *(_QWORD *)v69 = 0;
              *((_QWORD *)v69 + 1) = 0;
            }
            while (v69 != v61);
            v105 = v67;
            v106 = v68;
            v107 = &v66[16 * v65];
            do
            {
              v71 = (std::__shared_weak_count *)*((_QWORD *)v26 - 1);
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v26 -= 16;
            }
            while (v26 != v61);
            v26 = v61;
            if (v61)
LABEL_100:
              operator delete(v26);
          }
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
          v106 = v68;
          if (*((_QWORD *)&v100 + 1))
          {
            v75 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
LABEL_106:

          if (v102)
          {
            if (v103 != v104)
              free(v103);
            v102 = 0;
          }
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
          if (!*((_QWORD *)&v101 + 1))
            goto LABEL_9;
          v77 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
          do
            v43 = __ldaxr(v77);
          while (__stlxr(v43 - 1, v77));
LABEL_113:
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
          goto LABEL_9;
        }
      }
      v101 = 0uLL;
      v27 = v106;
      if (v106 < v107)
      {
        *(_QWORD *)v106 = 0;
        *((_QWORD *)v27 + 1) = 0;
        v106 = v27 + 16;
        goto LABEL_9;
      }
      v28 = v105;
      v29 = (v106 - v105) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        abort();
      v31 = v107 - v105;
      if ((v107 - v105) >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32 >> 60)
        goto LABEL_160;
      v33 = (char *)operator new(16 * v32);
      v34 = &v33[16 * v29];
      *(_OWORD *)v34 = 0u;
      v35 = v34 + 16;
      v101 = 0u;
      if (v27 == v28)
      {
        v105 = &v33[16 * v29];
        v107 = &v33[16 * v32];
        if (v27)
          goto LABEL_41;
      }
      else
      {
        v36 = v27;
        do
        {
          v37 = *((_OWORD *)v36 - 1);
          v36 -= 16;
          *((_OWORD *)v34 - 1) = v37;
          v34 -= 16;
          *(_QWORD *)v36 = 0;
          *((_QWORD *)v36 + 1) = 0;
        }
        while (v36 != v28);
        v105 = v34;
        v106 = v35;
        v107 = &v33[16 * v32];
        do
        {
          v38 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v27 -= 16;
        }
        while (v27 != v28);
        v27 = v28;
        if (v28)
LABEL_41:
          operator delete(v27);
      }
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      v106 = v35;
      if (*((_QWORD *)&v101 + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        goto LABEL_113;
      }
LABEL_9:
      v13 += 104;
    }
    while (v13 != v14);
  }
  v78 = (char *)operator new(0x360uLL);
  *((_QWORD *)v78 + 1) = 0;
  *((_QWORD *)v78 + 2) = 0;
  *(_QWORD *)v78 = &off_1E42DC9E0;
  v79 = v78 + 32;
  gdc::Resource::Resource((uint64_t)(v78 + 32), (uint64_t)a2);
  *((_QWORD *)v78 + 3) = &off_1E429CD08;
  geo::c3m::Model::Model((geo::c3m::Model *)(v78 + 176), v98);
  *((_QWORD *)v78 + 107) = 0;
  *(_OWORD *)(v78 + 840) = 0u;
  v80 = v105;
  v81 = v106;
  v82 = v106 - v105;
  if (v106 != v105)
  {
    if (v82 < 0)
      abort();
    v83 = operator new(v106 - v105);
    *((_QWORD *)v78 + 105) = v83;
    *((_QWORD *)v78 + 106) = v83;
    *((_QWORD *)v78 + 107) = &v83[2 * (v82 >> 4)];
    v84 = v80;
    do
    {
      *v83 = *(_QWORD *)v84;
      v85 = *((_QWORD *)v84 + 1);
      v83[1] = v85;
      if (v85)
      {
        v86 = (unint64_t *)(v85 + 8);
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      v84 += 16;
      v83 += 2;
    }
    while (v84 != v81);
    *((_QWORD *)v78 + 106) = v83;
    *a4 = v79;
    a4[1] = v78;
    if (!v80)
      goto LABEL_140;
    if (v81 != v80)
    {
      do
      {
        v88 = (std::__shared_weak_count *)*((_QWORD *)v81 - 1);
        if (v88)
        {
          v89 = (unint64_t *)&v88->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        v81 -= 16;
      }
      while (v81 != v80);
      v80 = v105;
    }
    goto LABEL_139;
  }
  *a4 = v79;
  a4[1] = v78;
  if (v80)
LABEL_139:
    operator delete(v80);
LABEL_140:
  if (v108[0])
  {
    v91 = (unsigned __int8 *)v113;
    v92 = v114;
    if (v113 != v114)
    {
      do
      {
        v93 = (_QWORD *)*((_QWORD *)v91 + 1);
        v94 = (_QWORD *)*((_QWORD *)v91 + 2);
        if (v93 != v94)
        {
          do
          {
            v95 = (std::__shared_weak_count *)v93[1];
            if (v95)
            {
              v96 = (unint64_t *)&v95->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            v93 += 4;
          }
          while (v93 != v94);
          v93 = (_QWORD *)*((_QWORD *)v91 + 1);
        }
        if (v93 != *((_QWORD **)v91 + 3))
          free(v93);
        v91 += 104;
      }
      while (v91 != v92);
      v91 = (unsigned __int8 *)v113;
    }
    if (v91 != v115)
      free(v91);
    geo::small_vector_base<geo::c3m::Mesh>::runDestructors((uint64_t)v110, v111);
    if (v110 != v112)
      free(v110);
  }
}

void sub_19FC54E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, geo::c3m::Model *a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)&a13);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a29);
  if (a32)
    geo::c3m::Model::~Model(a9);
  _Unwind_Resume(a1);
}

void md::GEOFlyoverTileResource::~GEOFlyoverTileResource(md::GEOFlyoverTileResource *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_1E429CD08;
  v2 = *((_QWORD *)this + 102);
  if (v2)
  {
    v3 = *((_QWORD *)this + 103);
    v4 = (void *)*((_QWORD *)this + 102);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 102);
    }
    *((_QWORD *)this + 103) = v2;
    operator delete(v4);
  }
  geo::c3m::Model::~Model((md::GEOFlyoverTileResource *)((char *)this + 152));
  v8 = (void *)*((_QWORD *)this + 2);
  if (v8 != *((void **)this + 4))
    free(v8);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_1E429CD08;
  v2 = *((_QWORD *)this + 102);
  if (v2)
  {
    v3 = *((_QWORD *)this + 103);
    v4 = (void *)*((_QWORD *)this + 102);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 102);
    }
    *((_QWORD *)this + 103) = v2;
    operator delete(v4);
  }
  geo::c3m::Model::~Model((md::GEOFlyoverTileResource *)((char *)this + 152));
  v8 = (void *)*((_QWORD *)this + 2);
  if (v8 != *((void **)this + 4))
    free(v8);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::GEOFlyoverTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC9E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::GEOFlyoverTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC9E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::GEOFlyoverTileResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::C3mResourceDecoder<md::GEOFlyoverTileResource>::~C3mResourceDecoder(uint64_t a1)
{
  void ***v2;
  void **v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E4293FB8;
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  v2 = *(void ****)(a1 + 88);
  if (v2)
  {
    do
    {
      v3 = *v2;
      geo::c3m::EdgebreakerDecodeTable::~EdgebreakerDecodeTable(v2 + 4);
      operator delete(v2);
      v2 = (void ***)v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)(a1 + 40) = &off_1E4299000;
  *(_QWORD *)(a1 + 48) = &off_1E42B4D50;

  *(_QWORD *)(a1 + 8) = &off_1E429DEB8;
  *(_QWORD *)(a1 + 16) = &off_1E42B4D50;

  return a1;
}

void std::__shared_ptr_emplace<md::C3mResourceDecoder<md::GEOFlyoverTileResource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBBA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::C3mResourceDecoder<md::GEOFlyoverTileResource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBBA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::C3mResourceDecoder<md::GEOFlyoverTileResource>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19FC55260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::WaypointLabelPart::~WaypointLabelPart(md::WaypointLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = off_1E4293AA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::IconLabelPart::~IconLabelPart(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E4293AA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::IconLabelPart::~IconLabelPart(this);
  {
    v9 = operator new();
    *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v9 + 24) = "VectorKitLabels";
    *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v9 = &off_1E42B5668;
    *(_QWORD *)(v9 + 8) = "VectorKitLabels";
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_QWORD *)(v9 + 248) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
    if ((_DWORD)v10)
      geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v9 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v9;
  }
  (*(void (**)(uint64_t, md::WaypointLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, this, 912);
}

float md::WaypointLabelPart::updateWithStyle(md::WaypointLabelPart *this, md::LabelManager *a2)
{
  md::LabelStyle **v3;
  md::LabelStyle *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  md::LabelStyle *v12;
  _BYTE *v13;
  _QWORD *v14;
  md::LabelStyle *v15;
  uint64_t v16;
  uint64_t *v17;
  float result;

  md::ImageLabelPart::updateWithStyle(this, a2);
  v3 = (md::LabelStyle **)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 96))
  {
    v4 = *v3;
    v5 = *((_QWORD *)*v3 + 55);
    if (!v5)
    {
      md::LabelStyle::prepareDisplayIconStyleGroup(*v3);
      v5 = *((_QWORD *)v4 + 55);
    }
    v6 = *((_QWORD *)v4 + 56);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *((_QWORD *)this + 96) = v5;
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
    *((_QWORD *)this + 97) = v6;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  if (*((_BYTE *)this + 592) == 4)
  {
    v12 = *v3;
    v13 = (_BYTE *)*((_QWORD *)*v3 + 38);
    if (!v13)
    {
      v14 = (_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)*v3, 1);
      v13 = (_BYTE *)*v14;
      *((_QWORD *)v12 + 38) = *v14;
    }
    *((_BYTE *)this + 796) = v13[72];
    *((_BYTE *)this + 797) = v13[73];
    *((_BYTE *)this + 798) = v13[74];
    *((_BYTE *)this + 799) = v13[75];
    *((_BYTE *)this + 800) = v13[80];
    *((_BYTE *)this + 801) = v13[81];
    *((_BYTE *)this + 802) = v13[82];
    *((_BYTE *)this + 803) = v13[83];
    *((_BYTE *)this + 804) = v13[84];
    *((_BYTE *)this + 805) = v13[85];
    *((_BYTE *)this + 806) = v13[86];
    *((_BYTE *)this + 807) = v13[87];
  }
  v15 = *v3;
  v16 = *((_QWORD *)*v3 + 37);
  if (!v16)
  {
    v17 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)*v3, 0);
    v16 = *v17;
    *((_QWORD *)v15 + 37) = *v17;
  }
  *((_BYTE *)this + 784) = *(_BYTE *)(v16 + 72);
  *((_BYTE *)this + 785) = *(_BYTE *)(v16 + 73);
  *((_BYTE *)this + 786) = *(_BYTE *)(v16 + 74);
  *((_BYTE *)this + 787) = *(_BYTE *)(v16 + 75);
  *((_BYTE *)this + 788) = *(_BYTE *)(v16 + 80);
  *((_BYTE *)this + 789) = *(_BYTE *)(v16 + 81);
  *((_BYTE *)this + 790) = *(_BYTE *)(v16 + 82);
  *((_BYTE *)this + 791) = *(_BYTE *)(v16 + 83);
  *((_BYTE *)this + 792) = *(_BYTE *)(v16 + 84);
  *((_BYTE *)this + 793) = *(_BYTE *)(v16 + 85);
  *((_BYTE *)this + 794) = *(_BYTE *)(v16 + 86);
  *((_BYTE *)this + 795) = *(_BYTE *)(v16 + 87);
  result = (float)(*(float *)(v16 + 48) + *(float *)(v16 + 44)) + *(float *)(v16 + 52);
  *((float *)this + 212) = -result;
  *((float *)this + 213) = -result;
  *((float *)this + 214) = result;
  *((float *)this + 215) = result;
  return result;
}

void md::WaypointLabelPart::prepareForDisplay(md::WaypointLabelPart *this, md::LabelManager *a2)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v3 = *((float *)this + 153);
  if (v3 != *((float *)this + 188)
    || *((float *)this + 80) < *((float *)this + 78)
    || *((float *)this + 81) < *((float *)this + 79))
  {
    *((float *)this + 188) = v3;
    (*(void (**)(md::WaypointLabelPart *, uint64_t, char *, char *))(*(_QWORD *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
  }
  if (*((_BYTE *)this + 565))
  {
    v4 = operator new();
    v5 = *((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = v4;
    if (v5)
      MEMORY[0x1A1AF4E00](v5, 0x1000C40AE2C30F4);
    *((_BYTE *)this + 665) = 0;
  }
  v6 = **((_QWORD **)this + 4);
  v7 = *(_QWORD *)(v6 + 440);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 448);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    md::LabelStyle::prepareDisplayIconStyleGroup(**((md::LabelStyle ***)this + 4));
    v7 = *(_QWORD *)(v6 + 440);
    v8 = *(_QWORD *)(v6 + 448);
    if (!v8)
      goto LABEL_15;
  }
  v9 = (unint64_t *)(v8 + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
LABEL_15:
  *((_QWORD *)this + 96) = v7;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

double md::WaypointLabelPart::updateForDisplay(md::WaypointLabelPart *this)
{
  char *v2;
  float v3;
  uint64_t v4;
  char v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  double result;

  v2 = (char *)this + 572;
  v3 = *((float *)this + 147);
  *((float *)this + 153) = v3;
  v4 = *(_QWORD *)((char *)this + 572);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 145);
  *(_QWORD *)((char *)this + 596) = v4;
  *((_BYTE *)this + 617) = *((_BYTE *)this + 593);
  LOBYTE(v4) = *((_BYTE *)this + 633) + 4 * *((_BYTE *)this + 594);
  *((_BYTE *)this + 556) = v4;
  *((_BYTE *)this + 658) = v4;
  LODWORD(v4) = *((unsigned __int8 *)this + 592);
  *((_BYTE *)this + 657) = v4;
  *((_BYTE *)this + 765) = (_DWORD)v4 == 4;
  if ((_DWORD)v4 == 4)
    v5 = 2;
  else
    v5 = 1;
  v6 = *((float *)this + 188);
  *((_BYTE *)this + 685) = v5;
  if (v3 != v6)
  {
    *((float *)this + 188) = v3;
    (*(void (**)(md::WaypointLabelPart *, uint64_t, char *, char *))(*(_QWORD *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
  }
  v7 = *((_QWORD *)this + 96);
  v8 = *((_QWORD *)this + 97);
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *((_QWORD *)this + 101) = v7;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(v2 + 252) = *((_OWORD *)this + 49);
  result = *((double *)this + 100);
  *((double *)this + 105) = result;
  return result;
}

uint64_t md::WaypointLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, double a6, double a7, double a8)
{
  uint64_t v8;
  float v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v8 = *(_QWORD *)(a1 + 808);
  v9 = fminf(fmaxf(*(float *)(*(_QWORD *)(a1 + 32) + 64), 0.0), 23.0);
  v10 = (int)v9;
  if ((int)v9 >= 0x17)
    v11 = 23;
  else
    v11 = v10;
  v12 = 1 << v11;
  v13 = *(float *)(v8 + 4 * v11);
  if ((*(_QWORD *)(v8 + 96) & (1 << v11)) != 0)
  {
    if (v10 >= 0x16)
      v14 = 22;
    else
      v14 = (int)v9;
    v15 = *(float *)(v8 + 4 * (v14 + 1));
    if (*(_BYTE *)(v8 + 104) || (v16 = 0.0, v13 != 0.0) && v15 != 0.0)
      v16 = v13 + (float)((float)(v15 - v13) * (float)(v9 - (float)v11));
  }
  else
  {
    v16 = *(float *)(v8 + 4 * v11);
  }
  *(float *)(v8 + 336) = v16;
  v17 = *(float *)(v8 + 112 + 4 * v11);
  if ((*(_QWORD *)(v8 + 208) & v12) != 0)
  {
    if (v10 >= 0x16)
      v18 = 22;
    else
      v18 = (int)v9;
    v19 = *(float *)(v8 + 112 + 4 * (v18 + 1));
    if (*(_BYTE *)(v8 + 216) || (v20 = 0.0, v17 != 0.0) && v19 != 0.0)
      v20 = v17 + (float)((float)(v19 - v17) * (float)(v9 - (float)v11));
  }
  else
  {
    v20 = *(float *)(v8 + 112 + 4 * v11);
  }
  *(float *)(v8 + 340) = v20;
  v21 = *(float *)(v8 + 224 + 4 * v11);
  if ((*(_QWORD *)(v8 + 320) & v12) != 0)
  {
    if (v10 >= 0x16)
      v10 = 22;
    v22 = *(float *)(v8 + 224 + 4 * (v10 + 1));
    if (*(_BYTE *)(v8 + 328) || (v23 = 0.0, v21 != 0.0) && v22 != 0.0)
      v23 = v21 + (float)((float)(v22 - v21) * (float)(v9 - (float)v11));
  }
  else
  {
    v23 = *(float *)(v8 + 224 + 4 * v11);
  }
  *(float *)(v8 + 344) = v23;
  *(float *)(a1 + 896) = v16;
  v24 = v20 + v16;
  *(float *)(a1 + 900) = v20 + v16;
  *(float *)&a7 = (float)(v20 + v16) + v23;
  *(_DWORD *)(a1 + 904) = LODWORD(a7);
  if (v20 <= 0.0)
  {
    if (v23 <= 0.0)
    {
      LODWORD(a8) = 1.0;
      *(float *)(a1 + 896) = v16 + 1.0;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  LODWORD(a8) = 0;
  v16 = fmaxf(v16 + -1.0, 0.0);
  *(float *)(a1 + 896) = v16;
  if (v23 > 0.0)
  {
LABEL_34:
    *(float *)&a8 = v24 + -1.0;
    *(float *)(a1 + 900) = fmaxf(v16, v24 + -1.0);
    *(float *)&a7 = *(float *)&a7 + 1.0;
    *(_DWORD *)(a1 + 904) = LODWORD(a7);
    goto LABEL_36;
  }
  *(float *)(a1 + 900) = v24 + 1.0;
LABEL_36:
  *(float *)&a6 = *(float *)&a7 + 1.0;
  *(float *)(a1 + 908) = (float)(*(float *)&a7 + 1.0) + (float)(*(float *)&a7 + 1.0);
  *(float *)&a7 = -(float)(*(float *)&a7 + 1.0);
  *(_DWORD *)(a1 + 880) = LODWORD(a7);
  *(_DWORD *)(a1 + 884) = LODWORD(a7);
  *(_DWORD *)(a1 + 888) = LODWORD(a6);
  *(_DWORD *)(a1 + 892) = LODWORD(a6);
  md::IconLabelPart::layoutForDisplay(a1, a2, a3, a4, a5, a6, a7, a8);
  return 37;
}

uint64_t md::WaypointLabelPart::styleLayer(md::WaypointLabelPart *this, const md::LabelStyle *a2)
{
  return *(char *)(*((_QWORD *)this + 2) + 753);
}

float md::WaypointLabelPart::meshRect(md::WaypointLabelPart *this)
{
  return *((float *)this + 220);
}

uint64_t md::WaypointLabelPart::textureRect(md::WaypointLabelPart *this)
{
  return (uint64_t)this + 864;
}

float md::WaypointLabelPart::collisionBounds(md::WaypointLabelPart *this, const md::LabelIcon *a2)
{
  return *((float *)this + 212);
}

_QWORD *md::WaypointLabelPart::populateMeshDescriptor(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a2 + 1) = 1;
  *(_BYTE *)(a2 + 2) = *(_BYTE *)(a1 + 765);
  v4[0] = &off_1E42CEC90;
  v4[1] = a1;
  v5 = v4;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v4, (_QWORD *)(a2 + 8));
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::WaypointLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::WaypointLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::WaypointLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::WaypointLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEC90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::WaypointLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::WaypointLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEC90;
  a2[1] = v2;
  return result;
}

_DWORD *std::__function::__func<md::WaypointLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0,std::allocator<md::WaypointLabelPart::populateMeshDescriptor(md::IconMeshDescriptor &)::$_0>,void ()(md::LabelRenderDescriptor const&,md::IconMeshData &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  float v5;
  _DWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 565))
    *(_QWORD *)(a3 + 64) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 144))(*(_QWORD *)(a1 + 8));
  v5 = *(float *)(v4 + 608) * *(float *)(v4 + 596);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v4 + 552);
  *(float *)(a3 + 52) = v5;
  *(_DWORD *)(a3 + 56) = *(_DWORD *)(v4 + 604);
  *(_DWORD *)a3 = *(_DWORD *)(v4 + 696);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(v4 + 700);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v4 + 704);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(v4 + 708);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(v4 + 712);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(v4 + 716);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v4 + 720);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(v4 + 724);
  result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 928))(v4);
  *(_DWORD *)(a3 + 32) = *result;
  *(_DWORD *)(a3 + 36) = result[1];
  *(_DWORD *)(a3 + 40) = result[2];
  *(_DWORD *)(a3 + 44) = result[3];
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(v4 + 896);
  *(_BYTE *)(a3 + 88) = *(_BYTE *)(v4 + 824);
  *(_BYTE *)(a3 + 89) = *(_BYTE *)(v4 + 825);
  *(_BYTE *)(a3 + 90) = *(_BYTE *)(v4 + 826);
  *(_BYTE *)(a3 + 91) = *(_BYTE *)(v4 + 827);
  *(_BYTE *)(a3 + 92) = *(_BYTE *)(v4 + 828);
  *(_BYTE *)(a3 + 93) = *(_BYTE *)(v4 + 829);
  *(_BYTE *)(a3 + 94) = *(_BYTE *)(v4 + 830);
  *(_BYTE *)(a3 + 95) = *(_BYTE *)(v4 + 831);
  *(_BYTE *)(a3 + 96) = *(_BYTE *)(v4 + 832);
  *(_BYTE *)(a3 + 97) = *(_BYTE *)(v4 + 833);
  *(_BYTE *)(a3 + 98) = *(_BYTE *)(v4 + 834);
  *(_BYTE *)(a3 + 99) = *(_BYTE *)(v4 + 835);
  if (*(_BYTE *)(v4 + 765))
  {
    *(_BYTE *)(a3 + 100) = *(_BYTE *)(v4 + 836);
    *(_BYTE *)(a3 + 101) = *(_BYTE *)(v4 + 837);
    *(_BYTE *)(a3 + 102) = *(_BYTE *)(v4 + 838);
    *(_BYTE *)(a3 + 103) = *(_BYTE *)(v4 + 839);
    *(_BYTE *)(a3 + 104) = *(_BYTE *)(v4 + 840);
    *(_BYTE *)(a3 + 105) = *(_BYTE *)(v4 + 841);
    *(_BYTE *)(a3 + 106) = *(_BYTE *)(v4 + 842);
    *(_BYTE *)(a3 + 107) = *(_BYTE *)(v4 + 843);
    *(_BYTE *)(a3 + 108) = *(_BYTE *)(v4 + 844);
    *(_BYTE *)(a3 + 109) = *(_BYTE *)(v4 + 845);
    *(_BYTE *)(a3 + 110) = *(_BYTE *)(v4 + 846);
    *(_BYTE *)(a3 + 111) = *(_BYTE *)(v4 + 847);
  }
  return result;
}

void md::StyleFadeLabelPart::~StyleFadeLabelPart(md::StyleFadeLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::StyleFadeLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, this, 640);
}

uint64_t md::StyleFadeLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v10 = *(_QWORD *)(a2 + 3488);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 520);
    v12 = *(std::__shared_weak_count **)(v10 + 528);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v15 = *(_DWORD *)(v11 + 256);
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      v15 = *(_DWORD *)(v11 + 256);
    }
  }
  else
  {
    v15 = 0;
  }
  *(_DWORD *)(a1 + 632) = v15;
  if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 88))(**(_QWORD **)(a1 + 576)))
    v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 576) + 120))(**(_QWORD **)(a1 + 576), a2, a3, a4, a5);
  else
    v17 = 32;
  *(_BYTE *)(a1 + 636) = v17;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8)))
    LODWORD(result) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 8)
                                                                                            + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 576) + 8), a2, a3, a4, a5);
  else
    LODWORD(result) = 32;
  *(_BYTE *)(a1 + 637) = result;
  if (*(_BYTE *)(a1 + 636) == 37)
    return 37;
  else
    return result;
}

uint64_t md::StyleFadeLabelPart::isFading(md::StyleFadeLabelPart *this)
{
  return 0;
}

uint64_t md::StyleFadeLabelPart::isStyleFadeNode(md::StyleFadeLabelPart *this)
{
  return 1;
}

uint64_t md::StyleFadeLabelPart::isCrossFadeNode(md::StyleFadeLabelPart *this)
{
  return 0;
}

uint64_t md::StyleFadeLabelPart::isTextVisible(md::StyleFadeLabelPart *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 72) + 8) + 744))(*(_QWORD *)(*((_QWORD *)this + 72) + 8));
}

uint64_t md::StyleFadeLabelPart::needsCrossfade()
{
  return 0;
}

void md::StyleFadeLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "StyleFade");
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,geo::StdAllocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v40;

  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 40, 8);
  *v10 = 0;
  v10[1] = a2;
  v13 = **a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v13;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v15 = a1[12];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v7 = *((_QWORD *)a1 + 1);
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_58;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_58:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= a2)
            v3 = a2 % v7;
          else
            v3 = a2;
        }
        else
        {
          v3 = (v7 - 1) & a2;
        }
        goto LABEL_71;
      }
      if (!prime)
      {
        v40 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v40, 8 * *((_QWORD *)a1 + 1));
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_58;
      }
    }
    v20 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v21 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v21, 8 * *((_QWORD *)a1 + 1));
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 6);
    v23 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v23)
    {
LABEL_57:
      v7 = prime;
      goto LABEL_58;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_57;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_57;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_62;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_62:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_57;
    }
  }
LABEL_71:
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_79:
    *v37 = v10;
    goto LABEL_80;
  }
  *v10 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v10;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_79;
  }
LABEL_80:
  ++*((_QWORD *)a1 + 5);
  return v10;
}

void sub_19FC565AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

md::LabelDedupingGroup *_ZNSt3__111make_sharedB8nn180100IN2md23NamedLabelDedupingGroupEJEvEENS_10shared_ptrIT_EEDpOT0_(md::LabelDedupingGroup **a1)
{
  char *v2;
  md::LabelDedupingGroup *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E42DCCB8;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  result = md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)(v2 + 24));
  *((_QWORD *)v2 + 3) = &off_1E429F140;
  *a1 = result;
  a1[1] = (md::LabelDedupingGroup *)v2;
  return result;
}

void sub_19FC56624(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::NamedLabelDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCCB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::NamedLabelDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCCB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::NamedLabelDedupingGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::LabelSpacingDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD1F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelSpacingDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD1F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::LabelSpacingDedupingGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<md::LabelDedupingGroup>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 32);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 40);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::MuninPointLabelDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninPointLabelDedupingGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninPointLabelDedupingGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::Label>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::Label>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDE70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::Label>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::LabelPool::clear(int64x2_t *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t i;
  uint64_t j;
  _QWORD *v28;
  uint64_t v29;
  uint64_t k;
  unint64_t *v31;
  __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t *v36;
  unint64_t *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  md::LabelPool *v46;
  unint64_t *v47;
  __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t m;
  _QWORD *v52;
  uint64_t v53;
  uint64_t n;
  _QWORD *v55;
  uint64_t v56;
  uint64_t ii;
  uint64_t v58;
  uint64_t v59;
  md::Label *v60;
  unint64_t *v61;
  unint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;

  v2 = (uint64_t *)this[1].i64[0];
  v3 = (uint64_t *)this[1].i64[1];
  if (v2 == v3)
    goto LABEL_29;
  do
  {
    v4 = *v2;
    *(_BYTE *)(v4 + 120) = 0;
    if (*(_BYTE *)(v4 + 125))
    {
      *(_BYTE *)(v4 + 125) = 0;
      v5 = *(_QWORD **)(v4 + 408);
      if (v5 != (_QWORD *)(v4 + 416))
      {
        while (1)
        {
          v6 = v5[4];
          v7 = (unsigned __int8 *)(v6 + 1296);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (v8 != 1)
            goto LABEL_13;
          if (*(_BYTE *)(v6 + 1264))
            break;
          md::Label::updateStateMachineForStaging(v6, 1, 37);
          v9 = (_QWORD *)v5[1];
          if (!v9)
          {
            do
            {
LABEL_17:
              v10 = (_QWORD *)v5[2];
              v11 = *v10 == (_QWORD)v5;
              v5 = v10;
            }
            while (!v11);
            goto LABEL_7;
          }
          do
          {
LABEL_14:
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
LABEL_7:
          v5 = v10;
          if (v10 == (_QWORD *)(v4 + 416))
            goto LABEL_3;
        }
        *(_BYTE *)(v6 + 1261) = 1;
        *(_QWORD *)(v6 + 1224) = 0;
LABEL_13:
        v9 = (_QWORD *)v5[1];
        if (!v9)
          goto LABEL_17;
        goto LABEL_14;
      }
    }
LABEL_3:
    md::LabelMapTile::broadcastLabelDeactivate((md::LabelMapTile *)v4);
    v2 += 2;
  }
  while (v2 != v3);
  v12 = (uint64_t *)this[1].i64[0];
  v2 = (uint64_t *)this[1].i64[1];
  if (v2 != v12)
  {
    do
    {
      v13 = (std::__shared_weak_count *)*(v2 - 1);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v2 -= 2;
    }
    while (v2 != v12);
    v2 = v12;
  }
LABEL_29:
  this[1].i64[1] = (uint64_t)v2;
  this[3] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  this[4] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v16 = (_QWORD *)this[6].i64[1];
  if (v16)
  {
    while (1)
    {
      v17 = v16[2];
      if (*(_BYTE *)(v17 + 125))
      {
        *(_BYTE *)(v17 + 125) = 0;
        v18 = *(_QWORD **)(v17 + 408);
        if (v18 != (_QWORD *)(v17 + 416))
          break;
      }
LABEL_31:
      md::LabelMapTile::broadcastLabelDeactivate((md::LabelMapTile *)v17);
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
    while (1)
    {
      v19 = v18[4];
      v20 = (unsigned __int8 *)(v19 + 1296);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (v21 != 1)
        goto LABEL_41;
      if (*(_BYTE *)(v19 + 1264))
        break;
      md::Label::updateStateMachineForStaging(v19, 1, 37);
      v22 = (_QWORD *)v18[1];
      if (!v22)
      {
        do
        {
LABEL_45:
          v23 = (_QWORD *)v18[2];
          v11 = *v23 == (_QWORD)v18;
          v18 = v23;
        }
        while (!v11);
        goto LABEL_35;
      }
      do
      {
LABEL_42:
        v23 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
LABEL_35:
      v18 = v23;
      if (v23 == (_QWORD *)(v17 + 416))
        goto LABEL_31;
    }
    *(_BYTE *)(v19 + 1261) = 1;
    *(_QWORD *)(v19 + 1224) = 0;
LABEL_41:
    v22 = (_QWORD *)v18[1];
    if (!v22)
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_48:
  if (this[7].i64[1])
  {
    v24 = (_QWORD *)this[6].i64[1];
    while (v24)
    {
      v38 = v24;
      v24 = (_QWORD *)*v24;
      v39 = (std::__shared_weak_count *)v38[3];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)this[7].i64[0] + 40))(this[7].i64[0], v38, 32);
    }
    this[6].i64[1] = 0;
    v25 = this[5].i64[1];
    if (v25)
    {
      for (i = 0; i != v25; ++i)
        *(_QWORD *)(this[5].i64[0] + 8 * i) = 0;
    }
    this[7].i64[1] = 0;
  }
  for (j = this[10].i64[0]; j; j = *(_QWORD *)j)
    md::LabelMapTile::broadcastLabelDeactivate(*(md::LabelMapTile **)(j + 16));
  if (this[11].i64[0])
  {
    v28 = (_QWORD *)this[10].i64[0];
    while (v28)
    {
      v42 = v28;
      v28 = (_QWORD *)*v28;
      v43 = (std::__shared_weak_count *)v42[3];
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)this[10].i64[1] + 40))(this[10].i64[1], v42, 32);
    }
    this[10].i64[0] = 0;
    v29 = this[9].i64[0];
    if (v29)
    {
      for (k = 0; k != v29; ++k)
        *(_QWORD *)(this[8].i64[1] + 8 * k) = 0;
    }
    this[11].i64[0] = 0;
  }
  v31 = (unint64_t *)this[42].i64[0];
  v32 = &this[42].i8[8];
  if (v31 != &this[42].u64[1])
  {
    while (1)
    {
      v33 = v31[4];
      v34 = (unsigned __int8 *)(v33 + 1296);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (v35 != 1)
        goto LABEL_70;
      if (*(_BYTE *)(v33 + 1264))
        break;
      md::Label::updateStateMachineForStaging(v33, 1, 37);
      v36 = (unint64_t *)v31[1];
      if (!v36)
      {
        do
        {
LABEL_74:
          v37 = (unint64_t *)v31[2];
          v11 = *v37 == (_QWORD)v31;
          v31 = v37;
        }
        while (!v11);
        goto LABEL_64;
      }
      do
      {
LABEL_71:
        v37 = v36;
        v36 = (unint64_t *)*v36;
      }
      while (v36);
LABEL_64:
      v31 = v37;
      if (v37 == (unint64_t *)v32)
        goto LABEL_89;
    }
    *(_BYTE *)(v33 + 1261) = 1;
    *(_QWORD *)(v33 + 1224) = 0;
LABEL_70:
    v36 = (unint64_t *)v31[1];
    if (!v36)
      goto LABEL_74;
    goto LABEL_71;
  }
LABEL_89:
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)this[42].i64, (_QWORD *)this[42].i64[1]);
  this[43].i64[1] = 0;
  this[42].i64[0] = (uint64_t)v32;
  this[42].i64[1] = 0;
  this[47].i8[8] = 0;
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::weak_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this[12].i64, (_QWORD *)this[12].i64[1]);
  v47 = (unint64_t *)this[14].i64[0];
  this[13].i64[1] = 0;
  this[12].i64[0] = (uint64_t)&this[12].i64[1];
  this[12].i64[1] = 0;
  v48 = &this[14].i8[8];
  if (v47 != &this[14].u64[1])
  {
    do
    {
      v60 = (md::Label *)v47[6];
      if (v60 != (md::Label *)this[44].i64[0])
      {
        *((_BYTE *)v60 + 1252) = 0;
        if (*((_BYTE *)v60 + 1251))
        {
          *((_BYTE *)v60 + 1251) = 0;
          md::Label::clearAnimation(v60);
          v60 = (md::Label *)v47[6];
        }
        md::Label::setActive((uint64_t)v60, 0, v46);
      }
      v61 = (unint64_t *)v47[1];
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = (unint64_t *)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (unint64_t *)v47[2];
          v11 = *v62 == (_QWORD)v47;
          v47 = v62;
        }
        while (!v11);
      }
      v47 = v62;
    }
    while (v62 != (unint64_t *)v48);
  }
  if (this[18].i64[1])
  {
    v49 = this[17].i64[1];
    if (v49)
    {
      do
      {
        v66 = *(_QWORD *)v49;
        v67 = *(std::__shared_weak_count **)(v49 + 56);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        if (*(char *)(v49 + 39) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v49 + 40) + 40))(*(_QWORD *)(v49 + 40), *(_QWORD *)(v49 + 16), *(_QWORD *)(v49 + 32) & 0x7FFFFFFFFFFFFFFFLL);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)this[18].i64[0] + 40))(this[18].i64[0], v49, 64);
        v49 = v66;
      }
      while (v66);
    }
    this[17].i64[1] = 0;
    v50 = this[16].i64[1];
    if (v50)
    {
      for (m = 0; m != v50; ++m)
        *(_QWORD *)(this[16].i64[0] + 8 * m) = 0;
    }
    this[18].i64[1] = 0;
  }
  if (this[25].i64[1])
  {
    v52 = (_QWORD *)this[24].i64[1];
    while (v52)
    {
      v70 = v52;
      v52 = (_QWORD *)*v52;
      v71 = (std::__shared_weak_count *)v70[4];
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)this[25].i64[0] + 40))(this[25].i64[0], v70, 40);
    }
    this[24].i64[1] = 0;
    v53 = this[23].i64[1];
    if (v53)
    {
      for (n = 0; n != v53; ++n)
        *(_QWORD *)(this[23].i64[0] + 8 * n) = 0;
    }
    this[25].i64[1] = 0;
  }
  if (this[29].i64[0])
  {
    v55 = (_QWORD *)this[28].i64[0];
    while (v55)
    {
      v74 = v55;
      v55 = (_QWORD *)*v55;
      v75 = (std::__shared_weak_count *)v74[4];
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)this[28].i64[1] + 40))(this[28].i64[1], v74, 40);
    }
    this[28].i64[0] = 0;
    v56 = this[27].i64[0];
    if (v56)
    {
      for (ii = 0; ii != v56; ++ii)
        *(_QWORD *)(this[26].i64[1] + 8 * ii) = 0;
    }
    this[29].i64[0] = 0;
  }
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this[14].i64, (_QWORD *)this[14].i64[1]);
  this[15].i64[1] = 0;
  this[14].i64[0] = (uint64_t)v48;
  this[14].i64[1] = 0;
  std::__tree<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::__map_value_compare<std::pair<unsigned long long,md::LabelIdentifier>,std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,std::less<std::pair<unsigned long long,md::LabelIdentifier>>,true>,geo::StdAllocator<std::__value_type<std::pair<unsigned long long,md::LabelIdentifier>,std::shared_ptr<md::Label>>,mdm::Allocator>>::destroy((uint64_t)this[34].i64, (_QWORD *)this[34].i64[1]);
  this[35].i64[1] = 0;
  this[34].i64[0] = (uint64_t)&this[34].i64[1];
  this[34].i64[1] = 0;
  this[47].i8[6] = 0;
  v58 = this[36].i64[0];
  v59 = this[36].i64[1];
  if (v58 != v59)
  {
    do
    {
      v63 = *(std::__shared_weak_count **)(v59 - 8);
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v59 -= 16;
    }
    while (v59 != v58);
    this[36].i64[1] = v58;
    ++this[46].i32[3];
  }
}

uint64_t md::LabelPool::replacementForLabel(md::LabelPool *this, const md::Label *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 160))(*((_QWORD *)a2 + 1));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 176))(*((_QWORD *)a2 + 1));
  v6 = (std::mutex *)((char *)this + 480);
  std::mutex::lock((std::mutex *)((char *)this + 480));
  v7 = (char *)*((_QWORD *)this + 28);
  v8 = (char *)this + 232;
  if (v7 == (char *)this + 232)
  {
LABEL_57:
    v9 = 0;
    goto LABEL_58;
  }
  if (v4)
  {
    if (v5)
    {
      while (1)
      {
        v9 = *((_QWORD *)v7 + 6);
        if ((const md::Label *)v9 != a2
          && *(_BYTE *)(v9 + 820)
          && *(_BYTE *)(v9 + 1264)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 216))(*(_QWORD *)(v9 + 8)))
        {
          v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 160))(*(_QWORD *)(v9 + 8));
          v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 176))(*(_QWORD *)(v9 + 8));
          v12 = v10 == v4 || v11 == v5;
          if (v12)
            break;
        }
        v13 = (char *)*((_QWORD *)v7 + 1);
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = *(char **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (char *)*((_QWORD *)v7 + 2);
            v12 = *(_QWORD *)v14 == (_QWORD)v7;
            v7 = v14;
          }
          while (!v12);
        }
        v7 = v14;
        if (v14 == v8)
          goto LABEL_57;
      }
    }
    else
    {
      while (1)
      {
        v9 = *((_QWORD *)v7 + 6);
        if ((const md::Label *)v9 != a2
          && *(_BYTE *)(v9 + 820)
          && *(_BYTE *)(v9 + 1264)
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 216))(*(_QWORD *)(v9 + 8))
          && (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 160))(*(_QWORD *)(v9 + 8)) == v4)
        {
          break;
        }
        v15 = (char *)*((_QWORD *)v7 + 1);
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = *(char **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (char *)*((_QWORD *)v7 + 2);
            v12 = *(_QWORD *)v16 == (_QWORD)v7;
            v7 = v16;
          }
          while (!v12);
        }
        v7 = v16;
        if (v16 == v8)
          goto LABEL_57;
      }
    }
    goto LABEL_58;
  }
  if (!v5)
  {
    do
    {
      v19 = *((_QWORD *)v7 + 6);
      if ((const md::Label *)v19 != a2 && *(_BYTE *)(v19 + 820) && *(_BYTE *)(v19 + 1264))
        (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 8) + 216))(*(_QWORD *)(v19 + 8));
      v20 = (char *)*((_QWORD *)v7 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (char *)*((_QWORD *)v7 + 2);
          v12 = *(_QWORD *)v21 == (_QWORD)v7;
          v7 = v21;
        }
        while (!v12);
      }
      v7 = v21;
    }
    while (v21 != v8);
    goto LABEL_57;
  }
  while (1)
  {
    v9 = *((_QWORD *)v7 + 6);
    if ((const md::Label *)v9 != a2
      && *(_BYTE *)(v9 + 820)
      && *(_BYTE *)(v9 + 1264)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 216))(*(_QWORD *)(v9 + 8))
      && (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 176))(*(_QWORD *)(v9 + 8)) == v5)
    {
      break;
    }
    v17 = (char *)*((_QWORD *)v7 + 1);
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = *(char **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        v18 = (char *)*((_QWORD *)v7 + 2);
        v12 = *(_QWORD *)v18 == (_QWORD)v7;
        v7 = v18;
      }
      while (!v12);
    }
    v7 = v18;
    if (v18 == v8)
      goto LABEL_57;
  }
LABEL_58:
  std::mutex::unlock(v6);
  return v9;
}

void sub_19FC5721C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::IsTransparent const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::IsTransparent const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427C858;
  return result;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::IsTransparent const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427C858;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::IsTransparent const&)>::operator()(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427C810;
  return result;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427C810;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&)>::operator()(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427C7C8;
  return result;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427C7C8;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  *(_BYTE *)(a2 + 4) = (*a4 | *a5) != 0;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::UsesShadow const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::UsesShadow const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427C780;
  return result;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::UsesShadow const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427C780;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::UsesShadow const&)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 4) = 1;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorFog::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorFog::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorFog::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorFog::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427C588;
  return result;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorFog::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorFog::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427C588;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorFog::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorFog::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = 1;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::IsNotMercator const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::IsNotMercator const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427C660;
  return result;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::IsNotMercator const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427C660;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_1,std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_1>,void ()(md::ls::FunctionConstants &,md::ls::IsNotMercator const&)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 15) = 1;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMercator const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMercator const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427C618;
  return result;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMercator const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427C618;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>,ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::IsMercator const&)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 15) = 0;
}

void std::__function::__func<md::ita::CheckIfRenderableIsUnique::operator()(ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>)::$_0,std::allocator<md::ita::CheckIfRenderableIsUnique::operator()(ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>)::$_0>,void ()(md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CheckIfRenderableIsUnique::operator()(ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>)::$_0,std::allocator<md::ita::CheckIfRenderableIsUnique::operator()(ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>)::$_0>,void ()(md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42F58B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CheckIfRenderableIsUnique::operator()(ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>)::$_0,std::allocator<md::ita::CheckIfRenderableIsUnique::operator()(ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>)::$_0>,void ()(md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42F58B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::CheckIfRenderableIsUnique::operator()(ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>)::$_0,std::allocator<md::ita::CheckIfRenderableIsUnique::operator()(ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>)::$_0>,void ()(md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t ***v18;
  uint64_t **v19;
  unint64_t v21;
  uint64_t *v23;
  _DWORD *v24;
  char *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  _QWORD v39[2];
  int v40;
  _QWORD *v41;
  _QWORD v42[2];
  int v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a3 + 16))
    return;
  v5 = **(_QWORD **)(a1 + 8) + 40 * *a2 + 64;
  v6 = *(_QWORD *)a3;
  v7 = *(unsigned __int8 *)(a3 + 8);
  if (!std::__hash_table<md::UniqueRenderID,md::UniqueRenderIDHash,md::UniqueRenderIDKeyEqual,std::allocator<md::UniqueRenderID>>::find<md::UniqueRenderID>((_QWORD *)v5, *(_QWORD *)a3, *(_BYTE *)(a3 + 8)))
  {
    v14 = ((v6 >> 34) + v6 + (HIDWORD(v6) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(v6);
    v15 = (v7 + (v14 << 6) + (v14 >> 2) - 0x61C8864680B583EBLL) ^ v14;
    v16 = *(_QWORD *)(v5 + 8);
    if (v16)
    {
      v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v3 = (v7 + (v14 << 6) + (v14 >> 2) - 0x61C8864680B583EBLL) ^ v14;
        if (v15 >= v16)
          v3 = v15 % v16;
      }
      else
      {
        v3 = v15 & (v16 - 1);
      }
      v18 = *(uint64_t ****)(*(_QWORD *)v5 + 8 * v3);
      if (v18)
      {
        v19 = *v18;
        if (v19)
        {
          if (v17.u32[0] < 2uLL)
          {
            while (1)
            {
              v23 = v19[1];
              if (v23 == (uint64_t *)v15)
              {
                if (v19[2] == (uint64_t *)v6 && *((unsigned __int8 *)v19 + 24) == (_DWORD)v7)
                  return;
              }
              else if (((unint64_t)v23 & (v16 - 1)) != v3)
              {
                goto LABEL_37;
              }
              v19 = (uint64_t **)*v19;
              if (!v19)
                goto LABEL_37;
            }
          }
          do
          {
            v21 = (unint64_t)v19[1];
            if (v21 == v15)
            {
              if (v19[2] == (uint64_t *)v6 && *((unsigned __int8 *)v19 + 24) == (_DWORD)v7)
                return;
            }
            else
            {
              if (v21 >= v16)
                v21 %= v16;
              if (v21 != v3)
                break;
            }
            v19 = (uint64_t **)*v19;
          }
          while (v19);
        }
      }
    }
LABEL_37:
    v24 = (_DWORD *)(a3 + 9);
    v25 = (char *)operator new(0x20uLL);
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = v15;
    *((_QWORD *)v25 + 2) = v6;
    v25[24] = v7;
    *(_DWORD *)(v25 + 25) = *v24;
    *((_DWORD *)v25 + 7) = *(_DWORD *)((char *)v24 + 3);
    v26 = (float)(unint64_t)(*(_QWORD *)(v5 + 24) + 1);
    v27 = *(float *)(v5 + 32);
    if (!v16 || (float)(v27 * (float)v16) < v26)
    {
      v28 = 1;
      if (v16 >= 3)
        v28 = (v16 & (v16 - 1)) != 0;
      v29 = v28 | (2 * v16);
      v30 = vcvtps_u32_f32(v26 / v27);
      if (v29 <= v30)
        prime = v30;
      else
        prime = v29;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v16 = *(_QWORD *)(v5 + 8);
      }
      if (prime > v16)
        goto LABEL_49;
      if (prime < v16)
      {
        v32 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 24) / *(float *)(v5 + 32));
        if (v16 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (prime <= v32)
          prime = v32;
        if (prime < v16)
LABEL_49:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5, prime);
      }
      v16 = *(_QWORD *)(v5 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v15 >= v16)
          v3 = v15 % v16;
        else
          v3 = v15;
      }
      else
      {
        v3 = (v16 - 1) & v15;
      }
    }
    v35 = *(_QWORD *)v5;
    v36 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v3);
    if (v36)
    {
      *(_QWORD *)v25 = *v36;
    }
    else
    {
      *(_QWORD *)v25 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = v25;
      *(_QWORD *)(v35 + 8 * v3) = v5 + 16;
      if (!*(_QWORD *)v25)
      {
LABEL_74:
        ++*(_QWORD *)(v5 + 24);
        return;
      }
      v37 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v37 >= v16)
          v37 %= v16;
      }
      else
      {
        v37 &= v16 - 1;
      }
      v36 = (_QWORD *)(*(_QWORD *)v5 + 8 * v37);
    }
    *v36 = v25;
    goto LABEL_74;
  }
  v8 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v9 = HIDWORD(*v8);
  v10 = *v8 << 32;
  v39[0] = &off_1E427E628;
  v39[1] = v10;
  v40 = v9;
  v41 = v39;
  v42[0] = &off_1E427E628;
  v44 = v42;
  v42[1] = v10;
  v43 = v9;
  v45 = 0;
  ecs2::Runtime::queueCommand(v11, (uint64_t)v42);
  if (v45 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v45])(&v38, v42);
  v45 = -1;
  v12 = v41;
  if (v41 == v39)
  {
    v13 = 4;
    v12 = v39;
  }
  else
  {
    if (!v41)
      return;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
}

void sub_19FC579A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShouldSkipRender>(gdc::Entity,md::ls::ShouldSkipRender &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShouldSkipRender>(gdc::Entity,md::ls::ShouldSkipRender &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427E628;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShouldSkipRender>(gdc::Entity,md::ls::ShouldSkipRender &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427E628;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShouldSkipRender>(gdc::Entity,md::ls::ShouldSkipRender &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *ShouldSkip;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  ShouldSkip = (uint64_t *)gdc::Registry::storage<md::ls::ShouldSkipRender>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(ShouldSkip + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)ShouldSkip[11];
    v9 = ShouldSkip[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)ShouldSkip[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      ShouldSkip[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      ShouldSkip[11] = v11;
      ShouldSkip[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    ShouldSkip[11] = v11;
    v6 = ShouldSkip[31];
  }
  else
  {
    v6 = ShouldSkip[31];
    if (ShouldSkip[10] + (((uint64_t)v4 - ShouldSkip[7]) >> 3) != ShouldSkip[11])
    {
      v7 = (_QWORD *)ShouldSkip[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)ShouldSkip[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorRoutelineMask::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorRoutelineMask::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427CA08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareFunctionConstantDescriptorRoutelineMask::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CA08;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorRoutelineMask::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&)>::operator()(_QWORD *result, uint64_t a2, unint64_t *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  _BYTE *v11;

  v4 = *(_QWORD **)result[1];
  v5 = *a3;
  v6 = *a3;
  v7 = v4[269];
  v10 = 0;
  if (v6 < (v4[270] - v7) >> 3)
  {
    v8 = *(_QWORD *)(v7 + 8 * v6);
    if (v8 && HIDWORD(v5) == HIDWORD(v8))
    {
      v11 = (_BYTE *)(v4[272] + 24 * v8);
      if (v11 != (_BYTE *)v4[273] && v11 != 0)
      {
        result = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::ColorStyleCacheKey>> const&>,std::tuple<>>((uint64_t)(v4 + 256), v5, a3);
        ++result[3];
        if (*v11)
          v10 = 1;
      }
    }
  }
  *(_BYTE *)(a2 + 11) = v10;
  return result;
}

void std::__function::__func<md::ita::PrepareFunctionConstantDescriptorBlendedWater::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::PrepareFunctionConstantDescriptorBlendedWater::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427C9C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareFunctionConstantDescriptorBlendedWater::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427C9C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ita::PrepareFunctionConstantDescriptorBlendedWater::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>)::$_0,std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater::operator()(ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>)::$_0>,void ()(md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t result;

  result = md::VKMRenderResourcesStore::getColorRampData(**(_QWORD **)(a1 + 8), *a3);
  if (result && *(_BYTE *)(result + 32) && *(_QWORD *)(result + 16))
  {
    if (*(_QWORD *)(result + 24))
      *(_BYTE *)(a2 + 6) = 1;
  }
  return result;
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282768;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(a2);
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::Gradient2Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::Gradient2Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F360;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::Gradient2Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F360;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::Gradient2Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282720;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282720;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,std::type_identity<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(a2);
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::Gradient1Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::Gradient1Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F318;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::Gradient1Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F318;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::Gradient1Texture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle2>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle2>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle2>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle2>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282888;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle2>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle2>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282888;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle2>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle2>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::GradientConstantDataHandle2>(a2);
  return gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,md::ls::GradientConstantDataHandle2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,md::ls::GradientConstantDataHandle2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4280830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,md::ls::GradientConstantDataHandle2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4280830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientConstantDataHandle2>(gdc::Entity,md::ls::GradientConstantDataHandle2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::GradientConstantDataHandle2>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle1>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle1>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle1>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle1>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282840;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle1>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle1>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282840;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle1>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,std::type_identity<md::ls::GradientConstantDataHandle1>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::GradientConstantDataHandle1>(a2);
  return gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,md::ls::GradientConstantDataHandle1 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,md::ls::GradientConstantDataHandle1 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42807E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,md::ls::GradientConstantDataHandle1 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42807E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GradientConstantDataHandle1>(gdc::Entity,md::ls::GradientConstantDataHandle1 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::GradientConstantDataHandle1>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleColorConstantDataHandle>(gdc::Entity,md::ls::StyleColorConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleColorConstantDataHandle>(gdc::Entity,md::ls::StyleColorConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleColorConstantDataHandle>(gdc::Entity,md::ls::StyleColorConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleColorConstantDataHandle>(gdc::Entity,md::ls::StyleColorConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::StyleColorConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void sub_19FC5942C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__list_imp<std::pair<unsigned char,PolylineWithElevation>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        v6 = (std::__shared_weak_count *)v3[6];
        if (!v6)
          goto LABEL_9;
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
          v9 = (std::__shared_weak_count *)v3[4];
          if (v9)
          {
LABEL_10:
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
        else
        {
LABEL_9:
          v9 = (std::__shared_weak_count *)v3[4];
          if (v9)
            goto LABEL_10;
        }
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t geo::dpSimplify<geo::Mercator2<double>>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, double a8)
{
  uint64_t v8;
  uint64_t v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v8 = a3 + 1;
  if (a3 + 1 < a4)
  {
    v15 = result;
    v16 = a8 * a8;
    do
    {
      v17 = *(double *)(a2 + 8 * a3);
      v18 = *(float64x2_t *)(v15 + 16 * a3);
      v19 = vsubq_f64(*(float64x2_t *)(v15 + 16 * a4), v18);
      v20 = *(double *)(a2 + 8 * a4) - v17;
      v21 = vmulq_f64(v19, v19);
      v22 = v21.f64[0] + v20 * v20 + v21.f64[1];
      v23 = 0;
      if (v22 <= 1.0e-15)
      {
        v32 = 0.0;
        do
        {
          v33 = vsubq_f64(*(float64x2_t *)(v15 + 16 * v8), v18);
          v34 = vaddvq_f64(vmulq_f64(v33, v33)) + (*(double *)(a2 + 8 * v8) - v17) * (*(double *)(a2 + 8 * v8) - v17);
          v31 = fmax(v34, v32);
          if (v34 > v32)
            v23 = v8;
          ++v8;
          v32 = v31;
        }
        while (a4 != v8);
      }
      else
      {
        v24 = 0.0;
        v25 = 1.0 / v22;
        do
        {
          v26 = *(double *)(a2 + 8 * v8);
          v27 = *(float64x2_t *)(v15 + 16 * v8);
          v28 = fmin(fmax((vaddvq_f64(vmulq_f64(vsubq_f64(v27, v18), v19)) + (v26 - v17) * v20) * v25, 0.0), 1.0);
          v29 = vsubq_f64(v27, vmlaq_n_f64(v18, v19, v28));
          v30 = vaddvq_f64(vmulq_f64(v29, v29)) + (v26 - (v17 + v28 * v20)) * (v26 - (v17 + v28 * v20));
          v31 = fmax(v30, v24);
          if (v30 > v24)
            v23 = v8;
          ++v8;
          v24 = v31;
        }
        while (a4 != v8);
      }
      if (v31 <= v16)
        break;
      result = geo::dpSimplify<geo::Mercator2<double>>(v15, a2, a8);
      v35 = (_QWORD *)(v15 + 16 * v23);
      v36 = *a7;
      v37 = (_QWORD *)(a5 + 16 * *a7);
      *v37 = *v35;
      v37[1] = v35[1];
      v38 = *(_QWORD *)(a2 + 8 * v23);
      *a7 = v36 + 1;
      *(_QWORD *)(a6 + 8 * v36) = v38;
      v8 = v23 + 1;
      a3 = v23;
    }
    while (v23 + 1 < a4);
  }
  return result;
}

uint64_t geo::dpSimplify<geo::Mercator2<double>>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, double a6)
{
  uint64_t v6;
  uint64_t v11;
  double v12;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  float64x2_t v33;

  v6 = a2 + 1;
  if (a2 + 1 < a3)
  {
    v11 = result;
    v12 = a6 * a6;
    __asm { FMOV            V0.2D, #1.0 }
    v33 = _Q0;
    do
    {
      v18 = *(float64x2_t *)(v11 + 16 * a2);
      v19 = vsubq_f64(*(float64x2_t *)(v11 + 16 * a3), v18);
      v20 = vmulq_f64(v19, v19);
      v21 = 0;
      if (vaddvq_f64(v20) <= 1.0e-15)
      {
        v28 = 0.0;
        do
        {
          v29 = vsubq_f64(*(float64x2_t *)(v11 + 16 * v6), v18);
          v29.f64[0] = vaddvq_f64(vmulq_f64(v29, v29));
          v27 = fmax(v29.f64[0], v28);
          if (v29.f64[0] > v28)
            v21 = v6;
          ++v6;
          v28 = v27;
        }
        while (a3 != v6);
      }
      else
      {
        v22 = vdivq_f64(v33, vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1), v20));
        v23 = 0.0;
        do
        {
          v24 = *(float64x2_t *)(v11 + 16 * v6);
          v25 = vmulq_f64(vsubq_f64(v24, v18), v19);
          v26 = vsubq_f64(v24, vmlaq_n_f64(v18, v19, fmin(fmax(vmulq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1), v25), v22).f64[0], 0.0), 1.0)));
          v25.f64[0] = vaddvq_f64(vmulq_f64(v26, v26));
          v27 = fmax(v25.f64[0], v23);
          if (v25.f64[0] > v23)
            v21 = v6;
          ++v6;
          v23 = v27;
        }
        while (a3 != v6);
      }
      if (v27 <= v12)
        break;
      result = geo::dpSimplify<geo::Mercator2<double>>(v11, a6);
      v30 = (_QWORD *)(v11 + 16 * v21);
      v31 = (*a5)++;
      v32 = (_QWORD *)(a4 + 16 * v31);
      *v32 = *v30;
      v32[1] = v30[1];
      v6 = v21 + 1;
      a2 = v21;
    }
    while (v21 + 1 < a3);
  }
  return result;
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<std::vector<double>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<geo::Mercator2<double>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E66F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<geo::Mercator2<double>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E66F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<std::vector<geo::Mercator2<double>>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_19FC5AB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  std::__shared_weak_count *v3;
  void *v5;

  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);

  _Unwind_Resume(a1);
}

void sub_19FC5ABDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKVectorOverlayPolylineGroup;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FC5B1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  os_unfair_lock_s *v12;

  os_unfair_lock_unlock(v12);
  if (v11)
    operator delete(v11);

  _Unwind_Resume(a1);
}

void sub_19FC5B3D0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5B4CC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5B60C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5B6E0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5B7B4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5B8D0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5B9E0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5BAF0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5C6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  void *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t shared_owners;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;

  shared_weak_owners = v15[3].__shared_weak_owners_;
  if (shared_weak_owners <= a12)
    shared_weak_owners = a12;
  v15[3].__shared_owners_ = 0;
  v15[3].__shared_weak_owners_ = shared_weak_owners;
  do
    v20 = __ldaxr(v17);
  while (__stlxr(v20 - 1, v17));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  v21 = v14[3].__shared_weak_owners_;
  if (v21 <= 0xC)
    v21 = 12;
  v14[3].__shared_owners_ = 0;
  v14[3].__shared_weak_owners_ = v21;
  do
    v22 = __ldaxr(v16);
  while (__stlxr(v22 - 1, v16));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v23 = v13[7].__shared_weak_owners_;
  v13[7].__shared_weak_owners_ = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  shared_owners = v13[7].__shared_owners_;
  v13[7].__shared_owners_ = 0;
  if (shared_owners)
    (*(void (**)(uint64_t))(*(_QWORD *)shared_owners + 8))(shared_owners);
  v25 = v13[7].__vftable;
  v13[7].__vftable = 0;
  if (v25)
    (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  v26 = v13[6].__shared_weak_owners_;
  v13[6].__shared_weak_owners_ = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v13[6].__shared_owners_;
  v13[6].__shared_owners_ = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v13[6].__vftable;
  v13[6].__vftable = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = v13[5].__shared_weak_owners_;
  v13[5].__shared_weak_owners_ = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = v13[5].__shared_owners_;
  v13[5].__shared_owners_ = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v13[5].__vftable;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)v13[4].__shared_owners_;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v13[3].__shared_weak_owners_;
  v13[3].__shared_weak_owners_ = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v13[2].__shared_weak_owners_;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v41);

  _Unwind_Resume(a1);
}

void sub_19FC5C978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKVectorOverlayCircle;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FC5CC8C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5CD88(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5CE8C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC5CFCC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::CircleOverlayRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCC10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::CircleOverlayRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCC10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::CircleOverlayRenderable>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = a1[23];
  a1[23] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[22];
  a1[22] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[21];
  a1[21] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[20];
  a1[20] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[19];
  a1[19] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[18];
  a1[18] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[17];
  a1[17] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[16];
  a1[16] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)a1[15];
  if (!v10)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)a1[13];
    if (!v13)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v13 = (std::__shared_weak_count *)a1[13];
    if (!v13)
      goto LABEL_27;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_27:
  v16 = a1[11];
  a1[11] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)a1[8];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void std::__shared_ptr_emplace<md::CircleOverlayRenderable::Style>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::CircleOverlayRenderable::Style>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FC5D770(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);

  _Unwind_Resume(a1);
}

void sub_19FC5E7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_unfair_lock_t lock, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  os_unfair_lock_s *v31;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  os_unfair_lock_unlock(v31);
  _Unwind_Resume(a1);
}

void geo::LRUPolicy<unsigned char,std::shared_ptr<geo::Polygon2<double>>,std::hash<unsigned char>>::insert(unint64_t a1, float *a2, _BYTE *a3, _QWORD *a4)
{
  unint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t ***v32;
  uint64_t **v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t prime;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  size_t v50;
  _QWORD *i;
  size_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  size_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  void *__p;

  v7 = a1;
  v8 = *a3;
  v9 = *(int8x8_t *)(a2 + 2);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = *a3;
      if (*(_QWORD *)&v9 <= v8)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (v9.i32[0] - 1) & v8;
    }
    v12 = *(uint64_t ****)(*(_QWORD *)a2 + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == (uint64_t *)v8)
            {
              if (*((unsigned __int8 *)v13 + 16) == (_DWORD)v8)
                goto LABEL_22;
            }
            else if (((unint64_t)v16 & v14) != v11)
            {
              goto LABEL_30;
            }
            v13 = (uint64_t **)*v13;
            if (!v13)
              goto LABEL_30;
          }
        }
        do
        {
          v15 = (unint64_t)v13[1];
          if (v15 == v8)
          {
            if (*((unsigned __int8 *)v13 + 16) == (_DWORD)v8)
            {
LABEL_22:
              v17 = v13[3];
              v18 = *v17;
              *(_QWORD *)(v18 + 8) = v17[1];
              *(_QWORD *)v17[1] = v18;
              --*(_QWORD *)(a1 + 16);
              v19 = (std::__shared_weak_count *)v17[4];
              if (v19)
              {
                p_shared_owners = (unint64_t *)&v19->__shared_owners_;
                do
                  v21 = __ldaxr(p_shared_owners);
                while (__stlxr(v21 - 1, p_shared_owners));
                if (!v21)
                {
                  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                  std::__shared_weak_count::__release_weak(v19);
                }
              }
              operator delete(v17);
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a2, v13);
              if (__p)
                operator delete(__p);
              LOBYTE(v8) = *a3;
              break;
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v9)
              v15 %= *(_QWORD *)&v9;
            if (v15 != v11)
              break;
          }
          v13 = (uint64_t **)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_30:
  v22 = operator new(0x28uLL);
  v23 = v22;
  v22[16] = v8;
  v24 = a4[1];
  *((_QWORD *)v22 + 3) = *a4;
  *((_QWORD *)v22 + 4) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(_QWORD **)(v7 + 8);
  *(_QWORD *)v22 = v7;
  *((_QWORD *)v22 + 1) = v27;
  *v27 = v22;
  v28 = *(_QWORD *)(v7 + 16) + 1;
  *(_QWORD *)(v7 + 8) = v22;
  *(_QWORD *)(v7 + 16) = v28;
  v29 = *a3;
  v30 = *((_QWORD *)a2 + 1);
  if (v30)
  {
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      v7 = *a3;
      if (v30 <= v29)
        v7 = v29 % v30;
    }
    else
    {
      v7 = ((_DWORD)v30 - 1) & v29;
    }
    v32 = *(uint64_t ****)(*(_QWORD *)a2 + 8 * v7);
    if (v32)
    {
      v33 = *v32;
      if (v33)
      {
        if (v31.u32[0] < 2uLL)
        {
          while (1)
          {
            v35 = v33[1];
            if (v35 == (uint64_t *)v29)
            {
              if (*((unsigned __int8 *)v33 + 16) == (_DWORD)v29)
                return;
            }
            else if (((unint64_t)v35 & (v30 - 1)) != v7)
            {
              goto LABEL_54;
            }
            v33 = (uint64_t **)*v33;
            if (!v33)
              goto LABEL_54;
          }
        }
        do
        {
          v34 = (unint64_t)v33[1];
          if (v34 == v29)
          {
            if (*((unsigned __int8 *)v33 + 16) == (_DWORD)v29)
              return;
          }
          else
          {
            if (v34 >= v30)
              v34 %= v30;
            if (v34 != v7)
              break;
          }
          v33 = (uint64_t **)*v33;
        }
        while (v33);
      }
    }
  }
LABEL_54:
  v36 = operator new(0x20uLL);
  *v36 = 0;
  v36[1] = v29;
  *((_BYTE *)v36 + 16) = v29;
  v36[3] = v23;
  v37 = (float)(unint64_t)(*((_QWORD *)a2 + 3) + 1);
  v38 = a2[8];
  if (v30 && (float)(v38 * (float)v30) >= v37)
  {
    v29 = v7;
    goto LABEL_104;
  }
  v39 = 1;
  if (v30 >= 3)
    v39 = (v30 & (v30 - 1)) != 0;
  v40 = v39 | (2 * v30);
  v41 = vcvtps_u32_f32(v37 / v38);
  if (v40 <= v41)
    prime = v41;
  else
    prime = v40;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v30 = *((_QWORD *)a2 + 1);
  }
  if (prime > v30)
  {
LABEL_67:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v43 = operator new(8 * prime);
    v44 = *(_QWORD **)a2;
    *(_QWORD *)a2 = v43;
    if (v44)
      operator delete(v44);
    v45 = 0;
    *((_QWORD *)a2 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v45++) = 0;
    while (prime != v45);
    v47 = (uint64_t *)(a2 + 4);
    v46 = (_QWORD *)*((_QWORD *)a2 + 2);
    if (!v46)
      goto LABEL_91;
    v48 = v46[1];
    v49 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v50 = v48 & v49;
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v50) = v47;
      for (i = (_QWORD *)*v46; *v46; i = (_QWORD *)*v46)
      {
        v52 = i[1] & v49;
        if (v52 == v50)
        {
          v46 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a2 + 8 * v52))
        {
          *v46 = *i;
          v53 = 8 * v52;
          *i = **(_QWORD **)(*(_QWORD *)a2 + v53);
          **(_QWORD **)(*(_QWORD *)a2 + v53) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v52) = v46;
          v46 = i;
          v50 = v52;
        }
      }
LABEL_91:
      v30 = prime;
      goto LABEL_92;
    }
    if (v48 >= prime)
      v48 %= prime;
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v48) = v47;
    v57 = (_QWORD *)*v46;
    if (!*v46)
      goto LABEL_91;
    while (1)
    {
      v59 = v57[1];
      if (v59 >= prime)
        v59 %= prime;
      if (v59 != v48)
      {
        if (!*(_QWORD *)(*(_QWORD *)a2 + 8 * v59))
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v59) = v46;
          goto LABEL_96;
        }
        *v46 = *v57;
        v58 = 8 * v59;
        *v57 = **(_QWORD **)(*(_QWORD *)a2 + v58);
        **(_QWORD **)(*(_QWORD *)a2 + v58) = v57;
        v57 = v46;
      }
      v59 = v48;
LABEL_96:
      v46 = v57;
      v57 = (_QWORD *)*v57;
      v48 = v59;
      if (!v57)
        goto LABEL_91;
    }
  }
  if (prime >= v30)
    goto LABEL_92;
  v54 = vcvtps_u32_f32((float)*((unint64_t *)a2 + 3) / a2[8]);
  if (v30 < 3 || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
  {
    v54 = std::__next_prime(v54);
  }
  else
  {
    v56 = 1 << -(char)__clz(v54 - 1);
    if (v54 >= 2)
      v54 = v56;
  }
  if (prime <= v54)
    prime = v54;
  if (prime < v30)
  {
    if (!prime)
    {
      v63 = *(_QWORD **)a2;
      *(_QWORD *)a2 = 0;
      if (v63)
        operator delete(v63);
      v30 = 0;
      *((_QWORD *)a2 + 1) = 0;
      goto LABEL_92;
    }
    goto LABEL_67;
  }
  v30 = *((_QWORD *)a2 + 1);
LABEL_92:
  if ((v30 & (v30 - 1)) != 0)
  {
    if (v30 <= v29)
      v29 %= v30;
  }
  else
  {
    v29 = ((_DWORD)v30 - 1) & v29;
  }
LABEL_104:
  v60 = *(_QWORD **)a2;
  v61 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v29);
  if (v61)
  {
    *v36 = *v61;
LABEL_112:
    *v61 = v36;
    goto LABEL_113;
  }
  *v36 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v36;
  v60[v29] = a2 + 4;
  if (*v36)
  {
    v62 = *(_QWORD *)(*v36 + 8);
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v62 >= v30)
        v62 %= v30;
    }
    else
    {
      v62 &= v30 - 1;
    }
    v61 = (_QWORD *)(*(_QWORD *)a2 + 8 * v62);
    goto LABEL_112;
  }
LABEL_113:
  ++*((_QWORD *)a2 + 3);
}

void sub_19FC5EF14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void geo::Cache<unsigned char,std::shared_ptr<geo::Polygon2<double>>,std::hash<unsigned char>,geo::LRUPolicy>::_pop(_QWORD *a1)
{
  unsigned __int8 *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int8x8_t v11;
  _QWORD *v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;

  v2 = (unsigned __int8 *)a1[6];
  v3 = v2[16];
  v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v2 = (unsigned __int8 *)a1[6];
    v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)v2;
  *(_QWORD *)(v8 + 8) = *((_QWORD *)v2 + 1);
  **((_QWORD **)v2 + 1) = v8;
  --a1[8];
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v2);
  v11 = (int8x8_t)a1[2];
  if (v11)
  {
    v12 = a1 + 1;
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = v3;
      if (*(_QWORD *)&v11 <= v3)
        v14 = v3 % *(_QWORD *)&v11;
    }
    else
    {
      v14 = (v11.i32[0] - 1) & v3;
    }
    v15 = *(uint64_t ****)(*v12 + 8 * v14);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v11 - 1;
          while (1)
          {
            v19 = v16[1];
            if (v19 == (uint64_t *)v3)
            {
              if (*((unsigned __int8 *)v16 + 16) == (_DWORD)v3)
                goto LABEL_32;
            }
            else if (((unint64_t)v19 & v17) != v14)
            {
              goto LABEL_34;
            }
            v16 = (uint64_t **)*v16;
            if (!v16)
              goto LABEL_34;
          }
        }
        do
        {
          v18 = (unint64_t)v16[1];
          if (v18 == v3)
          {
            if (*((unsigned __int8 *)v16 + 16) == (_DWORD)v3)
            {
LABEL_32:
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v12, v16);
              if (__p)
                operator delete(__p);
              break;
            }
          }
          else
          {
            if (v18 >= *(_QWORD *)&v11)
              v18 %= *(_QWORD *)&v11;
            if (v18 != v14)
              break;
          }
          v16 = (uint64_t **)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_34:
  if (v4)
  {
    v20 = (unint64_t *)&v4->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

__n128 std::__introsort<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*,false>(_QWORD *a1, unint64_t a2, uint64_t **a3, uint64_t a4, char a5, __n128 result)
{
  __n128 *v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  __n128 v20;
  uint64_t *v21;
  __n128 v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  double *v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *k;
  uint64_t v33;
  unint64_t *v35;
  double *v36;
  unint64_t m;
  uint64_t v38;
  BOOL v39;
  unint64_t *v40;
  double *v41;
  unint64_t v42;
  __n128 v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v47;
  double *v48;
  uint64_t v49;
  unint64_t *v51;
  double *v52;
  __n128 v53;
  char v54;
  char v55;
  int v56;
  uint64_t v57;
  BOOL v58;
  unint64_t *v59;
  double *v60;
  BOOL v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  double *v72;
  uint64_t v73;
  unint64_t *v75;
  double *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t *v80;
  double *v81;
  _QWORD *v82;
  uint64_t *v83;
  _QWORD *j;
  uint64_t v85;
  unint64_t *v87;
  double *v88;
  uint64_t v89;
  unint64_t *v91;
  double *v92;
  __n128 v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t *v97;
  double *v98;
  uint64_t v99;
  unint64_t *v101;
  double *v102;
  uint64_t v103;
  unint64_t *v105;
  double *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  unint64_t *v121;
  double *v122;
  uint64_t v123;
  __n128 *v124;
  __n128 *v125;
  unint64_t v126;
  uint64_t v128;
  unint64_t *v129;
  double *v130;
  __n128 *v131;
  __n128 *v132;
  unint64_t v133;
  uint64_t v135;
  unint64_t *v136;
  double *v137;
  int64_t v138;
  int64_t v139;
  unint64_t v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  double *v147;
  double *v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  double *v155;
  double *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  double *v165;
  double *v166;
  uint64_t v167;
  uint64_t v169;
  double *v170;
  double *v171;
  uint64_t v173;
  unint64_t *v174;
  double *v175;
  _QWORD *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  unint64_t *v182;
  double *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v187;
  unint64_t *v188;
  double *v189;
  uint64_t v190;
  uint64_t v192;
  unint64_t *v193;
  double *v194;
  int64_t v195;
  uint64_t v197;
  unint64_t v198;
  __int128 v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v209;
  double *v210;
  double *v211;
  __int128 v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v221;
  unint64_t *v222;
  double *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  unint64_t *v230;
  double *v231;
  __n128 v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  __n128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;

BOOL geo::Intersect::SHSegmentComparator<double>::operator()(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;

  if (*(_QWORD *)&a1->f64[0] == *(_QWORD *)&a2->f64[0] && *(_QWORD *)&a1->f64[1] == *(_QWORD *)&a2->f64[1])
  {
    v3 = *a1;
    v5 = vaddq_f64(a1[1], *a1);
    v4 = *a2;
    v6 = vaddq_f64(a2[1], *a2);
    if (*(_QWORD *)&v5.f64[0] == *(_QWORD *)&v6.f64[0] && *(_QWORD *)&v5.f64[1] == *(_QWORD *)&v6.f64[1])
      return 0;
  }
  else
  {
    v3.f64[0] = a1->f64[0];
    v4.f64[0] = a2->f64[0];
  }
  if (v3.f64[0] > v4.f64[0])
  {
    v8 = a2[1].f64[0];
    v9 = a2[1].f64[1];
    v10 = a1->f64[1] - a2->f64[1];
    v11 = v3.f64[0] - v4.f64[0];
    v12 = -(v9 * v11 - v10 * v8);
    v13 = v12 < 0.0;
    if (v12 == 0.0)
      return -((v11 + a1[1].f64[0]) * v9 - (v10 + a1[1].f64[1]) * v8) <= 0.0;
    return v13;
  }
  v16 = a1->f64[1];
  v15 = a1[1].f64[0];
  v17 = a1[1].f64[1];
  v18 = a2->f64[1];
  v19 = v4.f64[0] - v3.f64[0];
  v20 = -(v17 * v19 - (v18 - v16) * v15);
  v21 = v20 <= 0.0;
  if (v20 == 0.0)
  {
    if (v3.f64[0] == v15 + v3.f64[0])
      return v16 < v18;
    v21 = -((v19 + a2[1].f64[0]) * v17 - (v18 - v16 + a2[1].f64[1]) * v15) <= 0.0;
  }
  return !v21;
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, __n128 result)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t *v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  double *v33;
  char v34;
  uint64_t v35;
  unint64_t *v36;
  double *v37;
  uint64_t v38;
  char v39;

  v5 = *((unsigned __int8 *)a2 + 16);
  v6 = *a2;
  if (v5 == *((unsigned __int8 *)a1 + 16))
  {
    v7 = *a1;
  }
  else
  {
    v7 = *a1;
    if (v6 == a1[1] && a2[1] == v7)
    {
      if (!*((_BYTE *)a2 + 16))
        goto LABEL_10;
LABEL_16:
      v16 = *a3;
      if (*((unsigned __int8 *)a3 + 16) != v5 && v16 == a2[1] && a3[1] == v6)
      {
        if (!*((_BYTE *)a3 + 16))
          goto LABEL_25;
      }
      else
      {
        v17 = **a4;
        v18 = (double *)(v17 + 16 * v16);
        v19 = (double *)(v17 + 16 * v6);
        if (*v18 >= *v19 && (*v18 != *v19 || v18[1] >= v19[1]))
        {
LABEL_25:
          result = *(__n128 *)a1;
          v22 = a1[2];
          v23 = *((_BYTE *)a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_BYTE *)a1 + 16) = v23;
          *((_BYTE *)a2 + 16) = v22;
          *(__n128 *)a2 = result;
          v24 = v22;
          v25 = *a3;
          if (*((unsigned __int8 *)a3 + 16) == v24)
          {
            v26 = *a2;
          }
          else
          {
            v26 = *a2;
            if (v25 == a2[1] && a3[1] == v26)
            {
              if (!*((_BYTE *)a3 + 16))
                return result;
LABEL_39:
              result = *(__n128 *)a2;
              v20 = a2[2];
              v34 = *((_BYTE *)a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *((_BYTE *)a2 + 16) = v34;
              goto LABEL_40;
            }
          }
          v31 = **a4;
          v32 = (unint64_t *)(v31 + 16 * v25);
          v33 = (double *)(v31 + 16 * v26);
          result.n128_u64[0] = *v32;
          if (*(double *)v32 >= *v33)
          {
            if (*(double *)v32 != *v33)
              return result;
            result.n128_u64[0] = v32[1];
            if (result.n128_f64[0] >= v33[1])
              return result;
          }
          goto LABEL_39;
        }
      }
      result = *(__n128 *)a1;
      v20 = a1[2];
      v21 = *((_BYTE *)a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_BYTE *)a1 + 16) = v21;
LABEL_40:
      *((_BYTE *)a3 + 16) = v20;
      *(__n128 *)a3 = result;
      return result;
    }
  }
  v9 = **a4;
  v10 = (unint64_t *)(v9 + 16 * v6);
  v11 = (double *)(v9 + 16 * v7);
  result.n128_u64[0] = *v10;
  if (*(double *)v10 < *v11)
    goto LABEL_16;
  if (*(double *)v10 == *v11)
  {
    result.n128_u64[0] = v10[1];
    if (result.n128_f64[0] < v11[1])
      goto LABEL_16;
  }
LABEL_10:
  v12 = *a3;
  if (*((unsigned __int8 *)a3 + 16) != v5 && v12 == a2[1] && a3[1] == v6)
  {
    if (!*((_BYTE *)a3 + 16))
      return result;
  }
  else
  {
    v13 = **a4;
    v14 = (unint64_t *)(v13 + 16 * v12);
    v15 = (double *)(v13 + 16 * v6);
    result.n128_u64[0] = *v14;
    if (*(double *)v14 >= *v15)
    {
      if (*(double *)v14 != *v15)
        return result;
      result.n128_u64[0] = v14[1];
      if (result.n128_f64[0] >= v15[1])
        return result;
    }
  }
  result = *(__n128 *)a2;
  v27 = a2[2];
  v28 = *((_BYTE *)a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *((_BYTE *)a2 + 16) = v28;
  *((_BYTE *)a3 + 16) = v27;
  *(__n128 *)a3 = result;
  v29 = *a2;
  if (*((unsigned __int8 *)a2 + 16) == *((unsigned __int8 *)a1 + 16))
  {
    v30 = *a1;
    goto LABEL_45;
  }
  v30 = *a1;
  if (v29 != a1[1] || a2[1] != v30)
  {
LABEL_45:
    v35 = **a4;
    v36 = (unint64_t *)(v35 + 16 * v29);
    v37 = (double *)(v35 + 16 * v30);
    result.n128_u64[0] = *v36;
    if (*(double *)v36 < *v37)
      goto LABEL_48;
    if (*(double *)v36 == *v37)
    {
      result.n128_u64[0] = v36[1];
      if (result.n128_f64[0] < v37[1])
        goto LABEL_48;
    }
    return result;
  }
  if (*((_BYTE *)a2 + 16))
  {
LABEL_48:
    result = *(__n128 *)a1;
    v38 = a1[2];
    v39 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_BYTE *)a1 + 16) = v39;
    *((_BYTE *)a2 + 16) = v38;
    *(__n128 *)a2 = result;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t **a5, __n128 a6)
{
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t *v16;
  double *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  double *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  double *v31;
  uint64_t v32;
  char v33;

  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(a1, (uint64_t *)a2, a3, a5, a6).n128_u64[0];
  v12 = *a4;
  if (*((unsigned __int8 *)a4 + 16) == *((unsigned __int8 *)a3 + 16))
  {
    v13 = *a3;
  }
  else
  {
    v13 = *a3;
    if (v12 == a3[1] && a4[1] == v13)
    {
      if (!*((_BYTE *)a4 + 16))
        return result;
LABEL_12:
      result = *(__n128 *)a3;
      v18 = a3[2];
      v19 = *((_BYTE *)a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_BYTE *)a3 + 16) = v19;
      *((_BYTE *)a4 + 16) = v18;
      *(__n128 *)a4 = result;
      v20 = *a3;
      if (*((unsigned __int8 *)a3 + 16) == *(unsigned __int8 *)(a2 + 16))
      {
        v21 = *(_QWORD *)a2;
      }
      else
      {
        v21 = *(_QWORD *)a2;
        if (v20 == *(_QWORD *)(a2 + 8) && a3[1] == v21)
        {
          if (!*((_BYTE *)a3 + 16))
            return result;
          goto LABEL_21;
        }
      }
      v22 = **a5;
      v23 = (unint64_t *)(v22 + 16 * v20);
      v24 = (double *)(v22 + 16 * v21);
      result.n128_u64[0] = *v23;
      if (*(double *)v23 >= *v24)
      {
        if (*(double *)v23 != *v24)
          return result;
        result.n128_u64[0] = v23[1];
        if (result.n128_f64[0] >= v24[1])
          return result;
      }
LABEL_21:
      result = *(__n128 *)a2;
      v25 = *(_QWORD *)(a2 + 16);
      v26 = *((_BYTE *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_BYTE *)(a2 + 16) = v26;
      *((_BYTE *)a3 + 16) = v25;
      *(__n128 *)a3 = result;
      v27 = *(_QWORD *)a2;
      if (*(unsigned __int8 *)(a2 + 16) == *((unsigned __int8 *)a1 + 16))
      {
        v28 = *a1;
      }
      else
      {
        v28 = *a1;
        if (v27 == a1[1] && *(_QWORD *)(a2 + 8) == v28)
        {
          if (!*(_BYTE *)(a2 + 16))
            return result;
          goto LABEL_30;
        }
      }
      v29 = **a5;
      v30 = (unint64_t *)(v29 + 16 * v27);
      v31 = (double *)(v29 + 16 * v28);
      result.n128_u64[0] = *v30;
      if (*(double *)v30 >= *v31)
      {
        if (*(double *)v30 != *v31)
          return result;
        result.n128_u64[0] = v30[1];
        if (result.n128_f64[0] >= v31[1])
          return result;
      }
LABEL_30:
      result = *(__n128 *)a1;
      v32 = a1[2];
      v33 = *(_BYTE *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_BYTE *)a1 + 16) = v33;
      *(_BYTE *)(a2 + 16) = v32;
      *(__n128 *)a2 = result;
      return result;
    }
  }
  v15 = **a5;
  v16 = (unint64_t *)(v15 + 16 * v12);
  v17 = (double *)(v15 + 16 * v13);
  result.n128_u64[0] = *v16;
  if (*(double *)v16 < *v17)
    goto LABEL_12;
  if (*(double *)v16 == *v17)
  {
    result.n128_u64[0] = v16[1];
    if (result.n128_f64[0] < v17[1])
      goto LABEL_12;
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t **a6, __n128 a7)
{
  __n128 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t *v18;
  double *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  double *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  double *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  double *v40;
  uint64_t v41;
  char v42;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>((uint64_t *)a1, a2, (uint64_t *)a3, a4, a6, a7).n128_u64[0];
  v14 = *a5;
  if (*((unsigned __int8 *)a5 + 16) == *((unsigned __int8 *)a4 + 16))
  {
    v15 = *a4;
  }
  else
  {
    v15 = *a4;
    if (v14 == a4[1] && a5[1] == v15)
    {
      if (!*((_BYTE *)a5 + 16))
        return result;
LABEL_12:
      result = *(__n128 *)a4;
      v20 = a4[2];
      v21 = *((_BYTE *)a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *((_BYTE *)a4 + 16) = v21;
      *((_BYTE *)a5 + 16) = v20;
      *(__n128 *)a5 = result;
      v22 = *a4;
      if (*((unsigned __int8 *)a4 + 16) == *(unsigned __int8 *)(a3 + 16))
      {
        v23 = *(_QWORD *)a3;
      }
      else
      {
        v23 = *(_QWORD *)a3;
        if (v22 == *(_QWORD *)(a3 + 8) && a4[1] == v23)
        {
          if (!*((_BYTE *)a4 + 16))
            return result;
          goto LABEL_21;
        }
      }
      v24 = **a6;
      v25 = (unint64_t *)(v24 + 16 * v22);
      v26 = (double *)(v24 + 16 * v23);
      result.n128_u64[0] = *v25;
      if (*(double *)v25 >= *v26)
      {
        if (*(double *)v25 != *v26)
          return result;
        result.n128_u64[0] = v25[1];
        if (result.n128_f64[0] >= v26[1])
          return result;
      }
LABEL_21:
      result = *(__n128 *)a3;
      v27 = *(_QWORD *)(a3 + 16);
      v28 = *((_BYTE *)a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_BYTE *)(a3 + 16) = v28;
      *((_BYTE *)a4 + 16) = v27;
      *(__n128 *)a4 = result;
      v29 = *(_QWORD *)a3;
      if (*(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(a2 + 16))
      {
        v30 = *(_QWORD *)a2;
      }
      else
      {
        v30 = *(_QWORD *)a2;
        if (v29 == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a3 + 8) == v30)
        {
          if (!*(_BYTE *)(a3 + 16))
            return result;
          goto LABEL_30;
        }
      }
      v31 = **a6;
      v32 = (unint64_t *)(v31 + 16 * v29);
      v33 = (double *)(v31 + 16 * v30);
      result.n128_u64[0] = *v32;
      if (*(double *)v32 >= *v33)
      {
        if (*(double *)v32 != *v33)
          return result;
        result.n128_u64[0] = v32[1];
        if (result.n128_f64[0] >= v33[1])
          return result;
      }
LABEL_30:
      result = *(__n128 *)a2;
      v34 = *(_QWORD *)(a2 + 16);
      v35 = *(_BYTE *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_BYTE *)(a2 + 16) = v35;
      *(_BYTE *)(a3 + 16) = v34;
      *(__n128 *)a3 = result;
      v36 = *(_QWORD *)a2;
      if (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(a1 + 16))
      {
        v37 = *(_QWORD *)a1;
      }
      else
      {
        v37 = *(_QWORD *)a1;
        if (v36 == *(_QWORD *)(a1 + 8) && *(_QWORD *)(a2 + 8) == v37)
        {
          if (!*(_BYTE *)(a2 + 16))
            return result;
          goto LABEL_39;
        }
      }
      v38 = **a6;
      v39 = (unint64_t *)(v38 + 16 * v36);
      v40 = (double *)(v38 + 16 * v37);
      result.n128_u64[0] = *v39;
      if (*(double *)v39 >= *v40)
      {
        if (*(double *)v39 != *v40)
          return result;
        result.n128_u64[0] = v39[1];
        if (result.n128_f64[0] >= v40[1])
          return result;
      }
LABEL_39:
      result = *(__n128 *)a1;
      v41 = *(_QWORD *)(a1 + 16);
      v42 = *(_BYTE *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v42;
      *(_BYTE *)(a2 + 16) = v41;
      *(__n128 *)a2 = result;
      return result;
    }
  }
  v17 = **a6;
  v18 = (unint64_t *)(v17 + 16 * v14);
  v19 = (double *)(v17 + 16 * v15);
  result.n128_u64[0] = *v18;
  if (*(double *)v18 < *v19)
    goto LABEL_12;
  if (*(double *)v18 == *v19)
  {
    result.n128_u64[0] = v18[1];
    if (result.n128_f64[0] < v19[1])
      goto LABEL_12;
  }
  return result;
}

__n128 std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(uint64_t a1, uint64_t a2, uint64_t **a3, __n128 result)
{
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t *v20;
  double *v21;
  uint64_t v22;
  __n128 *v23;
  __n128 *v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t *v28;
  double *v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  uint64_t v34;
  unint64_t *v35;
  double *v36;
  uint64_t v38;
  unint64_t *v39;
  double *v40;
  uint64_t v41;
  char v42;

  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (_OWORD *)(a2 - 24);
      v8 = *(_QWORD *)(a2 - 24);
      if (*(unsigned __int8 *)(a2 - 8) == *(unsigned __int8 *)(a1 + 16))
      {
        v9 = *(_QWORD *)a1;
        goto LABEL_57;
      }
      v9 = *(_QWORD *)a1;
      if (v8 != *(_QWORD *)(a1 + 8) || *(_QWORD *)(a2 - 16) != v9)
      {
LABEL_57:
        v38 = **a3;
        v39 = (unint64_t *)(v38 + 16 * v8);
        v40 = (double *)(v38 + 16 * v9);
        result.n128_u64[0] = *v39;
        if (*(double *)v39 < *v40)
          goto LABEL_63;
        if (*(double *)v39 == *v40)
        {
          result.n128_u64[0] = v39[1];
          if (result.n128_f64[0] < v40[1])
            goto LABEL_63;
        }
        return result;
      }
      if (*(_BYTE *)(a2 - 8))
      {
LABEL_63:
        result = *(__n128 *)a1;
        v41 = *(_QWORD *)(a1 + 16);
        v42 = *(_BYTE *)(a2 - 8);
        *(_OWORD *)a1 = *v7;
        *(_BYTE *)(a1 + 16) = v42;
        *(_BYTE *)(a2 - 8) = v41;
        *v7 = result;
        return result;
      }
      return result;
    case 3uLL:
      result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>((_QWORD *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24), a3, result).n128_u64[0];
      return result;
    case 4uLL:
      result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>((uint64_t *)a1, a1 + 24, (uint64_t *)(a1 + 48), (uint64_t *)(a2 - 24), a3, result).n128_u64[0];
      return result;
    case 5uLL:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(a1, a1 + 24, a1 + 48, (uint64_t *)(a1 + 72), (uint64_t *)(a2 - 24), a3, result).n128_u64[0];
      return result;
    default:
      v10 = a1 + 48;
      result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>((_QWORD *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a3, result).n128_u64[0];
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return result;
      v12 = 0;
      v13 = 0;
      while (2)
      {
        v15 = *(unsigned __int8 *)(v11 + 16);
        v16 = *(_QWORD *)v11;
        if (v15 == *(unsigned __int8 *)(v10 + 16))
        {
          v17 = *(_QWORD *)v10;
        }
        else
        {
          v17 = *(_QWORD *)v10;
          if (v16 == *(_QWORD *)(v10 + 8) && *(_QWORD *)(v11 + 8) == v17)
          {
            if (!*(_BYTE *)(v11 + 16))
              goto LABEL_8;
            result = *(__n128 *)v10;
            *(_OWORD *)v11 = *(_OWORD *)v10;
            *(_BYTE *)(v11 + 16) = *(_BYTE *)(v10 + 16);
            v14 = a1;
            if (v10 == a1)
              goto LABEL_7;
            goto LABEL_36;
          }
        }
        v19 = **a3;
        v20 = (unint64_t *)(v19 + 16 * v16);
        v21 = (double *)(v19 + 16 * v17);
        result.n128_u64[0] = *v20;
        if (*(double *)v20 >= *v21)
        {
          if (*(double *)v20 != *v21)
            goto LABEL_8;
          result.n128_u64[0] = v20[1];
          if (result.n128_f64[0] >= v21[1])
            goto LABEL_8;
        }
        v17 = *(_QWORD *)(v11 + 8);
        result = *(__n128 *)v10;
        *(_OWORD *)v11 = *(_OWORD *)v10;
        *(_BYTE *)(v11 + 16) = *(_BYTE *)(v10 + 16);
        if (v10 == a1)
        {
LABEL_6:
          v14 = a1;
          goto LABEL_7;
        }
        if (!v15)
        {
          v22 = v12;
          while (1)
          {
            v23 = (__n128 *)(a1 + v22);
            v24 = (__n128 *)(a1 + v22 + 24);
            if (*(_BYTE *)(a1 + v22 + 40))
            {
              v25 = v24->n128_u64[0];
              if (v16 == v23[2].n128_u64[0] && v17 == v25)
                goto LABEL_48;
            }
            else
            {
              v25 = v24->n128_u64[0];
            }
            v27 = **a3;
            v28 = (unint64_t *)(v27 + 16 * v16);
            v29 = (double *)(v27 + 16 * v25);
            result.n128_u64[0] = *v28;
            if (*(double *)v28 >= *v29)
            {
              if (*(double *)v28 != *v29)
                goto LABEL_47;
              result.n128_u64[0] = v28[1];
              if (result.n128_f64[0] >= v29[1])
                goto LABEL_47;
            }
            v10 -= 24;
            result = *v24;
            v23[3] = *v24;
            v23[4].n128_u8[0] = *(_BYTE *)(a1 + v22 + 40);
            v22 -= 24;
            if (v22 == -48)
              goto LABEL_6;
          }
        }
LABEL_36:
        v22 = v12;
        while (2)
        {
          v30 = (__n128 *)(a1 + v22);
          v31 = (__n128 *)(a1 + v22 + 24);
          if (v15 == *(unsigned __int8 *)(a1 + v22 + 40))
          {
            v32 = v31->n128_u64[0];
          }
          else
          {
            v32 = v31->n128_u64[0];
            if (v16 == v30[2].n128_u64[0] && v17 == v32)
            {
LABEL_37:
              v10 -= 24;
              result = *v31;
              v30[3] = *v31;
              v30[4].n128_u8[0] = *(_BYTE *)(a1 + v22 + 40);
              v22 -= 24;
              if (v22 == -48)
                goto LABEL_6;
              continue;
            }
          }
          break;
        }
        v34 = **a3;
        v35 = (unint64_t *)(v34 + 16 * v16);
        v36 = (double *)(v34 + 16 * v32);
        result.n128_u64[0] = *v35;
        if (*(double *)v35 < *v36)
          goto LABEL_37;
        if (*(double *)v35 == *v36)
        {
          result.n128_u64[0] = v35[1];
          if (result.n128_f64[0] >= v36[1])
          {
LABEL_47:
            v14 = v10;
            goto LABEL_7;
          }
          goto LABEL_37;
        }
LABEL_48:
        v14 = a1 + v22 + 48;
LABEL_7:
        *(_QWORD *)v14 = v16;
        *(_QWORD *)(v14 + 8) = v17;
        *(_BYTE *)(v14 + 16) = v15;
        if (++v13 != 8)
        {
LABEL_8:
          v10 = v11;
          v12 += 24;
          v11 += 24;
          if (v11 == a2)
            return result;
          continue;
        }
        return result;
      }
  }
}

void std::__shared_ptr_emplace<geo::Polygon2<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::Polygon2<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<geo::Polygon2<double>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_pointer<geo::Polygon2<double> *,std::shared_ptr<geo::Polygon2<double>>::__shared_ptr_default_delete<geo::Polygon2<double>,geo::Polygon2<double>>,std::allocator<geo::Polygon2<double>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<geo::Polygon2<double> *,std::shared_ptr<geo::Polygon2<double>>::__shared_ptr_default_delete<geo::Polygon2<double>,geo::Polygon2<double>>,std::allocator<geo::Polygon2<double>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void sub_19FC61218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC61290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKVectorOverlayPolygonGroup;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FC615D0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC616A4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC617C0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC618BC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC619C0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC61B24(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC61C38(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC61D4C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FC61ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::ARWorldIntersectorLogic::~ARWorldIntersectorLogic(md::ARWorldIntersectorLogic *this)
{
  md::ARWorldIntersectorLogic::~ARWorldIntersectorLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *(_QWORD *)this = &off_1E429E148;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 272);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 192);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 18);
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
    operator delete(v7);
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::ARWorldIntersectorLogic::didBecomeInactive(md::ARWorldIntersectorLogic *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t i;
  char *v30;
  char *v31;
  unint64_t v32;
  _BYTE v33[32];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v33;
  v30 = v33;
  v31 = v33;
  v32 = 4;
  v6 = (_QWORD *)*((_QWORD *)this + 18);
  if (v6)
  {
    while (1)
    {
      v8 = (v5 - v30) >> 3;
      if (v32 < v8 + 1)
        break;
LABEL_9:
      *(_QWORD *)v5 = v6[3];
      v7 = v31;
      v5 = v31 + 8;
      v31 += 8;
      v6 = (_QWORD *)*v6;
      if (!v6)
      {
        if (v30 != v5)
        {
          v23 = *((_QWORD *)this + 15);
          v24 = v30 - 8;
          do
          {
            v25 = *((_QWORD *)v24 + 1);
            v24 += 8;
            gdc::Registry::destroy(v23, v25);
          }
          while (v24 != v7);
        }
        goto LABEL_30;
      }
    }
    v9 = (1 << -(char)__clz(v32 + 1));
    if (v32 >= 0xFFFFFFFFFFFFFFFELL)
      v9 = 1;
    if (v9 <= v8 + 1)
      v10 = v8 + 1;
    else
      v10 = v9;
    v11 = (char *)malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
    v12 = v11;
    v13 = v30;
    if (v30 != v31)
    {
      v14 = v31 - v30 - 8;
      if (v14 < 0x18)
      {
        v15 = v11;
      }
      else
      {
        v15 = v11;
        if ((unint64_t)(v11 - v30) >= 0x20)
        {
          v16 = (v14 >> 3) + 1;
          v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
          v15 = &v11[v17];
          v18 = (__int128 *)(v30 + 16);
          v19 = v11 + 16;
          v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v21 = *v18;
            *(v19 - 1) = *(v18 - 1);
            *v19 = v21;
            v18 += 2;
            v19 += 2;
            v20 -= 4;
          }
          while (v20);
          if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_25;
          v13 = &v30[v17];
        }
      }
      do
      {
        v22 = *(_QWORD *)v13;
        v13 += 8;
        *(_QWORD *)v15 = v22;
        v15 += 8;
      }
      while (v13 != v31);
    }
LABEL_25:
    if (v30 != v33)
      free(v30);
    v5 = &v12[8 * v8];
    v30 = v12;
    v31 = v5;
    v32 = v10;
    goto LABEL_9;
  }
LABEL_30:
  if (*((_QWORD *)this + 19))
  {
    v26 = (_QWORD *)*((_QWORD *)this + 18);
    if (v26)
    {
      do
      {
        v27 = (_QWORD *)*v26;
        operator delete(v26);
        v26 = v27;
      }
      while (v27);
    }
    *((_QWORD *)this + 18) = 0;
    v28 = *((_QWORD *)this + 17);
    if (v28)
    {
      for (i = 0; i != v28; ++i)
        *(_QWORD *)(*((_QWORD *)this + 16) + 8 * i) = 0;
    }
    *((_QWORD *)this + 19) = 0;
  }
  if (v30 != v33)
    free(v30);
}

void sub_19FC621AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11)
{
  if (a9 != a11)
    free(a9);
  _Unwind_Resume(exception_object);
}

void md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  void *__p;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  __int128 v18;

  v4 = (_QWORD *)operator new();
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&__p, a1);
  v5 = operator new();
  v6 = __p;
  v7 = v14;
  __p = 0;
  v14 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v8 = v15;
  v9 = v16;
  *(_QWORD *)(v5 + 16) = v15;
  *(_QWORD *)(v5 + 24) = v9;
  *(_DWORD *)(v5 + 32) = v17;
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    v8 = 0;
    v6[v10] = v5 + 16;
    v15 = 0;
    v16 = 0;
  }
  *(_OWORD *)(v5 + 40) = v18;
  v18 = 0uLL;
  v4[2] = "md::ARWorldIntersectorContext]";
  v4[3] = 29;
  v4[4] = v5;
  *v4 = &off_1E42B1298;
  v4[1] = 0x6DBE9777D7FEDAAELL;
  *a2 = v4;
  if (v8)
  {
    do
    {
      v11 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  v12 = __p;
  __p = 0;
  if (v12)
    operator delete(v12);
}

void sub_19FC62310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  md::ARWorldIntersectorContext::~ARWorldIntersectorContext((md::ARWorldIntersectorContext *)va);
  MEMORY[0x1A1AF4E00](v2, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x6DBE9777D7FEDAAELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0x6DBE9777D7FEDAAELL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

double md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARWorldIntersectorLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3, arComponents::LocalBounds *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int64x2_t **v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  double v44;
  unint64_t v45;
  double *v46;
  double *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  double v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  char v69;
  char v70;
  double v71;
  uint64_t v72;
  double v73;
  float32x2_t *v74;
  unint64_t *v75;
  uint64_t *v76;
  __int128 *v77;
  unint64_t *v78;
  uint64_t *j;
  _QWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  uint8x8_t v101;
  uint64_t *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t **v107;
  uint64_t **v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  float v121;
  float v122;
  _BOOL8 v123;
  unint64_t v124;
  unint64_t v125;
  size_t prime;
  void *v127;
  uint64_t ***v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  size_t v132;
  size_t v133;
  size_t v134;
  _QWORD *k;
  size_t v136;
  uint64_t v137;
  unint64_t v138;
  uint8x8_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t ***v142;
  _QWORD *v143;
  uint64_t v144;
  size_t v145;
  unint64_t v146;
  void *v147;
  int v148;
  int64x2_t v149;
  uint64_t v150;
  double v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  float64x2_t v165;
  double v166;
  double v167;
  double v168;
  float64_t v169;
  double v170;
  double v171;
  double v172;
  float64_t v173;
  double v174;
  double v175;
  double v176;
  float64_t v177;
  double v178;
  double v179;
  double v180;
  float64_t v181;
  double v182;
  double v183;
  double v184;
  float64x2_t v185;
  double v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v195;
  double v196;
  double v197;
  double v198;
  double v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  float32x2_t *v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  _QWORD *v209;
  char *v210;
  void *v211;
  uint64_t v212;
  void *v213;
  unint64_t v214;
  unint64_t v215;
  _OWORD *v216;
  char *v217;
  uint64_t *v218;
  uint64_t *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  __int128 *v224;
  _OWORD *v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  unint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t m;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  float v243;
  _QWORD *v245;
  _QWORD *v246;
  int8x8_t v247;
  uint8x8_t v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  float32x2_t v312;
  void *v313;
  double v314;
  double v315;
  __int128 v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  int8x8_t v325;
  uint8x8_t v326;
  uint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  unint64_t *v336;
  float v338;
  float32x2_t v339;
  char *v340;
  unint64_t v341;
  int v342;
  int v343;
  int8x8_t v344;
  uint8x8_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t **v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t *v353;
  unint64_t v354;
  uint64_t *v355;
  int8x8_t v356;
  uint8x8_t v357;
  _QWORD *v358;
  _QWORD *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  _QWORD *v366;
  char v367;
  _QWORD *v368;
  uint64_t v369;
  _QWORD *jj;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  _QWORD *v374;
  char *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char *v380;
  _QWORD *v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  char *v385;
  __int128 *v386;
  uint64_t v387;
  __int128 v388;
  uint64_t v389;
  uint64_t v390;
  int8x8_t v391;
  uint8x8_t v392;
  uint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  _QWORD *v402;
  char v403;
  uint64_t v404;
  _QWORD *kk;
  uint64_t v406;
  unint64_t v407;
  _BYTE *v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  size_t v414;
  char *v415;
  _QWORD *v416;
  char *v417;
  char *v418;
  uint64_t v419;
  int8x8_t v420;
  uint8x8_t v421;
  uint64_t v422;
  _QWORD *v423;
  _QWORD *v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  _QWORD *v431;
  char v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  void **v441;
  _BYTE *v442;
  void *v443;
  unint64_t v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  const void *v450;
  uint64_t v451;
  char *v452;
  size_t v453;
  const void *v454;
  int64_t v455;
  char *v456;
  _QWORD *v457;
  void *v458;
  char *v459;
  uint64_t v460;
  int v461;
  _BYTE *v462;
  int v463;
  _BYTE *v464;
  __int128 *v466;
  __int128 *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  unint64_t v473;
  char *v474;
  char *v475;
  char *v476;
  char *v477;
  _QWORD *v478;
  _QWORD *v479;
  char *v480;
  int64_t v481;
  unint64_t v482;
  __int128 *v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v487;
  uint64_t v488;
  __int128 *v489;
  _OWORD *v490;
  uint64_t v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  char *mm;
  __int128 v497;
  unint64_t v498;
  char *v499;
  BOOL v500;
  uint64_t v501;
  uint64_t v502;
  __int128 *v503;
  _OWORD *v504;
  uint64_t v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  _QWORD *v510;
  uint64_t v511;
  uint64_t v512;
  _QWORD *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int *v518;
  void **v519;
  void *v520;
  float32x4_t v521;
  int v522;
  uint64_t v523;
  float v524;
  float v525;
  float32x2_t v527;
  float v528;
  BOOL v530;
  float v531;
  uint64_t v532;
  unint64_t v533;
  int8x8_t v534;
  uint8x8_t v535;
  _QWORD *v536;
  _QWORD *v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  _QWORD *v542;
  uint64_t v543;
  _QWORD *v544;
  char v545;
  uint64_t v546;
  _QWORD *nn;
  uint64_t v548;
  unint64_t v549;
  _BYTE *v550;
  uint64_t v551;
  char *v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  size_t v556;
  char *v557;
  char *v558;
  char *v559;
  _QWORD *v560;
  uint64_t v561;
  uint64_t *v562;
  uint64_t *v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  _QWORD *v571;
  _QWORD *v572;
  _QWORD **v573;
  _QWORD *v574;
  unint64_t v575;
  uint8x8_t v576;
  unint64_t v577;
  uint64_t **v578;
  uint64_t *v579;
  unsigned int v580;
  unint64_t v581;
  unint64_t v582;
  _QWORD *v583;
  _QWORD *v584;
  uint64_t v585;
  uint64_t ii;
  void *v587;
  void *v588;
  _QWORD *v589;
  unint64_t v590;
  void *v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  double *v595;
  uint64_t v596;
  uint64_t n;
  _QWORD *v598;
  void *v599;
  uint64_t ***v600;
  __int128 *v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  uint64_t v611;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v620;
  unint64_t v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  uint64_t v625;
  BOOL v626;
  float32x2_t *v627;
  unint64_t v628;
  unint64_t v629;
  uint64_t v630;
  unint64_t v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v646;
  unint64_t v647;
  uint64_t v648;
  unint64_t v649;
  unint64_t v650;
  uint64_t v651;
  BOOL v652;
  __int128 *v653;
  unint64_t v654;
  unint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  uint64_t v672;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  uint64_t v677;
  unint64_t v678;
  uint64_t v679;
  BOOL v680;
  float32x2_t *v681;
  uint64_t v682;
  unint64_t v683;
  uint64_t v684;
  double *v686;
  unint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  BOOL v710;
  float32x2_t *v711;
  unint64_t v712;
  unint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  BOOL v735;
  double *v736;
  unint64_t v737;
  unint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v748;
  unint64_t v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  unint64_t v757;
  uint64_t v758;
  unint64_t v759;
  uint64_t v760;
  unint64_t v761;
  uint64_t v762;
  BOOL v763;
  float32x2_t *v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  void *v769;
  void *v770;
  uint64_t v771;
  _QWORD *v772;
  uint64_t v773;
  double v774;
  float32x2_t v775;
  double *v776;
  uint64_t *v777;
  float64x2_t v778;
  float64x2_t v779;
  _QWORD *v780;
  _QWORD *v781;
  float64x2_t v782;
  uint64_t v783;
  uint64_t v784;
  unint64_t *v785;
  uint64_t v786;
  unint64_t *v787;
  uint64_t v788;
  double v789;
  int *v790;
  arComponents::LocalBounds *v791;
  arComponents::LocalBounds *v792;
  uint64_t v793;
  double v794;
  unint64_t v795;
  void *v796[2];
  void *v797[2];
  int v798;
  double v799;
  double v800;
  double v801;
  float64x2_t v802;
  float64x2_t v803;
  double v804;
  double v805;
  double v806;
  double v807;
  double v808;
  double v809;
  double v810;
  double v811;
  double v812;
  double v813;
  double v814;
  double v815;
  double v816;
  double v817;
  double v818;
  double v819;
  double v820;
  __int128 v821;
  uint64_t v822;
  __int128 v823;
  double v824;
  char v825;
  uint64_t v826;
  _BYTE v827[12];
  float v828;
  float v829;
  float v830;
  float v831;
  float v832;
  float v833;
  float v834;
  float v835;
  float v836;
  float v837;
  float v838;
  float v839;
  float v840;
  float v841;
  float v842;
  float v843;
  float v844;
  float v845;
  float v846;
  float v847;
  float v848;
  float v849;
  float v850;
  float v851;
  float v852;
  float v853;
  float v854;
  float v855;
  float v856;
  float v857;
  float v858;
  float v859;
  float v860;
  float v861;
  float v862;
  float v863;
  float v864;
  float v865;
  float v866;
  float v867;
  float v868;
  float v869;
  float v870;
  float v871[16];
  uint64_t v872;
  std::__shared_weak_count *v873;
  float v874[6];
  int v875;
  int32x4_t v876;
  int v877;
  unint64_t v878;
  void *__p[4];
  _BYTE v880[32];
  _BYTE v881[32];
  uint64_t v882;
  __int128 v883;
  uint64_t v884;
  unsigned __int8 v885;
  __int128 v886;
  uint64_t v887;
  unsigned __int8 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  uint64_t v898;
  int v899;
  unint64_t v900;
  _QWORD v901[3];

  if (*((_QWORD *)a4 + 3))
  {
    v7 = (_QWORD *)*((_QWORD *)a4 + 2);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *((_QWORD *)a4 + 2) = 0;
    v9 = *((_QWORD *)a4 + 1);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(*(_QWORD *)a4 + 8 * i) = 0;
    }
    *((_QWORD *)a4 + 3) = 0;
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v770 = (void *)objc_claimAutoreleasedReturnValue();
  v788 = *a3;
  v777 = (uint64_t *)a3[1];
  v793 = a3[2];
  v11 = gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)60>>(*(_QWORD *)(a1 + 120));
  v12 = gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)60>>(*(_QWORD *)(a1 + 120));
  v13 = *(_QWORD *)(a1 + 120);
  v14 = gdc::Registry::storage<arComponents::Boundary>(v13);
  v15 = gdc::Registry::storage<arComponents::WorldTransform>(v13);
  v16 = gdc::Registry::storage<arComponents::UseForOcclusionTest>(v13);
  v17 = gdc::Registry::storage<arComponents::AddToWorldIntersectorPending>(v13);
  v786 = a1;
  if (*(_QWORD *)(a1 + 168) && !*(_BYTE *)(a1 + 184))
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14 + 88) - *(_QWORD *)(v14 + 80)) >> 3);
    v19 = *(_QWORD *)(v17 + 80);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v15 + 88) - *(_QWORD *)(v15 + 80)) >> 4) < v18)
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v15 + 88) - *(_QWORD *)(v15 + 80)) >> 4);
    if (*(_QWORD *)(v16 + 88) - *(_QWORD *)(v16 + 80) < v18)
      v18 = *(_QWORD *)(v16 + 88) - *(_QWORD *)(v16 + 80);
    if (*(_QWORD *)(v17 + 88) - v19 < v18)
      v18 = *(_QWORD *)(v17 + 88) - v19;
    if (!v18
      && *(_QWORD *)(v12 + 88) == *(_QWORD *)(v12 + 80)
      && *(_QWORD *)(v11 + 88) == *(_QWORD *)(v11 + 80)
      && !*(_BYTE *)(v793 + 2))
    {
      goto LABEL_232;
    }
  }
  v20 = *(_QWORD *)(a1 + 120);
  v21 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v20);
  v22 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v20);
  v23 = gdc::Registry::storage<arComponents::UseForOcclusionTest>(v20);
  v24 = (_QWORD *)v23;
  memset(__p, 0, 24);
  v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[11] - v21[10]) >> 3);
  v26 = *(_QWORD *)(v23 + 80);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22[11] - v22[10]) >> 4) < v25)
    v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22[11] - v22[10]) >> 4);
  if (*(_QWORD *)(v23 + 88) - v26 >= v25)
    v27 = v25;
  else
    v27 = *(_QWORD *)(v23 + 88) - v26;
  if (v27)
  {
    if (v27 >= 0x555555555555556)
      abort();
    __p[0] = operator new(48 * v27);
    __p[1] = __p[0];
    __p[2] = (char *)__p[0] + 48 * v27;
  }
  v28 = (unint64_t *)v21[7];
  v29 = (uint64_t *)v21[8];
  if (v22[8] - v22[7] >= (unint64_t)((char *)v29 - (char *)v28))
    v30 = v21 + 4;
  else
    v30 = v22 + 4;
  if (v24[8] - v24[7] >= v30[4] - v30[3])
    v31 = v30;
  else
    v31 = v24 + 4;
  if (v21 + 4 == v31)
  {
    v799 = COERCE_DOUBLE(__p);
    if (v28 != (unint64_t *)v29)
    {
      v74 = (float32x2_t *)v21[10];
      do
      {
        v602 = *((unsigned int *)v28 + 1);
        v603 = v602 >> 7;
        v604 = v22[4];
        v605 = (v22[5] - v604) >> 3;
        if (v602 >> 7 < v605)
        {
          v606 = *(_QWORD *)(v604 + 8 * v603);
          if (v606)
          {
            v607 = *(unsigned __int16 *)(v606 + 2 * (v602 & 0x7F));
            v609 = v22[7];
            v608 = v22[8];
            v610 = (v608 - v609) >> 3;
            if (v610 > v607)
            {
              v611 = v609 + 8 * v607;
              if (v611 != v608 && *(_DWORD *)(v611 + 4) == (_DWORD)v602)
              {
                v613 = v24[4];
                if (v603 < (v24[5] - v613) >> 3)
                {
                  v614 = *(_QWORD *)(v613 + 8 * v603);
                  if (v614)
                  {
                    v615 = *(unsigned __int16 *)(v614 + 2 * (v602 & 0x7F));
                    v617 = v24[7];
                    v616 = v24[8];
                    if (v615 < (v616 - v617) >> 3)
                    {
                      v618 = v617 + 8 * v615;
                      if (v618 != v616 && *(_DWORD *)(v618 + 4) == (_DWORD)v602)
                      {
                        v620 = *v28;
                        v621 = *v28 >> 39;
                        if (v621 < v605
                          && (v622 = *(_QWORD *)(v604 + 8 * v621)) != 0
                          && (v623 = *(unsigned __int16 *)(v622 + 2 * (HIDWORD(v620) & 0x7F)), v610 > v623)
                          && ((v624 = HIDWORD(v620), v625 = v609 + 8 * v623, v625 != v608)
                            ? (v626 = *(_DWORD *)(v625 + 4) == (_DWORD)v624)
                            : (v626 = 0),
                              v626))
                        {
                          v601 = (__int128 *)(v22[10] + 80 * v623);
                        }
                        else
                        {
                          v601 = (__int128 *)v22[11];
                        }
                        md::ARWorldIntersectorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::ResolvedDependencies const&,md::ARWorldIntersectorContext &)::$_0::operator()((int64x2_t ***)&v799, v74, v601);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v74 += 3;
        ++v28;
      }
      while (v28 != (unint64_t *)v29);
    }
  }
  if (v22 + 4 == v31)
  {
    v799 = COERCE_DOUBLE(__p);
    v75 = (unint64_t *)v22[7];
    v76 = (uint64_t *)v22[8];
    if (v75 != (unint64_t *)v76)
    {
      v77 = (__int128 *)v22[10];
      do
      {
        v628 = *((unsigned int *)v75 + 1);
        v629 = v628 >> 7;
        v630 = v21[4];
        v631 = (v21[5] - v630) >> 3;
        if (v628 >> 7 < v631)
        {
          v632 = *(_QWORD *)(v630 + 8 * v629);
          if (v632)
          {
            v633 = *(unsigned __int16 *)(v632 + 2 * (v628 & 0x7F));
            v635 = v21[7];
            v634 = v21[8];
            v636 = (v634 - v635) >> 3;
            if (v636 > v633)
            {
              v637 = v635 + 8 * v633;
              if (v637 != v634 && *(_DWORD *)(v637 + 4) == (_DWORD)v628)
              {
                v639 = v24[4];
                if (v629 < (v24[5] - v639) >> 3)
                {
                  v640 = *(_QWORD *)(v639 + 8 * v629);
                  if (v640)
                  {
                    v641 = *(unsigned __int16 *)(v640 + 2 * (v628 & 0x7F));
                    v643 = v24[7];
                    v642 = v24[8];
                    if (v641 < (v642 - v643) >> 3)
                    {
                      v644 = v643 + 8 * v641;
                      if (v644 != v642 && *(_DWORD *)(v644 + 4) == (_DWORD)v628)
                      {
                        v646 = *v75;
                        v647 = *v75 >> 39;
                        if (v647 < v631
                          && (v648 = *(_QWORD *)(v630 + 8 * v647)) != 0
                          && (v649 = *(unsigned __int16 *)(v648 + 2 * (HIDWORD(v646) & 0x7F)), v636 > v649)
                          && ((v650 = HIDWORD(v646), v651 = v635 + 8 * v649, v651 != v634)
                            ? (v652 = *(_DWORD *)(v651 + 4) == (_DWORD)v650)
                            : (v652 = 0),
                              v652))
                        {
                          v627 = (float32x2_t *)(v21[10] + 24 * v649);
                        }
                        else
                        {
                          v627 = (float32x2_t *)v21[11];
                        }
                        md::ARWorldIntersectorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::ResolvedDependencies const&,md::ARWorldIntersectorContext &)::$_0::operator()((int64x2_t ***)&v799, v627, v77);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v77 += 5;
        ++v75;
      }
      while (v75 != (unint64_t *)v76);
    }
  }
  if (v24 + 4 == v31)
  {
    v799 = COERCE_DOUBLE(__p);
    v78 = (unint64_t *)v24[7];
    for (j = (uint64_t *)v24[8]; v78 != (unint64_t *)j; ++v78)
    {
      v654 = *((unsigned int *)v78 + 1);
      v655 = v654 >> 7;
      v656 = v21[4];
      v657 = (v21[5] - v656) >> 3;
      if (v654 >> 7 >= v657)
        continue;
      v658 = *(_QWORD *)(v656 + 8 * v655);
      if (!v658)
        continue;
      v659 = *(unsigned __int16 *)(v658 + 2 * (v654 & 0x7F));
      v661 = v21[7];
      v660 = v21[8];
      v662 = (v660 - v661) >> 3;
      if (v662 <= v659)
        continue;
      v663 = v661 + 8 * v659;
      if (v663 == v660 || *(_DWORD *)(v663 + 4) != (_DWORD)v654)
        continue;
      v665 = v22[4];
      v666 = (v22[5] - v665) >> 3;
      if (v655 >= v666)
        continue;
      v667 = *(_QWORD *)(v665 + 8 * v655);
      if (!v667)
        continue;
      v668 = *(unsigned __int16 *)(v667 + 2 * (v654 & 0x7F));
      v670 = v22[7];
      v669 = v22[8];
      v671 = (v669 - v670) >> 3;
      if (v671 <= v668)
        continue;
      v672 = v670 + 8 * v668;
      if (v672 == v669 || *(_DWORD *)(v672 + 4) != (_DWORD)v654)
        continue;
      v674 = *v78;
      v675 = HIDWORD(*v78);
      v676 = *v78 >> 39;
      if (v676 < v657
        && (v677 = *(_QWORD *)(v656 + 8 * v676)) != 0
        && (v678 = *(unsigned __int16 *)(v677 + 2 * (HIDWORD(v674) & 0x7F)), v662 > v678)
        && ((v679 = v661 + 8 * v678, v679 != v660) ? (v680 = *(_DWORD *)(v679 + 4) == (_DWORD)v675) : (v680 = 0), v680))
      {
        v681 = (float32x2_t *)(v21[10] + 24 * v678);
        if (v676 >= v666)
          goto LABEL_821;
      }
      else
      {
        v681 = (float32x2_t *)v21[11];
        if (v676 >= v666)
          goto LABEL_821;
      }
      v682 = *(_QWORD *)(v665 + 8 * v676);
      if (v682)
      {
        v683 = *(unsigned __int16 *)(v682 + 2 * (HIDWORD(v674) & 0x7F));
        if (v671 > v683)
        {
          v684 = v670 + 8 * v683;
          if (v684 != v669 && *(_DWORD *)(v684 + 4) == (_DWORD)v675)
          {
            v653 = (__int128 *)(v22[10] + 80 * v683);
            goto LABEL_822;
          }
        }
      }
LABEL_821:
      v653 = (__int128 *)v22[11];
LABEL_822:
      md::ARWorldIntersectorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::ResolvedDependencies const&,md::ARWorldIntersectorContext &)::$_0::operator()((int64x2_t ***)&v799, v681, v653);
    }
  }
  v32 = (_QWORD *)gdc::Registry::storage<arComponents::AddToWorldIntersectorPending>(*(_QWORD *)(v786 + 120));
  v33 = v32;
  v791 = a4;
  if (v32[29])
  {
    v34 = (_QWORD *)v32[28];
    if (v34)
    {
      v35 = v32[31];
      v36 = *((int64x2_t ***)v32 + 7);
      v37 = (uint64_t)(v32[8] - (_QWORD)v36) >> 3;
      do
      {
        v799 = *(double *)&v36;
        v800 = *(double *)&v37;
        v826 = v35;
        v38 = v34[6];
        if (!v38)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          goto LABEL_961;
        }
        (*(void (**)(uint64_t, uint64_t *, double *))(*(_QWORD *)v38 + 48))(v38, &v826, &v799);
        v34 = (_QWORD *)*v34;
      }
      while (v34);
    }
  }
  v33[8] = v33[7];
  v33[11] = v33[10];
  v39 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)60>>(*(_QWORD *)(v786 + 120));
  v800 = 0.0;
  v801 = 0.0;
  v799 = COERCE_DOUBLE(&v800);
  v40 = v39[7];
  v41 = v39[8];
  if (v40 != v41)
  {
    v42 = (_QWORD *)v39[10];
    do
    {
      v43 = (_QWORD *)*v42;
      if ((_QWORD *)*v42 != v42 + 1)
      {
        do
        {
          v44 = v800;
          v45 = v43[4];
          v46 = &v800;
          v47 = &v800;
          if (v800 == 0.0)
          {
LABEL_55:
            v49 = operator new(0x30uLL);
            v49[4] = v45;
            v50 = v43[5];
            v49[5] = v50;
            if (v50)
            {
              v51 = (unint64_t *)(v50 + 8);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v47;
            *(_QWORD *)v46 = v49;
            if (**(_QWORD **)&v799)
            {
              v799 = **(double **)&v799;
              v49 = *(_QWORD **)v46;
            }
            v53 = v800;
            _ZF = v49 == *(_QWORD **)&v800;
            *((_BYTE *)v49 + 24) = v49 == *(_QWORD **)&v800;
            if (!_ZF)
            {
              do
              {
                v54 = v49[2];
                if (*(_BYTE *)(v54 + 24))
                  break;
                v55 = *(_QWORD **)(v54 + 16);
                v56 = *v55;
                if (*v55 == v54)
                {
                  v59 = v55[1];
                  if (!v59 || (v60 = *(unsigned __int8 *)(v59 + 24), v57 = (_BYTE *)(v59 + 24), v60))
                  {
                    if (*(_QWORD **)v54 == v49)
                    {
                      v61 = (uint64_t *)v49[2];
                    }
                    else
                    {
                      v61 = *(uint64_t **)(v54 + 8);
                      v62 = *v61;
                      *(_QWORD *)(v54 + 8) = *v61;
                      if (v62)
                      {
                        *(_QWORD *)(v62 + 16) = v54;
                        v55 = *(_QWORD **)(v54 + 16);
                      }
                      v61[2] = (uint64_t)v55;
                      *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v61;
                      *v61 = v54;
                      *(_QWORD *)(v54 + 16) = v61;
                      v55 = (_QWORD *)v61[2];
                      v54 = *v55;
                    }
                    *((_BYTE *)v61 + 24) = 1;
                    *((_BYTE *)v55 + 24) = 0;
                    v65 = *(_QWORD *)(v54 + 8);
                    *v55 = v65;
                    if (v65)
                      *(_QWORD *)(v65 + 16) = v55;
                    *(_QWORD *)(v54 + 16) = v55[2];
                    *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
                    *(_QWORD *)(v54 + 8) = v55;
                    goto LABEL_87;
                  }
                }
                else if (!v56 || (v58 = *(unsigned __int8 *)(v56 + 24), v57 = (_BYTE *)(v56 + 24), v58))
                {
                  if (*(_QWORD **)v54 == v49)
                  {
                    v63 = v49[1];
                    *(_QWORD *)v54 = v63;
                    if (v63)
                    {
                      *(_QWORD *)(v63 + 16) = v54;
                      v55 = *(_QWORD **)(v54 + 16);
                    }
                    v49[2] = v55;
                    *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v49;
                    v49[1] = v54;
                    *(_QWORD *)(v54 + 16) = v49;
                    v55 = (_QWORD *)v49[2];
                  }
                  else
                  {
                    v49 = (_QWORD *)v49[2];
                  }
                  *((_BYTE *)v49 + 24) = 1;
                  *((_BYTE *)v55 + 24) = 0;
                  v54 = v55[1];
                  v64 = *(_QWORD **)v54;
                  v55[1] = *(_QWORD *)v54;
                  if (v64)
                    v64[2] = v55;
                  *(_QWORD *)(v54 + 16) = v55[2];
                  *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
                  *(_QWORD *)v54 = v55;
LABEL_87:
                  v55[2] = v54;
                  break;
                }
                *(_BYTE *)(v54 + 24) = 1;
                v49 = v55;
                *((_BYTE *)v55 + 24) = v55 == *(_QWORD **)&v53;
                *v57 = 1;
              }
              while (v55 != *(_QWORD **)&v53);
            }
            ++*(_QWORD *)&v801;
          }
          else
          {
            while (1)
            {
              while (1)
              {
                v47 = *(double **)&v44;
                v48 = *(_QWORD *)(*(_QWORD *)&v44 + 32);
                if (v45 >= v48)
                  break;
                v44 = *v47;
                v46 = v47;
                if (!*(_QWORD *)v47)
                  goto LABEL_55;
              }
              if (v48 >= v45)
                break;
              v44 = v47[1];
              if (v44 == 0.0)
              {
                v46 = v47 + 1;
                goto LABEL_55;
              }
            }
          }
          v66 = (_QWORD *)v43[1];
          if (v66)
          {
            do
            {
              v67 = v66;
              v66 = (_QWORD *)*v66;
            }
            while (v66);
          }
          else
          {
            do
            {
              v67 = (_QWORD *)v43[2];
              _ZF = *v67 == (_QWORD)v43;
              v43 = v67;
            }
            while (!_ZF);
          }
          v43 = v67;
        }
        while (v67 != v42 + 1);
      }
      v42 += 3;
      v40 += 8;
    }
    while (v40 != v41);
  }
  v68 = operator new();
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v826);
  v69 = *(_BYTE *)(v786 + 208);
  v70 = *(_BYTE *)(v786 + 288);
  v71 = v800;
  *(double *)v68 = v799;
  *(double *)(v68 + 8) = v71;
  v72 = v68 + 8;
  v73 = v801;
  *(double *)(v68 + 16) = v801;
  if (v73 == 0.0)
  {
    *(_QWORD *)v68 = v72;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)&v71 + 16) = v72;
    v799 = COERCE_DOUBLE(&v800);
    v800 = 0.0;
    v801 = 0.0;
  }
  *(_QWORD *)(v68 + 32) = 0;
  *(_QWORD *)(v68 + 40) = 0;
  *(_QWORD *)(v68 + 24) = v68 + 32;
  v80 = *(_QWORD **)(v793 + 8);
  if (v80 != (_QWORD *)(v793 + 16))
  {
    do
    {
      v102 = *(uint64_t **)(v68 + 32);
      v103 = (_QWORD *)(v68 + 32);
      if (*(_QWORD *)(v68 + 24) == v68 + 32)
        goto LABEL_137;
      v104 = *(_QWORD **)(v68 + 32);
      v105 = (_QWORD *)(v68 + 32);
      if (v102)
      {
        do
        {
          v103 = v104;
          v104 = (_QWORD *)v104[1];
        }
        while (v104);
      }
      else
      {
        do
        {
          v103 = (_QWORD *)v105[2];
          _ZF = *v103 == (_QWORD)v105;
          v105 = v103;
        }
        while (_ZF);
      }
      v106 = v80[4];
      if (v103[4] < v106)
      {
LABEL_137:
        if (v102)
          v107 = (uint64_t **)v103;
        else
          v107 = (uint64_t **)(v68 + 32);
        if (v102)
          v108 = (uint64_t **)(v103 + 1);
        else
          v108 = (uint64_t **)(v68 + 32);
      }
      else
      {
        v107 = (uint64_t **)(v68 + 32);
        v108 = (uint64_t **)(v68 + 32);
        if (v102)
        {
          v108 = (uint64_t **)(v68 + 32);
          while (1)
          {
            while (1)
            {
              v107 = (uint64_t **)v102;
              v110 = v102[4];
              if (v106 >= v110)
                break;
              v102 = *v107;
              v108 = v107;
              if (!*v107)
                goto LABEL_152;
            }
            if (v110 >= v106)
              break;
            v108 = v107 + 1;
            v102 = v107[1];
            if (!v102)
              goto LABEL_152;
          }
        }
      }
      if (*v108)
      {
        v109 = (_QWORD *)v80[1];
        if (v109)
          goto LABEL_158;
      }
      else
      {
LABEL_152:
        v111 = (uint64_t *)operator new(0x38uLL);
        v112 = v111;
        v111[4] = v80[4];
        v111[5] = v80[5];
        v113 = v80[6];
        v111[6] = v113;
        if (v113)
        {
          v114 = (unint64_t *)(v113 + 8);
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
        }
        *v111 = 0;
        v111[1] = 0;
        v111[2] = (uint64_t)v107;
        *v108 = v111;
        v116 = **(_QWORD **)(v68 + 24);
        if (v116)
        {
          *(_QWORD *)(v68 + 24) = v116;
          v112 = *v108;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v68 + 32), v112);
        ++*(_QWORD *)(v68 + 40);
        v109 = (_QWORD *)v80[1];
        if (v109)
        {
          do
          {
LABEL_158:
            v117 = v109;
            v109 = (_QWORD *)*v109;
          }
          while (v109);
          goto LABEL_130;
        }
      }
      do
      {
        v117 = (_QWORD *)v80[2];
        _ZF = *v117 == (_QWORD)v80;
        v80 = v117;
      }
      while (!_ZF);
LABEL_130:
      v80 = v117;
    }
    while (v117 != (_QWORD *)(v793 + 16));
  }
  *(_OWORD *)(v68 + 48) = 0u;
  *(_OWORD *)(v68 + 64) = 0u;
  *(_DWORD *)(v68 + 80) = 1065353216;
  v81 = *(_QWORD *)v827;
  *(_QWORD *)(v68 + 88) = v826;
  *(_QWORD *)(v68 + 96) = v81;
  if (v81)
  {
    v82 = (unint64_t *)(v81 + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  *(_OWORD *)(v68 + 104) = *(_OWORD *)__p;
  *(void **)(v68 + 120) = __p[2];
  memset(__p, 0, 24);
  *(_BYTE *)(v68 + 128) = v69;
  *(_BYTE *)(v68 + 129) = v70;
  v84 = (_QWORD *)operator new();
  *v84 = &off_1E42E6F08;
  v84[1] = 0;
  v84[2] = 0;
  v84[3] = v68;
  v85 = *(std::__shared_weak_count **)(v786 + 176);
  *(_QWORD *)(v786 + 168) = v68;
  *(_QWORD *)(v786 + 176) = v84;
  if (v85)
  {
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *(std::__shared_weak_count **)v827;
  if (*(_QWORD *)v827)
  {
    v89 = (unint64_t *)(*(_QWORD *)v827 + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v92 = *(_QWORD *)(v786 + 168);
  v91 = *(_QWORD *)(v786 + 176);
  if (v91)
  {
    v93 = (unint64_t *)(v91 + 8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)v791 + 6);
  *((_QWORD *)v791 + 5) = v92;
  *((_QWORD *)v791 + 6) = v91;
  if (!v95)
    goto LABEL_125;
  v96 = (unint64_t *)&v95->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
    std::__shared_weak_count::__release_weak(v95);
    v98 = *((_QWORD *)v791 + 1);
    if (!v98)
      goto LABEL_175;
  }
  else
  {
LABEL_125:
    v98 = *((_QWORD *)v791 + 1);
    if (!v98)
      goto LABEL_175;
  }
  v99 = **(uint64_t ****)v791;
  if (v99)
  {
    v100 = *v99;
    if (v100)
    {
      v101 = (uint8x8_t)vcnt_s8((int8x8_t)v98);
      v101.i16[0] = vaddlv_u8(v101);
      if (v101.u32[0] < 2uLL)
      {
        while (1)
        {
          v118 = v100[1];
          if (v118)
          {
            if ((v118 & (v98 - 1)) != 0)
              goto LABEL_175;
          }
          else if (!*((_BYTE *)v100 + 16))
          {
            goto LABEL_230;
          }
          v100 = (uint64_t *)*v100;
          if (!v100)
            goto LABEL_175;
        }
      }
      do
      {
        v119 = v100[1];
        if (v119)
        {
          if (v119 < v98 || v119 % v98)
            break;
        }
        else if (!*((_BYTE *)v100 + 16))
        {
          goto LABEL_230;
        }
        v100 = (uint64_t *)*v100;
      }
      while (v100);
    }
  }
LABEL_175:
  v120 = operator new(0x18uLL);
  *v120 = 0;
  v120[1] = 0;
  *((_BYTE *)v120 + 16) = 0;
  v121 = (float)(unint64_t)(*((_QWORD *)v791 + 3) + 1);
  v122 = *((float *)v791 + 8);
  if (!v98 || (float)(v122 * (float)v98) < v121)
  {
    v123 = 1;
    if (v98 >= 3)
      v123 = (v98 & (v98 - 1)) != 0;
    v124 = v123 | (2 * v98);
    v125 = vcvtps_u32_f32(v121 / v122);
    if (v124 <= v125)
      prime = v125;
    else
      prime = v124;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v98 = *((_QWORD *)v791 + 1);
    }
    if (prime > v98)
      goto LABEL_187;
    if (prime >= v98)
      goto LABEL_212;
    v138 = vcvtps_u32_f32((float)*((unint64_t *)v791 + 3) / *((float *)v791 + 8));
    if (v98 < 3 || (v139 = (uint8x8_t)vcnt_s8((int8x8_t)v98), v139.i16[0] = vaddlv_u8(v139), v139.u32[0] > 1uLL))
    {
      v138 = std::__next_prime(v138);
    }
    else
    {
      v140 = 1 << -(char)__clz(v138 - 1);
      if (v138 >= 2)
        v138 = v140;
    }
    if (prime <= v138)
      prime = v138;
    if (prime >= v98)
    {
      v98 = *((_QWORD *)v791 + 1);
    }
    else
    {
      if (prime)
      {
LABEL_187:
        if (prime >> 61)
LABEL_953:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v127 = operator new(8 * prime);
        v128 = *(uint64_t ****)v791;
        *(_QWORD *)v791 = v127;
        if (v128)
          operator delete(v128);
        v129 = 0;
        *((_QWORD *)v791 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)v791 + 8 * v129++) = 0;
        while (prime != v129);
        v131 = (char *)v791 + 16;
        v130 = (_QWORD *)*((_QWORD *)v791 + 2);
        if (!v130)
          goto LABEL_211;
        v132 = v130[1];
        v133 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v134 = v132 & v133;
          *(_QWORD *)(*(_QWORD *)v791 + 8 * v134) = v131;
          for (k = (_QWORD *)*v130; *v130; k = (_QWORD *)*v130)
          {
            v136 = k[1] & v133;
            if (v136 == v134)
            {
              v130 = k;
            }
            else if (*(_QWORD *)(*(_QWORD *)v791 + 8 * v136))
            {
              *v130 = *k;
              v137 = 8 * v136;
              *k = **(_QWORD **)(*(_QWORD *)v791 + v137);
              **(_QWORD **)(*(_QWORD *)v791 + v137) = k;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v791 + 8 * v136) = v130;
              v130 = k;
              v134 = v136;
            }
          }
LABEL_211:
          v98 = prime;
          goto LABEL_212;
        }
        if (v132 >= prime)
          v132 %= prime;
        *(_QWORD *)(*(_QWORD *)v791 + 8 * v132) = v131;
        v141 = (_QWORD *)*v130;
        if (!*v130)
          goto LABEL_211;
        while (1)
        {
          v145 = v141[1];
          if (v145 >= prime)
            v145 %= prime;
          if (v145 != v132)
          {
            if (!*(_QWORD *)(*(_QWORD *)v791 + 8 * v145))
            {
              *(_QWORD *)(*(_QWORD *)v791 + 8 * v145) = v130;
              goto LABEL_216;
            }
            *v130 = *v141;
            v144 = 8 * v145;
            *v141 = **(_QWORD **)(*(_QWORD *)v791 + v144);
            **(_QWORD **)(*(_QWORD *)v791 + v144) = v141;
            v141 = v130;
          }
          v145 = v132;
LABEL_216:
          v130 = v141;
          v141 = (_QWORD *)*v141;
          v132 = v145;
          if (!v141)
            goto LABEL_211;
        }
      }
      v600 = *(uint64_t ****)v791;
      *(_QWORD *)v791 = 0;
      if (v600)
        operator delete(v600);
      v98 = 0;
      *((_QWORD *)v791 + 1) = 0;
    }
  }
LABEL_212:
  v142 = *(uint64_t ****)v791;
  v143 = **(_QWORD ***)v791;
  if (v143)
  {
    *v120 = *v143;
  }
  else
  {
    *v120 = *((_QWORD *)v791 + 2);
    *((_QWORD *)v791 + 2) = v120;
    *v142 = (uint64_t **)((char *)v791 + 16);
    if (!*v120)
      goto LABEL_229;
    v146 = *(_QWORD *)(*v120 + 8);
    if ((v98 & (v98 - 1)) != 0)
    {
      if (v146 >= v98)
        v146 %= v98;
    }
    else
    {
      v146 &= v98 - 1;
    }
    v143 = (_QWORD *)(*(_QWORD *)v791 + 8 * v146);
  }
  *v143 = v120;
LABEL_229:
  ++*((_QWORD *)v791 + 3);
LABEL_230:
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)&v800);
  a1 = v786;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_232:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  v148 = objc_msgSend(v147, "arRenderAvoidanceObjects");

  if (!v148)
  {
    if (!*(_QWORD *)(a1 + 152))
      goto LABEL_754;
    v208 = v880;
    __p[0] = v880;
    __p[1] = v880;
    __p[2] = v880;
    __p[3] = (void *)4;
    v209 = *(_QWORD **)(a1 + 144);
    if (!v209)
    {
LABEL_268:
      if (*(_QWORD *)(a1 + 152))
      {
        v232 = *(_QWORD **)(a1 + 144);
        if (v232)
        {
          do
          {
            v233 = (_QWORD *)*v232;
            operator delete(v232);
            v232 = v233;
          }
          while (v233);
        }
        *(_QWORD *)(a1 + 144) = 0;
        v234 = *(_QWORD *)(a1 + 136);
        if (v234)
        {
          for (m = 0; m != v234; ++m)
            *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * m) = 0;
        }
        *(_QWORD *)(a1 + 152) = 0;
      }
      if (__p[0] != __p[2])
        free(__p[0]);
LABEL_754:
      *(_BYTE *)(a1 + 184) = 0;

      return;
    }
    while (1)
    {
      v211 = __p[0];
      v212 = (v208 - (char *)__p[0]) >> 3;
      if (__p[3] < (void *)(v212 + 1))
        break;
LABEL_247:
      *(_QWORD *)v208 = v209[3];
      v210 = (char *)__p[1];
      v208 = (char *)__p[1] + 8;
      __p[1] = (char *)__p[1] + 8;
      v209 = (_QWORD *)*v209;
      if (!v209)
      {
        a1 = v786;
        if (__p[0] != v208)
        {
          v229 = *(_QWORD *)(v786 + 120);
          v230 = (char *)__p[0] - 8;
          do
          {
            v231 = *((_QWORD *)v230 + 1);
            v230 += 8;
            gdc::Registry::destroy(v229, v231);
          }
          while (v230 != v210);
        }
        goto LABEL_268;
      }
    }
    v213 = __p[2];
    v214 = (1 << -(char)__clz((unint64_t)__p[3] + 1));
    if (__p[3] >= (void *)0xFFFFFFFFFFFFFFFELL)
      v214 = 1;
    if (v214 <= v212 + 1)
      v215 = v212 + 1;
    else
      v215 = v214;
    v216 = malloc_type_malloc(8 * v215, 0x100004000313F17uLL);
    v217 = (char *)v216;
    v218 = (uint64_t *)__p[0];
    v219 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v220 = (char *)__p[1] - (char *)__p[0] - 8;
      if (v220 < 0x18)
      {
        v221 = v216;
      }
      else
      {
        v221 = v216;
        if ((unint64_t)((char *)v216 - (char *)__p[0]) >= 0x20)
        {
          v222 = (v220 >> 3) + 1;
          v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
          v221 = (_QWORD *)((char *)v216 + v223);
          v224 = (__int128 *)((char *)__p[0] + 16);
          v225 = v216 + 1;
          v226 = v222 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v227 = *v224;
            *(v225 - 1) = *(v224 - 1);
            *v225 = v227;
            v224 += 2;
            v225 += 2;
            v226 -= 4;
          }
          while (v226);
          if (v222 == (v222 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_263;
          v218 = (uint64_t *)((char *)v218 + v223);
        }
      }
      do
      {
        v228 = *v218++;
        *v221++ = v228;
      }
      while (v218 != v219);
    }
LABEL_263:
    if (v211 != v213)
      free(__p[0]);
    v208 = &v217[8 * v212];
    __p[0] = v217;
    __p[1] = v208;
    __p[3] = (void *)v215;
    goto LABEL_247;
  }
  v825 = objc_msgSend(v770, "arRenderAvoidanceObjectsIntersection");
  if (*(_QWORD *)(v788 + 5584))
    v150 = *(_QWORD *)(v788 + 5584);
  else
    v150 = v788;
  v151 = *(double *)(v788 + 512);
  v821 = *(_OWORD *)(v788 + 496);
  v152 = *(_QWORD *)(v788 + 512);
  v823 = *(_OWORD *)(v788 + 3088);
  v153 = *(double *)(v788 + 3104);
  v822 = v152;
  v824 = v153;
  v154 = *(double *)(v150 + 808);
  v155 = *(double *)(v150 + 840);
  v156 = *(double *)(v150 + 872);
  v157 = *(double *)(v150 + 904);
  v158 = *(double *)(v150 + 816);
  v159 = *(double *)(v150 + 848);
  v160 = *(double *)(v150 + 880);
  v161 = *(double *)(v150 + 912);
  v162 = *(double *)(v150 + 824);
  v149.i64[0] = *(_QWORD *)(v150 + 856);
  v163 = *(double *)(v150 + 888);
  v164 = *(double *)(v150 + 832);
  v165.f64[0] = *(float64_t *)(v150 + 864);
  v166 = *(double *)(v150 + 896);
  v776 = (double *)v150;
  v167 = *(double *)(v150 + 928);
  v168 = v164 + v154;
  v169 = v165.f64[0] + v155;
  v170 = v166 + v156;
  v171 = v167 + v157;
  v172 = v164 - v154;
  v173 = v165.f64[0] - v155;
  v174 = v166 - v156;
  v175 = v167 - v157;
  v176 = v164 + v158;
  v177 = v165.f64[0] + v159;
  v178 = v166 + v160;
  v179 = v167 + v161;
  v180 = v164 - v158;
  v181 = v165.f64[0] - v159;
  v182 = v166 - v160;
  v183 = v167 - v161;
  v184 = v164 - v162;
  v185.f64[0] = v162;
  v185.f64[1] = v184;
  v186 = v167 - *(double *)(v150 + 920);
  v187 = vmulq_f64(v185, v185);
  v185.f64[0] = *(float64_t *)(v150 + 920);
  v165.f64[1] = v166;
  *(_QWORD *)&v188.f64[0] = v149.i64[0];
  v188.f64[1] = v163;
  v189 = vsubq_f64(v165, v188);
  v190 = (float64x2_t)vzip1q_s64(v149, (int64x2_t)v189);
  v191 = vmlaq_f64(v187, v190, v190);
  v190.f64[1] = v189.f64[1];
  v190.f64[0] = v163;
  __asm { FMOV            V27.2D, #1.0 }
  v195 = vdivq_f64(_Q27, vsqrtq_f64(vmlaq_f64(v191, v190, v190)));
  v799 = v162 * v195.f64[0];
  v800 = *(double *)v149.i64 * v195.f64[0];
  v801 = v163 * v195.f64[0];
  v802 = vmulq_f64(v195, v185);
  v803 = vmulq_laneq_f64(v189, v195, 1);
  v196 = 1.0 / sqrt(v176 * v176 + v177 * v177 + v178 * v178);
  v804 = vmuld_lane_f64(v186, v195, 1);
  v805 = v196 * v176;
  v806 = v196 * v177;
  v807 = v196 * v178;
  v197 = 1.0 / sqrt(v180 * v180 + v181 * v181 + v182 * v182);
  v808 = v196 * v179;
  v809 = v197 * v180;
  v810 = v197 * v181;
  v811 = v197 * v182;
  v198 = 1.0 / sqrt(v168 * v168 + v169 * v169 + v170 * v170);
  v812 = v197 * v183;
  v813 = v198 * v168;
  v814 = v198 * v169;
  v815 = v198 * v170;
  v199 = 1.0 / sqrt(v172 * v172 + v173 * v173 + v174 * v174);
  v816 = v198 * v171;
  v817 = v199 * v172;
  v818 = v199 * v173;
  v819 = v199 * v174;
  v820 = v199 * v175;
  geo::Frustum<double>::calculateCorners(&v799, (double *)(v150 + 808), 0.0);
  *(_OWORD *)v796 = 0u;
  *(_OWORD *)v797 = 0u;
  v798 = 1065353216;
  v200 = *(_QWORD *)(a1 + 120);
  v201 = (_QWORD *)gdc::Registry::storage<arComponents::Boundary>(v200);
  v202 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v200);
  v203 = gdc::Registry::storage<arComponents::UseForOcclusionTest>(v200);
  v204 = (_QWORD *)v203;
  v205 = (float32x2_t *)v201[10];
  v206 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v201[11] - (_QWORD)v205) >> 3);
  v207 = *(_QWORD *)(v203 + 80);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v202[11] - v202[10]) >> 4) < v206)
    v206 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v202[11] - v202[10]) >> 4);
  if (*(_QWORD *)(v203 + 88) - v207 < v206)
    v206 = *(_QWORD *)(v203 + 88) - v207;
  if (v206)
  {
    if (v206 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v769 = operator new(24 * v206);
  }
  else
  {
    v769 = 0;
  }
  v237 = v201[7];
  v236 = v201[8];
  if (v202[8] - v202[7] >= (unint64_t)(v236 - v237))
    v238 = v201 + 4;
  else
    v238 = v202 + 4;
  if (v204[8] - v204[7] >= v238[4] - v238[3])
    v239 = v238;
  else
    v239 = v204 + 4;
  if (v201 + 4 == v239)
  {
    __p[0] = &v799;
    __p[1] = (void *)v786;
    __p[2] = v796;
    __p[3] = &v825;
    for (*(_QWORD *)v880 = &v821; v237 != v236; v237 += 8)
    {
      v687 = *(unsigned int *)(v237 + 4);
      v688 = v687 >> 7;
      v689 = v202[4];
      v690 = (v202[5] - v689) >> 3;
      if (v687 >> 7 < v690)
      {
        v691 = *(_QWORD *)(v689 + 8 * v688);
        if (v691)
        {
          v692 = *(unsigned __int16 *)(v691 + 2 * (v687 & 0x7F));
          v694 = v202[7];
          v693 = v202[8];
          v695 = (v693 - v694) >> 3;
          if (v695 > v692)
          {
            v696 = v694 + 8 * v692;
            if (v696 != v693 && *(_DWORD *)(v696 + 4) == (_DWORD)v687)
            {
              v698 = v204[4];
              if (v688 < (v204[5] - v698) >> 3)
              {
                v699 = *(_QWORD *)(v698 + 8 * v688);
                if (v699)
                {
                  v700 = *(unsigned __int16 *)(v699 + 2 * (v687 & 0x7F));
                  v702 = v204[7];
                  v701 = v204[8];
                  if (v700 < (v701 - v702) >> 3)
                  {
                    v703 = v702 + 8 * v700;
                    if (v703 != v701 && *(_DWORD *)(v703 + 4) == (_DWORD)v687)
                    {
                      v705 = *(_QWORD *)v237;
                      v706 = *(_QWORD *)v237 >> 39;
                      if (v706 < v690
                        && (v707 = *(_QWORD *)(v689 + 8 * v706)) != 0
                        && (v708 = *(unsigned __int16 *)(v707 + 2 * (HIDWORD(v705) & 0x7F)), v695 > v708)
                        && ((v709 = v694 + 8 * v708, v709 != v693)
                          ? (v710 = *(_DWORD *)(v709 + 4) == HIDWORD(v705))
                          : (v710 = 0),
                            v710))
                      {
                        v686 = (double *)(v202[10] + 80 * v708);
                      }
                      else
                      {
                        v686 = (double *)v202[11];
                      }
                      md::ARWorldIntersectorLogic::generateDebugAvoidancesIntersections(md::CameraContext const&,md::GeometryContext const&,md::ARWorldIntersectorContext &,BOOL)::$_0::operator()((uint64_t)__p, v705, v205, v686);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v205 += 3;
    }
  }
  if (v202 + 4 == v239)
  {
    __p[0] = &v799;
    __p[1] = (void *)v786;
    __p[2] = v796;
    __p[3] = &v825;
    *(_QWORD *)v880 = &v821;
    v593 = v202[7];
    v594 = v202[8];
    if (v593 != v594)
    {
      v595 = (double *)v202[10];
      do
      {
        v712 = *(unsigned int *)(v593 + 4);
        v713 = v712 >> 7;
        v714 = v201[4];
        v715 = (v201[5] - v714) >> 3;
        if (v712 >> 7 < v715)
        {
          v716 = *(_QWORD *)(v714 + 8 * v713);
          if (v716)
          {
            v717 = *(unsigned __int16 *)(v716 + 2 * (v712 & 0x7F));
            v719 = v201[7];
            v718 = v201[8];
            v720 = (v718 - v719) >> 3;
            if (v720 > v717)
            {
              v721 = v719 + 8 * v717;
              if (v721 != v718 && *(_DWORD *)(v721 + 4) == (_DWORD)v712)
              {
                v723 = v204[4];
                if (v713 < (v204[5] - v723) >> 3)
                {
                  v724 = *(_QWORD *)(v723 + 8 * v713);
                  if (v724)
                  {
                    v725 = *(unsigned __int16 *)(v724 + 2 * (v712 & 0x7F));
                    v727 = v204[7];
                    v726 = v204[8];
                    if (v725 < (v726 - v727) >> 3)
                    {
                      v728 = v727 + 8 * v725;
                      if (v728 != v726 && *(_DWORD *)(v728 + 4) == (_DWORD)v712)
                      {
                        v730 = *(_QWORD *)v593;
                        v731 = *(_QWORD *)v593 >> 39;
                        if (v731 < v715
                          && (v732 = *(_QWORD *)(v714 + 8 * v731)) != 0
                          && (v733 = *(unsigned __int16 *)(v732 + 2 * (HIDWORD(v730) & 0x7F)), v720 > v733)
                          && ((v734 = v719 + 8 * v733, v734 != v718)
                            ? (v735 = *(_DWORD *)(v734 + 4) == HIDWORD(v730))
                            : (v735 = 0),
                              v735))
                        {
                          v711 = (float32x2_t *)(v201[10] + 24 * v733);
                        }
                        else
                        {
                          v711 = (float32x2_t *)v201[11];
                        }
                        md::ARWorldIntersectorLogic::generateDebugAvoidancesIntersections(md::CameraContext const&,md::GeometryContext const&,md::ARWorldIntersectorContext &,BOOL)::$_0::operator()((uint64_t)__p, v730, v711, v595);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v595 += 10;
        v593 += 8;
      }
      while (v593 != v594);
    }
  }
  if (v204 + 4 == v239)
  {
    __p[0] = &v799;
    __p[1] = (void *)v786;
    __p[2] = v796;
    __p[3] = &v825;
    *(_QWORD *)v880 = &v821;
    v596 = v204[7];
    for (n = v204[8]; v596 != n; v596 += 8)
    {
      v737 = *(unsigned int *)(v596 + 4);
      v738 = v737 >> 7;
      v739 = v201[4];
      v740 = (v201[5] - v739) >> 3;
      if (v737 >> 7 >= v740)
        continue;
      v741 = *(_QWORD *)(v739 + 8 * v738);
      if (!v741)
        continue;
      v742 = *(unsigned __int16 *)(v741 + 2 * (v737 & 0x7F));
      v744 = v201[7];
      v743 = v201[8];
      v745 = (v743 - v744) >> 3;
      if (v745 <= v742)
        continue;
      v746 = v744 + 8 * v742;
      if (v746 == v743 || *(_DWORD *)(v746 + 4) != (_DWORD)v737)
        continue;
      v748 = v202[4];
      v749 = (v202[5] - v748) >> 3;
      if (v738 >= v749)
        continue;
      v750 = *(_QWORD *)(v748 + 8 * v738);
      if (!v750)
        continue;
      v751 = *(unsigned __int16 *)(v750 + 2 * (v737 & 0x7F));
      v753 = v202[7];
      v752 = v202[8];
      v754 = (v752 - v753) >> 3;
      if (v754 <= v751)
        continue;
      v755 = v753 + 8 * v751;
      if (v755 == v752 || *(_DWORD *)(v755 + 4) != (_DWORD)v737)
        continue;
      v757 = *(_QWORD *)v596;
      v758 = HIDWORD(*(_QWORD *)v596);
      v759 = *(_QWORD *)v596 >> 39;
      if (v759 < v740
        && (v760 = *(_QWORD *)(v739 + 8 * v759)) != 0
        && (v761 = *(unsigned __int16 *)(v760 + 2 * (HIDWORD(v757) & 0x7F)), v745 > v761)
        && ((v762 = v744 + 8 * v761, v762 != v743) ? (v763 = *(_DWORD *)(v762 + 4) == (_DWORD)v758) : (v763 = 0), v763))
      {
        v764 = (float32x2_t *)(v201[10] + 24 * v761);
        if (v759 >= v749)
          goto LABEL_914;
      }
      else
      {
        v764 = (float32x2_t *)v201[11];
        if (v759 >= v749)
          goto LABEL_914;
      }
      v765 = *(_QWORD *)(v748 + 8 * v759);
      if (v765)
      {
        v766 = *(unsigned __int16 *)(v765 + 2 * (HIDWORD(v757) & 0x7F));
        if (v754 > v766)
        {
          v767 = v753 + 8 * v766;
          if (v767 != v752 && *(_DWORD *)(v767 + 4) == (_DWORD)v758)
          {
            v736 = (double *)(v202[10] + 80 * v766);
            goto LABEL_915;
          }
        }
      }
LABEL_914:
      v736 = (double *)v202[11];
LABEL_915:
      md::ARWorldIntersectorLogic::generateDebugAvoidancesIntersections(md::CameraContext const&,md::GeometryContext const&,md::ARWorldIntersectorContext &,BOOL)::$_0::operator()((uint64_t)__p, v757, v764, v736);
    }
  }
  v240 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)60>>(*(_QWORD *)(v786 + 120));
  v241 = v240[7];
  v771 = v240[8];
  if (v241 == v771)
  {
LABEL_701:
    v573 = (_QWORD **)(v786 + 144);
    v574 = *(_QWORD **)(v786 + 144);
    if (!v574)
      goto LABEL_727;
    while (1)
    {
      while (1)
      {
        if (v796[1])
        {
          v575 = v574[2];
          v576 = (uint8x8_t)vcnt_s8((int8x8_t)v796[1]);
          v576.i16[0] = vaddlv_u8(v576);
          if (v576.u32[0] > 1uLL)
          {
            v577 = v574[2];
            if ((void *)v575 >= v796[1])
              v577 = v575 % (unint64_t)v796[1];
          }
          else
          {
            v577 = ((unint64_t)v796[1] - 1) & v575;
          }
          v578 = (uint64_t **)*((_QWORD *)v796[0] + v577);
          if (v578)
          {
            v579 = *v578;
            if (v579)
              break;
          }
        }
LABEL_726:
        gdc::Registry::destroy(*(_QWORD *)(v786 + 120), v574[3]);
        v574 = (_QWORD *)*v574;
        if (!v574)
          goto LABEL_727;
      }
      v580 = (unsigned __int16)v574[2];
      if (v576.u32[0] < 2uLL)
      {
        while (1)
        {
          v582 = v579[1];
          if (v575 == v582)
          {
            if (__PAIR64__(*((unsigned __int16 *)v579 + 9), *((unsigned __int16 *)v579 + 8)) == __PAIR64__(WORD1(v575), v580)&& *((_DWORD *)v579 + 5) == HIDWORD(v575))
            {
              goto LABEL_724;
            }
          }
          else if ((v582 & ((unint64_t)v796[1] - 1)) != v577)
          {
            goto LABEL_726;
          }
          v579 = (uint64_t *)*v579;
          if (!v579)
            goto LABEL_726;
        }
      }
      while (1)
      {
        v581 = v579[1];
        if (v575 == v581)
          break;
        if ((void *)v581 >= v796[1])
          v581 %= (unint64_t)v796[1];
        if (v581 != v577)
          goto LABEL_726;
LABEL_712:
        v579 = (uint64_t *)*v579;
        if (!v579)
          goto LABEL_726;
      }
      if (__PAIR64__(*((unsigned __int16 *)v579 + 9), *((unsigned __int16 *)v579 + 8)) != __PAIR64__(WORD1(v575), v580)
        || *((_DWORD *)v579 + 5) != HIDWORD(v575))
      {
        goto LABEL_712;
      }
LABEL_724:
      v574 = (_QWORD *)*v574;
      if (!v574)
      {
LABEL_727:
        a1 = v786;
        if (*(_QWORD *)(v786 + 152))
        {
          v583 = *v573;
          if (*v573)
          {
            do
            {
              v584 = (_QWORD *)*v583;
              operator delete(v583);
              v583 = v584;
            }
            while (v584);
          }
          a1 = v786;
          *(_QWORD *)(v786 + 144) = 0;
          v585 = *(_QWORD *)(v786 + 136);
          if (v585)
          {
            for (ii = 0; ii != v585; ++ii)
              *(_QWORD *)(*(_QWORD *)(v786 + 128) + 8 * ii) = 0;
          }
          *(_QWORD *)(v786 + 152) = 0;
        }
        v587 = v796[0];
        v796[0] = 0;
        v588 = *(void **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v587;
        if (v588)
          operator delete(v588);
        v590 = (unint64_t)v796[1];
        v589 = v797[0];
        v796[1] = 0;
        v591 = v797[1];
        *(void **)(a1 + 144) = v797[0];
        *(_QWORD *)(a1 + 152) = v591;
        *(_DWORD *)(a1 + 160) = v798;
        *(_QWORD *)(a1 + 136) = v590;
        if (v591)
        {
          v592 = v589[1];
          if ((v590 & (v590 - 1)) != 0)
          {
            if (v592 >= v590)
              v592 %= v590;
          }
          else
          {
            v592 &= v590 - 1;
          }
          v589 = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v592) = v573;
          v797[0] = 0;
          v797[1] = 0;
        }
        if (v769)
        {
          operator delete(v769);
          v589 = v797[0];
        }
        if (v589)
        {
          do
          {
            v598 = (_QWORD *)*v589;
            operator delete(v589);
            v589 = v598;
          }
          while (v598);
        }
        v599 = v796[0];
        v796[0] = 0;
        if (v599)
          operator delete(v599);
        goto LABEL_754;
      }
    }
  }
  v242 = (_QWORD *)v240[10];
  v243 = v151 * 40075017.0;
  v774 = v243 * 0.0000000249532021;
  __asm { FMOV            V0.2S, #1.0 }
  v775 = _D0;
  while (1)
  {
    v772 = v242;
    v773 = v241;
    v245 = (_QWORD *)*v242;
    v780 = v242 + 1;
    if ((_QWORD *)*v242 != v242 + 1)
      break;
LABEL_289:
    v242 = v772 + 3;
    v241 = v773 + 8;
    if (v773 + 8 == v771)
      goto LABEL_701;
  }
  while (2)
  {
    v784 = v245[4];
    v246 = *(_QWORD **)(v784 + 784);
    v247 = (int8x8_t)v246[1];
    if (!*(_QWORD *)&v247)
      goto LABEL_316;
    v248 = (uint8x8_t)vcnt_s8(v247);
    v248.i16[0] = vaddlv_u8(v248);
    if (v248.u32[0] > 1uLL)
    {
      v249 = 0x64A448A5CD5D38DBLL;
      if (*(_QWORD *)&v247 <= 0x64A448A5CD5D38DBuLL)
        v249 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v247;
    }
    else
    {
      v249 = (*(_QWORD *)&v247 - 1) & 0x64A448A5CD5D38DBLL;
    }
    v250 = *(_QWORD **)(*v246 + 8 * v249);
    if (!v250)
      goto LABEL_316;
    v251 = (_QWORD *)*v250;
    if (!v251)
      goto LABEL_316;
    if (v248.u32[0] < 2uLL)
    {
      v252 = *(_QWORD *)&v247 - 1;
      while (1)
      {
        v254 = v251[1];
        if (v254 == 0x64A448A5CD5D38DBLL)
        {
          if (v251[2] == 0x64A448A5CD5D38DBLL)
            goto LABEL_314;
        }
        else if ((v254 & v252) != v249)
        {
          goto LABEL_316;
        }
        v251 = (_QWORD *)*v251;
        if (!v251)
          goto LABEL_316;
      }
    }
    while (1)
    {
      v253 = v251[1];
      if (v253 == 0x64A448A5CD5D38DBLL)
        break;
      if (v253 >= *(_QWORD *)&v247)
        v253 %= *(_QWORD *)&v247;
      if (v253 != v249)
        goto LABEL_316;
LABEL_303:
      v251 = (_QWORD *)*v251;
      if (!v251)
        goto LABEL_316;
    }
    if (v251[2] != 0x64A448A5CD5D38DBLL)
      goto LABEL_303;
LABEL_314:
    v255 = v251[5];
    if (*(_QWORD *)(v255 + 8) == 0x64A448A5CD5D38DBLL)
    {
      v256 = *(_QWORD *)(v255 + 32);
      goto LABEL_317;
    }
LABEL_316:
    v256 = 0;
LABEL_317:
    if (!geo::Intersect::encloses<double>(&v799, (double *)(v256 + 128)))
      goto LABEL_693;
    v781 = v245;
    md::GeometryContext::transformConstantData((double *)&v872, v777, (unsigned __int8 *)v256, 0, *(double *)(v256 + 432), *(double *)(v256 + 440));
    __powidf2();
    v794 = v257;
    gm::Matrix<double,4,4>::inverted<int,void>((double *)__p, (double *)(v256 + 304));
    v258 = v776[101];
    v259 = *(double *)(v256 + 304);
    v260 = *(double *)(v256 + 312);
    v261 = v776[105];
    v262 = v776[109];
    v263 = *(double *)(v256 + 320);
    v264 = *(double *)(v256 + 328);
    v265 = v776[113];
    v266 = v259 * v258 + v260 * v261 + v263 * v262 + v264 * v265;
    v267 = *(double *)(v256 + 336);
    v268 = *(double *)(v256 + 344);
    v269 = *(double *)(v256 + 352);
    v270 = *(double *)(v256 + 360);
    v271 = v267 * v258 + v268 * v261 + v269 * v262 + v270 * v265;
    v272 = *(double *)(v256 + 368);
    v273 = *(double *)(v256 + 376);
    v274 = *(double *)(v256 + 384);
    v275 = *(double *)(v256 + 392);
    v276 = v272 * v258 + v273 * v261 + v274 * v262 + v275 * v265;
    v277 = *(double *)(v256 + 400);
    v278 = *(double *)(v256 + 408);
    v279 = *(double *)(v256 + 416);
    v280 = *(double *)(v256 + 424);
    v281 = v277 * v258 + v278 * v261 + v279 * v262 + v280 * v265;
    v282 = v776[102];
    v283 = v776[106];
    v284 = v776[110];
    v285 = v776[114];
    v286 = v282 * v259 + v283 * v260 + v284 * v263 + v285 * v264;
    v287 = v282 * v267 + v283 * v268 + v284 * v269 + v285 * v270;
    v288 = v282 * v272 + v283 * v273 + v284 * v274 + v285 * v275;
    v289 = v282 * v277 + v283 * v278 + v284 * v279 + v285 * v280;
    v290 = v776[103];
    v291 = v776[107];
    v292 = v776[111];
    v293 = v290 * v259 + v291 * v260 + v292 * v263;
    v294 = v290 * v267 + v291 * v268;
    v295 = v290 * v272 + v291 * v273;
    v296 = v290 * v277 + v291 * v278;
    v297 = v776[115];
    v298 = v293 + v297 * v264;
    v299 = v294 + v292 * v269 + v297 * v270;
    v300 = v295 + v292 * v274 + v297 * v275;
    v301 = v296 + v292 * v279 + v297 * v280;
    v302 = v776[104];
    v303 = v776[108];
    v304 = v302 * v259 + v303 * v260;
    v305 = v776[112];
    v306 = v304 + v305 * v263;
    v307 = v776[116];
    v308 = v306 + v307 * v264;
    v309 = v302 * v267 + v303 * v268 + v305 * v269 + v307 * v270;
    v310 = v302 * v272 + v303 * v273 + v305 * v274 + v307 * v275;
    v311 = v302 * v277 + v303 * v278 + v305 * v279 + v307 * v280;
    *(float *)&v266 = v266;
    *(float *)&v270 = v286;
    v871[0] = *(float *)&v266;
    v871[1] = *(float *)&v270;
    *(float *)&v267 = v298;
    *(float *)&v302 = v308;
    v871[3] = *(float *)&v302;
    *(float *)&v271 = v271;
    *(float *)&v277 = v287;
    v871[4] = *(float *)&v271;
    v871[5] = *(float *)&v277;
    *(float *)&v273 = v299;
    *(float *)&v278 = v309;
    v871[7] = *(float *)&v278;
    *(float *)&v276 = v276;
    *(float *)&v279 = v288;
    v871[8] = *(float *)&v276;
    v871[9] = *(float *)&v279;
    *(float *)&v272 = v300;
    *(float *)&v280 = v310;
    v871[11] = *(float *)&v280;
    *(float *)&v308 = *(float *)&v302 + *(float *)&v266;
    *(float *)&v305 = *(float *)&v278 + *(float *)&v271;
    *(float *)&v307 = *(float *)&v280 + *(float *)&v276;
    *(float *)&v266 = *(float *)&v302 - *(float *)&v266;
    *(float *)&v271 = *(float *)&v278 - *(float *)&v271;
    *(float *)&v276 = *(float *)&v280 - *(float *)&v276;
    *(float *)&v274 = *(float *)&v302 + *(float *)&v270;
    *(float *)&v298 = *(float *)&v280 + *(float *)&v279;
    *(float *)&v309 = *(float *)&v302 - *(float *)&v270;
    *(float *)&v270 = *(float *)&v280 - *(float *)&v279;
    LODWORD(v279) = LODWORD(v267);
    *((float *)&v279 + 1) = *(float *)&v302 - *(float *)&v267;
    v871[2] = *(float *)&v267;
    v871[6] = *(float *)&v273;
    *(float *)&v281 = v281;
    *(float *)&v289 = v289;
    v871[12] = *(float *)&v281;
    v871[13] = *(float *)&v289;
    *(float *)&v301 = v301;
    *(float *)&v311 = v311;
    v871[14] = *(float *)&v301;
    v871[15] = *(float *)&v311;
    v312 = vdiv_f32(v775, vsqrt_f32(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v279, *(float32x2_t *)&v279), (float32x2_t)__PAIR64__(*(float *)&v278 - *(float *)&v273, LODWORD(v273)), (float32x2_t)__PAIR64__(*(float *)&v278 - *(float *)&v273, LODWORD(v273))), (float32x2_t)__PAIR64__(*(float *)&v280 - *(float *)&v272, LODWORD(v272)), (float32x2_t)__PAIR64__(*(float *)&v280 - *(float *)&v272, LODWORD(v272)))));
    *(float *)&v826 = *(float *)&v267 * v312.f32[0];
    *((float *)&v826 + 1) = *(float *)&v273 * v312.f32[0];
    LODWORD(v279) = LODWORD(v301);
    v871[10] = *(float *)&v272;
    *(float32x2_t *)&v827[4] = vmul_f32(v312, *(float32x2_t *)&v279);
    *(float *)v827 = *(float *)&v272 * v312.f32[0];
    v828 = vmuls_lane_f32(*(float *)&v278 - *(float *)&v273, v312, 1);
    v829 = vmuls_lane_f32(*(float *)&v280 - *(float *)&v272, v312, 1);
    v830 = vmuls_lane_f32(*(float *)&v311 - *(float *)&v301, v312, 1);
    *(float *)&v301 = 1.0
                    / sqrtf((float)((float)(*(float *)&v274 * *(float *)&v274)+ (float)((float)(*(float *)&v278 + *(float *)&v277)* (float)(*(float *)&v278 + *(float *)&v277)))+ (float)(*(float *)&v298 * *(float *)&v298));
    v831 = *(float *)&v301 * *(float *)&v274;
    v832 = *(float *)&v301 * (float)(*(float *)&v278 + *(float *)&v277);
    v833 = *(float *)&v301 * *(float *)&v298;
    v834 = *(float *)&v301 * (float)(*(float *)&v311 + *(float *)&v289);
    *(float *)&v301 = 1.0
                    / sqrtf((float)((float)(*(float *)&v309 * *(float *)&v309)+ (float)((float)(*(float *)&v278 - *(float *)&v277)* (float)(*(float *)&v278 - *(float *)&v277)))+ (float)(*(float *)&v270 * *(float *)&v270));
    v835 = *(float *)&v301 * *(float *)&v309;
    v836 = *(float *)&v301 * (float)(*(float *)&v278 - *(float *)&v277);
    v837 = *(float *)&v301 * *(float *)&v270;
    v838 = *(float *)&v301 * (float)(*(float *)&v311 - *(float *)&v289);
    *(float *)&v289 = 1.0
                    / sqrtf((float)((float)(*(float *)&v308 * *(float *)&v308) + (float)(*(float *)&v305 * *(float *)&v305))+ (float)(*(float *)&v307 * *(float *)&v307));
    v839 = *(float *)&v289 * *(float *)&v308;
    v313 = __p[0];
    v314 = *(double *)v880;
    v840 = *(float *)&v289 * *(float *)&v305;
    v315 = *(double *)v881;
    v841 = *(float *)&v289 * *(float *)&v307;
    v842 = *(float *)&v289 * (float)(*(float *)&v311 + *(float *)&v281);
    *(float *)&v289 = 1.0
                    / sqrtf((float)((float)(*(float *)&v266 * *(float *)&v266) + (float)(*(float *)&v271 * *(float *)&v271))+ (float)(*(float *)&v276 * *(float *)&v276));
    v316 = v823;
    v843 = *(float *)&v289 * *(float *)&v266;
    v789 = v824;
    v844 = *(float *)&v289 * *(float *)&v271;
    v845 = *(float *)&v289 * *(float *)&v276;
    v778 = *(float64x2_t *)&__p[1];
    v779 = *(float64x2_t *)&v880[8];
    v846 = *(float *)&v289 * (float)(*(float *)&v311 - *(float *)&v281);
    v782 = *(float64x2_t *)&v881[8];
    gm::Matrix<float,4,4>::inverted<int,void>((float *)__p, v871);
    v317 = 1.0 / (float)(*(float *)&v880[28] - (float)(*((float *)&__p[3] + 1) + *((float *)&__p[1] + 1)));
    v847 = v317 * (float)(*(float *)&v880[16] - (float)(*(float *)&__p[2] + *(float *)__p));
    v848 = v317 * (float)(*(float *)&v880[20] - (float)(*((float *)&__p[2] + 1) + *((float *)__p + 1)));
    v318 = 1.0
         / (float)((float)(*(float *)&v880[28] + *(float *)&v880[12])
                 - (float)(*((float *)&__p[3] + 1) + *((float *)&__p[1] + 1)));
    v849 = v317 * (float)(*(float *)&v880[24] - (float)(*(float *)&__p[3] + *(float *)&__p[1]));
    v850 = v318 * (float)((float)(*(float *)&v880[16] + *(float *)v880) - (float)(*(float *)&__p[2] + *(float *)__p));
    v851 = v318
         * (float)((float)(*(float *)&v880[20] + *(float *)&v880[4])
                 - (float)(*((float *)&__p[2] + 1) + *((float *)__p + 1)));
    v852 = v318
         * (float)((float)(*(float *)&v880[24] + *(float *)&v880[8]) - (float)(*(float *)&__p[3] + *(float *)&__p[1]));
    v319 = 1.0 / (float)(*(float *)&v880[28] + (float)(*((float *)&__p[3] + 1) - *((float *)&__p[1] + 1)));
    v853 = v319 * (float)(*(float *)&v880[16] + (float)(*(float *)&__p[2] - *(float *)__p));
    v854 = v319 * (float)(*(float *)&v880[20] + (float)(*((float *)&__p[2] + 1) - *((float *)__p + 1)));
    v320 = 1.0
         / (float)((float)(*(float *)&v880[28] + *(float *)&v880[12])
                 + (float)(*((float *)&__p[3] + 1) - *((float *)&__p[1] + 1)));
    v855 = v319 * (float)(*(float *)&v880[24] + (float)(*(float *)&__p[3] - *(float *)&__p[1]));
    v856 = v320 * (float)((float)(*(float *)&v880[16] + *(float *)v880) + (float)(*(float *)&__p[2] - *(float *)__p));
    v857 = v320
         * (float)((float)(*(float *)&v880[20] + *(float *)&v880[4])
                 + (float)(*((float *)&__p[2] + 1) - *((float *)__p + 1)));
    v858 = v320
         * (float)((float)(*(float *)&v880[24] + *(float *)&v880[8]) + (float)(*(float *)&__p[3] - *(float *)&__p[1]));
    v321 = 1.0 / (float)(*(float *)&v880[28] + (float)(*((float *)&__p[1] + 1) - *((float *)&__p[3] + 1)));
    v859 = v321 * (float)(*(float *)&v880[16] + (float)(*(float *)__p - *(float *)&__p[2]));
    v860 = v321 * (float)(*(float *)&v880[20] + (float)(*((float *)__p + 1) - *((float *)&__p[2] + 1)));
    v322 = 1.0
         / (float)((float)(*(float *)&v880[28] + *(float *)&v880[12])
                 + (float)(*((float *)&__p[1] + 1) - *((float *)&__p[3] + 1)));
    v861 = v321 * (float)(*(float *)&v880[24] + (float)(*(float *)&__p[1] - *(float *)&__p[3]));
    v862 = v322 * (float)((float)(*(float *)&v880[16] + *(float *)v880) + (float)(*(float *)__p - *(float *)&__p[2]));
    v863 = v322
         * (float)((float)(*(float *)&v880[20] + *(float *)&v880[4])
                 + (float)(*((float *)__p + 1) - *((float *)&__p[2] + 1)));
    v864 = v322
         * (float)((float)(*(float *)&v880[24] + *(float *)&v880[8]) + (float)(*(float *)&__p[1] - *(float *)&__p[3]));
    v323 = 1.0 / (float)(*(float *)&v880[28] + (float)(*((float *)&__p[3] + 1) + *((float *)&__p[1] + 1)));
    v865 = v323 * (float)(*(float *)&v880[16] + (float)(*(float *)&__p[2] + *(float *)__p));
    v866 = v323 * (float)(*(float *)&v880[20] + (float)(*((float *)&__p[2] + 1) + *((float *)__p + 1)));
    v324 = 1.0
         / (float)((float)(*(float *)&v880[28] + *(float *)&v880[12])
                 + (float)(*((float *)&__p[3] + 1) + *((float *)&__p[1] + 1)));
    v867 = v323 * (float)(*(float *)&v880[24] + (float)(*(float *)&__p[3] + *(float *)&__p[1]));
    v868 = v324 * (float)((float)(*(float *)&v880[16] + *(float *)v880) + (float)(*(float *)&__p[2] + *(float *)__p));
    v869 = v324
         * (float)((float)(*(float *)&v880[20] + *(float *)&v880[4])
                 + (float)(*((float *)&__p[2] + 1) + *((float *)__p + 1)));
    v870 = v324
         * (float)((float)(*(float *)&v880[24] + *(float *)&v880[8]) + (float)(*(float *)&__p[3] + *(float *)&__p[1]));
    *(_QWORD *)&v889 = 0x2805F57CABD6715CLL;
    v325 = (int8x8_t)v246[16];
    if (v325)
    {
      v326 = (uint8x8_t)vcnt_s8(v325);
      v326.i16[0] = vaddlv_u8(v326);
      if (v326.u32[0] > 1uLL)
      {
        v327 = 0x2805F57CABD6715CLL;
        if (*(_QWORD *)&v325 <= 0x2805F57CABD6715CuLL)
          v327 = 0x2805F57CABD6715CuLL % *(_QWORD *)&v325;
      }
      else
      {
        v327 = (*(_QWORD *)&v325 - 1) & 0x2805F57CABD6715CLL;
      }
      v328 = *(_QWORD **)(v246[15] + 8 * v327);
      if (v328)
      {
        v329 = (_QWORD *)*v328;
        if (v329)
        {
          if (v326.u32[0] < 2uLL)
          {
            v330 = *(_QWORD *)&v325 - 1;
            while (1)
            {
              v332 = v329[1];
              if (v332 == 0x2805F57CABD6715CLL)
              {
                if (v329[2] == 0x2805F57CABD6715CLL)
                  goto LABEL_700;
              }
              else if ((v332 & v330) != v327)
              {
                goto LABEL_338;
              }
              v329 = (_QWORD *)*v329;
              if (!v329)
                goto LABEL_338;
            }
          }
          do
          {
            v331 = v329[1];
            if (v331 == 0x2805F57CABD6715CLL)
            {
              if (v329[2] == 0x2805F57CABD6715CLL)
              {
LABEL_700:
                v333 = v329[3];
                goto LABEL_341;
              }
            }
            else
            {
              if (v331 >= *(_QWORD *)&v325)
                v331 %= *(_QWORD *)&v325;
              if (v331 != v327)
                break;
            }
            v329 = (_QWORD *)*v329;
          }
          while (v329);
        }
      }
    }
LABEL_338:
    v333 = operator new();
    *(_QWORD *)(v333 + 16) = "arComponents::LocalBounds]";
    *(_QWORD *)(v333 + 24) = 25;
    *(_OWORD *)(v333 + 32) = 0u;
    *(_OWORD *)(v333 + 48) = 0u;
    *(_OWORD *)(v333 + 64) = 0u;
    *(_OWORD *)(v333 + 80) = 0u;
    *(_OWORD *)(v333 + 96) = 0u;
    *(_OWORD *)(v333 + 112) = 0u;
    *(_OWORD *)(v333 + 128) = 0u;
    *(_DWORD *)(v333 + 144) = 1065353216;
    *(_OWORD *)(v333 + 152) = 0u;
    *(_OWORD *)(v333 + 168) = 0u;
    *(_QWORD *)(v333 + 184) = 0;
    *(_DWORD *)(v333 + 192) = 1065353216;
    *(_OWORD *)(v333 + 200) = 0u;
    *(_OWORD *)(v333 + 216) = 0u;
    *(_QWORD *)(v333 + 232) = 0;
    *(_DWORD *)(v333 + 240) = 1065353216;
    *(_QWORD *)v333 = &off_1E42B1788;
    *(_QWORD *)(v333 + 8) = 0x2805F57CABD6715CLL;
    *(_QWORD *)(v333 + 248) = v246;
    v334 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v246 + 15, 0x2805F57CABD6715CuLL, &v889);
    v335 = v334[3];
    v334[3] = v333;
    if (v335)
      (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
    __p[0] = (void *)0x2805F57CABD6715CLL;
    __p[1] = "arComponents::LocalBounds]";
    __p[2] = (void *)25;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v246, 0x2805F57CABD6715CLL, (uint64_t)__p, (uint64_t *)(v333 + 104));
LABEL_341:
    v336 = *(unint64_t **)(v333 + 56);
    v785 = *(unint64_t **)(v333 + 64);
    if (v336 == v785)
    {
LABEL_689:
      v568 = v873;
      v245 = v781;
      if (!v873)
        goto LABEL_693;
      v569 = (unint64_t *)&v873->__shared_owners_;
      do
        v570 = __ldaxr(v569);
      while (__stlxr(v570 - 1, v569));
      if (!v570)
      {
        ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
        std::__shared_weak_count::__release_weak(v568);
        v571 = (_QWORD *)v781[1];
        if (v571)
        {
          do
          {
LABEL_694:
            v572 = v571;
            v571 = (_QWORD *)*v571;
          }
          while (v571);
          goto LABEL_292;
        }
      }
      else
      {
LABEL_693:
        v571 = (_QWORD *)v245[1];
        if (v571)
          goto LABEL_694;
      }
      do
      {
        v572 = (_QWORD *)v245[2];
        _ZF = *v572 == (_QWORD)v245;
        v245 = v572;
      }
      while (!_ZF);
LABEL_292:
      v245 = v572;
      if (v572 == v780)
        goto LABEL_289;
      continue;
    }
    break;
  }
  _S8 = v774 * v794;
  v338 = *(double *)&v316 * *(double *)&v313 + *((double *)&v316 + 1) * v314 + v789 * v315;
  v339 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v778, *(double *)&v316), v779, *((double *)&v316 + 1)), v782, v789));
  v340 = *(char **)(v333 + 80);
  v790 = (int *)(v340 + 4);
  while (2)
  {
    v787 = v336;
    v341 = *v336;
    v878 = *v336;
    v342 = *(_DWORD *)v340;
    v343 = *((_DWORD *)v340 + 5);
    v792 = (arComponents::LocalBounds *)v340;
    v876 = vuzp2q_s32(*(int32x4_t *)(v340 + 4), vrev64q_s32(*(int32x4_t *)(v340 + 4)));
    v875 = v342;
    v877 = v343;
    md::GeometryLogic::adjustedMeshBounds((uint64_t)v874, (uint64_t)&v875, v872);
    if (!geo::Intersect::encloses<float>((float *)&v826, v874))
      goto LABEL_343;
    v344 = *(int8x8_t *)(v786 + 136);
    if (v344)
    {
      v345 = (uint8x8_t)vcnt_s8(v344);
      v345.i16[0] = vaddlv_u8(v345);
      if (v345.u32[0] > 1uLL)
      {
        v346 = v341;
        if (v341 >= *(_QWORD *)&v344)
          v346 = v341 % *(_QWORD *)&v344;
      }
      else
      {
        v346 = (*(_QWORD *)&v344 - 1) & v341;
      }
      v347 = *(_QWORD *)(v786 + 128);
      v348 = *(uint64_t ***)(v347 + 8 * v346);
      if (v348)
      {
        v349 = *v348;
        if (*v348)
        {
          v350 = *(_QWORD *)&v344 - 1;
          if (v345.u32[0] < 2uLL)
          {
            while (1)
            {
              v351 = v349[1];
              if (v351 == v341)
              {
                if (__PAIR64__(*((unsigned __int16 *)v349 + 9), *((unsigned __int16 *)v349 + 8)) == __PAIR64__(WORD1(v341), (unsigned __int16)v341)
                  && *((_DWORD *)v349 + 5) == HIDWORD(v341))
                {
                  goto LABEL_359;
                }
              }
              else if ((v351 & v350) != v346)
              {
                goto LABEL_369;
              }
              v349 = (uint64_t *)*v349;
              if (!v349)
                goto LABEL_369;
            }
          }
          do
          {
            v352 = v349[1];
            if (v352 == v341)
            {
              if (__PAIR64__(*((unsigned __int16 *)v349 + 9), *((unsigned __int16 *)v349 + 8)) == __PAIR64__(WORD1(v341), (unsigned __int16)v341)&& *((_DWORD *)v349 + 5) == HIDWORD(v341))
              {
LABEL_359:
                if (v345.u32[0] > 1uLL)
                {
                  if (v341 >= *(_QWORD *)&v344)
                    v341 %= *(_QWORD *)&v344;
                }
                else
                {
                  v341 &= v350;
                }
                v795 = v349[3];
                v562 = *(uint64_t **)(v347 + 8 * v341);
                do
                {
                  v563 = v562;
                  v562 = (uint64_t *)*v562;
                }
                while (v562 != v349);
                if (v563 == (uint64_t *)(v786 + 144))
                  goto LABEL_679;
                v564 = v563[1];
                if (v345.u32[0] > 1uLL)
                {
                  if (v564 >= *(_QWORD *)&v344)
                    v564 %= *(_QWORD *)&v344;
                }
                else
                {
                  v564 &= v350;
                }
                if (v564 != v341)
                {
LABEL_679:
                  if (!*v349)
                    goto LABEL_680;
                  v565 = *(_QWORD *)(*v349 + 8);
                  if (v345.u32[0] > 1uLL)
                  {
                    if (v565 >= *(_QWORD *)&v344)
                      v565 %= *(_QWORD *)&v344;
                  }
                  else
                  {
                    v565 &= v350;
                  }
                  if (v565 != v341)
LABEL_680:
                    *(_QWORD *)(v347 + 8 * v341) = 0;
                }
                v566 = (uint64_t *)*v349;
                if (*v349)
                {
                  v567 = v566[1];
                  if (v345.u32[0] > 1uLL)
                  {
                    if (v567 >= *(_QWORD *)&v344)
                      v567 %= *(_QWORD *)&v344;
                  }
                  else
                  {
                    v567 &= v350;
                  }
                  if (v567 != v341)
                  {
                    *(_QWORD *)(*(_QWORD *)(v786 + 128) + 8 * v567) = v563;
                    v566 = (uint64_t *)*v349;
                  }
                }
                *v563 = (uint64_t)v566;
                --*(_QWORD *)(v786 + 152);
LABEL_599:
                operator delete(v349);
                goto LABEL_600;
              }
            }
            else
            {
              if (v352 >= *(_QWORD *)&v344)
                v352 %= *(_QWORD *)&v344;
              if (v352 != v346)
                break;
            }
            v349 = (uint64_t *)*v349;
          }
          while (v349);
        }
      }
    }
LABEL_369:
    v353 = *(uint64_t **)(v786 + 120);
    arComponents::LocalBounds::LocalBounds((arComponents::LocalBounds *)__p, v792);
    v795 = gdc::Registry::create((gdc::Registry *)v353);
    v354 = 0x8D7BED96DFFA474FLL;
    v901[0] = 0x8D7BED96DFFA474FLL;
    v355 = v353 + 15;
    v356 = (int8x8_t)v353[16];
    if (v356)
    {
      v357 = (uint8x8_t)vcnt_s8(v356);
      v357.i16[0] = vaddlv_u8(v357);
      if (v357.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v356 <= 0x8D7BED96DFFA474FLL)
          v354 = 0x8D7BED96DFFA474FLL % *(_QWORD *)&v356;
      }
      else
      {
        v354 = (*(_QWORD *)&v356 - 1) & 0x8D7BED96DFFA474FLL;
      }
      v358 = *(_QWORD **)(*v355 + 8 * v354);
      if (v358)
      {
        v359 = (_QWORD *)*v358;
        if (v359)
        {
          if (v357.u32[0] < 2uLL)
          {
            v360 = *(_QWORD *)&v356 - 1;
            while (1)
            {
              v362 = v359[1];
              if (v362 == 0x8D7BED96DFFA474FLL)
              {
                if (v359[2] == 0x8D7BED96DFFA474FLL)
                  goto LABEL_559;
              }
              else if ((v362 & v360) != v354)
              {
                goto LABEL_389;
              }
              v359 = (_QWORD *)*v359;
              if (!v359)
                goto LABEL_389;
            }
          }
          do
          {
            v361 = v359[1];
            if (v361 == 0x8D7BED96DFFA474FLL)
            {
              if (v359[2] == 0x8D7BED96DFFA474FLL)
              {
LABEL_559:
                v363 = v359[3];
                goto LABEL_392;
              }
            }
            else
            {
              if (v361 >= *(_QWORD *)&v356)
                v361 %= *(_QWORD *)&v356;
              if (v361 != v354)
                break;
            }
            v359 = (_QWORD *)*v359;
          }
          while (v359);
        }
      }
    }
LABEL_389:
    v363 = operator new();
    *(_QWORD *)(v363 + 16) = "arComponents::MapTileDataComponent]";
    *(_QWORD *)(v363 + 24) = 34;
    *(_OWORD *)(v363 + 32) = 0u;
    *(_OWORD *)(v363 + 48) = 0u;
    *(_OWORD *)(v363 + 64) = 0u;
    *(_OWORD *)(v363 + 80) = 0u;
    *(_OWORD *)(v363 + 96) = 0u;
    *(_OWORD *)(v363 + 112) = 0u;
    *(_OWORD *)(v363 + 128) = 0u;
    *(_DWORD *)(v363 + 144) = 1065353216;
    *(_OWORD *)(v363 + 152) = 0u;
    *(_OWORD *)(v363 + 168) = 0u;
    *(_QWORD *)(v363 + 184) = 0;
    *(_DWORD *)(v363 + 192) = 1065353216;
    *(_OWORD *)(v363 + 200) = 0u;
    *(_OWORD *)(v363 + 216) = 0u;
    *(_QWORD *)(v363 + 232) = 0;
    *(_DWORD *)(v363 + 240) = 1065353216;
    *(_QWORD *)(v363 + 8) = 0x8D7BED96DFFA474FLL;
    *(_QWORD *)v363 = &off_1E42B1F38;
    *(_QWORD *)(v363 + 248) = v353;
    v364 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v353 + 15, 0x8D7BED96DFFA474FLL, v901);
    v365 = v364[3];
    v364[3] = v363;
    if (v365)
      (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
    *(_QWORD *)&v889 = 0x8D7BED96DFFA474FLL;
    *((_QWORD *)&v889 + 1) = "arComponents::MapTileDataComponent]";
    *(_QWORD *)&v890 = 34;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v353, 0x8D7BED96DFFA474FLL, (uint64_t)&v889, (uint64_t *)(v363 + 104));
LABEL_392:
    v900 = v795;
    v366 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v363 + 32), (uint64_t)&v900);
    if ((v367 & 1) != 0)
    {
      v373 = *(char **)(v363 + 88);
      v372 = *(_QWORD *)(v363 + 96);
      if ((unint64_t)v373 >= v372)
      {
        v375 = *(char **)(v363 + 80);
        v376 = (v373 - v375) >> 3;
        v377 = v376 + 1;
        if ((unint64_t)(v376 + 1) >> 61)
          goto LABEL_952;
        v378 = v372 - (_QWORD)v375;
        if (v378 >> 2 > v377)
          v377 = v378 >> 2;
        if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v377;
        if (v379)
        {
          if (v379 >> 61)
            goto LABEL_953;
          v380 = (char *)operator new(8 * v379);
        }
        else
        {
          v380 = 0;
        }
        v382 = &v380[8 * v376];
        *(_QWORD *)v382 = v784;
        v374 = v382 + 8;
        if (v373 != v375)
        {
          v383 = v373 - 8 - v375;
          if (v383 < 0x58)
            goto LABEL_964;
          if ((unint64_t)(v375 - v380) < 0x20)
            goto LABEL_964;
          v384 = (v383 >> 3) + 1;
          v385 = &v380[8 * v376 - 16];
          v386 = (__int128 *)(v373 - 16);
          v387 = v384 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v388 = *v386;
            *((_OWORD *)v385 - 1) = *(v386 - 1);
            *(_OWORD *)v385 = v388;
            v385 -= 32;
            v386 -= 2;
            v387 -= 4;
          }
          while (v387);
          v382 -= 8 * (v384 & 0x3FFFFFFFFFFFFFFCLL);
          v373 -= 8 * (v384 & 0x3FFFFFFFFFFFFFFCLL);
          if (v384 != (v384 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_964:
            do
            {
              v389 = *((_QWORD *)v373 - 1);
              v373 -= 8;
              *((_QWORD *)v382 - 1) = v389;
              v382 -= 8;
            }
            while (v373 != v375);
          }
          v373 = *(char **)(v363 + 80);
        }
        *(_QWORD *)(v363 + 80) = v382;
        *(_QWORD *)(v363 + 88) = v374;
        *(_QWORD *)(v363 + 96) = &v380[8 * v379];
        if (v373)
          operator delete(v373);
      }
      else
      {
        *(_QWORD *)v373 = v784;
        v374 = v373 + 8;
      }
      *(_QWORD *)(v363 + 88) = v374;
      v369 = *(_QWORD *)(v363 + 248);
      v355 = v353 + 15;
      v381 = *(_QWORD **)(v363 + 176);
      if (v381)
        goto LABEL_423;
    }
    else
    {
      v368 = (_QWORD *)((char *)v366 + *(_QWORD *)(v363 + 80) - *(_QWORD *)(v363 + 56));
      *v368 = v784;
      v369 = *(_QWORD *)(v363 + 248);
      if (v368 != *(_QWORD **)(v363 + 88))
      {
        for (jj = *(_QWORD **)(v363 + 128); jj; jj = (_QWORD *)*jj)
        {
          *(_QWORD *)&v889 = &v900;
          *((_QWORD *)&v889 + 1) = 1;
          v901[0] = v369;
          v371 = jj[6];
          if (!v371)
            goto LABEL_951;
          (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v371 + 48))(v371, v901, &v889);
        }
        goto LABEL_425;
      }
      v381 = *(_QWORD **)(v363 + 176);
      if (!v381)
        goto LABEL_425;
      do
      {
LABEL_423:
        *(_QWORD *)&v889 = &v900;
        *((_QWORD *)&v889 + 1) = 1;
        v901[0] = v369;
        v390 = v381[6];
        if (!v390)
          goto LABEL_951;
        (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v390 + 48))(v390, v901, &v889);
        v381 = (_QWORD *)*v381;
      }
      while (v381);
    }
LABEL_425:
    v901[0] = 0x410D1776E02BD50ALL;
    v391 = (int8x8_t)v353[16];
    if (v391)
    {
      v392 = (uint8x8_t)vcnt_s8(v391);
      v392.i16[0] = vaddlv_u8(v392);
      if (v392.u32[0] > 1uLL)
      {
        v393 = 0x410D1776E02BD50ALL;
        if (*(_QWORD *)&v391 <= 0x410D1776E02BD50AuLL)
          v393 = 0x410D1776E02BD50AuLL % *(_QWORD *)&v391;
      }
      else
      {
        v393 = (*(_QWORD *)&v391 - 1) & 0x410D1776E02BD50ALL;
      }
      v394 = *(_QWORD **)(*v355 + 8 * v393);
      if (v394)
      {
        v395 = (_QWORD *)*v394;
        if (v395)
        {
          if (v392.u32[0] < 2uLL)
          {
            v396 = *(_QWORD *)&v391 - 1;
            while (1)
            {
              v398 = v395[1];
              if (v398 == 0x410D1776E02BD50ALL)
              {
                if (v395[2] == 0x410D1776E02BD50ALL)
                  goto LABEL_560;
              }
              else if ((v398 & v396) != v393)
              {
                goto LABEL_445;
              }
              v395 = (_QWORD *)*v395;
              if (!v395)
                goto LABEL_445;
            }
          }
          do
          {
            v397 = v395[1];
            if (v397 == 0x410D1776E02BD50ALL)
            {
              if (v395[2] == 0x410D1776E02BD50ALL)
              {
LABEL_560:
                v399 = v395[3];
                goto LABEL_448;
              }
            }
            else
            {
              if (v397 >= *(_QWORD *)&v391)
                v397 %= *(_QWORD *)&v391;
              if (v397 != v393)
                break;
            }
            v395 = (_QWORD *)*v395;
          }
          while (v395);
        }
      }
    }
LABEL_445:
    v399 = operator new();
    *(_QWORD *)(v399 + 16) = "arComponents::DidIntersectFrustum]";
    *(_QWORD *)(v399 + 24) = 33;
    *(_OWORD *)(v399 + 32) = 0u;
    *(_OWORD *)(v399 + 48) = 0u;
    *(_OWORD *)(v399 + 64) = 0u;
    *(_OWORD *)(v399 + 80) = 0u;
    *(_OWORD *)(v399 + 96) = 0u;
    *(_OWORD *)(v399 + 112) = 0u;
    *(_OWORD *)(v399 + 128) = 0u;
    *(_DWORD *)(v399 + 144) = 1065353216;
    *(_OWORD *)(v399 + 152) = 0u;
    *(_OWORD *)(v399 + 168) = 0u;
    *(_QWORD *)(v399 + 184) = 0;
    *(_DWORD *)(v399 + 192) = 1065353216;
    *(_OWORD *)(v399 + 200) = 0u;
    *(_OWORD *)(v399 + 216) = 0u;
    *(_QWORD *)(v399 + 232) = 0;
    *(_DWORD *)(v399 + 240) = 1065353216;
    *(_QWORD *)v399 = &off_1E42B1E18;
    *(_QWORD *)(v399 + 8) = 0x410D1776E02BD50ALL;
    *(_QWORD *)(v399 + 248) = v353;
    v400 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v355, 0x410D1776E02BD50AuLL, v901);
    v401 = v400[3];
    v400[3] = v399;
    if (v401)
      (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
    *(_QWORD *)&v889 = 0x410D1776E02BD50ALL;
    *((_QWORD *)&v889 + 1) = "arComponents::DidIntersectFrustum]";
    *(_QWORD *)&v890 = 33;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v353, 0x410D1776E02BD50ALL, (uint64_t)&v889, (uint64_t *)(v399 + 104));
LABEL_448:
    v900 = v795;
    v402 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v399 + 32), (uint64_t)&v900);
    if ((v403 & 1) != 0)
    {
      v408 = *(_BYTE **)(v399 + 88);
      v407 = *(_QWORD *)(v399 + 96);
      if ((unint64_t)v408 >= v407)
      {
        v410 = *(char **)(v399 + 80);
        v411 = v408 - v410;
        v412 = v408 - v410 + 1;
        if (v412 < 0)
LABEL_952:
          abort();
        v413 = v407 - (_QWORD)v410;
        if (2 * v413 > v412)
          v412 = 2 * v413;
        if (v413 >= 0x3FFFFFFFFFFFFFFFLL)
          v414 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v414 = v412;
        if (v414)
          v415 = (char *)operator new(v414);
        else
          v415 = 0;
        v417 = &v415[v414];
        v409 = (uint64_t)&v415[v411 + 1];
        v418 = (char *)(v410 - v408);
        if (v410 == v408)
          v418 = 0;
        *(_QWORD *)(v399 + 80) = &v415[v411 + (_QWORD)v418];
        *(_QWORD *)(v399 + 88) = v409;
        *(_QWORD *)(v399 + 96) = v417;
        if (v410)
          operator delete(v410);
      }
      else
      {
        v409 = (uint64_t)(v408 + 1);
      }
      *(_QWORD *)(v399 + 88) = v409;
      v404 = *(_QWORD *)(v399 + 248);
      v416 = *(_QWORD **)(v399 + 176);
      if (v416)
        goto LABEL_472;
    }
    else
    {
      v404 = *(_QWORD *)(v399 + 248);
      if (*(_QWORD *)(v399 + 80) + (((uint64_t)v402 - *(_QWORD *)(v399 + 56)) >> 3) != *(_QWORD *)(v399 + 88))
      {
        for (kk = *(_QWORD **)(v399 + 128); kk; kk = (_QWORD *)*kk)
        {
          *(_QWORD *)&v889 = &v900;
          *((_QWORD *)&v889 + 1) = 1;
          v901[0] = v404;
          v406 = kk[6];
          if (!v406)
            goto LABEL_951;
          (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v406 + 48))(v406, v901, &v889);
        }
        goto LABEL_474;
      }
      v416 = *(_QWORD **)(v399 + 176);
      if (!v416)
        goto LABEL_474;
      do
      {
LABEL_472:
        *(_QWORD *)&v889 = &v900;
        *((_QWORD *)&v889 + 1) = 1;
        v901[0] = v404;
        v419 = v416[6];
        if (!v419)
          goto LABEL_951;
        (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v419 + 48))(v419, v901, &v889);
        v416 = (_QWORD *)*v416;
      }
      while (v416);
    }
LABEL_474:
    v901[0] = 0x2805F57CABD6715CLL;
    v420 = (int8x8_t)v353[16];
    if (v420)
    {
      v421 = (uint8x8_t)vcnt_s8(v420);
      v421.i16[0] = vaddlv_u8(v421);
      if (v421.u32[0] > 1uLL)
      {
        v422 = 0x2805F57CABD6715CLL;
        if (*(_QWORD *)&v420 <= 0x2805F57CABD6715CuLL)
          v422 = 0x2805F57CABD6715CuLL % *(_QWORD *)&v420;
      }
      else
      {
        v422 = (*(_QWORD *)&v420 - 1) & 0x2805F57CABD6715CLL;
      }
      v423 = *(_QWORD **)(*v355 + 8 * v422);
      if (v423)
      {
        v424 = (_QWORD *)*v423;
        if (v424)
        {
          if (v421.u32[0] < 2uLL)
          {
            v425 = *(_QWORD *)&v420 - 1;
            while (1)
            {
              v427 = v424[1];
              if (v427 == 0x2805F57CABD6715CLL)
              {
                if (v424[2] == 0x2805F57CABD6715CLL)
                  goto LABEL_561;
              }
              else if ((v427 & v425) != v422)
              {
                goto LABEL_494;
              }
              v424 = (_QWORD *)*v424;
              if (!v424)
                goto LABEL_494;
            }
          }
          do
          {
            v426 = v424[1];
            if (v426 == 0x2805F57CABD6715CLL)
            {
              if (v424[2] == 0x2805F57CABD6715CLL)
              {
LABEL_561:
                v428 = v424[3];
                goto LABEL_497;
              }
            }
            else
            {
              if (v426 >= *(_QWORD *)&v420)
                v426 %= *(_QWORD *)&v420;
              if (v426 != v422)
                break;
            }
            v424 = (_QWORD *)*v424;
          }
          while (v424);
        }
      }
    }
LABEL_494:
    v428 = operator new();
    *(_QWORD *)(v428 + 16) = "arComponents::LocalBounds]";
    *(_QWORD *)(v428 + 24) = 25;
    *(_OWORD *)(v428 + 32) = 0u;
    *(_OWORD *)(v428 + 48) = 0u;
    *(_OWORD *)(v428 + 64) = 0u;
    *(_OWORD *)(v428 + 80) = 0u;
    *(_OWORD *)(v428 + 96) = 0u;
    *(_OWORD *)(v428 + 112) = 0u;
    *(_OWORD *)(v428 + 128) = 0u;
    *(_DWORD *)(v428 + 144) = 1065353216;
    *(_OWORD *)(v428 + 152) = 0u;
    *(_OWORD *)(v428 + 168) = 0u;
    *(_QWORD *)(v428 + 184) = 0;
    *(_DWORD *)(v428 + 192) = 1065353216;
    *(_OWORD *)(v428 + 200) = 0u;
    *(_OWORD *)(v428 + 216) = 0u;
    *(_QWORD *)(v428 + 232) = 0;
    *(_DWORD *)(v428 + 240) = 1065353216;
    *(_QWORD *)v428 = &off_1E42B1788;
    *(_QWORD *)(v428 + 8) = 0x2805F57CABD6715CLL;
    *(_QWORD *)(v428 + 248) = v353;
    v429 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v355, 0x2805F57CABD6715CuLL, v901);
    v430 = v429[3];
    v429[3] = v428;
    if (v430)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 8))(v430);
    *(_QWORD *)&v889 = 0x2805F57CABD6715CLL;
    *((_QWORD *)&v889 + 1) = "arComponents::LocalBounds]";
    *(_QWORD *)&v890 = 25;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v353, 0x2805F57CABD6715CLL, (uint64_t)&v889, (uint64_t *)(v428 + 104));
LABEL_497:
    v900 = v795;
    v431 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v428 + 32), (uint64_t)&v900);
    if ((v432 & 1) != 0)
    {
      v444 = *(_QWORD *)(v428 + 88);
      if (v444 >= *(_QWORD *)(v428 + 96))
      {
        v459 = std::vector<arComponents::LocalBounds>::__emplace_back_slow_path<arComponents::LocalBounds&>((arComponents::LocalBounds **)(v428 + 80), (const arComponents::LocalBounds *)__p);
      }
      else
      {
        v445 = *(_OWORD *)__p;
        v446 = *(_OWORD *)v880;
        *(_OWORD *)(v444 + 16) = *(_OWORD *)&__p[2];
        *(_OWORD *)(v444 + 32) = v446;
        *(_OWORD *)v444 = v445;
        v447 = *(_OWORD *)&v880[16];
        v448 = *(_OWORD *)v881;
        v449 = *(_OWORD *)&v881[16];
        *(_QWORD *)(v444 + 96) = v882;
        *(_OWORD *)(v444 + 64) = v448;
        *(_OWORD *)(v444 + 80) = v449;
        *(_OWORD *)(v444 + 48) = v447;
        *(_BYTE *)(v444 + 104) = 0;
        *(_BYTE *)(v444 + 128) = 0;
        if (v885)
        {
          *(_QWORD *)(v444 + 104) = 0;
          *(_QWORD *)(v444 + 112) = 0;
          *(_QWORD *)(v444 + 120) = 0;
          v450 = (const void *)v883;
          v451 = *((_QWORD *)&v883 + 1) - v883;
          if (*((_QWORD *)&v883 + 1) != (_QWORD)v883)
          {
            if (0xAAAAAAAAAAAAAAABLL * (v451 >> 3) > 0xAAAAAAAAAAAAAAALL)
              abort();
            v452 = (char *)operator new(*((_QWORD *)&v883 + 1) - v883);
            *(_QWORD *)(v444 + 104) = v452;
            *(_QWORD *)(v444 + 112) = v452;
            *(_QWORD *)(v444 + 120) = &v452[8 * (v451 >> 3)];
            v453 = 24 * ((v451 - 24) / 0x18uLL) + 24;
            memcpy(v452, v450, v453);
            *(_QWORD *)(v444 + 112) = &v452[v453];
          }
          *(_BYTE *)(v444 + 128) = 1;
        }
        *(_BYTE *)(v444 + 136) = 0;
        *(_BYTE *)(v444 + 160) = 0;
        if (v888)
        {
          *(_QWORD *)(v444 + 136) = 0;
          *(_QWORD *)(v444 + 144) = 0;
          *(_QWORD *)(v444 + 152) = 0;
          if ((void **)v444 != __p)
          {
            v454 = (const void *)v886;
            v455 = *((_QWORD *)&v886 + 1) - v886;
            if (*((_QWORD *)&v886 + 1) == (_QWORD)v886)
            {
              v456 = 0;
              v457 = (_QWORD *)(v444 + 144);
            }
            else
            {
              if (v455 < 0)
                abort();
              v456 = (char *)operator new(*((_QWORD *)&v886 + 1) - v886);
              *(_QWORD *)(v444 + 144) = v456;
              v457 = (_QWORD *)(v444 + 144);
              *(_QWORD *)(v444 + 136) = v456;
              *(_QWORD *)(v444 + 152) = &v456[16 * (v455 >> 4)];
              v455 &= 0xFFFFFFFFFFFFFFF0;
              memcpy(v456, v454, v455);
            }
            *v457 = &v456[v455];
          }
          *(_BYTE *)(v444 + 160) = 1;
        }
        v459 = (char *)(v444 + 168);
        *(_QWORD *)(v428 + 88) = v444 + 168;
      }
      *(_QWORD *)(v428 + 88) = v459;
      goto LABEL_589;
    }
    v433 = *(_QWORD *)(v428 + 80);
    v434 = ((uint64_t)v431 - *(_QWORD *)(v428 + 56)) >> 3;
    v435 = v433 + 168 * v434;
    v436 = *(_OWORD *)&v881[16];
    v437 = *(_OWORD *)v881;
    v438 = *(_OWORD *)&v880[16];
    *(_QWORD *)(v435 + 96) = v882;
    *(_OWORD *)(v435 + 64) = v437;
    *(_OWORD *)(v435 + 80) = v436;
    *(_OWORD *)(v435 + 48) = v438;
    v439 = *(_OWORD *)__p;
    v440 = *(_OWORD *)v880;
    *(_OWORD *)(v435 + 16) = *(_OWORD *)&__p[2];
    *(_OWORD *)(v435 + 32) = v440;
    *(_OWORD *)v435 = v439;
    v441 = (void **)(v435 + 104);
    v442 = (_BYTE *)(v435 + 128);
    if (*(unsigned __int8 *)(v435 + 128) == v885)
    {
      if (*(_BYTE *)(v435 + 128))
      {
        v443 = *v441;
        if (*v441)
        {
          *(_QWORD *)(v433 + 168 * v434 + 112) = v443;
          operator delete(v443);
          *v441 = 0;
          *(_QWORD *)(v435 + 112) = 0;
          *(_QWORD *)(v435 + 120) = 0;
        }
        *(_OWORD *)v441 = v883;
        *(_QWORD *)(v433 + 168 * v434 + 120) = v884;
        v883 = 0uLL;
        v884 = 0;
      }
    }
    else if (*(_BYTE *)(v435 + 128))
    {
      v458 = *v441;
      if (*v441)
      {
        *(_QWORD *)(v433 + 168 * v434 + 112) = v458;
        operator delete(v458);
      }
      *v442 = 0;
    }
    else
    {
      *v441 = 0;
      *(_QWORD *)(v435 + 112) = 0;
      *(_QWORD *)(v435 + 120) = 0;
      *(_OWORD *)v441 = v883;
      *(_QWORD *)(v433 + 168 * v434 + 120) = v884;
      v883 = 0uLL;
      v884 = 0;
      *v442 = 1;
    }
    v460 = v433 + 168 * v434;
    v463 = *(unsigned __int8 *)(v460 + 160);
    v462 = (_BYTE *)(v460 + 160);
    v461 = v463;
    v464 = v462 - 24;
    if (v463 != v888)
    {
      if (v461)
      {
        v479 = *(_QWORD **)v464;
        if (*(_QWORD *)v464)
        {
          *(_QWORD *)(v433 + 168 * v434 + 144) = v479;
          operator delete(v479);
        }
        *v462 = 0;
      }
      else
      {
        *(_QWORD *)v464 = 0;
        *((_QWORD *)v462 - 2) = 0;
        *((_QWORD *)v462 - 1) = 0;
        *(_OWORD *)v464 = v886;
        *(_QWORD *)(v433 + 168 * v434 + 152) = v887;
        v886 = 0uLL;
        v887 = 0;
        *v462 = 1;
      }
      goto LABEL_583;
    }
    _ZF = (void **)v435 == __p || v461 == 0;
    if (_ZF)
      goto LABEL_583;
    v466 = (__int128 *)*((_QWORD *)&v886 + 1);
    v467 = (__int128 *)v886;
    v468 = *((_QWORD *)&v886 + 1) - v886;
    v469 = (uint64_t)(*((_QWORD *)&v886 + 1) - v886) >> 4;
    v470 = *((_QWORD *)v464 + 2);
    v471 = *(char **)v464;
    if (v469 > (v470 - *(_QWORD *)v464) >> 4)
    {
      if (v471)
      {
        *((_QWORD *)v464 + 1) = v471;
        operator delete(v471);
        v470 = 0;
        *(_QWORD *)v464 = 0;
        *((_QWORD *)v464 + 1) = 0;
        *((_QWORD *)v464 + 2) = 0;
      }
      v783 = v468;
      if (v468 < 0)
        goto LABEL_954;
      v472 = v470 >> 3;
      if (v470 >> 3 <= v469)
        v472 = v469;
      v473 = (unint64_t)v470 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v472;
      if (v473 >> 60)
LABEL_954:
        abort();
      v474 = (char *)operator new(16 * v473);
      v475 = v474;
      *(_QWORD *)v464 = v474;
      *((_QWORD *)v464 + 1) = v474;
      *((_QWORD *)v464 + 2) = &v474[16 * v473];
      v476 = v474;
      if (v467 != v466)
      {
        memcpy(v474, v467, v783 & 0xFFFFFFFFFFFFFFF0);
        v476 = &v475[v783 & 0xFFFFFFFFFFFFFFF0];
      }
      v477 = (char *)(v476 - v475);
      v478 = v464 + 8;
      goto LABEL_582;
    }
    v480 = (char *)*((_QWORD *)v464 + 1);
    v478 = v464 + 8;
    v475 = v480;
    v481 = v480 - v471;
    v482 = (v480 - v471) >> 4;
    if (v482 >= v469)
    {
      if ((_QWORD)v886 == *((_QWORD *)&v886 + 1))
      {
        v499 = v471;
      }
      else
      {
        v498 = v468 - 16;
        if ((unint64_t)(v468 - 16) >= 0x70)
        {
          v500 = (unint64_t)v471 >= (unint64_t)v886 + (v498 & 0xFFFFFFFFFFFFFFF0) + 16
              || (unint64_t)v886 >= (unint64_t)&v471[(v498 & 0xFFFFFFFFFFFFFFF0) + 16];
          v499 = v471;
          if (v500)
          {
            v501 = (v498 >> 4) + 1;
            v502 = 16 * (v501 & 0x1FFFFFFFFFFFFFFCLL);
            v499 = &v471[v502];
            v503 = (__int128 *)(v886 + 32);
            v504 = v471 + 32;
            v505 = v501 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v507 = *(v503 - 2);
              v506 = *(v503 - 1);
              v509 = *v503;
              v508 = v503[1];
              v503 += 4;
              *(v504 - 2) = v507;
              *(v504 - 1) = v506;
              *v504 = v509;
              v504[1] = v508;
              v504 += 4;
              v505 -= 4;
            }
            while (v505);
            if (v501 == (v501 & 0x1FFFFFFFFFFFFFFCLL))
              goto LABEL_581;
            v467 = (__int128 *)((char *)v467 + v502);
          }
        }
        else
        {
          v499 = v471;
        }
        do
        {
          *(_QWORD *)v499 = *(_QWORD *)v467;
          *((_QWORD *)v499 + 1) = *((_QWORD *)v467 + 1);
          v499 += 16;
          ++v467;
        }
        while (v467 != v466);
      }
LABEL_581:
      v477 = (char *)(v499 - v471);
      v475 = v471;
      goto LABEL_582;
    }
    v483 = (__int128 *)(v886 + 16 * v482);
    if (v475 != v471)
    {
      v484 = v481 - 16;
      if ((unint64_t)(v481 - 16) >= 0x70
        && ((v485 = v481 & 0xFFFFFFFFFFFFFFF0, (unint64_t)v471 < (unint64_t)v886 + v485)
          ? (_CF = (unint64_t)v886 >= (unint64_t)&v471[v485])
          : (_CF = 1),
            _CF))
      {
        v487 = (v484 >> 4) + 1;
        v488 = 16 * (v487 & 0x1FFFFFFFFFFFFFFCLL);
        v489 = (__int128 *)(v886 + 32);
        v490 = v471 + 32;
        v491 = v487 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v493 = *(v489 - 2);
          v492 = *(v489 - 1);
          v495 = *v489;
          v494 = v489[1];
          v489 += 4;
          *(v490 - 2) = v493;
          *(v490 - 1) = v492;
          *v490 = v495;
          v490[1] = v494;
          v490 += 4;
          v491 -= 4;
        }
        while (v491);
        if (v487 != (v487 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v467 = (__int128 *)((char *)v467 + v488);
          v471 += v488;
          goto LABEL_555;
        }
      }
      else
      {
        do
        {
LABEL_555:
          *(_QWORD *)v471 = *(_QWORD *)v467;
          *((_QWORD *)v471 + 1) = *((_QWORD *)v467++ + 1);
          v471 += 16;
        }
        while (v467 != v483);
      }
    }
    for (mm = v475; v483 != v466; mm += 16)
    {
      v497 = *v483++;
      *(_OWORD *)mm = v497;
    }
    v477 = (char *)(mm - v475);
LABEL_582:
    *v478 = &v477[(_QWORD)v475];
LABEL_583:
    if (v435 != *(_QWORD *)(v428 + 88))
    {
      v510 = *(_QWORD **)(v428 + 128);
      if (v510)
      {
        v511 = *(_QWORD *)(v428 + 248);
        do
        {
          *(_QWORD *)&v889 = &v900;
          *((_QWORD *)&v889 + 1) = 1;
          v901[0] = v511;
          v512 = v510[6];
          if (!v512)
            goto LABEL_951;
          (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v512 + 48))(v512, v901, &v889);
          v510 = (_QWORD *)*v510;
        }
        while (v510);
      }
      goto LABEL_593;
    }
LABEL_589:
    v513 = *(_QWORD **)(v428 + 176);
    if (v513)
    {
      v514 = *(_QWORD *)(v428 + 248);
      do
      {
        *(_QWORD *)&v889 = &v900;
        *((_QWORD *)&v889 + 1) = 1;
        v901[0] = v514;
        v515 = v513[6];
        if (!v515)
          goto LABEL_951;
        (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v515 + 48))(v515, v901, &v889);
        v513 = (_QWORD *)*v513;
      }
      while (v513);
    }
LABEL_593:
    if (v888 && (_QWORD)v886)
    {
      *((_QWORD *)&v886 + 1) = v886;
      operator delete((void *)v886);
    }
    if (v885)
    {
      v349 = (uint64_t *)v883;
      if ((_QWORD)v883)
      {
        *((_QWORD *)&v883 + 1) = v883;
        goto LABEL_599;
      }
    }
LABEL_600:
    std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::Entity>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::Entity>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::Entity>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::Entity>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>((float *)v796, v878, &v878)[3] = v795;
    if (!v825)
      goto LABEL_343;
    v516 = 0;
    v517 = 0;
    v518 = v790;
    do
    {
      v889 = xmmword_19FFB3590;
      v890 = xmmword_19FFB3590;
      v891 = xmmword_19FFB36A0;
      v892 = xmmword_19FFB36B0;
      v893 = xmmword_19FFB36C0;
      v894 = xmmword_19FFB36D0;
      v895 = xmmword_19FFB36E0;
      v896 = xmmword_19FFB36F0;
      v897 = xmmword_19FFB3700;
      v898 = 0x3E8483EDBF7746EDLL;
      v899 = 0;
      v519 = &__p[v516];
      v520 = *(void **)((char *)&v889 + v517);
      v521.i32[0] = *(v518 - 1);
      *((_DWORD *)v519 + 2) = *(_DWORD *)((char *)&v889 + v517 + 8);
      *v519 = v520;
      v889 = xmmword_19FFB3590;
      v890 = xmmword_19FFB3590;
      v891 = xmmword_19FFB36A0;
      v892 = xmmword_19FFB36B0;
      v893 = xmmword_19FFB36C0;
      v894 = xmmword_19FFB36D0;
      v895 = xmmword_19FFB36E0;
      v896 = xmmword_19FFB36F0;
      v897 = xmmword_19FFB3700;
      v898 = 0x3E8483EDBF7746EDLL;
      v899 = 0;
      v521.i32[1] = *(_DWORD *)((char *)&v889 + v517);
      v522 = *v518;
      v518 += 2;
      v521.i64[1] = *(_QWORD *)((char *)&v889 + v517 + 4);
      *(float32x4_t *)((char *)v519 + 12) = vnegq_f32(v521);
      *((_DWORD *)v519 + 7) = v522;
      v517 += 12;
      v516 += 4;
    }
    while (v517 != 156);
    v523 = 0;
    v524 = 0.0;
    v525 = 3.4028e38;
    while (2)
    {
      _D4 = *(float32x2_t *)((char *)&__p[v523] + 4);
      v527 = vmul_f32(_D4, v339);
      v528 = (float)(v527.f32[0] + (float)(*(float *)&__p[v523] * v338)) + v527.f32[1];
      __asm { FMLA            S3, S8, V4.S[1] }
      v530 = v528 <= 0.0;
      if (v528 == 0.0)
      {
        if (_S3 < 0.0)
          goto LABEL_343;
        goto LABEL_609;
      }
      v531 = (float)-_S3 / v528;
      if (v530)
      {
        v525 = fminf(v531, v525);
        if (v524 > v525)
          goto LABEL_343;
      }
      else
      {
        v524 = fmaxf(v524, v531);
LABEL_609:
        if (v524 > v525)
          goto LABEL_343;
      }
      v523 += 2;
      if (v523 != 52)
        continue;
      break;
    }
    v532 = *(_QWORD *)(v786 + 120);
    v533 = 0xB9556ADEAD93443FLL;
    *(_QWORD *)&v889 = 0xB9556ADEAD93443FLL;
    v534 = *(int8x8_t *)(v532 + 128);
    if (v534)
    {
      v535 = (uint8x8_t)vcnt_s8(v534);
      v535.i16[0] = vaddlv_u8(v535);
      if (v535.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v534 <= 0xB9556ADEAD93443FLL)
          v533 = 0xB9556ADEAD93443FLL % *(_QWORD *)&v534;
      }
      else
      {
        v533 = (*(_QWORD *)&v534 - 1) & 0xB9556ADEAD93443FLL;
      }
      v536 = *(_QWORD **)(*(_QWORD *)(v532 + 120) + 8 * v533);
      if (v536)
      {
        v537 = (_QWORD *)*v536;
        if (v537)
        {
          if (v535.u32[0] < 2uLL)
          {
            v538 = *(_QWORD *)&v534 - 1;
            while (1)
            {
              v540 = v537[1];
              if (v540 == 0xB9556ADEAD93443FLL)
              {
                if (v537[2] == 0xB9556ADEAD93443FLL)
                  goto LABEL_663;
              }
              else if ((v540 & v538) != v533)
              {
                goto LABEL_634;
              }
              v537 = (_QWORD *)*v537;
              if (!v537)
                goto LABEL_634;
            }
          }
          do
          {
            v539 = v537[1];
            if (v539 == 0xB9556ADEAD93443FLL)
            {
              if (v537[2] == 0xB9556ADEAD93443FLL)
              {
LABEL_663:
                v541 = v537[3];
                goto LABEL_637;
              }
            }
            else
            {
              if (v539 >= *(_QWORD *)&v534)
                v539 %= *(_QWORD *)&v534;
              if (v539 != v533)
                break;
            }
            v537 = (_QWORD *)*v537;
          }
          while (v537);
        }
      }
    }
LABEL_634:
    v541 = operator new();
    *(_QWORD *)(v541 + 16) = "arComponents::DidIntersectRaycast]";
    *(_QWORD *)(v541 + 24) = 33;
    *(_OWORD *)(v541 + 32) = 0u;
    *(_OWORD *)(v541 + 48) = 0u;
    *(_OWORD *)(v541 + 64) = 0u;
    *(_OWORD *)(v541 + 80) = 0u;
    *(_OWORD *)(v541 + 96) = 0u;
    *(_OWORD *)(v541 + 112) = 0u;
    *(_OWORD *)(v541 + 128) = 0u;
    *(_DWORD *)(v541 + 144) = 1065353216;
    *(_OWORD *)(v541 + 152) = 0u;
    *(_OWORD *)(v541 + 168) = 0u;
    *(_QWORD *)(v541 + 184) = 0;
    *(_DWORD *)(v541 + 192) = 1065353216;
    *(_OWORD *)(v541 + 200) = 0u;
    *(_OWORD *)(v541 + 216) = 0u;
    *(_QWORD *)(v541 + 232) = 0;
    *(_DWORD *)(v541 + 240) = 1065353216;
    *(_QWORD *)(v541 + 8) = 0xB9556ADEAD93443FLL;
    *(_QWORD *)v541 = &off_1E42B1E48;
    *(_QWORD *)(v541 + 248) = v532;
    v542 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v532 + 120), 0xB9556ADEAD93443FLL, &v889);
    v543 = v542[3];
    v542[3] = v541;
    if (v543)
      (*(void (**)(uint64_t))(*(_QWORD *)v543 + 8))(v543);
    __p[0] = (void *)0xB9556ADEAD93443FLL;
    __p[1] = "arComponents::DidIntersectRaycast]";
    __p[2] = (void *)33;
    gdc::Registry::_registerStorageDataSignals(v532, 0xB9556ADEAD93443FLL, (uint64_t)__p, (uint64_t *)(v541 + 104));
LABEL_637:
    v901[0] = v795;
    v544 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v541 + 32), (uint64_t)v901);
    if ((v545 & 1) == 0)
    {
      v546 = *(_QWORD *)(v541 + 248);
      if (*(_QWORD *)(v541 + 80) + (((uint64_t)v544 - *(_QWORD *)(v541 + 56)) >> 3) == *(_QWORD *)(v541 + 88))
        goto LABEL_659;
      for (nn = *(_QWORD **)(v541 + 128); nn; nn = (_QWORD *)*nn)
      {
        __p[0] = v901;
        __p[1] = (void *)1;
        *(_QWORD *)&v889 = v546;
        v548 = nn[6];
        if (!v548)
          goto LABEL_951;
        (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v548 + 48))(v548, &v889, __p);
      }
LABEL_343:
      v340 = (char *)v792 + 168;
      v336 = v787 + 1;
      v790 += 42;
      if (v787 + 1 == v785)
        goto LABEL_689;
      continue;
    }
    break;
  }
  v550 = *(_BYTE **)(v541 + 88);
  v549 = *(_QWORD *)(v541 + 96);
  if ((unint64_t)v550 >= v549)
  {
    v552 = *(char **)(v541 + 80);
    v553 = v550 - v552;
    v554 = v550 - v552 + 1;
    if (v554 < 0)
      abort();
    v555 = v549 - (_QWORD)v552;
    if (2 * v555 > v554)
      v554 = 2 * v555;
    if (v555 >= 0x3FFFFFFFFFFFFFFFLL)
      v556 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v556 = v554;
    if (v556)
      v557 = (char *)operator new(v556);
    else
      v557 = 0;
    v558 = &v557[v556];
    v551 = (uint64_t)&v557[v553 + 1];
    v559 = (char *)(v552 - v550);
    if (v552 == v550)
      v559 = 0;
    *(_QWORD *)(v541 + 80) = &v557[v553 + (_QWORD)v559];
    *(_QWORD *)(v541 + 88) = v551;
    *(_QWORD *)(v541 + 96) = v558;
    if (v552)
      operator delete(v552);
  }
  else
  {
    v551 = (uint64_t)(v550 + 1);
  }
  *(_QWORD *)(v541 + 88) = v551;
  v546 = *(_QWORD *)(v541 + 248);
LABEL_659:
  v560 = *(_QWORD **)(v541 + 176);
  if (!v560)
    goto LABEL_343;
  while (1)
  {
    __p[0] = v901;
    __p[1] = (void *)1;
    *(_QWORD *)&v889 = v546;
    v561 = v560[6];
    if (!v561)
      break;
    (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v561 + 48))(v561, &v889, __p);
    v560 = (_QWORD *)*v560;
    if (!v560)
      goto LABEL_343;
  }
LABEL_951:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_961:
  __break(1u);
}

void sub_19FC66528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,_QWORD *a47)
{
  _QWORD *v48;
  _QWORD *v49;

  if (__p)
    operator delete(__p);
  v48 = a47;
  if (a47)
  {
    do
    {
      v49 = (_QWORD *)*v48;
      operator delete(v48);
      v48 = v49;
    }
    while (v49);
  }
  if (a45)
    operator delete(a45);

  _Unwind_Resume(a1);
}

_QWORD *md::ARWorldIntersectorLogic::runAfterLayout(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = (_QWORD *)gdc::Registry::storage<arComponents::DidIntersectRaycast>(*(_QWORD *)(a1 + 120));
  v2 = result;
  if (result[29] && (v3 = (_QWORD *)result[28]) != 0)
  {
    v4 = result[31];
    v5 = result[7];
    v6 = (result[8] - v5) >> 3;
    while (1)
    {
      v9[0] = v5;
      v9[1] = v6;
      v8 = v4;
      v7 = v3[6];
      if (!v7)
        break;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, &v8, v9);
      v3 = (_QWORD *)*v3;
      if (!v3)
        goto LABEL_6;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (_QWORD *)md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::debugConsoleString();
  }
  else
  {
LABEL_6:
    v2[8] = v2[7];
    v2[11] = v2[10];
  }
  return result;
}

void md::Logic<md::ARWorldIntersectorLogic,md::ARWorldIntersectorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::ARWorldIntersectorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::ResolvedDependencies const&,md::ARWorldIntersectorContext &)::$_0::operator()(int64x2_t ***a1, float32x2_t *a2, __int128 *a3)
{
  float64x2_t v4;
  double v5;
  double v6;
  double v7;
  float64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t (**v13)();
  float64_t v14;
  float64_t v15;
  double v16;
  uint64_t v17;
  __n128 v18;
  uint64_t (***v19)();
  uint64_t v20;
  int64x2_t **v21;
  unint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  int64x2_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  int64x2_t *v33;
  __int128 v34;
  int64x2_t v35;
  int64x2_t v36;
  double v37[16];
  _OWORD v38[3];
  int64x2_t v39;
  __int128 v40;
  int64x2_t v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (**v51)();
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = vcvtq_f64_f32(a2[1]);
  v38[0] = vcvtq_f64_f32(*a2);
  v38[1] = v4;
  v38[2] = vcvtq_f64_f32(a2[2]);
  v5 = *((double *)a3 + 4);
  v4.f64[0] = *((float64_t *)a3 + 5);
  v6 = v5 + v5;
  v7 = (v5 + v5) * v5;
  v8 = (v4.f64[0] + v4.f64[0]) * v4.f64[0];
  v10 = *((_QWORD *)a3 + 2);
  v9 = *((double *)a3 + 3);
  v11 = (v9 + v9) * v5;
  v12 = *((double *)a3 + 6);
  v13 = (uint64_t (**)())*((_QWORD *)a3 + 7);
  v14 = (v4.f64[0] + v4.f64[0]) * v12;
  v15 = v4.f64[0] * (v9 + v9);
  v16 = 1.0 - (v9 + v9) * v9;
  v4.f64[0] = v6 * v4.f64[0];
  *(double *)v39.i64 = 1.0 - (v7 + v8);
  *(double *)&v39.i64[1] = v14 + v11;
  *(double *)v41.i64 = v11 - v14;
  *(double *)&v41.i64[1] = v16 - v8;
  v44 = v12 * v6 + v15;
  v45 = v4.f64[0] - v12 * (v9 + v9);
  v40 = COERCE_UNSIGNED_INT64(v15 - v12 * v6);
  v42 = v12 * (v9 + v9) + v4.f64[0];
  v46 = v16 - v7;
  v43 = 0;
  v47 = 0;
  v48 = *a3;
  v49 = v10;
  v50 = 0x3FF0000000000000;
  v54 = 0u;
  v56 = 0u;
  v58 = 0u;
  v57 = 0u;
  v55 = 0u;
  v53 = 0u;
  v52 = 0u;
  v59 = 0x3FF0000000000000;
  v17 = *((_QWORD *)a3 + 8);
  v4.f64[0] = *((float64_t *)a3 + 9);
  v51 = v13;
  *(_QWORD *)&v54 = v17;
  *((_QWORD *)&v56 + 1) = *(_QWORD *)&v4.f64[0];
  gm::operator*<double,4,4,4>(v37, (double *)v39.i64, (double *)&v51);
  v39 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v40 = xmmword_19FFB2E00;
  v41 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v51 = &off_1E42D8A68;
  *(_QWORD *)&v52 = &v39;
  *((_QWORD *)&v52 + 1) = v37;
  *(_QWORD *)&v53 = &v51;
  v18.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)v38, (uint64_t)&v51);
  v19 = (uint64_t (***)())v53;
  if ((uint64_t (***)())v53 == &v51)
  {
    v20 = 4;
    v19 = &v51;
  }
  else
  {
    if (!(_QWORD)v53)
      goto LABEL_6;
    v20 = 5;
  }
  ((void (*)(__n128))(*v19)[v20])(v18);
LABEL_6:
  v21 = *a1;
  v23 = (*a1)[1];
  v22 = (unint64_t)v21[2];
  if ((unint64_t)v23 >= v22)
  {
    v27 = *v21;
    v28 = 0xAAAAAAAAAAAAAAABLL * (v23 - *v21);
    v29 = v28 + 1;
    if (v28 + 1 > 0x555555555555555)
      abort();
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v27) >> 4);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x2AAAAAAAAAAAAAALL)
      v31 = 0x555555555555555;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v32 = (char *)operator new(48 * v31);
    }
    else
    {
      v32 = 0;
    }
    v33 = (int64x2_t *)&v32[48 * v28];
    v34 = v40;
    *v33 = v39;
    v33[1] = (int64x2_t)v34;
    v33[2] = v41;
    v26 = v33 + 3;
    if (v23 != v27)
    {
      do
      {
        v35 = v23[-3];
        v36 = v23[-1];
        v33[-2] = v23[-2];
        v33[-1] = v36;
        v33[-3] = v35;
        v33 -= 3;
        v23 -= 3;
      }
      while (v23 != v27);
      v23 = *v21;
    }
    *v21 = v33;
    v21[1] = v26;
    v21[2] = (int64x2_t *)&v32[48 * v31];
    if (v23)
      operator delete(v23);
  }
  else
  {
    v24 = v39;
    v25 = v41;
    v23[1] = (int64x2_t)v40;
    v23[2] = v25;
    *v23 = v24;
    v26 = v23 + 3;
  }
  v21[1] = v26;
}

uint64_t std::default_delete<md::ARWorldIntersector>::operator()[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 104);
    if (v2)
    {
      *(_QWORD *)(v1 + 112) = v2;
      operator delete(v2);
    }
    v3 = *(std::__shared_weak_count **)(v1 + 96);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(_QWORD **)(v1 + 64);
    if (v6)
    {
      do
      {
        v9 = (_QWORD *)*v6;
        v10 = v6[3];
        if (v10)
        {
          v11 = v6[4];
          v8 = (void *)v6[3];
          if (v11 != v10)
          {
            do
            {
              if (*(_BYTE *)(v11 - 8))
              {
                v12 = *(void **)(v11 - 32);
                if (v12)
                {
                  *(_QWORD *)(v11 - 24) = v12;
                  operator delete(v12);
                }
              }
              if (*(_BYTE *)(v11 - 40))
              {
                v13 = *(void **)(v11 - 64);
                if (v13)
                {
                  *(_QWORD *)(v11 - 56) = v13;
                  operator delete(v13);
                }
              }
              v11 -= 168;
            }
            while (v11 != v10);
            v8 = (void *)v6[3];
          }
          v6[4] = v10;
          operator delete(v8);
        }
        operator delete(v6);
        v6 = v9;
      }
      while (v9);
    }
    v7 = *(void **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = 0;
    if (v7)
      operator delete(v7);
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v1 + 32));
    std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v1 + 8));
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void md::ARWorldIntersectorLogic::generateDebugAvoidancesIntersections(md::CameraContext const&,md::GeometryContext const&,md::ARWorldIntersectorContext &,BOOL)::$_0::operator()(uint64_t a1, unint64_t a2, float32x2_t *a3, double *a4)
{
  uint64_t *v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  float64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  float64_t v16;
  float64_t v17;
  double v18;
  uint64_t v19;
  __n128 v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  gdc::Registry *v34;
  int64x2_t v35;
  __int128 v36;
  int64x2_t v37;
  uint64_t *v38;
  _QWORD *v39;
  char v40;
  double v41;
  _QWORD *i;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  char v59;
  int64x2_t *v60;
  double v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  int64x2_t *v65;
  int64x2_t *v66;
  int64x2_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  int64x2_t *v72;
  int64x2_t v73;
  int64x2_t v74;
  _QWORD *v75;
  uint64_t v76;
  double *v77;
  uint64_t *v78;
  _QWORD *v79;
  char v80;
  double v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  size_t v91;
  char *v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105[16];
  _OWORD v106[3];
  unint64_t v107;
  int64x2_t v108;
  __int128 v109;
  int64x2_t v110;
  double v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE v120[56];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v107 = a2;
  v5 = *(uint64_t **)(a1 + 8);
  v6 = vcvtq_f64_f32(a3[1]);
  v106[0] = vcvtq_f64_f32(*a3);
  v106[1] = v6;
  v106[2] = vcvtq_f64_f32(a3[2]);
  v7 = a4[4];
  v6.f64[0] = a4[5];
  v8 = v7 + v7;
  v9 = (v7 + v7) * v7;
  v10 = (v6.f64[0] + v6.f64[0]) * v6.f64[0];
  v12 = *((_QWORD *)a4 + 2);
  v11 = a4[3];
  v13 = (v11 + v11) * v7;
  v14 = a4[6];
  v15 = *((_QWORD *)a4 + 7);
  v16 = (v6.f64[0] + v6.f64[0]) * v14;
  v17 = v6.f64[0] * (v11 + v11);
  v18 = 1.0 - (v11 + v11) * v11;
  v6.f64[0] = v8 * v6.f64[0];
  *(double *)v108.i64 = 1.0 - (v9 + v10);
  *(double *)&v108.i64[1] = v16 + v13;
  *(double *)v110.i64 = v13 - v16;
  *(double *)&v110.i64[1] = v18 - v10;
  v113 = v14 * v8 + v17;
  v114 = v6.f64[0] - v14 * (v11 + v11);
  v109 = COERCE_UNSIGNED_INT64(v17 - v14 * v8);
  v111 = v14 * (v11 + v11) + v6.f64[0];
  v115 = v18 - v9;
  v112 = 0;
  v116 = 0;
  v117 = *(_OWORD *)a4;
  v118 = v12;
  v119 = 0x3FF0000000000000;
  *(_OWORD *)&v120[40] = 0u;
  v122 = 0u;
  v124 = 0u;
  v123 = 0u;
  v121 = 0u;
  memset(&v120[8], 0, 32);
  v125 = 0x3FF0000000000000;
  v19 = *((_QWORD *)a4 + 8);
  v6.f64[0] = a4[9];
  *(_QWORD *)v120 = v15;
  *(_QWORD *)&v120[40] = v19;
  *((_QWORD *)&v122 + 1) = *(_QWORD *)&v6.f64[0];
  gm::operator*<double,4,4,4>(v105, (double *)v108.i64, (double *)v120);
  v108 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v109 = xmmword_19FFB2E00;
  v110 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)v120 = &off_1E42D8A68;
  *(_QWORD *)&v120[8] = &v108;
  *(_QWORD *)&v120[16] = v105;
  *(_QWORD *)&v120[24] = v120;
  v20.n128_f64[0] = gm::Box<double,3>::forEachCorner((uint64_t)v106, (uint64_t)v120);
  v21 = *(_QWORD **)&v120[24];
  if (*(_BYTE **)&v120[24] == v120)
  {
    v22 = 4;
    v21 = v120;
  }
  else
  {
    if (!*(_QWORD *)&v120[24])
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(__n128))(*v21 + 8 * v22))(v20);
LABEL_6:
  v103 = 0;
  v104 = 0;
  if (!geo::Intersect::encloses<double>(*(double **)a1, (double *)v108.i64))
    return;
  v23 = v107;
  v24 = (int8x8_t)v5[17];
  if (!*(_QWORD *)&v24)
    goto LABEL_31;
  v25 = (uint8x8_t)vcnt_s8(v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    v26 = v107;
    if (v107 >= *(_QWORD *)&v24)
      v26 = v107 % *(_QWORD *)&v24;
  }
  else
  {
    v26 = (*(_QWORD *)&v24 - 1) & v107;
  }
  v27 = v5[16];
  v28 = *(void ***)(v27 + 8 * v26);
  if (!v28 || (v29 = (uint64_t *)*v28) == 0)
  {
LABEL_31:
    v34 = (gdc::Registry *)v5[15];
    v35 = v108;
    v36 = v109;
    v37 = v110;
    v32 = gdc::Registry::create(v34);
    v38 = (uint64_t *)gdc::Registry::storage<arComponents::DidIntersectFrustum>((uint64_t)v34);
    *(_QWORD *)&v106[0] = v32;
    v39 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v38 + 4, (uint64_t)v106);
    if ((v40 & 1) != 0)
    {
      v45 = (_BYTE *)v38[11];
      v44 = v38[12];
      if ((unint64_t)v45 >= v44)
      {
        v47 = (char *)v38[10];
        v48 = v45 - v47;
        v49 = v45 - v47 + 1;
        if (v49 < 0)
          abort();
        v50 = v44 - (_QWORD)v47;
        if (2 * v50 > v49)
          v49 = 2 * v50;
        if (v50 >= 0x3FFFFFFFFFFFFFFFLL)
          v51 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
          v52 = (char *)operator new(v51);
        else
          v52 = 0;
        v53 = &v52[v51];
        v46 = (uint64_t)&v52[v48 + 1];
        v54 = (char *)(v47 - v45);
        if (v47 == v45)
          v54 = 0;
        v38[10] = (uint64_t)&v52[v48 + (_QWORD)v54];
        v38[11] = v46;
        v38[12] = (uint64_t)v53;
        if (v47)
          operator delete(v47);
      }
      else
      {
        v46 = (uint64_t)(v45 + 1);
      }
      v38[11] = v46;
      v41 = *((double *)v38 + 31);
    }
    else
    {
      v41 = *((double *)v38 + 31);
      if (v38[10] + (((uint64_t)v39 - v38[7]) >> 3) != v38[11])
      {
        for (i = (_QWORD *)v38[16]; i; i = (_QWORD *)*i)
        {
          *(_QWORD *)v120 = v106;
          *(_QWORD *)&v120[8] = 1;
          v105[0] = v41;
          v43 = i[6];
          if (!v43)
            goto LABEL_136;
          (*(void (**)(uint64_t, double *, _BYTE *))(*(_QWORD *)v43 + 48))(v43, v105, v120);
        }
LABEL_56:
        v57 = (uint64_t *)gdc::Registry::storage<arComponents::WorldBounds>((uint64_t)v34);
        *(_QWORD *)&v106[0] = v32;
        v58 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v57 + 4, (uint64_t)v106);
        if ((v59 & 1) != 0)
        {
          v65 = (int64x2_t *)v57[11];
          v64 = v57[12];
          if ((unint64_t)v65 >= v64)
          {
            v67 = (int64x2_t *)v57[10];
            v68 = 0xAAAAAAAAAAAAAAABLL * (v65 - v67) + 1;
            if (v68 > 0x555555555555555)
              abort();
            v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (_QWORD)v67) >> 4);
            if (2 * v69 > v68)
              v68 = 2 * v69;
            if (v69 >= 0x2AAAAAAAAAAAAAALL)
              v70 = 0x555555555555555;
            else
              v70 = v68;
            if (v70)
            {
              if (v70 > 0x555555555555555)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v71 = (char *)operator new(48 * v70);
            }
            else
            {
              v71 = 0;
            }
            v72 = (int64x2_t *)&v71[16 * (v65 - v67)];
            *v72 = v35;
            v72[1] = (int64x2_t)v36;
            v72[2] = v37;
            v66 = v72 + 3;
            if (v65 != v67)
            {
              do
              {
                v73 = v65[-3];
                v74 = v65[-1];
                v72[-2] = v65[-2];
                v72[-1] = v74;
                v72[-3] = v73;
                v72 -= 3;
                v65 -= 3;
              }
              while (v65 != v67);
              v65 = (int64x2_t *)v57[10];
            }
            v57[10] = (uint64_t)v72;
            v57[11] = (uint64_t)v66;
            v57[12] = (uint64_t)&v71[48 * v70];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *v65 = v35;
            v65[1] = (int64x2_t)v36;
            v66 = v65 + 3;
            v65[2] = v37;
          }
          v57[11] = (uint64_t)v66;
          v61 = *((double *)v57 + 31);
        }
        else
        {
          v60 = (int64x2_t *)(v57[10] + 48 * (((uint64_t)v58 - v57[7]) >> 3));
          *v60 = v35;
          v60[1] = (int64x2_t)v36;
          v60[2] = v37;
          v61 = *((double *)v57 + 31);
          if (v60 != (int64x2_t *)v57[11])
          {
            v62 = (_QWORD *)v57[16];
            if (!v62)
              goto LABEL_83;
            while (1)
            {
              *(_QWORD *)v120 = v106;
              *(_QWORD *)&v120[8] = 1;
              v105[0] = v61;
              v63 = v62[6];
              if (!v63)
                goto LABEL_136;
              (*(void (**)(uint64_t, double *, _BYTE *))(*(_QWORD *)v63 + 48))(v63, v105, v120);
              v62 = (_QWORD *)*v62;
              if (!v62)
                goto LABEL_83;
            }
          }
        }
        v75 = (_QWORD *)v57[22];
        if (!v75)
          goto LABEL_83;
        while (1)
        {
          *(_QWORD *)v120 = v106;
          *(_QWORD *)&v120[8] = 1;
          v105[0] = v61;
          v76 = v75[6];
          if (!v76)
            break;
          (*(void (**)(uint64_t, double *, _BYTE *))(*(_QWORD *)v76 + 48))(v76, v105, v120);
          v75 = (_QWORD *)*v75;
          if (!v75)
            goto LABEL_83;
        }
LABEL_136:
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_144;
      }
    }
    v55 = (_QWORD *)v38[22];
    if (v55)
    {
      while (1)
      {
        *(_QWORD *)v120 = v106;
        *(_QWORD *)&v120[8] = 1;
        v105[0] = v41;
        v56 = v55[6];
        if (!v56)
          goto LABEL_136;
        (*(void (**)(uint64_t, double *, _BYTE *))(*(_QWORD *)v56 + 48))(v56, v105, v120);
        v55 = (_QWORD *)*v55;
        if (!v55)
          goto LABEL_56;
      }
    }
    goto LABEL_56;
  }
  v30 = *(_QWORD *)&v24 - 1;
  if (v25.u32[0] < 2uLL)
  {
    while (1)
    {
      v31 = v29[1];
      if (v31 == v107)
      {
        if (__PAIR64__(*((unsigned __int16 *)v29 + 9), *((unsigned __int16 *)v29 + 8)) == __PAIR64__(WORD1(v107), (unsigned __int16)v107)&& *((_DWORD *)v29 + 5) == HIDWORD(v107))
        {
          goto LABEL_21;
        }
      }
      else if ((v31 & v30) != v26)
      {
        goto LABEL_31;
      }
      v29 = (uint64_t *)*v29;
      if (!v29)
        goto LABEL_31;
    }
  }
  while (1)
  {
    v33 = v29[1];
    if (v33 == v107)
      break;
    if (v33 >= *(_QWORD *)&v24)
      v33 %= *(_QWORD *)&v24;
    if (v33 != v26)
      goto LABEL_31;
LABEL_24:
    v29 = (uint64_t *)*v29;
    if (!v29)
      goto LABEL_31;
  }
  if (__PAIR64__(*((unsigned __int16 *)v29 + 9), *((unsigned __int16 *)v29 + 8)) != __PAIR64__(WORD1(v107), (unsigned __int16)v107)|| *((_DWORD *)v29 + 5) != HIDWORD(v107))
  {
    goto LABEL_24;
  }
LABEL_21:
  v32 = v29[3];
  if (v25.u32[0] > 1uLL)
  {
    if (v107 >= *(_QWORD *)&v24)
      v23 = v107 % *(_QWORD *)&v24;
  }
  else
  {
    v23 = v30 & v107;
  }
  v97 = *(uint64_t **)(v27 + 8 * v23);
  do
  {
    v98 = v97;
    v97 = (uint64_t *)*v97;
  }
  while (v97 != v29);
  if (v98 == v5 + 18)
    goto LABEL_126;
  v99 = v98[1];
  if (v25.u32[0] > 1uLL)
  {
    if (v99 >= *(_QWORD *)&v24)
      v99 %= *(_QWORD *)&v24;
  }
  else
  {
    v99 &= v30;
  }
  if (v99 != v23)
  {
LABEL_126:
    if (!*v29)
      goto LABEL_127;
    v100 = *(_QWORD *)(*v29 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v100 >= *(_QWORD *)&v24)
        v100 %= *(_QWORD *)&v24;
    }
    else
    {
      v100 &= v30;
    }
    if (v100 != v23)
LABEL_127:
      *(_QWORD *)(v27 + 8 * v23) = 0;
  }
  v101 = *v29;
  if (*v29)
  {
    v102 = *(_QWORD *)(v101 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v102 >= *(_QWORD *)&v24)
        v102 %= *(_QWORD *)&v24;
    }
    else
    {
      v102 &= v30;
    }
    if (v102 != v23)
    {
      *(_QWORD *)(v5[16] + 8 * v102) = v98;
      v101 = *v29;
    }
  }
  *v98 = v101;
  *v29 = 0;
  --v5[19];
  operator delete(v29);
  v23 = v107;
LABEL_83:
  std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::Entity>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::Entity>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::Entity>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::Entity>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>(*(float **)(a1 + 16), v23, &v107)[3] = v32;
  if (!**(_BYTE **)(a1 + 24))
    return;
  v77 = *(double **)(a1 + 32);
  *(int64x2_t *)v120 = v108;
  *(_OWORD *)&v120[16] = v109;
  *(int64x2_t *)&v120[32] = v110;
  if (!gm::Ray<double,3>::segmentIntersectsBox(v77, (double *)v120, (double *)&v104, (double *)&v103, 1.79769313e308))
    return;
  v78 = (uint64_t *)gdc::Registry::storage<arComponents::DidIntersectRaycast>(v5[15]);
  *(_QWORD *)&v106[0] = v32;
  v79 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v78 + 4, (uint64_t)v106);
  if ((v80 & 1) != 0)
  {
    v85 = (_BYTE *)v78[11];
    v84 = v78[12];
    if ((unint64_t)v85 >= v84)
    {
      v87 = (char *)v78[10];
      v88 = v85 - v87;
      v89 = v85 - v87 + 1;
      if (v89 < 0)
        abort();
      v90 = v84 - (_QWORD)v87;
      if (2 * v90 > v89)
        v89 = 2 * v90;
      if (v90 >= 0x3FFFFFFFFFFFFFFFLL)
        v91 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      if (v91)
        v92 = (char *)operator new(v91);
      else
        v92 = 0;
      v93 = &v92[v91];
      v86 = (uint64_t)&v92[v88 + 1];
      v94 = (char *)(v87 - v85);
      if (v87 == v85)
        v94 = 0;
      v78[10] = (uint64_t)&v92[v88 + (_QWORD)v94];
      v78[11] = v86;
      v78[12] = (uint64_t)v93;
      if (v87)
        operator delete(v87);
    }
    else
    {
      v86 = (uint64_t)(v85 + 1);
    }
    v78[11] = v86;
    v81 = *((double *)v78 + 31);
    goto LABEL_107;
  }
  v81 = *((double *)v78 + 31);
  if (v78[10] + (((uint64_t)v79 - v78[7]) >> 3) == v78[11])
  {
LABEL_107:
    v95 = (_QWORD *)v78[22];
    if (!v95)
      return;
    while (1)
    {
      *(_QWORD *)v120 = v106;
      *(_QWORD *)&v120[8] = 1;
      v105[0] = v81;
      v96 = v95[6];
      if (!v96)
        break;
      (*(void (**)(uint64_t, double *, _BYTE *))(*(_QWORD *)v96 + 48))(v96, v105, v120);
      v95 = (_QWORD *)*v95;
      if (!v95)
        return;
    }
LABEL_138:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_144:
    __break(1u);
    return;
  }
  v82 = (_QWORD *)v78[16];
  if (v82)
  {
    while (1)
    {
      *(_QWORD *)v120 = v106;
      *(_QWORD *)&v120[8] = 1;
      v105[0] = v81;
      v83 = v82[6];
      if (!v83)
        break;
      (*(void (**)(uint64_t, double *, _BYTE *))(*(_QWORD *)v83 + 48))(v83, v105, v120);
      v82 = (_QWORD *)*v82;
      if (!v82)
        return;
    }
    goto LABEL_138;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::Entity>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::Entity>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::Entity>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::Entity>>>::__emplace_unique_key_args<gdc::Entity,std::piecewise_construct_t const&,std::tuple<gdc::Entity const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (__PAIR64__(*((unsigned __int16 *)v10 + 9), *((unsigned __int16 *)v10 + 8)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *((_DWORD *)v10 + 5) == HIDWORD(a2))
              {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_25;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (__PAIR64__(*((unsigned __int16 *)v10 + 9), *((unsigned __int16 *)v10 + 8)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *((_DWORD *)v10 + 5) == HIDWORD(a2))
            {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_25:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0xFFFFFFFF00000000;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_75;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_38:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
      goto LABEL_62;
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
LABEL_62:
      v7 = prime;
      goto LABEL_63;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_62;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_67;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_67:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_62;
    }
  }
  if (prime >= v7)
    goto LABEL_63;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_63;
    }
    goto LABEL_38;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_63:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_75:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_83:
    *v37 = v10;
    goto LABEL_84;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_83;
  }
LABEL_84:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19FC67B1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<md::ARWorldIntersector *,std::shared_ptr<md::ARWorldIntersector>::__shared_ptr_default_delete<md::ARWorldIntersector,md::ARWorldIntersector>,std::allocator<md::ARWorldIntersector>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::ARWorldIntersector *,std::shared_ptr<md::ARWorldIntersector>::__shared_ptr_default_delete<md::ARWorldIntersector,md::ARWorldIntersector>,std::allocator<md::ARWorldIntersector>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<md::ARWorldIntersector>::operator()[abi:nn180100](*(_QWORD *)(a1 + 24));
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext,md::ARAssetOcclusionMeshDataContext>,gdc::TypeList<md::CollectMapDataContext<(md::MapDataType)60>>>::resolveDependencies(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v7 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0x3070CB6B3C7F21D3;
    if (a3 <= 0x3070CB6B3C7F21D3)
      v13 = 0x3070CB6B3C7F21D3 % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0x3070CB6B3C7F21D3;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x3070CB6B3C7F21D3)
      {
        if (v15[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0x3070CB6B3C7F21D3)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x3070CB6B3C7F21D3)
  {
    v6 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x18CA739B45F5362ALL;
    if (a3 <= 0x18CA739B45F5362ALL)
      v19 = 0x18CA739B45F5362ALL % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x18CA739B45F5362ALL;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x18CA739B45F5362ALL)
      {
        if (v21[2] == 0x18CA739B45F5362ALL)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x18CA739B45F5362ALL)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x18CA739B45F5362ALL)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x18CA739B45F5362ALL)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0xF9EFCB105DF83E4;
    if (a3 <= 0xF9EFCB105DF83E4)
      v25 = 0xF9EFCB105DF83E4 % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0xF9EFCB105DF83E4;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0xF9EFCB105DF83E4)
      {
        if (v27[2] == 0xF9EFCB105DF83E4)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0xF9EFCB105DF83E4)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0xF9EFCB105DF83E4)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0xF9EFCB105DF83E4)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v7;
  result[1] = v6;
  result[2] = v5;
  result[3] = v31;
  return result;
}

void md::ARWorldIntersectorContext::~ARWorldIntersectorContext(md::ARWorldIntersectorContext *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)*((_QWORD *)this + 2);
    if (v5)
    {
      do
      {
LABEL_6:
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)*((_QWORD *)this + 2);
    if (v5)
      goto LABEL_6;
  }
  v7 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v7)
    operator delete(v7);
}

_QWORD *gdc::ManagedObjectHolder<md::ARWorldIntersectorContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *a1 = &off_1E42B1298;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(_QWORD **)(v2 + 16);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v8)
      operator delete(v8);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C407175AC86);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::ARWorldIntersectorContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *a1 = &off_1E42B1298;
  v1 = a1[4];
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 48);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(_QWORD **)(v1 + 16);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v7)
      operator delete(v7);
    MEMORY[0x1A1AF4E00](v1, 0x10A0C407175AC86);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARWorldIntersectorContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D13A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1>,void ()(BOOL)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 184) = 1;
  return result;
}

void std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D1360;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 184) = 1;
  return result;
}

uint64_t md::LabelLineZSet::LabelLineZSet(uint64_t result, uint64_t a2, char a3, char a4, char a5)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;
  int v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  malloc_zone_t *v17;
  int v18;
  uint64_t v19;
  geo::read_write_lock *v20;
  const char *v21;
  malloc_zone_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)result = a4;
  *(_BYTE *)(result + 1) = a3;
  *(_BYTE *)(result + 2) = a5;
  *(_BYTE *)(result + 3) = *(_BYTE *)(a2 + 122);
  *(_BYTE *)(result + 4) = *(_BYTE *)(a2 + 290);
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  if ((v5 & 1) == 0)
  {
    v23 = result;
    result = v23;
    if (v8)
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v9 + 24) = "VectorKitLabels";
      *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v9 = &off_1E42B5668;
      *(_QWORD *)(v9 + 8) = "VectorKitLabels";
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *(_OWORD *)(v9 + 136) = 0u;
      *(_OWORD *)(v9 + 152) = 0u;
      *(_OWORD *)(v9 + 168) = 0u;
      *(_OWORD *)(v9 + 184) = 0u;
      *(_OWORD *)(v9 + 200) = 0u;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_QWORD *)(v9 + 248) = 0;
      *(_OWORD *)(v9 + 56) = 0u;
      v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
      if ((_DWORD)v10)
        geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v9 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v9;
      result = v23;
    }
  }
  *(_QWORD *)(result + 40) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  if ((v6 & 1) == 0)
  {
    v24 = result;
    result = v24;
    if (v13)
    {
      v14 = operator new();
      *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v14 + 24) = "VectorKitLabels";
      *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v14 = &off_1E42B5668;
      *(_QWORD *)(v14 + 8) = "VectorKitLabels";
      *(_OWORD *)(v14 + 72) = 0u;
      *(_OWORD *)(v14 + 88) = 0u;
      *(_OWORD *)(v14 + 104) = 0u;
      *(_OWORD *)(v14 + 120) = 0u;
      *(_OWORD *)(v14 + 136) = 0u;
      *(_OWORD *)(v14 + 152) = 0u;
      *(_OWORD *)(v14 + 168) = 0u;
      *(_OWORD *)(v14 + 184) = 0u;
      *(_OWORD *)(v14 + 200) = 0u;
      *(_OWORD *)(v14 + 216) = 0u;
      *(_OWORD *)(v14 + 232) = 0u;
      *(_QWORD *)(v14 + 248) = 0;
      *(_OWORD *)(v14 + 56) = 0u;
      v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
      if ((_DWORD)v15)
        geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
      v17 = malloc_create_zone(0, 0);
      *(_QWORD *)(v14 + 48) = v17;
      malloc_set_zone_name(v17, "VectorKitLabels");
      *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v14;
      result = v24;
    }
  }
  *(_QWORD *)(result + 72) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  if ((v7 & 1) == 0)
  {
    v25 = result;
    result = v25;
    if (v18)
    {
      v19 = operator new();
      *(_QWORD *)(v19 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v19 + 24) = "VectorKitLabels";
      *(_OWORD *)(v19 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v19 = &off_1E42B5668;
      *(_QWORD *)(v19 + 8) = "VectorKitLabels";
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 136) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 168) = 0u;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      *(_QWORD *)(v19 + 248) = 0;
      *(_OWORD *)(v19 + 56) = 0u;
      v20 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v19 + 56), 0);
      if ((_DWORD)v20)
        geo::read_write_lock::logFailure(v20, (uint64_t)"initialization", v21);
      v22 = malloc_create_zone(0, 0);
      *(_QWORD *)(v19 + 48) = v22;
      malloc_set_zone_name(v22, "VectorKitLabels");
      *(_QWORD *)(v19 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v19;
      result = v25;
    }
  }
  *(_QWORD *)(result + 104) = mdm::Allocator::instance(void)::alloc;
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  const char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  double *v20;
  uint64_t *k;
  uint64_t v22;
  unsigned int v23;
  double v24;
  double *v25;
  uint64_t *v26;
  uint64_t *m;
  uint64_t v28;
  unsigned int v29;
  double v30;
  double *v31;
  uint64_t v32;
  unsigned int v33;
  double v34;
  double *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unsigned int v39;
  double *v40;
  double *v41;
  unsigned int v42;
  double v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  double *v61;
  uint64_t v62;
  unsigned int v63;
  double *v64;
  uint64_t v65;
  unsigned int v66;
  double *v67;
  uint64_t *j;
  uint64_t v69;
  double *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  double *v74;
  uint64_t v75;
  unsigned int v76;
  double *v77;
  const char *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  double *v97;
  BOOL v99;
  uint64_t v100;
  uint64_t *v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  double *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t i;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  unsigned int v116;
  unsigned int v117;
  double *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  int64_t v127;
  unsigned __int8 v128;
  int64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  double *v136;
  uint64_t *v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  double *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  double *v156;
  unsigned int v157;
  unsigned int v158;
  BOOL v159;
  double *v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  unsigned __int8 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  unsigned __int8 v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  double *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int8 v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  unsigned int v206;
  double *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int8 v215;
  unsigned int v216;
  unsigned int v217;
  double *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int8 v226;
  uint64_t *v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int v231;
  double *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 v237;
  unsigned int v238;
  unint64_t *v239;
  double *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v248;
  uint64_t *v250;

  v8 = "VectorKitLabels";
  while (2)
  {
    v9 = a1;
LABEL_3:
    v10 = v9;
    a1 = v9 + 1;
    v248 = v9 + 2;
LABEL_4:
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        v93 = *(a2 - 1);
        v94 = *(unsigned __int8 *)(v93 + 2);
        v95 = *v10;
        v96 = *(unsigned __int8 *)(*v10 + 2);
        if (v94 == v96)
        {
          if (*(_BYTE *)(v93 + 2))
          {
            a5.n128_u64[0] = *(_QWORD *)(v93 + 104);
            v97 = (double *)(v95 + 104);
          }
          else
          {
            a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v93 + 40) + 16);
            v97 = *(double **)(**(_QWORD **)(v95 + 40) + 16);
          }
          if (a5.n128_f64[0] <= *v97)
            return a5.n128_f64[0];
        }
        else if (v94 >= v96)
        {
          return a5.n128_f64[0];
        }
        *v10 = v93;
        *(a2 - 1) = v95;
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(v10, a1, a2 - 1);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_f64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(v10, a1, v248, a2 - 1);
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_f64[0] = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *,0>(v10, a1, v248, v10 + 3, a2 - 1);
        return a5.n128_f64[0];
      default:
        if (v11 <= 191)
        {
          v99 = v10 == a2 || a1 == a2;
          if ((a4 & 1) == 0)
          {
            if (v99)
              return a5.n128_f64[0];
            while (1)
            {
              v227 = v10;
              v10 = a1;
              v228 = *a1;
              v229 = *(unsigned __int8 *)(*a1 + 2);
              v230 = *v227;
              v231 = *(unsigned __int8 *)(*v227 + 2);
              if (v229 == v231)
              {
                if (*(_BYTE *)(*a1 + 2))
                {
                  a5.n128_u64[0] = *(_QWORD *)(v228 + 104);
                  v232 = (double *)(v230 + 104);
                }
                else
                {
                  a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v228 + 40) + 16);
                  v232 = *(double **)(**(_QWORD **)(v230 + 40) + 16);
                }
                if (a5.n128_f64[0] > *v232)
                {
LABEL_398:
                  v233 = 0;
                  *v10 = 0;
                  while (1)
                  {
                    *v227 = 0;
                    v227[1] = v230;
                    if (v233)
                    {
                      v234 = *(_QWORD *)(v233 + 72);
                      if (v234)
                      {
                        *(_QWORD *)(v233 + 80) = v234;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v233 + 96) + 40))(*(_QWORD *)(v233 + 96), v234, *(_QWORD *)(v233 + 88) - v234);
                      }
                      v235 = *(_QWORD *)(v233 + 40);
                      if (v235)
                      {
                        *(_QWORD *)(v233 + 48) = v235;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v233 + 64) + 40))(*(_QWORD *)(v233 + 64), v235, *(_QWORD *)(v233 + 56) - v235);
                      }
                      v236 = *(_QWORD *)(v233 + 8);
                      if (v236)
                      {
                        *(_QWORD *)(v233 + 16) = v236;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v233 + 32) + 40))(*(_QWORD *)(v233 + 32), v236, *(_QWORD *)(v233 + 24) - v236);
                      }
                      if ((v237 & 1) == 0
                      {
                        v241 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v241, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 40))(mdm::Allocator::instance(void)::alloc, v233, 136);
                      v229 = *(unsigned __int8 *)(v228 + 2);
                    }
                    v230 = *(v227 - 1);
                    v238 = *(unsigned __int8 *)(v230 + 2);
                    if (v229 == v238)
                    {
                      v239 = (unint64_t *)(v228 + 104);
                      if (v229)
                      {
                        v240 = (double *)(v230 + 104);
                      }
                      else
                      {
                        v239 = *(unint64_t **)(**(_QWORD **)(v228 + 40) + 16);
                        v240 = *(double **)(**(_QWORD **)(v230 + 40) + 16);
                      }
                      a5.n128_u64[0] = *v239;
                      if (*(double *)v239 <= *v240)
                      {
LABEL_418:
                        v242 = *v227;
                        *v227 = v228;
                        if (v242)
                        {
                          v243 = *(_QWORD *)(v242 + 72);
                          if (v243)
                          {
                            *(_QWORD *)(v242 + 80) = v243;
                            (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v242 + 96) + 40))(*(_QWORD *)(v242 + 96), v243, *(_QWORD *)(v242 + 88) - v243, a5);
                          }
                          v244 = *(_QWORD *)(v242 + 40);
                          if (v244)
                          {
                            *(_QWORD *)(v242 + 48) = v244;
                            (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v242 + 64) + 40))(*(_QWORD *)(v242 + 64), v244, *(_QWORD *)(v242 + 56) - v244, a5);
                          }
                          v245 = *(_QWORD *)(v242 + 8);
                          if (v245)
                          {
                            *(_QWORD *)(v242 + 16) = v245;
                            (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(**(_QWORD **)(v242 + 32) + 40))(*(_QWORD *)(v242 + 32), v245, *(_QWORD *)(v242 + 24) - v245, a5);
                          }
                          if ((v226 & 1) == 0
                          {
                            v246 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v246, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v242, 136);
                        }
                        break;
                      }
                    }
                    else if (v229 >= v238)
                    {
                      goto LABEL_418;
                    }
                    v233 = *v227--;
                  }
                }
              }
              else if (v229 < v231)
              {
                goto LABEL_398;
              }
              a1 = v10 + 1;
              if (v10 + 1 == a2)
                return a5.n128_f64[0];
            }
          }
          if (v99)
            return a5.n128_f64[0];
          v100 = 0;
          v101 = v10;
          while (1)
          {
            v103 = *v101;
            v101 = a1;
            v104 = *a1;
            v105 = *(unsigned __int8 *)(*a1 + 2);
            v106 = *(unsigned __int8 *)(v103 + 2);
            if (v105 == v106)
            {
              if (*(_BYTE *)(*a1 + 2))
              {
                a5.n128_u64[0] = *(_QWORD *)(v104 + 104);
                v107 = (double *)(v103 + 104);
              }
              else
              {
                a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v104 + 40) + 16);
                v107 = *(double **)(**(_QWORD **)(v103 + 40) + 16);
              }
              if (a5.n128_f64[0] <= *v107)
                goto LABEL_195;
            }
            else if (v105 >= v106)
            {
              goto LABEL_195;
            }
            v108 = a2;
            v109 = 0;
            *v101 = 0;
            for (i = v100; ; i -= 8)
            {
              v111 = (uint64_t *)((char *)v10 + i);
              *v111 = 0;
              v111[1] = v103;
              if (v109)
              {
                v112 = *(_QWORD *)(v109 + 72);
                if (v112)
                {
                  *(_QWORD *)(v109 + 80) = v112;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v109 + 96) + 40))(*(_QWORD *)(v109 + 96), v112, *(_QWORD *)(v109 + 88) - v112);
                }
                v113 = *(_QWORD *)(v109 + 40);
                if (v113)
                {
                  *(_QWORD *)(v109 + 48) = v113;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v109 + 64) + 40))(*(_QWORD *)(v109 + 64), v113, *(_QWORD *)(v109 + 56) - v113);
                }
                v114 = *(_QWORD *)(v109 + 8);
                if (v114)
                {
                  *(_QWORD *)(v109 + 16) = v114;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v109 + 32) + 40))(*(_QWORD *)(v109 + 32), v114, *(_QWORD *)(v109 + 24) - v114);
                }
                {
                  v119 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v119, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v109, 136);
              }
              if (!i)
                break;
              v116 = *(unsigned __int8 *)(v104 + 2);
              v103 = *(uint64_t *)((char *)v10 + i - 8);
              v117 = *(unsigned __int8 *)(v103 + 2);
              if (v116 == v117)
              {
                if (*(_BYTE *)(v104 + 2))
                {
                  a5.n128_u64[0] = *(_QWORD *)(v104 + 104);
                  v118 = (double *)(v103 + 104);
                }
                else
                {
                  a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v104 + 40) + 16);
                  v118 = *(double **)(**(_QWORD **)(v103 + 40) + 16);
                }
                if (a5.n128_f64[0] <= *v118)
                {
LABEL_225:
                  v120 = (uint64_t *)((char *)v10 + i);
                  goto LABEL_226;
                }
              }
              else if (v116 >= v117)
              {
                goto LABEL_225;
              }
              v109 = *v111;
            }
            v120 = v10;
LABEL_226:
            v121 = *v120;
            *v120 = v104;
            a2 = v108;
            if (v121)
            {
              v122 = *(_QWORD *)(v121 + 72);
              if (v122)
              {
                *(_QWORD *)(v121 + 80) = v122;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v121 + 96) + 40))(*(_QWORD *)(v121 + 96), v122, *(_QWORD *)(v121 + 88) - v122);
              }
              v123 = *(_QWORD *)(v121 + 40);
              if (v123)
              {
                *(_QWORD *)(v121 + 48) = v123;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v121 + 64) + 40))(*(_QWORD *)(v121 + 64), v123, *(_QWORD *)(v121 + 56) - v123);
              }
              v124 = *(_QWORD *)(v121 + 8);
              if (v124)
              {
                *(_QWORD *)(v121 + 16) = v124;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v121 + 32) + 40))(*(_QWORD *)(v121 + 32), v124, *(_QWORD *)(v121 + 24) - v124);
              }
              {
                v125 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v125, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v121, 136);
            }
LABEL_195:
            a1 = v101 + 1;
            v100 += 8;
            if (v101 + 1 == a2)
              return a5.n128_f64[0];
          }
        }
        if (!a3)
        {
          if (v10 == a2)
            return a5.n128_f64[0];
          v250 = a2;
          v126 = (v12 - 2) >> 1;
          v127 = v126;
          while (1)
          {
            v129 = v127;
            if (v126 < v127)
              goto LABEL_239;
            v130 = (2 * v127) | 1;
            v131 = &v10[v130];
            if (2 * v129 + 2 < (uint64_t)v12)
            {
              v132 = v131[1];
              v133 = *v131;
              v134 = *(unsigned __int8 *)(*v131 + 2);
              v135 = *(unsigned __int8 *)(v132 + 2);
              if (v134 != v135)
              {
                if (v134 >= v135)
                  goto LABEL_247;
LABEL_246:
                ++v131;
                v130 = 2 * v129 + 2;
                goto LABEL_247;
              }
              if (*(_BYTE *)(*v131 + 2))
              {
                a5.n128_u64[0] = *(_QWORD *)(v133 + 104);
                v136 = (double *)(v132 + 104);
              }
              else
              {
                a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v133 + 40) + 16);
                v136 = *(double **)(**(_QWORD **)(v132 + 40) + 16);
              }
              if (a5.n128_f64[0] > *v136)
                goto LABEL_246;
            }
LABEL_247:
            v137 = &v10[v129];
            v138 = *v131;
            v139 = *(unsigned __int8 *)(*v131 + 2);
            v140 = *v137;
            v141 = *(unsigned __int8 *)(*v137 + 2);
            if (v139 == v141)
            {
              if (*(_BYTE *)(*v131 + 2))
              {
                a5.n128_u64[0] = *(_QWORD *)(v138 + 104);
                v142 = (double *)(v140 + 104);
              }
              else
              {
                a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v138 + 40) + 16);
                v142 = *(double **)(**(_QWORD **)(v140 + 40) + 16);
              }
              if (a5.n128_f64[0] > *v142)
                goto LABEL_239;
            }
            else if (v139 < v141)
            {
              goto LABEL_239;
            }
            *v137 = 0;
            v143 = *v131;
            while (1)
            {
              v144 = v131;
              *v131 = 0;
              v145 = *v137;
              *v137 = v143;
              if (v145)
              {
                v146 = *(_QWORD *)(v145 + 72);
                if (v146)
                {
                  *(_QWORD *)(v145 + 80) = v146;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v145 + 96) + 40))(*(_QWORD *)(v145 + 96), v146, *(_QWORD *)(v145 + 88) - v146);
                }
                v147 = *(_QWORD *)(v145 + 40);
                if (v147)
                {
                  *(_QWORD *)(v145 + 48) = v147;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v145 + 64) + 40))(*(_QWORD *)(v145 + 64), v147, *(_QWORD *)(v145 + 56) - v147);
                }
                v148 = *(_QWORD *)(v145 + 8);
                if (v148)
                {
                  *(_QWORD *)(v145 + 16) = v148;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v145 + 32) + 40))(*(_QWORD *)(v145 + 32), v148, *(_QWORD *)(v145 + 24) - v148);
                }
                {
                  v162 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v162, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v145, 136);
              }
              if (v126 < v130)
                break;
              v150 = 2 * v130;
              v130 = (2 * v130) | 1;
              v131 = &v10[v130];
              v151 = v150 + 2;
              if (v151 < (uint64_t)v12)
              {
                v152 = v131[1];
                v153 = *v131;
                v154 = *(unsigned __int8 *)(*v131 + 2);
                v155 = *(unsigned __int8 *)(v152 + 2);
                if (v154 == v155)
                {
                  if (*(_BYTE *)(*v131 + 2))
                  {
                    a5.n128_u64[0] = *(_QWORD *)(v153 + 104);
                    v156 = (double *)(v152 + 104);
                  }
                  else
                  {
                    a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v153 + 40) + 16);
                    v156 = *(double **)(**(_QWORD **)(v152 + 40) + 16);
                  }
                  if (a5.n128_f64[0] <= *v156)
                    goto LABEL_273;
LABEL_272:
                  ++v131;
                  v130 = v151;
                  goto LABEL_273;
                }
                if (v154 < v155)
                  goto LABEL_272;
              }
LABEL_273:
              v143 = *v131;
              v157 = *(unsigned __int8 *)(*v131 + 2);
              v158 = *(unsigned __int8 *)(v140 + 2);
              v159 = v157 >= v158;
              if (v157 == v158)
              {
                if (*(_BYTE *)(*v131 + 2))
                {
                  a5.n128_u64[0] = *(_QWORD *)(v143 + 104);
                  v160 = (double *)(v140 + 104);
                }
                else
                {
                  a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v143 + 40) + 16);
                  v160 = *(double **)(**(_QWORD **)(v140 + 40) + 16);
                }
                v161 = a5.n128_f64[0] <= *v160;
                v137 = v144;
                if (!v161)
                  break;
              }
              else
              {
                v137 = v144;
                if (!v159)
                  break;
              }
            }
            v163 = *v144;
            *v144 = v140;
            if (v163)
            {
              v164 = *(_QWORD *)(v163 + 72);
              if (v164)
              {
                *(_QWORD *)(v163 + 80) = v164;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v163 + 96) + 40))(*(_QWORD *)(v163 + 96), v164, *(_QWORD *)(v163 + 88) - v164);
              }
              v165 = *(_QWORD *)(v163 + 40);
              if (v165)
              {
                *(_QWORD *)(v163 + 48) = v165;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v163 + 64) + 40))(*(_QWORD *)(v163 + 64), v165, *(_QWORD *)(v163 + 56) - v165);
              }
              v166 = *(_QWORD *)(v163 + 8);
              if (v166)
              {
                *(_QWORD *)(v163 + 16) = v166;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v163 + 32) + 40))(*(_QWORD *)(v163 + 32), v166, *(_QWORD *)(v163 + 24) - v166);
              }
              {
                v167 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v167, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 136);
            }
LABEL_239:
            v127 = v129 - 1;
            if (!v129)
            {
              v168 = (unint64_t)v11 >> 3;
              v169 = v250;
              while (1)
              {
                v171 = 0;
                v172 = *v10;
                *v10 = 0;
                v173 = v10;
                do
                {
                  v175 = &v173[v171 + 1];
                  v176 = 2 * v171;
                  v171 = (2 * v171) | 1;
                  v177 = v176 + 2;
                  if (v177 >= v168)
                    goto LABEL_310;
                  v178 = v175[1];
                  v179 = *v175;
                  v180 = *(unsigned __int8 *)(*v175 + 2);
                  v181 = *(unsigned __int8 *)(v178 + 2);
                  if (v180 != v181)
                  {
                    if (v180 >= v181)
                      goto LABEL_310;
LABEL_309:
                    ++v175;
                    v171 = v177;
                    goto LABEL_310;
                  }
                  if (*(_BYTE *)(*v175 + 2))
                  {
                    a5.n128_u64[0] = *(_QWORD *)(v179 + 104);
                    v182 = (double *)(v178 + 104);
                  }
                  else
                  {
                    a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v179 + 40) + 16);
                    v182 = *(double **)(**(_QWORD **)(v178 + 40) + 16);
                  }
                  if (a5.n128_f64[0] > *v182)
                    goto LABEL_309;
LABEL_310:
                  v183 = *v175;
                  *v175 = 0;
                  v184 = *v173;
                  *v173 = v183;
                  if (v184)
                  {
                    v185 = *(_QWORD *)(v184 + 72);
                    if (v185)
                    {
                      *(_QWORD *)(v184 + 80) = v185;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v184 + 96) + 40))(*(_QWORD *)(v184 + 96), v185, *(_QWORD *)(v184 + 88) - v185);
                    }
                    v186 = *(_QWORD *)(v184 + 40);
                    if (v186)
                    {
                      *(_QWORD *)(v184 + 48) = v186;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v184 + 64) + 40))(*(_QWORD *)(v184 + 64), v186, *(_QWORD *)(v184 + 56) - v186);
                    }
                    v187 = *(_QWORD *)(v184 + 8);
                    if (v187)
                    {
                      *(_QWORD *)(v184 + 16) = v187;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v184 + 32) + 40))(*(_QWORD *)(v184 + 32), v187, *(_QWORD *)(v184 + 24) - v187);
                    }
                    if ((v174 & 1) == 0
                    {
                      v188 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v188, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v184, 136);
                  }
                  v173 = v175;
                }
                while (v171 <= (uint64_t)((unint64_t)(v168 - 2) >> 1));
                if (v175 == --v169)
                {
                  v208 = *v175;
                  *v175 = v172;
                  if (!v208)
                    goto LABEL_299;
                  goto LABEL_372;
                }
                v189 = *v169;
                *v169 = 0;
                v190 = *v175;
                *v175 = v189;
                if (v190)
                {
                  v191 = *(_QWORD *)(v190 + 72);
                  if (v191)
                  {
                    *(_QWORD *)(v190 + 80) = v191;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 96) + 40))(*(_QWORD *)(v190 + 96), v191, *(_QWORD *)(v190 + 88) - v191);
                  }
                  v192 = *(_QWORD *)(v190 + 40);
                  if (v192)
                  {
                    *(_QWORD *)(v190 + 48) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 64) + 40))(*(_QWORD *)(v190 + 64), v192, *(_QWORD *)(v190 + 56) - v192);
                  }
                  v193 = *(_QWORD *)(v190 + 8);
                  if (v193)
                  {
                    *(_QWORD *)(v190 + 16) = v193;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 32) + 40))(*(_QWORD *)(v190 + 32), v193, *(_QWORD *)(v190 + 24) - v193);
                  }
                  if ((v194 & 1) == 0
                  {
                    v223 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v223, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v190, 136);
                }
                v195 = *v169;
                *v169 = v172;
                if (v195)
                {
                  v196 = *(_QWORD *)(v195 + 72);
                  if (v196)
                  {
                    *(_QWORD *)(v195 + 80) = v196;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v195 + 96) + 40))(*(_QWORD *)(v195 + 96), v196, *(_QWORD *)(v195 + 88) - v196);
                  }
                  v197 = *(_QWORD *)(v195 + 40);
                  if (v197)
                  {
                    *(_QWORD *)(v195 + 48) = v197;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v195 + 64) + 40))(*(_QWORD *)(v195 + 64), v197, *(_QWORD *)(v195 + 56) - v197);
                  }
                  v198 = *(_QWORD *)(v195 + 8);
                  if (v198)
                  {
                    *(_QWORD *)(v195 + 16) = v198;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v195 + 32) + 40))(*(_QWORD *)(v195 + 32), v198, *(_QWORD *)(v195 + 24) - v198);
                  }
                  if ((v199 & 1) == 0
                  {
                    v224 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v224, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v195, 136);
                }
                v200 = (char *)(v175 + 1) - (char *)v10;
                if (v200 < 9)
                  goto LABEL_299;
                v201 = (((unint64_t)v200 >> 3) - 2) >> 1;
                v202 = &v10[v201];
                v203 = *v202;
                v204 = *(unsigned __int8 *)(*v202 + 2);
                v205 = *v175;
                v206 = *(unsigned __int8 *)(*v175 + 2);
                if (v204 == v206)
                {
                  if (*(_BYTE *)(*v202 + 2))
                  {
                    a5.n128_u64[0] = *(_QWORD *)(v203 + 104);
                    v207 = (double *)(v205 + 104);
                  }
                  else
                  {
                    a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v203 + 40) + 16);
                    v207 = *(double **)(**(_QWORD **)(v205 + 40) + 16);
                  }
                  if (a5.n128_f64[0] > *v207)
                    goto LABEL_351;
                  goto LABEL_299;
                }
                if (v204 >= v206)
                  goto LABEL_299;
LABEL_351:
                *v175 = 0;
                v209 = *v202;
                while (1)
                {
                  v210 = v202;
                  *v202 = 0;
                  v211 = *v175;
                  *v175 = v209;
                  if (v211)
                  {
                    v212 = *(_QWORD *)(v211 + 72);
                    if (v212)
                    {
                      *(_QWORD *)(v211 + 80) = v212;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v211 + 96) + 40))(*(_QWORD *)(v211 + 96), v212, *(_QWORD *)(v211 + 88) - v212);
                    }
                    v213 = *(_QWORD *)(v211 + 40);
                    if (v213)
                    {
                      *(_QWORD *)(v211 + 48) = v213;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v211 + 64) + 40))(*(_QWORD *)(v211 + 64), v213, *(_QWORD *)(v211 + 56) - v213);
                    }
                    v214 = *(_QWORD *)(v211 + 8);
                    if (v214)
                    {
                      *(_QWORD *)(v211 + 16) = v214;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v211 + 32) + 40))(*(_QWORD *)(v211 + 32), v214, *(_QWORD *)(v211 + 24) - v214);
                    }
                    if ((v215 & 1) == 0
                    {
                      v219 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v219, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v211, 136);
                  }
                  if (!v201)
                    break;
                  v201 = (v201 - 1) >> 1;
                  v202 = &v10[v201];
                  v209 = *v202;
                  v216 = *(unsigned __int8 *)(*v202 + 2);
                  v217 = *(unsigned __int8 *)(v205 + 2);
                  if (v216 == v217)
                  {
                    if (*(_BYTE *)(*v202 + 2))
                    {
                      a5.n128_u64[0] = *(_QWORD *)(v209 + 104);
                      v218 = (double *)(v205 + 104);
                    }
                    else
                    {
                      a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v209 + 40) + 16);
                      v218 = *(double **)(**(_QWORD **)(v205 + 40) + 16);
                    }
                    v175 = v210;
                    if (a5.n128_f64[0] <= *v218)
                      break;
                  }
                  else
                  {
                    v175 = v210;
                    if (v216 >= v217)
                      break;
                  }
                }
                v208 = *v210;
                *v210 = v205;
                if (v208)
                {
LABEL_372:
                  v220 = *(_QWORD *)(v208 + 72);
                  if (v220)
                  {
                    *(_QWORD *)(v208 + 80) = v220;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v208 + 96) + 40))(*(_QWORD *)(v208 + 96), v220, *(_QWORD *)(v208 + 88) - v220);
                  }
                  v221 = *(_QWORD *)(v208 + 40);
                  if (v221)
                  {
                    *(_QWORD *)(v208 + 48) = v221;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v208 + 64) + 40))(*(_QWORD *)(v208 + 64), v221, *(_QWORD *)(v208 + 56) - v221);
                  }
                  v222 = *(_QWORD *)(v208 + 8);
                  if (v222)
                  {
                    *(_QWORD *)(v208 + 16) = v222;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v208 + 32) + 40))(*(_QWORD *)(v208 + 32), v222, *(_QWORD *)(v208 + 24) - v222);
                  }
                  if ((v170 & 1) == 0
                  {
                    v225 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v225, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v208, 136);
                }
LABEL_299:
                v161 = v168-- <= 2;
                if (v161)
                  return a5.n128_f64[0];
              }
            }
          }
        }
        v13 = &v10[v12 >> 1];
        v14 = a2 - 1;
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(&v10[v12 >> 1], v10, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(v10, &v10[v12 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(a1, v13 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(v248, v13 + 1, a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(v13 - 1, &v10[v12 >> 1], v13 + 1);
          v15 = *v10;
          *v10 = *v13;
          *v13 = v15;
        }
        --a3;
        v16 = *v10;
        if ((a4 & 1) == 0)
        {
          v18 = *(v10 - 1);
          v17 = *(unsigned __int8 *)(v18 + 2);
          v19 = *(unsigned __int8 *)(v16 + 2);
          if (v17 == v19)
          {
            if (*(_BYTE *)(v18 + 2))
            {
              a5.n128_u64[0] = *(_QWORD *)(v18 + 104);
              v20 = (double *)(v16 + 104);
            }
            else
            {
              a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v18 + 40) + 16);
              v20 = *(double **)(**(_QWORD **)(v16 + 40) + 16);
            }
            if (a5.n128_f64[0] > *v20)
              goto LABEL_19;
          }
          else if (v17 < v19)
          {
            v17 = *(unsigned __int8 *)(v16 + 2);
            goto LABEL_19;
          }
          *v10 = 0;
          v59 = *v14;
          v60 = *(unsigned __int8 *)(*v14 + 2);
          if (v19 == v60)
          {
            if (v19)
            {
              a5.n128_u64[0] = *(_QWORD *)(v16 + 104);
              v61 = (double *)(v59 + 104);
            }
            else
            {
              a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v16 + 40) + 16);
              v61 = *(double **)(**(_QWORD **)(v59 + 40) + 16);
            }
            if (a5.n128_f64[0] > *v61)
            {
              while (1)
              {
LABEL_111:
                v62 = *a1;
                v63 = *(unsigned __int8 *)(*a1 + 2);
                if (v19 == v63)
                {
                  if (v19)
                  {
                    a5.n128_u64[0] = *(_QWORD *)(v16 + 104);
                    v64 = (double *)(v62 + 104);
                  }
                  else
                  {
                    a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v16 + 40) + 16);
                    v64 = *(double **)(**(_QWORD **)(v62 + 40) + 16);
                  }
                  if (a5.n128_f64[0] > *v64)
                    goto LABEL_125;
                }
                else if (v19 < v63)
                {
                  goto LABEL_125;
                }
                ++a1;
              }
            }
          }
          else if (v19 < v60)
          {
            goto LABEL_111;
          }
          while (a1 < a2)
          {
            v65 = *a1;
            v66 = *(unsigned __int8 *)(*a1 + 2);
            if (v19 == v66)
            {
              if (v19)
              {
                a5.n128_u64[0] = *(_QWORD *)(v16 + 104);
                v67 = (double *)(v65 + 104);
              }
              else
              {
                a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v16 + 40) + 16);
                v67 = *(double **)(**(_QWORD **)(v65 + 40) + 16);
              }
              if (a5.n128_f64[0] > *v67)
                break;
            }
            else if (v19 < v66)
            {
              break;
            }
            ++a1;
          }
LABEL_125:
          j = a2;
          if (a1 < a2)
          {
            for (j = a2 - 1; ; --j)
            {
              if (v19 == v60)
              {
                if (v19)
                {
                  a5.n128_u64[0] = *(_QWORD *)(v16 + 104);
                  v70 = (double *)(v59 + 104);
                }
                else
                {
                  a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v16 + 40) + 16);
                  v70 = *(double **)(**(_QWORD **)(v59 + 40) + 16);
                }
                if (a5.n128_f64[0] <= *v70)
                  break;
              }
              else if (v19 >= v60)
              {
                break;
              }
              v69 = *(j - 1);
              v59 = v69;
              v60 = *(unsigned __int8 *)(v69 + 2);
            }
          }
          if (a1 < j)
          {
            v71 = *a1;
            v72 = *j;
            do
            {
              *a1++ = v72;
              *j = v71;
              while (1)
              {
                v71 = *a1;
                v73 = *(unsigned __int8 *)(*a1 + 2);
                if (v19 == v73)
                  break;
                if (v19 < v73)
                  goto LABEL_147;
LABEL_139:
                ++a1;
              }
              if (v19)
              {
                a5.n128_u64[0] = *(_QWORD *)(v16 + 104);
                v74 = (double *)(v71 + 104);
              }
              else
              {
                a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v16 + 40) + 16);
                v74 = *(double **)(**(_QWORD **)(v71 + 40) + 16);
              }
              if (a5.n128_f64[0] <= *v74)
                goto LABEL_139;
              do
              {
LABEL_147:
                while (1)
                {
                  v75 = *--j;
                  v72 = v75;
                  v76 = *(unsigned __int8 *)(v75 + 2);
                  if (v19 == v76)
                    break;
                  if (v19 >= v76)
                    goto LABEL_136;
                }
                if (v19)
                {
                  a5.n128_u64[0] = *(_QWORD *)(v16 + 104);
                  v77 = (double *)(v72 + 104);
                }
                else
                {
                  a5.n128_u64[0] = **(_QWORD **)(**(_QWORD **)(v16 + 40) + 16);
                  v77 = *(double **)(**(_QWORD **)(v72 + 40) + 16);
                }
              }
              while (a5.n128_f64[0] > *v77);
LABEL_136:
              ;
            }
            while (a1 < j);
          }
          v78 = v8;
          v79 = a1 - 1;
          if (a1 - 1 != v10)
          {
            v80 = *v79;
            *v79 = 0;
            v81 = *v10;
            *v10 = v80;
            if (v81)
            {
              v82 = *(_QWORD *)(v81 + 72);
              if (v82)
              {
                *(_QWORD *)(v81 + 80) = v82;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v81 + 96) + 40))(*(_QWORD *)(v81 + 96), v82, *(_QWORD *)(v81 + 88) - v82);
              }
              v83 = *(_QWORD *)(v81 + 40);
              if (v83)
              {
                *(_QWORD *)(v81 + 48) = v83;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v81 + 64) + 40))(*(_QWORD *)(v81 + 64), v83, *(_QWORD *)(v81 + 56) - v83);
              }
              v84 = *(_QWORD *)(v81 + 8);
              if (v84)
              {
                *(_QWORD *)(v81 + 16) = v84;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v81 + 32) + 40))(*(_QWORD *)(v81 + 32), v84, *(_QWORD *)(v81 + 24) - v84);
              }
              {
                v92 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v92, v78, 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v81, 136);
            }
          }
          a4 = 0;
          v86 = *v79;
          *v79 = v16;
          v8 = v78;
          if (v86)
          {
            v87 = *(_QWORD *)(v86 + 72);
            if (v87)
            {
              *(_QWORD *)(v86 + 80) = v87;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v86 + 96) + 40))(*(_QWORD *)(v86 + 96), v87, *(_QWORD *)(v86 + 88) - v87);
            }
            v88 = *(_QWORD *)(v86 + 40);
            if (v88)
            {
              *(_QWORD *)(v86 + 48) = v88;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v86 + 64) + 40))(*(_QWORD *)(v86 + 64), v88, *(_QWORD *)(v86 + 56) - v88);
            }
            v89 = *(_QWORD *)(v86 + 8);
            if (v89)
            {
              *(_QWORD *)(v86 + 16) = v89;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v86 + 32) + 40))(*(_QWORD *)(v86 + 32), v89, *(_QWORD *)(v86 + 24) - v89);
            }
            {
              v91 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v91, v78, 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v86, 136);
            a4 = 0;
            v8 = v78;
          }
          continue;
        }
        v17 = *(unsigned __int8 *)(v16 + 2);
LABEL_19:
        *v10 = 0;
        for (k = a1; ; ++k)
        {
          v22 = *k;
          v23 = *(unsigned __int8 *)(*k + 2);
          if (v23 == v17)
            break;
          if (v23 >= v17)
            goto LABEL_27;
LABEL_21:
          ;
        }
        if (v17)
        {
          v24 = *(double *)(v22 + 104);
          v25 = (double *)(v16 + 104);
        }
        else
        {
          v24 = **(double **)(**(_QWORD **)(v22 + 40) + 16);
          v25 = *(double **)(**(_QWORD **)(v16 + 40) + 16);
        }
        if (v24 > *v25)
          goto LABEL_21;
LABEL_27:
        v26 = k - 1;
        if (k - 1 != v10)
        {
          for (m = a2 - 1; ; --m)
          {
            v28 = *m;
            v29 = *(unsigned __int8 *)(*m + 2);
            if (v29 == v17)
            {
              if (v17)
              {
                v30 = *(double *)(v28 + 104);
                v31 = (double *)(v16 + 104);
              }
              else
              {
                v30 = **(double **)(**(_QWORD **)(v28 + 40) + 16);
                v31 = *(double **)(**(_QWORD **)(v16 + 40) + 16);
              }
              if (v30 > *v31)
                goto LABEL_49;
            }
            else if (v29 < v17)
            {
              goto LABEL_49;
            }
          }
        }
        m = a2;
        if (k < a2)
        {
          for (m = a2 - 1; ; --m)
          {
            v32 = *m;
            v33 = *(unsigned __int8 *)(*m + 2);
            if (v33 == v17)
            {
              if (v17)
              {
                v34 = *(double *)(v32 + 104);
                v35 = (double *)(v16 + 104);
                if (k >= m)
                  break;
              }
              else
              {
                v34 = **(double **)(**(_QWORD **)(v32 + 40) + 16);
                v35 = *(double **)(**(_QWORD **)(v16 + 40) + 16);
                if (k >= m)
                  break;
              }
              if (v34 > *v35)
                break;
            }
            else if (k >= m || v33 < v17)
            {
              break;
            }
          }
        }
LABEL_49:
        if (k >= m)
          goto LABEL_72;
        v36 = *m;
        v37 = k;
        v38 = m;
LABEL_51:
        while (2)
        {
          *v37++ = v36;
          *v38 = v22;
          while (2)
          {
            v22 = *v37;
            v39 = *(unsigned __int8 *)(*v37 + 2);
            if (v39 != v17)
            {
              if (v39 >= v17)
                break;
              goto LABEL_53;
            }
            if (v17)
            {
              v40 = (double *)(v22 + 104);
              v41 = (double *)(v16 + 104);
            }
            else
            {
              v40 = *(double **)(**(_QWORD **)(v22 + 40) + 16);
              v41 = *(double **)(**(_QWORD **)(v16 + 40) + 16);
            }
            if (*v40 > *v41)
            {
LABEL_53:
              ++v37;
              continue;
            }
            break;
          }
          v26 = v37 - 1;
          while (2)
          {
            --v38;
            while (1)
            {
              v36 = *v38;
              v42 = *(unsigned __int8 *)(*v38 + 2);
              if (v42 == v17)
                break;
              --v38;
              if (v42 < v17)
              {
                if (v37 < ++v38)
                  goto LABEL_51;
                goto LABEL_72;
              }
            }
            if (v17)
            {
              v43 = *(double *)(v36 + 104);
              v44 = (double *)(v16 + 104);
            }
            else
            {
              v43 = **(double **)(**(_QWORD **)(v36 + 40) + 16);
              v44 = *(double **)(**(_QWORD **)(v16 + 40) + 16);
            }
            if (v43 <= *v44)
              continue;
            break;
          }
          if (v37 < v38)
            continue;
          break;
        }
LABEL_72:
        if (v26 != v10)
        {
          v45 = *v26;
          *v26 = 0;
          v46 = *v10;
          *v10 = v45;
          if (v46)
          {
            v47 = *(_QWORD *)(v46 + 72);
            if (v47)
            {
              *(_QWORD *)(v46 + 80) = v47;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v46 + 96) + 40))(*(_QWORD *)(v46 + 96), v47, *(_QWORD *)(v46 + 88) - v47);
            }
            v48 = *(_QWORD *)(v46 + 40);
            if (v48)
            {
              *(_QWORD *)(v46 + 48) = v48;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v46 + 64) + 40))(*(_QWORD *)(v46 + 64), v48, *(_QWORD *)(v46 + 56) - v48);
            }
            v49 = *(_QWORD *)(v46 + 8);
            if (v49)
            {
              *(_QWORD *)(v46 + 16) = v49;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v46 + 32) + 40))(*(_QWORD *)(v46 + 32), v49, *(_QWORD *)(v46 + 24) - v49);
            }
            {
              v58 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v58, v8, 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v46, 136);
          }
        }
        v51 = *v26;
        *v26 = v16;
        if (v51)
        {
          v52 = *(_QWORD *)(v51 + 72);
          if (v52)
          {
            *(_QWORD *)(v51 + 80) = v52;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v51 + 96) + 40))(*(_QWORD *)(v51 + 96), v52, *(_QWORD *)(v51 + 88) - v52);
          }
          v53 = *(_QWORD *)(v51 + 40);
          if (v53)
          {
            *(_QWORD *)(v51 + 48) = v53;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v51 + 64) + 40))(*(_QWORD *)(v51 + 64), v53, *(_QWORD *)(v51 + 56) - v53);
          }
          v54 = *(_QWORD *)(v51 + 8);
          if (v54)
          {
            *(_QWORD *)(v51 + 16) = v54;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v51 + 32) + 40))(*(_QWORD *)(v51 + 32), v54, *(_QWORD *)(v51 + 24) - v54);
          }
          {
            v57 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v57, v8, 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v51, 136);
        }
        if (k < m)
        {
LABEL_100:
          std::__introsort<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *,false>(v10, v26, a3, a4 & 1);
          a4 = 0;
          a1 = v26 + 1;
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(v10, v26);
        v9 = v26 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(v26 + 1, a2))
        {
          if (v56)
            goto LABEL_3;
          goto LABEL_100;
        }
        a2 = v26;
        if (!v56)
          goto LABEL_4;
        return a5.n128_f64[0];
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  double v7;
  double *v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  double *v12;
  uint64_t v13;
  unsigned int v14;
  double v15;
  double *v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  double *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  double *v26;

  v3 = *a2;
  v4 = *(unsigned __int8 *)(*a2 + 2);
  v5 = *result;
  v6 = *(unsigned __int8 *)(*result + 2);
  if (v4 == v6)
  {
    if (*(_BYTE *)(*a2 + 2))
    {
      v7 = *(double *)(v3 + 104);
      v8 = (double *)(v5 + 104);
    }
    else
    {
      v7 = **(double **)(**(_QWORD **)(v3 + 40) + 16);
      v8 = *(double **)(**(_QWORD **)(v5 + 40) + 16);
    }
    if (v7 <= *v8)
      goto LABEL_12;
LABEL_5:
    v9 = *a3;
    v10 = *(unsigned __int8 *)(*a3 + 2);
    if (v10 == v4)
    {
      if (*(_BYTE *)(*a2 + 2))
      {
        v11 = *(double *)(v9 + 104);
        v12 = (double *)(v3 + 104);
      }
      else
      {
        v11 = **(double **)(**(_QWORD **)(v9 + 40) + 16);
        v12 = *(double **)(**(_QWORD **)(v3 + 40) + 16);
      }
      if (v11 <= *v12)
      {
LABEL_19:
        *result = v3;
        *a2 = v5;
        v17 = *a3;
        v18 = *(unsigned __int8 *)(*a3 + 2);
        if (v18 == v6)
        {
          if (v6)
          {
            v19 = *(double *)(v17 + 104);
            v20 = (double *)(v5 + 104);
          }
          else
          {
            v19 = **(double **)(**(_QWORD **)(v17 + 40) + 16);
            v20 = *(double **)(**(_QWORD **)(v5 + 40) + 16);
          }
          if (v19 <= *v20)
            return result;
        }
        else if (v18 >= v6)
        {
          return result;
        }
        *a2 = v17;
        *a3 = v5;
        return result;
      }
    }
    else if (v10 >= v4)
    {
      goto LABEL_19;
    }
    *result = v9;
    *a3 = v5;
    return result;
  }
  if (v4 < v6)
    goto LABEL_5;
LABEL_12:
  v13 = *a3;
  v14 = *(unsigned __int8 *)(*a3 + 2);
  if (v14 == v4)
  {
    if (*(_BYTE *)(*a2 + 2))
    {
      v15 = *(double *)(v13 + 104);
      v16 = (double *)(v3 + 104);
    }
    else
    {
      v15 = **(double **)(**(_QWORD **)(v13 + 40) + 16);
      v16 = *(double **)(**(_QWORD **)(v3 + 40) + 16);
    }
    if (v15 <= *v16)
      return result;
  }
  else if (v14 >= v4)
  {
    return result;
  }
  *a2 = v13;
  *a3 = v3;
  v21 = *a2;
  v22 = *(unsigned __int8 *)(*a2 + 2);
  v23 = *result;
  v24 = *(unsigned __int8 *)(*result + 2);
  if (v22 == v24)
  {
    if (*(_BYTE *)(*a2 + 2))
    {
      v25 = *(double *)(v21 + 104);
      v26 = (double *)(v23 + 104);
    }
    else
    {
      v25 = **(double **)(**(_QWORD **)(v21 + 40) + 16);
      v26 = *(double **)(**(_QWORD **)(v23 + 40) + 16);
    }
    if (v25 > *v26)
      goto LABEL_36;
  }
  else if (v22 < v24)
  {
LABEL_36:
    *result = v21;
    *a2 = v23;
  }
  return result;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  double result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  double *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  double *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  double *v23;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *(unsigned __int8 *)(*a4 + 2);
  v11 = *a3;
  v12 = *(unsigned __int8 *)(*a3 + 2);
  if (v10 == v12)
  {
    if (*(_BYTE *)(*a4 + 2))
    {
      result = *(double *)(v9 + 104);
      v13 = (double *)(v11 + 104);
    }
    else
    {
      result = **(double **)(**(_QWORD **)(v9 + 40) + 16);
      v13 = *(double **)(**(_QWORD **)(v11 + 40) + 16);
    }
    if (result <= *v13)
      return result;
  }
  else if (v10 >= v12)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v11;
  v14 = *a3;
  v15 = *(unsigned __int8 *)(*a3 + 2);
  v16 = *a2;
  v17 = *(unsigned __int8 *)(*a2 + 2);
  if (v15 != v17)
  {
    if (v15 >= v17)
      return result;
LABEL_15:
    *a2 = v14;
    *a3 = v16;
    v19 = *a2;
    v20 = *(unsigned __int8 *)(*a2 + 2);
    v21 = *a1;
    v22 = *(unsigned __int8 *)(*a1 + 2);
    if (v20 == v22)
    {
      if (*(_BYTE *)(*a2 + 2))
      {
        result = *(double *)(v19 + 104);
        v23 = (double *)(v21 + 104);
      }
      else
      {
        result = **(double **)(**(_QWORD **)(v19 + 40) + 16);
        v23 = *(double **)(**(_QWORD **)(v21 + 40) + 16);
      }
      if (result <= *v23)
        return result;
    }
    else if (v20 >= v22)
    {
      return result;
    }
    *a1 = v19;
    *a2 = v21;
    return result;
  }
  if (*(_BYTE *)(*a3 + 2))
  {
    result = *(double *)(v14 + 104);
    v18 = (double *)(v16 + 104);
  }
  else
  {
    result = **(double **)(**(_QWORD **)(v14 + 40) + 16);
    v18 = *(double **)(**(_QWORD **)(v16 + 40) + 16);
  }
  if (result > *v18)
    goto LABEL_15;
  return result;
}

double std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  double result;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  double *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  double *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  double *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  double *v30;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(unsigned __int8 *)(*a5 + 2);
  v13 = *a4;
  v14 = *(unsigned __int8 *)(*a4 + 2);
  if (v12 == v14)
  {
    if (*(_BYTE *)(*a5 + 2))
    {
      result = *(double *)(v11 + 104);
      v15 = (double *)(v13 + 104);
    }
    else
    {
      result = **(double **)(**(_QWORD **)(v11 + 40) + 16);
      v15 = *(double **)(**(_QWORD **)(v13 + 40) + 16);
    }
    if (result <= *v15)
      return result;
  }
  else if (v12 >= v14)
  {
    return result;
  }
  *a4 = v11;
  *a5 = v13;
  v16 = *a4;
  v17 = *(unsigned __int8 *)(*a4 + 2);
  v18 = *a3;
  v19 = *(unsigned __int8 *)(*a3 + 2);
  if (v17 == v19)
  {
    if (*(_BYTE *)(*a4 + 2))
    {
      result = *(double *)(v16 + 104);
      v20 = (double *)(v18 + 104);
    }
    else
    {
      result = **(double **)(**(_QWORD **)(v16 + 40) + 16);
      v20 = *(double **)(**(_QWORD **)(v18 + 40) + 16);
    }
    if (result <= *v20)
      return result;
  }
  else if (v17 >= v19)
  {
    return result;
  }
  *a3 = v16;
  *a4 = v18;
  v21 = *a3;
  v22 = *(unsigned __int8 *)(*a3 + 2);
  v23 = *a2;
  v24 = *(unsigned __int8 *)(*a2 + 2);
  if (v22 != v24)
  {
    if (v22 >= v24)
      return result;
LABEL_22:
    *a2 = v21;
    *a3 = v23;
    v26 = *a2;
    v27 = *(unsigned __int8 *)(*a2 + 2);
    v28 = *a1;
    v29 = *(unsigned __int8 *)(*a1 + 2);
    if (v27 == v29)
    {
      if (*(_BYTE *)(*a2 + 2))
      {
        result = *(double *)(v26 + 104);
        v30 = (double *)(v28 + 104);
      }
      else
      {
        result = **(double **)(**(_QWORD **)(v26 + 40) + 16);
        v30 = *(double **)(**(_QWORD **)(v28 + 40) + 16);
      }
      if (result <= *v30)
        return result;
    }
    else if (v27 >= v29)
    {
      return result;
    }
    *a1 = v26;
    *a2 = v28;
    return result;
  }
  if (*(_BYTE *)(*a3 + 2))
  {
    result = *(double *)(v21 + 104);
    v25 = (double *)(v23 + 104);
  }
  else
  {
    result = **(double **)(**(_QWORD **)(v21 + 40) + 16);
    v25 = *(double **)(**(_QWORD **)(v23 + 40) + 16);
  }
  if (result > *v25)
    goto LABEL_22;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  double *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  double v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned int v30;
  unsigned int v31;
  double v32;
  double *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;

  v2 = a2;
  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *(unsigned __int8 *)(v6 + 2);
      v8 = *a1;
      v9 = *(unsigned __int8 *)(*a1 + 2);
      if (v7 != v9)
      {
        if (v7 >= v9)
          return result;
        goto LABEL_59;
      }
      if (*(_BYTE *)(v6 + 2))
      {
        v10 = *(double *)(v6 + 104);
        v11 = (double *)(v8 + 104);
      }
      else
      {
        v10 = **(double **)(**(_QWORD **)(v6 + 40) + 16);
        v11 = *(double **)(**(_QWORD **)(v8 + 40) + 16);
      }
      if (v10 > *v11)
      {
LABEL_59:
        *a1 = v6;
        *(a2 - 1) = v8;
        return result;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v12 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::createLines(std::shared_ptr<md::LabelLineStore const> const&)::$_0 &,std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>> *>(a1, a1 + 1, a1 + 2);
      v13 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v14 = 0;
      v15 = 0;
      v41 = v2;
      while (2)
      {
        v17 = *v13;
        v18 = *(unsigned __int8 *)(*v13 + 2);
        v19 = *v12;
        v20 = *(unsigned __int8 *)(*v12 + 2);
        if (v18 == v20)
        {
          if (*(_BYTE *)(*v13 + 2))
          {
            v21 = *(double *)(v17 + 104);
            v22 = (double *)(v19 + 104);
          }
          else
          {
            v21 = **(double **)(**(_QWORD **)(v17 + 40) + 16);
            v22 = *(double **)(**(_QWORD **)(v19 + 40) + 16);
          }
          if (v21 <= *v22)
            goto LABEL_10;
        }
        else if (v18 >= v20)
        {
          goto LABEL_10;
        }
        v23 = 0;
        *v13 = 0;
        v24 = v14;
        while (2)
        {
          v25 = (char *)a1 + v24;
          *((_QWORD *)v25 + 2) = 0;
          *((_QWORD *)v25 + 3) = v19;
          if (v23)
          {
            v26 = *(_QWORD *)(v23 + 72);
            if (v26)
            {
              *(_QWORD *)(v23 + 80) = v26;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 96) + 40))(*(_QWORD *)(v23 + 96), v26, *(_QWORD *)(v23 + 88) - v26);
            }
            v27 = *(_QWORD *)(v23 + 40);
            if (v27)
            {
              *(_QWORD *)(v23 + 48) = v27;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 64) + 40))(*(_QWORD *)(v23 + 64), v27, *(_QWORD *)(v23 + 56) - v27);
            }
            v28 = *(_QWORD *)(v23 + 8);
            if (v28)
            {
              *(_QWORD *)(v23 + 16) = v28;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 32) + 40))(*(_QWORD *)(v23 + 32), v28, *(_QWORD *)(v23 + 24) - v28);
            }
            {
              v34 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v23, 136);
          }
          if (v24 == -16)
          {
            v35 = a1;
            goto LABEL_41;
          }
          v30 = *(unsigned __int8 *)(v17 + 2);
          v19 = *(uint64_t *)((char *)a1 + v24 + 8);
          v31 = *(unsigned __int8 *)(v19 + 2);
          if (v30 != v31)
          {
            if (v30 >= v31)
              break;
            goto LABEL_20;
          }
          if (*(_BYTE *)(v17 + 2))
          {
            v32 = *(double *)(v17 + 104);
            v33 = (double *)(v19 + 104);
          }
          else
          {
            v32 = **(double **)(**(_QWORD **)(v17 + 40) + 16);
            v33 = *(double **)(**(_QWORD **)(v19 + 40) + 16);
          }
          if (v32 > *v33)
          {
LABEL_20:
            v23 = *((_QWORD *)v25 + 2);
            v24 -= 8;
            continue;
          }
          break;
        }
        v35 = (uint64_t *)((char *)a1 + v24 + 16);
LABEL_41:
        v36 = *v35;
        *v35 = v17;
        v2 = v41;
        if (v36)
        {
          v37 = *(_QWORD *)(v36 + 72);
          if (v37)
          {
            *(_QWORD *)(v36 + 80) = v37;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v36 + 96) + 40))(*(_QWORD *)(v36 + 96), v37, *(_QWORD *)(v36 + 88) - v37);
          }
          v38 = *(_QWORD *)(v36 + 40);
          if (v38)
          {
            *(_QWORD *)(v36 + 48) = v38;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v36 + 64) + 40))(*(_QWORD *)(v36 + 64), v38, *(_QWORD *)(v36 + 56) - v38);
          }
          v39 = *(_QWORD *)(v36 + 8);
          if (v39)
          {
            *(_QWORD *)(v36 + 16) = v39;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v36 + 32) + 40))(*(_QWORD *)(v36 + 32), v39, *(_QWORD *)(v36 + 24) - v39);
          }
          {
            v40 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v40, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v36, 136);
        }
        if (++v15 != 8)
        {
LABEL_10:
          v12 = v13;
          v14 += 8;
          if (++v13 == v2)
            return 1;
          continue;
        }
        return v13 + 1 == v41;
      }
  }
}

uint64_t *std::unique_ptr<md::LabelLine,mdm::TypeDeleter<md::LabelLine>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;
  malloc_zone_t *zone;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    if (v3)
    {
      *(_QWORD *)(v2 + 80) = v3;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 96) + 40))(*(_QWORD *)(v2 + 96), v3, *(_QWORD *)(v2 + 88) - v3);
    }
    v4 = *(_QWORD *)(v2 + 40);
    if (v4)
    {
      *(_QWORD *)(v2 + 48) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 64) + 40))(*(_QWORD *)(v2 + 64), v4, *(_QWORD *)(v2 + 56) - v4);
    }
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
    {
      *(_QWORD *)(v2 + 16) = v5;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 32) + 40))(*(_QWORD *)(v2 + 32), v5, *(_QWORD *)(v2 + 24) - v5);
    }
    {
      v8 = operator new();
      *(_QWORD *)(v8 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v8 + 24) = "VectorKitLabels";
      *(_OWORD *)(v8 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v8 = &off_1E42B5668;
      *(_QWORD *)(v8 + 8) = "VectorKitLabels";
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 120) = 0u;
      *(_OWORD *)(v8 + 136) = 0u;
      *(_OWORD *)(v8 + 152) = 0u;
      *(_OWORD *)(v8 + 168) = 0u;
      *(_OWORD *)(v8 + 184) = 0u;
      *(_OWORD *)(v8 + 200) = 0u;
      *(_OWORD *)(v8 + 216) = 0u;
      *(_OWORD *)(v8 + 232) = 0u;
      *(_QWORD *)(v8 + 248) = 0;
      *(_OWORD *)(v8 + 56) = 0u;
      v9 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v8 + 56), 0);
      if ((_DWORD)v9)
        geo::read_write_lock::logFailure(v9, (uint64_t)"initialization", v10);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v8 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v8 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v8;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v2, 136);
  }
  return a1;
}

uint64_t *std::vector<md::SegmentConnectionPoint,geo::StdAllocator<md::SegmentConnectionPoint,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), v5, *(_QWORD *)(v3 - 16) - v5);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

double std::__introsort<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*,false>(_WORD *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  _WORD *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  unint64_t j;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  BOOL v68;
  uint64_t v69;
  _WORD *v70;
  char *v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  int64_t v82;
  _WORD *v83;
  int64_t v84;
  uint64_t v85;
  _WORD *v86;
  uint64_t v87;
  uint64_t v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  _WORD *v105;
  uint64_t v106;
  _WORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _WORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  __int16 v121;
  uint64_t v122;
  unint64_t v123;
  _WORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _WORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  _WORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(_WORD *a1, _WORD *a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  __n128 result;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = *(unsigned __int8 *)(v3 + 60);
  if ((*(_BYTE *)(v3 + 60) != 0) == (*(_BYTE *)(v4 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v3 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24))
      goto LABEL_3;
LABEL_7:
    v8 = v5 != 0;
    v9 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    if (v8 == (*(_BYTE *)(v9 + 60) != 0))
    {
      if (*(_QWORD *)(*(_QWORD *)(v9 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v3 + 16) + 24))
        goto LABEL_9;
    }
    else if (*(_BYTE *)(v9 + 60))
    {
LABEL_9:
      result = *(__n128 *)a1;
      v20 = *(_OWORD *)a1;
      v11 = a2[4];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[4] = v11;
      *(_QWORD *)a2 = v20;
      a2[4] = WORD4(v20);
      v12 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v13 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if ((*(_BYTE *)(v12 + 60) != 0) == (*(_BYTE *)(v13 + 60) != 0))
      {
        if (*(_QWORD *)(*(_QWORD *)(v12 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v13 + 16) + 24))
          return result;
      }
      else if (*(_BYTE *)(v12 + 60))
      {
        return result;
      }
      result = *(__n128 *)a2;
      v22 = *(_OWORD *)a2;
      v18 = a3[4];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[4] = v18;
LABEL_20:
      *(_QWORD *)a3 = v22;
      a3[4] = WORD4(v22);
      return result;
    }
    result = *(__n128 *)a1;
    v22 = *(_OWORD *)a1;
    v17 = a3[4];
    *(_QWORD *)a1 = *(_QWORD *)a3;
    a1[4] = v17;
    goto LABEL_20;
  }
  if (!*(_BYTE *)(v3 + 60))
    goto LABEL_7;
LABEL_3:
  v6 = v5 != 0;
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if (v6 == (*(_BYTE *)(v7 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v7 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v3 + 16) + 24))
      return result;
  }
  else if (*(_BYTE *)(v7 + 60))
  {
    return result;
  }
  result = *(__n128 *)a2;
  v21 = *(_OWORD *)a2;
  v14 = a3[4];
  *(_QWORD *)a2 = *(_QWORD *)a3;
  a2[4] = v14;
  *(_QWORD *)a3 = v21;
  a3[4] = WORD4(v21);
  v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((*(_BYTE *)(v15 + 60) != 0) == (*(_BYTE *)(v16 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v15 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v16 + 16) + 24))
    {
LABEL_22:
      result = *(__n128 *)a1;
      v23 = *(_OWORD *)a1;
      v19 = a2[4];
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[4] = v19;
      *(_QWORD *)a2 = v23;
      a2[4] = WORD4(v23);
    }
  }
  else if (!*(_BYTE *)(v15 + 60))
  {
    goto LABEL_22;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(a1, a2, a3).n128_u64[0];
  v9 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if ((*(_BYTE *)(v9 + 60) != 0) == (*(_BYTE *)(v10 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v9 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v10 + 16) + 24))
      return result;
  }
  else if (*(_BYTE *)(v9 + 60))
  {
    return result;
  }
  result = *(__n128 *)a3;
  v18 = *(_OWORD *)a3;
  v11 = a4[4];
  *(_QWORD *)a3 = *(_QWORD *)a4;
  a3[4] = v11;
  *(_QWORD *)a4 = v18;
  a4[4] = WORD4(v18);
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v13 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((*(_BYTE *)(v12 + 60) != 0) == (*(_BYTE *)(v13 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v12 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v13 + 16) + 24))
      return result;
  }
  else if (*(_BYTE *)(v12 + 60))
  {
    return result;
  }
  result = *(__n128 *)a2;
  v19 = *(_OWORD *)a2;
  v14 = a3[4];
  *(_QWORD *)a2 = *(_QWORD *)a3;
  a2[4] = v14;
  *(_QWORD *)a3 = v19;
  a3[4] = WORD4(v19);
  v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((*(_BYTE *)(v15 + 60) != 0) == (*(_BYTE *)(v16 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v15 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v16 + 16) + 24))
      return result;
  }
  else if (*(_BYTE *)(v15 + 60))
  {
    return result;
  }
  result = *(__n128 *)a1;
  v20 = *(_OWORD *)a1;
  v17 = a2[4];
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1[4] = v17;
  *(_QWORD *)a2 = v20;
  a2[4] = WORD4(v20);
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*,0>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(a1, a2, a3, a4).n128_u64[0];
  v11 = *(_QWORD *)(*(_QWORD *)a5 + 8);
  v12 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  if ((*(_BYTE *)(v11 + 60) != 0) == (*(_BYTE *)(v12 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v11 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v12 + 16) + 24))
      return result;
  }
  else if (*(_BYTE *)(v11 + 60))
  {
    return result;
  }
  result = *(__n128 *)a4;
  v23 = *(_OWORD *)a4;
  v13 = a5[4];
  *(_QWORD *)a4 = *(_QWORD *)a5;
  a4[4] = v13;
  *(_QWORD *)a5 = v23;
  a5[4] = WORD4(v23);
  v14 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  v15 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if ((*(_BYTE *)(v14 + 60) != 0) == (*(_BYTE *)(v15 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v14 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v15 + 16) + 24))
      return result;
  }
  else if (*(_BYTE *)(v14 + 60))
  {
    return result;
  }
  result = *(__n128 *)a3;
  v24 = *(_OWORD *)a3;
  v16 = a4[4];
  *(_QWORD *)a3 = *(_QWORD *)a4;
  a3[4] = v16;
  *(_QWORD *)a4 = v24;
  a4[4] = WORD4(v24);
  v17 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v18 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((*(_BYTE *)(v17 + 60) != 0) == (*(_BYTE *)(v18 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v17 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v18 + 16) + 24))
      return result;
  }
  else if (*(_BYTE *)(v17 + 60))
  {
    return result;
  }
  result = *(__n128 *)a2;
  v25 = *(_OWORD *)a2;
  v19 = a3[4];
  *(_QWORD *)a2 = *(_QWORD *)a3;
  a2[4] = v19;
  *(_QWORD *)a3 = v25;
  a3[4] = WORD4(v25);
  v20 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v21 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((*(_BYTE *)(v20 + 60) != 0) == (*(_BYTE *)(v21 + 60) != 0))
  {
    if (*(_QWORD *)(*(_QWORD *)(v20 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v21 + 16) + 24))
      return result;
  }
  else if (*(_BYTE *)(v20 + 60))
  {
    return result;
  }
  result = *(__n128 *)a1;
  v26 = *(_OWORD *)a1;
  v22 = a2[4];
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1[4] = v22;
  *(_QWORD *)a2 = v26;
  a2[4] = WORD4(v26);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(char *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int128 v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 16;
      v7 = *(_QWORD *)(*((_QWORD *)a2 - 2) + 8);
      v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      if ((*(_BYTE *)(v7 + 60) != 0) == (*(_BYTE *)(v8 + 60) != 0))
      {
        if (*(_QWORD *)(*(_QWORD *)(v7 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v8 + 16) + 24))
          return result;
      }
      else if (*(_BYTE *)(v7 + 60))
      {
        return result;
      }
      v22 = *(_OWORD *)a1;
      v21 = *((_WORD *)a2 - 4);
      *(_QWORD *)a1 = *(_QWORD *)v6;
      *((_WORD *)a1 + 4) = v21;
      *(_QWORD *)v6 = v22;
      *((_WORD *)a2 - 4) = WORD4(v22);
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(a1, (_WORD *)a1 + 8, (_WORD *)a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(a1, (_WORD *)a1 + 8, (_WORD *)a1 + 16, (_WORD *)a2 - 8);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*,0>(a1, (_WORD *)a1 + 8, (_WORD *)a1 + 16, (_WORD *)a1 + 24, (_WORD *)a2 - 8);
      return 1;
    default:
      v9 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(a1, (_WORD *)a1 + 8, (_WORD *)a1 + 16);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (2)
  {
    v14 = *(_QWORD *)v10;
    v15 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    v16 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    if ((*(_BYTE *)(v15 + 60) != 0) == (*(_BYTE *)(v16 + 60) != 0))
    {
      if (*(_QWORD *)(*(_QWORD *)(v15 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v16 + 16) + 24))
        goto LABEL_9;
    }
    else if (*(_BYTE *)(v15 + 60))
    {
      goto LABEL_9;
    }
    v17 = *((_WORD *)v10 + 4);
    *(_QWORD *)v10 = *(_QWORD *)v9;
    *((_WORD *)v10 + 4) = *((_WORD *)v9 + 4);
    v13 = (uint64_t)a1;
    if (v9 == a1)
      goto LABEL_8;
    v18 = v11;
    while (1)
    {
      v19 = *(_QWORD *)(v14 + 8);
      v20 = *(_QWORD *)(*(_QWORD *)&a1[v18 + 16] + 8);
      if ((*(_BYTE *)(v19 + 60) != 0) == (*(_BYTE *)(v20 + 60) != 0))
        break;
      if (*(_BYTE *)(v19 + 60))
      {
        v13 = (uint64_t)v9;
        goto LABEL_8;
      }
LABEL_17:
      v9 -= 16;
      *(_QWORD *)&a1[v18 + 32] = *(_QWORD *)&a1[v18 + 16];
      *(_WORD *)&a1[v18 + 40] = *(_WORD *)&a1[v18 + 24];
      v18 -= 16;
      if (v18 == -32)
      {
        v13 = (uint64_t)a1;
        goto LABEL_8;
      }
    }
    if (*(_QWORD *)(*(_QWORD *)(v19 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v20 + 16) + 24))
      goto LABEL_17;
    v13 = (uint64_t)&a1[v18 + 32];
LABEL_8:
    *(_QWORD *)v13 = v14;
    *(_WORD *)(v13 + 8) = v17;
    if (++v12 == 8)
      return v10 + 16 == a2;
LABEL_9:
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 != a2)
      continue;
    return 1;
  }
}

void ggl::Ribbon::BaseMesh::~BaseMesh(ggl::Ribbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Ribbon::BaseMesh::~BaseMesh(ggl::Ribbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Ribbon::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Ribbon::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Ribbon::BaseMesh::BaseMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE43DB8 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BDDF8;
  *(_QWORD *)(a1 + 16) = &unk_1E42BDE18;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42BC1F0;
  *(_QWORD *)(a1 + 16) = &unk_1E42BC210;
  return a1;
}

uint64_t md::FrameGraphBuilder::addRenderPass<md::StandardBelowOverlaysCommandBufferIdInfo>(unsigned __int8 ***a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  ggl::RenderQueue *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  ggl::CommandBuffer *v13;
  ggl::CommandBuffer *v14;
  const char *v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4290AA0;
  v7 = operator new(0x150uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E42DE9D0;
  v8 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v7 + 3), 100);
  v6[3] = 0;
  v9 = v6 + 3;
  v6[1] = v8;
  v6[2] = v7;
  v6[4] = 0;
  v6[5] = 0;
  v10 = (char *)operator new(0x320uLL);
  v6[3] = v10;
  v11 = v10 + 800;
  v6[5] = v10 + 800;
  bzero(v10, 0x320uLL);
  v12 = 0;
  v6[4] = v11;
  *v6 = &off_1E428C5A0;
  do
  {
    v13 = (ggl::CommandBuffer *)operator new();
    v14 = v13;
    v15 = "<Invalid>";
    if (v12 <= 0x63u)
      v15 = off_1E42F5DB0[v12];
    v16 = ggl::CommandBuffer::CommandBuffer(v13, v12, v15);
    v17 = *(_QWORD *)(*v9 + 8 * v12);
    *(_QWORD *)(*v9 + 8 * v12) = v14;
    if (v17)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v17 + 8))(v17, v16);
    ggl::RenderQueue::setBufferForLayer(v6[1], v12++, v14);
  }
  while (v12 != 100);
  v24 = v6;
  v18 = (_QWORD *)a3[3];
  if (!v18)
  {
    v19 = 0;
    goto LABEL_11;
  }
  if (v18 != a3)
  {
    v19 = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
LABEL_11:
    v26 = (_BYTE *)v19;
    goto LABEL_13;
  }
  v26 = v25;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v25);
  v19 = (uint64_t)v26;
LABEL_13:
  v20 = md::FrameGraphBuilder::addRenderPass(a1, a2, (uint64_t *)&v24, v19);
  v21 = v26;
  if (v26 == v25)
  {
    v22 = 4;
    v21 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_18;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_18:
  if (v24)
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  return v20;
}

void sub_19FC6CBFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19FC6CC18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  MEMORY[0x1A1AF4E00](v1, 0xA1C4084DA3AFDLL);
  _Unwind_Resume(a1);
}

_QWORD *md::RenderQueue<md::StandardAboveOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::StandardAboveOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CE078;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CE078;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 __src;
  uint64_t v10;

  HIBYTE(v10) = 14;
  strcpy((char *)&__src, "Above Overlays");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xEuLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v10;
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::StandardOverlaysAboveCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::StandardOverlaysAboveCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CE030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CE030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  BYTE7(v9[1]) = 21;
  strcpy((char *)v9, "Overlays Above Labels");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x15uLL);
  }
  else
  {
    *(_OWORD *)v4 = v9[0];
    *(_QWORD *)(a2 + 48) = *(_QWORD *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::StandardBetweenOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::StandardBetweenOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CDFE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CDFE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  BYTE7(v9[1]) = 16;
  strcpy((char *)v9, "Between Overlays");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x10uLL);
  }
  else
  {
    *(_OWORD *)v4 = v9[0];
    *(_QWORD *)(a2 + 48) = *(_QWORD *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::StandardOverlaysBelowCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::StandardOverlaysBelowCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CDFA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CDFA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];

  BYTE7(v9[1]) = 21;
  strcpy((char *)v9, "Overlays Below Labels");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x15uLL);
  }
  else
  {
    *(_OWORD *)v4 = v9[0];
    *(_QWORD *)(a2 + 48) = *(_QWORD *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  result = *(__n128 *)(v5 + 16);
  v7 = *(_OWORD *)(v5 + 32);
  v8 = *(_OWORD *)(v5 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v5 + 72))
  {
    result = *(__n128 *)(v5 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::StandardBelowOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::StandardBelowOverlaysCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42CDF58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CDF58;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 __src;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  HIBYTE(v14) = 14;
  strcpy((char *)&__src, "Below Overlays");
  v5 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v5, &__src, 0xEuLL);
  }
  else
  {
    *(_OWORD *)v5 = __src;
    *(_QWORD *)(a2 + 48) = v14;
  }
  if (**(_BYTE **)(a1 + 8))
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v4 + 96));
  if (**(_BYTE **)(a1 + 24))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "daVinciSSAODepthAwareUpsampleEnabled");

    v8 = 136;
    if (v7)
      v8 = 152;
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v4 + v8));
  }
  if (**(_BYTE **)(a1 + 32))
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v4 + 160));
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v9;
  result = *(__n128 *)(v9 + 16);
  v11 = *(_OWORD *)(v9 + 32);
  v12 = *(_OWORD *)(v9 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v9 + 64);
  *(_OWORD *)(a2 + 152) = v12;
  *(_OWORD *)(a2 + 136) = v11;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v9 + 72))
  {
    result = *(__n128 *)(v9 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v9 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v9 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

void sub_19FC6DB78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *md::RenderQueue<md::StandardCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E42CDF10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CDF10;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2, __n128 result)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 __src;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 16);
  HIBYTE(v12) = 7;
  strcpy((char *)&__src, "Primary");
  v6 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v6, &__src, 7uLL);
  }
  else
  {
    result.n128_u64[0] = __src;
    *(_OWORD *)v6 = __src;
    *(_QWORD *)(a2 + 48) = v12;
  }
  if (**(_BYTE **)(a1 + 8))
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v5 + 96));
  if (**(_BYTE **)(a1 + 24))
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v5 + 120));
  if (**(_BYTE **)(a1 + 32))
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v5 + 160));
  if (**(_BYTE **)(a1 + 40))
  {
    v7 = *(_QWORD *)(v5 + 208);
    *(_QWORD *)(a2 + 104) = v7;
    if (!*(_BYTE *)(a2 + 176))
    {
      result = *(__n128 *)(v7 + 88);
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v7 + 104);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 224);
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(v5 + 216);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)v8;
    result = *(__n128 *)(v8 + 16);
    v9 = *(_OWORD *)(v8 + 32);
    v10 = *(_OWORD *)(v8 + 48);
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(v8 + 64);
    *(_OWORD *)(a2 + 136) = v9;
    *(_OWORD *)(a2 + 152) = v10;
    *(__n128 *)(a2 + 120) = result;
    if (*(_BYTE *)(v8 + 72))
    {
      result = *(__n128 *)(v8 + 76);
      if (*(_BYTE *)(a2 + 176))
      {
        *(_DWORD *)(a2 + 196) = *(_DWORD *)(v8 + 92);
        *(__n128 *)(a2 + 180) = result;
      }
      else
      {
        *(_DWORD *)(a2 + 196) = *(_DWORD *)(v8 + 92);
        *(__n128 *)(a2 + 180) = result;
        *(_BYTE *)(a2 + 176) = 1;
      }
    }
    else if (*(_BYTE *)(a2 + 176))
    {
      *(_BYTE *)(a2 + 176) = 0;
    }
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDCD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDCD0;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v2;
  result = *(__n128 *)(v2 + 16);
  v4 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 152) = v5;
  *(_OWORD *)(a2 + 136) = v4;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v2 + 72))
  {
    result = *(__n128 *)(v2 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDC88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDC88;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 280);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDC40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDC40;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDBF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDBF8;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDBB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDBB0;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 256);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDB68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDB68;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  *(_QWORD *)(a2 + 104) = v2;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDB20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDB20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildDOFFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 240);
  *(_QWORD *)(a2 + 104) = v3;
  if (!*(_BYTE *)(a2 + 176))
  {
    v4 = *(_OWORD *)(v3 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v3 + 104);
    *(_OWORD *)(a2 + 180) = v4;
    *(_BYTE *)(a2 + 176) = 1;
  }
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v2 + 248);
  return result;
}

_QWORD *md::StandardPassList::_buildRouteLineMaskFrameGraph(_QWORD *a1, char a2, float *a3, _BYTE *a4, int32x2_t *a5, uint64_t a6)
{
  float v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint32x2_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *result;
  uint64_t v29;
  __int16 v30[2];
  int v31;
  float v32;
  int v33;
  float v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;
  _BYTE *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v11 = *a3;
    v30[0] = 1;
    v31 = 0;
    v32 = v11;
    v33 = 0;
    v34 = v11;
    v35 = 0x100000008;
    v36 = 0;
    v37 = 0;
    v38 = 0x100000000;
    v39 = 1;
    v40 = 0;
    a1[20] = md::FrameGraphBuilder::createResource(a6, (uint64_t)v30, "DV RouteMask", 0x43A17EC40000000CuLL, 0);
    v12 = a1[25];
    if (!v12)
    {
      v13 = operator new();
      *(_DWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)v13 = &off_1E42B63B0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 44) = 1;
      *(_QWORD *)(v13 + 36) = 0x100000001;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      v14 = (_QWORD *)operator new();
      *v14 = &off_1E42E77C8;
      v14[1] = 0;
      v14[2] = 0;
      v14[3] = v13;
      v15 = (std::__shared_weak_count *)a1[24];
      a1[23] = v13;
      a1[24] = v14;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = operator new();
      v12 = v18;
      v19 = vcvt_u32_f32(vmul_n_f32(vcvt_f32_s32(*a5), *a3));
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)(v18 + 24) = 0;
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 56) = xmmword_19FFB5D80;
      *(_DWORD *)(v18 + 72) = 1;
      *(_QWORD *)(v18 + 76) = 0;
      *(_QWORD *)(v18 + 92) = 0;
      *(_QWORD *)(v18 + 84) = 0;
      *(_QWORD *)(v18 + 100) = 0x100000000;
      *(_QWORD *)v18 = &off_1E42BE438;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 40) = &unk_1E42BE458;
      *(_QWORD *)(v18 + 48) = "";
      *(_WORD *)(v18 + 128) = 0;
      *(_QWORD *)(v18 + 112) = 0;
      *(_QWORD *)(v18 + 120) = 0;
      *(_BYTE *)(v18 + 130) = 1;
      v20 = a1[24];
      *(_QWORD *)(v18 + 136) = a1[23];
      *(_QWORD *)(v18 + 144) = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      *(uint32x2_t *)(v18 + 80) = v19;
      v23 = a1[25];
      a1[25] = v12;
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        v12 = a1[25];
      }
    }
    v41 = (_BYTE *)a1[20];
    v24 = v41;
    v25 = operator new();
    *(_BYTE *)(v25 + 8) = *v24;
    *(_QWORD *)(v25 + 16) = v12;
    *(_QWORD *)v25 = &off_1E42A8F38;
    v26 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a6 + 88), (unint64_t)v24, &v41);
    v27 = v26[3];
    v26[3] = v25;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (*a4)
    {
      v44[0] = &off_1E42CE0C0;
      v44[1] = a1;
      v45 = v44;
      md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a6, 15, v44);
      result = v45;
      if (v45 == v44)
      {
        v29 = 4;
        result = v44;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v29))();
      }
    }
    else
    {
      v42[0] = &off_1E42CE108;
      v42[1] = a1;
      v43 = v42;
      md::FrameGraphBuilder::addRenderPass<md::StandardBelowOverlaysCommandBufferIdInfo>((unsigned __int8 ***)a6, 15, v42);
      result = v43;
      if (v43 == v42)
      {
        v29 = 4;
        result = v42;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v29))();
      }
    }
    if (!result)
      return result;
    v29 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v29))();
  }
  a1[20] = 0;
  result = (_QWORD *)a1[25];
  a1[25] = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

void sub_19FC6E688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a21;
  if (a21 == v25)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      _Unwind_Resume(exception_object);
    v28 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v27 + 8 * v28))(v27);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE108;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE108;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  void **v5;
  __n128 result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (char *)operator new(0x19uLL);
  strcpy(v4, "RouteLine DistanceField");
  v5 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
    std::string::__assign_no_alias<false>(v5, v4, 0x17uLL);
  else
    std::string::__assign_no_alias<true>(v5, v4, 0x17uLL);
  operator delete(v4);
  v7 = *(_QWORD *)(v3 + 160);
  *(_QWORD *)(a2 + 104) = v7;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v7 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v7 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE0C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE0C0;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildRouteLineMaskFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  void **v5;
  __n128 result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (char *)operator new(0x19uLL);
  strcpy(v4, "RouteLine DistanceField");
  v5 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
    std::string::__assign_no_alias<false>(v5, v4, 0x17uLL);
  else
    std::string::__assign_no_alias<true>(v5, v4, 0x17uLL);
  operator delete(v4);
  v7 = *(_QWORD *)(v3 + 160);
  *(_QWORD *)(a2 + 104) = v7;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v7 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v7 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

_QWORD *md::StandardPassList::_buildShadowFrameGraph(_QWORD *this, const BOOL *a2, unsigned __int8 ***a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  __int16 v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  __int16 v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v3 = (uint64_t)this;
  v38 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)a2)
  {
    v27[0] = 258;
    v28 = 0x3E80000000000000;
    v29 = 0x3E80000000000000;
    v30 = 0x100000015;
    v31 = 0;
    v32 = 0;
    v33 = 0x100000001;
    v34 = 4;
    v35 = 1;
    v18[0] = 258;
    v19 = 0x3E80000000000000;
    v20 = 0x3E80000000000000;
    v21 = 0x100000004;
    v22 = 0;
    v23 = 0;
    v24 = 0x100000001;
    v25 = 4;
    v26 = 0;
    v9[0] = 258;
    v10 = 0x3E80000000000000;
    v11 = 0x3E80000000000000;
    v12 = 0x100000004;
    v13 = 0;
    v14 = 0;
    v15 = 0x100000000;
    v16 = 1;
    v17 = 2;
    this[10] = md::FrameGraphBuilder::createResource((uint64_t)a3, (uint64_t)v27, "DV Shadow", 0xFA9BA3C000000009, 0);
    *(_QWORD *)(v3 + 88) = md::FrameGraphBuilder::createResource((uint64_t)a3, (uint64_t)v18, "DV Shadow Color", 0x23A65F340000000FuLL, 0);
    *(_QWORD *)(v3 + 96) = md::FrameGraphBuilder::createResource((uint64_t)a3, (uint64_t)v9, "DV Shadow Color Resolve", 0x355EBC1F00000017uLL, 0);
    v36[0] = &off_1E42CDEC8;
    v36[1] = v3;
    v37 = v36;
    md::FrameGraphBuilder::addRenderPass<md::DaVinciShadowCommandBufferIdInfo>(a3, 0, v36);
    this = v37;
    if (v37 == v36)
    {
      v8 = 4;
      this = v36;
    }
    else
    {
      if (!v37)
        return this;
      v8 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*this + 8 * v8))(this, v5, v6, v7);
  }
  else
  {
    this[10] = 0;
    this[11] = 0;
    this[12] = 0;
  }
  return this;
}

void sub_19FC6EAE8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 32);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 56);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *md::RenderQueue<md::DaVinciShadowCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void std::__function::__func<md::StandardPassList::_buildShadowFrameGraph(BOOL const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildShadowFrameGraph(BOOL const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildShadowFrameGraph(BOOL const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildShadowFrameGraph(BOOL const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDEC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildShadowFrameGraph(BOOL const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildShadowFrameGraph(BOOL const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDEC8;
  a2[1] = v2;
  return result;
}

void **std::__function::__func<md::StandardPassList::_buildShadowFrameGraph(BOOL const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildShadowFrameGraph(BOOL const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void **result;
  uint64_t v5;
  __int128 v6;
  __int128 __src;
  uint64_t v8;

  v3 = *(_QWORD **)(a1 + 8);
  HIBYTE(v8) = 11;
  strcpy((char *)&__src, "Shadow Pass");
  result = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    result = std::string::__assign_no_alias<false>(result, &__src, 0xBuLL);
  }
  else
  {
    *(_OWORD *)result = __src;
    *(_QWORD *)(a2 + 48) = v8;
  }
  v5 = v3[10];
  *(_QWORD *)(a2 + 168) = v5;
  if (!*(_BYTE *)(a2 + 176))
  {
    v6 = *(_OWORD *)(v5 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 104);
    *(_OWORD *)(a2 + 180) = v6;
    *(_BYTE *)(a2 + 176) = 1;
  }
  *(_QWORD *)(a2 + 104) = v3[11];
  *(_QWORD *)(a2 + 136) = v3[12];
  *(_BYTE *)(a2 + 200) = 1;
  return result;
}

void md::StandardPassList::_buildSSAOFrameGraph(uint64_t a1, char a2, float *a3, _BYTE *a4, int32x2_t *a5, uint64_t a6)
{
  float v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  __int16 v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  int v65;
  char v66;
  _WORD v67[2];
  int v68;
  float v69;
  int v70;
  float v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  int v76;
  char v77;
  __int16 v78[2];
  int v79;
  float v80;
  int v81;
  float v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  int v87;
  char v88;
  _BYTE *v89;
  _QWORD v90[3];
  _QWORD *v91;
  _QWORD v92[3];
  _QWORD *v93;
  _QWORD v94[3];
  _QWORD *v95;
  _QWORD v96[3];
  _QWORD *v97;
  _QWORD v98[3];
  _QWORD *v99;
  _QWORD v100[3];
  _QWORD *v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    return;
  }
  v11 = *a3;
  v78[0] = 1;
  v79 = 0;
  v80 = v11;
  v81 = 0;
  v82 = v11;
  v83 = 0x100000003;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 1;
  v88 = 0;
  v67[0] = 1;
  v68 = 0;
  v69 = v11;
  v70 = 0;
  v71 = v11;
  v72 = 0x100000002;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 1;
  v77 = 0;
  v58[0] = 1;
  v59 = 0x3F80000000000000;
  v60 = 0x3F80000000000000;
  v61 = 0x100000002;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  v66 = 0;
  LOWORD(v51) = 1;
  HIDWORD(v51) = 0;
  v52 = LODWORD(v11);
  *(float *)&v53 = v11;
  *(_QWORD *)((char *)&v53 + 4) = 0x100000002;
  BYTE12(v53) = 0;
  v54 = 0;
  v55 = 0x100000000;
  v56 = 1;
  v57 = 0;
  *(_QWORD *)(a1 + 144) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v78, "DV Low Res Linear Depth", 0x78CE7E6100000017uLL, 0);
  *(_QWORD *)(a1 + 120) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v67, "DV SSAO Color", 0xF0BDF590000000DuLL, 0);
  *(_QWORD *)(a1 + 128) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v67, "DV SSAO Blur", 0x46B001E00000000CuLL, 0);
  *(_QWORD *)(a1 + 136) = md::FrameGraphBuilder::createResource(a6, (uint64_t)&v51, "DV SSAO Blur 2", 0x35F3E2170000000EuLL, 0);
  *(_QWORD *)(a1 + 152) = md::FrameGraphBuilder::createResource(a6, (uint64_t)v58, "DV Rescale Color", 0x800F7D0400000010, 0);
  if (!*(_QWORD *)(a1 + 48))
  {
    v35 = operator new();
    *(_DWORD *)(v35 + 32) = 0;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)v35 = &off_1E42B63B0;
    *(_QWORD *)(v35 + 8) = 0;
    *(_DWORD *)(v35 + 44) = 1;
    *(_QWORD *)(v35 + 36) = 0x100000001;
    *(_QWORD *)(v35 + 48) = 0;
    *(_QWORD *)(v35 + 56) = 0;
    v36 = (_QWORD *)operator new();
    *v36 = &off_1E42E77C8;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v35;
    v37 = *(std::__shared_weak_count **)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v35;
    *(_QWORD *)(a1 + 56) = v36;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  *(int32x2_t *)&v12 = vcvt_s32_f32(vmul_n_f32(vcvt_f32_s32(*a5), *a3));
  v13 = *(_QWORD *)(a1 + 64);
  if (!v13 || *(_QWORD *)(v13 + 80) != (_QWORD)v12)
  {
    v50 = v12;
    v14 = operator new();
    v13 = v14;
    *(_DWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_OWORD *)(v14 + 56) = xmmword_19FFB5D90;
    *(_DWORD *)(v14 + 72) = 1;
    *(_QWORD *)(v14 + 76) = 0;
    *(_QWORD *)(v14 + 92) = 0;
    *(_QWORD *)(v14 + 84) = 0;
    *(_QWORD *)(v14 + 100) = 0x100000000;
    *(_QWORD *)v14 = &off_1E42BE438;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v14 + 48) = "";
    *(_QWORD *)(v14 + 112) = 0;
    *(_QWORD *)(v14 + 120) = 0;
    *(_WORD *)(v14 + 128) = 0;
    *(_BYTE *)(v14 + 130) = 1;
    v15 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v14 + 136) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v14 + 144) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *(_QWORD *)(v14 + 80) = v50;
    v18 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v13;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v13 = *(_QWORD *)(a1 + 64);
    }
  }
  v89 = *(_BYTE **)(a1 + 120);
  v19 = v89;
  v20 = operator new();
  *(_BYTE *)(v20 + 8) = *v19;
  *(_QWORD *)(v20 + 16) = v13;
  *(_QWORD *)v20 = &off_1E42A8F38;
  v21 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a6 + 88), (unint64_t)v19, &v89);
  v22 = v21[3];
  v21[3] = v20;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v24 = *(_QWORD *)(a1 + 64);
  v89 = *(_BYTE **)(a1 + 128);
  v23 = v89;
  v25 = operator new();
  *(_BYTE *)(v25 + 8) = *v23;
  *(_QWORD *)(v25 + 16) = v24;
  *(_QWORD *)v25 = &off_1E42A8F38;
  v26 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a6 + 88), (unint64_t)v23, &v89);
  v27 = v26[3];
  v26[3] = v25;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v29 = *(_QWORD *)(a1 + 64);
  v89 = *(_BYTE **)(a1 + 136);
  v28 = v89;
  v30 = operator new();
  *(_BYTE *)(v30 + 8) = *v28;
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)v30 = &off_1E42A8F38;
  v31 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a6 + 88), (unint64_t)v28, &v89);
  v32 = v31[3];
  v31[3] = v30;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v100[0] = &off_1E42CDD18;
  v100[1] = a1;
  v101 = v100;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a6, 4, v100);
  v33 = v101;
  if (v101 == v100)
  {
    v34 = 4;
    v33 = v100;
  }
  else
  {
    if (!v101)
      goto LABEL_27;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_27:
  v98[0] = &off_1E42CDD60;
  v98[1] = a1;
  v99 = v98;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a6, 5, v98);
  v40 = v99;
  if (v99 == v98)
  {
    v41 = 4;
    v40 = v98;
  }
  else
  {
    if (!v99)
      goto LABEL_32;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_32:
  if (*a4)
  {
    v96[0] = &off_1E42CDDA8;
    v96[1] = a1;
    v97 = v96;
    md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a6, 6, v96);
    v42 = v97;
    if (v97 == v96)
    {
      v43 = 4;
      v42 = v96;
    }
    else
    {
      if (!v97)
        goto LABEL_40;
      v43 = 5;
    }
    (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_40:
    v94[0] = &off_1E42CDDF0;
    v94[1] = a1;
    v95 = v94;
    md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a6, 7, v94);
    v46 = v95;
    if (v95 == v94)
    {
      v47 = 4;
      v46 = v94;
    }
    else
    {
      if (!v95)
        goto LABEL_45;
      v47 = 5;
    }
    (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_45:
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v50, v51, v52, v53);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend(v48, "daVinciSSAODepthAwareUpsampleEnabled");

    if (!v49)
      return;
    v92[0] = &off_1E42CDE38;
    v92[1] = a1;
    v93 = v92;
    md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a6, 8, v92);
    v44 = v93;
    if (v93 == v92)
    {
      v45 = 4;
      v44 = v92;
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  v90[0] = &off_1E42CDE80;
  v90[1] = a1;
  v91 = v90;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a6, 8, v90);
  v44 = v91;
  if (v91 == v90)
  {
    v45 = 4;
    v44 = v90;
    goto LABEL_50;
  }
LABEL_47:
  if (!v44)
    return;
  v45 = 5;
LABEL_50:
  (*(void (**)(void))(*v44 + 8 * v45))();
}

void sub_19FC6F404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v46;
  uint64_t v47;

  v46 = *(_QWORD **)(v44 - 224);
  if (v46 == v43)
  {
    v47 = 4;
    v46 = (_QWORD *)(v44 - 248);
  }
  else
  {
    if (!v46)
      _Unwind_Resume(exception_object);
    v47 = 5;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v47))(v46);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDE80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDE80;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  __n128 result;
  uint64_t v6;
  __int128 __src;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  HIBYTE(v8) = 12;
  strcpy((char *)&__src, "SSAO Rescale");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xCuLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v8;
  }
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 120));
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 144));
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 104));
  v6 = *(_QWORD *)(v3 + 152);
  *(_QWORD *)(a2 + 104) = v6;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v6 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDE38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDE38;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  __n128 result;
  uint64_t v6;
  __int128 __src;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  HIBYTE(v8) = 12;
  strcpy((char *)&__src, "SSAO Rescale");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xCuLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v8;
  }
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 136));
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 144));
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 104));
  v6 = *(_QWORD *)(v3 + 152);
  *(_QWORD *)(a2 + 104) = v6;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v6 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDDF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDDF0;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  __n128 result;
  uint64_t v6;
  __int128 __src;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  HIBYTE(v8) = 10;
  strcpy((char *)&__src, "SSAO Blur2");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xAuLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v8;
  }
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 128));
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 144));
  v6 = *(_QWORD *)(v3 + 136);
  *(_QWORD *)(a2 + 104) = v6;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v6 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDDA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDDA8;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  __n128 result;
  uint64_t v6;
  __int128 __src;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  HIBYTE(v8) = 9;
  strcpy((char *)&__src, "SSAO Blur");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 9uLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v8;
  }
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 120));
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 144));
  v6 = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(a2 + 104) = v6;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v6 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDD60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDD60;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  __n128 result;
  uint64_t v6;
  __int128 __src;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  HIBYTE(v8) = 4;
  strcpy((char *)&__src, "SSAO");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 4uLL);
  }
  else
  {
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v8;
  }
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 168));
  v6 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(a2 + 104) = v6;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v6 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDD18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDD18;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildSSAOFrameGraph(BOOL const&,float const&,BOOL const&,gm::Matrix<int,2,1> const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  __n128 result;
  uint64_t v6;
  _OWORD v7[2];

  v3 = *(_QWORD *)(a1 + 8);
  BYTE7(v7[1]) = 21;
  strcpy((char *)v7, "Scene depth downscale");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v7, 0x15uLL);
  }
  else
  {
    *(_OWORD *)v4 = v7[0];
    *(_QWORD *)(a2 + 48) = *(_QWORD *)&v7[1];
  }
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3 + 104));
  v6 = *(_QWORD *)(v3 + 144);
  *(_QWORD *)(a2 + 104) = v6;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v6 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

_QWORD *md::StandardPassList::_buildSSAODOFCommonFrameGraph(_QWORD *this, const BOOL *a2, const BOOL *a3, const float *a4, unsigned __int8 ***a5)
{
  uint64_t v5;
  int v9;
  int v10;
  uint64_t v11;
  __int16 v12[2];
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  __int16 v23[2];
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  _BOOL4 v31;
  uint64_t v32;
  char v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v5 = (uint64_t)this;
  v38 = *MEMORY[0x1E0C80C00];
  if (!(*a2 | a3))
  {
    this[13] = 0;
    this[21] = 0;
    return this;
  }
  v9 = *(_DWORD *)a4;
  v23[0] = 1;
  v24 = 0;
  v25 = v9;
  v26 = 0;
  v27 = v9;
  v28 = 0x100000015;
  v29 = 0;
  v30 = 0;
  v31 = a3 == 0;
  v32 = 0x100000001;
  v33 = 1;
  this[13] = md::FrameGraphBuilder::createResource((uint64_t)a5, (uint64_t)v23, "DV Scene Depth", 0x138BE2490000000EuLL, 0);
  if (*a2)
  {
    v10 = *(_DWORD *)a4;
    v12[0] = 1;
    v13 = 0;
    v14 = v10;
    v15 = 0;
    v16 = v10;
    v17 = 0x100000003;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 1;
    v22 = 0;
    *(_QWORD *)(v5 + 168) = md::FrameGraphBuilder::createResource((uint64_t)a5, (uint64_t)v12, "DV Linear Depth", 0xA193D4A20000000FLL, 0);
    v36[0] = &off_1E42CE150;
    v36[1] = v5;
    v37 = v36;
    md::FrameGraphBuilder::addRenderPass<md::DaVinciShadowCommandBufferIdInfo>(a5, 3, v36);
    this = v37;
    if (v37 == v36)
    {
      v11 = 4;
      this = v36;
      return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v11))();
    }
  }
  else
  {
    *(_QWORD *)(v5 + 168) = 0;
    v34[0] = &off_1E42CE198;
    v34[1] = v5;
    v35 = v34;
    md::FrameGraphBuilder::addRenderPass<md::DaVinciShadowCommandBufferIdInfo>(a5, 3, v34);
    this = v35;
    if (v35 == v34)
    {
      v11 = 4;
      this = v34;
      return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v11))();
    }
  }
  if (!this)
    return this;
  v11 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v11))();
}

void sub_19FC6FDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE198;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE198;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  __n128 result;
  uint64_t v6;
  __int128 __src;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  HIBYTE(v8) = 11;
  strcpy((char *)&__src, "Scene Depth");
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xBuLL);
  }
  else
  {
    result.n128_u64[0] = __src;
    *(_OWORD *)v4 = __src;
    *(_QWORD *)(a2 + 48) = v8;
  }
  v6 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(a2 + 168) = v6;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v6 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void std::__function::__func<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CE150;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CE150;
  a2[1] = v2;
  return result;
}

void **std::__function::__func<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildSSAODOFCommonFrameGraph(BOOL const&,BOOL const&,float const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **result;
  uint64_t v5;
  __int128 v6;
  __int128 __src;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  HIBYTE(v8) = 11;
  strcpy((char *)&__src, "Scene Depth");
  result = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    result = std::string::__assign_no_alias<false>(result, &__src, 0xBuLL);
  }
  else
  {
    *(_OWORD *)result = __src;
    *(_QWORD *)(a2 + 48) = v8;
  }
  v5 = *(_QWORD *)(v3 + 168);
  *(_QWORD *)(a2 + 104) = v5;
  if (!*(_BYTE *)(a2 + 176))
  {
    v6 = *(_OWORD *)(v5 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 104);
    *(_OWORD *)(a2 + 180) = v6;
    *(_BYTE *)(a2 + 176) = 1;
  }
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v3 + 104);
  return result;
}

void ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42CE1E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CE1E0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v4;
  void **v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __n128 result;
  __int128 __src;
  uint64_t v12;

  v4 = *(unsigned __int8 ***)(a1 + 16);
  HIBYTE(v12) = 7;
  strcpy((char *)&__src, "Primary");
  v5 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v5, &__src, 7uLL);
  }
  else
  {
    *(_OWORD *)v5 = __src;
    *(_QWORD *)(a2 + 48) = v12;
  }
  if (**(_BYTE **)(a1 + 8))
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, v4[12]);
  if (**(_BYTE **)(a1 + 24))
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, v4[15]);
  if (**(_BYTE **)(a1 + 32))
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, v4[20]);
  v6 = **(_QWORD **)(a1 + 40);
  v8 = *(_OWORD *)(v6 + 32);
  v7 = *(_OWORD *)(v6 + 48);
  v9 = *(_QWORD *)(v6 + 64);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(v6 + 16);
  *(_QWORD *)(a2 + 168) = v9;
  *(_OWORD *)(a2 + 152) = v7;
  *(_OWORD *)(a2 + 136) = v8;
  result = *(__n128 *)v6;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v6;
  if (*(_BYTE *)(v6 + 72))
  {
    result = *(__n128 *)(v6 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[6];
    if (!v6)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
      {
LABEL_11:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_10:
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
        goto LABEL_11;
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(_QWORD *a1)
{
  gdc::LayerDataCollector *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = (gdc::LayerDataCollector *)a1[13];
  a1[13] = 0;
  if (v2)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = (_QWORD *)a1[10];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)a1[8];
  a1[8] = 0;
  if (v5)
    operator delete(v5);
  v6 = (_QWORD *)a1[4];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[2];
  a1[2] = 0;
  if (v8)
    operator delete(v8);
}

void std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (_QWORD *)v1[5];
      if (v3)
      {
        do
        {
          v5 = (_QWORD *)*v3;
          v6 = (_QWORD *)v3[5];
          if (v6)
          {
            do
            {
              v7 = (_QWORD *)*v6;
              operator delete(v6);
              v6 = v7;
            }
            while (v7);
          }
          v8 = (void *)v3[3];
          v3[3] = 0;
          if (v8)
            operator delete(v8);
          operator delete(v3);
          v3 = v5;
        }
        while (v5);
      }
      v4 = (void *)v1[3];
      v1[3] = 0;
      if (v4)
        operator delete(v4);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

_QWORD *std::pair<md::TileSelectionTileSetType,md::SceneTileSet>::~pair(_QWORD *a1)
{
  gdc::LayerDataCollector *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = (gdc::LayerDataCollector *)a1[13];
  a1[13] = 0;
  if (v2)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = (_QWORD *)a1[10];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)a1[8];
  a1[8] = 0;
  if (v5)
    operator delete(v5);
  v6 = (_QWORD *)a1[4];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[2];
  a1[2] = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

uint64_t std::__split_buffer<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>((_QWORD *)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void md::SceneStateManager::~SceneStateManager(md::SceneStateManager *this)
{
  md::SceneStateManager::~SceneStateManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;

  *(_QWORD *)this = &off_1E42935A8;
  std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__deallocate_node(*((_QWORD **)this + 56));
  v2 = (void *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v2)
    operator delete(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 51);
  if (v3)
  {
    do
    {
      v29 = (_QWORD *)*v3;
      v30 = (_QWORD *)v3[5];
      if (v30)
      {
        do
        {
          v31 = (_QWORD *)*v30;
          operator delete(v30);
          v30 = v31;
        }
        while (v31);
      }
      v32 = (void *)v3[3];
      v3[3] = 0;
      if (v32)
        operator delete(v32);
      operator delete(v3);
      v3 = v29;
    }
    while (v29);
  }
  v4 = (void *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 46);
  if (v5)
  {
    do
    {
      v33 = (_QWORD *)*v5;
      v34 = (_QWORD *)v5[5];
      if (v34)
      {
        do
        {
          v35 = (_QWORD *)*v34;
          operator delete(v34);
          v34 = v35;
        }
        while (v35);
      }
      v36 = (void *)v5[3];
      v5[3] = 0;
      if (v36)
        operator delete(v36);
      operator delete(v5);
      v5 = v33;
    }
    while (v33);
  }
  v6 = (void *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v6)
    operator delete(v6);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 42));
  v7 = (_QWORD *)*((_QWORD *)this + 38);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v9)
    operator delete(v9);
  v10 = (void *)*((_QWORD *)this + 32);
  if (v10)
  {
    *((_QWORD *)this + 33) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 29);
  if (v11)
  {
    *((_QWORD *)this + 30) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 26);
  if (v12)
  {
    *((_QWORD *)this + 27) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 23);
  if (v13)
  {
    *((_QWORD *)this + 24) = v13;
    operator delete(v13);
  }
  v14 = (_QWORD *)*((_QWORD *)this + 20);
  if (v14)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 21);
    v16 = (void *)*((_QWORD *)this + 20);
    if (v15 != v14)
    {
      do
      {
        v15 -= 14;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v15);
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v14;
    operator delete(v16);
  }
  v17 = (_QWORD *)*((_QWORD *)this + 17);
  if (v17)
  {
    v18 = (_QWORD *)*((_QWORD *)this + 18);
    v19 = (void *)*((_QWORD *)this + 17);
    if (v18 != v17)
    {
      do
      {
        v18 -= 14;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v18);
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v17;
    operator delete(v19);
  }
  v20 = (_QWORD *)*((_QWORD *)this + 14);
  if (v20)
  {
    v21 = (_QWORD *)*((_QWORD *)this + 15);
    v22 = (void *)*((_QWORD *)this + 14);
    if (v21 != v20)
    {
      do
      {
        v21 -= 14;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v21);
      }
      while (v21 != v20);
      v22 = (void *)*((_QWORD *)this + 14);
    }
    *((_QWORD *)this + 15) = v20;
    operator delete(v22);
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::~__hash_table((uint64_t)this + 72);
  v23 = *((_QWORD *)this + 6);
  if (v23)
  {
    v24 = *((_QWORD *)this + 7);
    v25 = (void *)*((_QWORD *)this + 6);
    if (v24 != v23)
    {
      do
      {
        v26 = v24 - 32;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v24 - 16));
        v24 = v26;
      }
      while (v26 != v23);
      v25 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v23;
    operator delete(v25);
  }
  v27 = (_QWORD *)*((_QWORD *)this + 3);
  if (v27)
  {
    do
    {
      v37 = (_QWORD *)*v27;
      v38 = (void *)v27[16];
      if (v38 != (void *)v27[18])
        free(v38);
      if (*((_BYTE *)v27 + 112))
        *((_BYTE *)v27 + 112) = 0;
      v39 = (void *)v27[4];
      if (v39 != (void *)v27[6])
        free(v39);
      operator delete(v27);
      v27 = v37;
    }
    while (v37);
  }
  v28 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v28)
    operator delete(v28);
}

md::SceneStateManager *md::SceneStateManager::SceneStateManager(md::SceneStateManager *this, md::World *a2)
{
  char **v3;
  char **v4;
  char **v5;
  __int16 *v6;
  __int16 v7;
  gdc::LayerDataCollector *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  gdc::LayerDataCollector *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  gdc::LayerDataCollector *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _BYTE v36[8];
  void *v37;
  void *v38;
  void *v39;
  void *__p;
  gdc::LayerDataCollector *v41;

  *(_QWORD *)this = &off_1E42935A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  v3 = (char **)((char *)this + 112);
  v4 = (char **)((char *)this + 136);
  *((_OWORD *)this + 10) = 0u;
  v5 = (char **)((char *)this + 160);
  *((_WORD *)this + 141) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 80) = 1065353216;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 41) = (char *)this + 336;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 96) = 1065353216;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_DWORD *)this + 106) = 1065353216;
  *((_DWORD *)this + 116) = 1065353216;
  *((_QWORD *)this + 59) = a2;
  v6 = &md::TileSelectionTileSetTypeList;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  do
  {
    v7 = *v6;
    md::SceneTileSet::SceneTileSet((md::SceneTileSet *)v36);
    geo::linear_map<md::TileSelectionTileSetType,md::SceneTileSet,std::equal_to<md::TileSelectionTileSetType>,std::allocator<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>,std::vector<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>>::emplace<md::TileSelectionTileSetType&,md::SceneTileSet>(v3, v7, (md::SceneTileSet *)v36);
    v8 = v41;
    v41 = 0;
    if (v8)
    {
      gdc::LayerDataCollector::~LayerDataCollector(v8);
      MEMORY[0x1A1AF4E00](v9, 0x10A0C40D10DC8F6, v10);
    }
    v11 = __p;
    if (__p)
    {
      do
      {
        v12 = (_QWORD *)*v11;
        operator delete(v11);
        v11 = v12;
      }
      while (v12);
    }
    v13 = v39;
    v39 = 0;
    if (v13)
      operator delete(v13);
    v14 = v38;
    if (v38)
    {
      do
      {
        v15 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    v16 = v37;
    v37 = 0;
    if (v16)
      operator delete(v16);
    md::SceneTileSet::SceneTileSet((md::SceneTileSet *)v36);
    geo::linear_map<md::TileSelectionTileSetType,md::SceneTileSet,std::equal_to<md::TileSelectionTileSetType>,std::allocator<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>,std::vector<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>>::emplace<md::TileSelectionTileSetType&,md::SceneTileSet>(v4, v7, (md::SceneTileSet *)v36);
    v17 = v41;
    v41 = 0;
    if (v17)
    {
      gdc::LayerDataCollector::~LayerDataCollector(v17);
      MEMORY[0x1A1AF4E00](v18, 0x10A0C40D10DC8F6, v19);
    }
    v20 = __p;
    if (__p)
    {
      do
      {
        v21 = (_QWORD *)*v20;
        operator delete(v20);
        v20 = v21;
      }
      while (v21);
    }
    v22 = v39;
    v39 = 0;
    if (v22)
      operator delete(v22);
    v23 = v38;
    if (v38)
    {
      do
      {
        v24 = (_QWORD *)*v23;
        operator delete(v23);
        v23 = v24;
      }
      while (v24);
    }
    v25 = v37;
    v37 = 0;
    if (v25)
      operator delete(v25);
    md::SceneTileSet::SceneTileSet((md::SceneTileSet *)v36);
    geo::linear_map<md::TileSelectionTileSetType,md::SceneTileSet,std::equal_to<md::TileSelectionTileSetType>,std::allocator<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>,std::vector<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>>>::emplace<md::TileSelectionTileSetType&,md::SceneTileSet>(v5, v7, (md::SceneTileSet *)v36);
    v26 = v41;
    v41 = 0;
    if (v26)
    {
      gdc::LayerDataCollector::~LayerDataCollector(v26);
      MEMORY[0x1A1AF4E00](v27, 0x10A0C40D10DC8F6, v28);
    }
    v29 = __p;
    if (__p)
    {
      do
      {
        v30 = (_QWORD *)*v29;
        operator delete(v29);
        v29 = v30;
      }
      while (v30);
    }
    v31 = v39;
    v39 = 0;
    if (v31)
      operator delete(v31);
    v32 = v38;
    if (v38)
    {
      do
      {
        v33 = (_QWORD *)*v32;
        operator delete(v32);
        v32 = v33;
      }
      while (v33);
    }
    v34 = v37;
    v37 = 0;
    if (v34)
      operator delete(v34);
    ++v6;
  }
  while (v6 != (__int16 *)&unk_1A007D9DA);
  return this;
}

void sub_19FC70C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, uint64_t a12, void *a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,_QWORD *__p,uint64_t a22,uint64_t a23,gdc::LayerDataCollector *a24)
{
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void **v27;
  void **v28;
  void **v29;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  char *v64;
  char *v65;
  void *v66;
  char *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  void *v72;

  if (a24)
  {
    gdc::LayerDataCollector::~LayerDataCollector(a24);
    MEMORY[0x1A1AF4E00]();
  }
  v31 = __p;
  if (__p)
  {
    do
    {
      v32 = (_QWORD *)*v31;
      operator delete(v31);
      v31 = v32;
    }
    while (v32);
  }
  if (a19)
    operator delete(a19);
  v33 = a15;
  if (a15)
  {
    do
    {
      v34 = (_QWORD *)*v33;
      operator delete(v33);
      v33 = v34;
    }
    while (v34);
  }
  if (a13)
    operator delete(a13);
  std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__deallocate_node(*(_QWORD **)(v24 + 448));
  v35 = *(void **)(v24 + 432);
  *(_QWORD *)(v24 + 432) = 0;
  if (v35)
    operator delete(v35);
  v36 = *(_QWORD **)(v24 + 408);
  if (v36)
  {
    do
    {
      v48 = (_QWORD *)*v36;
      v49 = (_QWORD *)v36[5];
      if (v49)
      {
        do
        {
          v50 = (_QWORD *)*v49;
          operator delete(v49);
          v49 = v50;
        }
        while (v50);
      }
      v51 = (void *)v36[3];
      v36[3] = 0;
      if (v51)
        operator delete(v51);
      operator delete(v36);
      v36 = v48;
    }
    while (v48);
  }
  v37 = *v29;
  *v29 = 0;
  if (v37)
    operator delete(v37);
  v38 = *(_QWORD **)(v24 + 368);
  if (v38)
  {
    do
    {
      v52 = (_QWORD *)*v38;
      v53 = (_QWORD *)v38[5];
      if (v53)
      {
        do
        {
          v54 = (_QWORD *)*v53;
          operator delete(v53);
          v53 = v54;
        }
        while (v54);
      }
      v55 = (void *)v38[3];
      v38[3] = 0;
      if (v55)
        operator delete(v55);
      operator delete(v38);
      v38 = v52;
    }
    while (v52);
  }
  v39 = *a9;
  *a9 = 0;
  if (v39)
    operator delete(v39);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v24 + 336));
  v40 = *(_QWORD **)(v24 + 304);
  if (v40)
  {
    do
    {
      v41 = (_QWORD *)*v40;
      operator delete(v40);
      v40 = v41;
    }
    while (v41);
  }
  v42 = *a10;
  *a10 = 0;
  if (v42)
  {
    operator delete(v42);
    v43 = *(void **)(v24 + 256);
    if (!v43)
    {
LABEL_23:
      v44 = *(void **)(v24 + 232);
      if (!v44)
        goto LABEL_24;
      goto LABEL_40;
    }
  }
  else
  {
    v43 = *(void **)(v24 + 256);
    if (!v43)
      goto LABEL_23;
  }
  *(_QWORD *)(v24 + 264) = v43;
  operator delete(v43);
  v44 = *(void **)(v24 + 232);
  if (!v44)
  {
LABEL_24:
    v45 = *(void **)(v24 + 208);
    if (!v45)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_40:
  *(_QWORD *)(v24 + 240) = v44;
  operator delete(v44);
  v45 = *(void **)(v24 + 208);
  if (!v45)
  {
LABEL_25:
    v46 = *(void **)(v24 + 184);
    if (!v46)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  *(_QWORD *)(v24 + 216) = v45;
  operator delete(v45);
  v46 = *(void **)(v24 + 184);
  if (!v46)
  {
LABEL_26:
    v47 = *(_QWORD **)(v24 + 160);
    if (!v47)
      goto LABEL_47;
    goto LABEL_43;
  }
LABEL_42:
  *(_QWORD *)(v24 + 192) = v46;
  operator delete(v46);
  v47 = *(_QWORD **)(v24 + 160);
  if (!v47)
    goto LABEL_47;
LABEL_43:
  v56 = *(_QWORD **)(v24 + 168);
  v57 = v47;
  if (v56 != v47)
  {
    do
    {
      v56 -= 14;
      std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v56);
    }
    while (v56 != v47);
    v57 = *v27;
  }
  *(_QWORD *)(v24 + 168) = v47;
  operator delete(v57);
LABEL_47:
  v58 = (_QWORD *)*v26;
  if (*v26)
  {
    v59 = *(_QWORD **)(v24 + 144);
    v60 = (_QWORD *)*v26;
    if (v59 != v58)
    {
      do
      {
        v59 -= 14;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v59);
      }
      while (v59 != v58);
      v60 = (_QWORD *)*v26;
    }
    *(_QWORD *)(v24 + 144) = v58;
    operator delete(v60);
  }
  v61 = (_QWORD *)*v25;
  if (*v25)
  {
    v62 = *(_QWORD **)(v24 + 120);
    v63 = (_QWORD *)*v25;
    if (v62 != v61)
    {
      do
      {
        v62 -= 14;
        std::__destroy_at[abi:nn180100]<std::pair<md::TileSelectionTileSetType,md::SceneTileSet>,0>(v62);
      }
      while (v62 != v61);
      v63 = (_QWORD *)*v25;
    }
    *(_QWORD *)(v24 + 120) = v61;
    operator delete(v63);
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::~__hash_table(v24 + 72);
  v64 = (char *)*v28;
  if (*v28)
  {
    v65 = *(char **)(v24 + 56);
    v66 = *v28;
    if (v65 != v64)
    {
      do
      {
        v67 = v65 - 32;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v65 - 2));
        v65 = v67;
      }
      while (v67 != v64);
      v66 = *v28;
    }
    *(_QWORD *)(v24 + 56) = v64;
    operator delete(v66);
  }
  v68 = *(_QWORD **)(v24 + 24);
  if (v68)
  {
    do
    {
      v70 = (_QWORD *)*v68;
      v71 = (void *)v68[16];
      if (v71 != (void *)v68[18])
        free(v71);
      if (*((_BYTE *)v68 + 112))
        *((_BYTE *)v68 + 112) = 0;
      v72 = (void *)v68[4];
      if (v72 != (void *)v68[6])
        free(v72);
      operator delete(v68);
      v68 = v70;
    }
    while (v70);
  }
  v69 = *a11;
  *a11 = 0;
  if (v69)
    operator delete(v69);
  _Unwind_Resume(a1);
}

uint64_t std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100](uint64_t a1)
{
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[6];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = (std::__shared_weak_count *)v2[3];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<gdc::SubtileClipMask>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE1F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gdc::SubtileClipMask>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE1F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::SceneStateManager::updateSceneTileSet(_QWORD *a1, BOOL *a2, unsigned __int16 a3)
{
  unint64_t v3;
  _QWORD *v5;
  unsigned __int8 **v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *m;
  uint64_t *k;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *j;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 *v50;
  int v51;
  int8x8_t *v52;
  int8x8_t v53;
  uint8x8_t v54;
  unint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  uint8x8_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t ***v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  int8x8_t **v76;
  int8x8_t *v77;
  int8x8_t v78;
  int8x8_t v79;
  uint8x8_t v80;
  unint64_t v81;
  int8x8_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t **v89;
  unint64_t v90;
  unsigned __int16 *v91;
  unint64_t v92;
  unsigned __int16 *v93;
  unsigned __int16 *v94;
  unsigned __int16 *v95;
  uint64_t v96;
  unsigned __int16 *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  uint64_t v100;
  _BYTE *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  size_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  _BYTE *v110;
  unint64_t v111;
  int v112;
  uint64_t *v113;
  char *v114;
  const void *v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  unint64_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int64x2_t v127;
  unsigned __int128 v128;
  unsigned __int128 v129;
  int8x16_t v130;
  int8x16_t v131;
  int64x2_t v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t **v135;
  unsigned int v136;
  int v137;
  int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  __int128 *v142;
  _OWORD *v143;
  unint64_t v144;
  __int128 v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  uint8x8_t v152;
  char v153;
  unint64_t v154;
  _BYTE *v155;
  __int128 *v156;
  _OWORD *v157;
  unint64_t v158;
  __int128 v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  _QWORD *v163;
  uint64_t v164;
  char v165;
  uint64_t ***v166;
  uint64_t **v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t *v172;
  int v173;
  uint64_t (**v174)();
  float v175;
  unint64_t v176;
  _BOOL8 v177;
  unint64_t v178;
  unint64_t v179;
  size_t prime;
  void *v181;
  void *v182;
  uint64_t v183;
  _QWORD **v184;
  size_t v185;
  size_t v186;
  size_t v187;
  _QWORD *n;
  size_t v189;
  uint64_t v190;
  unint64_t v191;
  uint8x8_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  size_t v196;
  uint64_t (**v197)();
  uint64_t (**v198)();
  unint64_t v199;
  void *v200;
  unsigned __int8 *v201;
  int v202;
  uint64_t **v203;
  int v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t **v212;
  int v213;
  unsigned int v214;
  uint64_t *v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t **v220;
  uint64_t **v221;
  unsigned __int8 *v223;
  unsigned int v224;
  int v225;
  BOOL v226;
  unint64_t v228;
  uint8x8_t v229;
  unint64_t v230;
  uint64_t ***v231;
  uint64_t **v232;
  unint64_t v233;
  uint64_t *v234;
  size_t v235;
  const void *v236;
  unint64_t v237;
  uint64_t *v238;
  size_t v239;
  const void *v240;
  unint64_t v241;
  int32x2_t *v242;
  __int32 v243;
  int32x2_t v244;
  unint64_t v245;
  unsigned __int16 *v246;
  unsigned __int16 *v247;
  unsigned __int16 *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t **v251;
  uint64_t v252;
  uint64_t v253;
  unsigned __int16 *v254;
  uint64_t v255;
  uint64_t v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t ii;
  int v268;
  int v269;
  unsigned int v270;
  unint64_t v271;
  unsigned int v272;
  int v273;
  int8x16_t v274;
  int8x16_t v275;
  int64x2_t v276;
  unsigned __int128 v277;
  unsigned __int128 v278;
  int8x16_t v279;
  int8x16_t v280;
  int64x2_t v281;
  uint64_t **v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t *v285;
  uint64_t **v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t **v289;
  uint64_t *v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t **v293;
  uint64_t **v294;
  int v295;
  int v296;
  unsigned int v297;
  unint64_t v298;
  unint64_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int64x2_t v302;
  unsigned __int128 v303;
  unsigned __int128 v304;
  int8x16_t v305;
  int8x16_t v306;
  int64x2_t v307;
  int v308;
  int v309;
  unsigned int v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t **v316;
  uint64_t v317;
  _BOOL4 v318;
  BOOL v319;
  uint64_t *v320;
  unsigned int v321;
  int v322;
  int v323;
  int v324;
  unint64_t v325;
  int v326;
  _BOOL4 v327;
  BOOL v328;
  uint64_t **v329;
  unsigned int v330;
  int v331;
  int v332;
  int v333;
  unint64_t v334;
  unsigned int v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  int v339;
  unint64_t v340;
  unint64_t v341;
  int v342;
  uint64_t *v343;
  uint64_t **v344;
  __int128 *v345;
  uint64_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int64x2_t v349;
  unsigned __int128 v350;
  unsigned __int128 v351;
  int8x16_t v352;
  int8x16_t v353;
  int64x2_t v354;
  uint64_t (***v355)();
  uint64_t v356;
  _BOOL4 v357;
  uint8x8_t v358;
  uint64_t v359;
  uint8x8_t v360;
  _DWORD *v362;
  int v363;
  unint64_t v364;
  unint64_t v365;
  uint8x8_t v366;
  uint64_t **v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t v370;
  const void *v371;
  size_t v372;
  _QWORD *v373;
  unint64_t v374;
  uint64_t *v375;
  unint64_t v376;
  const void *v377;
  size_t v378;
  _QWORD *v379;
  float v380;
  float v381;
  _BOOL8 v382;
  unint64_t v383;
  unint64_t v384;
  size_t v385;
  void *v386;
  void *v387;
  uint64_t v388;
  _QWORD *v389;
  size_t v390;
  size_t v391;
  size_t v392;
  _QWORD *v393;
  size_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint8x8_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  size_t v402;
  uint64_t v403;
  _QWORD *v404;
  unint64_t v405;
  char *v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  char *v412;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  uint64_t (**v417)();
  unsigned int v418;
  unsigned int v419;
  char v420;
  char v421;
  unint64_t *v422;
  unint64_t v423;
  uint64_t v424;
  double v425;
  int v426;
  signed int v427;
  uint8x8_t v428;
  uint64_t v429;
  char **v430;
  char *v431;
  unint64_t v433;
  uint64_t v435;
  std::__shared_weak_count *v436;
  std::__shared_weak_count_vtbl *v437;
  unint64_t v438;
  unint64_t v439;
  std::__shared_weak_count_vtbl *v440;
  unint64_t v441;
  unint64_t v442;
  uint8x8_t v443;
  char **v444;
  unint64_t v446;
  uint64_t v448;
  char *v449;
  unint64_t *v450;
  unint64_t v451;
  float v452;
  float v453;
  _BOOL8 v454;
  unint64_t v455;
  unint64_t v456;
  size_t v457;
  void *v458;
  void *v459;
  uint64_t v460;
  _QWORD *v461;
  size_t v462;
  size_t v463;
  size_t v464;
  _QWORD *jj;
  size_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint8x8_t v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  size_t v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  BOOL v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  void **v492;
  void *v493;
  BOOL v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  char v500;
  int v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t v505;
  unint64_t *p_shared_owners;
  unint64_t v507;
  void *v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  uint64_t v513;
  BOOL v514;
  unint64_t v515;
  BOOL v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  _QWORD *v529;
  _QWORD *v530;
  unint64_t v531;
  void *v532;
  char *v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  _BOOL8 v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unint64_t v547;
  unint64_t v548;
  void *v549;
  unsigned __int16 *v550;
  _QWORD *v551;
  void *v552;
  uint64_t (**v553)();
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  void **v557;
  signed int v558;
  unsigned __int8 *v559;
  void **v560;
  int v561;
  signed int v562;
  unint64_t v563;
  _BOOL4 v565;
  _BOOL4 v566;
  uint64_t v567;
  unint64_t *v568;
  unint64_t v569;
  BOOL v570;
  BOOL v571;
  BOOL v572;
  _QWORD *v573;
  void *v574;
  _QWORD *v575;
  void *v576;
  unint64_t v577;
  char v578;
  BOOL *v579;
  uint64_t v580;
  uint64_t v581;
  unsigned __int16 **v582;
  uint64_t v583;
  _QWORD *v584;
  _QWORD *v585;
  uint64_t v586;
  unsigned __int16 *v587;
  size_t __n;
  _QWORD *__na;
  void *__s2;
  unsigned __int8 *__s2a;
  unint64_t v592;
  uint64_t v593;
  unsigned __int8 *v594;
  unsigned __int8 *v595;
  unsigned int v596;
  _QWORD *v597;
  uint64_t **v598;
  int v599;
  int v600;
  char v601;
  int v602;
  _QWORD *v603;
  int8x8_t *v604;
  unsigned int v605;
  char v606;
  _QWORD *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unsigned __int8 **v611;
  unint64_t v612;
  uint64_t (***v613)();
  _BOOL4 v614;
  char v615;
  unsigned __int16 *v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  __int128 v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t v623;
  void *__p[2];
  void *v625[2];
  float v626;
  unsigned __int16 v627;
  _OWORD v628[2];
  _QWORD v629[3];
  _QWORD *v630;
  __int128 v631;
  char *v632;
  __int128 *v633;
  uint64_t v634;
  _BYTE v635[32];
  __int128 v636;
  char v637;
  uint64_t (**v638)();
  int8x8_t *v639;
  char v640;
  uint64_t (***v641)();
  uint64_t v642;

  v5 = a1;
  v642 = *MEMORY[0x1E0C80C00];
  v627 = a3;
  v6 = (unsigned __int8 **)*((_QWORD *)a2 + 12);
  v616 = std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(a1 + 54, a3, &v627);
  if (*((_QWORD *)a2 + 4))
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 3);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *((_QWORD *)a2 + 3) = 0;
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * i) = 0;
    }
    *((_QWORD *)a2 + 4) = 0;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)v5[42]);
  v5[42] = 0;
  v5[43] = 0;
  v598 = (uint64_t **)(v5 + 42);
  v5[41] = v5 + 42;
  v11 = (_QWORD *)*((_QWORD *)v616 + 5);
  if (v11)
  {
    v12 = *((_QWORD *)a2 + 8);
    if (v12)
    {
      v13 = v12 - 1;
      v14 = *((_QWORD *)a2 + 7);
      if ((v12 & (v12 - 1)) != 0)
      {
        do
        {
          for (j = (uint64_t *)v11[5]; j; j = (uint64_t *)*j)
          {
            if (*((_BYTE *)j + 40))
            {
              v27 = *((unsigned __int8 *)j + 16);
              v28 = *((unsigned __int8 *)j + 17);
              v29 = (v28
                   - 0x61C8864680B583EBLL
                   + ((v27 - 0x61C8864680B583EBLL) << 6)
                   + ((unint64_t)(v27 - 0x61C8864680B583EBLL) >> 2)) ^ (v27 - 0x61C8864680B583EBLL);
              v30 = *((int *)j + 5);
              v31 = *((int *)j + 6);
              v32 = (v30 - 0x61C8864680B583EBLL + (v29 << 6) + (v29 >> 2)) ^ v29;
              v33 = (v31 - 0x61C8864680B583EBLL + (v32 << 6) + (v32 >> 2)) ^ v32;
              v34 = v33;
              if (v33 >= v12)
                v34 = v33 % v12;
              v35 = *(uint64_t **)(v14 + 8 * v34);
              if (v35)
              {
                while (1)
                {
                  v35 = (uint64_t *)*v35;
                  if (!v35)
                    break;
                  v36 = v35[1];
                  if (v33 == v36)
                  {
                    if (__PAIR64__(*((unsigned __int8 *)v35 + 17), *((unsigned __int8 *)v35 + 16)) == __PAIR64__(v28, v27)
                      && *(uint64_t *)((char *)v35 + 20) == __PAIR64__(v31, v30))
                    {
LABEL_28:
                      v578 = 0;
                      goto LABEL_47;
                    }
                  }
                  else
                  {
                    if (v36 >= v12)
                      v36 %= v12;
                    if (v36 != v34)
                      break;
                  }
                }
              }
            }
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          for (k = (uint64_t *)v11[5]; k; k = (uint64_t *)*k)
          {
            if (*((_BYTE *)k + 40))
            {
              v17 = *((unsigned __int8 *)k + 16);
              v18 = *((unsigned __int8 *)k + 17);
              v19 = (v18
                   - 0x61C8864680B583EBLL
                   + ((v17 - 0x61C8864680B583EBLL) << 6)
                   + ((unint64_t)(v17 - 0x61C8864680B583EBLL) >> 2)) ^ (v17 - 0x61C8864680B583EBLL);
              v20 = *((int *)k + 5);
              v21 = *((int *)k + 6);
              v22 = (v20 - 0x61C8864680B583EBLL + (v19 << 6) + (v19 >> 2)) ^ v19;
              v23 = (v21 - 0x61C8864680B583EBLL + (v22 << 6) + (v22 >> 2)) ^ v22;
              v24 = *(uint64_t **)(v14 + 8 * (v23 & v13));
              if (v24)
              {
                while (1)
                {
                  v24 = (uint64_t *)*v24;
                  if (!v24)
                    break;
                  v25 = v24[1];
                  if (v23 == v25)
                  {
                    if (__PAIR64__(*((unsigned __int8 *)v24 + 17), *((unsigned __int8 *)v24 + 16)) == __PAIR64__(v18, v17)
                      && *(uint64_t *)((char *)v24 + 20) == __PAIR64__(v21, v20))
                    {
                      goto LABEL_28;
                    }
                  }
                  else if ((v25 & v13) != (v23 & v13))
                  {
                    break;
                  }
                }
              }
            }
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
    else
    {
      do
      {
        for (m = (_QWORD *)v11[5]; m; m = (_QWORD *)*m)
          ;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
  }
  v578 = 1;
LABEL_47:
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v625 = 0u;
  v626 = 1.0;
  v38 = *v6;
  v37 = v6[1];
  v39 = *v6;
  if (*v6 != v37)
  {
    v40 = v38 + 144;
    v41 = *v6;
    while (v40 != v37)
    {
      v39 = v40;
      v41 += 144;
      if (v40[112] != v38[112] || v40[113] != v38[113] || *((_DWORD *)v40 + 29) != *((_DWORD *)v38 + 29))
      {
        v39 = v41;
        goto LABEL_57;
      }
      v40 += 144;
      if (*((_DWORD *)v39 + 30) != *((_DWORD *)v38 + 30))
        goto LABEL_57;
    }
    v39 = v6[1];
  }
LABEL_57:
  v580 = (uint64_t)(a2 + 8);
  v579 = a2;
  v609 = (uint64_t)(v5 + 44);
  v610 = (uint64_t)(v5 + 49);
  v582 = (unsigned __int16 **)(v6 + 3);
  v584 = v6 + 6;
  v42 = v6[1];
  v607 = v5;
  v611 = v6;
  v594 = v42;
LABEL_60:
  if (v38 != v42)
  {
    v44 = v38[113];
    v45 = v38[112];
    v46 = *(_QWORD *)(v38 + 116);
    LOBYTE(v631) = 0;
    v637 = 0;
    v602 = v45;
    v47 = (v44
         - 0x61C8864680B583EBLL
         + ((v45 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v45 - 0x61C8864680B583EBLL) >> 2)) ^ (v45 - 0x61C8864680B583EBLL);
    v600 = v46;
    v48 = ((int)v46 - 0x61C8864680B583EBLL + (v47 << 6) + (v47 >> 2)) ^ v47;
    v612 = (SHIDWORD(v46) - 0x61C8864680B583EBLL + (v48 << 6) + (v48 >> 2)) ^ v48;
    v599 = HIDWORD(v46);
    v605 = v44;
    v596 = vcvtmd_s64_f64((double)SHIDWORD(v46) / (double)(1 << v44));
    while (1)
    {
      if (v38 == v39)
      {
        if (v637 && *((__int128 **)&v631 + 1) != v633)
          free(*((void **)&v631 + 1));
        v43 = v594;
        if (v594 != v39)
        {
          v201 = v39 + 144;
          v43 = v39;
          while (1)
          {
            if (v201 == v594)
            {
              v43 = v594;
              goto LABEL_59;
            }
            if (v201[112] != v39[112])
              break;
            v43 += 144;
            if (v201[113] == v39[113] && *((_DWORD *)v201 + 29) == *((_DWORD *)v39 + 29))
            {
              v202 = *((_DWORD *)v201 + 30);
              v201 += 144;
              if (v202 == *((_DWORD *)v39 + 30))
                continue;
            }
            goto LABEL_59;
          }
          v43 = v201;
        }
LABEL_59:
        v42 = v6[1];
        v38 = v39;
        v39 = v43;
        goto LABEL_60;
      }
      v50 = (__int128 *)(v38 + 8);
      v49 = *((unsigned __int16 *)v38 + 4);
      v51 = *v38;
      LOWORD(v628[0]) = *((_WORD *)v38 + 4);
      v52 = (int8x8_t *)v5[59];
      v53 = v52[17];
      if (!*(_QWORD *)&v53)
        goto LABEL_96;
      v54 = (uint8x8_t)vcnt_s8(v53);
      v54.i16[0] = vaddlv_u8(v54);
      if (v54.u32[0] > 1uLL)
      {
        v55 = v49;
        if (*(_QWORD *)&v53 <= v49)
          v55 = v49 % *(_QWORD *)&v53;
      }
      else
      {
        v55 = (v53.i32[0] - 1) & v49;
      }
      v61 = *(uint64_t ***)(*(_QWORD *)&v52[16] + 8 * v55);
      if (!v61 || (v62 = *v61) == 0)
      {
LABEL_96:
        v614 = 0;
        goto LABEL_97;
      }
      if (v54.u32[0] < 2uLL)
      {
        v63 = *(_QWORD *)&v53 - 1;
        while (1)
        {
          v65 = v62[1];
          if (v65 == v49)
          {
            if (*((unsigned __int16 *)v62 + 8) == (_DWORD)v49)
              goto LABEL_120;
          }
          else if ((v65 & v63) != v55)
          {
            goto LABEL_96;
          }
          v62 = (uint64_t *)*v62;
          if (!v62)
            goto LABEL_96;
        }
      }
      while (1)
      {
        v64 = v62[1];
        if (v64 == v49)
          break;
        if (v64 >= *(_QWORD *)&v53)
          v64 %= *(_QWORD *)&v53;
        if (v64 != v55)
          goto LABEL_96;
LABEL_86:
        v62 = (uint64_t *)*v62;
        if (!v62)
          goto LABEL_96;
      }
      if (*((unsigned __int16 *)v62 + 8) != (_DWORD)v49)
        goto LABEL_86;
LABEL_120:
      v614 = *((_BYTE *)v62 + 18) == 0;
LABEL_97:
      v66 = *(int8x8_t *)(v616 + 16);
      if (!*(_QWORD *)&v66)
        goto LABEL_168;
      v67 = (uint8x8_t)vcnt_s8(v66);
      v67.i16[0] = vaddlv_u8(v67);
      if (v67.u32[0] > 1uLL)
      {
        v68 = v49;
        if (*(_QWORD *)&v66 <= v49)
          v68 = v49 % *(_QWORD *)&v66;
      }
      else
      {
        v68 = (v66.i32[0] - 1) & v49;
      }
      v69 = *((_QWORD *)v616 + 3);
      v70 = *(uint64_t ****)(v69 + 8 * v68);
      if (!v70)
        goto LABEL_168;
      v71 = *v70;
      if (!*v70)
        goto LABEL_168;
      v72 = *(_QWORD *)&v66 - 1;
      if (v67.u32[0] < 2uLL)
      {
        while (1)
        {
          v73 = v71[1];
          if (v73 == (uint64_t *)v49)
          {
            if (*((unsigned __int16 *)v71 + 8) == (_DWORD)v49)
              goto LABEL_118;
          }
          else if (((unint64_t)v73 & v72) != v68)
          {
            goto LABEL_168;
          }
          v71 = (uint64_t **)*v71;
          if (!v71)
            goto LABEL_168;
        }
      }
      while (2)
      {
        v74 = (unint64_t)v71[1];
        if (v74 != v49)
        {
          if (v74 >= *(_QWORD *)&v66)
            v74 %= *(_QWORD *)&v66;
          if (v74 != v68)
            goto LABEL_168;
          goto LABEL_112;
        }
        if (*((unsigned __int16 *)v71 + 8) != (_DWORD)v49)
        {
LABEL_112:
          v71 = (uint64_t **)*v71;
          if (!v71)
            goto LABEL_168;
          continue;
        }
        break;
      }
LABEL_118:
      if (v67.u32[0] > 1uLL)
      {
        v75 = v49;
        if (*(_QWORD *)&v66 <= v49)
          v75 = v49 % *(_QWORD *)&v66;
      }
      else
      {
        v75 = (v66.i32[0] - 1) & v49;
      }
      v76 = *(int8x8_t ***)(v69 + 8 * v75);
      if (!v76 || (v77 = *v76) == 0)
LABEL_1071:
        abort();
      if (v67.u32[0] < 2uLL)
      {
        while (1)
        {
          v78 = v77[1];
          if (*(_QWORD *)&v78 == v49)
          {
            if (v77[2].u16[0] == (_DWORD)v49)
              goto LABEL_131;
          }
          else if ((*(_QWORD *)&v78 & v72) != v75)
          {
            goto LABEL_1071;
          }
          v77 = (int8x8_t *)*v77;
          if (!v77)
            goto LABEL_1071;
        }
      }
      while (2)
      {
        v82 = v77[1];
        if (*(_QWORD *)&v82 != v49)
        {
          if (*(_QWORD *)&v82 >= *(_QWORD *)&v66)
            *(_QWORD *)&v82 %= *(_QWORD *)&v66;
          if (*(_QWORD *)&v82 != v75)
            goto LABEL_1071;
LABEL_135:
          v77 = (int8x8_t *)*v77;
          if (!v77)
            goto LABEL_1071;
          continue;
        }
        break;
      }
      if (v77[2].u16[0] != (_DWORD)v49)
        goto LABEL_135;
LABEL_131:
      v79 = v77[4];
      if (!*(_QWORD *)&v79)
        goto LABEL_168;
      v80 = (uint8x8_t)vcnt_s8(v79);
      v80.i16[0] = vaddlv_u8(v80);
      if (v80.u32[0] > 1uLL)
      {
        v81 = v612;
        if (v612 >= *(_QWORD *)&v79)
          v81 = v612 % *(_QWORD *)&v79;
      }
      else
      {
        v81 = v612 & (*(_QWORD *)&v79 - 1);
      }
      v83 = *(uint64_t ***)(*(_QWORD *)&v77[3] + 8 * v81);
      if (!v83)
        goto LABEL_168;
      v84 = *v83;
      if (!v84)
        goto LABEL_168;
      if (v80.u32[0] < 2uLL)
      {
        v85 = *(_QWORD *)&v79 - 1;
        while (1)
        {
          v87 = v84[1];
          if (v612 == v87)
          {
            if (*((unsigned __int8 *)v84 + 16) == v602
              && *((unsigned __int8 *)v84 + 17) == v605
              && *((_DWORD *)v84 + 5) == v600
              && *((_DWORD *)v84 + 6) == v599)
            {
              goto LABEL_164;
            }
          }
          else if ((v87 & v85) != v81)
          {
            goto LABEL_168;
          }
          v84 = (uint64_t *)*v84;
          if (!v84)
            goto LABEL_168;
        }
      }
      while (2)
      {
        v86 = v84[1];
        if (v612 != v86)
        {
          if (v86 >= *(_QWORD *)&v79)
            v86 %= *(_QWORD *)&v79;
          if (v86 != v81)
            goto LABEL_168;
LABEL_148:
          v84 = (uint64_t *)*v84;
          if (!v84)
            goto LABEL_168;
          continue;
        }
        break;
      }
      if (*((unsigned __int8 *)v84 + 16) != v602
        || *((unsigned __int8 *)v84 + 17) != v605
        || *((_DWORD *)v84 + 5) != v600
        || *((_DWORD *)v84 + 6) != v599)
      {
        goto LABEL_148;
      }
LABEL_164:
      v88 = v84[5];
      if ((_BYTE)v88)
      {
        v89 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v584, v38);
        if (v89)
        {
          v90 = (unint64_t)v89[16];
          v91 = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](v582, v49);
          if (0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)v91 + 1) - *(_QWORD *)v91) >> 4) > v90)
          {
            *(_QWORD *)(*(_QWORD *)v91 + 144 * v90 + 136) |= v88;
            goto LABEL_168;
          }
          goto LABEL_1072;
        }
      }
LABEL_168:
      v92 = *((_QWORD *)v38 + 17);
      v93 = (unsigned __int16 *)v6[3];
      v94 = (unsigned __int16 *)v6[4];
      v95 = v93;
      if (v93 != v94)
      {
        v95 = (unsigned __int16 *)v6[3];
        while (*v95 != (_DWORD)v49)
        {
          v95 += 16;
          if (v95 == v94)
            goto LABEL_177;
        }
      }
      if (v95 == v94)
      {
LABEL_177:
        v3 = 0;
        if (v93 != v94)
        {
LABEL_178:
          while (*v93 != (_DWORD)v49)
          {
            v93 += 16;
            if (v93 == v94)
            {
              v93 = (unsigned __int16 *)v6[4];
              break;
            }
          }
        }
      }
      else
      {
        v97 = v95 + 4;
        v96 = *((_QWORD *)v95 + 1);
        if (0x8E38E38E38E38E39 * ((*((_QWORD *)v97 + 1) - v96) >> 4) <= v92)
          goto LABEL_1072;
        v3 = *(unsigned int *)(v96 + 144 * v92 + 128);
        if (v93 != v94)
          goto LABEL_178;
      }
      v99 = v93 + 4;
      v98 = *((_QWORD *)v93 + 1);
      if (0x8E38E38E38E38E39 * ((*((_QWORD *)v99 + 1) - v98) >> 4) <= v92)
LABEL_1072:
        abort();
      v100 = *(unsigned __int8 *)(v98 + 144 * v92 + 136);
      if ((_DWORD)v3 != 3)
        goto LABEL_63;
      if (*(_BYTE *)(v98 + 144 * v92 + 136))
      {
        if (!v637)
          goto LABEL_62;
        goto LABEL_185;
      }
      if (!v637
        || (v112 = (unsigned __int16)v631, (unsigned __int16)v631 != *(unsigned __int16 *)v50)
        || (v113 = (uint64_t *)v636, (_QWORD)v636 != *((_QWORD *)v38 + 10))
        || (v114 = &v632[-*((_QWORD *)&v631 + 1)],
            v115 = (const void *)*((_QWORD *)v38 + 2),
            &v632[-*((_QWORD *)&v631 + 1)] != (char *)(*((_QWORD *)v38 + 3) - (_QWORD)v115))
        || (__s2 = (void *)*((_QWORD *)v38 + 2),
            memcmp(*((const void **)&v631 + 1), v115, (size_t)&v632[-*((_QWORD *)&v631 + 1)])))
      {
        if (!v614)
          goto LABEL_312;
        v116 = *((_QWORD *)v38 + 2);
        v117 = *(unsigned __int8 *)(v116 + 8);
        v118 = v605;
        v119 = v600;
        v120 = v599;
        if (v605 <= v117)
        {
          v120 = *(_DWORD *)v116;
          if (vcvtmd_s64_f64((double)*(int *)v116 / (double)(1 << v117)) == v596)
          {
            v119 = *(_DWORD *)(v116 + 4);
            v118 = *(unsigned __int8 *)(v116 + 8);
          }
          else
          {
            v118 = v605;
            v119 = v600;
            v120 = v599;
          }
        }
        v618 &= 0xFFFFFFFFFFFF0000;
        if (v118 <= 0x1E
          && ((v121 = 1 << v118, v122 = vcvtmd_s64_f64((double)v120 / (double)(1 << v118)), v122 >= 0)
            ? (v123 = v122)
            : (v123 = -v122),
              v123 <= 0x7F))
        {
          v618 |= v118 & 0xFFFF00FF | (v122 << 8);
          v125.i64[0] = ((v120 % v121 + v121) % v121) | ((unint64_t)((v120 % v121 + v121) % v121) << 16);
          v125.i64[1] = ((v119 % v121 + v121) % v121) | ((unint64_t)((v119 % v121 + v121) % v121) << 16);
          v126.i64[0] = 0xFFFF0000FFFFLL;
          v126.i64[1] = 0xFFFF0000FFFFLL;
          v127 = (int64x2_t)vandq_s8(v125, v126);
          v128 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v127, 8uLL), (int8x16_t)v127) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
          v129 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v128, 4uLL), (int8x16_t)v128) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
          v126.i64[0] = 0x3333333333333333;
          v126.i64[1] = 0x3333333333333333;
          v130 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v129, 2uLL), (int8x16_t)v129), v126);
          v131 = (int8x16_t)vshlq_u64((uint64x2_t)v130, (uint64x2_t)xmmword_19FFB2DB0);
          v130.i64[1] *= 2;
          v132 = (int64x2_t)vandq_s8(vorrq_s8(v131, v130), (int8x16_t)xmmword_19FFB2DC0);
          v124 = vorrq_s8((int8x16_t)v132, (int8x16_t)vdupq_laneq_s64(v132, 1)).u64[0];
        }
        else
        {
          v124 = 0;
        }
        v133 = v598;
        v134 = *v598;
        v135 = v598;
        if (!*v598)
        {
LABEL_246:
          v139 = (uint64_t *)operator new(0x40uLL);
          v139[4] = v124;
          v139[5] = v618;
          v139[6] = 0;
          v139[7] = 0;
          *v139 = 0;
          v139[1] = 0;
          v139[2] = (uint64_t)v135;
          *v133 = v139;
          v5 = v607;
          v140 = *(_QWORD *)v607[41];
          v141 = v139;
          if (v140)
          {
            v607[41] = v140;
            v141 = *v133;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v607[42], v141);
          ++v607[43];
LABEL_250:
          v6 = v611;
          v100 = 0;
          if (v49 >= 0x52)
            abort();
          *(uint64_t *)((char *)v139 + ((v49 >> 3) & 0x1FF8) + 48) |= 1 << v49;
          if (!v637)
            goto LABEL_62;
          goto LABEL_185;
        }
        while (2)
        {
          while (2)
          {
            v135 = (uint64_t **)v134;
            v136 = *((unsigned __int8 *)v134 + 40);
            if (v136 > v618)
            {
              v137 = *((unsigned __int8 *)v135 + 41);
              if (BYTE1(v618) == v137)
              {
                v137 = BYTE1(v618);
                if (v124 <= (unint64_t)v135[4] >> (2 * (v136 - v618)))
                  goto LABEL_216;
              }
              else if (SBYTE1(v618) < (char)v137)
              {
                goto LABEL_216;
              }
              break;
            }
            v137 = *((unsigned __int8 *)v135 + 41);
            if (v136 >= v618)
            {
              if (v137 != BYTE1(v618))
                goto LABEL_230;
              v137 = BYTE1(v618);
              if (v124 < (unint64_t)v135[4])
                goto LABEL_216;
            }
            else
            {
              if (v137 == BYTE1(v618))
              {
                v137 = BYTE1(v618);
                if (v124 >> (2 * (v618 - v136)) < (unint64_t)v135[4])
                  goto LABEL_216;
                break;
              }
LABEL_230:
              if ((char)v137 > SBYTE1(v618))
              {
LABEL_216:
                v134 = *v135;
                v133 = v135;
                if (!*v135)
                  goto LABEL_246;
                continue;
              }
            }
            break;
          }
          if (v136 >= v618)
          {
            if (v136 > v618)
            {
              v138 = *((unsigned __int8 *)v135 + 41);
              if (BYTE1(v618) == v138)
              {
                if ((unint64_t)v135[4] >> (2 * (v136 - v618)) >= v124)
                  goto LABEL_249;
              }
              else if (SBYTE1(v618) <= (char)v138)
              {
LABEL_249:
                v139 = (uint64_t *)v135;
                v5 = v607;
                goto LABEL_250;
              }
              goto LABEL_245;
            }
            if (v137 == BYTE1(v618))
            {
              if ((unint64_t)v135[4] >= v124)
                goto LABEL_249;
              goto LABEL_245;
            }
          }
          else if (v137 == BYTE1(v618))
          {
            if ((unint64_t)v135[4] > v124 >> (2 * (v618 - v136)))
              goto LABEL_249;
LABEL_245:
            v133 = v135 + 1;
            v134 = v135[1];
            if (!v134)
              goto LABEL_246;
            continue;
          }
          break;
        }
        if ((char)v137 >= SBYTE1(v618))
          goto LABEL_249;
        goto LABEL_245;
      }
      __n = (size_t)v114;
      v151 = *((_QWORD *)v38 + 11);
      v592 = (unint64_t)__p[1];
      if (!__p[1])
        goto LABEL_315;
      v152 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v152.i16[0] = vaddlv_u8(v152);
      if (v152.u32[0] > 1uLL)
      {
        v49 = *((_QWORD *)v38 + 11);
        if ((void *)v151 >= __p[1])
          v49 = v151 % (unint64_t)__p[1];
      }
      else
      {
        v49 = ((unint64_t)__p[1] - 1) & v151;
      }
      v166 = (uint64_t ***)*((_QWORD *)__p[0] + v49);
      if (!v166 || (v167 = *v166) == 0)
      {
LABEL_314:
        v5 = v607;
LABEL_315:
        v174 = (uint64_t (**)())operator new(0x68uLL);
        v638 = v174;
        v639 = (int8x8_t *)v625;
        *v174 = 0;
        v174[1] = (uint64_t (*)())v151;
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v174 + 2), (uint64_t)(v38 + 8));
        v640 = 1;
        v175 = (float)((unint64_t)v625[1] + 1);
        v6 = v611;
        v100 = 0;
        v176 = v592;
        if (!v592 || (float)(v626 * (float)v592) < v175)
        {
          v177 = (v592 & (v592 - 1)) != 0;
          if (v592 < 3)
            v177 = 1;
          v178 = v177 | (2 * v592);
          v179 = vcvtps_u32_f32(v175 / v626);
          if (v178 <= v179)
            prime = v179;
          else
            prime = v178;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          if ((void *)prime > __p[1])
          {
LABEL_327:
            if (!(prime >> 61))
            {
              v181 = operator new(8 * prime);
              v182 = __p[0];
              __p[0] = v181;
              if (v182)
                operator delete(v182);
              v183 = 0;
              __p[1] = (void *)prime;
              do
                *((_QWORD *)__p[0] + v183++) = 0;
              while (prime != v183);
              v184 = (_QWORD **)v625[0];
              if (!v625[0])
                goto LABEL_352;
              v185 = *((_QWORD *)v625[0] + 1);
              v186 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                v187 = v185 & v186;
                *((_QWORD *)__p[0] + v187) = v625;
                for (n = *v184; *v184; n = *v184)
                {
                  v189 = n[1] & v186;
                  if (v189 == v187)
                  {
                    v184 = (_QWORD **)n;
                  }
                  else if (*((_QWORD *)__p[0] + v189))
                  {
                    *v184 = (_QWORD *)*n;
                    v190 = 8 * v189;
                    *n = **(_QWORD **)((char *)__p[0] + v190);
                    **(_QWORD **)((char *)__p[0] + v190) = n;
                  }
                  else
                  {
                    *((_QWORD *)__p[0] + v189) = v184;
                    v184 = (_QWORD **)n;
                    v187 = v189;
                  }
                }
                goto LABEL_352;
              }
              if (v185 >= prime)
                v185 %= prime;
              *((_QWORD *)__p[0] + v185) = v625;
              v194 = *v184;
              if (!*v184)
              {
LABEL_352:
                v176 = prime;
                goto LABEL_353;
              }
              while (2)
              {
                v196 = v194[1];
                if (v196 >= prime)
                  v196 %= prime;
                if (v196 != v185)
                {
                  if (!*((_QWORD *)__p[0] + v196))
                  {
                    *((_QWORD *)__p[0] + v196) = v184;
LABEL_357:
                    v184 = (_QWORD **)v194;
                    v194 = (_QWORD *)*v194;
                    v185 = v196;
                    if (!v194)
                      goto LABEL_352;
                    continue;
                  }
                  *v184 = (_QWORD *)*v194;
                  v195 = 8 * v196;
                  *v194 = **(_QWORD **)((char *)__p[0] + v195);
                  **(_QWORD **)((char *)__p[0] + v195) = v194;
                  v194 = v184;
                }
                break;
              }
              v196 = v185;
              goto LABEL_357;
            }
LABEL_1075:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          if ((void *)prime >= __p[1])
          {
            v176 = (unint64_t)__p[1];
          }
          else
          {
            v191 = vcvtps_u32_f32((float)(unint64_t)v625[1] / v626);
            if (__p[1] < (void *)3
              || (v192 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v192.i16[0] = vaddlv_u8(v192), v192.u32[0] > 1uLL))
            {
              v191 = std::__next_prime(v191);
            }
            else
            {
              v193 = 1 << -(char)__clz(v191 - 1);
              if (v191 >= 2)
                v191 = v193;
            }
            if (prime <= v191)
              prime = v191;
            if ((void *)prime >= __p[1])
            {
              v176 = (unint64_t)__p[1];
            }
            else
            {
              if (prime)
                goto LABEL_327;
              v200 = __p[0];
              __p[0] = 0;
              if (v200)
                operator delete(v200);
              v176 = 0;
              __p[1] = 0;
            }
          }
LABEL_353:
          if ((v176 & (v176 - 1)) != 0)
          {
            if (v151 >= v176)
              v49 = v151 % v176;
            else
              v49 = v151;
          }
          else
          {
            v49 = (v176 - 1) & v151;
          }
        }
        v197 = (uint64_t (**)())*((_QWORD *)__p[0] + v49);
        v198 = v638;
        if (v197)
        {
          *v638 = *v197;
          goto LABEL_374;
        }
        *v638 = (uint64_t (*)())v625[0];
        v625[0] = v198;
        *((_QWORD *)__p[0] + v49) = v625;
        if (*v198)
        {
          v199 = *((_QWORD *)*v198 + 1);
          if ((v176 & (v176 - 1)) != 0)
          {
            if (v199 >= v176)
              v199 %= v176;
          }
          else
          {
            v199 &= v176 - 1;
          }
          v197 = (uint64_t (**)())((char *)__p[0] + 8 * v199);
LABEL_374:
          *v197 = (uint64_t (*)())v198;
        }
        ++v625[1];
        if (!v637)
          goto LABEL_62;
        goto LABEL_185;
      }
      if (v152.u32[0] < 2uLL)
      {
        v168 = (unint64_t)__p[1] - 1;
        while (1)
        {
          v171 = (unint64_t)v167[1];
          if (v171 == v151)
          {
            if (*((unsigned __int16 *)v167 + 8) == v112 && v167[11] == v113)
            {
              v172 = v167[3];
              if ((char *)v167[4] - (char *)v172 == __n)
              {
                v173 = memcmp(v172, __s2, __n);
                v168 = (unint64_t)__p[1] - 1;
                if (!v173)
                  goto LABEL_311;
              }
            }
          }
          else if ((v171 & v168) != v49)
          {
            goto LABEL_314;
          }
          v167 = (uint64_t **)*v167;
          if (!v167)
            goto LABEL_314;
        }
      }
      while (2)
      {
        v169 = (unint64_t)v167[1];
        if (v169 != v151)
        {
          if ((void *)v169 >= __p[1])
            v169 %= (unint64_t)__p[1];
          if (v169 != v49)
            goto LABEL_314;
LABEL_295:
          v167 = (uint64_t **)*v167;
          if (!v167)
            goto LABEL_314;
          continue;
        }
        break;
      }
      if (*((unsigned __int16 *)v167 + 8) != v112)
        goto LABEL_295;
      if (v167[11] != v113)
        goto LABEL_295;
      v170 = v167[3];
      if ((char *)v167[4] - (char *)v170 != __n || memcmp(v170, __s2, __n))
        goto LABEL_295;
LABEL_311:
      v5 = v607;
LABEL_312:
      v6 = v611;
      v100 = 0;
      if (!v637)
      {
LABEL_62:
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v631, (uint64_t)(v38 + 8));
        v637 = 1;
        goto LABEL_63;
      }
LABEL_185:
      LOWORD(v631) = *((_WORD *)v38 + 4);
      if (&v631 == v50)
        goto LABEL_287;
      if (*((__int128 **)&v631 + 1) != v633)
        free(*((void **)&v631 + 1));
      v101 = v635;
      *((_QWORD *)&v631 + 1) = v635;
      v632 = v635;
      v633 = (__int128 *)v635;
      v634 = 32;
      v103 = (char *)*((_QWORD *)v38 + 2);
      v102 = (char *)*((_QWORD *)v38 + 3);
      v104 = v102 - v103;
      if ((unint64_t)(v102 - v103) < 0x21)
        goto LABEL_268;
      v105 = v100;
      if (v104 <= 0x40)
        v106 = 64;
      else
        v106 = v102 - v103;
      v101 = malloc_type_malloc(v106, 0x100004077774924uLL);
      v107 = (char *)*((_QWORD *)&v631 + 1);
      v108 = v632;
      if (*((char **)&v631 + 1) == v632)
        goto LABEL_267;
      v109 = (unint64_t)&v632[-*((_QWORD *)&v631 + 1)];
      if ((unint64_t)&v632[-*((_QWORD *)&v631 + 1)] < 8)
      {
        v110 = v101;
        goto LABEL_266;
      }
      v110 = v101;
      if ((unint64_t)&v101[-*((_QWORD *)&v631 + 1)] < 0x20)
        goto LABEL_266;
      if (v109 >= 0x20)
      {
        v111 = v109 & 0xFFFFFFFFFFFFFFE0;
        v142 = (__int128 *)(*((_QWORD *)&v631 + 1) + 16);
        v143 = v101 + 16;
        v144 = v109 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v145 = *v142;
          *(v143 - 1) = *(v142 - 1);
          *v143 = v145;
          v142 += 2;
          v143 += 2;
          v144 -= 32;
        }
        while (v144);
        if (v109 == v111)
          goto LABEL_267;
        if ((v109 & 0x18) != 0)
          goto LABEL_258;
        v107 += v111;
        v110 = &v101[v111];
        do
        {
LABEL_266:
          v153 = *v107++;
          *v110++ = v153;
        }
        while (v107 != v108);
        goto LABEL_267;
      }
      v111 = 0;
LABEL_258:
      v146 = v109 & 0xFFFFFFFFFFFFFFF8;
      v110 = &v101[v109 & 0xFFFFFFFFFFFFFFF8];
      v147 = v111 - (v109 & 0xFFFFFFFFFFFFFFF8);
      v148 = (uint64_t *)&v107[v111];
      v149 = &v101[v111];
      do
      {
        v150 = *v148++;
        *v149++ = v150;
        v147 += 8;
      }
      while (v147);
      if (v109 != v146)
      {
        v107 += v146;
        goto LABEL_266;
      }
LABEL_267:
      *((_QWORD *)&v631 + 1) = v101;
      v632 = v101;
      v634 = v106;
      v100 = v105;
LABEL_268:
      if (v103 == v102)
        goto LABEL_286;
      if (v104 < 8)
      {
        v155 = v101;
        goto LABEL_284;
      }
      if ((unint64_t)(v101 - v103) < 0x20)
      {
        v155 = v101;
        goto LABEL_284;
      }
      if (v104 >= 0x20)
      {
        v154 = v104 & 0xFFFFFFFFFFFFFFE0;
        v156 = (__int128 *)(v103 + 16);
        v157 = v101 + 16;
        v158 = v104 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v159 = *v156;
          *(v157 - 1) = *(v156 - 1);
          *v157 = v159;
          v156 += 2;
          v157 += 2;
          v158 -= 32;
        }
        while (v158);
        if (v104 == v154)
          goto LABEL_285;
        if ((v104 & 0x18) != 0)
          goto LABEL_279;
        v103 += v154;
        v155 = &v101[v154];
        do
        {
LABEL_284:
          v165 = *v103++;
          *v155++ = v165;
        }
        while (v103 != v102);
        goto LABEL_285;
      }
      v154 = 0;
LABEL_279:
      v160 = v104 & 0xFFFFFFFFFFFFFFF8;
      v155 = &v101[v104 & 0xFFFFFFFFFFFFFFF8];
      v161 = v154 - (v104 & 0xFFFFFFFFFFFFFFF8);
      v162 = (uint64_t *)&v103[v154];
      v163 = &v101[v154];
      do
      {
        v164 = *v162++;
        *v163++ = v164;
        v161 += 8;
      }
      while (v161);
      if (v104 != v160)
      {
        v103 += v160;
        goto LABEL_284;
      }
LABEL_285:
      v101 = v632;
LABEL_286:
      v632 = &v101[v104];
      v6 = v611;
LABEL_287:
      v636 = *((_OWORD *)v38 + 5);
LABEL_63:
      if (!v51)
      {
        v56 = (_DWORD)v3 == 2 || v100 == 0;
        if (v56)
          v57 = v3;
        else
          v57 = 1;
        LODWORD(v638) = v57;
        if (v614)
          v58 = v610;
        else
          v58 = v609;
        v59 = std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus const&>,std::tuple<>>(v58, v57, &v638);
        v60 = std::__hash_table<std::__hash_value_type<md::MapDataType,unsigned long>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,unsigned long>,std::hash<md::MapDataType>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,unsigned long>,std::equal_to<md::MapDataType>,std::hash<md::MapDataType>,true>,std::allocator<std::__hash_value_type<md::MapDataType,unsigned long>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((float *)v59 + 6, v628[0], v628);
        ++v60[3];
      }
      v38 += 144;
    }
  }
  v203 = (uint64_t **)v5[41];
  if (v203 != v598)
  {
    do
    {
      v209 = v203[1];
      v210 = v209;
      v211 = (uint64_t *)v203;
      if (v209)
      {
        do
        {
          v212 = (uint64_t **)v210;
          v210 = (uint64_t *)*v210;
        }
        while (v210);
      }
      else
      {
        do
        {
          v212 = (uint64_t **)v211[2];
          v56 = *v212 == v211;
          v211 = (uint64_t *)v212;
        }
        while (!v56);
      }
      if (v212 != v598)
      {
        v213 = *((unsigned __int8 *)v203 + 41);
        v214 = *((unsigned __int8 *)v203 + 40);
        v215 = v203[4];
        do
        {
          if (v213 != *((unsigned __int8 *)v212 + 41))
            break;
          v216 = *((unsigned __int8 *)v212 + 40);
          v516 = v216 >= v214;
          v217 = v216 - v214;
          if (v217 != 0 && v516)
          {
            if (v215 != (uint64_t *)((unint64_t)v212[4] >> (2 * v217)))
              break;
          }
          else if (v217 || v215 != v212[4])
          {
            break;
          }
          v218 = v212[7];
          v212[6] = (uint64_t *)((unint64_t)v212[6] | (unint64_t)v203[6]);
          v212[7] = (uint64_t *)((unint64_t)v218 | (unint64_t)v203[7]);
          v219 = v212[1];
          if (v219)
          {
            do
            {
              v220 = (uint64_t **)v219;
              v219 = (uint64_t *)*v219;
            }
            while (v219);
          }
          else
          {
            do
            {
              v220 = (uint64_t **)v212[2];
              v56 = *v220 == (uint64_t *)v212;
              v212 = v220;
            }
            while (!v56);
          }
          v212 = v220;
        }
        while (v220 != v598);
      }
      if (v209)
      {
        do
        {
          v221 = (uint64_t **)v209;
          v209 = (uint64_t *)*v209;
        }
        while (v209);
      }
      else
      {
        do
        {
          v221 = (uint64_t **)v203[2];
          v56 = *v221 == (uint64_t *)v203;
          v203 = v221;
        }
        while (!v56);
      }
      v203 = v221;
    }
    while (v221 != v598);
  }
  v622 = 0;
  v623 = 0;
  v204 = v627;
  if (v627 != 5)
  {
    v205 = v5[59];
    v629[0] = &off_1E42CEC48;
    v629[1] = &v622;
    v206 = v629;
    v630 = v629;
    v207 = *(uint64_t **)(v205 + 144);
    if (!v207)
    {
      v208 = 4;
      goto LABEL_442;
    }
    do
    {
      if (*((unsigned __int16 *)v207 + 10) == v204 && *((_BYTE *)v207 + 18) == 0)
      {
        LOWORD(v631) = *((_WORD *)v207 + 8);
        if (!v630)
        {
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_1077:
          __break(1u);
        }
        (*(void (**)(_QWORD *, __int128 *))(*v630 + 48))(v630, &v631);
      }
      v207 = (uint64_t *)*v207;
    }
    while (v207);
    v206 = v630;
    if (v630 == v629)
    {
      v208 = 4;
      v206 = v629;
LABEL_442:
      (*(void (**)(void))(*v206 + 8 * v208))();
    }
    else if (v630)
    {
      v208 = 5;
      goto LABEL_442;
    }
  }
  v223 = *v6;
  __s2a = v6[1];
  if (*v6 == __s2a)
    goto LABEL_1052;
  __na = v607 + 36;
  v603 = v607 + 11;
  v583 = v607[33];
  v585 = v607 + 3;
  v581 = v607[32];
  while (2)
  {
    v224 = v223[113];
    v225 = *((_DWORD *)v223 + 30);
    if (v223[113])
      v226 = 0;
    else
      v226 = *((_DWORD *)v223 + 29) == 0;
    if (v226 && v225 == 0)
      goto LABEL_447;
    if (*v223 == 1)
    {
      v3 = (unint64_t)__p[1];
      if (__p[1])
      {
        v228 = *((_QWORD *)v223 + 11);
        v229 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v229.i16[0] = vaddlv_u8(v229);
        if (v229.u32[0] > 1uLL)
        {
          v230 = *((_QWORD *)v223 + 11);
          if ((void *)v228 >= __p[1])
            v230 = v228 % (unint64_t)__p[1];
        }
        else
        {
          v230 = ((unint64_t)__p[1] - 1) & v228;
        }
        v231 = (uint64_t ***)*((_QWORD *)__p[0] + v230);
        if (v231)
        {
          v232 = *v231;
          if (*v231)
          {
            if (v229.u32[0] >= 2uLL)
            {
              while (1)
              {
                v233 = (unint64_t)v232[1];
                if (v233 == v228)
                {
                  if (*((unsigned __int16 *)v232 + 8) == *((unsigned __int16 *)v223 + 4)
                    && v232[11] == *((uint64_t **)v223 + 10))
                  {
                    v234 = v232[3];
                    v235 = (char *)v232[4] - (char *)v234;
                    v236 = (const void *)*((_QWORD *)v223 + 2);
                    if (v235 == *((_QWORD *)v223 + 3) - (_QWORD)v236 && !memcmp(v234, v236, v235))
                      goto LABEL_447;
                  }
                }
                else
                {
                  if (v233 >= v3)
                    v233 %= v3;
                  if (v233 != v230)
                    goto LABEL_483;
                }
                v232 = (uint64_t **)*v232;
                if (!v232)
                  goto LABEL_483;
              }
            }
            v3 = (unint64_t)__p[1] - 1;
            do
            {
              v237 = (unint64_t)v232[1];
              if (v237 == v228)
              {
                if (*((unsigned __int16 *)v232 + 8) == *((unsigned __int16 *)v223 + 4)
                  && v232[11] == *((uint64_t **)v223 + 10))
                {
                  v238 = v232[3];
                  v239 = (char *)v232[4] - (char *)v238;
                  v240 = (const void *)*((_QWORD *)v223 + 2);
                  if (v239 == *((_QWORD *)v223 + 3) - (_QWORD)v240 && !memcmp(v238, v240, v239))
                    goto LABEL_447;
                }
              }
              else if ((v237 & v3) != v230)
              {
                break;
              }
              v232 = (uint64_t **)*v232;
            }
            while (v232);
          }
        }
      }
    }
LABEL_483:
    v241 = *((unsigned __int16 *)v223 + 4);
    v242 = (int32x2_t *)*((_QWORD *)v223 + 2);
    v243 = v242[1].i32[0];
    LOBYTE(v620) = v242[1].i32[1];
    BYTE1(v620) = v243;
    v244 = *v242;
    *(int32x2_t *)((char *)&v620 + 4) = vrev64_s32(*v242);
    v587 = (unsigned __int16 *)(v223 + 8);
    v245 = *((_QWORD *)v223 + 17);
    v246 = (unsigned __int16 *)v611[3];
    v247 = (unsigned __int16 *)v611[4];
    if (v246 == v247)
    {
      v252 = *((_QWORD *)v246 + 1);
      v250 = v607;
      v251 = v598;
      if (0x8E38E38E38E38E39 * ((*((_QWORD *)v246 + 2) - v252) >> 4) <= v245)
        goto LABEL_1072;
      v586 = *((_QWORD *)v246 + 1);
      v613 = (uint64_t (***)())(v252 + 144 * v245 + 112);
    }
    else
    {
      v248 = (unsigned __int16 *)v611[3];
      while (*v248 != (_DWORD)v241)
      {
        v248 += 16;
        if (v248 == v247)
        {
          v248 = (unsigned __int16 *)v611[4];
          break;
        }
      }
      v249 = *((_QWORD *)v248 + 1);
      v250 = v607;
      v251 = v598;
      if (0x8E38E38E38E38E39 * ((*((_QWORD *)v248 + 2) - v249) >> 4) <= v245)
        goto LABEL_1072;
      v586 = *((_QWORD *)v248 + 1);
      v613 = (uint64_t (***)())(v249 + 144 * v245 + 112);
      if (v246 != v247)
      {
        while (*v246 != (_DWORD)v241)
        {
          v246 += 16;
          if (v246 == v247)
          {
            v246 = (unsigned __int16 *)v611[4];
            break;
          }
        }
      }
    }
    v254 = v246 + 4;
    v253 = *((_QWORD *)v246 + 1);
    v593 = *((_QWORD *)v223 + 17);
    if (0x8E38E38E38E38E39 * ((*((_QWORD *)v254 + 1) - v253) >> 4) <= v245)
      goto LABEL_1072;
    if (v224 > v243
      || vcvtmd_s64_f64((double)v244.i32[0] / (double)(1 << v243)) != vcvtmd_s64_f64((double)v225 / (double)(1 << v224)))
    {
      v620 = *((_OWORD *)v223 + 7);
      v621 = *((_QWORD *)v223 + 16);
    }
    v608 = *(unsigned __int8 *)(v253 + 144 * v245 + 136);
    if (v583 != v581)
    {
      v255 = v250[32];
      v256 = v250[33];
      if (v255 != v256)
      {
        v257 = 1.0 / (double)(1 << SBYTE1(v620));
        v258 = v257 * (double)SDWORD2(v620);
        v259 = v257 * (double)((1 << SBYTE1(v620)) + ~DWORD1(v620));
        v260 = v258 + v257;
        v261 = v259 + v257;
        if (v241 > 0x7F)
        {
          do
          {
            if (v258 >= *(double *)v255
              && v260 <= *(double *)(v255 + 16)
              && v259 >= *(double *)(v255 + 8)
              && v261 <= *(double *)(v255 + 24))
            {
              abort();
            }
            v255 += 64;
          }
          while (v255 != v256);
        }
        else
        {
          v262 = v241 >> 6;
          v263 = 1 << v241;
          do
          {
            if (v258 >= *(double *)v255
              && v260 <= *(double *)(v255 + 16)
              && v259 >= *(double *)(v255 + 8)
              && v261 <= *(double *)(v255 + 24))
            {
              v631 = 0uLL;
              *((_QWORD *)&v631 + v262) |= v263;
              if ((*(_OWORD *)(v255 + 48) & v631) != 0)
                goto LABEL_447;
              v631 = 0uLL;
              *((_QWORD *)&v631 + v262) |= v263;
              if ((*(_QWORD *)(v255 + 32) & (unint64_t)v631) == 0
                && (*(_QWORD *)(v255 + 40) & *((_QWORD *)&v631 + 1)) == 0)
              {
                goto LABEL_447;
              }
            }
            v255 += 64;
          }
          while (v255 != v256);
        }
      }
    }
    if (v250[39])
    {
      v264 = (_QWORD *)v250[38];
      if (v264)
      {
        do
        {
          v265 = (_QWORD *)*v264;
          operator delete(v264);
          v264 = v265;
        }
        while (v265);
      }
      v250[38] = 0;
      v266 = v250[37];
      if (v266)
      {
        for (ii = 0; ii != v266; ++ii)
          *(_QWORD *)(*__na + 8 * ii) = 0;
      }
      v250[39] = 0;
    }
    v595 = v223;
    if (!v250[43])
    {
      v273 = v620;
      goto LABEL_652;
    }
    v638 = &off_1E4289CF8;
    v639 = (int8x8_t *)&v622;
    v641 = &v638;
    if (BYTE1(v620) <= 0x1Eu
      && ((v268 = 1 << SBYTE1(v620),
           v269 = vcvtmd_s64_f64((double)SDWORD2(v620) / (double)(1 << SBYTE1(v620))),
           v269 >= 0)
        ? (v270 = v269)
        : (v270 = -v269),
          v270 <= 0x7F))
    {
      v274.i64[0] = ((SDWORD2(v620) % v268 + v268) % v268) | ((unint64_t)((SDWORD2(v620) % v268 + v268) % v268) << 16);
      v274.i64[1] = ((SDWORD1(v620) % v268 + v268) % v268) | ((unint64_t)((SDWORD1(v620) % v268 + v268) % v268) << 16);
      v275.i64[0] = 0xFFFF0000FFFFLL;
      v275.i64[1] = 0xFFFF0000FFFFLL;
      v276 = (int64x2_t)vandq_s8(v274, v275);
      v277 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v276, 8uLL), (int8x16_t)v276) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
      v278 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v277, 4uLL), (int8x16_t)v277) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
      v275.i64[0] = 0x3333333333333333;
      v275.i64[1] = 0x3333333333333333;
      v279 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v278, 2uLL), (int8x16_t)v278), v275);
      v280 = (int8x16_t)vshlq_u64((uint64x2_t)v279, (uint64x2_t)xmmword_19FFB2DB0);
      v279.i64[1] *= 2;
      v281 = (int64x2_t)vandq_s8(vorrq_s8(v280, v279), (int8x16_t)xmmword_19FFB2DC0);
      v271 = vorrq_s8((int8x16_t)v281, (int8x16_t)vdupq_laneq_s64(v281, 1)).u64[0];
      v272 = BYTE1(v620);
    }
    else
    {
      v271 = 0;
      v272 = 0;
      LOBYTE(v269) = 0;
    }
    v282 = (uint64_t **)v250[41];
    if (v251 != v282)
    {
      v283 = v251;
      do
      {
        v284 = *v283;
        v285 = *v283;
        v286 = v283;
        if (*v283)
        {
          do
          {
            v287 = v285;
            v285 = (uint64_t *)v285[1];
          }
          while (v285);
        }
        else
        {
          do
          {
            v287 = v286[2];
            v56 = *v287 == (_QWORD)v286;
            v286 = (uint64_t **)v287;
          }
          while (v56);
        }
        if (*((unsigned __int8 *)v287 + 40) < v272)
        {
          v288 = *v283;
          v289 = v283;
          if (v284)
          {
            do
            {
              v290 = v288;
              v288 = (uint64_t *)v288[1];
            }
            while (v288);
          }
          else
          {
            do
            {
              v290 = v289[2];
              v56 = *v290 == (_QWORD)v289;
              v289 = (uint64_t **)v290;
            }
            while (v56);
          }
          if (*((unsigned __int8 *)v290 + 41) == v269)
          {
            v291 = *((unsigned __int8 *)v290 + 40);
            v516 = v272 >= v291;
            v292 = v272 - v291;
            if (v292 != 0 && v516)
            {
              if (v290[4] == v271 >> (2 * v292))
                goto LABEL_559;
            }
            else if (!v292 && v290[4] == v271)
            {
LABEL_559:
              if (v284)
              {
                do
                {
                  v294 = (uint64_t **)v284;
                  v284 = (uint64_t *)v284[1];
                }
                while (v284);
              }
              else
              {
                do
                {
                  v294 = (uint64_t **)v283[2];
                  v56 = *v294 == (uint64_t *)v283;
                  v283 = v294;
                }
                while (v56);
              }
              if (v294[6] == v622 && ((v623 ^ *((_DWORD *)v294 + 14)) & 0x3FFFF) == 0)
              {
                std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)__na, (unsigned __int8 *)&v620, (uint64_t)&v620);
                goto LABEL_645;
              }
              break;
            }
          }
        }
        if (v284)
        {
          do
          {
            v293 = (uint64_t **)v284;
            v284 = (uint64_t *)v284[1];
          }
          while (v284);
        }
        else
        {
          do
          {
            v293 = (uint64_t **)v283[2];
            v56 = *v293 == (uint64_t *)v283;
            v283 = v293;
          }
          while (v56);
        }
        v283 = v293;
      }
      while (v293 != v282);
    }
    *(_QWORD *)&v631 = &off_1E4289D40;
    *((_QWORD *)&v631 + 1) = &v622;
    v633 = &v631;
    if (BYTE1(v620) <= 0x1Eu
      && ((v295 = 1 << SBYTE1(v620),
           v296 = vcvtmd_s64_f64((double)SDWORD2(v620) / (double)(1 << SBYTE1(v620))),
           v296 >= 0)
        ? (v297 = v296)
        : (v297 = -v296),
          v297 <= 0x7F))
    {
      v299 = BYTE1(v620) | (v296 << 8);
      v300.i64[0] = ((SDWORD2(v620) % v295 + v295) % v295) | ((unint64_t)((SDWORD2(v620) % v295 + v295) % v295) << 16);
      v300.i64[1] = ((SDWORD1(v620) % v295 + v295) % v295) | ((unint64_t)((SDWORD1(v620) % v295 + v295) % v295) << 16);
      v301.i64[0] = 0xFFFF0000FFFFLL;
      v301.i64[1] = 0xFFFF0000FFFFLL;
      v302 = (int64x2_t)vandq_s8(v300, v301);
      v303 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v302, 8uLL), (int8x16_t)v302) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
      v304 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v303, 4uLL), (int8x16_t)v303) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
      v301.i64[0] = 0x3333333333333333;
      v301.i64[1] = 0x3333333333333333;
      v305 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v304, 2uLL), (int8x16_t)v304), v301);
      v306 = (int8x16_t)vshlq_u64((uint64x2_t)v305, (uint64x2_t)xmmword_19FFB2DB0);
      v305.i64[1] *= 2;
      v307 = (int64x2_t)vandq_s8(vorrq_s8(v306, v305), (int8x16_t)xmmword_19FFB2DC0);
      v298 = vorrq_s8((int8x16_t)v307, (int8x16_t)vdupq_laneq_s64(v307, 1)).u64[0];
    }
    else
    {
      v298 = 0;
      v299 = 0;
      if (BYTE1(v620) > 0x1Eu)
        goto LABEL_577;
    }
    v308 = 1 << SBYTE1(v620);
    v309 = vcvtmd_s64_f64((double)SDWORD2(v620) / (double)(1 << SBYTE1(v620)));
    if (v309 >= 0)
      v310 = v309;
    else
      v310 = -v309;
    if (v310 > 0x7F)
    {
LABEL_577:
      v311 = 0;
      v312 = 0;
      v313 = *v251;
      if (*v251)
        goto LABEL_578;
LABEL_643:
      v345 = &v631;
      v346 = 4;
LABEL_644:
      (*(void (**)(void))(*(_QWORD *)v345 + 8 * v346))();
      goto LABEL_645;
    }
    v311 = BYTE1(v620) | (v309 << 8);
    v347.i64[0] = ((SDWORD2(v620) % v308 + v308) % v308) | ((unint64_t)((SDWORD2(v620) % v308 + v308) % v308) << 16);
    v347.i64[1] = ((SDWORD1(v620) % v308 + v308) % v308) | ((unint64_t)((SDWORD1(v620) % v308 + v308) % v308) << 16);
    v348.i64[0] = 0xFFFF0000FFFFLL;
    v348.i64[1] = 0xFFFF0000FFFFLL;
    v349 = (int64x2_t)vandq_s8(v347, v348);
    v350 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v349, 8uLL), (int8x16_t)v349) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
    v351 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v350, 4uLL), (int8x16_t)v350) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
    v348.i64[0] = 0x3333333333333333;
    v348.i64[1] = 0x3333333333333333;
    v352 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v351, 2uLL), (int8x16_t)v351), v348);
    v353 = (int8x16_t)vshlq_u64((uint64x2_t)v352, (uint64x2_t)xmmword_19FFB2DB0);
    v352.i64[1] *= 2;
    v354 = (int64x2_t)vandq_s8(vorrq_s8(v353, v352), (int8x16_t)xmmword_19FFB2DC0);
    v312 = vorrq_s8((int8x16_t)v354, (int8x16_t)vdupq_laneq_s64(v354, 1)).u64[0];
    v313 = *v251;
    if (!*v251)
      goto LABEL_643;
LABEL_578:
    v314 = (v298 + 1) & ~(-1 << (2 * v299));
    v315 = v311 >> 8;
    v316 = v251;
    v317 = (uint64_t)v313;
    while (2)
    {
      v321 = *(unsigned __int8 *)(v317 + 40);
      if (v321 >= v311)
      {
        if (v321 <= v311)
        {
          v323 = *(unsigned __int8 *)(v317 + 41);
          if (v323 != (_DWORD)v315)
          {
            v323 = (char)v323;
LABEL_598:
            v318 = v323 < SBYTE1(v311);
            goto LABEL_580;
          }
          v325 = *(_QWORD *)(v317 + 32);
        }
        else
        {
          v324 = *(unsigned __int8 *)(v317 + 41);
          if ((_DWORD)v315 != v324)
          {
            v318 = SBYTE1(v311) > (char)v324;
            goto LABEL_580;
          }
          v325 = *(_QWORD *)(v317 + 32) >> (2 * (v321 - v311));
        }
        v318 = v325 < v312;
        goto LABEL_580;
      }
      v322 = *(unsigned __int8 *)(v317 + 41);
      if (v322 != (_DWORD)v315)
      {
        v323 = (char)v322;
        goto LABEL_598;
      }
      v318 = *(_QWORD *)(v317 + 32) <= v312 >> (2 * (v311 - v321));
LABEL_580:
      v319 = !v318;
      if (v318)
        v320 = (uint64_t *)(v317 + 8);
      else
        v320 = (uint64_t *)v317;
      if (v319)
        v316 = (uint64_t **)v317;
      v317 = *v320;
      if (*v320)
        continue;
      break;
    }
    v326 = (((v298 + 1) >> (2 * v299)) + BYTE1(v299));
    while (2)
    {
      v330 = *((unsigned __int8 *)v313 + 40);
      if (v330 >= v299)
      {
        if (v330 <= v299)
        {
          v332 = *((unsigned __int8 *)v313 + 41);
          if (v332 != v326)
          {
            v332 = (char)v332;
LABEL_619:
            v327 = v332 < (char)v326;
            goto LABEL_601;
          }
          v334 = v313[4];
        }
        else
        {
          v333 = *((unsigned __int8 *)v313 + 41);
          if (v326 != v333)
          {
            v327 = (char)v326 > (char)v333;
            goto LABEL_601;
          }
          v334 = (unint64_t)v313[4] >> (2 * (v330 - v299));
        }
        v327 = v334 < v314;
        goto LABEL_601;
      }
      v331 = *((unsigned __int8 *)v313 + 41);
      if (v331 != v326)
      {
        v332 = (char)v331;
        goto LABEL_619;
      }
      v327 = v313[4] <= v314 >> (2 * (v299 - v330));
LABEL_601:
      v328 = !v327;
      if (v327)
        v329 = (uint64_t **)(v313 + 1);
      else
        v329 = (uint64_t **)v313;
      if (v328)
        v251 = (uint64_t **)v313;
      v313 = *v329;
      if (*v329)
        continue;
      break;
    }
    if (v316 == v251)
      goto LABEL_641;
    while (*((unsigned __int8 *)v316 + 41) == (v299 >> 8))
    {
      v335 = *((unsigned __int8 *)v316 + 40);
      if (v335 <= v299)
      {
        if (v335 != v299 || (uint64_t *)v298 != v316[4])
          break;
      }
      else if (v298 != (unint64_t)v316[4] >> (2 * (v335 - v299)))
      {
        break;
      }
      if (!v633)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_1077;
      }
      if ((*(unsigned int (**)(__int128 *, uint64_t **))(*(_QWORD *)v633 + 48))(v633, v316 + 6))
      {
        v336 = (unint64_t)v316[4];
        v337 = v336 & 0x1111111111111111 | ((v336 & 0x5555555555555555) >> 1) & 0x3333333333333333;
        v338 = (v337 | (v337 >> 2)) & 0xF000F000F000FLL | (((v337 | (v337 >> 2)) & 0xF0F0F0F0F0F0F0FLL) >> 4) & 0xFF00FF00FF00FFLL;
        v339 = ((v338 | (v338 >> 8)) >> 16) & 0xFFFF0000 | (unsigned __int16)(v338 | (v338 >> 8));
        v340 = ((((v336 >> 1) & 0x4444444444444444 | v336 & 0x2222222222222222) >> 3) | (((v336 >> 1) & 0x4444444444444444 | v336 & 0x2222222222222222) >> 1)) & 0xF0F0F0F0F0F0F0FLL;
        v341 = (v340 | (v340 >> 4)) & 0xFF00FF00FF00FFLL | (((v340 | (v340 >> 4)) & 0xFF00FF00FF00FFLL) >> 8);
        LODWORD(v338) = (v341 >> 16) & 0xFFFF0000 | (unsigned __int16)v341;
        LOBYTE(v341) = *((_BYTE *)v316 + 40);
        v342 = *((char *)v316 + 41) << v341;
        LOBYTE(v628[0]) = v620;
        BYTE1(v628[0]) = v341;
        DWORD1(v628[0]) = v338;
        DWORD2(v628[0]) = v342 + v339;
        std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile>((uint64_t)__na, (unsigned __int8 *)v628, (uint64_t)v628);
      }
      v343 = v316[1];
      if (v343)
      {
        do
        {
          v344 = (uint64_t **)v343;
          v343 = (uint64_t *)*v343;
        }
        while (v343);
      }
      else
      {
        do
        {
          v344 = (uint64_t **)v316[2];
          v56 = *v344 == (uint64_t *)v316;
          v316 = v344;
        }
        while (!v56);
      }
      v316 = v344;
      if (v344 == v251)
        break;
    }
    v345 = v633;
    if (v633 == &v631)
    {
LABEL_641:
      v345 = &v631;
      v346 = 4;
      v250 = v607;
      goto LABEL_644;
    }
    v250 = v607;
    if (v633)
    {
      v346 = 5;
      goto LABEL_644;
    }
LABEL_645:
    v355 = v641;
    if (v641 == &v638)
    {
      v355 = &v638;
      v356 = 4;
LABEL_649:
      (*v355)[v356]();
    }
    else if (v641)
    {
      v356 = 5;
      goto LABEL_649;
    }
    v273 = v620;
    if (v250[39])
    {
      v357 = 1;
      goto LABEL_653;
    }
LABEL_652:
    v358 = (uint8x8_t)vcnt_s8((int8x8_t)v622);
    v358.i16[0] = vaddlv_u8(v358);
    v359 = v358.u32[0];
    v360 = (uint8x8_t)vcnt_s8((int8x8_t)(v623 & 0x3FFFF));
    v360.i16[0] = vaddlv_u8(v360);
    v357 = v360.u32[0] + v359 == 0;
LABEL_653:
    if (v273 == 255 && !v357)
      goto LABEL_1024;
    std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(v580, v223 + 112, (uint64_t)(v223 + 112));
    v362 = (_DWORD *)*((_QWORD *)v223 + 2);
    v363 = v362[2];
    v364 = *((_QWORD *)v223 + 13);
    v365 = v607[2];
    v601 = v363;
    if (v365)
    {
      v366 = (uint8x8_t)vcnt_s8((int8x8_t)v365);
      v366.i16[0] = vaddlv_u8(v366);
      if (v366.u32[0] > 1uLL)
      {
        v3 = *((_QWORD *)v223 + 13);
        if (v364 >= v365)
          v3 = v364 % v365;
      }
      else
      {
        v3 = (v365 - 1) & v364;
      }
      v367 = *(uint64_t ***)(v607[1] + 8 * v3);
      if (v367)
      {
        v368 = *v367;
        if (v368)
        {
          v369 = v368;
          if (v366.u32[0] < 2uLL)
          {
            while (1)
            {
              v370 = v369[1];
              if (v370 == v364)
              {
                if (*((unsigned __int8 *)v369 + 16) == *v223
                  && *((unsigned __int16 *)v369 + 12) == *v587
                  && v369[12] == *((_QWORD *)v223 + 10))
                {
                  v371 = (const void *)v369[4];
                  v372 = v369[5] - (_QWORD)v371;
                  if (v372 == *((_QWORD *)v223 + 3) - (_QWORD)v362 && !memcmp(v371, v362, v372))
                  {
                    v373 = v369;
                    v374 = v607[38];
                    if (!v374)
                      goto LABEL_1024;
                    goto LABEL_750;
                  }
                }
              }
              else if ((v370 & (v365 - 1)) != v3)
              {
                goto LABEL_688;
              }
              v369 = (uint64_t *)*v369;
              if (!v369)
                goto LABEL_688;
            }
          }
          v375 = v368;
          do
          {
            v376 = v375[1];
            if (v376 == v364)
            {
              if (*((unsigned __int8 *)v375 + 16) == *v223
                && *((unsigned __int16 *)v375 + 12) == *v587
                && v375[12] == *((_QWORD *)v223 + 10))
              {
                v377 = (const void *)v375[4];
                v378 = v375[5] - (_QWORD)v377;
                if (v378 == *((_QWORD *)v223 + 3) - (_QWORD)v362 && !memcmp(v377, v362, v378))
                {
                  v373 = v375;
                  v374 = v607[38];
                  if (!v374)
                    goto LABEL_1024;
                  goto LABEL_750;
                }
              }
            }
            else
            {
              if (v376 >= v365)
                v376 %= v365;
              if (v376 != v3)
                break;
            }
            v375 = (uint64_t *)*v375;
          }
          while (v375);
        }
      }
    }
LABEL_688:
    v379 = operator new(0x160uLL);
    *(_QWORD *)&v631 = v379;
    *((_QWORD *)&v631 + 1) = v607 + 3;
    *v379 = 0;
    v379[1] = v364;
    *((_BYTE *)v379 + 16) = *v223;
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v379 + 3), (uint64_t)v587);
    *((_BYTE *)v379 + 112) = 0;
    if (v223[96])
    {
      *((_DWORD *)v379 + 29) = *((_DWORD *)v223 + 25);
      *((_BYTE *)v379 + 112) = 1;
    }
    v379[15] = *((_QWORD *)v223 + 13);
    v379[16] = v379 + 20;
    v379[17] = v379 + 20;
    v379[18] = v379 + 20;
    v379[19] = 8;
    LOBYTE(v632) = 1;
    v380 = (float)(unint64_t)(v607[4] + 1);
    v381 = *((float *)v607 + 10);
    if (!v365 || (float)(v381 * (float)v365) < v380)
    {
      v382 = (v365 & (v365 - 1)) != 0;
      if (v365 < 3)
        v382 = 1;
      v383 = v382 | (2 * v365);
      v384 = vcvtps_u32_f32(v380 / v381);
      if (v383 <= v384)
        v385 = v384;
      else
        v385 = v383;
      if (v385 == 1)
      {
        v385 = 2;
      }
      else if ((v385 & (v385 - 1)) != 0)
      {
        v385 = std::__next_prime(v385);
      }
      v365 = v607[2];
      if (v385 > v365)
      {
LABEL_702:
        if (v385 >> 61)
          goto LABEL_1075;
        v386 = operator new(8 * v385);
        v387 = (void *)v607[1];
        v607[1] = v386;
        if (v387)
          operator delete(v387);
        v388 = 0;
        v607[2] = v385;
        do
          *(_QWORD *)(v607[1] + 8 * v388++) = 0;
        while (v385 != v388);
        v389 = (_QWORD *)*v585;
        if (!*v585)
          goto LABEL_725;
        v390 = v389[1];
        v391 = v385 - 1;
        if ((v385 & (v385 - 1)) == 0)
        {
          v392 = v390 & v391;
          *(_QWORD *)(v607[1] + 8 * v392) = v585;
          while (1)
          {
            v393 = (_QWORD *)*v389;
            if (!*v389)
              break;
            v394 = v393[1] & v391;
            if (v394 == v392)
            {
              v389 = (_QWORD *)*v389;
            }
            else
            {
              v395 = v607[1];
              if (*(_QWORD *)(v395 + 8 * v394))
              {
                *v389 = *v393;
                v396 = 8 * v394;
                *v393 = **(_QWORD **)(v607[1] + v396);
                **(_QWORD **)(v607[1] + v396) = v393;
              }
              else
              {
                *(_QWORD *)(v395 + 8 * v394) = v389;
                v389 = v393;
                v392 = v394;
              }
            }
          }
          goto LABEL_725;
        }
        if (v390 >= v385)
          v390 %= v385;
        *(_QWORD *)(v607[1] + 8 * v390) = v585;
        v400 = (_QWORD *)*v389;
        if (!*v389)
        {
LABEL_725:
          v365 = v385;
          goto LABEL_726;
        }
        while (2)
        {
          v402 = v400[1];
          if (v402 >= v385)
            v402 %= v385;
          if (v402 != v390)
          {
            v403 = v607[1];
            if (!*(_QWORD *)(v403 + 8 * v402))
            {
              *(_QWORD *)(v403 + 8 * v402) = v389;
LABEL_731:
              v389 = v400;
              v400 = (_QWORD *)*v400;
              v390 = v402;
              if (!v400)
                goto LABEL_725;
              continue;
            }
            *v389 = *v400;
            v401 = 8 * v402;
            *v400 = **(_QWORD **)(v607[1] + v401);
            **(_QWORD **)(v607[1] + v401) = v400;
            v400 = v389;
          }
          break;
        }
        v402 = v390;
        goto LABEL_731;
      }
      if (v385 >= v365)
        goto LABEL_726;
      v397 = vcvtps_u32_f32((float)(unint64_t)v607[4] / *((float *)v607 + 10));
      if (v365 < 3 || (v398 = (uint8x8_t)vcnt_s8((int8x8_t)v365), v398.i16[0] = vaddlv_u8(v398), v398.u32[0] > 1uLL))
      {
        v397 = std::__next_prime(v397);
      }
      else
      {
        v399 = 1 << -(char)__clz(v397 - 1);
        if (v397 >= 2)
          v397 = v399;
      }
      if (v385 <= v397)
        v385 = v397;
      if (v385 >= v365)
      {
        v365 = v607[2];
LABEL_726:
        LOBYTE(v363) = v601;
      }
      else
      {
        if (v385)
          goto LABEL_702;
        v549 = (void *)v607[1];
        v607[1] = 0;
        LOBYTE(v363) = v601;
        if (v549)
          operator delete(v549);
        v365 = 0;
        v607[2] = 0;
      }
      if ((v365 & (v365 - 1)) != 0)
      {
        if (v364 >= v365)
          v3 = v364 % v365;
        else
          v3 = v364;
      }
      else
      {
        v3 = (v365 - 1) & v364;
      }
    }
    v404 = *(_QWORD **)(v607[1] + 8 * v3);
    v373 = (_QWORD *)v631;
    if (v404)
    {
      *(_QWORD *)v631 = *v404;
      goto LABEL_748;
    }
    *(_QWORD *)v631 = v607[3];
    v607[3] = v373;
    *(_QWORD *)(v607[1] + 8 * v3) = v585;
    if (*v373)
    {
      v405 = *(_QWORD *)(*v373 + 8);
      if ((v365 & (v365 - 1)) != 0)
      {
        if (v405 >= v365)
          v405 %= v365;
      }
      else
      {
        v405 &= v365 - 1;
      }
      v404 = (_QWORD *)(v607[1] + 8 * v405);
LABEL_748:
      *v404 = v373;
    }
    ++v607[4];
    v374 = v607[38];
    if (!v374)
      goto LABEL_1024;
LABEL_750:
    v597 = v373;
    while (2)
    {
      v407 = v373[16];
      v406 = (char *)v373[17];
      v408 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v406[-v407] >> 3);
      v409 = v373[19];
      if (v409 < v408 + 1)
      {
        v410 = v373[18];
        v411 = (1 << -(char)__clz(v409 + 1));
        if (v409 >= 0xFFFFFFFFFFFFFFFELL)
          v411 = 1;
        if (v411 <= v408 + 1)
          v3 = v408 + 1;
        else
          v3 = v411;
        v412 = (char *)malloc_type_malloc(24 * v3, 0x1000040FC312AA6uLL);
        v413 = (char *)v373[16];
        v414 = (char *)v373[17];
        if (v413 != v414)
        {
          v415 = v412;
          v416 = (char *)v373[16];
          do
          {
            *(_WORD *)v415 = *(_WORD *)v416;
            *(_QWORD *)(v415 + 4) = *(_QWORD *)(v416 + 4);
            v416 += 24;
            v415 += 24;
          }
          while (v416 != v414);
        }
        if (v407 != v410)
          free(v413);
        v373[16] = v412;
        v406 = &v412[24 * v408];
        v373[19] = v3;
      }
      *(_WORD *)v406 = *(_WORD *)(v374 + 16);
      *(_QWORD *)(v406 + 4) = *(_QWORD *)(v374 + 20);
      v373[17] = v406 + 24;
      v417 = *v613;
      if (!*v613)
        goto LABEL_751;
      if (v608)
        goto LABEL_751;
      v418 = *(unsigned __int8 *)(v374 + 17);
      if (v418 <= v363)
        goto LABEL_751;
      v419 = (v418 - v363);
      if (v419 >= 5)
        v420 = 5;
      else
        v420 = v418 - v363;
      if (v419 <= 5)
        v421 = 0;
      else
        v421 = v419 - 5;
      v638 = *v613;
      v639 = *(int8x8_t **)(v586 + 144 * v593 + 120);
      v604 = v639;
      if (v639)
      {
        v422 = (unint64_t *)&v639[1];
        do
          v423 = __ldxr(v422);
        while (__stxr(v423 + 1, v422));
        LOBYTE(v418) = *(_BYTE *)(v374 + 17);
      }
      v424 = (1 << v420);
      v425 = (double)(1 << v418);
      v426 = *(_DWORD *)(v374 + 24);
      v427 = vcvtmd_s64_f64((double)v426 / v425);
      v640 = v427;
      v615 = v427;
      v617 = (((_QWORD)v417 << 6) - 0x61C8864680B583EBLL + ((unint64_t)v417 >> 2) + v427) ^ (unint64_t)v417;
      v619 = v607[10];
      v606 = v421;
      if (v619)
      {
        v428 = (uint8x8_t)vcnt_s8((int8x8_t)v619);
        v428.i16[0] = vaddlv_u8(v428);
        if (v428.u32[0] > 1uLL)
        {
          v429 = (((_QWORD)v417 << 6) - 0x61C8864680B583EBLL + ((unint64_t)v417 >> 2) + v427) ^ (unint64_t)v417;
          if (v617 >= v619)
            v429 = v617 % v619;
        }
        else
        {
          v429 = v617 & (v619 - 1);
        }
        v430 = *(char ***)(v607[9] + 8 * v429);
        if (v430)
        {
          v431 = *v430;
          if (*v430)
          {
            if (v428.u32[0] < 2uLL)
            {
              while (1)
              {
                v435 = *((_QWORD *)v431 + 1);
                if (v435 == v617)
                {
                  if (v431[32] == v427 && *((_QWORD *)v431 + 2) == (_QWORD)v417)
                    goto LABEL_913;
                }
                else if ((v435 & (v619 - 1)) != v429)
                {
                  goto LABEL_803;
                }
                v431 = *(char **)v431;
                if (!v431)
                  goto LABEL_803;
              }
            }
            do
            {
              v433 = *((_QWORD *)v431 + 1);
              if (v433 == v617)
              {
                if (v431[32] == v615 && *((_QWORD *)v431 + 2) == (_QWORD)v417)
                {
LABEL_913:
                  v492 = (void **)*((_QWORD *)v431 + 5);
                  v3 = (unint64_t)v492[3];
                  if (v424 <= v3)
                  {
                    if (v424 >= v3)
                      goto LABEL_899;
                    v509 = (uint64_t)v492[4];
                    LOBYTE(v363) = v601;
                    if (v509 != v3 * v3)
                    {
                      v510 = v3 >> v420;
                      v511 = (*(_DWORD *)(v374 + 20) & (v424 - 1)) * v510;
                      v512 = v510 * (v426 & ((_DWORD)v424 - 1));
                      v513 = v510 - 1;
                      v514 = __CFADD__(v510 - 1, v511);
                      v516 = __CFADD__(v513, v512);
                      v515 = v513 + v512;
                      if (!v516 && !v514)
                      {
                        v516 = v515 >= v3 || v510 - 1 + v511 >= v3;
                        if (!v516)
                        {
                          v517 = v510 + v511;
                          do
                          {
                            v518 = v3 >> v420;
                            v519 = v512;
                            do
                            {
                              v520 = (unint64_t)v492[3];
                              if (v509 != v520 * v520 && v520 > v519 && v520 > v511)
                              {
                                v523 = v519 + v511 * v520;
                                v524 = v523 >> 6;
                                v525 = 1 << v523;
                                v526 = *((_QWORD *)*v492 + v524);
                                if ((v526 & v525) == 0)
                                {
                                  *((_QWORD *)*v492 + v524) = v526 | v525;
                                  v509 = (uint64_t)v492[4] + 1;
                                  v492[4] = (void *)v509;
                                }
                              }
                              ++v519;
                              --v518;
                            }
                            while (v518);
                            ++v511;
                          }
                          while (v511 != v517);
                        }
                      }
                    }
                    goto LABEL_906;
                  }
                  if (v3 == v424)
                    goto LABEL_899;
                  v493 = v492[4];
                  v494 = v493 == (void *)(v3 * v3) || v493 == 0;
                  v577 = (1 << v420);
                  if (!v494)
                  {
                    v492[4] = 0;
                    v527 = v424 << v420;
                    v528 = (unint64_t)((v424 << v420) - 1) >> 6;
                    v529 = operator new(8 * (v528 + 1));
                    v530 = v529;
                    if (v527 >= 0x41)
                      v531 = v528;
                    else
                      v531 = 0;
                    v529[v531] = 0;
                    if (v527 >= 0x40)
                      bzero(v529, 8 * (v527 >> 6));
                    if ((v527 & 0x3D) != 0)
                      v530[v527 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v527 & 0x3D));
                    v532 = *v492;
                    if (v3 - 1 < v577)
                    {
                      v533 = 0;
                      v534 = 0;
                      v535 = v577 / v3;
                      if (v577 / v3 <= 1)
                        v536 = 1;
                      else
                        v536 = v577 / v3;
                      do
                      {
                        v537 = 0;
                        v538 = v534 * v535;
                        do
                        {
                          v539 = v537 * v535;
                          v540 = *(_QWORD *)((_BYTE *)v532 + (((v3 * v534 + v537) >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << (v3 * v534 + v537));
                          v541 = v540 != 0;
                          if (v540)
                          {
                            v542 = 0;
                            do
                            {
                              v543 = 0;
                              v544 = v536;
                              do
                              {
                                *(_QWORD *)((char *)v530
                                          + (((((v542 + v538) << v420) + v539 + v543) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (((v542 + v538) << v420) + v539 + v543);
                                v533 += v541;
                                ++v543;
                                --v544;
                              }
                              while (v544);
                              ++v542;
                            }
                            while (v542 != v536);
                          }
                          else
                          {
                            do
                            {
                              v545 = 0;
                              v546 = v536;
                              do
                              {
                                *(_QWORD *)((char *)v530
                                          + (((((v540 + v538) << v420) + v539 + v545) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (((v540 + v538) << v420) + v539 + v545));
                                v533 += v541;
                                ++v545;
                                --v546;
                              }
                              while (v546);
                              ++v540;
                            }
                            while (v540 != v536);
                          }
                          v492[4] = v533;
                          ++v537;
                        }
                        while (v537 != v3);
                        ++v534;
                      }
                      while (v534 != v3);
                    }
                    if (v532)
                      operator delete(v532);
                    *v492 = v530;
                    v492[1] = (void *)v527;
                    v492[2] = (void *)(v528 + 1);
LABEL_1012:
                    LODWORD(v424) = v577;
                    v492[3] = (void *)v577;
                    v421 = v606;
                    goto LABEL_899;
                  }
                  v495 = v424 << v420;
                  std::vector<BOOL>::resize((uint64_t)v492, v424 << v420);
                  v496 = (_QWORD)v492[3] * (_QWORD)v492[3];
                  v497 = v496 - 63;
                  if (v496 - 63 < 0)
                    v497 = (_QWORD)v492[3] * (_QWORD)v492[3];
                  v498 = v497 >> 6;
                  if (v496 >= 0)
                    v498 = (unint64_t)v496 >> 6;
                  v499 = (char *)*v492 + 8 * v498;
                  v500 = v496 & 0x3F;
                  v3 = ((unint64_t)v492[1] & 0x3F)
                     - (v496 & 0x3F)
                     + 8 * ((_BYTE *)*v492 + 8 * ((unint64_t)v492[1] >> 6) - (_BYTE *)v499);
                  if (v3)
                  {
                    v501 = v496 & 0x3F;
                    if (v492[4] == (void *)v496)
                    {
                      if ((v496 & 0x3F) != 0)
                      {
                        v502 = (64 - v501);
                        if (v502 >= v3)
                          v503 = v3;
                        else
                          v503 = (64 - v501);
                        *v499++ |= (0xFFFFFFFFFFFFFFFFLL >> (v502 - v503)) & (-1 << v500);
                        v3 -= v503;
                      }
                      v504 = v3 >> 6;
                      if (v3 >= 0x40)
                        memset(v499, 255, 8 * (v3 >> 6));
                      if ((v3 & 0x3F) != 0)
                      {
                        v505 = v499[v504] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
                        goto LABEL_1009;
                      }
                    }
                    else
                    {
                      if ((v496 & 0x3F) != 0)
                      {
                        v547 = (64 - v501);
                        if (v547 >= v3)
                          v548 = v3;
                        else
                          v548 = (64 - v501);
                        *v499++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v547 - v548)) & (-1 << v500));
                        v3 -= v548;
                      }
                      v504 = v3 >> 6;
                      if (v3 >= 0x40)
                        bzero(v499, 8 * (v3 >> 6));
                      if ((v3 & 0x3F) != 0)
                      {
                        v505 = v499[v504] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_1009:
                        v499[v504] = v505;
                      }
                    }
                  }
                  if (v492[4] == (void *)((_QWORD)v492[3] * (_QWORD)v492[3]))
                    v492[4] = (void *)v495;
                  goto LABEL_1012;
                }
              }
              else
              {
                if (v433 >= v619)
                  v433 %= v619;
                if (v433 != v429)
                  break;
              }
              v431 = *(char **)v431;
            }
            while (v431);
          }
        }
      }
LABEL_803:
      v3 = v374;
      v436 = (std::__shared_weak_count *)operator new(0x40uLL);
      v436->__shared_owners_ = 0;
      v436->__shared_weak_owners_ = 0;
      v436->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE1F0;
      v436[1].__vftable = 0;
      v437 = (std::__shared_weak_count_vtbl *)(1 << v420);
      v438 = v424 << v420;
      v436[1].__shared_owners_ = 0;
      v436[1].__shared_weak_owners_ = 0;
      v439 = (unint64_t)((v424 << v420) - 1) >> 6;
      v440 = (std::__shared_weak_count_vtbl *)operator new(8 * (v439 + 1));
      v441 = (unint64_t)v440;
      v436[1].__shared_owners_ = v438;
      v436[1].__shared_weak_owners_ = v439 + 1;
      v436[1].__vftable = v440;
      if (v438 >= 0x41)
        v442 = v439;
      else
        v442 = 0;
      *((_QWORD *)&v440->~__shared_weak_count + v442) = 0;
      if (v438 >= 0x40)
        bzero(v440, 8 * (v438 >> 6));
      LODWORD(v424) = (_DWORD)v437;
      if ((v438 & 0x3F) != 0)
        *(_QWORD *)(v441 + 8 * (v438 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v438 & 0x3F));
      v436[2].__vftable = v437;
      v436[2].__shared_owners_ = 0;
      *(_QWORD *)&v628[0] = v436 + 1;
      *((_QWORD *)&v628[0] + 1) = v436;
      v374 = v3;
      if (!v619)
        goto LABEL_836;
      v443 = (uint8x8_t)vcnt_s8((int8x8_t)v619);
      v443.i16[0] = vaddlv_u8(v443);
      if (v443.u32[0] > 1uLL)
      {
        v441 = v617;
        if (v617 >= v619)
          v441 = v617 % v619;
      }
      else
      {
        v441 = v617 & (v619 - 1);
      }
      v444 = *(char ***)(v607[9] + 8 * v441);
      if (!v444 || (v431 = *v444) == 0)
      {
LABEL_836:
        v449 = (char *)operator new(0x38uLL);
        v431 = v449;
        *(_QWORD *)&v631 = v449;
        *((_QWORD *)&v631 + 1) = v607 + 11;
        *(_QWORD *)v449 = 0;
        *((_QWORD *)v449 + 1) = v617;
        *((_QWORD *)v449 + 2) = v417;
        *((_QWORD *)v449 + 3) = v604;
        if (v604)
        {
          v450 = (unint64_t *)&v604[1];
          do
            v451 = __ldxr(v450);
          while (__stxr(v451 + 1, v450));
        }
        v449[32] = v615;
        *(_OWORD *)(v449 + 40) = v628[0];
        v628[0] = 0uLL;
        LOBYTE(v632) = 1;
        v452 = (float)(unint64_t)(v607[12] + 1);
        v453 = *((float *)v607 + 26);
        v3 = v619;
        if (v619 && (float)(v453 * (float)v619) >= v452)
        {
LABEL_889:
          v476 = v607[9];
          v477 = *(_QWORD **)(v476 + 8 * v441);
          if (v477)
          {
            *(_QWORD *)v431 = *v477;
            v421 = v606;
          }
          else
          {
            *(_QWORD *)v431 = *v603;
            *v603 = v431;
            *(_QWORD *)(v476 + 8 * v441) = v603;
            v421 = v606;
            if (!*(_QWORD *)v431)
            {
LABEL_898:
              ++v607[12];
              v373 = v597;
              goto LABEL_899;
            }
            v478 = *(_QWORD *)(*(_QWORD *)v431 + 8);
            if ((v3 & (v3 - 1)) != 0)
            {
              if (v478 >= v3)
                v478 %= v3;
            }
            else
            {
              v478 &= v3 - 1;
            }
            v477 = (_QWORD *)(v607[9] + 8 * v478);
          }
          *v477 = v431;
          goto LABEL_898;
        }
        v454 = (v619 & (v619 - 1)) != 0;
        if (v619 < 3)
          v454 = 1;
        v455 = v454 | (2 * v619);
        v456 = vcvtps_u32_f32(v452 / v453);
        if (v455 <= v456)
          v457 = v456;
        else
          v457 = v455;
        if (v457 == 1)
        {
          v457 = 2;
        }
        else if ((v457 & (v457 - 1)) != 0)
        {
          v457 = std::__next_prime(v457);
        }
        v3 = v607[10];
        if (v457 <= v3)
        {
          if (v457 >= v3)
            goto LABEL_876;
          v469 = vcvtps_u32_f32((float)(unint64_t)v607[12] / *((float *)v607 + 26));
          if (v3 < 3 || (v470 = (uint8x8_t)vcnt_s8((int8x8_t)v3), v470.i16[0] = vaddlv_u8(v470), v470.u32[0] > 1uLL))
          {
            v469 = std::__next_prime(v469);
          }
          else
          {
            v471 = 1 << -(char)__clz(v469 - 1);
            if (v469 >= 2)
              v469 = v471;
          }
          if (v457 <= v469)
            v457 = v469;
          if (v457 >= v3)
          {
            v3 = v607[10];
LABEL_876:
            if ((v3 & (v3 - 1)) != 0)
            {
              if (v617 >= v3)
                v441 = v617 % v3;
              else
                v441 = v617;
            }
            else
            {
              v441 = (v3 - 1) & v617;
            }
            goto LABEL_889;
          }
          if (!v457)
          {
            v508 = (void *)v607[9];
            v607[9] = 0;
            if (v508)
              operator delete(v508);
            v3 = 0;
            v607[10] = 0;
            goto LABEL_876;
          }
        }
        if (v457 >> 61)
          goto LABEL_1075;
        v458 = operator new(8 * v457);
        v459 = (void *)v607[9];
        v607[9] = v458;
        if (v459)
          operator delete(v459);
        v460 = 0;
        v607[10] = v457;
        do
          *(_QWORD *)(v607[9] + 8 * v460++) = 0;
        while (v457 != v460);
        v461 = (_QWORD *)*v603;
        if (!*v603)
        {
LABEL_875:
          v3 = v457;
          goto LABEL_876;
        }
        v462 = v461[1];
        v463 = v457 - 1;
        if ((v457 & (v457 - 1)) == 0)
        {
          v464 = v462 & v463;
          *(_QWORD *)(v607[9] + 8 * v464) = v603;
          for (jj = (_QWORD *)*v461; *v461; jj = (_QWORD *)*v461)
          {
            v466 = jj[1] & v463;
            if (v466 == v464)
            {
              v461 = jj;
            }
            else
            {
              v467 = v607[9];
              if (*(_QWORD *)(v467 + 8 * v466))
              {
                *v461 = *jj;
                v468 = 8 * v466;
                *jj = **(_QWORD **)(v607[9] + v468);
                **(_QWORD **)(v607[9] + v468) = jj;
              }
              else
              {
                *(_QWORD *)(v467 + 8 * v466) = v461;
                v461 = jj;
                v464 = v466;
              }
            }
          }
          goto LABEL_875;
        }
        if (v462 >= v457)
          v462 %= v457;
        *(_QWORD *)(v607[9] + 8 * v462) = v603;
        v472 = (_QWORD *)*v461;
        if (!*v461)
          goto LABEL_875;
        while (1)
        {
          v474 = v472[1];
          if (v474 >= v457)
            v474 %= v457;
          if (v474 != v462)
          {
            v475 = v607[9];
            if (!*(_QWORD *)(v475 + 8 * v474))
            {
              *(_QWORD *)(v475 + 8 * v474) = v461;
              goto LABEL_880;
            }
            *v461 = *v472;
            v473 = 8 * v474;
            *v472 = **(_QWORD **)(v607[9] + v473);
            **(_QWORD **)(v607[9] + v473) = v472;
            v472 = v461;
          }
          v474 = v462;
LABEL_880:
          v461 = v472;
          v472 = (_QWORD *)*v472;
          v462 = v474;
          if (!v472)
            goto LABEL_875;
        }
      }
      if (v443.u32[0] < 2uLL)
      {
        while (1)
        {
          v448 = *((_QWORD *)v431 + 1);
          if (v448 == v617)
          {
            if (v431[32] == v615 && *((_QWORD *)v431 + 2) == (_QWORD)v417)
              goto LABEL_935;
          }
          else if ((v448 & (v619 - 1)) != v441)
          {
            goto LABEL_836;
          }
          v431 = *(char **)v431;
          if (!v431)
            goto LABEL_836;
        }
      }
      while (1)
      {
        v446 = *((_QWORD *)v431 + 1);
        if (v446 == v617)
          break;
        if (v446 >= v619)
          v446 %= v619;
        if (v446 != v441)
          goto LABEL_836;
LABEL_823:
        v431 = *(char **)v431;
        if (!v431)
          goto LABEL_836;
      }
      if (v431[32] != v615 || *((_QWORD *)v431 + 2) != (_QWORD)v417)
        goto LABEL_823;
LABEL_935:
      p_shared_owners = (unint64_t *)&v436->__shared_owners_;
      v373 = v597;
      v421 = v606;
      do
        v507 = __ldaxr(p_shared_owners);
      while (__stlxr(v507 - 1, p_shared_owners));
      if (!v507)
      {
        ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
        std::__shared_weak_count::__release_weak(v436);
      }
LABEL_899:
      v479 = (*(_DWORD *)(v374 + 20) >> v421) & (v424 - 1);
      v480 = (v424 - 1) & (*(_DWORD *)(v374 + 24) >> v421);
      v481 = (_QWORD *)*((_QWORD *)v431 + 5);
      v482 = v481[3];
      v484 = v481[4] != v482 * v482 && v482 > v480 && v482 > v479;
      LOBYTE(v363) = v601;
      if (v484)
      {
        v488 = v480 + v482 * v479;
        v489 = v488 >> 6;
        v490 = 1 << v488;
        v491 = *(_QWORD *)(*v481 + 8 * v489);
        if ((v491 & v490) == 0)
        {
          *(_QWORD *)(*v481 + 8 * v489) = v491 | v490;
          ++v481[4];
        }
      }
LABEL_906:
      v485 = (std::__shared_weak_count *)v639;
      if (v639)
      {
        v486 = (unint64_t *)&v639[1];
        do
          v487 = __ldaxr(v486);
        while (__stlxr(v487 - 1, v486));
        if (!v487)
        {
          ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
          std::__shared_weak_count::__release_weak(v485);
        }
      }
LABEL_751:
      v374 = *(_QWORD *)v374;
      if (v374)
        continue;
      break;
    }
LABEL_1024:
    v223 = v595;
    if (*v613 && !v608 && (!v622 && (v623 & 0x3FFFF) == 0 || v607[39]))
    {
      v550 = geo::linear_map<unsigned short,std::set<gdc::LayerDataWithWorld>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::set<gdc::LayerDataWithWorld>>>,std::vector<std::pair<unsigned short,std::set<gdc::LayerDataWithWorld>>>>::operator[]((char **)v607 + 6, *v587);
      v551 = operator new(0x38uLL);
      v552 = v551;
      v553 = *v613;
      v551[4] = *v613;
      v554 = *(std::__shared_weak_count **)(v586 + 144 * v593 + 120);
      v551[5] = v554;
      if (v554)
      {
        v555 = (unint64_t *)&v554->__shared_owners_;
        do
          v556 = __ldxr(v555);
        while (__stxr(v556 + 1, v555));
      }
      v557 = (void **)(v550 + 4);
      v558 = vcvtmd_s64_f64((double)*((int *)v595 + 30) / (double)(1 << v595[113]));
      *((_BYTE *)v551 + 48) = v558;
      v559 = (unsigned __int8 *)*((_QWORD *)v550 + 1);
      v560 = (void **)(v550 + 4);
      if (v559)
      {
        while (1)
        {
          while (1)
          {
            v560 = (void **)v559;
            v561 = v559[48];
            v562 = (char)v561;
            v563 = *((_QWORD *)v559 + 4);
            if (!(v561 == v558 ? (unint64_t)v553 < v563 : (char)v561 > v558))
              break;
            v559 = (unsigned __int8 *)*v560;
            v557 = v560;
            if (!*v560)
              goto LABEL_1044;
          }
          v565 = v563 < (unint64_t)v553;
          v56 = v562 == v558;
          v566 = v562 < v558;
          if (v56)
            v566 = v565;
          if (!v566)
            break;
          v559 = (unsigned __int8 *)v560[1];
          if (!v559)
          {
            v557 = v560 + 1;
            goto LABEL_1044;
          }
        }
        if (v554)
        {
          v568 = (unint64_t *)&v554->__shared_owners_;
          do
            v569 = __ldaxr(v568);
          while (__stlxr(v569 - 1, v568));
          if (!v569)
          {
            ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
            std::__shared_weak_count::__release_weak(v554);
          }
        }
        operator delete(v552);
      }
      else
      {
LABEL_1044:
        *v551 = 0;
        v551[1] = 0;
        v551[2] = v560;
        *v557 = v551;
        v567 = **(_QWORD **)v550;
        if (v567)
        {
          *(_QWORD *)v550 = v567;
          v552 = *v557;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v550 + 1), (uint64_t *)v552);
        ++*((_QWORD *)v550 + 2);
      }
      v223 = v595;
    }
LABEL_447:
    v223 += 144;
    if (v223 != __s2a)
      continue;
    break;
  }
LABEL_1052:
  LODWORD(v631) = 2;
  if (*((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v610, 2, &v631)+ 6)|| (LODWORD(v638) = 1, *((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v610, 1, &v638)+ 6)))
  {
    v570 = 0;
  }
  else
  {
    LODWORD(v628[0]) = 0;
    v570 = *((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v610, 0, v628)+ 6) == 0;
  }
  LODWORD(v631) = 1;
  if (*((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v610, 1, &v631)+ 6)|| (LODWORD(v638) = 0, *((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v610, 0, &v638)+ 6))|| (LODWORD(v628[0]) = 1, *((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v609, 1, v628)+ 6)))
  {
    v571 = 0;
  }
  else
  {
    LODWORD(v620) = 0;
    v571 = *((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v609, 0, &v620)+ 6) == 0;
  }
  LODWORD(v631) = 2;
  if (*((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v610, 2, &v631)+ 6))
  {
    v572 = 1;
  }
  else
  {
    LODWORD(v638) = 2;
    v572 = *((_QWORD *)std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(v609, 2, &v638)+ 6) != 0;
  }
  *v579 = v570;
  v579[1] = v578 & v571;
  v579[2] = v572;
  v573 = v625[0];
  if (v625[0])
  {
    do
    {
      v575 = (_QWORD *)*v573;
      v576 = (void *)v573[3];
      if (v576 != (void *)v573[5])
        free(v576);
      operator delete(v573);
      v573 = v575;
    }
    while (v575);
  }
  v574 = __p[0];
  __p[0] = 0;
  if (v574)
    operator delete(v574);
}

void sub_19FC74C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table((uint64_t)&a51);
  _Unwind_Resume(a1);
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(uint64_t *a1, unsigned __int16 a2, unsigned __int16 *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  unsigned __int16 *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (unsigned __int16 *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (v10[8] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(unsigned __int16 **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (v10[8] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(unsigned __int16 **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = (unsigned __int16 *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  v10[8] = *a3;
  *(_OWORD *)(v10 + 12) = 0u;
  *(_OWORD *)(v10 + 20) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = a1[1];
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = a1[1];
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_63;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_63:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19FC751EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FC754F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::MapDataType,unsigned long>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,unsigned long>,std::hash<md::MapDataType>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,unsigned long>,std::equal_to<md::MapDataType>,std::hash<md::MapDataType>,true>,std::allocator<std::__hash_value_type<md::MapDataType,unsigned long>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(float *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_60;
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_60:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_73;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_60;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
    {
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
      goto LABEL_59;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_64:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
LABEL_73:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_81:
    *v37 = v10;
    goto LABEL_82;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_81;
  }
LABEL_82:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_19FC7596C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::__unordered_map_hasher<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::hash<gdc::LayerDataStatus>,std::equal_to<gdc::LayerDataStatus>,true>,std::__unordered_map_equal<gdc::LayerDataStatus,std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>,std::equal_to<gdc::LayerDataStatus>,std::hash<gdc::LayerDataStatus>,true>,std::allocator<std::__hash_value_type<gdc::LayerDataStatus,std::unordered_map<md::MapDataType,unsigned long>>>>::__emplace_unique_key_args<gdc::LayerDataStatus,std::piecewise_construct_t const&,std::tuple<gdc::LayerDataStatus&&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FC75C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,geo::small_vector<geo::QuadTile,8ul>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,geo::small_vector<geo::QuadTile,8ul>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 128);
      if (v3 != *(void **)(v2 + 144))
        free(v3);
      if (*(_BYTE *)(v2 + 112))
        *(_BYTE *)(v2 + 112) = 0;
      v4 = *(void **)(v2 + 32);
      if (v4 != *(void **)(v2 + 48))
        free(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__function::__func<gdc::FragmentCollector<md::MapDataType,82ul>::validFragmentsForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1},std::allocator<gdc::FragmentCollector<md::MapDataType,82ul>::validFragmentsForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1}>,BOOL ()(std::bitset<82ul> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::FragmentCollector<md::MapDataType,82ul>::validFragmentsForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1},std::allocator<gdc::FragmentCollector<md::MapDataType,82ul>::validFragmentsForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1}>,BOOL ()(std::bitset<82ul> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4289D40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::FragmentCollector<md::MapDataType,82ul>::validFragmentsForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1},std::allocator<gdc::FragmentCollector<md::MapDataType,82ul>::validFragmentsForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1}>,BOOL ()(std::bitset<82ul> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4289D40;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<gdc::FragmentCollector<md::MapDataType,82ul>::validFragmentsForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1},std::allocator<gdc::FragmentCollector<md::MapDataType,82ul>::validFragmentsForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1}>,BOOL ()(std::bitset<82ul> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return *(_QWORD *)a2 == *(_QWORD *)v2 && ((*(_DWORD *)(v2 + 8) ^ *(_DWORD *)(a2 + 8)) & 0x3FFFFLL) == 0;
}

void std::__function::__func<gdc::FragmentCollector<md::MapDataType,82ul>::validSubtilesForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1},std::allocator<gdc::FragmentCollector<md::MapDataType,82ul>::validSubtilesForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1}>,BOOL ()(std::bitset<82ul> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gdc::FragmentCollector<md::MapDataType,82ul>::validSubtilesForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1},std::allocator<gdc::FragmentCollector<md::MapDataType,82ul>::validSubtilesForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1}>,BOOL ()(std::bitset<82ul> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4289CF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gdc::FragmentCollector<md::MapDataType,82ul>::validSubtilesForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1},std::allocator<gdc::FragmentCollector<md::MapDataType,82ul>::validSubtilesForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1}>,BOOL ()(std::bitset<82ul> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4289CF8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<gdc::FragmentCollector<md::MapDataType,82ul>::validSubtilesForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1},std::allocator<gdc::FragmentCollector<md::MapDataType,82ul>::validSubtilesForTile(geo::QuadTile const&,std::bitset<82ul> const&,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>> &)::{lambda(std::bitset<82ul> const&)#1}>,BOOL ()(std::bitset<82ul> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return *(_QWORD *)a2 == *(_QWORD *)v2 && ((*(_DWORD *)(v2 + 8) ^ *(_DWORD *)(a2 + 8)) & 0x3FFFFLL) == 0;
}

void std::__function::__func<md::SceneStateManager::updateSceneTileSet(md::SceneTileSet &,md::TileSelectionTileSetType)::$_0,std::allocator<md::SceneStateManager::updateSceneTileSet(md::SceneTileSet &,md::TileSelectionTileSetType)::$_0>,void ()(md::MapDataType)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SceneStateManager::updateSceneTileSet(md::SceneTileSet &,md::TileSelectionTileSetType)::$_0,std::allocator<md::SceneStateManager::updateSceneTileSet(md::SceneTileSet &,md::TileSelectionTileSetType)::$_0>,void ()(md::MapDataType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEC48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SceneStateManager::updateSceneTileSet(md::SceneTileSet &,md::TileSelectionTileSetType)::$_0,std::allocator<md::SceneStateManager::updateSceneTileSet(md::SceneTileSet &,md::TileSelectionTileSetType)::$_0>,void ()(md::MapDataType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEC48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::SceneStateManager::updateSceneTileSet(md::SceneTileSet &,md::TileSelectionTileSetType)::$_0,std::allocator<md::SceneStateManager::updateSceneTileSet(md::SceneTileSet &,md::TileSelectionTileSetType)::$_0>,void ()(md::MapDataType)>::operator()(uint64_t result, unsigned __int16 *a2)
{
  unint64_t v2;

  v2 = *a2;
  if (v2 >= 0x52)
    abort();
  *(_QWORD *)(*(_QWORD *)(result + 8) + ((v2 >> 3) & 0x1FF8)) |= 1 << v2;
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,void *>>>::operator()[abi:nn180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  if (a1)
  {
    v3 = (_QWORD *)__p[5];
    if (v3)
    {
      do
      {
        v5 = (_QWORD *)*v3;
        v6 = (_QWORD *)v3[5];
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        v8 = (void *)v3[3];
        v3[3] = 0;
        if (v8)
          operator delete(v8);
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = (void *)__p[3];
    __p[3] = 0;
    if (v4)
      operator delete(v4);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *md::SceneStateManager::setHasLayerDataDependency(_QWORD *result, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  int8x8_t v7;
  uint64_t ***v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unint64_t v22;

  v2 = (int8x8_t *)result[59];
  v3 = v2[17];
  if (!*(_QWORD *)&v3)
    return result;
  v4 = *(unsigned __int16 *)(a2 + 8);
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = *(unsigned __int16 *)(a2 + 8);
    if (*(_QWORD *)&v3 <= v4)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (v3.i32[0] - 1) & v4;
  }
  v7 = v2[16];
  v8 = *(uint64_t ****)(*(_QWORD *)&v7 + 8 * v6);
  if (!v8)
    return result;
  v9 = *v8;
  if (!*v8)
    return result;
  v10 = *(_QWORD *)&v3 - 1;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == (uint64_t *)v4)
      {
        if (*((unsigned __int16 *)v9 + 8) == (_DWORD)v4)
          goto LABEL_22;
      }
      else if (((unint64_t)v11 & v10) != v6)
      {
        return result;
      }
      v9 = (uint64_t **)*v9;
      if (!v9)
        return result;
    }
  }
  while (1)
  {
    v12 = (unint64_t)v9[1];
    if (v12 == v4)
      break;
    if (v12 >= *(_QWORD *)&v3)
      v12 %= *(_QWORD *)&v3;
    if (v12 != v6)
      return result;
LABEL_16:
    v9 = (uint64_t **)*v9;
    if (!v9)
      return result;
  }
  if (*((unsigned __int16 *)v9 + 8) != (_DWORD)v4)
    goto LABEL_16;
LABEL_22:
  if (v5.u32[0] > 1uLL)
  {
    v13 = *(unsigned __int16 *)(a2 + 8);
    if (*(_QWORD *)&v3 <= v4)
      v13 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v13 = (v3.i32[0] - 1) & v4;
  }
  v14 = *(uint64_t ****)(*(_QWORD *)&v7 + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_41:
    v18 = 0;
    goto LABEL_42;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v15[1];
      if (v16 == (uint64_t *)v4)
      {
        if (*((unsigned __int16 *)v15 + 8) == (_DWORD)v4)
          goto LABEL_51;
      }
      else if (((unint64_t)v16 & v10) != v13)
      {
        goto LABEL_41;
      }
      v15 = (uint64_t **)*v15;
      if (!v15)
        goto LABEL_41;
    }
  }
  while (2)
  {
    v17 = (unint64_t)v15[1];
    if (v17 != v4)
    {
      if (v17 >= *(_QWORD *)&v3)
        v17 %= *(_QWORD *)&v3;
      if (v17 != v13)
        goto LABEL_41;
      goto LABEL_36;
    }
    if (*((unsigned __int16 *)v15 + 8) != (_DWORD)v4)
    {
LABEL_36:
      v15 = (uint64_t **)*v15;
      if (!v15)
        goto LABEL_41;
      continue;
    }
    break;
  }
LABEL_51:
  v18 = *((unsigned __int16 *)v15 + 10);
LABEL_42:
  v19 = (unsigned __int16 *)result[14];
  v20 = (unsigned __int16 *)result[15];
  if (v19 != v20)
  {
    while (*v19 != v18)
    {
      v19 += 56;
      if (v19 == v20)
      {
        v19 = (unsigned __int16 *)result[15];
        break;
      }
    }
  }
  v21 = *((_QWORD *)v19 + 13);
  if (v21)
  {
    result = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(v21 + 48), (unsigned __int8 *)a2);
    if (result)
    {
      v22 = result[16];
      result = geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(v21 + 24), v4);
      if (0x8E38E38E38E38E39 * ((uint64_t)(result[1] - *result) >> 4) <= v22)
        abort();
      *(_QWORD *)(*result + 144 * v22 + 136) |= 1uLL;
    }
  }
  return result;
}

void md::SceneStateManager::setHasTileSelectionDependency(uint64_t a1, unsigned __int16 a2, unsigned int a3, unsigned __int8 *a4)
{
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8x8_t v53;
  void **v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  size_t v69;
  size_t v70;
  size_t v71;
  _QWORD *v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint8x8_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  size_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  void *v87;
  unsigned __int16 v88;
  unsigned __int16 *v89;
  unsigned __int16 *v90;
  char v91;

  v88 = a2;
  v8 = std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,std::unordered_map<unsigned short,std::unordered_map<geo::QuadTile,std::bitset<8ul>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::bitset<8ul>>>>>>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>((uint64_t *)(a1 + 432), a2, &v88);
  v9 = v8;
  v10 = a3;
  v11 = *((_QWORD *)v8 + 4);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = a3;
      if (v11 <= a3)
        v4 = a3 % v11;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & a3;
    }
    v13 = *(void ***)(*((_QWORD *)v8 + 3) + 8 * v4);
    if (v13)
    {
      v14 = (unsigned __int16 *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if (v14[8] == (_DWORD)v10)
                goto LABEL_82;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v14 = *(unsigned __int16 **)v14;
            if (!v14)
              goto LABEL_22;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (v14[8] == (_DWORD)v10)
              goto LABEL_82;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(unsigned __int16 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_22:
  v5 = (uint64_t)(v8 + 20);
  v14 = (unsigned __int16 *)operator new(0x40uLL);
  v89 = v14;
  v90 = v9 + 20;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  v14[8] = v10;
  *(_OWORD *)(v14 + 12) = 0u;
  *(_OWORD *)(v14 + 20) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v91 = 1;
  v17 = (float)(unint64_t)(*((_QWORD *)v9 + 6) + 1);
  v18 = *((float *)v9 + 14);
  if (v11 && (float)(v18 * (float)v11) >= v17)
  {
    v10 = v4;
    goto LABEL_72;
  }
  v19 = 1;
  if (v11 >= 3)
    v19 = (v11 & (v11 - 1)) != 0;
  v20 = v19 | (2 * v11);
  v21 = vcvtps_u32_f32(v17 / v18);
  if (v20 <= v21)
    prime = v21;
  else
    prime = v20;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v11 = *((_QWORD *)v9 + 4);
  }
  if (prime > v11)
  {
LABEL_35:
    if (prime >> 61)
      goto LABEL_183;
    v23 = operator new(8 * prime);
    v24 = (void *)*((_QWORD *)v9 + 3);
    *((_QWORD *)v9 + 3) = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)v9 + 4) = prime;
    do
      *(_QWORD *)(*((_QWORD *)v9 + 3) + 8 * v25++) = 0;
    while (prime != v25);
    v26 = *(_QWORD **)v5;
    if (!*(_QWORD *)v5)
      goto LABEL_59;
    v27 = v26[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*((_QWORD *)v9 + 3) + 8 * v29) = v5;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v26 = i;
        }
        else
        {
          v32 = *((_QWORD *)v9 + 3);
          if (*(_QWORD *)(v32 + 8 * v31))
          {
            *v26 = *i;
            v33 = 8 * v31;
            *i = **(_QWORD **)(*((_QWORD *)v9 + 3) + v33);
            **(_QWORD **)(*((_QWORD *)v9 + 3) + v33) = i;
          }
          else
          {
            *(_QWORD *)(v32 + 8 * v31) = v26;
            v26 = i;
            v29 = v31;
          }
        }
      }
LABEL_59:
      v11 = prime;
      goto LABEL_60;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*((_QWORD *)v9 + 3) + 8 * v27) = v5;
    v37 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_59;
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 != v27)
      {
        v40 = *((_QWORD *)v9 + 3);
        if (!*(_QWORD *)(v40 + 8 * v39))
        {
          *(_QWORD *)(v40 + 8 * v39) = v26;
          goto LABEL_64;
        }
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*((_QWORD *)v9 + 3) + v38);
        **(_QWORD **)(*((_QWORD *)v9 + 3) + v38) = v37;
        v37 = v26;
      }
      v39 = v27;
LABEL_64:
      v26 = v37;
      v37 = (_QWORD *)*v37;
      v27 = v39;
      if (!v37)
        goto LABEL_59;
    }
  }
  if (prime >= v11)
    goto LABEL_60;
  v34 = vcvtps_u32_f32((float)*((unint64_t *)v9 + 6) / *((float *)v9 + 14));
  if (v11 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
  {
    v34 = std::__next_prime(v34);
  }
  else
  {
    v36 = 1 << -(char)__clz(v34 - 1);
    if (v34 >= 2)
      v34 = v36;
  }
  if (prime <= v34)
    prime = v34;
  if (prime < v11)
  {
    if (!prime)
    {
      v87 = (void *)*((_QWORD *)v9 + 3);
      *((_QWORD *)v9 + 3) = 0;
      if (v87)
        operator delete(v87);
      v11 = 0;
      *((_QWORD *)v9 + 4) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v11 = *((_QWORD *)v9 + 4);
LABEL_60:
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v11 <= v10)
      v10 %= v11;
  }
  else
  {
    v10 = ((_DWORD)v11 - 1) & v10;
  }
LABEL_72:
  v41 = *((_QWORD *)v9 + 3);
  v42 = *(_QWORD **)(v41 + 8 * v10);
  if (v42)
  {
    *(_QWORD *)v14 = *v42;
LABEL_80:
    *v42 = v14;
    goto LABEL_81;
  }
  *(_QWORD *)v14 = *(_QWORD *)v5;
  *(_QWORD *)v5 = v14;
  *(_QWORD *)(v41 + 8 * v10) = v5;
  if (*(_QWORD *)v14)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v43 >= v11)
        v43 %= v11;
    }
    else
    {
      v43 &= v11 - 1;
    }
    v42 = (_QWORD *)(*((_QWORD *)v9 + 3) + 8 * v43);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)v9 + 6);
LABEL_82:
  v44 = *a4;
  v45 = a4[1];
  v46 = (v45
       + ((v44 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v44 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v44 - 0x61C8864680B583EBLL);
  v47 = *((int *)a4 + 1);
  v48 = *((int *)a4 + 2);
  v49 = (v47 + (v46 << 6) + (v46 >> 2) - 0x61C8864680B583EBLL) ^ v46;
  v50 = v48 + (v49 << 6) + (v49 >> 2);
  v51 = (v50 - 0x61C8864680B583EBLL) ^ v49;
  v52 = *((_QWORD *)v14 + 4);
  if (v52)
  {
    v53 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
    v53.i16[0] = vaddlv_u8(v53);
    if (v53.u32[0] > 1uLL)
    {
      v5 = (v50 - 0x61C8864680B583EBLL) ^ v49;
      if (v51 >= v52)
        v5 = v51 % v52;
    }
    else
    {
      v5 = v51 & (v52 - 1);
    }
    v54 = *(void ***)(*((_QWORD *)v14 + 3) + 8 * v5);
    if (v54)
    {
      v55 = *v54;
      if (*v54)
      {
        if (v53.u32[0] < 2uLL)
        {
          while (1)
          {
            v57 = v55[1];
            if (v57 == v51)
            {
              if (__PAIR64__(*((unsigned __int8 *)v55 + 17), *((unsigned __int8 *)v55 + 16)) == __PAIR64__(v45, v44)
                && *(_QWORD *)((char *)v55 + 20) == __PAIR64__(v48, v47))
              {
                goto LABEL_173;
              }
            }
            else if ((v57 & (v52 - 1)) != v5)
            {
              goto LABEL_106;
            }
            v55 = (_QWORD *)*v55;
            if (!v55)
              goto LABEL_106;
          }
        }
        do
        {
          v56 = v55[1];
          if (v56 == v51)
          {
            if (__PAIR64__(*((unsigned __int8 *)v55 + 17), *((unsigned __int8 *)v55 + 16)) == __PAIR64__(v45, v44)
              && *(_QWORD *)((char *)v55 + 20) == __PAIR64__(v48, v47))
            {
              goto LABEL_173;
            }
          }
          else
          {
            if (v56 >= v52)
              v56 %= v52;
            if (v56 != v5)
              break;
          }
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
    }
  }
LABEL_106:
  v55 = operator new(0x30uLL);
  *v55 = 0;
  v55[1] = v51;
  *((_BYTE *)v55 + 16) = v44;
  *((_BYTE *)v55 + 17) = v45;
  *(_QWORD *)((char *)v55 + 20) = *(_QWORD *)(a4 + 4);
  v55[5] = 0;
  v58 = (float)(unint64_t)(*((_QWORD *)v14 + 6) + 1);
  v59 = *((float *)v14 + 14);
  if (!v52 || (float)(v59 * (float)v52) < v58)
  {
    v60 = 1;
    if (v52 >= 3)
      v60 = (v52 & (v52 - 1)) != 0;
    v61 = v60 | (2 * v52);
    v62 = vcvtps_u32_f32(v58 / v59);
    if (v61 <= v62)
      v63 = v62;
    else
      v63 = v61;
    if (v63 == 1)
    {
      v63 = 2;
    }
    else if ((v63 & (v63 - 1)) != 0)
    {
      v63 = std::__next_prime(v63);
      v52 = *((_QWORD *)v14 + 4);
    }
    if (v63 <= v52)
    {
      if (v63 >= v52)
        goto LABEL_158;
      v76 = vcvtps_u32_f32((float)*((unint64_t *)v14 + 6) / *((float *)v14 + 14));
      if (v52 < 3 || (v77 = (uint8x8_t)vcnt_s8((int8x8_t)v52), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
      {
        v76 = std::__next_prime(v76);
      }
      else
      {
        v78 = 1 << -(char)__clz(v76 - 1);
        if (v76 >= 2)
          v76 = v78;
      }
      if (v63 <= v76)
        v63 = v76;
      if (v63 >= v52)
        goto LABEL_158;
      if (!v63)
      {
        v83 = (void *)*((_QWORD *)v14 + 3);
        *((_QWORD *)v14 + 3) = 0;
        if (v83)
          operator delete(v83);
        *((_QWORD *)v14 + 4) = 0;
        goto LABEL_158;
      }
    }
    if (!(v63 >> 61))
    {
      v64 = operator new(8 * v63);
      v65 = (void *)*((_QWORD *)v14 + 3);
      *((_QWORD *)v14 + 3) = v64;
      if (v65)
        operator delete(v65);
      v66 = 0;
      *((_QWORD *)v14 + 4) = v63;
      do
        *(_QWORD *)(*((_QWORD *)v14 + 3) + 8 * v66++) = 0;
      while (v63 != v66);
      v68 = (char *)(v14 + 20);
      v67 = (_QWORD *)*((_QWORD *)v14 + 5);
      if (!v67)
        goto LABEL_158;
      v69 = v67[1];
      v70 = v63 - 1;
      if ((v63 & (v63 - 1)) == 0)
      {
        v71 = v69 & v70;
        *(_QWORD *)(*((_QWORD *)v14 + 3) + 8 * v71) = v68;
        while (1)
        {
          v72 = (_QWORD *)*v67;
          if (!*v67)
            break;
          v73 = v72[1] & v70;
          if (v73 == v71)
          {
            v67 = (_QWORD *)*v67;
          }
          else
          {
            v74 = *((_QWORD *)v14 + 3);
            if (*(_QWORD *)(v74 + 8 * v73))
            {
              *v67 = *v72;
              v75 = 8 * v73;
              *v72 = **(_QWORD **)(*((_QWORD *)v14 + 3) + v75);
              **(_QWORD **)(*((_QWORD *)v14 + 3) + v75) = v72;
            }
            else
            {
              *(_QWORD *)(v74 + 8 * v73) = v67;
              v67 = v72;
              v71 = v73;
            }
          }
        }
LABEL_158:
        v52 = *((_QWORD *)v14 + 4);
        if ((v52 & (v52 - 1)) != 0)
        {
          if (v51 >= v52)
            v5 = v51 % v52;
          else
            v5 = v51;
        }
        else
        {
          v5 = (v52 - 1) & v51;
        }
        goto LABEL_163;
      }
      if (v69 >= v63)
        v69 %= v63;
      *(_QWORD *)(*((_QWORD *)v14 + 3) + 8 * v69) = v68;
      v79 = (_QWORD *)*v67;
      if (!*v67)
        goto LABEL_158;
      while (1)
      {
        v81 = v79[1];
        if (v81 >= v63)
          v81 %= v63;
        if (v81 != v69)
        {
          v82 = *((_QWORD *)v14 + 3);
          if (!*(_QWORD *)(v82 + 8 * v81))
          {
            *(_QWORD *)(v82 + 8 * v81) = v67;
            goto LABEL_144;
          }
          *v67 = *v79;
          v80 = 8 * v81;
          *v79 = **(_QWORD **)(*((_QWORD *)v14 + 3) + v80);
          **(_QWORD **)(*((_QWORD *)v14 + 3) + v80) = v79;
          v79 = v67;
        }
        v81 = v69;
LABEL_144:
        v67 = v79;
        v79 = (_QWORD *)*v79;
        v69 = v81;
        if (!v79)
          goto LABEL_158;
      }
    }
LABEL_183:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_163:
  v84 = *((_QWORD *)v14 + 3);
  v85 = *(_QWORD **)(v84 + 8 * v5);
  if (v85)
  {
    *v55 = *v85;
LABEL_171:
    *v85 = v55;
    goto LABEL_172;
  }
  *v55 = *((_QWORD *)v14 + 5);
  *((_QWORD *)v14 + 5) = v55;
  *(_QWORD *)(v84 + 8 * v5) = v14 + 20;
  if (*v55)
  {
    v86 = *(_QWORD *)(*v55 + 8);
    if ((v52 & (v52 - 1)) != 0)
    {
      if (v86 >= v52)
        v86 %= v52;
    }
    else
    {
      v86 &= v52 - 1;
    }
    v85 = (_QWORD *)(*((_QWORD *)v14 + 3) + 8 * v86);
    goto LABEL_171;
  }
LABEL_172:
  ++*((_QWORD *)v14 + 6);
LABEL_173:
  v55[5] |= 2uLL;
}

void sub_19FC76AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FC76B00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::RoadRenderLayer::featureMarker(uint64_t a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  geo::codec::VectorTile *v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  BOOL v16;
  unint64_t i;
  _QWORD *v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  __int128 v33;
  unint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;

  v3 = *(geo::codec::VectorTile **)(a1 + 640);
  *a3 = 0;
  a3[1] = 0;
  if (!v3)
    return;
  v7 = geo::codec::VectorTile::linesCount(v3);
  v8 = geo::codec::VectorTile::lines(*(geo::codec::VectorTile **)(a1 + 640));
  if (!v7)
    return;
  v9 = v8;
  v10 = 0;
  v11 = 0;
  v12 = *a2;
  v13 = a2[1];
  v14 = 1.0;
  do
  {
    v15 = v9 + 168 * v10;
    if (*(_DWORD *)(v15 + 100))
      v16 = v11 == v15;
    else
      v16 = 1;
    if (!v16)
    {
      for (i = 0; i < *(unsigned int *)(v15 + 100); ++i)
      {
        v39 = 0;
        v18 = geo::codec::multiSectionFeaturePoints((_QWORD *)(v9 + 168 * v10), i, &v39);
        v19 = v39;
        v20 = (float *)(v18 + 1);
        while (--v19)
        {
          v24 = v20[1];
          v26 = *(v20 - 2);
          v25 = *(v20 - 1);
          v27 = *v20 - v26;
          v28 = v24 - v25;
          v29 = (float)((float)((float)(v12 - v26) * v27) + (float)((float)(v13 - v25) * (float)(v24 - v25)))
              / (float)((float)(v27 * v27) + (float)(v28 * v28));
          if (v29 < 0.0)
          {
            v21 = v26 - v12;
            v22 = v25 - v13;
          }
          else
          {
            if (v29 > 1.0)
            {
              v23 = (float)((float)(*v20 - v12) * (float)(*v20 - v12))
                  + (float)((float)(v24 - v13) * (float)(v24 - v13));
              goto LABEL_14;
            }
            v21 = (float)(v26 - v12) + (float)(v29 * v27);
            v22 = (float)(v25 - v13) + (float)(v29 * v28);
          }
          v23 = (float)(v21 * v21) + (float)(v22 * v22);
LABEL_14:
          v20 += 2;
          if (v23 < v14)
          {
            v11 = v9 + 168 * v10;
            v14 = v23;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_5:
    ++v10;
  }
  while (v10 != v7);
  if (v14 < 0.0001)
  {
    v30 = (std::__shared_weak_count *)operator new(0x40uLL);
    v31 = v30;
    v30->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC2E0;
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4298458;
    v30[1].__shared_owners_ = 0;
    v30[1].__shared_weak_owners_ = 0;
    v30[2].__vftable = 0;
    v30[2].__shared_owners_ = v11;
    *(_QWORD *)&v33 = v30 + 1;
    *((_QWORD *)&v33 + 1) = v30;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v36 = __ldxr(p_shared_weak_owners);
    while (__stxr(v36 + 1, p_shared_weak_owners));
    v30[1].__shared_owners_ = (uint64_t)&v30[1];
    v30[1].__shared_weak_owners_ = (uint64_t)v30;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      v38 = v33;
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v31);
      v33 = v38;
    }
    *(_OWORD *)a3 = v33;
  }
}

void sub_19FC76D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4498;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4498;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::CasedTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::CasedTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

void std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC920;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC8D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RoadRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC8D8;
  a2[1] = v2;
  return result;
}

uint64_t md::RoadRenderLayer::RoadRenderLayer(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, int a6)
{
  id v10;
  unint64_t v11;
  __int16 v12;
  id v13;
  const RenderTargetFormat *v14;
  VKSharedResources *v15;
  _WORD *v16;
  void *v17;
  int64_t v18;
  const RenderTargetFormat *v19;
  uint64_t v20;
  VKSharedResources *v21;
  id v22;
  char *v23;
  char *v24;
  __int128 v25;
  md::CartographicTiledRenderResources *v26;
  uint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  md::RoadSharedResources *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  md::PatternedSharedResources *v41;
  const StandardLibrary *v42;
  id v43;
  md::PatternedSharedResources *v44;
  _QWORD *v45;
  void *v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  unsigned int v85;
  char *v86;
  uint64_t v89;
  int v90;
  void **v91;
  int v92;
  md::PatternedSharedResources **v93;
  char v94;
  md::RoadSharedResources **v95;
  id v96;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void *v102;
  __int128 v103;

  v10 = a3;
  if (a4 > 6)
  {
    v12 = 2;
    LOBYTE(v11) = 21;
  }
  else
  {
    v11 = 0x16191718151011uLL >> (8 * a4);
    v12 = word_1A00858E0[a4];
  }
  v13 = *(id *)(a2 + 104);
  v96 = v10;
  v14 = (const RenderTargetFormat *)objc_msgSend(v13, "format");
  if (v10)
  {
    objc_msgSend(v10, "standardCommandBufferSelector");
  }
  else
  {
    v100 = 0;
    v101 = 0;
  }
  v90 = a6;
  commandBufferLocationsForType((uint64_t)&v102, a4);
  v94 = v11;
  v15 = (VKSharedResources *)v10;
  v16 = operator new(2uLL);
  *v16 = v12;
  *(_QWORD *)a1 = off_1E428C468;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v17 = v102;
  v18 = v103 - (_QWORD)v102;
  if ((void *)v103 != v102)
  {
    v92 = a4;
    if (v18 < 0)
      abort();
    v19 = v14;
    v20 = a5;
    v21 = v15;
    v22 = v13;
    v23 = (char *)operator new(v103 - (_QWORD)v102);
    *(_QWORD *)(a1 + 8) = v23;
    *(_QWORD *)(a1 + 16) = v23;
    v24 = &v23[2 * (v18 >> 1)];
    *(_QWORD *)(a1 + 24) = v24;
    memcpy(v23, v17, v18);
    *(_QWORD *)(a1 + 16) = v24;
    v13 = v22;
    v15 = v21;
    a5 = v20;
    v14 = v19;
    a4 = v92;
  }
  *(_QWORD *)&v25 = v16;
  *((_QWORD *)&v25 + 1) = v16 + 1;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = v94;
  *(_QWORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = xmmword_19FFB3900;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 320) = v25;
  *(_QWORD *)(a1 + 336) = v16 + 1;
  *(_DWORD *)(a1 + 344) = 1;
  *(_QWORD *)a1 = off_1E42A9E80;
  *(_QWORD *)(a1 + 352) = 0;
  v26 = (md::CartographicTiledRenderResources *)operator new();
  md::CartographicTiledRenderResources::CartographicTiledRenderResources(v26, v15, v14);
  *(_QWORD *)(a1 + 352) = v26;

  if (v17)
  {
    *(_QWORD *)&v103 = v17;
    operator delete(v17);
  }
  if (v101)
  {
    p_shared_owners = &v101->__shared_owners_;
    do
      v28 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v28 - 1, (unint64_t *)p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }

  *(_QWORD *)a1 = &off_1E4290AC0;
  *(_DWORD *)(a1 + 364) = a4;
  v95 = (md::RoadSharedResources **)(a1 + 440);
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  v89 = a1 + 448;
  if (v96)
  {
    -[VKSharedResources standardCommandBufferSelector](v15, "standardCommandBufferSelector", v89);
  }
  else
  {
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = 0;
  }
  *(_QWORD *)(a1 + 464) = a5;
  v91 = (void **)(a1 + 488);
  v93 = (md::PatternedSharedResources **)(a1 + 472);
  *(_QWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v29 = -[VKSharedResources gglDevice](v15, "gglDevice", v89);
  v30 = *(unsigned __int8 *)(v29 + 20);
  if (*(_BYTE *)(v29 + 20))
    v31 = *(_DWORD *)(a1 + 364) == 6;
  else
    v31 = 1;
  v32 = (uint64_t *)operator new();
  v33 = -[VKSharedResources shaderLibrary](v15, "shaderLibrary");
  v34 = -[VKSharedResources isoAlphaAtlas](v15, "isoAlphaAtlas");
  v35 = -[VKSharedResources distanceAtlas](v15, "distanceAtlas");
  if (v96)
  {
    -[VKSharedResources textureManager](v15, "textureManager");
  }
  else
  {
    v98 = 0;
    v99 = 0;
  }
  v36 = *(id *)(a2 + 104);
  md::RoadSharedResources::RoadSharedResources(v32, v33, v34, v35, &v98, (__int128 *)objc_msgSend(v36, "format"), v31, -2.0, -2.0);
  v37 = *v95;
  *v95 = (md::RoadSharedResources *)v32;
  if (v37)
  {
    md::RoadSharedResources::~RoadSharedResources(v37);
    MEMORY[0x1A1AF4E00]();
  }

  v38 = v99;
  if (v99)
  {
    v39 = (unint64_t *)&v99->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (md::PatternedSharedResources *)operator new();
  v42 = -[VKSharedResources shaderLibrary](v15, "shaderLibrary");
  v43 = *(id *)(a2 + 104);
  md::PatternedSharedResources::PatternedSharedResources(v41, v42, (const RenderTargetFormat *)objc_msgSend(v43, "format"), v30 != 0, v90);
  v44 = *v93;
  *v93 = v41;
  if (v44)
  {
    md::PatternedSharedResources::~PatternedSharedResources(v44);
    MEMORY[0x1A1AF4E00]();
  }

  v45 = (_QWORD *)operator new();
  *v45 = 0;
  v45[1] = 0;
  v45[2] = 0;
  *(_QWORD *)(a1 + 480) = v45;
  commandBufferLocationsForType((uint64_t)&v102, *(_DWORD *)(a1 + 364));
  v46 = *v91;
  if (*v91)
  {
    *(_QWORD *)(a1 + 496) = v46;
    operator delete(v46);
    *v91 = 0;
    *(_QWORD *)(a1 + 496) = 0;
    *(_QWORD *)(a1 + 504) = 0;
  }
  v47 = (char *)v102;
  *(_QWORD *)(a1 + 488) = v102;
  v48 = (char *)v103;
  *(_OWORD *)(a1 + 496) = v103;
  v49 = v48;
  v50 = v48 - v47;
  v51 = (v48 - v47) >> 1;
  v52 = *(_BYTE **)(a1 + 368);
  if (v51 > (uint64_t)(*(_QWORD *)(a1 + 384) - (_QWORD)v52) >> 3)
  {
    if (v50 > 0x3FFFFFFFFFFFFFFELL)
      goto LABEL_81;
    v53 = *(_BYTE **)(a1 + 376);
    v54 = (char *)operator new(4 * v50);
    v55 = v53 - v52;
    v56 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
    v57 = v56;
    if (v53 == v52)
      goto LABEL_47;
    if ((unint64_t)(v55 - 8) >= 0x58)
    {
      v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v53 - &v54[v55 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v58 = v55 >> 3;
        v59 = ((unint64_t)(v55 - 8) >> 3) + 1;
        v60 = &v54[8 * v58 - 16];
        v61 = (__int128 *)(v53 - 16);
        v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v63 = *v61;
          *((_OWORD *)v60 - 1) = *(v61 - 1);
          *(_OWORD *)v60 = v63;
          v60 -= 32;
          v61 -= 2;
          v62 -= 4;
        }
        while (v62);
        v57 = &v56[-8 * (v59 & 0x3FFFFFFFFFFFFFFCLL)];
        v53 -= 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_47:
          *(_QWORD *)(a1 + 368) = v57;
          *(_QWORD *)(a1 + 376) = v56;
          *(_QWORD *)(a1 + 384) = &v54[8 * v51];
          if (v52)
          {
            operator delete(v52);
            v47 = *(char **)(a1 + 488);
            v49 = *(char **)(a1 + 496);
            v50 = v49 - v47;
            v51 = (v49 - v47) >> 1;
          }
          goto LABEL_49;
        }
      }
    }
    else
    {
      v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v64 = *((_QWORD *)v53 - 1);
      v53 -= 8;
      *((_QWORD *)v57 - 1) = v64;
      v57 -= 8;
    }
    while (v53 != v52);
    goto LABEL_47;
  }
LABEL_49:
  v65 = *(_BYTE **)(a1 + 392);
  if (v51 <= (uint64_t)(*(_QWORD *)(a1 + 408) - (_QWORD)v65) >> 3)
    goto LABEL_61;
  if (v50 > 0x3FFFFFFFFFFFFFFELL)
    goto LABEL_81;
  v66 = *(_BYTE **)(a1 + 400);
  v67 = (char *)operator new(4 * v50);
  v68 = v66 - v65;
  v69 = &v67[(v66 - v65) & 0xFFFFFFFFFFFFFFF8];
  v70 = v69;
  if (v66 != v65)
  {
    if ((unint64_t)(v68 - 8) < 0x58)
    {
      v70 = &v67[(v66 - v65) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_58:
        v77 = *((_QWORD *)v66 - 1);
        v66 -= 8;
        *((_QWORD *)v70 - 1) = v77;
        v70 -= 8;
      }
      while (v66 != v65);
      goto LABEL_59;
    }
    v70 = &v67[(v66 - v65) & 0xFFFFFFFFFFFFFFF8];
    if (v66 - v67 - (v68 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_58;
    v71 = v68 >> 3;
    v72 = ((unint64_t)(v68 - 8) >> 3) + 1;
    v73 = &v67[8 * v71 - 16];
    v74 = (__int128 *)(v66 - 16);
    v75 = v72 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *v74;
      *((_OWORD *)v73 - 1) = *(v74 - 1);
      *(_OWORD *)v73 = v76;
      v73 -= 32;
      v74 -= 2;
      v75 -= 4;
    }
    while (v75);
    v70 = &v69[-8 * (v72 & 0x3FFFFFFFFFFFFFFCLL)];
    v66 -= 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
    if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_58;
  }
LABEL_59:
  *(_QWORD *)(a1 + 392) = v70;
  *(_QWORD *)(a1 + 400) = v69;
  *(_QWORD *)(a1 + 408) = &v67[8 * v51];
  if (v65)
  {
    operator delete(v65);
    v47 = *(char **)(a1 + 488);
    v49 = *(char **)(a1 + 496);
    v50 = v49 - v47;
    v51 = (v49 - v47) >> 1;
  }
LABEL_61:
  v78 = *(_BYTE **)(a1 + 416);
  if (v51 <= (uint64_t)(*(_QWORD *)(a1 + 432) - (_QWORD)v78) >> 4)
    goto LABEL_70;
  if (v50 >= 0x1FFFFFFFFFFFFFFFLL)
LABEL_81:
    abort();
  v79 = *(_BYTE **)(a1 + 424);
  v80 = (char *)operator new(8 * v50);
  v81 = &v80[(v79 - v78) & 0xFFFFFFFFFFFFFFF0];
  v82 = v81;
  if (v79 != v78)
  {
    v83 = &v80[(v79 - v78) & 0xFFFFFFFFFFFFFFF0];
    do
    {
      v82 = v83 - 16;
      *((_OWORD *)v83 - 1) = *((_OWORD *)v79 - 1);
      v79 -= 16;
      v83 -= 16;
    }
    while (v79 != v78);
  }
  *(_QWORD *)(a1 + 416) = v82;
  *(_QWORD *)(a1 + 424) = v81;
  *(_QWORD *)(a1 + 432) = &v80[16 * v51];
  if (v78)
  {
    operator delete(v78);
    v47 = *(char **)(a1 + 488);
    v49 = *(char **)(a1 + 496);
  }
LABEL_70:
  while (v47 != v49)
  {
    v85 = *(unsigned __int16 *)v47;
    v84 = *(char **)(a1 + 416);
    v86 = *(char **)(a1 + 424);
    if (v84 != v86)
    {
      while (*v84 != v85 || v84[1] != v85 >> 8)
      {
        v84 += 16;
        if (v84 == v86)
          goto LABEL_68;
      }
    }
    if (v84 == v86)
    {
LABEL_68:
      LOWORD(v102) = *(_WORD *)v47;
      *(_QWORD *)&v103 = 0;
      v84 = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert(a1 + 416, (unsigned __int8 *)&v102);
    }
    *((_QWORD *)v84 + 1) = 0;
    v47 += 2;
  }

  return a1;
}

void sub_19FC776B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, md::RoadSharedResources **a13, void *a14)
{
  _QWORD *v14;
  void **v15;
  void *v17;
  void **v18;
  void *v19;
  void *v20;

  std::unique_ptr<md::RoadSharedResources>::~unique_ptr[abi:nn180100](a13);
  v17 = *v15;
  if (*v15)
  {
    v14[53] = v17;
    operator delete(v17);
  }
  v18 = (void **)(v14 + 46);
  v19 = (void *)v14[49];
  if (v19)
  {
    v14[50] = v19;
    operator delete(v19);
  }
  v20 = *v18;
  if (*v18)
  {
    v14[47] = v20;
    operator delete(v20);
  }
  md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(v14);

  _Unwind_Resume(a1);
}

void md::CompositeLabeler::~CompositeLabeler(md::CompositeLabeler *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E4291880;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    *((_QWORD *)this + 2) = v1;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v1, *((_QWORD *)this + 3) - v1);
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E4291880;
  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    *((_QWORD *)this + 2) = v1;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v1, *((_QWORD *)this + 3) - v1);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CompositeLabeler::render(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

uint64_t md::CompositeLabeler::resetOcclusionQueries(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 120))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabeler::updateOcclusionQueries(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabeler::stylesheetAnimationDidFinish(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3))
    v3 = *v1++;
  return this;
}

void md::CompositeLabeler::labelMarkerForSelectionAtPixel(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 16);
  if (v5 == v6)
  {
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    while (1)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 160))(*v5, a2, a3);
      if (*a4)
        break;
      v9 = (std::__shared_weak_count *)a4[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (++v5 == v6)
        goto LABEL_10;
    }
  }
}

void md::CompositeLabeler::labelMarkerForCustomFeatureAnnotation(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id v13;

  v13 = a2;
  v7 = a3;
  v8 = *(_QWORD **)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 16);
  while (v8 != v9)
  {
    (*(void (**)(_QWORD, id, id))(*(_QWORD *)*v8 + 168))(*v8, v13, v7);
    if (*a4)
      goto LABEL_11;
    v10 = (std::__shared_weak_count *)a4[1];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    ++v8;
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_11:

}

void sub_19FC77B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::setSelectedLabelMarker(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 176))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabeler::adoptSelectedLabelMarker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 == v3)
    return 0;
  v5 = v2 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 - 8) + 184))(*(_QWORD *)(v5 - 8), a2);
    if ((result & 1) != 0)
      break;
    v7 = v5 == v3;
    v5 += 8;
  }
  while (!v7);
  return result;
}

uint64_t md::CompositeLabeler::releaseAdoptedSelectedLabelMarker(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 192))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::CompositeLabeler::setPreviouslySelectedLabelMarker(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 208))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabeler::getLabelMarkers(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 216))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabeler::isLabelHitAtPixel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  BOOL v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5)
    return 0;
  v9 = v4 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v9 - 8) + 224))(*(_QWORD *)(v9 - 8), a2, a3, a4);
    if ((result & 1) != 0)
      break;
    v11 = v9 == v5;
    v9 += 8;
  }
  while (!v11);
  return result;
}

void md::CompositeLabeler::roadMarkerForSelectionAtPixel(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 16);
  if (v4 == v5)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 232))(*v4, a2);
      if (*a3)
        break;
      v7 = (std::__shared_weak_count *)a3[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (++v4 == v5)
        goto LABEL_10;
    }
  }
}

void md::CompositeLabeler::labelMarkerForLabel(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 16);
  if (v4 == v5)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 240))(*v4, a2);
      if (*a3)
        break;
      v7 = (std::__shared_weak_count *)a3[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (++v4 == v5)
        goto LABEL_10;
    }
  }
}

uint64_t md::CompositeLabeler::debugHighlightLabelAtPixel(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t result;
  uint64_t v6;

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = *(uint64_t ***)(a1 + 16);
  if (v2 == v3)
    return 0;
  LOBYTE(result) = 0;
  do
  {
    v6 = **v2;
    if ((result & 1) != 0)
    {
      (*(void (**)(uint64_t *))(v6 + 272))(*v2);
      result = 1;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 256))(*v2, a2);
    }
    ++v2;
  }
  while (v2 != v3);
  return result;
}

uint64_t md::CompositeLabeler::debugHighlightFeatureMarker(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 264))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

uint64_t md::CompositeLabeler::debugString@<X0>(md::CompositeLabeler *this@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v19;
  uint64_t v20;
  void **v21;
  size_t v22;
  unint64_t v23;
  const void **v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void *__p[2];
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  unint64_t v36;
  void *v37[2];
  __int128 v38;
  int v39;
  uint64_t v40[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40[0] = MEMORY[0x1E0DE4FE0] + 64;
  v32 = v9;
  *(uint64_t *)((char *)&v32 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v32 + *(_QWORD *)(v32 - 24));
  std::ios_base::init(v11, &v33);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v32 = v6 + 24;
  v40[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v33 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v14 = *((_QWORD *)this + 1);
  v13 = *((_QWORD *)this + 2);
  if (v13 == v14)
  {
    v23 = 0;
LABEL_25:
    if (v23 < v36)
    {
      *((_QWORD *)&v38 + 1) = v36;
      v23 = v36;
    }
    v24 = (const void **)&v35;
    goto LABEL_28;
  }
  v15 = 0;
  v16 = (v13 - v14) >> 3;
  do
  {
    v17 = *((unsigned __int8 *)this + 40);
    if (v16 <= v17 || v15 == v17)
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v14 + 8 * v15) + 280))(__p, *(_QWORD *)(v14 + 8 * v15), a2);
      v19 = v31;
      if ((v31 & 0x80u) == 0)
        v20 = v31;
      else
        v20 = (uint64_t)__p[1];
      if (v20)
      {
        if ((v31 & 0x80u) == 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)v21, v20);
        v19 = v31;
      }
      if ((v19 & 0x80) != 0)
        operator delete(__p[0]);
      v14 = *((_QWORD *)this + 1);
      v13 = *((_QWORD *)this + 2);
    }
    ++v15;
    v16 = (v13 - v14) >> 3;
  }
  while (v15 < v16);
  if ((v39 & 0x10) != 0)
  {
    v23 = *((_QWORD *)&v38 + 1);
    goto LABEL_25;
  }
  if ((v39 & 8) == 0)
  {
    v22 = 0;
    a3[23] = 0;
    goto LABEL_36;
  }
  v24 = (const void **)v34;
  v23 = v34[2];
LABEL_28:
  v25 = *v24;
  v22 = v23 - (_QWORD)*v24;
  if (v22 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v22 >= 0x17)
  {
    v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v26 = v22 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a3 + 1) = v22;
    *((_QWORD *)a3 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a3 = v28;
    a3 = v28;
    goto LABEL_35;
  }
  a3[23] = v22;
  if (v22)
LABEL_35:
    memmove(a3, v25, v22);
LABEL_36:
  a3[v22] = 0;
  v32 = *v8;
  *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = v8[3];
  v33 = v12 + 16;
  if (SBYTE7(v38) < 0)
    operator delete(v37[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v40);
}

void sub_19FC781FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FC78224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::populateDebugNode(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 288))(v7, a2, a3))
  {
    v7 = *v3++;
  }
  return result;
}

void md::CompositeLabeler::debugDraw(md::CompositeLabeler *this, NSMutableString *a2, md::DebugConsole *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  NSMutableString *v8;

  v8 = a2;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 296))(*v5))
      (*(void (**)(uint64_t, NSMutableString *, md::DebugConsole *))(*(_QWORD *)v7 + 304))(v7, v8, a3);
    ++v5;
  }

}

void sub_19FC7832C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t (***md::MapEngineSyncAccessor::configurationDidChange(md::MapEngineSyncAccessor *this))()
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  void *v19;
  int8x8_t *v20;
  int8x8_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t (***v25)();
  uint64_t v26;
  md::LabelManager *v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (***result)();
  uint64_t v55;
  uint64_t (**v56)();
  md::MapEngineSyncAccessor *v57;
  uint64_t (***v58)();
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 112);
  v3 = *(_QWORD *)(v2[3] + 56);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 32);
    for (i = *(_QWORD *)(v3 + 40); v4 != i; v4 += 16)
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 104))(*(_QWORD *)(v4 + 8));
  }
  v6 = (_QWORD *)v2[42];
  if (v6)
  {
    v7 = *v6;
    v8 = (std::mutex *)(*v6 + 48);
    std::mutex::lock(v8);
    std::__tree<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,md::FlyoverRegionManager::Internal::TileRegionAreaCache>>>::destroy(*(_QWORD **)(v7 + 8));
    *(_QWORD *)v7 = v7 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    md::FlyoverRegionManager::Internal::updateTriggers((uint64_t ***)v7);
    std::mutex::unlock(v8);
  }
  v2[39] = 0;
  v9 = *(_QWORD *)(v2[3] + 56);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(_QWORD *)(v9 + 40);
  if (v10 != v11)
  {
    while (*(_WORD *)v10 != 9)
    {
      v10 += 16;
      if (v10 == v11)
        goto LABEL_14;
    }
  }
  if (v10 != v11)
  {
    (*(void (**)(uint64_t (***__return_ptr)()))(**(_QWORD **)(v10 + 8) + 72))(&v56);
    if ((_BYTE)v56)
    {
      if (v2[39] < (unint64_t)HIDWORD(v56))
        v2[39] = HIDWORD(v56);
    }
  }
LABEL_14:
  v12 = *(_QWORD *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 40);
  if (v12 != v13)
  {
    while (*(_WORD *)v12 != 1)
    {
      v12 += 16;
      if (v12 == v13)
        goto LABEL_22;
    }
  }
  if (v12 == v13)
  {
LABEL_22:
    v14 = v2[39];
  }
  else
  {
    (*(void (**)(uint64_t (***__return_ptr)()))(**(_QWORD **)(v12 + 8) + 72))(&v56);
    v14 = v2[39];
    if ((_BYTE)v56 && v14 < HIDWORD(v56))
    {
      v2[39] = HIDWORD(v56);
      goto LABEL_25;
    }
  }
  if (!v14)
    v2[39] = 256;
LABEL_25:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "forceFlyoverUnificationMode");
  if ((v16 & 1) != 0 || !GEOConfigGetBOOL())
  {
    *((_BYTE *)this + 1241) = v16;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "activeTileGroup");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "activeTileSetForTileType:scale:", 92, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *((_BYTE *)this + 1241) = v19 != 0;

  }
  v20 = (int8x8_t *)*((_QWORD *)this + 140);
  v21 = v20[2];
  if ((*(_QWORD *)&v21 & (*(_QWORD *)&v21 - 1)) != 0)
  {
    v23 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v21 <= 0x20A1ED17D78F322BuLL)
      v23 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v21;
    v22 = *(_QWORD **)(*(_QWORD *)&v20[1] + 8 * v23);
    do
    {
      do
        v22 = (_QWORD *)*v22;
      while (v22[1] != 0x20A1ED17D78F322BLL);
    }
    while (v22[2] != 0x20A1ED17D78F322BLL);
  }
  else
  {
    v22 = *(_QWORD **)(*(_QWORD *)&v20[1] + 8 * ((*(_QWORD *)&v21 - 1) & 0x20A1ED17D78F322BLL));
    do
    {
      do
        v22 = (_QWORD *)*v22;
      while (v22[1] != 0x20A1ED17D78F322BLL);
    }
    while (v22[2] != 0x20A1ED17D78F322BLL);
  }
  v24 = *(_QWORD **)(v22[5] + 192);
  if (!v24)
    goto LABEL_48;
  do
  {
    v27 = (md::LabelManager *)v24[3];
    v56 = &off_1E42CA130;
    v57 = v27;
    v58 = &v56;
    md::LabelManager::queueCommand(v27, 0, 1, &v56);
    v25 = v58;
    if (v58 == &v56)
    {
      v25 = &v56;
      v26 = 4;
LABEL_42:
      (*v25)[v26]();
      goto LABEL_43;
    }
    if (v58)
    {
      v26 = 5;
      goto LABEL_42;
    }
LABEL_43:
    v24 = (_QWORD *)*v24;
  }
  while (v24);
  v20 = (int8x8_t *)*((_QWORD *)this + 140);
  v21 = v20[2];
  if (!*(_QWORD *)&v21)
    goto LABEL_102;
LABEL_48:
  v28 = (uint8x8_t)vcnt_s8(v21);
  v28.i16[0] = vaddlv_u8(v28);
  v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    v30 = 0x669A8EDAC04FCBF1;
    if (*(_QWORD *)&v21 <= 0x669A8EDAC04FCBF1uLL)
      v30 = 0x669A8EDAC04FCBF1uLL % *(_QWORD *)&v21;
  }
  else
  {
    v30 = (*(_QWORD *)&v21 - 1) & 0x669A8EDAC04FCBF1;
  }
  v31 = *(_QWORD **)(*(_QWORD *)&v20[1] + 8 * v30);
  if (!v31)
    goto LABEL_80;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_80;
  if (v28.u32[0] < 2uLL)
  {
    while (1)
    {
      v34 = v32[1];
      if (v34 == 0x669A8EDAC04FCBF1)
      {
        if (v32[2] == 0x669A8EDAC04FCBF1)
          goto LABEL_68;
      }
      else if ((v34 & (*(_QWORD *)&v21 - 1)) != v30)
      {
        goto LABEL_78;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_78;
    }
  }
  while (2)
  {
    v33 = v32[1];
    if (v33 != 0x669A8EDAC04FCBF1)
    {
      if (v33 >= *(_QWORD *)&v21)
        v33 %= *(_QWORD *)&v21;
      if (v33 != v30)
        goto LABEL_78;
      goto LABEL_57;
    }
    if (v32[2] != 0x669A8EDAC04FCBF1)
    {
LABEL_57:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_78;
      continue;
    }
    break;
  }
LABEL_68:
  v35 = v32[5];
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 144);
    v37 = *(_QWORD *)(v36 + 56);
    v38 = *(_QWORD *)(v36 + 64);
    if (v37 != v38)
    {
      while (*(_WORD *)v37 != 35)
      {
        v37 += 16;
        if (v37 == v38)
          goto LABEL_78;
      }
    }
    if (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 8);
      if (v39)
      {
        (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, uint64_t))(**(_QWORD **)(v39 + 8) + 24))(&v56, *(_QWORD *)(v39 + 8), 22);
        if ((_BYTE)v56)
          atomic_store(v57, (unsigned __int8 *)(*(_QWORD *)(v35 + 168) + 24));
        v20 = (int8x8_t *)*((_QWORD *)this + 140);
        v21 = v20[2];
      }
    }
  }
LABEL_78:
  if (!*(_QWORD *)&v21)
    goto LABEL_102;
  v40 = (uint8x8_t)vcnt_s8(v21);
  v40.i16[0] = vaddlv_u8(v40);
  v29 = v40.u32[0];
LABEL_80:
  if (v29 > 1)
  {
    v41 = 0xEA624BC935BAF297;
    if (*(_QWORD *)&v21 <= 0xEA624BC935BAF297)
      v41 = 0xEA624BC935BAF297 % *(_QWORD *)&v21;
  }
  else
  {
    v41 = (*(_QWORD *)&v21 - 1) & 0xEA624BC935BAF297;
  }
  v42 = *(_QWORD **)(*(_QWORD *)&v20[1] + 8 * v41);
  if (v42)
  {
    v43 = (_QWORD *)*v42;
    if (v43)
    {
      if (v29 < 2)
      {
        v44 = *(_QWORD *)&v21 - 1;
        while (1)
        {
          v46 = v43[1];
          if (v46 == 0xEA624BC935BAF297)
          {
            if (v43[2] == 0xEA624BC935BAF297)
              goto LABEL_100;
          }
          else if ((v46 & v44) != v41)
          {
            goto LABEL_102;
          }
          v43 = (_QWORD *)*v43;
          if (!v43)
            goto LABEL_102;
        }
      }
      do
      {
        v45 = v43[1];
        if (v45 == 0xEA624BC935BAF297)
        {
          if (v43[2] == 0xEA624BC935BAF297)
          {
LABEL_100:
            v47 = v43[5];
            if (v47)
            {
              objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              *(_BYTE *)(v47 + 184) = objc_msgSend(v48, "isMuninEnabled");

            }
            break;
          }
        }
        else
        {
          if (v45 >= *(_QWORD *)&v21)
            v45 %= *(_QWORD *)&v21;
          if (v45 != v41)
            break;
        }
        v43 = (_QWORD *)*v43;
      }
      while (v43);
    }
  }
LABEL_102:
  v49 = *((_QWORD *)this + 112);
  v50 = *(_QWORD *)(v49 + 56);
  v51 = *(_QWORD *)(v49 + 64);
  if (v50 != v51)
  {
    while (*(_WORD *)v50 != 54)
    {
      v50 += 16;
      if (v50 == v51)
        goto LABEL_109;
    }
  }
  if (v50 == v51)
  {
LABEL_109:
    LOBYTE(v52) = 0;
  }
  else
  {
    v52 = *(_QWORD *)(v50 + 8);
    if (v52)
    {
      (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, uint64_t))(**(_QWORD **)(v52 + 8) + 24))(&v56, *(_QWORD *)(v52 + 8), 38);
      LOBYTE(v52) = (_BYTE)v56 != 0;
    }
  }
  *((_BYTE *)this + 1240) = v52;
  md::MapEngine::updateDaVinciPOILabelsAvailable(this);
  v53 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v56 = &off_1E42D49F0;
  v57 = this;
  v58 = &v56;
  geo::TaskQueue::barrierSync(v53, &v56);
  result = v58;
  if (v58 == &v56)
  {
    v55 = 4;
    result = &v56;
    return (uint64_t (***)())(*result)[v55]();
  }
  else if (v58)
  {
    v55 = 5;
    return (uint64_t (***)())(*result)[v55]();
  }
  return result;
}

void sub_19FC789C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC78A28(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FC78A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  if (a13 == &a10)
    JUMPOUT(0x19FC78A48);
  JUMPOUT(0x19FC78A04);
}

BOOL karo::media::JpegLoaderPwin::loadFromChunk(int *a1, pwin_jpg *this, unsigned __int8 *a3, uint64_t a4, int *a5)
{
  BOOL v5;
  int v7;
  int v10;
  _BOOL8 result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  size_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  __n128 v85;
  __n128 v86;
  unint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  float64x2_t v97;
  uint64_t v98;
  int v99;
  float64x2_t v100;
  double v101;
  _BYTE *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  double v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t shared_owners;
  unsigned int v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  _DWORD *v127;
  int v128;
  size_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  ggl::Data *v132;
  uint64_t v133;
  ggl::Data **v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  double v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  double v158;
  double v159;
  double v160;
  double v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  BOOL v188;
  int v189;
  int v190;
  _DWORD *v191;
  unsigned int v192;
  unint64_t v193;
  unsigned __int8 *v194;
  unsigned __int8 *v195;
  uint64_t v196;
  _DWORD *v197;
  unsigned int v198;
  unsigned int v199;
  BOOL v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  _BYTE *v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  BOOL v213;
  _DWORD *v214;
  int v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  _DWORD *v220;
  _DWORD *v221;
  uint64_t v222;
  uint64_t v223;
  _DWORD *v224;
  unint64_t v225;
  int v226;
  int v227;
  char v228;
  int v229;
  _DWORD *v230;
  int v231;
  uint64_t v232;
  int v233;
  char v234;
  _DWORD *v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  int v240;
  unsigned int v241;
  int v242;
  int v243;
  _WORD *v244;
  int v245;
  int v246;
  uint64_t v247;
  int v248;
  char v249;
  _DWORD *v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  __int16 v259;
  uint64_t v260;
  uint64_t v261;
  _WORD *v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int16x8_t v280;
  int32x4_t v281;
  int16x8_t v282;
  int32x4_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int16x8_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int16x8_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  unsigned __int8 *v314;
  __int16 *v315;
  int v316;
  char v317;
  int v318;
  char v319;
  int v320;
  char v321;
  int v322;
  char v323;
  int v324;
  char v325;
  int v326;
  char v327;
  int v328;
  char v329;
  int v330;
  char v331;
  uint64_t v332;
  uint64_t v333;
  unsigned __int8 *v334;
  __int16 *v335;
  int v336;
  char v337;
  int v338;
  char v339;
  int v340;
  char v341;
  int v342;
  char v343;
  int v344;
  char v345;
  int v346;
  char v347;
  int v348;
  char v349;
  int v350;
  char v351;
  uint64_t v352;
  uint64_t v353;
  unsigned __int8 *v354;
  __int16 *v355;
  int v356;
  char v357;
  int v358;
  char v359;
  int v360;
  char v361;
  int v362;
  char v363;
  int v364;
  char v365;
  int v366;
  char v367;
  int v368;
  char v369;
  int v370;
  char v371;
  uint64_t v372;
  unsigned __int8 *v373;
  unsigned __int16 v374;
  char v375;
  unsigned __int8 v376;
  int v377;
  char v378;
  unsigned __int8 v379;
  int v380;
  char v381;
  unsigned __int8 v382;
  int v383;
  char v384;
  unsigned __int8 v385;
  int v386;
  char v387;
  unsigned __int8 v388;
  int v389;
  char v390;
  unsigned __int8 v391;
  int v392;
  char v393;
  unsigned __int8 v394;
  int v395;
  char v396;
  unsigned __int8 v397;
  unsigned __int8 *v398;
  int v399;
  char v400;
  unsigned __int8 v401;
  int v402;
  char v403;
  unsigned __int8 v404;
  int v405;
  char v406;
  unsigned __int8 v407;
  int v408;
  char v409;
  unsigned __int8 v410;
  int v411;
  char v412;
  unsigned __int8 v413;
  int v414;
  char v415;
  unsigned __int8 v416;
  int v417;
  char v418;
  unsigned __int8 v419;
  int v420;
  char v421;
  unsigned __int8 v422;
  unsigned __int8 *v423;
  int v424;
  char v425;
  unsigned __int8 v426;
  int v427;
  char v428;
  unsigned __int8 v429;
  int v430;
  char v431;
  unsigned __int8 v432;
  int v433;
  char v434;
  unsigned __int8 v435;
  int v436;
  char v437;
  unsigned __int8 v438;
  int v439;
  char v440;
  unsigned __int8 v441;
  int v442;
  char v443;
  unsigned __int8 v444;
  int v445;
  char v446;
  unsigned __int8 v447;
  unsigned __int8 *v448;
  int v449;
  char v450;
  unsigned __int8 v451;
  int v452;
  char v453;
  unsigned __int8 v454;
  int v455;
  char v456;
  unsigned __int8 v457;
  int v458;
  char v459;
  unsigned __int8 v460;
  int v461;
  char v462;
  unsigned __int8 v463;
  int v464;
  char v465;
  unsigned __int8 v466;
  int v467;
  char v468;
  unsigned __int8 v469;
  int v470;
  char v471;
  unsigned __int8 v472;
  uint64_t v473;
  uint64_t v474;
  unsigned __int8 *v475;
  __int16 *v476;
  int v477;
  char v478;
  int v479;
  char v480;
  int v481;
  char v482;
  int v483;
  char v484;
  int v485;
  char v486;
  int v487;
  char v488;
  int v489;
  char v490;
  int v491;
  char v492;
  uint64_t v493;
  uint64_t v494;
  unsigned __int8 *v495;
  __int16 *v496;
  int v497;
  char v498;
  int v499;
  char v500;
  int v501;
  char v502;
  int v503;
  char v504;
  int v505;
  char v506;
  int v507;
  char v508;
  int v509;
  char v510;
  int v511;
  char v512;
  int v513;
  int v514;
  uint64_t v515;
  int v516;
  int v517;
  _DWORD *v518;
  int *v519;
  unsigned __int8 **v520;
  int v521;
  char v522;
  int v523;
  int v524;
  unsigned int v525;
  int16x8_t v526;
  int16x8_t v527;
  int16x8_t v528;
  int16x8_t v529;
  int16x8_t v530;
  int16x8_t v531;
  int16x8_t v532;
  int16x8_t v533;
  int16x8_t v534;
  int16x8_t v535;
  int16x8_t v536;
  int32x4_t v537;
  _QWORD *v538;
  int *v539;
  _DWORD *v540;
  unsigned int v541;
  int v542;
  int v543;
  _DWORD *v544;
  int v545;
  char v546;
  int *v547;
  int v548;
  _DWORD *v549;
  _DWORD *v550;
  uint64_t v551;
  uint64_t v552;
  int v553[2];
  uint8_t buf[2];
  unsigned __int8 v555;
  unsigned __int8 v556;
  unsigned __int8 v557;
  __int16 v558;
  unsigned __int8 v559;
  __int16 v560;
  __int16 v561;
  unsigned __int8 v562;
  unsigned __int8 v563;
  unsigned __int8 v564;
  int v565;
  int v566;
  unsigned __int8 v567;
  _BYTE v568[2];
  _BYTE v569[2187];
  _BYTE v570[262];
  __int16 v571;
  unsigned __int8 *v572;
  int v573;
  int v574;
  int v575;
  uint64_t v576;
  int v577;
  int v578;
  int v579;
  uint64_t v580;
  int v581;
  int v582;
  int v583;
  _BYTE v584[160];
  uint64_t v585;

  v585 = *MEMORY[0x1E0C80C00];
  v5 = *a1 > 0x1D || ((1 << *a1) & 0x20004047) == 0;
  if (v5)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v81 = GEOGetVectorKitVKDefaultLog_log;
    result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v81, OS_LOG_TYPE_ERROR, "Unsupported output format for jpeg loader.", buf, 2u);
      return 0;
    }
  }
  else
  {
    v7 = (int)a3;
    *(_QWORD *)v553 = 0;
    v10 = pwin_jpg::p_info_mem_jpg(this, a3, &v553[1], v553, a5);
    result = 0;
    if (v10)
    {
      v12 = v553[1];
      if (v553[1])
      {
        v13 = v553[0];
        if (v553[0])
        {
          v14 = v553[0] * v553[1];
          v572 = (unsigned __int8 *)operator new[]();
          v573 = v12;
          v574 = v13;
          v575 = v12;
          v576 = operator new[]();
          v15 = v12 >> 1;
          v16 = v13 >> 1;
          v577 = v15;
          v578 = v16;
          v579 = v15;
          v580 = operator new[]();
          v581 = v15;
          v582 = v16;
          v583 = v15;
          v17 = v7 + 5;
          v18 = v7 + 5;
          v19 = (unsigned __int8 *)malloc_type_malloc(v18, 0xA86C84AuLL);
          memcpy(v19, this, v7);
          v571 = 0;
          if ((v7 + 4) < 2)
            goto LABEL_103;
          if (*v19 != 255 || v19[1] != 216)
          {
            puts("Error SOI expected");
            goto LABEL_103;
          }
          v20 = v7 + 2;
          v21 = v7 + 4;
          v22 = v19 + 1;
          v23 = v7 + 3;
          LODWORD(v24) = 2;
LABEL_12:
          while (2)
          {
            v25 = (int)v24;
            v26 = (int)v24 + 1;
            if ((_DWORD)v26 == v17)
              goto LABEL_103;
            if (v19[(int)v24] != 255)
            {
              printf("Error SECTION_MARKER expected %x\n", v19[(int)v24]);
              goto LABEL_103;
            }
            v27 = (int)v24 + 2;
            if ((_DWORD)v24 + 2 == v17)
              goto LABEL_103;
            LODWORD(v24) = v24 + 2;
            switch(v19[v26])
            {
              case 0xC0u:
                v28 = v25 + 4;
                if ((_DWORD)v25 == v20)
                  v28 = v7 + 5;
                v29 = v28;
                v564 = v19[v28];
                v30 = v28 + 1;
                if ((_DWORD)v30 == v17)
                  goto LABEL_103;
                if ((_DWORD)v29 + 2 == v17 || (v31 = v29 + 3, (_DWORD)v29 + 3 == v17))
                {
                  v32 = -1;
                  v33 = v17;
                  v34 = v7 + 5;
                }
                else
                {
                  v32 = v19[v29 + 2] | (v19[v30] << 8);
                  v33 = v31;
                  v34 = v31;
                }
                v565 = v32;
                v67 = v34 + 1;
                if ((_DWORD)v67 == v17 || (v68 = v34 + 2, v68 == v17))
                {
                  v69 = -1;
                  v24 = v17;
                  v68 = v7 + 5;
                }
                else
                {
                  v69 = v19[v67] | (v19[v33] << 8);
                  v24 = v68;
                }
                v566 = v69;
                v70 = v19[v24];
                v567 = v19[v24];
                LODWORD(v24) = v68 + 1;
                if (v68 + 1 == v17)
                  goto LABEL_103;
                if (!(_DWORD)v70)
                  continue;
                v24 = 0;
                v71 = 3 * v70;
                do
                {
                  v568[v24] = v22[v68 + v24];
                  if (v7 - v68 + 3 == (_DWORD)v24)
                    goto LABEL_103;
                  v568[v24 + 1] = v19[v68 + 2 + v24];
                  if (v7 - v68 + 2 == (_DWORD)v24)
                    goto LABEL_103;
                  v568[v24 + 2] = v19[v68 + 3 + (int)v24];
                  if (v7 - v68 + 1 == (_DWORD)v24)
                    goto LABEL_103;
                  v24 += 3;
                }
                while (v71 != v24);
                LODWORD(v24) = v68 + v24 + 1;
                continue;
              case 0xC4u:
                LODWORD(v24) = v7 + 5;
                if ((_DWORD)v25 + 3 == v17)
                  continue;
                v35 = v25 + 4;
                LODWORD(v24) = v7 + 5;
                if ((_DWORD)v25 + 4 == v17)
                  continue;
                v36 = v19[v25 + 3] | (v19[v27] << 8);
                LODWORD(v24) = v35;
                if (v36 < 3)
                  continue;
                v37 = v36 - 2;
                LODWORD(v24) = v35;
                while (1)
                {
                  if ((_DWORD)v24 == v21)
                    goto LABEL_103;
                  v38 = 0;
                  LODWORD(v39) = 0;
                  v40 = v19[(int)v24];
                  v41 = v40 >> 4;
                  v42 = v40 & 0xF;
                  do
                  {
                    v43 = v38;
                    if (v23 - (_DWORD)v24 == (_DWORD)v38)
                      goto LABEL_103;
                    v44 = v22[(int)v24 + v38];
                    buf[544 * v42 + 40 + 272 * v41 + v43] = v44;
                    v39 = (v39 + v44);
                    v38 = v43 + 1;
                  }
                  while (v43 != 15);
                  if ((_DWORD)v39)
                    break;
                  LODWORD(v24) = v24 + 1 + v38;
LABEL_36:
                  v37 = v37 - v39 - 17;
                  if (v37 <= 0)
                    goto LABEL_12;
                }
                v45 = v20 - v24 - 15;
                v46 = &v569[544 * v42 + 25 + 272 * v41];
                v47 = v39;
                v24 = (int)v24 + 2 - 1 + v38;
                while (1)
                {
                  *v46 = v19[v24];
                  if (!v45)
                    goto LABEL_103;
                  --v45;
                  ++v46;
                  ++v24;
                  if (!--v47)
                    goto LABEL_36;
                }
              case 0xD8u:
                continue;
              case 0xD9u:
                goto LABEL_103;
              case 0xDAu:
                if ((_DWORD)v25 + 3 == v17 || (v183 = v25 + 4, (_DWORD)v25 + 4 == v17))
                {
                  v184 = -4;
                  v183 = v7 + 5;
                }
                else
                {
                  v184 = (v19[v25 + 3] | (v19[v27] << 8)) - 3;
                  v18 = v183;
                }
                v185 = v19[v18];
                v569[2185] = v19[v18];
                v186 = v183 + 1;
                if (v183 + 1 == v17)
                  goto LABEL_103;
                if (!(_DWORD)v185)
                  goto LABEL_200;
                v187 = 0;
                break;
              case 0xDBu:
                LODWORD(v24) = v7 + 5;
                if ((_DWORD)v25 + 3 == v17)
                  continue;
                v48 = v25 + 4;
                LODWORD(v24) = v7 + 5;
                if ((_DWORD)v25 + 4 == v17)
                  continue;
                v49 = v19[v25 + 3] | (v19[v27] << 8);
                LODWORD(v24) = v25 + 4;
                if (v49 < 0x43)
                  continue;
                v50 = 0;
                v51 = (unsigned __int16)(v49 - 2) / 0x41u;
                LODWORD(v24) = v48;
                do
                {
                  if ((_DWORD)v24 == v21)
                    goto LABEL_103;
                  v52 = 0;
                  v53 = v19[(int)v24];
                  do
                  {
                    *(_WORD *)&buf[128 * v53 + 2224 + 2 * pwin_jpg::zigzag_array[v52]] = v22[(int)v24 + v52];
                    if (v23 - (_DWORD)v24 == (_DWORD)v52)
                      goto LABEL_103;
                    ++v52;
                  }
                  while (v52 != 64);
                  LODWORD(v24) = v24 + 65;
                  ++v50;
                }
                while (v50 != v51);
                continue;
              case 0xDDu:
                if ((_DWORD)v25 == v20)
                  v64 = v7 + 5;
                else
                  v64 = v25 + 4;
                v65 = v64;
                v66 = v64 + 1;
                if ((_DWORD)v66 == v17 || (LODWORD(v24) = v64 + 2, (_DWORD)v24 == v17))
                {
                  LODWORD(v24) = v7 + 5;
                  v571 = -1;
                }
                else
                {
                  v571 = v19[v66] | (v19[v65] << 8);
                }
                continue;
              case 0xE0u:
                v54 = v25 + 4;
                if ((_DWORD)v25 == v20)
                  v54 = v7 + 5;
                v55 = v54;
                buf[0] = v19[v54];
                v56 = v54 + 1;
                if ((_DWORD)v56 == v17)
                  goto LABEL_103;
                buf[1] = v19[v56];
                if ((_DWORD)v55 + 2 == v17)
                  goto LABEL_103;
                v555 = v19[v55 + 2];
                if ((_DWORD)v55 + 3 == v17)
                  goto LABEL_103;
                v556 = v19[v55 + 3];
                if ((_DWORD)v55 + 4 == v17)
                  goto LABEL_103;
                v557 = v19[v55 + 4];
                if ((_DWORD)v55 == v7)
                  goto LABEL_103;
                if ((_DWORD)v55 + 6 == v17 || (v57 = v55 + 7, (_DWORD)v55 + 7 == v17))
                {
                  v58 = -1;
                  v59 = v17;
                  v57 = v7 + 5;
                }
                else
                {
                  v58 = v19[v55 + 6] | (v19[v55 + 5] << 8);
                  v59 = v57;
                }
                v558 = v58;
                v559 = v19[v59];
                v72 = v57 + 1;
                if ((_DWORD)v72 == v17)
                  goto LABEL_103;
                v73 = v57 + 2;
                if (v57 + 2 == v17 || (v74 = v57 + 3, v74 == v17))
                {
                  v75 = -1;
                  v76 = v17;
                  v74 = v7 + 5;
                }
                else
                {
                  v75 = v19[v73] | (v19[v72] << 8);
                  v76 = v74;
                }
                v560 = v75;
                v77 = v74 + 1;
                if ((_DWORD)v77 == v17 || (v78 = v74 + 2, v74 + 2 == v17))
                {
                  v79 = -1;
                  v80 = v17;
                  v78 = v7 + 5;
                }
                else
                {
                  v79 = v19[v77] | (v19[v76] << 8);
                  v80 = v78;
                }
                v561 = v79;
                v562 = v19[v80];
                v24 = v78 + 1;
                if ((_DWORD)v24 == v17)
                  goto LABEL_103;
                v563 = v19[v24];
                LODWORD(v24) = v78 + 2;
                if (v78 + 2 == v17)
                  goto LABEL_103;
                continue;
              default:
                LODWORD(v24) = v7 + 5;
                if ((_DWORD)v25 + 3 == v17)
                  continue;
                LODWORD(v24) = v7 + 5;
                if ((_DWORD)v25 + 4 == v17)
                  continue;
                v60 = v19[v25 + 3];
                LODWORD(v24) = v25 + 4;
                if ((v60 & 0xFFFF00FF | (v19[v27] << 8)) < 3)
                  continue;
                v61 = (v19[v27] << 8) + v60;
                LODWORD(v24) = v61 + v27;
                v62 = v7 - v25;
                v63 = v61 - 2;
                do
                {
                  if (!v62)
                    goto LABEL_103;
                  --v62;
                  --v63;
                }
                while (v63);
                continue;
            }
            break;
          }
          while (1)
          {
            v569[v187 + 2186] = v19[v183 + 1 + v187];
            if (v7 - v183 + 3 == (_DWORD)v187)
              break;
            v569[v187 + 2187] = v19[v183 + 2 + v187];
            if (v7 - v183 + 2 == (_DWORD)v187)
              break;
            v187 += 2;
            if (2 * v185 == v187)
            {
              v186 = v183 + v187 + 1;
LABEL_200:
              v188 = __OFSUB__(v184, 2 * v185);
              v189 = v184 - 2 * v185;
              if (!((v189 < 0) ^ v188 | (v189 == 0)))
              {
                v190 = 0;
                do
                {
                  if (!(v186 - v7 - 4 + v190))
                    goto LABEL_103;
                  ++v190;
                }
                while (v190 < v189);
                v186 += v190;
              }
              v548 = v186;
              v191 = malloc_type_malloc(0x70878uLL, 0x1030040464CFE01uLL);
              v544 = v191 + 38404;
              v191[38408] = 17;
              v192 = v567;
              v551 = v14;
              v552 = a4;
              v550 = v191;
              v547 = v191 + 38408;
              if (v567)
              {
                v193 = 0;
                v194 = v570;
                v195 = v569;
                v196 = (uint64_t)v191;
                v197 = v191 + 38408;
                do
                {
                  v198 = *v194;
                  v194 += 2;
                  pwin_jpg::generate_huf_nodes((uint64_t)&v569[544 * (v198 >> 4) + 9], v196);
                  pwin_jpg::generate_huf_nodes((uint64_t)&v569[544 * (v198 & 0xF) + 281], v196 + 76808);
                  *(v197 - 4) = 0;
                  *v197 = *(v195 - 1);
                  v199 = *v195;
                  v195 += 3;
                  *((_QWORD *)v197 - 1) = &v570[128 * (unint64_t)v199 + 6];
                  ++v193;
                  v192 = v567;
                  v197 += 38410;
                  v196 += 153640;
                }
                while (v193 < v567);
                if (v567 == 1)
                {
                  *v547 = 17;
                  v192 = 1;
                }
              }
              v201 = v573 != 2 * v577 || v574 != 2 * v578;
              v546 = v201;
              v202 = v565;
              v203 = v548;
              if (v565 < 1)
                goto LABEL_739;
              v204 = v566;
              if (v566 < 1)
                goto LABEL_739;
              v205 = 0;
              v206 = 0;
              v207 = 0;
              v545 = 0;
              v208 = &v584[-(uint64_t)v584 & 0xE];
              v541 = (*v547 >> 1) & 0xFFFFFFF8;
              v542 = 8 * (*v547 & 0xF);
              v209 = v17 - 5;
              v536 = vdupq_n_s16(0x539Fu);
              v537 = vdupq_n_s32(0x7FFE0u);
              v534 = vdupq_n_s16(0xDD5Du);
              v535 = vdupq_n_s16(0x22A3u);
              v532 = vdupq_n_s16(0x58C5u);
              v533 = vdupq_n_s16(0xAC61u);
              v530 = vdupq_n_s16(0x3249u);
              v531 = vdupq_n_s16(0x4B42u);
              v528 = vdupq_n_s16(0xEE58u);
              v529 = vdupq_n_s16(0x11A8u);
              v526 = vdupq_n_s16(0xCDB7u);
              v527 = vdupq_n_s16(0xA73Bu);
              v210 = v192;
              v211 = v192;
              v543 = v17 - 5;
              while (1)
              {
                if (v204 < 1)
                  goto LABEL_738;
                v212 = 0;
                v525 = v207 >> 1;
                do
                {
                  if (v571)
                    v213 = v545 == v571;
                  else
                    v213 = 0;
                  if (!v213)
                  {
                    ++v545;
                    if (!v211)
                      goto LABEL_736;
                    goto LABEL_226;
                  }
                  v206 &= 0xFFFFFFF0;
                  v215 = 255;
                  while (1)
                  {
                    if (v206 <= 16)
                    {
                      if (v203 > v209)
                        goto LABEL_739;
                      v216 = v19[v203];
                      v217 = v203 + 1;
                      if (v216 != 255 || (v203 += 2, v218 = v19[v217], LODWORD(v217) = v203, !v218))
                      {
                        v203 = v217 + 1;
                        v218 = v19[(int)v217];
                      }
                      if (v218 == 255 && !v19[v203])
                        ++v203;
                      v206 += 16;
                      v205 = v218 | (v216 << 8) | (v205 << 16);
                    }
                    v206 -= 8;
                    v5 = v215 == 255;
                    v215 = (v205 >> v206);
                    if (v5)
                    {
                      v215 = (v205 >> v206);
                      if ((v215 - 216) >= 0xFFFFFFF8)
                        break;
                    }
                  }
                  if (!v192)
                  {
                    v210 = 0;
                    v211 = 0;
                    v545 = 1;
                    goto LABEL_736;
                  }
                  if (v192 == 1)
                  {
                    v219 = 0;
                  }
                  else
                  {
                    v219 = v192 & 0xFE;
                    v220 = v550 + 76814;
                    v221 = v544;
                    v222 = v219;
                    do
                    {
                      *v221 = 0;
                      *v220 = 0;
                      v221 += 76820;
                      v220 += 76820;
                      v222 -= 2;
                    }
                    while (v222);
                    if (v219 == v192)
                    {
                      v545 = 1;
                      v210 = v192;
LABEL_226:
                      v214 = v550;
                      goto LABEL_251;
                    }
                  }
                  v223 = v192 - v219;
                  v224 = &v550[38410 * v219 + 38404];
                  do
                  {
                    *v224 = 0;
                    v224 += 38410;
                    --v223;
                  }
                  while (v223);
                  v545 = 1;
                  v210 = v192;
                  v214 = v550;
LABEL_251:
                  v225 = 0;
                  v226 = (int)v212 >> 1;
                  do
                  {
                    v227 = v214[38410 * v225 + 38408];
                    if ((v227 & 0xF) != 0)
                    {
                      v228 = v546;
                      if (!v225)
                        v228 = 1;
                      if (v227 >= 16)
                      {
                        v522 = v228;
                        v513 = v214[38410 * v225 + 38408] & 0xF;
                        v514 = 0;
                        v518 = &v214[38410 * v225 + 38408];
                        v517 = v226;
                        v229 = v227 >> 4;
                        v230 = &v214[38410 * v225];
                        v549 = v230 + 2;
                        v539 = v230 + 38404;
                        v538 = v230 + 38406;
                        v540 = v230 + 19204;
                        v520 = &(&v572)[3 * v225];
                        v519 = (int *)(v520 + 2);
                        if (v229 <= 1)
                          v229 = 1;
                        v521 = v229;
                        v516 = v207;
                        v515 = v212;
                        do
                        {
                          v523 = 0;
                          v524 = v212;
                          do
                          {
                            *((_OWORD *)v208 + 6) = 0u;
                            *((_OWORD *)v208 + 7) = 0u;
                            *((_OWORD *)v208 + 4) = 0u;
                            *((_OWORD *)v208 + 5) = 0u;
                            *((_OWORD *)v208 + 2) = 0u;
                            *((_OWORD *)v208 + 3) = 0u;
                            *(_OWORD *)v208 = 0u;
                            *((_OWORD *)v208 + 1) = 0u;
                            if (v206 <= 16)
                            {
                              v14 = v551;
                              a4 = v552;
                              if (v203 > v543)
                                goto LABEL_739;
                              v231 = v19[v203];
                              v232 = v203 + 1;
                              if (v231 != 255 || (v233 = v19[v232], v203 += 2, LODWORD(v232) = v203, !v233))
                              {
                                v203 = v232 + 1;
                                v233 = v19[(int)v232];
                              }
                              if (v233 == 255 && !v19[v203])
                                ++v203;
                              v206 += 16;
                              v205 = v233 | (v231 << 8) | (v205 << 16);
                            }
                            v234 = v206 - 4;
                            v235 = v549;
                            v14 = v551;
                            a4 = v552;
                            do
                            {
                              v235 = *(_DWORD **)&v235[2 * ((v205 >> v234) & 0xF) + 4];
                              if (!v235)
                                goto LABEL_739;
                              v234 -= 4;
                            }
                            while (*((_QWORD *)v235 + 2));
                            v236 = v206 - *v235;
                            v237 = v235[2];
                            if (v236 <= 16)
                            {
                              v14 = v551;
                              a4 = v552;
                              if (v203 > v543)
                                goto LABEL_739;
                              v238 = v19[v203];
                              v239 = v203 + 1;
                              if (v238 != 255 || (v240 = v19[v239], v203 += 2, LODWORD(v239) = v203, !v240))
                              {
                                v203 = v239 + 1;
                                v240 = v19[(int)v239];
                              }
                              if (v240 == 255 && !v19[v203])
                                ++v203;
                              v236 += 16;
                              v205 = v240 | (v238 << 8) | (v205 << 16);
                            }
                            v206 = v236 - v237;
                            v241 = (v205 >> (v236 - v237)) & ~(-1 << v237);
                            if (v241 <= ~(-1 << v237) >> 1)
                              v242 = ~(-1 << v237);
                            else
                              v242 = 0;
                            v243 = v241 - v242 + *v539;
                            *v539 = v243;
                            v244 = (_WORD *)*v538;
                            *(_WORD *)v208 = *(_WORD *)*v538 * v243 + 1024;
                            v245 = 1;
                            do
                            {
                              if (v206 <= 16)
                              {
                                v14 = v551;
                                a4 = v552;
                                if (v203 > v543)
                                  goto LABEL_739;
                                v246 = v19[v203];
                                v247 = v203 + 1;
                                if (v246 != 255 || (v248 = v19[v247], v203 += 2, LODWORD(v247) = v203, !v248))
                                {
                                  v203 = v247 + 1;
                                  v248 = v19[(int)v247];
                                }
                                if (v248 == 255 && !v19[v203])
                                  ++v203;
                                v206 += 16;
                                v205 = v248 | (v246 << 8) | (v205 << 16);
                              }
                              v249 = v206 - 4;
                              v250 = v540;
                              v14 = v551;
                              a4 = v552;
                              do
                              {
                                v250 = *(_DWORD **)&v250[2 * ((v205 >> v249) & 0xF) + 4];
                                if (!v250)
                                  goto LABEL_739;
                                v249 -= 4;
                              }
                              while (*((_QWORD *)v250 + 2));
                              v206 -= *v250;
                              v251 = v250[2];
                              if (!v251)
                                break;
                              v252 = v245 + (v251 >> 4);
                              v14 = v551;
                              a4 = v552;
                              if (v252 > 63)
                                goto LABEL_739;
                              if (v206 <= 16)
                              {
                                v14 = v551;
                                a4 = v552;
                                if (v203 > v543)
                                  goto LABEL_739;
                                v253 = v19[v203];
                                v254 = v203 + 1;
                                if (v253 != 255 || (v255 = v19[v254], v203 += 2, LODWORD(v254) = v203, !v255))
                                {
                                  v203 = v254 + 1;
                                  v255 = v19[(int)v254];
                                }
                                if (v255 == 255 && !v19[v203])
                                  ++v203;
                                v206 += 16;
                                v205 = v255 | (v253 << 8) | (v205 << 16);
                              }
                              v256 = v251 & 0xF;
                              v257 = -1 << (v251 & 0xF);
                              v206 -= v256;
                              v258 = (v205 >> v206) & ~v257;
                              v259 = v258 <= ~v257 >> 1 ? ~(_WORD)v257 : 0;
                              v260 = pwin_jpg::zigzag_array[v252];
                              *(_WORD *)&v208[v260 * 2] = v244[v260] * (v258 - v259);
                              v245 = v252 + 1;
                            }
                            while (v252 < 63);
                            v261 = 0;
                            do
                            {
                              v262 = &v208[v261];
                              v263 = 0x3FFF * *(__int16 *)&v208[v261] + 1024;
                              v264 = *(__int16 *)&v208[v261 + 4];
                              v265 = 0x3FFF * *(__int16 *)&v208[v261 + 8];
                              v266 = *(__int16 *)&v208[v261 + 12];
                              v267 = 8867 * v266;
                              v268 = v263 + 21407 * v264 + v265 + 8867 * v266;
                              v266 *= 21407;
                              v269 = v263 + 8867 * v264 - v265 - v266;
                              v270 = v263 - 8867 * v264 - v265 + v266;
                              v271 = v263 - 21407 * v264 + v265 - v267;
                              v272 = *(__int16 *)&v208[v261 + 2];
                              v273 = *(__int16 *)&v208[v261 + 6];
                              v274 = *(__int16 *)&v208[v261 + 10];
                              v275 = *(__int16 *)&v208[v261 + 14];
                              v276 = 22725 * v272 + 19266 * v273 + 12873 * v274 + 4520 * v275;
                              v277 = 19266 * v272 - 4520 * v273 - 22725 * v274 - 12873 * v275;
                              v278 = 12873 * v272 - 22725 * v273 + 4520 * v274 + 19266 * v275;
                              v279 = 4520 * v272 - 12873 * v273 + 19266 * v274 - 22725 * v275;
                              *v262 = (v276 + v268) >> 11;
                              v262[7] = (v268 - v276) >> 11;
                              v262[1] = (v277 + v269) >> 11;
                              v262[6] = (v269 - v277) >> 11;
                              v262[2] = (v278 + v270) >> 11;
                              v262[5] = (v270 - v278) >> 11;
                              v262[3] = (v279 + v271) >> 11;
                              v262[4] = (v271 - v279) >> 11;
                              v261 += 16;
                            }
                            while ((_DWORD)v261 != 128);
                            v280 = *((int16x8_t *)v208 + 1);
                            v281 = vmlal_s16(v537, *(int16x4_t *)v208, (int16x4_t)0xC000C000C000C000);
                            v282.i64[0] = 0xC000C000C000C000;
                            v282.i64[1] = 0xC000C000C000C000;
                            v283 = vmlal_high_s16(v537, *(int16x8_t *)v208, v282);
                            v285 = *((int16x8_t *)v208 + 2);
                            v284 = *((int16x8_t *)v208 + 3);
                            v287 = *((int16x8_t *)v208 + 4);
                            v286 = *((int16x8_t *)v208 + 5);
                            v289 = *((int16x8_t *)v208 + 6);
                            v288 = *((int16x8_t *)v208 + 7);
                            v290 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(v283, v285, v536), v287, v282), v289, v535);
                            v291 = vmlal_s16(vmlal_s16(vmlal_s16(v281, *(int16x4_t *)v285.i8, *(int16x4_t *)v536.i8), *(int16x4_t *)v287.i8, (int16x4_t)0xC000C000C000C000), *(int16x4_t *)v289.i8, *(int16x4_t *)v535.i8);
                            v292 = vmlsl_high_s16(vmlsl_high_s16(vmlal_high_s16(v283, v285, v535), v287, v282), v289, v536);
                            v293 = vmlsl_s16(vmlsl_s16(vmlal_s16(v281, *(int16x4_t *)v285.i8, *(int16x4_t *)v535.i8), *(int16x4_t *)v287.i8, (int16x4_t)0xC000C000C000C000), *(int16x4_t *)v289.i8, *(int16x4_t *)v536.i8);
                            v294 = vmlal_high_s16(vmlsl_high_s16(vmlal_high_s16(v283, v285, v534), v287, v282), v289, v536);
                            v295 = vmlal_s16(vmlsl_s16(vmlal_s16(v281, *(int16x4_t *)v285.i8, *(int16x4_t *)v534.i8), *(int16x4_t *)v287.i8, (int16x4_t)0xC000C000C000C000), *(int16x4_t *)v289.i8, *(int16x4_t *)v536.i8);
                            v296 = vmlsl_high_s16(vmlal_high_s16(vmlal_high_s16(v283, v285, v533), v287, v282), v289, v535);
                            v297 = vmlsl_s16(vmlal_s16(vmlal_s16(v281, *(int16x4_t *)v285.i8, *(int16x4_t *)v533.i8), *(int16x4_t *)v287.i8, (int16x4_t)0xC000C000C000C000), *(int16x4_t *)v289.i8, *(int16x4_t *)v535.i8);
                            v298 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v284, v531), v280, v532), v286, v530), v288, v529);
                            v299 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v284.i8, *(int16x4_t *)v531.i8), *(int16x4_t *)v280.i8, *(int16x4_t *)v532.i8), *(int16x4_t *)v286.i8, *(int16x4_t *)v530.i8), *(int16x4_t *)v288.i8, *(int16x4_t *)v529.i8);
                            v300 = vuzp1q_s16((int16x8_t)vshrq_n_s32(vaddq_s32(v299, v291), 0x14uLL), (int16x8_t)vshrq_n_s32(vaddq_s32(v298, v290), 0x14uLL));
                            v301 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v284, v528), v280, v531), v286, v527), v288, v526);
                            v302 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v284.i8, *(int16x4_t *)v528.i8), *(int16x4_t *)v280.i8, *(int16x4_t *)v531.i8), *(int16x4_t *)v286.i8, *(int16x4_t *)v527.i8), *(int16x4_t *)v288.i8, *(int16x4_t *)v526.i8);
                            v303 = vuzp1q_s16((int16x8_t)vshrq_n_s32(vsubq_s32(v291, v299), 0x14uLL), (int16x8_t)vshrq_n_s32(vsubq_s32(v290, v298), 0x14uLL));
                            v304 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v284, v527), v280, v530), v286, v529), v288, v531);
                            v305 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v284.i8, *(int16x4_t *)v527.i8), *(int16x4_t *)v280.i8, *(int16x4_t *)v530.i8), *(int16x4_t *)v286.i8, *(int16x4_t *)v529.i8), *(int16x4_t *)v288.i8, *(int16x4_t *)v531.i8);
                            *((int16x8_t *)v208 + 6) = vuzp1q_s16((int16x8_t)vshrq_n_s32(vsubq_s32(v293, v302), 0x14uLL), (int16x8_t)vshrq_n_s32(vsubq_s32(v292, v301), 0x14uLL));
                            *((int16x8_t *)v208 + 7) = v303;
                            v306 = vuzp1q_s16((int16x8_t)vshrq_n_s32(vaddq_s32(v305, v295), 0x14uLL), (int16x8_t)vshrq_n_s32(vaddq_s32(v304, v294), 0x14uLL));
                            v307 = vuzp1q_s16((int16x8_t)vshrq_n_s32(vsubq_s32(v295, v305), 0x14uLL), (int16x8_t)vshrq_n_s32(vsubq_s32(v294, v304), 0x14uLL));
                            v308 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v284.i8, *(int16x4_t *)v526.i8), *(int16x4_t *)v280.i8, *(int16x4_t *)v529.i8), *(int16x4_t *)v286.i8, *(int16x4_t *)v531.i8), *(int16x4_t *)v288.i8, *(int16x4_t *)v527.i8);
                            v309 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v284, v526), v280, v529), v286, v531), v288, v527);
                            *((int16x8_t *)v208 + 2) = v306;
                            *((int16x8_t *)v208 + 3) = vuzp1q_s16((int16x8_t)vshrq_n_s32(vaddq_s32(v308, v297), 0x14uLL), (int16x8_t)vshrq_n_s32(vaddq_s32(v309, v296), 0x14uLL));
                            *((int16x8_t *)v208 + 4) = vuzp1q_s16((int16x8_t)vshrq_n_s32(vsubq_s32(v297, v308), 0x14uLL), (int16x8_t)vshrq_n_s32(vsubq_s32(v296, v309), 0x14uLL));
                            *((int16x8_t *)v208 + 5) = v307;
                            v310 = vuzp1q_s16((int16x8_t)vshrq_n_s32(vaddq_s32(v302, v293), 0x14uLL), (int16x8_t)vshrq_n_s32(vaddq_s32(v301, v292), 0x14uLL));
                            *(int16x8_t *)v208 = v300;
                            *((int16x8_t *)v208 + 1) = v310;
                            v311 = *v547;
                            if ((v522 & 1) != 0)
                            {
                              if (v311 == *v518)
                              {
                                v312 = 0;
                                v313 = *v519;
                                v314 = &(*v520)[v524 + 3 + v516 * (int)v313];
                                do
                                {
                                  v315 = (__int16 *)&v208[v312];
                                  v316 = *(__int16 *)&v208[v312];
                                  if (v316 <= 0)
                                    v317 = 0;
                                  else
                                    v317 = -1;
                                  if ((v316 & 0xFF00) != 0)
                                    LOBYTE(v316) = v317;
                                  *(v314 - 3) = v316;
                                  v318 = v315[1];
                                  if (v318 <= 0)
                                    v319 = 0;
                                  else
                                    v319 = -1;
                                  if ((v318 & 0xFF00) != 0)
                                    LOBYTE(v318) = v319;
                                  *(v314 - 2) = v318;
                                  v320 = v315[2];
                                  if (v320 <= 0)
                                    v321 = 0;
                                  else
                                    v321 = -1;
                                  if ((v320 & 0xFF00) != 0)
                                    LOBYTE(v320) = v321;
                                  *(v314 - 1) = v320;
                                  v322 = v315[3];
                                  if (v322 <= 0)
                                    v323 = 0;
                                  else
                                    v323 = -1;
                                  if ((v322 & 0xFF00) != 0)
                                    LOBYTE(v322) = v323;
                                  *v314 = v322;
                                  v324 = v315[4];
                                  if (v324 <= 0)
                                    v325 = 0;
                                  else
                                    v325 = -1;
                                  if ((v324 & 0xFF00) != 0)
                                    LOBYTE(v324) = v325;
                                  v314[1] = v324;
                                  v326 = v315[5];
                                  if (v326 <= 0)
                                    v327 = 0;
                                  else
                                    v327 = -1;
                                  if ((v326 & 0xFF00) != 0)
                                    LOBYTE(v326) = v327;
                                  v314[2] = v326;
                                  v328 = v315[6];
                                  if (v328 <= 0)
                                    v329 = 0;
                                  else
                                    v329 = -1;
                                  if ((v328 & 0xFF00) != 0)
                                    LOBYTE(v328) = v329;
                                  v314[3] = v328;
                                  v330 = v315[7];
                                  if (v330 <= 0)
                                    v331 = 0;
                                  else
                                    v331 = -1;
                                  if ((v330 & 0xFF00) != 0)
                                    LOBYTE(v330) = v331;
                                  v314[4] = v330;
                                  v312 += 16;
                                  v314 += v313;
                                }
                                while ((_DWORD)v312 != 128);
                              }
                              else
                              {
                                switch(v311)
                                {
                                  case 34:
                                    v473 = 0;
                                    v474 = *v519;
                                    v475 = &(*v520)[(int)v515 + (int)v474 * (uint64_t)v207];
                                    do
                                    {
                                      v476 = (__int16 *)&v208[v473];
                                      v477 = *(__int16 *)&v208[v473];
                                      if (v477 <= 0)
                                        v478 = 0;
                                      else
                                        v478 = -1;
                                      if ((v477 & 0xFF00) != 0)
                                        LOBYTE(v477) = v478;
                                      v475[1] = v477;
                                      *v475 = v477;
                                      v479 = v476[1];
                                      if (v479 <= 0)
                                        v480 = 0;
                                      else
                                        v480 = -1;
                                      if ((v479 & 0xFF00) != 0)
                                        LOBYTE(v479) = v480;
                                      v475[3] = v479;
                                      v475[2] = v479;
                                      v481 = v476[2];
                                      if (v481 <= 0)
                                        v482 = 0;
                                      else
                                        v482 = -1;
                                      if ((v481 & 0xFF00) != 0)
                                        LOBYTE(v481) = v482;
                                      v475[5] = v481;
                                      v475[4] = v481;
                                      v483 = v476[3];
                                      if (v483 <= 0)
                                        v484 = 0;
                                      else
                                        v484 = -1;
                                      if ((v483 & 0xFF00) != 0)
                                        LOBYTE(v483) = v484;
                                      v475[7] = v483;
                                      v475[6] = v483;
                                      v485 = v476[4];
                                      if (v485 <= 0)
                                        v486 = 0;
                                      else
                                        v486 = -1;
                                      if ((v485 & 0xFF00) != 0)
                                        LOBYTE(v485) = v486;
                                      v475[9] = v485;
                                      v475[8] = v485;
                                      v487 = v476[5];
                                      if (v487 <= 0)
                                        v488 = 0;
                                      else
                                        v488 = -1;
                                      if ((v487 & 0xFF00) != 0)
                                        LOBYTE(v487) = v488;
                                      v475[11] = v487;
                                      v475[10] = v487;
                                      v489 = v476[6];
                                      if (v489 <= 0)
                                        v490 = 0;
                                      else
                                        v490 = -1;
                                      if ((v489 & 0xFF00) != 0)
                                        LOBYTE(v489) = v490;
                                      v475[13] = v489;
                                      v475[12] = v489;
                                      v491 = v476[7];
                                      if (v491 <= 0)
                                        v492 = 0;
                                      else
                                        v492 = -1;
                                      if ((v491 & 0xFF00) != 0)
                                        LOBYTE(v491) = v492;
                                      v475[15] = v491;
                                      v475[14] = v491;
                                      *(_OWORD *)&v475[v474] = *(_OWORD *)v475;
                                      v475 += 2 * v474;
                                      v473 += 16;
                                    }
                                    while ((_DWORD)v473 != 128);
                                    break;
                                  case 33:
                                    v493 = 0;
                                    v494 = *v519;
                                    v495 = &(*v520)[(int)v515 + 7 + v207 * (int)v494];
                                    do
                                    {
                                      v496 = (__int16 *)&v208[v493];
                                      v497 = *(__int16 *)&v208[v493];
                                      if (v497 <= 0)
                                        v498 = 0;
                                      else
                                        v498 = -1;
                                      if ((v497 & 0xFF00) != 0)
                                        LOBYTE(v497) = v498;
                                      *(v495 - 6) = v497;
                                      *(v495 - 7) = v497;
                                      v499 = v496[1];
                                      if (v499 <= 0)
                                        v500 = 0;
                                      else
                                        v500 = -1;
                                      if ((v499 & 0xFF00) != 0)
                                        LOBYTE(v499) = v500;
                                      *(v495 - 4) = v499;
                                      *(v495 - 5) = v499;
                                      v501 = v496[2];
                                      if (v501 <= 0)
                                        v502 = 0;
                                      else
                                        v502 = -1;
                                      if ((v501 & 0xFF00) != 0)
                                        LOBYTE(v501) = v502;
                                      *(v495 - 2) = v501;
                                      *(v495 - 3) = v501;
                                      v503 = v496[3];
                                      if (v503 <= 0)
                                        v504 = 0;
                                      else
                                        v504 = -1;
                                      if ((v503 & 0xFF00) != 0)
                                        LOBYTE(v503) = v504;
                                      *v495 = v503;
                                      *(v495 - 1) = v503;
                                      v505 = v496[4];
                                      if (v505 <= 0)
                                        v506 = 0;
                                      else
                                        v506 = -1;
                                      if ((v505 & 0xFF00) != 0)
                                        LOBYTE(v505) = v506;
                                      v495[2] = v505;
                                      v495[1] = v505;
                                      v507 = v496[5];
                                      if (v507 <= 0)
                                        v508 = 0;
                                      else
                                        v508 = -1;
                                      if ((v507 & 0xFF00) != 0)
                                        LOBYTE(v507) = v508;
                                      v495[4] = v507;
                                      v495[3] = v507;
                                      v509 = v496[6];
                                      if (v509 <= 0)
                                        v510 = 0;
                                      else
                                        v510 = -1;
                                      if ((v509 & 0xFF00) != 0)
                                        LOBYTE(v509) = v510;
                                      v495[6] = v509;
                                      v495[5] = v509;
                                      v511 = v496[7];
                                      if (v511 <= 0)
                                        v512 = 0;
                                      else
                                        v512 = -1;
                                      if ((v511 & 0xFF00) != 0)
                                        LOBYTE(v511) = v512;
                                      v495[8] = v511;
                                      v495[7] = v511;
                                      v493 += 16;
                                      v495 += v494;
                                    }
                                    while ((_DWORD)v493 != 128);
                                    break;
                                  case 18:
                                    v352 = 0;
                                    v353 = *v519;
                                    v354 = &(*v520)[(int)v515 + (int)v353 * (uint64_t)v207];
                                    do
                                    {
                                      v355 = (__int16 *)&v208[v352];
                                      v356 = *(__int16 *)&v208[v352];
                                      if (v356 <= 0)
                                        v357 = 0;
                                      else
                                        v357 = -1;
                                      if ((v356 & 0xFF00) != 0)
                                        LOBYTE(v356) = v357;
                                      *v354 = v356;
                                      v358 = v355[1];
                                      if (v358 <= 0)
                                        v359 = 0;
                                      else
                                        v359 = -1;
                                      if ((v358 & 0xFF00) != 0)
                                        LOBYTE(v358) = v359;
                                      v354[1] = v358;
                                      v360 = v355[2];
                                      if (v360 <= 0)
                                        v361 = 0;
                                      else
                                        v361 = -1;
                                      if ((v360 & 0xFF00) != 0)
                                        LOBYTE(v360) = v361;
                                      v354[2] = v360;
                                      v362 = v355[3];
                                      if (v362 <= 0)
                                        v363 = 0;
                                      else
                                        v363 = -1;
                                      if ((v362 & 0xFF00) != 0)
                                        LOBYTE(v362) = v363;
                                      v354[3] = v362;
                                      v364 = v355[4];
                                      if (v364 <= 0)
                                        v365 = 0;
                                      else
                                        v365 = -1;
                                      if ((v364 & 0xFF00) != 0)
                                        LOBYTE(v364) = v365;
                                      v354[4] = v364;
                                      v366 = v355[5];
                                      if (v366 <= 0)
                                        v367 = 0;
                                      else
                                        v367 = -1;
                                      if ((v366 & 0xFF00) != 0)
                                        LOBYTE(v366) = v367;
                                      v354[5] = v366;
                                      v368 = v355[6];
                                      if (v368 <= 0)
                                        v369 = 0;
                                      else
                                        v369 = -1;
                                      if ((v368 & 0xFF00) != 0)
                                        LOBYTE(v368) = v369;
                                      v354[6] = v368;
                                      v370 = v355[7];
                                      if (v370 <= 0)
                                        v371 = 0;
                                      else
                                        v371 = -1;
                                      if ((v370 & 0xFF00) != 0)
                                        LOBYTE(v370) = v371;
                                      v354[7] = v370;
                                      *(_QWORD *)&v354[v353] = *(_QWORD *)v354;
                                      v354 += 2 * v353;
                                      v352 += 16;
                                    }
                                    while ((_DWORD)v352 != 128);
                                    break;
                                  default:
                                    printf("%s#%d: warning jpg yv12. samp_factor[0] = 0x%02X, samp_factor[i] = 0x%02X\n", "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/karo/media/image/pwin_jpg/ap_rwjpg.cpp", 1264, *v547, *v518);
                                    break;
                                }
                              }
                            }
                            else if (v311 == 33)
                            {
                              v372 = *v519;
                              v373 = &(*v520)[(int)(v517 + v372 * v525)];
                              v374 = vaddq_s16(v310, v300).u16[0];
                              if ((__int16)v374 <= 1)
                                v375 = 0;
                              else
                                v375 = -1;
                              if ((v374 & 0xFE00) != 0)
                                v376 = v375;
                              else
                                v376 = v374 >> 1;
                              *v373 = v376;
                              v377 = *((__int16 *)v208 + 9) + *((__int16 *)v208 + 1);
                              if (v377 <= 1)
                                v378 = 0;
                              else
                                v378 = -1;
                              if (v377 >= 0x200)
                                v379 = v378;
                              else
                                v379 = v377 >> 1;
                              v373[1] = v379;
                              v380 = *((__int16 *)v208 + 10) + *((__int16 *)v208 + 2);
                              if (v380 <= 1)
                                v381 = 0;
                              else
                                v381 = -1;
                              if (v380 >= 0x200)
                                v382 = v381;
                              else
                                v382 = v380 >> 1;
                              v373[2] = v382;
                              v383 = *((__int16 *)v208 + 11) + *((__int16 *)v208 + 3);
                              if (v383 <= 1)
                                v384 = 0;
                              else
                                v384 = -1;
                              if (v383 >= 0x200)
                                v385 = v384;
                              else
                                v385 = v383 >> 1;
                              v373[3] = v385;
                              v386 = *((__int16 *)v208 + 12) + *((__int16 *)v208 + 4);
                              if (v386 <= 1)
                                v387 = 0;
                              else
                                v387 = -1;
                              if (v386 >= 0x200)
                                v388 = v387;
                              else
                                v388 = v386 >> 1;
                              v373[4] = v388;
                              v389 = *((__int16 *)v208 + 13) + *((__int16 *)v208 + 5);
                              if (v389 <= 1)
                                v390 = 0;
                              else
                                v390 = -1;
                              if (v389 >= 0x200)
                                v391 = v390;
                              else
                                v391 = v389 >> 1;
                              v373[5] = v391;
                              v392 = *((__int16 *)v208 + 14) + *((__int16 *)v208 + 6);
                              if (v392 <= 1)
                                v393 = 0;
                              else
                                v393 = -1;
                              if (v392 >= 0x200)
                                v394 = v393;
                              else
                                v394 = v392 >> 1;
                              v373[6] = v394;
                              v395 = *((__int16 *)v208 + 15) + *((__int16 *)v208 + 7);
                              if (v395 <= 1)
                                v396 = 0;
                              else
                                v396 = -1;
                              if (v395 >= 0x200)
                                v397 = v396;
                              else
                                v397 = v395 >> 1;
                              v373[7] = v397;
                              v398 = &v373[v372];
                              v399 = *((__int16 *)v208 + 24) + *((__int16 *)v208 + 16);
                              if (v399 <= 1)
                                v400 = 0;
                              else
                                v400 = -1;
                              if (v399 >= 0x200)
                                v401 = v400;
                              else
                                v401 = v399 >> 1;
                              *v398 = v401;
                              v402 = *((__int16 *)v208 + 25) + *((__int16 *)v208 + 17);
                              if (v402 <= 1)
                                v403 = 0;
                              else
                                v403 = -1;
                              if (v402 >= 0x200)
                                v404 = v403;
                              else
                                v404 = v402 >> 1;
                              v398[1] = v404;
                              v405 = *((__int16 *)v208 + 26) + *((__int16 *)v208 + 18);
                              if (v405 <= 1)
                                v406 = 0;
                              else
                                v406 = -1;
                              if (v405 >= 0x200)
                                v407 = v406;
                              else
                                v407 = v405 >> 1;
                              v398[2] = v407;
                              v408 = *((__int16 *)v208 + 27) + *((__int16 *)v208 + 19);
                              if (v408 <= 1)
                                v409 = 0;
                              else
                                v409 = -1;
                              if (v408 >= 0x200)
                                v410 = v409;
                              else
                                v410 = v408 >> 1;
                              v398[3] = v410;
                              v411 = *((__int16 *)v208 + 28) + *((__int16 *)v208 + 20);
                              if (v411 <= 1)
                                v412 = 0;
                              else
                                v412 = -1;
                              if (v411 >= 0x200)
                                v413 = v412;
                              else
                                v413 = v411 >> 1;
                              v398[4] = v413;
                              v414 = *((__int16 *)v208 + 29) + *((__int16 *)v208 + 21);
                              if (v414 <= 1)
                                v415 = 0;
                              else
                                v415 = -1;
                              if (v414 >= 0x200)
                                v416 = v415;
                              else
                                v416 = v414 >> 1;
                              v398[5] = v416;
                              v417 = *((__int16 *)v208 + 30) + *((__int16 *)v208 + 22);
                              if (v417 <= 1)
                                v418 = 0;
                              else
                                v418 = -1;
                              if (v417 >= 0x200)
                                v419 = v418;
                              else
                                v419 = v417 >> 1;
                              v398[6] = v419;
                              v420 = *((__int16 *)v208 + 31) + *((__int16 *)v208 + 23);
                              if (v420 <= 1)
                                v421 = 0;
                              else
                                v421 = -1;
                              if (v420 >= 0x200)
                                v422 = v421;
                              else
                                v422 = v420 >> 1;
                              v398[7] = v422;
                              v423 = &v398[v372];
                              v424 = *((__int16 *)v208 + 40) + *((__int16 *)v208 + 32);
                              if (v424 <= 1)
                                v425 = 0;
                              else
                                v425 = -1;
                              if (v424 >= 0x200)
                                v426 = v425;
                              else
                                v426 = v424 >> 1;
                              *v423 = v426;
                              v427 = *((__int16 *)v208 + 41) + *((__int16 *)v208 + 33);
                              if (v427 <= 1)
                                v428 = 0;
                              else
                                v428 = -1;
                              if (v427 >= 0x200)
                                v429 = v428;
                              else
                                v429 = v427 >> 1;
                              v423[1] = v429;
                              v430 = *((__int16 *)v208 + 42) + *((__int16 *)v208 + 34);
                              if (v430 <= 1)
                                v431 = 0;
                              else
                                v431 = -1;
                              if (v430 >= 0x200)
                                v432 = v431;
                              else
                                v432 = v430 >> 1;
                              v423[2] = v432;
                              v433 = *((__int16 *)v208 + 43) + *((__int16 *)v208 + 35);
                              if (v433 <= 1)
                                v434 = 0;
                              else
                                v434 = -1;
                              if (v433 >= 0x200)
                                v435 = v434;
                              else
                                v435 = v433 >> 1;
                              v423[3] = v435;
                              v436 = *((__int16 *)v208 + 44) + *((__int16 *)v208 + 36);
                              if (v436 <= 1)
                                v437 = 0;
                              else
                                v437 = -1;
                              if (v436 >= 0x200)
                                v438 = v437;
                              else
                                v438 = v436 >> 1;
                              v423[4] = v438;
                              v439 = *((__int16 *)v208 + 45) + *((__int16 *)v208 + 37);
                              if (v439 <= 1)
                                v440 = 0;
                              else
                                v440 = -1;
                              if (v439 >= 0x200)
                                v441 = v440;
                              else
                                v441 = v439 >> 1;
                              v423[5] = v441;
                              v442 = *((__int16 *)v208 + 46) + *((__int16 *)v208 + 38);
                              if (v442 <= 1)
                                v443 = 0;
                              else
                                v443 = -1;
                              if (v442 >= 0x200)
                                v444 = v443;
                              else
                                v444 = v442 >> 1;
                              v423[6] = v444;
                              v445 = *((__int16 *)v208 + 47) + *((__int16 *)v208 + 39);
                              if (v445 <= 1)
                                v446 = 0;
                              else
                                v446 = -1;
                              if (v445 >= 0x200)
                                v447 = v446;
                              else
                                v447 = v445 >> 1;
                              v423[7] = v447;
                              v448 = &v423[v372];
                              v449 = *((__int16 *)v208 + 56) + *((__int16 *)v208 + 48);
                              if (v449 <= 1)
                                v450 = 0;
                              else
                                v450 = -1;
                              if (v449 >= 0x200)
                                v451 = v450;
                              else
                                v451 = v449 >> 1;
                              *v448 = v451;
                              v452 = *((__int16 *)v208 + 57) + *((__int16 *)v208 + 49);
                              if (v452 <= 1)
                                v453 = 0;
                              else
                                v453 = -1;
                              if (v452 >= 0x200)
                                v454 = v453;
                              else
                                v454 = v452 >> 1;
                              v448[1] = v454;
                              v455 = *((__int16 *)v208 + 58) + *((__int16 *)v208 + 50);
                              if (v455 <= 1)
                                v456 = 0;
                              else
                                v456 = -1;
                              if (v455 >= 0x200)
                                v457 = v456;
                              else
                                v457 = v455 >> 1;
                              v448[2] = v457;
                              v458 = *((__int16 *)v208 + 59) + *((__int16 *)v208 + 51);
                              if (v458 <= 1)
                                v459 = 0;
                              else
                                v459 = -1;
                              if (v458 >= 0x200)
                                v460 = v459;
                              else
                                v460 = v458 >> 1;
                              v448[3] = v460;
                              v461 = *((__int16 *)v208 + 60) + *((__int16 *)v208 + 52);
                              if (v461 <= 1)
                                v462 = 0;
                              else
                                v462 = -1;
                              if (v461 >= 0x200)
                                v463 = v462;
                              else
                                v463 = v461 >> 1;
                              v448[4] = v463;
                              v464 = *((__int16 *)v208 + 61) + *((__int16 *)v208 + 53);
                              if (v464 <= 1)
                                v465 = 0;
                              else
                                v465 = -1;
                              if (v464 >= 0x200)
                                v466 = v465;
                              else
                                v466 = v464 >> 1;
                              v448[5] = v466;
                              v467 = *((__int16 *)v208 + 62) + *((__int16 *)v208 + 54);
                              if (v467 <= 1)
                                v468 = 0;
                              else
                                v468 = -1;
                              if (v467 >= 0x200)
                                v469 = v468;
                              else
                                v469 = v467 >> 1;
                              v448[6] = v469;
                              v470 = *((__int16 *)v208 + 63) + *((__int16 *)v208 + 55);
                              if (v470 <= 1)
                                v471 = 0;
                              else
                                v471 = -1;
                              if (v470 >= 0x200)
                                v472 = v471;
                              else
                                v472 = v470 >> 1;
                              v448[7] = v472;
                            }
                            else if (v311 == 34)
                            {
                              v332 = 0;
                              v333 = *v519;
                              v334 = &(*v520)[(int)(v517 + v525 * v333) + 3];
                              do
                              {
                                v335 = (__int16 *)&v208[v332];
                                v336 = *(__int16 *)&v208[v332];
                                if (v336 <= 0)
                                  v337 = 0;
                                else
                                  v337 = -1;
                                if ((v336 & 0xFF00) != 0)
                                  LOBYTE(v336) = v337;
                                *(v334 - 3) = v336;
                                v338 = v335[1];
                                if (v338 <= 0)
                                  v339 = 0;
                                else
                                  v339 = -1;
                                if ((v338 & 0xFF00) != 0)
                                  LOBYTE(v338) = v339;
                                *(v334 - 2) = v338;
                                v340 = v335[2];
                                if (v340 <= 0)
                                  v341 = 0;
                                else
                                  v341 = -1;
                                if ((v340 & 0xFF00) != 0)
                                  LOBYTE(v340) = v341;
                                *(v334 - 1) = v340;
                                v342 = v335[3];
                                if (v342 <= 0)
                                  v343 = 0;
                                else
                                  v343 = -1;
                                if ((v342 & 0xFF00) != 0)
                                  LOBYTE(v342) = v343;
                                *v334 = v342;
                                v344 = v335[4];
                                if (v344 <= 0)
                                  v345 = 0;
                                else
                                  v345 = -1;
                                if ((v344 & 0xFF00) != 0)
                                  LOBYTE(v344) = v345;
                                v334[1] = v344;
                                v346 = v335[5];
                                if (v346 <= 0)
                                  v347 = 0;
                                else
                                  v347 = -1;
                                if ((v346 & 0xFF00) != 0)
                                  LOBYTE(v346) = v347;
                                v334[2] = v346;
                                v348 = v335[6];
                                if (v348 <= 0)
                                  v349 = 0;
                                else
                                  v349 = -1;
                                if ((v348 & 0xFF00) != 0)
                                  LOBYTE(v348) = v349;
                                v334[3] = v348;
                                v350 = v335[7];
                                if (v350 <= 0)
                                  v351 = 0;
                                else
                                  v351 = -1;
                                if ((v350 & 0xFF00) != 0)
                                  LOBYTE(v350) = v351;
                                v334[4] = v350;
                                v332 += 16;
                                v334 += v333;
                              }
                              while ((_DWORD)v332 != 128);
                            }
                            else
                            {
                              printf("%s#%d: warning jpg yv12. samp_factor[0] = 0x%02X, samp_factor[i] = 0x%02X\n", "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/karo/media/image/pwin_jpg/ap_rwjpg.cpp", 1279, *v547, *v518);
                            }
                            ++v523;
                            v524 += 8;
                          }
                          while (v523 != v521);
                          v516 += 8;
                          ++v514;
                          v212 = v515;
                        }
                        while (v514 != v513);
                        v192 = v567;
                        v210 = v567;
                        v214 = v550;
                        v226 = v517;
                      }
                    }
                    ++v225;
                  }
                  while (v225 < v210);
                  v204 = v566;
                  v211 = v210;
LABEL_736:
                  v212 = v212 + v541;
                  v14 = v551;
                  a4 = v552;
                  v209 = v543;
                }
                while ((int)v212 < v204);
                v202 = v565;
LABEL_738:
                v207 += v542;
                if (v207 >= v202)
                {
LABEL_739:
                  free(v550);
                  goto LABEL_103;
                }
              }
            }
          }
LABEL_103:
          free(v19);
          result = 0;
          switch(*a1)
          {
            case 0:
              v103 = (std::__shared_weak_count *)operator new(0x30uLL);
              v103->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v103->__shared_owners_;
              v103->__shared_weak_owners_ = 0;
              v103->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
              ggl::Data::Data((ggl::Data *)&v103[1], 3 * v14);
              v112 = v553[1];
              v113 = v553[0];
              v114 = (v553[0] * v553[1]);
              v115 = v572;
              v116 = v576;
              v117 = v580;
              if ((_DWORD)v114)
              {
                v118 = 0;
                shared_owners = v103[1].__shared_owners_;
                v120 = 2;
                v105.n128_u64[0] = 0.5;
                v106.n128_u64[0] = 0x3FF66E978D4FDF3BLL;
                v107.n128_u64[0] = 0;
                v108.n128_u64[0] = 0xBFD60663C74FB54ALL;
                v109.n128_u64[0] = 0xBFE6DA3C21187E7CLL;
                v110.n128_u64[0] = 0x3FFC5A1CAC083127;
                do
                {
                  v121 = (int)((int)(((v118 / v112) >> 1) * v112) / 2 + ((v118 % v112) >> 1));
                  LOBYTE(v111) = v115[v118];
                  v122 = (double)(*(unsigned __int8 *)(v117 + v121) - 128);
                  v123 = (double)*(unint64_t *)&v111 + 0.5;
                  v124 = fmax(fmin(v123 + v122 * 1.402, 255.0), 0.0);
                  v125 = (double)(*(unsigned __int8 *)(v116 + v121) - 128);
                  v126 = fmax(fmin(v123 + v125 * -0.34414 + v122 * -0.71414, 255.0), 0.0);
                  v111 = fmax(fmin(v123 + v125 * 1.772, 255.0), 0.0);
                  *(_BYTE *)(shared_owners + v120 - 2) = (int)v124;
                  *(_BYTE *)(shared_owners + v120 - 1) = (int)v126;
                  *(_BYTE *)(shared_owners + v120) = (int)v111;
                  ++v118;
                  v120 += 3;
                }
                while (v114 != v118);
              }
              else if (!v572)
              {
LABEL_154:
                if (v116)
                  MEMORY[0x1A1AF4DE8](v116, 0x1000C8077774924);
                if (v117)
                  MEMORY[0x1A1AF4DE8](v117, 0x1000C8077774924);
                karo::media::Image::setFormat(a4, 0);
                v170 = *(_QWORD *)(a4 + 8);
                if (v170)
                {
                  *(_DWORD *)v170 = v112;
                  *(_DWORD *)(v170 + 4) = v113;
                  v171 = *(_QWORD **)(v170 + 16);
                  do
                    v172 = __ldxr(p_shared_owners);
                  while (__stxr(v172 + 1, p_shared_owners));
                  v173 = (std::__shared_weak_count *)v171[1];
                  *v171 = v103 + 1;
                  v171[1] = v103;
                  if (v173)
                  {
                    v174 = (unint64_t *)&v173->__shared_owners_;
                    do
                      v175 = __ldaxr(v174);
                    while (__stlxr(v175 - 1, v174));
                    if (!v175)
                    {
                      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                      std::__shared_weak_count::__release_weak(v173);
                    }
                  }
                }
                do
                  v176 = __ldaxr(p_shared_owners);
                while (__stlxr(v176 - 1, p_shared_owners));
                goto LABEL_183;
              }
              MEMORY[0x1A1AF4DE8](v105, v106, v107, v108, v109, v110);
              goto LABEL_154;
            case 1:
            case 2:
              v82 = 4 * v14;
              v83 = (std::__shared_weak_count *)operator new(0x30uLL);
              v83->__shared_owners_ = 0;
              v84 = (unint64_t *)&v83->__shared_owners_;
              v83->__shared_weak_owners_ = 0;
              v83->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
              ggl::Data::Data((ggl::Data *)&v83[1], v82);
              v88 = v553[1];
              v89 = v553[0];
              v90 = (v553[0] * v553[1]);
              v91 = v572;
              v92 = v576;
              v93 = v580;
              if ((_DWORD)v90)
              {
                v94 = 0;
                v95 = v83[1].__shared_owners_;
                v96 = 3;
                v85.n128_u64[0] = 0.5;
                v86 = (__n128)xmmword_19FFB5DD0;
                v97 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
                do
                {
                  v98 = (int)((int)(((v94 / v88) >> 1) * v88) / 2 + ((v94 % v88) >> 1));
                  v99 = *(unsigned __int8 *)(v92 + v98) - 128;
                  LOBYTE(v87) = v91[v94];
                  v100.f64[0] = (double)v87 + 0.5;
                  v101 = v100.f64[0] + (double)v99 * 1.772;
                  v100.f64[1] = v100.f64[0] + (double)v99 * -0.34414;
                  v87 = (unint64_t)vmovn_s64(vcvtq_s64_f64(vmaxnmq_f64(vminnmq_f64(vmlaq_n_f64(v100, (float64x2_t)xmmword_19FFB5DD0, (double)(*(unsigned __int8 *)(v93 + v98) - 128)), v97), (float64x2_t)0)));
                  v102 = (_BYTE *)(v95 + v96 - 3);
                  *(_BYTE *)(v95 + v96 - 1) = (int)fmax(fmin(v101, 255.0), 0.0);
                  v102[1] = BYTE4(v87);
                  *v102 = v87;
                  *(_BYTE *)(v95 + v96) = -1;
                  ++v94;
                  v96 += 4;
                }
                while (v90 != v94);
              }
              else if (!v572)
              {
                goto LABEL_137;
              }
              MEMORY[0x1A1AF4DE8](v85, v86);
LABEL_137:
              if (v92)
                MEMORY[0x1A1AF4DE8](v92, 0x1000C8077774924);
              if (v93)
                MEMORY[0x1A1AF4DE8](v93, 0x1000C8077774924);
              karo::media::Image::setFormat(a4, *a1);
              v162 = *(_QWORD *)(a4 + 8);
              if (v162)
              {
                *(_DWORD *)v162 = v88;
                *(_DWORD *)(v162 + 4) = v89;
                v163 = *(_QWORD **)(v162 + 16);
                do
                  v164 = __ldxr(v84);
                while (__stxr(v164 + 1, v84));
                v165 = (std::__shared_weak_count *)v163[1];
                *v163 = v83 + 1;
                v163[1] = v83;
                if (v165)
                {
                  v166 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v167 = __ldaxr(v166);
                  while (__stlxr(v167 - 1, v166));
                  if (!v167)
                  {
                    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                    std::__shared_weak_count::__release_weak(v165);
                  }
                }
              }
              do
                v168 = __ldaxr(v84);
              while (__stlxr(v168 - 1, v84));
              if (v168)
                return 1;
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              v169 = v83;
              goto LABEL_185;
            case 6:
              karo::media::Image::setFormat(a4, 6);
              v127 = *(_DWORD **)(a4 + 8);
              if (v127)
              {
                v128 = v553[0];
                *v127 = v553[1];
                v127[1] = v128;
              }
              v129 = v574 * (uint64_t)v573;
              v130 = (std::__shared_weak_count *)operator new(0x30uLL);
              v130->__shared_owners_ = 0;
              v131 = (unint64_t *)&v130->__shared_owners_;
              v130->__shared_weak_owners_ = 0;
              v130->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
              v132 = ggl::Data::Data((ggl::Data *)&v130[1], v572, v129);
              v133 = *(_QWORD *)(a4 + 8);
              if (v133)
              {
                v134 = *(ggl::Data ***)(v133 + 16);
                do
                  v135 = __ldxr(v131);
                while (__stxr(v135 + 1, v131));
                v136 = (std::__shared_weak_count *)v134[1];
                *v134 = v132;
                v134[1] = (ggl::Data *)v130;
                if (v136)
                {
                  v137 = (unint64_t *)&v136->__shared_owners_;
                  do
                    v138 = __ldaxr(v137);
                  while (__stlxr(v138 - 1, v137));
                  if (!v138)
                  {
                    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                    std::__shared_weak_count::__release_weak(v136);
                  }
                }
              }
              do
                v139 = __ldaxr(v131);
              while (__stlxr(v139 - 1, v131));
              if (!v139)
              {
                ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                std::__shared_weak_count::__release_weak(v130);
              }
              if (v572)
                MEMORY[0x1A1AF4DE8](v572, 0x1000C8077774924);
              if (v576)
                MEMORY[0x1A1AF4DE8](v576, 0x1000C8077774924);
              if (v580)
                MEMORY[0x1A1AF4DE8](v580, 0x1000C8077774924);
              return 1;
            case 14:
              v103 = (std::__shared_weak_count *)operator new(0x30uLL);
              v103->__shared_owners_ = 0;
              v140 = (unint64_t *)&v103->__shared_owners_;
              v103->__shared_weak_owners_ = 0;
              v103->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
              ggl::Data::Data((ggl::Data *)&v103[1], 2 * v14);
              v148 = v553[1];
              v149 = v553[0];
              v150 = (v553[0] * v553[1]);
              v151 = v572;
              v152 = v576;
              v153 = v580;
              if ((_DWORD)v150)
              {
                v154 = 0;
                v155 = v103[1].__shared_owners_;
                v141.n128_u64[0] = 0.5;
                v142.n128_u64[0] = 0x3FF66E978D4FDF3BLL;
                v143.n128_u64[0] = 0;
                v144.n128_u64[0] = 0xBFD60663C74FB54ALL;
                v145.n128_u64[0] = 0xBFE6DA3C21187E7CLL;
                v146.n128_u64[0] = 0x3FFC5A1CAC083127;
                do
                {
                  v156 = (int)((int)(((v154 / v148) >> 1) * v148) / 2 + ((v154 % v148) >> 1));
                  v157 = *(unsigned __int8 *)(v152 + v156);
                  LOBYTE(v147) = v151[v154];
                  v158 = (double)(*(unsigned __int8 *)(v153 + v156) - 128);
                  v159 = (double)*(unint64_t *)&v147 + 0.5;
                  LODWORD(v156) = (int)fmax(fmin(v159 + v158 * 1.402, 255.0), 0.0);
                  v160 = (double)(v157 - 128);
                  v161 = fmax(fmin(v159 + v160 * -0.34414 + v158 * -0.71414, 255.0), 0.0);
                  v147 = fmax(fmin(v159 + v160 * 1.772, 255.0), 0.0);
                  *(_WORD *)(v155 + 2 * v154++) = (8 * (int)v161) & 0xFFE0 | ((int)v147 >> 3) | ((_WORD)v156 << 8) & 0xF800;
                }
                while (v150 != v154);
              }
              else if (!v572)
              {
                goto LABEL_170;
              }
              MEMORY[0x1A1AF4DE8](v141, v142, v143, v144, v145, v146);
LABEL_170:
              if (v152)
                MEMORY[0x1A1AF4DE8](v152, 0x1000C8077774924);
              if (v153)
                MEMORY[0x1A1AF4DE8](v153, 0x1000C8077774924);
              karo::media::Image::setFormat(a4, 14);
              v177 = *(_QWORD *)(a4 + 8);
              if (v177)
              {
                *(_DWORD *)v177 = v148;
                *(_DWORD *)(v177 + 4) = v149;
                v178 = *(_QWORD **)(v177 + 16);
                do
                  v179 = __ldxr(v140);
                while (__stxr(v179 + 1, v140));
                v180 = (std::__shared_weak_count *)v178[1];
                *v178 = v103 + 1;
                v178[1] = v103;
                if (v180)
                {
                  v181 = (unint64_t *)&v180->__shared_owners_;
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
              }
              do
                v176 = __ldaxr(v140);
              while (__stlxr(v176 - 1, v140));
LABEL_183:
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                v169 = v103;
LABEL_185:
                std::__shared_weak_count::__release_weak(v169);
              }
              return 1;
            default:
              return result;
          }
        }
      }
    }
  }
  return result;
}

void md::CameraLogic::~CameraLogic(md::CameraLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x1AF456233693CD46 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v5 <= 0x8BD499FBD96FBB9ELL)
      v7 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x8BD499FBD96FBB9ELL)
      {
        if (v9[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t md::CameraLogic::debugConsoleString@<X0>(id *a1@<X1>, double *a2@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  id v19;
  _QWORD *v20;
  size_t v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *__p[2];
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  unint64_t v35;
  void *v36[2];
  __int128 v37;
  int v38;
  uint64_t v39[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v39[0] = MEMORY[0x1E0DE4FE0] + 64;
  v31 = v9;
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v31 + *(_QWORD *)(v31 - 24));
  std::ios_base::init(v11, &v32);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v31 = v6 + 24;
  v39[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v32 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  v38 = 16;
  md::CameraContext::toString((md::CameraContext *)__p, a2);
  if ((v30 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v14 = v30;
  else
    v14 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v13, v14);
  if ((char)v30 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"\n=== Canvas ===\n", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Size: ", 6);
  v15 = *a1;
  objc_msgSend(v15, "size");
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  v17 = *a1;
  objc_msgSend(v17, "size");
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Content Scale: ", 15);
  v19 = *a1;
  objc_msgSend(v19, "contentScale");
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);

  if ((v38 & 0x10) != 0)
  {
    v22 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) < v35)
    {
      *((_QWORD *)&v37 + 1) = v35;
      v22 = v35;
    }
    v23 = (const void **)&v34;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      v21 = 0;
      a3[23] = 0;
      goto LABEL_24;
    }
    v23 = (const void **)v33;
    v22 = v33[2];
  }
  v24 = *v23;
  v21 = v22 - (_QWORD)*v23;
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    *((_QWORD *)a3 + 1) = v21;
    *((_QWORD *)a3 + 2) = v26 | 0x8000000000000000;
    *(_QWORD *)a3 = v27;
    a3 = v27;
    goto LABEL_23;
  }
  a3[23] = v21;
  if (v21)
LABEL_23:
    memmove(a3, v24, v21);
LABEL_24:
  a3[v21] = 0;
  v31 = *v8;
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = v8[3];
  v32 = v12 + 16;
  if (SBYTE7(v37) < 0)
    operator delete(v36[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v39);
}

void sub_19FC7B654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t md::CameraContext::toString(md::CameraContext *this, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  long double v32;
  _QWORD *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  long double v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  size_t v51;
  unint64_t v52;
  const void **v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  md::CameraContext *v57;
  uint64_t v59;
  _QWORD v60[2];
  _BYTE v61[16];
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *__p[2];
  __int128 v66;
  int v67;
  uint64_t v68[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v68[0] = MEMORY[0x1E0DE4FE0] + 64;
  v59 = v7;
  *(_QWORD *)((char *)&v60[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v60[-1] + *(_QWORD *)(v59 - 24));
  std::ios_base::init(v9, v60);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v59 = v4 + 24;
  v68[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v60[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v66 = 0u;
  v67 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"=== Camera Frame ===\n", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Target Lat/Long: ", 17);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Target Altitude: ", 17);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Near/Far: ", 10);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" / ", 3);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Distance From Target: ", 22);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Pitch: ", 7);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Heading: ", 9);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Roll: ", 6);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"=== Camera Limits ===\n", 22);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Pitch min/max: ", 15);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)" / ", 3);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Zoom min/max: ", 14);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)" / ", 3);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"\n=== Camera ===\n", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Position: ", 10);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
  v25 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"FoV (V/H): ", 11);
  v28 = a2[46];
  v27 = a2[47];
  if (v27 < v28)
  {
    v29 = v27 * v28;
    v30 = v27 / v28;
    if (v29 <= 0.0)
      v31 = 1.0;
    else
      v31 = v30;
    v32 = tan(a2[57] * 0.5);
    atan(v31 * v32);
  }
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)" / ", 3);
  v34 = a2[46];
  v35 = a2[47];
  if (v34 < v35)
  {
    v36 = v35 * v34;
    v37 = v34 / v35;
    if (v36 <= 0.0)
      v38 = 1.0;
    else
      v38 = v37;
    v39 = tan(a2[57] * 0.5);
    atan(v38 * v39);
  }
  v40 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"\n=== Vectors ===\n", 17);
  v41 = v59;
  *(_QWORD *)((char *)&v60[1] + *(_QWORD *)(v59 - 24)) = 2;
  *(_QWORD *)&v61[*(_QWORD *)(v41 - 24)] = 5;
  *(_DWORD *)((char *)v60 + *(_QWORD *)(v41 - 24)) = *(_DWORD *)((_BYTE *)v60 + *(_QWORD *)(v41 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"U:", 2);
  v42 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)",", 1);
  v43 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)",", 1);
  v44 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"F:", 2);
  v45 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
  v46 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)",", 1);
  v47 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v59, (uint64_t)"R:", 2);
  v48 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)",", 1);
  v49 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)",", 1);
  v50 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n", 1);
  if ((v67 & 0x10) != 0)
  {
    v52 = *((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1) < v64)
    {
      *((_QWORD *)&v66 + 1) = v64;
      v52 = v64;
    }
    v53 = (const void **)&v63;
  }
  else
  {
    if ((v67 & 8) == 0)
    {
      v51 = 0;
      *((_BYTE *)this + 23) = 0;
      goto LABEL_26;
    }
    v53 = (const void **)v61;
    v52 = v62;
  }
  v54 = *v53;
  v51 = v52 - (_QWORD)*v53;
  if (v51 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v51 >= 0x17)
  {
    v55 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v55 = v51 | 7;
    v56 = v55 + 1;
    v57 = (md::CameraContext *)operator new(v55 + 1);
    *((_QWORD *)this + 1) = v51;
    *((_QWORD *)this + 2) = v56 | 0x8000000000000000;
    *(_QWORD *)this = v57;
    this = v57;
    goto LABEL_25;
  }
  *((_BYTE *)this + 23) = v51;
  if (v51)
LABEL_25:
    memmove(this, v54, v51);
LABEL_26:
  *((_BYTE *)this + v51) = 0;
  v59 = *v6;
  *(_QWORD *)((char *)&v60[-1] + *(_QWORD *)(v59 - 24)) = v6[3];
  v60[0] = v10 + 16;
  if (SBYTE7(v66) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v68);
}

void sub_19FC7BDD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FC7BDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::MercatorCameraContext::MercatorCameraContext(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float64x2_t v29;
  uint64_t v30;
  double v31;
  double v32;
  float64x2_t v33;
  double *v34;
  double *v35;
  unint64_t v36;
  double *v37;
  double *v38;
  double *v39;
  double *v40;
  double *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  double *v46;
  double *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  const double *v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  const double *v66;
  double v67;
  double v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  long double v86;
  long double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  char v107;
  double v108;
  double v109;
  double v111;
  __double2 v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double *v125;
  double v126;
  double v127;
  double v128;
  uint64_t v129;
  double v130;
  double v131;
  float64x2_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  double v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  double *v152;
  double *v153;
  double *v154;
  double *v155;
  double *v156;
  double v157[6];
  float64x2x2_t v158;
  float64x2x2_t v159;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 72);
  v14 = *(_OWORD *)(a2 + 80);
  v15 = *(_OWORD *)(a2 + 96);
  v16 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 104) = v15;
  *(_OWORD *)(a1 + 88) = v14;
  v17 = *(_OWORD *)(a2 + 152);
  v18 = *(_OWORD *)(a2 + 168);
  v19 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 208) = v19;
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 176) = v18;
  v20 = *(_OWORD *)(a2 + 216);
  v21 = *(_OWORD *)(a2 + 232);
  v22 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 272) = v22;
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
  v23 = *(_OWORD *)(a2 + 280);
  v24 = *(_OWORD *)(a2 + 296);
  v25 = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 344) = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 344) = 1;
  }
  *(_BYTE *)(a1 + 360) = 0;
  if (*(_BYTE *)(a2 + 352))
  {
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 360);
    *(_BYTE *)(a1 + 360) = 1;
  }
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 384);
  v26 = *(_OWORD *)(a2 + 400);
  v27 = *(_OWORD *)(a2 + 416);
  v28 = *(_OWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 424) = v27;
  *(_OWORD *)(a1 + 440) = v28;
  *(_OWORD *)(a1 + 408) = v26;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 480);
  geo::View<double>::View(a1 + 504, (__int128 *)(a2 + 496), (double *)(a2 + 552), (__int128 *)(a2 + 680), (_WORD *)(a2 + 952), *(_DWORD *)(a2 + 956), *(double *)(a2 + 936));
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a2 + 960);
  *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 976);
  memcpy((void *)(a1 + 992), (const void *)(a2 + 984), 0x180uLL);
  v29.f64[0] = *(float *)(a2 + 488);
  *(float64_t *)(a1 + 1376) = v29.f64[0];
  *(double *)(a1 + 1384) = a4;
  *(double *)(a1 + 1392) = a5;
  *(double *)(a1 + 1400) = a6;
  v30 = a1 + 1568;
  v140 = 0.0;
  v141 = 0uLL;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1576) = 0;
  geo::ConvexHull2<double>::getConvexHullPoints((double **)&v140, (_QWORD *)(a1 + 1568), v29);
  *(_BYTE *)(a1 + 1664) = 1;
  v31 = *(double *)(a2 + 496);
  v32 = *(double *)(a2 + 504);
  v131 = *(double *)(a2 + 512);
  v157[0] = 0.0;
  v157[1] = 0.0;
  v157[2] = 1.0;
  v157[3] = -a7;
  geo::Intersect::intersection<double>(&v155, a2 + 984, v157);
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v35 = v155;
  v34 = v156;
  if (v156 == v155)
  {
    v37 = 0;
  }
  else
  {
    v36 = 0xAAAAAAAAAAAAAAABLL * (v156 - v155);
    v125 = v155;
    if (v36 >> 60)
      abort();
    v129 = a3;
    v37 = (double *)operator new(0xAAAAAAAAAAAAAAB0 * (v156 - v155));
    v38 = v153;
    v39 = v37;
    v40 = v35;
    v41 = &v37[2 * v36];
    do
    {
      if (v39 < v41)
      {
        v33 = *(float64x2_t *)v40;
        *(_OWORD *)v39 = *(_OWORD *)v40;
        v38 = v39 + 2;
      }
      else
      {
        v42 = ((char *)v39 - (char *)v37) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
        {
          v153 = v38;
          v154 = v41;
          v152 = v37;
          abort();
        }
        if (v41 - v37 > v43)
          v43 = v41 - v37;
        if ((unint64_t)((char *)v41 - (char *)v37) >= 0x7FFFFFFFFFFFFFF0)
          v44 = 0xFFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          if (v44 >> 60)
          {
            v153 = v38;
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v45 = (char *)operator new(16 * v44);
        }
        else
        {
          v45 = 0;
        }
        v46 = (double *)&v45[16 * v42];
        v41 = (double *)&v45[16 * v44];
        *(_OWORD *)v46 = *(_OWORD *)v40;
        v38 = v46 + 2;
        if (v39 == v37)
          goto LABEL_24;
        do
        {
          v33 = *(float64x2_t *)(v39 - 2);
          *((float64x2_t *)v46 - 1) = v33;
          v46 -= 2;
          v39 -= 2;
        }
        while (v39 != v37);
        if (v37)
LABEL_24:
          operator delete(v37);
        v37 = v46;
      }
      v40 += 3;
      v39 = v38;
    }
    while (v40 != v34);
    v153 = v38;
    v154 = v41;
    v152 = v37;
    v30 = a1 + 1568;
    v35 = v125;
    a3 = v129;
  }
  v140 = 0.0;
  v141 = 0uLL;
  geo::ConvexHull2<double>::getConvexHullPoints(&v152, &v140, v33);
  v47 = *(double **)&v140;
  std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(v30, *(unint64_t *)&v140, (char *)v141, (uint64_t)(v141 - *(_QWORD *)&v140) >> 4);
  if (v47)
    operator delete(v47);
  v48 = *(char **)(a1 + 1568);
  v49 = *(char **)(a1 + 1576);
  v128 = a4;
  if (v48 == v49)
  {
    v53 = 1.79769313e308;
    v54 = -1.79769313e308;
    v51 = 1.79769313e308;
    v52 = -1.79769313e308;
    goto LABEL_39;
  }
  v50 = v49 - v48 - 16;
  if (v50 < 0x30)
  {
    v51 = 1.79769313e308;
    v52 = -1.79769313e308;
    v53 = 1.79769313e308;
    v54 = -1.79769313e308;
    goto LABEL_38;
  }
  v55 = (v50 >> 4) + 1;
  v56 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v57 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v58 = (const double *)(v48 + 32);
  v59 = v55 & 0x1FFFFFFFFFFFFFFCLL;
  v60 = v57;
  v61 = v56;
  v62 = v56;
  v63 = v56;
  v64 = v57;
  v65 = v57;
  do
  {
    v66 = v58 - 4;
    v158 = vld2q_f64(v66);
    v159 = vld2q_f64(v58);
    v56 = vminnmq_f64(v158.val[0], v56);
    v61 = vminnmq_f64(v159.val[0], v61);
    v64 = vmaxnmq_f64(v64, v158.val[0]);
    v65 = vmaxnmq_f64(v65, v159.val[0]);
    v62 = vminnmq_f64(v158.val[1], v62);
    v63 = vminnmq_f64(v159.val[1], v63);
    v57 = vmaxnmq_f64(v57, v158.val[1]);
    v60 = vmaxnmq_f64(v60, v159.val[1]);
    v58 += 8;
    v59 -= 4;
  }
  while (v59);
  v54 = vmaxnmvq_f64(vmaxnmq_f64(v64, v65));
  v53 = vminnmvq_f64(vminnmq_f64(v62, v63));
  v51 = vminnmvq_f64(vminnmq_f64(v56, v61));
  v52 = vmaxnmvq_f64(vmaxnmq_f64(v57, v60));
  if (v55 != (v55 & 0x1FFFFFFFFFFFFFFCLL))
  {
    v48 += 16 * (v55 & 0x1FFFFFFFFFFFFFFCLL);
    do
    {
LABEL_38:
      v67 = *(double *)v48;
      v68 = *((double *)v48 + 1);
      v48 += 16;
      v51 = fmin(v67, v51);
      v54 = fmax(v54, v67);
      v53 = fmin(v68, v53);
      v52 = fmax(v52, v68);
    }
    while (v48 != v49);
  }
LABEL_39:
  *(double *)(a1 + 1536) = v51;
  *(double *)(a1 + 1544) = v53;
  *(double *)(a1 + 1552) = v54;
  *(double *)(a1 + 1560) = v52;
  v143 = 0u;
  v145 = 0;
  v147 = 0;
  v144 = 0u;
  v142 = 0u;
  v141 = 0u;
  v151 = 0x3FF0000000000000;
  v140 = v54 - v51;
  *(double *)&v143 = v52 - v53;
  v146 = v54 - v51;
  v148 = v51;
  v149 = v53;
  v126 = a7;
  v150 = a7;
  gm::operator*<double,4,4,4>(v132.f64, (double *)(a2 + 808), &v140);
  v69 = v133;
  *(float64x2_t *)(a1 + 1408) = v132;
  *(_OWORD *)(a1 + 1424) = v69;
  v70 = v135;
  *(_OWORD *)(a1 + 1440) = v134;
  *(_OWORD *)(a1 + 1456) = v70;
  v71 = v137;
  *(_OWORD *)(a1 + 1472) = v136;
  *(_OWORD *)(a1 + 1488) = v71;
  v72 = v139;
  *(_OWORD *)(a1 + 1504) = v138;
  *(_OWORD *)(a1 + 1520) = v72;
  v73 = *(double *)(a2 + 528);
  v74 = *(double *)(a2 + 536);
  v75 = *(double *)(a2 + 520);
  v76 = v73 * -2.0;
  v77 = v75 + v75;
  v78 = *(double *)(a2 + 544);
  v79 = v73 * -2.0 * v74;
  v80 = (v75 + v75) * v74;
  v130 = -1.0 - v73 * -2.0 * v73;
  v82 = *(double *)(a1 + 376);
  v81 = *(double *)(a1 + 384);
  v124 = v74;
  v127 = a5;
  if (v81 >= v82)
  {
    v88 = *(double *)(a1 + 464);
  }
  else
  {
    v83 = v81 * v82;
    v84 = v81 / v82;
    if (v83 <= 0.0)
      v84 = 1.0;
    v122 = v84;
    v85 = *(double *)(a2 + 544);
    v86 = tan(*(double *)(a1 + 464) * 0.5);
    v87 = atan(v122 * v86);
    v78 = v85;
    v88 = v87 + v87;
  }
  v120 = v78;
  v121 = v76;
  v89 = -(v80 - v78 * v76);
  v90 = v79 + v77 * v78;
  v123 = v75;
  v91 = v130 + v77 * v75;
  v97 = tan(v88 * 0.5);
  if (v34 == v35)
  {
    v99 = 1.79769313e308;
    v102 = v131;
  }
  else
  {
    v98 = 0.0;
    v99 = 1.79769313e308;
    v100 = 1.79769313e308;
    v101 = v35;
    v102 = v131;
    do
    {
      v96 = *v101;
      v103 = *v101 - v31;
      v104 = v101[1] - v32;
      v94 = v101[2] - v131;
      v95 = sqrt(v103 * v103 + v104 * v104 + v94 * v94);
      if (v95 > v98)
      {
        *(double *)(a1 + 1624) = v96;
        *(double *)(a1 + 1632) = v101[1];
        *(double *)(a1 + 1640) = v101[2];
        v98 = v95;
      }
      if (v95 < v100)
      {
        *(double *)(a1 + 1600) = *v101;
        *(double *)(a1 + 1608) = v101[1];
        *(double *)(a1 + 1616) = v101[2];
        v100 = v95;
      }
      v93 = v103 * v89;
      v92 = v93 + v104 * v90 + v94 * v91;
      v99 = fmin(v92, v99);
      v101 += 3;
    }
    while (v101 != v34);
  }
  *(double *)(a1 + 1592) = v128 * ((v97 + v97) * v99) / v127;
  v105 = *(double *)(a2 + 976);
  if (a3 && *(double *)(a2 + 40) > 0.610865238)
  {
    v132.f64[0] = v31 + v105 * v89;
    v132.f64[1] = v32 + v105 * v90;
    *(double *)&v133 = v102 + v105 * v91;
    v106 = COERCE_DOUBLE(md::World::getElevation(a3, &v132, v132.f64[0], v132.f64[1], *(double *)&v133, v92, v93, v94, v95, *(float *)&v96));
    v108 = v97;
    v109 = v126;
    if (v106 * 0.0000000249532021 <= v126 && v107 != 0)
      v109 = v106 * 0.0000000249532021;
  }
  else
  {
    v108 = v97;
    v109 = v126;
  }
  v111 = 1.57079633 - *(double *)(a2 + 40);
  v112 = __sincos_stret(v111);
  v113 = v105 * v108;
  v114 = vabdd_f64(v131, v109) / v112.__sinval;
  v115 = (v113 + tan(v111) * (v105 - v114)) / (v113 + v113);
  if (v109 < 0.0)
    v115 = v115 + v109 / (v112.__cosval * v113);
  *(double *)(a1 + 1648) = v115;
  v116 = fabs(v112.__sinval);
  v117 = 1.79769313e308;
  if (v116 > v116 * 2.22044605e-14 && v116 >= 2.22507386e-308)
  {
    v118 = fabs(v112.__cosval);
    v117 = 1.79769313e308;
    if (v118 > v118 * 2.22044605e-14 && v118 >= 2.22507386e-308)
      v117 = -(-(((v105 - v114) / v112.__cosval + v114 * v112.__cosval)
               * (v89 * (v123 * v121 - v120 * (v124 + v124)) + v90 * -(v130 + (v124 + v124) * v124)))
             / sqrt((v123 * v121 - v120 * (v124 + v124)) * (v123 * v121 - v120 * (v124 + v124))+ -(v130 + (v124 + v124) * v124) * -(v130 + (v124 + v124) * v124))+ *(double *)(a2 + 512) * v91);
  }
  *(double *)(a1 + 1656) = v117;
  *(double *)a1 = v109;
  if (v37)
  {
    v153 = v37;
    operator delete(v37);
    v35 = v155;
  }
  if (v35)
    operator delete(v35);
  return a1;
}

void sub_19FC7C71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  void *v38;
  void *v39;
  void **v40;
  uint64_t v41;
  void *v43;
  void *__pa;

  __pa = v39;
  if (v38)
  {
    *(_QWORD *)(v41 - 232) = v38;
    operator delete(v38);
    __pa = *(void **)(v41 - 216);
  }
  if (__pa)
    operator delete(__pa);
  v43 = *v40;
  if (*v40)
  {
    *(_QWORD *)(v37 + 1576) = v43;
    operator delete(v43);
  }
  if (*(_BYTE *)(v37 + 360))
  {
    *(_BYTE *)(v37 + 360) = 0;
    if (!*(_BYTE *)(v37 + 344))
LABEL_9:
      _Unwind_Resume(exception_object);
  }
  else if (!*(_BYTE *)(v37 + 344))
  {
    goto LABEL_9;
  }
  *(_BYTE *)(v37 + 344) = 0;
  _Unwind_Resume(exception_object);
}

double *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(double *result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a4;
  v7 = a4[1];
  v8 = *result;
  v9 = result[1];
  v10 = (v5 - v7) / (*a2 - *a4);
  if (vabdd_f64(*a2, *a4) < 2.22044605e-16)
    v10 = 1.79769313e308;
  if (vabdd_f64(v8, v6) >= 2.22044605e-16)
    v11 = (v9 - v7) / (*result - *a4);
  else
    v11 = 1.79769313e308;
  if (v10 < v11 || v10 == v11 && (v4 < v8 || v4 == v8 && v5 < v9))
  {
    v12 = *a3;
    v13 = a3[1];
    v14 = (v13 - v7) / (*a3 - v6);
    v15 = vabdd_f64(*a3, v6) < 2.22044605e-16;
    v16 = 1.79769313e308;
    if (!v15)
      v16 = v14;
    if (v16 < v10 || v16 == v10 && (v12 < v4 || v12 == v4 && v13 < v5))
    {
      *result = v12;
      result[1] = a3[1];
LABEL_48:
      *a3 = v8;
      a3[1] = v9;
      return result;
    }
    *result = v4;
    result[1] = a2[1];
    *a2 = v8;
    a2[1] = v9;
    v31 = *a3;
    v32 = a3[1];
    v33 = a4[1];
    v34 = v32 - v33;
    v35 = v9 - v33;
    v36 = v34 / (*a3 - *a4);
    if (vabdd_f64(*a3, *a4) < 2.22044605e-16)
      v36 = 1.79769313e308;
    v37 = v35 / (v8 - *a4);
    if (vabdd_f64(v8, *a4) >= 2.22044605e-16)
      v38 = v37;
    else
      v38 = 1.79769313e308;
    if (v36 < v38 || v36 == v38 && (v31 < v8 || v31 == v8 && v32 < v9))
    {
      *a2 = v31;
      a2[1] = a3[1];
      goto LABEL_48;
    }
  }
  else
  {
    v17 = *a3;
    v18 = a3[1];
    v19 = (v18 - v7) / (*a3 - v6);
    v15 = vabdd_f64(*a3, v6) < 2.22044605e-16;
    v20 = 1.79769313e308;
    if (!v15)
      v20 = v19;
    if (v20 < v10 || v20 == v10 && (v17 < v4 || v17 == v4 && v18 < v5))
    {
      *a2 = v17;
      a2[1] = a3[1];
      *a3 = v4;
      a3[1] = v5;
      v21 = *a2;
      v22 = a2[1];
      v23 = a4[1];
      v24 = v22 - v23;
      v25 = *result;
      v26 = result[1];
      v27 = v26 - v23;
      v28 = v24 / (*a2 - *a4);
      if (vabdd_f64(*a2, *a4) < 2.22044605e-16)
        v28 = 1.79769313e308;
      v29 = v27 / (*result - *a4);
      if (vabdd_f64(v25, *a4) >= 2.22044605e-16)
        v30 = v29;
      else
        v30 = 1.79769313e308;
      if (v28 < v30 || v28 == v30 && (v21 < v25 || v21 == v25 && v22 < v26))
      {
        *result = v21;
        result[1] = a2[1];
        *a2 = v25;
        a2[1] = v26;
      }
    }
  }
  return result;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  double result;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1, a2, a3, a5);
  result = *a4;
  v11 = a4[1];
  v12 = a5[1];
  v13 = v11 - v12;
  v14 = *a3;
  v15 = a3[1];
  v16 = v15 - v12;
  v17 = v13 / (*a4 - *a5);
  if (vabdd_f64(*a4, *a5) < 2.22044605e-16)
    v17 = 1.79769313e308;
  v18 = v16 / (*a3 - *a5);
  if (vabdd_f64(v14, *a5) >= 2.22044605e-16)
    v19 = v18;
  else
    v19 = 1.79769313e308;
  if (v17 < v19 || v17 == v19 && (result < v14 || result == v14 && v11 < v15))
  {
    *a3 = result;
    a3[1] = a4[1];
    *a4 = v14;
    a4[1] = v15;
    result = *a3;
    v20 = a3[1];
    v21 = a5[1];
    v22 = v20 - v21;
    v23 = *a2;
    v24 = a2[1];
    v25 = v24 - v21;
    v26 = v22 / (*a3 - *a5);
    if (vabdd_f64(*a3, *a5) < 2.22044605e-16)
      v26 = 1.79769313e308;
    v27 = v25 / (*a2 - *a5);
    if (vabdd_f64(v23, *a5) >= 2.22044605e-16)
      v28 = v27;
    else
      v28 = 1.79769313e308;
    if (v26 < v28 || v26 == v28 && (result < v23 || result == v23 && v20 < v24))
    {
      *a2 = result;
      a2[1] = a3[1];
      *a3 = v23;
      a3[1] = v24;
      result = *a2;
      v29 = a2[1];
      v30 = a5[1];
      v31 = v29 - v30;
      v32 = *a1;
      v33 = a1[1];
      v34 = v33 - v30;
      v35 = v31 / (*a2 - *a5);
      if (vabdd_f64(*a2, *a5) < 2.22044605e-16)
        v35 = 1.79769313e308;
      v36 = v34 / (*a1 - *a5);
      if (vabdd_f64(v32, *a5) >= 2.22044605e-16)
        v37 = v36;
      else
        v37 = 1.79769313e308;
      if (v35 < v37 || v35 == v37 && (result < v32 || result == v32 && v29 < v33))
      {
        *a1 = result;
        result = a2[1];
        a1[1] = result;
        *a2 = v32;
        a2[1] = v33;
      }
    }
  }
  return result;
}

double std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double result;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1, a2, a3, a4, a6);
  result = *a5;
  v13 = a5[1];
  v14 = a6[1];
  v15 = v13 - v14;
  v16 = *a4;
  v17 = a4[1];
  v18 = v17 - v14;
  v19 = v15 / (*a5 - *a6);
  if (vabdd_f64(*a5, *a6) < 2.22044605e-16)
    v19 = 1.79769313e308;
  v20 = v18 / (*a4 - *a6);
  if (vabdd_f64(v16, *a6) >= 2.22044605e-16)
    v21 = v20;
  else
    v21 = 1.79769313e308;
  if (v19 < v21 || v19 == v21 && (result < v16 || result == v16 && v13 < v17))
  {
    *a4 = result;
    a4[1] = a5[1];
    *a5 = v16;
    a5[1] = v17;
    result = *a4;
    v22 = a4[1];
    v23 = a6[1];
    v24 = v22 - v23;
    v25 = *a3;
    v26 = a3[1];
    v27 = v26 - v23;
    v28 = v24 / (*a4 - *a6);
    if (vabdd_f64(*a4, *a6) < 2.22044605e-16)
      v28 = 1.79769313e308;
    v29 = v27 / (*a3 - *a6);
    if (vabdd_f64(v25, *a6) >= 2.22044605e-16)
      v30 = v29;
    else
      v30 = 1.79769313e308;
    if (v28 < v30 || v28 == v30 && (result < v25 || result == v25 && v22 < v26))
    {
      *a3 = result;
      a3[1] = a4[1];
      *a4 = v25;
      a4[1] = v26;
      result = *a3;
      v31 = a3[1];
      v32 = a6[1];
      v33 = v31 - v32;
      v34 = *a2;
      v35 = a2[1];
      v36 = v35 - v32;
      v37 = v33 / (*a3 - *a6);
      if (vabdd_f64(*a3, *a6) < 2.22044605e-16)
        v37 = 1.79769313e308;
      v38 = v36 / (*a2 - *a6);
      if (vabdd_f64(v34, *a6) >= 2.22044605e-16)
        v39 = v38;
      else
        v39 = 1.79769313e308;
      if (v37 < v39 || v37 == v39 && (result < v34 || result == v34 && v31 < v35))
      {
        *a2 = result;
        a2[1] = a3[1];
        *a3 = v34;
        a3[1] = v35;
        result = *a2;
        v40 = a2[1];
        v41 = a6[1];
        v42 = v40 - v41;
        v43 = *a1;
        v44 = a1[1];
        v45 = v44 - v41;
        v46 = v42 / (*a2 - *a6);
        if (vabdd_f64(*a2, *a6) < 2.22044605e-16)
          v46 = 1.79769313e308;
        v47 = v45 / (*a1 - *a6);
        if (vabdd_f64(v43, *a6) >= 2.22044605e-16)
          v48 = v47;
        else
          v48 = 1.79769313e308;
        if (v46 < v48 || v46 == v48 && (result < v43 || result == v43 && v40 < v44))
        {
          *a1 = result;
          result = a2[1];
          a1[1] = result;
          *a2 = v43;
          a2[1] = v44;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(double *a1, double *a2, double *a3)
{
  uint64_t v6;
  _BOOL8 result;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  uint64_t v20;
  int v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 2);
      v9 = *(a2 - 1);
      v10 = a3[1];
      v11 = v9 - v10;
      v12 = *a1;
      v13 = a1[1];
      v14 = v13 - v10;
      v15 = v11 / (v8 - *a3);
      if (vabdd_f64(v8, *a3) < 2.22044605e-16)
        v15 = 1.79769313e308;
      v16 = v14 / (*a1 - *a3);
      if (vabdd_f64(v12, *a3) >= 2.22044605e-16)
        v17 = v16;
      else
        v17 = 1.79769313e308;
      if (v15 < v17 || v15 == v17 && (v8 < v12 || v8 == v12 && v9 < v13))
      {
        *a1 = v8;
        a1[1] = *(a2 - 1);
        *(a2 - 2) = v12;
        *(a2 - 1) = v13;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v18 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1, a1 + 2, a1 + 4, a3);
      v19 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v20 = 0;
      v21 = 0;
      v22 = *a3;
      break;
  }
  while (1)
  {
    v24 = *v19;
    v25 = v19[1];
    v26 = a3[1];
    v27 = v25 - v26;
    v28 = *v18;
    v29 = v18[1];
    v30 = v29 - v26;
    v31 = v27 / (*v19 - v22);
    if (vabdd_f64(*v19, v22) < 2.22044605e-16)
      v31 = 1.79769313e308;
    v32 = v30 / (*v18 - v22);
    if (vabdd_f64(v28, v22) < 2.22044605e-16)
      v32 = 1.79769313e308;
    if (v31 >= v32 && (v31 != v32 || v24 >= v28 && (v24 != v28 || v25 >= v29)))
      goto LABEL_18;
    *v19 = v28;
    v19[1] = v18[1];
    v23 = a1;
    if (v18 != a1)
    {
      v33 = v20;
      while (1)
      {
        v34 = (double *)((char *)a1 + v33);
        v35 = a3[1];
        v36 = v25 - v35;
        v37 = *(double *)((char *)a1 + v33 + 16);
        v38 = *(double *)((char *)a1 + v33 + 24);
        v39 = v38 - v35;
        v40 = v36 / (v24 - *a3);
        if (vabdd_f64(v24, *a3) < 2.22044605e-16)
          v40 = 1.79769313e308;
        v41 = v39 / (v37 - *a3);
        v42 = vabdd_f64(v37, *a3) >= 2.22044605e-16 ? v41 : 1.79769313e308;
        if (v40 >= v42)
        {
          if (v40 != v42)
          {
            v23 = (double *)((char *)a1 + v33 + 32);
            goto LABEL_16;
          }
          if (v24 >= v37 && (v24 != v37 || v25 >= v38))
            break;
        }
        v18 -= 2;
        v34[4] = v37;
        v34[5] = v38;
        v33 -= 16;
        if (v33 == -32)
        {
          v23 = a1;
          goto LABEL_16;
        }
      }
      v23 = v18;
    }
LABEL_16:
    *v23 = v24;
    v23[1] = v25;
    if (++v21 == 8)
      return v19 + 2 == a2;
    v22 = *a3;
LABEL_18:
    v18 = v19;
    v20 += 16;
    v19 += 2;
    if (v19 == a2)
      return 1;
  }
}

void _ZNSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__1NS_9allocatorISJ_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__1NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8C60;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__0NS_9allocatorISJ_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C8C18;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md11CameraLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13CameraContextEE3__0NS_9allocatorISJ_EEFvvEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C8C18;
  a2[1] = v2;
  return result;
}

void md::CameraContext::~CameraContext(md::CameraContext *this)
{
  char *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = (char *)this + 4128;
  v3 = *((_QWORD *)this + 698);
  *((_QWORD *)this + 698) = 0;
  if (v3)
  {
    v4 = *(void **)(v3 + 2960);
    if (v4)
    {
      *(_QWORD *)(v3 + 2968) = v4;
      operator delete(v4);
    }
    if (*(_BYTE *)(v3 + 1752))
      *(_BYTE *)(v3 + 1752) = 0;
    if (*(_BYTE *)(v3 + 1736))
      *(_BYTE *)(v3 + 1736) = 0;
    if (*(_BYTE *)(v3 + 352))
      *(_BYTE *)(v3 + 352) = 0;
    if (*(_BYTE *)(v3 + 336))
      *(_BYTE *)(v3 + 336) = 0;
    MEMORY[0x1A1AF4E00](v3, 0x1060C409A3A3550);
  }
  if (v2[16])
    v2[16] = 0;
  if (*v2)
    *v2 = 0;
  v5 = (void *)*((_QWORD *)this + 370);
  if (v5)
  {
    *((_QWORD *)this + 371) = v5;
    operator delete(v5);
  }
  if (*((_BYTE *)this + 1752))
    *((_BYTE *)this + 1752) = 0;
  if (*((_BYTE *)this + 1736))
    *((_BYTE *)this + 1736) = 0;
  if (*((_BYTE *)this + 352))
    *((_BYTE *)this + 352) = 0;
  if (*((_BYTE *)this + 336))
    *((_BYTE *)this + 336) = 0;
}

_QWORD *gdc::ManagedObjectHolder<md::CameraContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::CameraContext *v2;

  *a1 = &off_1E42B0B68;
  v2 = (md::CameraContext *)a1[4];
  if (v2)
  {
    md::CameraContext::~CameraContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::CameraContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::CameraContext *v1;

  *a1 = &off_1E42B0B68;
  v1 = (md::CameraContext *)a1[4];
  if (v1)
  {
    md::CameraContext::~CameraContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CameraContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

double md::CameraContext::groundPointFromScreenPoint(md::CameraContext *this, const CGPoint *a2, double a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  v4 = -(*((double *)this + 470) - (a3 - *((float *)this + 122) + a3 - *((float *)this + 122)) * *((double *)this + 470));
  v5 = -(*((double *)this + 469) - (a4 + a4) * *((double *)this + 469));
  v6 = 1.0 / sqrt(v4 * v4 + 1.0 + v5 * v5);
  v7 = v6 * v4;
  v8 = *((double *)this + 66);
  v9 = *((double *)this + 67);
  v10 = -(v6 * v5 * v9 + v6 * v8);
  v11 = *((double *)this + 65);
  v12 = v10 + v10;
  v13 = v6 * v11 + v7 * v9 + v6 * v11 + v7 * v9;
  v14 = -(v7 * v8 - v6 * v5 * v11) - (v7 * v8 - v6 * v5 * v11);
  v15 = *((double *)this + 68);
  v16 = v14 * v15 + v13 * v11;
  v17 = v6 + (v10 + v10) * v8;
  result = *((double *)this + 62);
  if (vabdd_f64(v16, v17) > 2.22044605e-16)
    return result + -*((double *)this + 64) / (v16 - v17) * (v7 + v12 * v15 + v14 * v8 - v13 * v9);
  return result;
}

void md::ARCameraRouteLocationProviderLogic::~ARCameraRouteLocationProviderLogic(md::ARCameraRouteLocationProviderLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

void md::ARCameraRouteLocationProviderLogic::didBecomeInactive(md::ARCameraRouteLocationProviderLogic *this)
{
  md::ARCameraRouteLocationProvider *v1;

  v1 = (md::ARCameraRouteLocationProvider *)*((_QWORD *)this + 16);
  if (v1)
    md::ARCameraRouteLocationProvider::setRoute(v1, 0);
}

uint64_t md::Logic<md::ARCameraRouteLocationProviderLogic,md::ARCameraRouteLocationProviderContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARCameraRouteLocationProviderContext]";
  v4[3] = 40;
  v4[4] = result;
  *v4 = &off_1E42B1680;
  v4[1] = 0x2A64A6E0A1B666D6;
  *a2 = v4;
  return result;
}

void sub_19FC7D5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARCameraRouteLocationProviderLogic,md::ARCameraRouteLocationProviderContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x2A64A6E0A1B666D6 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v4 <= 0x1B8B241A8D896A1DuLL)
      v6 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::ARCameraRouteLocationProviderLogic,md::ARCameraRouteLocationProviderContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x2A64A6E0A1B666D6 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v4 <= 0x1B8B241A8D896A1DuLL)
      v6 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::ARCameraRouteLocationProviderLogic,md::ARCameraRouteLocationProviderContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x2A64A6E0A1B666D6 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v4 <= 0x1B8B241A8D896A1DuLL)
      v6 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::ARCameraRouteLocationProviderLogic,md::ARCameraRouteLocationProviderContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x2A64A6E0A1B666D6 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v4 <= 0x1B8B241A8D896A1DuLL)
      v6 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::ARCameraRouteLocationProviderLogic,md::ARCameraRouteLocationProviderContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x2A64A6E0A1B666D6 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v5 <= 0x1B8B241A8D896A1DuLL)
      v7 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x1B8B241A8D896A1DLL)
      {
        if (v9[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x1B8B241A8D896A1DLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::ARCameraRouteLocationProviderLogic,md::ARCameraRouteLocationProviderContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARCameraRouteLocationProviderLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  GEOComposedRoute *v5;

  if (*(_QWORD *)(a1 + 128))
  {
    objc_msgSend(*(id *)(*(_QWORD *)a3 + 40), "routeInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "route");
    v5 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();

    md::ARCameraRouteLocationProvider::setRoute(*(md::ARCameraRouteLocationProvider **)(a1 + 128), v5);
  }
}

void sub_19FC7DD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void md::Logic<md::ARCameraRouteLocationProviderLogic,md::ARCameraRouteLocationProviderContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *gdc::ManagedObjectHolder<md::ARCameraRouteLocationProviderContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1680;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARCameraRouteLocationProviderContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1680;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARCameraRouteLocationProviderContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t std::unordered_set<md::NavigationLogicEvent>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<md::NavigationLogicEvent,std::hash<md::NavigationLogicEvent>,std::equal_to<md::NavigationLogicEvent>,std::allocator<md::NavigationLogicEvent>>::__emplace_unique_key_args<md::NavigationLogicEvent,md::NavigationLogicEvent const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_19FC7E028(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t gss::QueryableLocker<gss::PropertyID>::value<(gss::PropertyID)263>(uint64_t a1)
{
  float *v2;
  float v3;
  BOOL v4;
  unsigned int v5;
  char v7;
  char v8;

  v2 = *(float **)a1;
  if (!*(_QWORD *)a1
    || (v3 = *v2, LODWORD(v2) = *v2 == 1.0, !*(_BYTE *)(a1 + 10))
    || (v3 != 0.0 ? (v4 = v3 == 1.0) : (v4 = 1), v4))
  {
    v5 = *(unsigned __int8 *)(a1 + v2 + 11);
    if (v5 != 2)
      return gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x107u, v5, 0);
  }
  v8 = 1;
  v7 = 1;
  gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x107u, 0, &v8);
  return gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x107u, 1u, &v7);
}

void ___ZN2md16RouteRenderLayer21updateRouteLineMeshesERKNS_13LayoutContextERKNSt3__16vectorINS4_10shared_ptrINS_16RouteLineOverlayEEENS4_9allocatorIS8_EEEEb_block_invoke(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v9;
  float *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = *a2;
  v3 = (uint64_t)(*a2 + 1);
  if (!*a2)
    v3 = 0;
  if (!*(_DWORD *)(v3 + 216))
  {
    v6 = **(_QWORD **)(a1 + 32);
    if (v2)
      ++*v2;
    v7 = *(_QWORD **)(v6 + 504);
    if (v7)
    {
      if ((*v7)-- == 1)
      {
        md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v7 + 1));
        v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
        if ((v9 & 1) == 0)
        {
          v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          if (v22)
          {
            v23 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v23, "VectorKitLabels", 0x5ED09DD50000000FLL);
            v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          }
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v10 + 299) + 40))(*((_QWORD *)v10 + 299), *(_QWORD *)(v6 + 504), 424);
        *(_QWORD *)(v6 + 504) = 0;
        v2 = *a2;
      }
    }
    *(_QWORD *)(v6 + 504) = v2;
    v11 = *(uint64_t **)(a1 + 40);
    v12 = **(_QWORD **)(a1 + 32);
    v13 = *(_QWORD *)(v12 + 504);
    if (v13)
      v14 = v13 + 8;
    else
      v14 = 0;
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    v24 = v16;
    v25 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      v12 = **(_QWORD **)(a1 + 32);
    }
    md::RouteLineSection::updateStyleQueryIfNecessary(v14, &v24, *(unsigned __int8 **)(a1 + 48), *(unsigned __int8 *)(v12 + 620), *(unsigned __int8 *)(v12 + 621), *(unsigned __int8 *)(v12 + 622), (gss::FeatureAttributeSet *)(v12 + 536), (gss::FeatureAttributeSet *)(v12 + 568), *(float *)(a1 + 56), *(_BYTE *)(a1 + 60), 0xFFFFFFFF, 0xFFFFFFFF);
    v19 = v25;
    if (v25)
    {
      v20 = (unint64_t *)&v25->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_19FC7E2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<md::NavigationLogicEvent,std::hash<md::NavigationLogicEvent>,std::equal_to<md::NavigationLogicEvent>,std::allocator<md::NavigationLogicEvent>>::__emplace_unique_key_args<md::NavigationLogicEvent,md::NavigationLogicEvent const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FC7E5B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CD898;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::runLayoutLogic(md::LayoutContext const&)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CD898;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::ElevationCompressedMesh::~ElevationCompressedMesh(ggl::DaVinci::ElevationCompressedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::ElevationCompressedMesh::~ElevationCompressedMesh(ggl::DaVinci::ElevationCompressedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::ElevationCompressedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::ElevationCompressedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::DaVinci::ElevationCompressedMesh::ElevationCompressedMesh(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *zone;
  int v35;
  int v36;
  uint64_t v37;
  geo::read_write_lock *v38;
  const char *v39;
  malloc_zone_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
    v42 = a3;
    a3 = v42;
    if (v27)
    {
      if ((v28 & 1) == 0
      {
        ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::elevationCompressedVboReflection;
      }
      ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::attributesReflection(void)::r;
      unk_1ECE2FDC8 = 1;
      a3 = v42;
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E42BBC08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = &ggl::MeshTyped<ggl::DaVinci::ElevationCompressedVbo>::typedReflection(void)::r;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = &unk_1ECE44000;
  if ((v10 & 1) == 0)
  {
    v43 = a3;
    v9 = &unk_1ECE44000;
    v30 = v29;
    v8 = a1 + 64;
    a3 = v43;
    if (v30)
    {
      v31 = operator new();
      *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v31 + 24) = "GeoGL";
      *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v31 = &off_1E42B5668;
      *(_QWORD *)(v31 + 8) = "GeoGL";
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 136) = 0u;
      *(_OWORD *)(v31 + 152) = 0u;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_OWORD *)(v31 + 200) = 0u;
      *(_OWORD *)(v31 + 216) = 0u;
      *(_OWORD *)(v31 + 232) = 0u;
      *(_QWORD *)(v31 + 248) = 0;
      *(_OWORD *)(v31 + 56) = 0u;
      v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
      if ((_DWORD)v32)
        geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v31 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v31;
      v9 = &unk_1ECE44000;
      v8 = a1 + 64;
      a3 = v43;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 120) = 0;
  v12 = a1 + 120;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if ((v11 & 1) == 0)
  {
    v41 = v8;
    v44 = a3;
    v9 = (_QWORD *)&unk_1ECE44000;
    v36 = v35;
    v8 = v41;
    a3 = v44;
    if (v36)
    {
      v37 = operator new();
      *(_QWORD *)(v37 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v37 + 24) = "GeoGL";
      *(_OWORD *)(v37 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v37 = &off_1E42B5668;
      *(_QWORD *)(v37 + 8) = "GeoGL";
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 88) = 0u;
      *(_OWORD *)(v37 + 104) = 0u;
      *(_OWORD *)(v37 + 120) = 0u;
      *(_OWORD *)(v37 + 136) = 0u;
      *(_OWORD *)(v37 + 152) = 0u;
      *(_OWORD *)(v37 + 168) = 0u;
      *(_OWORD *)(v37 + 184) = 0u;
      *(_OWORD *)(v37 + 200) = 0u;
      *(_OWORD *)(v37 + 216) = 0u;
      *(_OWORD *)(v37 + 232) = 0u;
      *(_QWORD *)(v37 + 248) = 0;
      *(_OWORD *)(v37 + 56) = 0u;
      v38 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v37 + 56), 0);
      if ((_DWORD)v38)
        geo::read_write_lock::logFailure(v38, (uint64_t)"initialization", v39);
      v40 = malloc_create_zone(0, 0);
      *(_QWORD *)(v37 + 48) = v40;
      malloc_set_zone_name(v40, "GeoGL");
      *(_QWORD *)(v37 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v37;
      v9 = &unk_1ECE44000;
      v8 = v41;
      a3 = v44;
      v12 = a1 + 120;
    }
  }
  *(_QWORD *)(a1 + 128) = v9[495];
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)a1 = &off_1E42BDFB8;
  *(_QWORD *)(a1 + 16) = &unk_1E42BDFD8;
  v13 = a3[1];
  v45 = *a3;
  v46 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v8, &v45, &v47, 1uLL);
  v16 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = *a4;
  v19 = a4[1];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)a1 = &off_1E42BC600;
  *(_QWORD *)(a1 + 16) = &unk_1E42BC620;
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::ElevationMesh::~ElevationMesh(ggl::DaVinci::ElevationMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::ElevationMesh::~ElevationMesh(ggl::DaVinci::ElevationMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::ElevationMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::ElevationMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::ElevationVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::ElevationVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  int v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v101 = a2;
    v102 = a3;
    a2 = v101;
    a3 = v102;
    a4 = v89;
    if (v90)
    {
      if ((v91 & 1) == 0
      {
        if ((v95 & 1) == 0
        {
          if ((v99 & 1) == 0
          {
            ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingPointyRoof::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43CE0 = 1;
        }
        ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r;
        unk_1EE57FEA0 = &ggl::DiffuseBuildingPointyRoof::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
        qword_1EE57FEA8 = 0;
        if ((v96 & 1) == 0
        {
          ggl::DiffuseBuildingPointyRoof::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          *(_QWORD *)algn_1EE57FED8 = ggl::Tile::View::reflection(void)::reflection;
          qword_1EE57FEE0 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
          unk_1EE57FEE8 = ggl::Building::Style::reflection(void)::reflection;
          qword_1EE57FEF0 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
          unk_1EE57FEF8 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          qword_1EE57FF00 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
        }
        qword_1EE57FEB0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineDataBuildingPipelineConstantStructs(void)::ref;
        unk_1EE57FEB8 = xmmword_19FFB37A0;
      }
      ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::DiffuseBuildingPointyRoofShader::typedReflection(void)::ref = (uint64_t)"DiffuseBuildingPointyRoofShader";
        if ((v97 & 1) == 0
        {
          v100 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
          qword_1ECE42838 = (uint64_t)"DiffuseBuildingPointyRoofShader";
          unk_1ECE42840 = ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42848 = 1;
          unk_1ECE42850 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42858 = 6;
          unk_1ECE42860 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42868 = 0;
          unk_1ECE42870 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = v100;
          *(_DWORD *)algn_1ECE42834 = 0;
          qword_1ECE42878 = 0;
          unk_1ECE42880 = &ggl::diffuseBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42890 = 0;
          unk_1ECE42898 = 0;
          qword_1ECE42888 = 0;
        }
        qword_1ECE3BAA8 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3BAB0 = ggl::crc32::compute<38ul>("DiffuseBuildingPointyRoofShaderVertex");
        if ((v98 & 1) == 0
        {
          ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x19F819965;
          qword_1ECE42F10 = (uint64_t)"DiffuseBuildingPointyRoofShader";
          unk_1ECE42F18 = 0;
          qword_1ECE42F20 = 0;
          unk_1ECE42F28 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42F30 = 3;
          unk_1ECE42F38 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42F40 = 0;
          unk_1ECE42F48 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE42F50 = 0;
          unk_1ECE42F58 = &ggl::diffuseBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42F68 = 0;
          unk_1ECE42F70 = 0;
          qword_1ECE42F60 = 0;
        }
        qword_1ECE3BAB8 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BAC0 = -1618896539;
        qword_1ECE3BAC8 = (uint64_t)ggl::diffuseBuildingPointyRoofShaderShaderConstants(void)::ref;
        unk_1ECE3BAD0 = 7;
        qword_1ECE3BAD8 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderShaderTextures(void)::ref;
        unk_1ECE3BAE0 = 0;
        qword_1ECE3BAE8 = (uint64_t)&ggl::diffuseBuildingPointyRoofShaderShaderSamplers(void)::ref;
        unk_1ECE3BAF0 = 0;
      }
      qword_1ECE31CC8 = (uint64_t)&ggl::DiffuseBuildingPointyRoofShader::typedReflection(void)::ref;
      if ((v93 & 1) == 0
      {
        ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE580068 = 0;
        qword_1EE580070 = (uint64_t)"";
        dword_1EE580078 = 0;
        qword_1EE580080 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE580088 = 2;
      }
      qword_1ECE31CD0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31CD8 = 1;
      qword_1ECE31CE0 = 0;
      unk_1ECE31CE8 = 0;
      qword_1ECE31CF0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31CF8 = 0;
      if ((v94 & 1) == 0
      {
        ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57FF18 = 0;
        qword_1EE57FF20 = (uint64_t)"skyfog";
        dword_1EE57FF28 = 3;
        qword_1EE57FF30 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57FF38 = xmmword_19FFB3720;
        qword_1EE57FF48 = 1;
        unk_1EE57FF50 = "view";
        dword_1EE57FF58 = 3;
        qword_1EE57FF60 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE57FF68 = vdupq_n_s64(2uLL);
        qword_1EE57FF78 = 2;
        unk_1EE57FF80 = "scale";
        dword_1EE57FF88 = 3;
        qword_1EE57FF90 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57FF98 = xmmword_19FFB3730;
        qword_1EE57FFA8 = 3;
        unk_1EE57FFB0 = "style";
        dword_1EE57FFB8 = 3;
        qword_1EE57FFC0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57FFC8 = xmmword_19FFB3740;
        qword_1EE57FFD8 = 4;
        unk_1EE57FFE0 = "gradient";
        dword_1EE57FFE8 = 3;
        qword_1EE57FFF0 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1EE57FFF8 = xmmword_19FFB3670;
        qword_1EE580008 = 5;
        unk_1EE580010 = "lightConfig";
        dword_1EE580018 = 3;
        qword_1EE580020 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE580028 = xmmword_19FFB3750;
        qword_1EE580038 = 6;
        unk_1EE580040 = "fade";
        dword_1EE580048 = 3;
        qword_1EE580050 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1EE580058 = 2;
      }
      qword_1ECE31D00 = (uint64_t)&ggl::DiffuseBuildingPointyRoof::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1ECE31D08 = 7;
      a4 = v89;
      a2 = v101;
      a3 = v102;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v105 = *(_OWORD *)a3;
  *(_OWORD *)&v105[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v103 = *a4;
  v104 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v103;
  *(_OWORD *)(a1 + 272) = v104;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v105;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v105[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BB310;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup::constantDataIsEnabled(ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

uint64_t ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup::textureIsEnabled(ggl::DiffuseBuildingPointyRoof::BuildingPipelineSetup *this)
{
  return 0;
}

void md::PassList::updateGraphState(float **this, md::FrameGraphBuilder *a2, uint64_t a3)
{
  md::FrameGraph *v5;
  float *v6;
  _QWORD *v7;
  uint64_t v8;
  md::FrameGraph *v9;
  float *v10;
  float *v11;
  float *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  float *v25;
  float *v26;
  unint64_t v27;
  float *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  md::FrameGraph *v37;
  md::FrameGraph *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  md::FrameGraphBuilder::build((md::FrameGraphBuilder *)&v37, a2, this[3]);
  v5 = v37;
  if (!v37)
  {
    *((_QWORD *)this[3] + 16) = a3;
    goto LABEL_12;
  }
  v6 = this[1];
  v38 = v37;
  if (!v6)
  {
    v37 = 0;
    this[1] = (float *)v5;
    goto LABEL_12;
  }
  v39[0] = &off_1E42D4690;
  v39[1] = &v38;
  v40 = v39;
  md::FrameGraph::visitPasses(v6, (uint64_t)v39);
  v7 = v40;
  if (v40 == v39)
  {
    v8 = 4;
    v7 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
  v9 = (md::FrameGraph *)this[1];
  v37 = 0;
  this[1] = (float *)v5;
  if (v9)
  {
    md::FrameGraph::~FrameGraph(v9);
    MEMORY[0x1A1AF4E00]();
  }
LABEL_12:
  v10 = this[3];
  v11 = (float *)*((_QWORD *)v10 + 2);
  if (!v11)
    return;
  do
  {
    v14 = (_QWORD *)*((_QWORD *)v11 + 8);
    v13 = (_QWORD *)*((_QWORD *)v11 + 9);
    if (v14 == v13)
      goto LABEL_14;
    while (*(_QWORD *)(*v14 + 8) == *((_QWORD *)v10 + 16))
    {
      if (++v14 == v13)
        goto LABEL_14;
    }
    if (v14 == v13)
    {
LABEL_14:
      v12 = *(float **)v11;
      goto LABEL_15;
    }
    v15 = v14 + 1;
    if (v14 + 1 == v13)
    {
      if (v14 == v13)
        goto LABEL_14;
    }
    else
    {
      do
      {
        v16 = *v15;
        if (*(_QWORD *)(*v15 + 8) == *((_QWORD *)v10 + 16))
        {
          *v15 = 0;
          v17 = (uint64_t *)*v14;
          *v14 = v16;
          if (v17)
          {
            if (*((_BYTE *)v17 + 40))
              *((_BYTE *)v17 + 40) = 0;
            if (*((_BYTE *)v17 + 16))
              *((_BYTE *)v17 + 16) = 0;
            v18 = *v17;
            *v17 = 0;
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            MEMORY[0x1A1AF4E00](v17, 0x1020C40BC9DCD72);
          }
          ++v14;
        }
        ++v15;
      }
      while (v15 != v13);
      v13 = (_QWORD *)*((_QWORD *)v11 + 9);
      if (v14 == v13)
        goto LABEL_14;
    }
    while (v13 != v14)
    {
      v20 = (uint64_t *)*--v13;
      v19 = v20;
      *v13 = 0;
      if (v20)
      {
        if (*((_BYTE *)v19 + 40))
          *((_BYTE *)v19 + 40) = 0;
        if (*((_BYTE *)v19 + 16))
          *((_BYTE *)v19 + 16) = 0;
        v21 = *v19;
        *v19 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        MEMORY[0x1A1AF4E00](v19, 0x1020C40BC9DCD72);
      }
    }
    *((_QWORD *)v11 + 9) = v14;
    v12 = *(float **)v11;
    if (*((_QWORD **)v11 + 8) == v14)
    {
      v22 = *(int8x8_t *)(v10 + 2);
      v23 = *((_QWORD *)v11 + 1);
      v24 = (uint8x8_t)vcnt_s8(v22);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        if (v23 >= *(_QWORD *)&v22)
          v23 %= *(_QWORD *)&v22;
      }
      else
      {
        v23 &= *(_QWORD *)&v22 - 1;
      }
      v25 = *(float **)(*(_QWORD *)v10 + 8 * v23);
      do
      {
        v26 = v25;
        v25 = *(float **)v25;
      }
      while (v25 != v11);
      if (v26 == v10 + 4)
        goto LABEL_92;
      v27 = *((_QWORD *)v26 + 1);
      if (v24.u32[0] > 1uLL)
      {
        if (v27 >= *(_QWORD *)&v22)
          v27 %= *(_QWORD *)&v22;
      }
      else
      {
        v27 &= *(_QWORD *)&v22 - 1;
      }
      v28 = *(float **)v11;
      if (v27 != v23)
      {
LABEL_92:
        if (v12)
        {
          v29 = *((_QWORD *)v12 + 1);
          if (v24.u32[0] > 1uLL)
          {
            if (v29 >= *(_QWORD *)&v22)
              v29 %= *(_QWORD *)&v22;
          }
          else
          {
            v29 &= *(_QWORD *)&v22 - 1;
          }
          v28 = *(float **)v11;
          if (v29 == v23)
            goto LABEL_67;
        }
        *(_QWORD *)(*(_QWORD *)v10 + 8 * v23) = 0;
        v28 = *(float **)v11;
      }
      if (!v28)
      {
LABEL_73:
        *(_QWORD *)v26 = v28;
        *(_QWORD *)v11 = 0;
        --*((_QWORD *)v10 + 3);
        v31 = (_QWORD *)*((_QWORD *)v11 + 8);
        if (v31)
        {
          v32 = (_QWORD *)*((_QWORD *)v11 + 9);
          v33 = (void *)*((_QWORD *)v11 + 8);
          if (v32 != v31)
          {
            do
            {
              v35 = (uint64_t *)*--v32;
              v34 = v35;
              *v32 = 0;
              if (v35)
              {
                if (*((_BYTE *)v34 + 40))
                  *((_BYTE *)v34 + 40) = 0;
                if (*((_BYTE *)v34 + 16))
                  *((_BYTE *)v34 + 16) = 0;
                v36 = *v34;
                *v34 = 0;
                if (v36)
                  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
                MEMORY[0x1A1AF4E00](v34, 0x1020C40BC9DCD72);
              }
            }
            while (v32 != v31);
            v33 = (void *)*((_QWORD *)v11 + 8);
          }
          *((_QWORD *)v11 + 9) = v31;
          operator delete(v33);
        }
        operator delete(v11);
        goto LABEL_15;
      }
LABEL_67:
      v30 = *((_QWORD *)v28 + 1);
      if (v24.u32[0] > 1uLL)
      {
        if (v30 >= *(_QWORD *)&v22)
          v30 %= *(_QWORD *)&v22;
      }
      else
      {
        v30 &= *(_QWORD *)&v22 - 1;
      }
      if (v30 != v23)
      {
        *(_QWORD *)(*(_QWORD *)v10 + 8 * v30) = v26;
        v28 = *(float **)v11;
      }
      goto LABEL_73;
    }
LABEL_15:
    v11 = v12;
  }
  while (v12);
  if (v37)
  {
    md::FrameGraph::~FrameGraph(v37);
    MEMORY[0x1A1AF4E00]();
  }
}

void md::FrameGraphBuilder::~FrameGraphBuilder(md::FrameGraphBuilder *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 17);
    v4 = (void *)*((_QWORD *)this + 16);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v2;
    operator delete(v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 13);
  if (v7)
  {
    do
    {
      v14 = (_QWORD *)*v7;
      v15 = v7[3];
      v7[3] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      operator delete(v7);
      v7 = v14;
    }
    while (v14);
  }
  v8 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
    operator delete(v8);
  v9 = (_QWORD *)*((_QWORD *)this + 8);
  if (v9)
  {
    do
    {
      v16 = (_QWORD *)*v9;
      v17 = (void *)v9[4];
      if (v17)
      {
        v9[5] = v17;
        operator delete(v17);
      }
      operator delete(v9);
      v9 = v16;
    }
    while (v16);
  }
  v10 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 3);
  if (v11)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 4);
    v13 = (void *)*((_QWORD *)this + 3);
    if (v12 != v11)
    {
      do
      {
        v19 = *--v12;
        v18 = v19;
        *v12 = 0;
        if (v19)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v18 + 72));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v18 + 48));
          MEMORY[0x1A1AF4E00](v18, 0x1070C4044CBF76DLL);
        }
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v11;
    operator delete(v13);
  }
  v20 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v21 = (_QWORD *)*((_QWORD *)this + 1);
    v22 = *(void **)this;
    if (v21 != v20)
    {
      do
      {
        v24 = *--v21;
        v23 = v24;
        *v21 = 0;
        if (v24)
        {
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v23 + 112));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v23 + 88));
          std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v23 + 64));
          if (*(char *)(v23 + 47) < 0)
            operator delete(*(void **)(v23 + 24));
          MEMORY[0x1A1AF4E00](v23, 0x1032C4041C7693DLL);
        }
      }
      while (v21 != v20);
      v22 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v20;
    operator delete(v22);
  }
}

md::FrameGraph **std::unique_ptr<md::FrameGraph>::~unique_ptr[abi:nn180100](md::FrameGraph **a1)
{
  md::FrameGraph *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::FrameGraph::~FrameGraph(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void std::__function::__func<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0,std::allocator<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0,std::allocator<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4690;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0,std::allocator<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4690;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0,std::allocator<md::PassList::transferItems(md::FrameGraph *,md::FrameGraph *)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  unint64_t v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 v52;
  void *v53;
  void **v54;
  void *v55;
  int64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void **v91;
  unint64_t v92;
  void **v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _OWORD *v117;
  __int128 v118;
  void *v119;
  void **v120;
  void *v121;
  int64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _OWORD *v131;
  __int128 v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  _OWORD *v138;

  v3 = **(_QWORD ***)(a1 + 8);
  v4 = v3[3];
  v5 = v3[4];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0;
    v8 = v6 >> 3;
    while (1)
    {
      v9 = *(unsigned __int8 **)(v4 + 8 * v7);
      if (*v9 == *a2)
      {
        v10 = *((_QWORD *)v9 + 1);
        v11 = v3[15];
        if (v10 < (v3[16] - v11) >> 3)
          break;
      }
      if (++v7 >= v8)
        return;
    }
    v12 = *(_QWORD *)(v11 + 8 * v10);
    if (v12)
    {
      v13 = *(_QWORD **)(a3 + 8);
      v14 = v13[13];
      v15 = v13[14];
      if (v15 != v14)
      {
        if (v15 - v14 < 0)
          abort();
        v134 = v13[16];
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, v15 - v14, 8);
        v17 = v16;
        v18 = 0;
        do
        {
          if (v16 + v18)
            *(_QWORD *)(v16 + v18) = *(_QWORD *)(v14 + v18);
          v18 += 8;
        }
        while (v14 + v18 != v15);
        v135 = v15 - v14;
        v19 = (uint64_t *)(v16 + v18);
        if (v16 + v18 == v16)
        {
LABEL_184:
          if (v17)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v134 + 40))(v134, v17, v135);
          return;
        }
        v20 = (uint64_t *)v16;
        v136 = v12;
        v137 = (uint64_t *)(v16 + v18);
LABEL_17:
        v22 = *v20;
        if (!*v20)
          goto LABEL_16;
        v23 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * *(unsigned __int8 *)(v22 + 16));
        if (!v23)
          goto LABEL_16;
        v138 = (_OWORD *)(v22 + 264);
        if (!*(_QWORD *)(v22 + 352))
          goto LABEL_85;
        v25 = *(void ***)(v23 + 320);
        v24 = *(_QWORD *)(v23 + 328);
        if ((void **)v24 == v25)
        {
          v29 = (_QWORD *)(v23 + 352);
          v24 = *(_QWORD *)(v23 + 320);
        }
        else
        {
          v26 = *(_QWORD *)(v23 + 344);
          v27 = &v25[v26 >> 7];
          v28 = (uint64_t)*v27 + 32 * (v26 & 0x7F);
          v29 = (_QWORD *)(v23 + 352);
          v30 = *(uint64_t *)((char *)v25 + (((*(_QWORD *)(v23 + 352) + v26) >> 4) & 0xFFFFFFFFFFFFFF8))
              + 32 * ((*(_QWORD *)(v23 + 352) + v26) & 0x7F);
          if (v28 != v30)
          {
            do
            {
              v31 = *(std::__shared_weak_count **)(v28 + 24);
              if (v31)
              {
                p_shared_owners = (unint64_t *)&v31->__shared_owners_;
                do
                  v33 = __ldaxr(p_shared_owners);
                while (__stlxr(v33 - 1, p_shared_owners));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              v28 += 32;
              if (v28 - (_QWORD)*v27 == 4096)
              {
                v34 = (uint64_t)v27[1];
                ++v27;
                v28 = v34;
              }
            }
            while (v28 != v30);
            v25 = *(void ***)(v23 + 320);
            v24 = *(_QWORD *)(v23 + 328);
          }
          v12 = v136;
        }
        *v29 = 0;
        v35 = v24 - (_QWORD)v25;
        if ((unint64_t)(v24 - (_QWORD)v25) >= 0x11)
        {
          do
          {
            operator delete(*v25);
            v24 = *(_QWORD *)(v23 + 328);
            v25 = (void **)(*(_QWORD *)(v23 + 320) + 8);
            *(_QWORD *)(v23 + 320) = v25;
            v35 = v24 - (_QWORD)v25;
          }
          while ((unint64_t)(v24 - (_QWORD)v25) > 0x10);
        }
        v36 = v35 >> 3;
        if (v36 == 1)
        {
          v37 = 64;
        }
        else
        {
          if (v36 != 2)
            goto LABEL_41;
          v37 = 128;
        }
        *(_QWORD *)(v23 + 344) = v37;
LABEL_41:
        v38 = *(_QWORD *)(v23 + 352);
        if (v38)
        {
          v39 = *(_QWORD *)(v23 + 344);
          if (v39 >= 0x80)
          {
            operator delete(*v25);
            v24 = *(_QWORD *)(v23 + 328);
            v25 = (void **)(*(_QWORD *)(v23 + 320) + 8);
            *(_QWORD *)(v23 + 320) = v25;
            v38 = *(_QWORD *)(v23 + 352);
            v39 = *(_QWORD *)(v23 + 344) - 128;
            *(_QWORD *)(v23 + 344) = v39;
          }
          v40 = 16 * (v24 - (_QWORD)v25) - 1;
          if ((void **)v24 == v25)
            v40 = 0;
          if (v40 - (v38 + v39) >= 0x80)
          {
            operator delete(*(void **)(v24 - 8));
            v25 = *(void ***)(v23 + 320);
            v24 = *(_QWORD *)(v23 + 328) - 8;
            *(_QWORD *)(v23 + 328) = v24;
          }
        }
        else
        {
          if ((void **)v24 != v25)
          {
            do
            {
              operator delete(*(void **)(v24 - 8));
              v41 = *(_QWORD *)(v23 + 320);
              v24 = *(_QWORD *)(v23 + 328) - 8;
              *(_QWORD *)(v23 + 328) = v24;
            }
            while (v24 != v41);
          }
          *(_QWORD *)(v23 + 344) = 0;
          v25 = (void **)v24;
        }
        v42 = *(void **)(v23 + 312);
        v43 = v24 - (_QWORD)v25;
        v44 = (v24 - (uint64_t)v25) >> 3;
        if (v44 >= (uint64_t)(*(_QWORD *)(v23 + 336) - (_QWORD)v42) >> 3)
        {
LABEL_66:
          if ((void **)v24 == v25)
          {
            v54 = v25;
          }
          else
          {
            v54 = (void **)(v24 + (((unint64_t)v25 - v24 + 7) & 0xFFFFFFFFFFFFFFF8));
            *(_QWORD *)(v23 + 328) = v54;
            v24 = (uint64_t)v54;
          }
          v55 = *(void **)(v23 + 312);
          v56 = (char *)v54 - (char *)v25;
          v57 = v54 - v25;
          if (v57 >= (uint64_t)(*(_QWORD *)(v23 + 336) - (_QWORD)v55) >> 3)
          {
LABEL_84:
            *(_OWORD *)(v23 + 312) = *(_OWORD *)(v22 + 312);
            *(_QWORD *)(v23 + 328) = *(_QWORD *)(v22 + 328);
            v68 = *(_QWORD *)(v22 + 344);
            *(_QWORD *)(v23 + 336) = *(_QWORD *)(v22 + 336);
            *(_OWORD *)(v22 + 312) = 0u;
            *(_OWORD *)(v22 + 328) = 0u;
            *(_QWORD *)(v23 + 344) = v68;
            *(_QWORD *)(v23 + 352) = *(_QWORD *)(v22 + 352);
            *(_QWORD *)(v22 + 344) = 0;
            *(_QWORD *)(v22 + 352) = 0;
            v19 = v137;
LABEL_85:
            v69 = *(_QWORD *)(v22 + 168);
            v70 = *(_QWORD *)(v22 + 176);
            if (v70 != v69)
            {
              v71 = *(_QWORD *)(v23 + 168);
              if (v71)
              {
                *(_QWORD *)(v23 + 176) = v71;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 192) + 40))(*(_QWORD *)(v23 + 192), v71, *(_QWORD *)(v23 + 184) - v71);
                *(_QWORD *)(v23 + 168) = 0;
                *(_QWORD *)(v23 + 176) = 0;
                *(_QWORD *)(v23 + 184) = 0;
                v69 = *(_QWORD *)(v22 + 168);
                v70 = *(_QWORD *)(v22 + 176);
              }
              *(_QWORD *)(v23 + 168) = v69;
              *(_QWORD *)(v23 + 176) = v70;
              *(_QWORD *)(v23 + 184) = *(_QWORD *)(v22 + 184);
              *(_QWORD *)(v22 + 168) = 0;
              *(_QWORD *)(v22 + 176) = 0;
              *(_QWORD *)(v22 + 184) = 0;
            }
            v72 = *(_QWORD *)(v22 + 200);
            v73 = *(_QWORD *)(v22 + 208);
            if (v73 == v72)
              goto LABEL_106;
            v75 = (uint64_t *)(v23 + 200);
            v74 = *(_QWORD **)(v23 + 200);
            if (!v74)
              goto LABEL_105;
            v76 = *(_QWORD **)(v23 + 208);
            v77 = *(_QWORD *)(v23 + 200);
            if (v76 == v74)
              goto LABEL_104;
            v78 = v76 - 4;
            while (1)
            {
              v80 = (_QWORD *)v78[3];
              if (v78 == v80)
                break;
              if (v80)
              {
                v81 = 5;
LABEL_98:
                (*(void (**)(void))(*v80 + 8 * v81))();
              }
              if (*((_BYTE *)v78 - 28))
                *((_BYTE *)v78 - 28) = 0;
              if (*((_BYTE *)v78 - 32))
                *((_BYTE *)v78 - 32) = 0;
              v79 = v78 - 6;
              v78 -= 10;
              if (v79 == v74)
              {
                v77 = *v75;
LABEL_104:
                *(_QWORD *)(v23 + 208) = v74;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 224) + 40))(*(_QWORD *)(v23 + 224), v77, *(_QWORD *)(v23 + 216) - v77);
                *v75 = 0;
                *(_QWORD *)(v23 + 208) = 0;
                *(_QWORD *)(v23 + 216) = 0;
                v72 = *(_QWORD *)(v22 + 200);
                v73 = *(_QWORD *)(v22 + 208);
LABEL_105:
                *(_QWORD *)(v23 + 200) = v72;
                *(_QWORD *)(v23 + 208) = v73;
                *(_QWORD *)(v23 + 216) = *(_QWORD *)(v22 + 216);
                *(_QWORD *)(v22 + 200) = 0;
                *(_QWORD *)(v22 + 208) = 0;
                *(_QWORD *)(v22 + 216) = 0;
LABEL_106:
                v82 = *(_QWORD *)(v22 + 232);
                v83 = *(_QWORD *)(v22 + 240);
                if (v83 == v82)
                  goto LABEL_119;
                v85 = (uint64_t *)(v23 + 232);
                v84 = *(_QWORD *)(v23 + 232);
                if (!v84)
                  goto LABEL_118;
                v86 = *(_QWORD *)(v23 + 240);
                v87 = *(_QWORD *)(v23 + 232);
                if (v86 == v84)
                {
LABEL_117:
                  *(_QWORD *)(v23 + 240) = v84;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 256) + 40))(*(_QWORD *)(v23 + 256), v87, *(_QWORD *)(v23 + 248) - v87);
                  *v85 = 0;
                  *(_QWORD *)(v23 + 240) = 0;
                  *(_QWORD *)(v23 + 248) = 0;
                  v82 = *(_QWORD *)(v22 + 232);
                  v83 = *(_QWORD *)(v22 + 240);
LABEL_118:
                  *(_QWORD *)(v23 + 232) = v82;
                  *(_QWORD *)(v23 + 240) = v83;
                  *(_QWORD *)(v23 + 248) = *(_QWORD *)(v22 + 248);
                  *(_QWORD *)(v22 + 232) = 0;
                  *(_QWORD *)(v22 + 240) = 0;
                  *(_QWORD *)(v22 + 248) = 0;
LABEL_119:
                  if (!*(_QWORD *)(v22 + 304))
                    goto LABEL_16;
                  v91 = *(void ***)(v23 + 272);
                  v90 = *(_QWORD *)(v23 + 280);
                  if ((void **)v90 == v91)
                  {
                    v95 = (_QWORD *)(v23 + 304);
                    v90 = *(_QWORD *)(v23 + 272);
                  }
                  else
                  {
                    v92 = *(_QWORD *)(v23 + 296);
                    v93 = &v91[v92 >> 8];
                    v94 = (uint64_t)*v93 + 16 * v92;
                    v95 = (_QWORD *)(v23 + 304);
                    v96 = *(uint64_t *)((char *)v91 + (((*(_QWORD *)(v23 + 304) + v92) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (*(_BYTE *)(v23 + 304) + v92);
                    if (v94 != v96)
                    {
                      do
                      {
                        v97 = *(std::__shared_weak_count **)(v94 + 8);
                        if (v97)
                        {
                          v98 = (unint64_t *)&v97->__shared_owners_;
                          do
                            v99 = __ldaxr(v98);
                          while (__stlxr(v99 - 1, v98));
                          if (!v99)
                          {
                            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                            std::__shared_weak_count::__release_weak(v97);
                          }
                        }
                        v94 += 16;
                        if (v94 - (_QWORD)*v93 == 4096)
                        {
                          v100 = (uint64_t)v93[1];
                          ++v93;
                          v94 = v100;
                        }
                      }
                      while (v94 != v96);
                      v91 = *(void ***)(v23 + 272);
                      v90 = *(_QWORD *)(v23 + 280);
                    }
                    v12 = v136;
                  }
                  *v95 = 0;
                  v101 = v90 - (_QWORD)v91;
                  if ((unint64_t)(v90 - (_QWORD)v91) >= 0x11)
                  {
                    do
                    {
                      operator delete(*v91);
                      v90 = *(_QWORD *)(v23 + 280);
                      v91 = (void **)(*(_QWORD *)(v23 + 272) + 8);
                      *(_QWORD *)(v23 + 272) = v91;
                      v101 = v90 - (_QWORD)v91;
                    }
                    while ((unint64_t)(v90 - (_QWORD)v91) > 0x10);
                  }
                  v102 = v101 >> 3;
                  if (v102 == 1)
                  {
                    v103 = 128;
LABEL_140:
                    *(_QWORD *)(v23 + 296) = v103;
                  }
                  else if (v102 == 2)
                  {
                    v103 = 256;
                    goto LABEL_140;
                  }
                  v104 = *(_QWORD *)(v23 + 304);
                  if (v104)
                  {
                    v105 = *(_QWORD *)(v23 + 296);
                    if (v105 >= 0x100)
                    {
                      operator delete(*v91);
                      v90 = *(_QWORD *)(v23 + 280);
                      v91 = (void **)(*(_QWORD *)(v23 + 272) + 8);
                      *(_QWORD *)(v23 + 272) = v91;
                      v104 = *(_QWORD *)(v23 + 304);
                      v105 = *(_QWORD *)(v23 + 296) - 256;
                      *(_QWORD *)(v23 + 296) = v105;
                    }
                    v106 = 32 * (v90 - (_QWORD)v91) - 1;
                    if ((void **)v90 == v91)
                      v106 = 0;
                    if (v106 - (v104 + v105) >= 0x100)
                    {
                      operator delete(*(void **)(v90 - 8));
                      v91 = *(void ***)(v23 + 272);
                      v90 = *(_QWORD *)(v23 + 280) - 8;
                      *(_QWORD *)(v23 + 280) = v90;
                    }
                  }
                  else
                  {
                    if ((void **)v90 != v91)
                    {
                      do
                      {
                        operator delete(*(void **)(v90 - 8));
                        v107 = *(_QWORD *)(v23 + 272);
                        v90 = *(_QWORD *)(v23 + 280) - 8;
                        *(_QWORD *)(v23 + 280) = v90;
                      }
                      while (v90 != v107);
                    }
                    *(_QWORD *)(v23 + 296) = 0;
                    v91 = (void **)v90;
                  }
                  v108 = *(void **)(v23 + 264);
                  v109 = v90 - (_QWORD)v91;
                  v110 = (v90 - (uint64_t)v91) >> 3;
                  if (v110 >= (uint64_t)(*(_QWORD *)(v23 + 288) - (_QWORD)v108) >> 3)
                    goto LABEL_166;
                  if ((void **)v90 == v91)
                  {
                    v111 = 0;
                    v90 = 8 * v110;
                    goto LABEL_164;
                  }
                  if (v109 < 0)
                    goto LABEL_187;
                  v111 = operator new(v90 - (_QWORD)v91);
                  v90 = (uint64_t)&v111[v110];
                  if ((unint64_t)(v109 - 8) < 0x18)
                  {
                    v115 = v111;
                    goto LABEL_163;
                  }
                  if ((unint64_t)((char *)v111 - (char *)v91) < 0x20)
                  {
                    v115 = v111;
                    goto LABEL_163;
                  }
                  v112 = 0;
                  v113 = ((unint64_t)(v109 - 8) >> 3) + 1;
                  v114 = v113 & 0x3FFFFFFFFFFFFFFCLL;
                  v115 = &v111[v114];
                  v116 = v113 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v117 = &v111[v112];
                    v118 = *(_OWORD *)&v91[v112 + 2];
                    *v117 = *(_OWORD *)&v91[v112];
                    v117[1] = v118;
                    v112 += 4;
                    v116 -= 4;
                  }
                  while (v116);
                  if (v113 != (v113 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v91 = (void **)((char *)v91 + v114 * 8);
                    do
                    {
LABEL_163:
                      v119 = *v91++;
                      *v115++ = v119;
                    }
                    while (v115 != (_QWORD *)v90);
                  }
LABEL_164:
                  *(_QWORD *)(v23 + 264) = v111;
                  *(_QWORD *)(v23 + 272) = v111;
                  v91 = (void **)v111;
                  *(_QWORD *)(v23 + 280) = v90;
                  *(_QWORD *)(v23 + 288) = v90;
                  if (v108)
                  {
                    operator delete(v108);
                    v91 = *(void ***)(v23 + 272);
                    v90 = *(_QWORD *)(v23 + 280);
                  }
LABEL_166:
                  if ((void **)v90 == v91)
                  {
                    v120 = v91;
                  }
                  else
                  {
                    v120 = (void **)(v90 + (((unint64_t)v91 - v90 + 7) & 0xFFFFFFFFFFFFFFF8));
                    *(_QWORD *)(v23 + 280) = v120;
                    v90 = (uint64_t)v120;
                  }
                  v121 = *(void **)(v23 + 264);
                  v122 = (char *)v120 - (char *)v91;
                  v123 = v120 - v91;
                  if (v123 >= (uint64_t)(*(_QWORD *)(v23 + 288) - (_QWORD)v121) >> 3)
                    goto LABEL_15;
                  if ((void **)v90 == v91)
                  {
                    v124 = 0;
                    v125 = 8 * v123;
                    goto LABEL_182;
                  }
                  if (v122 < 0)
LABEL_187:
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v124 = operator new((char *)v120 - (char *)v91);
                  v125 = (uint64_t)&v124[v123];
                  if ((unint64_t)(v122 - 8) < 0x18)
                  {
                    v129 = v124;
                    goto LABEL_181;
                  }
                  if ((unint64_t)((char *)v124 - (char *)v91) < 0x20)
                  {
                    v129 = v124;
                    goto LABEL_181;
                  }
                  v126 = 0;
                  v127 = ((unint64_t)(v122 - 8) >> 3) + 1;
                  v128 = v127 & 0x3FFFFFFFFFFFFFFCLL;
                  v129 = &v124[v128];
                  v130 = v127 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v131 = &v124[v126];
                    v132 = *(_OWORD *)&v91[v126 + 2];
                    *v131 = *(_OWORD *)&v91[v126];
                    v131[1] = v132;
                    v126 += 4;
                    v130 -= 4;
                  }
                  while (v130);
                  if (v127 != (v127 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v91 = (void **)((char *)v91 + v128 * 8);
                    do
                    {
LABEL_181:
                      v133 = *v91++;
                      *v129++ = v133;
                    }
                    while (v129 != (_QWORD *)v125);
                  }
LABEL_182:
                  *(_QWORD *)(v23 + 264) = v124;
                  *(_QWORD *)(v23 + 272) = v124;
                  *(_QWORD *)(v23 + 280) = v125;
                  *(_QWORD *)(v23 + 288) = v125;
                  if (v121)
                    operator delete(v121);
LABEL_15:
                  *(_OWORD *)(v23 + 264) = *v138;
                  *(_QWORD *)(v23 + 280) = *(_QWORD *)(v22 + 280);
                  v21 = *(_QWORD *)(v22 + 296);
                  *(_QWORD *)(v23 + 288) = *(_QWORD *)(v22 + 288);
                  *v138 = 0u;
                  *(_OWORD *)(v22 + 280) = 0u;
                  *(_QWORD *)(v23 + 296) = v21;
                  *(_QWORD *)(v23 + 304) = *(_QWORD *)(v22 + 304);
                  *(_QWORD *)(v22 + 296) = 0;
                  *(_QWORD *)(v22 + 304) = 0;
                  v19 = v137;
LABEL_16:
                  if (++v20 == v19)
                    goto LABEL_184;
                  goto LABEL_17;
                }
                while (2)
                {
                  v88 = *(_QWORD **)(v86 - 8);
                  if ((_QWORD *)(v86 - 32) != v88)
                  {
                    if (v88)
                    {
                      v89 = 5;
LABEL_111:
                      (*(void (**)(void))(*v88 + 8 * v89))();
                    }
                    v86 -= 64;
                    if (v86 == v84)
                    {
                      v87 = *v85;
                      goto LABEL_117;
                    }
                    continue;
                  }
                  break;
                }
                v88 = (_QWORD *)(v86 - 32);
                v89 = 4;
                goto LABEL_111;
              }
            }
            v80 = v78;
            v81 = 4;
            goto LABEL_98;
          }
          if ((void **)v24 == v25)
          {
            v58 = 0;
            v59 = 8 * v57;
            goto LABEL_82;
          }
          if (v56 < 0)
            goto LABEL_187;
          v58 = operator new((char *)v54 - (char *)v25);
          v59 = (uint64_t)&v58[v57];
          if ((unint64_t)(v56 - 8) < 0x18)
          {
            v63 = v58;
          }
          else if ((unint64_t)((char *)v58 - (char *)v25) < 0x20)
          {
            v63 = v58;
          }
          else
          {
            v60 = 0;
            v61 = ((unint64_t)(v56 - 8) >> 3) + 1;
            v62 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            v63 = &v58[v62];
            v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v65 = &v58[v60];
              v66 = *(_OWORD *)&v25[v60 + 2];
              *v65 = *(_OWORD *)&v25[v60];
              v65[1] = v66;
              v60 += 4;
              v64 -= 4;
            }
            while (v64);
            if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_82:
              *(_QWORD *)(v23 + 312) = v58;
              *(_QWORD *)(v23 + 320) = v58;
              *(_QWORD *)(v23 + 328) = v59;
              *(_QWORD *)(v23 + 336) = v59;
              if (v55)
                operator delete(v55);
              goto LABEL_84;
            }
            v25 = (void **)((char *)v25 + v62 * 8);
          }
          do
          {
            v67 = *v25++;
            *v63++ = v67;
          }
          while (v63 != (_QWORD *)v59);
          goto LABEL_82;
        }
        if ((void **)v24 == v25)
        {
          v45 = 0;
          v24 = 8 * v44;
          goto LABEL_64;
        }
        if (v43 < 0)
          goto LABEL_187;
        v45 = operator new(v24 - (_QWORD)v25);
        v24 = (uint64_t)&v45[v44];
        if ((unint64_t)(v43 - 8) < 0x18)
        {
          v49 = v45;
        }
        else if ((unint64_t)((char *)v45 - (char *)v25) < 0x20)
        {
          v49 = v45;
        }
        else
        {
          v46 = 0;
          v47 = ((unint64_t)(v43 - 8) >> 3) + 1;
          v48 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          v49 = &v45[v48];
          v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = &v45[v46];
            v52 = *(_OWORD *)&v25[v46 + 2];
            *v51 = *(_OWORD *)&v25[v46];
            v51[1] = v52;
            v46 += 4;
            v50 -= 4;
          }
          while (v50);
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_64:
            *(_QWORD *)(v23 + 312) = v45;
            *(_QWORD *)(v23 + 320) = v45;
            v25 = (void **)v45;
            *(_QWORD *)(v23 + 328) = v24;
            *(_QWORD *)(v23 + 336) = v24;
            if (v42)
            {
              operator delete(v42);
              v25 = *(void ***)(v23 + 320);
              v24 = *(_QWORD *)(v23 + 328);
            }
            goto LABEL_66;
          }
          v25 = (void **)((char *)v25 + v48 * 8);
        }
        do
        {
          v53 = *v25++;
          *v49++ = v53;
        }
        while (v49 != (_QWORD *)v24);
        goto LABEL_64;
      }
    }
  }
}

uint64_t md::PassList::renderQueueForId(md::PassList *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  v4 = v3 - v2;
  if (v3 == v2)
    return 0;
  v5 = 0;
  v6 = v4 >> 3;
  while (1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8 * v5);
    if (*v7 == a2)
    {
      v8 = *((_QWORD *)v7 + 1);
      v9 = *((_QWORD *)this + 15);
      if (v8 < (*((_QWORD *)this + 16) - v9) >> 3)
        break;
    }
    if (++v5 >= v6)
      return 0;
  }
  return *(_QWORD *)(v9 + 8 * v8);
}

uint64_t md::PassList::commandBufferForId(_QWORD *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = v4 - v3;
  if (v4 == v3)
    return 0;
  v6 = 0;
  v7 = v5 >> 3;
  while (1)
  {
    v8 = *(unsigned __int8 **)(v3 + 8 * v6);
    if (*v8 == a2)
    {
      v9 = *((_QWORD *)v8 + 1);
      v10 = a1[15];
      if (v9 < (a1[16] - v10) >> 3)
        break;
    }
    if (++v6 >= v7)
      return 0;
  }
  v11 = *(_QWORD *)(v10 + 8 * v9);
  if (!v11)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * a3);
}

void std::__function::__func<md::PassList::rootRenderQueue(void)::$_0,std::allocator<md::PassList::rootRenderQueue(void)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PassList::rootRenderQueue(void)::$_0,std::allocator<md::PassList::rootRenderQueue(void)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D46D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::PassList::rootRenderQueue(void)::$_0,std::allocator<md::PassList::rootRenderQueue(void)::$_0>,void ()(md::FrameGraphPass const&,md::RenderQueueBase &,ggl::RenderTarget *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D46D8;
  a2[1] = v2;
  return result;
}

void sub_19FC81400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL27GEOGetVectorKitVKMapViewLogv_block_invoke_28694()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKMapView");
  v1 = (void *)GEOGetVectorKitVKMapViewLog(void)::log;
  GEOGetVectorKitVKMapViewLog(void)::log = (uint64_t)v0;

}

void md::TrafficSegmentsAlongRoute::addSegmentAt(md::TrafficSegmentsAlongRoute *this, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;

  v7 = (unint64_t *)*((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = *(unint64_t **)this;
    v11 = (uint64_t)v7 - *(_QWORD *)this;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      abort();
    v14 = v6 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (unint64_t *)&v16[8 * v12];
    *v17 = a2 | (unint64_t)(a3 << 32);
    v9 = v17 + 1;
    if (v7 == v10)
    {
      v10 = v7;
    }
    else
    {
      v18 = (char *)v7 - (char *)v10 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)((char *)v7 - v16 - v11) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v8 = &v7[-(v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v16[8 * v12 - 16];
      v21 = (__int128 *)(v7 - 2);
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      v17 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v24 = *--v8;
          *--v17 = v24;
        }
        while (v8 != v10);
        v10 = *(unint64_t **)this;
      }
    }
    *(_QWORD *)this = v17;
    *((_QWORD *)this + 1) = v9;
    *((_QWORD *)this + 2) = &v16[8 * v15];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v7 = a2 | (unint64_t)(a3 << 32);
    v9 = v7 + 1;
  }
  *((_QWORD *)this + 1) = v9;
}

void sub_19FC81750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void generateSpecularRenderItemsForLandmarkGroup(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, __int32 *a8, float a9, float a10, float a11, float a12, float a13, char a14, unsigned __int8 a15, char a16, char a17, uint64_t a18)
{
  uint64_t v24;
  uint64_t v25;
  uint16x4_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  int8x8_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  unsigned int v49;
  uint64_t v50;
  float *v51;
  float v52;
  _BOOL4 v53;
  unsigned int v55;
  float v56;
  _BOOL4 v57;
  unsigned int v59;
  float v60;
  uint64_t v61;
  float *v62;
  float v63;
  BOOL v64;
  unsigned int v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float v70;
  BOOL v71;
  unsigned int v72;
  float v73;
  float v74;
  uint64_t v75;
  float *v76;
  float v77;
  unsigned int v78;
  float v79;
  uint64_t v80;
  float *v81;
  float v82;
  unsigned int v83;
  float v84;
  int v85;
  int8x16_t v86;
  float32x2_t v87;
  float32x2_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  __int128 *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  __int128 *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  __int128 *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  __int128 *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  float32x4_t v184;
  float32x4_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  float32x4_t v200;
  _QWORD *v201;
  unint64_t v202;
  float32x2_t *v203;
  _QWORD *v204;
  unint64_t v205;
  float *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  float32x4_t v240;
  float32x4_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  float32x4_t v256;
  _QWORD *v257;
  unint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  unint64_t v261;
  float *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t *v281;
  _QWORD *v282;
  _QWORD *v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  __n128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char **v291;
  char *v292;
  _QWORD *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  _OWORD *v309;
  __int128 *v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  float32x2_t v316;
  float32x2_t v318;
  _QWORD *v319;
  float32x4_t v320;
  int v321;
  uint64_t *v322;
  float32x4_t v326;
  _QWORD *v327;
  uint64_t v329;
  uint64_t v331;
  uint16x4_t v333[2];
  uint16x4_t v334;
  std::__shared_weak_count *v335;
  _QWORD v336[2];
  __int8 v337;
  _BYTE v338[9];

  v24 = *a2 + 72;
  v25 = 56;
  if (a17 == 1)
    v25 = 72;
  else
    v24 = *a2 + 56;
  v26 = *(uint16x4_t *)(*a2 + v25);
  v27 = *(std::__shared_weak_count **)(v24 + 8);
  v333[0] = v26;
  v333[1] = (uint16x4_t)v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v335 = v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  else
  {
    v335 = 0;
  }
  v336[0] = 0;
  v336[1] = 0;
  v334 = v26;
  v337 = 0;
  if (v26)
    v26.i8[0] = (*(uint64_t (**)(uint16x4_t, _QWORD *))(**(_QWORD **)&v26 + 48))(v26, v336);
  v337 = v26.i8[0];
  if (v27)
  {
    v31 = (unint64_t *)&v27->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v33 = *(_QWORD **)(a6 + 8);
  v34 = (int8x8_t)v33[1];
  if (!*(_QWORD *)&v34)
    goto LABEL_42;
  v35 = (uint8x8_t)vcnt_s8(v34);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    v36 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v34 <= 0x41E8D6E445F4145uLL)
      v36 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v34;
  }
  else
  {
    v36 = (*(_QWORD *)&v34 - 1) & 0x41E8D6E445F4145;
  }
  v37 = *(_QWORD **)(*v33 + 8 * v36);
  if (!v37)
    goto LABEL_42;
  v38 = (_QWORD *)*v37;
  if (!v38)
    goto LABEL_42;
  if (v35.u32[0] < 2uLL)
  {
    v39 = *(_QWORD *)&v34 - 1;
    while (1)
    {
      v41 = v38[1];
      if (v41 == 0x41E8D6E445F4145)
      {
        if (v38[2] == 0x41E8D6E445F4145)
          goto LABEL_39;
      }
      else if ((v41 & v39) != v36)
      {
        goto LABEL_42;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v40 = v38[1];
    if (v40 == 0x41E8D6E445F4145)
      break;
    if (v40 >= *(_QWORD *)&v34)
      v40 %= *(_QWORD *)&v34;
    if (v40 != v36)
      goto LABEL_42;
LABEL_28:
    v38 = (_QWORD *)*v38;
    if (!v38)
      goto LABEL_42;
  }
  if (v38[2] != 0x41E8D6E445F4145)
    goto LABEL_28;
LABEL_39:
  v42 = v38[5];
  if (*(_QWORD *)(v42 + 8) != 0x41E8D6E445F4145)
  {
LABEL_42:
    v322 = 0;
    if (v337)
      goto LABEL_43;
LABEL_41:
    v43 = 0uLL;
    v44 = 0.0;
    v45 = 1.0;
    v46 = 7.875;
    v47 = 0.065;
    v48 = 0uLL;
    goto LABEL_107;
  }
  v322 = *(uint64_t **)(v42 + 32);
  if (!v337)
    goto LABEL_41;
LABEL_43:
  if ((int)a12 >= 0x17)
    v49 = 23;
  else
    v49 = (int)a12;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v333, *(_QWORD *)(*(_QWORD *)&v334 + 24), 0xA2u, v49, 2u, 0);
  v326 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v333[0])), (float32x4_t)vdupq_n_s32(0x37800080u));
  v50 = *(_QWORD *)(*(_QWORD *)&v334 + 24);
  v51 = *(float **)v50;
  if (*(_QWORD *)v50)
  {
    v52 = *v51;
    v53 = *v51 == 1.0;
    if (*(_BYTE *)(v50 + 10))
    {
      if (v52 != 0.0 && v52 != 1.0)
      {
LABEL_56:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v334 + 24), 0x12Fu, v49, 0) & 1) == 0)
        {
          v55 = 1;
          goto LABEL_58;
        }
        goto LABEL_59;
      }
    }
  }
  else
  {
    v53 = 0;
  }
  v55 = *(unsigned __int8 *)(v50 + v53 + 11);
  if (v55 == 2)
    goto LABEL_56;
LABEL_58:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v50, 0x12Fu, v49, v55))
  {
    v320 = v326;
    if (v51)
      goto LABEL_60;
    goto LABEL_68;
  }
LABEL_59:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v333, v50, 0x12Fu, v49, 2u, 0);
  v320 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v333[0])), (float32x4_t)vdupq_n_s32(0x37800080u));
  v50 = *(_QWORD *)(*(_QWORD *)&v334 + 24);
  v51 = *(float **)v50;
  if (!*(_QWORD *)v50)
  {
LABEL_68:
    v57 = 0;
    goto LABEL_69;
  }
LABEL_60:
  v56 = *v51;
  v57 = *v51 == 1.0;
  if (*(_BYTE *)(v50 + 10))
  {
    if (v56 != 0.0 && v56 != 1.0)
    {
LABEL_70:
      v333[0].i8[0] = 1;
      v338[0] = 1;
      v60 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v50, 0x118u, v49, 0, v333);
      v44 = v60
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v50, 0x118u, v49, 1u, v338)- v60)* v56);
      goto LABEL_72;
    }
  }
LABEL_69:
  v59 = *(unsigned __int8 *)(v50 + v57 + 11);
  v56 = 0.0;
  if (v59 == 2)
    goto LABEL_70;
  v44 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v50, 0x118u, v49, v59, 0);
LABEL_72:
  v61 = *(_QWORD *)(*(_QWORD *)&v334 + 24);
  v62 = *(float **)v61;
  if (*(_QWORD *)v61
    && (v63 = *v62, LODWORD(v62) = *v62 == 1.0, *(_BYTE *)(v61 + 10))
    && (v63 != 0.0 ? (v64 = v63 == 1.0) : (v64 = 1), !v64)
    || (v65 = *(unsigned __int8 *)(v61 + v62 + 11), v63 = 0.0, v65 == 2))
  {
    v333[0].i8[0] = 1;
    v338[0] = 1;
    v66 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v61, 0x12Bu, v49, 0, v333);
    v67 = v66
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v61, 0x12Bu, v49, 1u, v338)- v66)* v63);
  }
  else
  {
    v67 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v334 + 24), 0x12Bu, v49, v65, 0);
  }
  v68 = *(_QWORD *)(*(_QWORD *)&v334 + 24);
  v69 = *(float **)v68;
  if (*(_QWORD *)v68
    && (v70 = *v69, LODWORD(v69) = *v69 == 1.0, *(_BYTE *)(v68 + 10))
    && (v70 != 0.0 ? (v71 = v70 == 1.0) : (v71 = 1), !v71)
    || (v72 = *(unsigned __int8 *)(v68 + v69 + 11), v70 = 0.0, v72 == 2))
  {
    v333[0].i8[0] = 1;
    v338[0] = 1;
    v73 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v68, 0x137u, v49, 0, v333);
    v74 = v73
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v68, 0x137u, v49, 1u, v338)- v73)* v70);
  }
  else
  {
    v74 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v334 + 24), 0x137u, v49, v72, 0);
  }
  v75 = *(_QWORD *)(*(_QWORD *)&v334 + 24);
  v76 = *(float **)v75;
  if (*(_QWORD *)v75 && (v77 = *v76, LODWORD(v76) = *v76 == 1.0, *(_BYTE *)(v75 + 10)) && v77 != 0.0 && v77 != 1.0
    || (v78 = *(unsigned __int8 *)(v75 + v76 + 11), v77 = 0.0, v78 == 2))
  {
    v333[0].i8[0] = 1;
    v338[0] = 1;
    v79 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0x14Au, v49, 0, v333);
    v47 = v79
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v75, 0x14Au, v49, 1u, v338)- v79)* v77);
  }
  else
  {
    v47 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v334 + 24), 0x14Au, v49, v78, 0);
  }
  v45 = v67 + (float)((float)(v74 - v67) * a10);
  v80 = *(_QWORD *)(*(_QWORD *)&v334 + 24);
  v81 = *(float **)v80;
  if (*(_QWORD *)v80 && (v82 = *v81, LODWORD(v81) = *v81 == 1.0, *(_BYTE *)(v80 + 10)) && v82 != 0.0 && v82 != 1.0
    || (v83 = *(unsigned __int8 *)(v80 + v81 + 11), v82 = 0.0, v83 == 2))
  {
    v333[0].i8[0] = 1;
    v338[0] = 1;
    v84 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v80, 0x14Bu, v49, 0, v333);
    v46 = v84
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v80, 0x14Bu, v49, 1u, v338)- v84)* v82);
  }
  else
  {
    v46 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v334 + 24), 0x14Bu, v49, v83, 0);
  }
  v48 = v326;
  v43 = v320;
LABEL_107:
  v85 = a15;
  v86 = (int8x16_t)vsubq_f32(v43, v48);
  v87.f32[0] = a13;
  v87.f32[1] = a13 * a9;
  v88 = vmul_f32(vmla_n_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL), a10), v87);
  v318 = v88;
  if (v88.f32[1] <= 0.999)
    v85 = 1;
  v321 = v85;
  v89 = *(_QWORD **)(*a2 + 32);
  v319 = *(_QWORD **)(*a2 + 40);
  if (v89 == v319)
  {
LABEL_366:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v334);
    return;
  }
  v90 = 0;
  v91 = 0;
  *(float32x2_t *)&v92 = vmul_n_f32(vmla_n_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v86.i8, a10), a13);
  v93 = fmaxf(a11, 0.1);
  v94 = fmaxf(a10, 0.1);
  v95 = 1.0 - v45;
  if (v44 >= 0.0001)
    v96 = 1.0;
  else
    v96 = 0.0;
  if (v44 < 0.0001)
    v44 = 1.0;
  v97 = v47 * 40075017.0 / (v46 * (double)(unint64_t)(1 << a14));
  v98 = 1.0 - v47;
  v316 = (float32x2_t)v92;
  *((float32x2_t *)&v92 + 1) = v88;
  v315 = v92;
  while (1)
  {
    if ((a16 & 1) != 0)
    {
      v99 = *(_QWORD *)(a1 + 40);
      v100 = *(_QWORD *)(v99 + 8);
      if (v100 == *(_QWORD *)v99)
      {
        v117 = *(_QWORD *)(v99 + 88);
        if (!v117)
          break;
        v331 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 48))(v117);
        v102 = *(uint64_t **)(v99 + 40);
        v118 = *(_QWORD *)(v99 + 48);
        if ((unint64_t)v102 < v118)
        {
          if (v102)
            *v102 = v331;
          goto LABEL_137;
        }
        v131 = *(_QWORD *)(v99 + 32);
        v132 = ((uint64_t)v102 - v131) >> 3;
        v133 = v132 + 1;
        if ((unint64_t)(v132 + 1) >> 61)
          goto LABEL_370;
        v134 = v118 - v131;
        if (v134 >> 2 > v133)
          v133 = v134 >> 2;
        if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
          v135 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v135 = v133;
        if (v135)
        {
          v136 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v99 + 56) + 16))(*(_QWORD *)(v99 + 56), 8 * v135, 8);
          v129 = (uint64_t *)(v136 + 8 * v132);
          v130 = v136 + 8 * v135;
          if (v136)
            *v129 = v331;
        }
        else
        {
          v130 = 0;
          v129 = (uint64_t *)(8 * v132);
        }
        v163 = *(_QWORD *)(v99 + 32);
        v153 = *(_QWORD *)(v99 + 40);
        v164 = v153 - v163;
        if (v153 != v163)
        {
          v165 = v164 - 8;
          if ((unint64_t)(v164 - 8) < 0x38)
          {
            v157 = v129;
          }
          else
          {
            v157 = v129;
            if ((unint64_t)(v153 - (_QWORD)v129) >= 0x20)
            {
              v166 = (v165 >> 3) + 1;
              v167 = v129 - 2;
              v168 = (__int128 *)(v153 - 16);
              v169 = v166 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v170 = *v168;
                *((_OWORD *)v167 - 1) = *(v168 - 1);
                *(_OWORD *)v167 = v170;
                v167 -= 4;
                v168 -= 2;
                v169 -= 4;
              }
              while (v169);
              v157 = &v129[-(v166 & 0x3FFFFFFFFFFFFFFCLL)];
              v153 -= 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
              if (v166 == (v166 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_212;
            }
          }
          do
          {
            v181 = *(_QWORD *)(v153 - 8);
            v153 -= 8;
            *--v157 = v181;
          }
          while (v153 != v163);
          goto LABEL_212;
        }
      }
      else
      {
        v101 = *(_QWORD *)(v100 - 8);
        *(_QWORD *)(v99 + 8) = v100 - 8;
        v102 = *(uint64_t **)(v99 + 40);
        v103 = *(_QWORD *)(v99 + 48);
        v331 = v101;
        if ((unint64_t)v102 < v103)
        {
          if (v102)
            *v102 = v101;
LABEL_137:
          v119 = v102 + 1;
          goto LABEL_215;
        }
        v123 = *(_QWORD *)(v99 + 32);
        v124 = ((uint64_t)v102 - v123) >> 3;
        v125 = v124 + 1;
        if ((unint64_t)(v124 + 1) >> 61)
          goto LABEL_370;
        v126 = v103 - v123;
        if (v126 >> 2 > v125)
          v125 = v126 >> 2;
        if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v125;
        if (v127)
        {
          v128 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v99 + 56) + 16))(*(_QWORD *)(v99 + 56), 8 * v127, 8);
          v129 = (uint64_t *)(v128 + 8 * v124);
          v130 = v128 + 8 * v127;
          if (v128)
            *v129 = v331;
        }
        else
        {
          v130 = 0;
          v129 = (uint64_t *)(8 * v124);
        }
        v154 = *(_QWORD *)(v99 + 32);
        v153 = *(_QWORD *)(v99 + 40);
        v155 = v153 - v154;
        if (v153 != v154)
        {
          v156 = v155 - 8;
          if ((unint64_t)(v155 - 8) < 0x38)
          {
            v157 = v129;
          }
          else
          {
            v157 = v129;
            if ((unint64_t)(v153 - (_QWORD)v129) >= 0x20)
            {
              v158 = (v156 >> 3) + 1;
              v159 = v129 - 2;
              v160 = (__int128 *)(v153 - 16);
              v161 = v158 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v162 = *v160;
                *((_OWORD *)v159 - 1) = *(v160 - 1);
                *(_OWORD *)v159 = v162;
                v159 -= 4;
                v160 -= 2;
                v161 -= 4;
              }
              while (v161);
              v157 = &v129[-(v158 & 0x3FFFFFFFFFFFFFFCLL)];
              v153 -= 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
              if (v158 == (v158 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_212;
            }
          }
          do
          {
            v180 = *(_QWORD *)(v153 - 8);
            v153 -= 8;
            *--v157 = v180;
          }
          while (v153 != v154);
LABEL_212:
          v153 = *(_QWORD *)(v99 + 32);
LABEL_213:
          v119 = v129 + 1;
          *(_QWORD *)(v99 + 32) = v157;
          *(_QWORD *)(v99 + 40) = v129 + 1;
          v182 = *(_QWORD *)(v99 + 48);
          *(_QWORD *)(v99 + 48) = v130;
          if (v153)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v99 + 56) + 40))(*(_QWORD *)(v99 + 56), v153, v182 - v153);
LABEL_215:
          *(_QWORD *)(v99 + 40) = v119;
          v333[0] = (uint16x4_t)v331;
          v183 = *(_QWORD *)(v99 + 120);
          if (!v183)
            break;
          (*(void (**)(uint64_t, uint16x4_t *))(*(_QWORD *)v183 + 48))(v183, v333);
          v186 = *(_QWORD *)(v331 + 64);
          *(_QWORD *)(v186 + 24) = 0;
          v187 = *a4;
          *(_QWORD *)(v186 + 16) = *a4;
          v188 = *(_QWORD *)(v331 + 160);
          v189 = a4[1];
          if (v189)
          {
            v190 = (unint64_t *)(v189 + 8);
            do
              v191 = __ldxr(v190);
            while (__stxr(v191 + 1, v190));
          }
          v192 = *(std::__shared_weak_count **)(v188 + 24);
          *(_QWORD *)(v188 + 16) = v187;
          *(_QWORD *)(v188 + 24) = v189;
          if (v192)
          {
            v193 = (unint64_t *)&v192->__shared_owners_;
            do
              v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
            }
          }
          **(_QWORD **)(v331 + 96) = *v89;
          v195 = *(_QWORD **)(v331 + 64);
          v196 = (_QWORD *)v195[4];
          v197 = v196[1];
          v198 = v196[9];
          *(float *)v198 = v94;
          *(float *)(v198 + 4) = v93;
          v199 = *a2;
          *(_DWORD *)(v198 + 16) = *(_DWORD *)(*a2 + 92);
          *(_DWORD *)(v198 + 20) = *(_DWORD *)(v199 + 96);
          *(_DWORD *)(v198 + 24) = *(_DWORD *)(v199 + 100);
          v184.i64[0] = *(_QWORD *)(v199 + 104);
          v184.i32[2] = *(_DWORD *)(v199 + 112);
          v185.i64[0] = *(_QWORD *)(v199 + 92);
          v185.i32[2] = *(_DWORD *)(v199 + 100);
          v200 = vmaxnmq_f32(vsubq_f32(v184, v185), (float32x4_t)0);
          *(_DWORD *)(v198 + 40) = v200.i32[2];
          *(_QWORD *)(v198 + 32) = v200.i64[0];
          if (v196[8] > v197)
            v197 = v196[8];
          v196[7] = 0;
          v196[8] = v197;
          v201 = (_QWORD *)v195[6];
          v202 = v201[1];
          v203 = (float32x2_t *)v201[9];
          *v203 = v316;
          v203[1] = v318;
          v203[46].i32[0] = *a8;
          v203[46].i32[1] = a8[1];
          v203[47].i32[0] = a8[2];
          v203[44].i32[1] = 1065353216;
          v203[44].f32[0] = v95;
          v203[32].f32[0] = v44;
          v203[32].f32[1] = v96;
          if (v201[8] > v202)
            v202 = v201[8];
          v201[7] = 0;
          v201[8] = v202;
          v204 = (_QWORD *)v195[8];
          v205 = v204[1];
          v206 = (float *)v204[9];
          *v206 = v97;
          v206[1] = v98;
          if (v204[8] > v205)
            v205 = v204[8];
          v204[7] = 0;
          v204[8] = v205;
          v195[11] = 0;
          v207 = *v322;
          v195[10] = *v322;
          v208 = *(_QWORD *)(v331 + 160);
          v209 = v322[1];
          if (v209)
          {
            v210 = (unint64_t *)(v209 + 8);
            do
              v211 = __ldxr(v210);
            while (__stxr(v211 + 1, v210));
          }
          v212 = *(std::__shared_weak_count **)(v208 + 88);
          *(_QWORD *)(v208 + 80) = v207;
          *(_QWORD *)(v208 + 88) = v209;
          if (v212)
          {
            v213 = (unint64_t *)&v212->__shared_owners_;
            do
              v214 = __ldaxr(v213);
            while (__stlxr(v214 - 1, v213));
            if (!v214)
            {
              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
              std::__shared_weak_count::__release_weak(v212);
            }
          }
          v215 = *(uint64_t **)(v331 + 64);
          v215[1] = 0;
          v216 = *a5;
          *v215 = *a5;
          v217 = *(_QWORD **)(v331 + 160);
          v218 = a5[1];
          if (v218)
          {
            v219 = (unint64_t *)(v218 + 8);
            do
              v220 = __ldxr(v219);
            while (__stxr(v220 + 1, v219));
          }
          v221 = (std::__shared_weak_count *)v217[1];
          *v217 = v216;
          v217[1] = v218;
          if (v221)
          {
            v222 = (unint64_t *)&v221->__shared_owners_;
            do
              v223 = __ldaxr(v222);
            while (__stlxr(v223 - 1, v222));
            if (!v223)
            {
              ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
              std::__shared_weak_count::__release_weak(v221);
            }
          }
          v329 = v90;
          if (v321)
          {
            v225 = *(_QWORD *)(a1 + 192);
            v224 = *(std::__shared_weak_count **)(a1 + 200);
            if (v224)
            {
              v226 = (unint64_t *)&v224->__shared_owners_;
              do
                v227 = __ldxr(v226);
              while (__stxr(v227 + 1, v226));
            }
            if (!v225 || **(_QWORD **)(v225 + 40) != *(_QWORD *)(v331 + 8))
            {
              v228 = *(std::__shared_weak_count **)(v331 + 24);
              *(_QWORD *)(v331 + 16) = 0;
              *(_QWORD *)(v331 + 24) = 0;
              if (v228)
              {
                v229 = (unint64_t *)&v228->__shared_owners_;
                do
                  v230 = __ldaxr(v229);
                while (__stlxr(v230 - 1, v229));
                goto LABEL_265;
              }
              goto LABEL_266;
            }
            v231 = *(_QWORD *)(v331 + 16);
            if (v231 && v231 != v225)
              ggl::PipelineSetup::resetData(v331);
            if (v224)
            {
              v232 = (unint64_t *)&v224->__shared_owners_;
              do
                v233 = __ldxr(v232);
              while (__stxr(v233 + 1, v232));
            }
            v228 = *(std::__shared_weak_count **)(v331 + 24);
            *(_QWORD *)(v331 + 16) = v225;
            *(_QWORD *)(v331 + 24) = v224;
            if (!v228)
              goto LABEL_266;
            v234 = (unint64_t *)&v228->__shared_owners_;
            do
              v230 = __ldaxr(v234);
            while (__stlxr(v230 - 1, v234));
LABEL_265:
            if (!v230)
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
              if (!v224)
                goto LABEL_325;
            }
            else
            {
LABEL_266:
              if (!v224)
                goto LABEL_325;
            }
            v235 = (unint64_t *)&v224->__shared_owners_;
            do
              v236 = __ldaxr(v235);
            while (__stlxr(v236 - 1, v235));
LABEL_323:
            if (!v236)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
            goto LABEL_325;
          }
          goto LABEL_325;
        }
      }
      v157 = v129;
      goto LABEL_213;
    }
    v104 = *(_QWORD *)(a1 + 16);
    v105 = *(_QWORD *)(v104 + 8);
    v331 = v91;
    if (v105 == *(_QWORD *)v104)
    {
      v120 = *(_QWORD *)(v104 + 88);
      if (!v120)
        break;
      v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 48))(v120);
      v107 = *(uint64_t **)(v104 + 40);
      v121 = *(_QWORD *)(v104 + 48);
      if ((unint64_t)v107 >= v121)
      {
        v137 = *(_QWORD *)(v104 + 32);
        v138 = ((uint64_t)v107 - v137) >> 3;
        v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 61)
LABEL_370:
          abort();
        v140 = v121 - v137;
        if (v140 >> 2 > v139)
          v139 = v140 >> 2;
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v139;
        if (v141)
        {
          v142 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v104 + 56) + 16))(*(_QWORD *)(v104 + 56), 8 * v141, 8);
          v115 = (uint64_t *)(v142 + 8 * v138);
          v116 = v142 + 8 * v141;
          if (v142)
            *v115 = v106;
        }
        else
        {
          v116 = 0;
          v115 = (uint64_t *)(8 * v138);
        }
        v171 = *(_QWORD *)(v104 + 32);
        v143 = *(_QWORD *)(v104 + 40);
        v172 = v143 - v171;
        if (v143 != v171)
        {
          v173 = v172 - 8;
          if ((unint64_t)(v172 - 8) < 0x38)
          {
            v147 = v115;
          }
          else
          {
            v147 = v115;
            if ((unint64_t)(v143 - (_QWORD)v115) >= 0x20)
            {
              v174 = (v173 >> 3) + 1;
              v175 = v115 - 2;
              v176 = (__int128 *)(v143 - 16);
              v177 = v174 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v178 = *v176;
                *((_OWORD *)v175 - 1) = *(v176 - 1);
                *(_OWORD *)v175 = v178;
                v175 -= 4;
                v176 -= 2;
                v177 -= 4;
              }
              while (v177);
              v147 = &v115[-(v174 & 0x3FFFFFFFFFFFFFFCLL)];
              v143 -= 8 * (v174 & 0x3FFFFFFFFFFFFFFCLL);
              if (v174 == (v174 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_274;
            }
          }
          do
          {
            v237 = *(_QWORD *)(v143 - 8);
            v143 -= 8;
            *--v147 = v237;
          }
          while (v143 != v171);
          goto LABEL_274;
        }
LABEL_203:
        v147 = v115;
        goto LABEL_275;
      }
    }
    else
    {
      v106 = *(_QWORD *)(v105 - 8);
      *(_QWORD *)(v104 + 8) = v105 - 8;
      v107 = *(uint64_t **)(v104 + 40);
      v108 = *(_QWORD *)(v104 + 48);
      if ((unint64_t)v107 >= v108)
      {
        v109 = *(_QWORD *)(v104 + 32);
        v110 = ((uint64_t)v107 - v109) >> 3;
        v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 61)
          goto LABEL_370;
        v112 = v108 - v109;
        if (v112 >> 2 > v111)
          v111 = v112 >> 2;
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
          v113 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v113 = v111;
        if (v113)
        {
          v114 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v104 + 56) + 16))(*(_QWORD *)(v104 + 56), 8 * v113, 8);
          v115 = (uint64_t *)(v114 + 8 * v110);
          v116 = v114 + 8 * v113;
          if (v114)
            *v115 = v106;
        }
        else
        {
          v116 = 0;
          v115 = (uint64_t *)(8 * v110);
        }
        v144 = *(_QWORD *)(v104 + 32);
        v143 = *(_QWORD *)(v104 + 40);
        v145 = v143 - v144;
        if (v143 != v144)
        {
          v146 = v145 - 8;
          if ((unint64_t)(v145 - 8) < 0x38)
          {
            v147 = v115;
          }
          else
          {
            v147 = v115;
            if ((unint64_t)(v143 - (_QWORD)v115) >= 0x20)
            {
              v148 = (v146 >> 3) + 1;
              v149 = v115 - 2;
              v150 = (__int128 *)(v143 - 16);
              v151 = v148 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v152 = *v150;
                *((_OWORD *)v149 - 1) = *(v150 - 1);
                *(_OWORD *)v149 = v152;
                v149 -= 4;
                v150 -= 2;
                v151 -= 4;
              }
              while (v151);
              v147 = &v115[-(v148 & 0x3FFFFFFFFFFFFFFCLL)];
              v143 -= 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
              if (v148 == (v148 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_274;
            }
          }
          do
          {
            v179 = *(_QWORD *)(v143 - 8);
            v143 -= 8;
            *--v147 = v179;
          }
          while (v143 != v144);
LABEL_274:
          v143 = *(_QWORD *)(v104 + 32);
LABEL_275:
          v122 = v115 + 1;
          *(_QWORD *)(v104 + 32) = v147;
          *(_QWORD *)(v104 + 40) = v115 + 1;
          v238 = *(_QWORD *)(v104 + 48);
          *(_QWORD *)(v104 + 48) = v116;
          if (v143)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v104 + 56) + 40))(*(_QWORD *)(v104 + 56), v143, v238 - v143);
          goto LABEL_277;
        }
        goto LABEL_203;
      }
    }
    if (v107)
      *v107 = v106;
    v122 = v107 + 1;
LABEL_277:
    *(_QWORD *)(v104 + 40) = v122;
    v333[0] = (uint16x4_t)v106;
    v239 = *(_QWORD *)(v104 + 120);
    if (!v239)
      break;
    (*(void (**)(uint64_t, uint16x4_t *))(*(_QWORD *)v239 + 48))(v239, v333);
    v242 = *(_QWORD *)(v106 + 64);
    *(_QWORD *)(v242 + 24) = 0;
    v243 = *a4;
    *(_QWORD *)(v242 + 16) = *a4;
    v244 = *(_QWORD *)(v106 + 160);
    v245 = a4[1];
    if (v245)
    {
      v246 = (unint64_t *)(v245 + 8);
      do
        v247 = __ldxr(v246);
      while (__stxr(v247 + 1, v246));
    }
    v248 = *(std::__shared_weak_count **)(v244 + 24);
    *(_QWORD *)(v244 + 16) = v243;
    *(_QWORD *)(v244 + 24) = v245;
    if (v248)
    {
      v249 = (unint64_t *)&v248->__shared_owners_;
      do
        v250 = __ldaxr(v249);
      while (__stlxr(v250 - 1, v249));
      if (!v250)
      {
        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
        std::__shared_weak_count::__release_weak(v248);
      }
    }
    **(_QWORD **)(v106 + 96) = *v89;
    v251 = *(_QWORD **)(v106 + 64);
    v252 = (_QWORD *)v251[4];
    v253 = v252[1];
    v254 = v252[9];
    *(float *)v254 = v94;
    *(float *)(v254 + 4) = v93;
    v255 = *a2;
    *(_DWORD *)(v254 + 16) = *(_DWORD *)(*a2 + 92);
    *(_DWORD *)(v254 + 20) = *(_DWORD *)(v255 + 96);
    *(_DWORD *)(v254 + 24) = *(_DWORD *)(v255 + 100);
    v240.i64[0] = *(_QWORD *)(v255 + 104);
    v240.i32[2] = *(_DWORD *)(v255 + 112);
    v241.i64[0] = *(_QWORD *)(v255 + 92);
    v241.i32[2] = *(_DWORD *)(v255 + 100);
    v256 = vmaxnmq_f32(vsubq_f32(v240, v241), (float32x4_t)0);
    *(_DWORD *)(v254 + 40) = v256.i32[2];
    *(_QWORD *)(v254 + 32) = v256.i64[0];
    if (v252[8] > v253)
      v253 = v252[8];
    v252[7] = 0;
    v252[8] = v253;
    v257 = (_QWORD *)v251[6];
    v258 = v257[1];
    v259 = v257[9];
    *(_OWORD *)v259 = v315;
    *(_DWORD *)(v259 + 368) = *a8;
    *(_DWORD *)(v259 + 372) = a8[1];
    *(_DWORD *)(v259 + 376) = a8[2];
    *(_DWORD *)(v259 + 356) = 1065353216;
    *(float *)(v259 + 352) = v95;
    *(float *)(v259 + 256) = v44;
    *(float *)(v259 + 260) = v96;
    if (v257[8] > v258)
      v258 = v257[8];
    v257[7] = 0;
    v257[8] = v258;
    v260 = (_QWORD *)v251[8];
    v261 = v260[1];
    v262 = (float *)v260[9];
    *v262 = v97;
    v262[1] = v98;
    if (v260[8] > v261)
      v261 = v260[8];
    v260[7] = 0;
    v260[8] = v261;
    v251[11] = 0;
    v263 = *v322;
    v251[10] = *v322;
    v264 = *(_QWORD *)(v106 + 160);
    v265 = v322[1];
    if (v265)
    {
      v266 = (unint64_t *)(v265 + 8);
      do
        v267 = __ldxr(v266);
      while (__stxr(v267 + 1, v266));
    }
    v268 = *(std::__shared_weak_count **)(v264 + 88);
    *(_QWORD *)(v264 + 80) = v263;
    *(_QWORD *)(v264 + 88) = v265;
    if (v268)
    {
      v269 = (unint64_t *)&v268->__shared_owners_;
      do
        v270 = __ldaxr(v269);
      while (__stlxr(v270 - 1, v269));
      if (!v270)
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
      }
    }
    v329 = v106;
    if (v321)
    {
      v271 = *(_QWORD *)(a1 + 176);
      v224 = *(std::__shared_weak_count **)(a1 + 184);
      if (v224)
      {
        v272 = (unint64_t *)&v224->__shared_owners_;
        do
          v273 = __ldxr(v272);
        while (__stxr(v273 + 1, v272));
      }
      if (!v271 || **(_QWORD **)(v271 + 40) != *(_QWORD *)(v106 + 8))
      {
        v274 = *(std::__shared_weak_count **)(v106 + 24);
        *(_QWORD *)(v106 + 16) = 0;
        *(_QWORD *)(v106 + 24) = 0;
        if (v274)
        {
          v275 = (unint64_t *)&v274->__shared_owners_;
          do
            v276 = __ldaxr(v275);
          while (__stlxr(v276 - 1, v275));
          goto LABEL_319;
        }
        goto LABEL_320;
      }
      v277 = *(_QWORD *)(v106 + 16);
      if (v277 && v277 != v271)
        ggl::PipelineSetup::resetData(v106);
      if (v224)
      {
        v278 = (unint64_t *)&v224->__shared_owners_;
        do
          v279 = __ldxr(v278);
        while (__stxr(v279 + 1, v278));
      }
      v274 = *(std::__shared_weak_count **)(v106 + 24);
      *(_QWORD *)(v106 + 16) = v271;
      *(_QWORD *)(v106 + 24) = v224;
      if (!v274)
        goto LABEL_320;
      v280 = (unint64_t *)&v274->__shared_owners_;
      do
        v276 = __ldaxr(v280);
      while (__stlxr(v276 - 1, v280));
LABEL_319:
      if (!v276)
      {
        ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
        std::__shared_weak_count::__release_weak(v274);
        if (!v224)
          goto LABEL_325;
      }
      else
      {
LABEL_320:
        if (!v224)
          goto LABEL_325;
      }
      v281 = (unint64_t *)&v224->__shared_owners_;
      do
        v236 = __ldaxr(v281);
      while (__stlxr(v236 - 1, v281));
      goto LABEL_323;
    }
LABEL_325:
    v283 = (_QWORD *)v89[2];
    v282 = (_QWORD *)v89[3];
    v327 = v89;
    if (v283 != v282)
    {
      if (v329)
        v284 = v329;
      else
        v284 = v331;
      while (1)
      {
        v286 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 88));
        v286[3] = a3;
        v286[4] = v284;
        v286[8] = *v283;
        v286[6] = 2;
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
        v289 = v283[1];
        v288 = v283[2];
        while (v289 != v288)
        {
          v333[0] = *(uint16x4_t *)(v289 + 16);
          v290 = *(_QWORD *)(a18 + 24);
          if (!v290)
            goto LABEL_367;
          if ((*(unsigned int (**)(uint64_t, uint16x4_t *))(*(_QWORD *)v290 + 48))(v290, v333))
          {
            if (*(_QWORD *)(v289 + 8) != *(_QWORD *)v289)
              gm::MultiRange<unsigned long>::push_back((char **)(a1 + 280), (_OWORD *)v289);
          }
          v289 += 24;
        }
        v291 = ggl::Batcher::commit((__int128 **)(a1 + 280), 0, v287);
        v292 = *v291;
        v286[11] = *v291;
        v286[12] = (v291[1] - v292) >> 4;
        v293 = *(_QWORD **)(a7 + 80);
        v294 = *(_QWORD *)(a7 + 88);
        if ((unint64_t)v293 >= v294)
          break;
        if (v293)
          *v293 = v286;
        v285 = v293 + 1;
LABEL_330:
        *(_QWORD *)(a7 + 80) = v285;
        v283 += 4;
        if (v283 == v282)
          goto LABEL_116;
      }
      v295 = *(_QWORD *)(a7 + 72);
      v296 = ((uint64_t)v293 - v295) >> 3;
      v297 = v296 + 1;
      if ((unint64_t)(v296 + 1) >> 61)
        abort();
      v298 = v294 - v295;
      if (v298 >> 2 > v297)
        v297 = v298 >> 2;
      if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF8)
        v299 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v299 = v297;
      if (v299)
      {
        v300 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a7 + 96) + 16))(*(_QWORD *)(a7 + 96), 8 * v299, 8);
        v301 = (_QWORD *)(v300 + 8 * v296);
        v302 = v300 + 8 * v299;
        if (v300)
          *v301 = v286;
      }
      else
      {
        v302 = 0;
        v301 = (_QWORD *)(8 * v296);
      }
      v304 = *(_QWORD *)(a7 + 72);
      v303 = *(_QWORD *)(a7 + 80);
      v305 = v303 - v304;
      if (v303 != v304)
      {
        v306 = v305 - 8;
        if ((unint64_t)(v305 - 8) < 0x38)
        {
          v307 = v301;
        }
        else
        {
          v307 = v301;
          if ((unint64_t)(v303 - (_QWORD)v301) >= 0x20)
          {
            v308 = (v306 >> 3) + 1;
            v309 = v301 - 2;
            v310 = (__int128 *)(v303 - 16);
            v311 = v308 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v312 = *v310;
              *(v309 - 1) = *(v310 - 1);
              *v309 = v312;
              v309 -= 2;
              v310 -= 2;
              v311 -= 4;
            }
            while (v311);
            v307 = &v301[-(v308 & 0x3FFFFFFFFFFFFFFCLL)];
            v303 -= 8 * (v308 & 0x3FFFFFFFFFFFFFFCLL);
            if (v308 == (v308 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_361:
              v303 = *(_QWORD *)(a7 + 72);
LABEL_362:
              v285 = v301 + 1;
              *(_QWORD *)(a7 + 72) = v307;
              *(_QWORD *)(a7 + 80) = v301 + 1;
              v314 = *(_QWORD *)(a7 + 88);
              *(_QWORD *)(a7 + 88) = v302;
              if (v303)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a7 + 96) + 40))(*(_QWORD *)(a7 + 96), v303, v314 - v303);
              goto LABEL_330;
            }
          }
        }
        do
        {
          v313 = *(_QWORD *)(v303 - 8);
          v303 -= 8;
          *--v307 = v313;
        }
        while (v303 != v304);
        goto LABEL_361;
      }
      v307 = v301;
      goto LABEL_362;
    }
LABEL_116:
    v89 = v327 + 5;
    v90 = v329;
    v91 = v331;
    if (v327 + 5 == v319)
      goto LABEL_366;
  }
LABEL_367:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19FC82E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void generateDiffuseRenderItemsForLandmarkGroup(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, __int32 *a8, float a9, float a10, float a11, float a12, float a13, char a14, unsigned __int8 a15, char a16, char a17, uint64_t a18)
{
  uint64_t v24;
  uint64_t v25;
  uint16x4_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  int8x8_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  unsigned int v48;
  uint64_t v49;
  float *v50;
  float v51;
  _BOOL4 v52;
  unsigned int v54;
  float v55;
  _BOOL4 v56;
  unsigned int v58;
  float v59;
  float v60;
  uint64_t v61;
  float *v62;
  float v63;
  BOOL v64;
  unsigned int v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float v70;
  BOOL v71;
  unsigned int v72;
  float v73;
  uint64_t v74;
  float *v75;
  float v76;
  unsigned int v77;
  float v78;
  int v79;
  int8x16_t v80;
  float32x2_t v81;
  float32x2_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  __int128 *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  __int128 *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  __int128 *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  __int128 *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  float32x4_t v193;
  _QWORD *v194;
  unint64_t v195;
  float32x2_t *v196;
  _QWORD *v197;
  unint64_t v198;
  float *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  float32x4_t v224;
  float32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  float32x4_t v240;
  _QWORD *v241;
  unint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  float *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t *v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  __n128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char **v284;
  char *v285;
  _QWORD *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  _OWORD *v302;
  __int128 *v303;
  uint64_t v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  __int128 v308;
  float32x2_t v309;
  float32x2_t v311;
  _QWORD *v312;
  float32x4_t v313;
  int v314;
  uint64_t *v315;
  float32x4_t v319;
  _QWORD *v320;
  uint64_t v322;
  uint64_t v324;
  uint16x4_t v326[2];
  uint16x4_t v327;
  std::__shared_weak_count *v328;
  _QWORD v329[2];
  __int8 v330;
  _BYTE v331[9];

  v24 = *a2 + 72;
  v25 = 56;
  if (a17 == 1)
    v25 = 72;
  else
    v24 = *a2 + 56;
  v26 = *(uint16x4_t *)(*a2 + v25);
  v27 = *(std::__shared_weak_count **)(v24 + 8);
  v326[0] = v26;
  v326[1] = (uint16x4_t)v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v328 = v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  else
  {
    v328 = 0;
  }
  v329[0] = 0;
  v329[1] = 0;
  v327 = v26;
  v330 = 0;
  if (v26)
    v26.i8[0] = (*(uint64_t (**)(uint16x4_t, _QWORD *))(**(_QWORD **)&v26 + 48))(v26, v329);
  v330 = v26.i8[0];
  if (v27)
  {
    v31 = (unint64_t *)&v27->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v33 = *(_QWORD **)(a6 + 8);
  v34 = (int8x8_t)v33[1];
  if (!*(_QWORD *)&v34)
    goto LABEL_42;
  v35 = (uint8x8_t)vcnt_s8(v34);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    v36 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v34 <= 0x41E8D6E445F4145uLL)
      v36 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v34;
  }
  else
  {
    v36 = (*(_QWORD *)&v34 - 1) & 0x41E8D6E445F4145;
  }
  v37 = *(_QWORD **)(*v33 + 8 * v36);
  if (!v37)
    goto LABEL_42;
  v38 = (_QWORD *)*v37;
  if (!v38)
    goto LABEL_42;
  if (v35.u32[0] < 2uLL)
  {
    v39 = *(_QWORD *)&v34 - 1;
    while (1)
    {
      v41 = v38[1];
      if (v41 == 0x41E8D6E445F4145)
      {
        if (v38[2] == 0x41E8D6E445F4145)
          goto LABEL_39;
      }
      else if ((v41 & v39) != v36)
      {
        goto LABEL_42;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v40 = v38[1];
    if (v40 == 0x41E8D6E445F4145)
      break;
    if (v40 >= *(_QWORD *)&v34)
      v40 %= *(_QWORD *)&v34;
    if (v40 != v36)
      goto LABEL_42;
LABEL_28:
    v38 = (_QWORD *)*v38;
    if (!v38)
      goto LABEL_42;
  }
  if (v38[2] != 0x41E8D6E445F4145)
    goto LABEL_28;
LABEL_39:
  v42 = v38[5];
  if (*(_QWORD *)(v42 + 8) != 0x41E8D6E445F4145)
  {
LABEL_42:
    v315 = 0;
    if (v330)
      goto LABEL_43;
LABEL_41:
    v43 = 0uLL;
    v44 = 1.0;
    v45 = 0.065;
    v46 = 7.875;
    v47 = 0uLL;
    goto LABEL_100;
  }
  v315 = *(uint64_t **)(v42 + 32);
  if (!v330)
    goto LABEL_41;
LABEL_43:
  if ((int)a12 >= 0x17)
    v48 = 23;
  else
    v48 = (int)a12;
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v326, *(_QWORD *)(*(_QWORD *)&v327 + 24), 0xA2u, v48, 2u, 0);
  v319 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v326[0])), (float32x4_t)vdupq_n_s32(0x37800080u));
  v49 = *(_QWORD *)(*(_QWORD *)&v327 + 24);
  v50 = *(float **)v49;
  if (*(_QWORD *)v49)
  {
    v51 = *v50;
    v52 = *v50 == 1.0;
    if (*(_BYTE *)(v49 + 10))
    {
      if (v51 != 0.0 && v51 != 1.0)
      {
LABEL_56:
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(*(_QWORD *)&v327 + 24), 0x12Fu, v48, 0) & 1) == 0)
        {
          v54 = 1;
          goto LABEL_58;
        }
        goto LABEL_59;
      }
    }
  }
  else
  {
    v52 = 0;
  }
  v54 = *(unsigned __int8 *)(v49 + v52 + 11);
  if (v54 == 2)
    goto LABEL_56;
LABEL_58:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v49, 0x12Fu, v48, v54))
  {
    v313 = v319;
    if (v50)
      goto LABEL_60;
    goto LABEL_68;
  }
LABEL_59:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v326, v49, 0x12Fu, v48, 2u, 0);
  v313 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v326[0])), (float32x4_t)vdupq_n_s32(0x37800080u));
  v49 = *(_QWORD *)(*(_QWORD *)&v327 + 24);
  v50 = *(float **)v49;
  if (!*(_QWORD *)v49)
  {
LABEL_68:
    v56 = 0;
    goto LABEL_69;
  }
LABEL_60:
  v55 = *v50;
  v56 = *v50 == 1.0;
  if (*(_BYTE *)(v49 + 10))
  {
    if (v55 != 0.0 && v55 != 1.0)
    {
LABEL_70:
      v326[0].i8[0] = 1;
      v331[0] = 1;
      v59 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49, 0x12Bu, v48, 0, v326);
      v60 = v59
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49, 0x12Bu, v48, 1u, v331)- v59)* v55);
      goto LABEL_72;
    }
  }
LABEL_69:
  v58 = *(unsigned __int8 *)(v49 + v56 + 11);
  v55 = 0.0;
  if (v58 == 2)
    goto LABEL_70;
  v60 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v49, 0x12Bu, v48, v58, 0);
LABEL_72:
  v61 = *(_QWORD *)(*(_QWORD *)&v327 + 24);
  v62 = *(float **)v61;
  if (*(_QWORD *)v61
    && (v63 = *v62, LODWORD(v62) = *v62 == 1.0, *(_BYTE *)(v61 + 10))
    && (v63 != 0.0 ? (v64 = v63 == 1.0) : (v64 = 1), !v64)
    || (v65 = *(unsigned __int8 *)(v61 + v62 + 11), v63 = 0.0, v65 == 2))
  {
    v326[0].i8[0] = 1;
    v331[0] = 1;
    v66 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v61, 0x137u, v48, 0, v326);
    v67 = v66
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v61, 0x137u, v48, 1u, v331)- v66)* v63);
  }
  else
  {
    v67 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v327 + 24), 0x137u, v48, v65, 0);
  }
  v68 = *(_QWORD *)(*(_QWORD *)&v327 + 24);
  v69 = *(float **)v68;
  if (*(_QWORD *)v68
    && (v70 = *v69, LODWORD(v69) = *v69 == 1.0, *(_BYTE *)(v68 + 10))
    && (v70 != 0.0 ? (v71 = v70 == 1.0) : (v71 = 1), !v71)
    || (v72 = *(unsigned __int8 *)(v68 + v69 + 11), v70 = 0.0, v72 == 2))
  {
    v326[0].i8[0] = 1;
    v331[0] = 1;
    v73 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v68, 0x14Au, v48, 0, v326);
    v45 = v73
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v68, 0x14Au, v48, 1u, v331)- v73)* v70);
  }
  else
  {
    v45 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v327 + 24), 0x14Au, v48, v72, 0);
  }
  v44 = v60 + (float)((float)(v67 - v60) * a10);
  v74 = *(_QWORD *)(*(_QWORD *)&v327 + 24);
  v75 = *(float **)v74;
  if (*(_QWORD *)v74 && (v76 = *v75, LODWORD(v75) = *v75 == 1.0, *(_BYTE *)(v74 + 10)) && v76 != 0.0 && v76 != 1.0
    || (v77 = *(unsigned __int8 *)(v74 + v75 + 11), v76 = 0.0, v77 == 2))
  {
    v326[0].i8[0] = 1;
    v331[0] = 1;
    v78 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v74, 0x14Bu, v48, 0, v326);
    v46 = v78
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v74, 0x14Bu, v48, 1u, v331)- v78)* v76);
  }
  else
  {
    v46 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)&v327 + 24), 0x14Bu, v48, v77, 0);
  }
  v47 = v319;
  v43 = v313;
LABEL_100:
  v79 = a15;
  v80 = (int8x16_t)vsubq_f32(v43, v47);
  v81.f32[0] = a13;
  v81.f32[1] = a13 * a9;
  v82 = vmul_f32(vmla_n_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL), a10), v81);
  v311 = v82;
  if (v82.f32[1] <= 0.999)
    v79 = 1;
  v314 = v79;
  v83 = *(_QWORD **)(*a2 + 32);
  v312 = *(_QWORD **)(*a2 + 40);
  if (v83 == v312)
  {
LABEL_354:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v327);
    return;
  }
  v84 = 0;
  v85 = 0;
  *(float32x2_t *)&v86 = vmul_n_f32(vmla_n_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v80.i8, a10), a13);
  v87 = fmaxf(a11, 0.1);
  v88 = fmaxf(a10, 0.1);
  v89 = 1.0 - v44;
  v90 = v45 * 40075017.0 / (v46 * (double)(unint64_t)(1 << a14));
  v91 = 1.0 - v45;
  v309 = (float32x2_t)v86;
  *((float32x2_t *)&v86 + 1) = v82;
  v308 = v86;
  while (1)
  {
    if (a16)
    {
      v92 = *(_QWORD *)(a1 + 8);
      v93 = *(_QWORD *)(v92 + 8);
      v324 = v85;
      if (v93 == *(_QWORD *)v92)
      {
        v110 = *(_QWORD *)(v92 + 88);
        if (!v110)
          break;
        v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 48))(v110);
        v95 = *(uint64_t **)(v92 + 40);
        v111 = *(_QWORD *)(v92 + 48);
        if ((unint64_t)v95 >= v111)
        {
          v124 = *(_QWORD *)(v92 + 32);
          v125 = ((uint64_t)v95 - v124) >> 3;
          v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 61)
            goto LABEL_358;
          v127 = v111 - v124;
          if (v127 >> 2 > v126)
            v126 = v127 >> 2;
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
            v128 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v128 = v126;
          if (v128)
          {
            v129 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v92 + 56) + 16))(*(_QWORD *)(v92 + 56), 8 * v128, 8);
            v103 = (uint64_t *)(v129 + 8 * v125);
            v104 = v129 + 8 * v128;
            if (v129)
              *v103 = v94;
          }
          else
          {
            v104 = 0;
            v103 = (uint64_t *)(8 * v125);
          }
          v156 = *(_QWORD *)(v92 + 32);
          v136 = *(_QWORD *)(v92 + 40);
          v157 = v136 - v156;
          if (v136 != v156)
          {
            v158 = v157 - 8;
            if ((unint64_t)(v157 - 8) < 0x38)
            {
              v140 = v103;
            }
            else
            {
              v140 = v103;
              if ((unint64_t)(v136 - (_QWORD)v103) >= 0x20)
              {
                v159 = (v158 >> 3) + 1;
                v160 = v103 - 2;
                v161 = (__int128 *)(v136 - 16);
                v162 = v159 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v163 = *v161;
                  *((_OWORD *)v160 - 1) = *(v161 - 1);
                  *(_OWORD *)v160 = v163;
                  v160 -= 4;
                  v161 -= 2;
                  v162 -= 4;
                }
                while (v162);
                v140 = &v103[-(v159 & 0x3FFFFFFFFFFFFFFCLL)];
                v136 -= 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
                if (v159 == (v159 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_200;
              }
            }
            do
            {
              v174 = *(_QWORD *)(v136 - 8);
              v136 -= 8;
              *--v140 = v174;
            }
            while (v136 != v156);
            goto LABEL_200;
          }
LABEL_182:
          v140 = v103;
          goto LABEL_201;
        }
      }
      else
      {
        v94 = *(_QWORD *)(v93 - 8);
        *(_QWORD *)(v92 + 8) = v93 - 8;
        v95 = *(uint64_t **)(v92 + 40);
        v96 = *(_QWORD *)(v92 + 48);
        if ((unint64_t)v95 >= v96)
        {
          v97 = *(_QWORD *)(v92 + 32);
          v98 = ((uint64_t)v95 - v97) >> 3;
          v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 61)
            goto LABEL_358;
          v100 = v96 - v97;
          if (v100 >> 2 > v99)
            v99 = v100 >> 2;
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
            v101 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v101 = v99;
          if (v101)
          {
            v102 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v92 + 56) + 16))(*(_QWORD *)(v92 + 56), 8 * v101, 8);
            v103 = (uint64_t *)(v102 + 8 * v98);
            v104 = v102 + 8 * v101;
            if (v102)
              *v103 = v94;
          }
          else
          {
            v104 = 0;
            v103 = (uint64_t *)(8 * v98);
          }
          v137 = *(_QWORD *)(v92 + 32);
          v136 = *(_QWORD *)(v92 + 40);
          v138 = v136 - v137;
          if (v136 != v137)
          {
            v139 = v138 - 8;
            if ((unint64_t)(v138 - 8) < 0x38)
            {
              v140 = v103;
            }
            else
            {
              v140 = v103;
              if ((unint64_t)(v136 - (_QWORD)v103) >= 0x20)
              {
                v141 = (v139 >> 3) + 1;
                v142 = v103 - 2;
                v143 = (__int128 *)(v136 - 16);
                v144 = v141 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v145 = *v143;
                  *((_OWORD *)v142 - 1) = *(v143 - 1);
                  *(_OWORD *)v142 = v145;
                  v142 -= 4;
                  v143 -= 2;
                  v144 -= 4;
                }
                while (v144);
                v140 = &v103[-(v141 & 0x3FFFFFFFFFFFFFFCLL)];
                v136 -= 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
                if (v141 == (v141 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_200;
              }
            }
            do
            {
              v172 = *(_QWORD *)(v136 - 8);
              v136 -= 8;
              *--v140 = v172;
            }
            while (v136 != v137);
LABEL_200:
            v136 = *(_QWORD *)(v92 + 32);
LABEL_201:
            v112 = v103 + 1;
            *(_QWORD *)(v92 + 32) = v140;
            *(_QWORD *)(v92 + 40) = v103 + 1;
            v175 = *(_QWORD *)(v92 + 48);
            *(_QWORD *)(v92 + 48) = v104;
            if (v136)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v92 + 56) + 40))(*(_QWORD *)(v92 + 56), v136, v175 - v136);
            goto LABEL_203;
          }
          goto LABEL_182;
        }
      }
      if (v95)
        *v95 = v94;
      v112 = v95 + 1;
LABEL_203:
      *(_QWORD *)(v92 + 40) = v112;
      v326[0] = (uint16x4_t)v94;
      v176 = *(_QWORD *)(v92 + 120);
      if (!v176)
        break;
      (*(void (**)(uint64_t, uint16x4_t *))(*(_QWORD *)v176 + 48))(v176, v326);
      v179 = *(_QWORD *)(v94 + 64);
      *(_QWORD *)(v179 + 24) = 0;
      v180 = *a4;
      *(_QWORD *)(v179 + 16) = *a4;
      v181 = *(_QWORD *)(v94 + 160);
      v182 = a4[1];
      if (v182)
      {
        v183 = (unint64_t *)(v182 + 8);
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      v185 = *(std::__shared_weak_count **)(v181 + 24);
      *(_QWORD *)(v181 + 16) = v180;
      *(_QWORD *)(v181 + 24) = v182;
      if (v185)
      {
        v186 = (unint64_t *)&v185->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
      **(_QWORD **)(v94 + 96) = *v83;
      v188 = *(_QWORD **)(v94 + 64);
      v189 = (_QWORD *)v188[4];
      v190 = v189[1];
      v191 = v189[9];
      *(float *)v191 = v88;
      *(float *)(v191 + 4) = v87;
      v192 = *a2;
      *(_DWORD *)(v191 + 16) = *(_DWORD *)(*a2 + 92);
      *(_DWORD *)(v191 + 20) = *(_DWORD *)(v192 + 96);
      *(_DWORD *)(v191 + 24) = *(_DWORD *)(v192 + 100);
      v177.i64[0] = *(_QWORD *)(v192 + 104);
      v177.i32[2] = *(_DWORD *)(v192 + 112);
      v178.i64[0] = *(_QWORD *)(v192 + 92);
      v178.i32[2] = *(_DWORD *)(v192 + 100);
      v193 = vmaxnmq_f32(vsubq_f32(v177, v178), (float32x4_t)0);
      *(_DWORD *)(v191 + 40) = v193.i32[2];
      *(_QWORD *)(v191 + 32) = v193.i64[0];
      if (v189[8] > v190)
        v190 = v189[8];
      v189[7] = 0;
      v189[8] = v190;
      v194 = (_QWORD *)v188[6];
      v195 = v194[1];
      v196 = (float32x2_t *)v194[9];
      *v196 = v309;
      v196[1] = v311;
      v196[46].i32[0] = *a8;
      v196[46].i32[1] = a8[1];
      v196[47].i32[0] = a8[2];
      v196[44].i32[1] = 1065353216;
      v196[44].f32[0] = v89;
      if (v194[8] > v195)
        v195 = v194[8];
      v194[7] = 0;
      v194[8] = v195;
      v197 = (_QWORD *)v188[8];
      v198 = v197[1];
      v199 = (float *)v197[9];
      *v199 = v90;
      v199[1] = v91;
      if (v197[8] > v198)
        v198 = v197[8];
      v197[7] = 0;
      v197[8] = v198;
      v188[11] = 0;
      v200 = *v315;
      v188[10] = *v315;
      v201 = *(_QWORD *)(v94 + 160);
      v202 = v315[1];
      if (v202)
      {
        v203 = (unint64_t *)(v202 + 8);
        do
          v204 = __ldxr(v203);
        while (__stxr(v204 + 1, v203));
      }
      v205 = *(std::__shared_weak_count **)(v201 + 88);
      *(_QWORD *)(v201 + 80) = v200;
      *(_QWORD *)(v201 + 88) = v202;
      if (v205)
      {
        v206 = (unint64_t *)&v205->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v322 = v94;
      if (v314)
      {
        v209 = *(_QWORD *)(a1 + 240);
        v208 = *(std::__shared_weak_count **)(a1 + 248);
        if (v208)
        {
          v210 = (unint64_t *)&v208->__shared_owners_;
          do
            v211 = __ldxr(v210);
          while (__stxr(v211 + 1, v210));
        }
        if (!v209 || **(_QWORD **)(v209 + 40) != *(_QWORD *)(v94 + 8))
        {
          v212 = *(std::__shared_weak_count **)(v94 + 24);
          *(_QWORD *)(v94 + 16) = 0;
          *(_QWORD *)(v94 + 24) = 0;
          if (v212)
          {
            v213 = (unint64_t *)&v212->__shared_owners_;
            do
              v214 = __ldaxr(v213);
            while (__stlxr(v214 - 1, v213));
            goto LABEL_245;
          }
          goto LABEL_246;
        }
        v215 = *(_QWORD *)(v94 + 16);
        if (v215 && v215 != v209)
          ggl::PipelineSetup::resetData(v94);
        if (v208)
        {
          v216 = (unint64_t *)&v208->__shared_owners_;
          do
            v217 = __ldxr(v216);
          while (__stxr(v217 + 1, v216));
        }
        v212 = *(std::__shared_weak_count **)(v94 + 24);
        *(_QWORD *)(v94 + 16) = v209;
        *(_QWORD *)(v94 + 24) = v208;
        if (!v212)
          goto LABEL_246;
        v218 = (unint64_t *)&v212->__shared_owners_;
        do
          v214 = __ldaxr(v218);
        while (__stlxr(v214 - 1, v218));
LABEL_245:
        if (!v214)
        {
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
          if (!v208)
            goto LABEL_313;
        }
        else
        {
LABEL_246:
          if (!v208)
            goto LABEL_313;
        }
        v219 = (unint64_t *)&v208->__shared_owners_;
        do
          v220 = __ldaxr(v219);
        while (__stlxr(v220 - 1, v219));
LABEL_311:
        if (!v220)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
        goto LABEL_313;
      }
      goto LABEL_313;
    }
    v105 = *(_QWORD *)(a1 + 32);
    v106 = *(_QWORD *)(v105 + 8);
    if (v106 == *(_QWORD *)v105)
    {
      v113 = *(_QWORD *)(v105 + 88);
      if (!v113)
        break;
      v324 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 48))(v113);
      v108 = *(uint64_t **)(v105 + 40);
      v114 = *(_QWORD *)(v105 + 48);
      if ((unint64_t)v108 < v114)
      {
        if (v108)
          *v108 = v324;
        goto LABEL_130;
      }
      v130 = *(_QWORD *)(v105 + 32);
      v131 = ((uint64_t)v108 - v130) >> 3;
      v132 = v131 + 1;
      if ((unint64_t)(v131 + 1) >> 61)
LABEL_358:
        abort();
      v133 = v114 - v130;
      if (v133 >> 2 > v132)
        v132 = v133 >> 2;
      if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8)
        v134 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v134 = v132;
      if (v134)
      {
        v135 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 16))(*(_QWORD *)(v105 + 56), 8 * v134, 8);
        v122 = (uint64_t *)(v135 + 8 * v131);
        v123 = v135 + 8 * v134;
        if (v135)
          *v122 = v324;
      }
      else
      {
        v123 = 0;
        v122 = (uint64_t *)(8 * v131);
      }
      v164 = *(_QWORD *)(v105 + 32);
      v146 = *(_QWORD *)(v105 + 40);
      v165 = v146 - v164;
      if (v146 == v164)
      {
LABEL_191:
        v150 = v122;
        goto LABEL_255;
      }
      v166 = v165 - 8;
      if ((unint64_t)(v165 - 8) < 0x38)
      {
        v150 = v122;
      }
      else
      {
        v150 = v122;
        if ((unint64_t)(v146 - (_QWORD)v122) >= 0x20)
        {
          v167 = (v166 >> 3) + 1;
          v168 = v122 - 2;
          v169 = (__int128 *)(v146 - 16);
          v170 = v167 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v171 = *v169;
            *((_OWORD *)v168 - 1) = *(v169 - 1);
            *(_OWORD *)v168 = v171;
            v168 -= 4;
            v169 -= 2;
            v170 -= 4;
          }
          while (v170);
          v150 = &v122[-(v167 & 0x3FFFFFFFFFFFFFFCLL)];
          v146 -= 8 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
          if (v167 == (v167 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_254;
        }
      }
      do
      {
        v221 = *(_QWORD *)(v146 - 8);
        v146 -= 8;
        *--v150 = v221;
      }
      while (v146 != v164);
    }
    else
    {
      v107 = *(_QWORD *)(v106 - 8);
      *(_QWORD *)(v105 + 8) = v106 - 8;
      v108 = *(uint64_t **)(v105 + 40);
      v109 = *(_QWORD *)(v105 + 48);
      v324 = v107;
      if ((unint64_t)v108 < v109)
      {
        if (v108)
          *v108 = v107;
LABEL_130:
        v115 = v108 + 1;
        goto LABEL_257;
      }
      v116 = *(_QWORD *)(v105 + 32);
      v117 = ((uint64_t)v108 - v116) >> 3;
      v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 61)
        goto LABEL_358;
      v119 = v109 - v116;
      if (v119 >> 2 > v118)
        v118 = v119 >> 2;
      if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
        v120 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v120 = v118;
      if (v120)
      {
        v121 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 16))(*(_QWORD *)(v105 + 56), 8 * v120, 8);
        v122 = (uint64_t *)(v121 + 8 * v117);
        v123 = v121 + 8 * v120;
        if (v121)
          *v122 = v324;
      }
      else
      {
        v123 = 0;
        v122 = (uint64_t *)(8 * v117);
      }
      v147 = *(_QWORD *)(v105 + 32);
      v146 = *(_QWORD *)(v105 + 40);
      v148 = v146 - v147;
      if (v146 == v147)
        goto LABEL_191;
      v149 = v148 - 8;
      if ((unint64_t)(v148 - 8) < 0x38)
      {
        v150 = v122;
      }
      else
      {
        v150 = v122;
        if ((unint64_t)(v146 - (_QWORD)v122) >= 0x20)
        {
          v151 = (v149 >> 3) + 1;
          v152 = v122 - 2;
          v153 = (__int128 *)(v146 - 16);
          v154 = v151 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v155 = *v153;
            *((_OWORD *)v152 - 1) = *(v153 - 1);
            *(_OWORD *)v152 = v155;
            v152 -= 4;
            v153 -= 2;
            v154 -= 4;
          }
          while (v154);
          v150 = &v122[-(v151 & 0x3FFFFFFFFFFFFFFCLL)];
          v146 -= 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
          if (v151 == (v151 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_254;
        }
      }
      do
      {
        v173 = *(_QWORD *)(v146 - 8);
        v146 -= 8;
        *--v150 = v173;
      }
      while (v146 != v147);
    }
LABEL_254:
    v146 = *(_QWORD *)(v105 + 32);
LABEL_255:
    v115 = v122 + 1;
    *(_QWORD *)(v105 + 32) = v150;
    *(_QWORD *)(v105 + 40) = v122 + 1;
    v222 = *(_QWORD *)(v105 + 48);
    *(_QWORD *)(v105 + 48) = v123;
    if (v146)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 40))(*(_QWORD *)(v105 + 56), v146, v222 - v146);
LABEL_257:
    *(_QWORD *)(v105 + 40) = v115;
    v326[0] = (uint16x4_t)v324;
    v223 = *(_QWORD *)(v105 + 120);
    if (!v223)
      break;
    (*(void (**)(uint64_t, uint16x4_t *))(*(_QWORD *)v223 + 48))(v223, v326);
    v226 = *(_QWORD *)(v324 + 64);
    *(_QWORD *)(v226 + 24) = 0;
    v227 = *a4;
    *(_QWORD *)(v226 + 16) = *a4;
    v228 = *(_QWORD *)(v324 + 160);
    v229 = a4[1];
    if (v229)
    {
      v230 = (unint64_t *)(v229 + 8);
      do
        v231 = __ldxr(v230);
      while (__stxr(v231 + 1, v230));
    }
    v232 = *(std::__shared_weak_count **)(v228 + 24);
    *(_QWORD *)(v228 + 16) = v227;
    *(_QWORD *)(v228 + 24) = v229;
    if (v232)
    {
      v233 = (unint64_t *)&v232->__shared_owners_;
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    **(_QWORD **)(v324 + 96) = *v83;
    v235 = *(_QWORD **)(v324 + 64);
    v236 = (_QWORD *)v235[4];
    v237 = v236[1];
    v238 = v236[9];
    *(float *)v238 = v88;
    *(float *)(v238 + 4) = v87;
    v239 = *a2;
    *(_DWORD *)(v238 + 16) = *(_DWORD *)(*a2 + 92);
    *(_DWORD *)(v238 + 20) = *(_DWORD *)(v239 + 96);
    *(_DWORD *)(v238 + 24) = *(_DWORD *)(v239 + 100);
    v224.i64[0] = *(_QWORD *)(v239 + 104);
    v224.i32[2] = *(_DWORD *)(v239 + 112);
    v225.i64[0] = *(_QWORD *)(v239 + 92);
    v225.i32[2] = *(_DWORD *)(v239 + 100);
    v240 = vmaxnmq_f32(vsubq_f32(v224, v225), (float32x4_t)0);
    *(_DWORD *)(v238 + 40) = v240.i32[2];
    *(_QWORD *)(v238 + 32) = v240.i64[0];
    if (v236[8] > v237)
      v237 = v236[8];
    v236[7] = 0;
    v236[8] = v237;
    v241 = (_QWORD *)v235[6];
    v242 = v241[1];
    v243 = v241[9];
    *(_OWORD *)v243 = v308;
    *(_DWORD *)(v243 + 368) = *a8;
    *(_DWORD *)(v243 + 372) = a8[1];
    *(_DWORD *)(v243 + 376) = a8[2];
    *(_DWORD *)(v243 + 356) = 1065353216;
    *(float *)(v243 + 352) = v89;
    if (v241[8] > v242)
      v242 = v241[8];
    v241[7] = 0;
    v241[8] = v242;
    v244 = (_QWORD *)v235[8];
    v245 = v244[1];
    v246 = (float *)v244[9];
    *v246 = v90;
    v246[1] = v91;
    if (v244[8] > v245)
      v245 = v244[8];
    v244[7] = 0;
    v244[8] = v245;
    v235[11] = 0;
    v247 = *v315;
    v235[10] = *v315;
    v248 = *(_QWORD *)(v324 + 160);
    v249 = v315[1];
    if (v249)
    {
      v250 = (unint64_t *)(v249 + 8);
      do
        v251 = __ldxr(v250);
      while (__stxr(v251 + 1, v250));
    }
    v252 = *(std::__shared_weak_count **)(v248 + 88);
    *(_QWORD *)(v248 + 80) = v247;
    *(_QWORD *)(v248 + 88) = v249;
    if (v252)
    {
      v253 = (unint64_t *)&v252->__shared_owners_;
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    v255 = *(uint64_t **)(v324 + 64);
    v255[1] = 0;
    v256 = *a5;
    *v255 = *a5;
    v257 = *(_QWORD **)(v324 + 160);
    v258 = a5[1];
    if (v258)
    {
      v259 = (unint64_t *)(v258 + 8);
      do
        v260 = __ldxr(v259);
      while (__stxr(v260 + 1, v259));
    }
    v261 = (std::__shared_weak_count *)v257[1];
    *v257 = v256;
    v257[1] = v258;
    if (v261)
    {
      v262 = (unint64_t *)&v261->__shared_owners_;
      do
        v263 = __ldaxr(v262);
      while (__stlxr(v263 - 1, v262));
      if (!v263)
      {
        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
        std::__shared_weak_count::__release_weak(v261);
      }
    }
    v322 = v84;
    if (v314)
    {
      v264 = *(_QWORD *)(a1 + 256);
      v208 = *(std::__shared_weak_count **)(a1 + 264);
      if (v208)
      {
        v265 = (unint64_t *)&v208->__shared_owners_;
        do
          v266 = __ldxr(v265);
        while (__stxr(v266 + 1, v265));
      }
      if (!v264 || **(_QWORD **)(v264 + 40) != *(_QWORD *)(v324 + 8))
      {
        v267 = *(std::__shared_weak_count **)(v324 + 24);
        *(_QWORD *)(v324 + 16) = 0;
        *(_QWORD *)(v324 + 24) = 0;
        if (v267)
        {
          v268 = (unint64_t *)&v267->__shared_owners_;
          do
            v269 = __ldaxr(v268);
          while (__stlxr(v269 - 1, v268));
          goto LABEL_307;
        }
        goto LABEL_308;
      }
      v270 = *(_QWORD *)(v324 + 16);
      if (v270 && v270 != v264)
        ggl::PipelineSetup::resetData(v324);
      if (v208)
      {
        v271 = (unint64_t *)&v208->__shared_owners_;
        do
          v272 = __ldxr(v271);
        while (__stxr(v272 + 1, v271));
      }
      v267 = *(std::__shared_weak_count **)(v324 + 24);
      *(_QWORD *)(v324 + 16) = v264;
      *(_QWORD *)(v324 + 24) = v208;
      if (!v267)
        goto LABEL_308;
      v273 = (unint64_t *)&v267->__shared_owners_;
      do
        v269 = __ldaxr(v273);
      while (__stlxr(v269 - 1, v273));
LABEL_307:
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
        if (!v208)
          goto LABEL_313;
      }
      else
      {
LABEL_308:
        if (!v208)
          goto LABEL_313;
      }
      v274 = (unint64_t *)&v208->__shared_owners_;
      do
        v220 = __ldaxr(v274);
      while (__stlxr(v220 - 1, v274));
      goto LABEL_311;
    }
LABEL_313:
    v276 = (_QWORD *)v83[2];
    v275 = (_QWORD *)v83[3];
    v320 = v83;
    if (v276 != v275)
    {
      if (v322)
        v277 = v322;
      else
        v277 = v324;
      while (1)
      {
        v279 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 88));
        v279[3] = a3;
        v279[4] = v277;
        v279[8] = *v276;
        v279[6] = 2;
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
        v282 = v276[1];
        v281 = v276[2];
        while (v282 != v281)
        {
          v326[0] = *(uint16x4_t *)(v282 + 16);
          v283 = *(_QWORD *)(a18 + 24);
          if (!v283)
            goto LABEL_355;
          if ((*(unsigned int (**)(uint64_t, uint16x4_t *))(*(_QWORD *)v283 + 48))(v283, v326))
          {
            if (*(_QWORD *)(v282 + 8) != *(_QWORD *)v282)
              gm::MultiRange<unsigned long>::push_back((char **)(a1 + 280), (_OWORD *)v282);
          }
          v282 += 24;
        }
        v284 = ggl::Batcher::commit((__int128 **)(a1 + 280), 0, v280);
        v285 = *v284;
        v279[11] = *v284;
        v279[12] = (v284[1] - v285) >> 4;
        v286 = *(_QWORD **)(a7 + 80);
        v287 = *(_QWORD *)(a7 + 88);
        if ((unint64_t)v286 >= v287)
          break;
        if (v286)
          *v286 = v279;
        v278 = v286 + 1;
LABEL_318:
        *(_QWORD *)(a7 + 80) = v278;
        v276 += 4;
        if (v276 == v275)
          goto LABEL_104;
      }
      v288 = *(_QWORD *)(a7 + 72);
      v289 = ((uint64_t)v286 - v288) >> 3;
      v290 = v289 + 1;
      if ((unint64_t)(v289 + 1) >> 61)
        abort();
      v291 = v287 - v288;
      if (v291 >> 2 > v290)
        v290 = v291 >> 2;
      if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFF8)
        v292 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v292 = v290;
      if (v292)
      {
        v293 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a7 + 96) + 16))(*(_QWORD *)(a7 + 96), 8 * v292, 8);
        v294 = (_QWORD *)(v293 + 8 * v289);
        v295 = v293 + 8 * v292;
        if (v293)
          *v294 = v279;
      }
      else
      {
        v295 = 0;
        v294 = (_QWORD *)(8 * v289);
      }
      v297 = *(_QWORD *)(a7 + 72);
      v296 = *(_QWORD *)(a7 + 80);
      v298 = v296 - v297;
      if (v296 != v297)
      {
        v299 = v298 - 8;
        if ((unint64_t)(v298 - 8) < 0x38)
        {
          v300 = v294;
        }
        else
        {
          v300 = v294;
          if ((unint64_t)(v296 - (_QWORD)v294) >= 0x20)
          {
            v301 = (v299 >> 3) + 1;
            v302 = v294 - 2;
            v303 = (__int128 *)(v296 - 16);
            v304 = v301 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v305 = *v303;
              *(v302 - 1) = *(v303 - 1);
              *v302 = v305;
              v302 -= 2;
              v303 -= 2;
              v304 -= 4;
            }
            while (v304);
            v300 = &v294[-(v301 & 0x3FFFFFFFFFFFFFFCLL)];
            v296 -= 8 * (v301 & 0x3FFFFFFFFFFFFFFCLL);
            if (v301 == (v301 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_349:
              v296 = *(_QWORD *)(a7 + 72);
LABEL_350:
              v278 = v294 + 1;
              *(_QWORD *)(a7 + 72) = v300;
              *(_QWORD *)(a7 + 80) = v294 + 1;
              v307 = *(_QWORD *)(a7 + 88);
              *(_QWORD *)(a7 + 88) = v295;
              if (v296)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a7 + 96) + 40))(*(_QWORD *)(a7 + 96), v296, v307 - v296);
              goto LABEL_318;
            }
          }
        }
        do
        {
          v306 = *(_QWORD *)(v296 - 8);
          v296 -= 8;
          *--v300 = v306;
        }
        while (v296 != v297);
        goto LABEL_349;
      }
      v300 = v294;
      goto LABEL_350;
    }
LABEL_104:
    v83 = v320 + 5;
    v84 = v322;
    v85 = v324;
    if (v320 + 5 == v312)
      goto LABEL_354;
  }
LABEL_355:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19FC84450(_Unwind_Exception *a1)
{
  uint64_t v1;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v1 - 184);
  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::layout3DLandmarks(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t i;
  float v39;
  float v40;
  float v41;
  float v42;
  _QWORD *v43;
  int8x8_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  float v54;
  uint64_t (**v55)();
  __n128 (*v56)(uint64_t);
  float v57;
  float v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unsigned int v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  float v79;
  float v80;
  float v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t *v95;
  float v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  __int128 *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  __int128 *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  _QWORD *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float32x4_t v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  __n128 v169;
  uint64_t v170;
  uint64_t v171;
  char **v172;
  char *v173;
  _QWORD *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _OWORD *v190;
  __int128 *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  _BYTE *v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  void *v236;
  char v237;
  char v238;
  char v239;
  char v240;
  uint64_t v241;
  int v242;
  uint64_t *v243;
  uint64_t (*v244)(void);
  uint64_t v245;
  uint64_t *v246;
  uint64_t (**v247)();
  uint64_t *v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v255;
  uint64_t *v256;
  float32x2_t v257;
  int v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  void *__p[2];
  int v263;
  uint64_t v264;
  _BYTE v265[24];
  _BYTE *v266;
  _BYTE v267[24];
  _BYTE *v268;
  _BYTE v269[24];
  _BYTE *v270;
  _BYTE v271[24];
  _BYTE *v272;
  _QWORD v273[3];
  _QWORD *v274;
  _QWORD v275[3];
  _QWORD *v276;
  _BYTE v277[24];
  _BYTE *v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  uint64_t *v281;
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t **)(a4 + 8);
  v6 = (int8x8_t)v5[1];
  if (!*(_QWORD *)&v6)
    return;
  v11 = (uint8x8_t)vcnt_s8(v6);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = 0x7C7EC6C7C111B0D0;
    if (*(_QWORD *)&v6 <= 0x7C7EC6C7C111B0D0uLL)
      v12 = 0x7C7EC6C7C111B0D0uLL % *(_QWORD *)&v6;
  }
  else
  {
    v12 = (*(_QWORD *)&v6 - 1) & 0x7C7EC6C7C111B0D0;
  }
  v13 = *v5;
  v14 = *(_QWORD **)(v13 + 8 * v12);
  if (!v14)
    goto LABEL_24;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_24;
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x7C7EC6C7C111B0D0)
      {
        if (v15[2] == 0x7C7EC6C7C111B0D0)
          goto LABEL_22;
      }
      else if ((v17 & (*(_QWORD *)&v6 - 1)) != v12)
      {
        goto LABEL_24;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x7C7EC6C7C111B0D0)
      break;
    if (v16 >= *(_QWORD *)&v6)
      v16 %= *(_QWORD *)&v6;
    if (v16 != v12)
      goto LABEL_24;
LABEL_11:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_24;
  }
  if (v15[2] != 0x7C7EC6C7C111B0D0)
    goto LABEL_11;
LABEL_22:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x7C7EC6C7C111B0D0)
  {
    v252 = *(_QWORD *)(v18 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v252 = 0;
LABEL_25:
  if (v11.u32[0] > 1uLL)
  {
    v19 = 0x401D4CCE847AB1D1;
    if (*(_QWORD *)&v6 <= 0x401D4CCE847AB1D1uLL)
      v19 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v6;
  }
  else
  {
    v19 = (*(_QWORD *)&v6 - 1) & 0x401D4CCE847AB1D1;
  }
  v20 = *(_QWORD **)(v13 + 8 * v19);
  if (!v20)
    goto LABEL_47;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_47;
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x401D4CCE847AB1D1)
      {
        if (v21[2] == 0x401D4CCE847AB1D1)
          goto LABEL_45;
      }
      else if ((v23 & (*(_QWORD *)&v6 - 1)) != v19)
      {
        goto LABEL_47;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_47;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x401D4CCE847AB1D1)
    {
      if (v22 >= *(_QWORD *)&v6)
        v22 %= *(_QWORD *)&v6;
      if (v22 != v19)
        goto LABEL_47;
      goto LABEL_34;
    }
    if (v21[2] != 0x401D4CCE847AB1D1)
    {
LABEL_34:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_47;
      continue;
    }
    break;
  }
LABEL_45:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x401D4CCE847AB1D1)
  {
    v25 = *(_QWORD *)(v24 + 32);
    goto LABEL_48;
  }
LABEL_47:
  v25 = 0;
LABEL_48:
  if (v11.u32[0] > 1uLL)
  {
    v26 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v6 <= 0x4927EB92E562CC46uLL)
      v26 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v6;
  }
  else
  {
    v26 = (*(_QWORD *)&v6 - 1) & 0x4927EB92E562CC46;
  }
  v27 = *(_QWORD **)(v13 + 8 * v26);
  if (v27)
  {
    v28 = (_QWORD *)*v27;
    if (v28)
    {
      if (v11.u32[0] < 2uLL)
      {
        v29 = *(_QWORD *)&v6 - 1;
        while (1)
        {
          v31 = v28[1];
          if (v31 == 0x4927EB92E562CC46)
          {
            if (v28[2] == 0x4927EB92E562CC46)
              goto LABEL_68;
          }
          else if ((v31 & v29) != v26)
          {
            goto LABEL_71;
          }
          v28 = (_QWORD *)*v28;
          if (!v28)
            goto LABEL_71;
        }
      }
      while (1)
      {
        v30 = v28[1];
        if (v30 == 0x4927EB92E562CC46)
          break;
        if (v30 >= *(_QWORD *)&v6)
          v30 %= *(_QWORD *)&v6;
        if (v30 != v26)
          goto LABEL_71;
LABEL_57:
        v28 = (_QWORD *)*v28;
        if (!v28)
          goto LABEL_71;
      }
      if (v28[2] != 0x4927EB92E562CC46)
        goto LABEL_57;
LABEL_68:
      v32 = v28[5];
      if (*(_QWORD *)(v32 + 8) == 0x4927EB92E562CC46)
      {
        v33 = *(_QWORD *)(v32 + 32);
        if (!v252)
          return;
LABEL_72:
        if (v25 && *(_BYTE *)(v25 + 16))
          v34 = *(_QWORD *)(v25 + 8);
        else
          v34 = 0;
        *(_OWORD *)v261 = 0u;
        *(_OWORD *)__p = 0u;
        v263 = 1065353216;
        v250 = a1 + 52;
        if (a1[55])
        {
          v35 = (_QWORD *)a1[54];
          if (v35)
          {
            do
            {
              v36 = (_QWORD *)*v35;
              operator delete(v35);
              v35 = v36;
            }
            while (v36);
          }
          a1[54] = 0;
          v37 = a1[53];
          if (v37)
          {
            for (i = 0; i != v37; ++i)
              *(_QWORD *)(*v250 + 8 * i) = 0;
          }
          a1[55] = 0;
        }
        v39 = 1.0;
        if (a5 == 1)
        {
          md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(a4 + 8));
          v41 = fmaxf((float)(v40 * 2.0) + -31.0, 0.0);
          v39 = v41 <= 1.0 ? 1.0 - v41 : 0.0;
          if (v39 < 0.00000011921)
            goto LABEL_338;
        }
        if (v33)
          v42 = *(float *)(v33 + 280);
        else
          v42 = 0.0;
        v43 = *(_QWORD **)(a4 + 8);
        v44 = (int8x8_t)v43[1];
        if (!*(_QWORD *)&v44)
          goto LABEL_114;
        v45 = (uint8x8_t)vcnt_s8(v44);
        v45.i16[0] = vaddlv_u8(v45);
        if (v45.u32[0] > 1uLL)
        {
          v46 = 0x1AF456233693CD46;
          if (*(_QWORD *)&v44 <= 0x1AF456233693CD46uLL)
            v46 = 0x1AF456233693CD46uLL % *(_QWORD *)&v44;
        }
        else
        {
          v46 = (*(_QWORD *)&v44 - 1) & 0x1AF456233693CD46;
        }
        v47 = *(_QWORD **)(*v43 + 8 * v46);
        if (!v47)
          goto LABEL_114;
        v48 = (_QWORD *)*v47;
        if (!v48)
          goto LABEL_114;
        if (v45.u32[0] < 2uLL)
        {
          v49 = *(_QWORD *)&v44 - 1;
          while (1)
          {
            v51 = v48[1];
            if (v51 == 0x1AF456233693CD46)
            {
              if (v48[2] == 0x1AF456233693CD46)
                goto LABEL_112;
            }
            else if ((v51 & v49) != v46)
            {
              goto LABEL_114;
            }
            v48 = (_QWORD *)*v48;
            if (!v48)
              goto LABEL_114;
          }
        }
        while (2)
        {
          v50 = v48[1];
          if (v50 != 0x1AF456233693CD46)
          {
            if (v50 >= *(_QWORD *)&v44)
              v50 %= *(_QWORD *)&v44;
            if (v50 != v46)
              goto LABEL_114;
            goto LABEL_101;
          }
          if (v48[2] != 0x1AF456233693CD46)
          {
LABEL_101:
            v48 = (_QWORD *)*v48;
            if (!v48)
              goto LABEL_114;
            continue;
          }
          break;
        }
LABEL_112:
        v52 = v48[5];
        if (*(_QWORD *)(v52 + 8) == 0x1AF456233693CD46)
        {
          v245 = *(_QWORD *)(v52 + 32);
          goto LABEL_115;
        }
LABEL_114:
        v245 = 0;
LABEL_115:
        v53 = *a2;
        v243 = a2[1];
        if (*a2 == v243)
          goto LABEL_338;
        v54 = 1.0 - v42;
        if (a5)
          v55 = (uint64_t (**)())&unk_1E42D2DD0;
        else
          v55 = &off_1E42D2E18;
        v56 = std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#1}>,BOOL ()(unsigned long long)>::__clone;
        if (a5)
          v56 = std::__function::__func<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2},std::allocator<md::featureIdPredicateForPass(md::BuildingPass,unsigned char,md::VenueLogicContext const*,std::unordered_set<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>> const&)::{lambda(unsigned long long)#2}>,BOOL ()(unsigned long long)>::__clone;
        v244 = (uint64_t (*)(void))v56;
        v57 = fmaxf(*(float *)(v245 + 3080) + *(float *)(v245 + 3076), 1.0);
        v58 = 0.5;
        v59 = 1.0;
        v242 = a5;
        v241 = v33;
        v249 = v34;
        v247 = v55;
        while (2)
        {
          v246 = v53;
          v60 = *v53;
          v61 = *(_QWORD *)(*v53 + 384);
          v62 = *v53 + 480;
          v63 = 216;
          if (a5 == 1)
            v63 = 480;
          else
            v62 = *v53 + 216;
          v64 = *(std::__shared_weak_count **)(v62 + 8);
          v259 = *(_QWORD *)(v60 + v63);
          v260 = v64;
          if (v64)
          {
            p_shared_owners = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldxr(p_shared_owners);
            while (__stxr(v66 + 1, p_shared_owners));
          }
          v67 = *(unsigned __int8 *)(v61 + 169);
          v68 = operator new(0x20uLL);
          *v68 = v247;
          v68[1] = v33;
          *((_BYTE *)v68 + 16) = v67;
          v68[3] = v261;
          v278 = v68;
          v69 = operator new(0x20uLL);
          *v69 = v247;
          v69[1] = v33;
          v253 = v67;
          *((_BYTE *)v69 + 16) = v67;
          v69[3] = v250;
          v281 = v69;
          if (v34)
          {
            v70 = v244();
            v71 = operator new(0x30uLL);
            *v71 = &off_1E42CF860;
            v71[1] = v34;
            v71[5] = v70;
            v276 = v71;
            v72 = v281;
            if (v281 == &v279)
            {
              v72 = &v279;
              v73 = 4;
LABEL_135:
              (*(void (**)(void))(*v72 + 8 * v73))();
            }
            else if (v281)
            {
              v73 = 5;
              goto LABEL_135;
            }
          }
          else
          {
            v276 = v69;
          }
          v74 = operator new(0x20uLL);
          *v74 = v247;
          v74[1] = v33;
          *((_BYTE *)v74 + 16) = v253;
          v74[3] = v250;
          v281 = v74;
          if (v34)
          {
            v75 = v244();
            v76 = operator new(0x30uLL);
            *v76 = &off_1E42CF8A8;
            v76[1] = v34;
            v76[5] = v75;
            v274 = v76;
            v77 = v281;
            if (v281 == &v279)
            {
              v77 = &v279;
              v78 = 4;
LABEL_142:
              (*(void (**)(void))(*v77 + 8 * v78))();
            }
            else if (v281)
            {
              v78 = 5;
              goto LABEL_142;
            }
          }
          else
          {
            v274 = v74;
          }
          v79 = *(float *)(v60 + 400);
          v80 = *(float *)(v60 + 404);
          v81 = 1.0;
          if (a5 != 1)
            v81 = *(float *)(v60 + 412);
          v82 = *(float *)(v60 + 408);
          v83 = a1[50];
          v84 = 48;
          if (v79 > v58)
            v84 = 56;
          v85 = 72;
          if (v79 > v58)
            v85 = 80;
          v251 = *(_QWORD *)(v83 + v85);
          v86 = *(_QWORD *)(v83 + v84);
          md::FogInfo::updateFogUniformsWithLayoutContext((uint64_t *)(v60 + 496), a4, (double *)(v60 + 88));
          v87 = *(std::__shared_weak_count **)(v60 + 504);
          v279 = *(_QWORD *)(v60 + 496);
          v280 = v87;
          if (v87)
          {
            v88 = (unint64_t *)&v87->__shared_owners_;
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          v90 = *(double *)(v245 + 496);
          v91 = *(double *)(v245 + 504);
          v92 = *(double *)(v245 + 512);
          v93 = v59
              / (*(double *)(v60 + 632)
               + *(double *)(v60 + 536) * v90
               + *(double *)(v60 + 568) * v91
               + *(double *)(v60 + 600) * v92);
          v94 = v93
              * (*(double *)(v60 + 624)
               + *(double *)(v60 + 528) * v90
               + *(double *)(v60 + 560) * v91
               + *(double *)(v60 + 592) * v92);
          v257 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v60 + 608), *(float64x2_t *)(v60 + 512), v90), *(float64x2_t *)(v60 + 544), v91), *(float64x2_t *)(v60 + 576), v92), v93));
          *(float *)&v90 = v94;
          v258 = LODWORD(v90);
          v95 = *(uint64_t **)(v61 + 936);
          v248 = *(uint64_t **)(v61 + 944);
          if (v95 == v248)
          {
LABEL_313:
            if (v87)
            {
              v223 = (unint64_t *)&v87->__shared_owners_;
              do
                v224 = __ldaxr(v223);
              while (__stlxr(v224 - 1, v223));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            v225 = v274;
            if (v274 == v273)
            {
              v225 = v273;
              v226 = 4;
              a5 = v242;
              v33 = v241;
              v34 = v249;
            }
            else
            {
              a5 = v242;
              v33 = v241;
              v34 = v249;
              if (!v274)
                goto LABEL_323;
              v226 = 5;
            }
            (*(void (**)(void))(*v225 + 8 * v226))();
LABEL_323:
            v227 = v276;
            if (v276 == v275)
            {
              v227 = v275;
              v228 = 4;
            }
            else
            {
              if (!v276)
                goto LABEL_328;
              v228 = 5;
            }
            (*(void (**)(void))(*v227 + 8 * v228))();
LABEL_328:
            v229 = v278;
            if (v278 == v277)
            {
              v229 = v277;
              v230 = 4;
            }
            else
            {
              if (!v278)
              {
LABEL_333:
                v231 = v260;
                if (v260)
                {
                  v232 = (unint64_t *)&v260->__shared_owners_;
                  do
                    v233 = __ldaxr(v232);
                  while (__stlxr(v233 - 1, v232));
                  if (!v233)
                  {
                    ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                    std::__shared_weak_count::__release_weak(v231);
                  }
                }
                v53 = v246 + 1;
                if (v246 + 1 != v243)
                  continue;
LABEL_338:
                v234 = __p[0];
                if (__p[0])
                {
                  do
                  {
                    v235 = (_QWORD *)*v234;
                    operator delete(v234);
                    v234 = v235;
                  }
                  while (v235);
                }
                v236 = v261[0];
                v261[0] = 0;
                if (v236)
                  operator delete(v236);
                return;
              }
              v230 = 5;
            }
            (*(void (**)(void))(*v229 + 8 * v230))();
            goto LABEL_333;
          }
          break;
        }
        v96 = v80 * v39;
        v97 = v82 * v81;
        v98 = fmaxf(v97, 0.1);
        v99 = fmaxf(v81, 0.1);
        while (1)
        {
          v100 = *(_QWORD *)(*v95 + 32);
          v255 = *(_QWORD *)(*v95 + 40);
          v256 = v95;
          if (v100 != v255)
            break;
LABEL_155:
          v101 = a1[50];
          v102 = *(unsigned __int8 *)(a1[47] + 18);
          v103 = *(unsigned __int8 *)(v252 + 32);
          v104 = (uint64_t)v274;
          if (*(_BYTE *)(v101 + 272))
          {
            if (v274)
            {
              if (v274 == v273)
              {
                v272 = v271;
                (*(void (**)(_QWORD *, _BYTE *))(v273[0] + 24))(v273, v271);
LABEL_264:
                v237 = v103 != 0;
                v196 = v253;
                generateSpecularRenderItemsForLandmarkGroup(v101, v95, v251, &v259, &v279, a4, a3, (__int32 *)&v257, v96, v81, v97, v57, v54, v253, v102 != 0, v237, 0, (uint64_t)v271);
                v197 = v272;
                if (v272 == v271)
                {
                  v197 = v271;
                  v198 = 4;
                }
                else
                {
                  if (!v272)
                  {
LABEL_269:
                    if (!v249)
                      goto LABEL_311;
                    v199 = *(_QWORD *)(*v95 + 32);
                    v200 = *(_QWORD *)(*v95 + 40);
                    if (v199 == v200)
                      goto LABEL_311;
                    while (1)
                    {
                      v201 = *(_QWORD *)(v199 + 16);
                      v202 = *(_QWORD *)(v199 + 24);
                      if (v201 != v202)
                        break;
LABEL_276:
                      v199 += 40;
                      if (v199 == v200)
                        goto LABEL_311;
                    }
                    while (1)
                    {
                      v203 = *(_QWORD *)(v201 + 8);
                      v204 = *(_QWORD *)(v201 + 16);
                      if (v203 != v204)
                        break;
LABEL_275:
                      v201 += 32;
                      if (v201 == v202)
                        goto LABEL_276;
                    }
                    while (*(_QWORD *)(v203 + 16) != v249)
                    {
                      v203 += 24;
                      if (v203 == v204)
                        goto LABEL_275;
                    }
                    v205 = a1[50];
                    v206 = *(unsigned __int8 *)(a1[47] + 18);
                    v207 = *(unsigned __int8 *)(v252 + 32);
                    v208 = (uint64_t)v276;
                    if (v276)
                    {
                      if (v276 == v275)
                      {
                        v270 = v269;
                        (*(void (**)(_QWORD *, _BYTE *))(v275[0] + 24))(v275, v269);
LABEL_302:
                        v239 = v207 != 0;
                        v196 = v253;
                        generateSpecularRenderItemsForLandmarkGroup(v205, v95, v251, &v259, &v279, a4, a3, (__int32 *)&v257, v96, v81, v97, v57, v54, v253, v206 != 0, v239, 1, (uint64_t)v269);
                        v221 = v270;
                        if (v270 == v269)
                        {
                          v221 = v269;
LABEL_309:
                          v222 = 4;
                          goto LABEL_310;
                        }
                        goto LABEL_306;
                      }
                      v208 = (*(uint64_t (**)(void))(*v276 + 16))();
                    }
                    v270 = (_BYTE *)v208;
                    goto LABEL_302;
                  }
                  v198 = 5;
                }
                (*(void (**)(void))(*v197 + 8 * v198))();
                goto LABEL_269;
              }
              v104 = (*(uint64_t (**)(void))(*v274 + 16))();
            }
            v272 = (_BYTE *)v104;
            goto LABEL_264;
          }
          if (!v274)
            goto LABEL_262;
          if (v274 != v273)
          {
            v104 = (*(uint64_t (**)(void))(*v274 + 16))();
LABEL_262:
            v268 = (_BYTE *)v104;
            goto LABEL_283;
          }
          v268 = v267;
          (*(void (**)(_QWORD *, _BYTE *))(v273[0] + 24))(v273, v267);
LABEL_283:
          v238 = v103 != 0;
          v196 = v253;
          generateDiffuseRenderItemsForLandmarkGroup(v101, v95, v251, &v259, &v279, a4, a3, (__int32 *)&v257, v96, v81, v97, v57, v54, v253, v102 != 0, v238, 0, (uint64_t)v267);
          v209 = v268;
          if (v268 == v267)
          {
            v209 = v267;
            v210 = 4;
            goto LABEL_287;
          }
          if (v268)
          {
            v210 = 5;
LABEL_287:
            (*(void (**)(void))(*v209 + 8 * v210))();
          }
          if (!v249)
            goto LABEL_311;
          v211 = *(_QWORD *)(*v95 + 32);
          v212 = *(_QWORD *)(*v95 + 40);
          if (v211 == v212)
            goto LABEL_311;
          while (1)
          {
            v213 = *(_QWORD *)(v211 + 16);
            v214 = *(_QWORD *)(v211 + 24);
            if (v213 != v214)
              break;
LABEL_295:
            v211 += 40;
            if (v211 == v212)
              goto LABEL_311;
          }
          while (1)
          {
            v215 = *(_QWORD *)(v213 + 8);
            v216 = *(_QWORD *)(v213 + 16);
            if (v215 != v216)
              break;
LABEL_294:
            v213 += 32;
            if (v213 == v214)
              goto LABEL_295;
          }
          while (*(_QWORD *)(v215 + 16) != v249)
          {
            v215 += 24;
            if (v215 == v216)
              goto LABEL_294;
          }
          v217 = a1[50];
          v218 = *(unsigned __int8 *)(a1[47] + 18);
          v219 = *(unsigned __int8 *)(v252 + 32);
          v220 = (uint64_t)v276;
          if (!v276)
            goto LABEL_300;
          if (v276 != v275)
          {
            v220 = (*(uint64_t (**)(void))(*v276 + 16))();
LABEL_300:
            v266 = (_BYTE *)v220;
            goto LABEL_305;
          }
          v266 = v265;
          (*(void (**)(_QWORD *, _BYTE *))(v275[0] + 24))(v275, v265);
LABEL_305:
          v240 = v219 != 0;
          v196 = v253;
          generateDiffuseRenderItemsForLandmarkGroup(v217, v95, v251, &v259, &v279, a4, a3, (__int32 *)&v257, v96, v81, v97, v57, v54, v253, v218 != 0, v240, 1, (uint64_t)v265);
          v221 = v266;
          if (v266 == v265)
          {
            v221 = v265;
            goto LABEL_309;
          }
LABEL_306:
          if (v221)
          {
            v222 = 5;
LABEL_310:
            (*(void (**)(void))(*(_QWORD *)v221 + 8 * v222))();
          }
LABEL_311:
          md::ObjectGroup::addFeatureIds(*(_QWORD *)(*v95 + 32), *(_QWORD *)(*v95 + 40), v250, v196);
          v95 += 2;
          if (v95 == v248)
          {
            v87 = v280;
            v58 = 0.5;
            v59 = 1.0;
            goto LABEL_313;
          }
        }
LABEL_161:
        v105 = *(_QWORD *)a1[50];
        v106 = *(_QWORD *)(v105 + 8);
        if (v106 == *(_QWORD *)v105)
        {
          v118 = *(_QWORD *)(v105 + 88);
          if (!v118)
            goto LABEL_343;
          v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 48))(v118);
          v108 = *(uint64_t **)(v105 + 40);
          v119 = *(_QWORD *)(v105 + 48);
          if ((unint64_t)v108 >= v119)
          {
            v121 = *(_QWORD *)(v105 + 32);
            v122 = ((uint64_t)v108 - v121) >> 3;
            v123 = v122 + 1;
            if ((unint64_t)(v122 + 1) >> 61)
LABEL_346:
              abort();
            v124 = v119 - v121;
            if (v124 >> 2 > v123)
              v123 = v124 >> 2;
            if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
              v125 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v125 = v123;
            if (v125)
            {
              v126 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 16))(*(_QWORD *)(v105 + 56), 8 * v125, 8);
              v116 = (uint64_t *)(v126 + 8 * v122);
              v117 = v126 + 8 * v125;
              if (v126)
                *v116 = v107;
            }
            else
            {
              v117 = 0;
              v116 = (uint64_t *)(8 * v122);
            }
            v137 = *(_QWORD *)(v105 + 32);
            v127 = *(_QWORD *)(v105 + 40);
            v138 = v127 - v137;
            if (v127 != v137)
            {
              v139 = v138 - 8;
              if ((unint64_t)(v138 - 8) < 0x38)
              {
                v131 = v116;
              }
              else
              {
                v131 = v116;
                if ((unint64_t)(v127 - (_QWORD)v116) >= 0x20)
                {
                  v140 = (v139 >> 3) + 1;
                  v141 = v116 - 2;
                  v142 = (__int128 *)(v127 - 16);
                  v143 = v140 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v144 = *v142;
                    *((_OWORD *)v141 - 1) = *(v142 - 1);
                    *(_OWORD *)v141 = v144;
                    v141 -= 4;
                    v142 -= 2;
                    v143 -= 4;
                  }
                  while (v143);
                  v131 = &v116[-(v140 & 0x3FFFFFFFFFFFFFFCLL)];
                  v127 -= 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_208;
                }
              }
              do
              {
                v146 = *(_QWORD *)(v127 - 8);
                v127 -= 8;
                *--v131 = v146;
              }
              while (v127 != v137);
              goto LABEL_208;
            }
LABEL_202:
            v131 = v116;
            goto LABEL_209;
          }
        }
        else
        {
          v107 = *(_QWORD *)(v106 - 8);
          *(_QWORD *)(v105 + 8) = v106 - 8;
          v108 = *(uint64_t **)(v105 + 40);
          v109 = *(_QWORD *)(v105 + 48);
          if ((unint64_t)v108 >= v109)
          {
            v110 = *(_QWORD *)(v105 + 32);
            v111 = ((uint64_t)v108 - v110) >> 3;
            v112 = v111 + 1;
            if ((unint64_t)(v111 + 1) >> 61)
              goto LABEL_346;
            v113 = v109 - v110;
            if (v113 >> 2 > v112)
              v112 = v113 >> 2;
            if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
              v114 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v114 = v112;
            if (v114)
            {
              v115 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 16))(*(_QWORD *)(v105 + 56), 8 * v114, 8);
              v116 = (uint64_t *)(v115 + 8 * v111);
              v117 = v115 + 8 * v114;
              if (v115)
                *v116 = v107;
            }
            else
            {
              v117 = 0;
              v116 = (uint64_t *)(8 * v111);
            }
            v128 = *(_QWORD *)(v105 + 32);
            v127 = *(_QWORD *)(v105 + 40);
            v129 = v127 - v128;
            if (v127 != v128)
            {
              v130 = v129 - 8;
              if ((unint64_t)(v129 - 8) < 0x38)
              {
                v131 = v116;
              }
              else
              {
                v131 = v116;
                if ((unint64_t)(v127 - (_QWORD)v116) >= 0x20)
                {
                  v132 = (v130 >> 3) + 1;
                  v133 = v116 - 2;
                  v134 = (__int128 *)(v127 - 16);
                  v135 = v132 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v136 = *v134;
                    *((_OWORD *)v133 - 1) = *(v134 - 1);
                    *(_OWORD *)v133 = v136;
                    v133 -= 4;
                    v134 -= 2;
                    v135 -= 4;
                  }
                  while (v135);
                  v131 = &v116[-(v132 & 0x3FFFFFFFFFFFFFFCLL)];
                  v127 -= 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_208;
                }
              }
              do
              {
                v145 = *(_QWORD *)(v127 - 8);
                v127 -= 8;
                *--v131 = v145;
              }
              while (v127 != v128);
LABEL_208:
              v127 = *(_QWORD *)(v105 + 32);
LABEL_209:
              v120 = v116 + 1;
              *(_QWORD *)(v105 + 32) = v131;
              *(_QWORD *)(v105 + 40) = v116 + 1;
              v147 = *(_QWORD *)(v105 + 48);
              *(_QWORD *)(v105 + 48) = v117;
              if (v127)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 56) + 40))(*(_QWORD *)(v105 + 56), v127, v147 - v127);
LABEL_211:
              *(_QWORD *)(v105 + 40) = v120;
              v264 = v107;
              v148 = *(_QWORD *)(v105 + 120);
              if (!v148)
              {
LABEL_343:
                std::__throw_bad_function_call[abi:nn180100]();
                __break(1u);
              }
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v148 + 48))(v148, &v264);
              v151 = *(_QWORD **)(v107 + 64);
              v152 = v259;
              v153 = v260;
              *v151 = v259;
              v151[1] = 0;
              v154 = *(uint64_t **)(v107 + 160);
              if (v153)
              {
                v155 = (unint64_t *)&v153->__shared_owners_;
                do
                  v156 = __ldxr(v155);
                while (__stxr(v156 + 1, v155));
              }
              v157 = (std::__shared_weak_count *)v154[1];
              *v154 = v152;
              v154[1] = (uint64_t)v153;
              if (v157)
              {
                v158 = (unint64_t *)&v157->__shared_owners_;
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (!v159)
                {
                  ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                  std::__shared_weak_count::__release_weak(v157);
                }
              }
              v160 = *(_QWORD **)(*(_QWORD *)(v107 + 64) + 16);
              v161 = v160[1];
              v162 = v160[9];
              *(float *)v162 = v99;
              *(float *)(v162 + 4) = v98;
              v163 = *v95;
              *(_DWORD *)(v162 + 16) = *(_DWORD *)(*v95 + 92);
              *(_DWORD *)(v162 + 20) = *(_DWORD *)(v163 + 96);
              *(_DWORD *)(v162 + 24) = *(_DWORD *)(v163 + 100);
              v149.i64[0] = *(_QWORD *)(v163 + 104);
              v149.i32[2] = *(_DWORD *)(v163 + 112);
              v150.i64[0] = *(_QWORD *)(v163 + 92);
              v150.i32[2] = *(_DWORD *)(v163 + 100);
              v164 = vmaxnmq_f32(vsubq_f32(v149, v150), (float32x4_t)0);
              *(_DWORD *)(v162 + 40) = v164.i32[2];
              *(_QWORD *)(v162 + 32) = v164.i64[0];
              if (v160[8] > v161)
                v161 = v160[8];
              v160[7] = 0;
              v160[8] = v161;
              v166 = *(_QWORD **)(v100 + 16);
              v165 = *(_QWORD **)(v100 + 24);
              while (1)
              {
                if (v166 == v165)
                {
                  v100 += 40;
                  v95 = v256;
                  if (v100 == v255)
                    goto LABEL_155;
                  goto LABEL_161;
                }
                v168 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1[50] + 88));
                v168[3] = v86;
                v168[4] = v107;
                v168[8] = *v166;
                v168[6] = 0;
                *(_QWORD *)(a1[50] + 288) = *(_QWORD *)(a1[50] + 280);
                v170 = v166[1];
                v171 = v166[2];
                while (v170 != v171)
                {
                  v264 = *(_QWORD *)(v170 + 16);
                  if (!v278)
                    goto LABEL_343;
                  if ((*(unsigned int (**)(_BYTE *, uint64_t *))(*(_QWORD *)v278 + 48))(v278, &v264)
                    && *(_QWORD *)(v170 + 8) != *(_QWORD *)v170)
                  {
                    gm::MultiRange<unsigned long>::push_back((char **)(a1[50] + 280), (_OWORD *)v170);
                  }
                  v170 += 24;
                }
                v172 = ggl::Batcher::commit((__int128 **)(a1[50] + 280), 0, v169);
                v173 = *v172;
                v168[11] = *v172;
                v168[12] = (v172[1] - v173) >> 4;
                v174 = *(_QWORD **)(a3 + 80);
                v175 = *(_QWORD *)(a3 + 88);
                if ((unint64_t)v174 < v175)
                {
                  if (v174)
                    *v174 = v168;
                  v167 = v174 + 1;
                  goto LABEL_224;
                }
                v176 = *(_QWORD *)(a3 + 72);
                v177 = ((uint64_t)v174 - v176) >> 3;
                v178 = v177 + 1;
                if ((unint64_t)(v177 + 1) >> 61)
                  abort();
                v179 = v175 - v176;
                if (v179 >> 2 > v178)
                  v178 = v179 >> 2;
                if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8)
                  v180 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v180 = v178;
                if (v180)
                {
                  v181 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 16))(*(_QWORD *)(a3 + 96), 8 * v180, 8);
                  v182 = (_QWORD *)(v181 + 8 * v177);
                  v183 = v181 + 8 * v180;
                  if (v181)
                    *v182 = v168;
                }
                else
                {
                  v183 = 0;
                  v182 = (_QWORD *)(8 * v177);
                }
                v185 = *(_QWORD *)(a3 + 72);
                v184 = *(_QWORD *)(a3 + 80);
                v186 = v184 - v185;
                if (v184 == v185)
                {
                  v188 = v182;
                  goto LABEL_257;
                }
                v187 = v186 - 8;
                if ((unint64_t)(v186 - 8) < 0x38)
                {
                  v188 = v182;
                }
                else
                {
                  v188 = v182;
                  if ((unint64_t)(v184 - (_QWORD)v182) >= 0x20)
                  {
                    v189 = (v187 >> 3) + 1;
                    v190 = v182 - 2;
                    v191 = (__int128 *)(v184 - 16);
                    v192 = v189 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v193 = *v191;
                      *(v190 - 1) = *(v191 - 1);
                      *v190 = v193;
                      v190 -= 2;
                      v191 -= 2;
                      v192 -= 4;
                    }
                    while (v192);
                    v188 = &v182[-(v189 & 0x3FFFFFFFFFFFFFFCLL)];
                    v184 -= 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v189 == (v189 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_256;
                  }
                }
                do
                {
                  v194 = *(_QWORD *)(v184 - 8);
                  v184 -= 8;
                  *--v188 = v194;
                }
                while (v184 != v185);
LABEL_256:
                v184 = *(_QWORD *)(a3 + 72);
LABEL_257:
                v167 = v182 + 1;
                *(_QWORD *)(a3 + 72) = v188;
                *(_QWORD *)(a3 + 80) = v182 + 1;
                v195 = *(_QWORD *)(a3 + 88);
                *(_QWORD *)(a3 + 88) = v183;
                if (v184)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 40))(*(_QWORD *)(a3 + 96), v184, v195 - v184);
LABEL_224:
                *(_QWORD *)(a3 + 80) = v167;
                v166 += 4;
              }
            }
            goto LABEL_202;
          }
        }
        if (v108)
          *v108 = v107;
        v120 = v108 + 1;
        goto LABEL_211;
      }
    }
  }
LABEL_71:
  v33 = 0;
  if (v252)
    goto LABEL_72;
}

void sub_19FC8595C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,_QWORD *__p,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;

  v58 = *(_QWORD **)(v56 - 168);
  if (v58 == (_QWORD *)(v56 - 192))
  {
    v59 = 4;
    v58 = (_QWORD *)(v56 - 192);
  }
  else
  {
    if (!v58)
      goto LABEL_6;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_6:
  v60 = *(_QWORD **)(v56 - 200);
  if (v60 == (_QWORD *)(v56 - 224))
  {
    v61 = 4;
    v60 = (_QWORD *)(v56 - 224);
  }
  else
  {
    if (!v60)
    {
LABEL_11:
      if (a30)
      {
        p_shared_owners = (unint64_t *)&a30->__shared_owners_;
        do
          v63 = __ldaxr(p_shared_owners);
        while (__stlxr(v63 - 1, p_shared_owners));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
          std::__shared_weak_count::__release_weak(a30);
        }
      }
      v64 = __p;
      if (__p)
      {
        do
        {
          v65 = (_QWORD *)*v64;
          operator delete(v64);
          v64 = v65;
        }
        while (v65);
      }
      if (a31)
        operator delete(a31);
      _Unwind_Resume(exception_object);
    }
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
  goto LABEL_11;
}

void md::TransitAccessPointLabelFeature::~TransitAccessPointLabelFeature(md::TransitAccessPointLabelFeature *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E42A7E70;
  v2 = *((_QWORD *)this + 85);
  if (v2)
  {
    *((_QWORD *)this + 86) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 88) + 40))(*((_QWORD *)this + 88), v2, *((_QWORD *)this + 87) - v2);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E42A7E70;
  v2 = *((_QWORD *)this + 85);
  if (v2)
  {
    *((_QWORD *)this + 86) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 88) + 40))(*((_QWORD *)this + 88), v2, *((_QWORD *)this + 87) - v2);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::TransitAccessPointLabelFeature::updateDynamicStyling(md::TransitAccessPointLabelFeature *this, LabelManager *a2, md::Label *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 64) + 8))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 64));
  if (!v5)
    return 0;
  v6 = *(_QWORD **)(v5 + 328);
  if (!v6)
    goto LABEL_10;
  v6 = (_QWORD *)v6[20];
  if (!v6)
    goto LABEL_10;
  v7 = *((_QWORD *)this + 84);
  while (1)
  {
    v8 = v6[4];
    if (v8 <= v7)
      break;
LABEL_5:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_10;
  }
  if (v8 < v7)
  {
    ++v6;
    goto LABEL_5;
  }
  LODWORD(v6) = 1;
LABEL_10:
  if (*((unsigned __int8 *)this + 712) != (_DWORD)v6)
  {
    *((_BYTE *)this + 712) = (_BYTE)v6;
    (*(void (**)(md::TransitAccessPointLabelFeature *, LabelManager *))(*(_QWORD *)this + 536))(this, a2);
  }
  return 0;
}

uint64_t md::TransitAccessPointLabelFeature::labelFeatureType(md::TransitAccessPointLabelFeature *this)
{
  return 11;
}

void md::TransitAccessPointLabelFeature::populateStyleQueries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  const FeatureStyleAttributes *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  void **v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 v38;
  size_t v39;
  _QWORD *v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  int *v45;
  int v46;
  unint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[3];
  uint64_t v72;

  v70 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1)
    && (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v70 = v6;
  }
  else
  {
    v6 = 0;
  }
  v66 = 0;
  v67 = 0;
  v68 = 0;
  {
    v60 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v60, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v69 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a1 + 544))(a1, &v66);
  if (*(_BYTE *)(a1 + 712))
  {
    v10 = v67;
    if ((unint64_t)v67 < v68)
    {
      if (v67)
        *(_QWORD *)v67 = 0x200010007;
      v11 = v10 + 8;
LABEL_37:
      v67 = v11;
      goto LABEL_38;
    }
    v12 = (v67 - v66) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v14 = v68 - (_QWORD)v66;
    if ((uint64_t)(v68 - (_QWORD)v66) >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, 8 * v15, 4);
      v17 = (char *)(v16 + 8 * v12);
      v18 = v16 + 8 * v15;
      if (v16)
        *(_QWORD *)v17 = 0x200010007;
    }
    else
    {
      v18 = 0;
      v17 = (char *)(8 * v12);
    }
    v11 = v17 + 8;
    v20 = v66;
    v19 = v67;
    if (v67 == v66)
    {
LABEL_35:
      v66 = v17;
      v67 = v11;
      v29 = v68;
      v68 = v18;
      if (v19)
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v69 + 40))(v69, v19, v29 - (_QWORD)v19);
      goto LABEL_37;
    }
    v21 = v67 - v66 - 8;
    if (v21 < 0x38)
    {
      v23 = v67;
    }
    else if ((unint64_t)(v67 - v17) < 0x20)
    {
      v23 = v67;
    }
    else
    {
      v22 = (v21 >> 3) + 1;
      v23 = &v67[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
      v24 = v17 - 16;
      v25 = v67 - 16;
      v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *(_OWORD *)v25;
        *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      v17 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_34;
    }
    do
    {
      v28 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *((_QWORD *)v17 - 1) = v28;
      v17 -= 8;
    }
    while (v23 != v20);
LABEL_34:
    v19 = v66;
    goto LABEL_35;
  }
LABEL_38:
  v30 = *(const FeatureStyleAttributes **)(a1 + 656);
  v31 = (std::__shared_weak_count *)operator new(0x40uLL);
  v31->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
  v33 = (void **)&v31[1].__vftable;
  FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)&v31[1], v30);
  v64 = v31 + 1;
  v65 = v31;
  v34 = v66;
  if (((v67 - v66) & 0x7FFFFFFF8) != 0)
  {
    v35 = 0;
    v36 = 0;
    v37 = ((unint64_t)(v67 - v66) >> 3);
    v38 = BYTE1(v31[2].__shared_owners_);
    while (1)
    {
      v39 = v38;
      v40 = *v33;
      if (v38)
        break;
LABEL_40:
      v40[v39] = *(_QWORD *)&v34[8 * v35];
      v38 = BYTE1(v31[2].__shared_owners_) + 1;
      BYTE1(v31[2].__shared_owners_) = v38;
      ++v35;
      v36 = 1;
      if (v35 == v37)
      {
        v40 = *v33;
        v39 = v38;
LABEL_57:
        qsort(v40, v39, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_58;
      }
    }
    if (v38 > 0x1Fu)
    {
      do
      {
        v44 = 0;
        v45 = (int *)v40;
        while (1)
        {
          v46 = *v45;
          v45 += 2;
          if (v46 == *(_DWORD *)&v34[8 * v35])
            break;
          if (v39 == ++v44)
            goto LABEL_51;
        }
        HIDWORD(v40[v44]) = *(_DWORD *)&v34[8 * v35 + 4];
LABEL_51:
        ++v35;
      }
      while (v35 != v37);
    }
    else
    {
      do
      {
        v41 = 0;
        v42 = (int *)v40;
        while (1)
        {
          v43 = *v42;
          v42 += 2;
          if (v43 == *(_DWORD *)&v34[8 * v35])
            break;
          if (v39 == ++v41)
            goto LABEL_40;
        }
        HIDWORD(v40[v41]) = *(_DWORD *)&v34[8 * v35++ + 4];
      }
      while (v35 != v37);
    }
    if ((v36 & 1) != 0)
      goto LABEL_57;
  }
LABEL_58:
  v61 = (char *)&v31[1];
  v62 = v31;
  do
    v47 = __ldxr(p_shared_owners);
  while (__stxr(v47 + 1, p_shared_owners));
  md::createFeatureAttributeSet((gss::Allocator *)v71, (uint64_t *)&v61);
  md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v63, a3, v71, (_QWORD *)v6);
  if (v71[0])
  {
    v71[1] = v71[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v72 + 40))(v72, v71[0], v71[2] - v71[0]);
  }
  v48 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v48 >= *(_QWORD *)(a2 + 16))
  {
    v49 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v63);
  }
  else
  {
    if (v48)
    {
      *v48 = v63;
      v63 = 0uLL;
    }
    v49 = v48 + 1;
  }
  *(_QWORD *)(a2 + 8) = v49;
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v62;
  if (v62)
  {
    v54 = (unint64_t *)&v62->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v65;
  if (v65)
  {
    v57 = (unint64_t *)&v65->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v66)
  {
    v67 = v66;
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v69 + 40))(v69, v66, v68 - (_QWORD)v66);
  }
  v59 = v70;
  if (v70)
  {
    if (*(char *)(v70 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v70 + 24) + 40))(*(_QWORD *)(v70 + 24), *(_QWORD *)v70, *(_QWORD *)(v70 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v59, 0x1032C402ED93987);
  }
}

void sub_19FC862E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, v10, v12 - v10);
  }
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

md::BalloonLabelPart *md::TransitAccessPointLabelFeature::newIconPart(md::TransitAccessPointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 __dst;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = **((_QWORD **)a2 + 8);
  if (!v4 || !*(_BYTE *)(v4 + 72))
    return md::PointLabelFeature::newIconPart(this, a2);
  v30 = 0;
  v5 = atomic_load((unsigned __int8 *)(*(_QWORD *)a2 + 3392));
  v6 = v5 & 1;
  *(_QWORD *)&__dst = 0;
  geo::codec::featureGetNativeShield(v4, 0, &__dst, &v30, 0);
  localizedLabel(&v27, (uint64_t *)v4, (char *)__dst, v6, 0);
  v8 = v30;
  if (!v30)
    goto LABEL_24;
  v4 = *((_QWORD *)a2 + 2);
  v9 = *(_QWORD *)(v4 + 296);
  if (!v9)
  {
    v10 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    v9 = *v10;
    *(_QWORD *)(v4 + 296) = *v10;
  }
  v23 = v29;
  if (SHIBYTE(v28) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)v27, *((unint64_t *)&v27 + 1));
  }
  else
  {
    __dst = v27;
    v22 = v28;
  }
  v24 = v8;
  v25 = *(_DWORD *)(v9 + 72);
  v26 = 2;
  md::LabelStyle::shieldIcon(&v19, *((_QWORD *)a2 + 2), *(_QWORD *)a2, *((_QWORD *)a2 + 1), (void **)&__dst, 1, -1);
  v11 = v19;
  if (!v19)
  {
    v13 = v20;
    if (!v20)
      goto LABEL_19;
    goto LABEL_15;
  }
  {
    v18 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v18, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
  v7.n128_f64[0] = md::IconLabelPart::IconLabelPart(v4, &v19);
  v13 = v20;
  if (v20)
  {
LABEL_15:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v7);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_19:
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_21;
LABEL_24:
    v16 = 1;
    if ((SHIBYTE(v28) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v23 + 40))(v23, __dst, v22 & 0x7FFFFFFFFFFFFFFFLL, v7);
  if (!v11)
    goto LABEL_24;
LABEL_21:
  v16 = 0;
  if ((SHIBYTE(v28) & 0x80000000) == 0)
    goto LABEL_26;
LABEL_25:
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)v29 + 40))(v29, v27, v28 & 0x7FFFFFFFFFFFFFFFLL, v7);
LABEL_26:
  if (v16)
    return md::PointLabelFeature::newIconPart(this, a2);
  return (md::BalloonLabelPart *)v4;
}

void sub_19FC86624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (SHIBYTE(a13) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a14 + 40))(a14, a11, a13 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(a20) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((SHIBYTE(a20) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a21 + 40))(a21, a18, a20 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(a1);
}

_BYTE *md::TransitAccessPointLabelFeature::newGraphicAnnotationPart(md::TransitAccessPointLabelFeature *this, const md::PartCreationContext *a2)
{
  char *v4;
  _OWORD *v5;
  __int128 v6;
  unsigned __int8 v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int *v18;
  int v19;
  unsigned __int8 v20;
  int *v21;
  int v22;
  md::LabelStyle *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unsigned __int8 v37;
  md::LabelPart *v38;
  double v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50[2];
  uint64_t v51;
  std::__shared_weak_count *v52;
  char *v53;
  uint64_t v54;
  void *__p[2];
  uint64_t v56;
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 85) == *((_QWORD *)this + 86))
    return 0;
  v4 = (char *)operator new(0x40uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E42DAB40;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_DWORD *)(v4 + 55) = 0;
  v5 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v4 + 3) = v5;
  if (v5)
  {
    *(_QWORD *)&v6 = -1;
    *((_QWORD *)&v6 + 1) = -1;
    v5[14] = v6;
    v5[15] = v6;
    v5[12] = v6;
    v5[13] = v6;
    v5[10] = v6;
    v5[11] = v6;
    v5[8] = v6;
    v5[9] = v6;
    v5[6] = v6;
    v5[7] = v6;
    v5[4] = v6;
    v5[5] = v6;
    v5[2] = v6;
    v5[3] = v6;
    *v5 = v6;
    v5[1] = v6;
  }
  v53 = v4 + 24;
  v54 = (uint64_t)v4;
  {
    v49 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v8 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
  v9 = md::StackLabelPart::StackLabelPart((uint64_t)v8, 1, 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 176))(v9, 7);
  v8[630] = 1;
  v10 = (unsigned __int8 *)*((_QWORD *)this + 85);
  v11 = (unsigned __int8 *)*((_QWORD *)this + 86);
  if (v10 == v11)
  {
LABEL_50:
    (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 8))(v8);
    v8 = 0;
    goto LABEL_51;
  }
  v12 = 0;
  do
  {
    v13 = *v10;
    v14 = (uint64_t)v53;
    v15 = v53[33];
    v16 = *(_DWORD **)v53;
    if (v53[33])
    {
      if (v15 >= 0x20)
      {
        v17 = 0;
        v21 = *(int **)v53;
        while (1)
        {
          v22 = *v21;
          v21 += 2;
          if (v22 == 45)
            break;
          if (v15 == ++v17)
            goto LABEL_19;
        }
      }
      else
      {
        v17 = 0;
        v18 = *(int **)v53;
        while (1)
        {
          v19 = *v18;
          v18 += 2;
          if (v19 == 45)
            break;
          if (v15 == ++v17)
            goto LABEL_13;
        }
      }
      v16[2 * v17 + 1] = v13;
    }
    else
    {
LABEL_13:
      *(_QWORD *)&v16[2 * v15] = (v13 << 32) | 0x2D;
      v20 = *(_BYTE *)(v14 + 33) + 1;
      *(_BYTE *)(v14 + 33) = v20;
      qsort(*(void **)v14, v20, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_19:
    v24 = *((_QWORD *)a2 + 1);
    v23 = (md::LabelStyle *)*((_QWORD *)a2 + 2);
    v25 = *(_QWORD *)a2;
    v26 = (std::__shared_weak_count *)v54;
    v50[0] = v14;
    v50[1] = v54;
    v27 = (uint64_t)v23;
    if (v54)
    {
      v28 = (unint64_t *)(v54 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v27 = *((_QWORD *)a2 + 2);
    }
    v30 = *(_QWORD *)(v27 + 296);
    if (!v30)
    {
      v31 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v27, 0);
      v30 = *v31;
      *(_QWORD *)(v27 + 296) = *v31;
    }
    v32 = *(_BYTE *)(v30 + 93);
    __p[0] = 0;
    __p[1] = 0;
    v56 = 0;
    v58 = 0;
    md::LabelStyle::pointIcon(&v51, v23, v25, v24, v50, 0, 0, 45, 0, v32, 0, (uint64_t)__p);
    v33 = v58;
    if (v58 == v57)
    {
      v33 = v57;
      v34 = 4;
    }
    else
    {
      if (!v58)
        goto LABEL_30;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_30:
    if (SHIBYTE(v56) < 0)
    {
      operator delete(__p[0]);
      if (!v26)
        goto LABEL_37;
    }
    else if (!v26)
    {
      goto LABEL_37;
    }
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (v36)
    {
LABEL_37:
      if (!v51)
        goto LABEL_40;
      goto LABEL_38;
    }
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (!v51)
      goto LABEL_40;
LABEL_38:
    {
      v44 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v44, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v38 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v39 = md::IconLabelPart::IconLabelPart((uint64_t)v38, &v51);
    (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v40 + 176))(v40, 10, v39);
    md::CompositeLabelPart::addLabelPart((uint64_t)v8, v38);
    ++v12;
LABEL_40:
    v41 = v52;
    if (v52)
    {
      v42 = (unint64_t *)&v52->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    ++v10;
  }
  while (v10 != v11);
  if (!v12)
    goto LABEL_50;
LABEL_51:
  v45 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v46 = (unint64_t *)(v54 + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  return v8;
}

void sub_19FC86B8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_19FC86BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::TrafficSuperTile *,std::shared_ptr<altitude::TrafficSuperTile>::__shared_ptr_default_delete<altitude::TrafficSuperTile,altitude::TrafficSuperTile>,std::allocator<altitude::TrafficSuperTile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TrafficSuperTile *,std::shared_ptr<altitude::TrafficSuperTile>::__shared_ptr_default_delete<altitude::TrafficSuperTile,altitude::TrafficSuperTile>,std::allocator<altitude::TrafficSuperTile>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 168);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 88) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(_QWORD *)(v1 + 64);
    if (!v6)
    {
LABEL_24:
      std::mutex::~mutex((std::mutex *)v1);
      JUMPOUT(0x1A1AF4E00);
    }
    v7 = *(_QWORD *)(v1 + 72);
    v8 = *(void **)(v1 + 64);
    if (v7 == v6)
    {
LABEL_23:
      *(_QWORD *)(v1 + 72) = v6;
      operator delete(v8);
      goto LABEL_24;
    }
    while (1)
    {
      v9 = *(std::__shared_weak_count **)(v7 - 8);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
          break;
      }
      v12 = *(void **)(v7 - 40);
      if (v12)
        goto LABEL_18;
LABEL_12:
      v7 -= 72;
      if (v7 == v6)
      {
        v8 = *(void **)(v1 + 64);
        goto LABEL_23;
      }
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(void **)(v7 - 40);
    if (!v12)
      goto LABEL_12;
LABEL_18:
    *(_QWORD *)(v7 - 32) = v12;
    operator delete(v12);
    goto LABEL_12;
  }
  return result;
}

uint64_t ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonCommonStroke::MeshMesh::~MeshMesh(ggl::PolygonCommonStroke::MeshMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::PolygonCommonStroke::MeshMesh::~MeshMesh(ggl::PolygonCommonStroke::MeshMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PolygonCommonStroke::MeshMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::PolygonCommonStroke::MeshMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh>::_allocateNewMesh(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned __int8 v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  std::__shared_count v58;
  unsigned __int8 v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  geo::read_write_lock *v67;
  const char *v68;
  malloc_zone_t *zone;
  uint64_t v70;
  geo::read_write_lock *v71;
  const char *v72;
  malloc_zone_t *v73;
  uint64_t v74;
  geo::read_write_lock *v75;
  const char *v76;
  malloc_zone_t *v77;
  int v78;
  int v79;
  uint64_t v80;
  geo::read_write_lock *v81;
  const char *v82;
  malloc_zone_t *v83;
  int v84;
  uint64_t v85;
  geo::read_write_lock *v86;
  const char *v87;
  malloc_zone_t *v88;
  uint64_t v89;
  uint64_t v90;

  v2 = operator new();
  if ((v3 & 1) == 0
  {
    if ((v65 & 1) == 0
    {
      ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonShadowedStroke::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43D20 = 1;
  }
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_1E42BBC08;
  *(_QWORD *)(v2 + 8) = "VendedMesh";
  *(_QWORD *)(v2 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 56) = &ggl::MeshTyped<ggl::PolygonShadowedStroke::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(v2 + 64) = 0;
  v4 = v2 + 64;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  {
    v66 = operator new();
    *(_QWORD *)(v66 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v66 + 24) = "GeoGL";
    *(_OWORD *)(v66 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v66 = &off_1E42B5668;
    *(_QWORD *)(v66 + 8) = "GeoGL";
    *(_OWORD *)(v66 + 72) = 0u;
    *(_OWORD *)(v66 + 88) = 0u;
    *(_OWORD *)(v66 + 104) = 0u;
    *(_OWORD *)(v66 + 120) = 0u;
    *(_OWORD *)(v66 + 136) = 0u;
    *(_OWORD *)(v66 + 152) = 0u;
    *(_OWORD *)(v66 + 168) = 0u;
    *(_OWORD *)(v66 + 184) = 0u;
    *(_OWORD *)(v66 + 200) = 0u;
    *(_OWORD *)(v66 + 216) = 0u;
    *(_OWORD *)(v66 + 232) = 0u;
    *(_QWORD *)(v66 + 248) = 0;
    *(_OWORD *)(v66 + 56) = 0u;
    v67 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v66 + 56), 0);
    if ((_DWORD)v67)
      geo::read_write_lock::logFailure(v67, (uint64_t)"initialization", v68);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v66 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v66 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v66;
  }
  v6 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 120) = 0;
  v7 = v2 + 120;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 88) = v6;
  {
    v70 = operator new();
    *(_QWORD *)(v70 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v70 + 24) = "GeoGL";
    *(_OWORD *)(v70 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v70 = &off_1E42B5668;
    *(_QWORD *)(v70 + 8) = "GeoGL";
    *(_OWORD *)(v70 + 72) = 0u;
    *(_OWORD *)(v70 + 88) = 0u;
    *(_OWORD *)(v70 + 104) = 0u;
    *(_OWORD *)(v70 + 120) = 0u;
    *(_OWORD *)(v70 + 136) = 0u;
    *(_OWORD *)(v70 + 152) = 0u;
    *(_OWORD *)(v70 + 168) = 0u;
    *(_OWORD *)(v70 + 184) = 0u;
    *(_OWORD *)(v70 + 200) = 0u;
    *(_OWORD *)(v70 + 216) = 0u;
    *(_OWORD *)(v70 + 232) = 0u;
    *(_QWORD *)(v70 + 248) = 0;
    *(_OWORD *)(v70 + 56) = 0u;
    v71 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v70 + 56), 0);
    if ((_DWORD)v71)
      geo::read_write_lock::logFailure(v71, (uint64_t)"initialization", v72);
    v73 = malloc_create_zone(0, 0);
    *(_QWORD *)(v70 + 48) = v73;
    malloc_set_zone_name(v73, "GeoGL");
    *(_QWORD *)(v70 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v70;
    v7 = v2 + 120;
  }
  *(_QWORD *)(v2 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = v7;
  *(_QWORD *)v2 = &off_1E42BDAB8;
  *(_QWORD *)(v2 + 16) = &unk_1E42BDAD8;
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8);
  v10 = *(_QWORD *)(v2 + 72);
  v11 = (v10 - v8) >> 4;
  v12 = v9 - v11;
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      v13 = v8 + 16 * v9;
      while (v10 != v13)
      {
        v14 = *(std::__shared_weak_count **)(v10 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v10 -= 16;
      }
      *(_QWORD *)(v2 + 72) = v13;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v2 + 64, v12);
  }
  *(_QWORD *)v2 = &off_1E42BAD50;
  *(_QWORD *)(v2 + 16) = &unk_1E42BAD70;
  {
    v74 = operator new();
    *(_QWORD *)(v74 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v74 + 24) = "GeoGL";
    *(_OWORD *)(v74 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v74 = &off_1E42B5668;
    *(_QWORD *)(v74 + 8) = "GeoGL";
    *(_OWORD *)(v74 + 72) = 0u;
    *(_OWORD *)(v74 + 88) = 0u;
    *(_OWORD *)(v74 + 104) = 0u;
    *(_OWORD *)(v74 + 120) = 0u;
    *(_OWORD *)(v74 + 136) = 0u;
    *(_OWORD *)(v74 + 152) = 0u;
    *(_OWORD *)(v74 + 168) = 0u;
    *(_OWORD *)(v74 + 184) = 0u;
    *(_OWORD *)(v74 + 200) = 0u;
    *(_OWORD *)(v74 + 216) = 0u;
    *(_OWORD *)(v74 + 232) = 0u;
    *(_QWORD *)(v74 + 248) = 0;
    *(_OWORD *)(v74 + 56) = 0u;
    v75 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v74 + 56), 0);
    if ((_DWORD)v75)
      geo::read_write_lock::logFailure(v75, (uint64_t)"initialization", v76);
    v77 = malloc_create_zone(0, 0);
    *(_QWORD *)(v74 + 48) = v77;
    malloc_set_zone_name(v77, "GeoGL");
    *(_QWORD *)(v74 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v74;
  }
  v18 = ggl::Allocator::instance(void)::alloc;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v19 = &off_1E42E0138;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = &off_1E42B5748;
  v20 = v19 + 32;
  *(_QWORD *)(v19 + 40) = 8;
  *(_DWORD *)(v19 + 48) = 6;
  v21 = 0uLL;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_QWORD *)(v19 + 120) = 0;
  if ((v22 & 1) == 0)
  {
    v89 = v19 + 32;
    v90 = v19;
    v21 = 0uLL;
    v79 = v78;
    v20 = v89;
    v19 = v90;
    if (v79)
    {
      v80 = operator new();
      *(_QWORD *)(v80 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v80 + 24) = "GeoGL";
      *(_OWORD *)(v80 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v80 = &off_1E42B5668;
      *(_QWORD *)(v80 + 8) = "GeoGL";
      *(_OWORD *)(v80 + 72) = 0u;
      *(_OWORD *)(v80 + 88) = 0u;
      *(_OWORD *)(v80 + 104) = 0u;
      *(_OWORD *)(v80 + 120) = 0u;
      *(_OWORD *)(v80 + 136) = 0u;
      *(_OWORD *)(v80 + 152) = 0u;
      *(_OWORD *)(v80 + 168) = 0u;
      *(_OWORD *)(v80 + 184) = 0u;
      *(_OWORD *)(v80 + 200) = 0u;
      *(_OWORD *)(v80 + 216) = 0u;
      *(_OWORD *)(v80 + 232) = 0u;
      *(_QWORD *)(v80 + 248) = 0;
      *(_OWORD *)(v80 + 56) = 0u;
      v81 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v80 + 56), 0);
      if ((_DWORD)v81)
        geo::read_write_lock::logFailure(v81, (uint64_t)"initialization", v82);
      v83 = malloc_create_zone(0, 0);
      *(_QWORD *)(v80 + 48) = v83;
      malloc_set_zone_name(v83, "GeoGL");
      *(_QWORD *)(v80 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v80;
      v20 = v89;
      v19 = v90;
      v21 = 0uLL;
    }
  }
  *(_QWORD *)(v19 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v19 + 136) = 0;
  *(_OWORD *)(v19 + 200) = v21;
  *(_OWORD *)(v19 + 184) = v21;
  *(_OWORD *)(v19 + 168) = v21;
  *(_QWORD *)(v19 + 216) = 0;
  *(_QWORD *)(v19 + 224) = -1;
  *(_OWORD *)(v19 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v19 + 144) = 0;
  *(_QWORD *)(v19 + 240) = "VendedMesh";
  *(_QWORD *)(v19 + 248) = &ggl::PolygonShadowedStroke::defaultVboReflection;
  *(_QWORD *)(v19 + 32) = &off_1E42B7E20;
  *(_QWORD *)(v19 + 232) = &unk_1E42B7E40;
  v23 = *(uint64_t **)v4;
  v24 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 8);
  *v23 = v20;
  v23[1] = v19;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(uint64_t **)(a1 + 8);
  v28 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v27 < v28)
  {
    if (v27)
      *v27 = v2;
    v29 = v27 + 1;
    goto LABEL_56;
  }
  v30 = ((uint64_t)v27 - *(_QWORD *)a1) >> 3;
  v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 61)
    abort();
  v32 = v28 - *(_QWORD *)a1;
  if (v32 >> 2 > v31)
    v31 = v32 >> 2;
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
    v31 = 0x1FFFFFFFFFFFFFFFLL;
  if (v31)
  {
    v33 = 8 * v31;
    v34 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v31, 8);
    v35 = (uint64_t *)(v34 + 8 * v30);
    v31 = v34 + v33;
    if (v34)
      *v35 = v2;
  }
  else
  {
    v35 = (uint64_t *)(8 * v30);
  }
  v29 = v35 + 1;
  v36 = *(char **)a1;
  v37 = *(char **)(a1 + 8);
  if (v37 == *(char **)a1)
  {
    *(_QWORD *)a1 = v35;
    *(_QWORD *)(a1 + 8) = v29;
    v52 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31;
    goto LABEL_54;
  }
  v38 = (unint64_t)&v37[-*(_QWORD *)a1 - 8];
  if (v38 <= 0x57
    || ((v39 = (v36 - v37 + 7) & 0xFFFFFFFFFFFFFFF8,
         v40 = (unint64_t)&v37[v39],
         v41 = (char *)v35 + v39,
         v40 < (unint64_t)v35)
      ? (v42 = v41 >= v37)
      : (v42 = 1),
        !v42))
  {
    v44 = *(char **)(a1 + 8);
    do
    {
LABEL_48:
      v50 = *((_QWORD *)v44 - 1);
      v44 -= 8;
      *(_QWORD *)v44 = 0;
      *--v35 = v50;
    }
    while (v44 != v36);
    goto LABEL_49;
  }
  v43 = (v38 >> 3) + 1;
  v44 = &v37[-8 * (v43 & 0x3FFFFFFFFFFFFFFCLL)];
  v45 = v35 - 2;
  v46 = v37 - 32;
  v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v49 = *(_OWORD *)v46;
    v48 = *((_OWORD *)v46 + 1);
    *(_OWORD *)v46 = 0uLL;
    *((_OWORD *)v46 + 1) = 0uLL;
    v46 -= 32;
    *((_OWORD *)v45 - 1) = v49;
    *(_OWORD *)v45 = v48;
    v45 -= 4;
    v47 -= 4;
  }
  while (v47);
  v35 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_48;
LABEL_49:
  v37 = *(char **)a1;
  v51 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v35;
  *(_QWORD *)(a1 + 8) = v29;
  v52 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v31;
  while (v51 != v37)
  {
    v54 = *((_QWORD *)v51 - 1);
    v51 -= 8;
    v53 = v54;
    *(_QWORD *)v51 = 0;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
LABEL_54:
  if (v37)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v37, v52 - (_QWORD)v37);
LABEL_56:
  *(_QWORD *)(a1 + 8) = v29;
  v55 = *(v29 - 1);
  v56 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v56->__shared_owners_ = 0;
  v57 = (unint64_t *)&v56->__shared_owners_;
  v56->__shared_weak_owners_ = 0;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v56[1].__shared_owners_ = 2;
  LODWORD(v56[1].__shared_weak_owners_) = 262;
  v58 = (std::__shared_count)0;
  v56[2].std::__shared_count = 0u;
  *(_OWORD *)&v56[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v56[3].__shared_owners_ = 0u;
  v56[4].std::__shared_count = 0u;
  v56[4].__shared_weak_owners_ = 0;
  if ((v59 & 1) == 0)
  {
    v58 = (std::__shared_count)0;
    if (v84)
    {
      v85 = operator new();
      *(_QWORD *)(v85 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v85 + 24) = "GeoGL";
      *(_OWORD *)(v85 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v85 = &off_1E42B5668;
      *(_QWORD *)(v85 + 8) = "GeoGL";
      *(_OWORD *)(v85 + 72) = 0u;
      *(_OWORD *)(v85 + 88) = 0u;
      *(_OWORD *)(v85 + 104) = 0u;
      *(_OWORD *)(v85 + 120) = 0u;
      *(_OWORD *)(v85 + 136) = 0u;
      *(_OWORD *)(v85 + 152) = 0u;
      *(_OWORD *)(v85 + 168) = 0u;
      *(_OWORD *)(v85 + 184) = 0u;
      *(_OWORD *)(v85 + 200) = 0u;
      *(_OWORD *)(v85 + 216) = 0u;
      *(_OWORD *)(v85 + 232) = 0u;
      *(_QWORD *)(v85 + 248) = 0;
      *(_OWORD *)(v85 + 56) = 0u;
      v86 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v85 + 56), 0);
      if ((_DWORD)v86)
        geo::read_write_lock::logFailure(v86, (uint64_t)"initialization", v87);
      v88 = malloc_create_zone(0, 0);
      *(_QWORD *)(v85 + 48) = v88;
      malloc_set_zone_name(v88, "GeoGL");
      *(_QWORD *)(v85 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v85;
      v58 = (std::__shared_count)0;
    }
  }
  v56[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v56[5].__shared_owners_ = 0;
  *((std::__shared_count *)v56 + 11) = v58;
  v56[8].std::__shared_count = v58;
  v56[8].__shared_weak_owners_ = 0;
  v56[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v56 + 10) = v58;
  v56[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v56[5].__shared_weak_owners_) = 0;
  LODWORD(v56[10].__vftable) = 0;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v56[1].__shared_owners_ = 2;
  v56[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v56[9].__shared_weak_owners_ = (uint64_t)"IndexData";
  do
    v60 = __ldxr(v57);
  while (__stxr(v60 + 1, v57));
  v61 = *(std::__shared_weak_count **)(v55 + 104);
  *(_QWORD *)(v55 + 96) = v56 + 1;
  *(_QWORD *)(v55 + 104) = v56;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  do
    v64 = __ldaxr(v57);
  while (__stlxr(v64 - 1, v57));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
}

void ggl::MeshVendor<ggl::Glow::MeshMesh>::_allocateNewMesh(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned __int8 v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  std::__shared_count v58;
  unsigned __int8 v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  geo::read_write_lock *v67;
  const char *v68;
  malloc_zone_t *zone;
  uint64_t v70;
  geo::read_write_lock *v71;
  const char *v72;
  malloc_zone_t *v73;
  uint64_t v74;
  geo::read_write_lock *v75;
  const char *v76;
  malloc_zone_t *v77;
  int v78;
  int v79;
  uint64_t v80;
  geo::read_write_lock *v81;
  const char *v82;
  malloc_zone_t *v83;
  int v84;
  uint64_t v85;
  geo::read_write_lock *v86;
  const char *v87;
  malloc_zone_t *v88;
  uint64_t v89;
  uint64_t v90;

  v2 = operator new();
  if ((v3 & 1) == 0
  {
    if ((v65 & 1) == 0
    {
      ggl::MeshTyped<ggl::Glow::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glow::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::Glow::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glow::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43D40 = 1;
  }
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_1E42BBC08;
  *(_QWORD *)(v2 + 8) = "VendedMesh";
  *(_QWORD *)(v2 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 56) = &ggl::MeshTyped<ggl::Glow::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(v2 + 64) = 0;
  v4 = v2 + 64;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  {
    v66 = operator new();
    *(_QWORD *)(v66 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v66 + 24) = "GeoGL";
    *(_OWORD *)(v66 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v66 = &off_1E42B5668;
    *(_QWORD *)(v66 + 8) = "GeoGL";
    *(_OWORD *)(v66 + 72) = 0u;
    *(_OWORD *)(v66 + 88) = 0u;
    *(_OWORD *)(v66 + 104) = 0u;
    *(_OWORD *)(v66 + 120) = 0u;
    *(_OWORD *)(v66 + 136) = 0u;
    *(_OWORD *)(v66 + 152) = 0u;
    *(_OWORD *)(v66 + 168) = 0u;
    *(_OWORD *)(v66 + 184) = 0u;
    *(_OWORD *)(v66 + 200) = 0u;
    *(_OWORD *)(v66 + 216) = 0u;
    *(_OWORD *)(v66 + 232) = 0u;
    *(_QWORD *)(v66 + 248) = 0;
    *(_OWORD *)(v66 + 56) = 0u;
    v67 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v66 + 56), 0);
    if ((_DWORD)v67)
      geo::read_write_lock::logFailure(v67, (uint64_t)"initialization", v68);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v66 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v66 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v66;
  }
  v6 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 120) = 0;
  v7 = v2 + 120;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 88) = v6;
  {
    v70 = operator new();
    *(_QWORD *)(v70 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v70 + 24) = "GeoGL";
    *(_OWORD *)(v70 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v70 = &off_1E42B5668;
    *(_QWORD *)(v70 + 8) = "GeoGL";
    *(_OWORD *)(v70 + 72) = 0u;
    *(_OWORD *)(v70 + 88) = 0u;
    *(_OWORD *)(v70 + 104) = 0u;
    *(_OWORD *)(v70 + 120) = 0u;
    *(_OWORD *)(v70 + 136) = 0u;
    *(_OWORD *)(v70 + 152) = 0u;
    *(_OWORD *)(v70 + 168) = 0u;
    *(_OWORD *)(v70 + 184) = 0u;
    *(_OWORD *)(v70 + 200) = 0u;
    *(_OWORD *)(v70 + 216) = 0u;
    *(_OWORD *)(v70 + 232) = 0u;
    *(_QWORD *)(v70 + 248) = 0;
    *(_OWORD *)(v70 + 56) = 0u;
    v71 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v70 + 56), 0);
    if ((_DWORD)v71)
      geo::read_write_lock::logFailure(v71, (uint64_t)"initialization", v72);
    v73 = malloc_create_zone(0, 0);
    *(_QWORD *)(v70 + 48) = v73;
    malloc_set_zone_name(v73, "GeoGL");
    *(_QWORD *)(v70 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v70;
    v7 = v2 + 120;
  }
  *(_QWORD *)(v2 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = v7;
  *(_QWORD *)v2 = &off_1E42BDC38;
  *(_QWORD *)(v2 + 16) = &unk_1E42BDC58;
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8);
  v10 = *(_QWORD *)(v2 + 72);
  v11 = (v10 - v8) >> 4;
  v12 = v9 - v11;
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      v13 = v8 + 16 * v9;
      while (v10 != v13)
      {
        v14 = *(std::__shared_weak_count **)(v10 - 8);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v10 -= 16;
      }
      *(_QWORD *)(v2 + 72) = v13;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v2 + 64, v12);
  }
  *(_QWORD *)v2 = &off_1E42BB9F8;
  *(_QWORD *)(v2 + 16) = &unk_1E42BBA18;
  {
    v74 = operator new();
    *(_QWORD *)(v74 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v74 + 24) = "GeoGL";
    *(_OWORD *)(v74 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v74 = &off_1E42B5668;
    *(_QWORD *)(v74 + 8) = "GeoGL";
    *(_OWORD *)(v74 + 72) = 0u;
    *(_OWORD *)(v74 + 88) = 0u;
    *(_OWORD *)(v74 + 104) = 0u;
    *(_OWORD *)(v74 + 120) = 0u;
    *(_OWORD *)(v74 + 136) = 0u;
    *(_OWORD *)(v74 + 152) = 0u;
    *(_OWORD *)(v74 + 168) = 0u;
    *(_OWORD *)(v74 + 184) = 0u;
    *(_OWORD *)(v74 + 200) = 0u;
    *(_OWORD *)(v74 + 216) = 0u;
    *(_OWORD *)(v74 + 232) = 0u;
    *(_QWORD *)(v74 + 248) = 0;
    *(_OWORD *)(v74 + 56) = 0u;
    v75 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v74 + 56), 0);
    if ((_DWORD)v75)
      geo::read_write_lock::logFailure(v75, (uint64_t)"initialization", v76);
    v77 = malloc_create_zone(0, 0);
    *(_QWORD *)(v74 + 48) = v77;
    malloc_set_zone_name(v77, "GeoGL");
    *(_QWORD *)(v74 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v74;
  }
  v18 = ggl::Allocator::instance(void)::alloc;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v19 = &off_1E42E0250;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = &off_1E42B5748;
  v20 = v19 + 32;
  *(_QWORD *)(v19 + 40) = 8;
  *(_DWORD *)(v19 + 48) = 6;
  v21 = 0uLL;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_QWORD *)(v19 + 120) = 0;
  if ((v22 & 1) == 0)
  {
    v89 = v19 + 32;
    v90 = v19;
    v21 = 0uLL;
    v79 = v78;
    v20 = v89;
    v19 = v90;
    if (v79)
    {
      v80 = operator new();
      *(_QWORD *)(v80 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v80 + 24) = "GeoGL";
      *(_OWORD *)(v80 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v80 = &off_1E42B5668;
      *(_QWORD *)(v80 + 8) = "GeoGL";
      *(_OWORD *)(v80 + 72) = 0u;
      *(_OWORD *)(v80 + 88) = 0u;
      *(_OWORD *)(v80 + 104) = 0u;
      *(_OWORD *)(v80 + 120) = 0u;
      *(_OWORD *)(v80 + 136) = 0u;
      *(_OWORD *)(v80 + 152) = 0u;
      *(_OWORD *)(v80 + 168) = 0u;
      *(_OWORD *)(v80 + 184) = 0u;
      *(_OWORD *)(v80 + 200) = 0u;
      *(_OWORD *)(v80 + 216) = 0u;
      *(_OWORD *)(v80 + 232) = 0u;
      *(_QWORD *)(v80 + 248) = 0;
      *(_OWORD *)(v80 + 56) = 0u;
      v81 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v80 + 56), 0);
      if ((_DWORD)v81)
        geo::read_write_lock::logFailure(v81, (uint64_t)"initialization", v82);
      v83 = malloc_create_zone(0, 0);
      *(_QWORD *)(v80 + 48) = v83;
      malloc_set_zone_name(v83, "GeoGL");
      *(_QWORD *)(v80 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v80;
      v20 = v89;
      v19 = v90;
      v21 = 0uLL;
    }
  }
  *(_QWORD *)(v19 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v19 + 136) = 0;
  *(_OWORD *)(v19 + 200) = v21;
  *(_OWORD *)(v19 + 184) = v21;
  *(_OWORD *)(v19 + 168) = v21;
  *(_QWORD *)(v19 + 216) = 0;
  *(_QWORD *)(v19 + 224) = -1;
  *(_OWORD *)(v19 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v19 + 144) = 0;
  *(_QWORD *)(v19 + 240) = "VendedMesh";
  *(_QWORD *)(v19 + 248) = &ggl::Glow::defaultVboReflection;
  *(_QWORD *)(v19 + 32) = &off_1E42B7FA0;
  *(_QWORD *)(v19 + 232) = &unk_1E42B7FC0;
  v23 = *(uint64_t **)v4;
  v24 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 8);
  *v23 = v20;
  v23[1] = v19;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(uint64_t **)(a1 + 8);
  v28 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v27 < v28)
  {
    if (v27)
      *v27 = v2;
    v29 = v27 + 1;
    goto LABEL_56;
  }
  v30 = ((uint64_t)v27 - *(_QWORD *)a1) >> 3;
  v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 61)
    abort();
  v32 = v28 - *(_QWORD *)a1;
  if (v32 >> 2 > v31)
    v31 = v32 >> 2;
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
    v31 = 0x1FFFFFFFFFFFFFFFLL;
  if (v31)
  {
    v33 = 8 * v31;
    v34 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v31, 8);
    v35 = (uint64_t *)(v34 + 8 * v30);
    v31 = v34 + v33;
    if (v34)
      *v35 = v2;
  }
  else
  {
    v35 = (uint64_t *)(8 * v30);
  }
  v29 = v35 + 1;
  v36 = *(char **)a1;
  v37 = *(char **)(a1 + 8);
  if (v37 == *(char **)a1)
  {
    *(_QWORD *)a1 = v35;
    *(_QWORD *)(a1 + 8) = v29;
    v52 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31;
    goto LABEL_54;
  }
  v38 = (unint64_t)&v37[-*(_QWORD *)a1 - 8];
  if (v38 <= 0x57
    || ((v39 = (v36 - v37 + 7) & 0xFFFFFFFFFFFFFFF8,
         v40 = (unint64_t)&v37[v39],
         v41 = (char *)v35 + v39,
         v40 < (unint64_t)v35)
      ? (v42 = v41 >= v37)
      : (v42 = 1),
        !v42))
  {
    v44 = *(char **)(a1 + 8);
    do
    {
LABEL_48:
      v50 = *((_QWORD *)v44 - 1);
      v44 -= 8;
      *(_QWORD *)v44 = 0;
      *--v35 = v50;
    }
    while (v44 != v36);
    goto LABEL_49;
  }
  v43 = (v38 >> 3) + 1;
  v44 = &v37[-8 * (v43 & 0x3FFFFFFFFFFFFFFCLL)];
  v45 = v35 - 2;
  v46 = v37 - 32;
  v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v49 = *(_OWORD *)v46;
    v48 = *((_OWORD *)v46 + 1);
    *(_OWORD *)v46 = 0uLL;
    *((_OWORD *)v46 + 1) = 0uLL;
    v46 -= 32;
    *((_OWORD *)v45 - 1) = v49;
    *(_OWORD *)v45 = v48;
    v45 -= 4;
    v47 -= 4;
  }
  while (v47);
  v35 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_48;
LABEL_49:
  v37 = *(char **)a1;
  v51 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v35;
  *(_QWORD *)(a1 + 8) = v29;
  v52 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v31;
  while (v51 != v37)
  {
    v54 = *((_QWORD *)v51 - 1);
    v51 -= 8;
    v53 = v54;
    *(_QWORD *)v51 = 0;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
LABEL_54:
  if (v37)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v37, v52 - (_QWORD)v37);
LABEL_56:
  *(_QWORD *)(a1 + 8) = v29;
  v55 = *(v29 - 1);
  v56 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v56->__shared_owners_ = 0;
  v57 = (unint64_t *)&v56->__shared_owners_;
  v56->__shared_weak_owners_ = 0;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v56[1].__shared_owners_ = 2;
  LODWORD(v56[1].__shared_weak_owners_) = 262;
  v58 = (std::__shared_count)0;
  v56[2].std::__shared_count = 0u;
  *(_OWORD *)&v56[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v56[3].__shared_owners_ = 0u;
  v56[4].std::__shared_count = 0u;
  v56[4].__shared_weak_owners_ = 0;
  if ((v59 & 1) == 0)
  {
    v58 = (std::__shared_count)0;
    if (v84)
    {
      v85 = operator new();
      *(_QWORD *)(v85 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v85 + 24) = "GeoGL";
      *(_OWORD *)(v85 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v85 = &off_1E42B5668;
      *(_QWORD *)(v85 + 8) = "GeoGL";
      *(_OWORD *)(v85 + 72) = 0u;
      *(_OWORD *)(v85 + 88) = 0u;
      *(_OWORD *)(v85 + 104) = 0u;
      *(_OWORD *)(v85 + 120) = 0u;
      *(_OWORD *)(v85 + 136) = 0u;
      *(_OWORD *)(v85 + 152) = 0u;
      *(_OWORD *)(v85 + 168) = 0u;
      *(_OWORD *)(v85 + 184) = 0u;
      *(_OWORD *)(v85 + 200) = 0u;
      *(_OWORD *)(v85 + 216) = 0u;
      *(_OWORD *)(v85 + 232) = 0u;
      *(_QWORD *)(v85 + 248) = 0;
      *(_OWORD *)(v85 + 56) = 0u;
      v86 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v85 + 56), 0);
      if ((_DWORD)v86)
        geo::read_write_lock::logFailure(v86, (uint64_t)"initialization", v87);
      v88 = malloc_create_zone(0, 0);
      *(_QWORD *)(v85 + 48) = v88;
      malloc_set_zone_name(v88, "GeoGL");
      *(_QWORD *)(v85 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v85;
      v58 = (std::__shared_count)0;
    }
  }
  v56[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v56[5].__shared_owners_ = 0;
  *((std::__shared_count *)v56 + 11) = v58;
  v56[8].std::__shared_count = v58;
  v56[8].__shared_weak_owners_ = 0;
  v56[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v56 + 10) = v58;
  v56[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v56[5].__shared_weak_owners_) = 0;
  LODWORD(v56[10].__vftable) = 0;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v56[1].__shared_owners_ = 2;
  v56[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v56[9].__shared_weak_owners_ = (uint64_t)"IndexData";
  do
    v60 = __ldxr(v57);
  while (__stxr(v60 + 1, v57));
  v61 = *(std::__shared_weak_count **)(v55 + 104);
  *(_QWORD *)(v55 + 96) = v56 + 1;
  *(_QWORD *)(v55 + 104) = v56;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  do
    v64 = __ldaxr(v57);
  while (__stlxr(v64 - 1, v57));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
}

void md::CoastlineGroup::~CoastlineGroup(md::CoastlineGroup *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      v4 = *(_QWORD **)(v2 + 8);
      v5 = *(_QWORD **)v2;
      if (v4 != v3)
      {
        do
        {
          v7 = *--v4;
          v6 = v7;
          *v4 = 0;
          if (v7)
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 8))(v6, v5);
        }
        while (v4 != v3);
        v5 = *(_QWORD **)v2;
      }
      *(_QWORD *)(v2 + 8) = v3;
      (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v5, *(_QWORD *)(v2 + 16) - (_QWORD)v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40DC1BFBCFLL);
  }
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    v9 = *(_QWORD **)v8;
    if (*(_QWORD *)v8)
    {
      v10 = *(_QWORD **)(v8 + 8);
      v11 = *(_QWORD **)v8;
      if (v10 != v9)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 8))(v12, v11);
        }
        while (v10 != v9);
        v11 = *(_QWORD **)v8;
      }
      *(_QWORD *)(v8 + 8) = v9;
      (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v11, *(_QWORD *)(v8 + 16) - (_QWORD)v11);
    }
    MEMORY[0x1A1AF4E00](v8, 0x20C40DC1BFBCFLL);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void md::CoastlineGroup::addCoastlineFeature(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  float *v50;
  _WORD *v51;
  _WORD *v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  size_t v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  unsigned int v93;
  float *v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float *GhostPoint;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float *v125;
  float *v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  unint64_t v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  size_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  size_t v160;
  size_t v161;
  uint64_t v162;
  size_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  float v176;
  float *v177;
  float v178;
  float v179;
  uint64_t v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float *v186;
  float v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  BOOL v196;
  __int16 *v197;
  BOOL v198;
  int64x2_t v199;
  int64x2_t v200;
  int64x2_t v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  uint64_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int64x2_t v209;
  _WORD *v210;
  int v211;
  int v212;
  _WORD *v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 v216;
  __float2 v217;
  float v218;
  float v219;
  float v220;
  float v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  float v226;
  float v227;
  unint64_t v228;
  unsigned int v229;
  unint64_t v230;
  unint64_t v231;
  float v232;
  char v233;
  char v234;
  uint64_t v235;
  int v236;
  float v237;
  uint64_t v238;
  uint64_t v239;
  __int16 *v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  uint64_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int64x2_t v251;
  _WORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned __int8 v257;
  int v258;
  int v259;
  unint64_t v260;
  __float2 v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  unint64_t v270;
  unsigned int v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  int v275;
  _WORD *v276;
  float v277;
  float v278;
  float v279;
  int v280;
  int v281;
  int v282;
  int v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unsigned __int8 i;
  __float2 v288;
  float v289;
  float v290;
  float v291;
  float v292;
  unint64_t v293;
  float *v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  unsigned int v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  int v304;
  _WORD *v305;
  float v306;
  float v307;
  float v308;
  int v309;
  int v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unsigned __int8 j;
  __float2 v315;
  float v316;
  float v317;
  float v318;
  float v319;
  unint64_t v320;
  unint64_t v321;
  _QWORD *v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  _QWORD *v329;
  int v330;
  int v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  _QWORD *v336;
  int v337;
  int v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  __int16 *v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  uint64_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int64x2_t v354;
  uint64_t v355;
  uint64_t v356;
  __int16 *v357;
  int64x2_t v358;
  int64x2_t v359;
  int64x2_t v360;
  int64x2_t v361;
  int64x2_t v362;
  int64x2_t v363;
  uint64_t v364;
  int16x8_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int64x2_t v368;
  uint64_t v369;
  int v370;
  int v371;
  float v372;
  float v373;
  float v374;
  uint64_t v375;
  _QWORD *v376;
  float v377;
  unint64_t v378;
  uint64_t v379;
  float *v380;
  unint64_t v381;
  float v382;
  unint64_t v383;
  float *v384;
  unint64_t v385;
  size_t v386;
  _QWORD *v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  float *v391;
  int v392;
  float v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  float *v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  float *v404;
  uint64_t v405;
  __int128 v406;
  unint64_t v407;
  unint64_t v408;
  __int16 v409;
  uint64_t v410;
  __int128 v411;
  unint64_t v412;
  unint64_t v413;
  __int16 v414;
  uint64_t v415;
  _QWORD v416[2];

  v416[1] = *MEMORY[0x1E0C80C00];
  v396 = *(unsigned int *)(a2 + 100);
  if (!(_DWORD)v396)
    return;
  v2 = (_QWORD *)a2;
  v3 = a1;
  v4 = 0;
  v376 = (_QWORD *)a2;
  v375 = a1;
  while (2)
  {
    v416[0] = 0;
    v404 = (float *)geo::codec::multiSectionFeaturePoints(v2, v4, v416);
    v5 = v416[0] - 2;
    if (v416[0] < 2uLL)
      goto LABEL_5;
    v398 = v4;
    v394 = v416[0];
    v6 = *v404;
    v7 = v404[1];
    v8 = v404[2];
    v9 = v404[3];
    v403 = v416[0] - 1;
    v10 = 4 * (v416[0] - 1);
    v11 = *(_QWORD *)(v3 + 16);
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) - 8);
    v13 = **(_QWORD **)(v12 + 64);
    v14 = *(_QWORD *)(v13 + 8);
    v15 = (*(_QWORD *)(v13 + 48) - *(_QWORD *)(v13 + 40)) / v14;
    v16 = v15 + v10;
    if (v15 + v10 >= 0x10000)
    {
      ggl::MeshVendor<ggl::PolygonShadowedStroke::ShadowPathMesh>::_allocateNewMesh(*(_QWORD *)(v3 + 16));
      v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) - 8);
      v13 = **(_QWORD **)(v12 + 64);
      v14 = *(_QWORD *)(v13 + 8);
      v15 = (*(_QWORD *)(v13 + 48) - *(_QWORD *)(v13 + 40)) / v14;
      v16 = v15 + v10;
    }
    v17 = v14 * v16;
    v18 = *(_QWORD *)(v13 + 72);
    v19 = *(_QWORD *)(v13 + 80) - v18;
    if (v17 != v19)
    {
      if (v17 <= v19)
      {
        if (v17 < v19)
          *(_QWORD *)(v13 + 80) = v18 + v17;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v13 + 72, v17 - v19);
      }
      v20 = *(std::__shared_weak_count **)(v13 + 32);
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      *(_QWORD *)(v13 + 120) = 0;
      *(_DWORD *)(v13 + 112) = 0;
      v23 = *(_QWORD *)(v13 + 80) - *(_QWORD *)(v13 + 72);
      *(_QWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = v23;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 64) = v23;
      v13 = **(_QWORD **)(v12 + 64);
    }
    v24 = 0;
    v411 = 0uLL;
    v25 = *(_QWORD *)(v13 + 8);
    v26 = v25 * v15;
    v27 = v25 * v16;
    if (v27 != v26)
      v24 = *(_QWORD *)(v13 + 72) + v26;
    *(_QWORD *)&v28 = 0;
    *((_QWORD *)&v28 + 1) = v13;
    v411 = v28;
    v412 = v26;
    v413 = v27;
    v415 = v24;
    v414 = 1;
    v29 = *(_QWORD *)(v12 + 96);
    v30 = *(_QWORD *)(v29 + 8);
    v31 = (*(_QWORD *)(v29 + 48) - *(_QWORD *)(v29 + 40)) / v30;
    v405 = 6 * v403;
    v32 = v31 + 6 * v403;
    v33 = v30 * v32;
    v34 = *(_QWORD *)(v29 + 72);
    v35 = *(_QWORD *)(v29 + 80) - v34;
    if (v30 * v32 != v35)
    {
      if (v33 <= v35)
      {
        if (v33 < v35)
          *(_QWORD *)(v29 + 80) = v34 + v33;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v29 + 72, v33 - v35);
      }
      v36 = *(std::__shared_weak_count **)(v29 + 32);
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      *(_QWORD *)(v29 + 120) = 0;
      *(_DWORD *)(v29 + 112) = 0;
      v34 = *(_QWORD *)(v29 + 72);
      v39 = *(_QWORD *)(v29 + 80) - v34;
      *(_QWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = v39;
      *(_QWORD *)(v29 + 56) = 0;
      *(_QWORD *)(v29 + 64) = v39;
      v30 = *(_QWORD *)(v29 + 8);
      v33 = v30 * v32;
    }
    v40 = 1.0 / sqrtf((float)((float)(v8 - v6) * (float)(v8 - v6)) + (float)((float)(v9 - v7) * (float)(v9 - v7)));
    v41 = v40 * (float)(v9 - v7);
    v42 = -(float)((float)(v8 - v6) * v40);
    v406 = 0uLL;
    *(_QWORD *)&v43 = 0;
    *((_QWORD *)&v43 + 1) = v29;
    v44 = v30 * v31;
    v45 = v34 + v30 * v31;
    if (v33 == v30 * v31)
      v46 = 0;
    else
      v46 = v45;
    v406 = v43;
    v407 = v44;
    v408 = v33;
    v410 = v46;
    v409 = 1;
    v47 = v41;
    v48 = v42;
    v49 = v398;
    if (v415)
    {
      v47 = v41;
      v48 = v42;
      if (v46)
      {
        v50 = v404 + 2;
        v51 = (_WORD *)(v415 + 16);
        v52 = (_WORD *)(v46 + 6);
        v53 = v403;
        do
        {
          v54 = *(v50 - 2);
          v55 = *(v50 - 1);
          v56 = *v50;
          v57 = v50[1];
          v50 += 2;
          v58 = 1.0
              / sqrtf((float)((float)(v56 - v54) * (float)(v56 - v54)) + (float)((float)(v57 - v55) * (float)(v57 - v55)));
          v59 = v58 * (float)(v56 - v54);
          v47 = v58 * (float)(v57 - v55);
          v60 = (int)(float)(v54 * 65535.0);
          v61 = (int)(float)(v55 * 65535.0);
          *(v51 - 8) = v60;
          *(v51 - 7) = v61;
          *(v51 - 4) = v60;
          v62 = (int)(float)(v56 * 65535.0);
          v63 = (int)(float)(v57 * 65535.0);
          *(v51 - 3) = v61;
          *v51 = v62;
          v51[4] = v62;
          v51[1] = v63;
          v51[5] = v63;
          LOWORD(v62) = (int)(v47 * 127.5 + 127.5) | ((unsigned __int16)(int)(v59 * 127.5 + 127.5) << 8);
          *(v51 - 6) = v62;
          *(v51 - 5) = 0;
          *(v51 - 1) = -1;
          *(v51 - 2) = v62;
          v51[2] = v62;
          v51[3] = 0;
          v51[6] = v62;
          v51[7] = -1;
          *(v52 - 3) = v15;
          *(v52 - 2) = v15 + 1;
          *v52 = v15 + 1;
          *(v52 - 1) = v15 + 2;
          v52[1] = v15 + 3;
          v52[2] = v15 + 2;
          v15 += 4;
          v51 += 16;
          v52 += 6;
          --v53;
        }
        while (v53);
        v48 = -v59;
      }
    }
    +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
    v64 = objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend((id)v64, "supportsCoastlineGlows");

    if (!(_DWORD)v65)
    {
LABEL_239:
      if (!v410)
        goto LABEL_256;
      goto LABEL_240;
    }
    v67 = 8 * v403;
    if ((unint64_t)(8 * v403) > 0x2000)
    {
      v68 = (float *)malloc_type_malloc(8 * v403, 0x100004000313F17uLL);
    }
    else
    {
      MEMORY[0x1E0C80A78](v66);
      v68 = (float *)((char *)&v369 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v68, v67);
    }
    v390 = v67;
    bzero(v68, v67);
    v69 = v404;
    v70 = v69[3] - v69[1];
    v71 = v69[2] - *v69;
    v72 = 1.0 / sqrtf((float)(v71 * v71) + (float)(v70 * v70));
    v73 = acosf(fminf((float)((float)(v72 * v70) * (float)(v72 * v70))+ (float)((float)-(float)(v71 * v72) * (float)-(float)(v71 * v72)), 1.0));
    LODWORD(v67) = vcvtps_u32_f32(v73 * 2.8648);
    if ((_DWORD)v67)
      v68[1] = v73 / (float)v67;
    *(float *)&v402 = v41;
    v393 = v48;
    *(_DWORD *)v68 = v67;
    if (v403 != 1)
    {
      v64 = (uint64_t)(v68 + 3);
      v65 = (unint64_t)(v404 + 3);
      do
      {
        v81 = *(float *)v65 - *(float *)(v65 - 8);
        v82 = *(float *)(v65 - 4);
        v83 = v82 - *(float *)(v65 - 12);
        v84 = *(float *)(v65 + 4) - v82;
        v85 = *(float *)(v65 + 8) - *(float *)v65;
        v86 = 1.0 / sqrtf((float)(v83 * v83) + (float)(v81 * v81));
        v87 = v86 * v81;
        v88 = -(float)(v83 * v86);
        v89 = 1.0 / sqrtf((float)(v84 * v84) + (float)(v85 * v85));
        v90 = v89 * v85;
        v91 = -(float)(v84 * v89);
        v92 = acosf(fminf(fmaxf((float)((float)(v89 * v85) * v87) + (float)(v91 * v88), -1.0), 1.0));
        v93 = vcvtps_u32_f32(v92 * 2.8648);
        if (v93)
        {
          if ((float)-(float)((float)(v90 * v88) - (float)(v91 * v87)) < 0.0)
            v92 = -v92;
          *(float *)v64 = v92 / (float)v93;
        }
        *(_DWORD *)(v64 - 4) = v93;
        v67 += v93;
        v64 += 8;
        v65 += 8;
        --v5;
      }
      while (v5);
    }
    v74 = &v404[2 * v403];
    v75 = *v404;
    v76 = vabds_f32(*v404, *v74);
    v77 = 0.0;
    if ((v76 <= (float)(fabsf(*v74 + *v404) * 0.000011921) || v76 <= 1.1755e-38)
      && ((v78 = v404[1], v79 = v74[1], v80 = vabds_f32(v78, v79), v80 <= (float)(fabsf(v79 + v78) * 0.000011921))
       || v80 <= 1.1755e-38))
    {
      v94 = &v404[2 * v394];
      v95 = v75 - *(v94 - 4);
      v96 = v404[2] - v75;
      v97 = v78 - *(v94 - 3);
      v98 = v404[3] - v78;
      v99 = 1.0 / sqrtf((float)(v95 * v95) + (float)(v97 * v97));
      v100 = v99 * v97;
      v101 = -(float)(v95 * v99);
      v102 = 1.0 / sqrtf((float)(v96 * v96) + (float)(v98 * v98));
      v103 = v102 * v98;
      v104 = -(float)(v96 * v102);
      v105 = acosf(fminf(fmaxf((float)((float)(v102 * v98) * (float)(v99 * v97)) + (float)(v104 * v101), -1.0), 1.0));
      LODWORD(v65) = vcvtps_u32_f32(v105 * 2.8648);
      if ((_DWORD)v65)
      {
        if ((float)-(float)((float)(v103 * v101) - (float)(v104 * v100)) < 0.0)
          v105 = -v105;
        v77 = v105 / (float)v65;
      }
      else
      {
        v77 = 0.0;
      }
      v67 += v65;
      v392 = 1;
    }
    else
    {
      v392 = 0;
      v65 = 0;
    }
    GhostPoint = (float *)geo::codec::multiSectionFeatureGetGhostPoint((uint64_t)v2, v49, 0);
    v377 = v77;
    v391 = GhostPoint;
    if (GhostPoint)
    {
      v107 = GhostPoint[1];
      v108 = *v404;
      v109 = v404[1];
      v373 = *GhostPoint;
      v110 = v108 - v373;
      v111 = v404[3];
      v112 = v404[2] - v108;
      v372 = v107;
      v113 = v109 - v107;
      v114 = v111 - v109;
      v115 = 1.0 / sqrtf((float)(v110 * v110) + (float)(v113 * v113));
      v116 = v115 * v113;
      v117 = -(float)(v110 * v115);
      v118 = 1.0 / sqrtf((float)(v112 * v112) + (float)(v114 * v114));
      v119 = v118 * v114;
      v120 = -(float)(v112 * v118);
      v121 = acosf(fminf(fmaxf((float)((float)(v118 * v114) * (float)(v115 * v113)) + (float)(v120 * v117), -1.0), 1.0));
      LODWORD(v64) = vcvtps_u32_f32(v121 * 2.8648);
      if ((_DWORD)v64)
      {
        if ((float)-(float)((float)(v119 * v117) - (float)(v120 * v116)) < 0.0)
          v121 = -v121;
        v122 = v121 / (float)v64;
      }
      else
      {
        v122 = 0.0;
      }
      v382 = v122;
      v123 = v393;
      v124 = *(float *)&v402;
      v67 += v64;
    }
    else
    {
      v64 = 0;
      v382 = 0.0;
      v123 = v393;
      v124 = *(float *)&v402;
    }
    v125 = (float *)geo::codec::multiSectionFeatureGetGhostPoint((uint64_t)v2, v49, v403);
    v383 = v65;
    v384 = v74;
    v378 = v64;
    v380 = v125;
    if (v125)
    {
      v126 = &v404[2 * v394];
      v127 = v74[1];
      v128 = *v74 - *(v126 - 4);
      v129 = v127 - *(v126 - 3);
      v130 = *v125 - *v74;
      v131 = v125[1] - v127;
      v132 = 1.0 / sqrtf((float)(v128 * v128) + (float)(v129 * v129));
      v133 = v132 * v129;
      v134 = -(float)(v128 * v132);
      v135 = 1.0 / sqrtf((float)(v130 * v130) + (float)(v131 * v131));
      v136 = v135 * v131;
      v137 = -(float)(v130 * v135);
      v138 = acosf(fminf(fmaxf((float)(v133 * (float)(v135 * v131)) + (float)(v134 * v137), -1.0), 1.0));
      LODWORD(v139) = vcvtps_u32_f32(v138 * 2.8648);
      if ((_DWORD)v139)
      {
        if ((float)-(float)((float)(v134 * v136) - (float)(v133 * v137)) < 0.0)
          v138 = -v138;
        v140 = v138 / (float)v139;
      }
      else
      {
        v140 = 0.0;
      }
      v123 = v393;
      v124 = *(float *)&v402;
      v381 = v139;
      v67 += v139;
      v141 = 2;
    }
    else
    {
      v141 = 0;
      v381 = 0;
      v140 = 0.0;
    }
    v142 = 2;
    if (!v392)
      v142 = 0;
    v143 = v142 + 2 * v403 + 2 * (v391 != 0) + v141 + v67 + 2;
    v144 = *(_QWORD *)(v3 + 24);
    v145 = *(_QWORD *)(*(_QWORD *)(v144 + 8) - 8);
    v146 = **(_QWORD **)(v145 + 64);
    v147 = *(_QWORD *)(v146 + 8);
    v401 = (*(_QWORD *)(v146 + 48) - *(_QWORD *)(v146 + 40)) / v147;
    v148 = v401 + v143;
    if (v401 + v143 >= 0x10000)
    {
      ggl::MeshVendor<ggl::Glow::MeshMesh>::_allocateNewMesh(v144);
      v145 = *(_QWORD *)(*(_QWORD *)(v144 + 8) - 8);
      v146 = **(_QWORD **)(v145 + 64);
      v147 = *(_QWORD *)(v146 + 8);
      v401 = (*(_QWORD *)(v146 + 48) - *(_QWORD *)(v146 + 40)) / v147;
      v148 = v401 + v143;
    }
    v149 = v147 * v148;
    v150 = *(_QWORD *)(v146 + 72);
    v151 = *(_QWORD *)(v146 + 80) - v150;
    if (v147 * v148 != v151)
    {
      if (v147 * v148 <= v151)
      {
        if (v149 < v151)
          *(_QWORD *)(v146 + 80) = v150 + v149;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v146 + 72, v147 * v148 - v151);
      }
      v152 = *(std::__shared_weak_count **)(v146 + 32);
      *(_QWORD *)(v146 + 24) = 0;
      *(_QWORD *)(v146 + 32) = 0;
      if (v152)
      {
        v153 = (unint64_t *)&v152->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      *(_QWORD *)(v146 + 120) = 0;
      *(_DWORD *)(v146 + 112) = 0;
      v155 = *(_QWORD *)(v146 + 80) - *(_QWORD *)(v146 + 72);
      *(_QWORD *)(v146 + 40) = 0;
      *(_QWORD *)(v146 + 48) = v155;
      *(_QWORD *)(v146 + 56) = 0;
      *(_QWORD *)(v146 + 64) = v155;
      v146 = **(_QWORD **)(v145 + 64);
      v147 = *(_QWORD *)(v146 + 8);
      v149 = v147 * v148;
    }
    v388 = v147 * v401;
    if (v149 == v147 * v401)
      v402 = 0;
    else
      v402 = *(_QWORD *)(v146 + 72) + v147 * v401;
    v156 = 3 * v67 + v405;
    v157 = *(_QWORD *)(v145 + 96);
    v158 = *(_QWORD *)(v157 + 8);
    v159 = (*(_QWORD *)(v157 + 48) - *(_QWORD *)(v157 + 40)) / v158;
    v160 = v156 + v159;
    v161 = v158 * (v156 + v159);
    v162 = *(_QWORD *)(v157 + 72);
    v163 = *(_QWORD *)(v157 + 80) - v162;
    v389 = v149;
    v387 = (_QWORD *)v157;
    if (v161 != v163)
    {
      if (v161 <= v163)
      {
        if (v161 < v163)
          *(_QWORD *)(v157 + 80) = v162 + v161;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v157 + 72, v161 - v163);
      }
      v164 = *(std::__shared_weak_count **)(v157 + 32);
      *(_QWORD *)(v157 + 24) = 0;
      *(_QWORD *)(v157 + 32) = 0;
      if (v164)
      {
        v165 = (unint64_t *)&v164->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      *(_QWORD *)(v157 + 120) = 0;
      *(_DWORD *)(v157 + 112) = 0;
      v162 = *(_QWORD *)(v157 + 72);
      v167 = *(_QWORD *)(v157 + 80) - v162;
      *(_QWORD *)(v157 + 40) = 0;
      *(_QWORD *)(v157 + 48) = v167;
      *(_QWORD *)(v157 + 56) = 0;
      *(_QWORD *)(v157 + 64) = v167;
      v158 = *(_QWORD *)(v157 + 8);
      v161 = v158 * v160;
    }
    v168 = v158 * v159;
    v169 = v162 + v168;
    v386 = v161;
    v385 = v168;
    if (v161 == v168)
      v170 = 0;
    else
      v170 = v169;
    if (!v402 || !v170)
      goto LABEL_215;
    v374 = v140;
    v379 = v146;
    v171 = 0;
    v172 = 0;
    v173 = 0;
    v371 = (int)(float)(v47 * 127.0);
    v370 = (int)(float)(v123 * 127.0);
    v174 = (int)(float)(v42 * 127.0);
    v175 = (int)(float)(v124 * 127.0);
    v395 = v170 + 2;
    v397 = v170 + 4;
    v399 = v402 + 23;
    v400 = v68;
    do
    {
      v176 = v42;
      v177 = &v404[2 * v171];
      v179 = *v177;
      v178 = v177[1];
      v180 = v171 + 1;
      v181 = &v404[2 * v171 + 2];
      v182 = *v181 - v179;
      v183 = v181[1] - v178;
      v184 = sqrtf((float)(v182 * v182) + (float)(v183 * v183));
      if (v184 == 0.0)
      {
        v42 = 1.0;
        v185 = 0.0;
      }
      else
      {
        v185 = fminf(fmaxf(v183 / v184, -1.0), 1.0);
        v42 = fminf(fmaxf((float)-v182 / v184, -1.0), 1.0);
      }
      v186 = &v68[2 * v171];
      v187 = v186[1];
      v188 = *(unsigned int *)v186;
      v189 = v173 + v401;
      v405 = v180;
      if (!(_DWORD)v188)
      {
        v194 = v172;
        goto LABEL_139;
      }
      v190 = v189 + 1;
      v191 = v189 + 2;
      if (v188 < 0x18)
      {
        LOWORD(v192) = 0;
        v193 = 0;
LABEL_137:
        v194 = v172;
        do
        {
          v210 = (_WORD *)(v170 + 2 * v194);
          *v210 = v189;
          v210[1] = v190 + v192;
          v210[2] = v191 + v192;
          v194 += 3;
          LOWORD(v192) = ++v193;
        }
        while (v193 < v188);
        goto LABEL_139;
      }
      v193 = 0;
      LOWORD(v192) = 0;
      v195 = 2 * v172;
      v196 = !is_mul_ok(v188 - 1, 6uLL);
      v197 = (__int16 *)(v170 + 2 * v172);
      v198 = v170 + v195 + 6 * (v188 - 1) >= v170 + v195 && v397 + 2 * v172 + 6 * (v188 - 1) >= v397 + 2 * v172;
      if (!v198)
        goto LABEL_137;
      if ((v188 - 1) == 255)
        goto LABEL_137;
      if (v188 - 1 > 0xFF)
        goto LABEL_137;
      if (v395 + v195 + 6 * (v188 - 1) < v395 + v195)
        goto LABEL_137;
      if (v196)
        goto LABEL_137;
      v192 = v188 & 0xFFFFFFF8;
      v199 = vdupq_n_s64(v190);
      v200 = vdupq_n_s64(v191);
      v201 = (int64x2_t)xmmword_19FFB2FE0;
      v202 = (int64x2_t)xmmword_19FFB2FF0;
      v203 = (int64x2_t)xmmword_19FFB3000;
      v204 = (int64x2_t)xmmword_19FFB2E40;
      v205 = v192;
      v206 = vdupq_n_s16(v189);
      do
      {
        v207 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v199, v204), (int32x4_t)vaddq_s64(v199, v203)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v199, v202), (int32x4_t)vaddq_s64(v199, v201)));
        v208 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v200, v204), (int32x4_t)vaddq_s64(v200, v203)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v200, v202), (int32x4_t)vaddq_s64(v200, v201)));
        vst3q_s16(v197, *(int16x8x3_t *)v206.i8);
        v197 += 24;
        v209 = vdupq_n_s64(8uLL);
        v202 = vaddq_s64(v202, v209);
        v203 = vaddq_s64(v203, v209);
        v204 = vaddq_s64(v204, v209);
        v201 = vaddq_s64(v201, v209);
        v205 -= 8;
      }
      while (v205);
      v172 += 3 * (v188 & 0xFFFFFFF8);
      v193 = v188 & 0xFFFFFFF8;
      v194 = v172;
      if (v192 != v188)
        goto LABEL_137;
LABEL_139:
      v211 = (int)(float)(v179 * 65535.0);
      v212 = (int)(float)(v178 * 65535.0);
      v213 = (_WORD *)(v170 + 2 * v194);
      *v213 = v189;
      v213[1] = v189 + v188 + 3;
      v213[2] = v189 + v188 + 2;
      v213[3] = v189;
      v213[4] = v189 + v188 + 1;
      v213[5] = v189 + v188 + 3;
      v214 = v402 + 8 * v173;
      *(_WORD *)v214 = v211;
      *(_WORD *)(v214 + 2) = v212;
      *(_BYTE *)(v214 + 4) = v175;
      *(_BYTE *)(v214 + 5) = v174;
      *(_WORD *)(v214 + 6) = 0;
      *(_WORD *)(v214 + 8) = v211;
      *(_WORD *)(v214 + 10) = v212;
      *(_BYTE *)(v214 + 12) = v175;
      *(_BYTE *)(v214 + 13) = v174;
      *(_WORD *)(v214 + 14) = 127;
      if ((_DWORD)v188)
      {
        v215 = v399 + 8 * v173;
        v216 = 1;
        v173 += 2;
        do
        {
          v217 = __sincosf_stret(v187 * (float)v216);
          v218 = fmaxf(-(float)((float)(v217.__sinval * v176) - (float)(v217.__cosval * v124)), -1.0);
          if (v218 <= 1.0)
            v219 = v218 * 127.0;
          else
            v219 = 127.0;
          v220 = fmaxf((float)(v217.__sinval * v124) + (float)(v217.__cosval * v176), -1.0);
          if (v220 <= 1.0)
            v221 = v220 * 127.0;
          else
            v221 = 127.0;
          *(_WORD *)(v215 - 7) = v211;
          *(_WORD *)(v215 - 5) = v212;
          *(_BYTE *)(v215 - 3) = (int)v219;
          *(_BYTE *)(v215 - 2) = (int)v221;
          *(_WORD *)(v215 - 1) = 127;
          ++v173;
          ++v216;
          v215 += 8;
        }
        while (v188 >= v216);
      }
      else
      {
        v173 += 2;
      }
      v172 = v194 + 6;
      v124 = v185;
      v174 = (int)(float)(v42 * 127.0);
      v175 = (int)(float)(v185 * 127.0);
      v171 = v405;
      v68 = v400;
    }
    while (v405 != v403);
    v222 = (int)(float)(*v384 * 65535.0);
    v223 = (int)(float)(v384[1] * 65535.0);
    v224 = v402 + 8 * v173;
    *(_WORD *)v224 = v222;
    *(_WORD *)(v224 + 2) = v223;
    *(_BYTE *)(v224 + 4) = v175;
    *(_BYTE *)(v224 + 5) = v174;
    *(_WORD *)(v224 + 6) = 0;
    *(_WORD *)(v224 + 8) = v222;
    *(_WORD *)(v224 + 10) = v223;
    *(_BYTE *)(v224 + 12) = v175;
    *(_BYTE *)(v224 + 13) = v174;
    *(_WORD *)(v224 + 14) = 127;
    v225 = v173 + 2;
    if (v392)
    {
      v226 = v382;
      v227 = v374;
      v228 = v383;
      if (v383)
      {
        v229 = v225 + v401;
        v230 = v225 + v401 + 1;
        v231 = v225 + v401 + 2;
        v232 = v377;
        v233 = v371;
        v234 = v370;
        if (v383 < 0x18)
        {
          LOWORD(v235) = 0;
          v236 = 0;
          v146 = v379;
          v237 = v393;
          goto LABEL_167;
        }
        v236 = 0;
        LOWORD(v235) = 0;
        v238 = v170 + 2 * v194;
        v239 = 6 * (v383 - 1);
        v240 = (__int16 *)(v238 + 12);
        v237 = v393;
        if (v238 + 12 + v239 < (unint64_t)(v238 + 12))
        {
          v146 = v379;
LABEL_166:
          v228 = v383;
          goto LABEL_167;
        }
        v146 = v379;
        if (v238 + 16 + v239 < (unint64_t)(v238 + 16) || (v383 - 1) == 255 || v383 - 1 > 0xFF)
          goto LABEL_166;
        v198 = v238 + 14 + v239 >= (unint64_t)(v238 + 14);
        v228 = v383;
        if (!v198)
          goto LABEL_291;
        v235 = v383 & 0xFFFFFFF8;
        v241 = vdupq_n_s64(v230);
        v242 = vdupq_n_s64(v231);
        v243 = (int64x2_t)xmmword_19FFB2FE0;
        v244 = (int64x2_t)xmmword_19FFB2FF0;
        v245 = (int64x2_t)xmmword_19FFB3000;
        v246 = (int64x2_t)xmmword_19FFB2E40;
        v247 = v235;
        v248 = vdupq_n_s16(v229);
        do
        {
          v249 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v241, v246), (int32x4_t)vaddq_s64(v241, v245)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v241, v244), (int32x4_t)vaddq_s64(v241, v243)));
          v250 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v242, v246), (int32x4_t)vaddq_s64(v242, v245)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v242, v244), (int32x4_t)vaddq_s64(v242, v243)));
          vst3q_s16(v240, *(int16x8x3_t *)v248.i8);
          v240 += 24;
          v251 = vdupq_n_s64(8uLL);
          v244 = vaddq_s64(v244, v251);
          v245 = vaddq_s64(v245, v251);
          v246 = vaddq_s64(v246, v251);
          v243 = vaddq_s64(v243, v251);
          v247 -= 8;
        }
        while (v247);
        v172 += 3 * v235;
        v236 = v235;
        v228 = v383;
        if (v383 != v235)
        {
LABEL_291:
          do
          {
LABEL_167:
            v252 = (_WORD *)(v170 + 2 * v172);
            *v252 = v229;
            v252[1] = v230 + v235;
            v252[2] = v231 + v235;
            v172 += 3;
            LOWORD(v235) = ++v236;
          }
          while (v228 > v236);
        }
      }
      else
      {
        v146 = v379;
        v237 = v393;
        v232 = v377;
        v233 = v371;
        v234 = v370;
      }
      v253 = v402;
      v254 = v402 + 8 * v225;
      *(_WORD *)v254 = v222;
      *(_WORD *)(v254 + 2) = v223;
      *(_BYTE *)(v254 + 4) = v233;
      *(_BYTE *)(v254 + 5) = v234;
      *(_WORD *)(v254 + 6) = 0;
      v255 = v253 + 8 * v173;
      *(_WORD *)(v255 + 24) = v222;
      *(_WORD *)(v255 + 26) = v223;
      *(_BYTE *)(v255 + 28) = v233;
      *(_BYTE *)(v255 + 29) = v234;
      v225 = v173 + 4;
      *(_WORD *)(v255 + 30) = 127;
      if (v228)
      {
        v256 = v255 + 39;
        v257 = 1;
        v258 = v222;
        v259 = v223;
        v260 = v383;
        do
        {
          v261 = __sincosf_stret(v232 * (float)v257);
          v262 = fmaxf(-(float)((float)(v261.__sinval * v237) - (float)(v261.__cosval * v47)), -1.0);
          if (v262 <= 1.0)
            v263 = v262 * 127.0;
          else
            v263 = 127.0;
          v264 = fmaxf((float)(v261.__sinval * v47) + (float)(v261.__cosval * v237), -1.0);
          if (v264 <= 1.0)
            v265 = v264 * 127.0;
          else
            v265 = 127.0;
          *(_WORD *)(v256 - 7) = v258;
          *(_WORD *)(v256 - 5) = v259;
          *(_BYTE *)(v256 - 3) = (int)v263;
          *(_BYTE *)(v256 - 2) = (int)v265;
          *(_WORD *)(v256 - 1) = 127;
          ++v225;
          ++v257;
          v256 += 8;
        }
        while (v260 >= v257);
        v146 = v379;
        v223 = v259;
        v222 = v258;
      }
    }
    else
    {
      v146 = v379;
      v226 = v382;
      v227 = v374;
    }
    if (v391)
    {
      v266 = *v404;
      v267 = v404[1];
      v268 = *v404 - v373;
      v269 = v267 - v372;
      if (((vabds_f32(*v404, v373) < 0.0001) & (vabds_f32(v267, v372) < 0.0001)) != 0)
      {
        v268 = 0.0;
        v269 = 1.0;
      }
      v270 = v378;
      LODWORD(v405) = v223;
      if (v378)
      {
        v271 = v225 + v401;
        v272 = v225 + v401 + 1;
        v273 = v225 + v401 + 2;
        if (v378 < 0x18)
        {
          LOWORD(v274) = 0;
          v275 = 0;
          goto LABEL_184;
        }
        v275 = 0;
        LOWORD(v274) = 0;
        v341 = 2 * v172;
        v342 = 6 * (v378 - 1);
        v343 = (__int16 *)(v170 + 2 * v172);
        if (&v343[(unint64_t)v342 / 2] < v343)
          goto LABEL_292;
        if (v397 + v341 + v342 < (unint64_t)(v397 + v341))
          goto LABEL_292;
        if ((v378 - 1) == 255)
          goto LABEL_292;
        if (v378 - 1 > 0xFF)
          goto LABEL_292;
        if (v395 + v341 + v342 < (unint64_t)(v395 + v341))
          goto LABEL_292;
        v274 = v378 & 0xFFFFFFF8;
        v344 = vdupq_n_s64(v272);
        v345 = vdupq_n_s64(v273);
        v346 = (int64x2_t)xmmword_19FFB2FE0;
        v347 = (int64x2_t)xmmword_19FFB2FF0;
        v348 = (int64x2_t)xmmword_19FFB3000;
        v349 = (int64x2_t)xmmword_19FFB2E40;
        v350 = v274;
        v351 = vdupq_n_s16(v271);
        do
        {
          v352 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v344, v349), (int32x4_t)vaddq_s64(v344, v348)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v344, v347), (int32x4_t)vaddq_s64(v344, v346)));
          v353 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v345, v349), (int32x4_t)vaddq_s64(v345, v348)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v345, v347), (int32x4_t)vaddq_s64(v345, v346)));
          vst3q_s16(v343, *(int16x8x3_t *)v351.i8);
          v343 += 24;
          v354 = vdupq_n_s64(8uLL);
          v347 = vaddq_s64(v347, v354);
          v348 = vaddq_s64(v348, v354);
          v349 = vaddq_s64(v349, v354);
          v346 = vaddq_s64(v346, v354);
          v350 -= 8;
        }
        while (v350);
        v172 += 3 * (v270 & 0xFFFFFFF8);
        v275 = v270 & 0xFFFFFFF8;
        if (v270 != v274)
        {
LABEL_292:
          do
          {
LABEL_184:
            v276 = (_WORD *)(v170 + 2 * v172);
            *v276 = v271;
            v276[1] = v272 + v274;
            v276[2] = v273 + v274;
            v172 += 3;
            LOWORD(v274) = ++v275;
          }
          while (v270 > v275);
        }
      }
      v277 = 1.0 / sqrtf((float)(v268 * v268) + (float)(v269 * v269));
      v278 = v277 * v269;
      v279 = -(float)(v268 * v277);
      v280 = (int)(float)((float)(v277 * v269) * 127.0);
      v281 = (int)(float)(v279 * 127.0);
      v282 = (int)(float)(v266 * 65535.0);
      v283 = (int)(float)(v267 * 65535.0);
      v284 = v402 + 8 * v225;
      *(_WORD *)v284 = v282;
      *(_WORD *)(v284 + 2) = v283;
      *(_BYTE *)(v284 + 4) = v280;
      *(_BYTE *)(v284 + 5) = v281;
      *(_WORD *)(v284 + 6) = 0;
      *(_WORD *)(v284 + 8) = v282;
      *(_WORD *)(v284 + 10) = v283;
      *(_BYTE *)(v284 + 12) = v280;
      *(_BYTE *)(v284 + 13) = v281;
      *(_WORD *)(v284 + 14) = 127;
      v225 += 2;
      if (v270)
      {
        v285 = v270;
        LODWORD(v403) = v222;
        v286 = v284 + 23;
        for (i = 1; i <= v285; ++i)
        {
          v288 = __sincosf_stret(v226 * (float)i);
          v289 = fmaxf(-(float)((float)(v288.__sinval * v279) - (float)(v288.__cosval * v278)), -1.0);
          if (v289 <= 1.0)
            v290 = v289 * 127.0;
          else
            v290 = 127.0;
          v291 = fmaxf((float)(v288.__sinval * v278) + (float)(v288.__cosval * v279), -1.0);
          if (v291 <= 1.0)
            v292 = v291 * 127.0;
          else
            v292 = 127.0;
          *(_WORD *)(v286 - 7) = v282;
          *(_WORD *)(v286 - 5) = v283;
          *(_BYTE *)(v286 - 3) = (int)v290;
          *(_BYTE *)(v286 - 2) = (int)v292;
          *(_WORD *)(v286 - 1) = 127;
          ++v225;
          v286 += 8;
        }
        v68 = v400;
        v146 = v379;
        LOWORD(v222) = v403;
      }
      else
      {
        v68 = v400;
        v146 = v379;
      }
      LOWORD(v223) = v405;
    }
    v293 = v381;
    if (v380)
    {
      v294 = &v404[2 * v394];
      v295 = v384[1];
      v296 = *(v294 - 4);
      v297 = *(v294 - 3);
      v298 = 0.0;
      if (((vabds_f32(*v384, v296) < 0.0001) & (vabds_f32(v295, v297) < 0.0001)) != 0)
      {
        v299 = 1.0;
      }
      else
      {
        v298 = *v384 - v296;
        v299 = v295 - v297;
      }
      if (v381)
      {
        v300 = v225 + v401;
        v301 = v225 + v401 + 1;
        v302 = v225 + v401 + 2;
        if (v381 < 0x18)
        {
          LOWORD(v303) = 0;
          v304 = 0;
          goto LABEL_204;
        }
        v304 = 0;
        LOWORD(v303) = 0;
        v355 = 2 * v172;
        v356 = 6 * (v381 - 1);
        v357 = (__int16 *)(v170 + 2 * v172);
        if (&v357[(unint64_t)v356 / 2] < v357
          || v397 + v355 + v356 < (unint64_t)(v397 + v355)
          || (v381 - 1) == 255
          || v381 - 1 > 0xFF
          || v395 + v355 + v356 < (unint64_t)(v395 + v355))
        {
LABEL_204:
          v305 = (_WORD *)(v170 + 2 * v172 + 4);
          do
          {
            *(v305 - 2) = v300;
            *(v305 - 1) = v301 + v303;
            *v305 = v302 + v303;
            v305 += 3;
            LOWORD(v303) = ++v304;
          }
          while (v293 > v304);
        }
        else
        {
          v303 = v381 & 0xFFFFFFF8;
          v358 = vdupq_n_s64(v301);
          v359 = vdupq_n_s64(v302);
          v360 = (int64x2_t)xmmword_19FFB2FE0;
          v361 = (int64x2_t)xmmword_19FFB2FF0;
          v362 = (int64x2_t)xmmword_19FFB3000;
          v363 = (int64x2_t)xmmword_19FFB2E40;
          v364 = v303;
          v365 = vdupq_n_s16(v300);
          do
          {
            v366 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v358, v363), (int32x4_t)vaddq_s64(v358, v362)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v358, v361), (int32x4_t)vaddq_s64(v358, v360)));
            v367 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v359, v363), (int32x4_t)vaddq_s64(v359, v362)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v359, v361), (int32x4_t)vaddq_s64(v359, v360)));
            vst3q_s16(v357, *(int16x8x3_t *)v365.i8);
            v357 += 24;
            v368 = vdupq_n_s64(8uLL);
            v361 = vaddq_s64(v361, v368);
            v362 = vaddq_s64(v362, v368);
            v363 = vaddq_s64(v363, v368);
            v360 = vaddq_s64(v360, v368);
            v364 -= 8;
          }
          while (v364);
          if (v293 != v303)
          {
            v172 += 3 * (v293 & 0xFFFFFFF8);
            v304 = v293 & 0xFFFFFFF8;
            goto LABEL_204;
          }
        }
      }
      v306 = 1.0 / sqrtf((float)(v298 * v298) + (float)(v299 * v299));
      v307 = v306 * v299;
      v308 = -(float)(v298 * v306);
      v309 = (int)(float)((float)(v306 * v299) * 127.0);
      v310 = (int)(float)(v308 * 127.0);
      v311 = v402 + 8 * v225;
      *(_WORD *)v311 = v222;
      *(_WORD *)(v311 + 2) = v223;
      *(_BYTE *)(v311 + 4) = v309;
      *(_BYTE *)(v311 + 5) = v310;
      *(_WORD *)(v311 + 6) = 0;
      *(_WORD *)(v311 + 8) = v222;
      *(_WORD *)(v311 + 10) = v223;
      *(_BYTE *)(v311 + 12) = v309;
      *(_BYTE *)(v311 + 13) = v310;
      *(_WORD *)(v311 + 14) = 127;
      if (v293)
      {
        v312 = v293;
        v313 = v311 + 23;
        for (j = 1; j <= v312; ++j)
        {
          v315 = __sincosf_stret(v227 * (float)j);
          v316 = fmaxf(-(float)((float)(v315.__sinval * v308) - (float)(v315.__cosval * v307)), -1.0);
          if (v316 <= 1.0)
            v317 = v316 * 127.0;
          else
            v317 = 127.0;
          v318 = fmaxf((float)(v315.__sinval * v307) + (float)(v315.__cosval * v308), -1.0);
          if (v318 <= 1.0)
            v319 = v318 * 127.0;
          else
            v319 = 127.0;
          *(_WORD *)(v313 - 7) = v222;
          *(_WORD *)(v313 - 5) = v223;
          *(_BYTE *)(v313 - 3) = (int)v317;
          *(_BYTE *)(v313 - 2) = (int)v319;
          *(_WORD *)(v313 - 1) = 127;
          v313 += 8;
        }
      }
    }
LABEL_215:
    if (v390 > 0x2000)
      free(v68);
    v320 = v389;
    v321 = v388;
    v322 = v387;
    if (v170 && v386 != v385)
    {
      v323 = v387[7];
      v324 = v387[8];
      if (v324 == v323)
        v323 = v387[10] - v387[9];
      if (v385 < v323)
        v323 = v385;
      if (v324 <= v386)
        v324 = v386;
      if (v324 == v323)
        v324 = v323 + v387[10] - v387[9];
      v387[7] = v323;
      v322[8] = v324;
    }
    if (v402)
    {
      v2 = v376;
      v3 = v375;
      if (v320 != v321)
      {
        v325 = *(_QWORD *)(v146 + 56);
        v326 = *(_QWORD *)(v146 + 64);
        if (v326 == v325)
          v325 = *(_QWORD *)(v146 + 80) - *(_QWORD *)(v146 + 72);
        if (v321 < v325)
          v325 = v321;
        if (v326 <= v320)
          v326 = v320;
        if (v326 == v325)
          v326 = v325 + *(_QWORD *)(v146 + 80) - *(_QWORD *)(v146 + 72);
        *(_QWORD *)(v146 + 56) = v325;
        *(_QWORD *)(v146 + 64) = v326;
      }
      goto LABEL_239;
    }
    v2 = v376;
    v3 = v375;
    if (v410)
    {
LABEL_240:
      v328 = v407;
      v327 = v408;
      if (v408 != v407)
      {
        v329 = (_QWORD *)*((_QWORD *)&v406 + 1);
        v330 = v409;
        v331 = HIBYTE(v409);
        if ((_QWORD)v406 && *(_BYTE *)(*((_QWORD *)&v406 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v406 + 64))();
        if (v330 && !v331)
        {
          v332 = v329[7];
          v333 = v329[8];
          if (v333 == v332)
            v332 = v329[10] - v329[9];
          if (v328 < v332)
            v332 = v328;
          if (v333 <= v327)
            v333 = v327;
          if (v333 == v332)
            v333 = v332 + v329[10] - v329[9];
          v329[7] = v332;
          v329[8] = v333;
        }
      }
    }
LABEL_256:
    if (v415)
    {
      v335 = v412;
      v334 = v413;
      if (v413 != v412)
      {
        v336 = (_QWORD *)*((_QWORD *)&v411 + 1);
        v337 = v414;
        v338 = HIBYTE(v414);
        if ((_QWORD)v411 && *(_BYTE *)(*((_QWORD *)&v411 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v411 + 64))();
        if (v337 && !v338)
        {
          v339 = v336[7];
          v340 = v336[8];
          if (v340 == v339)
            v339 = v336[10] - v336[9];
          if (v335 < v339)
            v339 = v335;
          if (v340 <= v334)
            v340 = v334;
          if (v340 == v339)
            v340 = v339 + v336[10] - v336[9];
          v336[7] = v339;
          v336[8] = v340;
        }
      }
    }
    v4 = v398;
LABEL_5:
    if (++v4 != v396)
      continue;
    break;
  }
}

void sub_19FC8A384(_Unwind_Exception *a1)
{
  uint64_t v1;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v1 - 272));
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v1 - 224));
  _Unwind_Resume(a1);
}

void md::PhysicalLabelFeature::~PhysicalLabelFeature(md::PhysicalLabelFeature *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A0D0;
  *((_QWORD *)this + 55) = &unk_1E429A388;
  *((_QWORD *)this + 66) = &off_1E42B5570;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LineLabelFeature::~LineLabelFeature(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A0D0;
  *((_QWORD *)this + 55) = &unk_1E429A388;
  *((_QWORD *)this + 66) = &off_1E42B5570;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LineLabelFeature::~LineLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::PhysicalLabelFeature::newRootPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  double v24;
  unsigned __int8 *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  mdm::Allocator *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  float v47;
  int v48;
  int v49;
  unsigned int v50;
  float v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  double v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  char v65;
  mdm::Allocator *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;

  v5 = *((_QWORD *)a1 + 29);
  if (!v5)
    goto LABEL_12;
  v11 = *(_DWORD *)(a3 + 48);
  v12 = (_QWORD *)((char *)a1 + 232);
  do
  {
    v13 = *(_DWORD *)(v5 + 32);
    v14 = v13 >= v11;
    if (v13 >= v11)
      v15 = (uint64_t *)v5;
    else
      v15 = (uint64_t *)(v5 + 8);
    if (v14)
      v12 = (_QWORD *)v5;
    v5 = *v15;
  }
  while (*v15);
  if (v12 == (_QWORD *)((char *)a1 + 232) || v11 < *((_DWORD *)v12 + 8))
  {
LABEL_12:
    v16 = 0;
    v70 = 0;
    v71 = 0;
    return v16;
  }
  v19 = v12[5];
  v18 = (std::__shared_weak_count *)v12[6];
  v70 = v19;
  v71 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (!v19 || *(float *)(a4 + 236) == 0.0 || *((_QWORD *)a1 + 48) == *((_QWORD *)a1 + 49))
  {
    v16 = 0;
    if (!v18)
      return v16;
    goto LABEL_91;
  }
  v22 = *(unsigned __int8 *)(a3 + 404);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19)
    || ((v23 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19),
         v25 = v23,
         !*(_QWORD *)v23)
     || *((_DWORD *)v23 + 10) != *(_DWORD *)(*(_QWORD *)v23 + 252)
     || (v26 = (uint64_t *)*((_QWORD *)v23 + 3)) == 0
     || *((__int16 *)v23 + 17) < 0)
    && ((md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v23, v23[164], v24),
         !*(_QWORD *)v25)
     || *((_DWORD *)v25 + 10) != *(_DWORD *)(*(_QWORD *)v25 + 252)
     || (v26 = (uint64_t *)*((_QWORD *)v25 + 3)) == 0)
    || *((__int16 *)v25 + 17) < 0
    || (v27 = *v26) == 0
    || (v28 = *(_BYTE *)(v27 + 38), v28 == 0xFF))
  {
    v28 = 0;
  }
  v29 = *(_QWORD *)(a4 + 280);
  if (v29)
  {
    if (vabds_f32(*(float *)(v29 + 8), *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(a4, v29, 0);
      v29 = *(_QWORD *)(a4 + 280);
    }
  }
  else
  {
    v29 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(_QWORD *)(a4 + 280) = v29;
  }
  v30 = *(_QWORD *)v29;
  v31 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 488))(a1);
  v32 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
  v33 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
  if (v31 > 0x6DB6DB6DB6DB6DB7 * ((v33 - v32) >> 3))
  {
    md::LabelFeature::updateTextVector(a1);
    v32 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
    v33 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
  }
  md::TextDataStore::textDataForZoom(&v68, v32, v33, v28, v30 + 72);
  v34 = v68;
  if (v68)
  {
    v35 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v35->__shared_owners_ = 0;
    v35->__shared_weak_owners_ = 0;
    v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v36 = (mdm::Allocator *)md::LabelText::LabelText((uint64_t)&v35[1], v34, (uint64_t)v69, v22);
    v66 = v36;
    v67 = v35;
    v37 = *((_QWORD *)a1 + 24);
    if (v22 >= 0x17)
      v38 = 23;
    else
      v38 = v22;
    v39 = atomic_load((unsigned __int8 *)(v37 + 224 + v38));
    if (v39 == 254)
    {
      if (*(_BYTE *)(v37 + 289))
        v40 = 24;
      else
        v40 = 5;
      v41 = *(unsigned __int8 **)(v37 + 128);
      v42 = *(unsigned __int8 **)(v37 + 136);
      v43 = v42 - v41;
      if (v42 == v41)
      {
        v46 = -1;
      }
      else
      {
        v44 = 0;
        v45 = v43 / 112;
        if (v45 <= 1)
          v45 = 1;
        v46 = -1;
        v47 = 1000.0;
        while (1)
        {
          v48 = *v41;
          v41 += 112;
          v49 = v38 - v48;
          if ((_DWORD)v38 == v48)
            break;
          if (v49 >= 0)
            v50 = v49;
          else
            v50 = -v49;
          if (v50 <= v40)
          {
            v51 = (float)v49;
            if (v49 < 0)
              v51 = (float)v49 * -0.8;
            if (v51 < v47)
              v46 = v44;
            v47 = fminf(v51, v47);
          }
          if (v45 == ++v44)
            goto LABEL_67;
        }
        v46 = v44;
      }
LABEL_67:
      atomic_store(v46, (unsigned __int8 *)(v37 + 224 + v38));
    }
    else
    {
      v46 = (char)v39;
    }
    if ((v46 & 0x80000000) != 0 || ((v52 = *(_QWORD *)(v37 + 128), v66) ? (v53 = v52 == 0) : (v53 = 1), v53))
    {
      v16 = 0;
    }
    else
    {
      v54 = mdm::Allocator::instance(v36);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, 1488, 8);
      v55 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 264))(a1);
      md::CurvedTextLabelPart::CurvedTextLabelPart(v16, v55, &v66, a2, a3, a4, &v70, (uint64_t)&v65, 0.0, a5, 0);
      *(_WORD *)(v16 + 870) = 257;
      v56 = *(double *)(v52 + 112 * v46 + 8);
      if (*(_BYTE *)(*((_QWORD *)a1 + 24) + 290))
        v56 = v56 * 0.0000000249532021;
      if (!*(_BYTE *)(v16 + 1416))
        *(_BYTE *)(v16 + 1416) = 1;
      *(double *)(v16 + 1424) = v56;
    }
    v57 = v67;
    if (v67)
    {
      v58 = (unint64_t *)&v67->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v60 = v69;
  if (v69)
  {
    v61 = (unint64_t *)&v69->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v18 = v71;
  if (v71)
  {
LABEL_91:
    v63 = (unint64_t *)&v18->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v16;
}

void sub_19FC8A9D0(mdm::Allocator *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v5 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v3, 1488);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t (***md::PhysicalLabelFeature::updateText(md::PhysicalLabelFeature *this, const void *a2, unsigned int a3))()
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t (***result)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)();
  md::PhysicalLabelFeature *v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 48);
  for (i = *((_QWORD *)this + 49); i != v5; i -= 64)
  {
    if (*(char *)(i - 9) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), *(_QWORD *)(i - 32), *(_QWORD *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(i - 41) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 40) + 40))(*(_QWORD *)(i - 40), *(_QWORD *)(i - 64), *(_QWORD *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *((_QWORD *)this + 49) = v5;
  v7 = (*(uint64_t (**)(md::PhysicalLabelFeature *, const void *))(*(_QWORD *)this + 64))(this, a2);
  v8 = *((_QWORD *)this + 24);
  if (v7)
  {
    v19 = &off_1E427A1D0;
    v20 = this;
    result = &v19;
    v21 = a3;
    v22 = &v19;
    v10 = *(_QWORD *)(v8 + 128);
    v11 = *(_QWORD *)(v8 + 136);
    if (v10 != v11)
    {
      while (1)
      {
        v12 = *(_QWORD *)(v10 + 16);
        v13 = *(_QWORD *)(v10 + 24);
        if (v12 != v13)
          break;
LABEL_13:
        v10 += 112;
        if (v10 == v11)
          goto LABEL_20;
      }
      while (v22)
      {
        ((void (*)(uint64_t (***)(), uint64_t))(*v22)[6])(v22, v12);
        v12 += 8;
        if (v12 == v13)
          goto LABEL_13;
      }
      goto LABEL_27;
    }
LABEL_23:
    v18 = 4;
    return (uint64_t (***)())(*result)[v18]();
  }
  v19 = &off_1E427A218;
  v20 = this;
  result = &v19;
  v21 = a3;
  v22 = &v19;
  v14 = *(_QWORD *)(v8 + 128);
  v15 = *(_QWORD *)(v8 + 136);
  if (v14 == v15)
    goto LABEL_23;
  do
  {
    v16 = *(_QWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 24);
    if (v16 != v17)
    {
      while (v22)
      {
        ((void (*)(uint64_t (***)(), uint64_t))(*v22)[6])(v22, v16);
        v16 += 8;
        if (v16 == v17)
          goto LABEL_19;
      }
LABEL_27:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
LABEL_19:
    v14 += 112;
  }
  while (v14 != v15);
LABEL_20:
  result = v22;
  if (v22 == &v19)
  {
    v18 = 4;
    result = &v19;
    return (uint64_t (***)())(*result)[v18]();
  }
  if (v22)
  {
    v18 = 5;
    return (uint64_t (***)())(*result)[v18]();
  }
  return result;
}

void sub_19FC8AC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t md::PhysicalLabelFeature::externalFeature(md::PhysicalLabelFeature *this)
{
  return *((_QWORD *)this + 58);
}

uint64_t md::PhysicalLabelFeature::externalLineFeature(md::PhysicalLabelFeature *this)
{
  return *((_QWORD *)this + 58);
}

uint64_t md::PhysicalLabelFeature::resetCustomFeatureAnnotation(uint64_t this)
{
  atomic_store(0, (unsigned __int8 *)(this + 552));
  return this;
}

__int128 *md::PhysicalLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  BOOL v2;

  if (*(_QWORD *)(a1 + 464))
    v2 = *a2 == 1;
  else
    v2 = 0;
  if (v2)
    return (__int128 *)(a1 + 480);
  else
    return md::LineLabelFeature::labelPoint(a1, a2);
}

uint64_t md::PhysicalLabelFeature::featureID(md::PhysicalLabelFeature *this)
{
  return *((_QWORD *)this + 56);
}

uint64_t md::PhysicalLabelFeature::hasValidCustomFeatureAnnotation(md::PhysicalLabelFeature *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 552);
  return v1 & 1;
}

id md::PhysicalLabelFeature::customFeatureAnnotation(id *this)
{
  return this[67];
}

float md::PhysicalLabelFeature::minZoomRank(md::PhysicalLabelFeature *this)
{
  return *((float *)this + 114);
}

float md::PhysicalLabelFeature::maxZoomRank(md::PhysicalLabelFeature *this)
{
  float result;

  result = *((float *)this + 115);
  if (result == 254.0)
    return 252.0;
  return result;
}

uint64_t md::PhysicalLabelFeature::labelFeatureType(md::PhysicalLabelFeature *this)
{
  return 3;
}

uint64_t md::PhysicalLabelFeature::labelFeatureSubtype(md::PhysicalLabelFeature *this)
{
  return 3;
}

uint64_t md::PhysicalLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void **v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  float v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  float v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  float v53;
  _QWORD *v54;
  _QWORD *v55;
  size_t v56;
  unint64_t v57;
  const void **v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  void *__p[2];
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78[20];

  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v78[0] = MEMORY[0x1E0DE4FE0] + 64;
  v70 = v12;
  *(uint64_t *)((char *)&v70 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = (std::ios_base *)((char *)&v70 + *(_QWORD *)(v70 - 24));
  std::ios_base::init(v14, &v71);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v70 = v10 + 24;
  v78[0] = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  v71 = MEMORY[0x1E0DE4FB8] + 16;
  v75 = 0u;
  v76 = 0u;
  v77 = 16;
  {
    v64 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v64, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v67 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v66) = 15;
  strcpy((char *)v65, "PhysicalFeature");
  md::LineLabelFeature::debugRoadString(__p, a1, a2, a3, a4, (uint64_t)v65);
  if ((v69 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v69 & 0x80u) == 0)
    v18 = v69;
  else
    v18 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v70, (uint64_t)v17, v18);
  if ((char)v69 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v66) & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((SHIBYTE(v66) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v67 + 40))(v67, v65[0], v66 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_10:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Physical Feature Attributes:\n", 29);
  v19 = *(float *)(a2 + 472);
  v20 = *(_QWORD *)(a1 + 192);
  LODWORD(v21) = v19;
  if (v19 >= 0x17)
    v21 = 23;
  else
    v21 = v21;
  v22 = atomic_load((unsigned __int8 *)(v20 + 224 + v21));
  if (v22 != 254)
  {
    if ((char)v22 < 0)
      goto LABEL_66;
    goto LABEL_40;
  }
  if (*(_BYTE *)(v20 + 289))
    v23 = 24;
  else
    v23 = 5;
  v24 = *(unsigned __int8 **)(v20 + 128);
  v25 = *(_QWORD *)(v20 + 136) - (_QWORD)v24;
  if (v25)
  {
    v26 = 0;
    v27 = v25 / 112;
    if (v27 <= 1)
      v28 = 1;
    else
      v28 = v27;
    v29 = -1;
    v30 = 1000.0;
    while (1)
    {
      v32 = *v24;
      v24 += 112;
      v31 = v32;
      if ((_DWORD)v21 == v32)
        break;
      v33 = v21 - v31;
      if (v33 >= 0)
        v34 = v33;
      else
        v34 = -v33;
      if (v34 <= v23)
      {
        v35 = (float)v33;
        if (v33 < 0)
          v35 = (float)v33 * -0.8;
        if (v35 < v30)
          v29 = v26;
        v30 = fminf(v35, v30);
      }
      if (v28 == ++v26)
        goto LABEL_39;
    }
    v29 = v26;
  }
  else
  {
    v29 = -1;
  }
LABEL_39:
  atomic_store(v29, (unsigned __int8 *)(v20 + 224 + v21));
  if ((v29 & 0x80000000) == 0)
  {
LABEL_40:
    if (*(_QWORD *)(v20 + 128))
    {
      v36 = *(_QWORD *)(a1 + 192);
      v37 = v36 + 224;
      v38 = atomic_load((unsigned __int8 *)(v36 + 224 + v21));
      if (v38 == 254)
      {
        if (*(_BYTE *)(v36 + 289))
          v39 = 24;
        else
          v39 = 5;
        v41 = v36 + 128;
        v40 = *(unsigned __int8 **)(v36 + 128);
        v42 = *(_QWORD *)(v41 + 8) - (_QWORD)v40;
        if (v42)
        {
          v43 = 0;
          v44 = v42 / 112;
          if (v44 <= 1)
            v45 = 1;
          else
            v45 = v44;
          v46 = -1;
          v47 = 1000.0;
          v48 = v40;
          while (1)
          {
            v50 = *v48;
            v48 += 112;
            v49 = v50;
            if ((_DWORD)v21 == v50)
              break;
            v51 = v21 - v49;
            if (v51 >= 0)
              v52 = v51;
            else
              v52 = -v51;
            if (v52 <= v39)
            {
              v53 = (float)v51;
              if (v51 < 0)
                v53 = (float)v51 * -0.8;
              if (v53 < v47)
                v46 = v43;
              v47 = fminf(v53, v47);
            }
            if (v45 == ++v43)
              goto LABEL_64;
          }
          v46 = v43;
        }
        else
        {
          v46 = -1;
        }
LABEL_64:
        atomic_store(v46, (unsigned __int8 *)(v37 + v21));
      }
      exp2f(v19);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v70, (uint64_t)" Length:", 8);
      v54 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)" Pixels=", 8);
      v55 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
    }
  }
LABEL_66:
  if ((v77 & 0x10) != 0)
  {
    v57 = *((_QWORD *)&v76 + 1);
    if (*((_QWORD *)&v76 + 1) < v74)
    {
      *((_QWORD *)&v76 + 1) = v74;
      v57 = v74;
    }
    v58 = (const void **)&v73;
  }
  else
  {
    if ((v77 & 8) == 0)
    {
      v56 = 0;
      a5[23] = 0;
      goto LABEL_81;
    }
    v58 = (const void **)v72;
    v57 = v72[2];
  }
  v59 = *v58;
  v56 = v57 - (_QWORD)*v58;
  if (v56 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v56 >= 0x17)
  {
    v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v60 = v56 | 7;
    v61 = v60 + 1;
    v62 = operator new(v60 + 1);
    *((_QWORD *)a5 + 1) = v56;
    *((_QWORD *)a5 + 2) = v61 | 0x8000000000000000;
    *(_QWORD *)a5 = v62;
    a5 = v62;
    goto LABEL_80;
  }
  a5[23] = v56;
  if (v56)
LABEL_80:
    memmove(a5, v59, v56);
LABEL_81:
  a5[v56] = 0;
  v70 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v70 + *(_QWORD *)(v70 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v71 = v15 + 16;
  if (SBYTE7(v76) < 0)
    operator delete((void *)v75);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v78);
}

void sub_19FC8B294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t md::PhysicalLabelFeature::enableMultipleLabelsPerLine(md::PhysicalLabelFeature *this)
{
  return 0;
}

uint64_t md::PhysicalLabelFeature::textIndexForFeature(uint64_t *a1, uint64_t *a2, int a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 __dst;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v33 = 0uLL;
  v34 = 0;
  {
    v20 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v35 = mdm::Allocator::instance(void)::alloc;
  v36 = 0uLL;
  v37 = 0;
  {
    v21 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v8 = mdm::Allocator::instance(void)::alloc;
  v38 = mdm::Allocator::instance(void)::alloc;
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1))
  {
    v9 = a1[58];
    v10 = *(_QWORD *)(v9 + 48);
    if (v10 == *(_QWORD *)(v9 + 56))
      goto LABEL_33;
    if (a3)
    {
      if (*(char *)(v10 + 79) < 0)
      {
        if (*(_QWORD *)(v10 + 64))
          goto LABEL_8;
      }
      else if (*(_BYTE *)(v10 + 79))
      {
LABEL_8:
        md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(&__dst, (_QWORD *)(v10 + 56));
LABEL_27:
        if (SHIBYTE(v34) < 0)
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 40))(v35, v33, v34 & 0x7FFFFFFFFFFFFFFFLL);
        v33 = __dst;
        v34 = v28;
        HIBYTE(v28) = 0;
        LOBYTE(__dst) = 0;
        if (SHIBYTE(v37) < 0)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 40))(v8, v36, v37 & 0x7FFFFFFFFFFFFFFFLL);
          v36 = v30;
          v37 = v31;
          HIBYTE(v31) = 0;
          LOBYTE(v30) = 0;
          if (SHIBYTE(v28) < 0)
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v29 + 40))(v29, __dst, v28 & 0x7FFFFFFFFFFFFFFFLL);
        }
        else
        {
          v36 = v30;
          v37 = v31;
        }
        goto LABEL_33;
      }
    }
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(&__dst, (_QWORD *)(v10 + 8));
    goto LABEL_27;
  }
  {
    v22 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v12 = mdm::Allocator::instance(void)::alloc;
  v24 = 0uLL;
  v25 = 0;
  {
    v23 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v23, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v26 = mdm::Allocator::instance(void)::alloc;
  md::LabelFeature::textFromFeature(&__dst, a2, a3, (uint64_t)&v24, 0);
  v14 = __dst;
  v15 = v28;
  v29 = v12;
  if (v28 < 0)
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)__dst, *((unint64_t *)&__dst + 1));
  v16 = v26;
  v32 = v26;
  v17 = SHIBYTE(v25);
  if (SHIBYTE(v25) < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v30, (void *)v24, *((unint64_t *)&v24 + 1));
  }
  else
  {
    v30 = v24;
    v31 = v25;
  }
  if (SHIBYTE(v34) < 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 40))(v35, v33, v34 & 0x7FFFFFFFFFFFFFFFLL);
  v33 = __dst;
  v34 = v28;
  HIBYTE(v28) = 0;
  LOBYTE(__dst) = 0;
  if (SHIBYTE(v37) < 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v38 + 40))(v38, v36, v37 & 0x7FFFFFFFFFFFFFFFLL);
  v36 = v30;
  v37 = v31;
  if (v17 < 0)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 40))(v16, v24, v25 & 0x7FFFFFFFFFFFFFFFLL);
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_33;
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    goto LABEL_33;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v14, v15 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_33:
  v18 = md::LineLabelFeature::textIndexForText(a1, (uint64_t)&v33);
  if (SHIBYTE(v37) < 0)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v38 + 40))(v38, v36, v37 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      return v18;
LABEL_37:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 40))(v35, v33, v34 & 0x7FFFFFFFFFFFFFFFLL);
    return v18;
  }
  if (SHIBYTE(v34) < 0)
    goto LABEL_37;
  return v18;
}

void sub_19FC8B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::PhysicalLabelFeature::styleIndexForFeature(uint64_t *a1, uint64_t a2)
{
  _DWORD *v5;
  const FeatureStyleAttributes *v6;
  char *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int v14;
  unsigned __int8 v15;
  int *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  char *v28;
  std::__shared_weak_count *v29;

  if ((*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1))
    return md::LineLabelFeature::styleIndexForAttributes((uint64_t)a1, a1 + 52);
  v5 = operator new(8uLL);
  *(_QWORD *)v5 = 65570;
  v6 = *(const FeatureStyleAttributes **)(a2 + 24);
  v7 = (char *)operator new(0x40uLL);
  *((_QWORD *)v7 + 1) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1E42DAB40;
  FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v7 + 24), v6);
  v28 = v7 + 24;
  v29 = (std::__shared_weak_count *)v7;
  v9 = v7[57];
  v10 = *((_QWORD *)v7 + 3);
  if (v7[57])
  {
    v11 = *v5;
    if (v9 >= 0x20)
    {
      v12 = 0;
      v16 = (int *)*((_QWORD *)v7 + 3);
      while (1)
      {
        v17 = *v16;
        v16 += 2;
        if (v17 == v11)
          break;
        if (v9 == ++v12)
          goto LABEL_14;
      }
    }
    else
    {
      v12 = 0;
      v13 = (int *)*((_QWORD *)v7 + 3);
      while (1)
      {
        v14 = *v13;
        v13 += 2;
        if (v14 == v11)
          break;
        if (v9 == ++v12)
          goto LABEL_8;
      }
    }
    *(_DWORD *)(v10 + 8 * v12 + 4) = v5[1];
  }
  else
  {
LABEL_8:
    *(_QWORD *)(v10 + 8 * v9) = *(_QWORD *)v5;
    v15 = v7[57] + 1;
    v7[57] = v15;
    qsort(*((void **)v7 + 3), v15, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  }
LABEL_14:
  v26 = v7 + 24;
  v27 = (std::__shared_weak_count *)v7;
  do
    v18 = __ldxr(v8);
  while (__stxr(v18 + 1, v8));
  v19 = md::LineLabelFeature::styleIndexForAttributes((uint64_t)a1, (uint64_t *)&v26);
  v20 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    v24 = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v5);
  return v19;
}

void sub_19FC8BA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'md::PhysicalLabelFeature::textIndexForFeature(uint64_t a1, uint64_t *a2, int a3)
{
  return md::PhysicalLabelFeature::textIndexForFeature((uint64_t *)(a1 - 440), a2, a3);
}

uint64_t `non-virtual thunk to'md::PhysicalLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  return md::PhysicalLabelFeature::styleIndexForFeature((uint64_t *)(a1 - 440), a2);
}

_QWORD *md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(_QWORD *__dst, _QWORD *__src)
{
  unsigned __int8 v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  {
    v20 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v5 = mdm::Allocator::instance(void)::alloc;
  __dst[3] = mdm::Allocator::instance(void)::alloc;
  if (*((char *)__src + 23) < 0)
  {
    v6 = __src[1];
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v7 = (_QWORD *)*__src;
    if (v6 < 0x17)
    {
LABEL_4:
      *((_BYTE *)__dst + 23) = v6;
      v8 = __dst;
      if (!v6)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)__src + 23);
    v7 = __src;
    if (v6 < 0x17)
      goto LABEL_4;
  }
  v9 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v9 = v6 | 7;
  v10 = v9 + 1;
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v9 + 1, 1);
  __dst[1] = v6;
  __dst[2] = v10 | 0x8000000000000000;
  *__dst = v8;
LABEL_11:
  memmove(v8, v7, v6);
LABEL_12:
  *((_BYTE *)v8 + v6) = 0;
  {
    v21 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v12 = mdm::Allocator::instance(void)::alloc;
  __dst[7] = mdm::Allocator::instance(void)::alloc;
  v13 = *((char *)__src + 47);
  if (v13 < 0)
  {
    v15 = __src[4];
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v14 = (char *)__src[3];
    if (v15 < 0x17)
    {
LABEL_15:
      v16 = (char *)(__dst + 4);
      *((_BYTE *)__dst + 55) = v15;
      if (!v15)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  else
  {
    v14 = (char *)(__src + 3);
    v15 = v13;
    if (v13 < 0x17uLL)
      goto LABEL_15;
  }
  v17 = (v15 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v15 | 7) != 0x17)
    v17 = v15 | 7;
  v18 = v17 + 1;
  v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v17 + 1, 1);
  __dst[5] = v15;
  __dst[6] = v18 | 0x8000000000000000;
  __dst[4] = v16;
LABEL_22:
  memmove(v16, v14, v15);
LABEL_23:
  v16[v15] = 0;
  return __dst;
}

void sub_19FC8BD00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v1 + 24) + 40))(*(_QWORD *)(v1 + 24), *(_QWORD *)v1, *(_QWORD *)(v1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427A218;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427A218;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_1>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (!*(_BYTE *)(*a2 + 32))
  {
    if (*(_QWORD *)(v2 + 16))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 664))(*(_QWORD *)(result + 8));
      *(_BYTE *)(v2 + 38) = result;
    }
  }
  return result;
}

void std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427A1D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427A1D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_0,std::allocator<md::PhysicalLabelFeature::updateText(void const*,BOOL)::$_0>,void ()(std::unique_ptr<md::LabelLineSegment> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a2;
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 664))(*(_QWORD *)(a1 + 8), 0, *(unsigned __int8 *)(a1 + 16));
  *(_BYTE *)(v2 + 38) = result;
  return result;
}

void md::NavigationLogic::~NavigationLogic(id *this)
{
  md::NavigationLogic::~NavigationLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  id v4;

  *this = &off_1E42908A0;
  objc_msgSend(this[20], "destroyAnimationRunner");
  objc_msgSend(this[37], "stop");
  this[36] = &off_1E42B4B70;

  v2 = this[33];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = this[31];
  this[31] = 0;
  if (v4)
    operator delete(v4);
  this[22] = &off_1E42B4B90;

  this[19] = &off_1E42B4C70;
  *this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[13]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[10]);
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0x1B8B241A8D896A1DLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t __Block_byref_object_copy__28794(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__28795(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
}

void ___ZN2md15NavigationLogic23_updatePolygonSelectionEv_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  uint64_t v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  objc_msgSend(v15, "route");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v15, "route");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "restrictionZoneInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    objc_msgSend(v5, "zoneIDs");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v17;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v17 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v9);
          if (GEOGetVectorKitRouteLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
          v11 = (id)GEOGetVectorKitRouteLog_log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            v12 = objc_msgSend(v10, "identifier");
            *(_DWORD *)buf = 134217984;
            v21 = v12;
            _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_INFO, "Selecting restricted zone polygon: %llx", buf, 0xCu);
          }

          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v14 = objc_msgSend(v10, "identifier");
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(v13 + 48, v14, v14);
          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
      }
      while (v7);
    }

  }
}

void sub_19FC8C2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::NavigationContext::~NavigationContext(md::NavigationContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    operator delete(v4);

  if (*((_BYTE *)this + 32))
    *((_BYTE *)this + 32) = 0;
}

_QWORD *gdc::ManagedObjectHolder<md::NavigationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  *a1 = &off_1E42B0E88;
  v2 = a1[4];
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 120);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v5)
      operator delete(v5);

    if (*(_BYTE *)(v2 + 32))
      *(_BYTE *)(v2 + 32) = 0;
    MEMORY[0x1A1AF4E00](v2, 0x10A0C40CCC90A93);
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::NavigationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &off_1E42B0E88;
  v1 = a1[4];
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 120);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 104);
    *(_QWORD *)(v1 + 104) = 0;
    if (v4)
      operator delete(v4);

    if (*(_BYTE *)(v1 + 32))
      *(_BYTE *)(v1 + 32) = 0;
    MEMORY[0x1A1AF4E00](v1, 0x10A0C40CCC90A93);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::NavigationContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19FC8C5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 288) = &off_1E42B4B70;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 248);
  *(_QWORD *)(v1 + 176) = &off_1E42B4B90;

  *(_QWORD *)(v1 + 152) = &off_1E42B4C70;
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKNavigationPuck * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C70;

  return a1;
}

void geo::_retain_ptr<VKNavigationPuck * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C70;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<VKPuckAnimator * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B70;

  return a1;
}

void geo::_retain_ptr<VKPuckAnimator * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4B70;

  JUMPOUT(0x1A1AF4E00);
}

void md::NavigationLogic::setRouteContext(md::NavigationLogic *this, VKRouteContext *a2)
{
  VKRouteContext *v3;
  VKRouteContext *v4;
  VKRouteContext *v5;
  void *v6;
  VKRouteContext *v7;

  v7 = a2;
  if (*((VKRouteContext **)this + 23) != v7)
  {
    v3 = v7;
    v4 = v3;
    if (v3)
      v5 = v3;
    v6 = (void *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v4;

    std::__hash_table<md::NavigationLogicEvent,std::hash<md::NavigationLogicEvent>,std::equal_to<md::NavigationLogicEvent>,std::allocator<md::NavigationLogicEvent>>::__emplace_unique_key_args<md::NavigationLogicEvent,md::NavigationLogicEvent const&>((uint64_t)this + 248, 1, 1);
  }
  md::NavigationLogic::_updatePolygonSelection(this);

}

void sub_19FC8C77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::Tile::LinearDepth>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::DaVinci::Shadow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciGroundRenderable::~DaVinciGroundRenderable(md::DaVinciGroundRenderable *this)
{
  md::DaVinciGroundRenderable::~DaVinciGroundRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  *(_QWORD *)this = &off_1E426F760;
  v2 = (void *)*((_QWORD *)this + 99);
  if (v2)
  {
    *((_QWORD *)this + 100) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 96);
  if (v3)
  {
    *((_QWORD *)this + 97) = v3;
    operator delete(v3);
  }
  if (*((_BYTE *)this + 760))
    *((_BYTE *)this + 760) = 0;
  v4 = (void *)*((_QWORD *)this + 92);
  if (v4)
  {
    *((_QWORD *)this + 93) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 89);
  if (v5)
  {
    *((_QWORD *)this + 90) = v5;
    operator delete(v5);
  }
  if (*((_BYTE *)this + 704))
    *((_BYTE *)this + 704) = 0;
  v6 = (void *)*((_QWORD *)this + 85);
  if (v6)
  {
    *((_QWORD *)this + 86) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 82);
  if (v7)
  {
    *((_QWORD *)this + 83) = v7;
    operator delete(v7);
  }
  if (*((_BYTE *)this + 648))
    *((_BYTE *)this + 648) = 0;
  v8 = (void *)*((_QWORD *)this + 78);
  if (v8)
  {
    *((_QWORD *)this + 79) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 75);
  if (v9)
  {
    *((_QWORD *)this + 76) = v9;
    operator delete(v9);
  }
  if (*((_BYTE *)this + 592))
    *((_BYTE *)this + 592) = 0;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
  if (!v10)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
    if (!v13)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
    if (!v13)
      goto LABEL_35;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_35:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
  if (!v16)
    goto LABEL_39;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
    if (!v19)
      goto LABEL_45;
  }
  else
  {
LABEL_39:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
    if (!v19)
      goto LABEL_45;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_45:
  *(_QWORD *)this = &off_1E426F280;
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

uint64_t md::DaVinciGroundRenderable::DaVinciGroundRenderable(uint64_t a1, uint64_t *a2, char a3, char a4, _QWORD *a5)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v7 = (_QWORD *)md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(a1, *a2, a2[1], a3, a4, a5);
  *v7 = &off_1E426F280;
  v8 = a2[1];
  v7[48] = *a2;
  v7[49] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)a1 = &off_1E426F760;
  v11 = operator new(0xE8uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1E42E2AC8;
  v12 = ggl::BufferData::BufferData((uint64_t)(v11 + 3), qword_1EE550298, 2, 1, 6, 1);
  v11[28] = ggl::DaVinci::Shadow::reflection(void)::reflection;
  v11[3] = &off_1E42B9DB0;
  *(_QWORD *)(a1 + 400) = v12;
  *(_QWORD *)(a1 + 408) = v11;
  v13 = operator new(0xE8uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_1E42E2AC8;
  v14 = ggl::BufferData::BufferData((uint64_t)(v13 + 3), qword_1EE550298, 2, 1, 6, 1);
  v13[28] = ggl::DaVinci::Shadow::reflection(void)::reflection;
  v13[3] = &off_1E42B9DB0;
  *(_QWORD *)(a1 + 416) = v14;
  *(_QWORD *)(a1 + 424) = v13;
  v15 = operator new(0xE8uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_1E42E2240;
  v16 = ggl::BufferData::BufferData((uint64_t)(v15 + 3), qword_1EE54B040, 2, 1, 6, 1);
  v15[28] = ggl::Tile::LinearDepth::reflection(void)::reflection;
  v15[3] = &off_1E42B9770;
  *(_QWORD *)(a1 + 432) = v16;
  *(_QWORD *)(a1 + 440) = v15;
  v17 = operator new(0xE8uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_1E42E2A20;
  v18 = ggl::BufferData::BufferData((uint64_t)(v17 + 3), qword_1EE54A488, 2, 1, 6, 1);
  v17[28] = ggl::DaVinci::StyleCameraLighting::reflection(void)::reflection;
  v17[3] = &off_1E42B9CF0;
  *(_QWORD *)(a1 + 448) = v18;
  *(_QWORD *)(a1 + 456) = v17;
  gm::inverse<double>((double *)(a1 + 464), (double *)(a1 + 88));
  *(_BYTE *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_BYTE *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_BYTE *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_BYTE *)(a1 + 760) = 0;
  return a1;
}

void sub_19FC8CE5C(_Unwind_Exception *a1)
{
  md::BaseMapTileDataRenderable *v1;
  unint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  do
    v6 = __ldaxr(v2);
  while (__stlxr(v6 - 1, v2));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 53);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)v1 + 51);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)v1 = v4;
  v13 = (std::__shared_weak_count *)*((_QWORD *)v1 + 49);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(v1);
  _Unwind_Resume(a1);
}

void sub_19FC8D060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC8D2C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC8D364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::TransitNodeLabelFeature::~TransitNodeLabelFeature(md::TransitNodeLabelFeature *this)
{
  md::TransitNodeLabelFeature::~TransitNodeLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E429FD10;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 114);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 112);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 112);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *((_QWORD *)this + 104);
  if (v8)
  {
    *((_QWORD *)this + 105) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 107) + 40))(*((_QWORD *)this + 107), v8, *((_QWORD *)this + 106) - v8);
  }
  v9 = *((_QWORD *)this + 100);
  if (v9)
  {
    *((_QWORD *)this + 101) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 103) + 40))(*((_QWORD *)this + 103), v9, *((_QWORD *)this + 102) - v9);
  }
  v10 = *((_QWORD *)this + 96);
  if (v10)
  {
    *((_QWORD *)this + 97) = v10;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 99) + 40))(*((_QWORD *)this + 99), v10, *((_QWORD *)this + 98) - v10);
  }
  v11 = *((_QWORD *)this + 92);
  if (v11)
  {
    *((_QWORD *)this + 93) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 95) + 40))(*((_QWORD *)this + 95), v11, *((_QWORD *)this + 94) - v11);
  }
  v12 = *((_QWORD *)this + 88);
  if (v12)
  {
    *((_QWORD *)this + 89) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 91) + 40))(*((_QWORD *)this + 91), v12, *((_QWORD *)this + 90) - v12);
  }
  v13 = *((_QWORD *)this + 84);
  if (v13)
  {
    *((_QWORD *)this + 85) = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 87) + 40))(*((_QWORD *)this + 87), v13, *((_QWORD *)this + 86) - v13);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
}

void md::TransitNodeLabelFeature::updateText(md::TransitNodeLabelFeature *this, const void *a2, char a3)
{
  md::PointLabelFeature::updateText((md::PointLabelFeature **)this, a2, a3);
  *(_WORD *)((char *)this + 877) = -256;
}

BOOL md::TransitNodeLabelFeature::updateDynamicStyling(md::TransitNodeLabelFeature *this, LabelManager *a2, md::Label *a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *i;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  _BOOL8 v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unsigned __int8 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  std::__shared_weak_count *v31;

  if ((*(uint64_t (**)(md::TransitNodeLabelFeature *, LabelManager *, md::Label *))(*(_QWORD *)this + 64))(this, a2, a3))
  {
    v5 = *((_QWORD *)this + 63);
    v6 = *(_QWORD *)(v5 + 32);
    v7 = *(std::__shared_weak_count **)(v5 + 40);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      if (v6 != *((_QWORD *)this + 82))
      {
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        goto LABEL_16;
      }
    }
    else if (v6 != *((_QWORD *)this + 82))
    {
LABEL_16:
      *((_QWORD *)this + 82) = v6;
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 83);
      *((_QWORD *)this + 83) = v7;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = 1;
LABEL_23:
      v19 = *(unsigned __int8 *)(*((_QWORD *)this + 63) + 236);
      v20 = *((unsigned __int8 *)this + 880);
      v21 = v19 != v20;
      if (v19 != v20)
        *((_BYTE *)this + 880) = v19;
      if (v7)
      {
        v22 = (unint64_t *)&v7->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          if ((v18 & 1) == 0)
            return v21;
          goto LABEL_46;
        }
      }
      goto LABEL_45;
    }
    v18 = 0;
    goto LABEL_23;
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 64) + 16))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 64));
  if (!v11)
    return 0;
  v12 = *((_QWORD *)this + 108);
  for (i = *(_QWORD **)(v11 + 136); i; i = (_QWORD *)*i)
  {
    v14 = i[4];
    if (v14 <= v12)
    {
      if (v14 >= v12)
      {
        LODWORD(i) = 1;
        break;
      }
      ++i;
    }
  }
  if (*((unsigned __int8 *)this + 876) == (_DWORD)i)
  {
    v18 = 0;
  }
  else
  {
    *((_BYTE *)this + 876) = (_BYTE)i;
    v18 = 1;
  }
  md::LabelExternalObjectsModerator::externalTransitNode((md::LabelExternalObjectsModerator *)&v30, v11, v12);
  if (v30)
  {
    v24 = atomic_load((unsigned __int8 *)(v30 + 25));
    if (v24 != *((unsigned __int8 *)this + 881))
    {
      v25 = atomic_load((unsigned __int8 *)(v30 + 25));
      *((_BYTE *)this + 881) = v25;
      v18 = 1;
    }
  }
  v26 = v31;
  if (v31)
  {
    v27 = (unint64_t *)&v31->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v21 = 0;
LABEL_45:
  if (v18)
LABEL_46:
    (*(void (**)(md::TransitNodeLabelFeature *, LabelManager *))(*(_QWORD *)this + 536))(this, a2);
  return v21;
}

uint64_t md::TransitNodeLabelFeature::labelFeatureType(md::TransitNodeLabelFeature *this)
{
  return *((unsigned __int8 *)this + 879);
}

uint64_t md::TransitNodeLabelFeature::debugString@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  void *p_p;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  _OWORD *v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  char *v84;
  void *v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  char *i;
  int v91;
  char *v92;
  int64_t v93;
  size_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  size_t v101;
  unint64_t v102;
  const void **v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t *v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  unsigned __int8 v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void *__p;
  char *v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[3];
  uint64_t v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  int v137;
  uint64_t v138[20];

  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v138[0] = MEMORY[0x1E0DE4FE0] + 64;
  v130 = v10;
  *(uint64_t *)((char *)&v130 + *(_QWORD *)(v10 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v130 + *(_QWORD *)(v130 - 24));
  std::ios_base::init(v12, &v131);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v130 = v8 + 24;
  v138[0] = v9;
  std::streambuf::basic_streambuf();
  v131 = MEMORY[0x1E0DE4FB8] + 16;
  v135 = 0u;
  v136 = 0u;
  v137 = 16;
  md::PointLabelFeature::debugString((uint64_t)a1, a2, a3, a4, &__p);
  if (v128 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v128 >= 0)
    v14 = HIBYTE(v128);
  else
    v14 = (uint64_t)v127;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v130, (uint64_t)p_p, v14);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  __p = 0;
  v127 = 0;
  v128 = 0;
  {
    v110 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v110, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v129 = mdm::Allocator::instance(void)::alloc;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  {
    v111 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v111, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v113 = mdm::Allocator::instance(void)::alloc;
  v125 = mdm::Allocator::instance(void)::alloc;
  v17 = a1[88];
  v116 = a1[89];
  if (v17 != v116)
  {
    v18 = v128;
    v114 = v129;
    v118 = v124;
    v20 = (char *)__p;
    v19 = v127;
    while ((unint64_t)v19 < v18)
    {
      if (v19)
        *(_DWORD *)v19 = *(_DWORD *)v17;
      v19 += 4;
      v21 = *(unsigned __int16 *)(v17 + 6);
      if (!*(_WORD *)(v17 + 6))
        goto LABEL_15;
LABEL_43:
      v117 = v18;
      v37 = (char *)(a1[96] + 4 * *(unsigned __int16 *)(v17 + 4));
      v38 = (uint64_t)v122;
      v39 = v123;
      v40 = v123 - v122;
      v41 = &v122[(v123 - v122) & 0xFFFFFFFFFFFFFFFCLL];
      if (v21 > (v118 - (uint64_t)v123) >> 2)
      {
        v42 = v40 >> 2;
        v43 = (v40 >> 2) + v21;
        if (v43 >> 62)
        {
          __p = v20;
          v127 = v19;
          v128 = v117;
          v124 = v118;
          abort();
        }
        if ((v118 - (uint64_t)v122) >> 1 > v43)
          v43 = (v118 - (uint64_t)v122) >> 1;
        if ((unint64_t)(v118 - (_QWORD)v122) >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          v45 = v19;
          v46 = v40 >> 2;
          v47 = v44;
          v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 16))(v113, 4 * v44, 4);
          v44 = v47;
          v42 = v46;
          v19 = v45;
          v40 = v123 - v122;
          v38 = (uint64_t)v122;
        }
        else
        {
          v48 = 0;
        }
        v60 = v48 + 4 * v42;
        v61 = (char *)(v60 + 4 * v21);
        v62 = 4 * v21;
        v63 = (_DWORD *)v60;
        do
        {
          if (v63)
            *v63 = *(_DWORD *)v37;
          ++v63;
          v37 += 4;
          v62 -= 4;
        }
        while (v62);
        v64 = (uint64_t)v122;
        if (v122 != v41)
        {
          v65 = (v40 & 0xFFFFFFFFFFFFFFFCLL) + v38;
          v66 = v65 - (_QWORD)v122 - 4;
          if (v66 < 0x3C)
          {
            v67 = v41;
            goto LABEL_80;
          }
          v67 = v41;
          if (v65 - ((v40 & 0xFFFFFFFFFFFFFFFCLL) + v48) < 0x20)
            goto LABEL_160;
          v68 = (v66 >> 2) + 1;
          v67 = &v41[-4 * (v68 & 0x7FFFFFFFFFFFFFF8)];
          v69 = (__int128 *)(v38 + 4 * v42 - 16);
          v70 = (_OWORD *)(v48 + 4 * v42 - 16);
          v71 = v68 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v72 = *v69;
            *(v70 - 1) = *(v69 - 1);
            *v70 = v72;
            v69 -= 2;
            v70 -= 2;
            v71 -= 8;
          }
          while (v71);
          v60 -= 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
          if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_160:
            do
            {
LABEL_80:
              v73 = *((_DWORD *)v67 - 1);
              v67 -= 4;
              *(_DWORD *)(v60 - 4) = v73;
              v60 -= 4;
            }
            while (v67 != (char *)v64);
          }
        }
        if (v39 != v41)
        {
          v74 = (v40 & 0xFFFFFFFFFFFFFFFCLL) + v38;
          v75 = (unint64_t)&v39[-v74 - 4];
          if (v75 < 0x3C)
            goto LABEL_161;
          if ((v40 & 0xFFFFFFFFFFFFFFFCLL) + v48 + 4 * v21 - v74 < 0x20)
            goto LABEL_161;
          v76 = (v75 >> 2) + 1;
          v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
          v41 += v77;
          v78 = (_OWORD *)(v48 + 4 * v21 + 4 * v42 + 16);
          v79 = (__int128 *)(v38 + 4 * v42 + 16);
          v80 = v76 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v81 = *v79;
            *(v78 - 1) = *(v79 - 1);
            *v78 = v81;
            v78 += 2;
            v79 += 2;
            v80 -= 8;
          }
          while (v80);
          v61 += v77;
          if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_161:
            do
            {
              v82 = *(_DWORD *)v41;
              v41 += 4;
              *(_DWORD *)v61 = v82;
              v61 += 4;
            }
            while (v41 != v39);
          }
        }
        v83 = v48 + 4 * v44;
        v122 = (char *)v60;
        v123 = v61;
        if (v64)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 40))(v113, v64, v118 - v64);
        v118 = v83;
        goto LABEL_14;
      }
      v49 = v123 - v41;
      v50 = (v123 - v41) >> 2;
      v51 = 4 * v21;
      if (v50 >= v21)
      {
        v53 = &v37[4 * v21];
        v56 = v123;
LABEL_59:
        v57 = &v56[-v51];
        v58 = v56;
        while (v57 < v39)
        {
          if (v58)
            *(_DWORD *)v58 = *(_DWORD *)v57;
          v57 += 4;
          v58 += 4;
        }
        v59 = &v41[v51];
        v123 = v58;
        if (v56 != v59)
          memmove(&v56[-4 * ((v56 - v59) >> 2)], v41, v56 - v59);
        v18 = v117;
        if (v53 != v37)
          memmove(v41, v37, v53 - v37);
        goto LABEL_15;
      }
      v52 = 4 * v50;
      v53 = &v37[v52];
      v54 = v51 - v52;
      v55 = &v37[v52];
      v56 = v123;
      do
      {
        if (v56)
          *(_DWORD *)v56 = *(_DWORD *)v55;
        v55 += 4;
        v56 += 4;
        v54 -= 4;
      }
      while (v54);
      v123 = v56;
      if (v49 >= 1)
        goto LABEL_59;
LABEL_14:
      v18 = v117;
LABEL_15:
      v17 += 12;
      if (v17 == v116)
      {
        __p = v20;
        v127 = v19;
        v128 = v18;
        v124 = v118;
        goto LABEL_91;
      }
    }
    v22 = (v19 - v20) >> 2;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62)
    {
      __p = v20;
      v127 = v19;
      v128 = v18;
      v124 = v118;
      abort();
    }
    v24 = v18 - (_QWORD)v20;
    if ((uint64_t)(v18 - (_QWORD)v20) >> 1 > v23)
      v23 = (uint64_t)(v18 - (_QWORD)v20) >> 1;
    if (v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, 4 * v25, 4);
      v27 = (char *)(v26 + 4 * v22);
      v18 = v26 + 4 * v25;
      if (v26)
        *(_DWORD *)v27 = *(_DWORD *)v17;
    }
    else
    {
      v18 = 0;
      v27 = (char *)(4 * v22);
    }
    v28 = v27;
    if (v19 != v20)
    {
      v29 = v19 - v20 - 4;
      if (v29 < 0x1C || (unint64_t)(v19 - v27) < 0x20)
      {
        v31 = v19;
        v28 = v27;
      }
      else
      {
        v30 = (v29 >> 2) + 1;
        v31 = &v19[-4 * (v30 & 0x7FFFFFFFFFFFFFF8)];
        v32 = v27 - 16;
        v33 = v19 - 16;
        v34 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v35 = *(_OWORD *)v33;
          *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
          *(_OWORD *)v32 = v35;
          v32 -= 32;
          v33 -= 32;
          v34 -= 8;
        }
        while (v34);
        v28 = &v27[-4 * (v30 & 0x7FFFFFFFFFFFFFF8)];
        if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_40;
      }
      do
      {
        v36 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v28 - 1) = v36;
        v28 -= 4;
      }
      while (v31 != v20);
    }
LABEL_40:
    v19 = v27 + 4;
    if (v20)
      (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v114 + 40))(v114, v20, v24);
    v20 = v28;
    v21 = *(unsigned __int16 *)(v17 + 6);
    if (!*(_WORD *)(v17 + 6))
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_91:
  v84 = v123;
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v85 = a5;
  if (v122 != v123)
  {
    v86 = v122 + 4;
    while (v86 != v123)
    {
      v87 = v86 - 4;
      v88 = *((_DWORD *)v86 - 1);
      v89 = *(_DWORD *)v86;
      v86 += 4;
      if (v88 == v89)
      {
        for (i = v87 + 8; i != v84; i += 4)
        {
          v91 = v88;
          v88 = *(_DWORD *)i;
          if (v91 != *(_DWORD *)i)
          {
            *((_DWORD *)v87 + 1) = v88;
            v87 += 4;
          }
        }
        v92 = v87 + 4;
        v93 = v84 - (v87 + 4);
        if (v93)
        {
          v94 = v84 - &v92[v93];
          if (v94)
            memmove(v92, &v92[v93], v94);
          v123 = &v92[v94];
        }
        break;
      }
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v130, (uint64_t)" SystemTypes:", 13);
  ArrayToCommaSeparatedString<unsigned int>(&v119, (uint64_t *)&__p);
  if ((v121 & 0x80u) == 0)
    v95 = &v119;
  else
    v95 = v119;
  if ((v121 & 0x80u) == 0)
    v96 = v121;
  else
    v96 = v120;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v130, (uint64_t)v95, v96);
  if ((char)v121 < 0)
    operator delete(v119);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v130, (uint64_t)" LineTypes:", 11);
  ArrayToCommaSeparatedString<unsigned int>(&v119, (uint64_t *)&v122);
  if ((v121 & 0x80u) == 0)
    v97 = &v119;
  else
    v97 = v119;
  if ((v121 & 0x80u) == 0)
    v98 = v121;
  else
    v98 = v120;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v130, (uint64_t)v97, v98);
  if ((char)v121 < 0)
    operator delete(v119);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v130, (uint64_t)" TransitTypes:", 14);
  ArrayToCommaSeparatedString<unsigned int>(&v119, a1 + 100);
  if ((v121 & 0x80u) == 0)
    v99 = &v119;
  else
    v99 = v119;
  if ((v121 & 0x80u) == 0)
    v100 = v121;
  else
    v100 = v120;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v130, (uint64_t)v99, v100);
  if ((char)v121 < 0)
    operator delete(v119);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v130, (uint64_t)"\n", 1);
  if ((v137 & 0x10) != 0)
  {
    v102 = *((_QWORD *)&v136 + 1);
    if (*((_QWORD *)&v136 + 1) < v134)
    {
      *((_QWORD *)&v136 + 1) = v134;
      v102 = v134;
    }
    v103 = (const void **)&v133;
  }
  else
  {
    if ((v137 & 8) == 0)
    {
      v101 = 0;
      *((_BYTE *)a5 + 23) = 0;
      goto LABEL_144;
    }
    v103 = (const void **)v132;
    v102 = v132[2];
  }
  v104 = *v103;
  v101 = v102 - (_QWORD)*v103;
  if (v101 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v101 >= 0x17)
  {
    v105 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v101 | 7) != 0x17)
      v105 = v101 | 7;
    v106 = v105 + 1;
    v107 = operator new(v105 + 1);
    a5[1] = v101;
    a5[2] = v106 | 0x8000000000000000;
    *a5 = v107;
    v85 = v107;
    goto LABEL_143;
  }
  *((_BYTE *)a5 + 23) = v101;
  if (v101)
LABEL_143:
    memmove(v85, v104, v101);
LABEL_144:
  *((_BYTE *)v85 + v101) = 0;
  if (v122)
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v125 + 40))(v125, v122, v124 - (_QWORD)v122);
  v108 = (uint64_t *)MEMORY[0x1E0DE4F60];
  if (__p)
    (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v129 + 40))(v129, __p, v128 - (_QWORD)__p);
  v130 = *v108;
  *(uint64_t *)((char *)&v130 + *(_QWORD *)(v130 - 24)) = v108[3];
  v131 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v136) < 0)
    operator delete((void *)v135);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v138);
}

void sub_19FC8E134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v35;
  void *v36;

  if (a25 < 0)
  {
    operator delete(__p);
    v35 = a26;
    if (a26)
    {
LABEL_7:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a29 + 40))(a29, v35, a28 - v35);
      v36 = a30;
      if (!a30)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else
  {
    v35 = a26;
    if (a26)
      goto LABEL_7;
  }
  v36 = a30;
  if (!a30)
  {
LABEL_9:
    std::ostringstream::~ostringstream((uint64_t)&a34);
    _Unwind_Resume(a1);
  }
LABEL_8:
  (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a33 + 40))(a33, v36, a32 - (_QWORD)v36);
  goto LABEL_9;
}

void md::TransitNodeLabelFeature::populateStyleQueries(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  const FeatureStyleAttributes *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  void **v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unsigned __int8 v55;
  size_t v56;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  _OWORD *v64;
  _OWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  __int128 v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v89 = 0;
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1)
    && (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v89 = v6;
  }
  else
  {
    v6 = 0;
  }
  v85 = 0;
  v86 = 0;
  v87 = 0;
  {
    v80 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v80, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v88 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(uint64_t *, uint64_t **))(*a1 + 544))(a1, &v85);
  v10 = v86;
  if (*((_BYTE *)a1 + 876))
  {
    if ((unint64_t)v86 < v87)
    {
      if (v86)
        *v86 = 0x100010002;
      ++v10;
LABEL_37:
      v86 = v10;
      goto LABEL_38;
    }
    v11 = v86 - v85;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v12 = (uint64_t)(v87 - (_QWORD)v85) >> 2;
    if (v12 <= v11 + 1)
      v12 = v11 + 1;
    if (v87 - (unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, 8 * v13, 4);
      v15 = (uint64_t *)(v14 + 8 * v11);
      v16 = v14 + 8 * v13;
      if (v14)
        *v15 = 0x100010002;
    }
    else
    {
      v16 = 0;
      v15 = (uint64_t *)(8 * v11);
    }
    v10 = v15 + 1;
    v18 = v85;
    v17 = v86;
    if (v86 == v85)
    {
LABEL_35:
      v85 = v15;
      v86 = v10;
      v27 = v87;
      v87 = v16;
      if (v17)
        (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v88 + 40))(v88, v17, v27 - (_QWORD)v17);
      goto LABEL_37;
    }
    v19 = (char *)v86 - (char *)v85 - 8;
    if (v19 < 0x38)
    {
      v21 = v86;
    }
    else if ((unint64_t)((char *)v86 - (char *)v15) < 0x20)
    {
      v21 = v86;
    }
    else
    {
      v20 = (v19 >> 3) + 1;
      v21 = &v86[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
      v22 = v15 - 2;
      v23 = v86 - 2;
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(_OWORD *)v23;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
        *(_OWORD *)v22 = v25;
        v22 -= 4;
        v23 -= 4;
        v24 -= 4;
      }
      while (v24);
      v15 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_34;
    }
    do
    {
      v26 = *--v21;
      *--v15 = v26;
    }
    while (v21 != v18);
LABEL_34:
    v17 = v85;
    goto LABEL_35;
  }
LABEL_38:
  v28 = *((unsigned __int8 *)a1 + 881);
  if (v28 == 5)
    goto LABEL_67;
  if ((unint64_t)v10 >= v87)
  {
    v29 = v10 - v85;
    if ((unint64_t)(v29 + 1) >> 61)
      abort();
    v30 = (uint64_t)(v87 - (_QWORD)v85) >> 2;
    if (v30 <= v29 + 1)
      v30 = v29 + 1;
    if (v87 - (unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
    {
      v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, 8 * v31, 4);
      v33 = (uint64_t *)(v32 + 8 * v29);
      v34 = v32 + 8 * v31;
      if (v32)
        *v33 = (v28 << 32) | 0x1002B;
    }
    else
    {
      v34 = 0;
      v33 = (uint64_t *)(8 * v29);
    }
    v10 = v33 + 1;
    v36 = v85;
    v35 = v86;
    if (v86 == v85)
      goto LABEL_64;
    v37 = (char *)v86 - (char *)v85 - 8;
    if (v37 < 0x38)
    {
      v39 = v86;
    }
    else if ((unint64_t)((char *)v86 - (char *)v33) < 0x20)
    {
      v39 = v86;
    }
    else
    {
      v38 = (v37 >> 3) + 1;
      v39 = &v86[-(v38 & 0x3FFFFFFFFFFFFFFCLL)];
      v40 = v33 - 2;
      v41 = v86 - 2;
      v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *(_OWORD *)v41;
        *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
        *(_OWORD *)v40 = v43;
        v40 -= 4;
        v41 -= 4;
        v42 -= 4;
      }
      while (v42);
      v33 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
      if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_63;
    }
    do
    {
      v44 = *--v39;
      *--v33 = v44;
    }
    while (v39 != v36);
LABEL_63:
    v35 = v85;
LABEL_64:
    v85 = v33;
    v86 = v10;
    v45 = v87;
    v87 = v34;
    if (v35)
      (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v88 + 40))(v88, v35, v45 - (_QWORD)v35);
    goto LABEL_66;
  }
  if (v10)
    *v10 = (v28 << 32) | 0x1002B;
  ++v10;
LABEL_66:
  v86 = v10;
LABEL_67:
  v46 = a1 + 82;
  if (v85 == v10)
  {
    md::createFeatureAttributeSet((gss::Allocator *)&v90, v46);
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v84, a3, &v90, (_QWORD *)v6);
    if (v90)
    {
      v91 = v90;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v93 + 40))(v93, v90, v92 - v90);
    }
    v64 = *(_OWORD **)(a2 + 8);
    if ((unint64_t)v64 >= *(_QWORD *)(a2 + 16))
    {
      v65 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v84);
    }
    else
    {
      if (v64)
      {
        *v64 = v84;
        v84 = 0uLL;
      }
      v65 = v64 + 1;
    }
    *(_QWORD *)(a2 + 8) = v65;
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1))
    {
      v67 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
LABEL_121:
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  else
  {
    v47 = (const FeatureStyleAttributes *)*v46;
    v48 = (std::__shared_weak_count *)operator new(0x40uLL);
    v48->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    v48->__shared_weak_owners_ = 0;
    v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
    v50 = (void **)&v48[1].__vftable;
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)&v48[1], v47);
    *(_QWORD *)&v84 = v48 + 1;
    *((_QWORD *)&v84 + 1) = v48;
    v51 = v85;
    if ((((char *)v86 - (char *)v85) & 0x7FFFFFFF8) != 0)
    {
      v52 = 0;
      v53 = 0;
      v54 = ((unint64_t)((char *)v86 - (char *)v85) >> 3);
      v55 = BYTE1(v48[2].__shared_owners_);
      while (1)
      {
        v56 = v55;
        v57 = *v50;
        if (v55)
          break;
LABEL_70:
        v57[v56] = v51[v52];
        v55 = BYTE1(v48[2].__shared_owners_) + 1;
        BYTE1(v48[2].__shared_owners_) = v55;
        ++v52;
        v53 = 1;
        if (v52 == v54)
        {
          v57 = *v50;
          v56 = v55;
LABEL_98:
          qsort(v57, v56, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_99;
        }
      }
      if (v55 > 0x1Fu)
      {
        do
        {
          v61 = 0;
          v62 = (int *)v57;
          while (1)
          {
            v63 = *v62;
            v62 += 2;
            if (v63 == LODWORD(v51[v52]))
              break;
            if (v56 == ++v61)
              goto LABEL_81;
          }
          HIDWORD(v57[v61]) = HIDWORD(v51[v52]);
LABEL_81:
          ++v52;
        }
        while (v52 != v54);
      }
      else
      {
        do
        {
          v58 = 0;
          v59 = (int *)v57;
          while (1)
          {
            v60 = *v59;
            v59 += 2;
            if (v60 == LODWORD(v51[v52]))
              break;
            if (v56 == ++v58)
              goto LABEL_70;
          }
          HIDWORD(v57[v58]) = HIDWORD(v51[v52++]);
        }
        while (v52 != v54);
      }
      if ((v53 & 1) != 0)
        goto LABEL_98;
    }
LABEL_99:
    v81 = (char *)&v48[1];
    v82 = v48;
    do
      v69 = __ldxr(p_shared_owners);
    while (__stxr(v69 + 1, p_shared_owners));
    md::createFeatureAttributeSet((gss::Allocator *)&v90, (uint64_t *)&v81);
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v83, a3, &v90, (_QWORD *)v6);
    if (v90)
    {
      v91 = v90;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v93 + 40))(v93, v90, v92 - v90);
    }
    v70 = *(_OWORD **)(a2 + 8);
    if ((unint64_t)v70 >= *(_QWORD *)(a2 + 16))
    {
      v71 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v83);
    }
    else
    {
      if (v70)
      {
        *v70 = v83;
        v83 = 0uLL;
      }
      v71 = v70 + 1;
    }
    *(_QWORD *)(a2 + 8) = v71;
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = v82;
    if (v82)
    {
      v76 = (unint64_t *)&v82->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1))
    {
      v78 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v68 = __ldaxr(v78);
      while (__stlxr(v68 - 1, v78));
      goto LABEL_121;
    }
  }
  if (v85)
  {
    v86 = v85;
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v88 + 40))(v88, v85, v87 - (_QWORD)v85);
  }
  v79 = v89;
  if (v89)
  {
    if (*(char *)(v89 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v89 + 24) + 40))(*(_QWORD *)(v89 + 24), *(_QWORD *)v89, *(_QWORD *)(v89 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v79, 0x1032C402ED93987);
  }
}

void sub_19FC8EA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, v10, v12 - v10);
  }
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void **md::TransitNodeLabelFeature::populateTransitLinesFeatureIDs(void **result, void **a2)
{
  if (result + 104 != a2)
    return std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(a2, (char *)result[104], (char *)result[105], ((_BYTE *)result[105] - (_BYTE *)result[104]) >> 3);
  return result;
}

md::BalloonLabelPart *md::TransitNodeLabelFeature::newIconPart(int **this, const md::PartCreationContext *a2)
{
  const md::PartCreationContext *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  unsigned __int8 v8;
  int *v9;
  unsigned int **v10;
  int v11;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unsigned __int16 v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unsigned int *v48;
  unsigned int **v49;
  unint64_t v50;
  unsigned int **v51;
  unsigned int v52;
  unsigned int **v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unsigned int **v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  __n128 *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t *v73;
  unint64_t v74;
  int *v75;
  char *v76;
  unint64_t *v77;
  unint64_t v78;
  unsigned __int8 v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v88;
  unsigned __int8 v89;
  grl *v90;
  _QWORD *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v100;
  char v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  md::IconLabelPart *v104;
  __n128 v105;
  unsigned __int8 v106;
  md::IconLabelPart *v107;
  __n128 v108;
  unsigned __int8 v109;
  md::IconLabelPart *v110;
  __n128 v111;
  unsigned __int8 v112;
  md::IconLabelPart *v113;
  md::LabelManager *v114;
  md::Label *v115;
  md::LabelStyle *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unsigned int **v129;
  unsigned int **v130;
  unsigned int **v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  __int16 v136;
  int v137;
  grl *v138;
  int v139;
  int v140;
  int v141;
  __int16 v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *p_shared_owners;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  float v156;
  char *v157;
  char *v158;
  unint64_t *v159;
  __int16 v160;
  char *v161;
  char *v162;
  __int128 v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t v172;
  _QWORD *v173;
  void (***v174)(__int128 *__return_ptr, _QWORD, _QWORD, char *);
  __int128 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  uint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  __int128 v193;
  _QWORD *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t *v207;
  void **v208;
  uint64_t v209;
  uint64_t v210;
  void **v211;
  char v212;
  __int128 v213;
  void **v214;
  void **v215;
  size_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  geo::read_write_lock *v222;
  const char *v223;
  malloc_zone_t *zone;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  const md::PartCreationContext *v231;
  __int128 v232;
  char *v233;
  __int128 v234;
  int *v235;
  std::__shared_weak_count *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count *v242;
  __n128 v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int **v247;
  unsigned int **v248;
  unsigned int **v249;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_QWORD *)(v4 + 296);
  if (!v5)
  {
    v6 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    v5 = *v6;
    *(_QWORD *)(v4 + 296) = *v6;
  }
  if (*(_BYTE *)(v5 + 88) == 6)
  {
    if ((*((uint64_t (**)(int **))*this + 8))(this))
      return 0;
    {
      v220 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v220, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 824, 8);
    v80 = (uint64_t *)**((_QWORD **)v2 + 8);
    v81 = *((_QWORD *)v2 + 1);
    v82 = *((_QWORD *)v2 + 2);
    v83 = *(_QWORD *)v2;
    *((_DWORD *)v7 + 2) = 1065353216;
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 3) = v7;
    *((_QWORD *)v7 + 8) = 0;
    *(_OWORD *)(v7 + 72) = xmmword_19FFB2E30;
    *((_OWORD *)v7 + 2) = 0u;
    *((_OWORD *)v7 + 3) = 0u;
    *((_QWORD *)v7 + 11) = 1065353216;
    *((_DWORD *)v7 + 24) = 1065353216;
    *((_DWORD *)v7 + 29) = 0;
    *(_QWORD *)(v7 + 100) = 0;
    *(_QWORD *)(v7 + 108) = 0;
    *(_OWORD *)(v7 + 120) = xmmword_19FFB2E30;
    *(_OWORD *)(v7 + 136) = xmmword_19FFB2E30;
    *(_OWORD *)(v7 + 152) = xmmword_19FFB2E30;
    *(_OWORD *)(v7 + 168) = xmmword_19FFB3480;
    v7[224] = 0;
    *((_QWORD *)v7 + 23) = 0;
    *((_QWORD *)v7 + 24) = 0;
    v7[200] = 0;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 257) = 0u;
    *(_OWORD *)(v7 + 280) = xmmword_19FFB3580;
    *(_OWORD *)(v7 + 296) = xmmword_19FFB3590;
    *(_OWORD *)(v7 + 312) = xmmword_19FFB2E30;
    *((_QWORD *)v7 + 41) = 1065353216;
    *((_DWORD *)v7 + 84) = 1065353216;
    *(_QWORD *)(v7 + 348) = 0;
    *(_QWORD *)(v7 + 340) = 0;
    *((_DWORD *)v7 + 89) = 0;
    *(_OWORD *)(v7 + 360) = xmmword_19FFB2E30;
    *(_OWORD *)(v7 + 376) = xmmword_19FFB2E30;
    *(_OWORD *)(v7 + 392) = xmmword_19FFB2E30;
    *(_OWORD *)(v7 + 408) = xmmword_19FFB3480;
    v7[464] = 0;
    v7[440] = 0;
    *((_QWORD *)v7 + 53) = 0;
    *((_QWORD *)v7 + 54) = 0;
    *(_OWORD *)(v7 + 497) = 0u;
    *(_OWORD *)(v7 + 472) = 0u;
    *(_OWORD *)(v7 + 488) = 0u;
    *(_OWORD *)(v7 + 520) = xmmword_19FFB3580;
    *((_DWORD *)v7 + 134) = 1065353216;
    *(_QWORD *)(v7 + 540) = 0;
    *(_QWORD *)(v7 + 548) = 0;
    *((_WORD *)v7 + 278) = 512;
    v7[562] = 0;
    *(_DWORD *)(v7 + 558) = 0;
    *(_WORD *)(v7 + 563) = -1;
    *(_DWORD *)(v7 + 565) = 0;
    __asm { FMOV            V2.4S, #1.0 }
    *(_OWORD *)(v7 + 572) = _Q2;
    *((_DWORD *)v7 + 147) = 1065353216;
    *((_WORD *)v7 + 296) = 256;
    v7[594] = 0;
    *(_OWORD *)(v7 + 596) = _Q2;
    *((_DWORD *)v7 + 153) = 1065353216;
    *((_WORD *)v7 + 308) = 256;
    v7[618] = 0;
    *(_QWORD *)(v7 + 620) = 0;
    *((_DWORD *)v7 + 157) = 257;
    *((_WORD *)v7 + 316) = 1;
    *(_QWORD *)v7 = off_1E42A14B8;
    *(_OWORD *)(v7 + 636) = xmmword_19FFB3480;
    *((_DWORD *)v7 + 163) = 1065353216;
    *((_WORD *)v7 + 328) = 0;
    v7[658] = 0;
    v7[663] = -1;
    *(_DWORD *)(v7 + 659) = -1;
    *((_DWORD *)v7 + 166) = 0;
    *((_WORD *)v7 + 338) = 256;
    v7[678] = 1;
    *(_OWORD *)(v7 + 680) = xmmword_19FFB3480;
    *((_DWORD *)v7 + 174) = 1065353216;
    *((_WORD *)v7 + 350) = 0;
    v7[702] = 0;
    v7[707] = -1;
    *(_DWORD *)(v7 + 703) = -1;
    *((_DWORD *)v7 + 177) = 0;
    *((_WORD *)v7 + 360) = 256;
    v7[722] = 1;
    *(_OWORD *)(v7 + 728) = 0u;
    *(_OWORD *)(v7 + 744) = 0u;
    v88 = (uint64_t *)(v7 + 744);
    *((_QWORD *)v7 + 97) = 0;
    *(_OWORD *)(v7 + 760) = 0u;
    {
      v221 = operator new();
      *(_QWORD *)(v221 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v221 + 24) = "VectorKitLabels";
      *(_OWORD *)(v221 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v221 = &off_1E42B5668;
      *(_QWORD *)(v221 + 8) = "VectorKitLabels";
      *(_OWORD *)(v221 + 72) = 0u;
      *(_OWORD *)(v221 + 88) = 0u;
      *(_OWORD *)(v221 + 104) = 0u;
      *(_OWORD *)(v221 + 120) = 0u;
      *(_OWORD *)(v221 + 136) = 0u;
      *(_OWORD *)(v221 + 152) = 0u;
      *(_OWORD *)(v221 + 168) = 0u;
      *(_OWORD *)(v221 + 184) = 0u;
      *(_OWORD *)(v221 + 200) = 0u;
      *(_OWORD *)(v221 + 216) = 0u;
      *(_OWORD *)(v221 + 232) = 0u;
      *(_QWORD *)(v221 + 248) = 0;
      *(_OWORD *)(v221 + 56) = 0u;
      v222 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v221 + 56), 0);
      if ((_DWORD)v222)
        geo::read_write_lock::logFailure(v222, (uint64_t)"initialization", v223);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v221 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v221 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v221;
    }
    *((_QWORD *)v7 + 98) = mdm::Allocator::instance(void)::alloc;
    *((_QWORD *)v7 + 99) = 0;
    *((_DWORD *)v7 + 203) = *(_DWORD *)(v83 + 176);
    *((_DWORD *)v7 + 204) = 1;
    v90 = (grl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v83 + 168) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v83 + 168) + 64));
    if (v90)
    {
      v91 = *(_QWORD **)(v81 + 1232);
      if (v91 && *v91)
      {
        v92 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v83 + 168) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v83 + 168) + 64))
                        + 32);
        if (v92)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v92 + 8))(&v244, v92, v91);
          v93 = v244;
        }
        else
        {
          v93 = 0uLL;
        }
        v244 = 0uLL;
        v146 = (std::__shared_weak_count *)*((_QWORD *)v7 + 94);
        *(_OWORD *)v88 = v93;
        if (v146)
        {
          p_shared_owners = (unint64_t *)&v146->__shared_owners_;
          do
            v148 = __ldaxr(p_shared_owners);
          while (__stlxr(v148 - 1, p_shared_owners));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        v149 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
          v150 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        if (*v88)
        {
          v152 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v83 + 168) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v83 + 168) + 64));
          md::LabelExternalObjectsModerator::registerIconForAsynchModeUpdates(v152, v88);
          atomic_store(1u, (unsigned __int8 *)v7 + 819);
        }
      }
      else
      {
        v94 = *(_QWORD *)(v82 + 296);
        if (!v94)
        {
          v90 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v82, 0);
          v94 = *(_QWORD *)v90;
          *(_QWORD *)(v82 + 296) = *(_QWORD *)v90;
        }
        if (*(unsigned __int8 *)(v94 + 92) - 1 > 8)
          v95 = 0;
        else
          v95 = dword_19FFB8A88[(*(_BYTE *)(v94 + 92) - 1)];
        v136 = *(unsigned __int8 *)(v94 + 94);
        v137 = *(unsigned __int8 *)(v83 + 3360);
        v138 = (grl *)grl::SizeGroupMin(v90);
        v139 = (int)v138;
        v140 = grl::SizeGroupMax(v138);
        v141 = v95 + v137;
        if (v95 + v137 >= v140)
          v141 = v140;
        if (v141 <= v139)
          v142 = v139;
        else
          v142 = v141;
        if (v80)
        {
          *(_QWORD *)&v143 = v80;
          v144 = (std::__shared_weak_count *)v80[1];
          if (v144)
          {
            v236 = std::__shared_weak_count::lock(v144);
            if (v236)
            {
              v145 = *v80;
            }
            else
            {
              v145 = 0;
              v236 = 0;
            }
            *(_QWORD *)&v143 = v80;
          }
          else
          {
            v145 = 0;
            v236 = 0;
          }
          *((_QWORD *)&v143 + 1) = v145;
        }
        else
        {
          v236 = 0;
          v143 = 0uLL;
        }
        v232 = v143;
        v230 = v82;
        v153 = *(_DWORD *)(*(_QWORD *)(v83 + 432) + 44);
        v154 = *(_BYTE *)(v83 + 3057);
        v155 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v83 + 168) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v83 + 168) + 64));
        v156 = *(float *)(v81 + 392);
        v157 = (char *)operator new(0x58uLL);
        v158 = v157;
        *((_QWORD *)v157 + 1) = 0;
        v159 = (unint64_t *)(v157 + 8);
        v160 = v136 | (v142 << 8);
        *((_QWORD *)v157 + 2) = 0;
        *(_QWORD *)v157 = &off_1E42DDAB8;
        *(_OWORD *)(v157 + 24) = 0u;
        v161 = v157 + 24;
        *(_OWORD *)(v157 + 72) = 0u;
        *(_OWORD *)(v157 + 40) = 0u;
        v162 = v157 + 40;
        *((_QWORD *)v157 + 7) = 0;
        *((_QWORD *)v157 + 8) = 0;
        *((_DWORD *)v157 + 18) = 1065353216;
        v157[80] = 0;
        *(_QWORD *)&v163 = v157 + 24;
        *((_WORD *)v157 + 20) = v160;
        *((_QWORD *)v157 + 6) = v232;
        if (v236)
        {
          v164 = (unint64_t *)&v236->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
          v166 = (std::__shared_weak_count *)*((_QWORD *)v157 + 8);
          *((_QWORD *)v157 + 7) = *((_QWORD *)&v232 + 1);
          *((_QWORD *)v157 + 8) = v236;
          if (v166)
          {
            v167 = (unint64_t *)&v166->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              v233 = v157 + 24;
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
              *(_QWORD *)&v163 = v233;
            }
          }
        }
        else
        {
          *((_QWORD *)v157 + 7) = *((_QWORD *)&v232 + 1);
          *((_QWORD *)v157 + 8) = 0;
        }
        *((_QWORD *)&v163 + 1) = v158;
        *((_DWORD *)v158 + 18) = v153;
        v158[76] = v154;
        v158[80] = (int)v156;
        v234 = v163;
        if (*(_BYTE *)(v155 + 432) | v154)
        {
          v174 = *(void (****)(__int128 *__return_ptr, _QWORD, _QWORD, char *))(v155 + 32);
          v171 = v236;
          if (v174)
          {
            (**v174)(&v244, v174, (int)v156, v162);
            v175 = v244;
            v244 = 0uLL;
            v176 = (std::__shared_weak_count *)*((_QWORD *)v158 + 4);
            *(_OWORD *)(v158 + 24) = v175;
            v163 = v234;
            if (v176)
            {
              v177 = (unint64_t *)&v176->__shared_owners_;
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
                v163 = v234;
              }
            }
            v179 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
            if (*((_QWORD *)&v244 + 1))
            {
              v180 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
                v163 = v234;
              }
            }
          }
          v158[81] = 1;
          v82 = v230;
        }
        else
        {
          v169 = *(_QWORD **)(v155 + 48);
          v170 = *(_QWORD *)(v155 + 56);
          v171 = v236;
          if ((unint64_t)v169 >= v170)
          {
            v182 = *(_QWORD *)(v155 + 40);
            v183 = ((uint64_t)v169 - v182) >> 4;
            v184 = v183 + 1;
            if ((unint64_t)(v183 + 1) >> 60)
              abort();
            v185 = v170 - v182;
            if (v185 >> 3 > v184)
              v184 = v185 >> 3;
            if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF0)
              v186 = 0xFFFFFFFFFFFFFFFLL;
            else
              v186 = v184;
            if (v186)
            {
              v187 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v155 + 64) + 16))(*(_QWORD *)(v155 + 64), 16 * v186, 8);
              v188 = (_OWORD *)(v187 + 16 * v183);
              v189 = v187 + 16 * v186;
              v163 = v234;
              if (v187)
              {
                *v188 = v234;
                do
                  v190 = __ldxr(v159);
                while (__stxr(v190 + 1, v159));
              }
            }
            else
            {
              v189 = 0;
              v188 = (_OWORD *)(16 * v183);
            }
            v173 = v188 + 1;
            v191 = *(_QWORD **)(v155 + 40);
            v192 = *(_QWORD **)(v155 + 48);
            v82 = v230;
            if (v192 == v191)
            {
              *(_QWORD *)(v155 + 40) = v188;
              *(_QWORD *)(v155 + 48) = v173;
              v195 = *(_QWORD *)(v155 + 56);
              *(_QWORD *)(v155 + 56) = v189;
            }
            else
            {
              do
              {
                v193 = *((_OWORD *)v192 - 1);
                v192 -= 2;
                *--v188 = v193;
                *v192 = 0;
                v192[1] = 0;
              }
              while (v192 != v191);
              v192 = *(_QWORD **)(v155 + 40);
              v194 = *(_QWORD **)(v155 + 48);
              *(_QWORD *)(v155 + 40) = v188;
              *(_QWORD *)(v155 + 48) = v173;
              v195 = *(_QWORD *)(v155 + 56);
              *(_QWORD *)(v155 + 56) = v189;
              while (v194 != v192)
              {
                v196 = (std::__shared_weak_count *)*(v194 - 1);
                if (v196)
                {
                  v197 = (unint64_t *)&v196->__shared_owners_;
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                    v163 = v234;
                  }
                }
                v194 -= 2;
              }
            }
            if (v192)
            {
              (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v155 + 64) + 40))(*(_QWORD *)(v155 + 64), v192, v195 - (_QWORD)v192);
              v163 = v234;
            }
          }
          else
          {
            if (v169)
            {
              *v169 = v161;
              v169[1] = v158;
              do
                v172 = __ldxr(v159);
              while (__stxr(v172 + 1, v159));
            }
            v173 = v169 + 2;
            v82 = v230;
          }
          *(_QWORD *)(v155 + 48) = v173;
        }
        v199 = (std::__shared_weak_count *)*((_QWORD *)v7 + 92);
        *(_OWORD *)(v7 + 728) = v163;
        if (v199)
        {
          v200 = (unint64_t *)&v199->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        if (v171)
        {
          v202 = (unint64_t *)&v171->__shared_owners_;
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
      }
    }
    v204 = *(_QWORD *)(v82 + 296);
    if (!v204)
    {
      v205 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v82, 0);
      v204 = *v205;
      *(_QWORD *)(v82 + 296) = *v205;
    }
    *((_DWORD *)v7 + 143) = *(_DWORD *)(v204 + 28);
    (*(void (**)(char *))(*(_QWORD *)v7 + 152))(v7);
    v206 = *(_QWORD *)(v82 + 272);
    if (!v206)
    {
      v207 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v82);
      v206 = *v207;
      *(_QWORD *)(v82 + 272) = *v207;
    }
    v208 = (void **)(v7 + 760);
    if (*(char *)(v206 + 263) < 0)
      v209 = *(_QWORD *)(v206 + 248);
    else
      v209 = *(unsigned __int8 *)(v206 + 263);
    v210 = 80;
    if (v209)
    {
      v210 = 240;
      v211 = (void **)(v206 + 240);
    }
    else
    {
      v211 = (void **)(v206 + 80);
    }
    if (v208 != v211)
    {
      v212 = *((_BYTE *)v211 + 23);
      if (v7[783] < 0)
      {
        v214 = *(void ***)(v206 + v210);
        if (v212 >= 0)
          v215 = v211;
        else
          v215 = v214;
        if (v212 >= 0)
          v216 = *((unsigned __int8 *)v211 + 23);
        else
          v216 = (size_t)v211[1];
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v208, v215, v216);
      }
      else if ((*((_BYTE *)v211 + 23) & 0x80) != 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)v208, *(void **)(v206 + v210), (size_t)v211[1]);
      }
      else
      {
        v213 = *(_OWORD *)v211;
        *((_QWORD *)v7 + 97) = v211[2];
        *(_OWORD *)v208 = v213;
      }
    }
    v217 = *(_QWORD *)(v82 + 296);
    if (!v217)
    {
      v218 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v82, 0);
      v217 = *v218;
      *(_QWORD *)(v82 + 296) = *v218;
    }
    v7[800] = *(_BYTE *)(v217 + 92);
    *((_QWORD *)v7 + 99) = *(_QWORD *)(v217 + 56);
    return (md::BalloonLabelPart *)v7;
  }
  if (!*((_BYTE *)this + 140))
    return md::PointLabelFeature::newIconPart((md::PointLabelFeature *)this, v2);
  v231 = v2;
  v247 = 0;
  v248 = 0;
  v249 = 0;
  v7 = (char *)&v244 + 8;
  *((_QWORD *)&v244 + 1) = 0;
  {
    v219 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v219, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v245 = mdm::Allocator::instance(void)::alloc;
  v246 = 0;
  *(_QWORD *)&v244 = (char *)&v244 + 8;
  v9 = this[88];
  v235 = this[89];
  if (v9 == v235)
  {
    v10 = 0;
    v2 = v231;
    goto LABEL_103;
  }
  do
  {
    v243 = 0uLL;
    v11 = *v9;
    if (*v9)
    {
      v12 = operator new(0x38uLL);
      v12[1] = 0;
      v12[2] = 0;
      *v12 = &off_1E42DDA80;
      v12[5] = 0;
      v12[6] = 0;
      v12[4] = 0;
      *((_DWORD *)v12 + 6) = 49;
      v243.n128_u64[0] = (unint64_t)(v12 + 3);
      v243.n128_u64[1] = (unint64_t)v12;
      v13 = *((unsigned __int8 *)v9 + 9);
      *((_DWORD *)v12 + 7) = v11;
      if (v13)
      {
        v14 = 0;
        do
        {
          v15 = (char *)operator new(0x38uLL);
          v16 = v15;
          *((_QWORD *)v15 + 1) = 0;
          v17 = (unint64_t *)(v15 + 8);
          *((_QWORD *)v15 + 2) = 0;
          *(_QWORD *)v15 = &off_1E42DDA80;
          *(_OWORD *)(v15 + 24) = 0u;
          v18 = v15 + 24;
          *(_OWORD *)(v15 + 40) = 0u;
          v241 = (std::__shared_weak_count *)(v15 + 24);
          v242 = (std::__shared_weak_count *)v15;
          *((_DWORD *)v15 + 6) = 37;
          *((_DWORD *)v15 + 7) = this[92][v14 + *((unsigned __int8 *)v9 + 8)];
          v19 = (_QWORD *)v243.n128_u64[0];
          v20 = *(_QWORD **)(v243.n128_u64[0] + 16);
          v21 = *(_QWORD *)(v243.n128_u64[0] + 24);
          if ((unint64_t)v20 >= v21)
          {
            v24 = *(_QWORD *)(v243.n128_u64[0] + 8);
            v25 = ((uint64_t)v20 - v24) >> 4;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 60)
              abort();
            v27 = v21 - v24;
            if (v27 >> 3 > v26)
              v26 = v27 >> 3;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
              v28 = 0xFFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28 >> 60)
LABEL_297:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v29 = (char *)operator new(16 * v28);
            v30 = &v29[16 * v25];
            v31 = &v29[16 * v28];
            *(_QWORD *)v30 = v18;
            *((_QWORD *)v30 + 1) = v16;
            do
              v32 = __ldxr(v17);
            while (__stxr(v32 + 1, v17));
            v33 = (_QWORD *)v19[1];
            v34 = (_QWORD *)v19[2];
            v23 = v30 + 16;
            if (v34 == v33)
            {
              v19[1] = v30;
              v19[2] = v23;
              v19[3] = v31;
            }
            else
            {
              do
              {
                v35 = *((_OWORD *)v34 - 1);
                v34 -= 2;
                *((_OWORD *)v30 - 1) = v35;
                v30 -= 16;
                *v34 = 0;
                v34[1] = 0;
              }
              while (v34 != v33);
              v34 = (_QWORD *)v19[1];
              v36 = (_QWORD *)v19[2];
              v19[1] = v30;
              v19[2] = v23;
              v19[3] = v31;
              while (v36 != v34)
              {
                v37 = (std::__shared_weak_count *)*(v36 - 1);
                if (v37)
                {
                  v38 = (unint64_t *)&v37->__shared_owners_;
                  do
                    v39 = __ldaxr(v38);
                  while (__stlxr(v39 - 1, v38));
                  if (!v39)
                  {
                    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                    std::__shared_weak_count::__release_weak(v37);
                  }
                }
                v36 -= 2;
              }
            }
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v20 = v18;
            v20[1] = v15;
            do
              v22 = __ldxr(v17);
            while (__stxr(v22 + 1, v17));
            v23 = v20 + 2;
          }
          v19[2] = v23;
          if (v242)
          {
            v40 = &v242->__shared_owners_;
            do
              v41 = __ldaxr((unint64_t *)v40);
            while (__stlxr(v41 - 1, (unint64_t *)v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
              std::__shared_weak_count::__release_weak(v242);
            }
          }
          ++v14;
        }
        while (v14 < *((unsigned __int8 *)v9 + 9));
      }
    }
    v42 = *((_WORD *)v9 + 3);
    if (v42)
    {
      v43 = 0;
      while (1)
      {
        v44 = this[96][v43 + *((unsigned __int16 *)v9 + 2)];
        v45 = (uint64_t *)*((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
          do
          {
            v52 = *((_DWORD *)v45 + 7);
            if (v44 >= v52)
            {
              if (v52 >= v44)
                goto LABEL_49;
              ++v45;
            }
            v45 = (uint64_t *)*v45;
          }
          while (v45);
        }
        v46 = (std::__shared_weak_count *)operator new(0x38uLL);
        v46->__shared_owners_ = 0;
        v47 = (unint64_t *)&v46->__shared_owners_;
        v46->__shared_weak_owners_ = 0;
        v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDA80;
        LODWORD(v46[1].__vftable) = 50;
        v48 = (unsigned int *)&v46[1];
        v46[1].__shared_owners_ = 0;
        v46[1].__shared_weak_owners_ = 0;
        v46[2].__vftable = 0;
        v241 = v46 + 1;
        v242 = v46;
        HIDWORD(v46[1].__vftable) = v44;
        if (v243.n128_u64[0])
          v46[1].__shared_weak_owners_ = (uint64_t)std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v46[1].__shared_owners_, v243);
        v49 = v248;
        if (v248 >= v249)
        {
          v53 = v247;
          v54 = ((char *)v248 - (char *)v247) >> 4;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60)
            abort();
          v56 = (char *)v249 - (char *)v247;
          if (v249 - v247 > v55)
            v55 = v56 >> 3;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57 >> 60)
            goto LABEL_297;
          v58 = (char *)operator new(16 * v57);
          v59 = &v58[16 * v54];
          *(_QWORD *)v59 = v48;
          *((_QWORD *)v59 + 1) = v46;
          do
            v60 = __ldxr(v47);
          while (__stxr(v60 + 1, v47));
          v51 = (unsigned int **)(v59 + 16);
          if (v49 == v53)
          {
            v247 = (unsigned int **)&v58[16 * v54];
            v248 = (unsigned int **)(v59 + 16);
            v249 = (unsigned int **)&v58[16 * v57];
            if (!v49)
              goto LABEL_82;
LABEL_81:
            operator delete(v49);
            goto LABEL_82;
          }
          v61 = v49;
          do
          {
            v62 = *((_OWORD *)v61 - 1);
            v61 -= 2;
            *((_OWORD *)v59 - 1) = v62;
            v59 -= 16;
            *v61 = 0;
            v61[1] = 0;
          }
          while (v61 != v53);
          v247 = (unsigned int **)v59;
          v248 = v51;
          v249 = (unsigned int **)&v58[16 * v57];
          do
          {
            v63 = (std::__shared_weak_count *)*(v49 - 1);
            if (v63)
            {
              v64 = (unint64_t *)&v63->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            v49 -= 2;
          }
          while (v49 != v53);
          v49 = v53;
          if (v53)
            goto LABEL_81;
        }
        else
        {
          *v248 = v48;
          v49[1] = (unsigned int *)v46;
          do
            v50 = __ldxr(v47);
          while (__stxr(v50 + 1, v47));
          v51 = v49 + 2;
        }
LABEL_82:
        v248 = v51;
        if (v242)
        {
          v66 = &v242->__shared_owners_;
          do
            v67 = __ldaxr((unint64_t *)v66);
          while (__stlxr(v67 - 1, (unint64_t *)v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
            std::__shared_weak_count::__release_weak(v242);
          }
        }
        v42 = *((_WORD *)v9 + 3);
LABEL_49:
        if (++v43 >= (unint64_t)v42)
          goto LABEL_97;
      }
    }
    if (v243.n128_u64[0])
    {
      v68 = (__n128 *)v248;
      if (v248 >= v249)
      {
        v72 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v247, v243);
      }
      else
      {
        *v248 = (unsigned int *)v243.n128_u64[0];
        v69 = v243.n128_u64[1];
        v68->n128_u64[1] = v243.n128_u64[1];
        if (v69)
        {
          v70 = (unint64_t *)(v69 + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        v72 = v68 + 1;
      }
      v248 = (unsigned int **)v72;
    }
LABEL_97:
    v7 = (char *)v243.n128_u64[1];
    if (v243.n128_u64[1])
    {
      v73 = (unint64_t *)(v243.n128_u64[1] + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v243.n128_u64[1] + 16))(v243.n128_u64[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v243.n128_u64[1]);
      }
    }
    v9 += 3;
  }
  while (v9 != v235);
  v10 = v247;
  v2 = v231;
  if (v247 == v248)
  {
LABEL_103:
    v75 = this[100];
    if (v75 != this[101])
    {
      v76 = (char *)operator new(0x38uLL);
      v7 = v76;
      *((_QWORD *)v76 + 1) = 0;
      v77 = (unint64_t *)(v76 + 8);
      *((_QWORD *)v76 + 2) = 0;
      *(_QWORD *)v76 = &off_1E42DDA80;
      *(_OWORD *)(v76 + 24) = 0u;
      *(_OWORD *)(v76 + 40) = 0u;
      v243.n128_u64[0] = (unint64_t)(v76 + 24);
      v243.n128_u64[1] = (unint64_t)v76;
      *((_DWORD *)v76 + 6) = 37;
      *((_DWORD *)v76 + 7) = *v75;
      if (v10 < v249)
      {
        *v10 = (unsigned int *)(v76 + 24);
        v10[1] = (unsigned int *)v76;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
        v248 = v10 + 2;
        goto LABEL_120;
      }
      v7 = (char *)v243.n128_u64[1];
      v248 = (unsigned int **)std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v247, v243);
      if (v243.n128_u64[1])
      {
LABEL_120:
        v96 = (unint64_t *)(v7 + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          (*(void (**)(char *))(*(_QWORD *)v7 + 16))(v7);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
        }
      }
      v10 = v247;
    }
  }
  if (v10 == v248)
    goto LABEL_166;
  md::LabelStyle::multiPOIBalloonIcon(&v243, *((md::LabelStyle **)v2 + 2), *(_QWORD *)v2, *((_QWORD *)v2 + 1), 1, &v247);
  md::LabelStyle::multiPOIBalloonIcon(&v241, *((md::LabelStyle **)v2 + 2), *(_QWORD *)v2, *((_QWORD *)v2 + 1), 2, &v247);
  md::LabelStyle::multiPOIBalloonIcon(&v239, *((md::LabelStyle **)v2 + 2), *(_QWORD *)v2, *((_QWORD *)v2 + 1), 3, &v247);
  md::LabelStyle::multiPOIBalloonIcon(&v237, *((md::LabelStyle **)v2 + 2), *(_QWORD *)v2, *((_QWORD *)v2 + 1), 5, &v247);
  if (v243.n128_u64[0])
    _ZF = v241 == 0;
  else
    _ZF = 1;
  v100 = _ZF || v239 == 0 || v237 == 0;
  v101 = !v100;
  if (!v100)
  {
    {
      v225 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v225, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 640, 8);
    {
      v226 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v226, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v104 = (md::IconLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v105.n128_f64[0] = md::IconLabelPart::IconLabelPart((uint64_t)v104, &v243);
    {
      v227 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v107 = (md::IconLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 768, 8, v105);
    v108.n128_f64[0] = md::IconLabelPart::IconLabelPart((uint64_t)v107, &v241);
    {
      v228 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v228, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v110 = (md::IconLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 768, 8, v108);
    v111.n128_f64[0] = md::IconLabelPart::IconLabelPart((uint64_t)v110, &v239);
    {
      v229 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v229, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v113 = (md::IconLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 768, 8, v111);
    md::IconLabelPart::IconLabelPart((uint64_t)v113, &v237);
    md::BalloonLabelPart::BalloonLabelPart((md::BalloonLabelPart *)v7, v104, v107, v110, v113, v114, v115, v116);
    v7[632] = (unint64_t)((char *)v248 - (char *)v247) < 0x20;
    v2 = v231;
  }
  v117 = v238;
  if (v238)
  {
    v118 = (unint64_t *)&v238->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v240;
  if (v240)
  {
    v121 = (unint64_t *)&v240->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v242;
  if (v242)
  {
    v124 = &v242->__shared_owners_;
    do
      v125 = __ldaxr((unint64_t *)v124);
    while (__stlxr(v125 - 1, (unint64_t *)v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v127 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if ((v101 & 1) == 0)
LABEL_166:
    v7 = 0;
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v244, *((_QWORD **)&v244 + 1));
  v129 = v247;
  if (v247)
  {
    v130 = v248;
    v131 = v247;
    if (v248 != v247)
    {
      do
      {
        v132 = (std::__shared_weak_count *)*(v130 - 1);
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        v130 -= 2;
      }
      while (v130 != v129);
      v131 = v247;
    }
    v248 = v129;
    operator delete(v131);
    v2 = v231;
  }
  if (!v7)
    return md::PointLabelFeature::newIconPart((md::PointLabelFeature *)this, v2);
  return (md::BalloonLabelPart *)v7;
}

void sub_19FC901A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  mdm::Allocator *v26;
  uint64_t v27;

  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  if (*(char *)(v13 + 783) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v13 + 784) + 40))(*(_QWORD *)(v13 + 784), *(_QWORD *)(v13 + 760), *(_QWORD *)(v13 + 776) & 0x7FFFFFFFFFFFFFFFLL);
  v20 = *(std::__shared_weak_count **)(v13 + 752);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(std::__shared_weak_count **)(v13 + 736);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)v13 = off_1E42AF8C0;
  free(*(void **)(v13 + 472));
  free(*(void **)(v13 + 480));
  free(*(void **)(v13 + 496));
  free(*(void **)(v13 + 232));
  free(*(void **)(v13 + 240));
  free(*(void **)(v13 + 256));
  v27 = mdm::Allocator::instance(v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 40))(v27, v13, 824);
  _Unwind_Resume(a1);
}

void sub_19FC903A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&a23, a24);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v24 - 128));
  _Unwind_Resume(a1);
}

void sub_19FC903AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x19FC903B8);
}

uint64_t md::TransitNodeLabelFeature::newMultiPoiIconPart(md::TransitNodeLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  __guard *v6;
  unsigned __int8 v7;
  float *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  md::TransitNodeLabelFeature *v11;
  unsigned int *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count_vtbl *v14;
  __int128 v15;
  unsigned __int16 v16;
  unint64_t i;
  uint64_t v18;
  uint64_t *j;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  int v25;
  unsigned __int8 v26;
  unsigned int v27;
  std::__shared_weak_count_vtbl *v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  int v79;
  std::__shared_weak_count_vtbl *v80;
  int v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  char *v91;
  std::__shared_weak_count *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  __int128 v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  char *v116;
  char *v117;
  int64_t v118;
  unint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  char *v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  char *v128;
  _BYTE *v129;
  char *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  __int128 v133;
  unsigned int *v134;
  uint64_t v135;
  int *v136;
  int *v137;
  int v138;
  int v139;
  int *k;
  int v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  std::__shared_weak_count_vtbl *v148;
  uint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  int v151;
  unsigned __int8 v152;
  std::__shared_weak_count_vtbl *v153;
  int v154;
  md::LabelStyle *v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  char *v182;
  __int128 v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  int64_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  _QWORD *v196;
  char *v197;
  char *m;
  unsigned __int8 v199;
  md::LabelPart *v200;
  double v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  unsigned int *v217;
  int v218;
  int v219;
  char v222;
  md::LabelStyle *v223;
  uint64_t v224;
  uint64_t v225;
  void *__dst;
  int v227[2];
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  unint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count *v235;
  __int128 v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  void *__p[2];
  uint64_t v244;
  _BYTE v245[24];
  _BYTE *v246;
  __int128 v247;
  uint64_t v248;
  _BYTE v249[24];
  _BYTE *v250;
  std::__shared_weak_count *v251;
  uint64_t *v252;
  uint64_t v253;
  _BYTE v254[24];
  _BYTE *v255;
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 2);
  v3 = *(_QWORD *)(v2 + 296);
  if (!v3)
  {
    v4 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    v3 = *v4;
    *(_QWORD *)(v2 + 296) = *v4;
  }
  v5 = *(_DWORD *)(v3 + 68);
  v230 = 0;
  v231 = 0;
  v232 = 0;
  v8 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v210 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v210, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v233 = mdm::Allocator::instance(void)::alloc;
  __dst = 0;
  *(_QWORD *)v227 = 0;
  v228 = 0;
  {
    v211 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v211, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v229 = mdm::Allocator::instance(void)::alloc;
  switch(v5)
  {
    case '%':
      v116 = (char *)*((_QWORD *)this + 100);
      v117 = (char *)*((_QWORD *)this + 101);
      v118 = v117 - v116;
      v119 = (v117 - v116) >> 2;
      v120 = __dst;
      if (v119 <= (v228 - (uint64_t)__dst) >> 2)
      {
        v127 = (uint64_t)(*(_QWORD *)v227 - (_QWORD)__dst) >> 2;
        if (v127 < v119)
        {
          v128 = &v116[4 * v127];
          v129 = __dst;
          v130 = (char *)__dst;
          if (v128 != v117)
          {
            v130 = (char *)__dst;
            do
            {
              if (v130)
                *(_DWORD *)v130 = *(_DWORD *)v128;
              v128 += 4;
              v130 += 4;
            }
            while (v128 != v117);
          }
          v118 = v130 - v129;
LABEL_216:
          *(_QWORD *)v227 = &v129[v118];
          v126 = 37;
          if (v120 == *(_BYTE **)v227)
            goto LABEL_311;
          goto LABEL_217;
        }
        if (v117 != v116)
          memmove(__dst, *((const void **)this + 100), v117 - v116);
      }
      else
      {
        if (v118 < 0)
          goto LABEL_346;
        v121 = v228 >> 1;
        if (v228 >> 1 <= v119)
          v121 = (v117 - v116) >> 2;
        v122 = v121;
        if (v121 >> 62)
LABEL_346:
          abort();
        v123 = (_BYTE *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 4 * v121, 4);
        v120 = v123;
        __dst = v123;
        v228 = (uint64_t)&v123[4 * v122];
        v124 = v123;
        if (v116 != v117)
        {
          v124 = v123;
          do
          {
            if (v124)
              *(_DWORD *)v124 = *(_DWORD *)v116;
            v116 += 4;
            v124 += 4;
          }
          while (v116 != v117);
        }
        v118 = v124 - v123;
      }
      v129 = v120;
      goto LABEL_216;
    case '1':
      v218 = 0;
      break;
    case '2':
      v218 = 1;
      break;
    default:
      v125 = 0;
      goto LABEL_325;
  }
  v215 = v5;
  v224 = *((_QWORD *)a2 + 1);
  v225 = *(_QWORD *)a2;
  v223 = (md::LabelStyle *)*((_QWORD *)a2 + 2);
  v240 = 0;
  {
    v212 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v212, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v241 = mdm::Allocator::instance(void)::alloc;
  v242 = 0;
  v239 = (uint64_t *)&v240;
  v11 = this;
  v12 = (unsigned int *)*((_QWORD *)this + 88);
  v217 = (unsigned int *)*((_QWORD *)this + 89);
  if (v12 == v217)
  {
    v115 = 0;
    goto LABEL_202;
  }
  while (2)
  {
    if (!v218 || !*((_WORD *)v12 + 3))
    {
LABEL_115:
      if (!*v12)
      {
LABEL_124:
        if (*((_BYTE *)v12 + 9))
          std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((uint64_t *)&__dst, *(uint64_t *)v227, (char *)(*((_QWORD *)v11 + 92) + 4 * *((unsigned __int8 *)v12 + 8)), (char *)(*((_QWORD *)v11 + 92)+ 4 * (*((unsigned __int8 *)v12 + 8) + (unint64_t)*((unsigned __int8 *)v12 + 9))), *((unsigned __int8 *)v12 + 9));
        goto LABEL_14;
      }
      v71 = (std::__shared_weak_count *)operator new(0x40uLL);
      v71->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      v71->__shared_weak_owners_ = 0;
      v71->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
      v71[1].std::__shared_count = 0u;
      *(_OWORD *)&v71[1].__shared_weak_owners_ = 0u;
      *(_DWORD *)((char *)&v71[2].__vftable + 7) = 0;
      v73 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
      v71[1].__vftable = v73;
      if (v73)
      {
        *(_QWORD *)&v74 = -1;
        *((_QWORD *)&v74 + 1) = -1;
        *(_OWORD *)&v73[5].__get_deleter = v74;
        *(_OWORD *)&v73[6].~__shared_weak_count = v74;
        *(_OWORD *)&v73[4].__on_zero_shared_weak = v74;
        *(_OWORD *)&v73[5].~__shared_weak_count_0 = v74;
        *(_OWORD *)&v73[4].~__shared_weak_count = v74;
        *(_OWORD *)&v73[4].__on_zero_shared = v74;
        *(_OWORD *)&v73[3].~__shared_weak_count_0 = v74;
        *(_OWORD *)&v73[3].__get_deleter = v74;
        *(_OWORD *)&v73[2].__on_zero_shared = v74;
        *(_OWORD *)&v73[2].__on_zero_shared_weak = v74;
        *(_OWORD *)&v73[1].__get_deleter = v74;
        *(_OWORD *)&v73[2].~__shared_weak_count = v74;
        *(_OWORD *)&v73->__on_zero_shared_weak = v74;
        *(_OWORD *)&v73[1].~__shared_weak_count_0 = v74;
        *(_OWORD *)&v73->~__shared_weak_count = v74;
        *(_OWORD *)&v73->__on_zero_shared = v74;
      }
      v237 = v71 + 1;
      v238 = v71;
      v75 = *v12;
      v76 = BYTE1(v71[2].__shared_owners_);
      if (BYTE1(v71[2].__shared_owners_))
      {
        if (v76 >= 0x20)
        {
          v77 = 0;
          v80 = v73;
          while (1)
          {
            v81 = (int)v80->~__shared_weak_count;
            v80 = (std::__shared_weak_count_vtbl *)((char *)v80 + 8);
            if (v81 == 49)
              break;
            if (v76 == ++v77)
              goto LABEL_131;
          }
        }
        else
        {
          v77 = 0;
          v78 = v73;
          while (1)
          {
            v79 = (int)v78->~__shared_weak_count;
            v78 = (std::__shared_weak_count_vtbl *)((char *)v78 + 8);
            if (v79 == 49)
              break;
            if (v76 == ++v77)
              goto LABEL_123;
          }
        }
        *((_DWORD *)&v73->~__shared_weak_count + 2 * v77 + 1) = v75;
      }
      else
      {
LABEL_123:
        *((_QWORD *)&v73->~__shared_weak_count + v76) = (v75 << 32) | 0x31;
        BYTE1(v71[2].__shared_owners_) = v76 + 1;
        qsort(v73, (v76 + 1), 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
      }
LABEL_131:
      v234 = v71 + 1;
      v235 = v71;
      do
        v82 = __ldxr(p_shared_owners);
      while (__stxr(v82 + 1, p_shared_owners));
      v247 = 0uLL;
      v248 = 0;
      v250 = 0;
      md::LabelStyle::pointIcon((uint64_t *)&v236, v223, v225, v224, (uint64_t *)&v234, v219 & 0xFFFFFF00, 0, 49, 0, 255, 0, (uint64_t)&v247);
      v83 = v250;
      if (v250 == v249)
      {
        v83 = v249;
        v84 = 4;
      }
      else
      {
        if (!v250)
          goto LABEL_138;
        v84 = 5;
      }
      (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_138:
      if (SHIBYTE(v248) < 0)
        operator delete((void *)v247);
      do
        v85 = __ldaxr(p_shared_owners);
      while (__stlxr(v85 - 1, p_shared_owners));
      v219 &= 0xFFFFFF00;
      if (v85)
      {
        v86 = v236;
        if ((_QWORD)v236)
          goto LABEL_143;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        v86 = v236;
        if ((_QWORD)v236)
        {
LABEL_143:
          v87 = v231;
          if ((unint64_t)v231 >= v232)
          {
            v93 = v230;
            v94 = (v231 - v230) >> 4;
            v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 60)
              abort();
            v96 = v232 - (_QWORD)v230;
            if ((uint64_t)(v232 - (_QWORD)v230) >> 3 > v95)
              v95 = v96 >> 3;
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
              v97 = 0xFFFFFFFFFFFFFFFLL;
            else
              v97 = v95;
            if (v97)
            {
              v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v233 + 16))(v233, 16 * v97, 8);
              v99 = (char *)(v98 + 16 * v94);
              v100 = v98 + 16 * v97;
              if (v98)
              {
                v101 = *((_QWORD *)&v236 + 1);
                *(_OWORD *)v99 = v236;
                if (v101)
                {
                  v102 = (unint64_t *)(v101 + 8);
                  do
                    v103 = __ldxr(v102);
                  while (__stxr(v103 + 1, v102));
                  v87 = v231;
                }
              }
            }
            else
            {
              v100 = 0;
              v99 = (char *)(16 * v94);
            }
            v91 = v99 + 16;
            if (v87 == v93)
            {
              v106 = v232;
              v230 = v99;
              v232 = v100;
            }
            else
            {
              v104 = v87;
              do
              {
                v105 = *((_OWORD *)v104 - 1);
                v104 -= 16;
                *((_OWORD *)v99 - 1) = v105;
                v99 -= 16;
                *(_QWORD *)v104 = 0;
                *((_QWORD *)v104 + 1) = 0;
              }
              while (v104 != v93);
              v230 = v99;
              v231 = v91;
              v106 = v232;
              v232 = v100;
              do
              {
                v107 = (std::__shared_weak_count *)*((_QWORD *)v87 - 1);
                if (v107)
                {
                  v108 = (unint64_t *)&v107->__shared_owners_;
                  do
                    v109 = __ldaxr(v108);
                  while (__stlxr(v109 - 1, v108));
                  if (!v109)
                  {
                    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                    std::__shared_weak_count::__release_weak(v107);
                  }
                }
                v87 -= 16;
              }
              while (v87 != v93);
            }
            if (v93)
              (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v233 + 40))(v233, v93, v106 - (_QWORD)v93);
          }
          else
          {
            if (v231)
            {
              *(_QWORD *)v231 = v86;
              v88 = *((_QWORD *)&v236 + 1);
              *((_QWORD *)v87 + 1) = *((_QWORD *)&v236 + 1);
              if (v88)
              {
                v89 = (unint64_t *)(v88 + 8);
                do
                  v90 = __ldxr(v89);
                while (__stxr(v90 + 1, v89));
              }
            }
            v91 = v87 + 16;
          }
          v231 = v91;
          v92 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
          if (!*((_QWORD *)&v236 + 1))
            goto LABEL_182;
          goto LABEL_179;
        }
      }
      v92 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
      if (!*((_QWORD *)&v236 + 1))
        goto LABEL_182;
LABEL_179:
      v110 = (unint64_t *)&v92->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
        v112 = v238;
        if (!v238)
          goto LABEL_13;
        goto LABEL_183;
      }
LABEL_182:
      v112 = v238;
      if (!v238)
        goto LABEL_13;
LABEL_183:
      v113 = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
LABEL_13:
      if (v86)
        goto LABEL_14;
      goto LABEL_124;
    }
    v13 = (std::__shared_weak_count *)operator new(0x40uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
    v13[1].std::__shared_count = 0u;
    *(_OWORD *)&v13[1].__shared_weak_owners_ = 0u;
    *(_DWORD *)((char *)&v13[2].__vftable + 7) = 0;
    v14 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
    v13[1].__vftable = v14;
    if (v14)
    {
      *(_QWORD *)&v15 = -1;
      *((_QWORD *)&v15 + 1) = -1;
      *(_OWORD *)&v14[5].__get_deleter = v15;
      *(_OWORD *)&v14[6].~__shared_weak_count = v15;
      *(_OWORD *)&v14[4].__on_zero_shared_weak = v15;
      *(_OWORD *)&v14[5].~__shared_weak_count_0 = v15;
      *(_OWORD *)&v14[4].~__shared_weak_count = v15;
      *(_OWORD *)&v14[4].__on_zero_shared = v15;
      *(_OWORD *)&v14[3].~__shared_weak_count_0 = v15;
      *(_OWORD *)&v14[3].__get_deleter = v15;
      *(_OWORD *)&v14[2].__on_zero_shared = v15;
      *(_OWORD *)&v14[2].__on_zero_shared_weak = v15;
      *(_OWORD *)&v14[1].__get_deleter = v15;
      *(_OWORD *)&v14[2].~__shared_weak_count = v15;
      *(_OWORD *)&v14->__on_zero_shared_weak = v15;
      *(_OWORD *)&v14[1].~__shared_weak_count_0 = v15;
      *(_OWORD *)&v14->~__shared_weak_count = v15;
      *(_OWORD *)&v14->__on_zero_shared = v15;
    }
    v237 = v13 + 1;
    v238 = v13;
    v16 = *((_WORD *)v12 + 3);
    if (!v16)
    {
      v68 = 0;
      goto LABEL_109;
    }
    v222 = 0;
    for (i = 0; i < v16; ++i)
    {
      v18 = *(unsigned int *)(*((_QWORD *)v11 + 96) + 4 * (i + *((unsigned __int16 *)v12 + 2)));
      for (j = v240; j; j = (uint64_t *)*j)
      {
        v27 = *((_DWORD *)j + 7);
        if (v18 >= v27)
        {
          if (v27 >= v18)
            goto LABEL_22;
          ++j;
        }
      }
      v20 = (uint64_t)v237;
      v21 = BYTE1(v237[1].__shared_owners_);
      v22 = v237->__vftable;
      if (BYTE1(v237[1].__shared_owners_))
      {
        if (v21 >= 0x20)
        {
          v23 = 0;
          v28 = v237->__vftable;
          while (1)
          {
            v29 = (int)v28->~__shared_weak_count;
            v28 = (std::__shared_weak_count_vtbl *)((char *)v28 + 8);
            if (v29 == 50)
              break;
            if (v21 == ++v23)
              goto LABEL_40;
          }
        }
        else
        {
          v23 = 0;
          v24 = v237->__vftable;
          while (1)
          {
            v25 = (int)v24->~__shared_weak_count;
            v24 = (std::__shared_weak_count_vtbl *)((char *)v24 + 8);
            if (v25 == 50)
              break;
            if (v21 == ++v23)
              goto LABEL_29;
          }
        }
        *((_DWORD *)&v22->~__shared_weak_count + 2 * v23 + 1) = v18;
      }
      else
      {
LABEL_29:
        *((_QWORD *)&v22->~__shared_weak_count + v21) = (v18 << 32) | 0x32;
        v26 = *(_BYTE *)(v20 + 33) + 1;
        *(_BYTE *)(v20 + 33) = v26;
        qsort(*(void **)v20, v26, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
      }
LABEL_40:
      v30 = v238;
      v234 = (std::__shared_weak_count *)v20;
      v235 = v238;
      if (v238)
      {
        v31 = (unint64_t *)&v238->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      LODWORD(v6) = v6 & 0xFFFFFF00;
      v251 = 0;
      v252 = 0;
      v253 = 0;
      v255 = 0;
      md::LabelStyle::pointIcon((uint64_t *)&v236, v223, v225, v224, (uint64_t *)&v234, (int)v6, 0, 50, 0, 255, 0, (uint64_t)&v251);
      v33 = v255;
      if (v255 == v254)
      {
        v33 = v254;
        v34 = 4;
      }
      else
      {
        if (!v255)
          goto LABEL_48;
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_48:
      if (SHIBYTE(v253) < 0)
      {
        operator delete(v251);
        if (!v30)
          goto LABEL_55;
      }
      else if (!v30)
      {
        goto LABEL_55;
      }
      v35 = (unint64_t *)&v30->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (v36)
      {
LABEL_55:
        v37 = v236;
        if ((_QWORD)v236)
          goto LABEL_56;
        goto LABEL_75;
      }
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v37 = v236;
      if ((_QWORD)v236)
      {
LABEL_56:
        v38 = v231;
        if ((unint64_t)v231 >= v232)
        {
          v43 = v230;
          v44 = (v231 - v230) >> 4;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 60)
            abort();
          v46 = v232 - (_QWORD)v230;
          if ((uint64_t)(v232 - (_QWORD)v230) >> 3 > v45)
            v45 = v46 >> 3;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
            v47 = 0xFFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v233 + 16))(v233, 16 * v47, 8);
            v49 = (char *)(v48 + 16 * v44);
            v50 = v48 + 16 * v47;
            if (v48)
            {
              v51 = *((_QWORD *)&v236 + 1);
              *(_OWORD *)v49 = v236;
              if (v51)
              {
                v52 = (unint64_t *)(v51 + 8);
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
                v38 = v231;
              }
            }
          }
          else
          {
            v50 = 0;
            v49 = (char *)(16 * v44);
          }
          v42 = v49 + 16;
          if (v38 == v43)
          {
            v56 = v232;
            v230 = v49;
            v232 = v50;
          }
          else
          {
            v54 = v38;
            do
            {
              v55 = *((_OWORD *)v54 - 1);
              v54 -= 16;
              *((_OWORD *)v49 - 1) = v55;
              v49 -= 16;
              *(_QWORD *)v54 = 0;
              *((_QWORD *)v54 + 1) = 0;
            }
            while (v54 != v43);
            v230 = v49;
            v231 = v42;
            v56 = v232;
            v232 = v50;
            do
            {
              v57 = (std::__shared_weak_count *)*((_QWORD *)v38 - 1);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v38 -= 16;
            }
            while (v38 != v43);
          }
          if (v43)
            (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v233 + 40))(v233, v43, v56 - (_QWORD)v43);
          v11 = this;
        }
        else
        {
          if (v231)
          {
            *(_QWORD *)v231 = v37;
            v39 = *((_QWORD *)&v236 + 1);
            *((_QWORD *)v38 + 1) = *((_QWORD *)&v236 + 1);
            if (v39)
            {
              v40 = (unint64_t *)(v39 + 8);
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
          }
          v42 = v38 + 16;
        }
        v231 = v42;
        v60 = v240;
        v61 = &v240;
LABEL_93:
        v62 = (uint64_t *)v61;
        if (v60)
        {
          do
          {
            v61 = (uint64_t **)v60;
            v63 = *((_DWORD *)v60 + 7);
            if (v18 < v63)
            {
              v60 = *v61;
              goto LABEL_93;
            }
            if (v63 >= v18)
              goto LABEL_101;
            v60 = v61[1];
          }
          while (v60);
          v62 = (uint64_t *)(v61 + 1);
        }
        v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v241 + 16))(v241, 32, 8);
        *(_DWORD *)(v64 + 28) = v18;
        *(_QWORD *)v64 = 0;
        *(_QWORD *)(v64 + 8) = 0;
        *(_QWORD *)(v64 + 16) = v61;
        *v62 = v64;
        if (*v239)
        {
          v239 = (uint64_t *)*v239;
          v64 = *v62;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v240, (uint64_t *)v64);
        ++v242;
        goto LABEL_101;
      }
LABEL_75:
      v222 = 1;
LABEL_101:
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
      if (*((_QWORD *)&v236 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v16 = *((_WORD *)v12 + 3);
LABEL_22:
      ;
    }
    v13 = v238;
    v68 = v222;
    if (!v238)
      goto LABEL_112;
LABEL_109:
    v69 = (unint64_t *)&v13->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (v70)
    {
LABEL_112:
      if ((v68 & 1) != 0)
        goto LABEL_115;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((v68 & 1) != 0)
        goto LABEL_115;
    }
LABEL_14:
    v12 += 3;
    if (v12 != v217)
      continue;
    break;
  }
  v115 = v240;
  v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
LABEL_202:
  std::__tree<unsigned int,std::less<unsigned int>,geo::StdAllocator<unsigned int,mdm::Allocator>>::destroy((uint64_t)&v239, v115);
  v126 = v215;
  if (__dst == *(void **)v227)
    goto LABEL_311;
LABEL_217:
  v131 = (std::__shared_weak_count *)operator new(0x40uLL);
  v131->__shared_owners_ = 0;
  v131->__shared_weak_owners_ = 0;
  v131->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
  v131[1].std::__shared_count = 0u;
  *(_OWORD *)&v131[1].__shared_weak_owners_ = 0u;
  *(_DWORD *)((char *)&v131[2].__vftable + 7) = 0;
  v132 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  v131[1].__vftable = v132;
  if (v132)
  {
    *(_QWORD *)&v133 = -1;
    *((_QWORD *)&v133 + 1) = -1;
    *(_OWORD *)&v132[5].__get_deleter = v133;
    *(_OWORD *)&v132[6].~__shared_weak_count = v133;
    *(_OWORD *)&v132[4].__on_zero_shared_weak = v133;
    *(_OWORD *)&v132[5].~__shared_weak_count_0 = v133;
    *(_OWORD *)&v132[4].~__shared_weak_count = v133;
    *(_OWORD *)&v132[4].__on_zero_shared = v133;
    *(_OWORD *)&v132[3].~__shared_weak_count_0 = v133;
    *(_OWORD *)&v132[3].__get_deleter = v133;
    *(_OWORD *)&v132[2].__on_zero_shared = v133;
    *(_OWORD *)&v132[2].__on_zero_shared_weak = v133;
    *(_OWORD *)&v132[1].__get_deleter = v133;
    *(_OWORD *)&v132[2].~__shared_weak_count = v133;
    *(_OWORD *)&v132->__on_zero_shared_weak = v133;
    *(_OWORD *)&v132[1].~__shared_weak_count_0 = v133;
    *(_OWORD *)&v132->~__shared_weak_count = v133;
    *(_OWORD *)&v132->__on_zero_shared = v133;
  }
  v251 = v131 + 1;
  v252 = (uint64_t *)v131;
  if (v230 == v231)
    v126 = 37;
  v216 = v126;
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v134 = (unsigned int *)__dst;
  v135 = *(_QWORD *)v227;
  if (__dst == *(void **)v227)
    goto LABEL_230;
  v136 = (int *)((char *)__dst + 4);
  do
  {
    if (v136 == *(int **)v227)
      goto LABEL_230;
    v137 = v136 - 1;
    v138 = *(v136 - 1);
    v139 = *v136++;
  }
  while (v138 != v139);
  for (k = v137 + 2; k != (int *)v135; ++k)
  {
    v141 = v138;
    v138 = *k;
    if (v141 != *k)
    {
      v137[1] = v138;
      ++v137;
    }
  }
  v142 = (char *)(v137 + 1);
  v143 = v135 - (_QWORD)(v137 + 1);
  if (!v143)
  {
LABEL_230:
    if (v134 != (unsigned int *)v135)
      goto LABEL_238;
    goto LABEL_306;
  }
  v144 = v135 - (_QWORD)&v142[v143];
  if ((char *)v135 != &v142[v143])
    memmove(v142, &v142[v143], v135 - (_QWORD)&v142[v143]);
  v135 = (uint64_t)&v142[v144];
  *(_QWORD *)v227 = &v142[v144];
  if (v134 == (unsigned int *)&v142[v144])
  {
LABEL_306:
    v191 = (unint64_t *)&v131->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
    goto LABEL_310;
  }
LABEL_238:
  while (2)
  {
    v145 = *v134;
    v146 = (uint64_t *)v251;
    v147 = BYTE1(v251[1].__shared_owners_);
    v148 = v251->__vftable;
    if (BYTE1(v251[1].__shared_owners_))
    {
      if (v147 >= 0x20)
      {
        v149 = 0;
        v153 = v251->__vftable;
        while (1)
        {
          v154 = (int)v153->~__shared_weak_count;
          v153 = (std::__shared_weak_count_vtbl *)((char *)v153 + 8);
          if (v154 == 37)
            break;
          if (v147 == ++v149)
            goto LABEL_249;
        }
      }
      else
      {
        v149 = 0;
        v150 = v251->__vftable;
        while (1)
        {
          v151 = (int)v150->~__shared_weak_count;
          v150 = (std::__shared_weak_count_vtbl *)((char *)v150 + 8);
          if (v151 == 37)
            break;
          if (v147 == ++v149)
            goto LABEL_243;
        }
      }
      *((_DWORD *)&v148->~__shared_weak_count + 2 * v149 + 1) = v145;
    }
    else
    {
LABEL_243:
      *((_QWORD *)&v148->~__shared_weak_count + v147) = (v145 << 32) | 0x25;
      v152 = *((_BYTE *)v146 + 33) + 1;
      *((_BYTE *)v146 + 33) = v152;
      qsort((void *)*v146, v152, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_249:
    v156 = *((_QWORD *)a2 + 1);
    v155 = (md::LabelStyle *)*((_QWORD *)a2 + 2);
    v157 = *(_QWORD *)a2;
    v158 = (std::__shared_weak_count *)v252;
    v239 = v146;
    v240 = v252;
    if (v252)
    {
      v159 = (unint64_t *)(v252 + 1);
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
    __p[0] = 0;
    __p[1] = 0;
    v244 = 0;
    v246 = 0;
    md::LabelStyle::pointIcon((uint64_t *)&v247, v155, v157, v156, (uint64_t *)&v239, 0, 0, 37, 0, 255, 0, (uint64_t)__p);
    v161 = v246;
    if (v246 == v245)
    {
      v161 = v245;
      v162 = 4;
LABEL_256:
      (*(void (**)(void))(*v161 + 8 * v162))();
    }
    else if (v246)
    {
      v162 = 5;
      goto LABEL_256;
    }
    if (SHIBYTE(v244) < 0)
    {
      operator delete(__p[0]);
      if (!v158)
        goto LABEL_264;
    }
    else if (!v158)
    {
      goto LABEL_264;
    }
    v163 = (unint64_t *)&v158->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (v164)
    {
LABEL_264:
      v165 = v247;
      if ((_QWORD)v247)
        goto LABEL_265;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
      v165 = v247;
      if ((_QWORD)v247)
      {
LABEL_265:
        v166 = v231;
        if ((unint64_t)v231 >= v232)
        {
          v171 = v230;
          v172 = (v231 - v230) >> 4;
          v173 = v172 + 1;
          if ((unint64_t)(v172 + 1) >> 60)
            abort();
          v174 = v232 - (_QWORD)v230;
          if ((uint64_t)(v232 - (_QWORD)v230) >> 3 > v173)
            v173 = v174 >> 3;
          if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFF0)
            v175 = 0xFFFFFFFFFFFFFFFLL;
          else
            v175 = v173;
          if (v175)
          {
            v176 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v233 + 16))(v233, 16 * v175, 8);
            v177 = (char *)(v176 + 16 * v172);
            v178 = v176 + 16 * v175;
            if (v176)
            {
              v179 = *((_QWORD *)&v247 + 1);
              *(_OWORD *)v177 = v247;
              if (v179)
              {
                v180 = (unint64_t *)(v179 + 8);
                do
                  v181 = __ldxr(v180);
                while (__stxr(v181 + 1, v180));
                v166 = v231;
              }
            }
          }
          else
          {
            v178 = 0;
            v177 = (char *)(16 * v172);
          }
          v170 = v177 + 16;
          if (v166 == v171)
          {
            v184 = v232;
            v230 = v177;
            v232 = v178;
          }
          else
          {
            v182 = v166;
            do
            {
              v183 = *((_OWORD *)v182 - 1);
              v182 -= 16;
              *((_OWORD *)v177 - 1) = v183;
              v177 -= 16;
              *(_QWORD *)v182 = 0;
              *((_QWORD *)v182 + 1) = 0;
            }
            while (v182 != v171);
            v230 = v177;
            v231 = v170;
            v184 = v232;
            v232 = v178;
            do
            {
              v185 = (std::__shared_weak_count *)*((_QWORD *)v166 - 1);
              if (v185)
              {
                v186 = (unint64_t *)&v185->__shared_owners_;
                do
                  v187 = __ldaxr(v186);
                while (__stlxr(v187 - 1, v186));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
              v166 -= 16;
            }
            while (v166 != v171);
          }
          if (v171)
            (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v233 + 40))(v233, v171, v184 - (_QWORD)v171);
        }
        else
        {
          if (v231)
          {
            *(_QWORD *)v231 = v165;
            v167 = *((_QWORD *)&v247 + 1);
            *((_QWORD *)v166 + 1) = *((_QWORD *)&v247 + 1);
            if (v167)
            {
              v168 = (unint64_t *)(v167 + 8);
              do
                v169 = __ldxr(v168);
              while (__stxr(v169 + 1, v168));
            }
          }
          v170 = v166 + 16;
        }
        v231 = v170;
      }
    }
    v188 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
    if (*((_QWORD *)&v247 + 1))
    {
      v189 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
    }
    if (++v134 != (unsigned int *)v135)
      continue;
    break;
  }
  v131 = (std::__shared_weak_count *)v252;
  v8 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if (v252)
    goto LABEL_306;
LABEL_310:
  v126 = v216;
LABEL_311:
  if (v230 == v231)
  {
    v125 = 0;
  }
  else
  {
    v193 = v231 - v230;
    if (v193 == 16)
    {
      {
        v213 = operator new();
        *((_QWORD *)v8 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v125 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 299) + 16))(*((_QWORD *)v8 + 299), 840, 8);
      md::PointIconLabelPart::PointIconLabelPart(v125, v230, *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((md::LabelStyle **)a2 + 2), v126);
    }
    else
    {
      {
        v214 = operator new();
        *((_QWORD *)v8 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v214, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v125 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 299) + 16))(*((_QWORD *)v8 + 299), 760, 8);
      v195 = *((_QWORD *)a2 + 2);
      v196 = (_QWORD *)md::StackLabelPart::StackLabelPart(v125, 1);
      *v196 = off_1E429B2D0;
      md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)(v196 + 87), v195);
      *(_DWORD *)(v125 + 752) = v126;
      *(_BYTE *)(v125 + 756) = 1;
      *(_BYTE *)(v125 + 630) = 1;
      v197 = v230;
      for (m = v231; v197 != m; v197 += 16)
      {
        {
          v203 = operator new();
          *((_QWORD *)v8 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v203, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v200 = (md::LabelPart *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 299) + 16))(*((_QWORD *)v8 + 299), 768, 8);
        v201 = md::IconLabelPart::IconLabelPart((uint64_t)v200, v197);
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v202 + 176))(v202, 4, v201);
        md::CompositeLabelPart::addLabelPart(v125, v200);
      }
    }
  }
  if (__dst)
  {
    *(_QWORD *)v227 = __dst;
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v229 + 40))(v229, __dst, v228 - (_QWORD)__dst);
  }
LABEL_325:
  v204 = v230;
  if (v230)
  {
    v205 = v231;
    if (v231 != v230)
    {
      do
      {
        v206 = (std::__shared_weak_count *)*((_QWORD *)v205 - 1);
        if (v206)
        {
          v207 = (unint64_t *)&v206->__shared_owners_;
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        v205 -= 16;
      }
      while (v205 != v204);
      v204 = v230;
    }
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v233 + 40))(v233, v204, v232 - (_QWORD)v204);
  }
  return v125;
}

void sub_19FC91900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  md::CompositeLabelPart *v42;
  mdm::Allocator *v44;
  uint64_t v45;

  md::CompositeLabelPart::~CompositeLabelPart(v42);
  v45 = mdm::Allocator::instance(v44);
  (*(void (**)(uint64_t, md::CompositeLabelPart *, uint64_t))(*(_QWORD *)v45 + 40))(v45, v42, 760);
  if (a23)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a26 + 40))(a26, a23, a25 - a23);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a27);
  _Unwind_Resume(a1);
}

uint64_t md::TransitNodeLabelFeature::iconColor@<X0>(md::TransitNodeLabelFeature *this@<X0>, const md::LabelIconStyleGroup *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  int v7;
  BOOL v8;
  char v9;

  result = (*(uint64_t (**)(md::TransitNodeLabelFeature *))(*(_QWORD *)this + 64))(this);
  v7 = *((unsigned __int8 *)a2 + 89);
  if (!result
    || (v7 != 3 ? (v8 = v7 == 0) : (v8 = 1), !v8 || (*(_DWORD *)a3 = *((_DWORD *)this + 218), a3[4] = 1, v7) && v7 != 3))
  {
    if ((v7 & 0xFFFFFFFD) != 0)
    {
      v9 = 0;
      *a3 = 0;
    }
    else
    {
      *(_DWORD *)a3 = *((_DWORD *)a2 + 18);
      v9 = 1;
    }
    a3[4] = v9;
  }
  return result;
}

uint64_t md::TransitNodeLabelFeature::annotationTextIndex(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  char *v12;
  const char *v13;
  char *v14;
  int v15;
  unsigned __int8 v16;
  size_t v17;
  size_t v18;
  __int128 *p_dst;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  int v27;
  void *v28;
  uint64_t *v29;
  void **v30;
  uint64_t *v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  int v37;
  char v38;
  uint64_t **v39;
  uint64_t **v40;
  void **v41;
  int v42;
  const void *v43;
  size_t v44;
  size_t v45;
  int v46;
  int v47;
  uint64_t *v48;
  _QWORD **v49;
  size_t v50;
  int v51;
  void **v52;
  size_t v53;
  size_t v54;
  const void **v55;
  const char *v56;
  uint64_t v57;
  size_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  void *v72;
  char v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  char *__s[2];
  unint64_t v79;
  uint64_t v80;
  void *__src[2];
  int64_t v82;
  uint64_t v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 __dst;
  unint64_t v92;
  uint64_t v93;
  const char *v94;
  char *v95;
  const char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return md::PointLabelFeature::annotationTextIndex(a1, (uint64_t)a2, a3);
  if (!*(_BYTE *)(a1 + 877))
  {
    *(_WORD *)(a1 + 877) = -255;
    v102 = 0;
    v103 = 0;
    std::mutex::lock((std::mutex *)(a1 + 8));
    v7 = *(_QWORD *)(a1 + 152);
    if (!v7)
    {
      std::mutex::unlock((std::mutex *)(a1 + 8));
      goto LABEL_142;
    }
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v102);
    std::mutex::unlock((std::mutex *)(a1 + 8));
    if (!v102 || !v8)
    {
LABEL_142:
      v65 = v103;
      if (v103)
      {
        p_shared_owners = (unint64_t *)&v103->__shared_owners_;
        do
          v67 = __ldaxr(p_shared_owners);
        while (__stlxr(v67 - 1, p_shared_owners));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      return *(unsigned __int8 *)(a1 + 878);
    }
    v98 = 0;
    v99 = 0;
    v100 = 0;
    {
      v68 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v68, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v101 = mdm::Allocator::instance(void)::alloc;
    md::TransitNodeLabelFeature::populateAnnotationInfos((uint64_t)v8, &v98);
    v10 = v98;
    if (v98 == v99)
      goto LABEL_140;
    v96 = 0;
    v97 = 0;
    v94 = 0;
    v95 = 0;
    v11 = atomic_load((unsigned __int8 *)(*a2 + 3392));
    if ((v11 & 1) != 0)
      geo::codec::transitNodeFeatureGetLocalizedParentheticalLabels(v8, (unint64_t *)&v97, (unint64_t *)&v96, (unint64_t *)&v95, &v94);
    v12 = v97;
    if (!v97 || (v13 = v96) == 0 || (v14 = v95) == 0)
    {
      geo::codec::transitNodeFeatureGetNativeParentheticalLabels(v8, &v97, &v96, &v95, &v94);
      v13 = v96;
      v12 = v97;
      v14 = v95;
    }
    if (!v12 || !v13 || !v14)
      goto LABEL_139;
    v15 = *(_DWORD *)(a2[2] + 160);
    v71 = v15 < 1;
    if (v15 < 0)
      v15 = -v15;
    v75 = v15;
    {
      v69 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v93 = mdm::Allocator::instance(void)::alloc;
    v17 = strlen(v13);
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v18 = v17;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      p_dst = (__int128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                               + 16))(mdm::Allocator::instance(void)::alloc, v20 + 1, 1);
      *((_QWORD *)&__dst + 1) = v18;
      v92 = v21 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v92) = v17;
      p_dst = &__dst;
      if (!v17)
      {
LABEL_31:
        *((_BYTE *)p_dst + v18) = 0;
        v88 = 0;
        {
          v70 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v70, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v89 = mdm::Allocator::instance(void)::alloc;
        v90 = 0;
        v87 = &v88;
        v24 = v98;
        v23 = v99;
        if (v98 == v99)
          goto LABEL_137;
        v73 = 0;
        v77 = 0;
        LOBYTE(v25) = 0;
        v74 = v99;
        while (1)
        {
          if ((v25 & 1) != 0)
            goto LABEL_137;
          if (*(_DWORD *)v24 == 2)
          {
            v25 = *(_QWORD *)(v24 + 8);
            if (v25)
            {
              v26 = atomic_load((unsigned __int8 *)(*a2 + 3392));
              __s[0] = 0;
              geo::codec::transitLineGetSubtitleNativeLabel(v25, __s, 0);
              localizedLabel(__src, (uint64_t *)v25, __s[0], v26 & 1, 0);
              v27 = SHIBYTE(v82);
              if (v82 >= 0)
                v28 = (void *)HIBYTE(v82);
              else
                v28 = __src[1];
              if (!v28)
              {
                LOBYTE(v25) = 0;
                v38 = 1;
                goto LABEL_112;
              }
              v72 = __src[1];
              v29 = v88;
              v76 = SHIBYTE(v82);
              if (v88)
              {
                if (v82 >= 0)
                  v30 = __src;
                else
                  v30 = (void **)__src[0];
                v31 = v88;
                while (1)
                {
                  v32 = *((char *)v31 + 55);
                  if (v32 >= 0)
                    v33 = v31 + 4;
                  else
                    v33 = (const void *)v31[4];
                  if (v32 >= 0)
                    v34 = *((unsigned __int8 *)v31 + 55);
                  else
                    v34 = v31[5];
                  if (v34 >= (unint64_t)v28)
                    v35 = (size_t)v28;
                  else
                    v35 = v34;
                  v36 = memcmp(v30, v33, v35);
                  if (v36)
                  {
                    if ((v36 & 0x80000000) == 0)
                      goto LABEL_64;
                  }
                  else if ((unint64_t)v28 >= v34)
                  {
LABEL_64:
                    v37 = memcmp(v33, v30, v35);
                    if (v37)
                    {
                      if ((v37 & 0x80000000) == 0)
                      {
LABEL_66:
                        LOBYTE(v25) = 0;
                        v38 = 1;
                        goto LABEL_72;
                      }
                    }
                    else if (v34 >= (unint64_t)v28)
                    {
                      goto LABEL_66;
                    }
                    ++v31;
                  }
                  v31 = (uint64_t *)*v31;
                  if (!v31)
                  {
                    if (v77 == v75)
                    {
                      v38 = 0;
                      LOBYTE(v25) = v71;
                      v77 = v75;
                      goto LABEL_72;
                    }
                    v39 = &v88;
                    v40 = &v88;
                    if (v29)
                    {
                      if (v76 >= 0)
                        v41 = __src;
                      else
                        v41 = (void **)__src[0];
                      while (1)
                      {
                        v40 = (uint64_t **)v29;
                        v42 = *((char *)v29 + 55);
                        if (v42 >= 0)
                          v43 = v29 + 4;
                        else
                          v43 = (const void *)v29[4];
                        if (v42 >= 0)
                          v44 = *((unsigned __int8 *)v29 + 55);
                        else
                          v44 = v29[5];
                        if (v44 >= (unint64_t)v28)
                          v45 = (size_t)v28;
                        else
                          v45 = v44;
                        v46 = memcmp(v41, v43, v45);
                        if (v46)
                        {
                          if (v46 < 0)
                            goto LABEL_77;
LABEL_91:
                          v47 = memcmp(v43, v41, v45);
                          if (v47)
                          {
                            if ((v47 & 0x80000000) == 0)
                              goto LABEL_103;
                          }
                          else if (v44 >= (unint64_t)v28)
                          {
                            goto LABEL_103;
                          }
                          v29 = v40[1];
                          if (!v29)
                          {
                            v39 = v40 + 1;
                            break;
                          }
                        }
                        else
                        {
                          if ((unint64_t)v28 >= v44)
                            goto LABEL_91;
LABEL_77:
                          v29 = *v40;
                          v39 = v40;
                          if (!*v40)
                            break;
                        }
                      }
                    }
LABEL_97:
                    v48 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, 64, 8);
                    v49 = (_QWORD **)(v48 + 4);
                    v48[7] = v83;
                    if (v76 < 0)
                    {
                      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v49, __src[0], (unint64_t)v72);
                    }
                    else
                    {
                      *(_OWORD *)v49 = *(_OWORD *)__src;
                      v48[6] = v82;
                    }
                    *v48 = 0;
                    v48[1] = 0;
                    v48[2] = (uint64_t)v40;
                    *v39 = v48;
                    if (*v87)
                    {
                      v87 = (uint64_t **)*v87;
                      v48 = *v39;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v88, v48);
                    ++v90;
LABEL_103:
                    if ((v73 & 1) != 0)
                    {
                      v50 = strlen(v97);
                      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::append((const void **)&__dst, v97, v50);
                    }
                    v51 = SHIBYTE(v82);
                    if (v82 >= 0)
                      v52 = __src;
                    else
                      v52 = (void **)__src[0];
                    if (v82 >= 0)
                      v53 = HIBYTE(v82);
                    else
                      v53 = (size_t)__src[1];
                    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::append((const void **)&__dst, v52, v53);
                    LOBYTE(v25) = 0;
                    ++v77;
                    v73 = 1;
                    v38 = 1;
                    v23 = v74;
                    v27 = v51;
                    goto LABEL_112;
                  }
                }
              }
              v39 = &v88;
              v40 = &v88;
              if (v77 != v75)
                goto LABEL_97;
              v38 = 0;
              LOBYTE(v25) = v71;
              v77 = v75;
LABEL_72:
              v23 = v74;
              v27 = v76;
LABEL_112:
              if (v27 < 0)
                (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v83 + 40))(v83, __src[0], v82 & 0x7FFFFFFFFFFFFFFFLL);
              if ((v38 & 1) == 0)
              {
LABEL_115:
                if ((v73 & 1) == 0 || (v25 & 1) != 0)
                  goto LABEL_137;
                v54 = strlen(v95);
                v55 = std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::append((const void **)&__dst, v95, v54);
                if (v94)
                  v56 = v94;
                else
                  v56 = "";
                v57 = mdm::Allocator::instance((mdm::Allocator *)v55);
                v80 = v57;
                v58 = strlen(v56);
                if (v58 > 0x7FFFFFFFFFFFFFF7)
                  abort();
                v59 = (char *)v58;
                if (v58 >= 0x17)
                {
                  v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17)
                    v61 = v58 | 7;
                  v62 = v61 + 1;
                  v60 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v61 + 1, 1);
                  __s[1] = v59;
                  v79 = v62 | 0x8000000000000000;
                  __s[0] = v60;
                }
                else
                {
                  HIBYTE(v79) = v58;
                  v60 = (char *)__s;
                  if (!v58)
                  {
LABEL_128:
                    v59[(_QWORD)v60] = 0;
                    v83 = v93;
                    if (SHIBYTE(v92) < 0)
                    {
                      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)__src, (void *)__dst, *((unint64_t *)&__dst + 1));
                    }
                    else
                    {
                      *(_OWORD *)__src = __dst;
                      v82 = v92;
                    }
                    v63 = v80;
                    v86 = v80;
                    v64 = SHIBYTE(v79);
                    if (SHIBYTE(v79) < 0)
                    {
                      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v84, __s[0], (unint64_t)__s[1]);
                    }
                    else
                    {
                      v84 = *(_OWORD *)__s;
                      v85 = v79;
                    }
                    *(_BYTE *)(a1 + 878) = md::PointLabelFeature::indexForTextEntry((uint64_t *)a1, (uint64_t)__src);
                    if (SHIBYTE(v85) < 0)
                    {
                      (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v86 + 40))(v86, v84, v85 & 0x7FFFFFFFFFFFFFFFLL);
                      if (SHIBYTE(v82) < 0)
                        goto LABEL_148;
LABEL_136:
                      if (v64 < 0)
LABEL_149:
                        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v63 + 40))(v63, __s[0], v79 & 0x7FFFFFFFFFFFFFFFLL);
                    }
                    else
                    {
                      if ((SHIBYTE(v82) & 0x80000000) == 0)
                        goto LABEL_136;
LABEL_148:
                      (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v83 + 40))(v83, __src[0], v82 & 0x7FFFFFFFFFFFFFFFLL);
                      if (v64 < 0)
                        goto LABEL_149;
                    }
LABEL_137:
                    std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy((uint64_t)&v87, (uint64_t)v88);
                    if (SHIBYTE(v92) < 0)
                      (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v93 + 40))(v93, __dst, v92 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_139:
                    v10 = v98;
LABEL_140:
                    if (v10)
                    {
                      v99 = v10;
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v101 + 40))(v101, v10, v100 - v10);
                    }
                    goto LABEL_142;
                  }
                }
                memmove(v60, v56, (size_t)v59);
                goto LABEL_128;
              }
            }
          }
          else
          {
            LOBYTE(v25) = 0;
          }
          v24 += 16;
          if (v24 == v23)
            goto LABEL_115;
        }
      }
    }
    memmove(p_dst, v13, v18);
    goto LABEL_31;
  }
  return *(unsigned __int8 *)(a1 + 878);
}

void sub_19FC924BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;

  if (SHIBYTE(a23) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a24 + 40))(a24, a21, a23 & 0x7FFFFFFFFFFFFFFFLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 40))(v37, v38, a19 & 0x7FFFFFFFFFFFFFFFLL);
  std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy((uint64_t)&a30, a31);
  if (SHIBYTE(a36) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a37 + 40))(a37, a34, a36 & 0x7FFFFFFFFFFFFFFFLL);
  v41 = *(_QWORD *)(v39 - 136);
  if (v41)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v39 - 112) + 40))(*(_QWORD *)(v39 - 112), v41, *(_QWORD *)(v39 - 120) - v41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v39 - 104);
  _Unwind_Resume(a1);
}

md::CompositeLabelPart *md::TransitNodeLabelFeature::newGraphicAnnotationPart(md::TransitNodeLabelFeature *this, const md::PartCreationContext *a2)
{
  md::TransitNodeLabelFeature *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  md::CompositeLabelPart *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  std::__shared_weak_count *v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  int v21;
  char v22;
  int v23;
  uint64_t *v24;
  float *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  __int128 *p_dst;
  size_t v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  _BOOL4 v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  const void *v63;
  size_t v64;
  size_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char v84;
  int v85;
  std::__shared_weak_count *v86;
  unsigned __int8 v87;
  md::LabelPart *v88;
  double v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  int v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v132;
  _QWORD *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  md::TransitNodeLabelFeature *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  const md::PartCreationContext *v147;
  int v148;
  md::CompositeLabelPart *v149;
  __int128 *__s1;
  std::__shared_weak_count *v151;
  int v152;
  __int128 v153;
  __int128 __dst;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned __int8 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t *v165;
  uint64_t v166[3];
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  uint64_t v170;
  geo::codec::VectorTile *v171;
  std::__shared_weak_count *v172;

  v3 = this;
  if ((*(uint64_t (**)(md::TransitNodeLabelFeature *))(*(_QWORD *)this + 64))(this))
  {
    v4 = *((_QWORD *)v3 + 63);
    v5 = *(std::__shared_weak_count **)(v4 + 312);
    if (!v5)
      return 0;
    *(_QWORD *)&__dst = v3;
    *((_QWORD *)&__dst + 1) = a2;
    v167 = 0;
    v168 = 0;
    v6 = *((_QWORD *)a2 + 1);
    switch(*(_BYTE *)(v6 + 1223))
    {
      case 0:
        v95 = *(std::__shared_weak_count **)(v4 + 320);
        if (!v95)
        {
          v167 = v5;
          v168 = 0;
LABEL_161:
          *(_BYTE *)(v6 + 1223) = 1;
          goto LABEL_180;
        }
        p_shared_owners = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldxr(p_shared_owners);
        while (__stxr(v97 + 1, p_shared_owners));
        v6 = *((_QWORD *)a2 + 1);
        v98 = *(unsigned __int8 *)(v6 + 1223);
        v167 = v5;
        v168 = v95;
        if (v98 != 3)
          goto LABEL_161;
LABEL_180:
        while (1)
        {
          v10 = md::TransitNodeLabelFeature::newGraphicAnnotationPartForExternalFeature(md::PartCreationContext const&)::$_0::operator()((uint64_t)&__dst, (_QWORD **)&v167);
          if (v10)
            goto LABEL_190;
          shared_owners = (std::__shared_weak_count *)v5[1].__shared_owners_;
          shared_weak_owners = (std::__shared_weak_count *)v5[1].__shared_weak_owners_;
          if (shared_weak_owners)
          {
            v117 = (unint64_t *)&shared_weak_owners->__shared_owners_;
            do
              v118 = __ldxr(v117);
            while (__stxr(v118 + 1, v117));
          }
          v119 = v168;
          v167 = shared_owners;
          v168 = shared_weak_owners;
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
            shared_owners = v167;
          }
          v5 = shared_owners;
          if (!shared_owners)
            goto LABEL_166;
        }
      case 1:
      case 3:
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 + 111);
        v7 = (std::__shared_weak_count *)*((_QWORD *)v3 + 112);
        if (v7)
        {
          v8 = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v167 = v5;
        v168 = v7;
        if (!v5)
          goto LABEL_166;
        v10 = md::TransitNodeLabelFeature::newGraphicAnnotationPartForExternalFeature(md::PartCreationContext const&)::$_0::operator()((uint64_t)&__dst, (_QWORD **)&v167);
        goto LABEL_190;
      case 2:
        v99 = *((_QWORD *)v3 + 111);
        if (v99)
        {
          v5 = *(std::__shared_weak_count **)(v99 + 32);
          v100 = *(std::__shared_weak_count **)(v99 + 40);
          if (v100)
          {
            v101 = (unint64_t *)&v100->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
            v6 = *((_QWORD *)a2 + 1);
            v103 = *(unsigned __int8 *)(v6 + 1223);
            v167 = v5;
            v168 = v100;
            if (v103 == 3)
            {
LABEL_165:
              if (v5)
                goto LABEL_180;
LABEL_166:
              v107 = *((_QWORD *)a2 + 1);
              if (*(_BYTE *)(v107 + 1223) != 3)
                *(_BYTE *)(v107 + 1223) = 3;
              v108 = (std::__shared_weak_count *)*((_QWORD *)v3 + 113);
              if (v108)
              {
                v109 = (std::__shared_weak_count *)*((_QWORD *)v3 + 114);
                if (v109)
                {
                  v110 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v111 = __ldxr(v110);
                  while (__stxr(v111 + 1, v110));
                }
                v112 = v168;
                v167 = v108;
                v168 = v109;
                if (v112)
                {
                  v113 = (unint64_t *)&v112->__shared_owners_;
                  do
                    v114 = __ldaxr(v113);
                  while (__stlxr(v114 - 1, v113));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
                v10 = md::TransitNodeLabelFeature::newGraphicAnnotationPartForExternalFeature(md::PartCreationContext const&)::$_0::operator()((uint64_t)&__dst, (_QWORD **)&v167);
                v5 = v167;
              }
              else
              {
                v5 = 0;
                v10 = 0;
              }
LABEL_190:
              v122 = v168;
              if (v168)
              {
                v123 = (unint64_t *)&v168->__shared_owners_;
                do
                  v124 = __ldxr(v123);
                while (__stxr(v124 + 1, v123));
              }
              *((_QWORD *)v3 + 111) = v5;
              v125 = (std::__shared_weak_count *)*((_QWORD *)v3 + 112);
              *((_QWORD *)v3 + 112) = v122;
              if (!v125)
                goto LABEL_221;
              v126 = (unint64_t *)&v125->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
                if (*((_QWORD *)v3 + 113))
                  goto LABEL_198;
              }
              else
              {
LABEL_221:
                if (*((_QWORD *)v3 + 113))
                {
LABEL_198:
                  v128 = v168;
                  if (v168)
                  {
                    v129 = (unint64_t *)&v168->__shared_owners_;
                    do
                      v130 = __ldaxr(v129);
                    while (__stlxr(v130 - 1, v129));
                    if (!v130)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  return v10;
                }
              }
              v133 = &v167->__vftable;
              v132 = v168;
              if (v168)
              {
                v134 = (unint64_t *)&v168->__shared_owners_;
                do
                  v135 = __ldxr(v134);
                while (__stxr(v135 + 1, v134));
              }
              *((_QWORD *)v3 + 113) = v133;
              v136 = (std::__shared_weak_count *)*((_QWORD *)v3 + 114);
              *((_QWORD *)v3 + 114) = v132;
              if (v136)
              {
                v137 = (unint64_t *)&v136->__shared_owners_;
                do
                  v138 = __ldaxr(v137);
                while (__stlxr(v138 - 1, v137));
                if (!v138)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
              }
              goto LABEL_198;
            }
LABEL_164:
            *(_BYTE *)(v6 + 1223) = 1;
            goto LABEL_165;
          }
        }
        else
        {
          v5 = 0;
        }
        v167 = v5;
        v168 = 0;
        goto LABEL_164;
      default:
        goto LABEL_166;
    }
  }
  v171 = 0;
  v172 = 0;
  std::mutex::lock((std::mutex *)((char *)v3 + 8));
  v11 = *((_QWORD *)v3 + 19);
  if (!v11)
  {
    std::mutex::unlock((std::mutex *)((char *)v3 + 8));
    v149 = 0;
    goto LABEL_152;
  }
  v12 = (*(uint64_t (**)(uint64_t, geo::codec::VectorTile **))(*(_QWORD *)v11 + 16))(v11, &v171);
  std::mutex::unlock((std::mutex *)((char *)v3 + 8));
  v149 = 0;
  if (!v171 || !v12)
    goto LABEL_152;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  {
    v139 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v139, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v170 = mdm::Allocator::instance(void)::alloc;
  md::TransitNodeLabelFeature::populateAnnotationInfos(v12, (uint64_t *)&v167);
  v14 = v167;
  v151 = v168;
  if (v167 == v168)
  {
    v149 = 0;
    if (v167)
      goto LABEL_151;
    goto LABEL_152;
  }
  v15 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 160);
  if (v15 >= 0)
    v16 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 160);
  else
    v16 = -v15;
  v148 = v16;
  {
    v140 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v140, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
  v19 = md::StackLabelPart::StackLabelPart(v18, 1, 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 176))(v19, 7);
  v149 = (md::CompositeLabelPart *)v18;
  *(_BYTE *)(v18 + 630) = 1;
  v166[0] = 0;
  {
    v141 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v141, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v152 = 0;
  v166[1] = mdm::Allocator::instance(void)::alloc;
  v166[2] = 0;
  v165 = v166;
  v143 = v3;
  v21 = v148;
  if (v15 <= 0)
    v21 = 0;
  v144 = v21;
  v147 = a2;
  while (2)
  {
    v164 = 0uLL;
    v23 = (int)v14->__vftable;
    if (LODWORD(v14->__vftable) == 1)
    {
      v25 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      v24 = (uint64_t *)geo::codec::VectorTile::transitLineForFeatureID(v171, v14->__shared_owners_);
      if (!v24)
        goto LABEL_119;
      goto LABEL_32;
    }
    if (v23 == 3)
    {
      v28 = v14->__shared_owners_;
      if (!v28)
      {
        v25 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        goto LABEL_119;
      }
      {
        v94 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v94, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v30 = mdm::Allocator::instance(void)::alloc;
      v31 = *((_QWORD *)v147 + 2);
      v32 = *(float **)(v31 + 280);
      if (v32)
      {
        if (vabds_f32(v32[2], *(float *)(v31 + 104)) >= 0.01)
        {
          md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(*((_QWORD *)v147 + 2), (uint64_t)v32, 0);
          v32 = *(float **)(v31 + 280);
        }
      }
      else
      {
        v32 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(*((_QWORD *)v147 + 2), 0);
        *(_QWORD *)(v31 + 280) = v32;
      }
      v33 = *(_DWORD *)(*(_QWORD *)v32 + 8);
      v145 &= 0xFFFFFFFFFFFFFFuLL;
      v146 &= 0xFFFFFFFFFFFFFF00;
      *(_QWORD *)&__dst = v146;
      v155 = v145;
      v156 = v30;
      v157 = v28;
      v158 = v33;
      v159 = 0;
      a2 = v147;
      v35 = *((_QWORD *)v147 + 1);
      v34 = *((_QWORD *)v147 + 2);
      v36 = *(_QWORD *)v147;
      v37 = *(_QWORD *)(v34 + 296);
      v25 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      if (!v37)
      {
        v38 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)v147 + 2), 0);
        v37 = *v38;
        *(_QWORD *)(v34 + 296) = *v38;
      }
      md::LabelStyle::shieldIcon((uint64_t *)&v160, v34, v36, v35, (void **)&__dst, 0, *(char *)(v37 + 93));
      v39 = v160;
      v160 = 0uLL;
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      v164 = v39;
      if (!v40)
        goto LABEL_51;
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        v43 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
        if (!*((_QWORD *)&v160 + 1))
          goto LABEL_55;
      }
      else
      {
LABEL_51:
        v43 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
        if (!*((_QWORD *)&v160 + 1))
          goto LABEL_55;
      }
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
        if ((SHIBYTE(v155) & 0x80000000) == 0)
          goto LABEL_119;
        goto LABEL_56;
      }
LABEL_55:
      if ((SHIBYTE(v155) & 0x80000000) == 0)
        goto LABEL_119;
LABEL_56:
      v46 = __dst;
      v48 = v155;
      v47 = v156;
      goto LABEL_118;
    }
    if (v23 != 2)
      goto LABEL_122;
    v24 = (uint64_t *)v14->__shared_owners_;
    v25 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (!v24)
      goto LABEL_119;
LABEL_32:
    if (!geo::codec::featureGetNativeShieldCount((uint64_t)v24))
      goto LABEL_119;
    v163 = 0;
    v26 = atomic_load((unsigned __int8 *)(*(_QWORD *)a2 + 3392));
    *(_QWORD *)&__dst = 0;
    geo::codec::featureGetNativeShield((uint64_t)v24, 0, &__dst, &v163, 0);
    localizedLabel(&v160, v24, (char *)__dst, v26 & 1, 0);
    v27 = v163;
    if (!v163)
    {
      v25 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      if (v161 < 0)
        goto LABEL_117;
      goto LABEL_119;
    }
    v156 = v162;
    if (SHIBYTE(v161) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)v160, *((unint64_t *)&v160 + 1));
    }
    else
    {
      __dst = v160;
      v155 = v161;
    }
    v157 = v27;
    v158 = 0;
    v159 = 2;
    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 168) + 56);
    (*(void (**)(uint64_t, uint64_t *, unsigned int *, _QWORD))(*(_QWORD *)v49 + 24))(v49, v24, &v158, *((unsigned __int8 *)v3 + 876));
    v50 = v166[0];
    if (!v166[0])
    {
LABEL_96:
      std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::__emplace_unique_key_args<md::LabelShieldEntry,md::LabelShieldEntry const&>(&v165, (void **)&__dst, &__dst);
      a2 = v147;
      v73 = *((_QWORD *)v147 + 1);
      v72 = *((_QWORD *)v147 + 2);
      v74 = *(_QWORD *)v147;
      v75 = *(_QWORD *)(v72 + 296);
      v3 = v143;
      v25 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
      if (!v75)
      {
        v76 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)v147 + 2), 0);
        v75 = *v76;
        *(_QWORD *)(v72 + 296) = *v76;
      }
      md::LabelStyle::shieldIcon((uint64_t *)&v153, v72, v74, v73, (void **)&__dst, 1, *(char *)(v75 + 93));
      v77 = v153;
      v153 = 0uLL;
      v78 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      v164 = v77;
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
      if (*((_QWORD *)&v153 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      if ((v155 & 0x8000000000000000) == 0)
        goto LABEL_109;
LABEL_116:
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v156 + 40))(v156, __dst, v155 & 0x7FFFFFFFFFFFFFFFLL);
      if ((v161 & 0x8000000000000000) == 0)
        goto LABEL_119;
LABEL_117:
      v46 = v160;
      v48 = v161;
      v47 = v162;
LABEL_118:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 40))(v47, v46, v48 & 0x7FFFFFFFFFFFFFFFLL);
      goto LABEL_119;
    }
    v51 = v157;
    v52 = v159;
    p_dst = (__int128 *)__dst;
    v142 = HIBYTE(v155);
    if (v155 >= 0)
      p_dst = &__dst;
    __s1 = p_dst;
    if (v155 >= 0)
      v54 = HIBYTE(v155);
    else
      v54 = *((_QWORD *)&__dst + 1);
    while (1)
    {
      v60 = *(_QWORD *)(v50 + 64);
      if (v51 < v60)
        goto LABEL_69;
      v61 = *(unsigned __int8 *)(v50 + 76);
      if (v52 < v61)
        goto LABEL_69;
      v62 = *(char *)(v50 + 55);
      if (v62 >= 0)
        v63 = (const void *)(v50 + 32);
      else
        v63 = *(const void **)(v50 + 32);
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v50 + 55);
      else
        v64 = *(_QWORD *)(v50 + 40);
      if (v64 >= v54)
        v65 = v54;
      else
        v65 = v64;
      v66 = memcmp(__s1, v63, v65);
      if (v66)
      {
        if (v66 < 0)
          goto LABEL_69;
      }
      else if (v54 < v64)
      {
        goto LABEL_69;
      }
      v67 = bswap32(v158);
      v68 = bswap32(*(_DWORD *)(v50 + 72));
      v57 = v67 >= v68;
      v69 = v67 > v68;
      v70 = !v57;
      if (v69 - v70 < 0)
        goto LABEL_69;
      if (v60 < v51 || v61 < v52)
        goto LABEL_68;
      v71 = memcmp(v63, __s1, v65);
      if (!v71)
        break;
      if ((v71 & 0x80000000) == 0)
        goto LABEL_64;
LABEL_68:
      v50 += 8;
LABEL_69:
      v50 = *(_QWORD *)v50;
      if (!v50)
        goto LABEL_96;
    }
    if (v64 < v54)
      goto LABEL_68;
LABEL_64:
    v55 = bswap32(*(_DWORD *)(v50 + 72));
    v56 = bswap32(v158);
    v57 = v55 >= v56;
    v58 = v55 > v56;
    v59 = !v57;
    if (v58 - v59 < 0)
      goto LABEL_68;
    v3 = v143;
    a2 = v147;
    v25 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    if (v142 < 0)
      goto LABEL_116;
LABEL_109:
    if (v161 < 0)
      goto LABEL_117;
LABEL_119:
    if (!(_QWORD)v164)
    {
LABEL_122:
      v84 = 0;
      v86 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      if (*((_QWORD *)&v164 + 1))
        goto LABEL_127;
      goto LABEL_22;
    }
    if (v152 == v148)
    {
      v84 = 1;
      v85 = v144;
    }
    else
    {
      {
        v93 = operator new();
        *((_QWORD *)v25 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v93, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v88 = (md::LabelPart *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v25 + 299) + 16))(*((_QWORD *)v25 + 299), 768, 8);
      v89 = md::IconLabelPart::IconLabelPart((uint64_t)v88, &v164);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v90 + 176))(v90, 10, v89);
      md::CompositeLabelPart::addLabelPart((uint64_t)v149, v88);
      v84 = 0;
      v85 = v152 + 1;
    }
    v152 = v85;
    v86 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
    if (*((_QWORD *)&v164 + 1))
    {
LABEL_127:
      v91 = (unint64_t *)&v86->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
LABEL_22:
    v14 = (std::__shared_weak_count *)((char *)v14 + 16);
    if (v14 == v151)
      v22 = 1;
    else
      v22 = v84;
    if ((v22 & 1) == 0)
      continue;
    break;
  }
  if (!v152)
  {
    (*(void (**)(md::CompositeLabelPart *))(*(_QWORD *)v149 + 8))(v149);
    v149 = 0;
  }
  std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v165, v166[0]);
  v14 = v167;
  if (v167)
  {
LABEL_151:
    v168 = v14;
    (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v170 + 40))(v170, v14, v169 - (_QWORD)v14);
  }
LABEL_152:
  v104 = v172;
  if (v172)
  {
    v105 = (unint64_t *)&v172->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  return v149;
}

void sub_19FC93300(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 136);
  _Unwind_Resume(a1);
}

uint64_t md::TransitNodeLabelFeature::populateAnnotationInfos(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_BYTE *)(result + 274))
  {
    v3 = result;
    for (i = 0; *(unsigned __int8 *)(v3 + 274) > i; ++i)
    {
      if (*(unsigned __int8 *)(v3 + 275) == i)
      {
        v6 = a2[1];
        v7 = a2[2];
        if (v6 >= v7)
        {
          v10 = (uint64_t)(v6 - *a2) >> 4;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 60)
            goto LABEL_45;
          v12 = v7 - *a2;
          if (v12 >> 3 > v11)
            v11 = v12 >> 3;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
            v11 = 0xFFFFFFFFFFFFFFFLL;
          if (v11)
          {
            v13 = 16 * v11;
            v14 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 16 * v11, 8);
            v15 = v14 + 16 * v10;
            v11 = v14 + v13;
            if (v14)
            {
              v16 = *(unsigned int *)(v3 + 296);
              *(_DWORD *)v15 = 3;
              *(_QWORD *)(v15 + 8) = v16;
            }
          }
          else
          {
            v15 = 16 * v10;
          }
          v18 = *a2;
          v17 = a2[1];
          v19 = v15;
          if (v17 != *a2)
          {
            do
            {
              *(_OWORD *)(v19 - 16) = *(_OWORD *)(v17 - 16);
              v19 -= 16;
              v17 -= 16;
            }
            while (v17 != v18);
            v17 = *a2;
          }
          v9 = v15 + 16;
          *a2 = v19;
          a2[1] = v15 + 16;
          v20 = a2[2];
          a2[2] = v11;
          if (v17)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v17, v20 - v17);
        }
        else
        {
          if (v6)
          {
            v8 = *(unsigned int *)(v3 + 296);
            *(_DWORD *)v6 = 3;
            *(_QWORD *)(v6 + 8) = v8;
          }
          v9 = v6 + 16;
        }
        a2[1] = v9;
      }
      result = geo::codec::vectorTransitLineForTransitNodeSubtitleIndex(v3, i);
      if (result)
      {
        v21 = result;
        v22 = a2[1];
        v23 = a2[2];
        if (v22 >= v23)
        {
          v24 = (uint64_t)(v22 - *a2) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
LABEL_45:
            abort();
          v26 = v23 - *a2;
          if (v26 >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          if (v25)
          {
            v27 = 16 * v25;
            result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 16 * v25, 8);
            v28 = result + 16 * v24;
            v25 = result + v27;
            if (result)
            {
              *(_DWORD *)v28 = 2;
              *(_QWORD *)(v28 + 8) = v21;
            }
          }
          else
          {
            v28 = 16 * v24;
          }
          v30 = *a2;
          v29 = a2[1];
          v31 = v28;
          if (v29 != *a2)
          {
            do
            {
              *(_OWORD *)(v31 - 16) = *(_OWORD *)(v29 - 16);
              v31 -= 16;
              v29 -= 16;
            }
            while (v29 != v30);
            v29 = *a2;
          }
          v5 = v28 + 16;
          *a2 = v31;
          a2[1] = v28 + 16;
          v32 = a2[2];
          a2[2] = v25;
          if (v29)
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v29, v32 - v29);
        }
        else
        {
          if (v22)
          {
            *(_DWORD *)v22 = 2;
            *(_QWORD *)(v22 + 8) = result;
          }
          v5 = v22 + 16;
        }
        a2[1] = v5;
      }
    }
  }
  return result;
}

md::CompositeLabelPart *md::TransitNodeLabelFeature::newGraphicAnnotationPartForExternalFeature(md::PartCreationContext const&)::$_0::operator()(uint64_t a1, _QWORD **a2)
{
  unsigned __int8 *v3;
  unsigned __int8 v4;
  float *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  geo::codec::Allocator *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  float *v30;
  unsigned __int8 *v31;
  unint64_t *v32;
  md::LabelStyle *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unsigned __int8 v68;
  md::LabelPart *v69;
  double v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v82;
  _QWORD *v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unsigned __int8 ***v87;
  unsigned __int8 **v88;
  unint64_t v89;
  uint64_t v90;
  md::CompositeLabelPart *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  __int128 v98;
  __int128 v99;
  __int128 __dst;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char v105;
  __int128 v106;
  void *v107[2];
  uint64_t v108;
  _BYTE v109[24];
  geo::codec::Allocator *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v82 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 704, 8);
  v7 = *((_BYTE *)*a2 + 24);
  v8 = md::StackLabelPart::StackLabelPart(v6, 1);
  *(_QWORD *)v8 = off_1E42AA4D0;
  *(_BYTE *)(v8 + 694) = v7;
  *(_WORD *)(v8 + 695) = 1;
  v9 = (geo::codec::Allocator *)md::LabelPart::setContentType(v8, 7);
  v91 = (md::CompositeLabelPart *)v6;
  *(_BYTE *)(v6 + 630) = 1;
  v10 = (_QWORD *)**a2;
  v84 = (_QWORD *)(*a2)[1];
  if (v10 != v84)
  {
    while (1)
    {
      v11 = (std::__shared_weak_count *)v10[1];
      v85 = v10;
      v87 = (unsigned __int8 ***)*v10;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v86 = v11;
      v14 = *v87;
      v15 = v87[1];
      if (*v87 != v15)
        break;
      LODWORD(v16) = 0;
LABEL_81:
      if ((int)v16 != ((char *)v87[1] - (char *)*v87) >> 4)
      {
        (*(void (**)(md::CompositeLabelPart *))(*(_QWORD *)v91 + 8))(v91);
        if (v86)
        {
          v79 = (unint64_t *)&v86->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        return 0;
      }
      if (v86)
      {
        v77 = (unint64_t *)&v86->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v10 = v85 + 2;
      if (v85 + 2 == v84)
        return v91;
    }
    v16 = 0;
    v95 = *(uint64_t **)(a1 + 8);
    v88 = v87[1];
    while (1)
    {
      v106 = 0uLL;
      v17 = *v14;
      v18 = **v14;
      if (v18 == 3)
        break;
      if (v18 == 2)
      {
        v26 = *((_QWORD *)v17 + 5);
        v102 = geo::codec::Allocator::instance(v9);
        v27 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102 + 16))(v102, 8, 4);
        *(_QWORD *)&__dst = v27;
        v101 = (int64_t)(v27 + 1);
        if (v27)
          *v27 = v26;
        v28 = v16;
        *((_QWORD *)&__dst + 1) = v27 + 1;
        v29 = (std::__shared_weak_count *)operator new(0x40uLL);
        v30 = v5;
        v31 = v3;
        v29->__shared_owners_ = 0;
        v32 = (unint64_t *)&v29->__shared_owners_;
        v29->__shared_weak_owners_ = 0;
        v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
        *(_QWORD *)&v99 = FeatureStyleAttributes::FeatureStyleAttributes((uint64_t)&v29[1], (uint64_t *)&__dst);
        *((_QWORD *)&v99 + 1) = v29;
        v33 = (md::LabelStyle *)v95[2];
        v93 = v95[1];
        v94 = *v95;
        v96 = v99;
        v97 = v29;
        do
          v34 = __ldxr(v32);
        while (__stxr(v34 + 1, v32));
        v35 = *((_DWORD *)v17 + 10);
        v36 = *((_QWORD *)v33 + 37);
        if (!v36)
        {
          v37 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)v33, 0);
          v36 = *v37;
          *((_QWORD *)v33 + 37) = *v37;
        }
        v38 = *(_BYTE *)(v36 + 93);
        v107[0] = 0;
        v107[1] = 0;
        v108 = 0;
        v110 = 0;
        v92 &= 0xFFFFFF00;
        md::LabelStyle::pointIcon((uint64_t *)&v98, v33, v94, v93, &v96, v92, 0, v35, 1, v38, 1, (uint64_t)v107);
        v39 = v98;
        v98 = 0uLL;
        v106 = v39;
        v9 = v110;
        v3 = v31;
        v5 = v30;
        if (v110 == (geo::codec::Allocator *)v109)
        {
          v9 = (geo::codec::Allocator *)v109;
          v40 = 4;
          v16 = v28;
          v15 = v88;
LABEL_37:
          v9 = (geo::codec::Allocator *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 8 * v40))();
        }
        else
        {
          v16 = v28;
          v15 = v88;
          if (v110)
          {
            v40 = 5;
            goto LABEL_37;
          }
        }
        if (SHIBYTE(v108) < 0)
        {
          operator delete(v107[0]);
          v49 = v97;
          if (!v97)
            goto LABEL_45;
        }
        else
        {
          v49 = v97;
          if (!v97)
            goto LABEL_45;
        }
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (v51)
        {
LABEL_45:
          v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
          if (*((_QWORD *)&v99 + 1))
            goto LABEL_46;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
          v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
          if (*((_QWORD *)&v99 + 1))
          {
LABEL_46:
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
        }
        v46 = __dst;
        if ((_QWORD)__dst)
        {
          v47 = v102;
          v48 = v101 - __dst;
LABEL_65:
          v9 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 40))(v47, v46, v48);
        }
        goto LABEL_66;
      }
      if (v18 == 1)
      {
        v19 = *((_QWORD *)v17 + 6);
        v102 = *((_QWORD *)v17 + 4);
        if ((char)v17[31] < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, *((void **)v17 + 1), *((_QWORD *)v17 + 2));
        }
        else
        {
          v20 = *(_OWORD *)(v17 + 8);
          v101 = *((_QWORD *)v17 + 3);
          __dst = v20;
        }
        v103 = v19;
        v104 = *((_DWORD *)v17 + 14);
        v105 = 2;
        v42 = v95[1];
        v41 = v95[2];
        v43 = *v95;
        v44 = *(_QWORD *)(v41 + 296);
        if (!v44)
        {
          v45 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v95[2], 0);
          v44 = *v45;
          *(_QWORD *)(v41 + 296) = *v45;
        }
        md::LabelStyle::shieldIcon((uint64_t *)&v99, v41, v43, v42, (void **)&__dst, 0, *(char *)(v44 + 93));
        v106 = v99;
        goto LABEL_34;
      }
LABEL_69:
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (*((_QWORD *)&v106 + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v14 += 2;
      if (v14 == v15)
        goto LABEL_81;
    }
    v21 = *((_QWORD *)v17 + 6);
    if (v21)
    {
      v22 = atomic_load(v3);
      if ((v22 & 1) == 0 && __cxa_guard_acquire((__guard *)v3))
      {
        v76 = operator new();
        *((_QWORD *)v5 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v76, "VectorKitLabels", 0x5ED09DD50000000FLL);
        __cxa_guard_release((__guard *)v3);
      }
      v23 = *((_QWORD *)v5 + 299);
      v24 = v95[2];
      v25 = *(float **)(v24 + 280);
      if (v25)
      {
        if (vabds_f32(v25[2], *(float *)(v24 + 104)) >= 0.01)
        {
          md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v95[2], (uint64_t)v25, 0);
          v25 = *(float **)(v24 + 280);
        }
      }
      else
      {
        v25 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v95[2], 0);
        *(_QWORD *)(v24 + 280) = v25;
      }
      v55 = *(_DWORD *)(*(_QWORD *)v25 + 8);
      v89 &= 0xFFFFFFFFFFFFFFuLL;
      v90 &= 0xFFFFFFFFFFFFFF00;
      *(_QWORD *)&__dst = v90;
      v101 = v89;
      v102 = v23;
      v103 = v21;
      v104 = v55;
      v105 = 0;
      v57 = v95[1];
      v56 = v95[2];
      v58 = *v95;
      v59 = *(_QWORD *)(v56 + 296);
      if (!v59)
      {
        v60 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v95[2], 0);
        v59 = *v60;
        *(_QWORD *)(v56 + 296) = *v60;
      }
      md::LabelStyle::shieldIcon((uint64_t *)&v99, v56, v58, v57, (void **)&__dst, 0, *(char *)(v59 + 93));
      v61 = v99;
      v99 = 0uLL;
      v62 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      v106 = v61;
      if (!v62)
        goto LABEL_57;
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
        if (!*((_QWORD *)&v99 + 1))
          goto LABEL_34;
      }
      else
      {
LABEL_57:
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
        if (!*((_QWORD *)&v99 + 1))
          goto LABEL_34;
      }
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
LABEL_34:
      if (SHIBYTE(v101) < 0)
      {
        v46 = __dst;
        v47 = v102;
        v48 = v101 & 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_65;
      }
    }
LABEL_66:
    if ((_QWORD)v106)
    {
      v68 = atomic_load(v3);
      if ((v68 & 1) == 0 && __cxa_guard_acquire((__guard *)v3))
      {
        v75 = operator new();
        *((_QWORD *)v5 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v75, "VectorKitLabels", 0x5ED09DD50000000FLL);
        __cxa_guard_release((__guard *)v3);
      }
      v69 = (md::LabelPart *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v5 + 299) + 16))(*((_QWORD *)v5 + 299), 768, 8);
      v70 = md::IconLabelPart::IconLabelPart((uint64_t)v69, &v106);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v71 + 176))(v71, 10, v70);
      v9 = (geo::codec::Allocator *)md::CompositeLabelPart::addLabelPart((uint64_t)v91, v69);
      v16 = (v16 + 1);
    }
    goto LABEL_69;
  }
  return v91;
}

void sub_19FC93E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v17 - 176);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::append(const void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  const void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;

  if (*((char *)a1 + 23) < 0)
  {
    v7 = (size_t)a1[1];
    v6 = ((unint64_t)a1[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 22;
    v7 = *((unsigned __int8 *)a1 + 23);
  }
  if (v6 - v7 < __len)
  {
    v8 = v7 + __len;
    if (0x7FFFFFFFFFFFFFF6 - v6 < v7 + __len - v6)
      abort();
    v9 = a1;
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
      v9 = *a1;
    v10 = 2 * v6;
    if (v8 > 2 * v6)
      v10 = v7 + __len;
    v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v11 = v10 | 7;
    if (v10 >= 0x17)
      v12 = v11 + 1;
    else
      v12 = 23;
    if (v6 > 0x3FFFFFFFFFFFFFF2)
      v13 = 0x7FFFFFFFFFFFFFF7;
    else
      v13 = v12;
    v14 = (char *)(*(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], v13, 1);
    v15 = v14;
    if (v7)
      memmove(v14, v9, v7);
    memmove(&v15[v7], __src, __len);
    if (v6 != 22)
      (*(void (**)(const void *, const void *))(*(_QWORD *)a1[3] + 40))(a1[3], v9);
    a1[1] = (const void *)v8;
    a1[2] = (const void *)(v13 | 0x8000000000000000);
    *a1 = v15;
    v16 = &v15[v8];
LABEL_30:
    *v16 = 0;
    return a1;
  }
  if (__len)
  {
    v17 = (char *)a1;
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
      v17 = (char *)*a1;
    memmove(&v17[v7], __src, __len);
    v18 = v7 + __len;
    if (*((char *)a1 + 23) < 0)
      a1[1] = (const void *)v18;
    else
      *((_BYTE *)a1 + 23) = v18 & 0x7F;
    v16 = &v17[v18];
    goto LABEL_30;
  }
  return a1;
}

uint64_t *std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(uint64_t *result, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;

  if (a5 < 1)
    return result;
  v6 = __src;
  v7 = (uint64_t)result;
  v9 = *result;
  v8 = result[1];
  v10 = a2 - *result;
  v11 = (int *)(*result + (v10 & 0xFFFFFFFFFFFFFFFCLL));
  v12 = result[2];
  if (a5 > (uint64_t)(v12 - v8) >> 2)
  {
    v13 = a5 + ((uint64_t)(v8 - v9) >> 2);
    if (v13 >> 62)
      abort();
    v14 = v10 >> 2;
    v15 = v12 - v9;
    if (v15 >> 1 > v13)
      v13 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    if (v16)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result[3] + 16))(result[3], 4 * v16, 4);
    else
      result = 0;
    v21 = (_DWORD *)result + v14;
    v22 = 4 * a5;
    v23 = &v21[a5];
    v24 = 4 * a5;
    v25 = v21;
    do
    {
      if (v25)
        *v25 = *(_DWORD *)v6;
      ++v25;
      v6 += 4;
      v24 -= 4;
    }
    while (v24);
    v26 = *(int **)v7;
    if (*(int **)v7 == v11)
      goto LABEL_31;
    v27 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + v9;
    v28 = v27 - (_QWORD)v26 - 4;
    if (v28 >= 0x3C)
    {
      v29 = v11;
      if (v27 - ((unint64_t)result + (v10 & 0xFFFFFFFFFFFFFFFCLL)) >= 0x20)
      {
        v30 = (v28 >> 2) + 1;
        v29 = &v11[-(v30 & 0x7FFFFFFFFFFFFFF8)];
        v31 = 4 * v14 - 16;
        v32 = (__int128 *)(v9 + v31);
        v33 = (_OWORD *)((char *)result + v31);
        v34 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v35 = *v32;
          *(v33 - 1) = *(v32 - 1);
          *v33 = v35;
          v32 -= 2;
          v33 -= 2;
          v34 -= 8;
        }
        while (v34);
        v21 -= v30 & 0x7FFFFFFFFFFFFFF8;
        if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_31;
      }
    }
    else
    {
      v29 = v11;
    }
    do
    {
      v36 = *--v29;
      *--v21 = v36;
    }
    while (v29 != v26);
LABEL_31:
    v37 = *(int **)(v7 + 8);
    if (v37 != v11)
    {
      v38 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + v9;
      v39 = (unint64_t)v37 - v38 - 4;
      if (v39 < 0x3C)
        goto LABEL_55;
      if ((unint64_t)result + (v10 & 0xFFFFFFFFFFFFFFFCLL) + v22 - v38 < 0x20)
        goto LABEL_55;
      v40 = (v39 >> 2) + 1;
      v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      v11 = (int *)((char *)v11 + v41);
      v42 = (_OWORD *)((char *)result + 4 * v14 + v22 + 16);
      v43 = (__int128 *)(4 * v14 + v9 + 16);
      v44 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v45 = *v43;
        *(v42 - 1) = *(v43 - 1);
        *v42 = v45;
        v42 += 2;
        v43 += 2;
        v44 -= 8;
      }
      while (v44);
      v23 = (_DWORD *)((char *)v23 + v41);
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_55:
        do
        {
          v46 = *v11++;
          *v23++ = v46;
        }
        while (v11 != v37);
      }
    }
    *(_QWORD *)v7 = v21;
    *(_QWORD *)(v7 + 8) = v23;
    v47 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = (char *)result + 4 * v16;
    if (v26)
      return (uint64_t *)(*(uint64_t (**)(_QWORD, int *, uint64_t))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), v26, v47 - (_QWORD)v26);
    return result;
  }
  v17 = (uint64_t)(v8 - (_QWORD)v11) >> 2;
  if (v17 >= a5)
  {
    v18 = &__src[4 * a5];
    v20 = (char *)result[1];
LABEL_42:
    v48 = (char *)&v11[a5];
    v49 = &v20[-4 * a5];
    v50 = v20;
    if ((unint64_t)v49 < v8)
    {
      v50 = v20;
      do
      {
        if (v50)
          *(_DWORD *)v50 = *(_DWORD *)v49;
        v49 += 4;
        v50 += 4;
      }
      while ((unint64_t)v49 < v8);
    }
    result[1] = (uint64_t)v50;
    if (v20 != v48)
      result = (uint64_t *)memmove(&v20[-4 * ((v20 - v48) >> 2)], v11, v20 - v48);
    if (v18 != v6)
      return (uint64_t *)memmove(v11, v6, v18 - v6);
    return result;
  }
  v18 = &__src[4 * v17];
  if (v18 == a4)
  {
    v20 = (char *)result[1];
  }
  else
  {
    v19 = &__src[4 * v17];
    v20 = (char *)result[1];
    do
    {
      if (v20)
        *(_DWORD *)v20 = *(_DWORD *)v19;
      v19 += 4;
      v20 += 4;
    }
    while (v19 != a4);
  }
  result[1] = (uint64_t)v20;
  if ((uint64_t)(v8 - (_QWORD)v11) >= 1)
    goto LABEL_42;
  return result;
}

void std::__shared_ptr_emplace<md::LabelAttributePairWithFallback>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDA80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelAttributePairWithFallback>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDA80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelAttributePairWithFallback>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v1;
    operator delete(v4);
  }
}

uint64_t ArrayToCommaSeparatedString<unsigned int>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  size_t v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  unint64_t v26;
  void *__p[2];
  __int128 v28;
  int v29;
  uint64_t v30[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v30[0] = MEMORY[0x1E0DE4FE0] + 64;
  v22 = v7;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v9, &v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v22 = v4 + 24;
  v30[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v23 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  v29 = 16;
  v12 = *a2;
  v11 = a2[1];
  if (*a2 == v11)
  {
    v15 = 0;
LABEL_9:
    if (v15 < v26)
    {
      *((_QWORD *)&v28 + 1) = v26;
      v15 = v26;
    }
    v16 = (const void **)&v25;
    goto LABEL_12;
  }
  std::ostream::operator<<();
  for (i = v12 + 4; i != v11; i += 4)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, (uint64_t)",", 1);
    std::ostream::operator<<();
  }
  if ((v29 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v28 + 1);
    goto LABEL_9;
  }
  if ((v29 & 8) == 0)
  {
    v14 = 0;
    a1[23] = 0;
    goto LABEL_20;
  }
  v16 = (const void **)v24;
  v15 = v24[2];
LABEL_12:
  v17 = *v16;
  v14 = v15 - (_QWORD)*v16;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a1 + 1) = v14;
    *((_QWORD *)a1 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a1 = v20;
    a1 = v20;
    goto LABEL_19;
  }
  a1[23] = v14;
  if (v14)
LABEL_19:
    memmove(a1, v17, v14);
LABEL_20:
  a1[v14] = 0;
  v22 = *v6;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v6[3];
  v23 = v10 + 16;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v30);
}

void sub_19FC94730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::mun::MuninRoadNetworkLayerDataSource::~MuninRoadNetworkLayerDataSource(md::mun::MuninRoadNetworkLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::mun::MuninRoadNetworkLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  geo::codec::VectorTile **v16;
  char *v17;
  int8x8_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  int8x8_t *v78;
  std::__shared_weak_count *v79;
  char *v80;
  int8x8_t *v81[3];
  void *v82[2];
  void *__p[2];
  int v84;
  void *v85[2];
  void *v86[2];
  int v87;
  _QWORD v88[3];
  _QWORD *v89;
  _BYTE v90[24];
  _BYTE *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 14)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_15;
    }
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 32) != 1)
  {
LABEL_15:
    v8 = 0;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(int8x8_t **)(v7 + 112);
  v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9)
  {
LABEL_16:
    v78 = v8;
    v79 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v78 = v8;
  v79 = v9;
  v12 = (unint64_t *)&v9->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_17:
  v15 = (char *)operator new(0x390uLL);
  v16 = (geo::codec::VectorTile **)&v78[18];
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E42DC430;
  v17 = v15 + 24;
  v85[0] = 0;
  v85[1] = 0;
  v86[0] = 0;
  md::MapTileData::MapTileData((uint64_t)(v15 + 24), a1, (uint64_t)v85, (uint64_t)&v78[18], 1);
  *((_QWORD *)v15 + 3) = &off_1E42994D0;
  *((_QWORD *)v15 + 82) = &unk_1E4299510;
  *(_OWORD *)(v15 + 744) = 0u;
  *((int8x8_t *)v15 + 95) = v78[18];
  v18 = v78[19];
  *((int8x8_t *)v15 + 96) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(*(_QWORD *)&v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (uint64_t *)(v15 + 744);
  *(_OWORD *)(v15 + 872) = 0uLL;
  *(_OWORD *)(v15 + 888) = 0uLL;
  *(_OWORD *)(v15 + 840) = 0uLL;
  *(_OWORD *)(v15 + 856) = 0uLL;
  *(_OWORD *)(v15 + 808) = 0uLL;
  *(_OWORD *)(v15 + 824) = 0uLL;
  *(_OWORD *)(v15 + 776) = 0uLL;
  *(_OWORD *)(v15 + 792) = 0uLL;
  *((_DWORD *)v15 + 226) = 1065353216;
  v22 = (_QWORD *)operator new();
  v23 = (unint64_t)(float)((float)((float)geo::codec::VectorTile::linesCount(*v16) * 0.25) + 1.0);
  if (v23 <= 0x20)
    v23 = 32;
  v22[1] = 0;
  *v22 = v22 + 1;
  v22[2] = 0;
  v22[3] = v23;
  v22[4] = 72 * v23;
  v22[5] = 0;
  v24 = *v21;
  *v21 = (uint64_t)v22;
  if (v24)
  {
    geo::Pool<md::MuninJunction>::disposeElements(v24);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v24 + 8));
    MEMORY[0x1A1AF4E00](v24, 0x1020C407A7143E5);
  }
  v25 = (_QWORD *)operator new();
  v26 = (unint64_t)(float)((float)((float)geo::codec::VectorTile::linesCount(*v16) * 0.25) + 1.0);
  if (v26 <= 0x20)
    v26 = 32;
  v25[1] = 0;
  *v25 = v25 + 1;
  v25[2] = 0;
  v25[3] = v26;
  v25[4] = 120 * v26;
  v25[5] = 0;
  v27 = *((_QWORD *)v15 + 94);
  *((_QWORD *)v15 + 94) = v25;
  if (v27)
  {
    geo::Pool<md::MuninRoadEdge>::disposeElements(v27);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v27 + 8));
    MEMORY[0x1A1AF4E00](v27, 0x1020C407A7143E5);
  }
  *(_OWORD *)v85 = 0u;
  *(_OWORD *)v86 = 0u;
  v87 = 1065353216;
  *(_OWORD *)v82 = 0u;
  *(_OWORD *)__p = 0u;
  v84 = 1065353216;
  v28 = geo::codec::VectorTile::linesCount(*v16);
  v29 = v28;
  v30 = (_BYTE *)*((_QWORD *)v15 + 97);
  if (v28 > (uint64_t)(*((_QWORD *)v15 + 99) - (_QWORD)v30) >> 3)
  {
    if (v28 >> 61)
      goto LABEL_80;
    v31 = (_BYTE *)*((_QWORD *)v15 + 98);
    v32 = (char *)operator new(8 * v28);
    v33 = v31 - v30;
    v34 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFF8];
    v35 = v34;
    if (v31 == v30)
      goto LABEL_38;
    if ((unint64_t)(v33 - 8) >= 0x58)
    {
      v35 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v31[-(v33 & 0xFFFFFFFFFFFFFFF8)] - v32) >= 0x20)
      {
        v36 = v33 >> 3;
        v37 = ((unint64_t)(v33 - 8) >> 3) + 1;
        v38 = &v32[8 * v36 - 16];
        v39 = (__int128 *)(v31 - 16);
        v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v41 = *v39;
          *((_OWORD *)v38 - 1) = *(v39 - 1);
          *(_OWORD *)v38 = v41;
          v38 -= 32;
          v39 -= 2;
          v40 -= 4;
        }
        while (v40);
        v35 = &v34[-8 * (v37 & 0x3FFFFFFFFFFFFFFCLL)];
        v31 -= 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          *((_QWORD *)v15 + 97) = v35;
          *((_QWORD *)v15 + 98) = v34;
          *((_QWORD *)v15 + 99) = &v32[8 * v29];
          if (v30)
            operator delete(v30);
          goto LABEL_40;
        }
      }
    }
    else
    {
      v35 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v42 = *((_QWORD *)v31 - 1);
      v31 -= 8;
      *((_QWORD *)v35 - 1) = v42;
      v35 -= 8;
    }
    while (v31 != v30);
    goto LABEL_38;
  }
LABEL_40:
  v43 = geo::codec::VectorTile::junctionsCount(*v16);
  v44 = v43;
  v45 = (_BYTE *)*((_QWORD *)v15 + 100);
  if (v43 > (uint64_t)(*((_QWORD *)v15 + 102) - (_QWORD)v45) >> 3)
  {
    if (!(v43 >> 61))
    {
      v46 = (_BYTE *)*((_QWORD *)v15 + 101);
      v47 = (char *)operator new(8 * v43);
      v48 = v46 - v45;
      v49 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
      v50 = v49;
      if (v46 == v45)
        goto LABEL_50;
      if ((unint64_t)(v48 - 8) >= 0x58)
      {
        v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v46 - &v47[v48 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v51 = v48 >> 3;
          v52 = ((unint64_t)(v48 - 8) >> 3) + 1;
          v53 = &v47[8 * v51 - 16];
          v54 = (__int128 *)(v46 - 16);
          v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = *v54;
            *((_OWORD *)v53 - 1) = *(v54 - 1);
            *(_OWORD *)v53 = v56;
            v53 -= 32;
            v54 -= 2;
            v55 -= 4;
          }
          while (v55);
          v50 = &v49[-8 * (v52 & 0x3FFFFFFFFFFFFFFCLL)];
          v46 -= 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            *((_QWORD *)v15 + 100) = v50;
            *((_QWORD *)v15 + 101) = v49;
            *((_QWORD *)v15 + 102) = &v47[8 * v44];
            if (v45)
              operator delete(v45);
            goto LABEL_52;
          }
        }
      }
      else
      {
        v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v57 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v50 - 1) = v57;
        v50 -= 8;
      }
      while (v46 != v45);
      goto LABEL_50;
    }
LABEL_80:
    abort();
  }
LABEL_52:
  v77 = a3;
  v58 = 0;
  v59 = 0;
  v81[0] = (int8x8_t *)v82;
  v81[1] = (int8x8_t *)(v15 + 24);
  v81[2] = v78 + 18;
  v80 = v15 + 24;
  while (v59 < geo::codec::VectorTile::junctionsCount(*v16))
  {
    v62 = (unsigned int *)(geo::codec::VectorTile::junctions(*v16) + v58);
    if (*v62)
    {
      v88[0] = 0;
      v88[0] = md::MuninRoadNetworkData::MuninRoadNetworkData(gdc::LayerDataRequestKey const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0::operator()(v81, (unint64_t)v62);
      v91 = 0;
      v63 = operator new(0x38uLL);
      *v63 = &off_1E42D05E0;
      v63[1] = v88;
      v63[2] = v85;
      v63[3] = v81;
      v63[4] = &v80;
      v63[5] = v17;
      v63[6] = v16;
      v91 = v63;
      geo::codec::forEachEdgeOnJunction((uint64_t *)v16, v62, (uint64_t)v90);
      v60 = v91;
      if (v91 == v90)
      {
        v60 = v90;
        v61 = 4;
LABEL_54:
        (*(void (**)(_QWORD *, uint64_t))(*v60 + 8 * v61))(v60, v64);
        goto LABEL_55;
      }
      if (v91)
      {
        v61 = 5;
        goto LABEL_54;
      }
    }
LABEL_55:
    ++v59;
    v58 += 32;
  }
  v89 = 0;
  v65 = operator new(0x28uLL);
  *v65 = &off_1E42F2788;
  v65[1] = v85;
  v65[2] = v16;
  v65[3] = &v80;
  v65[4] = v17;
  v89 = v65;
  geo::codec::forEachRoad((uint64_t *)v16, (uint64_t)v88);
  v67 = v89;
  if (v89 == v88)
  {
    v68 = 4;
    v67 = v88;
LABEL_65:
    (*(void (**)(_QWORD *, uint64_t))(*v67 + 8 * v68))(v67, v66);
  }
  else if (v89)
  {
    v68 = 5;
    goto LABEL_65;
  }
  v69 = __p[0];
  if (__p[0])
  {
    do
    {
      v70 = (_QWORD *)*v69;
      operator delete(v69);
      v69 = v70;
    }
    while (v70);
  }
  v71 = v82[0];
  v82[0] = 0;
  if (v71)
    operator delete(v71);
  v72 = v86[0];
  if (v86[0])
  {
    do
    {
      v73 = (_QWORD *)*v72;
      operator delete(v72);
      v72 = v73;
    }
    while (v73);
  }
  v74 = v85[0];
  v85[0] = 0;
  if (v74)
    operator delete(v74);
  *v77 = v17;
  v77[1] = v15;
  if (v79)
  {
    v75 = (unint64_t *)&v79->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_19FC95000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v30;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v27 + 8));
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void md::mun::MuninRoadNetworkLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::MuninRoadNetworkData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninRoadNetworkData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninRoadNetworkData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::ita::UpdateShadowConstants::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateShadowConstants::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::UpdateShadowConstants::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateShadowConstants::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427B8E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::UpdateShadowConstants::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateShadowConstants::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427B8E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::UpdateShadowConstants::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateShadowConstants::operator()(ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>)::$_0>,void ()(md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  unint64_t v23;
  float64x2_t v24[8];
  _OWORD v25[8];

  v5 = (_QWORD *)md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::Shadow>(**(_QWORD **)(a1 + 8), *a3);
  v6 = **(_QWORD ***)(a1 + 8);
  v7 = *a2;
  *(_QWORD *)&v25[0] = v7;
  v8 = v6[1166];
  if (v7 < (unint64_t)((v6[1167] - v8) >> 3)
    && ((v9 = *(_QWORD *)(v8 + 8 * v7)) != 0 ? (v10 = HIDWORD(v7) == HIDWORD(v9)) : (v10 = 0), v10))
  {
    v12 = v6[1169] + ((unint64_t)*(_QWORD *)(v8 + 8 * v7) << 8);
    v11 = v6[1170];
  }
  else
  {
    v11 = v6[1170];
    v12 = v11;
  }
  if (v12 == v11)
    v13 = 0;
  else
    v13 = (_OWORD *)v12;
  if (v13)
  {
    v14 = std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>((uint64_t)(v6 + 1158), v7, v25);
    ++v14[3];
  }
  v15 = v13[5];
  v25[4] = v13[4];
  v25[5] = v15;
  v16 = v13[7];
  v25[6] = v13[6];
  v25[7] = v16;
  v17 = v13[1];
  v25[0] = *v13;
  v25[1] = v17;
  v18 = v13[3];
  v25[2] = v13[2];
  v25[3] = v18;
  v19 = v5[1];
  v20 = (float32x4_t *)v5[9];
  gm::operator*<double,4,4,4>(v24[0].f64, *(double **)(a1 + 16), (double *)v25);
  v21 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[2]), v24[3]);
  *v20 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[0]), v24[1]);
  v20[1] = v21;
  v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[6]), v24[7]);
  v20[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[4]), v24[5]);
  v20[3] = v22;
  v23 = v5[8];
  if (v23 <= v19)
    v23 = v19;
  v5[7] = 0;
  v5[8] = v23;
}

void std::__function::__func<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_1,std::allocator<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_1,std::allocator<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BDF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_1,std::allocator<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BDF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_1,std::allocator<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_1>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32_t v26;
  unint64_t v27;
  float64x2_t v28[8];
  _OWORD v29[8];

  v6 = (_QWORD *)md::VKMRenderResourcesStore::getConstantData<ggl::Tile::LinearDepth>(**(_QWORD **)(a1 + 8), *a4);
  v7 = **(_QWORD ***)(a1 + 8);
  v8 = *a3;
  *(_QWORD *)&v29[0] = v8;
  v9 = v7[1166];
  if (v8 < (unint64_t)((v7[1167] - v9) >> 3)
    && ((v10 = *(_QWORD *)(v9 + 8 * v8)) != 0 ? (v11 = HIDWORD(v8) == HIDWORD(v10)) : (v11 = 0), v11))
  {
    v13 = v7[1169] + ((unint64_t)*(_QWORD *)(v9 + 8 * v8) << 8);
    v12 = v7[1170];
  }
  else
  {
    v12 = v7[1170];
    v13 = v12;
  }
  if (v13 == v12)
    v14 = 0;
  else
    v14 = (_OWORD *)v13;
  if (v14)
  {
    v15 = std::__hash_table<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::hash<geo::handle<md::TileMatrix>>,std::equal_to<geo::handle<md::TileMatrix>>,true>,std::__unordered_map_equal<geo::handle<md::TileMatrix>,std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>,std::equal_to<geo::handle<md::TileMatrix>>,std::hash<geo::handle<md::TileMatrix>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::TileMatrix>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::TileMatrix>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::TileMatrix> const&>,std::tuple<>>((uint64_t)(v7 + 1158), v8, v29);
    ++v15[3];
  }
  v16 = v14[5];
  v29[4] = v14[4];
  v29[5] = v16;
  v17 = v14[7];
  v29[6] = v14[6];
  v29[7] = v17;
  v18 = v14[1];
  v29[0] = *v14;
  v29[1] = v18;
  v19 = v14[3];
  v29[2] = v14[2];
  v29[3] = v19;
  v20 = v6[1];
  v21 = **(_QWORD **)(a1 + 16);
  v22 = (float32x4_t *)v6[9];
  gm::operator*<double,4,4,4>(v28[0].f64, (double *)(v21 + 3160), (double *)v29);
  v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[2]), v28[3]);
  v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[4]), v28[5]);
  v25 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[6]), v28[7]);
  *v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[0]), v28[1]);
  v22[1] = v23;
  v22[2] = v24;
  v22[3] = v25;
  v26 = 1.0 / *(double *)(v21 + 976);
  v22[4].f32[0] = v26;
  v27 = v6[8];
  if (v27 <= v20)
    v27 = v20;
  v6[7] = 0;
  v6[8] = v27;
}

void std::__function::__func<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427BDA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427BDA8;
  a2[1] = v2;
  return result;
}

_DWORD *std::__function::__func<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_0,std::allocator<md::ita::UpdateDepthPrePassConstants::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>,ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  _QWORD *v7;
  _DWORD *result;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = (_QWORD *)md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::Shadow>(**(_QWORD **)(a1 + 8), *a5);
  result = (_DWORD *)md::VKMRenderResourcesStore::getRenderableData(**(_QWORD **)(a1 + 8), *a3);
  v10 = v7[8];
  v9 = (_DWORD *)v7[9];
  *v9 = result[48];
  v9[1] = result[49];
  v9[2] = result[50];
  v9[3] = result[51];
  v9[4] = result[52];
  v9[5] = result[53];
  v9[6] = result[54];
  v9[7] = result[55];
  v9[8] = result[56];
  v9[9] = result[57];
  v9[10] = result[58];
  v9[11] = result[59];
  v9[12] = result[60];
  v9[13] = result[61];
  v9[14] = result[62];
  v11 = v7[1];
  v9[15] = result[63];
  if (v10 <= v11)
    v12 = v11;
  else
    v12 = v10;
  v7[7] = 0;
  v7[8] = v12;
  return result;
}

uint64_t altitude::Context::getDebugRenderUtil(altitude::Context *this)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  unsigned __int8 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  ggl::ShadedColorShader *v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  __int16 v44;
  char v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  if (v2 && !*((_QWORD *)this + 2))
  {
    v4 = **(_QWORD **)(*(_QWORD *)(v2 + 112) + 24);
    v5 = operator new(0x160uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1E42E60D0;
    v5[3] = &off_1E42C44C0;
    v5[7] = 0;
    v5[4] = 0;
    v5[5] = 0;
    v5[6] = v5 + 7;
    v5[9] = 0;
    v5[10] = 0;
    v5[8] = 0;
    v5[43] = v4;
    v6 = operator new(0xE8uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_1E42E16E0;
    v7 = ggl::BufferData::BufferData((uint64_t)(v6 + 3), qword_1EE5757B8, 2, 1, 6, 1);
    v6[28] = ggl::DebugRenderUtil::Global::reflection(void)::reflection;
    v6[3] = &off_1E42B90D0;
    v8 = (std::__shared_weak_count *)v5[10];
    v5[9] = v7;
    v5[10] = v6;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = *(_QWORD *)(v5[43] + 80);
    v13 = *(_QWORD *)(v11 + 152);
    v12 = *(std::__shared_weak_count **)(v11 + 160);
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    DWORD2(v46) = 0;
    *(_QWORD *)&v46 = 0;
    v16 = (char *)operator new(0x198uLL);
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &off_1E42DEA40;
    if ((v17 & 1) == 0)
    {
      if ((_DWORD)v37)
      {
        if ((v38 & 1) == 0)
        {
          if ((_DWORD)v37)
          {
            if ((v41 & 1) == 0
            {
              if ((v43 & 1) == 0
              {
                ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DebugRenderUtil::p3NVboReflection;
              }
              ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::attributesReflection(void)::r;
              unk_1EE576240 = 1;
            }
            ggl::ShadedColor::P3NPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DebugRenderUtil::P3NVbo>::typedReflection(void)::r;
            *(_QWORD *)algn_1EE58D208 = &ggl::ShadedColor::pipelineDataP3NPipelineDeviceStructs(void)::ref;
            qword_1EE58D210 = 0;
            if ((v42 & 1) == 0
            {
              ggl::ShadedColor::pipelineDataP3NPipelineConstantStructs(void)::ref = (uint64_t)ggl::DebugRenderUtil::Global::reflection(void)::reflection;
              unk_1EE58D300 = ggl::ShadedColor::Props::reflection(void)::reflection;
            }
            qword_1EE58D218 = (uint64_t)&ggl::ShadedColor::pipelineDataP3NPipelineConstantStructs(void)::ref;
            unk_1EE58D220 = xmmword_19FFB35C0;
          }
        }
        ggl::ShadedColor::P3NPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::ShadedColor::P3NPipelineSetup::typedReflection(void)::ref;
        ggl::ShadedColorShader::typedReflection(v37);
        qword_1EE58D1B0 = (uint64_t)&ggl::ShadedColorShader::typedReflection(void)::ref;
        if ((v39 & 1) == 0
        {
          ggl::ShadedColor::pipelineStateP3NPipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE58D250 = 0;
          qword_1EE58D258 = (uint64_t)"";
          dword_1EE58D260 = 0;
          qword_1EE58D268 = (uint64_t)&ggl::ShadedColor::pipelineStateP3NPipelineAttributeBinding_0(void)::attr;
          unk_1EE58D270 = 2;
        }
        qword_1EE58D1B8 = (uint64_t)&ggl::ShadedColor::pipelineStateP3NPipelineAttributeStructBinding(void)::attr;
        unk_1EE58D1C0 = 1;
        qword_1EE58D1C8 = 0;
        unk_1EE58D1D0 = 0;
        qword_1EE58D1D8 = (uint64_t)&ggl::ShadedColor::pipelineStateP3NPipelineDeviceStructBinding(void)::ref;
        unk_1EE58D1E0 = 0;
        if ((v40 & 1) == 0
        {
          ggl::ShadedColor::pipelineStateP3NPipelineConstantStructBinding(void)::ref = 0;
          unk_1EE58D290 = 0;
          qword_1EE58D298 = (uint64_t)"global";
          dword_1EE58D2A0 = 3;
          qword_1EE58D2A8 = (uint64_t)&ggl::ShadedColor::pipelineStateP3NPipelineConstantGlobalBinding(void)::reflection;
          *(_OWORD *)algn_1EE58D2B0 = xmmword_19FFB35A0;
          qword_1EE58D2C0 = 1;
          unk_1EE58D2C8 = "props";
          dword_1EE58D2D0 = 3;
          qword_1EE58D2D8 = (uint64_t)&ggl::ShadedColor::pipelineStateP3NPipelineConstantPropsBinding(void)::reflection;
          unk_1EE58D2E0 = 4;
        }
        qword_1EE58D1E8 = (uint64_t)&ggl::ShadedColor::pipelineStateP3NPipelineConstantStructBinding(void)::ref;
        unk_1EE58D1F0 = 2;
      }
    }
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      *((_DWORD *)v16 + 14) = 0;
      *((_QWORD *)v16 + 5) = 0;
      *((_QWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 3) = &off_1E42B6760;
      *((_QWORD *)v16 + 4) = 0;
      *((_QWORD *)v16 + 8) = &ggl::ShadedColor::P3NPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v16 + 9) = v13;
      *((_QWORD *)v16 + 10) = v12;
      do
        v20 = __ldxr(v18);
      while (__stxr(v20 + 1, v18));
    }
    else
    {
      *((_DWORD *)v16 + 14) = 0;
      *((_QWORD *)v16 + 5) = 0;
      *((_QWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 3) = &off_1E42B6760;
      *((_QWORD *)v16 + 4) = 0;
      *((_QWORD *)v16 + 8) = &ggl::ShadedColor::P3NPipelineState::typedReflection(void)::ref;
      *((_QWORD *)v16 + 9) = v13;
      *((_QWORD *)v16 + 10) = 0;
    }
    v16[136] = 0;
    *(_OWORD *)(v16 + 140) = xmmword_19FFB3060;
    *(_QWORD *)(v16 + 156) = 0;
    *(_QWORD *)(v16 + 172) = 0;
    *(_QWORD *)(v16 + 164) = 0;
    v16[184] = 0;
    *(_OWORD *)(v16 + 188) = xmmword_19FFB3060;
    *(_QWORD *)(v16 + 204) = 0;
    *(_QWORD *)(v16 + 220) = 0;
    *(_QWORD *)(v16 + 212) = 0;
    v16[232] = 0;
    *(_OWORD *)(v16 + 236) = xmmword_19FFB3060;
    *(_QWORD *)(v16 + 252) = 0;
    *(_QWORD *)(v16 + 268) = 0;
    *(_QWORD *)(v16 + 260) = 0;
    *((_DWORD *)v16 + 70) = 15;
    v21 = v46;
    *((_DWORD *)v16 + 73) = DWORD2(v46);
    *(_QWORD *)(v16 + 284) = v21;
    *((_QWORD *)v16 + 37) = 1;
    *((_QWORD *)v16 + 38) = 1;
    v16[312] = 0;
    *((_QWORD *)v16 + 48) = 0;
    *((_OWORD *)v16 + 22) = 0u;
    *((_OWORD *)v16 + 23) = 0u;
    *((_OWORD *)v16 + 20) = 0u;
    *((_OWORD *)v16 + 21) = 0u;
    *((_QWORD *)v16 + 49) = 0x100000001;
    v16[400] = 0;
    v16[88] = 1;
    *(_WORD *)(v16 + 89) = v44;
    v16[91] = v45;
    *(_OWORD *)(v16 + 92) = xmmword_19FFB35B0;
    *((_DWORD *)v16 + 27) = 7;
    *((_QWORD *)v16 + 14) = 0;
    *((_QWORD *)v16 + 15) = 0;
    *((_DWORD *)v16 + 32) = 0;
    v16[132] = 15;
    if (v12)
    {
      v22 = (unint64_t *)&v12->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *((_QWORD *)v16 + 3) = &off_1E42B5E38;
    v24 = (std::__shared_weak_count *)v5[5];
    v5[4] = v16 + 24;
    v5[5] = v16;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v12)
    {
      v27 = (unint64_t *)&v12->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 2) = v5 + 3;
    *((_QWORD *)this + 3) = v5;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 104), "renderer");
    v33 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)&v46 = *((_QWORD *)this + 2);
    *((_QWORD *)&v46 + 1) = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      ggl::Renderer::addDebugRenderer(v32, &v46);
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      ggl::Renderer::addDebugRenderer(v32, &v46);
    }
  }
  return *((_QWORD *)this + 2);
}

void std::__shared_ptr_emplace<altitude::DebugRenderUtil>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E60D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::DebugRenderUtil>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E60D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<altitude::DebugRenderUtil>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19FC96154(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC96280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC9630C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC96438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FC965C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC968E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FC96A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC9728C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va1);

  _Unwind_Resume(a1);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *,false>(_QWORD *a1, const void **a2, uint64_t a3, char a4)
{
  const void **v6;
  const void **v7;
  unint64_t j;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  const void *v19;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  __int128 v26;
  __int128 *v27;
  size_t v28;
  const void **v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  const void **v35;
  const void **v36;
  const void **v37;
  const void *v38;
  const void **v39;
  const void *v40;
  size_t v41;
  int v42;
  const void **v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  const void *v51;
  unint64_t v52;
  size_t v53;
  int v54;
  const void **v55;
  const void *v56;
  const void **v57;
  const void *v58;
  size_t v59;
  int v60;
  BOOL v61;
  const void *v62;
  const void **v63;
  const void *v64;
  size_t v65;
  int v66;
  __int128 *v67;
  __int128 v68;
  __int128 v69;
  BOOL v70;
  __int128 v71;
  __int128 v72;
  __int128 *v73;
  size_t v74;
  size_t v75;
  const void **v76;
  size_t v77;
  const void **v78;
  const void **v79;
  size_t v80;
  size_t v81;
  int v82;
  int v83;
  const void *v84;
  size_t v85;
  size_t v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  const void *v90;
  size_t v91;
  size_t v92;
  int v93;
  const void **k;
  const void **v95;
  const void **v96;
  size_t v97;
  int v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  const void *v106;
  unint64_t v107;
  size_t v108;
  int v109;
  const void **v110;
  const void *v111;
  const void **v112;
  const void *v113;
  size_t v114;
  int v115;
  __int128 *v116;
  __int128 v117;
  int v118;
  const void **v119;
  size_t v120;
  int v121;
  const void *v122;
  size_t v123;
  size_t v124;
  int v125;
  _OWORD *v126;
  uint64_t v127;
  _OWORD *v128;
  int64_t v129;
  int64_t v130;
  const void **v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  const void **v135;
  int v136;
  const void *v137;
  unint64_t v138;
  int v139;
  const void *v140;
  unint64_t v141;
  size_t v142;
  int v143;
  uint64_t v144;
  int v145;
  const void *v146;
  size_t v147;
  int v148;
  const void *v149;
  size_t v150;
  size_t v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 *v155;
  size_t v156;
  __int128 v157;
  uint64_t v158;
  _QWORD *v159;
  int v160;
  _QWORD *v161;
  size_t v162;
  int v163;
  const void *v164;
  size_t v165;
  size_t v166;
  int v167;
  int v168;
  const void *v169;
  size_t v170;
  size_t v171;
  int v172;
  char *v173;
  const void **v174;
  int v175;
  const void *v176;
  size_t v177;
  int v178;
  const void *v179;
  size_t v180;
  size_t v181;
  int v182;
  __int128 v183;
  __int128 *v184;
  size_t v185;
  uint64_t v186;
  char *v187;
  int v188;
  char *v189;
  size_t v190;
  size_t v191;
  int v192;
  uint64_t v193;
  uint64_t v195;
  const void *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  const void *v202;
  unint64_t v203;
  int v204;
  const void *v205;
  unint64_t v206;
  size_t v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  int v213;
  _QWORD *v214;
  size_t v215;
  int v216;
  const void *v217;
  size_t v218;
  size_t v219;
  int v220;
  __int128 v221;
  __int128 *v222;
  size_t v223;
  __int128 v224;
  __int128 v225;
  unint64_t v226;
  _QWORD *v227;
  int v228;
  _QWORD *v229;
  size_t v230;
  size_t v231;
  int v232;
  const void *v233;
  uint64_t v234;
  const void **v235;
  int v236;
  const void *v237;
  size_t v238;
  int v239;
  const void *v240;
  size_t v241;
  size_t v242;
  int v243;
  __int128 v244;
  __int128 *v245;
  size_t v246;
  uint64_t i;
  int v248;
  const void *v249;
  size_t v250;
  size_t v251;
  int v252;
  __int128 v253;
  __int128 v254;
  int64_t v256;
  const void *v258;
  __int128 *__s2;
  void *__s2a;
  _QWORD *v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  const void *v266;

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(const void **a1, const void **a2, const void **a3)
{
  int v6;
  const void *v7;
  size_t v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  __n128 result;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  const void *v25;
  __n128 v26;
  const void *v27;
  int v28;
  const void *v29;
  size_t v30;
  int v31;
  const void *v32;
  size_t v33;
  size_t v34;
  int v35;
  const void *v36;
  __int128 v37;
  const void *v38;
  int v39;
  const void *v40;
  size_t v41;
  int v42;
  const void *v43;
  size_t v44;
  size_t v45;
  int v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a1 + 23);
  else
    v11 = (size_t)a1[1];
  if (v11 >= v8)
    v12 = v8;
  else
    v12 = v11;
  v13 = memcmp(v7, v10, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
LABEL_31:
    v20 = *((char *)a3 + 23);
    if (v20 >= 0)
      v21 = a3;
    else
      v21 = *a3;
    if (v20 >= 0)
      v22 = *((unsigned __int8 *)a3 + 23);
    else
      v22 = (size_t)a3[1];
    if (v8 >= v22)
      v23 = v22;
    else
      v23 = v8;
    v24 = memcmp(v21, v7, v23);
    if (v24)
    {
      if ((v24 & 0x80000000) == 0)
      {
LABEL_42:
        v25 = a1[2];
        v26 = *(__n128 *)a1;
        v27 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v27;
        *(__n128 *)a2 = v26;
        a2[2] = v25;
        v28 = *((char *)a3 + 23);
        if (v28 >= 0)
          v29 = a3;
        else
          v29 = *a3;
        if (v28 >= 0)
          v30 = *((unsigned __int8 *)a3 + 23);
        else
          v30 = (size_t)a3[1];
        v31 = *((char *)a2 + 23);
        if (v31 >= 0)
          v32 = a2;
        else
          v32 = *a2;
        if (v31 >= 0)
          v33 = *((unsigned __int8 *)a2 + 23);
        else
          v33 = (size_t)a2[1];
        if (v33 >= v30)
          v34 = v30;
        else
          v34 = v33;
        v35 = memcmp(v29, v32, v34);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0)
            return result;
        }
        else if (v30 >= v33)
        {
          return result;
        }
        v47 = a2[2];
        result = *(__n128 *)a2;
        v49 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v49;
        goto LABEL_83;
      }
    }
    else if (v22 >= v8)
    {
      goto LABEL_42;
    }
    v47 = a1[2];
    result = *(__n128 *)a1;
    v48 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v48;
LABEL_83:
    *(__n128 *)a3 = result;
    a3[2] = v47;
    return result;
  }
  if (v8 < v11)
    goto LABEL_31;
LABEL_18:
  v14 = *((char *)a3 + 23);
  if (v14 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v8 >= v16)
    v17 = v16;
  else
    v17 = v8;
  v18 = memcmp(v15, v7, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
      return result;
  }
  else if (v16 >= v8)
  {
    return result;
  }
  v36 = a2[2];
  v37 = *(_OWORD *)a2;
  v38 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v38;
  *(_OWORD *)a3 = v37;
  a3[2] = v36;
  v39 = *((char *)a2 + 23);
  if (v39 >= 0)
    v40 = a2;
  else
    v40 = *a2;
  if (v39 >= 0)
    v41 = *((unsigned __int8 *)a2 + 23);
  else
    v41 = (size_t)a2[1];
  v42 = *((char *)a1 + 23);
  if (v42 >= 0)
    v43 = a1;
  else
    v43 = *a1;
  if (v42 >= 0)
    v44 = *((unsigned __int8 *)a1 + 23);
  else
    v44 = (size_t)a1[1];
  if (v44 >= v41)
    v45 = v41;
  else
    v45 = v44;
  v46 = memcmp(v40, v43, v45);
  if (v46)
  {
    if ((v46 & 0x80000000) == 0)
      return result;
  }
  else if (v41 >= v44)
  {
    return result;
  }
  v50 = a1[2];
  result = *(__n128 *)a1;
  v51 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v51;
  *(__n128 *)a2 = result;
  a2[2] = v50;
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(uint64_t a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  __n128 result;
  const void *v17;
  __int128 v18;
  const void *v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  const void *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *((char *)a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(const void **)a3;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = *((_QWORD *)a3 + 1);
  if (v13 >= v10)
    v14 = v10;
  else
    v14 = v13;
  v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return result;
  }
  else if (v10 >= v13)
  {
    return result;
  }
  v17 = (const void *)*((_QWORD *)a3 + 2);
  v18 = *a3;
  v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((_QWORD *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  v20 = *((char *)a3 + 23);
  if (v20 >= 0)
    v21 = a3;
  else
    v21 = *(const void **)a3;
  if (v20 >= 0)
    v22 = *((unsigned __int8 *)a3 + 23);
  else
    v22 = *((_QWORD *)a3 + 1);
  v23 = *((char *)a2 + 23);
  if (v23 >= 0)
    v24 = a2;
  else
    v24 = *(const void **)a2;
  if (v23 >= 0)
    v25 = *((unsigned __int8 *)a2 + 23);
  else
    v25 = *((_QWORD *)a2 + 1);
  if (v25 >= v22)
    v26 = v22;
  else
    v26 = v25;
  v27 = memcmp(v21, v24, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
      return result;
  }
  else if (v22 >= v25)
  {
    return result;
  }
  v28 = *((_QWORD *)a2 + 2);
  v29 = *a2;
  v30 = *((_QWORD *)a3 + 2);
  *a2 = *a3;
  *((_QWORD *)a2 + 2) = v30;
  *a3 = v29;
  *((_QWORD *)a3 + 2) = v28;
  v31 = *((char *)a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *(const void **)a2;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a2 + 23);
  else
    v33 = *((_QWORD *)a2 + 1);
  v34 = *(char *)(a1 + 23);
  if (v34 >= 0)
    v35 = (const void *)a1;
  else
    v35 = *(const void **)a1;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a1 + 23);
  else
    v36 = *(_QWORD *)(a1 + 8);
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if ((v38 & 0x80000000) == 0)
      return result;
  }
  else if (v33 >= v36)
  {
    return result;
  }
  v39 = *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a1;
  v40 = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v40;
  *a2 = (__int128)result;
  *((_QWORD *)a2 + 2) = v39;
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  __int128 *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  __int128 v20;
  const void *v21;
  int v22;
  __int128 *v23;
  size_t v24;
  int v25;
  const void *v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  size_t v38;
  size_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  const void *v45;
  size_t v46;
  int v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a4 + 23);
  if (v13 >= 0)
    v14 = a4;
  else
    v14 = *(__int128 **)a4;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a4 + 23);
  else
    v15 = *((_QWORD *)a4 + 1);
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return result;
  }
  else if (v12 >= v15)
  {
    return result;
  }
  v19 = (const void *)*((_QWORD *)a4 + 2);
  v20 = *a4;
  v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((_QWORD *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  v22 = *((char *)a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *(__int128 **)a4;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = *((_QWORD *)a4 + 1);
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const void *)a3;
  else
    v26 = *(const void **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  if (v27 >= v24)
    v28 = v24;
  else
    v28 = v27;
  v29 = memcmp(v23, v26, v28);
  if (v29)
  {
    if ((v29 & 0x80000000) == 0)
      return result;
  }
  else if (v24 >= v27)
  {
    return result;
  }
  v30 = *(_QWORD *)(a3 + 16);
  v31 = *(_OWORD *)a3;
  v32 = *((_QWORD *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(_QWORD *)(a3 + 16) = v32;
  *a4 = v31;
  *((_QWORD *)a4 + 2) = v30;
  v33 = *(char *)(a3 + 23);
  if (v33 >= 0)
    v34 = (const void *)a3;
  else
    v34 = *(const void **)a3;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a3 + 23);
  else
    v35 = *(_QWORD *)(a3 + 8);
  v36 = *(char *)(a2 + 23);
  if (v36 >= 0)
    v37 = (const void *)a2;
  else
    v37 = *(const void **)a2;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(a2 + 23);
  else
    v38 = *(_QWORD *)(a2 + 8);
  if (v38 >= v35)
    v39 = v35;
  else
    v39 = v38;
  v40 = memcmp(v34, v37, v39);
  if (v40)
  {
    if ((v40 & 0x80000000) == 0)
      return result;
  }
  else if (v35 >= v38)
  {
    return result;
  }
  v41 = *(_QWORD *)(a2 + 16);
  v42 = *(_OWORD *)a2;
  v43 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v43;
  *(_OWORD *)a3 = v42;
  *(_QWORD *)(a3 + 16) = v41;
  v44 = *(char *)(a2 + 23);
  if (v44 >= 0)
    v45 = (const void *)a2;
  else
    v45 = *(const void **)a2;
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(a2 + 23);
  else
    v46 = *(_QWORD *)(a2 + 8);
  v47 = *(char *)(a1 + 23);
  if (v47 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v46)
    v50 = v46;
  else
    v50 = v49;
  v51 = memcmp(v45, v48, v50);
  if (v51)
  {
    if ((v51 & 0x80000000) == 0)
      return result;
  }
  else if (v46 >= v49)
  {
    return result;
  }
  v52 = *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a1;
  v53 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v53;
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 16) = v52;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  const void **v15;
  const void **v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  size_t v26;
  size_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  unint64_t v34;
  int v35;
  const void *v36;
  unint64_t v37;
  size_t v38;
  int v39;
  const void *v40;
  __int128 v41;
  const void *v42;
  const void **v43;
  __int128 v44;
  __int128 v45;

  v2 = a2;
  v4 = ((uint64_t)a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = *((char *)a2 - 9);
      if (v7 >= 0)
        v8 = a2 - 4;
      else
        v8 = (const void **)*(a2 - 4);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 9);
      else
        v9 = (size_t)*(a2 - 3);
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = (const void *)a1;
      else
        v11 = *(const void **)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = v12;
      v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0)
          return 1;
      }
      else if (v9 >= v12)
      {
        return 1;
      }
      v40 = *(const void **)(a1 + 16);
      v41 = *(_OWORD *)a1;
      v42 = v6[2];
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v42;
      *(_OWORD *)v6 = v41;
      v6[2] = v40;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)a1, (const void **)(a1 + 32), a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(a1, a1 + 32, a1 + 64, (__int128 *)(a1 + 96), a2 - 4);
      return 1;
    default:
      v15 = (const void **)(a1 + 64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)a1, (const void **)(a1 + 32), (const void **)(a1 + 64));
      v16 = (const void **)(a1 + 96);
      if ((const void **)(a1 + 96) == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v43 = v2;
      break;
  }
  while (2)
  {
    v21 = *((char *)v16 + 23);
    if (v21 >= 0)
      v22 = v16;
    else
      v22 = *v16;
    if (v21 >= 0)
      v23 = *((unsigned __int8 *)v16 + 23);
    else
      v23 = (size_t)v16[1];
    v24 = *((char *)v15 + 23);
    if (v24 >= 0)
      v25 = v15;
    else
      v25 = *v15;
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)v15 + 23);
    else
      v26 = (size_t)v15[1];
    if (v26 >= v23)
      v27 = v23;
    else
      v27 = v26;
    v28 = memcmp(v22, v25, v27);
    if (v28)
    {
      if ((v28 & 0x80000000) == 0)
        goto LABEL_25;
    }
    else if (v23 >= v26)
    {
      goto LABEL_25;
    }
    v29 = *((_OWORD *)v16 + 1);
    v44 = *(_OWORD *)v16;
    v45 = v29;
    *(_OWORD *)v16 = *(_OWORD *)v15;
    v16[2] = v15[2];
    *((_BYTE *)v15 + 23) = 0;
    *(_BYTE *)v15 = 0;
    v19 = a1;
    if (v15 == (const void **)a1)
      goto LABEL_24;
    v30 = v17;
    while (1)
    {
      v31 = a1 + v30;
      v32 = (_OWORD *)(a1 + v30 + 32);
      v33 = (SBYTE7(v45) & 0x80u) == 0 ? &v44 : (__int128 *)v44;
      v34 = (SBYTE7(v45) & 0x80u) == 0 ? BYTE7(v45) : *((_QWORD *)&v44 + 1);
      v35 = *(char *)(v31 + 55);
      v36 = v35 >= 0 ? (const void *)(a1 + v30 + 32) : *(const void **)(a1 + v30 + 32);
      v37 = v35 >= 0 ? *(unsigned __int8 *)(v31 + 55) : *(_QWORD *)(v31 + 40);
      v38 = v37 >= v34 ? v34 : v37;
      v39 = memcmp(v33, v36, v38);
      if (!v39)
        break;
      if ((v39 & 0x80000000) == 0)
      {
        v19 = a1 + v30 + 64;
        goto LABEL_23;
      }
LABEL_48:
      v15 -= 4;
      *(_OWORD *)(v31 + 64) = *v32;
      *(_QWORD *)(v31 + 80) = *(_QWORD *)(a1 + v30 + 48);
      *(_BYTE *)(v31 + 55) = 0;
      *(_BYTE *)v32 = 0;
      v30 -= 32;
      if (v30 == -64)
      {
        v19 = a1;
        goto LABEL_23;
      }
    }
    if (v34 < v37)
      goto LABEL_48;
    v19 = (uint64_t)v15;
LABEL_23:
    v2 = v43;
LABEL_24:
    v20 = v44;
    *(_QWORD *)(v19 + 16) = v45;
    *(_OWORD *)v19 = v20;
    if (++v18 == 8)
      return v16 + 4 == v2;
LABEL_25:
    v15 = v16;
    v17 += 32;
    v16 += 4;
    if (v16 != v2)
      continue;
    return 1;
  }
}

void sub_19FC992D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v17;

  if (SHIBYTE(a15) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a16 + 40))(a16, a13, a15 & 0x7FFFFFFFFFFFFFFFLL);

  _Unwind_Resume(a1);
}

void sub_19FC994A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      _Unwind_Resume(exception_object);
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  _Unwind_Resume(exception_object);
}

void sub_19FC99644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC99944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC99A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC99BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC99C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC99ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC9A10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FC9A304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FC9A690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC9A8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FC9AD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19FC9B894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{

  _Unwind_Resume(a1);
}

void sub_19FC9BDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FC9C634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  std::vector<OffRouteJunctionInfo,geo::StdAllocator<OffRouteJunctionInfo,mdm::Allocator>>::~vector[abi:nn180100](&a29);

  _Unwind_Resume(a1);
}

void sub_19FC9C830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_19FC9C9E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC9CEB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 88);
  if (v3)
  {
    *(_QWORD *)(v1 + 96) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 112) + 40))(*(_QWORD *)(v1 + 112), v3, *(_QWORD *)(v1 + 104) - v3);
  }
  v4 = *(_QWORD *)(v1 + 120);
  if (v4)
  {
    *(_QWORD *)(v1 + 128) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 144) + 40))(*(_QWORD *)(v1 + 144), v4, *(_QWORD *)(v1 + 136) - v4);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FC9D54C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC9E7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  void *v36;
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v38 + 72) = v37;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  NavRoadSegment::~NavRoadSegment(&a36);

  _Unwind_Resume(a1);
}

void sub_19FC9EA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<NavRoadSegment,geo::StdAllocator<NavRoadSegment,mdm::Allocator>>::__push_back_slow_path<NavRoadSegment const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v3;
  v30 = a1 + 3;
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 56 * v6, 8);
  else
    v7 = 0;
  v8 = (_QWORD *)(v7 + 56 * v2);
  v9 = v7 + 56 * v6;
  if (v7)
  {
    *v8 = 0;
    v8[1] = 0;
    v10 = *(_QWORD *)(a2 + 24);
    v8[2] = 0;
    v8[3] = v10;
    v11 = *(char **)a2;
    v12 = *(char **)(a2 + 8);
    v13 = (uint64_t)&v12[-*(_QWORD *)a2];
    if (v12 != *(char **)a2)
    {
      if (v13 < 0)
        abort();
      v14 = (_OWORD *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v10 + 16))(v10, &v12[-*(_QWORD *)a2], 8);
      *v8 = v14;
      v8[1] = v14;
      v8[2] = &v14[v13 >> 4];
      do
      {
        if (v14)
          *v14 = *(_OWORD *)v11;
        v11 += 16;
        ++v14;
      }
      while (v11 != v12);
      v8[1] = v14;
    }
    v15 = v7 + 56 * v2;
    *(_QWORD *)(v15 + 32) = *(id *)(a2 + 32);
    *(_QWORD *)(v15 + 40) = *(id *)(a2 + 40);
    *(_BYTE *)(v15 + 48) = *(_BYTE *)(a2 + 48);
  }
  v16 = v8 + 7;
  v17 = *a1;
  v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = (uint64_t)v8;
    a1[1] = (uint64_t)v16;
    v25 = a1[2];
    a1[2] = v9;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v8[v19 / 8];
      v21 = v18 + v19;
      *(v20 - 7) = 0;
      *(v20 - 6) = 0;
      *(v20 - 5) = 0;
      *(v20 - 4) = *(_QWORD *)(v18 + v19 - 32);
      *(_OWORD *)(v20 - 7) = *(_OWORD *)(v18 + v19 - 56);
      *(v20 - 5) = *(_QWORD *)(v18 + v19 - 40);
      *(_QWORD *)(v21 - 56) = 0;
      *(_QWORD *)(v21 - 48) = 0;
      *(_QWORD *)(v21 - 40) = 0;
      v22 = *(_OWORD *)(v18 + v19 - 24);
      *(_QWORD *)(v21 - 24) = 0;
      *(_QWORD *)(v21 - 16) = 0;
      *(_OWORD *)(v20 - 3) = v22;
      *((_BYTE *)v20 - 8) = *(_BYTE *)(v18 + v19 - 8);
      v19 -= 56;
    }
    while (v18 + v19 != v17);
    v23 = &v8[v19 / 8];
    v18 = *a1;
    v24 = a1[1];
    *a1 = (uint64_t)v23;
    a1[1] = (uint64_t)v16;
    v25 = a1[2];
    a1[2] = v9;
    if (v24 != v18)
    {
      v26 = v24;
      do
      {

        v28 = *(_QWORD *)(v26 - 56);
        v26 -= 56;
        v27 = v28;
        if (v28)
        {
          *(_QWORD *)(v24 - 48) = v27;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 - 32) + 40))(*(_QWORD *)(v24 - 32), v27, *(_QWORD *)(v24 - 40) - v27);
        }
        v24 = v26;
      }
      while (v26 != v18);
    }
  }
  if (v18)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v30 + 40))(*v30, v18, v25 - v18);
  return v16;
}

void sub_19FC9ECEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<NavRoadSegment,geo::StdAllocator<NavRoadSegment,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void NavRoadFeature::~NavRoadFeature(NavRoadFeature *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_QWORD *)this + 9);
    v4 = *((_QWORD *)this + 8);
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 9);
      do
      {

        v7 = *(_QWORD *)(v5 - 56);
        v5 -= 56;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 48) = v6;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 32) + 40))(*(_QWORD *)(v3 - 32), v6, *(_QWORD *)(v3 - 40) - v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v4, *((_QWORD *)this + 10) - v4);
  }
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_13:
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), *(_QWORD *)this, *((_QWORD *)this + 2) & 0x7FFFFFFFFFFFFFFFLL);
    return;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), *((_QWORD *)this + 4), *((_QWORD *)this + 6) & 0x7FFFFFFFFFFFFFFFLL);
  if (*((char *)this + 23) < 0)
    goto LABEL_13;
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<NavRoadFeature>>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<NavRoadFeature>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<NavRoadFeature>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<NavRoadFeature>>,mdm::Allocator>>::__emplace_unique_key_args<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>&&>,std::tuple<>>(float *a1, uint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v51;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *((_QWORD *)a1 + 1);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *(_QWORD *)(v14 + 8);
            if (v19 == v10)
            {
              v20 = *(unsigned __int8 *)(v14 + 39);
              if ((v20 & 0x80u) == 0)
                v21 = *(unsigned __int8 *)(v14 + 39);
              else
                v21 = *(_QWORD *)(v14 + 24);
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)(v14 + 16), v7, *(_QWORD *)(v14 + 24)))
                    return v14;
                }
                else
                {
                  if (!*(_BYTE *)(v14 + 39))
                    return v14;
                  v22 = 0;
                  while (*(unsigned __int8 *)(v14 + v22 + 16) == *((unsigned __int8 *)v7 + v22))
                  {
                    if (v20 == ++v22)
                      return v14;
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = *(_QWORD *)v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15 == v10)
          {
            v16 = *(unsigned __int8 *)(v14 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *(unsigned __int8 *)(v14 + 39);
            else
              v17 = *(_QWORD *)(v14 + 24);
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v14 + 16), v7, *(_QWORD *)(v14 + 24)))
                  return v14;
              }
              else
              {
                if (!*(_BYTE *)(v14 + 39))
                  return v14;
                v18 = 0;
                while (*(unsigned __int8 *)(v14 + v18 + 16) == *((unsigned __int8 *)v7 + v18))
                {
                  if (v16 == ++v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = *(_QWORD *)v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 64, 8);
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = v10;
  v23 = *a3;
  v24 = (*a3)[1];
  *(_OWORD *)(v14 + 16) = **a3;
  *(_OWORD *)(v14 + 32) = v24;
  v23[1] = 0;
  v23[2] = 0;
  *v23 = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = 0;
  v25 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v26 = a1[12];
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    v27 = 1;
    if (v11 >= 3)
      v27 = (v11 & (v11 - 1)) != 0;
    v28 = v27 | (2 * v11);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *((_QWORD *)a1 + 1);
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_85;
      v42 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v11 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime >= v11)
      {
        v11 = *((_QWORD *)a1 + 1);
LABEL_85:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_98;
      }
      if (!prime)
      {
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v51)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v51, 8 * *((_QWORD *)a1 + 1));
        v11 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_85;
      }
    }
    v31 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v32 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v31;
    if (v32)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v32, 8 * *((_QWORD *)a1 + 1));
    v33 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33++) = 0;
    while (prime != v33);
    v35 = (uint64_t *)(a1 + 6);
    v34 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v34)
    {
LABEL_84:
      v11 = prime;
      goto LABEL_85;
    }
    v36 = v34[1];
    v37 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v38 = v36 & v37;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v35;
      for (i = (_QWORD *)*v34; *v34; i = (_QWORD *)*v34)
      {
        v40 = i[1] & v37;
        if (v40 == v38)
        {
          v34 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          *v34 = *i;
          v41 = 8 * v40;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v34;
          v34 = i;
          v38 = v40;
        }
      }
      goto LABEL_84;
    }
    if (v36 >= prime)
      v36 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v35;
    v45 = (_QWORD *)*v34;
    if (!*v34)
      goto LABEL_84;
    while (1)
    {
      v47 = v45[1];
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v36)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v47))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v47) = v34;
          goto LABEL_89;
        }
        *v34 = *v45;
        v46 = 8 * v47;
        *v45 = **(_QWORD **)(*(_QWORD *)a1 + v46);
        **(_QWORD **)(*(_QWORD *)a1 + v46) = v45;
        v45 = v34;
      }
      v47 = v36;
LABEL_89:
      v34 = v45;
      v45 = (_QWORD *)*v45;
      v36 = v47;
      if (!v45)
        goto LABEL_84;
    }
  }
LABEL_98:
  v48 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v48)
  {
    *(_QWORD *)v14 = *v48;
LABEL_106:
    *v48 = v14;
    goto LABEL_107;
  }
  *(_QWORD *)v14 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v14;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
  if (*(_QWORD *)v14)
  {
    v49 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v49 >= v11)
        v49 %= v11;
    }
    else
    {
      v49 &= v11 - 1;
    }
    v48 = (uint64_t *)(*(_QWORD *)a1 + 8 * v49);
    goto LABEL_106;
  }
LABEL_107:
  ++*((_QWORD *)a1 + 5);
  return v14;
}

void sub_19FC9F370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::shared_ptr<md::LabelDedupingGroup>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void NavRoadSegment::~NavRoadSegment(id *this)
{
  id v2;

  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    (*(void (**)(id, id, int64_t))(*(_QWORD *)this[3] + 40))(this[3], v2, (_BYTE *)this[2] - (_BYTE *)v2);
  }
}

void std::__shared_ptr_pointer<NavRoadFeature *,std::shared_ptr<NavRoadFeature>::__shared_ptr_default_delete<NavRoadFeature,NavRoadFeature>,std::allocator<NavRoadFeature>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

NavRoadFeature *std::__shared_ptr_pointer<NavRoadFeature *,std::shared_ptr<NavRoadFeature>::__shared_ptr_default_delete<NavRoadFeature,NavRoadFeature>,std::allocator<NavRoadFeature>>::__on_zero_shared(uint64_t a1)
{
  NavRoadFeature *result;

  result = *(NavRoadFeature **)(a1 + 24);
  if (result)
  {
    NavRoadFeature::~NavRoadFeature(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t std::__split_buffer<NavRoadSegment,geo::StdAllocator<NavRoadSegment,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;

    v4 = *(_QWORD *)(i - 56);
    if (v4)
    {
      *(_QWORD *)(i - 48) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 32) + 40))(*(_QWORD *)(i - 32), v4, *(_QWORD *)(i - 40) - v4);
    }
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

uint64_t lineSegmentIntersectsRectangle(float *a1, float a2, float a3, float a4, float a5)
{
  float v5;
  int v6;
  float v7;
  int v8;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  BOOL v17;
  float v18;
  BOOL v19;
  BOOL v20;
  float v21;
  float v22;
  BOOL v23;
  BOOL v24;
  float v25;
  BOOL v26;
  BOOL v27;
  float v28;
  float v29;
  BOOL v30;
  BOOL v31;
  float v32;
  BOOL v33;
  BOOL v34;
  float v35;
  float v36;
  float v37;
  float v38;
  BOOL v39;
  BOOL v40;
  float v41;
  BOOL v42;
  BOOL v43;

  v5 = *a1;
  if (*a1 >= a2)
  {
    v6 = 1;
  }
  else if (a1[2] <= a2)
  {
    v6 = 4;
  }
  else
  {
    v6 = 0;
  }
  v7 = a1[3];
  if (v7 <= a3)
  {
    v6 |= 2u;
    if (v5 >= a4)
      goto LABEL_10;
  }
  else
  {
    if (a1[1] >= a3)
      v6 |= 8u;
    if (v5 >= a4)
    {
LABEL_10:
      v8 = 1;
      if (v7 <= a5)
        goto LABEL_11;
LABEL_18:
      if (a1[1] >= a5)
        v8 |= 8u;
      if ((v8 & v6) != 0)
        return 0;
      goto LABEL_22;
    }
  }
  if (a1[2] <= a4)
    v8 = 4;
  else
    v8 = 0;
  if (v7 > a5)
    goto LABEL_18;
LABEL_11:
  v8 |= 2u;
  if ((v8 & v6) != 0)
    return 0;
LABEL_22:
  if (v8 | v6)
  {
    v11 = a1[1];
    v10 = a1[2];
    v12 = a4 - a2;
    v13 = a5 - a3;
    v14 = (float)(v7 - v11) * v12;
    if (fabsf(v14) < 0.00000011921)
      goto LABEL_33;
    v15 = (float)((float)(v7 - v11) * (float)(v5 - a2)) / v14;
    if (v15 >= 0.0)
    {
      v16 = v15 == 1.0;
      v17 = v15 < 1.0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    if (!v17 && !v16
      || ((v18 = (float)((float)((float)(a3 - v11) * v12) + (float)((float)(v5 - a2) * v13)) / v14, v18 >= 0.0)
        ? (v19 = v18 == 1.0, v20 = v18 < 1.0)
        : (v19 = 0, v20 = 0),
          !v20 && !v19))
    {
LABEL_33:
      v21 = v13 * (float)(v5 - v10);
      if (fabsf(v21) < 0.00000011921)
        goto LABEL_62;
      v22 = (float)((float)(v7 - a3) * (float)(v5 - v10)) / v21;
      if (v22 >= 0.0)
      {
        v23 = v22 == 1.0;
        v24 = v22 < 1.0;
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
      if (!v24 && !v23
        || ((v25 = (float)-(float)((float)((float)(v7 - a3) * v12) + (float)((float)(a2 - v5) * v13)) / v21, v25 >= 0.0)
          ? (v26 = v25 == 1.0, v27 = v25 < 1.0)
          : (v26 = 0, v27 = 0),
            !v27 && !v26))
      {
LABEL_62:
        v28 = (float)(v11 - v7) * v12;
        if (fabsf(v28) < 0.00000011921)
          goto LABEL_67;
        v29 = (float)((float)(v11 - v7) * (float)(v10 - a2)) / v28;
        if (v29 >= 0.0)
        {
          v30 = v29 == 1.0;
          v31 = v29 < 1.0;
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
        if (!v31 && !v30
          || ((v32 = (float)((float)((float)(a3 - v7) * v12) + (float)((float)(v10 - a2) * v13)) / v28, v32 >= 0.0)
            ? (v33 = v32 == 1.0, v34 = v32 < 1.0)
            : (v33 = 0, v34 = 0),
              !v34 && !v33))
        {
LABEL_67:
          v35 = v10 - v5;
          v36 = v13 * (float)(v10 - v5);
          if (fabsf(v36) < 0.00000011921)
            return 0;
          v37 = v11 - a3;
          v38 = (float)(v37 * v35) / v36;
          if (v38 >= 0.0)
          {
            v39 = v38 == 1.0;
            v40 = v38 < 1.0;
          }
          else
          {
            v39 = 0;
            v40 = 0;
          }
          if (!v40 && !v39)
            return 0;
          v41 = (float)-(float)((float)(v37 * v12) + (float)((float)(a2 - v10) * v13)) / v36;
          if (v41 >= 0.0)
          {
            v42 = v41 == 1.0;
            v43 = v41 < 1.0;
          }
          else
          {
            v42 = 0;
            v43 = 0;
          }
          if (!v43 && !v42)
            return 0;
        }
      }
    }
  }
  return 1;
}

void sub_19FC9F748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::vector<OffRouteJunctionInfo,geo::StdAllocator<OffRouteJunctionInfo,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 16);
        v3 -= 16;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  float v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unsigned int v11;
  _BOOL4 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  _BOOL4 v35;
  void *v36;
  void *v37;
  void *v38;

  v6 = *(unsigned __int8 *)(a2 + 8);
  v7 = *(float *)(a2 + 12);
  v8 = *(unsigned __int8 *)(a1 + 8);
  v9 = v6 == v8;
  v10 = v6 < v8;
  if (v9)
    v10 = v7 < *(float *)(a1 + 12);
  v11 = *(unsigned __int8 *)(a3 + 8);
  v9 = v11 == v6;
  v12 = v11 < v6;
  if (v9)
    v12 = *(float *)(a3 + 12) < v7;
  if (v10)
  {
    v14 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = 0;
    if (v12)
    {
      v15 = *(void **)a3;
      *(_QWORD *)a3 = 0;
      v16 = *(void **)a1;
      *(_QWORD *)a1 = v15;

      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
      v17 = *(void **)a3;
      *(_QWORD *)a3 = v14;
LABEL_17:

      *(_QWORD *)(a3 + 8) = v13;
      return;
    }
    v31 = *(void **)a2;
    *(_QWORD *)a2 = 0;
    v32 = *(void **)a1;
    *(_QWORD *)a1 = v31;

    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v33 = *(void **)a2;
    *(_QWORD *)a2 = v14;

    *(_QWORD *)(a2 + 8) = v13;
    v34 = *(unsigned __int8 *)(a3 + 8);
    v9 = v34 == v13;
    v35 = v34 < v13;
    if (v9)
      v35 = *(float *)(a3 + 12) < *((float *)&v13 + 1);
    if (v35)
    {
      v36 = *(void **)a2;
      *(_QWORD *)a2 = 0;
      v37 = *(void **)a3;
      *(_QWORD *)a3 = 0;
      v38 = *(void **)a2;
      *(_QWORD *)a2 = v37;

      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      v17 = *(void **)a3;
      *(_QWORD *)a3 = v36;
      goto LABEL_17;
    }
  }
  else if (v12)
  {
    v18 = *(void **)a2;
    v19 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    v20 = *(void **)a3;
    *(_QWORD *)a3 = 0;
    v21 = *(void **)a2;
    *(_QWORD *)a2 = v20;

    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    v22 = *(void **)a3;
    *(_QWORD *)a3 = v18;

    *(_QWORD *)(a3 + 8) = v19;
    v23 = *(unsigned __int8 *)(a2 + 8);
    v24 = *(unsigned __int8 *)(a1 + 8);
    v9 = v23 == v24;
    v25 = v23 < v24;
    if (v9)
      v25 = *(float *)(a2 + 12) < *(float *)(a1 + 12);
    if (v25)
    {
      v26 = *(void **)a1;
      v27 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = 0;
      v28 = *(void **)a2;
      *(_QWORD *)a2 = 0;
      v29 = *(void **)a1;
      *(_QWORD *)a1 = v28;

      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v30 = *(void **)a2;
      *(_QWORD *)a2 = v26;

      *(_QWORD *)(a2 + 8) = v27;
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, a2, a3);
  v8 = *(unsigned __int8 *)(a4 + 8);
  v9 = *(unsigned __int8 *)(a3 + 8);
  v10 = v8 == v9;
  v11 = v8 < v9;
  if (v10)
    v11 = *(float *)(a4 + 12) < *(float *)(a3 + 12);
  if (v11)
  {
    v12 = *(void **)a3;
    v13 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)a3 = 0;
    v14 = *(void **)a4;
    *(_QWORD *)a4 = 0;
    v15 = *(void **)a3;
    *(_QWORD *)a3 = v14;

    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    v16 = *(void **)a4;
    *(_QWORD *)a4 = v12;

    *(_QWORD *)(a4 + 8) = v13;
    v17 = *(unsigned __int8 *)(a3 + 8);
    v18 = *(unsigned __int8 *)(a2 + 8);
    v10 = v17 == v18;
    v19 = v17 < v18;
    if (v10)
      v19 = *(float *)(a3 + 12) < *(float *)(a2 + 12);
    if (v19)
    {
      v20 = *(void **)a2;
      v21 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = 0;
      v22 = *(void **)a3;
      *(_QWORD *)a3 = 0;
      v23 = *(void **)a2;
      *(_QWORD *)a2 = v22;

      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      v24 = *(void **)a3;
      *(_QWORD *)a3 = v20;

      *(_QWORD *)(a3 + 8) = v21;
      v25 = *(unsigned __int8 *)(a2 + 8);
      v26 = *(unsigned __int8 *)(a1 + 8);
      v10 = v25 == v26;
      v27 = v25 < v26;
      if (v10)
        v27 = *(float *)(a2 + 12) < *(float *)(a1 + 12);
      if (v27)
      {
        v28 = *(void **)a1;
        v29 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)a1 = 0;
        v30 = *(void **)a2;
        *(_QWORD *)a2 = 0;
        v31 = *(void **)a1;
        *(_QWORD *)a1 = v30;

        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        v32 = *(void **)a2;
        *(_QWORD *)a2 = v28;

        *(_QWORD *)(a2 + 8) = v29;
      }
    }
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  _BOOL4 v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, a2, a3, a4);
  v10 = *(unsigned __int8 *)(a5 + 8);
  v11 = *(unsigned __int8 *)(a4 + 8);
  v12 = v10 == v11;
  v13 = v10 < v11;
  if (v12)
    v13 = *(float *)(a5 + 12) < *(float *)(a4 + 12);
  if (v13)
  {
    v14 = *(void **)a4;
    v15 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)a4 = 0;
    v16 = *(void **)a5;
    *(_QWORD *)a5 = 0;
    v17 = *(void **)a4;
    *(_QWORD *)a4 = v16;

    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    v18 = *(void **)a5;
    *(_QWORD *)a5 = v14;

    *(_QWORD *)(a5 + 8) = v15;
    v19 = *(unsigned __int8 *)(a4 + 8);
    v20 = *(unsigned __int8 *)(a3 + 8);
    v12 = v19 == v20;
    v21 = v19 < v20;
    if (v12)
      v21 = *(float *)(a4 + 12) < *(float *)(a3 + 12);
    if (v21)
    {
      v22 = *(void **)a3;
      v23 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 = 0;
      v24 = *(void **)a4;
      *(_QWORD *)a4 = 0;
      v25 = *(void **)a3;
      *(_QWORD *)a3 = v24;

      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      v26 = *(void **)a4;
      *(_QWORD *)a4 = v22;

      *(_QWORD *)(a4 + 8) = v23;
      v27 = *(unsigned __int8 *)(a3 + 8);
      v28 = *(unsigned __int8 *)(a2 + 8);
      v12 = v27 == v28;
      v29 = v27 < v28;
      if (v12)
        v29 = *(float *)(a3 + 12) < *(float *)(a2 + 12);
      if (v29)
      {
        v30 = *(void **)a2;
        v31 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a2 = 0;
        v32 = *(void **)a3;
        *(_QWORD *)a3 = 0;
        v33 = *(void **)a2;
        *(_QWORD *)a2 = v32;

        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        v34 = *(void **)a3;
        *(_QWORD *)a3 = v30;

        *(_QWORD *)(a3 + 8) = v31;
        v35 = *(unsigned __int8 *)(a2 + 8);
        v36 = *(unsigned __int8 *)(a1 + 8);
        v12 = v35 == v36;
        v37 = v35 < v36;
        if (v12)
          v37 = *(float *)(a2 + 12) < *(float *)(a1 + 12);
        if (v37)
        {
          v38 = *(void **)a1;
          v39 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)a1 = 0;
          v40 = *(void **)a2;
          *(_QWORD *)a2 = 0;
          v41 = *(void **)a1;
          *(_QWORD *)a1 = v40;

          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v42 = *(void **)a2;
          *(_QWORD *)a2 = v38;

          *(_QWORD *)(a2 + 8) = v39;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  float v22;
  unsigned int v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  BOOL v32;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(unsigned __int8 *)(a2 - 8);
      v7 = *(unsigned __int8 *)(a1 + 8);
      v8 = v6 == v7;
      v9 = v6 < v7;
      if (v8)
        v9 = *(float *)(a2 - 4) < *(float *)(a1 + 12);
      if (v9)
      {
        v10 = *(void **)a1;
        v11 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)a1 = 0;
        v12 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = 0;
        v13 = *(void **)a1;
        *(_QWORD *)a1 = v12;

        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        v14 = *(void **)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v10;

        *(_QWORD *)(a2 - 8) = v11;
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *,0>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v15 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, a1 + 16, a1 + 32);
      v16 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v21 = *(unsigned __int8 *)(v16 + 8);
    v22 = *(float *)(v16 + 12);
    v23 = *(unsigned __int8 *)(v15 + 8);
    v8 = v21 == v23;
    v24 = v21 < v23;
    if (v8)
      v24 = v22 < *(float *)(v15 + 12);
    if (v24)
    {
      v25 = *(_QWORD *)v16;
      *(_QWORD *)v16 = 0;
      v26 = *(_DWORD *)(v16 + 8);
      v27 = v17;
      do
      {
        v28 = a1 + v27;
        v29 = *(_QWORD *)(a1 + v27 + 32);
        *(_QWORD *)(v28 + 32) = 0;
        v30 = *(void **)(a1 + v27 + 48);
        *(_QWORD *)(v28 + 48) = v29;

        *(_QWORD *)(v28 + 56) = *(_QWORD *)(v28 + 40);
        if (v27 == -32)
        {
          v19 = a1;
          goto LABEL_9;
        }
        v31 = *(unsigned __int8 *)(v28 + 24);
        v8 = v31 == v26;
        v32 = v31 > v26;
        if (v8)
          v32 = *(float *)(v28 + 28) > v22;
        v27 -= 16;
      }
      while (v32);
      v19 = a1 + v27 + 48;
LABEL_9:
      v20 = *(void **)v19;
      *(_QWORD *)v19 = v25;

      *(_DWORD *)(v19 + 8) = v26;
      *(float *)(v19 + 12) = v22;
      if (++v18 == 8)
        return v16 + 16 == a2;
    }
    v15 = v16;
    v17 += 16;
    v16 += 16;
    if (v16 == a2)
      return 1;
  }
}

void sub_19FCA0AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t md::FontGlyphCache::FontGlyphCache(uint64_t this, char a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  malloc_zone_t *zone;
  int v14;
  int v15;
  uint64_t v16;
  geo::read_write_lock *v17;
  const char *v18;
  malloc_zone_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  geo::read_write_lock *v23;
  const char *v24;
  malloc_zone_t *v25;
  int v26;
  int v27;
  uint64_t v28;
  geo::read_write_lock *v29;
  const char *v30;
  malloc_zone_t *v31;
  int v32;
  int v33;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)this = this;
  *(_QWORD *)(this + 8) = this;
  *(_QWORD *)(this + 16) = 0;
  if ((v2 & 1) == 0)
  {
    v43 = this;
    v38 = a2;
    a2 = v38;
    v9 = v8;
    this = v43;
    if (v9)
    {
      v10 = operator new();
      *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v10 + 24) = "VectorKitLabels";
      *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v10 = &off_1E42B5668;
      *(_QWORD *)(v10 + 8) = "VectorKitLabels";
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 200) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_QWORD *)(v10 + 248) = 0;
      *(_OWORD *)(v10 + 56) = 0u;
      v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
      if ((_DWORD)v11)
        geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v10 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v10 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v10;
      this = v43;
      a2 = v38;
    }
  }
  v3 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = v3;
  if ((v3 & 1) == 0)
  {
    v44 = this;
    v39 = a2;
    a2 = v39;
    v15 = v14;
    this = v44;
    if (v15)
    {
      v16 = operator new();
      *(_QWORD *)(v16 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v16 + 24) = "VectorKitLabels";
      *(_OWORD *)(v16 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v16 = &off_1E42B5668;
      *(_QWORD *)(v16 + 8) = "VectorKitLabels";
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      *(_OWORD *)(v16 + 104) = 0u;
      *(_OWORD *)(v16 + 120) = 0u;
      *(_OWORD *)(v16 + 136) = 0u;
      *(_OWORD *)(v16 + 152) = 0u;
      *(_OWORD *)(v16 + 168) = 0u;
      *(_OWORD *)(v16 + 184) = 0u;
      *(_OWORD *)(v16 + 200) = 0u;
      *(_OWORD *)(v16 + 216) = 0u;
      *(_OWORD *)(v16 + 232) = 0u;
      *(_QWORD *)(v16 + 248) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      v17 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v16 + 56), 0);
      if ((_DWORD)v17)
        geo::read_write_lock::logFailure(v17, (uint64_t)"initialization", v18);
      v19 = malloc_create_zone(0, 0);
      *(_QWORD *)(v16 + 48) = v19;
      malloc_set_zone_name(v19, "VectorKitLabels");
      *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v16;
      this = v44;
      a2 = v39;
    }
  }
  *(_QWORD *)(this + 48) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(this + 56) = 0;
  if ((v4 & 1) == 0)
  {
    v45 = this;
    v40 = a2;
    a2 = v40;
    v21 = v20;
    this = v45;
    if (v21)
    {
      v22 = operator new();
      *(_QWORD *)(v22 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v22 + 24) = "VectorKitLabels";
      *(_OWORD *)(v22 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v22 = &off_1E42B5668;
      *(_QWORD *)(v22 + 8) = "VectorKitLabels";
      *(_OWORD *)(v22 + 72) = 0u;
      *(_OWORD *)(v22 + 88) = 0u;
      *(_OWORD *)(v22 + 104) = 0u;
      *(_OWORD *)(v22 + 120) = 0u;
      *(_OWORD *)(v22 + 136) = 0u;
      *(_OWORD *)(v22 + 152) = 0u;
      *(_OWORD *)(v22 + 168) = 0u;
      *(_OWORD *)(v22 + 184) = 0u;
      *(_OWORD *)(v22 + 200) = 0u;
      *(_OWORD *)(v22 + 216) = 0u;
      *(_OWORD *)(v22 + 232) = 0u;
      *(_QWORD *)(v22 + 248) = 0;
      *(_OWORD *)(v22 + 56) = 0u;
      v23 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v22 + 56), 0);
      if ((_DWORD)v23)
        geo::read_write_lock::logFailure(v23, (uint64_t)"initialization", v24);
      v25 = malloc_create_zone(0, 0);
      *(_QWORD *)(v22 + 48) = v25;
      malloc_set_zone_name(v25, "VectorKitLabels");
      *(_QWORD *)(v22 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v22;
      this = v45;
      a2 = v40;
    }
  }
  *(_QWORD *)(this + 64) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 1065353216;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  if ((v5 & 1) == 0)
  {
    v46 = this;
    v41 = a2;
    a2 = v41;
    v27 = v26;
    this = v46;
    if (v27)
    {
      v28 = operator new();
      *(_QWORD *)(v28 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v28 + 24) = "VectorKitLabels";
      *(_OWORD *)(v28 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v28 = &off_1E42B5668;
      *(_QWORD *)(v28 + 8) = "VectorKitLabels";
      *(_OWORD *)(v28 + 72) = 0u;
      *(_OWORD *)(v28 + 88) = 0u;
      *(_OWORD *)(v28 + 104) = 0u;
      *(_OWORD *)(v28 + 120) = 0u;
      *(_OWORD *)(v28 + 136) = 0u;
      *(_OWORD *)(v28 + 152) = 0u;
      *(_OWORD *)(v28 + 168) = 0u;
      *(_OWORD *)(v28 + 184) = 0u;
      *(_OWORD *)(v28 + 200) = 0u;
      *(_OWORD *)(v28 + 216) = 0u;
      *(_OWORD *)(v28 + 232) = 0u;
      *(_QWORD *)(v28 + 248) = 0;
      *(_OWORD *)(v28 + 56) = 0u;
      v29 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v28 + 56), 0);
      if ((_DWORD)v29)
        geo::read_write_lock::logFailure(v29, (uint64_t)"initialization", v30);
      v31 = malloc_create_zone(0, 0);
      *(_QWORD *)(v28 + 48) = v31;
      malloc_set_zone_name(v31, "VectorKitLabels");
      *(_QWORD *)(v28 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v28;
      this = v46;
      a2 = v41;
    }
  }
  *(_QWORD *)(this + 104) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(this + 112) = 0;
  if ((v6 & 1) == 0)
  {
    v47 = this;
    v42 = a2;
    a2 = v42;
    v33 = v32;
    this = v47;
    if (v33)
    {
      v34 = operator new();
      *(_QWORD *)(v34 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v34 + 24) = "VectorKitLabels";
      *(_OWORD *)(v34 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v34 = &off_1E42B5668;
      *(_QWORD *)(v34 + 8) = "VectorKitLabels";
      *(_OWORD *)(v34 + 72) = 0u;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      *(_OWORD *)(v34 + 152) = 0u;
      *(_OWORD *)(v34 + 168) = 0u;
      *(_OWORD *)(v34 + 184) = 0u;
      *(_OWORD *)(v34 + 200) = 0u;
      *(_OWORD *)(v34 + 216) = 0u;
      *(_OWORD *)(v34 + 232) = 0u;
      *(_QWORD *)(v34 + 248) = 0;
      *(_OWORD *)(v34 + 56) = 0u;
      v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
      if ((_DWORD)v35)
        geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
      v37 = malloc_create_zone(0, 0);
      *(_QWORD *)(v34 + 48) = v37;
      malloc_set_zone_name(v37, "VectorKitLabels");
      *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v34;
      this = v47;
      a2 = v42;
    }
  }
  *(_QWORD *)(this + 120) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(this + 128) = 0;
  *(_DWORD *)(this + 136) = 1065353216;
  *(_QWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 152) = 0;
  *(_DWORD *)(this + 160) = 0;
  *(_BYTE *)(this + 164) = a2;
  do
  {
    do
      v7 = __ldaxr((unsigned int *)&md::FontGlyphCache::FontGlyphCache(BOOL)::nextGlyphCacheStamp);
    while (__stlxr(v7 + 1, (unsigned int *)&md::FontGlyphCache::FontGlyphCache(BOOL)::nextGlyphCacheStamp));
    *(_DWORD *)(this + 156) = v7 + 1;
  }
  while (v7 == -1);
  return this;
}

void md::FontGlyphCache::~FontGlyphCache(md::FontGlyphCache *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  md::FontGlyphCache *v10;
  uint64_t v11;
  md::FontGlyphCache *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v2 = (_QWORD *)*((_QWORD *)this + 14);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 14);
    do
    {
      *(_BYTE *)(v3[2] + 61) = 0;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    do
    {
      v4 = (_QWORD *)*v2;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15));
      v2 = v4;
    }
    while (v4);
  }
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v5, 8 * *((_QWORD *)this + 12));
  v6 = (_QWORD *)*((_QWORD *)this + 7);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8));
      v6 = v7;
    }
    while (v7);
  }
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v8, 8 * *((_QWORD *)this + 5));
  if (*((_QWORD *)this + 2))
  {
    v9 = *(_QWORD *)this;
    v10 = (md::FontGlyphCache *)*((_QWORD *)this + 1);
    v11 = *(_QWORD *)v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(*(_QWORD *)this + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *((_QWORD *)this + 2) = 0;
    if (v10 != this)
    {
      do
      {
        v12 = (md::FontGlyphCache *)*((_QWORD *)v10 + 1);
        v13 = (std::__shared_weak_count *)*((_QWORD *)v10 + 5);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        (*(void (**)(_QWORD, md::FontGlyphCache *, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v10, 48);
        v10 = v12;
      }
      while (v12 != this);
    }
  }
}

_QWORD *geo::_retain_ptr<CGFont *,geo::_retain_cf<CGFont *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4830;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void geo::_retain_ptr<CGFont *,geo::_retain_cf<CGFont *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E42B4830;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

void md::FontGlyph::~FontGlyph(md::FontGlyph *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E42AF778;
  *((_QWORD *)this + 1) = &off_1E42B4830;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E42AF778;
  *((_QWORD *)this + 1) = &off_1E42B4830;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::FontGlyph,geo::StdAllocator<md::FontGlyph,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::FontGlyph,geo::StdAllocator<md::FontGlyph,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::FontGlyph,geo::StdAllocator<md::FontGlyph,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::FontGlyph,geo::StdAllocator<md::FontGlyph,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 96);
}

void md::AtlasFontGlyph::~AtlasFontGlyph(md::AtlasFontGlyph *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  *(_QWORD *)this = &off_1E428F0C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42AF778;
  *((_QWORD *)this + 1) = &off_1E42B4830;
  v5 = (const void *)*((_QWORD *)this + 2);
  if (v5)
    CFRelease(v5);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  *(_QWORD *)this = &off_1E428F0C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42AF778;
  *((_QWORD *)this + 1) = &off_1E42B4830;
  v5 = (const void *)*((_QWORD *)this + 2);
  if (v5)
    CFRelease(v5);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::AtlasFontGlyph,geo::StdAllocator<md::AtlasFontGlyph,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB0B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::AtlasFontGlyph,geo::StdAllocator<md::AtlasFontGlyph,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB0B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::AtlasFontGlyph,geo::StdAllocator<md::AtlasFontGlyph,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::AtlasFontGlyph,geo::StdAllocator<md::AtlasFontGlyph,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 144);
}

uint64_t md::FontGlyphCache::finishFrame(uint64_t this)
{
  _DWORD *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned __int8 v6;
  float *v7;
  unsigned int v8;
  int v9;

  v1 = (_DWORD *)this;
  v2 = *(_DWORD *)(this + 152);
  if (*(_BYTE *)(this + 164))
  {
    if (v2)
    {
      do
      {
        v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
        if (*(_QWORD *)(v3 + 96))
          break;
        v4 = atomic_load((unsigned int *)(v3 + 52));
        v5 = v4 - v1[40];
        if (v5 < 0)
          v5 = -v5;
        if (*(_BYTE *)(v3 + 108))
        {
          v6 = atomic_load((unsigned __int8 *)(v3 + 109));
          if ((v6 & 1) == 0)
            break;
        }
        if (v5 < 0x1F5)
          break;
        this = md::FontGlyphCache::eraseGlyph((uint64_t)v1, *(float **)v1);
      }
      while (v1[38]);
    }
  }
  else if (v2 >= 0x101)
  {
    do
    {
      v7 = *(float **)v1;
      if (v2 <= 0x3FF)
      {
        v8 = atomic_load((unsigned int *)(*((_QWORD *)v7 + 4) + 52));
        v9 = v8 - v1[40];
        if (v9 < 0)
          v9 = -v9;
        if (v9 < 0xC9)
          break;
      }
      this = md::FontGlyphCache::eraseGlyph((uint64_t)v1, v7);
      v2 = v1[38];
    }
    while (v2 > 0x100);
  }
  return this;
}

uint64_t md::FontGlyphCache::eraseGlyph(uint64_t a1, float *a2)
{
  unint64_t v4;
  _QWORD *v5;
  float *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  float *v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t result;

  v4 = *((_QWORD *)a2 + 4);
  *(_BYTE *)(v4 + 61) = 0;
  v5 = (_QWORD *)(a1 + 32);
  v6 = std::__hash_table<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::__unordered_map_hasher<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::hash<GlyphCacheKey>,std::equal_to<GlyphCacheKey>,true>,std::__unordered_map_equal<GlyphCacheKey,std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,std::equal_to<GlyphCacheKey>,std::hash<GlyphCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<GlyphCacheKey,std::__list_iterator<md::FontGlyphCache::CachedItem,void *>>,mdm::Allocator>>::find<GlyphCacheKey>((_QWORD *)(a1 + 32), a2 + 4);
  if (v6)
  {
    v7 = *(int8x8_t *)(a1 + 40);
    v8 = *((_QWORD *)v6 + 1);
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v7)
        v8 %= *(_QWORD *)&v7;
    }
    else
    {
      v8 &= *(_QWORD *)&v7 - 1;
    }
    v10 = *(float **)(*v5 + 8 * v8);
    do
    {
      v11 = v10;
      v10 = *(float **)v10;
    }
    while (v10 != v6);
    if (v11 == (float *)(a1 + 56))
      goto LABEL_19;
    v12 = *((_QWORD *)v11 + 1);
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v7)
        v12 %= *(_QWORD *)&v7;
    }
    else
    {
      v12 &= *(_QWORD *)&v7 - 1;
    }
    if (v12 != v8)
    {
LABEL_19:
      if (!*(_QWORD *)v6)
        goto LABEL_20;
      v13 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
      }
      else
      {
        v13 &= *(_QWORD *)&v7 - 1;
      }
      if (v13 != v8)
LABEL_20:
        *(_QWORD *)(*v5 + 8 * v8) = 0;
    }
    v14 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v7)
          v15 %= *(_QWORD *)&v7;
      }
      else
      {
        v15 &= *(_QWORD *)&v7 - 1;
      }
      if (v15 != v8)
      {
        *(_QWORD *)(*v5 + 8 * v15) = v11;
        v14 = *(_QWORD *)v6;
      }
    }
    *(_QWORD *)v11 = v14;
    *(_QWORD *)v6 = 0;
    v16 = *(_QWORD *)(a1 + 64);
    --*(_QWORD *)(a1 + 72);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    v4 = *((_QWORD *)a2 + 4);
  }
  v17 = (_QWORD *)(a1 + 88);
  v18 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(a1 + 88), v4);
  if (v18)
  {
    v19 = *(int8x8_t *)(a1 + 96);
    v20 = v18[1];
    v21 = (uint8x8_t)vcnt_s8(v19);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      if (v20 >= *(_QWORD *)&v19)
        v20 %= *(_QWORD *)&v19;
    }
    else
    {
      v20 &= *(_QWORD *)&v19 - 1;
    }
    v22 = *(_QWORD **)(*v17 + 8 * v20);
    do
    {
      v23 = v22;
      v22 = (_QWORD *)*v22;
    }
    while (v22 != v18);
    if (v23 == (_QWORD *)(a1 + 112))
      goto LABEL_47;
    v24 = v23[1];
    if (v21.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&v19)
        v24 %= *(_QWORD *)&v19;
    }
    else
    {
      v24 &= *(_QWORD *)&v19 - 1;
    }
    if (v24 != v20)
    {
LABEL_47:
      if (!*v18)
        goto LABEL_48;
      v25 = *(_QWORD *)(*v18 + 8);
      if (v21.u32[0] > 1uLL)
      {
        if (v25 >= *(_QWORD *)&v19)
          v25 %= *(_QWORD *)&v19;
      }
      else
      {
        v25 &= *(_QWORD *)&v19 - 1;
      }
      if (v25 != v20)
LABEL_48:
        *(_QWORD *)(*v17 + 8 * v20) = 0;
    }
    v26 = *v18;
    if (*v18)
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v21.u32[0] > 1uLL)
      {
        if (v27 >= *(_QWORD *)&v19)
          v27 %= *(_QWORD *)&v19;
      }
      else
      {
        v27 &= *(_QWORD *)&v19 - 1;
      }
      if (v27 != v20)
      {
        *(_QWORD *)(*v17 + 8 * v27) = v23;
        v26 = *v18;
      }
    }
    *v23 = v26;
    *v18 = 0;
    v28 = *(_QWORD *)(a1 + 120);
    --*(_QWORD *)(a1 + 128);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
  }
  v29 = *(_QWORD *)a2;
  *(_QWORD *)(v29 + 8) = *((_QWORD *)a2 + 1);
  **((_QWORD **)a2 + 1) = v29;
  --*(_QWORD *)(a1 + 16);
  v30 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  result = (*(uint64_t (**)(_QWORD, float *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2, 48);
  --*(_DWORD *)(a1 + 152);
  return result;
}

void md::VKMRenderResourceStoreSerializer::serializeWith(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  char *v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  char *v67;
  char *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  void *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  void *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  void *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  void *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  void *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  void *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  void *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  void *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  void *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  void *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  void *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char *v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  char *v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  char *v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  void *v330;
  void *__dst[13];
  _QWORD v332[2];
  char v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  char v338[23];
  char v339;
  char v340[8];
  uint64_t v341;
  char v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  char v347[8];
  uint64_t v348;
  char v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  _QWORD v354[4];
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  _QWORD v359[2];
  char v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  char v365[8];
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;

  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_globeMatrices");
  HIBYTE(__dst[2]) = 14;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v4 = *(unsigned int *)(a2 + 9072);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v4;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v5 = *(unsigned int *)(a2 + 9112);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v6 = *(_QWORD *)(a2 + 9184);
  v7 = *(_QWORD *)(a2 + 9176);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = ((unint64_t)(v6 - v7) >> 7);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v8 = (char *)__dst[9];
  if (__dst[9])
  {
    v9 = (char *)__dst[10];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v9 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v9);
      }
      while (v9 != v8);
    }
    __dst[10] = v8;
    operator delete(v8);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(__dst[0]);
LABEL_7:
  memset(__dst, 0, 96);
  v10 = (char *)operator new(0x19uLL);
  strcpy(v10, "_associationItemStorage");
  std::string::__assign_no_alias<true>(__dst, v10, 0x17uLL);
  operator delete(v10);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v11 = *(unsigned int *)(a2 + 10128);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v11;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v12 = *(unsigned int *)(a2 + 10168);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v12;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v13 = *(_QWORD *)(a2 + 10240);
  v14 = *(_QWORD *)(a2 + 10232);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1227133513 * ((unint64_t)(v13 - v14) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v15 = (char *)__dst[9];
  if (__dst[9])
  {
    v16 = (char *)__dst[10];
    v17 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v16 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v16);
      }
      while (v16 != v15);
      v17 = __dst[9];
    }
    __dst[10] = v15;
    operator delete(v17);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(__dst[0]);
LABEL_14:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_tileMatrices");
  HIBYTE(__dst[2]) = 13;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v18 = *(unsigned int *)(a2 + 9248);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v18;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v19 = *(unsigned int *)(a2 + 9288);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v19;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v20 = *(_QWORD *)(a2 + 9360);
  v21 = *(_QWORD *)(a2 + 9352);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = ((unint64_t)(v20 - v21) >> 8);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v22 = (char *)__dst[9];
  if (__dst[9])
  {
    v23 = (char *)__dst[10];
    v24 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v23 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v23);
      }
      while (v23 != v22);
      v24 = __dst[9];
    }
    __dst[10] = v22;
    operator delete(v24);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(__dst[0]);
LABEL_21:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_renderableDataItems");
  HIBYTE(__dst[2]) = 20;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v25 = *(unsigned int *)(a2 + 9424);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v25;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v26 = *(unsigned int *)(a2 + 9464);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v26;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v27 = *(_QWORD *)(a2 + 9536);
  v28 = *(_QWORD *)(a2 + 9528);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1963413621 * ((unint64_t)(v27 - v28) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v29 = (char *)__dst[9];
  if (__dst[9])
  {
    v30 = (char *)__dst[10];
    v31 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v30 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v30);
      }
      while (v30 != v29);
      v31 = __dst[9];
    }
    __dst[10] = v29;
    operator delete(v31);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_28;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(__dst[0]);
LABEL_28:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_colorRampData");
  HIBYTE(__dst[2]) = 14;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v32 = *(unsigned int *)(a2 + 9600);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v32;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v33 = *(unsigned int *)(a2 + 9640);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v33;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v34 = *(_QWORD *)(a2 + 9712);
  v35 = *(_QWORD *)(a2 + 9704);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -858993459 * ((unint64_t)(v34 - v35) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v36 = (char *)__dst[9];
  if (__dst[9])
  {
    v37 = (char *)__dst[10];
    v38 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v37 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v37);
      }
      while (v37 != v36);
      v38 = __dst[9];
    }
    __dst[10] = v36;
    operator delete(v38);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_35;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__dst[0]);
LABEL_35:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_renderStateItems");
  HIBYTE(__dst[2]) = 17;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v39 = *(unsigned int *)(a2 + 672);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v39;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v40 = *(unsigned int *)(a2 + 712);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v40;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v41 = *(_QWORD *)(a2 + 784);
  v42 = *(_QWORD *)(a2 + 776);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = ((unint64_t)(v41 - v42) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v43 = (char *)__dst[9];
  if (__dst[9])
  {
    v44 = (char *)__dst[10];
    v45 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v44 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v44);
      }
      while (v44 != v43);
      v45 = __dst[9];
    }
    __dst[10] = v43;
    operator delete(v45);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
    operator delete(__dst[3]);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_landCoverSettings");
  HIBYTE(__dst[2]) = 18;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v46 = *(unsigned int *)(a2 + 2960);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v46;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v47 = *(unsigned int *)(a2 + 3000);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v47;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v48 = *(_QWORD *)(a2 + 3072);
  v49 = *(_QWORD *)(a2 + 3064);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v48 - v49) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v50 = *(unsigned int *)(a2 + 3136);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v50;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v51 = *(unsigned int *)(a2 + 3176);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v51;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v52 = *(unsigned int *)(a2 + 3216);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v52;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v53 = (char *)__dst[9];
  if (__dst[9])
  {
    v54 = (char *)__dst[10];
    v55 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v54 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v54);
      }
      while (v54 != v53);
      v55 = __dst[9];
    }
    __dst[10] = v53;
    operator delete(v55);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_51;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(__dst[0]);
LABEL_51:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_tileTypeItems");
  HIBYTE(__dst[2]) = 14;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v56 = *(unsigned int *)(a2 + 8544);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v56;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v57 = *(unsigned int *)(a2 + 8584);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v57;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v58 = *(_DWORD *)(a2 + 8656);
  v59 = *(_DWORD *)(a2 + 8648);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = (v58 - v59);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v60 = (char *)__dst[9];
  if (__dst[9])
  {
    v61 = (char *)__dst[10];
    v62 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v61 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v61);
      }
      while (v61 != v60);
      v62 = __dst[9];
    }
    __dst[10] = v60;
    operator delete(v62);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_58;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(__dst[0]);
LABEL_58:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_layerTypeItems");
  HIBYTE(__dst[2]) = 15;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v63 = *(unsigned int *)(a2 + 8720);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v63;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v64 = *(unsigned int *)(a2 + 8760);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v64;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v65 = *(_DWORD *)(a2 + 8832);
  v66 = *(_DWORD *)(a2 + 8824);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = (v65 - v66);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v67 = (char *)__dst[9];
  if (__dst[9])
  {
    v68 = (char *)__dst[10];
    v69 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v68 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v68);
      }
      while (v68 != v67);
      v69 = __dst[9];
    }
    __dst[10] = v67;
    operator delete(v69);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_65;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_65;
  }
  operator delete(__dst[0]);
LABEL_65:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_mapDataTypeItems");
  HIBYTE(__dst[2]) = 17;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v70 = *(unsigned int *)(a2 + 8896);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v70;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v71 = *(unsigned int *)(a2 + 8936);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v71;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v72 = *(_QWORD *)(a2 + 9008);
  v73 = *(_QWORD *)(a2 + 9000);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = ((unint64_t)(v72 - v73) >> 1);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v74 = (char *)__dst[9];
  if (__dst[9])
  {
    v75 = (char *)__dst[10];
    v76 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v75 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v75);
      }
      while (v75 != v74);
      v76 = __dst[9];
    }
    __dst[10] = v74;
    operator delete(v76);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_72;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(__dst[0]);
LABEL_72:
  memset(__dst, 0, 96);
  v77 = (char *)operator new(0x20uLL);
  strcpy(v77, "_transformConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v77, 0x1BuLL);
  operator delete(v77);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v78 = *(unsigned int *)(a2 + 3256);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v78;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v79 = *(unsigned int *)(a2 + 3296);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v79;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v80 = *(_QWORD *)(a2 + 3368);
  v81 = *(_QWORD *)(a2 + 3360);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v80 - v81) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v82 = (char *)__dst[9];
  if (__dst[9])
  {
    v83 = (char *)__dst[10];
    v84 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v83 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v83);
      }
      while (v83 != v82);
      v84 = __dst[9];
    }
    __dst[10] = v82;
    operator delete(v84);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_79;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_79;
  }
  operator delete(__dst[0]);
LABEL_79:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_viewConstantDataItems");
  HIBYTE(__dst[2]) = 22;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v85 = *(unsigned int *)(a2 + 3432);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v85;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v86 = *(unsigned int *)(a2 + 3472);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v86;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v87 = *(_QWORD *)(a2 + 3544);
  v88 = *(_QWORD *)(a2 + 3536);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v87 - v88) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v89 = (char *)__dst[9];
  if (__dst[9])
  {
    v90 = (char *)__dst[10];
    v91 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v90 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v90);
      }
      while (v90 != v89);
      v91 = __dst[9];
    }
    __dst[10] = v89;
    operator delete(v91);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_86;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_86;
  }
  operator delete(__dst[0]);
LABEL_86:
  memset(__dst, 0, 96);
  v92 = (char *)operator new(0x20uLL);
  strcpy(v92, "_linearDepthConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v92, 0x1DuLL);
  operator delete(v92);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v93 = *(unsigned int *)(a2 + 3608);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v93;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v94 = *(unsigned int *)(a2 + 3648);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v94;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v95 = *(_QWORD *)(a2 + 3720);
  v96 = *(_QWORD *)(a2 + 3712);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v95 - v96) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v97 = (char *)__dst[9];
  if (__dst[9])
  {
    v98 = (char *)__dst[10];
    v99 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v98 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v98);
      }
      while (v98 != v97);
      v99 = __dst[9];
    }
    __dst[10] = v97;
    operator delete(v99);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_93;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_93;
  }
  operator delete(__dst[0]);
LABEL_93:
  memset(__dst, 0, 96);
  v100 = (char *)operator new(0x20uLL);
  strcpy(v100, "_clippingConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v100, 0x1AuLL);
  operator delete(v100);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v101 = *(unsigned int *)(a2 + 3784);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v101;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v102 = *(unsigned int *)(a2 + 3824);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v102;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v103 = *(_QWORD *)(a2 + 3896);
  v104 = *(_QWORD *)(a2 + 3888);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v103 - v104) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v105 = (char *)__dst[9];
  if (__dst[9])
  {
    v106 = (char *)__dst[10];
    v107 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v106 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v106);
      }
      while (v106 != v105);
      v107 = __dst[9];
    }
    __dst[10] = v105;
    operator delete(v107);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_100;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_100;
  }
  operator delete(__dst[0]);
LABEL_100:
  memset(__dst, 0, 96);
  v108 = (char *)operator new(0x20uLL);
  strcpy(v108, "_shadowConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v108, 0x18uLL);
  operator delete(v108);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v109 = *(unsigned int *)(a2 + 3960);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v109;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v110 = *(unsigned int *)(a2 + 4000);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v110;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v111 = *(_QWORD *)(a2 + 4072);
  v112 = *(_QWORD *)(a2 + 4064);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v111 - v112) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v113 = (char *)__dst[9];
  if (__dst[9])
  {
    v114 = (char *)__dst[10];
    v115 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v114 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v114);
      }
      while (v114 != v113);
      v115 = __dst[9];
    }
    __dst[10] = v113;
    operator delete(v115);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_107;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_107;
  }
  operator delete(__dst[0]);
LABEL_107:
  memset(__dst, 0, 96);
  v116 = (char *)operator new(0x20uLL);
  strcpy(v116, "_styleEmissiveColorDataItems");
  std::string::__assign_no_alias<true>(__dst, v116, 0x1CuLL);
  operator delete(v116);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v117 = *(unsigned int *)(a2 + 2368);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v117;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v118 = *(unsigned int *)(a2 + 2408);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v118;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v119 = *(_QWORD *)(a2 + 2480);
  v120 = *(_QWORD *)(a2 + 2472);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v119 - v120) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v121 = *(unsigned int *)(a2 + 2544);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v121;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v122 = *(unsigned int *)(a2 + 2584);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v122;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v123 = *(unsigned int *)(a2 + 2624);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v123;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v124 = (char *)__dst[9];
  if (__dst[9])
  {
    v125 = (char *)__dst[10];
    v126 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v125 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v125);
      }
      while (v125 != v124);
      v126 = __dst[9];
    }
    __dst[10] = v124;
    operator delete(v126);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_114;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_114;
  }
  operator delete(__dst[0]);
LABEL_114:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_styleCameraLighting");
  HIBYTE(__dst[2]) = 20;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v127 = *(unsigned int *)(a2 + 5432);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v127;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v128 = *(unsigned int *)(a2 + 5472);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v128;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v129 = *(_QWORD *)(a2 + 5544);
  v130 = *(_QWORD *)(a2 + 5536);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v129 - v130) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v131 = (char *)__dst[9];
  if (__dst[9])
  {
    v132 = (char *)__dst[10];
    v133 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v132 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v132);
      }
      while (v132 != v131);
      v133 = __dst[9];
    }
    __dst[10] = v131;
    operator delete(v133);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_121;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(__dst[0]);
LABEL_121:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_styleDataItems");
  HIBYTE(__dst[2]) = 15;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v134 = *(unsigned int *)(a2 + 1184);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v134;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v135 = *(unsigned int *)(a2 + 1224);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v135;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v136 = *(_QWORD *)(a2 + 1296);
  v137 = *(_QWORD *)(a2 + 1288);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v136 - v137) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v138 = *(unsigned int *)(a2 + 1360);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v138;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v139 = *(unsigned int *)(a2 + 1400);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v139;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v140 = *(unsigned int *)(a2 + 1440);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v140;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v141 = (char *)__dst[9];
  if (__dst[9])
  {
    v142 = (char *)__dst[10];
    v143 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v142 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v142);
      }
      while (v142 != v141);
      v143 = __dst[9];
    }
    __dst[10] = v141;
    operator delete(v143);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_128;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
  operator delete(__dst[0]);
LABEL_128:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_styleDataKeys");
  HIBYTE(__dst[2]) = 14;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v144 = *(unsigned int *)(a2 + 1480);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v144;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v145 = *(unsigned int *)(a2 + 1520);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v145;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v146 = *(_QWORD *)(a2 + 1592);
  v147 = *(_QWORD *)(a2 + 1584);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -858993459 * ((unint64_t)(v146 - v147) >> 2);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v148 = *(unsigned int *)(a2 + 1656);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v148;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v149 = *(unsigned int *)(a2 + 1696);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v149;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v150 = *(unsigned int *)(a2 + 1736);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v150;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v151 = (char *)__dst[9];
  if (__dst[9])
  {
    v152 = (char *)__dst[10];
    v153 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v152 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v152);
      }
      while (v152 != v151);
      v153 = __dst[9];
    }
    __dst[10] = v151;
    operator delete(v153);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_135;
  }
  operator delete(__dst[0]);
LABEL_135:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_styleColor");
  HIBYTE(__dst[2]) = 11;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v154 = *(unsigned int *)(a2 + 6296);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v154;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v155 = *(unsigned int *)(a2 + 6336);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v155;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v156 = *(_QWORD *)(a2 + 6408);
  v157 = *(_QWORD *)(a2 + 6400);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v156 - v157) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v158 = *(unsigned int *)(a2 + 6472);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v158;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v159 = *(unsigned int *)(a2 + 6512);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v159;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v160 = *(unsigned int *)(a2 + 6552);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v160;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v161 = (char *)__dst[9];
  if (__dst[9])
  {
    v162 = (char *)__dst[10];
    v163 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v162 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v162);
      }
      while (v162 != v161);
      v163 = __dst[9];
    }
    __dst[10] = v161;
    operator delete(v163);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_142;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_142;
  }
  operator delete(__dst[0]);
LABEL_142:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_positionScaleInfo");
  HIBYTE(__dst[2]) = 18;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v164 = *(unsigned int *)(a2 + 5608);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v164;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v165 = *(unsigned int *)(a2 + 5648);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v165;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v166 = *(_QWORD *)(a2 + 5720);
  v167 = *(_QWORD *)(a2 + 5712);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v166 - v167) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v168 = *(unsigned int *)(a2 + 5784);
  v360 = 4;
  strcpy((char *)v359, "pool");
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v168;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v169 = (char *)__dst[9];
  if (__dst[9])
  {
    v170 = (char *)__dst[10];
    v171 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v170 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v170);
      }
      while (v170 != v169);
      v171 = __dst[9];
    }
    __dst[10] = v169;
    operator delete(v171);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_149;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_149;
  }
  operator delete(__dst[0]);
LABEL_149:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_colorCorrectionFactor");
  HIBYTE(__dst[2]) = 22;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v172 = *(unsigned int *)(a2 + 7952);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v172;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v173 = *(unsigned int *)(a2 + 7992);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v173;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v174 = *(_QWORD *)(a2 + 8064);
  v175 = *(_QWORD *)(a2 + 8056);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v174 - v175) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v176 = *(unsigned int *)(a2 + 8128);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v176;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v177 = *(unsigned int *)(a2 + 8168);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v177;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v178 = *(unsigned int *)(a2 + 8208);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v178;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v179 = (char *)__dst[9];
  if (__dst[9])
  {
    v180 = (char *)__dst[10];
    v181 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v180 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v180);
      }
      while (v180 != v179);
      v181 = __dst[9];
    }
    __dst[10] = v179;
    operator delete(v181);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_156;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(__dst[0]);
LABEL_156:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_styleSSAO");
  HIBYTE(__dst[2]) = 10;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v182 = *(unsigned int *)(a2 + 8248);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v182;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v183 = *(unsigned int *)(a2 + 8288);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v183;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v184 = *(_QWORD *)(a2 + 8360);
  v185 = *(_QWORD *)(a2 + 8352);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v184 - v185) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v186 = *(unsigned int *)(a2 + 8424);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v186;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v187 = *(unsigned int *)(a2 + 8464);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v187;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v188 = *(unsigned int *)(a2 + 8504);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v188;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v189 = (char *)__dst[9];
  if (__dst[9])
  {
    v190 = (char *)__dst[10];
    v191 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v190 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v190);
      }
      while (v190 != v189);
      v191 = __dst[9];
    }
    __dst[10] = v189;
    operator delete(v191);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_163;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_163;
  }
  operator delete(__dst[0]);
LABEL_163:
  memset(__dst, 0, 96);
  v192 = (char *)operator new(0x20uLL);
  strcpy(v192, "_flyoverSharedConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v192, 0x1FuLL);
  operator delete(v192);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v193 = *(unsigned int *)(a2 + 4136);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v193;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v194 = *(unsigned int *)(a2 + 4176);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v194;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v195 = *(_QWORD *)(a2 + 4248);
  v196 = *(_QWORD *)(a2 + 4240);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v195 - v196) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v197 = *(unsigned int *)(a2 + 4312);
  v360 = 4;
  strcpy((char *)v359, "pool");
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v197;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v198 = (char *)__dst[9];
  if (__dst[9])
  {
    v199 = (char *)__dst[10];
    v200 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v199 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v199);
      }
      while (v199 != v198);
      v200 = __dst[9];
    }
    __dst[10] = v198;
    operator delete(v200);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_170;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_170;
  }
  operator delete(__dst[0]);
LABEL_170:
  memset(__dst, 0, 96);
  v201 = (char *)operator new(0x20uLL);
  strcpy(v201, "_flyoverClipConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v201, 0x1DuLL);
  operator delete(v201);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v202 = *(unsigned int *)(a2 + 4352);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v202;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v203 = *(unsigned int *)(a2 + 4392);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v203;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v204 = *(_QWORD *)(a2 + 4464);
  v205 = *(_QWORD *)(a2 + 4456);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v204 - v205) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v206 = *(unsigned int *)(a2 + 4528);
  v360 = 4;
  strcpy((char *)v359, "pool");
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v206;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v207 = (char *)__dst[9];
  if (__dst[9])
  {
    v208 = (char *)__dst[10];
    v209 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v208 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v208);
      }
      while (v208 != v207);
      v209 = __dst[9];
    }
    __dst[10] = v207;
    operator delete(v209);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_177;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_177;
  }
  operator delete(__dst[0]);
LABEL_177:
  memset(__dst, 0, 96);
  v210 = (char *)operator new(0x28uLL);
  strcpy(v210, "_flyoverTransformConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v210, 0x22uLL);
  operator delete(v210);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v211 = *(unsigned int *)(a2 + 4568);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v211;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v212 = *(unsigned int *)(a2 + 4608);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v212;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v213 = *(_QWORD *)(a2 + 4680);
  v214 = *(_QWORD *)(a2 + 4672);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v213 - v214) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v215 = *(unsigned int *)(a2 + 4744);
  v360 = 4;
  strcpy((char *)v359, "pool");
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v215;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v216 = (char *)__dst[9];
  if (__dst[9])
  {
    v217 = (char *)__dst[10];
    v218 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v217 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v217);
      }
      while (v217 != v216);
      v218 = __dst[9];
    }
    __dst[10] = v216;
    operator delete(v218);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_184;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_184;
  }
  operator delete(__dst[0]);
LABEL_184:
  memset(__dst, 0, 96);
  v219 = (char *)operator new(0x28uLL);
  strcpy(v219, "_flyoverS2TransformConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v219, 0x24uLL);
  operator delete(v219);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v220 = *(unsigned int *)(a2 + 4784);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v220;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v221 = *(unsigned int *)(a2 + 4824);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v221;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v222 = *(_QWORD *)(a2 + 4896);
  v223 = *(_QWORD *)(a2 + 4888);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v222 - v223) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v224 = *(unsigned int *)(a2 + 4960);
  v360 = 4;
  strcpy((char *)v359, "pool");
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v224;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v225 = (char *)__dst[9];
  if (__dst[9])
  {
    v226 = (char *)__dst[10];
    v227 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v226 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v226);
      }
      while (v226 != v225);
      v227 = __dst[9];
    }
    __dst[10] = v225;
    operator delete(v227);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_191;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_191;
  }
  operator delete(__dst[0]);
LABEL_191:
  memset(__dst, 0, 96);
  v228 = (char *)operator new(0x28uLL);
  strcpy(v228, "_flyoverTexcoordsConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v228, 0x22uLL);
  operator delete(v228);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v229 = *(unsigned int *)(a2 + 5000);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v229;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v230 = *(unsigned int *)(a2 + 5040);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v230;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v231 = *(_QWORD *)(a2 + 5112);
  v232 = *(_QWORD *)(a2 + 5104);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v231 - v232) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v233 = *(unsigned int *)(a2 + 5176);
  v360 = 4;
  strcpy((char *)v359, "pool");
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v233;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v234 = (char *)__dst[9];
  if (__dst[9])
  {
    v235 = (char *)__dst[10];
    v236 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v235 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v235);
      }
      while (v235 != v234);
      v236 = __dst[9];
    }
    __dst[10] = v234;
    operator delete(v236);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_198;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_198;
  }
  operator delete(__dst[0]);
LABEL_198:
  memset(__dst, 0, 96);
  v237 = (char *)operator new(0x28uLL);
  strcpy(v237, "_flyoverMaterialConstantDataItems");
  std::string::__assign_no_alias<true>(__dst, v237, 0x21uLL);
  operator delete(v237);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v238 = *(unsigned int *)(a2 + 5216);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v238;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v239 = *(unsigned int *)(a2 + 5256);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v239;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v240 = *(_QWORD *)(a2 + 5328);
  v241 = *(_QWORD *)(a2 + 5320);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v240 - v241) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v242 = *(unsigned int *)(a2 + 5392);
  v360 = 4;
  strcpy((char *)v359, "pool");
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v242;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v243 = (char *)__dst[9];
  if (__dst[9])
  {
    v244 = (char *)__dst[10];
    v245 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v244 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v244);
      }
      while (v244 != v243);
      v245 = __dst[9];
    }
    __dst[10] = v243;
    operator delete(v245);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_205;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_205;
  }
  operator delete(__dst[0]);
LABEL_205:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_sRGBBlendStyle");
  HIBYTE(__dst[2]) = 15;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v246 = *(unsigned int *)(a2 + 5824);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v246;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v247 = *(unsigned int *)(a2 + 5864);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v247;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v248 = *(_QWORD *)(a2 + 5936);
  v249 = *(_QWORD *)(a2 + 5928);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v248 - v249) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v250 = (char *)__dst[9];
  if (__dst[9])
  {
    v251 = (char *)__dst[10];
    v252 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v251 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v251);
      }
      while (v251 != v250);
      v252 = __dst[9];
    }
    __dst[10] = v250;
    operator delete(v252);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_212;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_212;
  }
  operator delete(__dst[0]);
LABEL_212:
  memset(__dst, 0, 96);
  v253 = (char *)operator new(0x20uLL);
  strcpy(v253, "_styleRouteLineMaskDataItems");
  std::string::__assign_no_alias<true>(__dst, v253, 0x1CuLL);
  operator delete(v253);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v254 = *(unsigned int *)(a2 + 1776);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v254;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v255 = *(unsigned int *)(a2 + 1816);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v255;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v256 = *(_QWORD *)(a2 + 1888);
  v257 = *(_QWORD *)(a2 + 1880);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v256 - v257) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v258 = *(unsigned int *)(a2 + 1952);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v258;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v259 = *(unsigned int *)(a2 + 1992);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v259;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v260 = *(unsigned int *)(a2 + 2032);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v260;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v261 = (char *)__dst[9];
  if (__dst[9])
  {
    v262 = (char *)__dst[10];
    v263 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v262 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v262);
      }
      while (v262 != v261);
      v263 = __dst[9];
    }
    __dst[10] = v261;
    operator delete(v263);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_219;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_219;
  }
  operator delete(__dst[0]);
LABEL_219:
  memset(__dst, 0, 96);
  v264 = (char *)operator new(0x20uLL);
  strcpy(v264, "_styleRouteLineMaskDataKeys");
  std::string::__assign_no_alias<true>(__dst, v264, 0x1BuLL);
  operator delete(v264);
  v360 = 8;
  strcpy((char *)v359, "counters");
  v265 = *(unsigned int *)(a2 + 2072);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v265;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v266 = *(unsigned int *)(a2 + 2112);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v266;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v267 = *(_QWORD *)(a2 + 2184);
  v268 = *(_QWORD *)(a2 + 2176);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v267 - v268) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v269 = *(unsigned int *)(a2 + 2248);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v269;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v270 = *(unsigned int *)(a2 + 2288);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v270;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v271 = *(unsigned int *)(a2 + 2328);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v271;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v272 = (char *)__dst[9];
  if (__dst[9])
  {
    v273 = (char *)__dst[10];
    v274 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v273 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v273);
      }
      while (v273 != v272);
      v274 = __dst[9];
    }
    __dst[10] = v272;
    operator delete(v274);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_226;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_226;
  }
  operator delete(__dst[0]);
LABEL_226:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_planarParameters");
  HIBYTE(__dst[2]) = 17;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v275 = *(unsigned int *)(a2 + 6000);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v275;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v276 = *(unsigned int *)(a2 + 6040);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v276;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v277 = *(_QWORD *)(a2 + 6112);
  v278 = *(_QWORD *)(a2 + 6104);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v277 - v278) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v279 = *(unsigned int *)(a2 + 6176);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v279;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v280 = *(unsigned int *)(a2 + 6216);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v280;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v281 = *(unsigned int *)(a2 + 6256);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v281;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v282 = (char *)__dst[9];
  if (__dst[9])
  {
    v283 = (char *)__dst[10];
    v284 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v283 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v283);
      }
      while (v283 != v282);
      v284 = __dst[9];
    }
    __dst[10] = v282;
    operator delete(v284);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_233;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_233;
  }
  operator delete(__dst[0]);
LABEL_233:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_elevatedStroke");
  HIBYTE(__dst[2]) = 15;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v285 = *(unsigned int *)(a2 + 6592);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v285;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v286 = *(unsigned int *)(a2 + 6632);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v286;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v287 = *(_QWORD *)(a2 + 6704);
  v288 = *(_QWORD *)(a2 + 6696);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v287 - v288) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v289 = *(unsigned int *)(a2 + 6768);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v289;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v290 = *(unsigned int *)(a2 + 6808);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v290;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v291 = *(unsigned int *)(a2 + 6848);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v291;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v292 = (char *)__dst[9];
  if (__dst[9])
  {
    v293 = (char *)__dst[10];
    v294 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v293 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v293);
      }
      while (v293 != v292);
      v294 = __dst[9];
    }
    __dst[10] = v292;
    operator delete(v294);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_240;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_240;
  }
  operator delete(__dst[0]);
LABEL_240:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_rasterOverlay");
  HIBYTE(__dst[2]) = 14;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v295 = *(unsigned int *)(a2 + 6888);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v295;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v296 = *(unsigned int *)(a2 + 6928);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v296;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v297 = *(_QWORD *)(a2 + 7000);
  v298 = *(_QWORD *)(a2 + 6992);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v297 - v298) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v299 = (char *)__dst[9];
  if (__dst[9])
  {
    v300 = (char *)__dst[10];
    v301 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v300 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v300);
      }
      while (v300 != v299);
      v301 = __dst[9];
    }
    __dst[10] = v299;
    operator delete(v301);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_247;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_247;
  }
  operator delete(__dst[0]);
LABEL_247:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_styleGroundOcclusion");
  HIBYTE(__dst[2]) = 21;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v302 = *(unsigned int *)(a2 + 7064);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v302;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v303 = *(unsigned int *)(a2 + 7104);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v303;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v304 = *(_QWORD *)(a2 + 7176);
  v305 = *(_QWORD *)(a2 + 7168);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v304 - v305) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v306 = *(unsigned int *)(a2 + 7240);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v306;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v307 = *(unsigned int *)(a2 + 7280);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v307;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v308 = *(unsigned int *)(a2 + 7320);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v308;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v309 = (char *)__dst[9];
  if (__dst[9])
  {
    v310 = (char *)__dst[10];
    v311 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v310 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v310);
      }
      while (v310 != v309);
      v311 = __dst[9];
    }
    __dst[10] = v309;
    operator delete(v311);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_254;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_254;
  }
  operator delete(__dst[0]);
LABEL_254:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_gradientParameters");
  HIBYTE(__dst[2]) = 19;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v312 = *(unsigned int *)(a2 + 7360);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v312;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v313 = *(unsigned int *)(a2 + 7400);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v313;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v314 = *(_QWORD *)(a2 + 7472);
  v315 = *(_QWORD *)(a2 + 7464);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = -1431655765 * ((unint64_t)(v314 - v315) >> 3);
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v316 = *(unsigned int *)(a2 + 7536);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v316;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v317 = *(unsigned int *)(a2 + 7576);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v317;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v318 = *(unsigned int *)(a2 + 7616);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v318;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v319 = (char *)__dst[9];
  if (__dst[9])
  {
    v320 = (char *)__dst[10];
    v321 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v320 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v320);
      }
      while (v320 != v319);
      v321 = __dst[9];
    }
    __dst[10] = v319;
    operator delete(v321);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if (SHIBYTE(__dst[5]) < 0)
  {
    operator delete(__dst[3]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_261;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_261;
  }
  operator delete(__dst[0]);
LABEL_261:
  memset(&__dst[3], 0, 72);
  strcpy((char *)__dst, "_materialStyle");
  HIBYTE(__dst[2]) = 14;
  v360 = 8;
  strcpy((char *)v359, "counters");
  v322 = *(unsigned int *)(a2 + 7656);
  v368 = 0;
  v369 = 0;
  v370 = 1;
  v367 = 0;
  v366 = v322;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v359, (uint64_t)v365);
  v323 = *(unsigned int *)(a2 + 7696);
  HIBYTE(v354[2]) = 16;
  strcpy((char *)v354, "countersRetained");
  v362 = 0;
  v363 = 0;
  v364 = 1;
  v361 = 0;
  v359[1] = v323;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v354, (uint64_t)v359);
  v324 = -1431655765 * ((*(_QWORD *)(a2 + 7768) - *(_QWORD *)(a2 + 7760)) >> 3);
  v349 = 5;
  strcpy(v347, "items");
  v356 = 0;
  v357 = 0;
  v358 = 1;
  v355 = 0;
  v354[1] = v324;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v347, (uint64_t)v354);
  v325 = *(unsigned int *)(a2 + 7832);
  v342 = 4;
  strcpy(v340, "pool");
  v351 = 0;
  v352 = 0;
  v353 = 1;
  v350 = 0;
  v348 = v325;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v340, (uint64_t)v347);
  v326 = *(unsigned int *)(a2 + 7872);
  v333 = 11;
  strcpy((char *)v332, "keyToHandle");
  v344 = 0;
  v345 = 0;
  v346 = 1;
  v343 = 0;
  v341 = v326;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v332, (uint64_t)v340);
  v327 = *(unsigned int *)(a2 + 7912);
  v339 = 11;
  strcpy(v338, "handleToKey");
  v335 = 0;
  v336 = 0;
  v337 = 1;
  v334 = 0;
  v332[1] = v327;
  gdc::DebugTreeNode::addProperty((uint64_t)__dst, (uint64_t)v338, (uint64_t)v332);
  gdc::DebugTreeNode::addChildNode(a1, (__int128 *)__dst);
  v328 = (char *)__dst[9];
  if (__dst[9])
  {
    v329 = (char *)__dst[10];
    v330 = __dst[9];
    if (__dst[10] != __dst[9])
    {
      do
      {
        v329 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>((uint64_t)v329);
      }
      while (v329 != v328);
      v330 = __dst[9];
    }
    __dst[10] = v328;
    operator delete(v330);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&__dst[6]);
  if ((SHIBYTE(__dst[5]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
LABEL_342:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__dst[3]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_342;
}

